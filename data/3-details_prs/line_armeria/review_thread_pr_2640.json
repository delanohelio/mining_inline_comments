{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1Njc3NjMy", "number": 2640, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNzo1MDowNVrODvAfMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMjo0Mjo0NlrOD6EXYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNjE3NjQ5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNzo1MDowNVrOGBLoZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMTowNDo1NVrOGBvV5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg5MjMyNA==", "bodyText": "Perhaps we should name the file in a similar manner with the version properties files, i.e. META-INF/com.linecorp.armeria.docstrings.annotated.properties", "url": "https://github.com/line/armeria/pull/2640#discussion_r403892324", "createdAt": "2020-04-06T07:50:05Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.tools.FileObject;\n+import javax.tools.StandardLocation;\n+\n+import com.linecorp.armeria.server.annotation.Description;\n+\n+/**\n+ * Processor that creates a properties file based on the JavaDoc/KDoc description of parameters for interfaces.\n+ * This file can be later used if the {@link Description} annotation does not exist for parameters or methods.\n+ */\n+@SupportedAnnotationTypes({\n+        \"com.linecorp.armeria.server.annotation.Post\",\n+        \"com.linecorp.armeria.server.annotation.Get\",\n+        \"com.linecorp.armeria.server.annotation.Put\",\n+        \"com.linecorp.armeria.server.annotation.Delete\",\n+        \"com.linecorp.armeria.server.annotation.Head\",\n+        \"com.linecorp.armeria.server.annotation.Options\",\n+        \"com.linecorp.armeria.server.annotation.Patch\",\n+})\n+public class DocumentationProcessor extends AbstractProcessor {\n+    private final Map<String, Properties> propertiesMap = new HashMap<>();\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        if (annotations == null || annotations.isEmpty()) {\n+            return false;\n+        }\n+        annotations.forEach(annotation -> processAnnotation(annotation, roundEnv));\n+        propertiesMap.forEach((className, properties) -> {\n+            try {\n+                writeProperties(className, properties);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        return false;\n+    }\n+\n+    private Properties readProperties(String className) throws IOException {\n+        if (propertiesMap.containsKey(className)) {\n+            return propertiesMap.get(className);\n+        }\n+        final FileObject resource = processingEnv\n+                .getFiler()\n+                .getResource(StandardLocation.CLASS_OUTPUT,\n+                             \"\",\n+                             getFileName(className));\n+        final Properties properties = new Properties();\n+        if (resource.getLastModified() == 0L) {\n+            // returns 0 if file does not exist\n+            propertiesMap.put(className, properties);\n+            return properties;\n+        }\n+        try (Reader reader = resource.openReader(false)) {\n+            properties.load(reader);\n+            return properties;\n+        }\n+    }\n+\n+    private void writeProperties(String className, Properties properties) throws IOException {\n+        if (properties.size() == 0) {\n+            return;\n+        }\n+        final FileObject resource = processingEnv.getFiler().createResource(\n+                StandardLocation.CLASS_OUTPUT,\n+                \"\",\n+                getFileName(className));\n+        try (Writer writer = resource.openWriter()) {\n+            properties.store(writer, \"Generated list of parameter description of REST interfaces.\");\n+        }\n+    }\n+\n+    private void processAnnotation(TypeElement annotationElement, RoundEnvironment roundEnv) {\n+        roundEnv.getElementsAnnotatedWith(annotationElement)\n+                .parallelStream()\n+                .filter(element -> element.getKind() == ElementKind.METHOD)\n+                // Element is always ExecutableElement because it is a method.\n+                .forEachOrdered(element -> {\n+                    try {\n+                        processMethod((ExecutableElement) element);\n+                    } catch (IOException e) {\n+                        e.printStackTrace();\n+                    }\n+                });\n+    }\n+\n+    private void processMethod(ExecutableElement method) throws IOException {\n+        final String className = ((TypeElement) method.getEnclosingElement()).getQualifiedName().toString();\n+        final Properties properties = readProperties(className);\n+        final String docComment = processingEnv.getElementUtils().getDocComment(method);\n+        if (docComment == null || !docComment.contains(\"@param\")) {\n+            return;\n+        }\n+        final List<List<String>> lines = Arrays.stream(docComment.split(\"\\\\R\"))\n+                                               .filter(line -> !line.trim().isEmpty())\n+                                               .map(line -> Arrays.stream(line.split(\"\\\\s\"))\n+                                                                  .filter(word -> !word.trim().isEmpty())\n+                                                                  .collect(toImmutableList()))\n+                                               .collect(toImmutableList());\n+        method.getParameters().forEach(param -> {\n+            final StringBuilder stringBuilder = new StringBuilder();\n+            JavaDocParserState state = JavaDocParserState.SEARCHING;\n+            for (List<String> line : lines) {\n+                final List<String> subLine;\n+                if ((line.size() < 3 ||\n+                     !\"@param\".equals(line.get(0)) ||\n+                     !param.getSimpleName().toString().equals(line.get(1))) &&\n+                    state == JavaDocParserState.SEARCHING) {\n+                    continue;\n+                } else if (state == JavaDocParserState.IN_DESCRIPTION &&\n+                           line.size() > 0 &&\n+                           \"@param\".equals(line.get(0))) {\n+                    break;\n+                } else if (state == JavaDocParserState.SEARCHING) {\n+                    subLine = line.subList(2, line.size());\n+                    state = JavaDocParserState.IN_DESCRIPTION;\n+                } else {\n+                    subLine = line;\n+                }\n+                for (String word : subLine) {\n+                    stringBuilder.append(word);\n+                    stringBuilder.append(' ');\n+                }\n+            }\n+            setProperty(properties, method, param, stringBuilder.toString().trim());\n+        });\n+    }\n+\n+    private void setProperty(Properties properties,\n+                             ExecutableElement method,\n+                             VariableElement parameter,\n+                             String description) {\n+        final String methodName = method.getSimpleName().toString();\n+        final String parameterName = parameter.getSimpleName().toString();\n+        properties.setProperty(methodName + \".\" + parameterName, description);\n+    }\n+\n+    /**\n+     * Creates the file name used in the rest api documentation properties files.\n+     * @param className The class name used for generating the file name.\n+     * @return The used file name.\n+     */\n+    public static String getFileName(String className) {\n+        return className + \"-generated-docs.properties\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "479cc487b4dca4fdc33d57026e665421e79df011"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg5MzM2OA==", "bodyText": "We could also refrain from generating multiple .properties files but appending to an existing one, so it's easier to look for when scanning them.", "url": "https://github.com/line/armeria/pull/2640#discussion_r403893368", "createdAt": "2020-04-06T07:52:09Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.tools.FileObject;\n+import javax.tools.StandardLocation;\n+\n+import com.linecorp.armeria.server.annotation.Description;\n+\n+/**\n+ * Processor that creates a properties file based on the JavaDoc/KDoc description of parameters for interfaces.\n+ * This file can be later used if the {@link Description} annotation does not exist for parameters or methods.\n+ */\n+@SupportedAnnotationTypes({\n+        \"com.linecorp.armeria.server.annotation.Post\",\n+        \"com.linecorp.armeria.server.annotation.Get\",\n+        \"com.linecorp.armeria.server.annotation.Put\",\n+        \"com.linecorp.armeria.server.annotation.Delete\",\n+        \"com.linecorp.armeria.server.annotation.Head\",\n+        \"com.linecorp.armeria.server.annotation.Options\",\n+        \"com.linecorp.armeria.server.annotation.Patch\",\n+})\n+public class DocumentationProcessor extends AbstractProcessor {\n+    private final Map<String, Properties> propertiesMap = new HashMap<>();\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        if (annotations == null || annotations.isEmpty()) {\n+            return false;\n+        }\n+        annotations.forEach(annotation -> processAnnotation(annotation, roundEnv));\n+        propertiesMap.forEach((className, properties) -> {\n+            try {\n+                writeProperties(className, properties);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        return false;\n+    }\n+\n+    private Properties readProperties(String className) throws IOException {\n+        if (propertiesMap.containsKey(className)) {\n+            return propertiesMap.get(className);\n+        }\n+        final FileObject resource = processingEnv\n+                .getFiler()\n+                .getResource(StandardLocation.CLASS_OUTPUT,\n+                             \"\",\n+                             getFileName(className));\n+        final Properties properties = new Properties();\n+        if (resource.getLastModified() == 0L) {\n+            // returns 0 if file does not exist\n+            propertiesMap.put(className, properties);\n+            return properties;\n+        }\n+        try (Reader reader = resource.openReader(false)) {\n+            properties.load(reader);\n+            return properties;\n+        }\n+    }\n+\n+    private void writeProperties(String className, Properties properties) throws IOException {\n+        if (properties.size() == 0) {\n+            return;\n+        }\n+        final FileObject resource = processingEnv.getFiler().createResource(\n+                StandardLocation.CLASS_OUTPUT,\n+                \"\",\n+                getFileName(className));\n+        try (Writer writer = resource.openWriter()) {\n+            properties.store(writer, \"Generated list of parameter description of REST interfaces.\");\n+        }\n+    }\n+\n+    private void processAnnotation(TypeElement annotationElement, RoundEnvironment roundEnv) {\n+        roundEnv.getElementsAnnotatedWith(annotationElement)\n+                .parallelStream()\n+                .filter(element -> element.getKind() == ElementKind.METHOD)\n+                // Element is always ExecutableElement because it is a method.\n+                .forEachOrdered(element -> {\n+                    try {\n+                        processMethod((ExecutableElement) element);\n+                    } catch (IOException e) {\n+                        e.printStackTrace();\n+                    }\n+                });\n+    }\n+\n+    private void processMethod(ExecutableElement method) throws IOException {\n+        final String className = ((TypeElement) method.getEnclosingElement()).getQualifiedName().toString();\n+        final Properties properties = readProperties(className);\n+        final String docComment = processingEnv.getElementUtils().getDocComment(method);\n+        if (docComment == null || !docComment.contains(\"@param\")) {\n+            return;\n+        }\n+        final List<List<String>> lines = Arrays.stream(docComment.split(\"\\\\R\"))\n+                                               .filter(line -> !line.trim().isEmpty())\n+                                               .map(line -> Arrays.stream(line.split(\"\\\\s\"))\n+                                                                  .filter(word -> !word.trim().isEmpty())\n+                                                                  .collect(toImmutableList()))\n+                                               .collect(toImmutableList());\n+        method.getParameters().forEach(param -> {\n+            final StringBuilder stringBuilder = new StringBuilder();\n+            JavaDocParserState state = JavaDocParserState.SEARCHING;\n+            for (List<String> line : lines) {\n+                final List<String> subLine;\n+                if ((line.size() < 3 ||\n+                     !\"@param\".equals(line.get(0)) ||\n+                     !param.getSimpleName().toString().equals(line.get(1))) &&\n+                    state == JavaDocParserState.SEARCHING) {\n+                    continue;\n+                } else if (state == JavaDocParserState.IN_DESCRIPTION &&\n+                           line.size() > 0 &&\n+                           \"@param\".equals(line.get(0))) {\n+                    break;\n+                } else if (state == JavaDocParserState.SEARCHING) {\n+                    subLine = line.subList(2, line.size());\n+                    state = JavaDocParserState.IN_DESCRIPTION;\n+                } else {\n+                    subLine = line;\n+                }\n+                for (String word : subLine) {\n+                    stringBuilder.append(word);\n+                    stringBuilder.append(' ');\n+                }\n+            }\n+            setProperty(properties, method, param, stringBuilder.toString().trim());\n+        });\n+    }\n+\n+    private void setProperty(Properties properties,\n+                             ExecutableElement method,\n+                             VariableElement parameter,\n+                             String description) {\n+        final String methodName = method.getSimpleName().toString();\n+        final String parameterName = parameter.getSimpleName().toString();\n+        properties.setProperty(methodName + \".\" + parameterName, description);\n+    }\n+\n+    /**\n+     * Creates the file name used in the rest api documentation properties files.\n+     * @param className The class name used for generating the file name.\n+     * @return The used file name.\n+     */\n+    public static String getFileName(String className) {\n+        return className + \"-generated-docs.properties\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg5MjMyNA=="}, "originalCommit": {"oid": "479cc487b4dca4fdc33d57026e665421e79df011"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ3NjAwOQ==", "bodyText": "Sadly, it is not possible to use the same file. The preprocessor has multiple rounds (java and kotlin, I believe) and you can open a file only once for writing, globally...\nhttps://bugs.openjdk.java.net/browse/JDK-6501983 (evaluated as not an error...)\nBut I will change the file name", "url": "https://github.com/line/armeria/pull/2640#discussion_r404476009", "createdAt": "2020-04-07T00:59:46Z", "author": {"login": "hueneburg"}, "path": "core/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.tools.FileObject;\n+import javax.tools.StandardLocation;\n+\n+import com.linecorp.armeria.server.annotation.Description;\n+\n+/**\n+ * Processor that creates a properties file based on the JavaDoc/KDoc description of parameters for interfaces.\n+ * This file can be later used if the {@link Description} annotation does not exist for parameters or methods.\n+ */\n+@SupportedAnnotationTypes({\n+        \"com.linecorp.armeria.server.annotation.Post\",\n+        \"com.linecorp.armeria.server.annotation.Get\",\n+        \"com.linecorp.armeria.server.annotation.Put\",\n+        \"com.linecorp.armeria.server.annotation.Delete\",\n+        \"com.linecorp.armeria.server.annotation.Head\",\n+        \"com.linecorp.armeria.server.annotation.Options\",\n+        \"com.linecorp.armeria.server.annotation.Patch\",\n+})\n+public class DocumentationProcessor extends AbstractProcessor {\n+    private final Map<String, Properties> propertiesMap = new HashMap<>();\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        if (annotations == null || annotations.isEmpty()) {\n+            return false;\n+        }\n+        annotations.forEach(annotation -> processAnnotation(annotation, roundEnv));\n+        propertiesMap.forEach((className, properties) -> {\n+            try {\n+                writeProperties(className, properties);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        return false;\n+    }\n+\n+    private Properties readProperties(String className) throws IOException {\n+        if (propertiesMap.containsKey(className)) {\n+            return propertiesMap.get(className);\n+        }\n+        final FileObject resource = processingEnv\n+                .getFiler()\n+                .getResource(StandardLocation.CLASS_OUTPUT,\n+                             \"\",\n+                             getFileName(className));\n+        final Properties properties = new Properties();\n+        if (resource.getLastModified() == 0L) {\n+            // returns 0 if file does not exist\n+            propertiesMap.put(className, properties);\n+            return properties;\n+        }\n+        try (Reader reader = resource.openReader(false)) {\n+            properties.load(reader);\n+            return properties;\n+        }\n+    }\n+\n+    private void writeProperties(String className, Properties properties) throws IOException {\n+        if (properties.size() == 0) {\n+            return;\n+        }\n+        final FileObject resource = processingEnv.getFiler().createResource(\n+                StandardLocation.CLASS_OUTPUT,\n+                \"\",\n+                getFileName(className));\n+        try (Writer writer = resource.openWriter()) {\n+            properties.store(writer, \"Generated list of parameter description of REST interfaces.\");\n+        }\n+    }\n+\n+    private void processAnnotation(TypeElement annotationElement, RoundEnvironment roundEnv) {\n+        roundEnv.getElementsAnnotatedWith(annotationElement)\n+                .parallelStream()\n+                .filter(element -> element.getKind() == ElementKind.METHOD)\n+                // Element is always ExecutableElement because it is a method.\n+                .forEachOrdered(element -> {\n+                    try {\n+                        processMethod((ExecutableElement) element);\n+                    } catch (IOException e) {\n+                        e.printStackTrace();\n+                    }\n+                });\n+    }\n+\n+    private void processMethod(ExecutableElement method) throws IOException {\n+        final String className = ((TypeElement) method.getEnclosingElement()).getQualifiedName().toString();\n+        final Properties properties = readProperties(className);\n+        final String docComment = processingEnv.getElementUtils().getDocComment(method);\n+        if (docComment == null || !docComment.contains(\"@param\")) {\n+            return;\n+        }\n+        final List<List<String>> lines = Arrays.stream(docComment.split(\"\\\\R\"))\n+                                               .filter(line -> !line.trim().isEmpty())\n+                                               .map(line -> Arrays.stream(line.split(\"\\\\s\"))\n+                                                                  .filter(word -> !word.trim().isEmpty())\n+                                                                  .collect(toImmutableList()))\n+                                               .collect(toImmutableList());\n+        method.getParameters().forEach(param -> {\n+            final StringBuilder stringBuilder = new StringBuilder();\n+            JavaDocParserState state = JavaDocParserState.SEARCHING;\n+            for (List<String> line : lines) {\n+                final List<String> subLine;\n+                if ((line.size() < 3 ||\n+                     !\"@param\".equals(line.get(0)) ||\n+                     !param.getSimpleName().toString().equals(line.get(1))) &&\n+                    state == JavaDocParserState.SEARCHING) {\n+                    continue;\n+                } else if (state == JavaDocParserState.IN_DESCRIPTION &&\n+                           line.size() > 0 &&\n+                           \"@param\".equals(line.get(0))) {\n+                    break;\n+                } else if (state == JavaDocParserState.SEARCHING) {\n+                    subLine = line.subList(2, line.size());\n+                    state = JavaDocParserState.IN_DESCRIPTION;\n+                } else {\n+                    subLine = line;\n+                }\n+                for (String word : subLine) {\n+                    stringBuilder.append(word);\n+                    stringBuilder.append(' ');\n+                }\n+            }\n+            setProperty(properties, method, param, stringBuilder.toString().trim());\n+        });\n+    }\n+\n+    private void setProperty(Properties properties,\n+                             ExecutableElement method,\n+                             VariableElement parameter,\n+                             String description) {\n+        final String methodName = method.getSimpleName().toString();\n+        final String parameterName = parameter.getSimpleName().toString();\n+        properties.setProperty(methodName + \".\" + parameterName, description);\n+    }\n+\n+    /**\n+     * Creates the file name used in the rest api documentation properties files.\n+     * @param className The class name used for generating the file name.\n+     * @return The used file name.\n+     */\n+    public static String getFileName(String className) {\n+        return className + \"-generated-docs.properties\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg5MjMyNA=="}, "originalCommit": {"oid": "479cc487b4dca4fdc33d57026e665421e79df011"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ3NzQxNA==", "bodyText": "Also, the getFileName method is static and public which allows you to just feed the qualified class name into this method and you have the path for the resource loader in the doc service. I think it is pretty easy to get the file name...", "url": "https://github.com/line/armeria/pull/2640#discussion_r404477414", "createdAt": "2020-04-07T01:04:55Z", "author": {"login": "hueneburg"}, "path": "core/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.tools.FileObject;\n+import javax.tools.StandardLocation;\n+\n+import com.linecorp.armeria.server.annotation.Description;\n+\n+/**\n+ * Processor that creates a properties file based on the JavaDoc/KDoc description of parameters for interfaces.\n+ * This file can be later used if the {@link Description} annotation does not exist for parameters or methods.\n+ */\n+@SupportedAnnotationTypes({\n+        \"com.linecorp.armeria.server.annotation.Post\",\n+        \"com.linecorp.armeria.server.annotation.Get\",\n+        \"com.linecorp.armeria.server.annotation.Put\",\n+        \"com.linecorp.armeria.server.annotation.Delete\",\n+        \"com.linecorp.armeria.server.annotation.Head\",\n+        \"com.linecorp.armeria.server.annotation.Options\",\n+        \"com.linecorp.armeria.server.annotation.Patch\",\n+})\n+public class DocumentationProcessor extends AbstractProcessor {\n+    private final Map<String, Properties> propertiesMap = new HashMap<>();\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        if (annotations == null || annotations.isEmpty()) {\n+            return false;\n+        }\n+        annotations.forEach(annotation -> processAnnotation(annotation, roundEnv));\n+        propertiesMap.forEach((className, properties) -> {\n+            try {\n+                writeProperties(className, properties);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        return false;\n+    }\n+\n+    private Properties readProperties(String className) throws IOException {\n+        if (propertiesMap.containsKey(className)) {\n+            return propertiesMap.get(className);\n+        }\n+        final FileObject resource = processingEnv\n+                .getFiler()\n+                .getResource(StandardLocation.CLASS_OUTPUT,\n+                             \"\",\n+                             getFileName(className));\n+        final Properties properties = new Properties();\n+        if (resource.getLastModified() == 0L) {\n+            // returns 0 if file does not exist\n+            propertiesMap.put(className, properties);\n+            return properties;\n+        }\n+        try (Reader reader = resource.openReader(false)) {\n+            properties.load(reader);\n+            return properties;\n+        }\n+    }\n+\n+    private void writeProperties(String className, Properties properties) throws IOException {\n+        if (properties.size() == 0) {\n+            return;\n+        }\n+        final FileObject resource = processingEnv.getFiler().createResource(\n+                StandardLocation.CLASS_OUTPUT,\n+                \"\",\n+                getFileName(className));\n+        try (Writer writer = resource.openWriter()) {\n+            properties.store(writer, \"Generated list of parameter description of REST interfaces.\");\n+        }\n+    }\n+\n+    private void processAnnotation(TypeElement annotationElement, RoundEnvironment roundEnv) {\n+        roundEnv.getElementsAnnotatedWith(annotationElement)\n+                .parallelStream()\n+                .filter(element -> element.getKind() == ElementKind.METHOD)\n+                // Element is always ExecutableElement because it is a method.\n+                .forEachOrdered(element -> {\n+                    try {\n+                        processMethod((ExecutableElement) element);\n+                    } catch (IOException e) {\n+                        e.printStackTrace();\n+                    }\n+                });\n+    }\n+\n+    private void processMethod(ExecutableElement method) throws IOException {\n+        final String className = ((TypeElement) method.getEnclosingElement()).getQualifiedName().toString();\n+        final Properties properties = readProperties(className);\n+        final String docComment = processingEnv.getElementUtils().getDocComment(method);\n+        if (docComment == null || !docComment.contains(\"@param\")) {\n+            return;\n+        }\n+        final List<List<String>> lines = Arrays.stream(docComment.split(\"\\\\R\"))\n+                                               .filter(line -> !line.trim().isEmpty())\n+                                               .map(line -> Arrays.stream(line.split(\"\\\\s\"))\n+                                                                  .filter(word -> !word.trim().isEmpty())\n+                                                                  .collect(toImmutableList()))\n+                                               .collect(toImmutableList());\n+        method.getParameters().forEach(param -> {\n+            final StringBuilder stringBuilder = new StringBuilder();\n+            JavaDocParserState state = JavaDocParserState.SEARCHING;\n+            for (List<String> line : lines) {\n+                final List<String> subLine;\n+                if ((line.size() < 3 ||\n+                     !\"@param\".equals(line.get(0)) ||\n+                     !param.getSimpleName().toString().equals(line.get(1))) &&\n+                    state == JavaDocParserState.SEARCHING) {\n+                    continue;\n+                } else if (state == JavaDocParserState.IN_DESCRIPTION &&\n+                           line.size() > 0 &&\n+                           \"@param\".equals(line.get(0))) {\n+                    break;\n+                } else if (state == JavaDocParserState.SEARCHING) {\n+                    subLine = line.subList(2, line.size());\n+                    state = JavaDocParserState.IN_DESCRIPTION;\n+                } else {\n+                    subLine = line;\n+                }\n+                for (String word : subLine) {\n+                    stringBuilder.append(word);\n+                    stringBuilder.append(' ');\n+                }\n+            }\n+            setProperty(properties, method, param, stringBuilder.toString().trim());\n+        });\n+    }\n+\n+    private void setProperty(Properties properties,\n+                             ExecutableElement method,\n+                             VariableElement parameter,\n+                             String description) {\n+        final String methodName = method.getSimpleName().toString();\n+        final String parameterName = parameter.getSimpleName().toString();\n+        properties.setProperty(methodName + \".\" + parameterName, description);\n+    }\n+\n+    /**\n+     * Creates the file name used in the rest api documentation properties files.\n+     * @param className The class name used for generating the file name.\n+     * @return The used file name.\n+     */\n+    public static String getFileName(String className) {\n+        return className + \"-generated-docs.properties\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg5MjMyNA=="}, "originalCommit": {"oid": "479cc487b4dca4fdc33d57026e665421e79df011"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDI4MjkzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNToxNToyN1rOGBzJuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwOTo0NTowNVrOGHpqsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUzOTgzNQ==", "bodyText": "I think we should move this to a separate artifact - some build systems will automatically run all annotation processors on classpath but it's probably better for this to be opt-in like spring boot configuration process", "url": "https://github.com/line/armeria/pull/2640#discussion_r404539835", "createdAt": "2020-04-07T05:15:27Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "897b839bc4165a615547e0b2ebb425529f994207"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMzOTIwNg==", "bodyText": "+1 - Let me wait for a follow-up commit.", "url": "https://github.com/line/armeria/pull/2640#discussion_r407339206", "createdAt": "2020-04-13T06:28:52Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUzOTgzNQ=="}, "originalCommit": {"oid": "897b839bc4165a615547e0b2ebb425529f994207"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NTg4OA==", "bodyText": "I've moved it into its own project. I hope I didn't make any mistakes \ud83d\ude4f", "url": "https://github.com/line/armeria/pull/2640#discussion_r410675888", "createdAt": "2020-04-18T09:45:05Z", "author": {"login": "hueneburg"}, "path": "core/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUzOTgzNQ=="}, "originalCommit": {"oid": "897b839bc4165a615547e0b2ebb425529f994207"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDE4MTI4OnYy", "diffSide": "RIGHT", "path": "settings.gradle", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwOTo0NzoxOFrOGHprNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMzoyNjo0NlrOGLEtWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NjAyMw==", "bodyText": "I'm not sure this is right. I'm not sure what the relocate flag does...\n@anuraaga @trustin @ikhoon @minwoox please take a look \ud83d\ude47", "url": "https://github.com/line/armeria/pull/2640#discussion_r410676023", "createdAt": "2020-04-18T09:47:18Z", "author": {"login": "hueneburg"}, "path": "settings.gradle", "diffHunk": "@@ -36,6 +36,7 @@ includeWithFlags ':tomcat8.5',                          'java', 'publish', 'relo\n includeWithFlags ':zookeeper',                          'java', 'publish', 'relocate'\n includeWithFlags ':saml',                               'java', 'publish', 'relocate'\n includeWithFlags ':bucket4j',                           'java', 'publish', 'relocate'\n+includeWithFlags ':preprocessor',                       'java', 'publish', 'relocate'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05ef87f1e1e13863b384c8eef2ebaf679405fc51"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwODQ1Mg==", "bodyText": "It's fine. relocate relocates the shaded dependencies.\nI wonder what would be the best name for this new module. It's currently armeria-preprocessor. I see some other projects use the following names:\n\njmh-generator-annprocess\nspring-boot-configuration-processor\n\narmeria-annotation-processor? \ud83e\udd14", "url": "https://github.com/line/armeria/pull/2640#discussion_r411208452", "createdAt": "2020-04-20T08:55:26Z", "author": {"login": "trustin"}, "path": "settings.gradle", "diffHunk": "@@ -36,6 +36,7 @@ includeWithFlags ':tomcat8.5',                          'java', 'publish', 'relo\n includeWithFlags ':zookeeper',                          'java', 'publish', 'relocate'\n includeWithFlags ':saml',                               'java', 'publish', 'relocate'\n includeWithFlags ':bucket4j',                           'java', 'publish', 'relocate'\n+includeWithFlags ':preprocessor',                       'java', 'publish', 'relocate'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NjAyMw=="}, "originalCommit": {"oid": "05ef87f1e1e13863b384c8eef2ebaf679405fc51"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4OTM0Mw==", "bodyText": "I've renamed the package to your suggestion", "url": "https://github.com/line/armeria/pull/2640#discussion_r412789343", "createdAt": "2020-04-22T08:41:39Z", "author": {"login": "hueneburg"}, "path": "settings.gradle", "diffHunk": "@@ -36,6 +36,7 @@ includeWithFlags ':tomcat8.5',                          'java', 'publish', 'relo\n includeWithFlags ':zookeeper',                          'java', 'publish', 'relocate'\n includeWithFlags ':saml',                               'java', 'publish', 'relocate'\n includeWithFlags ':bucket4j',                           'java', 'publish', 'relocate'\n+includeWithFlags ':preprocessor',                       'java', 'publish', 'relocate'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NjAyMw=="}, "originalCommit": {"oid": "05ef87f1e1e13863b384c8eef2ebaf679405fc51"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI2NDY2Nw==", "bodyText": "Thanks, @hueneburg", "url": "https://github.com/line/armeria/pull/2640#discussion_r414264667", "createdAt": "2020-04-24T03:26:46Z", "author": {"login": "trustin"}, "path": "settings.gradle", "diffHunk": "@@ -36,6 +36,7 @@ includeWithFlags ':tomcat8.5',                          'java', 'publish', 'relo\n includeWithFlags ':zookeeper',                          'java', 'publish', 'relocate'\n includeWithFlags ':saml',                               'java', 'publish', 'relocate'\n includeWithFlags ':bucket4j',                           'java', 'publish', 'relocate'\n+includeWithFlags ':preprocessor',                       'java', 'publish', 'relocate'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NjAyMw=="}, "originalCommit": {"oid": "05ef87f1e1e13863b384c8eef2ebaf679405fc51"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTAxNDE2OnYy", "diffSide": "RIGHT", "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMzozMzo1OFrOGLE2DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNToyODowNFrOGLHEbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI2Njg5Mg==", "bodyText": "I think we should either just stick to normal stream or have a flag to control whether this is parallel or not. Many builds have a lot of parallelism already managed by Gradle so having annotation processors also starting threads can be undesirable.", "url": "https://github.com/line/armeria/pull/2640#discussion_r414266892", "createdAt": "2020-04-24T03:33:58Z", "author": {"login": "anuraaga"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.tools.FileObject;\n+import javax.tools.StandardLocation;\n+\n+import com.linecorp.armeria.server.annotation.Description;\n+\n+/**\n+ * Processor that creates a properties file based on the JavaDoc/KDoc description of parameters for interfaces.\n+ * This file can be later used if the {@link Description} annotation does not exist for parameters or methods.\n+ */\n+@SupportedAnnotationTypes({\n+        \"com.linecorp.armeria.server.annotation.Post\",\n+        \"com.linecorp.armeria.server.annotation.Get\",\n+        \"com.linecorp.armeria.server.annotation.Put\",\n+        \"com.linecorp.armeria.server.annotation.Delete\",\n+        \"com.linecorp.armeria.server.annotation.Head\",\n+        \"com.linecorp.armeria.server.annotation.Options\",\n+        \"com.linecorp.armeria.server.annotation.Patch\",\n+})\n+public class DocumentationProcessor extends AbstractProcessor {\n+    private final Map<String, Properties> propertiesMap = new HashMap<>();\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        if (annotations == null || annotations.isEmpty()) {\n+            return false;\n+        }\n+        annotations.forEach(annotation -> processAnnotation(annotation, roundEnv));\n+        propertiesMap.forEach((className, properties) -> {\n+            try {\n+                writeProperties(className, properties);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        return false;\n+    }\n+\n+    private Properties readProperties(String className) throws IOException {\n+        if (propertiesMap.containsKey(className)) {\n+            return propertiesMap.get(className);\n+        }\n+        final FileObject resource = processingEnv\n+                .getFiler()\n+                .getResource(StandardLocation.CLASS_OUTPUT,\n+                             \"\",\n+                             getFileName(className));\n+        final Properties properties = new Properties();\n+        if (resource.getLastModified() == 0L) {\n+            // returns 0 if file does not exist\n+            propertiesMap.put(className, properties);\n+            return properties;\n+        }\n+        try (Reader reader = resource.openReader(false)) {\n+            properties.load(reader);\n+            return properties;\n+        }\n+    }\n+\n+    private void writeProperties(String className, Properties properties) throws IOException {\n+        if (properties.size() == 0) {\n+            return;\n+        }\n+        final FileObject resource = processingEnv.getFiler().createResource(\n+                StandardLocation.CLASS_OUTPUT,\n+                \"\",\n+                getFileName(className));\n+        try (Writer writer = resource.openWriter()) {\n+            properties.store(writer, \"Generated list of parameter description of REST interfaces.\");\n+        }\n+    }\n+\n+    private void processAnnotation(TypeElement annotationElement, RoundEnvironment roundEnv) {\n+        roundEnv.getElementsAnnotatedWith(annotationElement)\n+                .parallelStream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b26245a664c2115be389ece10701ce9c80f22847"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMwMzM0Mw==", "bodyText": "+1 for stream()", "url": "https://github.com/line/armeria/pull/2640#discussion_r414303343", "createdAt": "2020-04-24T05:28:04Z", "author": {"login": "trustin"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.tools.FileObject;\n+import javax.tools.StandardLocation;\n+\n+import com.linecorp.armeria.server.annotation.Description;\n+\n+/**\n+ * Processor that creates a properties file based on the JavaDoc/KDoc description of parameters for interfaces.\n+ * This file can be later used if the {@link Description} annotation does not exist for parameters or methods.\n+ */\n+@SupportedAnnotationTypes({\n+        \"com.linecorp.armeria.server.annotation.Post\",\n+        \"com.linecorp.armeria.server.annotation.Get\",\n+        \"com.linecorp.armeria.server.annotation.Put\",\n+        \"com.linecorp.armeria.server.annotation.Delete\",\n+        \"com.linecorp.armeria.server.annotation.Head\",\n+        \"com.linecorp.armeria.server.annotation.Options\",\n+        \"com.linecorp.armeria.server.annotation.Patch\",\n+})\n+public class DocumentationProcessor extends AbstractProcessor {\n+    private final Map<String, Properties> propertiesMap = new HashMap<>();\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        if (annotations == null || annotations.isEmpty()) {\n+            return false;\n+        }\n+        annotations.forEach(annotation -> processAnnotation(annotation, roundEnv));\n+        propertiesMap.forEach((className, properties) -> {\n+            try {\n+                writeProperties(className, properties);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        return false;\n+    }\n+\n+    private Properties readProperties(String className) throws IOException {\n+        if (propertiesMap.containsKey(className)) {\n+            return propertiesMap.get(className);\n+        }\n+        final FileObject resource = processingEnv\n+                .getFiler()\n+                .getResource(StandardLocation.CLASS_OUTPUT,\n+                             \"\",\n+                             getFileName(className));\n+        final Properties properties = new Properties();\n+        if (resource.getLastModified() == 0L) {\n+            // returns 0 if file does not exist\n+            propertiesMap.put(className, properties);\n+            return properties;\n+        }\n+        try (Reader reader = resource.openReader(false)) {\n+            properties.load(reader);\n+            return properties;\n+        }\n+    }\n+\n+    private void writeProperties(String className, Properties properties) throws IOException {\n+        if (properties.size() == 0) {\n+            return;\n+        }\n+        final FileObject resource = processingEnv.getFiler().createResource(\n+                StandardLocation.CLASS_OUTPUT,\n+                \"\",\n+                getFileName(className));\n+        try (Writer writer = resource.openWriter()) {\n+            properties.store(writer, \"Generated list of parameter description of REST interfaces.\");\n+        }\n+    }\n+\n+    private void processAnnotation(TypeElement annotationElement, RoundEnvironment roundEnv) {\n+        roundEnv.getElementsAnnotatedWith(annotationElement)\n+                .parallelStream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI2Njg5Mg=="}, "originalCommit": {"oid": "b26245a664c2115be389ece10701ce9c80f22847"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTI2OTA5OnYy", "diffSide": "RIGHT", "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwMjo0NDoxOFrOGPxoyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwMjo0NDoxOFrOGPxoyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE5NTA4MA==", "bodyText": "Let's add a logger and use it.\nForget about this. \ud83d\ude05", "url": "https://github.com/line/armeria/pull/2640#discussion_r419195080", "createdAt": "2020-05-04T02:44:18Z", "author": {"login": "minwoox"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.tools.FileObject;\n+import javax.tools.StandardLocation;\n+\n+import com.linecorp.armeria.server.annotation.Description;\n+\n+/**\n+ * Processor that creates a properties file based on the JavaDoc/KDoc description of parameters for interfaces.\n+ * This file can be later used if the {@link Description} annotation does not exist for parameters or methods.\n+ */\n+@SupportedAnnotationTypes({\n+        \"com.linecorp.armeria.server.annotation.Post\",\n+        \"com.linecorp.armeria.server.annotation.Get\",\n+        \"com.linecorp.armeria.server.annotation.Put\",\n+        \"com.linecorp.armeria.server.annotation.Delete\",\n+        \"com.linecorp.armeria.server.annotation.Head\",\n+        \"com.linecorp.armeria.server.annotation.Options\",\n+        \"com.linecorp.armeria.server.annotation.Patch\",\n+})\n+public class DocumentationProcessor extends AbstractProcessor {\n+    private final Map<String, Properties> propertiesMap = new HashMap<>();\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        if (annotations == null || annotations.isEmpty()) {\n+            return false;\n+        }\n+        annotations.forEach(annotation -> processAnnotation(annotation, roundEnv));\n+        propertiesMap.forEach((className, properties) -> {\n+            try {\n+                writeProperties(className, properties);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        return false;\n+    }\n+\n+    private Properties readProperties(String className) throws IOException {\n+        if (propertiesMap.containsKey(className)) {\n+            return propertiesMap.get(className);\n+        }\n+        final FileObject resource = processingEnv\n+                .getFiler()\n+                .getResource(StandardLocation.CLASS_OUTPUT,\n+                             \"\",\n+                             getFileName(className));\n+        final Properties properties = new Properties();\n+        if (resource.getLastModified() == 0L) {\n+            // returns 0 if file does not exist\n+            propertiesMap.put(className, properties);\n+            return properties;\n+        }\n+        try (Reader reader = resource.openReader(false)) {\n+            properties.load(reader);\n+            return properties;\n+        }\n+    }\n+\n+    private void writeProperties(String className, Properties properties) throws IOException {\n+        if (properties.size() == 0) {\n+            return;\n+        }\n+        final FileObject resource = processingEnv.getFiler().createResource(\n+                StandardLocation.CLASS_OUTPUT,\n+                \"\",\n+                getFileName(className));\n+        try (Writer writer = resource.openWriter()) {\n+            properties.store(writer, \"Generated list of parameter description of REST interfaces.\");\n+        }\n+    }\n+\n+    private void processAnnotation(TypeElement annotationElement, RoundEnvironment roundEnv) {\n+        roundEnv.getElementsAnnotatedWith(annotationElement)\n+                .stream()\n+                .filter(element -> element.getKind() == ElementKind.METHOD)\n+                // Element is always ExecutableElement because it is a method.\n+                .forEachOrdered(element -> {\n+                    try {\n+                        processMethod((ExecutableElement) element);\n+                    } catch (IOException e) {\n+                        e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTQyOTA5OnYy", "diffSide": "RIGHT", "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNToyMDo1OFrOGPzBSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNToyMDo1OFrOGPzBSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIxNzczOA==", "bodyText": "nit: properties.isEmpty()", "url": "https://github.com/line/armeria/pull/2640#discussion_r419217738", "createdAt": "2020-05-04T05:20:58Z", "author": {"login": "minwoox"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.tools.FileObject;\n+import javax.tools.StandardLocation;\n+\n+import com.linecorp.armeria.server.annotation.Description;\n+\n+/**\n+ * Processor that creates a properties file based on the JavaDoc/KDoc description of parameters for interfaces.\n+ * This file can be later used if the {@link Description} annotation does not exist for parameters or methods.\n+ */\n+@SupportedAnnotationTypes({\n+        \"com.linecorp.armeria.server.annotation.Post\",\n+        \"com.linecorp.armeria.server.annotation.Get\",\n+        \"com.linecorp.armeria.server.annotation.Put\",\n+        \"com.linecorp.armeria.server.annotation.Delete\",\n+        \"com.linecorp.armeria.server.annotation.Head\",\n+        \"com.linecorp.armeria.server.annotation.Options\",\n+        \"com.linecorp.armeria.server.annotation.Patch\",\n+})\n+public class DocumentationProcessor extends AbstractProcessor {\n+    private final Map<String, Properties> propertiesMap = new HashMap<>();\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        if (annotations == null || annotations.isEmpty()) {\n+            return false;\n+        }\n+        annotations.forEach(annotation -> processAnnotation(annotation, roundEnv));\n+        propertiesMap.forEach((className, properties) -> {\n+            try {\n+                writeProperties(className, properties);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        return false;\n+    }\n+\n+    private Properties readProperties(String className) throws IOException {\n+        if (propertiesMap.containsKey(className)) {\n+            return propertiesMap.get(className);\n+        }\n+        final FileObject resource = processingEnv\n+                .getFiler()\n+                .getResource(StandardLocation.CLASS_OUTPUT,\n+                             \"\",\n+                             getFileName(className));\n+        final Properties properties = new Properties();\n+        if (resource.getLastModified() == 0L) {\n+            // returns 0 if file does not exist\n+            propertiesMap.put(className, properties);\n+            return properties;\n+        }\n+        try (Reader reader = resource.openReader(false)) {\n+            properties.load(reader);\n+            return properties;\n+        }\n+    }\n+\n+    private void writeProperties(String className, Properties properties) throws IOException {\n+        if (properties.size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTQzODc3OnYy", "diffSide": "RIGHT", "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNToyODo0M1rOGPzGuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNToyODo0M1rOGPzGuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIxOTEyOA==", "bodyText": "Could be a static method.", "url": "https://github.com/line/armeria/pull/2640#discussion_r419219128", "createdAt": "2020-05-04T05:28:43Z", "author": {"login": "minwoox"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.tools.FileObject;\n+import javax.tools.StandardLocation;\n+\n+import com.linecorp.armeria.server.annotation.Description;\n+\n+/**\n+ * Processor that creates a properties file based on the JavaDoc/KDoc description of parameters for interfaces.\n+ * This file can be later used if the {@link Description} annotation does not exist for parameters or methods.\n+ */\n+@SupportedAnnotationTypes({\n+        \"com.linecorp.armeria.server.annotation.Post\",\n+        \"com.linecorp.armeria.server.annotation.Get\",\n+        \"com.linecorp.armeria.server.annotation.Put\",\n+        \"com.linecorp.armeria.server.annotation.Delete\",\n+        \"com.linecorp.armeria.server.annotation.Head\",\n+        \"com.linecorp.armeria.server.annotation.Options\",\n+        \"com.linecorp.armeria.server.annotation.Patch\",\n+})\n+public class DocumentationProcessor extends AbstractProcessor {\n+    private final Map<String, Properties> propertiesMap = new HashMap<>();\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        if (annotations == null || annotations.isEmpty()) {\n+            return false;\n+        }\n+        annotations.forEach(annotation -> processAnnotation(annotation, roundEnv));\n+        propertiesMap.forEach((className, properties) -> {\n+            try {\n+                writeProperties(className, properties);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        return false;\n+    }\n+\n+    private Properties readProperties(String className) throws IOException {\n+        if (propertiesMap.containsKey(className)) {\n+            return propertiesMap.get(className);\n+        }\n+        final FileObject resource = processingEnv\n+                .getFiler()\n+                .getResource(StandardLocation.CLASS_OUTPUT,\n+                             \"\",\n+                             getFileName(className));\n+        final Properties properties = new Properties();\n+        if (resource.getLastModified() == 0L) {\n+            // returns 0 if file does not exist\n+            propertiesMap.put(className, properties);\n+            return properties;\n+        }\n+        try (Reader reader = resource.openReader(false)) {\n+            properties.load(reader);\n+            return properties;\n+        }\n+    }\n+\n+    private void writeProperties(String className, Properties properties) throws IOException {\n+        if (properties.size() == 0) {\n+            return;\n+        }\n+        final FileObject resource = processingEnv.getFiler().createResource(\n+                StandardLocation.CLASS_OUTPUT,\n+                \"\",\n+                getFileName(className));\n+        try (Writer writer = resource.openWriter()) {\n+            properties.store(writer, \"Generated list of parameter description of REST interfaces.\");\n+        }\n+    }\n+\n+    private void processAnnotation(TypeElement annotationElement, RoundEnvironment roundEnv) {\n+        roundEnv.getElementsAnnotatedWith(annotationElement)\n+                .stream()\n+                .filter(element -> element.getKind() == ElementKind.METHOD)\n+                // Element is always ExecutableElement because it is a method.\n+                .forEachOrdered(element -> {\n+                    try {\n+                        processMethod((ExecutableElement) element);\n+                    } catch (IOException e) {\n+                        e.printStackTrace();\n+                    }\n+                });\n+    }\n+\n+    private void processMethod(ExecutableElement method) throws IOException {\n+        final String className = ((TypeElement) method.getEnclosingElement()).getQualifiedName().toString();\n+        final Properties properties = readProperties(className);\n+        final String docComment = processingEnv.getElementUtils().getDocComment(method);\n+        if (docComment == null || !docComment.contains(\"@param\")) {\n+            return;\n+        }\n+        final List<List<String>> lines = Arrays.stream(docComment.split(\"\\\\R\"))\n+                                               .filter(line -> !line.trim().isEmpty())\n+                                               .map(line -> Arrays.stream(line.split(\"\\\\s\"))\n+                                                                  .filter(word -> !word.trim().isEmpty())\n+                                                                  .collect(toImmutableList()))\n+                                               .collect(toImmutableList());\n+        method.getParameters().forEach(param -> {\n+            final StringBuilder stringBuilder = new StringBuilder();\n+            JavaDocParserState state = JavaDocParserState.SEARCHING;\n+            for (List<String> line : lines) {\n+                final List<String> subLine;\n+                if ((line.size() < 3 ||\n+                     !\"@param\".equals(line.get(0)) ||\n+                     !param.getSimpleName().toString().equals(line.get(1))) &&\n+                    state == JavaDocParserState.SEARCHING) {\n+                    continue;\n+                } else if (state == JavaDocParserState.IN_DESCRIPTION &&\n+                           line.size() > 0 &&\n+                           \"@param\".equals(line.get(0))) {\n+                    break;\n+                } else if (state == JavaDocParserState.SEARCHING) {\n+                    subLine = line.subList(2, line.size());\n+                    state = JavaDocParserState.IN_DESCRIPTION;\n+                } else {\n+                    subLine = line;\n+                }\n+                for (String word : subLine) {\n+                    stringBuilder.append(word);\n+                    stringBuilder.append(' ');\n+                }\n+            }\n+            setProperty(properties, method, param, stringBuilder.toString().trim());\n+        });\n+    }\n+\n+    private void setProperty(Properties properties,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTQzOTA3OnYy", "diffSide": "RIGHT", "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNToyODo1OFrOGPzG4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNToyODo1OFrOGPzG4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIxOTE3MQ==", "bodyText": "nit: \".\" -> '.'", "url": "https://github.com/line/armeria/pull/2640#discussion_r419219171", "createdAt": "2020-05-04T05:28:58Z", "author": {"login": "minwoox"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.tools.FileObject;\n+import javax.tools.StandardLocation;\n+\n+import com.linecorp.armeria.server.annotation.Description;\n+\n+/**\n+ * Processor that creates a properties file based on the JavaDoc/KDoc description of parameters for interfaces.\n+ * This file can be later used if the {@link Description} annotation does not exist for parameters or methods.\n+ */\n+@SupportedAnnotationTypes({\n+        \"com.linecorp.armeria.server.annotation.Post\",\n+        \"com.linecorp.armeria.server.annotation.Get\",\n+        \"com.linecorp.armeria.server.annotation.Put\",\n+        \"com.linecorp.armeria.server.annotation.Delete\",\n+        \"com.linecorp.armeria.server.annotation.Head\",\n+        \"com.linecorp.armeria.server.annotation.Options\",\n+        \"com.linecorp.armeria.server.annotation.Patch\",\n+})\n+public class DocumentationProcessor extends AbstractProcessor {\n+    private final Map<String, Properties> propertiesMap = new HashMap<>();\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        if (annotations == null || annotations.isEmpty()) {\n+            return false;\n+        }\n+        annotations.forEach(annotation -> processAnnotation(annotation, roundEnv));\n+        propertiesMap.forEach((className, properties) -> {\n+            try {\n+                writeProperties(className, properties);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        return false;\n+    }\n+\n+    private Properties readProperties(String className) throws IOException {\n+        if (propertiesMap.containsKey(className)) {\n+            return propertiesMap.get(className);\n+        }\n+        final FileObject resource = processingEnv\n+                .getFiler()\n+                .getResource(StandardLocation.CLASS_OUTPUT,\n+                             \"\",\n+                             getFileName(className));\n+        final Properties properties = new Properties();\n+        if (resource.getLastModified() == 0L) {\n+            // returns 0 if file does not exist\n+            propertiesMap.put(className, properties);\n+            return properties;\n+        }\n+        try (Reader reader = resource.openReader(false)) {\n+            properties.load(reader);\n+            return properties;\n+        }\n+    }\n+\n+    private void writeProperties(String className, Properties properties) throws IOException {\n+        if (properties.size() == 0) {\n+            return;\n+        }\n+        final FileObject resource = processingEnv.getFiler().createResource(\n+                StandardLocation.CLASS_OUTPUT,\n+                \"\",\n+                getFileName(className));\n+        try (Writer writer = resource.openWriter()) {\n+            properties.store(writer, \"Generated list of parameter description of REST interfaces.\");\n+        }\n+    }\n+\n+    private void processAnnotation(TypeElement annotationElement, RoundEnvironment roundEnv) {\n+        roundEnv.getElementsAnnotatedWith(annotationElement)\n+                .stream()\n+                .filter(element -> element.getKind() == ElementKind.METHOD)\n+                // Element is always ExecutableElement because it is a method.\n+                .forEachOrdered(element -> {\n+                    try {\n+                        processMethod((ExecutableElement) element);\n+                    } catch (IOException e) {\n+                        e.printStackTrace();\n+                    }\n+                });\n+    }\n+\n+    private void processMethod(ExecutableElement method) throws IOException {\n+        final String className = ((TypeElement) method.getEnclosingElement()).getQualifiedName().toString();\n+        final Properties properties = readProperties(className);\n+        final String docComment = processingEnv.getElementUtils().getDocComment(method);\n+        if (docComment == null || !docComment.contains(\"@param\")) {\n+            return;\n+        }\n+        final List<List<String>> lines = Arrays.stream(docComment.split(\"\\\\R\"))\n+                                               .filter(line -> !line.trim().isEmpty())\n+                                               .map(line -> Arrays.stream(line.split(\"\\\\s\"))\n+                                                                  .filter(word -> !word.trim().isEmpty())\n+                                                                  .collect(toImmutableList()))\n+                                               .collect(toImmutableList());\n+        method.getParameters().forEach(param -> {\n+            final StringBuilder stringBuilder = new StringBuilder();\n+            JavaDocParserState state = JavaDocParserState.SEARCHING;\n+            for (List<String> line : lines) {\n+                final List<String> subLine;\n+                if ((line.size() < 3 ||\n+                     !\"@param\".equals(line.get(0)) ||\n+                     !param.getSimpleName().toString().equals(line.get(1))) &&\n+                    state == JavaDocParserState.SEARCHING) {\n+                    continue;\n+                } else if (state == JavaDocParserState.IN_DESCRIPTION &&\n+                           line.size() > 0 &&\n+                           \"@param\".equals(line.get(0))) {\n+                    break;\n+                } else if (state == JavaDocParserState.SEARCHING) {\n+                    subLine = line.subList(2, line.size());\n+                    state = JavaDocParserState.IN_DESCRIPTION;\n+                } else {\n+                    subLine = line;\n+                }\n+                for (String word : subLine) {\n+                    stringBuilder.append(word);\n+                    stringBuilder.append(' ');\n+                }\n+            }\n+            setProperty(properties, method, param, stringBuilder.toString().trim());\n+        });\n+    }\n+\n+    private void setProperty(Properties properties,\n+                             ExecutableElement method,\n+                             VariableElement parameter,\n+                             String description) {\n+        final String methodName = method.getSimpleName().toString();\n+        final String parameterName = parameter.getSimpleName().toString();\n+        properties.setProperty(methodName + \".\" + parameterName, description);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTQ0MTMwOnYy", "diffSide": "RIGHT", "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/package-info.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNTozMDo1M1rOGPzIKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNTozMDo1M1rOGPzIKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIxOTQ5Ng==", "bodyText": "Let's use annotated services instead of RESTful services throughout this PR. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2640#discussion_r419219496", "createdAt": "2020-05-04T05:30:53Z", "author": {"login": "minwoox"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/package-info.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * Annotation processors for RESTful services.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTQ0OTU0OnYy", "diffSide": "RIGHT", "path": "settings.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNTozNzoxNlrOGPzM2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNTozNzoxNlrOGPzM2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyMDY5OQ==", "bodyText": "How about publishing this artifact after we implement the logic in doc service which uses the processor?", "url": "https://github.com/line/armeria/pull/2640#discussion_r419220699", "createdAt": "2020-05-04T05:37:16Z", "author": {"login": "minwoox"}, "path": "settings.gradle", "diffHunk": "@@ -36,6 +36,7 @@ includeWithFlags ':tomcat8.5',                          'java', 'publish', 'relo\n includeWithFlags ':zookeeper',                          'java', 'publish', 'relocate'\n includeWithFlags ':saml',                               'java', 'publish', 'relocate'\n includeWithFlags ':bucket4j',                           'java', 'publish', 'relocate'\n+includeWithFlags ':annotation-processor',               'java', 'publish', 'relocate'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTQ1MTMzOnYy", "diffSide": "RIGHT", "path": "annotation-processor/src/test/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNTozODo1MVrOGPzN7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNTozODo1MVrOGPzN7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyMDk3Mg==", "bodyText": "Let's use properties.getProperty", "url": "https://github.com/line/armeria/pull/2640#discussion_r419220972", "createdAt": "2020-05-04T05:38:51Z", "author": {"login": "minwoox"}, "path": "annotation-processor/src/test/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessorTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assumptions.assumeThat;\n+\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+\n+import org.joor.CompileOptions;\n+import org.joor.Reflect;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.io.CharStreams;\n+\n+import com.linecorp.armeria.common.util.SystemInfo;\n+\n+public class DocumentationProcessorTest {\n+    private final DocumentationProcessor target = new DocumentationProcessor();\n+\n+    @BeforeAll\n+    public static void classSetup() {\n+        assumeThat(SystemInfo.javaVersion()).isGreaterThanOrEqualTo(13);\n+    }\n+\n+    @Test\n+    public void withJavaDoc() throws IOException {\n+        Reflect.compile(\n+                \"com.linecorp.armeria.WithJavaDoc\",\n+                loadFile(\"WithJavaDoc.java\"),\n+                new CompileOptions().processors(target)\n+        );\n+        testAndDeleteFile(\"com.linecorp.armeria.WithJavaDoc\");\n+    }\n+\n+    @Test\n+    public void noJavaDoc() throws IOException {\n+        Reflect.compile(\n+                \"com.linecorp.armeria.NoJavaDoc\",\n+                loadFile(\"NoJavaDoc.java\"),\n+                new CompileOptions().processors(target)\n+        );\n+        final String fileName = DocumentationProcessor.getFileName(\"com.linecorp.armeria.NoJavaDoc\");\n+        assertThat(Files.notExists(Paths.get(fileName))).isTrue();\n+    }\n+\n+    private void testAndDeleteFile(String fileName) throws IOException {\n+        final Path path = Paths.get(DocumentationProcessor.getFileName(fileName));\n+        assertThat(Files.exists(path)).isTrue();\n+        final Properties properties = new Properties();\n+        properties.load(Files.newInputStream(path));\n+        assertThat(properties.get(\"a.x\")).isEqualTo(\"The x variable in a\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTQ1MTU3OnYy", "diffSide": "RIGHT", "path": "annotation-processor/src/test/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNTozODo1N1rOGPzODA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNTozODo1N1rOGPzODA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyMTAwNA==", "bodyText": "Could be static", "url": "https://github.com/line/armeria/pull/2640#discussion_r419221004", "createdAt": "2020-05-04T05:38:57Z", "author": {"login": "minwoox"}, "path": "annotation-processor/src/test/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessorTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assumptions.assumeThat;\n+\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+\n+import org.joor.CompileOptions;\n+import org.joor.Reflect;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.io.CharStreams;\n+\n+import com.linecorp.armeria.common.util.SystemInfo;\n+\n+public class DocumentationProcessorTest {\n+    private final DocumentationProcessor target = new DocumentationProcessor();\n+\n+    @BeforeAll\n+    public static void classSetup() {\n+        assumeThat(SystemInfo.javaVersion()).isGreaterThanOrEqualTo(13);\n+    }\n+\n+    @Test\n+    public void withJavaDoc() throws IOException {\n+        Reflect.compile(\n+                \"com.linecorp.armeria.WithJavaDoc\",\n+                loadFile(\"WithJavaDoc.java\"),\n+                new CompileOptions().processors(target)\n+        );\n+        testAndDeleteFile(\"com.linecorp.armeria.WithJavaDoc\");\n+    }\n+\n+    @Test\n+    public void noJavaDoc() throws IOException {\n+        Reflect.compile(\n+                \"com.linecorp.armeria.NoJavaDoc\",\n+                loadFile(\"NoJavaDoc.java\"),\n+                new CompileOptions().processors(target)\n+        );\n+        final String fileName = DocumentationProcessor.getFileName(\"com.linecorp.armeria.NoJavaDoc\");\n+        assertThat(Files.notExists(Paths.get(fileName))).isTrue();\n+    }\n+\n+    private void testAndDeleteFile(String fileName) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTQ2Nzg2OnYy", "diffSide": "RIGHT", "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNTo1MDozMVrOGPzXYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNTo1MDozMVrOGPzXYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyMzM5Mw==", "bodyText": "How about using a Splitter so that we don't need this line?\nprivate static final Splitter splitter = Splitter.on(\"\\n\").trimResults();\n...\nfinal List<List<String>> lines = Streams.stream(splitter.split(docComment)).map(...)", "url": "https://github.com/line/armeria/pull/2640#discussion_r419223393", "createdAt": "2020-05-04T05:50:31Z", "author": {"login": "minwoox"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.tools.FileObject;\n+import javax.tools.StandardLocation;\n+\n+import com.linecorp.armeria.server.annotation.Description;\n+\n+/**\n+ * Processor that creates a properties file based on the JavaDoc/KDoc description of parameters for interfaces.\n+ * This file can be later used if the {@link Description} annotation does not exist for parameters or methods.\n+ */\n+@SupportedAnnotationTypes({\n+        \"com.linecorp.armeria.server.annotation.Post\",\n+        \"com.linecorp.armeria.server.annotation.Get\",\n+        \"com.linecorp.armeria.server.annotation.Put\",\n+        \"com.linecorp.armeria.server.annotation.Delete\",\n+        \"com.linecorp.armeria.server.annotation.Head\",\n+        \"com.linecorp.armeria.server.annotation.Options\",\n+        \"com.linecorp.armeria.server.annotation.Patch\",\n+})\n+public class DocumentationProcessor extends AbstractProcessor {\n+    private final Map<String, Properties> propertiesMap = new HashMap<>();\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        if (annotations == null || annotations.isEmpty()) {\n+            return false;\n+        }\n+        annotations.forEach(annotation -> processAnnotation(annotation, roundEnv));\n+        propertiesMap.forEach((className, properties) -> {\n+            try {\n+                writeProperties(className, properties);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        return false;\n+    }\n+\n+    private Properties readProperties(String className) throws IOException {\n+        if (propertiesMap.containsKey(className)) {\n+            return propertiesMap.get(className);\n+        }\n+        final FileObject resource = processingEnv\n+                .getFiler()\n+                .getResource(StandardLocation.CLASS_OUTPUT,\n+                             \"\",\n+                             getFileName(className));\n+        final Properties properties = new Properties();\n+        if (resource.getLastModified() == 0L) {\n+            // returns 0 if file does not exist\n+            propertiesMap.put(className, properties);\n+            return properties;\n+        }\n+        try (Reader reader = resource.openReader(false)) {\n+            properties.load(reader);\n+            return properties;\n+        }\n+    }\n+\n+    private void writeProperties(String className, Properties properties) throws IOException {\n+        if (properties.size() == 0) {\n+            return;\n+        }\n+        final FileObject resource = processingEnv.getFiler().createResource(\n+                StandardLocation.CLASS_OUTPUT,\n+                \"\",\n+                getFileName(className));\n+        try (Writer writer = resource.openWriter()) {\n+            properties.store(writer, \"Generated list of parameter description of REST interfaces.\");\n+        }\n+    }\n+\n+    private void processAnnotation(TypeElement annotationElement, RoundEnvironment roundEnv) {\n+        roundEnv.getElementsAnnotatedWith(annotationElement)\n+                .stream()\n+                .filter(element -> element.getKind() == ElementKind.METHOD)\n+                // Element is always ExecutableElement because it is a method.\n+                .forEachOrdered(element -> {\n+                    try {\n+                        processMethod((ExecutableElement) element);\n+                    } catch (IOException e) {\n+                        e.printStackTrace();\n+                    }\n+                });\n+    }\n+\n+    private void processMethod(ExecutableElement method) throws IOException {\n+        final String className = ((TypeElement) method.getEnclosingElement()).getQualifiedName().toString();\n+        final Properties properties = readProperties(className);\n+        final String docComment = processingEnv.getElementUtils().getDocComment(method);\n+        if (docComment == null || !docComment.contains(\"@param\")) {\n+            return;\n+        }\n+        final List<List<String>> lines = Arrays.stream(docComment.split(\"\\\\R\"))\n+                                               .filter(line -> !line.trim().isEmpty())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTQ2ODQ5OnYy", "diffSide": "RIGHT", "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNTo1MDo1M1rOGPzXvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMjozMTo1MVrOGRCJ0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyMzQ4Ng==", "bodyText": "Could it be just \\n? instead of \\\\R", "url": "https://github.com/line/armeria/pull/2640#discussion_r419223486", "createdAt": "2020-05-04T05:50:53Z", "author": {"login": "minwoox"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.tools.FileObject;\n+import javax.tools.StandardLocation;\n+\n+import com.linecorp.armeria.server.annotation.Description;\n+\n+/**\n+ * Processor that creates a properties file based on the JavaDoc/KDoc description of parameters for interfaces.\n+ * This file can be later used if the {@link Description} annotation does not exist for parameters or methods.\n+ */\n+@SupportedAnnotationTypes({\n+        \"com.linecorp.armeria.server.annotation.Post\",\n+        \"com.linecorp.armeria.server.annotation.Get\",\n+        \"com.linecorp.armeria.server.annotation.Put\",\n+        \"com.linecorp.armeria.server.annotation.Delete\",\n+        \"com.linecorp.armeria.server.annotation.Head\",\n+        \"com.linecorp.armeria.server.annotation.Options\",\n+        \"com.linecorp.armeria.server.annotation.Patch\",\n+})\n+public class DocumentationProcessor extends AbstractProcessor {\n+    private final Map<String, Properties> propertiesMap = new HashMap<>();\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        if (annotations == null || annotations.isEmpty()) {\n+            return false;\n+        }\n+        annotations.forEach(annotation -> processAnnotation(annotation, roundEnv));\n+        propertiesMap.forEach((className, properties) -> {\n+            try {\n+                writeProperties(className, properties);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        return false;\n+    }\n+\n+    private Properties readProperties(String className) throws IOException {\n+        if (propertiesMap.containsKey(className)) {\n+            return propertiesMap.get(className);\n+        }\n+        final FileObject resource = processingEnv\n+                .getFiler()\n+                .getResource(StandardLocation.CLASS_OUTPUT,\n+                             \"\",\n+                             getFileName(className));\n+        final Properties properties = new Properties();\n+        if (resource.getLastModified() == 0L) {\n+            // returns 0 if file does not exist\n+            propertiesMap.put(className, properties);\n+            return properties;\n+        }\n+        try (Reader reader = resource.openReader(false)) {\n+            properties.load(reader);\n+            return properties;\n+        }\n+    }\n+\n+    private void writeProperties(String className, Properties properties) throws IOException {\n+        if (properties.size() == 0) {\n+            return;\n+        }\n+        final FileObject resource = processingEnv.getFiler().createResource(\n+                StandardLocation.CLASS_OUTPUT,\n+                \"\",\n+                getFileName(className));\n+        try (Writer writer = resource.openWriter()) {\n+            properties.store(writer, \"Generated list of parameter description of REST interfaces.\");\n+        }\n+    }\n+\n+    private void processAnnotation(TypeElement annotationElement, RoundEnvironment roundEnv) {\n+        roundEnv.getElementsAnnotatedWith(annotationElement)\n+                .stream()\n+                .filter(element -> element.getKind() == ElementKind.METHOD)\n+                // Element is always ExecutableElement because it is a method.\n+                .forEachOrdered(element -> {\n+                    try {\n+                        processMethod((ExecutableElement) element);\n+                    } catch (IOException e) {\n+                        e.printStackTrace();\n+                    }\n+                });\n+    }\n+\n+    private void processMethod(ExecutableElement method) throws IOException {\n+        final String className = ((TypeElement) method.getEnclosingElement()).getQualifiedName().toString();\n+        final Properties properties = readProperties(className);\n+        final String docComment = processingEnv.getElementUtils().getDocComment(method);\n+        if (docComment == null || !docComment.contains(\"@param\")) {\n+            return;\n+        }\n+        final List<List<String>> lines = Arrays.stream(docComment.split(\"\\\\R\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwNjc2MQ==", "bodyText": "I'm not sure that works 100% of the time... for example windows and mac use \\r\\n and \\n\\r respectively for linebreaks. If I'd only used \\n, I'd have partial linebreaks leftover which could cause inconsistency in some programs (windows' notepad cannot handle \\n as a linebreak, for example)", "url": "https://github.com/line/armeria/pull/2640#discussion_r419806761", "createdAt": "2020-05-05T00:36:16Z", "author": {"login": "hueneburg"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.tools.FileObject;\n+import javax.tools.StandardLocation;\n+\n+import com.linecorp.armeria.server.annotation.Description;\n+\n+/**\n+ * Processor that creates a properties file based on the JavaDoc/KDoc description of parameters for interfaces.\n+ * This file can be later used if the {@link Description} annotation does not exist for parameters or methods.\n+ */\n+@SupportedAnnotationTypes({\n+        \"com.linecorp.armeria.server.annotation.Post\",\n+        \"com.linecorp.armeria.server.annotation.Get\",\n+        \"com.linecorp.armeria.server.annotation.Put\",\n+        \"com.linecorp.armeria.server.annotation.Delete\",\n+        \"com.linecorp.armeria.server.annotation.Head\",\n+        \"com.linecorp.armeria.server.annotation.Options\",\n+        \"com.linecorp.armeria.server.annotation.Patch\",\n+})\n+public class DocumentationProcessor extends AbstractProcessor {\n+    private final Map<String, Properties> propertiesMap = new HashMap<>();\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        if (annotations == null || annotations.isEmpty()) {\n+            return false;\n+        }\n+        annotations.forEach(annotation -> processAnnotation(annotation, roundEnv));\n+        propertiesMap.forEach((className, properties) -> {\n+            try {\n+                writeProperties(className, properties);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        return false;\n+    }\n+\n+    private Properties readProperties(String className) throws IOException {\n+        if (propertiesMap.containsKey(className)) {\n+            return propertiesMap.get(className);\n+        }\n+        final FileObject resource = processingEnv\n+                .getFiler()\n+                .getResource(StandardLocation.CLASS_OUTPUT,\n+                             \"\",\n+                             getFileName(className));\n+        final Properties properties = new Properties();\n+        if (resource.getLastModified() == 0L) {\n+            // returns 0 if file does not exist\n+            propertiesMap.put(className, properties);\n+            return properties;\n+        }\n+        try (Reader reader = resource.openReader(false)) {\n+            properties.load(reader);\n+            return properties;\n+        }\n+    }\n+\n+    private void writeProperties(String className, Properties properties) throws IOException {\n+        if (properties.size() == 0) {\n+            return;\n+        }\n+        final FileObject resource = processingEnv.getFiler().createResource(\n+                StandardLocation.CLASS_OUTPUT,\n+                \"\",\n+                getFileName(className));\n+        try (Writer writer = resource.openWriter()) {\n+            properties.store(writer, \"Generated list of parameter description of REST interfaces.\");\n+        }\n+    }\n+\n+    private void processAnnotation(TypeElement annotationElement, RoundEnvironment roundEnv) {\n+        roundEnv.getElementsAnnotatedWith(annotationElement)\n+                .stream()\n+                .filter(element -> element.getKind() == ElementKind.METHOD)\n+                // Element is always ExecutableElement because it is a method.\n+                .forEachOrdered(element -> {\n+                    try {\n+                        processMethod((ExecutableElement) element);\n+                    } catch (IOException e) {\n+                        e.printStackTrace();\n+                    }\n+                });\n+    }\n+\n+    private void processMethod(ExecutableElement method) throws IOException {\n+        final String className = ((TypeElement) method.getEnclosingElement()).getQualifiedName().toString();\n+        final Properties properties = readProperties(className);\n+        final String docComment = processingEnv.getElementUtils().getDocComment(method);\n+        if (docComment == null || !docComment.contains(\"@param\")) {\n+            return;\n+        }\n+        final List<List<String>> lines = Arrays.stream(docComment.split(\"\\\\R\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyMzQ4Ng=="}, "originalCommit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUxNDI1Ng==", "bodyText": "Ah, I didn't notice that \\R is for line break matcher. Thanks!", "url": "https://github.com/line/armeria/pull/2640#discussion_r420514256", "createdAt": "2020-05-06T02:31:51Z", "author": {"login": "minwoox"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.tools.FileObject;\n+import javax.tools.StandardLocation;\n+\n+import com.linecorp.armeria.server.annotation.Description;\n+\n+/**\n+ * Processor that creates a properties file based on the JavaDoc/KDoc description of parameters for interfaces.\n+ * This file can be later used if the {@link Description} annotation does not exist for parameters or methods.\n+ */\n+@SupportedAnnotationTypes({\n+        \"com.linecorp.armeria.server.annotation.Post\",\n+        \"com.linecorp.armeria.server.annotation.Get\",\n+        \"com.linecorp.armeria.server.annotation.Put\",\n+        \"com.linecorp.armeria.server.annotation.Delete\",\n+        \"com.linecorp.armeria.server.annotation.Head\",\n+        \"com.linecorp.armeria.server.annotation.Options\",\n+        \"com.linecorp.armeria.server.annotation.Patch\",\n+})\n+public class DocumentationProcessor extends AbstractProcessor {\n+    private final Map<String, Properties> propertiesMap = new HashMap<>();\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        if (annotations == null || annotations.isEmpty()) {\n+            return false;\n+        }\n+        annotations.forEach(annotation -> processAnnotation(annotation, roundEnv));\n+        propertiesMap.forEach((className, properties) -> {\n+            try {\n+                writeProperties(className, properties);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        return false;\n+    }\n+\n+    private Properties readProperties(String className) throws IOException {\n+        if (propertiesMap.containsKey(className)) {\n+            return propertiesMap.get(className);\n+        }\n+        final FileObject resource = processingEnv\n+                .getFiler()\n+                .getResource(StandardLocation.CLASS_OUTPUT,\n+                             \"\",\n+                             getFileName(className));\n+        final Properties properties = new Properties();\n+        if (resource.getLastModified() == 0L) {\n+            // returns 0 if file does not exist\n+            propertiesMap.put(className, properties);\n+            return properties;\n+        }\n+        try (Reader reader = resource.openReader(false)) {\n+            properties.load(reader);\n+            return properties;\n+        }\n+    }\n+\n+    private void writeProperties(String className, Properties properties) throws IOException {\n+        if (properties.size() == 0) {\n+            return;\n+        }\n+        final FileObject resource = processingEnv.getFiler().createResource(\n+                StandardLocation.CLASS_OUTPUT,\n+                \"\",\n+                getFileName(className));\n+        try (Writer writer = resource.openWriter()) {\n+            properties.store(writer, \"Generated list of parameter description of REST interfaces.\");\n+        }\n+    }\n+\n+    private void processAnnotation(TypeElement annotationElement, RoundEnvironment roundEnv) {\n+        roundEnv.getElementsAnnotatedWith(annotationElement)\n+                .stream()\n+                .filter(element -> element.getKind() == ElementKind.METHOD)\n+                // Element is always ExecutableElement because it is a method.\n+                .forEachOrdered(element -> {\n+                    try {\n+                        processMethod((ExecutableElement) element);\n+                    } catch (IOException e) {\n+                        e.printStackTrace();\n+                    }\n+                });\n+    }\n+\n+    private void processMethod(ExecutableElement method) throws IOException {\n+        final String className = ((TypeElement) method.getEnclosingElement()).getQualifiedName().toString();\n+        final Properties properties = readProperties(className);\n+        final String docComment = processingEnv.getElementUtils().getDocComment(method);\n+        if (docComment == null || !docComment.contains(\"@param\")) {\n+            return;\n+        }\n+        final List<List<String>> lines = Arrays.stream(docComment.split(\"\\\\R\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyMzQ4Ng=="}, "originalCommit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTQ2OTAzOnYy", "diffSide": "RIGHT", "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNTo1MToxMlrOGPzYCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMDozNzozNVrOGQW_gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyMzU2MA==", "bodyText": "Could it be just  (space) instead of \\\\s?", "url": "https://github.com/line/armeria/pull/2640#discussion_r419223560", "createdAt": "2020-05-04T05:51:12Z", "author": {"login": "minwoox"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.tools.FileObject;\n+import javax.tools.StandardLocation;\n+\n+import com.linecorp.armeria.server.annotation.Description;\n+\n+/**\n+ * Processor that creates a properties file based on the JavaDoc/KDoc description of parameters for interfaces.\n+ * This file can be later used if the {@link Description} annotation does not exist for parameters or methods.\n+ */\n+@SupportedAnnotationTypes({\n+        \"com.linecorp.armeria.server.annotation.Post\",\n+        \"com.linecorp.armeria.server.annotation.Get\",\n+        \"com.linecorp.armeria.server.annotation.Put\",\n+        \"com.linecorp.armeria.server.annotation.Delete\",\n+        \"com.linecorp.armeria.server.annotation.Head\",\n+        \"com.linecorp.armeria.server.annotation.Options\",\n+        \"com.linecorp.armeria.server.annotation.Patch\",\n+})\n+public class DocumentationProcessor extends AbstractProcessor {\n+    private final Map<String, Properties> propertiesMap = new HashMap<>();\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        if (annotations == null || annotations.isEmpty()) {\n+            return false;\n+        }\n+        annotations.forEach(annotation -> processAnnotation(annotation, roundEnv));\n+        propertiesMap.forEach((className, properties) -> {\n+            try {\n+                writeProperties(className, properties);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        return false;\n+    }\n+\n+    private Properties readProperties(String className) throws IOException {\n+        if (propertiesMap.containsKey(className)) {\n+            return propertiesMap.get(className);\n+        }\n+        final FileObject resource = processingEnv\n+                .getFiler()\n+                .getResource(StandardLocation.CLASS_OUTPUT,\n+                             \"\",\n+                             getFileName(className));\n+        final Properties properties = new Properties();\n+        if (resource.getLastModified() == 0L) {\n+            // returns 0 if file does not exist\n+            propertiesMap.put(className, properties);\n+            return properties;\n+        }\n+        try (Reader reader = resource.openReader(false)) {\n+            properties.load(reader);\n+            return properties;\n+        }\n+    }\n+\n+    private void writeProperties(String className, Properties properties) throws IOException {\n+        if (properties.size() == 0) {\n+            return;\n+        }\n+        final FileObject resource = processingEnv.getFiler().createResource(\n+                StandardLocation.CLASS_OUTPUT,\n+                \"\",\n+                getFileName(className));\n+        try (Writer writer = resource.openWriter()) {\n+            properties.store(writer, \"Generated list of parameter description of REST interfaces.\");\n+        }\n+    }\n+\n+    private void processAnnotation(TypeElement annotationElement, RoundEnvironment roundEnv) {\n+        roundEnv.getElementsAnnotatedWith(annotationElement)\n+                .stream()\n+                .filter(element -> element.getKind() == ElementKind.METHOD)\n+                // Element is always ExecutableElement because it is a method.\n+                .forEachOrdered(element -> {\n+                    try {\n+                        processMethod((ExecutableElement) element);\n+                    } catch (IOException e) {\n+                        e.printStackTrace();\n+                    }\n+                });\n+    }\n+\n+    private void processMethod(ExecutableElement method) throws IOException {\n+        final String className = ((TypeElement) method.getEnclosingElement()).getQualifiedName().toString();\n+        final Properties properties = readProperties(className);\n+        final String docComment = processingEnv.getElementUtils().getDocComment(method);\n+        if (docComment == null || !docComment.contains(\"@param\")) {\n+            return;\n+        }\n+        final List<List<String>> lines = Arrays.stream(docComment.split(\"\\\\R\"))\n+                                               .filter(line -> !line.trim().isEmpty())\n+                                               .map(line -> Arrays.stream(line.split(\"\\\\s\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwNzEwNQ==", "bodyText": "I want to exclude any whitespaces, for example the full width \u3000 when you type with hiragana/katana input on mac. Also people might use \\t.", "url": "https://github.com/line/armeria/pull/2640#discussion_r419807105", "createdAt": "2020-05-05T00:37:35Z", "author": {"login": "hueneburg"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.tools.FileObject;\n+import javax.tools.StandardLocation;\n+\n+import com.linecorp.armeria.server.annotation.Description;\n+\n+/**\n+ * Processor that creates a properties file based on the JavaDoc/KDoc description of parameters for interfaces.\n+ * This file can be later used if the {@link Description} annotation does not exist for parameters or methods.\n+ */\n+@SupportedAnnotationTypes({\n+        \"com.linecorp.armeria.server.annotation.Post\",\n+        \"com.linecorp.armeria.server.annotation.Get\",\n+        \"com.linecorp.armeria.server.annotation.Put\",\n+        \"com.linecorp.armeria.server.annotation.Delete\",\n+        \"com.linecorp.armeria.server.annotation.Head\",\n+        \"com.linecorp.armeria.server.annotation.Options\",\n+        \"com.linecorp.armeria.server.annotation.Patch\",\n+})\n+public class DocumentationProcessor extends AbstractProcessor {\n+    private final Map<String, Properties> propertiesMap = new HashMap<>();\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        if (annotations == null || annotations.isEmpty()) {\n+            return false;\n+        }\n+        annotations.forEach(annotation -> processAnnotation(annotation, roundEnv));\n+        propertiesMap.forEach((className, properties) -> {\n+            try {\n+                writeProperties(className, properties);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        return false;\n+    }\n+\n+    private Properties readProperties(String className) throws IOException {\n+        if (propertiesMap.containsKey(className)) {\n+            return propertiesMap.get(className);\n+        }\n+        final FileObject resource = processingEnv\n+                .getFiler()\n+                .getResource(StandardLocation.CLASS_OUTPUT,\n+                             \"\",\n+                             getFileName(className));\n+        final Properties properties = new Properties();\n+        if (resource.getLastModified() == 0L) {\n+            // returns 0 if file does not exist\n+            propertiesMap.put(className, properties);\n+            return properties;\n+        }\n+        try (Reader reader = resource.openReader(false)) {\n+            properties.load(reader);\n+            return properties;\n+        }\n+    }\n+\n+    private void writeProperties(String className, Properties properties) throws IOException {\n+        if (properties.size() == 0) {\n+            return;\n+        }\n+        final FileObject resource = processingEnv.getFiler().createResource(\n+                StandardLocation.CLASS_OUTPUT,\n+                \"\",\n+                getFileName(className));\n+        try (Writer writer = resource.openWriter()) {\n+            properties.store(writer, \"Generated list of parameter description of REST interfaces.\");\n+        }\n+    }\n+\n+    private void processAnnotation(TypeElement annotationElement, RoundEnvironment roundEnv) {\n+        roundEnv.getElementsAnnotatedWith(annotationElement)\n+                .stream()\n+                .filter(element -> element.getKind() == ElementKind.METHOD)\n+                // Element is always ExecutableElement because it is a method.\n+                .forEachOrdered(element -> {\n+                    try {\n+                        processMethod((ExecutableElement) element);\n+                    } catch (IOException e) {\n+                        e.printStackTrace();\n+                    }\n+                });\n+    }\n+\n+    private void processMethod(ExecutableElement method) throws IOException {\n+        final String className = ((TypeElement) method.getEnclosingElement()).getQualifiedName().toString();\n+        final Properties properties = readProperties(className);\n+        final String docComment = processingEnv.getElementUtils().getDocComment(method);\n+        if (docComment == null || !docComment.contains(\"@param\")) {\n+            return;\n+        }\n+        final List<List<String>> lines = Arrays.stream(docComment.split(\"\\\\R\"))\n+                                               .filter(line -> !line.trim().isEmpty())\n+                                               .map(line -> Arrays.stream(line.split(\"\\\\s\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyMzU2MA=="}, "originalCommit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTQ3MDc0OnYy", "diffSide": "RIGHT", "path": "annotation-processor/src/test/resources/DocumentationProcessor/WithJavaDoc.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNTo1MjoxNlrOGPzY-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNTo1MjoxNlrOGPzY-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyMzgwMQ==", "bodyText": "How about adding a case that the parameter description is on multiple lines?", "url": "https://github.com/line/armeria/pull/2640#discussion_r419223801", "createdAt": "2020-05-04T05:52:16Z", "author": {"login": "minwoox"}, "path": "annotation-processor/src/test/resources/DocumentationProcessor/WithJavaDoc.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria;\n+\n+import com.linecorp.armeria.server.annotation.Delete;\n+import com.linecorp.armeria.server.annotation.Get;\n+import com.linecorp.armeria.server.annotation.Param;\n+import com.linecorp.armeria.server.annotation.Post;\n+import com.linecorp.armeria.server.annotation.Put;\n+\n+public class WithJavaDoc {\n+    /**\n+     * A method.\n+     * @param x The x variable in a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTY5NjE2OnYy", "diffSide": "RIGHT", "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNzozNzo0MVrOGP1ecA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMjo1Mzo0OFrOGRCc3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI1Nzk2OA==", "bodyText": "This will not cover a Javadoc which a user adds another tags such as @returns, @throws to.\nIf use switch statement, we can simplify this a little bit.\n\nouter:\nfor (List<String> line : lines) {\n    switch (state) {\n        case SEARCHING:\n            final int size = line.size();\n            if (size < 3 ||\n                !\"@param\".equals(line.get(0)) ||\n                !param.getSimpleName().toString().equals(line.get(1))) {\n                break;\n            }\n            line = line.subList(2, size);\n            state = JavaDocParserState.IN_PARAM;\n        case IN_PARAM:\n            if (!line.isEmpty()) {\n                final String first = line.get(0);\n                // break loop if first is `@xxxxx`\n                if (!first.isEmpty() && first.charAt(0) == '@') {\n                    break outer;\n                }\n\n                for (String word : line) {\n                    stringBuilder.append(word);\n                    stringBuilder.append(' ');\n                }\n            }\n            break;\n        }\n}", "url": "https://github.com/line/armeria/pull/2640#discussion_r419257968", "createdAt": "2020-05-04T07:37:41Z", "author": {"login": "ikhoon"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.tools.FileObject;\n+import javax.tools.StandardLocation;\n+\n+import com.linecorp.armeria.server.annotation.Description;\n+\n+/**\n+ * Processor that creates a properties file based on the JavaDoc/KDoc description of parameters for interfaces.\n+ * This file can be later used if the {@link Description} annotation does not exist for parameters or methods.\n+ */\n+@SupportedAnnotationTypes({\n+        \"com.linecorp.armeria.server.annotation.Post\",\n+        \"com.linecorp.armeria.server.annotation.Get\",\n+        \"com.linecorp.armeria.server.annotation.Put\",\n+        \"com.linecorp.armeria.server.annotation.Delete\",\n+        \"com.linecorp.armeria.server.annotation.Head\",\n+        \"com.linecorp.armeria.server.annotation.Options\",\n+        \"com.linecorp.armeria.server.annotation.Patch\",\n+})\n+public class DocumentationProcessor extends AbstractProcessor {\n+    private final Map<String, Properties> propertiesMap = new HashMap<>();\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        if (annotations == null || annotations.isEmpty()) {\n+            return false;\n+        }\n+        annotations.forEach(annotation -> processAnnotation(annotation, roundEnv));\n+        propertiesMap.forEach((className, properties) -> {\n+            try {\n+                writeProperties(className, properties);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        return false;\n+    }\n+\n+    private Properties readProperties(String className) throws IOException {\n+        if (propertiesMap.containsKey(className)) {\n+            return propertiesMap.get(className);\n+        }\n+        final FileObject resource = processingEnv\n+                .getFiler()\n+                .getResource(StandardLocation.CLASS_OUTPUT,\n+                             \"\",\n+                             getFileName(className));\n+        final Properties properties = new Properties();\n+        if (resource.getLastModified() == 0L) {\n+            // returns 0 if file does not exist\n+            propertiesMap.put(className, properties);\n+            return properties;\n+        }\n+        try (Reader reader = resource.openReader(false)) {\n+            properties.load(reader);\n+            return properties;\n+        }\n+    }\n+\n+    private void writeProperties(String className, Properties properties) throws IOException {\n+        if (properties.size() == 0) {\n+            return;\n+        }\n+        final FileObject resource = processingEnv.getFiler().createResource(\n+                StandardLocation.CLASS_OUTPUT,\n+                \"\",\n+                getFileName(className));\n+        try (Writer writer = resource.openWriter()) {\n+            properties.store(writer, \"Generated list of parameter description of REST interfaces.\");\n+        }\n+    }\n+\n+    private void processAnnotation(TypeElement annotationElement, RoundEnvironment roundEnv) {\n+        roundEnv.getElementsAnnotatedWith(annotationElement)\n+                .stream()\n+                .filter(element -> element.getKind() == ElementKind.METHOD)\n+                // Element is always ExecutableElement because it is a method.\n+                .forEachOrdered(element -> {\n+                    try {\n+                        processMethod((ExecutableElement) element);\n+                    } catch (IOException e) {\n+                        e.printStackTrace();\n+                    }\n+                });\n+    }\n+\n+    private void processMethod(ExecutableElement method) throws IOException {\n+        final String className = ((TypeElement) method.getEnclosingElement()).getQualifiedName().toString();\n+        final Properties properties = readProperties(className);\n+        final String docComment = processingEnv.getElementUtils().getDocComment(method);\n+        if (docComment == null || !docComment.contains(\"@param\")) {\n+            return;\n+        }\n+        final List<List<String>> lines = Arrays.stream(docComment.split(\"\\\\R\"))\n+                                               .filter(line -> !line.trim().isEmpty())\n+                                               .map(line -> Arrays.stream(line.split(\"\\\\s\"))\n+                                                                  .filter(word -> !word.trim().isEmpty())\n+                                                                  .collect(toImmutableList()))\n+                                               .collect(toImmutableList());\n+        method.getParameters().forEach(param -> {\n+            final StringBuilder stringBuilder = new StringBuilder();\n+            JavaDocParserState state = JavaDocParserState.SEARCHING;\n+            for (List<String> line : lines) {\n+                final List<String> subLine;\n+                if ((line.size() < 3 ||\n+                     !\"@param\".equals(line.get(0)) ||\n+                     !param.getSimpleName().toString().equals(line.get(1))) &&\n+                    state == JavaDocParserState.SEARCHING) {\n+                    continue;\n+                } else if (state == JavaDocParserState.IN_DESCRIPTION &&\n+                           line.size() > 0 &&\n+                           \"@param\".equals(line.get(0))) {\n+                    break;\n+                } else if (state == JavaDocParserState.SEARCHING) {\n+                    subLine = line.subList(2, line.size());\n+                    state = JavaDocParserState.IN_DESCRIPTION;\n+                } else {\n+                    subLine = line;\n+                }\n+                for (String word : subLine) {\n+                    stringBuilder.append(word);\n+                    stringBuilder.append(' ');\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgxOTMzNg==", "bodyText": "I disagree that 2 is simpler than my approach. I dislike the labeled break...\nI've added tests for @throws and @return and added handling for them...", "url": "https://github.com/line/armeria/pull/2640#discussion_r419819336", "createdAt": "2020-05-05T01:26:33Z", "author": {"login": "hueneburg"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.tools.FileObject;\n+import javax.tools.StandardLocation;\n+\n+import com.linecorp.armeria.server.annotation.Description;\n+\n+/**\n+ * Processor that creates a properties file based on the JavaDoc/KDoc description of parameters for interfaces.\n+ * This file can be later used if the {@link Description} annotation does not exist for parameters or methods.\n+ */\n+@SupportedAnnotationTypes({\n+        \"com.linecorp.armeria.server.annotation.Post\",\n+        \"com.linecorp.armeria.server.annotation.Get\",\n+        \"com.linecorp.armeria.server.annotation.Put\",\n+        \"com.linecorp.armeria.server.annotation.Delete\",\n+        \"com.linecorp.armeria.server.annotation.Head\",\n+        \"com.linecorp.armeria.server.annotation.Options\",\n+        \"com.linecorp.armeria.server.annotation.Patch\",\n+})\n+public class DocumentationProcessor extends AbstractProcessor {\n+    private final Map<String, Properties> propertiesMap = new HashMap<>();\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        if (annotations == null || annotations.isEmpty()) {\n+            return false;\n+        }\n+        annotations.forEach(annotation -> processAnnotation(annotation, roundEnv));\n+        propertiesMap.forEach((className, properties) -> {\n+            try {\n+                writeProperties(className, properties);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        return false;\n+    }\n+\n+    private Properties readProperties(String className) throws IOException {\n+        if (propertiesMap.containsKey(className)) {\n+            return propertiesMap.get(className);\n+        }\n+        final FileObject resource = processingEnv\n+                .getFiler()\n+                .getResource(StandardLocation.CLASS_OUTPUT,\n+                             \"\",\n+                             getFileName(className));\n+        final Properties properties = new Properties();\n+        if (resource.getLastModified() == 0L) {\n+            // returns 0 if file does not exist\n+            propertiesMap.put(className, properties);\n+            return properties;\n+        }\n+        try (Reader reader = resource.openReader(false)) {\n+            properties.load(reader);\n+            return properties;\n+        }\n+    }\n+\n+    private void writeProperties(String className, Properties properties) throws IOException {\n+        if (properties.size() == 0) {\n+            return;\n+        }\n+        final FileObject resource = processingEnv.getFiler().createResource(\n+                StandardLocation.CLASS_OUTPUT,\n+                \"\",\n+                getFileName(className));\n+        try (Writer writer = resource.openWriter()) {\n+            properties.store(writer, \"Generated list of parameter description of REST interfaces.\");\n+        }\n+    }\n+\n+    private void processAnnotation(TypeElement annotationElement, RoundEnvironment roundEnv) {\n+        roundEnv.getElementsAnnotatedWith(annotationElement)\n+                .stream()\n+                .filter(element -> element.getKind() == ElementKind.METHOD)\n+                // Element is always ExecutableElement because it is a method.\n+                .forEachOrdered(element -> {\n+                    try {\n+                        processMethod((ExecutableElement) element);\n+                    } catch (IOException e) {\n+                        e.printStackTrace();\n+                    }\n+                });\n+    }\n+\n+    private void processMethod(ExecutableElement method) throws IOException {\n+        final String className = ((TypeElement) method.getEnclosingElement()).getQualifiedName().toString();\n+        final Properties properties = readProperties(className);\n+        final String docComment = processingEnv.getElementUtils().getDocComment(method);\n+        if (docComment == null || !docComment.contains(\"@param\")) {\n+            return;\n+        }\n+        final List<List<String>> lines = Arrays.stream(docComment.split(\"\\\\R\"))\n+                                               .filter(line -> !line.trim().isEmpty())\n+                                               .map(line -> Arrays.stream(line.split(\"\\\\s\"))\n+                                                                  .filter(word -> !word.trim().isEmpty())\n+                                                                  .collect(toImmutableList()))\n+                                               .collect(toImmutableList());\n+        method.getParameters().forEach(param -> {\n+            final StringBuilder stringBuilder = new StringBuilder();\n+            JavaDocParserState state = JavaDocParserState.SEARCHING;\n+            for (List<String> line : lines) {\n+                final List<String> subLine;\n+                if ((line.size() < 3 ||\n+                     !\"@param\".equals(line.get(0)) ||\n+                     !param.getSimpleName().toString().equals(line.get(1))) &&\n+                    state == JavaDocParserState.SEARCHING) {\n+                    continue;\n+                } else if (state == JavaDocParserState.IN_DESCRIPTION &&\n+                           line.size() > 0 &&\n+                           \"@param\".equals(line.get(0))) {\n+                    break;\n+                } else if (state == JavaDocParserState.SEARCHING) {\n+                    subLine = line.subList(2, line.size());\n+                    state = JavaDocParserState.IN_DESCRIPTION;\n+                } else {\n+                    subLine = line;\n+                }\n+                for (String word : subLine) {\n+                    stringBuilder.append(word);\n+                    stringBuilder.append(' ');\n+                }\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI1Nzk2OA=="}, "originalCommit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUxOTEzMw==", "bodyText": "I think simplicity is not a problem if it can produce the same result. (I misread your comment)\nIf you don't like the labeled break, that sounds good to me.", "url": "https://github.com/line/armeria/pull/2640#discussion_r420519133", "createdAt": "2020-05-06T02:53:48Z", "author": {"login": "ikhoon"}, "path": "annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation.processor;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.tools.FileObject;\n+import javax.tools.StandardLocation;\n+\n+import com.linecorp.armeria.server.annotation.Description;\n+\n+/**\n+ * Processor that creates a properties file based on the JavaDoc/KDoc description of parameters for interfaces.\n+ * This file can be later used if the {@link Description} annotation does not exist for parameters or methods.\n+ */\n+@SupportedAnnotationTypes({\n+        \"com.linecorp.armeria.server.annotation.Post\",\n+        \"com.linecorp.armeria.server.annotation.Get\",\n+        \"com.linecorp.armeria.server.annotation.Put\",\n+        \"com.linecorp.armeria.server.annotation.Delete\",\n+        \"com.linecorp.armeria.server.annotation.Head\",\n+        \"com.linecorp.armeria.server.annotation.Options\",\n+        \"com.linecorp.armeria.server.annotation.Patch\",\n+})\n+public class DocumentationProcessor extends AbstractProcessor {\n+    private final Map<String, Properties> propertiesMap = new HashMap<>();\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        if (annotations == null || annotations.isEmpty()) {\n+            return false;\n+        }\n+        annotations.forEach(annotation -> processAnnotation(annotation, roundEnv));\n+        propertiesMap.forEach((className, properties) -> {\n+            try {\n+                writeProperties(className, properties);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        return false;\n+    }\n+\n+    private Properties readProperties(String className) throws IOException {\n+        if (propertiesMap.containsKey(className)) {\n+            return propertiesMap.get(className);\n+        }\n+        final FileObject resource = processingEnv\n+                .getFiler()\n+                .getResource(StandardLocation.CLASS_OUTPUT,\n+                             \"\",\n+                             getFileName(className));\n+        final Properties properties = new Properties();\n+        if (resource.getLastModified() == 0L) {\n+            // returns 0 if file does not exist\n+            propertiesMap.put(className, properties);\n+            return properties;\n+        }\n+        try (Reader reader = resource.openReader(false)) {\n+            properties.load(reader);\n+            return properties;\n+        }\n+    }\n+\n+    private void writeProperties(String className, Properties properties) throws IOException {\n+        if (properties.size() == 0) {\n+            return;\n+        }\n+        final FileObject resource = processingEnv.getFiler().createResource(\n+                StandardLocation.CLASS_OUTPUT,\n+                \"\",\n+                getFileName(className));\n+        try (Writer writer = resource.openWriter()) {\n+            properties.store(writer, \"Generated list of parameter description of REST interfaces.\");\n+        }\n+    }\n+\n+    private void processAnnotation(TypeElement annotationElement, RoundEnvironment roundEnv) {\n+        roundEnv.getElementsAnnotatedWith(annotationElement)\n+                .stream()\n+                .filter(element -> element.getKind() == ElementKind.METHOD)\n+                // Element is always ExecutableElement because it is a method.\n+                .forEachOrdered(element -> {\n+                    try {\n+                        processMethod((ExecutableElement) element);\n+                    } catch (IOException e) {\n+                        e.printStackTrace();\n+                    }\n+                });\n+    }\n+\n+    private void processMethod(ExecutableElement method) throws IOException {\n+        final String className = ((TypeElement) method.getEnclosingElement()).getQualifiedName().toString();\n+        final Properties properties = readProperties(className);\n+        final String docComment = processingEnv.getElementUtils().getDocComment(method);\n+        if (docComment == null || !docComment.contains(\"@param\")) {\n+            return;\n+        }\n+        final List<List<String>> lines = Arrays.stream(docComment.split(\"\\\\R\"))\n+                                               .filter(line -> !line.trim().isEmpty())\n+                                               .map(line -> Arrays.stream(line.split(\"\\\\s\"))\n+                                                                  .filter(word -> !word.trim().isEmpty())\n+                                                                  .collect(toImmutableList()))\n+                                               .collect(toImmutableList());\n+        method.getParameters().forEach(param -> {\n+            final StringBuilder stringBuilder = new StringBuilder();\n+            JavaDocParserState state = JavaDocParserState.SEARCHING;\n+            for (List<String> line : lines) {\n+                final List<String> subLine;\n+                if ((line.size() < 3 ||\n+                     !\"@param\".equals(line.get(0)) ||\n+                     !param.getSimpleName().toString().equals(line.get(1))) &&\n+                    state == JavaDocParserState.SEARCHING) {\n+                    continue;\n+                } else if (state == JavaDocParserState.IN_DESCRIPTION &&\n+                           line.size() > 0 &&\n+                           \"@param\".equals(line.get(0))) {\n+                    break;\n+                } else if (state == JavaDocParserState.SEARCHING) {\n+                    subLine = line.subList(2, line.size());\n+                    state = JavaDocParserState.IN_DESCRIPTION;\n+                } else {\n+                    subLine = line;\n+                }\n+                for (String word : subLine) {\n+                    stringBuilder.append(word);\n+                    stringBuilder.append(' ');\n+                }\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI1Nzk2OA=="}, "originalCommit": {"oid": "17144cc109528b1864fe6964e2f61cfc12169f82"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzc5MDM3OnYy", "diffSide": "RIGHT", "path": "annotation-processor/src/test/resources/DocumentationProcessor/WithJavaDoc.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMjo1Njo1M1rOGRCfjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMTowOTo1NVrOGRq12g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUxOTgyMw==", "bodyText": "Could you add a non-@param annotation such as @since before these lines?", "url": "https://github.com/line/armeria/pull/2640#discussion_r420519823", "createdAt": "2020-05-06T02:56:53Z", "author": {"login": "ikhoon"}, "path": "annotation-processor/src/test/resources/DocumentationProcessor/WithJavaDoc.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria;\n+\n+import com.linecorp.armeria.server.annotation.Delete;\n+import com.linecorp.armeria.server.annotation.Get;\n+import com.linecorp.armeria.server.annotation.Param;\n+import com.linecorp.armeria.server.annotation.Post;\n+import com.linecorp.armeria.server.annotation.Put;\n+\n+public class WithJavaDoc {\n+    /**\n+     * A method.\n+     * @param x The x variable in a\n+     * @param y The y variable in a\n+     */\n+    @Post(\"/a\")\n+    public void a(@Param(\"x\") String x,\n+                  @Param(\"y\") String y) {\n+        System.out.println(x + y);\n+    }\n+\n+    /**\n+     * B method.\n+     * @param x The x variable in b\n+     * @param y The y variable in b\n+     */\n+    @Put(\"/b\")\n+    public void b(@Param(\"x\") String x,\n+                  @Param(\"y\") String y) {\n+        System.out.println(x + y);\n+    }\n+\n+    /**\n+     * C method.\n+     * @param x The x variable in c\n+     * @param y The y variable in c\n+     */\n+    @Delete(\"/c/{x}/{y}\")\n+    public void c(@Param(\"x\") String x,\n+                  @Param(\"y\") String y) {\n+        System.out.println(x + y);\n+    }\n+\n+    /**\n+     * D method.\n+     * @param x The x variable in d\n+     * @param y The y variable in d\n+     */\n+    @Get(\"/d/{x}/{y}\")\n+    public void d(@Param(\"x\") String x,\n+                  @Param(\"y\") String y) {\n+        System.out.println(x + y);\n+    }\n+\n+    /**\n+     * hasReturn method.\n+     * @param x The x variable in hasReturn\n+     * @return The number 1\n+     */\n+    @Get\n+    public int hasReturn(@Param(\"x\") String x) {\n+        System.out.println(x);\n+        return 1;\n+    }\n+\n+    /**\n+     * hasThrows method.\n+     * @param x The x variable in hasThrows\n+     * @throws IllegalArgumentException when x is empty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd5901513e1c05599252e7299028a028715fec6b"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE4MDg5MA==", "bodyText": "done", "url": "https://github.com/line/armeria/pull/2640#discussion_r421180890", "createdAt": "2020-05-07T01:09:55Z", "author": {"login": "hueneburg"}, "path": "annotation-processor/src/test/resources/DocumentationProcessor/WithJavaDoc.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria;\n+\n+import com.linecorp.armeria.server.annotation.Delete;\n+import com.linecorp.armeria.server.annotation.Get;\n+import com.linecorp.armeria.server.annotation.Param;\n+import com.linecorp.armeria.server.annotation.Post;\n+import com.linecorp.armeria.server.annotation.Put;\n+\n+public class WithJavaDoc {\n+    /**\n+     * A method.\n+     * @param x The x variable in a\n+     * @param y The y variable in a\n+     */\n+    @Post(\"/a\")\n+    public void a(@Param(\"x\") String x,\n+                  @Param(\"y\") String y) {\n+        System.out.println(x + y);\n+    }\n+\n+    /**\n+     * B method.\n+     * @param x The x variable in b\n+     * @param y The y variable in b\n+     */\n+    @Put(\"/b\")\n+    public void b(@Param(\"x\") String x,\n+                  @Param(\"y\") String y) {\n+        System.out.println(x + y);\n+    }\n+\n+    /**\n+     * C method.\n+     * @param x The x variable in c\n+     * @param y The y variable in c\n+     */\n+    @Delete(\"/c/{x}/{y}\")\n+    public void c(@Param(\"x\") String x,\n+                  @Param(\"y\") String y) {\n+        System.out.println(x + y);\n+    }\n+\n+    /**\n+     * D method.\n+     * @param x The x variable in d\n+     * @param y The y variable in d\n+     */\n+    @Get(\"/d/{x}/{y}\")\n+    public void d(@Param(\"x\") String x,\n+                  @Param(\"y\") String y) {\n+        System.out.println(x + y);\n+    }\n+\n+    /**\n+     * hasReturn method.\n+     * @param x The x variable in hasReturn\n+     * @return The number 1\n+     */\n+    @Get\n+    public int hasReturn(@Param(\"x\") String x) {\n+        System.out.println(x);\n+        return 1;\n+    }\n+\n+    /**\n+     * hasThrows method.\n+     * @param x The x variable in hasThrows\n+     * @throws IllegalArgumentException when x is empty", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUxOTgyMw=="}, "originalCommit": {"oid": "fd5901513e1c05599252e7299028a028715fec6b"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjE1NTIxOnYy", "diffSide": "RIGHT", "path": "annotation-processor/src/test/resources/DocumentationProcessor/WithJavaDoc.java.txt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMjo0Mjo0NlrOGRsXxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMjo1MTo1MVrOGRshRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwNTk1Nw==", "bodyText": "I've tested this locally, if an annotation descripotion starts with a param name,\nthe test failed.\n* @deprecated x is deprecated\n* @param x The x variable in hasReturnAndThrows\n* @return The number 1", "url": "https://github.com/line/armeria/pull/2640#discussion_r421205957", "createdAt": "2020-05-07T02:42:46Z", "author": {"login": "ikhoon"}, "path": "annotation-processor/src/test/resources/DocumentationProcessor/WithJavaDoc.java.txt", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria;\n+\n+import com.linecorp.armeria.server.annotation.Delete;\n+import com.linecorp.armeria.server.annotation.Get;\n+import com.linecorp.armeria.server.annotation.Param;\n+import com.linecorp.armeria.server.annotation.Post;\n+import com.linecorp.armeria.server.annotation.Put;\n+\n+public class WithJavaDoc {\n+    /**\n+     * A method.\n+     * @param x The x variable in a\n+     * @param y The y variable in a\n+     */\n+    @Post(\"/a\")\n+    public void a(@Param(\"x\") String x,\n+                  @Param(\"y\") String y) {\n+        System.out.println(x + y);\n+    }\n+\n+    /**\n+     * B method.\n+     * @param x The x variable in b\n+     * @param y The y variable in b\n+     */\n+    @Put(\"/b\")\n+    public void b(@Param(\"x\") String x,\n+                  @Param(\"y\") String y) {\n+        System.out.println(x + y);\n+    }\n+\n+    /**\n+     * C method.\n+     * @param x The x variable in c\n+     * @param y The y variable in c\n+     */\n+    @Delete(\"/c/{x}/{y}\")\n+    public void c(@Param(\"x\") String x,\n+                  @Param(\"y\") String y) {\n+        System.out.println(x + y);\n+    }\n+\n+    /**\n+     * D method.\n+     * @param x The x variable in d\n+     * @param y The y variable in d\n+     */\n+    @Get(\"/d/{x}/{y}\")\n+    public void d(@Param(\"x\") String x,\n+                  @Param(\"y\") String y) {\n+        System.out.println(x + y);\n+    }\n+\n+    /**\n+     * hasReturn method.\n+     * @param x The x variable in hasReturn\n+     * @return The number 1\n+     */\n+    @Get\n+    public int hasReturn(@Param(\"x\") String x) {\n+        System.out.println(x);\n+        return 1;\n+    }\n+\n+    /**\n+     * hasThrows method.\n+     * @param x The x variable in hasThrows\n+     * @throws IllegalArgumentException when x is empty\n+     */\n+    @Get\n+    public void hasThrows(@Param(\"x\") String x) {\n+        if (x.isEmpty()) {\n+            throw new IllegalArgumentException(\"x is empty\");\n+        }\n+        System.out.println(x);\n+    }\n+\n+    /**\n+     * hasReturnAndThrows method.\n+     * @since 1.4", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15f197d987fb3b00677150e229f757b02d468244"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwODM4OQ==", "bodyText": "Thanks for noticing. I've added that case to the test.", "url": "https://github.com/line/armeria/pull/2640#discussion_r421208389", "createdAt": "2020-05-07T02:51:51Z", "author": {"login": "hueneburg"}, "path": "annotation-processor/src/test/resources/DocumentationProcessor/WithJavaDoc.java.txt", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria;\n+\n+import com.linecorp.armeria.server.annotation.Delete;\n+import com.linecorp.armeria.server.annotation.Get;\n+import com.linecorp.armeria.server.annotation.Param;\n+import com.linecorp.armeria.server.annotation.Post;\n+import com.linecorp.armeria.server.annotation.Put;\n+\n+public class WithJavaDoc {\n+    /**\n+     * A method.\n+     * @param x The x variable in a\n+     * @param y The y variable in a\n+     */\n+    @Post(\"/a\")\n+    public void a(@Param(\"x\") String x,\n+                  @Param(\"y\") String y) {\n+        System.out.println(x + y);\n+    }\n+\n+    /**\n+     * B method.\n+     * @param x The x variable in b\n+     * @param y The y variable in b\n+     */\n+    @Put(\"/b\")\n+    public void b(@Param(\"x\") String x,\n+                  @Param(\"y\") String y) {\n+        System.out.println(x + y);\n+    }\n+\n+    /**\n+     * C method.\n+     * @param x The x variable in c\n+     * @param y The y variable in c\n+     */\n+    @Delete(\"/c/{x}/{y}\")\n+    public void c(@Param(\"x\") String x,\n+                  @Param(\"y\") String y) {\n+        System.out.println(x + y);\n+    }\n+\n+    /**\n+     * D method.\n+     * @param x The x variable in d\n+     * @param y The y variable in d\n+     */\n+    @Get(\"/d/{x}/{y}\")\n+    public void d(@Param(\"x\") String x,\n+                  @Param(\"y\") String y) {\n+        System.out.println(x + y);\n+    }\n+\n+    /**\n+     * hasReturn method.\n+     * @param x The x variable in hasReturn\n+     * @return The number 1\n+     */\n+    @Get\n+    public int hasReturn(@Param(\"x\") String x) {\n+        System.out.println(x);\n+        return 1;\n+    }\n+\n+    /**\n+     * hasThrows method.\n+     * @param x The x variable in hasThrows\n+     * @throws IllegalArgumentException when x is empty\n+     */\n+    @Get\n+    public void hasThrows(@Param(\"x\") String x) {\n+        if (x.isEmpty()) {\n+            throw new IllegalArgumentException(\"x is empty\");\n+        }\n+        System.out.println(x);\n+    }\n+\n+    /**\n+     * hasReturnAndThrows method.\n+     * @since 1.4", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwNTk1Nw=="}, "originalCommit": {"oid": "15f197d987fb3b00677150e229f757b02d468244"}, "originalPosition": 96}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2827, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}