{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMzc2ODQ2", "number": 2548, "title": "Do not add additionalTrailers to ResponseHeaders", "bodyText": "Motivation:\nCurrently, we combine additionalResponseTrailers to the ResponseHeaders if the EOS of the ResponseHeaders is true.\nI think we do this because, in gRPC, there's a chance that only trailers is sent to the client so we combine them.\nHowever, the response can consist of just only ResponseHeaders and trailers. (i.e no data)\nSo I think we can just combine the trailers to ResponseHeaders in gRPC especially, and let the user send the trailers without data.\nModifications:\n\nAdd mutateAdditionalResponse(Headers|Trailers) which takes a Consumer\nAdd mutateAdditionalRequestHeaders which takes a Consumer\nThrow an exception when HttpResponse and AggregatedHttpResponse is created with the ResponseHeaders whose status is informational.\n\nResult:\n\nClose #2544\nYou now can send the trailers even when the content is empty.\n(Breaking)\n\nMethods adding and removing additional headers and trailers are gone from ClientRequestContext and ServiceRequestContext except:\n\naddAdditionalResponseHeader()\nsetAdditionalResponseHeader()\naddAdditionalResponseTrailer()\nsetAdditionalResponseTrailer()\naddAdditionalRequestHeader()\nsetAdditionalRequestHeader()", "createdAt": "2020-03-04T07:09:24Z", "url": "https://github.com/line/armeria/pull/2548", "merged": true, "mergeCommit": {"oid": "e947c9ad4d5c7c23c0dfd7526c301f3c6d9da9bc"}, "closed": true, "closedAt": "2020-03-10T04:10:34Z", "author": {"login": "minwoox"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKRdMgAH2gAyMzgzMzc2ODQ2Ojc2NzI4ODY3ODk4ZTA2ZjRkOWIzODhhYjU5MzJjM2I4MGI4NGYxZGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMJY_egFqTM3MTY0OTkyMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "76728867898e06f4d9b388ab5932c3b80b84f1da", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/76728867898e06f4d9b388ab5932c3b80b84f1da", "committedDate": "2020-03-04T07:05:36Z", "message": "Motivation:\nCurrently, we combine `additionalResponseTrailers` to the `ResponseHeaders` if the `EOS` of the `ResponseHeaders` is true.\nI think we do this because, in gRPC, there's a chance that only trailers is sent to the client so we combine them.\nHowever, the response can consist of just only `ResponseHeaders` and trailer. (i.e no data)\nSo I think we can just combine the trailers to `ResponseHeaders` in gRPC specially, and let the user send the trailers without data.\n\nModifications:\n- Add `getAndRemoveAdditionalResponseTrailer` to handle the case specially.\n- Throw an exception when `HttpResponse` and `AggregatedHttpResponse` is created with informational headers.\n- (Breaking) Remove `removeAdditionalResponseHeaders` and `removeAdditionalResonseTrailers` from ctx.\n  - I don't remember why I added this and it seems useless.\n\nResult:\n- Close #2544\n- You now can send an `HttpResponse` containing `ResponseHeaders` and trailers using `ctx.additionalResponseTrailers`."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NTYxNTc0", "url": "https://github.com/line/armeria/pull/2548#pullrequestreview-368561574", "createdAt": "2020-03-04T07:49:36Z", "commit": {"oid": "cc38adc242e785d19c0cf576639979e1ea1d6a1c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzo0OTozNlrOFxi3hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzo1MTo1NlrOFxi7DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5NTgxNQ==", "bodyText": "I don't think we should add a gRPC only API to request context interface. Actually I was expecting a gRPC only implementation to look a little hacky hence encouraging a client option or something similarly at the client level instead :)", "url": "https://github.com/line/armeria/pull/2548#discussion_r387495815", "createdAt": "2020-03-04T07:49:36Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java", "diffHunk": "@@ -564,19 +565,21 @@ default String pathParam(String name) {\n      */\n     void addAdditionalResponseHeaders(Iterable<? extends Entry<? extends CharSequence, ?>> headers);\n \n-    /**\n-     * Removes all headers with the specified {@code name}.\n-     *\n-     * @return {@code true} if at least one entry has been removed\n-     */\n-    boolean removeAdditionalResponseHeader(CharSequence name);\n-\n     /**\n      * Returns the {@link HttpHeaders} which is returned along with any other trailers when a\n      * {@link Service} completes an {@link HttpResponse}.\n      */\n     HttpHeaders additionalResponseTrailers();\n \n+    /**\n+     * Returns the {@link HttpHeaders} which is set using {@code (add|set)AdditionalResponseTrailer} and\n+     * clears the {@link HttpHeaders} so that the {@link HttpHeaders} is not sending twice when\n+     * a {@link Service} completes an {@link HttpResponse}.\n+     *\n+     * <p>This is used only when the trailers is sent as a {@link ResponseHeaders} in gRPC.\n+     */\n+    HttpHeaders getAndRemoveAdditionalResponseTrailers();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc38adc242e785d19c0cf576639979e1ea1d6a1c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5NjcxNg==", "bodyText": "That being said if we can expose this through an internal API that relies on downcast to DefaultRequestContext it's still ok", "url": "https://github.com/line/armeria/pull/2548#discussion_r387496716", "createdAt": "2020-03-04T07:51:56Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java", "diffHunk": "@@ -564,19 +565,21 @@ default String pathParam(String name) {\n      */\n     void addAdditionalResponseHeaders(Iterable<? extends Entry<? extends CharSequence, ?>> headers);\n \n-    /**\n-     * Removes all headers with the specified {@code name}.\n-     *\n-     * @return {@code true} if at least one entry has been removed\n-     */\n-    boolean removeAdditionalResponseHeader(CharSequence name);\n-\n     /**\n      * Returns the {@link HttpHeaders} which is returned along with any other trailers when a\n      * {@link Service} completes an {@link HttpResponse}.\n      */\n     HttpHeaders additionalResponseTrailers();\n \n+    /**\n+     * Returns the {@link HttpHeaders} which is set using {@code (add|set)AdditionalResponseTrailer} and\n+     * clears the {@link HttpHeaders} so that the {@link HttpHeaders} is not sending twice when\n+     * a {@link Service} completes an {@link HttpResponse}.\n+     *\n+     * <p>This is used only when the trailers is sent as a {@link ResponseHeaders} in gRPC.\n+     */\n+    HttpHeaders getAndRemoveAdditionalResponseTrailers();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5NTgxNQ=="}, "originalCommit": {"oid": "cc38adc242e785d19c0cf576639979e1ea1d6a1c"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "654161f5447bfa2b886709571e0496e544523215", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/654161f5447bfa2b886709571e0496e544523215", "committedDate": "2020-03-04T08:38:21Z", "message": "Address the comment by @anuraaga"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cc38adc242e785d19c0cf576639979e1ea1d6a1c", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/cc38adc242e785d19c0cf576639979e1ea1d6a1c", "committedDate": "2020-03-04T07:01:16Z", "message": "Motivation:\nCurrently, we combine `additionalResponseTrailers` to the `ResponseHeaders` if the `EOS` of the `ResponseHeaders` is true.\nI think we do this because, in gRPC, there's a chance that only trailers is sent to the client so we combine them.\nHowever, the response can consist of just only `ResponseHeaders` and trailer. (i.e no data)\nSo I think we can just combine the trailers to `ResponseHeaders` in gRPC specially, and let the user send the trailers without data.\n\nModifications:\n- Add `getAndRemoveAdditionalResponseTrailer` to handle the case specially.\n- Throw an exception when `HttpResponse` and `AggregatedHttpResponse` is created with informational headers.\n- (Breaking) Remove `removeAdditionalResponseHeaders` and `removeAdditionalResonseTrailers` from ctx.\n  - I don't remember why I added this and it seems useless.\n\nResult:\n- Close #2544\n- You now can send an `HttpResponse` containing `ResponseHeaders` and trailers using `ctx.additionalResponseTrailers`."}, "afterCommit": {"oid": "654161f5447bfa2b886709571e0496e544523215", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/654161f5447bfa2b886709571e0496e544523215", "committedDate": "2020-03-04T08:38:21Z", "message": "Address the comment by @anuraaga"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NTkxMjE2", "url": "https://github.com/line/armeria/pull/2548#pullrequestreview-368591216", "createdAt": "2020-03-04T08:45:45Z", "commit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwODo0NTo0NVrOFxkV3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwODo0NTo0NVrOFxkV3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUxOTk2NA==", "bodyText": "I forget if request context is unwrappable but if so better to use unwrap.", "url": "https://github.com/line/armeria/pull/2548#discussion_r387519964", "createdAt": "2020-03-04T08:45:45Z", "author": {"login": "anuraaga"}, "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/ArmeriaServerCall.java", "diffHunk": "@@ -534,6 +531,12 @@ static HttpHeaders statusToTrailers(\n                          Base64.getEncoder().encodeToString(proto.toByteArray()));\n         }\n \n+        if (ctx instanceof DefaultServiceRequestContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MzY3MjQ1", "url": "https://github.com/line/armeria/pull/2548#pullrequestreview-369367245", "createdAt": "2020-03-05T08:19:53Z", "commit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NTcxMjcy", "url": "https://github.com/line/armeria/pull/2548#pullrequestreview-369571272", "createdAt": "2020-03-05T13:36:16Z", "commit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzozNjoxNlrOFyTs7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzozNjoxNlrOFyTs7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5NTkxOA==", "bodyText": "How about using {@linkplain}?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throws IllegalArgumentException if the specified {@code statusCode} is\n          \n          \n            \n                 *                                  {@link HttpStatus#isInformational()}.\n          \n          \n            \n                 * @throws IllegalArgumentException if the specified {@code statusCode} is\n          \n          \n            \n                 *                                  {@linkplain HttpStatus#isInformational() informational}.", "url": "https://github.com/line/armeria/pull/2548#discussion_r388295918", "createdAt": "2020-03-05T13:36:16Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java", "diffHunk": "@@ -40,6 +41,9 @@\n      * Creates a new HTTP response.\n      *\n      * @param statusCode the HTTP status code\n+     *\n+     * @throws IllegalArgumentException if the specified {@code statusCode} is\n+     *                                  {@link HttpStatus#isInformational()}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NTcxNTY3", "url": "https://github.com/line/armeria/pull/2548#pullrequestreview-369571567", "createdAt": "2020-03-05T13:36:39Z", "commit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzozNjozOVrOFyTtyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzo0NjoyOVrOFyUDgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5NjEzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throws IllegalArgumentException if the specified {@link HttpStatus} is\n          \n          \n            \n                 *                                  {@link HttpStatus#isInformational()}.\n          \n          \n            \n                 * @throws IllegalArgumentException if the specified {@link HttpStatus} is\n          \n          \n            \n                 *                                  {@linkplain HttpStatus#isInformational() informational}.", "url": "https://github.com/line/armeria/pull/2548#discussion_r388296136", "createdAt": "2020-03-05T13:36:39Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java", "diffHunk": "@@ -49,9 +53,13 @@ static AggregatedHttpResponse of(int statusCode) {\n      * Creates a new HTTP response.\n      *\n      * @param status the HTTP status\n+     *\n+     * @throws IllegalArgumentException if the specified {@link HttpStatus} is\n+     *                                  {@link HttpStatus#isInformational()}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5NzExMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throws IllegalArgumentException if the status of the specified {@link ResponseHeaders} is\n          \n          \n            \n                 *                                  {@link HttpStatus#isInformational()}.\n          \n          \n            \n                 * @throws IllegalArgumentException if the status of the specified {@link ResponseHeaders} is\n          \n          \n            \n                 *                                  {@linkplain HttpStatus#isInformational() informational}.", "url": "https://github.com/line/armeria/pull/2548#discussion_r388297111", "createdAt": "2020-03-05T13:38:26Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java", "diffHunk": "@@ -159,6 +185,9 @@ static AggregatedHttpResponse of(HttpStatus status, MediaType mediaType, HttpDat\n      * Creates a new HTTP response with empty content.\n      *\n      * @param headers the HTTP headers\n+     *\n+     * @throws IllegalArgumentException if the status of the specified {@link ResponseHeaders} is\n+     *                                  {@link HttpStatus#isInformational()}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5Nzg1MQ==", "bodyText": "Missing closing parenthesis:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    checkArgument(!status.isInformational(), \"status: %s (expected: a non-1xx status\", status);\n          \n          \n            \n                    checkArgument(!status.isInformational(), \"status: %s (expected: a non-1xx status)\", status);", "url": "https://github.com/line/armeria/pull/2548#discussion_r388297851", "createdAt": "2020-03-05T13:39:42Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java", "diffHunk": "@@ -198,12 +233,18 @@ static AggregatedHttpResponse of(ResponseHeaders headers, HttpData content, Http\n      * @param headers the HTTP headers\n      * @param content the content of the HTTP response\n      * @param trailers the HTTP trailers\n+     *\n+     * @throws IllegalArgumentException if the status of the specified {@link ResponseHeaders} is\n+     *                                  {@link HttpStatus#isInformational()}.\n      */\n     static AggregatedHttpResponse of(Iterable<ResponseHeaders> informationals, ResponseHeaders headers,\n                                      HttpData content, HttpHeaders trailers) {\n \n         requireNonNull(informationals, \"informationals\");\n         requireNonNull(headers, \"headers\");\n+        final HttpStatus status = headers.status();\n+        checkArgument(!status.isInformational(), \"status: %s (expected: a non-1xx status\", status);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5OTE3Mg==", "bodyText": "Why was this removed?", "url": "https://github.com/line/armeria/pull/2548#discussion_r388299172", "createdAt": "2020-03-05T13:42:03Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpStatus.java", "diffHunk": "@@ -377,14 +377,10 @@ public static HttpStatus valueOf(String statusText) {\n \n     /**\n      * Returns {@code true} if the content of the response for the specified status code is expected to\n-     * be always empty (1xx, 204, 205 and 304 responses.)\n+     * be always empty (204, 205 and 304 responses.)\n      */\n     @SuppressWarnings(\"checkstyle:OverloadMethodsDeclarationOrder\")\n     public static boolean isContentAlwaysEmpty(int statusCode) {\n-        if (HttpStatusClass.INFORMATIONAL.contains(statusCode)) {\n-            return true;\n-        }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwMDM3OQ==", "bodyText": "Shouldn't we warn because it's true in HTTP/1?", "url": "https://github.com/line/armeria/pull/2548#discussion_r388300379", "createdAt": "2020-03-05T13:44:09Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceFactory.java", "diffHunk": "@@ -279,12 +279,6 @@ private static HttpStatus defaultResponseStatus(Method method) {\n         setAdditionalHeader(defaultTrailers, method, \"trailer\", methodAlias, \"method\",\n                             AdditionalTrailer.class, AdditionalTrailer::name, AdditionalTrailer::value);\n \n-        if (defaultHeaders.status().isContentAlwaysEmpty() && !defaultTrailers.isEmpty()) {\n-            logger.warn(\"A response with HTTP status code '{}' cannot have a content. \" +\n-                        \"Trailers defined at '{}' might be ignored.\",\n-                        defaultHeaders.status().code(), methodAlias);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwMDY2MA==", "bodyText": "Not sure why we need to rename this method. Could you explain?", "url": "https://github.com/line/armeria/pull/2548#discussion_r388300660", "createdAt": "2020-03-05T13:44:44Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java", "diffHunk": "@@ -496,33 +498,33 @@ public HttpHeaders additionalResponseHeaders() {\n     public void setAdditionalResponseHeader(CharSequence name, Object value) {\n         requireNonNull(name, \"name\");\n         requireNonNull(value, \"value\");\n-        updateAdditionalResponseHeaders(additionalResponseHeadersUpdater,\n-                                        builder -> builder.setObject(name, value));\n+        updateAdditionalHeaders(additionalResponseHeadersUpdater,\n+                                builder -> builder.setObject(name, value));\n     }\n \n     @Override\n     public void setAdditionalResponseHeaders(Iterable<? extends Entry<? extends CharSequence, ?>> headers) {\n         requireNonNull(headers, \"headers\");\n-        updateAdditionalResponseHeaders(additionalResponseHeadersUpdater,\n-                                        builder -> builder.setObject(headers));\n+        updateAdditionalHeaders(additionalResponseHeadersUpdater,\n+                                builder -> builder.setObject(headers));\n     }\n \n     @Override\n     public void addAdditionalResponseHeader(CharSequence name, Object value) {\n         requireNonNull(name, \"name\");\n         requireNonNull(value, \"value\");\n-        updateAdditionalResponseHeaders(additionalResponseHeadersUpdater,\n-                                        builder -> builder.addObject(name, value));\n+        updateAdditionalHeaders(additionalResponseHeadersUpdater,\n+                                builder -> builder.addObject(name, value));\n     }\n \n     @Override\n     public void addAdditionalResponseHeaders(Iterable<? extends Entry<? extends CharSequence, ?>> headers) {\n         requireNonNull(headers, \"headers\");\n-        updateAdditionalResponseHeaders(additionalResponseHeadersUpdater,\n-                                        builder -> builder.addObject(headers));\n+        updateAdditionalHeaders(additionalResponseHeadersUpdater,\n+                                builder -> builder.addObject(headers));\n     }\n \n-    private void updateAdditionalResponseHeaders(\n+    private void updateAdditionalHeaders(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwMTY5OQ==", "bodyText": "I don't get why this method has to be removed. Doesn't a user sometimes need to remove a header from the additional response headers? e.g. A user can write a decorator that removes an additional response header added by other service.", "url": "https://github.com/line/armeria/pull/2548#discussion_r388301699", "createdAt": "2020-03-05T13:46:29Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java", "diffHunk": "@@ -534,66 +536,50 @@ private void updateAdditionalResponseHeaders(\n         }\n     }\n \n-    @Override\n-    public boolean removeAdditionalResponseHeader(CharSequence name) {\n-        return removeAdditionalResponseHeader(additionalResponseHeadersUpdater, name);\n-    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NTg0MTA1", "url": "https://github.com/line/armeria/pull/2548#pullrequestreview-369584105", "createdAt": "2020-03-05T13:53:25Z", "commit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzo1MzoyNVrOFyUThg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzo1MzoyNVrOFyUThg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwNTc5OA==", "bodyText": "We will not need this method at all if we have mutateAdditionalResponseTrailers():\nHttpHeaders oldTrailers = ctx.additionalResponseTrailers();\nctx.mutateAdditionalResponseTrailers(mutator -> mutator.clear());", "url": "https://github.com/line/armeria/pull/2548#discussion_r388305798", "createdAt": "2020-03-05T13:53:25Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java", "diffHunk": "@@ -534,66 +536,50 @@ private void updateAdditionalResponseHeaders(\n         }\n     }\n \n-    @Override\n-    public boolean removeAdditionalResponseHeader(CharSequence name) {\n-        return removeAdditionalResponseHeader(additionalResponseHeadersUpdater, name);\n-    }\n-\n-    private boolean removeAdditionalResponseHeader(\n-            AtomicReferenceFieldUpdater<DefaultServiceRequestContext, HttpHeaders> atomicUpdater,\n-            CharSequence name) {\n-        requireNonNull(name, \"name\");\n-        for (;;) {\n-            final HttpHeaders oldValue = atomicUpdater.get(this);\n-            if (oldValue.isEmpty() || !oldValue.contains(name)) {\n-                return false;\n-            }\n-\n-            final HttpHeaders newValue = oldValue.toBuilder().removeAndThen(name).build();\n-            if (atomicUpdater.compareAndSet(this, oldValue, newValue)) {\n-                return true;\n-            }\n-        }\n-    }\n-\n     @Override\n     public HttpHeaders additionalResponseTrailers() {\n         return additionalResponseTrailers;\n     }\n \n+    /**\n+     * Returns the {@link HttpHeaders} which is set using {@code (add|set)AdditionalResponseTrailer} and\n+     * clears the {@link HttpHeaders} so that the {@link HttpHeaders} is not sending twice when\n+     * a {@link Service} completes an {@link HttpResponse}.\n+     *\n+     * <p>This is used only when the trailers is sent as a {@link ResponseHeaders} in gRPC.\n+     */\n+    public HttpHeaders getAndRemoveAdditionalResponseTrailers() {\n+        return additionalResponseTrailersUpdater.getAndSet(this, HttpHeaders.of());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "originalPosition": 97}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21cf5634920da33d0117a2c834d4f91cc03111f3", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/21cf5634920da33d0117a2c834d4f91cc03111f3", "committedDate": "2020-03-06T06:02:36Z", "message": "Address comments by @trustin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "750a4316234a01b39e2b96a008255a2ea141787b", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/750a4316234a01b39e2b96a008255a2ea141787b", "committedDate": "2020-03-06T09:34:39Z", "message": "Add mutate APIs for additional headers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMTk0MjY4", "url": "https://github.com/line/armeria/pull/2548#pullrequestreview-370194268", "createdAt": "2020-03-06T09:43:01Z", "commit": {"oid": "750a4316234a01b39e2b96a008255a2ea141787b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo0MzowMVrOFyyp3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo0MzowMVrOFyyp3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwMzAzOQ==", "bodyText": "In this class, we have 3 different withHttpHeader methods and I'm wondering if we can do the same approach here. Or at least we can deprecate this method and add a new method that takes a Consumer.", "url": "https://github.com/line/armeria/pull/2548#discussion_r388803039", "createdAt": "2020-03-06T09:43:01Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/Clients.java", "diffHunk": "@@ -477,7 +477,7 @@ public static SafeCloseable withHttpHeaders(\n         requireNonNull(headerManipulator, \"headerManipulator\");\n         return withContextCustomizer(ctx -> {\n             final HttpHeaders manipulatedHeaders = headerManipulator.apply(ctx.additionalRequestHeaders());\n-            ctx.setAdditionalRequestHeaders(manipulatedHeaders);\n+            ctx.mutateAdditionalRequestHeaders(mutator -> mutator.add(manipulatedHeaders));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "750a4316234a01b39e2b96a008255a2ea141787b"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMDQ5NDQ0", "url": "https://github.com/line/armeria/pull/2548#pullrequestreview-371049444", "createdAt": "2020-03-09T10:21:16Z", "commit": {"oid": "750a4316234a01b39e2b96a008255a2ea141787b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMDoyMToxNlrOFzhhsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMDoyNDo1NFrOFzho-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3MDk5NQ==", "bodyText": "How about reviving two methods - {add,set}AdditionalRequestHeader(CharSequence, Object) - since it's used pretty commonly?", "url": "https://github.com/line/armeria/pull/2548#discussion_r389570995", "createdAt": "2020-03-09T10:21:16Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java", "diffHunk": "@@ -632,34 +634,9 @@ ClientRequestContext newDerivedContext(RequestId id, @Nullable HttpRequest req,\n     HttpHeaders additionalRequestHeaders();\n \n     /**\n-     * Sets a header with the specified {@code name} and {@code value}. This will remove all previous values\n-     * associated with the specified {@code name}.\n-     * The header will be included when a {@link Client} sends an {@link HttpRequest}.\n-     */\n-    void setAdditionalRequestHeader(CharSequence name, Object value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "750a4316234a01b39e2b96a008255a2ea141787b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3MTcxNg==", "bodyText": "It's pretty common to specify a single header, so I'd prefer keeping them all.", "url": "https://github.com/line/armeria/pull/2548#discussion_r389571716", "createdAt": "2020-03-09T10:22:46Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/Clients.java", "diffHunk": "@@ -477,7 +477,7 @@ public static SafeCloseable withHttpHeaders(\n         requireNonNull(headerManipulator, \"headerManipulator\");\n         return withContextCustomizer(ctx -> {\n             final HttpHeaders manipulatedHeaders = headerManipulator.apply(ctx.additionalRequestHeaders());\n-            ctx.setAdditionalRequestHeaders(manipulatedHeaders);\n+            ctx.mutateAdditionalRequestHeaders(mutator -> mutator.add(manipulatedHeaders));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwMzAzOQ=="}, "originalCommit": {"oid": "750a4316234a01b39e2b96a008255a2ea141787b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3Mjg1Ng==", "bodyText": "Doesn't it still mean that informational headers have no content?", "url": "https://github.com/line/armeria/pull/2548#discussion_r389572856", "createdAt": "2020-03-09T10:24:54Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpStatus.java", "diffHunk": "@@ -377,14 +377,10 @@ public static HttpStatus valueOf(String statusText) {\n \n     /**\n      * Returns {@code true} if the content of the response for the specified status code is expected to\n-     * be always empty (1xx, 204, 205 and 304 responses.)\n+     * be always empty (204, 205 and 304 responses.)\n      */\n     @SuppressWarnings(\"checkstyle:OverloadMethodsDeclarationOrder\")\n     public static boolean isContentAlwaysEmpty(int statusCode) {\n-        if (HttpStatusClass.INFORMATIONAL.contains(statusCode)) {\n-            return true;\n-        }\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5OTE3Mg=="}, "originalCommit": {"oid": "654161f5447bfa2b886709571e0496e544523215"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0c45c2f4787d5f17dc22a864755f2b6b18433b9", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/c0c45c2f4787d5f17dc22a864755f2b6b18433b9", "committedDate": "2020-03-10T01:13:33Z", "message": "Address comments by @trustin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca6bac11c1c4ca2ae90f098a6e6604e273b078d4", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/ca6bac11c1c4ca2ae90f098a6e6604e273b078d4", "committedDate": "2020-03-10T01:16:51Z", "message": "Fix doc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNjQ5OTIw", "url": "https://github.com/line/armeria/pull/2548#pullrequestreview-371649920", "createdAt": "2020-03-10T02:49:37Z", "commit": {"oid": "ca6bac11c1c4ca2ae90f098a6e6604e273b078d4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 636, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}