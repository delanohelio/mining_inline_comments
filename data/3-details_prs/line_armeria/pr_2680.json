{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4Mzg4ODIy", "number": 2680, "title": "Add APIs for setting OAuth and basic auth headers to the ClientBuilder", "bodyText": "Motivation:\nIt would be nice if we provide APIs for setting basic auth, OAuth 1.0 and OAuth 2.0 header as we support those in the server-side.\nModifications:\n\nAdd auth(BasicToken), auth(OAuth1aToken) and auth(OAuth2Token) to AbstractClientOptionsBuilder.\nFix a bug where OAuth1a paremters are not decoded when they are percent-encoded.\n\nResult:\n\nYou can now easily set the authorization header.\n(Breaking) BasicToken, OAuth1aToken and OAuth2Token classes are moved to com.linecorp.armeria.common.auth.", "createdAt": "2020-04-24T07:50:32Z", "url": "https://github.com/line/armeria/pull/2680", "merged": true, "mergeCommit": {"oid": "fc3566d23d63f0ca3ea4ae6a68ff337654c1941f"}, "closed": true, "closedAt": "2020-05-07T07:37:55Z", "author": {"login": "minwoox"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcasopaAH2gAyNDA4Mzg4ODIyOmQzYmQ1MTliNWZlNTJlNmRlNTE1ZjNiYjFkMmEwNDU2MzlmZTM2NmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABce0F8dAFqTQwNzExNDY1OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d3bd519b5fe52e6de515f3bb1d2a045639fe366d", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/d3bd519b5fe52e6de515f3bb1d2a045639fe366d", "committedDate": "2020-04-24T07:48:20Z", "message": "Add APIs for setting OAuth and basic auth headers to the ClientBuilder\nMotivation:\nIt would be nice if we provide APIs for setting basic auth, OAuth 1.0 and OAuth 2.0 header as we support those in the server-side.\n\nModifications:\n- Add `basicAuth()`, `oAuth1a()` and `oAuth2()` to `AbstractClientOptionsBuilder`.\n- Fix a bug where OAuth1a paremters are not decoded when they are percent-encoded.\n\nResult:\n- You can now easily set the authorization header.\n- (Breaking) `OAuth1aToken` class is moved to `com.linecorp.armeria.common.auth`."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a669ee7cc6a0d3437fe5c639c500558ec298113f", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/a669ee7cc6a0d3437fe5c639c500558ec298113f", "committedDate": "2020-04-24T08:02:27Z", "message": "Use cached value"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5ODEzNDYx", "url": "https://github.com/line/armeria/pull/2680#pullrequestreview-399813461", "createdAt": "2020-04-24T10:07:25Z", "commit": {"oid": "a669ee7cc6a0d3437fe5c639c500558ec298113f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMDowNzoyNVrOGLQbpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMDoxNTowOFrOGLQuDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ1Njc0MQ==", "bodyText": "Could break the line earlier, like after ,", "url": "https://github.com/line/armeria/pull/2680#discussion_r414456741", "createdAt": "2020-04-24T10:07:25Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/AbstractClientOptionsBuilder.java", "diffHunk": "@@ -294,6 +303,55 @@ public AbstractClientOptionsBuilder setHttpHeaders(\n         return this;\n     }\n \n+    /**\n+     * Sets the\n+     * <a href=\"https://en.wikipedia.org/wiki/Basic_access_authentication\">HTTP basic access authentication</a>\n+     * header using {@link StandardCharsets#UTF_8}.\n+     */\n+    public AbstractClientOptionsBuilder basicAuth(String username, String password) {\n+        return basicAuth(username, password, StandardCharsets.UTF_8);\n+    }\n+\n+    /**\n+     * Sets the\n+     * <a href=\"https://en.wikipedia.org/wiki/Basic_access_authentication\">HTTP basic access authentication</a>\n+     * header. The specified {@link Charset} must be compatible with US-ASCII.\n+     */\n+    public AbstractClientOptionsBuilder basicAuth(String username, String password, Charset charset) {\n+        requireNonNull(username, \"username\");\n+        requireNonNull(password, \"password\");\n+        requireNonNull(charset, \"charset\");\n+        checkState(!oAuth1aSet || !oAuth2Set, \"cannot set basic auth with %s.\", oAuth1aSet ? \"OAuth 1.0\"\n+                                                                                           : \"OAuth 2.0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a669ee7cc6a0d3437fe5c639c500558ec298113f"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ1ODA0MA==", "bodyText": "How about just toHeaderValue()?", "url": "https://github.com/line/armeria/pull/2680#discussion_r414458040", "createdAt": "2020-04-24T10:09:29Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/auth/OAuth1aToken.java", "diffHunk": "@@ -215,6 +223,47 @@ public String version() {\n         return builder.build();\n     }\n \n+    /**\n+     * Returns the string that is sent as the value of the authorization header.\n+     */\n+    public String toHeaderValueString() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a669ee7cc6a0d3437fe5c639c500558ec298113f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ2MTQ1NA==", "bodyText": "How about providing the overloaded methods that accept BasicToken and OAuth2Token?\n.. or just auth(BasicToken|OAuth1aToken|OAuth2Token), so that an IDE gives the full choices when he or she types '.a`?\nbuilder.auth(BasicToken.of(...));\nbuilder.auth(OAuth2Token.of(...));", "url": "https://github.com/line/armeria/pull/2680#discussion_r414461454", "createdAt": "2020-04-24T10:15:08Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/AbstractClientOptionsBuilder.java", "diffHunk": "@@ -294,6 +303,55 @@ public AbstractClientOptionsBuilder setHttpHeaders(\n         return this;\n     }\n \n+    /**\n+     * Sets the\n+     * <a href=\"https://en.wikipedia.org/wiki/Basic_access_authentication\">HTTP basic access authentication</a>\n+     * header using {@link StandardCharsets#UTF_8}.\n+     */\n+    public AbstractClientOptionsBuilder basicAuth(String username, String password) {\n+        return basicAuth(username, password, StandardCharsets.UTF_8);\n+    }\n+\n+    /**\n+     * Sets the\n+     * <a href=\"https://en.wikipedia.org/wiki/Basic_access_authentication\">HTTP basic access authentication</a>\n+     * header. The specified {@link Charset} must be compatible with US-ASCII.\n+     */\n+    public AbstractClientOptionsBuilder basicAuth(String username, String password, Charset charset) {\n+        requireNonNull(username, \"username\");\n+        requireNonNull(password, \"password\");\n+        requireNonNull(charset, \"charset\");\n+        checkState(!oAuth1aSet || !oAuth2Set, \"cannot set basic auth with %s.\", oAuth1aSet ? \"OAuth 1.0\"\n+                                                                                           : \"OAuth 2.0\");\n+        httpHeaders.set(HttpHeaderNames.AUTHORIZATION,\n+                        \"Basic \" + Base64.getEncoder().encodeToString(\n+                                (username + ':' + password).getBytes(charset)));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the <a href=\"https://oauth.net/core/1.0a/\">OAuth Core 1.0 Revision A</a> header.\n+     */\n+    public AbstractClientOptionsBuilder oAuth1a(OAuth1aToken token) {\n+        requireNonNull(token, \"token\");\n+        checkState(!basicAuthSet || !oAuth2Set, \"cannot set OAuth 1.0 with %s.\", basicAuthSet ? \"basic auth\"\n+                                                                                              : \"OAuth 2.0\");\n+        httpHeaders.set(HttpHeaderNames.AUTHORIZATION, token.toHeaderValueString());\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the <a href=\"https://www.oauth.com/\">OAuth 2.0</a> header. Note that the specified\n+     * {@code accessToken} is sent using {@link HttpHeaderNames#AUTHORIZATION} header, not post body parameters.\n+     */\n+    public AbstractClientOptionsBuilder oAuth2(String accessToken) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a669ee7cc6a0d3437fe5c639c500558ec298113f"}, "originalPosition": 78}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77c0a34427092b32d2769288e36a3c4705ff223a", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/77c0a34427092b32d2769288e36a3c4705ff223a", "committedDate": "2020-04-27T03:31:08Z", "message": "Address comments by @trustin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fc19841f9117268ec1f44d9a1100ad9974aa528", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/0fc19841f9117268ec1f44d9a1100ad9974aa528", "committedDate": "2020-04-27T03:38:15Z", "message": "Move AithUtil"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNjkyNjgw", "url": "https://github.com/line/armeria/pull/2680#pullrequestreview-400692680", "createdAt": "2020-04-27T07:31:29Z", "commit": {"oid": "0fc19841f9117268ec1f44d9a1100ad9974aa528"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzozMToyOVrOGMU0Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzozMToyOVrOGMU0Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU3NzE1NA==", "bodyText": "Could you explain why this class became a part of public API?", "url": "https://github.com/line/armeria/pull/2680#discussion_r415577154", "createdAt": "2020-04-27T07:31:29Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/auth/AuthUtil.java", "diffHunk": "@@ -14,16 +14,16 @@\n  * under the License.\n  */\n \n-package com.linecorp.armeria.internal.common.util;\n+package com.linecorp.armeria.common.auth;\n \n import javax.annotation.Nullable;\n \n-public final class AuthUtil {\n+final class AuthUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fc19841f9117268ec1f44d9a1100ad9974aa528"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNjkzOTkx", "url": "https://github.com/line/armeria/pull/2680#pullrequestreview-400693991", "createdAt": "2020-04-27T07:33:39Z", "commit": {"oid": "0fc19841f9117268ec1f44d9a1100ad9974aa528"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzozMzozOVrOGMU4zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzozMzozOVrOGMU4zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU3ODMxNg==", "bodyText": "I think it's possible that a user can call auth() method multiple times with different tokens. For example, a user could set the default BasicToken and then override it as it reads some additional configuration file that specifies a different token.", "url": "https://github.com/line/armeria/pull/2680#discussion_r415578316", "createdAt": "2020-04-27T07:33:39Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/AbstractClientOptionsBuilder.java", "diffHunk": "@@ -42,6 +46,10 @@\n     private final ClientDecorationBuilder decoration = ClientDecoration.builder();\n     private final HttpHeadersBuilder httpHeaders = HttpHeaders.builder();\n \n+    private boolean basicAuthSet;\n+    private boolean oAuth1aSet;\n+    private boolean oAuth2Set;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fc19841f9117268ec1f44d9a1100ad9974aa528"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNTQ0MTUx", "url": "https://github.com/line/armeria/pull/2680#pullrequestreview-401544151", "createdAt": "2020-04-28T06:52:55Z", "commit": {"oid": "0fc19841f9117268ec1f44d9a1100ad9974aa528"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNjo1Mjo1NVrOGNFUCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNjo1Mjo1NVrOGNFUCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3MTcyMA==", "bodyText": "I don't think the factory of this class is user-friendly.\npublic static OAuth1aToken of(Map<String, String> params) {\n   return new OAuth1aToken(params);\n}\nHow about adding a builder for OAuth1aToken?", "url": "https://github.com/line/armeria/pull/2680#discussion_r416371720", "createdAt": "2020-04-28T06:52:55Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/auth/OAuth1aToken.java", "diffHunk": "@@ -109,6 +115,9 @@ public static OAuth1aToken of(Map<String, String> params) {\n \n     private final Map<String, String> params;\n \n+    @Nullable\n+    private String headerValue;\n+\n     private OAuth1aToken(Map<String, String> params) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fc19841f9117268ec1f44d9a1100ad9974aa528"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0Nzc0OTE4", "url": "https://github.com/line/armeria/pull/2680#pullrequestreview-404774918", "createdAt": "2020-05-04T07:59:11Z", "commit": {"oid": "0fc19841f9117268ec1f44d9a1100ad9974aa528"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNzo1OToxMVrOGP2FwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwODowOTo1NFrOGP2Y0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI2ODAzMg==", "bodyText": "How about just taking char buf instead of TemporaryThreadLocals?", "url": "https://github.com/line/armeria/pull/2680#discussion_r419268032", "createdAt": "2020-05-04T07:59:11Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/PercentDecoder.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright 2019 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static io.netty.util.internal.StringUtil.SPACE;\n+\n+import java.util.Arrays;\n+\n+import com.linecorp.armeria.internal.common.util.TemporaryThreadLocals;\n+\n+public final class PercentDecoder {\n+\n+    // Forked from netty-4.1.43.\n+    // https://github.com/netty/netty/blob/7d6d953153697bd66c3b01ca8ec73c4494a81788/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringDecoder.java\n+\n+    @SuppressWarnings(\"checkstyle:AvoidEscapedUnicodeCharacters\")\n+    private static final char UNKNOWN_CHAR = '\\uFFFD';\n+    private static final byte[] OCTETS_TO_HEX = new byte[Character.MAX_VALUE + 1];\n+\n+    static {\n+        Arrays.fill(OCTETS_TO_HEX, (byte) -1);\n+        for (int i = '0'; i <= '9'; i++) {\n+            OCTETS_TO_HEX[i] = (byte) (i - '0');\n+        }\n+        for (int i = 'A'; i <= 'F'; i++) {\n+            OCTETS_TO_HEX[i] = (byte) (i - 'A' + 10);\n+        }\n+        for (int i = 'a'; i <= 'f'; i++) {\n+            OCTETS_TO_HEX[i] = (byte) (i - 'a' + 10);\n+        }\n+    }\n+\n+    /**\n+     * Decodes the specified string if it's\n+     * <a href=\"https://tools.ietf.org/html/rfc3986#section-2.1\">Percent-Encoded</a>.\n+     */\n+    public static String decodeComponent(String s) {\n+        return decodeComponent(TemporaryThreadLocals.get(), s, 0, s.length());\n+    }\n+\n+    /**\n+     * Decodes the specified string from the index of {@code from} to the index of {@code toExcluded} if it's\n+     * <a href=\"https://tools.ietf.org/html/rfc3986#section-2.1\">Percent-Encoded</a>.\n+     */\n+    public static String decodeComponent(TemporaryThreadLocals tempThreadLocals,\n+                                         String s, int from, int toExcluded) {\n+        if (from == toExcluded) {\n+            return \"\";\n+        }\n+\n+        for (int i = from; i < toExcluded; i++) {\n+            final char c = s.charAt(i);\n+            if ((c & 0xFFF1) != 0x21) {\n+                // We can skip with a single comparison because both\n+                // '%' (0b00100101) and '+' (0b00101011) has the same five bits (0b0010xxx1).\n+                continue;\n+            }\n+\n+            // At this point, `c` is one of the following characters: # % ' ) + - /\n+            if (c == '%' || c == '+') {\n+                return decodeUtf8Component(tempThreadLocals, s, from, toExcluded);\n+            }\n+        }\n+\n+        return s.substring(from, toExcluded);\n+    }\n+\n+    private static String decodeUtf8Component(TemporaryThreadLocals tempThreadLocals,\n+                                              String s, int from, int toExcluded) {\n+        final char[] buf = tempThreadLocals.charArray(toExcluded - from);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fc19841f9117268ec1f44d9a1100ad9974aa528"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI3MjkxNA==", "bodyText": "Use TemporaryThreadLocals for consistancy?", "url": "https://github.com/line/armeria/pull/2680#discussion_r419272914", "createdAt": "2020-05-04T08:09:54Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/PercentEncoder.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (C) 2008 The Guava Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.linecorp.armeria.internal.common;\n+\n+import io.netty.util.internal.StringUtil;\n+\n+public final class PercentEncoder {\n+\n+    // Forked from netty-4.1.43 and guava-28.1\n+    // https://github.com/netty/netty/blob/bd8cea644a07890f5bada18ddff0a849b58cd861/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringEncoder.java\n+    // https://github.com/google/guava/blob/13e39cd167a49aad525be462e61d9e5f2b1781ec/guava/src/com/google/common/net/PercentEscaper.java\n+\n+    private static final char[] UTF_UNKNOWN = { '%', '3', 'F' }; // Percent encoded question mark\n+    private static final char[] UPPER_HEX_DIGITS = \"0123456789ABCDEF\".toCharArray();\n+    private static final byte[] SAFE_OCTETS = new byte[Character.MAX_VALUE + 1];\n+\n+    static {\n+        // Unreserved characters with '*' because most browsers such as Chrome and Firefox do not encode '*'.\n+        // See https://tools.ietf.org/html/rfc3986#section-2.3\n+        final String safeOctetStr = \"-_.~*abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n+        for (int i = 0; i < safeOctetStr.length(); i++) {\n+            SAFE_OCTETS[safeOctetStr.charAt(i)] = -1;\n+        }\n+    }\n+\n+    /**\n+     * Encodes the specified string using\n+     * <a href=\"https://tools.ietf.org/html/rfc3986#section-2.1\">Percent-Encoding</a> and appends it to the\n+     * specified {@link StringBuilder}.\n+     */\n+    public static void encodeComponent(StringBuilder buf, String s) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fc19841f9117268ec1f44d9a1100ad9974aa528"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5755e308e7d8a64ae6cad963e59f1599d63deaa0", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/5755e308e7d8a64ae6cad963e59f1599d63deaa0", "committedDate": "2020-05-04T08:59:45Z", "message": "Address the comment by @ikhoon"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "faf997fc12ce315269ede5dd8174ca92a91ec96c", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/faf997fc12ce315269ede5dd8174ca92a91ec96c", "committedDate": "2020-05-06T03:09:50Z", "message": "Remove checking auth set"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MjgxNDE0", "url": "https://github.com/line/armeria/pull/2680#pullrequestreview-406281414", "createdAt": "2020-05-06T03:17:33Z", "commit": {"oid": "faf997fc12ce315269ede5dd8174ca92a91ec96c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MTE0NjU4", "url": "https://github.com/line/armeria/pull/2680#pullrequestreview-407114658", "createdAt": "2020-05-07T02:45:22Z", "commit": {"oid": "faf997fc12ce315269ede5dd8174ca92a91ec96c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 409, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}