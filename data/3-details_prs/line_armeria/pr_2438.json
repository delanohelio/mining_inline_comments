{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NjgyMDYz", "number": 2438, "title": "Add MediaTypeNames", "bodyText": "Motivation:\nAs described in #2421, Armeria currently does not provide String constants for MediaType\nModifications:\n\nAdd MediaTypeNames that provides String constants for MediaType.\n\nResult:\n\nA user doesn't have to introduce his or her own constant.", "createdAt": "2020-01-31T17:14:44Z", "url": "https://github.com/line/armeria/pull/2438", "merged": true, "mergeCommit": {"oid": "32437d9f88067ae7383be55b6bbde2ea776c1021"}, "closed": true, "closedAt": "2020-02-06T07:58:00Z", "author": {"login": "JunoJunho"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_yW6JAH2gAyMzY5NjgyMDYzOjk0MTRlZWMwODQyMDg1YmYxZmI4MDM1OTNlMjZmMjkxNDg3NjZkYjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBkOqKABqjMwMTI1OTMxMDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9414eec0842085bf1fb803593e26f29148766db4", "author": {"user": {"login": "JunoJunho", "name": "Junho Kim"}}, "url": "https://github.com/line/armeria/commit/9414eec0842085bf1fb803593e26f29148766db4", "committedDate": "2020-01-31T17:12:26Z", "message": "Implement MediaTypeNames\n\nMotivation:\n\nAs described in #2421, armeria currently does not provide String type\nconstants for MediaType\n\nModifications:\n\nIntroduce new class for String Constants in MediaType, MediaTypeNames\n\nResult:\n\nImplement MediaTypeNames class and its test (MediaTypeNamesTest)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxODYzNTIw", "url": "https://github.com/line/armeria/pull/2438#pullrequestreview-351863520", "createdAt": "2020-02-01T03:54:18Z", "commit": {"oid": "9414eec0842085bf1fb803593e26f29148766db4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMzo1NDoxOFrOFkcO6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMzo1NDoxOFrOFkcO6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NTYyNQ==", "bodyText": "I think you can use reflection for completeness.", "url": "https://github.com/line/armeria/pull/2438#discussion_r373755625", "createdAt": "2020-02-01T03:54:18Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeNamesTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertSame;\n+\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test sync with MediaType and MediaTypeNames\n+ */\n+class MediaTypeNamesTest {\n+\n+    @Test\n+    void matchMediaTypeToMediaTypeNames() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9414eec0842085bf1fb803593e26f29148766db4"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxODYzNTg0", "url": "https://github.com/line/armeria/pull/2438#pullrequestreview-351863584", "createdAt": "2020-02-01T03:55:50Z", "commit": {"oid": "9414eec0842085bf1fb803593e26f29148766db4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMzo1NTo1MFrOFkcPMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMzo1NTo1MFrOFkcPMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NTY5OQ==", "bodyText": "Missing Javadoc. Could use the string in verbatim, e.g.\n/**\n * {@value #ANY_TYPE}.\n */\n// or..\n/**\n * {@code \"*/*\"}.\n */", "url": "https://github.com/line/armeria/pull/2438#discussion_r373755699", "createdAt": "2020-02-01T03:55:50Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/MediaTypeNames.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+public final class MediaTypeNames {\n+\n+    public static final String ANY_TYPE = \"*/*\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9414eec0842085bf1fb803593e26f29148766db4"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd61475fa2f8daa8d0d9fcc4988f04e42453c3bc", "author": {"user": {"login": "JunoJunho", "name": "Junho Kim"}}, "url": "https://github.com/line/armeria/commit/dd61475fa2f8daa8d0d9fcc4988f04e42453c3bc", "committedDate": "2020-02-02T13:56:19Z", "message": "Update test, javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTkxNDQ3", "url": "https://github.com/line/armeria/pull/2438#pullrequestreview-351991447", "createdAt": "2020-02-03T02:00:11Z", "commit": {"oid": "dd61475fa2f8daa8d0d9fcc4988f04e42453c3bc"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMjowMDoxMlrOFkk6Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMjowMTo0N1rOFkk67A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5Nzc5NQ==", "bodyText": "FluentIterable is a discouraged precursor by its Javadoc. How about using Stream.of(clazz.getDeclaredFields()).filter...?", "url": "https://github.com/line/armeria/pull/2438#discussion_r373897795", "createdAt": "2020-02-03T02:00:12Z", "author": {"login": "minwoox"}, "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeNamesTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static java.lang.reflect.Modifier.isFinal;\n+import static java.lang.reflect.Modifier.isPublic;\n+import static java.lang.reflect.Modifier.isStatic;\n+import static java.util.Arrays.asList;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.lang.reflect.Field;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.collect.FluentIterable;\n+\n+/**\n+ * Test sync with MediaType and MediaTypeNames.\n+ */\n+class MediaTypeNamesTest {\n+\n+    // reflection\n+    @Test\n+    void matchMediaTypeToMediaTypeNames() throws Exception {\n+        final FluentIterable<Field> mediaTypeFields = getConstantFields(MediaType.class);\n+        final FluentIterable<Field> mediaTypeNamesFields = getConstantFields(MediaTypeNames.class);\n+\n+        final Map<String, MediaType> mediaTypeConstantsMap =\n+                getConstantFieldMap(mediaTypeFields, MediaType.class);\n+        final Map<String, String> mediaTypeNamesConstantsMap =\n+                getConstantFieldMap(mediaTypeNamesFields, String.class);\n+\n+        for (Entry<String, MediaType> mediaTypeEntry : mediaTypeConstantsMap.entrySet()) {\n+            final String mediaTypeName = mediaTypeNamesConstantsMap.get(mediaTypeEntry.getKey());\n+            assertNotNull(\"MediaTypeName should be defined in MediaType constants\", mediaTypeName);\n+            assertEquals(mediaTypeName, mediaTypeEntry.getValue().toString());\n+        }\n+    }\n+\n+    // reflection\n+    @SuppressWarnings(\"Guava\")\n+    private static <T> FluentIterable<Field> getConstantFields(Class<T> clazz) {\n+        return FluentIterable.from(asList(clazz.getDeclaredFields())).filter(input -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd61475fa2f8daa8d0d9fcc4988f04e42453c3bc"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5Nzk2NA==", "bodyText": "Could you use AssertJ?\nassertThat(mediaTypeName).isNotNull();\nassertThat(mediaTypeName).isEqualTo(mediaTypeEntry.getValue().toString());", "url": "https://github.com/line/armeria/pull/2438#discussion_r373897964", "createdAt": "2020-02-03T02:01:47Z", "author": {"login": "minwoox"}, "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeNamesTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static java.lang.reflect.Modifier.isFinal;\n+import static java.lang.reflect.Modifier.isPublic;\n+import static java.lang.reflect.Modifier.isStatic;\n+import static java.util.Arrays.asList;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.lang.reflect.Field;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.collect.FluentIterable;\n+\n+/**\n+ * Test sync with MediaType and MediaTypeNames.\n+ */\n+class MediaTypeNamesTest {\n+\n+    // reflection\n+    @Test\n+    void matchMediaTypeToMediaTypeNames() throws Exception {\n+        final FluentIterable<Field> mediaTypeFields = getConstantFields(MediaType.class);\n+        final FluentIterable<Field> mediaTypeNamesFields = getConstantFields(MediaTypeNames.class);\n+\n+        final Map<String, MediaType> mediaTypeConstantsMap =\n+                getConstantFieldMap(mediaTypeFields, MediaType.class);\n+        final Map<String, String> mediaTypeNamesConstantsMap =\n+                getConstantFieldMap(mediaTypeNamesFields, String.class);\n+\n+        for (Entry<String, MediaType> mediaTypeEntry : mediaTypeConstantsMap.entrySet()) {\n+            final String mediaTypeName = mediaTypeNamesConstantsMap.get(mediaTypeEntry.getKey());\n+            assertNotNull(\"MediaTypeName should be defined in MediaType constants\", mediaTypeName);\n+            assertEquals(mediaTypeName, mediaTypeEntry.getValue().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd61475fa2f8daa8d0d9fcc4988f04e42453c3bc"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTk1NDk3", "url": "https://github.com/line/armeria/pull/2438#pullrequestreview-351995497", "createdAt": "2020-02-03T02:27:19Z", "commit": {"oid": "dd61475fa2f8daa8d0d9fcc4988f04e42453c3bc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMjoyNzoyMFrOFklHcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMjoyNzoyMFrOFklHcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkwMTE3MA==", "bodyText": "Could you migrate @Produces(\"application/json-seq\") to @Produces(JSON_SEQ) and other similar things in our code base?\n\n  \n    \n      armeria/core/src/main/java/com/linecorp/armeria/server/annotation/ProducesJsonSequences.java\n    \n    \n         Line 28\n      in\n      6f3c61e\n    \n    \n    \n    \n\n        \n          \n           @Produces(\"application/json-seq\")", "url": "https://github.com/line/armeria/pull/2438#discussion_r373901170", "createdAt": "2020-02-03T02:27:20Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/MediaTypeNames.java", "diffHunk": "@@ -0,0 +1,472 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+/**\n+ * String constants defined in {@link MediaType} class.\n+ */\n+public final class MediaTypeNames {\n+\n+    /**\n+     * {@value #ANY_TYPE}.\n+     */\n+    public static final String ANY_TYPE = \"*/*\";\n+    /**\n+     * {@value #ANY_TEXT_TYPE}.\n+     */\n+    public static final String ANY_TEXT_TYPE = \"text/*\";\n+    /**\n+     * {@value #ANY_IMAGE_TYPE}.\n+     */\n+    public static final String ANY_IMAGE_TYPE = \"image/*\";\n+    /**\n+     * {@value #ANY_AUDIO_TYPE}.\n+     */\n+    public static final String ANY_AUDIO_TYPE = \"audio/*\";\n+    /**\n+     * {@value #ANY_VIDEO_TYPE}.\n+     */\n+    public static final String ANY_VIDEO_TYPE = \"video/*\";\n+    /**\n+     * {@value #ANY_APPLICATION_TYPE}.\n+     */\n+    public static final String ANY_APPLICATION_TYPE = \"application/*\";\n+\n+    /* text types */\n+\n+    /**\n+     * {@value #CACHE_MANIFEST_UTF_8}.\n+     */\n+    public static final String CACHE_MANIFEST_UTF_8 = \"text/cache-manifest; charset=utf-8\";\n+    /**\n+     * {@value #CSS_UTF_8}.\n+     */\n+    public static final String CSS_UTF_8 = \"text/css; charset=utf-8\";\n+    /**\n+     * {@value #CSV_UTF_8}.\n+     */\n+    public static final String CSV_UTF_8 = \"text/csv; charset=utf-8\";\n+    /**\n+     * {@value #HTML_UTF_8}.\n+     */\n+    public static final String HTML_UTF_8 = \"text/html; charset=utf-8\";\n+    /**\n+     * {@value #I_CALENDAR_UTF_8}.\n+     */\n+    public static final String I_CALENDAR_UTF_8 = \"text/calendar; charset=utf-8\";\n+    /**\n+     * {@value #PLAIN_TEXT_UTF_8}.\n+     */\n+    public static final String PLAIN_TEXT_UTF_8 = \"text/plain; charset=utf-8\";\n+    /**\n+     * {@value #EVENT_STREAM}.\n+     */\n+    public static final String EVENT_STREAM = \"text/event-stream\";\n+    /**\n+     * {@value #TEXT_JAVASCRIPT_UTF_8}.\n+     */\n+    public static final String TEXT_JAVASCRIPT_UTF_8 = \"text/javascript; charset=utf-8\";\n+    /**\n+     * {@value #TSV_UTF_8}.\n+     */\n+    public static final String TSV_UTF_8 = \"text/tab-separated-values; charset=utf-8\";\n+    /**\n+     * {@value #VCARD_UTF_8}.\n+     */\n+    public static final String VCARD_UTF_8 = \"text/vcard; charset=utf-8\";\n+    /**\n+     * {@value #WML_UTF_8}.\n+     */\n+    public static final String WML_UTF_8 = \"text/vnd.wap.wml; charset=utf-8\";\n+    /**\n+     * {@value #XML_UTF_8}.\n+     */\n+    public static final String XML_UTF_8 = \"text/xml; charset=utf-8\";\n+    /**\n+     * {@value #VTT_UTF_8}.\n+     */\n+    public static final String VTT_UTF_8 = \"text/vtt; charset=utf-8\";\n+\n+    /* image types */\n+\n+    /**\n+     * {@value #BMP}.\n+     */\n+    public static final String BMP = \"image/bmp\";\n+    /**\n+     * {@value #CRW}.\n+     */\n+    public static final String CRW = \"image/x-canon-crw\";\n+    /**\n+     * {@value #GIF}.\n+     */\n+    public static final String GIF = \"image/gif\";\n+    /**\n+     * {@value #ICO}.\n+     */\n+    public static final String ICO = \"image/vnd.microsoft.icon\";\n+    /**\n+     * {@value #JPEG}.\n+     */\n+    public static final String JPEG = \"image/jpeg\";\n+    /**\n+     * {@value #PNG}.\n+     */\n+    public static final String PNG = \"image/png\";\n+    /**\n+     * {@value #PSD}.\n+     */\n+    public static final String PSD = \"image/vnd.adobe.photoshop\";\n+    /**\n+     * {@value #SVG_UTF_8}.\n+     */\n+    public static final String SVG_UTF_8 = \"image/svg+xml; charset=utf-8\";\n+    /**\n+     * {@value #TIFF}.\n+     */\n+    public static final String TIFF = \"image/tiff\";\n+    /**\n+     * {@value #WEBP}.\n+     */\n+    public static final String WEBP = \"image/webp\";\n+\n+    /* audio types */\n+\n+    /**\n+     * {@value #MP4_AUDIO}.\n+     */\n+    public static final String MP4_AUDIO = \"audio/mp4\";\n+    /**\n+     * {@value #MPEG_AUDIO}.\n+     */\n+    public static final String MPEG_AUDIO = \"audio/mpeg\";\n+    /**\n+     * {@value #OGG_AUDIO}.\n+     */\n+    public static final String OGG_AUDIO = \"audio/ogg\";\n+    /**\n+     * {@value #WEBM_AUDIO}.\n+     */\n+    public static final String WEBM_AUDIO = \"audio/webm\";\n+    /**\n+     * {@value #L16_AUDIO}.\n+     */\n+    public static final String L16_AUDIO = \"audio/l16\";\n+    /**\n+     * {@value #L24_AUDIO}.\n+     */\n+    public static final String L24_AUDIO = \"audio/l24\";\n+    /**\n+     * {@value #BASIC_AUDIO}.\n+     */\n+    public static final String BASIC_AUDIO = \"audio/basic\";\n+    /**\n+     * {@value #AAC_AUDIO}.\n+     */\n+    public static final String AAC_AUDIO = \"audio/aac\";\n+    /**\n+     * {@value #VORBIS_AUDIO}.\n+     */\n+    public static final String VORBIS_AUDIO = \"audio/vorbis\";\n+    /**\n+     * {@value #WMA_AUDIO}.\n+     */\n+    public static final String WMA_AUDIO = \"audio/x-ms-wma\";\n+    /**\n+     * {@value #WAX_AUDIO}.\n+     */\n+    public static final String WAX_AUDIO = \"audio/x-ms-wax\";\n+    /**\n+     * {@value #VND_REAL_AUDIO}.\n+     */\n+    public static final String VND_REAL_AUDIO = \"audio/vnd.rn-realaudio\";\n+    /**\n+     * {@value #VND_WAVE_AUDIO}.\n+     */\n+    public static final String VND_WAVE_AUDIO = \"audio/vnd.wave\";\n+\n+    /* video types */\n+\n+    /**\n+     * {@value #MP4_VIDEO}.\n+     */\n+    public static final String MP4_VIDEO = \"video/mp4\";\n+    /**\n+     * {@value #MPEG_VIDEO}.\n+     */\n+    public static final String MPEG_VIDEO = \"video/mpeg\";\n+    /**\n+     * {@value #OGG_VIDEO}.\n+     */\n+    public static final String OGG_VIDEO = \"video/ogg\";\n+    /**\n+     * {@value #QUICKTIME}.\n+     */\n+    public static final String QUICKTIME = \"video/quicktime\";\n+    /**\n+     * {@value #WEBM_VIDEO}.\n+     */\n+    public static final String WEBM_VIDEO = \"video/webm\";\n+    /**\n+     * {@value #WMV}.\n+     */\n+    public static final String WMV = \"video/x-ms-wmv\";\n+    /**\n+     * {@value #FLV_VIDEO}.\n+     */\n+    public static final String FLV_VIDEO = \"video/x-flv\";\n+    /**\n+     * {@value #THREE_GPP_VIDEO}.\n+     */\n+    public static final String THREE_GPP_VIDEO = \"video/3gpp\";\n+    /**\n+     * {@value #THREE_GPP2_VIDEO}.\n+     */\n+    public static final String THREE_GPP2_VIDEO = \"video/3gpp2\";\n+\n+    /* application types */\n+\n+    /**\n+     * {@value #APPLICATION_XML_UTF_8}.\n+     */\n+    public static final String APPLICATION_XML_UTF_8 = \"application/xml; charset=utf-8\";\n+    /**\n+     * {@value #ATOM_UTF_8}.\n+     */\n+    public static final String ATOM_UTF_8 = \"application/atom+xml; charset=utf-8\";\n+    /**\n+     * {@value #BZIP2}.\n+     */\n+    public static final String BZIP2 = \"application/x-bzip2\";\n+    /**\n+     * {@value #DART_UTF_8}.\n+     */\n+    public static final String DART_UTF_8 = \"application/dart; charset=utf-8\";\n+    /**\n+     * {@value #APPLE_PASSBOOK}.\n+     */\n+    public static final String APPLE_PASSBOOK = \"application/vnd.apple.pkpass\";\n+    /**\n+     * {@value #EOT}.\n+     */\n+    public static final String EOT = \"application/vnd.ms-fontobject\";\n+    /**\n+     * {@value #EPUB}.\n+     */\n+    public static final String EPUB = \"application/epub+zip\";\n+    /**\n+     * {@value #FORM_DATA}.\n+     */\n+    public static final String FORM_DATA = \"application/x-www-form-urlencoded\";\n+    /**\n+     * {@value #KEY_ARCHIVE}.\n+     */\n+    public static final String KEY_ARCHIVE = \"application/pkcs12\";\n+    /**\n+     * {@value #APPLICATION_BINARY}.\n+     */\n+    public static final String APPLICATION_BINARY = \"application/binary\";\n+    /**\n+     * {@value #GEO_JSON}.\n+     */\n+    public static final String GEO_JSON = \"application/geo+json\";\n+    /**\n+     * {@value #GZIP}.\n+     */\n+    public static final String GZIP = \"application/x-gzip\";\n+    /**\n+     * {@value #HAL_JSON}.\n+     */\n+    public static final String HAL_JSON = \"application/hal+json\";\n+    /**\n+     * {@value #JAVASCRIPT_UTF_8}.\n+     */\n+    public static final String JAVASCRIPT_UTF_8 = \"application/javascript; charset=utf-8\";\n+    /**\n+     * {@value #JOSE}.\n+     */\n+    public static final String JOSE = \"application/jose\";\n+    /**\n+     * {@value #JOSE_JSON}.\n+     */\n+    public static final String JOSE_JSON = \"application/jose+json\";\n+    /**\n+     * {@value #JSON_UTF_8}.\n+     */\n+    public static final String JSON_UTF_8 = \"application/json; charset=utf-8\";\n+    /**\n+     * {@value #JSON}.\n+     */\n+    public static final String JSON = \"application/json\";\n+    /**\n+     * {@value #JSON_PATCH}.\n+     */\n+    public static final String JSON_PATCH = \"application/json-patch+json\";\n+    /**\n+     * {@value #JSON_SEQ}.\n+     */\n+    public static final String JSON_SEQ = \"application/json-seq\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd61475fa2f8daa8d0d9fcc4988f04e42453c3bc"}, "originalPosition": 322}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTk5ODQx", "url": "https://github.com/line/armeria/pull/2438#pullrequestreview-351999841", "createdAt": "2020-02-03T02:53:16Z", "commit": {"oid": "dd61475fa2f8daa8d0d9fcc4988f04e42453c3bc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMjo1MzoxNlrOFklV7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMjo1MzoxNlrOFklV7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkwNDg3Ng==", "bodyText": "The clazz parameter seems unused.\nHow about using stream API & ImmutableMap instead of mutable HashMap?\nprivate static <T> Map<String, T> getConstantFieldMap(Iterable<Field> iterable) {\n    return StreamSupport\n            .stream(iterable.spliterator(), false)\n            .collect(toImmutableMap(Field::getName, field -> {\n                try {\n                    @SuppressWarnings(\"unchecked\")\n                    final T cast = (T) field.get(null);\n                    return cast;\n                } catch (Exception ex) {\n                    throw new RuntimeException(ex);\n                }\n            }));\n}", "url": "https://github.com/line/armeria/pull/2438#discussion_r373904876", "createdAt": "2020-02-03T02:53:16Z", "author": {"login": "ikhoon"}, "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeNamesTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static java.lang.reflect.Modifier.isFinal;\n+import static java.lang.reflect.Modifier.isPublic;\n+import static java.lang.reflect.Modifier.isStatic;\n+import static java.util.Arrays.asList;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.lang.reflect.Field;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.collect.FluentIterable;\n+\n+/**\n+ * Test sync with MediaType and MediaTypeNames.\n+ */\n+class MediaTypeNamesTest {\n+\n+    // reflection\n+    @Test\n+    void matchMediaTypeToMediaTypeNames() throws Exception {\n+        final FluentIterable<Field> mediaTypeFields = getConstantFields(MediaType.class);\n+        final FluentIterable<Field> mediaTypeNamesFields = getConstantFields(MediaTypeNames.class);\n+\n+        final Map<String, MediaType> mediaTypeConstantsMap =\n+                getConstantFieldMap(mediaTypeFields, MediaType.class);\n+        final Map<String, String> mediaTypeNamesConstantsMap =\n+                getConstantFieldMap(mediaTypeNamesFields, String.class);\n+\n+        for (Entry<String, MediaType> mediaTypeEntry : mediaTypeConstantsMap.entrySet()) {\n+            final String mediaTypeName = mediaTypeNamesConstantsMap.get(mediaTypeEntry.getKey());\n+            assertNotNull(\"MediaTypeName should be defined in MediaType constants\", mediaTypeName);\n+            assertEquals(mediaTypeName, mediaTypeEntry.getValue().toString());\n+        }\n+    }\n+\n+    // reflection\n+    @SuppressWarnings(\"Guava\")\n+    private static <T> FluentIterable<Field> getConstantFields(Class<T> clazz) {\n+        return FluentIterable.from(asList(clazz.getDeclaredFields())).filter(input -> {\n+            final int modifiers = input.getModifiers();\n+            return isPublic(modifiers) &&\n+                   isStatic(modifiers) &&\n+                   isFinal(modifiers) &&\n+                   String.class.equals(input.getType());\n+        });\n+    }\n+\n+    // reflection\n+    @SuppressWarnings(\"Guava\")\n+    private static <T> Map<String, T> getConstantFieldMap(FluentIterable<Field> iterable, Class<T> clazz) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd61475fa2f8daa8d0d9fcc4988f04e42453c3bc"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "544478cc741f15a19145cf821a55c0ae49649839", "author": {"user": {"login": "JunoJunho", "name": "Junho Kim"}}, "url": "https://github.com/line/armeria/commit/544478cc741f15a19145cf821a55c0ae49649839", "committedDate": "2020-02-03T14:32:50Z", "message": "Uppdate"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNjQ2NjE3", "url": "https://github.com/line/armeria/pull/2438#pullrequestreview-352646617", "createdAt": "2020-02-03T23:59:55Z", "commit": {"oid": "544478cc741f15a19145cf821a55c0ae49649839"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMzo1OTo1NVrOFlEInw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMDowMDo1NFrOFlEJnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwOTM3NQ==", "bodyText": ".isNotNull() is redundant, because .isEqualTo() next line will check nullness anyway.", "url": "https://github.com/line/armeria/pull/2438#discussion_r374409375", "createdAt": "2020-02-03T23:59:55Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeNamesTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.linecorp.armeria.common.MediaTypeTest.getConstantFields;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Field;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.stream.StreamSupport;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.collect.FluentIterable;\n+\n+/**\n+ * Test sync with MediaType and MediaTypeNames.\n+ */\n+class MediaTypeNamesTest {\n+\n+    // reflection\n+    @Test\n+    void matchMediaTypeToMediaTypeNames() throws Exception {\n+        final FluentIterable<Field> mediaTypeFields = getConstantFields(MediaType.class);\n+        final FluentIterable<Field> mediaTypeNamesFields = getConstantFields(MediaTypeNames.class,\n+                                                                             String.class);\n+\n+        final Map<String, MediaType> mediaTypeConstantsMap = getConstantFieldMap(mediaTypeFields);\n+        final Map<String, String> mediaTypeNamesConstantsMap = getConstantFieldMap(mediaTypeNamesFields);\n+\n+        for (Entry<String, MediaType> mediaTypeEntry : mediaTypeConstantsMap.entrySet()) {\n+            final String mediaTypeName = mediaTypeNamesConstantsMap.get(mediaTypeEntry.getKey());\n+            assertThat(mediaTypeName).isNotNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "544478cc741f15a19145cf821a55c0ae49649839"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwOTYyOQ==", "bodyText": "Iterables.stream(iterable) ?", "url": "https://github.com/line/armeria/pull/2438#discussion_r374409629", "createdAt": "2020-02-04T00:00:54Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeNamesTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License; charset=utf-8\"; you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.linecorp.armeria.common.MediaTypeTest.getConstantFields;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Field;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.stream.StreamSupport;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.collect.FluentIterable;\n+\n+/**\n+ * Test sync with MediaType and MediaTypeNames.\n+ */\n+class MediaTypeNamesTest {\n+\n+    // reflection\n+    @Test\n+    void matchMediaTypeToMediaTypeNames() throws Exception {\n+        final FluentIterable<Field> mediaTypeFields = getConstantFields(MediaType.class);\n+        final FluentIterable<Field> mediaTypeNamesFields = getConstantFields(MediaTypeNames.class,\n+                                                                             String.class);\n+\n+        final Map<String, MediaType> mediaTypeConstantsMap = getConstantFieldMap(mediaTypeFields);\n+        final Map<String, String> mediaTypeNamesConstantsMap = getConstantFieldMap(mediaTypeNamesFields);\n+\n+        for (Entry<String, MediaType> mediaTypeEntry : mediaTypeConstantsMap.entrySet()) {\n+            final String mediaTypeName = mediaTypeNamesConstantsMap.get(mediaTypeEntry.getKey());\n+            assertThat(mediaTypeName).isNotNull();\n+            assertThat(mediaTypeName).isEqualTo(mediaTypeEntry.getValue().toString());\n+        }\n+    }\n+\n+    private static <T> Map<String, T> getConstantFieldMap(Iterable<Field> iterable) {\n+        return StreamSupport\n+                .stream(iterable.spliterator(), false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "544478cc741f15a19145cf821a55c0ae49649839"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "778c4839e0a0d5d3b8f11879215bac9181e42021", "author": {"user": {"login": "JunoJunho", "name": "Junho Kim"}}, "url": "https://github.com/line/armeria/commit/778c4839e0a0d5d3b8f11879215bac9181e42021", "committedDate": "2020-02-04T14:52:12Z", "message": "Update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNDI2NDIz", "url": "https://github.com/line/armeria/pull/2438#pullrequestreview-353426423", "createdAt": "2020-02-05T02:05:05Z", "commit": {"oid": "778c4839e0a0d5d3b8f11879215bac9181e42021"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNDI3Nzk0", "url": "https://github.com/line/armeria/pull/2438#pullrequestreview-353427794", "createdAt": "2020-02-05T02:10:23Z", "commit": {"oid": "778c4839e0a0d5d3b8f11879215bac9181e42021"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjoxMDoyM1rOFlpyhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjoxMDoyM1rOFlpyhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAyNjMxMA==", "bodyText": "Special thanks to this \u2764\ufe0f", "url": "https://github.com/line/armeria/pull/2438#discussion_r375026310", "createdAt": "2020-02-05T02:10:23Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/annotation/ConsumesJson.java", "diffHunk": "@@ -20,11 +20,13 @@\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n \n+import com.linecorp.armeria.common.MediaTypeNames;\n+\n /**\n- * An alias for {@code @Consumes(\"application/json\")}.\n+ * An alias for {@code @Consumes(MediaTypeNames.JSON)}.\n  */\n @Retention(RetentionPolicy.RUNTIME)\n @Target({ ElementType.TYPE, ElementType.METHOD })\n-@Consumes(\"application/json\")\n+@Consumes(MediaTypeNames.JSON)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "778c4839e0a0d5d3b8f11879215bac9181e42021"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNDI5MzE0", "url": "https://github.com/line/armeria/pull/2438#pullrequestreview-353429314", "createdAt": "2020-02-05T02:16:12Z", "commit": {"oid": "778c4839e0a0d5d3b8f11879215bac9181e42021"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjoxNjoxMlrOFlp3Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjoxNjoxMlrOFlp3Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAyNzU1NA==", "bodyText": "Though if we can I think it's good to migrate these to return Stream, we don't use FluentIterable anywhere else in our code", "url": "https://github.com/line/armeria/pull/2438#discussion_r375027554", "createdAt": "2020-02-05T02:16:12Z", "author": {"login": "anuraaga"}, "path": "core/src/test/java/com/linecorp/armeria/common/MediaTypeTest.java", "diffHunk": "@@ -116,20 +116,21 @@ public void testConstants_areUnique() {\n \n     // reflection\n     @SuppressWarnings(\"Guava\")\n-    private static FluentIterable<Field> getConstantFields() {\n-        return FluentIterable.from(asList(MediaType.class.getDeclaredFields())).filter(input -> {\n+    static <T, R> FluentIterable<Field> getConstantFields(Class<T> clazz, Class<R>... filterClazz) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "778c4839e0a0d5d3b8f11879215bac9181e42021"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0941a795ac133adaf224e02c80b2e0cc31a95b4", "author": {"user": {"login": "JunoJunho", "name": "Junho Kim"}}, "url": "https://github.com/line/armeria/commit/e0941a795ac133adaf224e02c80b2e0cc31a95b4", "committedDate": "2020-02-05T12:01:31Z", "message": "Merge remote-tracking branch 'upstream/master' into implement-MediaTypeNames"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNzIyNjQy", "url": "https://github.com/line/armeria/pull/2438#pullrequestreview-353722642", "createdAt": "2020-02-05T13:43:09Z", "commit": {"oid": "e0941a795ac133adaf224e02c80b2e0cc31a95b4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MTY2MTM0", "url": "https://github.com/line/armeria/pull/2438#pullrequestreview-354166134", "createdAt": "2020-02-06T02:21:46Z", "commit": {"oid": "e0941a795ac133adaf224e02c80b2e0cc31a95b4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66d14d42094dee377d3ea65fc823632c9f008a44", "author": {"user": {"login": "JunoJunho", "name": "Junho Kim"}}, "url": "https://github.com/line/armeria/commit/66d14d42094dee377d3ea65fc823632c9f008a44", "committedDate": "2020-02-06T05:52:23Z", "message": "Update for guava"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a6e2c5cf35f4fcc116ccd545bfa5b312a5c6e139", "author": {"user": null}, "url": "https://github.com/line/armeria/commit/a6e2c5cf35f4fcc116ccd545bfa5b312a5c6e139", "committedDate": "2020-02-06T05:25:03Z", "message": "Update for guava"}, "afterCommit": {"oid": "66d14d42094dee377d3ea65fc823632c9f008a44", "author": {"user": {"login": "JunoJunho", "name": "Junho Kim"}}, "url": "https://github.com/line/armeria/commit/66d14d42094dee377d3ea65fc823632c9f008a44", "committedDate": "2020-02-06T05:52:23Z", "message": "Update for guava"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 928, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}