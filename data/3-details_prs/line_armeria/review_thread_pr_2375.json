{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MzY0NTM2", "number": 2375, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwODowNToxNVrODXE5ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwNTowOTozMFrODXbAjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTI0MDkxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwODowNToxNVrOFcMn2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMToyMToyMFrOFdJuDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTExMTI1OQ==", "bodyText": "It's kinna difficult for me to show a proper example for this right now. Do you have any example recommended?\nOr can we remove this method as well? \ud83e\udd14", "url": "https://github.com/line/armeria/pull/2375#discussion_r365111259", "createdAt": "2020-01-10T08:05:15Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java", "diffHunk": "@@ -242,8 +235,7 @@ default SafeCloseable push(boolean runCallbacks) {\n      * <pre>{@code\n      * ctx.onChild((curCtx, newCtx) -> {\n      *     assert ctx == curCtx && curCtx != newCtx;\n-     *     // Add a callback to the child context.\n-     *     newCtx.onExit(() -> { ... });\n+     *     ...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edde229b70c17028232811f96aaefc226ebc3cb1"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIxOTM2MQ==", "bodyText": "I'm not sure if we can remove this method or not. It seems like it's not used anywhere in our code, though. Slightly in favor of removal.", "url": "https://github.com/line/armeria/pull/2375#discussion_r365219361", "createdAt": "2020-01-10T12:51:15Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java", "diffHunk": "@@ -242,8 +235,7 @@ default SafeCloseable push(boolean runCallbacks) {\n      * <pre>{@code\n      * ctx.onChild((curCtx, newCtx) -> {\n      *     assert ctx == curCtx && curCtx != newCtx;\n-     *     // Add a callback to the child context.\n-     *     newCtx.onExit(() -> { ... });\n+     *     ...", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTExMTI1OQ=="}, "originalCommit": {"oid": "edde229b70c17028232811f96aaefc226ebc3cb1"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY0OTE0OA==", "bodyText": "We used it before adding attr lookup from root context only for copying attributes. I can't think of a good use case not better using the root lookup so in favor of removing", "url": "https://github.com/line/armeria/pull/2375#discussion_r365649148", "createdAt": "2020-01-13T05:12:18Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java", "diffHunk": "@@ -242,8 +235,7 @@ default SafeCloseable push(boolean runCallbacks) {\n      * <pre>{@code\n      * ctx.onChild((curCtx, newCtx) -> {\n      *     assert ctx == curCtx && curCtx != newCtx;\n-     *     // Add a callback to the child context.\n-     *     newCtx.onExit(() -> { ... });\n+     *     ...", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTExMTI1OQ=="}, "originalCommit": {"oid": "edde229b70c17028232811f96aaefc226ebc3cb1"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjExMjI2OQ==", "bodyText": "Let me remove this as well. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2375#discussion_r366112269", "createdAt": "2020-01-14T01:21:20Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java", "diffHunk": "@@ -242,8 +235,7 @@ default SafeCloseable push(boolean runCallbacks) {\n      * <pre>{@code\n      * ctx.onChild((curCtx, newCtx) -> {\n      *     assert ctx == curCtx && curCtx != newCtx;\n-     *     // Add a callback to the child context.\n-     *     newCtx.onExit(() -> { ... });\n+     *     ...", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTExMTI1OQ=="}, "originalCommit": {"oid": "edde229b70c17028232811f96aaefc226ebc3cb1"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTkzMzc1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/RequestContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMjo0Mzo1MlrOFcTEsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMjo0Mzo1MlrOFcTEsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIxNjk0NQ==", "bodyText": "If you're still struggling to", "url": "https://github.com/line/armeria/pull/2375#discussion_r365216945", "createdAt": "2020-01-10T12:43:52Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/RequestContext.java", "diffHunk": "@@ -596,60 +588,61 @@ default Logger makeContextAware(Logger logger) {\n     }\n \n     /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * Do not use this method. The callback is never invoked.\n      *\n-     * @param callback a {@link Consumer} whose argument is this context\n-     */\n-    void onEnter(Consumer<? super RequestContext> callback);\n-\n-    /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * <p>This method has a limitation which is that the callback cannot be called when this\n+     * {@link RequestContext} is pushed first. So we decided to remove this method and provide\n+     * better API after 1.0. If you are using this, please find another way to achieve the same behavior.\n+     * Most of the cases, you might be able to just use {@link RequestLogListener}.\n+     * Also, you might follow this approach which is using your own thread-local.\n+     * https://github.com/SourceForgery/tachikoma/pull/191\n+     * If you're still struggle to replace this method, please come to our slack workspace and let us know.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edde229b70c17028232811f96aaefc226ebc3cb1"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTkzNDc5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/RequestContext.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMjo0NDoyNFrOFcTFYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMToyMDo0MFrOFdJtUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIxNzEyMQ==", "bodyText": "How about just throwing UnsupportedOperationException with some message instead of adding a parameter?", "url": "https://github.com/line/armeria/pull/2375#discussion_r365217121", "createdAt": "2020-01-10T12:44:24Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/RequestContext.java", "diffHunk": "@@ -596,60 +588,61 @@ default Logger makeContextAware(Logger logger) {\n     }\n \n     /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * Do not use this method. The callback is never invoked.\n      *\n-     * @param callback a {@link Consumer} whose argument is this context\n-     */\n-    void onEnter(Consumer<? super RequestContext> callback);\n-\n-    /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * <p>This method has a limitation which is that the callback cannot be called when this\n+     * {@link RequestContext} is pushed first. So we decided to remove this method and provide\n+     * better API after 1.0. If you are using this, please find another way to achieve the same behavior.\n+     * Most of the cases, you might be able to just use {@link RequestLogListener}.\n+     * Also, you might follow this approach which is using your own thread-local.\n+     * https://github.com/SourceForgery/tachikoma/pull/191\n+     * If you're still struggle to replace this method, please come to our slack workspace and let us know.\n+     * We might be a help to you.\n+     *\n+     * <p>Please check out https://github.com/line/armeria/pull/2375\n      *\n-     * @deprecated Use {@link #onEnter(Consumer)} instead.\n+     * @deprecated Do not use this method.\n      */\n     @Deprecated\n-    default void onEnter(Runnable callback) {\n-        onEnter(ctx -> callback.run());\n+    default void onEnter(Consumer<? super RequestContext> callback, String doNotUseThisMethod) {\n+        /* no-op */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edde229b70c17028232811f96aaefc226ebc3cb1"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYzOTQ2NQ==", "bodyText": "UnsupportedOperationException is a good choice.\nOr how about making breaking changes in this case by removing these methods?\nBecause 1) I guess @minwoox added String doNotUseThisMethod for making breaking changes on purpose to produce compile errors and 2) Users can easily detect that it does not work anymore.", "url": "https://github.com/line/armeria/pull/2375#discussion_r365639465", "createdAt": "2020-01-13T03:37:33Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/RequestContext.java", "diffHunk": "@@ -596,60 +588,61 @@ default Logger makeContextAware(Logger logger) {\n     }\n \n     /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * Do not use this method. The callback is never invoked.\n      *\n-     * @param callback a {@link Consumer} whose argument is this context\n-     */\n-    void onEnter(Consumer<? super RequestContext> callback);\n-\n-    /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * <p>This method has a limitation which is that the callback cannot be called when this\n+     * {@link RequestContext} is pushed first. So we decided to remove this method and provide\n+     * better API after 1.0. If you are using this, please find another way to achieve the same behavior.\n+     * Most of the cases, you might be able to just use {@link RequestLogListener}.\n+     * Also, you might follow this approach which is using your own thread-local.\n+     * https://github.com/SourceForgery/tachikoma/pull/191\n+     * If you're still struggle to replace this method, please come to our slack workspace and let us know.\n+     * We might be a help to you.\n+     *\n+     * <p>Please check out https://github.com/line/armeria/pull/2375\n      *\n-     * @deprecated Use {@link #onEnter(Consumer)} instead.\n+     * @deprecated Do not use this method.\n      */\n     @Deprecated\n-    default void onEnter(Runnable callback) {\n-        onEnter(ctx -> callback.run());\n+    default void onEnter(Consumer<? super RequestContext> callback, String doNotUseThisMethod) {\n+        /* no-op */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIxNzEyMQ=="}, "originalCommit": {"oid": "edde229b70c17028232811f96aaefc226ebc3cb1"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY0ODk4Mg==", "bodyText": "I agree that if making a behavior breaking change anyways it's better to just remove the API. We want to deprecate only where users will be able to continue to use their unmodified code.", "url": "https://github.com/line/armeria/pull/2375#discussion_r365648982", "createdAt": "2020-01-13T05:10:49Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/RequestContext.java", "diffHunk": "@@ -596,60 +588,61 @@ default Logger makeContextAware(Logger logger) {\n     }\n \n     /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * Do not use this method. The callback is never invoked.\n      *\n-     * @param callback a {@link Consumer} whose argument is this context\n-     */\n-    void onEnter(Consumer<? super RequestContext> callback);\n-\n-    /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * <p>This method has a limitation which is that the callback cannot be called when this\n+     * {@link RequestContext} is pushed first. So we decided to remove this method and provide\n+     * better API after 1.0. If you are using this, please find another way to achieve the same behavior.\n+     * Most of the cases, you might be able to just use {@link RequestLogListener}.\n+     * Also, you might follow this approach which is using your own thread-local.\n+     * https://github.com/SourceForgery/tachikoma/pull/191\n+     * If you're still struggle to replace this method, please come to our slack workspace and let us know.\n+     * We might be a help to you.\n+     *\n+     * <p>Please check out https://github.com/line/armeria/pull/2375\n      *\n-     * @deprecated Use {@link #onEnter(Consumer)} instead.\n+     * @deprecated Do not use this method.\n      */\n     @Deprecated\n-    default void onEnter(Runnable callback) {\n-        onEnter(ctx -> callback.run());\n+    default void onEnter(Consumer<? super RequestContext> callback, String doNotUseThisMethod) {\n+        /* no-op */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIxNzEyMQ=="}, "originalCommit": {"oid": "edde229b70c17028232811f96aaefc226ebc3cb1"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjExMjA4MQ==", "bodyText": "Just wanted to give more information from Javadoc, but I guess it's too much. Let me remove this. Thanks!", "url": "https://github.com/line/armeria/pull/2375#discussion_r366112081", "createdAt": "2020-01-14T01:20:40Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/RequestContext.java", "diffHunk": "@@ -596,60 +588,61 @@ default Logger makeContextAware(Logger logger) {\n     }\n \n     /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * Do not use this method. The callback is never invoked.\n      *\n-     * @param callback a {@link Consumer} whose argument is this context\n-     */\n-    void onEnter(Consumer<? super RequestContext> callback);\n-\n-    /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * <p>This method has a limitation which is that the callback cannot be called when this\n+     * {@link RequestContext} is pushed first. So we decided to remove this method and provide\n+     * better API after 1.0. If you are using this, please find another way to achieve the same behavior.\n+     * Most of the cases, you might be able to just use {@link RequestLogListener}.\n+     * Also, you might follow this approach which is using your own thread-local.\n+     * https://github.com/SourceForgery/tachikoma/pull/191\n+     * If you're still struggle to replace this method, please come to our slack workspace and let us know.\n+     * We might be a help to you.\n+     *\n+     * <p>Please check out https://github.com/line/armeria/pull/2375\n      *\n-     * @deprecated Use {@link #onEnter(Consumer)} instead.\n+     * @deprecated Do not use this method.\n      */\n     @Deprecated\n-    default void onEnter(Runnable callback) {\n-        onEnter(ctx -> callback.run());\n+    default void onEnter(Consumer<? super RequestContext> callback, String doNotUseThisMethod) {\n+        /* no-op */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIxNzEyMQ=="}, "originalCommit": {"oid": "edde229b70c17028232811f96aaefc226ebc3cb1"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODgwNjcxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/RequestContextUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwMzo1MDoyNVrOFcs8Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwMzo1MDoyNVrOFcs8Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY0MDcyMw==", "bodyText": "Remove this condition? if {@code runCallbacks} is {@code true}", "url": "https://github.com/line/armeria/pull/2375#discussion_r365640723", "createdAt": "2020-01-13T03:50:25Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/RequestContextUtil.java", "diffHunk": "@@ -37,54 +37,20 @@ public static SafeCloseable noopSafeCloseable() {\n         return noopSafeCloseable;\n     }\n \n-    /**\n-     * Runs callbacks if {@code runCallbacks} is {@code true} and returns the {@link SafeCloseable}\n-     * which will remove the current {@link RequestContext} in the thread-local when\n-     * {@link SafeCloseable#close()} is invoked.\n-     */\n-    public static SafeCloseable pushWithoutRootCtx(RequestContext currentCtx, boolean runCallbacks) {\n-        requireNonNull(currentCtx, \"currentCtx\");\n-        if (runCallbacks) {\n-            currentCtx.invokeOnEnterCallbacks();\n-            return () -> {\n-                currentCtx.invokeOnExitCallbacks();\n-                RequestContextThreadLocal.remove();\n-            };\n-        } else {\n-            return RequestContextThreadLocal::remove;\n-        }\n-    }\n-\n-    /**\n-     * Runs callbacks if {@code runCallbacks} is {@code true} and returns the {@link SafeCloseable}\n-     * which will set the root in the thread-local when {@link SafeCloseable#close()} is invoked.\n-     */\n-    public static SafeCloseable pushWithRootCtx(ClientRequestContext currentCtx, ServiceRequestContext root,\n-                                                boolean runCallbacks) {\n-        return pushWithRootAndOldCtx(currentCtx, root, root, runCallbacks);\n-    }\n-\n     /**\n      * Runs callbacks in {@code currentCtx} and {@code root} if {@code runCallbacks} is {@code true} and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edde229b70c17028232811f96aaefc226ebc3cb1"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODg2MzIyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/RequestContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwNTowOTowMFrOFctbhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwNTowOTowMFrOFctbhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY0ODc3NQ==", "bodyText": "I guess it's opposite, uses RequestContext instead of own thread-local.\nMaybe looking at the PR is too confusing to make it worth linking to.", "url": "https://github.com/line/armeria/pull/2375#discussion_r365648775", "createdAt": "2020-01-13T05:09:00Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/RequestContext.java", "diffHunk": "@@ -596,60 +588,61 @@ default Logger makeContextAware(Logger logger) {\n     }\n \n     /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * Do not use this method. The callback is never invoked.\n      *\n-     * @param callback a {@link Consumer} whose argument is this context\n-     */\n-    void onEnter(Consumer<? super RequestContext> callback);\n-\n-    /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * <p>This method has a limitation which is that the callback cannot be called when this\n+     * {@link RequestContext} is pushed first. So we decided to remove this method and provide\n+     * better API after 1.0. If you are using this, please find another way to achieve the same behavior.\n+     * Most of the cases, you might be able to just use {@link RequestLogListener}.\n+     * Also, you might follow this approach which is using your own thread-local.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edde229b70c17028232811f96aaefc226ebc3cb1"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODg2MzUxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/RequestContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwNTowOTozMFrOFctbuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwNTowOTozMFrOFctbuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY0ODgyNA==", "bodyText": "We'll help you", "url": "https://github.com/line/armeria/pull/2375#discussion_r365648824", "createdAt": "2020-01-13T05:09:30Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/RequestContext.java", "diffHunk": "@@ -596,60 +588,61 @@ default Logger makeContextAware(Logger logger) {\n     }\n \n     /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * Do not use this method. The callback is never invoked.\n      *\n-     * @param callback a {@link Consumer} whose argument is this context\n-     */\n-    void onEnter(Consumer<? super RequestContext> callback);\n-\n-    /**\n-     * Registers {@code callback} to be run when re-entering this {@link RequestContext}, usually when using\n-     * the {@link #makeContextAware} family of methods. Any thread-local state associated with this context\n-     * should be restored by this callback.\n+     * <p>This method has a limitation which is that the callback cannot be called when this\n+     * {@link RequestContext} is pushed first. So we decided to remove this method and provide\n+     * better API after 1.0. If you are using this, please find another way to achieve the same behavior.\n+     * Most of the cases, you might be able to just use {@link RequestLogListener}.\n+     * Also, you might follow this approach which is using your own thread-local.\n+     * https://github.com/SourceForgery/tachikoma/pull/191\n+     * If you're still struggle to replace this method, please come to our slack workspace and let us know.\n+     * We might be a help to you.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edde229b70c17028232811f96aaefc226ebc3cb1"}, "originalPosition": 147}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2872, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}