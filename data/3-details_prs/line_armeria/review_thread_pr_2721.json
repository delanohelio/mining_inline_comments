{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MjQyNTk0", "number": 2721, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODozODoyMFrOD9shRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMjo1MDoxOFrOD-z95A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDE5MTQyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/logging/AbstractSanitizerBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODozODoyMFrOGXV2AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzoyNjoxOVrOGX5_kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyODMyMA==", "bodyText": "I guess we don't really need this type. Could you remove this class and just call toString() in RegexBasedSanitizer?", "url": "https://github.com/line/armeria/pull/2721#discussion_r427128320", "createdAt": "2020-05-19T08:38:20Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/AbstractSanitizerBase.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+import java.util.function.Function;\n+\n+/**\n+ * Base class.\n+ */\n+public class AbstractSanitizerBase implements Function<Object, Object> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyMDU5Mw==", "bodyText": "I removed it.", "url": "https://github.com/line/armeria/pull/2721#discussion_r427720593", "createdAt": "2020-05-20T03:26:19Z", "author": {"login": "amitvc"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/AbstractSanitizerBase.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+import java.util.function.Function;\n+\n+/**\n+ * Base class.\n+ */\n+public class AbstractSanitizerBase implements Function<Object, Object> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyODMyMA=="}, "originalCommit": {"oid": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDE5NTg0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODozOTozMlrOGXV4_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzoyNjoxMVrOGX5_bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyOTA4NA==", "bodyText": "final\nFunction<Object, String> ?", "url": "https://github.com/line/armeria/pull/2721#discussion_r427129084", "createdAt": "2020-05-19T08:39:32Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public class RegexBasedSanitizer extends AbstractSanitizerBase implements Function<Object, Object> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyMDU1Nw==", "bodyText": "Made adjustments.", "url": "https://github.com/line/armeria/pull/2721#discussion_r427720557", "createdAt": "2020-05-20T03:26:11Z", "author": {"login": "amitvc"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public class RegexBasedSanitizer extends AbstractSanitizerBase implements Function<Object, Object> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyOTA4NA=="}, "originalCommit": {"oid": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDIwMDgzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0MDo0MlrOGXV8DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzoyNTo0OVrOGX5_Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyOTg2OA==", "bodyText": "If List<Pattern> is the only parameter, how about removing this and adding RegexBasedSanitizer.of(Pattern...) and of(Iterable<Pattern>) ?", "url": "https://github.com/line/armeria/pull/2721#discussion_r427129868", "createdAt": "2020-05-19T08:40:42Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public class RegexBasedSanitizer extends AbstractSanitizerBase implements Function<Object, Object> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public Object apply(Object input) {\n+        String rawData = (String)super.apply(input);\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Builder facilitates building regexsanitizer.\n+     */\n+    public static class RegexBasedSanitizerBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyMDQ2Mg==", "bodyText": "Good point. done.", "url": "https://github.com/line/armeria/pull/2721#discussion_r427720462", "createdAt": "2020-05-20T03:25:49Z", "author": {"login": "amitvc"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public class RegexBasedSanitizer extends AbstractSanitizerBase implements Function<Object, Object> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public Object apply(Object input) {\n+        String rawData = (String)super.apply(input);\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Builder facilitates building regexsanitizer.\n+     */\n+    public static class RegexBasedSanitizerBuilder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyOTg2OA=="}, "originalCommit": {"oid": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDIwNTY3OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0MjowNlrOGXV_fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzoyNTozM1rOGX5-zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzMDc0OQ==", "bodyText": "Sorry, but we use AssertJ for assertions. Could you convert to AssertJ? e.g.\nassertThat(ctx.logBuilder().toString()).contains(\"trustin\");\n...\nassertThat(ctx.logBuilder().toString()).doesNotContain(\"trustin\");", "url": "https://github.com/line/armeria/pull/2721#discussion_r427130749", "createdAt": "2020-05-19T08:42:06Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java", "diffHunk": "@@ -95,4 +99,59 @@ void logger() throws Exception {\n         defaultLoggerClient.execute(ctx, req);\n         verifyNoInteractions(logger);\n     }\n+\n+    @Test\n+    void sanitizeRequestHeaders() throws Exception {\n+        final HttpRequest req = HttpRequest.of(RequestHeaders.of(HttpMethod.POST, \"/hello/trustin\",\n+                                                                 HttpHeaderNames.SCHEME, \"http\",\n+                                                                 HttpHeaderNames.AUTHORITY, \"test.com\"));\n+\n+        final ClientRequestContext ctx = ClientRequestContext.of(req);\n+\n+        // use default logger\n+        final LoggingClient defaultLoggerClient =\n+                LoggingClient.builder()\n+                             .requestLogLevel(LogLevel.INFO)\n+                             .successfulResponseLogLevel(LogLevel.INFO)\n+                             .requestHeadersSanitizer(new RegexBasedSanitizerBuilder()\n+                                                              .pattern(\"trustin\")\n+                                                              .pattern(\"com\")\n+                                                              .build())\n+                             .build(delegate);\n+\n+        // Pre sanitize step\n+        Assertions.assertTrue(ctx.logBuilder().toString().contains(\"trustin\"));\n+        Assertions.assertTrue(ctx.logBuilder().toString().contains(\"test.com\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyMDM5Nw==", "bodyText": "Done", "url": "https://github.com/line/armeria/pull/2721#discussion_r427720397", "createdAt": "2020-05-20T03:25:33Z", "author": {"login": "amitvc"}, "path": "core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java", "diffHunk": "@@ -95,4 +99,59 @@ void logger() throws Exception {\n         defaultLoggerClient.execute(ctx, req);\n         verifyNoInteractions(logger);\n     }\n+\n+    @Test\n+    void sanitizeRequestHeaders() throws Exception {\n+        final HttpRequest req = HttpRequest.of(RequestHeaders.of(HttpMethod.POST, \"/hello/trustin\",\n+                                                                 HttpHeaderNames.SCHEME, \"http\",\n+                                                                 HttpHeaderNames.AUTHORITY, \"test.com\"));\n+\n+        final ClientRequestContext ctx = ClientRequestContext.of(req);\n+\n+        // use default logger\n+        final LoggingClient defaultLoggerClient =\n+                LoggingClient.builder()\n+                             .requestLogLevel(LogLevel.INFO)\n+                             .successfulResponseLogLevel(LogLevel.INFO)\n+                             .requestHeadersSanitizer(new RegexBasedSanitizerBuilder()\n+                                                              .pattern(\"trustin\")\n+                                                              .pattern(\"com\")\n+                                                              .build())\n+                             .build(delegate);\n+\n+        // Pre sanitize step\n+        Assertions.assertTrue(ctx.logBuilder().toString().contains(\"trustin\"));\n+        Assertions.assertTrue(ctx.logBuilder().toString().contains(\"test.com\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzMDc0OQ=="}, "originalCommit": {"oid": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDIwNzI1OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/server/logging/LoggingServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0MjozMFrOGXWAeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzoyNTo0MFrOGX5-6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzMTAwMg==", "bodyText": "Ditto - AssertJ", "url": "https://github.com/line/armeria/pull/2721#discussion_r427131002", "createdAt": "2020-05-19T08:42:30Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/server/logging/LoggingServiceTest.java", "diffHunk": "@@ -349,6 +352,64 @@ void sanitizeExceptionIntoString() throws Exception {\n                             same(sanitizedResponseCause));\n     }\n \n+    @Test\n+    void sanitizeRequestHeaders() throws Exception {\n+\n+        final HttpRequest req = HttpRequest.of(RequestHeaders.of(HttpMethod.POST, \"/hello/trustin\",\n+                                                                 HttpHeaderNames.SCHEME, \"http\",\n+                                                                 HttpHeaderNames.AUTHORITY, \"test.com\"));\n+\n+        final ServiceRequestContext ctx = ServiceRequestContext.of(req);\n+        ctx.logBuilder().endResponse(new Exception(\"not sanitized\"));\n+        final Logger logger = LoggingTestUtil.newMockLogger(ctx, capturedCause);\n+        when(logger.isInfoEnabled()).thenReturn(true);\n+        when(logger.isWarnEnabled()).thenReturn(true);\n+\n+        final LoggingService service =\n+                LoggingService.builder()\n+                              .logger(logger)\n+                              .requestLogLevel(LogLevel.INFO)\n+                              .successfulResponseLogLevel(LogLevel.INFO)\n+                              .requestHeadersSanitizer(new RegexBasedSanitizerBuilder()\n+                                                               .pattern(\"trustin\")\n+                                                               .pattern(\"com\")\n+                                                               .build())\n+                              .newDecorator().apply(delegate);\n+\n+        Assertions.assertTrue(ctx.logBuilder().toString().contains(\"trustin\"));\n+        Assertions.assertTrue(ctx.logBuilder().toString().contains(\"test.com\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyMDQyNA==", "bodyText": "Done", "url": "https://github.com/line/armeria/pull/2721#discussion_r427720424", "createdAt": "2020-05-20T03:25:40Z", "author": {"login": "amitvc"}, "path": "core/src/test/java/com/linecorp/armeria/server/logging/LoggingServiceTest.java", "diffHunk": "@@ -349,6 +352,64 @@ void sanitizeExceptionIntoString() throws Exception {\n                             same(sanitizedResponseCause));\n     }\n \n+    @Test\n+    void sanitizeRequestHeaders() throws Exception {\n+\n+        final HttpRequest req = HttpRequest.of(RequestHeaders.of(HttpMethod.POST, \"/hello/trustin\",\n+                                                                 HttpHeaderNames.SCHEME, \"http\",\n+                                                                 HttpHeaderNames.AUTHORITY, \"test.com\"));\n+\n+        final ServiceRequestContext ctx = ServiceRequestContext.of(req);\n+        ctx.logBuilder().endResponse(new Exception(\"not sanitized\"));\n+        final Logger logger = LoggingTestUtil.newMockLogger(ctx, capturedCause);\n+        when(logger.isInfoEnabled()).thenReturn(true);\n+        when(logger.isWarnEnabled()).thenReturn(true);\n+\n+        final LoggingService service =\n+                LoggingService.builder()\n+                              .logger(logger)\n+                              .requestLogLevel(LogLevel.INFO)\n+                              .successfulResponseLogLevel(LogLevel.INFO)\n+                              .requestHeadersSanitizer(new RegexBasedSanitizerBuilder()\n+                                                               .pattern(\"trustin\")\n+                                                               .pattern(\"com\")\n+                                                               .build())\n+                              .newDecorator().apply(delegate);\n+\n+        Assertions.assertTrue(ctx.logBuilder().toString().contains(\"trustin\"));\n+        Assertions.assertTrue(ctx.logBuilder().toString().contains(\"test.com\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzMTAwMg=="}, "originalCommit": {"oid": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDI1NDE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo1MzozNFrOGXWejg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo1MzozNFrOGXWejg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzODcwMg==", "bodyText": "nit: 2020", "url": "https://github.com/line/armeria/pull/2721#discussion_r427138702", "createdAt": "2020-05-19T08:53:34Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2017 LINE Corporation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4347c2cb282e81050fdd4dea7dce8de9e0d8d5c0"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Mzg5ODU1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzo1MzoyNVrOGX6Wmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzo1MzoyNVrOGX6Wmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNjQ5MA==", "bodyText": "Pattern...p -> Pattern... patterns (need an empty space before p)", "url": "https://github.com/line/armeria/pull/2721#discussion_r427726490", "createdAt": "2020-05-20T03:53:25Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public String apply(Object input) {\n+        String rawData = input.toString();\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Utility method to create RegexBasedSanitizer.\n+     * @param p Pattern.\n+     * @return\n+     */\n+    public static RegexBasedSanitizer of(Pattern...p) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Mzg5OTMwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzo1NDowMlrOGX6XJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzo1NDowMlrOGX6XJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNjYyOA==", "bodyText": "return new RegexBasedSanitizer(ImmutableList.copyOf(requireNonNull(patterns, \"patterns\")));", "url": "https://github.com/line/armeria/pull/2721#discussion_r427726628", "createdAt": "2020-05-20T03:54:02Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public String apply(Object input) {\n+        String rawData = input.toString();\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Utility method to create RegexBasedSanitizer.\n+     * @param p Pattern.\n+     * @return\n+     */\n+    public static RegexBasedSanitizer of(Pattern...p) {\n+        return new RegexBasedSanitizer(Arrays.asList(p));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Mzg5OTgzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzo1NDoyNlrOGX6Xdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzo1NDoyNlrOGX6Xdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNjcxMA==", "bodyText": "Can remove @return because it doesn't say anything.", "url": "https://github.com/line/armeria/pull/2721#discussion_r427726710", "createdAt": "2020-05-20T03:54:26Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public String apply(Object input) {\n+        String rawData = input.toString();\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Utility method to create RegexBasedSanitizer.\n+     * @param p Pattern.\n+     * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzkwMDk2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzo1NToxMFrOGX6YHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNDowNzowOVrOGX6inQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNjg3OQ==", "bodyText": "nit: please check not-null\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static RegexBasedSanitizer of(Pattern...p) {\n          \n          \n            \n                public static RegexBasedSanitizer of(Pattern... patterns) {\n          \n          \n            \n                    requireNonNull(\"patterns\", patterns);", "url": "https://github.com/line/armeria/pull/2721#discussion_r427726879", "createdAt": "2020-05-20T03:55:10Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public String apply(Object input) {\n+        String rawData = input.toString();\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Utility method to create RegexBasedSanitizer.\n+     * @param p Pattern.\n+     * @return\n+     */\n+    public static RegexBasedSanitizer of(Pattern...p) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNzI3OQ==", "bodyText": "Could you add an additaional factory method for Iterable<? extends Pattern> patterns)\npublic static RegexBasedSanitizer of(Iterable<? extends Pattern> patterns);", "url": "https://github.com/line/armeria/pull/2721#discussion_r427727279", "createdAt": "2020-05-20T03:56:56Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public String apply(Object input) {\n+        String rawData = input.toString();\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Utility method to create RegexBasedSanitizer.\n+     * @param p Pattern.\n+     * @return\n+     */\n+    public static RegexBasedSanitizer of(Pattern...p) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNjg3OQ=="}, "originalCommit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyOTU2NQ==", "bodyText": "Pattern is a final class, so Iterable<Pattern> would be enough.", "url": "https://github.com/line/armeria/pull/2721#discussion_r427729565", "createdAt": "2020-05-20T04:07:09Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public String apply(Object input) {\n+        String rawData = input.toString();\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Utility method to create RegexBasedSanitizer.\n+     * @param p Pattern.\n+     * @return\n+     */\n+    public static RegexBasedSanitizer of(Pattern...p) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNjg3OQ=="}, "originalCommit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzkwMTA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzo1NToxNlrOGX6YNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzo1NToxNlrOGX6YNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNjkwMQ==", "bodyText": "@param patterns the {@link Pattern}s", "url": "https://github.com/line/armeria/pull/2721#discussion_r427726901", "createdAt": "2020-05-20T03:55:16Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public String apply(Object input) {\n+        String rawData = input.toString();\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Utility method to create RegexBasedSanitizer.\n+     * @param p Pattern.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzkwMjk1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzo1NjozN1rOGX6ZbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzo1NjozN1rOGX6ZbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNzIxMw==", "bodyText": "Can remove this of we can change to\nRegexBasedSanitizer(List<Pattern> patterns) {\n    this.patterns = patterns;", "url": "https://github.com/line/armeria/pull/2721#discussion_r427727213", "createdAt": "2020-05-20T03:56:37Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzkwNjIzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzo1ODo0NVrOGX6bew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzo1ODo0NVrOGX6bew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNzczOQ==", "bodyText": "Creates a new instance.", "url": "https://github.com/line/armeria/pull/2721#discussion_r427727739", "createdAt": "2020-05-20T03:58:45Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzkwNzIyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzo1OToyOFrOGX6cGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjoyODo1N1rOGYkJ3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNzg5Ng==", "bodyText": "Could remove two lines.", "url": "https://github.com/line/armeria/pull/2721#discussion_r427727896", "createdAt": "2020-05-20T03:59:28Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public String apply(Object input) {\n+        String rawData = input.toString();\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Utility method to create RegexBasedSanitizer.\n+     * @param p Pattern.\n+     * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMTM1OA==", "bodyText": "Done", "url": "https://github.com/line/armeria/pull/2721#discussion_r428411358", "createdAt": "2020-05-21T02:28:57Z", "author": {"login": "amitvc"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Constructor.\n+     * @param p Regex pattern.\n+     */\n+    RegexBasedSanitizer(List<Pattern> p) {\n+        this.patterns = p;\n+    }\n+\n+    @Override\n+    public String apply(Object input) {\n+        String rawData = input.toString();\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {\n+                rawData = m.replaceAll(\"\");\n+            }\n+        }\n+        return rawData;\n+    }\n+\n+    /**\n+     * Utility method to create RegexBasedSanitizer.\n+     * @param p Pattern.\n+     * @return", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNzg5Ng=="}, "originalCommit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzkxNTYwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNDowNToyNFrOGX6hHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjozMDo0NVrOGYkLaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyOTE4MA==", "bodyText": "Function<Object, String> -> Function<HttpHeaders, String>?", "url": "https://github.com/line/armeria/pull/2721#discussion_r427729180", "createdAt": "2020-05-20T04:05:24Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwNTQ0Mg==", "bodyText": "I think we want to be able to use the sanitizers on either httpheader or request content.", "url": "https://github.com/line/armeria/pull/2721#discussion_r428405442", "createdAt": "2020-05-21T02:04:52Z", "author": {"login": "amitvc"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyOTE4MA=="}, "originalCommit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMTc1Mg==", "bodyText": "Ah, right. Sorry about the comment. \ud83d\ude05", "url": "https://github.com/line/armeria/pull/2721#discussion_r428411752", "createdAt": "2020-05-21T02:30:45Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyOTE4MA=="}, "originalCommit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzkxNzE0OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNDowNjozNFrOGX6iEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNDowNjozNFrOGX6iEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyOTQyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(ctx.logBuilder().toString().contains(\"333-490-4499\"));\n          \n          \n            \n                    assertThat(ctx.logBuilder().toString()).contains(\"333-490-4499\");", "url": "https://github.com/line/armeria/pull/2721#discussion_r427729427", "createdAt": "2020-05-20T04:06:34Z", "author": {"login": "ikhoon"}, "path": "core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java", "diffHunk": "@@ -95,4 +99,57 @@ void logger() throws Exception {\n         defaultLoggerClient.execute(ctx, req);\n         verifyNoInteractions(logger);\n     }\n+\n+    @Test\n+    void sanitizeRequestHeaders() throws Exception {\n+        final HttpRequest req = HttpRequest.of(RequestHeaders.of(HttpMethod.POST, \"/hello/trustin\",\n+                                                                 HttpHeaderNames.SCHEME, \"http\",\n+                                                                 HttpHeaderNames.AUTHORITY, \"test.com\"));\n+\n+        final ClientRequestContext ctx = ClientRequestContext.of(req);\n+\n+        // use default logger\n+        final LoggingClient defaultLoggerClient =\n+                LoggingClient.builder()\n+                             .requestLogLevel(LogLevel.INFO)\n+                             .successfulResponseLogLevel(LogLevel.INFO)\n+                             .requestHeadersSanitizer(RegexBasedSanitizer.of(\n+                                     Pattern.compile(\"trustin\"),\n+                                     Pattern.compile(\"com\")))\n+                             .build(delegate);\n+\n+        // Pre sanitize step\n+        assertThat(ctx.logBuilder().toString().contains(\"trustin\"));\n+        assertThat(ctx.logBuilder().toString().contains(\"test.com\"));\n+        defaultLoggerClient.execute(ctx, req);\n+        // After the sanitize\n+        assertThat(!ctx.logBuilder().toString().contains(\"trustin\"));\n+        assertThat(!ctx.logBuilder().toString().contains(\"com\"));\n+    }\n+\n+    @Test\n+    void sanitizeRequestContent() throws Exception {\n+\n+        final HttpRequest req = HttpRequest.of(RequestHeaders.of(HttpMethod.POST, \"/hello/trustin\",\n+                                                                 HttpHeaderNames.SCHEME, \"http\",\n+                                                                 HttpHeaderNames.AUTHORITY, \"test.com\"));\n+\n+        final ClientRequestContext ctx = ClientRequestContext.of(req);\n+        ctx.logBuilder().requestContent(\"Virginia 333-490-4499\", \"Virginia 333-490-4499\");\n+\n+        // use default logger\n+        final LoggingClient defaultLoggerClient =\n+                LoggingClient.builder()\n+                             .requestLogLevel(LogLevel.INFO)\n+                             .successfulResponseLogLevel(LogLevel.INFO)\n+                             .requestContentSanitizer(RegexBasedSanitizer.of(\n+                                     Pattern.compile(\"\\\\d{3}[-\\\\.\\\\s]\\\\d{3}[-\\\\.\\\\s]\\\\d{4}\")))\n+                             .build(delegate);\n+\n+        // Before sanitize content\n+        assertThat(ctx.logBuilder().toString().contains(\"333-490-4499\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzkxOTE4OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNDowNzo1M1rOGX6jXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNDowNzo1M1rOGX6jXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyOTc1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(!ctx.logBuilder().toString().contains(\"333-490-4499\"));\n          \n          \n            \n                    assertThat(ctx.logBuilder().toString()).doesNotContain(\"333-490-4499\");", "url": "https://github.com/line/armeria/pull/2721#discussion_r427729758", "createdAt": "2020-05-20T04:07:53Z", "author": {"login": "ikhoon"}, "path": "core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java", "diffHunk": "@@ -95,4 +99,57 @@ void logger() throws Exception {\n         defaultLoggerClient.execute(ctx, req);\n         verifyNoInteractions(logger);\n     }\n+\n+    @Test\n+    void sanitizeRequestHeaders() throws Exception {\n+        final HttpRequest req = HttpRequest.of(RequestHeaders.of(HttpMethod.POST, \"/hello/trustin\",\n+                                                                 HttpHeaderNames.SCHEME, \"http\",\n+                                                                 HttpHeaderNames.AUTHORITY, \"test.com\"));\n+\n+        final ClientRequestContext ctx = ClientRequestContext.of(req);\n+\n+        // use default logger\n+        final LoggingClient defaultLoggerClient =\n+                LoggingClient.builder()\n+                             .requestLogLevel(LogLevel.INFO)\n+                             .successfulResponseLogLevel(LogLevel.INFO)\n+                             .requestHeadersSanitizer(RegexBasedSanitizer.of(\n+                                     Pattern.compile(\"trustin\"),\n+                                     Pattern.compile(\"com\")))\n+                             .build(delegate);\n+\n+        // Pre sanitize step\n+        assertThat(ctx.logBuilder().toString().contains(\"trustin\"));\n+        assertThat(ctx.logBuilder().toString().contains(\"test.com\"));\n+        defaultLoggerClient.execute(ctx, req);\n+        // After the sanitize\n+        assertThat(!ctx.logBuilder().toString().contains(\"trustin\"));\n+        assertThat(!ctx.logBuilder().toString().contains(\"com\"));\n+    }\n+\n+    @Test\n+    void sanitizeRequestContent() throws Exception {\n+\n+        final HttpRequest req = HttpRequest.of(RequestHeaders.of(HttpMethod.POST, \"/hello/trustin\",\n+                                                                 HttpHeaderNames.SCHEME, \"http\",\n+                                                                 HttpHeaderNames.AUTHORITY, \"test.com\"));\n+\n+        final ClientRequestContext ctx = ClientRequestContext.of(req);\n+        ctx.logBuilder().requestContent(\"Virginia 333-490-4499\", \"Virginia 333-490-4499\");\n+\n+        // use default logger\n+        final LoggingClient defaultLoggerClient =\n+                LoggingClient.builder()\n+                             .requestLogLevel(LogLevel.INFO)\n+                             .successfulResponseLogLevel(LogLevel.INFO)\n+                             .requestContentSanitizer(RegexBasedSanitizer.of(\n+                                     Pattern.compile(\"\\\\d{3}[-\\\\.\\\\s]\\\\d{3}[-\\\\.\\\\s]\\\\d{4}\")))\n+                             .build(delegate);\n+\n+        // Before sanitize content\n+        assertThat(ctx.logBuilder().toString().contains(\"333-490-4499\"));\n+        defaultLoggerClient.execute(ctx, req);\n+        // Ensure sanitize the request content of the phone number 333-490-4499\n+        assertThat(!ctx.logBuilder().toString().contains(\"333-490-4499\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzkyNTYwOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNDoxMjoyMVrOGX6nQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNDoxMjoyMVrOGX6nQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzczMDc1NQ==", "bodyText": "assertThat(ctx.logBuilder().toString()).contains(\"trustin\");", "url": "https://github.com/line/armeria/pull/2721#discussion_r427730755", "createdAt": "2020-05-20T04:12:21Z", "author": {"login": "minwoox"}, "path": "core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java", "diffHunk": "@@ -95,4 +99,57 @@ void logger() throws Exception {\n         defaultLoggerClient.execute(ctx, req);\n         verifyNoInteractions(logger);\n     }\n+\n+    @Test\n+    void sanitizeRequestHeaders() throws Exception {\n+        final HttpRequest req = HttpRequest.of(RequestHeaders.of(HttpMethod.POST, \"/hello/trustin\",\n+                                                                 HttpHeaderNames.SCHEME, \"http\",\n+                                                                 HttpHeaderNames.AUTHORITY, \"test.com\"));\n+\n+        final ClientRequestContext ctx = ClientRequestContext.of(req);\n+\n+        // use default logger\n+        final LoggingClient defaultLoggerClient =\n+                LoggingClient.builder()\n+                             .requestLogLevel(LogLevel.INFO)\n+                             .successfulResponseLogLevel(LogLevel.INFO)\n+                             .requestHeadersSanitizer(RegexBasedSanitizer.of(\n+                                     Pattern.compile(\"trustin\"),\n+                                     Pattern.compile(\"com\")))\n+                             .build(delegate);\n+\n+        // Pre sanitize step\n+        assertThat(ctx.logBuilder().toString().contains(\"trustin\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd11c7b7d69c2a0769cf776787b243dbd3ba55a5"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTg5NzMyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMjo1MDoxOFrOGZJEJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMjo1MDoxOFrOGZJEJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxNjEwMw==", "bodyText": "replaceAll calls find internally so I think we can remove this, or it has to run the regex from the beginning again.", "url": "https://github.com/line/armeria/pull/2721#discussion_r429016103", "createdAt": "2020-05-22T02:50:18Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.logging;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Regex based sanitizer.\n+ */\n+public final class RegexBasedSanitizer implements Function<Object, String> {\n+\n+    /**\n+     * Returns a new instance created from the specified {@link Pattern}s.\n+     */\n+    public static RegexBasedSanitizer of(Pattern... patterns) {\n+        requireNonNull(patterns, \"patterns\");\n+        return new RegexBasedSanitizer(ImmutableList.copyOf(patterns));\n+    }\n+\n+    /**\n+     * Returns a new instance created from the specified {@link Pattern}s.\n+     */\n+    public static RegexBasedSanitizer of(Iterable<Pattern> patterns) {\n+        requireNonNull(patterns, \"patterns\");\n+        return new RegexBasedSanitizer(ImmutableList.copyOf(patterns));\n+    }\n+\n+    private final List<Pattern> patterns;\n+\n+    /**\n+     * Creates a new instance.\n+     * @param patterns {@link Pattern}.\n+     */\n+    RegexBasedSanitizer(List<Pattern> patterns) {\n+        this.patterns = patterns;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String apply(@Nullable Object input) {\n+        if (input == null) {\n+            return null;\n+        }\n+\n+        String rawData = input.toString();\n+        for (Pattern pattern : patterns) {\n+            final Matcher m = pattern.matcher(rawData);\n+            if (m.find()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10759e3f73a93aff4234902b610756d49a50e3a9"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2625, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}