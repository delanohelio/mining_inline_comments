{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMDYxNjMy", "number": 2838, "title": "Deprecate Spring registration beans", "bodyText": "Motivation:\nMany new features are added to Armeria fluent service binding builder.\nBut we omitted to port the features to Spring registration beans.\nThe registration beans switch to ArmeriaServerConfigrator and DocServiceConfigrator without difficulty.\nSee #2787 for more information.\nModifications:\n\nDeprecate HttpServiceRegistrationBean\n// Before:\n@Bean\npublic HttpServiceRegistrationBean myService() {\n    return new HttpServiceRegistrationBean()\n            .setServiceName(\"myService\")\n            .setService(new MyService())\n            .setRoute(Route.builder().path(\"/ok\").methods(HttpMethod.GET, HttpMethod.POST).build())\n            .setDecorators(LoggingService.newDecorator());\n}\n// After:\n@Bean\npublic ArmeriaServerConfigurator myService() {\n    return server -> {\n        server.route()\n              .path(\"/ok\")\n              .methods(HttpMethod.GET, HttpMethod.POST)\n              .defaultServiceName(\"myService\")\n              .decorator(LoggingService.newDecorator())\n              .build(new MyService());\n    };\n}\n\nDeprecate AnnotatedServiceRegistrationBean\n// Before:\n@Bean\npublic AnnotatedServiceRegistrationBean myService() {\n    return new AnnotatedServiceRegistrationBean()\n            .setServiceName(\"myAnnotatedService\")\n            .setPathPrefix(\"/my_service\")\n            .setService(new MyAnnotatedService())\n            .setDecorators(LoggingService.newDecorator())\n            .setExceptionHandlers(new MyExceptionHandler())\n            .setRequestConverters(new MyRequestConverter())\n            .setResponseConverters(new MyResponseConverter())\n            .addExampleRequests(AnnotatedExampleRequest.of(\"myMethod\", \"{\\\"foo\\\":\\\"bar\\\"}\"))\n            .addExampleHeaders(ExampleHeaders.of(\"my-header\", \"headerVal\"));\n}\n// After:\n@Bean\npublic ArmeriaServerConfigurator myService() {\n    return server -> {\n        server.annotatedService()\n              .pathPrefix(\"/my_service\")\n              .exceptionHandlers(new MyExceptionHandler())\n              .requestConverters(new MyRequestConverter())\n              .responseConverters(new MyResponseConverter())\n              .decorator(LoggingService.newDecorator())\n              .build(new MyAnnoatedService());\n    };\n}\n\n@Bean\npublic DocServiceConfigurator myServiceDoc() {\n    return docService -> {\n        docService.exampleRequestForMethod(MyAnnotatedService.class,\n                                           \"myMethod\", \"{\\\"foo\\\":\\\"bar\\\"}\")\n                  .exampleHttpHeaders(MyAnnotatedService.class,\n                                      HttpHeaders.of(\"my-header\", \"headerVal\")));\n\n    };\n}\n\nDeprecate GrpcServiceRegistrationBean\n// Before:\n@Bean\npublic GrpcServiceRegistrationBean myService() {\n    return new GrpcServiceRegistrationBean()\n            .setServiceName(\"myService\")\n            .setService(GrpcService.builder()\n                                   .addService(new MyService())\n                                   .supportedSerializationFormats(GrpcSerializationFormats.values())\n                                   .enableUnframedRequests(true)\n                                   .build())\n            .setDecorators(LoggingService.newDecorator())\n            .addExampleRequests(GrpcExampleRequest.of(\n                   MyServiceGrpc.SERVICE_NAME, \"Hello\",\n                   HelloRequest.newBuilder().setName(\"Armeria\").build()))\n            .addExampleHeaders(GrpcExampleHeaders.of(HelloServiceGrpc.SERVICE_NAME,\n                                                     HttpHeaders.of(\"my-header\", \"headerVal\")));\n}\n// After:\n@Bean\npublic ArmeriaServerConfigurator myService() {\n    return server -> {\n        server.service(GrpcService.builder()\n                                  .addService(new MyService())\n                                  .supportedSerializationFormats(GrpcSerializationFormats.values())\n                                  .enableUnframedRequests(true)\n                                  .build(),\n                       LoggingService.newDecorator());\n    };\n}\n\n@Bean\npublic DocServiceConfigurator myServiceDoc() {\n    return docService -> {\n        docService.exampleRequestForMethod(HelloServiceGrpc.SERVICE_NAME, \"Hello\",\n                                           HelloRequest.newBuilder().setName(\"Armeria\").build())\n                  .exampleHttpHeaders(HelloServiceGrpc.SERVICE_NAME,\n                                      HttpHeaders.of(\"my-header\", \"headerVal\"))\n    };\n}\n\nDeprecate ThriftServiceRegistrationBean\n// Before:\n@Bean\npublic ThriftServiceRegistrationBean okService() {\n    return new ThriftServiceRegistrationBean()\n            .setServiceName(\"myThriftService\")\n            .setPath(\"/my_service\")\n            .setService(new MyThriftService())\n            .setDecorators(LoggingService.newDecorator())\n            .addExampleRequests(new MyThriftService.hello_args(\"Armeria\"))\n            .addExampleHeaders(ExampleHeaders.of(AUTHORIZATION, \"bearer b03c4fed1a\"));\n}\n// After:\n@Bean\npublic ArmeriaServerConfigurator myService() {\n    return server -> {\n        server.route()\n              .path(\"/my_service\")\n              .decorator(LoggingService.newDecorator())\n              .build(THttpService.of(new MyThriftService()));\n    };\n}\n\n@Bean\npublic DocServiceConfigurator myServiceDoc() {\n    return docService -> {\n        docService.exampleRequest(new MyThriftService.hello_args(\"Armeria\"))\n                  .exampleHttpHeaders(HttpHeaders.of(AUTHORIZATION, \"bearer b03c4fed1a\"));\n    };\n}\n\nDeprecate MeterIdPrefixFunctionFactory in favor of MeterIdPrefixFunction.\n\nThe service name is automatically set now #2780\n\n\n\nResult:\n\nClean up mismatch and duplicate code.\nClose #2787", "createdAt": "2020-06-25T14:33:10Z", "url": "https://github.com/line/armeria/pull/2838", "merged": true, "mergeCommit": {"oid": "e0e1b910582ff15928798ad0dedbaf18df57f69f"}, "closed": true, "closedAt": "2020-06-26T08:33:15Z", "author": {"login": "ikhoon"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuvnSdgBqjM0ODI2OTcyNzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcu_CGtgFqTQzODExMjA5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9fb5f96cd94b5c7e82ec5a9abd6a8a1c32ce0724", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/9fb5f96cd94b5c7e82ec5a9abd6a8a1c32ce0724", "committedDate": "2020-06-25T14:04:52Z", "message": "Deprecate Spring registration beans\n\nMotivation:\n\nMany new features are added to Armeria fluent service binding builder.\nBut we omitted to port the feautes to Spring registration beans.\nThe registration beans switch to `ArmeriaServerConfigrator` and `DocServiceConfigrator` without difficulty.\nSee #2787 for more inforation.\n\nModifications:\n\n- Deprecate HttpServiceRegistrationBean\n```java\n// Before:\n@Bean\npublic HttpServiceRegistrationBean myService() {\n    return new HttpServiceRegistrationBean()\n            .setServiceName(\"myService\")\n            .setService(new MyService())\n            .setRoute(Route.builder().path(\"/ok\").methods(HttpMethod.GET, HttpMethod.POST).build())\n            .setDecorators(LoggingService.newDecorator());\n}\n// After:\n@Bean\npublic ArmeriaServerConfigurator myService() {\n    return server -> {\n        server.route()\n              .path(\"/ok\")\n              .methods(HttpMethod.GET, HttpMethod.POST)\n              .defaultServiceName(\"myService\")\n              .decorator(LoggingService.newDecorator())\n              .build(new MyService());\n    };\n}\n```\n- Deprecate AnnotatedServiceRegistrationBean\n```java\n// Before:\n@Bean\npublic AnnotatedServiceRegistrationBean myService() {\n    return new AnnotatedServiceRegistrationBean()\n            .setServiceName(\"myAnnotatedService\")\n            .setPathPrefix(\"/my_service\")\n            .setService(new MyAnnotatedService())\n            .setDecorators(LoggingService.newDecorator())\n            .setExceptionHandlers(new MyExceptionHandler())\n            .setRequestConverters(new MyRequestConverter())\n            .setResponseConverters(new MyResponseConverter())\n            .addExampleRequests(AnnotatedExampleRequest.of(\"myMethod\", \"{\\\"foo\\\":\\\"bar\\\"}\"))\n            .addExampleHeaders(ExampleHeaders.of(\"my-header\", \"headerVal\"));\n}\n// After:\n@Bean\npublic ArmeriaServerConfigurator myService() {\n    return server -> {\n        server.annotatedService()\n              .pathPrefix(\"/my_service\")\n              .exceptionHandlers(new MyExceptionHandler())\n              .requestConverters(new MyRequestConverter())\n              .responseConverters(new MyResponseConverter())\n              .decorator(LoggingService.newDecorator())\n              .build(new MyAnnoatedService());\n    };\n}\n\n@Bean\npublic DocServiceConfigurator myServiceDoc() {\n    return docService -> {\n        docService.exampleRequestForMethod(MyAnnotatedService.class,\n                                           \"myMethod\", \"{\\\"foo\\\":\\\"bar\\\"}\")\n                  .exampleHttpHeaders(MyAnnotatedService.class,\n                                      HttpHeaders.of(\"my-header\", \"headerVal\")));\n\n    };\n}\n```\n- Deprecate GrpcServiceRegistrationBean\n```java\n// Before:\n@Bean\npublic GrpcServiceRegistrationBean myService() {\n    return new GrpcServiceRegistrationBean()\n            .setServiceName(\"myService\")\n            .setService(GrpcService.builder()\n                                   .addService(new MyService())\n                                   .supportedSerializationFormats(GrpcSerializationFormats.values())\n                                   .enableUnframedRequests(true)\n                                   .build())\n            .setDecorators(LoggingService.newDecorator())\n            .addExampleRequests(GrpcExampleRequest.of(\n                   MyServiceGrpc.SERVICE_NAME, \"Hello\",\n                   HelloRequest.newBuilder().setName(\"Armeria\").build()))\n            .addExampleHeaders(GrpcExampleHeaders.of(HelloServiceGrpc.SERVICE_NAME,\n                                                     HttpHeaders.of(\"my-header\", \"headerVal\")));\n}\n// After:\n@Bean\npublic ArmeriaServerConfigurator myService() {\n    return server -> {\n        server.route()\n              .path(\"/my-service\")\n              .decorator(LoggingService.newDecorator())\n              .build(GrpcService.builder()\n                                .addService(new MyService())\n                                .supportedSerializationFormats(GrpcSerializationFormats.values())\n                                .enableUnframedRequests(true)\n                                .build());\n    };\n}\n\n@Bean\npublic DocServiceConfigurator myServiceDoc() {\n    return docService -> {\n        docService.exampleRequestForMethod(HelloServiceGrpc.SERVICE_NAME, \"Hello\",\n                                           HelloRequest.newBuilder().setName(\"Armeria\").build())\n                  .exampleHttpHeaders(HelloServiceGrpc.SERVICE_NAME,\n                                      HttpHeaders.of(\"my-header\", \"headerVal\"))\n    };\n}\n```\n- Deprecate ThriftServiceRegistrationBean\n```java\n// Before:\n@Bean\npublic ThriftServiceRegistrationBean okService() {\n    return new ThriftServiceRegistrationBean()\n            .setServiceName(\"myThriftService\")\n            .setPath(\"/my_service\")\n            .setService(new MyThriftService())\n            .setDecorators(LoggingService.newDecorator())\n            .addExampleRequests(new MyThriftService.hello_args(\"Armeria\"))\n            .addExampleHeaders(ExampleHeaders.of(AUTHORIZATION, \"bearer b03c4fed1a\"));\n}\n// After:\n@Bean\npublic ArmeriaServerConfigurator myService() {\n    return server -> {\n        server.route()\n              .path(\"/my_service\")\n              .decorator(LoggingService.newDecorator())\n              .build(THttpService.of(new MyThriftService()));\n    };\n}\n\n@Bean\npublic DocServiceConfigurator myServiceDoc() {\n    return docService -> {\n        docService.exampleRequest(new MyThriftService.hello_args(\"Armeria\"))\n                  .exampleHttpHeaders(HttpHeaders.of(AUTHORIZATION, \"bearer b03c4fed1a\"));\n    };\n}\n```\n\nResult:\n\n- Clean up mismatch and duplicate code.\n- Close #2787"}, "afterCommit": {"oid": "dd517e90b0526a44ff6020d9badc5efe49a3f90c", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/dd517e90b0526a44ff6020d9badc5efe49a3f90c", "committedDate": "2020-06-25T14:34:23Z", "message": "Deprecate Spring registration beans\n\nMotivation:\n\nMany new features are added to Armeria fluent service binding builder.\nBut we omitted to port the feautes to Spring registration beans.\nThe registration beans switch to `ArmeriaServerConfigrator` and `DocServiceConfigrator` without difficulty.\nSee #2787 for more inforation.\n\nModifications:\n\n- Deprecate HttpServiceRegistrationBean\n  ```java\n  // Before:\n  @Bean\n  public HttpServiceRegistrationBean myService() {\n      return new HttpServiceRegistrationBean()\n              .setServiceName(\"myService\")\n              .setService(new MyService())\n              .setRoute(Route.builder().path(\"/ok\").methods(HttpMethod.GET, HttpMethod.POST).build())\n              .setDecorators(LoggingService.newDecorator());\n  }\n  // After:\n  @Bean\n  public ArmeriaServerConfigurator myService() {\n      return server -> {\n          server.route()\n                .path(\"/ok\")\n                .methods(HttpMethod.GET, HttpMethod.POST)\n                .defaultServiceName(\"myService\")\n                .decorator(LoggingService.newDecorator())\n                .build(new MyService());\n      };\n  }\n  ```\n- Deprecate AnnotatedServiceRegistrationBean\n  ```java\n  // Before:\n  @Bean\n  public AnnotatedServiceRegistrationBean myService() {\n      return new AnnotatedServiceRegistrationBean()\n              .setServiceName(\"myAnnotatedService\")\n              .setPathPrefix(\"/my_service\")\n              .setService(new MyAnnotatedService())\n              .setDecorators(LoggingService.newDecorator())\n              .setExceptionHandlers(new MyExceptionHandler())\n              .setRequestConverters(new MyRequestConverter())\n              .setResponseConverters(new MyResponseConverter())\n              .addExampleRequests(AnnotatedExampleRequest.of(\"myMethod\", \"{\\\"foo\\\":\\\"bar\\\"}\"))\n              .addExampleHeaders(ExampleHeaders.of(\"my-header\", \"headerVal\"));\n  }\n  // After:\n  @Bean\n  public ArmeriaServerConfigurator myService() {\n      return server -> {\n          server.annotatedService()\n                .pathPrefix(\"/my_service\")\n                .exceptionHandlers(new MyExceptionHandler())\n                .requestConverters(new MyRequestConverter())\n                .responseConverters(new MyResponseConverter())\n                .decorator(LoggingService.newDecorator())\n                .build(new MyAnnoatedService());\n      };\n  }\n\n  @Bean\n  public DocServiceConfigurator myServiceDoc() {\n      return docService -> {\n          docService.exampleRequestForMethod(MyAnnotatedService.class,\n                                             \"myMethod\", \"{\\\"foo\\\":\\\"bar\\\"}\")\n                    .exampleHttpHeaders(MyAnnotatedService.class,\n                                        HttpHeaders.of(\"my-header\", \"headerVal\")));\n\n      };\n  }\n  ```\n- Deprecate GrpcServiceRegistrationBean\n  ```java\n  // Before:\n  @Bean\n  public GrpcServiceRegistrationBean myService() {\n      return new GrpcServiceRegistrationBean()\n              .setServiceName(\"myService\")\n              .setService(GrpcService.builder()\n                                     .addService(new MyService())\n                                     .supportedSerializationFormats(GrpcSerializationFormats.values())\n                                     .enableUnframedRequests(true)\n                                     .build())\n              .setDecorators(LoggingService.newDecorator())\n              .addExampleRequests(GrpcExampleRequest.of(\n                     MyServiceGrpc.SERVICE_NAME, \"Hello\",\n                     HelloRequest.newBuilder().setName(\"Armeria\").build()))\n              .addExampleHeaders(GrpcExampleHeaders.of(HelloServiceGrpc.SERVICE_NAME,\n                                                       HttpHeaders.of(\"my-header\", \"headerVal\")));\n  }\n  // After:\n  @Bean\n  public ArmeriaServerConfigurator myService() {\n      return server -> {\n          server.route()\n                .path(\"/my-service\")\n                .decorator(LoggingService.newDecorator())\n                .build(GrpcService.builder()\n                                  .addService(new MyService())\n                                  .supportedSerializationFormats(GrpcSerializationFormats.values())\n                                  .enableUnframedRequests(true)\n                                  .build());\n      };\n  }\n\n  @Bean\n  public DocServiceConfigurator myServiceDoc() {\n      return docService -> {\n          docService.exampleRequestForMethod(HelloServiceGrpc.SERVICE_NAME, \"Hello\",\n                                             HelloRequest.newBuilder().setName(\"Armeria\").build())\n                    .exampleHttpHeaders(HelloServiceGrpc.SERVICE_NAME,\n                                        HttpHeaders.of(\"my-header\", \"headerVal\"))\n      };\n  }\n  ```\n- Deprecate ThriftServiceRegistrationBean\n  ```java\n  // Before:\n  @Bean\n  public ThriftServiceRegistrationBean okService() {\n      return new ThriftServiceRegistrationBean()\n              .setServiceName(\"myThriftService\")\n              .setPath(\"/my_service\")\n              .setService(new MyThriftService())\n              .setDecorators(LoggingService.newDecorator())\n              .addExampleRequests(new MyThriftService.hello_args(\"Armeria\"))\n              .addExampleHeaders(ExampleHeaders.of(AUTHORIZATION, \"bearer b03c4fed1a\"));\n  }\n  // After:\n  @Bean\n  public ArmeriaServerConfigurator myService() {\n      return server -> {\n          server.route()\n                .path(\"/my_service\")\n                .decorator(LoggingService.newDecorator())\n                .build(THttpService.of(new MyThriftService()));\n      };\n  }\n\n  @Bean\n  public DocServiceConfigurator myServiceDoc() {\n      return docService -> {\n          docService.exampleRequest(new MyThriftService.hello_args(\"Armeria\"))\n                    .exampleHttpHeaders(HttpHeaders.of(AUTHORIZATION, \"bearer b03c4fed1a\"));\n      };\n  }\n  ```\n\nResult:\n\n- Clean up mismatch and duplicate code.\n- Close #2787"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59c4b52f6449d68dd87fd1ff38300ff4b91f1f4c", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/59c4b52f6449d68dd87fd1ff38300ff4b91f1f4c", "committedDate": "2020-06-25T14:36:07Z", "message": "Deprecate Spring registration beans\n\nMotivation:\n\nMany new features are added to Armeria fluent service binding builder.\nBut we omitted to port the feautes to Spring registration beans.\nThe registration beans switch to `ArmeriaServerConfigrator` and `DocServiceConfigrator` without difficulty.\nSee #2787 for more inforation.\n\nModifications:\n\n- Deprecate HttpServiceRegistrationBean\n  ```java\n  // Before:\n  @Bean\n  public HttpServiceRegistrationBean myService() {\n      return new HttpServiceRegistrationBean()\n              .setServiceName(\"myService\")\n              .setService(new MyService())\n              .setRoute(Route.builder().path(\"/ok\").methods(HttpMethod.GET, HttpMethod.POST).build())\n              .setDecorators(LoggingService.newDecorator());\n  }\n  // After:\n  @Bean\n  public ArmeriaServerConfigurator myService() {\n      return server -> {\n          server.route()\n                .path(\"/ok\")\n                .methods(HttpMethod.GET, HttpMethod.POST)\n                .defaultServiceName(\"myService\")\n                .decorator(LoggingService.newDecorator())\n                .build(new MyService());\n      };\n  }\n  ```\n- Deprecate AnnotatedServiceRegistrationBean\n  ```java\n  // Before:\n  @Bean\n  public AnnotatedServiceRegistrationBean myService() {\n      return new AnnotatedServiceRegistrationBean()\n              .setServiceName(\"myAnnotatedService\")\n              .setPathPrefix(\"/my_service\")\n              .setService(new MyAnnotatedService())\n              .setDecorators(LoggingService.newDecorator())\n              .setExceptionHandlers(new MyExceptionHandler())\n              .setRequestConverters(new MyRequestConverter())\n              .setResponseConverters(new MyResponseConverter())\n              .addExampleRequests(AnnotatedExampleRequest.of(\"myMethod\", \"{\\\"foo\\\":\\\"bar\\\"}\"))\n              .addExampleHeaders(ExampleHeaders.of(\"my-header\", \"headerVal\"));\n  }\n  // After:\n  @Bean\n  public ArmeriaServerConfigurator myService() {\n      return server -> {\n          server.annotatedService()\n                .pathPrefix(\"/my_service\")\n                .exceptionHandlers(new MyExceptionHandler())\n                .requestConverters(new MyRequestConverter())\n                .responseConverters(new MyResponseConverter())\n                .decorator(LoggingService.newDecorator())\n                .build(new MyAnnoatedService());\n      };\n  }\n\n  @Bean\n  public DocServiceConfigurator myServiceDoc() {\n      return docService -> {\n          docService.exampleRequestForMethod(MyAnnotatedService.class,\n                                             \"myMethod\", \"{\\\"foo\\\":\\\"bar\\\"}\")\n                    .exampleHttpHeaders(MyAnnotatedService.class,\n                                        HttpHeaders.of(\"my-header\", \"headerVal\")));\n\n      };\n  }\n  ```\n- Deprecate GrpcServiceRegistrationBean\n  ```java\n  // Before:\n  @Bean\n  public GrpcServiceRegistrationBean myService() {\n      return new GrpcServiceRegistrationBean()\n              .setServiceName(\"myService\")\n              .setService(GrpcService.builder()\n                                     .addService(new MyService())\n                                     .supportedSerializationFormats(GrpcSerializationFormats.values())\n                                     .enableUnframedRequests(true)\n                                     .build())\n              .setDecorators(LoggingService.newDecorator())\n              .addExampleRequests(GrpcExampleRequest.of(\n                     MyServiceGrpc.SERVICE_NAME, \"Hello\",\n                     HelloRequest.newBuilder().setName(\"Armeria\").build()))\n              .addExampleHeaders(GrpcExampleHeaders.of(HelloServiceGrpc.SERVICE_NAME,\n                                                       HttpHeaders.of(\"my-header\", \"headerVal\")));\n  }\n  // After:\n  @Bean\n  public ArmeriaServerConfigurator myService() {\n      return server -> {\n          server.route()\n                .path(\"/my-service\")\n                .decorator(LoggingService.newDecorator())\n                .build(GrpcService.builder()\n                                  .addService(new MyService())\n                                  .supportedSerializationFormats(GrpcSerializationFormats.values())\n                                  .enableUnframedRequests(true)\n                                  .build());\n      };\n  }\n\n  @Bean\n  public DocServiceConfigurator myServiceDoc() {\n      return docService -> {\n          docService.exampleRequestForMethod(HelloServiceGrpc.SERVICE_NAME, \"Hello\",\n                                             HelloRequest.newBuilder().setName(\"Armeria\").build())\n                    .exampleHttpHeaders(HelloServiceGrpc.SERVICE_NAME,\n                                        HttpHeaders.of(\"my-header\", \"headerVal\"))\n      };\n  }\n  ```\n- Deprecate ThriftServiceRegistrationBean\n  ```java\n  // Before:\n  @Bean\n  public ThriftServiceRegistrationBean okService() {\n      return new ThriftServiceRegistrationBean()\n              .setServiceName(\"myThriftService\")\n              .setPath(\"/my_service\")\n              .setService(new MyThriftService())\n              .setDecorators(LoggingService.newDecorator())\n              .addExampleRequests(new MyThriftService.hello_args(\"Armeria\"))\n              .addExampleHeaders(ExampleHeaders.of(AUTHORIZATION, \"bearer b03c4fed1a\"));\n  }\n  // After:\n  @Bean\n  public ArmeriaServerConfigurator myService() {\n      return server -> {\n          server.route()\n                .path(\"/my_service\")\n                .decorator(LoggingService.newDecorator())\n                .build(THttpService.of(new MyThriftService()));\n      };\n  }\n\n  @Bean\n  public DocServiceConfigurator myServiceDoc() {\n      return docService -> {\n          docService.exampleRequest(new MyThriftService.hello_args(\"Armeria\"))\n                    .exampleHttpHeaders(HttpHeaders.of(AUTHORIZATION, \"bearer b03c4fed1a\"));\n      };\n  }\n  ```\n\nResult:\n\n- Clean up mismatch and duplicate code.\n- Close #2787"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dd517e90b0526a44ff6020d9badc5efe49a3f90c", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/dd517e90b0526a44ff6020d9badc5efe49a3f90c", "committedDate": "2020-06-25T14:34:23Z", "message": "Deprecate Spring registration beans\n\nMotivation:\n\nMany new features are added to Armeria fluent service binding builder.\nBut we omitted to port the feautes to Spring registration beans.\nThe registration beans switch to `ArmeriaServerConfigrator` and `DocServiceConfigrator` without difficulty.\nSee #2787 for more inforation.\n\nModifications:\n\n- Deprecate HttpServiceRegistrationBean\n  ```java\n  // Before:\n  @Bean\n  public HttpServiceRegistrationBean myService() {\n      return new HttpServiceRegistrationBean()\n              .setServiceName(\"myService\")\n              .setService(new MyService())\n              .setRoute(Route.builder().path(\"/ok\").methods(HttpMethod.GET, HttpMethod.POST).build())\n              .setDecorators(LoggingService.newDecorator());\n  }\n  // After:\n  @Bean\n  public ArmeriaServerConfigurator myService() {\n      return server -> {\n          server.route()\n                .path(\"/ok\")\n                .methods(HttpMethod.GET, HttpMethod.POST)\n                .defaultServiceName(\"myService\")\n                .decorator(LoggingService.newDecorator())\n                .build(new MyService());\n      };\n  }\n  ```\n- Deprecate AnnotatedServiceRegistrationBean\n  ```java\n  // Before:\n  @Bean\n  public AnnotatedServiceRegistrationBean myService() {\n      return new AnnotatedServiceRegistrationBean()\n              .setServiceName(\"myAnnotatedService\")\n              .setPathPrefix(\"/my_service\")\n              .setService(new MyAnnotatedService())\n              .setDecorators(LoggingService.newDecorator())\n              .setExceptionHandlers(new MyExceptionHandler())\n              .setRequestConverters(new MyRequestConverter())\n              .setResponseConverters(new MyResponseConverter())\n              .addExampleRequests(AnnotatedExampleRequest.of(\"myMethod\", \"{\\\"foo\\\":\\\"bar\\\"}\"))\n              .addExampleHeaders(ExampleHeaders.of(\"my-header\", \"headerVal\"));\n  }\n  // After:\n  @Bean\n  public ArmeriaServerConfigurator myService() {\n      return server -> {\n          server.annotatedService()\n                .pathPrefix(\"/my_service\")\n                .exceptionHandlers(new MyExceptionHandler())\n                .requestConverters(new MyRequestConverter())\n                .responseConverters(new MyResponseConverter())\n                .decorator(LoggingService.newDecorator())\n                .build(new MyAnnoatedService());\n      };\n  }\n\n  @Bean\n  public DocServiceConfigurator myServiceDoc() {\n      return docService -> {\n          docService.exampleRequestForMethod(MyAnnotatedService.class,\n                                             \"myMethod\", \"{\\\"foo\\\":\\\"bar\\\"}\")\n                    .exampleHttpHeaders(MyAnnotatedService.class,\n                                        HttpHeaders.of(\"my-header\", \"headerVal\")));\n\n      };\n  }\n  ```\n- Deprecate GrpcServiceRegistrationBean\n  ```java\n  // Before:\n  @Bean\n  public GrpcServiceRegistrationBean myService() {\n      return new GrpcServiceRegistrationBean()\n              .setServiceName(\"myService\")\n              .setService(GrpcService.builder()\n                                     .addService(new MyService())\n                                     .supportedSerializationFormats(GrpcSerializationFormats.values())\n                                     .enableUnframedRequests(true)\n                                     .build())\n              .setDecorators(LoggingService.newDecorator())\n              .addExampleRequests(GrpcExampleRequest.of(\n                     MyServiceGrpc.SERVICE_NAME, \"Hello\",\n                     HelloRequest.newBuilder().setName(\"Armeria\").build()))\n              .addExampleHeaders(GrpcExampleHeaders.of(HelloServiceGrpc.SERVICE_NAME,\n                                                       HttpHeaders.of(\"my-header\", \"headerVal\")));\n  }\n  // After:\n  @Bean\n  public ArmeriaServerConfigurator myService() {\n      return server -> {\n          server.route()\n                .path(\"/my-service\")\n                .decorator(LoggingService.newDecorator())\n                .build(GrpcService.builder()\n                                  .addService(new MyService())\n                                  .supportedSerializationFormats(GrpcSerializationFormats.values())\n                                  .enableUnframedRequests(true)\n                                  .build());\n      };\n  }\n\n  @Bean\n  public DocServiceConfigurator myServiceDoc() {\n      return docService -> {\n          docService.exampleRequestForMethod(HelloServiceGrpc.SERVICE_NAME, \"Hello\",\n                                             HelloRequest.newBuilder().setName(\"Armeria\").build())\n                    .exampleHttpHeaders(HelloServiceGrpc.SERVICE_NAME,\n                                        HttpHeaders.of(\"my-header\", \"headerVal\"))\n      };\n  }\n  ```\n- Deprecate ThriftServiceRegistrationBean\n  ```java\n  // Before:\n  @Bean\n  public ThriftServiceRegistrationBean okService() {\n      return new ThriftServiceRegistrationBean()\n              .setServiceName(\"myThriftService\")\n              .setPath(\"/my_service\")\n              .setService(new MyThriftService())\n              .setDecorators(LoggingService.newDecorator())\n              .addExampleRequests(new MyThriftService.hello_args(\"Armeria\"))\n              .addExampleHeaders(ExampleHeaders.of(AUTHORIZATION, \"bearer b03c4fed1a\"));\n  }\n  // After:\n  @Bean\n  public ArmeriaServerConfigurator myService() {\n      return server -> {\n          server.route()\n                .path(\"/my_service\")\n                .decorator(LoggingService.newDecorator())\n                .build(THttpService.of(new MyThriftService()));\n      };\n  }\n\n  @Bean\n  public DocServiceConfigurator myServiceDoc() {\n      return docService -> {\n          docService.exampleRequest(new MyThriftService.hello_args(\"Armeria\"))\n                    .exampleHttpHeaders(HttpHeaders.of(AUTHORIZATION, \"bearer b03c4fed1a\"));\n      };\n  }\n  ```\n\nResult:\n\n- Clean up mismatch and duplicate code.\n- Close #2787"}, "afterCommit": {"oid": "59c4b52f6449d68dd87fd1ff38300ff4b91f1f4c", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/59c4b52f6449d68dd87fd1ff38300ff4b91f1f4c", "committedDate": "2020-06-25T14:36:07Z", "message": "Deprecate Spring registration beans\n\nMotivation:\n\nMany new features are added to Armeria fluent service binding builder.\nBut we omitted to port the feautes to Spring registration beans.\nThe registration beans switch to `ArmeriaServerConfigrator` and `DocServiceConfigrator` without difficulty.\nSee #2787 for more inforation.\n\nModifications:\n\n- Deprecate HttpServiceRegistrationBean\n  ```java\n  // Before:\n  @Bean\n  public HttpServiceRegistrationBean myService() {\n      return new HttpServiceRegistrationBean()\n              .setServiceName(\"myService\")\n              .setService(new MyService())\n              .setRoute(Route.builder().path(\"/ok\").methods(HttpMethod.GET, HttpMethod.POST).build())\n              .setDecorators(LoggingService.newDecorator());\n  }\n  // After:\n  @Bean\n  public ArmeriaServerConfigurator myService() {\n      return server -> {\n          server.route()\n                .path(\"/ok\")\n                .methods(HttpMethod.GET, HttpMethod.POST)\n                .defaultServiceName(\"myService\")\n                .decorator(LoggingService.newDecorator())\n                .build(new MyService());\n      };\n  }\n  ```\n- Deprecate AnnotatedServiceRegistrationBean\n  ```java\n  // Before:\n  @Bean\n  public AnnotatedServiceRegistrationBean myService() {\n      return new AnnotatedServiceRegistrationBean()\n              .setServiceName(\"myAnnotatedService\")\n              .setPathPrefix(\"/my_service\")\n              .setService(new MyAnnotatedService())\n              .setDecorators(LoggingService.newDecorator())\n              .setExceptionHandlers(new MyExceptionHandler())\n              .setRequestConverters(new MyRequestConverter())\n              .setResponseConverters(new MyResponseConverter())\n              .addExampleRequests(AnnotatedExampleRequest.of(\"myMethod\", \"{\\\"foo\\\":\\\"bar\\\"}\"))\n              .addExampleHeaders(ExampleHeaders.of(\"my-header\", \"headerVal\"));\n  }\n  // After:\n  @Bean\n  public ArmeriaServerConfigurator myService() {\n      return server -> {\n          server.annotatedService()\n                .pathPrefix(\"/my_service\")\n                .exceptionHandlers(new MyExceptionHandler())\n                .requestConverters(new MyRequestConverter())\n                .responseConverters(new MyResponseConverter())\n                .decorator(LoggingService.newDecorator())\n                .build(new MyAnnoatedService());\n      };\n  }\n\n  @Bean\n  public DocServiceConfigurator myServiceDoc() {\n      return docService -> {\n          docService.exampleRequestForMethod(MyAnnotatedService.class,\n                                             \"myMethod\", \"{\\\"foo\\\":\\\"bar\\\"}\")\n                    .exampleHttpHeaders(MyAnnotatedService.class,\n                                        HttpHeaders.of(\"my-header\", \"headerVal\")));\n\n      };\n  }\n  ```\n- Deprecate GrpcServiceRegistrationBean\n  ```java\n  // Before:\n  @Bean\n  public GrpcServiceRegistrationBean myService() {\n      return new GrpcServiceRegistrationBean()\n              .setServiceName(\"myService\")\n              .setService(GrpcService.builder()\n                                     .addService(new MyService())\n                                     .supportedSerializationFormats(GrpcSerializationFormats.values())\n                                     .enableUnframedRequests(true)\n                                     .build())\n              .setDecorators(LoggingService.newDecorator())\n              .addExampleRequests(GrpcExampleRequest.of(\n                     MyServiceGrpc.SERVICE_NAME, \"Hello\",\n                     HelloRequest.newBuilder().setName(\"Armeria\").build()))\n              .addExampleHeaders(GrpcExampleHeaders.of(HelloServiceGrpc.SERVICE_NAME,\n                                                       HttpHeaders.of(\"my-header\", \"headerVal\")));\n  }\n  // After:\n  @Bean\n  public ArmeriaServerConfigurator myService() {\n      return server -> {\n          server.route()\n                .path(\"/my-service\")\n                .decorator(LoggingService.newDecorator())\n                .build(GrpcService.builder()\n                                  .addService(new MyService())\n                                  .supportedSerializationFormats(GrpcSerializationFormats.values())\n                                  .enableUnframedRequests(true)\n                                  .build());\n      };\n  }\n\n  @Bean\n  public DocServiceConfigurator myServiceDoc() {\n      return docService -> {\n          docService.exampleRequestForMethod(HelloServiceGrpc.SERVICE_NAME, \"Hello\",\n                                             HelloRequest.newBuilder().setName(\"Armeria\").build())\n                    .exampleHttpHeaders(HelloServiceGrpc.SERVICE_NAME,\n                                        HttpHeaders.of(\"my-header\", \"headerVal\"))\n      };\n  }\n  ```\n- Deprecate ThriftServiceRegistrationBean\n  ```java\n  // Before:\n  @Bean\n  public ThriftServiceRegistrationBean okService() {\n      return new ThriftServiceRegistrationBean()\n              .setServiceName(\"myThriftService\")\n              .setPath(\"/my_service\")\n              .setService(new MyThriftService())\n              .setDecorators(LoggingService.newDecorator())\n              .addExampleRequests(new MyThriftService.hello_args(\"Armeria\"))\n              .addExampleHeaders(ExampleHeaders.of(AUTHORIZATION, \"bearer b03c4fed1a\"));\n  }\n  // After:\n  @Bean\n  public ArmeriaServerConfigurator myService() {\n      return server -> {\n          server.route()\n                .path(\"/my_service\")\n                .decorator(LoggingService.newDecorator())\n                .build(THttpService.of(new MyThriftService()));\n      };\n  }\n\n  @Bean\n  public DocServiceConfigurator myServiceDoc() {\n      return docService -> {\n          docService.exampleRequest(new MyThriftService.hello_args(\"Armeria\"))\n                    .exampleHttpHeaders(HttpHeaders.of(AUTHORIZATION, \"bearer b03c4fed1a\"));\n      };\n  }\n  ```\n\nResult:\n\n- Clean up mismatch and duplicate code.\n- Close #2787"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "313839ce3c4e7f528bb5b5fdb031c1c9b604d4dc", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/313839ce3c4e7f528bb5b5fdb031c1c9b604d4dc", "committedDate": "2020-06-25T14:54:15Z", "message": "Clean up Javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d42fb98085b9564d6acdd889180a2b5d0c62ad5", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/1d42fb98085b9564d6acdd889180a2b5d0c62ad5", "committedDate": "2020-06-26T02:17:39Z", "message": "Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "615b9ce2750cfa1da50c4bb7280046f3c4b6753f", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/615b9ce2750cfa1da50c4bb7280046f3c4b6753f", "committedDate": "2020-06-26T03:16:19Z", "message": "Fix Javadoc error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3OTkzNzM1", "url": "https://github.com/line/armeria/pull/2838#pullrequestreview-437993735", "createdAt": "2020-06-26T03:39:21Z", "commit": {"oid": "615b9ce2750cfa1da50c4bb7280046f3c4b6753f"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMzozOToyMlrOGpSr5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMzo0NjoxNFrOGpSxNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1MDk0OQ==", "bodyText": "@deprecated Use {@link ServiceBindingBuilder#decorator(Function)} or\n            {@link AnnotatedServiceBindingBuilder#decorator(Function)}.", "url": "https://github.com/line/armeria/pull/2838#discussion_r445950949", "createdAt": "2020-06-26T03:39:22Z", "author": {"login": "minwoox"}, "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/AbstractServiceRegistrationBean.java", "diffHunk": "@@ -125,7 +142,10 @@ public final U setDecorators(\n     /**\n      * Sets the decorators of the annotated service object. {@code decorators} are applied to {@code service} in\n      * order.\n+     *\n+     * @deprecated Use {@link ServerBuilder#annotatedService(Object, Function, Object...)}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "615b9ce2750cfa1da50c4bb7280046f3c4b6753f"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1MTUyNg==", "bodyText": "extra )?", "url": "https://github.com/line/armeria/pull/2838#discussion_r445951526", "createdAt": "2020-06-26T03:42:24Z", "author": {"login": "minwoox"}, "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/AnnotatedServiceRegistrationBean.java", "diffHunk": "@@ -45,7 +48,35 @@\n  * >             .addExampleHeaders(ExampleHeaders.of(\"my-header\", \"headerVal\"));\n  * > }\n  * }</pre>\n+ *\n+ * @deprecated Use {@link ServerBuilder#annotatedService()} via {@link ArmeriaServerConfigurator} and\n+ *             {@link DocServiceConfigurator}.\n+ *             <pre>{@code\n+ *             > @Bean\n+ *             > public ArmeriaServerConfigurator myService() {\n+ *             >     return server -> {\n+ *             >         server.annotatedService()\n+ *             >               .pathPrefix(\"/my_service\")\n+ *             >               .exceptionHandlers(new MyExceptionHandler())\n+ *             >               .requestConverters(new MyRequestConverter())\n+ *             >               .responseConverters(new MyResponseConverter())\n+ *             >               .decorator(LoggingService.newDecorator())\n+ *             >               .build(new MyAnnoatedService());\n+ *             >     };\n+ *             > }\n+ *\n+ *             > @Bean\n+ *             > public DocServiceConfigurator myServiceDoc() {\n+ *             >     return docService -> {\n+ *             >         docService.exampleRequestForMethod(MyAnnotatedService.class,\n+ *             >                                            \"myMethod\", \"{\\\"foo\\\":\\\"bar\\\"}\")\n+ *             >                   .exampleHttpHeaders(MyAnnotatedService.class,\n+ *             >                                       HttpHeaders.of(\"my-header\", \"headerVal\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "615b9ce2750cfa1da50c4bb7280046f3c4b6753f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1MTU3Mg==", "bodyText": "extra }?", "url": "https://github.com/line/armeria/pull/2838#discussion_r445951572", "createdAt": "2020-06-26T03:42:34Z", "author": {"login": "minwoox"}, "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/AnnotatedServiceRegistrationBean.java", "diffHunk": "@@ -45,7 +48,35 @@\n  * >             .addExampleHeaders(ExampleHeaders.of(\"my-header\", \"headerVal\"));\n  * > }\n  * }</pre>\n+ *\n+ * @deprecated Use {@link ServerBuilder#annotatedService()} via {@link ArmeriaServerConfigurator} and\n+ *             {@link DocServiceConfigurator}.\n+ *             <pre>{@code\n+ *             > @Bean\n+ *             > public ArmeriaServerConfigurator myService() {\n+ *             >     return server -> {\n+ *             >         server.annotatedService()\n+ *             >               .pathPrefix(\"/my_service\")\n+ *             >               .exceptionHandlers(new MyExceptionHandler())\n+ *             >               .requestConverters(new MyRequestConverter())\n+ *             >               .responseConverters(new MyResponseConverter())\n+ *             >               .decorator(LoggingService.newDecorator())\n+ *             >               .build(new MyAnnoatedService());\n+ *             >     };\n+ *             > }\n+ *\n+ *             > @Bean\n+ *             > public DocServiceConfigurator myServiceDoc() {\n+ *             >     return docService -> {\n+ *             >         docService.exampleRequestForMethod(MyAnnotatedService.class,\n+ *             >                                            \"myMethod\", \"{\\\"foo\\\":\\\"bar\\\"}\")\n+ *             >                   .exampleHttpHeaders(MyAnnotatedService.class,\n+ *             >                                       HttpHeaders.of(\"my-header\", \"headerVal\")));\n+ *\n+ *             >     };\n+ *             > }}</pre>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "615b9ce2750cfa1da50c4bb7280046f3c4b6753f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1MTg5NA==", "bodyText": "missing ;?", "url": "https://github.com/line/armeria/pull/2838#discussion_r445951894", "createdAt": "2020-06-26T03:44:21Z", "author": {"login": "minwoox"}, "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/GrpcServiceRegistrationBean.java", "diffHunk": "@@ -43,51 +44,107 @@\n  * >                                                      HttpHeaders.of(\"my-header\", \"headerVal\")));\n  * > }\n  * }</pre>\n+ *\n+ * @deprecated Use {@link ArmeriaServerConfigurator} and {@link DocServiceConfigurator}.\n+ *             <pre>{@code\n+ *             > @Bean\n+ *             > public ArmeriaServerConfigurator myService() {\n+ *             >     return server -> {\n+ *             >         server.route()\n+ *             >               .path(\"/my-service\")\n+ *             >               .decorator(LoggingService.newDecorator())\n+ *             >               .build(GrpcService.builder()\n+ *             >                                 .addService(new HelloService())\n+ *             >                                 .supportedSerializationFormats(\n+ *             >                                         GrpcSerializationFormats.values())\n+ *             >                                 .enableUnframedRequests(true)\n+ *             >                                 .build());\n+ *             >     };\n+ *             > }\n+ *\n+ *             > @Bean\n+ *             > public DocServiceConfigurator myServiceDoc() {\n+ *             >     return docService -> {\n+ *             >         docService.exampleRequestForMethod(HelloServiceGrpc.SERVICE_NAME, \"Hello\",\n+ *             >                                            HelloRequest.newBuilder()\n+ *             >                                                        .setName(\"Armeria\").build())\n+ *             >                   .exampleHttpHeaders(HelloServiceGrpc.SERVICE_NAME,\n+ *             >                                       HttpHeaders.of(\"my-header\", \"headerVal\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "615b9ce2750cfa1da50c4bb7280046f3c4b6753f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1MjMxMQ==", "bodyText": "docServiceBuilder to clarify?", "url": "https://github.com/line/armeria/pull/2838#discussion_r445952311", "createdAt": "2020-06-26T03:46:14Z", "author": {"login": "minwoox"}, "path": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/AnnotatedServiceRegistrationBean.java", "diffHunk": "@@ -45,7 +48,35 @@\n  * >             .addExampleHeaders(ExampleHeaders.of(\"my-header\", \"headerVal\"));\n  * > }\n  * }</pre>\n+ *\n+ * @deprecated Use {@link ServerBuilder#annotatedService()} via {@link ArmeriaServerConfigurator} and\n+ *             {@link DocServiceConfigurator}.\n+ *             <pre>{@code\n+ *             > @Bean\n+ *             > public ArmeriaServerConfigurator myService() {\n+ *             >     return server -> {\n+ *             >         server.annotatedService()\n+ *             >               .pathPrefix(\"/my_service\")\n+ *             >               .exceptionHandlers(new MyExceptionHandler())\n+ *             >               .requestConverters(new MyRequestConverter())\n+ *             >               .responseConverters(new MyResponseConverter())\n+ *             >               .decorator(LoggingService.newDecorator())\n+ *             >               .build(new MyAnnoatedService());\n+ *             >     };\n+ *             > }\n+ *\n+ *             > @Bean\n+ *             > public DocServiceConfigurator myServiceDoc() {\n+ *             >     return docService -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "615b9ce2750cfa1da50c4bb7280046f3c4b6753f"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4e54c700d8caaeff4d30db93dad0131039f67cf", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/c4e54c700d8caaeff4d30db93dad0131039f67cf", "committedDate": "2020-06-26T05:19:11Z", "message": "Address comments by @minwoox"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5618b0891299eaf06f6932b885ba56637af8d6c", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/b5618b0891299eaf06f6932b885ba56637af8d6c", "committedDate": "2020-06-26T05:22:28Z", "message": "Fix typo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MTEyMDk4", "url": "https://github.com/line/armeria/pull/2838#pullrequestreview-438112098", "createdAt": "2020-06-26T08:32:55Z", "commit": {"oid": "b5618b0891299eaf06f6932b885ba56637af8d6c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 287, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}