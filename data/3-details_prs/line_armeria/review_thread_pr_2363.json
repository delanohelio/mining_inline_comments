{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4NjAyMzAw", "number": 2363, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwMjoyMzo1OVrODV3_PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMzoxNjo0MlrODWJIcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjYzOTk2OnYy", "diffSide": "RIGHT", "path": "examples/context-propagation/manual/src/main/java/example/armeria/contextpropagation/manual/MainService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwMjoyMzo1OVrOFaUPRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwMjoyMzo1OVrOFaUPRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEzODg4Ng==", "bodyText": "nit: indentation.", "url": "https://github.com/line/armeria/pull/2363#discussion_r363138886", "createdAt": "2020-01-06T02:23:59Z", "author": {"login": "minwoox"}, "path": "examples/context-propagation/manual/src/main/java/example/armeria/contextpropagation/manual/MainService.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package example.armeria.contextpropagation.manual;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executor;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.util.concurrent.Uninterruptibles;\n+import com.spotify.futures.CompletableFutures;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpRequest;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+public class MainService implements HttpService {\n+\n+    private static final Splitter NUM_SPLITTER = Splitter.on(',').trimResults().omitEmptyStrings();\n+\n+    private final WebClient backendClient;\n+\n+    public MainService(WebClient backendClient) {\n+        this.backendClient = requireNonNull(backendClient, \"backendClient\");\n+    }\n+\n+    @Override\n+    public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) {\n+        final Executor ctxExecutor = ctx.contextAwareExecutor();\n+\n+        final CompletableFuture<AggregatedHttpRequest> aggregated = req.aggregate();\n+\n+        // This logic mimics using a blocking method, which would usually be something like a MySQL\n+        // database query using JDBC.\n+        final CompletableFuture<List<Long>> fetchFromFakeDb = CompletableFuture.supplyAsync(\n+                () -> {\n+                    // The context is mounted in a thread-local, meaning it is available to all logic such\n+                    // as tracing.\n+                    checkState(ServiceRequestContext.current() == ctx);\n+\n+                    Uninterruptibles.sleepUninterruptibly(Duration.ofMillis(50));\n+                    return ImmutableList.of(23L, -23L);\n+                },\n+                // Always run blocking logic on the blocking task executor. By using\n+                // ServiceRequestContext.blockingTaskExecutor, you also ensure the context is mounted inside the\n+                // logic (e.g., your DB call will be traced!).\n+                ctx.blockingTaskExecutor());\n+\n+        final CompletableFuture<List<CompletableFuture<AggregatedHttpResponse>>> fetchFromBackend =\n+                CompletableFuture.allOf(\n+                        aggregated, fetchFromFakeDb).thenApplyAsync(\n+                        unused -> {\n+                            // The context is mounted in a thread-local, meaning it is available to all logic\n+                            // such as tracing.\n+                            checkState(ServiceRequestContext.current() == ctx);\n+\n+                            final AggregatedHttpRequest request = aggregated.join();\n+\n+                            final Stream.Builder<Long> nums = Stream.builder();\n+                            for (String token : Iterables.concat(\n+                                    NUM_SPLITTER.split(request.path().substring(1)),\n+                                    NUM_SPLITTER.split(request.contentUtf8()))) {\n+                                nums.add(Long.parseLong(token));\n+                            }\n+                            fetchFromFakeDb.join().forEach(nums::add);\n+\n+                            return nums.build()\n+                                       .map(num -> backendClient.get(\"/square/\" + num).aggregate())\n+                                       .collect(toImmutableList());\n+                        },\n+                        // Unless you know what you're doing, always use then*Async type methods with the\n+                        // context executor to have the context mounted and stay on a single thread to reduce\n+                        // concurrency issues.\n+                        ctxExecutor);\n+\n+        final CompletableFuture<HttpResponse> response =\n+                // When using CompletableFuture, boiler-plate invocations to wrap / unwrap futures are sometimes\n+                // required. Such boilerplate has no chance of using Armeria's context and it is ok to not\n+                // use ctxExecutor for them. But if in doubt, it doesn't hurt too much to use it everywhere.\n+                fetchFromBackend.thenApply(CompletableFutures::allAsList)\n+                                .thenCompose(u -> u)\n+                                .thenApplyAsync(\n+                                        (backendResponse) -> {\n+                                            // The context is mounted in a thread-local, meaning it is\n+                                            // available to all logic such as tracing.\n+                                            checkState(ServiceRequestContext.current() == ctx);\n+                                            return HttpResponse.of(backendResponse.stream()\n+                                                                   .map(AggregatedHttpResponse::contentUtf8)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa7127b2e77c02da3605cc98ce70697bf5d72c0f"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MzA3MTg4OnYy", "diffSide": "RIGHT", "path": "examples/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwODo0OToyNlrOFaYJXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwOTo1NjoyM1rOFaZiHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzIwMjkwOQ==", "bodyText": "Better hyperlinking for the Dagger asynchronous framework?", "url": "https://github.com/line/armeria/pull/2363#discussion_r363202909", "createdAt": "2020-01-06T08:49:26Z", "author": {"login": "trustin"}, "path": "examples/README.md", "diffHunk": "@@ -4,6 +4,12 @@\n   - Learn how to write an HTTP service using annotations.\n   - See [Annotated services](https://line.github.io/armeria/server-annotated-service.html).\n \n+- `context-propagation`\n+  - Learn how to propagate Armeria's `RequestContext` for use in scenarios like tracing.\n+  - [`dagger`](https://dagger.dev) provides an example using the Dagger asynchronous framework for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "053d054de82088d18accb072dc1ad116ef78f3fb"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzIyNTYyOA==", "bodyText": "Yup", "url": "https://github.com/line/armeria/pull/2363#discussion_r363225628", "createdAt": "2020-01-06T09:56:23Z", "author": {"login": "anuraaga"}, "path": "examples/README.md", "diffHunk": "@@ -4,6 +4,12 @@\n   - Learn how to write an HTTP service using annotations.\n   - See [Annotated services](https://line.github.io/armeria/server-annotated-service.html).\n \n+- `context-propagation`\n+  - Learn how to propagate Armeria's `RequestContext` for use in scenarios like tracing.\n+  - [`dagger`](https://dagger.dev) provides an example using the Dagger asynchronous framework for", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzIwMjkwOQ=="}, "originalCommit": {"oid": "053d054de82088d18accb072dc1ad116ef78f3fb"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MzI2Mjc5OnYy", "diffSide": "RIGHT", "path": "examples/context-propagation/rxjava/src/main/java/example/armeria/contextpropagation/rxjava/MainService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxMDoxMzoyNlrOFaZ6iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNjoyNDo1MFrOFbr6nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzIzMTg4Mw==", "bodyText": "One aspect of rxjava integration I noticed is methods like these are fairly ridiculously slow due to context mounting. An inevitable downside of having the integration be a single static method invocation in main I guess.", "url": "https://github.com/line/armeria/pull/2363#discussion_r363231883", "createdAt": "2020-01-06T10:13:26Z", "author": {"login": "anuraaga"}, "path": "examples/context-propagation/rxjava/src/main/java/example/armeria/contextpropagation/rxjava/MainService.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package example.armeria.contextpropagation.rxjava;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import net.javacrumbs.futureconverter.java8rx2.FutureConverter;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.util.concurrent.Uninterruptibles;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+import io.reactivex.Observable;\n+import io.reactivex.Single;\n+\n+public class MainService implements HttpService {\n+\n+    private static final Splitter NUM_SPLITTER = Splitter.on(',').trimResults().omitEmptyStrings();\n+\n+    private final WebClient backendClient;\n+\n+    public MainService(WebClient backendClient) {\n+        this.backendClient = requireNonNull(backendClient, \"backendClient\");\n+    }\n+\n+    @Override\n+    public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) {\n+        // This logic mimics using a blocking method, which would usually be something like a MySQL\n+        // database query using JDBC.\n+        final CompletableFuture<List<Long>> fetchFromFakeDb = CompletableFuture.supplyAsync(\n+                () -> {\n+                    // The context is mounted in a thread-local, meaning it is available to all logic such\n+                    // as tracing.\n+                    checkState(ServiceRequestContext.current() == ctx);\n+\n+                    Uninterruptibles.sleepUninterruptibly(Duration.ofMillis(50));\n+                    return ImmutableList.of(23L, -23L);\n+                },\n+                // Always run blocking logic on the blocking task executor. By using\n+                // ServiceRequestContext.blockingTaskExecutor, you also ensure the context is mounted inside the\n+                // logic (e.g., your DB call will be traced!).\n+                ctx.blockingTaskExecutor());\n+\n+        final Single<HttpResponse> response = FutureConverter\n+                .toSingle(req.aggregate())\n+                .flatMapObservable(request -> {\n+                    // The context is mounted in a thread-local, meaning it is available to all logic\n+                    // such as tracing.\n+                    checkState(ServiceRequestContext.current() == ctx);\n+\n+                    final List<Long> nums = new ArrayList<>();\n+                    for (String token : Iterables.concat(\n+                            NUM_SPLITTER.split(request.path().substring(1)),\n+                            NUM_SPLITTER.split(request.contentUtf8()))) {\n+                        nums.add(Long.parseLong(token));\n+                    }\n+\n+                    return Observable.fromIterable(nums);\n+                })\n+                .mergeWith(FutureConverter.toSingle(fetchFromFakeDb)\n+                                          .flatMapObservable(Observable::fromIterable))\n+                .flatMapSingle(num -> {\n+                    // The context is mounted in a thread-local, meaning it is available to all logic\n+                    // such as tracing.\n+                    checkState(ServiceRequestContext.current() == ctx);\n+\n+                    return FutureConverter.toSingle(backendClient.get(\"/square/\" + num).aggregate());\n+                })\n+                .map(AggregatedHttpResponse::contentUtf8)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac5286aea75ee90739397f6e2d961c634c73f151"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3NTM4OA==", "bodyText": "By the way, I was able to confirm that the pattern with subscribeOn instead of using RequestContextAssembly does not have the performance issue. The key point I guess is RequestContextSubscriber mounts on every call to onNext\nhttps://github.com/line/armeria/blob/master/rxjava/src/main/java/com/linecorp/armeria/common/rxjava/RequestContextSubscriber.java#L38\nwhich ends up being called from every single callback in the flow.\nSubscribing on the executor though mounts the context when the thread starts to process the flow, which ends up processing as many items as it can at the time. So if the buffer has 10 items, it will go through all 10 in a single invocation of the executor, meaning just a single threadlocal push/pop for 10 invocations of onNext.\nJust an observation, I think the assembly is still useful since it is quite nice for a single global method call to be able to guarantee callbacks have context, but we do have to be aware of the cost of the convenience.", "url": "https://github.com/line/armeria/pull/2363#discussion_r364575388", "createdAt": "2020-01-09T06:24:50Z", "author": {"login": "anuraaga"}, "path": "examples/context-propagation/rxjava/src/main/java/example/armeria/contextpropagation/rxjava/MainService.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package example.armeria.contextpropagation.rxjava;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import net.javacrumbs.futureconverter.java8rx2.FutureConverter;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.util.concurrent.Uninterruptibles;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+import io.reactivex.Observable;\n+import io.reactivex.Single;\n+\n+public class MainService implements HttpService {\n+\n+    private static final Splitter NUM_SPLITTER = Splitter.on(',').trimResults().omitEmptyStrings();\n+\n+    private final WebClient backendClient;\n+\n+    public MainService(WebClient backendClient) {\n+        this.backendClient = requireNonNull(backendClient, \"backendClient\");\n+    }\n+\n+    @Override\n+    public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) {\n+        // This logic mimics using a blocking method, which would usually be something like a MySQL\n+        // database query using JDBC.\n+        final CompletableFuture<List<Long>> fetchFromFakeDb = CompletableFuture.supplyAsync(\n+                () -> {\n+                    // The context is mounted in a thread-local, meaning it is available to all logic such\n+                    // as tracing.\n+                    checkState(ServiceRequestContext.current() == ctx);\n+\n+                    Uninterruptibles.sleepUninterruptibly(Duration.ofMillis(50));\n+                    return ImmutableList.of(23L, -23L);\n+                },\n+                // Always run blocking logic on the blocking task executor. By using\n+                // ServiceRequestContext.blockingTaskExecutor, you also ensure the context is mounted inside the\n+                // logic (e.g., your DB call will be traced!).\n+                ctx.blockingTaskExecutor());\n+\n+        final Single<HttpResponse> response = FutureConverter\n+                .toSingle(req.aggregate())\n+                .flatMapObservable(request -> {\n+                    // The context is mounted in a thread-local, meaning it is available to all logic\n+                    // such as tracing.\n+                    checkState(ServiceRequestContext.current() == ctx);\n+\n+                    final List<Long> nums = new ArrayList<>();\n+                    for (String token : Iterables.concat(\n+                            NUM_SPLITTER.split(request.path().substring(1)),\n+                            NUM_SPLITTER.split(request.contentUtf8()))) {\n+                        nums.add(Long.parseLong(token));\n+                    }\n+\n+                    return Observable.fromIterable(nums);\n+                })\n+                .mergeWith(FutureConverter.toSingle(fetchFromFakeDb)\n+                                          .flatMapObservable(Observable::fromIterable))\n+                .flatMapSingle(num -> {\n+                    // The context is mounted in a thread-local, meaning it is available to all logic\n+                    // such as tracing.\n+                    checkState(ServiceRequestContext.current() == ctx);\n+\n+                    return FutureConverter.toSingle(backendClient.get(\"/square/\" + num).aggregate());\n+                })\n+                .map(AggregatedHttpResponse::contentUtf8)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzIzMTg4Mw=="}, "originalCommit": {"oid": "ac5286aea75ee90739397f6e2d961c634c73f151"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTQ0ODEzOnYy", "diffSide": "RIGHT", "path": "examples/context-propagation/rxjava/src/main/java/example/armeria/contextpropagation/rxjava/MainService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMzoxNjoxMlrOFau9PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMzoxNjoxMlrOFau9PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3NjYzNw==", "bodyText": "Maybe Flowable.concatEager is more suitable comapring to other example.", "url": "https://github.com/line/armeria/pull/2363#discussion_r363576637", "createdAt": "2020-01-07T03:16:12Z", "author": {"login": "kojilin"}, "path": "examples/context-propagation/rxjava/src/main/java/example/armeria/contextpropagation/rxjava/MainService.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package example.armeria.contextpropagation.rxjava;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import net.javacrumbs.futureconverter.java8rx2.FutureConverter;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.util.concurrent.Uninterruptibles;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+import io.reactivex.Observable;\n+import io.reactivex.Scheduler;\n+import io.reactivex.Single;\n+import io.reactivex.schedulers.Schedulers;\n+\n+public class MainService implements HttpService {\n+\n+    private static final Splitter NUM_SPLITTER = Splitter.on(',').trimResults().omitEmptyStrings();\n+\n+    private final WebClient backendClient;\n+\n+    public MainService(WebClient backendClient) {\n+        this.backendClient = requireNonNull(backendClient, \"backendClient\");\n+    }\n+\n+    @Override\n+    public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) {\n+        final Scheduler contextAwareScheduler = Schedulers.from(ctx.contextAwareExecutor());\n+\n+        // This logic mimics using a blocking method, which would usually be something like a MySQL\n+        // database query using JDBC.\n+        final Observable<Long> fetchFromFakeDb =\n+                Single.fromCallable(\n+                        () -> {\n+                            // The context is mounted in a thread-local, meaning it is available to all\n+                            // logic such as tracing.\n+                            checkState(ServiceRequestContext.current() == ctx);\n+                            checkState(!ctx.eventLoop().inEventLoop());\n+\n+                            Uninterruptibles.sleepUninterruptibly(Duration.ofMillis(50));\n+                            return ImmutableList.of(23L, -23L);\n+                        })\n+                      // Always run blocking logic on the blocking task executor. By using\n+                      // ServiceRequestContext.blockingTaskExecutor, you also ensure the context is mounted\n+                      // inside the logic (e.g., your DB call will be traced!).\n+                      .subscribeOn(Schedulers.from(ctx.blockingTaskExecutor()))\n+                      // Make sure callbacks still stay on the context executor using observeOn.\n+                      .observeOn(contextAwareScheduler)\n+                      .flattenAsObservable(l -> l);\n+\n+        final Single<HttpResponse> response = FutureConverter\n+                .toSingle(req.aggregate())\n+                // Unless you know what you're doing, always use subscribeOn with the context executor to have\n+                // the context mounted and stay on a single thread to reduce concurrency issues.\n+                .subscribeOn(contextAwareScheduler)\n+                .flatMapObservable(request -> {\n+                    // The context is mounted in a thread-local, meaning it is available to all logic\n+                    // such as tracing.\n+                    checkState(ServiceRequestContext.current() == ctx);\n+                    checkState(ctx.eventLoop().inEventLoop());\n+\n+                    final List<Long> nums = new ArrayList<>();\n+                    for (String token : Iterables.concat(\n+                            NUM_SPLITTER.split(request.path().substring(1)),\n+                            NUM_SPLITTER.split(request.contentUtf8()))) {\n+                        nums.add(Long.parseLong(token));\n+                    }\n+\n+                    return Observable.fromIterable(nums);\n+                })\n+                .mergeWith(fetchFromFakeDb)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10c61933509bf0397e60098d026c0df3f4621076"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTQ0ODgzOnYy", "diffSide": "RIGHT", "path": "examples/context-propagation/rxjava/src/main/java/example/armeria/contextpropagation/rxjava/MainService.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwMzoxNjo0MlrOFau9pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNjoxNTo1MFrOFbrzFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3Njc0Mw==", "bodyText": "Maybe put at chaining phase?", "url": "https://github.com/line/armeria/pull/2363#discussion_r363576743", "createdAt": "2020-01-07T03:16:42Z", "author": {"login": "kojilin"}, "path": "examples/context-propagation/rxjava/src/main/java/example/armeria/contextpropagation/rxjava/MainService.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package example.armeria.contextpropagation.rxjava;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import net.javacrumbs.futureconverter.java8rx2.FutureConverter;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.util.concurrent.Uninterruptibles;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+import io.reactivex.Observable;\n+import io.reactivex.Scheduler;\n+import io.reactivex.Single;\n+import io.reactivex.schedulers.Schedulers;\n+\n+public class MainService implements HttpService {\n+\n+    private static final Splitter NUM_SPLITTER = Splitter.on(',').trimResults().omitEmptyStrings();\n+\n+    private final WebClient backendClient;\n+\n+    public MainService(WebClient backendClient) {\n+        this.backendClient = requireNonNull(backendClient, \"backendClient\");\n+    }\n+\n+    @Override\n+    public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) {\n+        final Scheduler contextAwareScheduler = Schedulers.from(ctx.contextAwareExecutor());\n+\n+        // This logic mimics using a blocking method, which would usually be something like a MySQL\n+        // database query using JDBC.\n+        final Observable<Long> fetchFromFakeDb =\n+                Single.fromCallable(\n+                        () -> {\n+                            // The context is mounted in a thread-local, meaning it is available to all\n+                            // logic such as tracing.\n+                            checkState(ServiceRequestContext.current() == ctx);\n+                            checkState(!ctx.eventLoop().inEventLoop());\n+\n+                            Uninterruptibles.sleepUninterruptibly(Duration.ofMillis(50));\n+                            return ImmutableList.of(23L, -23L);\n+                        })\n+                      // Always run blocking logic on the blocking task executor. By using\n+                      // ServiceRequestContext.blockingTaskExecutor, you also ensure the context is mounted\n+                      // inside the logic (e.g., your DB call will be traced!).\n+                      .subscribeOn(Schedulers.from(ctx.blockingTaskExecutor()))\n+                      // Make sure callbacks still stay on the context executor using observeOn.\n+                      .observeOn(contextAwareScheduler)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10c61933509bf0397e60098d026c0df3f4621076"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA2ODg0NQ==", "bodyText": "Can you provide your reasoning for that? I can add as a comment and update :) I figured it's better to be here since the reason we need to observeOn is because of the blocking subscription, so having the two close to each other seems more readable.", "url": "https://github.com/line/armeria/pull/2363#discussion_r364068845", "createdAt": "2020-01-08T05:27:57Z", "author": {"login": "anuraaga"}, "path": "examples/context-propagation/rxjava/src/main/java/example/armeria/contextpropagation/rxjava/MainService.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package example.armeria.contextpropagation.rxjava;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import net.javacrumbs.futureconverter.java8rx2.FutureConverter;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.util.concurrent.Uninterruptibles;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+import io.reactivex.Observable;\n+import io.reactivex.Scheduler;\n+import io.reactivex.Single;\n+import io.reactivex.schedulers.Schedulers;\n+\n+public class MainService implements HttpService {\n+\n+    private static final Splitter NUM_SPLITTER = Splitter.on(',').trimResults().omitEmptyStrings();\n+\n+    private final WebClient backendClient;\n+\n+    public MainService(WebClient backendClient) {\n+        this.backendClient = requireNonNull(backendClient, \"backendClient\");\n+    }\n+\n+    @Override\n+    public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) {\n+        final Scheduler contextAwareScheduler = Schedulers.from(ctx.contextAwareExecutor());\n+\n+        // This logic mimics using a blocking method, which would usually be something like a MySQL\n+        // database query using JDBC.\n+        final Observable<Long> fetchFromFakeDb =\n+                Single.fromCallable(\n+                        () -> {\n+                            // The context is mounted in a thread-local, meaning it is available to all\n+                            // logic such as tracing.\n+                            checkState(ServiceRequestContext.current() == ctx);\n+                            checkState(!ctx.eventLoop().inEventLoop());\n+\n+                            Uninterruptibles.sleepUninterruptibly(Duration.ofMillis(50));\n+                            return ImmutableList.of(23L, -23L);\n+                        })\n+                      // Always run blocking logic on the blocking task executor. By using\n+                      // ServiceRequestContext.blockingTaskExecutor, you also ensure the context is mounted\n+                      // inside the logic (e.g., your DB call will be traced!).\n+                      .subscribeOn(Schedulers.from(ctx.blockingTaskExecutor()))\n+                      // Make sure callbacks still stay on the context executor using observeOn.\n+                      .observeOn(contextAwareScheduler)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3Njc0Mw=="}, "originalCommit": {"oid": "10c61933509bf0397e60098d026c0df3f4621076"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA5OTg5MA==", "bodyText": "I usually let storage call/remote call layer does not include subscribeOn&observeOn, I think they usually don't need to care about the trigger thread or ctx and we can reuse it in non armeria-context too.\nSo in my situation we force write all observeOn at service/facade layer and check when we code do code review....", "url": "https://github.com/line/armeria/pull/2363#discussion_r364099890", "createdAt": "2020-01-08T07:52:42Z", "author": {"login": "kojilin"}, "path": "examples/context-propagation/rxjava/src/main/java/example/armeria/contextpropagation/rxjava/MainService.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package example.armeria.contextpropagation.rxjava;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import net.javacrumbs.futureconverter.java8rx2.FutureConverter;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.util.concurrent.Uninterruptibles;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+import io.reactivex.Observable;\n+import io.reactivex.Scheduler;\n+import io.reactivex.Single;\n+import io.reactivex.schedulers.Schedulers;\n+\n+public class MainService implements HttpService {\n+\n+    private static final Splitter NUM_SPLITTER = Splitter.on(',').trimResults().omitEmptyStrings();\n+\n+    private final WebClient backendClient;\n+\n+    public MainService(WebClient backendClient) {\n+        this.backendClient = requireNonNull(backendClient, \"backendClient\");\n+    }\n+\n+    @Override\n+    public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) {\n+        final Scheduler contextAwareScheduler = Schedulers.from(ctx.contextAwareExecutor());\n+\n+        // This logic mimics using a blocking method, which would usually be something like a MySQL\n+        // database query using JDBC.\n+        final Observable<Long> fetchFromFakeDb =\n+                Single.fromCallable(\n+                        () -> {\n+                            // The context is mounted in a thread-local, meaning it is available to all\n+                            // logic such as tracing.\n+                            checkState(ServiceRequestContext.current() == ctx);\n+                            checkState(!ctx.eventLoop().inEventLoop());\n+\n+                            Uninterruptibles.sleepUninterruptibly(Duration.ofMillis(50));\n+                            return ImmutableList.of(23L, -23L);\n+                        })\n+                      // Always run blocking logic on the blocking task executor. By using\n+                      // ServiceRequestContext.blockingTaskExecutor, you also ensure the context is mounted\n+                      // inside the logic (e.g., your DB call will be traced!).\n+                      .subscribeOn(Schedulers.from(ctx.blockingTaskExecutor()))\n+                      // Make sure callbacks still stay on the context executor using observeOn.\n+                      .observeOn(contextAwareScheduler)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3Njc0Mw=="}, "originalCommit": {"oid": "10c61933509bf0397e60098d026c0df3f4621076"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3MjgyMA==", "bodyText": "Ok I think I sort of follow - I tried writing a comment to capture that hopefully it makes sense.", "url": "https://github.com/line/armeria/pull/2363#discussion_r364572820", "createdAt": "2020-01-09T06:12:50Z", "author": {"login": "anuraaga"}, "path": "examples/context-propagation/rxjava/src/main/java/example/armeria/contextpropagation/rxjava/MainService.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package example.armeria.contextpropagation.rxjava;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import net.javacrumbs.futureconverter.java8rx2.FutureConverter;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.util.concurrent.Uninterruptibles;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+import io.reactivex.Observable;\n+import io.reactivex.Scheduler;\n+import io.reactivex.Single;\n+import io.reactivex.schedulers.Schedulers;\n+\n+public class MainService implements HttpService {\n+\n+    private static final Splitter NUM_SPLITTER = Splitter.on(',').trimResults().omitEmptyStrings();\n+\n+    private final WebClient backendClient;\n+\n+    public MainService(WebClient backendClient) {\n+        this.backendClient = requireNonNull(backendClient, \"backendClient\");\n+    }\n+\n+    @Override\n+    public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) {\n+        final Scheduler contextAwareScheduler = Schedulers.from(ctx.contextAwareExecutor());\n+\n+        // This logic mimics using a blocking method, which would usually be something like a MySQL\n+        // database query using JDBC.\n+        final Observable<Long> fetchFromFakeDb =\n+                Single.fromCallable(\n+                        () -> {\n+                            // The context is mounted in a thread-local, meaning it is available to all\n+                            // logic such as tracing.\n+                            checkState(ServiceRequestContext.current() == ctx);\n+                            checkState(!ctx.eventLoop().inEventLoop());\n+\n+                            Uninterruptibles.sleepUninterruptibly(Duration.ofMillis(50));\n+                            return ImmutableList.of(23L, -23L);\n+                        })\n+                      // Always run blocking logic on the blocking task executor. By using\n+                      // ServiceRequestContext.blockingTaskExecutor, you also ensure the context is mounted\n+                      // inside the logic (e.g., your DB call will be traced!).\n+                      .subscribeOn(Schedulers.from(ctx.blockingTaskExecutor()))\n+                      // Make sure callbacks still stay on the context executor using observeOn.\n+                      .observeOn(contextAwareScheduler)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3Njc0Mw=="}, "originalCommit": {"oid": "10c61933509bf0397e60098d026c0df3f4621076"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3MzQ2MA==", "bodyText": "they usually don't need to care about the trigger thread or ctx\n\nAh though I guess I really don't understand this - trigger thread yes, but isn't storage / remote call layer exactly where they do have to care about ctx or tracing won't work?", "url": "https://github.com/line/armeria/pull/2363#discussion_r364573460", "createdAt": "2020-01-09T06:15:50Z", "author": {"login": "anuraaga"}, "path": "examples/context-propagation/rxjava/src/main/java/example/armeria/contextpropagation/rxjava/MainService.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package example.armeria.contextpropagation.rxjava;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import net.javacrumbs.futureconverter.java8rx2.FutureConverter;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.util.concurrent.Uninterruptibles;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+import io.reactivex.Observable;\n+import io.reactivex.Scheduler;\n+import io.reactivex.Single;\n+import io.reactivex.schedulers.Schedulers;\n+\n+public class MainService implements HttpService {\n+\n+    private static final Splitter NUM_SPLITTER = Splitter.on(',').trimResults().omitEmptyStrings();\n+\n+    private final WebClient backendClient;\n+\n+    public MainService(WebClient backendClient) {\n+        this.backendClient = requireNonNull(backendClient, \"backendClient\");\n+    }\n+\n+    @Override\n+    public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) {\n+        final Scheduler contextAwareScheduler = Schedulers.from(ctx.contextAwareExecutor());\n+\n+        // This logic mimics using a blocking method, which would usually be something like a MySQL\n+        // database query using JDBC.\n+        final Observable<Long> fetchFromFakeDb =\n+                Single.fromCallable(\n+                        () -> {\n+                            // The context is mounted in a thread-local, meaning it is available to all\n+                            // logic such as tracing.\n+                            checkState(ServiceRequestContext.current() == ctx);\n+                            checkState(!ctx.eventLoop().inEventLoop());\n+\n+                            Uninterruptibles.sleepUninterruptibly(Duration.ofMillis(50));\n+                            return ImmutableList.of(23L, -23L);\n+                        })\n+                      // Always run blocking logic on the blocking task executor. By using\n+                      // ServiceRequestContext.blockingTaskExecutor, you also ensure the context is mounted\n+                      // inside the logic (e.g., your DB call will be traced!).\n+                      .subscribeOn(Schedulers.from(ctx.blockingTaskExecutor()))\n+                      // Make sure callbacks still stay on the context executor using observeOn.\n+                      .observeOn(contextAwareScheduler)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3Njc0Mw=="}, "originalCommit": {"oid": "10c61933509bf0397e60098d026c0df3f4621076"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3047, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}