{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNTgwNzYw", "number": 2796, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMDo0NjoyMlrOEFXG1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo1Mzo0N1rOEF3dxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDU2OTE3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMDo0NjoyMlrOGjggoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTozNjoxNFrOGkTW5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg4NTk4NA==", "bodyText": "nit: indentation?", "url": "https://github.com/line/armeria/pull/2796#discussion_r439885984", "createdAt": "2020-06-15T00:46:22Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java", "diffHunk": "@@ -300,7 +304,7 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc\n                 if (idleTimeoutMillis > 0 || pingIntervalMillis > 0) {\n                     final Http1ClientKeepAliveHandler keepAliveHandler =\n                             new Http1ClientKeepAliveHandler(channel, requestEncoder, responseDecoder,\n-                                                            idleTimeoutMillis, pingIntervalMillis);\n+                                    keepAliveTimer, idleTimeoutMillis, pingIntervalMillis);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d64e61f2fa0781d218713e25229462e06f916647"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzMTM4NQ==", "bodyText": "I thought this indentation is weird too. IntelliJ formatter seems to not align vertically if it is longer than max-width.", "url": "https://github.com/line/armeria/pull/2796#discussion_r439931385", "createdAt": "2020-06-15T05:02:27Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java", "diffHunk": "@@ -300,7 +304,7 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc\n                 if (idleTimeoutMillis > 0 || pingIntervalMillis > 0) {\n                     final Http1ClientKeepAliveHandler keepAliveHandler =\n                             new Http1ClientKeepAliveHandler(channel, requestEncoder, responseDecoder,\n-                                                            idleTimeoutMillis, pingIntervalMillis);\n+                                    keepAliveTimer, idleTimeoutMillis, pingIntervalMillis);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg4NTk4NA=="}, "originalCommit": {"oid": "d64e61f2fa0781d218713e25229462e06f916647"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxOTA3Nw==", "bodyText": "Now IntelliJ formats this well. \ud83e\udd23", "url": "https://github.com/line/armeria/pull/2796#discussion_r440719077", "createdAt": "2020-06-16T09:36:14Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java", "diffHunk": "@@ -300,7 +304,7 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc\n                 if (idleTimeoutMillis > 0 || pingIntervalMillis > 0) {\n                     final Http1ClientKeepAliveHandler keepAliveHandler =\n                             new Http1ClientKeepAliveHandler(channel, requestEncoder, responseDecoder,\n-                                                            idleTimeoutMillis, pingIntervalMillis);\n+                                    keepAliveTimer, idleTimeoutMillis, pingIntervalMillis);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg4NTk4NA=="}, "originalCommit": {"oid": "d64e61f2fa0781d218713e25229462e06f916647"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDYzNzAwOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/server/HttpServerKeepAliveHandlerTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMTo1NjozMFrOGjhIvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOToyNjo0MlrOGkTASQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg5NjI1NA==", "bodyText": "Shouldn't we make the value to milliseconds because TimeUnit.MILLISECONDS.toSeconds(elapsed) will shrink the elapsed?", "url": "https://github.com/line/armeria/pull/2796#discussion_r439896254", "createdAt": "2020-06-15T01:56:30Z", "author": {"login": "minwoox"}, "path": "core/src/test/java/com/linecorp/armeria/server/HttpServerKeepAliveHandlerTest.java", "diffHunk": "@@ -150,6 +155,10 @@ void closeByClientIdleTimeout(SessionProtocol protocol) throws InterruptedExcept\n         await().untilAtomic(counter, Matchers.is(0));\n         final long elapsed = stopwatch.stop().elapsed(TimeUnit.MILLISECONDS);\n         assertThat(elapsed).isBetween(clientIdleTimeout, serverIdleTimeout - 1000);\n+        assertThat(MoreMeters.measureAll(meterRegistry))\n+                .hasEntrySatisfying(\"armeria.client.connections.lifetime#total\", value -> {\n+                    assertThat(value).isCloseTo(TimeUnit.MILLISECONDS.toSeconds(elapsed), withinPercentage(25));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d64e61f2fa0781d218713e25229462e06f916647"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzMjM1Mg==", "bodyText": "Oops...", "url": "https://github.com/line/armeria/pull/2796#discussion_r439932352", "createdAt": "2020-06-15T05:07:15Z", "author": {"login": "ikhoon"}, "path": "core/src/test/java/com/linecorp/armeria/server/HttpServerKeepAliveHandlerTest.java", "diffHunk": "@@ -150,6 +155,10 @@ void closeByClientIdleTimeout(SessionProtocol protocol) throws InterruptedExcept\n         await().untilAtomic(counter, Matchers.is(0));\n         final long elapsed = stopwatch.stop().elapsed(TimeUnit.MILLISECONDS);\n         assertThat(elapsed).isBetween(clientIdleTimeout, serverIdleTimeout - 1000);\n+        assertThat(MoreMeters.measureAll(meterRegistry))\n+                .hasEntrySatisfying(\"armeria.client.connections.lifetime#total\", value -> {\n+                    assertThat(value).isCloseTo(TimeUnit.MILLISECONDS.toSeconds(elapsed), withinPercentage(25));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg5NjI1NA=="}, "originalCommit": {"oid": "d64e61f2fa0781d218713e25229462e06f916647"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4NTA4OQ==", "bodyText": "In Micrometer (and Prometheus), all duration values are represented as seconds.", "url": "https://github.com/line/armeria/pull/2796#discussion_r440685089", "createdAt": "2020-06-16T08:41:37Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/server/HttpServerKeepAliveHandlerTest.java", "diffHunk": "@@ -150,6 +155,10 @@ void closeByClientIdleTimeout(SessionProtocol protocol) throws InterruptedExcept\n         await().untilAtomic(counter, Matchers.is(0));\n         final long elapsed = stopwatch.stop().elapsed(TimeUnit.MILLISECONDS);\n         assertThat(elapsed).isBetween(clientIdleTimeout, serverIdleTimeout - 1000);\n+        assertThat(MoreMeters.measureAll(meterRegistry))\n+                .hasEntrySatisfying(\"armeria.client.connections.lifetime#total\", value -> {\n+                    assertThat(value).isCloseTo(TimeUnit.MILLISECONDS.toSeconds(elapsed), withinPercentage(25));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg5NjI1NA=="}, "originalCommit": {"oid": "d64e61f2fa0781d218713e25229462e06f916647"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxMzI4OQ==", "bodyText": "It just needs to be double so that sub-second part is preserved.", "url": "https://github.com/line/armeria/pull/2796#discussion_r440713289", "createdAt": "2020-06-16T09:26:42Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/server/HttpServerKeepAliveHandlerTest.java", "diffHunk": "@@ -150,6 +155,10 @@ void closeByClientIdleTimeout(SessionProtocol protocol) throws InterruptedExcept\n         await().untilAtomic(counter, Matchers.is(0));\n         final long elapsed = stopwatch.stop().elapsed(TimeUnit.MILLISECONDS);\n         assertThat(elapsed).isBetween(clientIdleTimeout, serverIdleTimeout - 1000);\n+        assertThat(MoreMeters.measureAll(meterRegistry))\n+                .hasEntrySatisfying(\"armeria.client.connections.lifetime#total\", value -> {\n+                    assertThat(value).isCloseTo(TimeUnit.MILLISECONDS.toSeconds(elapsed), withinPercentage(25));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg5NjI1NA=="}, "originalCommit": {"oid": "d64e61f2fa0781d218713e25229462e06f916647"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTg2NTc4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/HttpClientFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo1MjoyOVrOGkT8nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDoyMDo0N1rOGkU7nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyODczNQ==", "bodyText": "Shouldn't we add some tags? e.g. protocol", "url": "https://github.com/line/armeria/pull/2796#discussion_r440728735", "createdAt": "2020-06-16T09:52:29Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpClientFactory.java", "diffHunk": "@@ -146,6 +149,8 @@\n         useHttp1Pipelining = options.useHttp1Pipelining();\n         connectionPoolListener = options.connectionPoolListener();\n         meterRegistry = options.meterRegistry();\n+        keepAliveTimer = MoreMeters.newTimer(meterRegistry, \"armeria.client.connections.lifespan\",\n+                                             ImmutableList.of());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5930e165b3c0ec332f1c977c5c2da3b97d77c2a"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0NDg2MA==", "bodyText": "Oh, good idea!", "url": "https://github.com/line/armeria/pull/2796#discussion_r440744860", "createdAt": "2020-06-16T10:20:47Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpClientFactory.java", "diffHunk": "@@ -146,6 +149,8 @@\n         useHttp1Pipelining = options.useHttp1Pipelining();\n         connectionPoolListener = options.connectionPoolListener();\n         meterRegistry = options.meterRegistry();\n+        keepAliveTimer = MoreMeters.newTimer(meterRegistry, \"armeria.client.connections.lifespan\",\n+                                             ImmutableList.of());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyODczNQ=="}, "originalCommit": {"oid": "f5930e165b3c0ec332f1c977c5c2da3b97d77c2a"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTg3MDc3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/HttpServerPipelineConfigurator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo1Mzo0N1rOGkT_ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTo1Mzo0N1rOGkT_ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyOTUwNw==", "bodyText": "Ditto - tags?", "url": "https://github.com/line/armeria/pull/2796#discussion_r440729507", "createdAt": "2020-06-16T09:53:47Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/HttpServerPipelineConfigurator.java", "diffHunk": "@@ -112,6 +117,8 @@\n         this.port = requireNonNull(port, \"port\");\n         this.sslContexts = sslContexts;\n         this.gracefulShutdownSupport = requireNonNull(gracefulShutdownSupport, \"gracefulShutdownSupport\");\n+        keepAliveTimer = MoreMeters.newTimer(config.meterRegistry(), \"armeria.server.connections.lifespan\",\n+                                             ImmutableList.of());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5930e165b3c0ec332f1c977c5c2da3b97d77c2a"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2343, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}