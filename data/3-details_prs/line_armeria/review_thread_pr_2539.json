{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwODA4Mzgy", "number": 2539, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjowMTozN1rODjb_Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNjowMjozMlrODjtDgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDg1MjgyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjowMTozN1rOFvPoUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjoxMDoyNFrOFvP4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4MzQ3NQ==", "bodyText": "Question mark?", "url": "https://github.com/line/armeria/pull/2539#discussion_r385083475", "createdAt": "2020-02-27T12:01:37Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java", "diffHunk": "@@ -216,13 +240,12 @@ private void cancelOrAbort(Throwable cause) {\n \n         switch (state) {\n             case CLOSED:\n-                // close() has been called before cancel(). There's no need to push a CloseEvent,\n-                // but we need to ensure the completionFuture is notified and any pending objects\n-                // are removed.\n+                // close() has been called before cancel() or abort() is called.\n+                // We just push the new CloseEvent so that SUCCESSFUL_CLOSE, which was pushed by close(), is\n+                // ignored and cancel() or abort() call works?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a99e716733e33177ae01f74313ac8e49f5aa16"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4NzU0Mg==", "bodyText": "-_-;", "url": "https://github.com/line/armeria/pull/2539#discussion_r385087542", "createdAt": "2020-02-27T12:10:24Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java", "diffHunk": "@@ -216,13 +240,12 @@ private void cancelOrAbort(Throwable cause) {\n \n         switch (state) {\n             case CLOSED:\n-                // close() has been called before cancel(). There's no need to push a CloseEvent,\n-                // but we need to ensure the completionFuture is notified and any pending objects\n-                // are removed.\n+                // close() has been called before cancel() or abort() is called.\n+                // We just push the new CloseEvent so that SUCCESSFUL_CLOSE, which was pushed by close(), is\n+                // ignored and cancel() or abort() call works?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4MzQ3NQ=="}, "originalCommit": {"oid": "29a99e716733e33177ae01f74313ac8e49f5aa16"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDg1MzI0OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/server/HttpServerHandlerTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjowMTo0NVrOFvPojg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMToxNjo0NlrOFvmqzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4MzUzNA==", "bodyText": "The request is not subscribed but aborted in HttpServerHandler so the cause is changed.\nShould I change not to log this exception when the request is not subscribed? \ud83e\udd14", "url": "https://github.com/line/armeria/pull/2539#discussion_r385083534", "createdAt": "2020-02-27T12:01:45Z", "author": {"login": "minwoox"}, "path": "core/src/test/java/com/linecorp/armeria/server/HttpServerHandlerTest.java", "diffHunk": "@@ -103,6 +104,6 @@ void httpResponseExceptionIsNotLoggedAsRequestCause() {\n         await().untilAsserted(() -> {\n             assertThat(logHolder.get().requestHeaders().path()).isEqualTo(\"/httpResponseException\");\n         });\n-        assertThat(logHolder.get().requestCause()).isNull();\n+        assertThat(logHolder.get().requestCause()).isInstanceOf(AbortedStreamException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a99e716733e33177ae01f74313ac8e49f5aa16"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIwNzI4MA==", "bodyText": "Hmm. Most GET request handler will not subscribe at all. Perhaps we should handle the case where it is certain that request (or response) body will be empty?", "url": "https://github.com/line/armeria/pull/2539#discussion_r385207280", "createdAt": "2020-02-27T16:06:43Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/server/HttpServerHandlerTest.java", "diffHunk": "@@ -103,6 +104,6 @@ void httpResponseExceptionIsNotLoggedAsRequestCause() {\n         await().untilAsserted(() -> {\n             assertThat(logHolder.get().requestHeaders().path()).isEqualTo(\"/httpResponseException\");\n         });\n-        assertThat(logHolder.get().requestCause()).isNull();\n+        assertThat(logHolder.get().requestCause()).isInstanceOf(AbortedStreamException.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4MzUzNA=="}, "originalCommit": {"oid": "29a99e716733e33177ae01f74313ac8e49f5aa16"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIxMTMyNQ==", "bodyText": "However, such logic isn't part of the StreamMessage implementations. Could be done in the places that call abort()?", "url": "https://github.com/line/armeria/pull/2539#discussion_r385211325", "createdAt": "2020-02-27T16:12:44Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/server/HttpServerHandlerTest.java", "diffHunk": "@@ -103,6 +104,6 @@ void httpResponseExceptionIsNotLoggedAsRequestCause() {\n         await().untilAsserted(() -> {\n             assertThat(logHolder.get().requestHeaders().path()).isEqualTo(\"/httpResponseException\");\n         });\n-        assertThat(logHolder.get().requestCause()).isNull();\n+        assertThat(logHolder.get().requestCause()).isInstanceOf(AbortedStreamException.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4MzUzNA=="}, "originalCommit": {"oid": "29a99e716733e33177ae01f74313ac8e49f5aa16"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2MDk0Mg==", "bodyText": "Perhaps we should handle the case where it is certain that request (or response) body will be empty?\n\nThat's a nice idea. EmptyFixedStreamMessage works in the same way. Let me make a change for that. Thanks!", "url": "https://github.com/line/armeria/pull/2539#discussion_r385460942", "createdAt": "2020-02-28T01:16:46Z", "author": {"login": "minwoox"}, "path": "core/src/test/java/com/linecorp/armeria/server/HttpServerHandlerTest.java", "diffHunk": "@@ -103,6 +104,6 @@ void httpResponseExceptionIsNotLoggedAsRequestCause() {\n         await().untilAsserted(() -> {\n             assertThat(logHolder.get().requestHeaders().path()).isEqualTo(\"/httpResponseException\");\n         });\n-        assertThat(logHolder.get().requestCause()).isNull();\n+        assertThat(logHolder.get().requestCause()).isInstanceOf(AbortedStreamException.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4MzUzNA=="}, "originalCommit": {"oid": "29a99e716733e33177ae01f74313ac8e49f5aa16"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDg1ODc4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjowMzo0NFrOFvPsCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjowMzo0NFrOFvPsCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4NDQyNQ==", "bodyText": "So the concept now is that, whatever the event which changes to the CLEANUP state, will notify to the subscriber with it.", "url": "https://github.com/line/armeria/pull/2539#discussion_r385084425", "createdAt": "2020-02-27T12:03:44Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java", "diffHunk": "@@ -361,8 +384,9 @@ private boolean notifyAwaitDemandFuture() {\n     }\n \n     private void handleCloseEvent(SubscriptionImpl subscription, CloseEvent o) {\n-        setState(State.OPEN, State.CLEANUP);\n-        notifySubscriberOfCloseEvent(subscription, o);\n+        if (setState(State.CLOSED, State.CLEANUP)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a99e716733e33177ae01f74313ac8e49f5aa16"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDg2MDUzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjowNDoyNFrOFvPtLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjoxMToyNFrOFvP5_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4NDcxOQ==", "bodyText": "cause could be instantiated only when necessary.", "url": "https://github.com/line/armeria/pull/2539#discussion_r385084719", "createdAt": "2020-02-27T12:04:24Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java", "diffHunk": "@@ -402,6 +426,41 @@ private boolean setState(State oldState, State newState) {\n     }\n \n     private void cleanup() {\n-        cleanupQueue(subscription, queue);\n+        final Throwable cause = ClosedStreamException.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a99e716733e33177ae01f74313ac8e49f5aa16"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4Nzk5OQ==", "bodyText": "Ah fixed. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2539#discussion_r385087999", "createdAt": "2020-02-27T12:11:24Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java", "diffHunk": "@@ -402,6 +426,41 @@ private boolean setState(State oldState, State newState) {\n     }\n \n     private void cleanup() {\n-        cleanupQueue(subscription, queue);\n+        final Throwable cause = ClosedStreamException.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4NDcxOQ=="}, "originalCommit": {"oid": "29a99e716733e33177ae01f74313ac8e49f5aa16"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDg3MzI4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjowODo0MlrOFvP09A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjoxMDo1M1rOFvP5HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4NjcwOA==", "bodyText": "// Just skip SUCCESSFUL_CLOSE because being in cleanup() means one of the following:\n// - All elements have been consumed already\n// - cancel() or abort() has been invoked after successful close().", "url": "https://github.com/line/armeria/pull/2539#discussion_r385086708", "createdAt": "2020-02-27T12:08:42Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java", "diffHunk": "@@ -402,6 +426,41 @@ private boolean setState(State oldState, State newState) {\n     }\n \n     private void cleanup() {\n-        cleanupQueue(subscription, queue);\n+        final Throwable cause = ClosedStreamException.get();\n+        for (;;) {\n+            final Object e = queue.poll();\n+            if (e == null) {\n+                break;\n+            }\n+\n+            try {\n+                // Just skip SUCCESSFUL_CLOSE because cancel() or abort() is called so\n+                // we need to handle the subscriber with the event.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a99e716733e33177ae01f74313ac8e49f5aa16"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4Nzc3Mg==", "bodyText": "It's a lot better. Thanks!", "url": "https://github.com/line/armeria/pull/2539#discussion_r385087772", "createdAt": "2020-02-27T12:10:53Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java", "diffHunk": "@@ -402,6 +426,41 @@ private boolean setState(State oldState, State newState) {\n     }\n \n     private void cleanup() {\n-        cleanupQueue(subscription, queue);\n+        final Throwable cause = ClosedStreamException.get();\n+        for (;;) {\n+            final Object e = queue.poll();\n+            if (e == null) {\n+                break;\n+            }\n+\n+            try {\n+                // Just skip SUCCESSFUL_CLOSE because cancel() or abort() is called so\n+                // we need to handle the subscriber with the event.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4NjcwOA=="}, "originalCommit": {"oid": "29a99e716733e33177ae01f74313ac8e49f5aa16"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDk1Mzc1OnYy", "diffSide": "LEFT", "path": "core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjozNjoxNFrOFvQk4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjozNjoxNFrOFvQk4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5ODk3OQ==", "bodyText": "There was a bug here. we should continue here. \ud83d\ude31", "url": "https://github.com/line/armeria/pull/2539#discussion_r385098979", "createdAt": "2020-02-27T12:36:14Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessage.java", "diffHunk": "@@ -171,36 +170,6 @@ T prepareObjectForNotification(SubscriptionImpl subscription, T o) {\n         return o;\n     }\n \n-    /**\n-     * Helper method for the common case of cleaning up all elements in a queue when shutting down the stream.\n-     */\n-    void cleanupQueue(SubscriptionImpl subscription, Queue<Object> queue) {\n-        final Throwable cause = ClosedStreamException.get();\n-        for (;;) {\n-            final Object e = queue.poll();\n-            if (e == null) {\n-                break;\n-            }\n-\n-            try {\n-                if (e instanceof CloseEvent) {\n-                    notifySubscriberOfCloseEvent(subscription, (CloseEvent) e);\n-                    continue;\n-                }\n-\n-                if (e instanceof CompletableFuture) {\n-                    ((CompletableFuture<?>) e).completeExceptionally(cause);\n-                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06871eabb2a67fd8e9334f779fcf315a270a1d65"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzY0ODYyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNjowMTo1M1rOFvqUJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNjowMTo1M1rOFvqUJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUyMDY3OQ==", "bodyText": "Could be private?", "url": "https://github.com/line/armeria/pull/2539#discussion_r385520679", "createdAt": "2020-02-28T06:01:53Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java", "diffHunk": "@@ -194,44 +215,56 @@ private void doRequest(long n) {\n \n     @Override\n     void cancel() {\n-        cancelOrAbort(CancelledSubscriptionException.get());\n+        if (setState(State.OPEN, State.CLEANUP) || setState(State.CLOSED, State.CLEANUP)) {\n+            // It the state was CLOSED, close() or close(cause) has been called before cancel() or abort()\n+            // is called. We just ignore the previously pushed event and deal with CANCELLED_CLOSE.\n+            final SubscriptionImpl subscription = this.subscription;\n+            assert subscription != null;\n+            notifySubscriberOfCloseEvent(subscription, CANCELLED_CLOSE);\n+        }\n     }\n \n-    @Override\n     void notifySubscriberOfCloseEvent(SubscriptionImpl subscription, CloseEvent event) {\n-        // Always called from the subscriber thread.\n+        if (subscription.needsDirectInvocation()) {\n+            notifySubscriberOfCloseEvent0(subscription, event);\n+        } else {\n+            subscription.executor().execute(() -> notifySubscriberOfCloseEvent0(subscription, event));\n+        }\n+    }\n+\n+    void notifySubscriberOfCloseEvent0(SubscriptionImpl subscription, CloseEvent event) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "869836191c85920c28bc055a80a26362336299a9"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzY0OTI4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNjowMjozMlrOFvqUnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNjowOToxOFrOFvqaAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUyMDc5Nw==", "bodyText": "Could be private?", "url": "https://github.com/line/armeria/pull/2539#discussion_r385520797", "createdAt": "2020-02-28T06:02:32Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java", "diffHunk": "@@ -194,44 +215,56 @@ private void doRequest(long n) {\n \n     @Override\n     void cancel() {\n-        cancelOrAbort(CancelledSubscriptionException.get());\n+        if (setState(State.OPEN, State.CLEANUP) || setState(State.CLOSED, State.CLEANUP)) {\n+            // It the state was CLOSED, close() or close(cause) has been called before cancel() or abort()\n+            // is called. We just ignore the previously pushed event and deal with CANCELLED_CLOSE.\n+            final SubscriptionImpl subscription = this.subscription;\n+            assert subscription != null;\n+            notifySubscriberOfCloseEvent(subscription, CANCELLED_CLOSE);\n+        }\n     }\n \n-    @Override\n     void notifySubscriberOfCloseEvent(SubscriptionImpl subscription, CloseEvent event) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "869836191c85920c28bc055a80a26362336299a9"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUyMjE3Nw==", "bodyText": "Fixed. :)", "url": "https://github.com/line/armeria/pull/2539#discussion_r385522177", "createdAt": "2020-02-28T06:09:18Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java", "diffHunk": "@@ -194,44 +215,56 @@ private void doRequest(long n) {\n \n     @Override\n     void cancel() {\n-        cancelOrAbort(CancelledSubscriptionException.get());\n+        if (setState(State.OPEN, State.CLEANUP) || setState(State.CLOSED, State.CLEANUP)) {\n+            // It the state was CLOSED, close() or close(cause) has been called before cancel() or abort()\n+            // is called. We just ignore the previously pushed event and deal with CANCELLED_CLOSE.\n+            final SubscriptionImpl subscription = this.subscription;\n+            assert subscription != null;\n+            notifySubscriberOfCloseEvent(subscription, CANCELLED_CLOSE);\n+        }\n     }\n \n-    @Override\n     void notifySubscriberOfCloseEvent(SubscriptionImpl subscription, CloseEvent event) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUyMDc5Nw=="}, "originalCommit": {"oid": "869836191c85920c28bc055a80a26362336299a9"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2707, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}