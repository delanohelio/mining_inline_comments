{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyMDgzMDA0", "number": 2466, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNDowMjoyMlrODd6BwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNDowMjoyMlrODd6BwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjg2MDE2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/GracefulShutdownSupport.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNDowMjoyMlrOFmxwRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNDowMjoyMlrOFmxwRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIwNTM4MA==", "bodyText": "Nice idea. \ud83d\udc4d\ud83d\udc4d\ud83d\udc4d", "url": "https://github.com/line/armeria/pull/2466#discussion_r376205380", "createdAt": "2020-02-07T04:02:22Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/GracefulShutdownSupport.java", "diffHunk": "@@ -100,65 +97,54 @@ boolean completedQuietPeriod() {\n         private final Executor blockingTaskExecutor;\n \n         /**\n-         * NOTE: {@link #updatedLastResTimeNanos} and {@link #lastResTimeNanos} are declared as non-volatile\n-         *       while using this field as a memory barrier.\n+         * Declared as non-volatile because using {@link #pendingResponses} as a memory barrier.\n          */\n-        private final AtomicInteger pendingResponses = new AtomicInteger();\n-        private boolean updatedLastResTimeNanos;\n         private long lastResTimeNanos;\n-        private boolean setShutdownStartTimeNanos;\n-        private long shutdownStartTimeNanos;\n+        private volatile long shutdownStartTimeNanos;\n \n         DefaultGracefulShutdownSupport(Duration quietPeriod, Executor blockingTaskExecutor, Ticker ticker) {\n             quietPeriodNanos = quietPeriod.toNanos();\n             this.blockingTaskExecutor = blockingTaskExecutor;\n             this.ticker = ticker;\n         }\n \n-        @Override\n-        void inc() {\n-            pendingResponses.incrementAndGet();\n-        }\n-\n         @Override\n         void dec() {\n-            lastResTimeNanos = ticker.read();\n-            updatedLastResTimeNanos = true;\n-            pendingResponses.decrementAndGet();\n-        }\n-\n-        @Override\n-        int pendingResponses() {\n-            return pendingResponses.get();\n+            lastResTimeNanos = readTicker();\n+            super.dec();\n         }\n \n         @Override\n         boolean isShuttingDown() {\n-            return setShutdownStartTimeNanos;\n+            return shutdownStartTimeNanos != 0;\n         }\n \n         @Override\n         boolean completedQuietPeriod() {\n-            if (!setShutdownStartTimeNanos) {\n-                shutdownStartTimeNanos = ticker.read();\n-                setShutdownStartTimeNanos = true;\n+            if (shutdownStartTimeNanos == 0) {\n+                shutdownStartTimeNanos = readTicker();\n             }\n \n-            if (pendingResponses.get() != 0 || !completedBlockingTasks()) {\n+            if (pendingResponses() != 0 || !completedBlockingTasks()) {\n                 return false;\n             }\n \n             final long shutdownStartTimeNanos = this.shutdownStartTimeNanos;\n             final long currentTimeNanos = ticker.read();\n-            final long duration;\n-            if (updatedLastResTimeNanos) {\n-                duration = Math.min(currentTimeNanos - shutdownStartTimeNanos,\n-                                    currentTimeNanos - lastResTimeNanos);\n+            final long durationNanos;\n+            if (lastResTimeNanos != 0) {\n+                durationNanos = Math.min(currentTimeNanos - shutdownStartTimeNanos,\n+                                         currentTimeNanos - lastResTimeNanos);\n             } else {\n-                duration = currentTimeNanos - shutdownStartTimeNanos;\n+                durationNanos = currentTimeNanos - shutdownStartTimeNanos;\n             }\n \n-            return duration >= quietPeriodNanos;\n+            return durationNanos >= quietPeriodNanos;\n+        }\n+\n+        private long readTicker() {\n+            // '| 1' makes sure this method never returns 0.\n+            return ticker.read() | 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6fe08c2d5887cca821e2033d4be70aee0bf72df"}, "originalPosition": 140}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2998, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}