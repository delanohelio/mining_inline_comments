{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5MTI2ODk5", "number": 3171, "title": "Add advanced-metrics docs to web site", "bodyText": "(After-merge update: this is now deployed at https://armeria.dev/docs/advanced-metrics)", "createdAt": "2020-11-11T11:09:52Z", "url": "https://github.com/line/armeria/pull/3171", "merged": true, "mergeCommit": {"oid": "d5d5a61d8020dac1b6fdf136b4cb1b2153efd023"}, "closed": true, "closedAt": "2020-11-28T04:54:04Z", "author": {"login": "perlun"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbb_DhAH2gAyNTE5MTI2ODk5OmRmZmI1MDYzYmY1OGVhYjA5MWM1ZDZhYzY2OGQ3ZGQwYjcxZWY2MzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgpBqSAH2gAyNTE5MTI2ODk5Ojc1MjhjZTI1OTJlOGRiOTZlMDU1Y2VmODI2MTVjZWVmMDRhNjVkMzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dffb5063bf58eab091c5d6ac668d7dd0b71ef635", "author": {"user": {"login": "perlun", "name": "Per Lundberg"}}, "url": "https://github.com/line/armeria/commit/dffb5063bf58eab091c5d6ac668d7dd0b71ef635", "committedDate": "2020-11-11T11:09:30Z", "message": "Add advanced-metrics docs to web site"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4Njk1MTk5", "url": "https://github.com/line/armeria/pull/3171#pullrequestreview-528695199", "createdAt": "2020-11-12T02:43:54Z", "commit": {"oid": "dffb5063bf58eab091c5d6ac668d7dd0b71ef635"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMjo0Mzo1NVrOHxnEdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMjo1MDo0NFrOHxnLwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc4MjM4OQ==", "bodyText": "Global comment: Please break the line if the line length exceeds 112.", "url": "https://github.com/line/armeria/pull/3171#discussion_r521782389", "createdAt": "2020-11-12T02:43:55Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/docs/advanced-metrics.mdx", "diffHunk": "@@ -0,0 +1,73 @@\n+# Collecting metrics\n+\n+Armeria has built-in support for collecting metrics both on the server and client side. This page describes how to enable this.\n+\n+The metric data is collected using the [Micrometer](https://micrometer.io/) library. Please consult its documentation for information on how to expose the collected metrics to various monitoring systems (JMX, Prometheus, etc)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dffb5063bf58eab091c5d6ac668d7dd0b71ef635"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc4MjY3Ng==", "bodyText": "Could use <type://ServerBuilder.meterRegistry()> instead of meterRegistry()", "url": "https://github.com/line/armeria/pull/3171#discussion_r521782676", "createdAt": "2020-11-12T02:44:50Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/docs/advanced-metrics.mdx", "diffHunk": "@@ -0,0 +1,73 @@\n+# Collecting metrics\n+\n+Armeria has built-in support for collecting metrics both on the server and client side. This page describes how to enable this.\n+\n+The metric data is collected using the [Micrometer](https://micrometer.io/) library. Please consult its documentation for information on how to expose the collected metrics to various monitoring systems (JMX, Prometheus, etc)\n+\n+## Collecting server-side metrics (gRPC)\n+\n+```java\n+import com.linecorp.armeria.common.grpc.GrpcMeterIdPrefixFunction;\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.server.grpc.GrpcService;\n+import com.linecorp.armeria.server.metric.MetricCollectingService;\n+\n+ServerBuilder serverBuilder = Server.builder()\n+        .http(new InetSocketAddress(address, port))\n+        .service(\n+                GrpcService.builder()\n+                        .addService(new MyHelloService())\n+                        .build()\n+        )\n+        .decorator(MetricCollectingService.newDecorator(\n+                GrpcMeterIdPrefixFunction.of(\"my.service\"))\n+        );\n+```\n+\n+In cases where more sophisticated filtering and/or mangling of the generated metrics are required, you can use the `meterRegistry()` method like this:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dffb5063bf58eab091c5d6ac668d7dd0b71ef635"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc4Mjc5OA==", "bodyText": "nit: Intent?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            GrpcService.builder()\n          \n          \n            \n                                    .addService(new MyHelloService())\n          \n          \n            \n                                    .build()\n          \n          \n            \n                            GrpcService.builder()\n          \n          \n            \n                                       .addService(new MyHelloService())\n          \n          \n            \n                                       .build()", "url": "https://github.com/line/armeria/pull/3171#discussion_r521782798", "createdAt": "2020-11-12T02:45:19Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/docs/advanced-metrics.mdx", "diffHunk": "@@ -0,0 +1,73 @@\n+# Collecting metrics\n+\n+Armeria has built-in support for collecting metrics both on the server and client side. This page describes how to enable this.\n+\n+The metric data is collected using the [Micrometer](https://micrometer.io/) library. Please consult its documentation for information on how to expose the collected metrics to various monitoring systems (JMX, Prometheus, etc)\n+\n+## Collecting server-side metrics (gRPC)\n+\n+```java\n+import com.linecorp.armeria.common.grpc.GrpcMeterIdPrefixFunction;\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.server.grpc.GrpcService;\n+import com.linecorp.armeria.server.metric.MetricCollectingService;\n+\n+ServerBuilder serverBuilder = Server.builder()\n+        .http(new InetSocketAddress(address, port))\n+        .service(\n+                GrpcService.builder()\n+                        .addService(new MyHelloService())\n+                        .build()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dffb5063bf58eab091c5d6ac668d7dd0b71ef635"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc4MzE3NA==", "bodyText": "How about this style for readability?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ServerBuilder serverBuilder = Server.builder()\n          \n          \n            \n                    .http(new InetSocketAddress(address, port))\n          \n          \n            \n                    .service(\n          \n          \n            \n            ServerBuilder serverBuilder = \n          \n          \n            \n                    Server.builder()\n          \n          \n            \n                          .http(new InetSocketAddress(address, port))\n          \n          \n            \n                          .service(", "url": "https://github.com/line/armeria/pull/3171#discussion_r521783174", "createdAt": "2020-11-12T02:46:45Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/docs/advanced-metrics.mdx", "diffHunk": "@@ -0,0 +1,73 @@\n+# Collecting metrics\n+\n+Armeria has built-in support for collecting metrics both on the server and client side. This page describes how to enable this.\n+\n+The metric data is collected using the [Micrometer](https://micrometer.io/) library. Please consult its documentation for information on how to expose the collected metrics to various monitoring systems (JMX, Prometheus, etc)\n+\n+## Collecting server-side metrics (gRPC)\n+\n+```java\n+import com.linecorp.armeria.common.grpc.GrpcMeterIdPrefixFunction;\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.server.grpc.GrpcService;\n+import com.linecorp.armeria.server.metric.MetricCollectingService;\n+\n+ServerBuilder serverBuilder = Server.builder()\n+        .http(new InetSocketAddress(address, port))\n+        .service(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dffb5063bf58eab091c5d6ac668d7dd0b71ef635"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc4MzQzOQ==", "bodyText": "Coul use <type://ClientFactory>", "url": "https://github.com/line/armeria/pull/3171#discussion_r521783439", "createdAt": "2020-11-12T02:47:47Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/docs/advanced-metrics.mdx", "diffHunk": "@@ -0,0 +1,73 @@\n+# Collecting metrics\n+\n+Armeria has built-in support for collecting metrics both on the server and client side. This page describes how to enable this.\n+\n+The metric data is collected using the [Micrometer](https://micrometer.io/) library. Please consult its documentation for information on how to expose the collected metrics to various monitoring systems (JMX, Prometheus, etc)\n+\n+## Collecting server-side metrics (gRPC)\n+\n+```java\n+import com.linecorp.armeria.common.grpc.GrpcMeterIdPrefixFunction;\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.server.grpc.GrpcService;\n+import com.linecorp.armeria.server.metric.MetricCollectingService;\n+\n+ServerBuilder serverBuilder = Server.builder()\n+        .http(new InetSocketAddress(address, port))\n+        .service(\n+                GrpcService.builder()\n+                        .addService(new MyHelloService())\n+                        .build()\n+        )\n+        .decorator(MetricCollectingService.newDecorator(\n+                GrpcMeterIdPrefixFunction.of(\"my.service\"))\n+        );\n+```\n+\n+In cases where more sophisticated filtering and/or mangling of the generated metrics are required, you can use the `meterRegistry()` method like this:\n+\n+```java\n+ServerBuilder serverBuilder = Server.builder()\n+        // ...\n+        .meterRegistry(myMeterRegistry);\n+```\n+\n+## Collecting client-side metrics (gRPC)\n+\n+This approach can used to collect metrics in a gRPC client:\n+\n+```java\n+import com.linecorp.armeria.client.ClientOptions;\n+import com.linecorp.armeria.client.Clients;\n+import com.linecorp.armeria.client.metric.MetricCollectingClient;\n+import com.linecorp.armeria.common.grpc.GrpcMeterIdPrefixFunction;\n+\n+return Clients.builder(grpcUrl)\n+        .options(\n+                ClientOptions.builder()\n+                        .decorator(\n+                                MetricCollectingClient.newDecorator(\n+                                        GrpcMeterIdPrefixFunction.of(\"my.client\")\n+                                )\n+                        )\n+                        .build()\n+        )\n+        .build(HelloServiceBlockingStub.class);\n+```\n+\n+Like with the server-side metrics described above, certain scenarios might require you to provide a custom meter registry. To accomplish this, override the `ClientFactory` in this way:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dffb5063bf58eab091c5d6ac668d7dd0b71ef635"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc4NDI1Ng==", "bodyText": "If you don't mind, could you also add an example of an HTTP service that uses MeterIdPrefixFunction?", "url": "https://github.com/line/armeria/pull/3171#discussion_r521784256", "createdAt": "2020-11-12T02:50:44Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/docs/advanced-metrics.mdx", "diffHunk": "@@ -0,0 +1,73 @@\n+# Collecting metrics\n+\n+Armeria has built-in support for collecting metrics both on the server and client side. This page describes how to enable this.\n+\n+The metric data is collected using the [Micrometer](https://micrometer.io/) library. Please consult its documentation for information on how to expose the collected metrics to various monitoring systems (JMX, Prometheus, etc)\n+\n+## Collecting server-side metrics (gRPC)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dffb5063bf58eab091c5d6ac668d7dd0b71ef635"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMDg4MDg1", "url": "https://github.com/line/armeria/pull/3171#pullrequestreview-531088085", "createdAt": "2020-11-16T08:35:01Z", "commit": {"oid": "dffb5063bf58eab091c5d6ac668d7dd0b71ef635"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODozNTowMVrOHzso4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODozNTowMVrOHzso4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk3MDc4Nw==", "bodyText": "How about:\n... systems, such as [Prometheus](...), [Dropwizard Metrics](...) and [Datadog](...).", "url": "https://github.com/line/armeria/pull/3171#discussion_r523970787", "createdAt": "2020-11-16T08:35:01Z", "author": {"login": "trustin"}, "path": "site/src/pages/docs/advanced-metrics.mdx", "diffHunk": "@@ -0,0 +1,73 @@\n+# Collecting metrics\n+\n+Armeria has built-in support for collecting metrics both on the server and client side. This page describes how to enable this.\n+\n+The metric data is collected using the [Micrometer](https://micrometer.io/) library. Please consult its documentation for information on how to expose the collected metrics to various monitoring systems (JMX, Prometheus, etc)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc4MjM4OQ=="}, "originalCommit": {"oid": "dffb5063bf58eab091c5d6ac668d7dd0b71ef635"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30fe0a02188566706f72e7b8ae80b46b2190ca94", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/30fe0a02188566706f72e7b8ae80b46b2190ca94", "committedDate": "2020-11-25T09:37:59Z", "message": "Add HTTP service and client example"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b30a23d7a5779ef1b85e4054f369c006b34a3fff", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/b30a23d7a5779ef1b85e4054f369c006b34a3fff", "committedDate": "2020-11-25T10:41:29Z", "message": "Add filter and config section"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d6038f5cf71337ea731e8b87ced2d0202cb3fe14", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/d6038f5cf71337ea731e8b87ced2d0202cb3fe14", "committedDate": "2020-11-25T10:49:08Z", "message": "clean up"}, "afterCommit": {"oid": "d10a8ad151f554d02cf1c8187394c6f61fdc20b6", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/d10a8ad151f554d02cf1c8187394c6f61fdc20b6", "committedDate": "2020-11-25T12:36:43Z", "message": "clean up"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d10a8ad151f554d02cf1c8187394c6f61fdc20b6", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/d10a8ad151f554d02cf1c8187394c6f61fdc20b6", "committedDate": "2020-11-25T12:36:43Z", "message": "clean up"}, "afterCommit": {"oid": "a994871c5f1eb3967695e2d9d9cc40c416d56b9e", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/a994871c5f1eb3967695e2d9d9cc40c416d56b9e", "committedDate": "2020-11-25T12:40:22Z", "message": "clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95c12039e0c8e678abf685580cf34352c2fd6f71", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/95c12039e0c8e678abf685580cf34352c2fd6f71", "committedDate": "2020-11-25T12:45:51Z", "message": "clean up"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a994871c5f1eb3967695e2d9d9cc40c416d56b9e", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/a994871c5f1eb3967695e2d9d9cc40c416d56b9e", "committedDate": "2020-11-25T12:40:22Z", "message": "clean up"}, "afterCommit": {"oid": "95c12039e0c8e678abf685580cf34352c2fd6f71", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/95c12039e0c8e678abf685580cf34352c2fd6f71", "committedDate": "2020-11-25T12:45:51Z", "message": "clean up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MDM0ODMz", "url": "https://github.com/line/armeria/pull/3171#pullrequestreview-539034833", "createdAt": "2020-11-26T06:57:47Z", "commit": {"oid": "95c12039e0c8e678abf685580cf34352c2fd6f71"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNjo1Nzo0N1rOH6N7AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNjo1OTozOFrOH6N91A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgwNzU1Mg==", "bodyText": "Inline PERCENTILES?", "url": "https://github.com/line/armeria/pull/3171#discussion_r530807552", "createdAt": "2020-11-26T06:57:47Z", "author": {"login": "trustin"}, "path": "site/src/pages/docs/advanced-metrics.mdx", "diffHunk": "@@ -0,0 +1,158 @@\n+# Collecting metrics\n+\n+Armeria has built-in support for collecting metrics both on the server and client side.\n+This page describes how to enable this.\n+\n+<Tip>\n+\n+The metric data is collected using the [Micrometer](https://micrometer.io/) library.\n+Please consult its documentation for information on how to expose the collected metrics to\n+various monitoring systems such as [Prometheus](https://prometheus.io/), \n+[Dropwizard Metrics](https://metrics.dropwizard.io/4.1.2/) and [Datadog](https://www.datadoghq.com/).\n+\n+</Tip>\n+\n+## Collecting server-side metrics\n+\n+You can use <type://MetricCollectingService> with <type://MeterIdPrefixFunction> for collecting metrics\n+of your services.\n+\n+```java\n+import com.linecorp.armeria.common.MeterIdPrefixFunction;\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.server.metric.MetricCollectingService;\n+\n+Server.builder()\n+      .http(new InetSocketAddress(address, port))\n+      .service(new MyHttpService())\n+      .decorator(MetricCollectingService.newDecorator(\n+              MeterIdPrefixFunction.ofDefault(\"http.service\")))\n+      .build();\n+```\n+\n+If you are interested in monitoring [gRPC status](https://grpc.github.io/grpc/core/md_doc_statuscodes.html)\n+for a gRPC service, you can use <type://GrpcMeterIdPrefixFunction> instead of <type://MeterIdPrefixFunction>.\n+\n+```java\n+import com.linecorp.armeria.common.grpc.GrpcMeterIdPrefixFunction;\n+import com.linecorp.armeria.server.grpc.GrpcService;\n+\n+Server.builder()\n+      .http(new InetSocketAddress(address, port))\n+      .service(GrpcService.builder()\n+                          .addService(new MyHelloService())\n+                          .build())\n+      .decorator(MetricCollectingService.newDecorator(\n+              GrpcMeterIdPrefixFunction.of(\"grpc.service\")))\n+      .build();\n+```\n+\n+In cases where more sophisticated filtering and/or mangling of the generated metrics are required,\n+you can use the <type://ServerBuilder#meterRegistry(MeterRegistry)> method like this:\n+\n+```java\n+Server.builder()\n+      // ...\n+      .meterRegistry(myMeterRegistry);\n+```\n+\n+## Collecting client-side metrics\n+\n+This approach can used to collect metrics in a <type://WebClient> and a gRPC client:\n+\n+```java\n+import com.linecorp.armeria.client.Clients;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.client.metric.MetricCollectingClient;\n+\n+// Decorate a WebClient with MetricCollectingClient\n+WebClient.builder(httpUrl)\n+         .decorator(MetricCollectingClient.newDecorator(\n+                 MeterIdPrefixFunction.ofDefault(\"http.client\")))\n+         .build();\n+\n+// Decorate a gRPC client with MetricCollectingClient\n+Clients.builder(grpcUrl)\n+       .decorator(MetricCollectingClient.newDecorator(\n+               GrpcMeterIdPrefixFunction.of(\"grpc.client\")))\n+       .build(HelloServiceBlockingStub.class);\n+```\n+\n+Like with the server-side metrics described above, certain scenarios might require you to \n+provide a custom meter registry. To accomplish this, override the <type://ClientFactory> in this way:\n+\n+```java\n+import com.linecorp.armeria.client.ClientFactory;\n+import com.linecorp.armeria.client.Clients;\n+\n+ClientFactory clientFactory = \n+      ClientFactory.builder()\n+                   .meterRegistry(myMeterRegistry)\n+                   .build();\n+                   \n+// Set a cumster ClientFactory to a WebClient                   \n+WebClient.builder(httpUrl)\n+         .factory(clientFactory)\n+          // ...\n+         .build();\n+\n+// Set a cumster ClientFactory to a gRPC client\n+Clients.builder(grpcUrl)\n+       .factory(clientFactory)\n+        // ...\n+       .build(HelloServiceBlockingStub.class);\n+```\n+\n+## Changing the default distribution summary config\n+\n+A [distribution summary](https://micrometer.io/docs/concepts#_distribution_summaries) is used to track \n+the distribution of events. Armeria provides a sensible default\n+[DistributionStatisticConfig](https://javadoc.io/doc/io.micrometer/micrometer-core/latest/io/micrometer/core/instrument/distribution/DistributionStatisticConfig.html)\n+for measuring the following metrics:\n+- A length of the request content\n+- A length of the response content\n+- A duration of request\n+- A duration of response\n+\n+If you want to override the default config,\n+you can set your own `DistributionStatisticConfig` using <type://MoreMeters#setDistributionStatisticConfig(DistributionStatisticConfig)>.\n+\n+```java\n+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;\n+\n+DistributionStatisticConfig myDistStatCfg =\n+        DistributionStatisticConfig.builder()\n+                                  .percentilesHistogram(false)\n+                                  .sla()\n+                                  .percentiles(PERCENTILES)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95c12039e0c8e678abf685580cf34352c2fd6f71"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgwNzg4OA==", "bodyText": "How about using Metrics.globalRegistry?", "url": "https://github.com/line/armeria/pull/3171#discussion_r530807888", "createdAt": "2020-11-26T06:58:40Z", "author": {"login": "trustin"}, "path": "site/src/pages/docs/advanced-metrics.mdx", "diffHunk": "@@ -0,0 +1,158 @@\n+# Collecting metrics\n+\n+Armeria has built-in support for collecting metrics both on the server and client side.\n+This page describes how to enable this.\n+\n+<Tip>\n+\n+The metric data is collected using the [Micrometer](https://micrometer.io/) library.\n+Please consult its documentation for information on how to expose the collected metrics to\n+various monitoring systems such as [Prometheus](https://prometheus.io/), \n+[Dropwizard Metrics](https://metrics.dropwizard.io/4.1.2/) and [Datadog](https://www.datadoghq.com/).\n+\n+</Tip>\n+\n+## Collecting server-side metrics\n+\n+You can use <type://MetricCollectingService> with <type://MeterIdPrefixFunction> for collecting metrics\n+of your services.\n+\n+```java\n+import com.linecorp.armeria.common.MeterIdPrefixFunction;\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.server.metric.MetricCollectingService;\n+\n+Server.builder()\n+      .http(new InetSocketAddress(address, port))\n+      .service(new MyHttpService())\n+      .decorator(MetricCollectingService.newDecorator(\n+              MeterIdPrefixFunction.ofDefault(\"http.service\")))\n+      .build();\n+```\n+\n+If you are interested in monitoring [gRPC status](https://grpc.github.io/grpc/core/md_doc_statuscodes.html)\n+for a gRPC service, you can use <type://GrpcMeterIdPrefixFunction> instead of <type://MeterIdPrefixFunction>.\n+\n+```java\n+import com.linecorp.armeria.common.grpc.GrpcMeterIdPrefixFunction;\n+import com.linecorp.armeria.server.grpc.GrpcService;\n+\n+Server.builder()\n+      .http(new InetSocketAddress(address, port))\n+      .service(GrpcService.builder()\n+                          .addService(new MyHelloService())\n+                          .build())\n+      .decorator(MetricCollectingService.newDecorator(\n+              GrpcMeterIdPrefixFunction.of(\"grpc.service\")))\n+      .build();\n+```\n+\n+In cases where more sophisticated filtering and/or mangling of the generated metrics are required,\n+you can use the <type://ServerBuilder#meterRegistry(MeterRegistry)> method like this:\n+\n+```java\n+Server.builder()\n+      // ...\n+      .meterRegistry(myMeterRegistry);\n+```\n+\n+## Collecting client-side metrics\n+\n+This approach can used to collect metrics in a <type://WebClient> and a gRPC client:\n+\n+```java\n+import com.linecorp.armeria.client.Clients;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.client.metric.MetricCollectingClient;\n+\n+// Decorate a WebClient with MetricCollectingClient\n+WebClient.builder(httpUrl)\n+         .decorator(MetricCollectingClient.newDecorator(\n+                 MeterIdPrefixFunction.ofDefault(\"http.client\")))\n+         .build();\n+\n+// Decorate a gRPC client with MetricCollectingClient\n+Clients.builder(grpcUrl)\n+       .decorator(MetricCollectingClient.newDecorator(\n+               GrpcMeterIdPrefixFunction.of(\"grpc.client\")))\n+       .build(HelloServiceBlockingStub.class);\n+```\n+\n+Like with the server-side metrics described above, certain scenarios might require you to \n+provide a custom meter registry. To accomplish this, override the <type://ClientFactory> in this way:\n+\n+```java\n+import com.linecorp.armeria.client.ClientFactory;\n+import com.linecorp.armeria.client.Clients;\n+\n+ClientFactory clientFactory = \n+      ClientFactory.builder()\n+                   .meterRegistry(myMeterRegistry)\n+                   .build();\n+                   \n+// Set a cumster ClientFactory to a WebClient                   \n+WebClient.builder(httpUrl)\n+         .factory(clientFactory)\n+          // ...\n+         .build();\n+\n+// Set a cumster ClientFactory to a gRPC client\n+Clients.builder(grpcUrl)\n+       .factory(clientFactory)\n+        // ...\n+       .build(HelloServiceBlockingStub.class);\n+```\n+\n+## Changing the default distribution summary config\n+\n+A [distribution summary](https://micrometer.io/docs/concepts#_distribution_summaries) is used to track \n+the distribution of events. Armeria provides a sensible default\n+[DistributionStatisticConfig](https://javadoc.io/doc/io.micrometer/micrometer-core/latest/io/micrometer/core/instrument/distribution/DistributionStatisticConfig.html)\n+for measuring the following metrics:\n+- A length of the request content\n+- A length of the response content\n+- A duration of request\n+- A duration of response\n+\n+If you want to override the default config,\n+you can set your own `DistributionStatisticConfig` using <type://MoreMeters#setDistributionStatisticConfig(DistributionStatisticConfig)>.\n+\n+```java\n+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;\n+\n+DistributionStatisticConfig myDistStatCfg =\n+        DistributionStatisticConfig.builder()\n+                                  .percentilesHistogram(false)\n+                                  .sla()\n+                                  .percentiles(PERCENTILES)\n+                                  .percentilePrecision(10)\n+                                  .minimumExpectedValue(1L)\n+                                  .maximumExpectedValue(Long.MAX_VALUE)\n+                                  .expiry(Duration.ofMinutes(10))\n+                                  .bufferLength(10)\n+                                  .build();\n+MoreMeters.setDistributionStatisticConfig(myDistStatCfg);\n+```\n+\n+## Excluding certain meters created by Armeria\n+\n+Micrometer's `MeterRegistry` can be configured with [meter filters](https://micrometer.io/docs/concepts#_meter_filters).\n+If you need to control the exported meters, you can apply sophisticated filters to the `MeterRegistry`.\n+\n+```java\n+import io.micrometer.core.instrument.simple.SimpleMeterRegistry;\n+\n+final MeterRegistry filteredMeterRegistry = new SimpleMeterRegistry();\n+filteredMeterRegistry", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95c12039e0c8e678abf685580cf34352c2fd6f71"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgwODA4MA==", "bodyText": "Can remove this if we use globalRegistry in the example.", "url": "https://github.com/line/armeria/pull/3171#discussion_r530808080", "createdAt": "2020-11-26T06:59:07Z", "author": {"login": "trustin"}, "path": "site/src/pages/docs/advanced-metrics.mdx", "diffHunk": "@@ -0,0 +1,158 @@\n+# Collecting metrics\n+\n+Armeria has built-in support for collecting metrics both on the server and client side.\n+This page describes how to enable this.\n+\n+<Tip>\n+\n+The metric data is collected using the [Micrometer](https://micrometer.io/) library.\n+Please consult its documentation for information on how to expose the collected metrics to\n+various monitoring systems such as [Prometheus](https://prometheus.io/), \n+[Dropwizard Metrics](https://metrics.dropwizard.io/4.1.2/) and [Datadog](https://www.datadoghq.com/).\n+\n+</Tip>\n+\n+## Collecting server-side metrics\n+\n+You can use <type://MetricCollectingService> with <type://MeterIdPrefixFunction> for collecting metrics\n+of your services.\n+\n+```java\n+import com.linecorp.armeria.common.MeterIdPrefixFunction;\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.server.metric.MetricCollectingService;\n+\n+Server.builder()\n+      .http(new InetSocketAddress(address, port))\n+      .service(new MyHttpService())\n+      .decorator(MetricCollectingService.newDecorator(\n+              MeterIdPrefixFunction.ofDefault(\"http.service\")))\n+      .build();\n+```\n+\n+If you are interested in monitoring [gRPC status](https://grpc.github.io/grpc/core/md_doc_statuscodes.html)\n+for a gRPC service, you can use <type://GrpcMeterIdPrefixFunction> instead of <type://MeterIdPrefixFunction>.\n+\n+```java\n+import com.linecorp.armeria.common.grpc.GrpcMeterIdPrefixFunction;\n+import com.linecorp.armeria.server.grpc.GrpcService;\n+\n+Server.builder()\n+      .http(new InetSocketAddress(address, port))\n+      .service(GrpcService.builder()\n+                          .addService(new MyHelloService())\n+                          .build())\n+      .decorator(MetricCollectingService.newDecorator(\n+              GrpcMeterIdPrefixFunction.of(\"grpc.service\")))\n+      .build();\n+```\n+\n+In cases where more sophisticated filtering and/or mangling of the generated metrics are required,\n+you can use the <type://ServerBuilder#meterRegistry(MeterRegistry)> method like this:\n+\n+```java\n+Server.builder()\n+      // ...\n+      .meterRegistry(myMeterRegistry);\n+```\n+\n+## Collecting client-side metrics\n+\n+This approach can used to collect metrics in a <type://WebClient> and a gRPC client:\n+\n+```java\n+import com.linecorp.armeria.client.Clients;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.client.metric.MetricCollectingClient;\n+\n+// Decorate a WebClient with MetricCollectingClient\n+WebClient.builder(httpUrl)\n+         .decorator(MetricCollectingClient.newDecorator(\n+                 MeterIdPrefixFunction.ofDefault(\"http.client\")))\n+         .build();\n+\n+// Decorate a gRPC client with MetricCollectingClient\n+Clients.builder(grpcUrl)\n+       .decorator(MetricCollectingClient.newDecorator(\n+               GrpcMeterIdPrefixFunction.of(\"grpc.client\")))\n+       .build(HelloServiceBlockingStub.class);\n+```\n+\n+Like with the server-side metrics described above, certain scenarios might require you to \n+provide a custom meter registry. To accomplish this, override the <type://ClientFactory> in this way:\n+\n+```java\n+import com.linecorp.armeria.client.ClientFactory;\n+import com.linecorp.armeria.client.Clients;\n+\n+ClientFactory clientFactory = \n+      ClientFactory.builder()\n+                   .meterRegistry(myMeterRegistry)\n+                   .build();\n+                   \n+// Set a cumster ClientFactory to a WebClient                   \n+WebClient.builder(httpUrl)\n+         .factory(clientFactory)\n+          // ...\n+         .build();\n+\n+// Set a cumster ClientFactory to a gRPC client\n+Clients.builder(grpcUrl)\n+       .factory(clientFactory)\n+        // ...\n+       .build(HelloServiceBlockingStub.class);\n+```\n+\n+## Changing the default distribution summary config\n+\n+A [distribution summary](https://micrometer.io/docs/concepts#_distribution_summaries) is used to track \n+the distribution of events. Armeria provides a sensible default\n+[DistributionStatisticConfig](https://javadoc.io/doc/io.micrometer/micrometer-core/latest/io/micrometer/core/instrument/distribution/DistributionStatisticConfig.html)\n+for measuring the following metrics:\n+- A length of the request content\n+- A length of the response content\n+- A duration of request\n+- A duration of response\n+\n+If you want to override the default config,\n+you can set your own `DistributionStatisticConfig` using <type://MoreMeters#setDistributionStatisticConfig(DistributionStatisticConfig)>.\n+\n+```java\n+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;\n+\n+DistributionStatisticConfig myDistStatCfg =\n+        DistributionStatisticConfig.builder()\n+                                  .percentilesHistogram(false)\n+                                  .sla()\n+                                  .percentiles(PERCENTILES)\n+                                  .percentilePrecision(10)\n+                                  .minimumExpectedValue(1L)\n+                                  .maximumExpectedValue(Long.MAX_VALUE)\n+                                  .expiry(Duration.ofMinutes(10))\n+                                  .bufferLength(10)\n+                                  .build();\n+MoreMeters.setDistributionStatisticConfig(myDistStatCfg);\n+```\n+\n+## Excluding certain meters created by Armeria\n+\n+Micrometer's `MeterRegistry` can be configured with [meter filters](https://micrometer.io/docs/concepts#_meter_filters).\n+If you need to control the exported meters, you can apply sophisticated filters to the `MeterRegistry`.\n+\n+```java\n+import io.micrometer.core.instrument.simple.SimpleMeterRegistry;\n+\n+final MeterRegistry filteredMeterRegistry = new SimpleMeterRegistry();\n+filteredMeterRegistry\n+        .config()\n+        .meterFilter(MeterFilter.deny(id -> \n+                id.getTag(\"service\").equals(\"MyHealthCheckService\")));\n+        .meterFilter(MeterFilter.denyNameStartsWith(\"jvm\"));\n+\n+Server.builder()\n+      // ...\n+      .meterRegistry(filteredMeterRegistry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95c12039e0c8e678abf685580cf34352c2fd6f71"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgwODI3Ng==", "bodyText": "know -> learn\nthe request metrics -> request metrics ?", "url": "https://github.com/line/armeria/pull/3171#discussion_r530808276", "createdAt": "2020-11-26T06:59:38Z", "author": {"login": "trustin"}, "path": "site/src/pages/docs/advanced-metrics.mdx", "diffHunk": "@@ -0,0 +1,158 @@\n+# Collecting metrics\n+\n+Armeria has built-in support for collecting metrics both on the server and client side.\n+This page describes how to enable this.\n+\n+<Tip>\n+\n+The metric data is collected using the [Micrometer](https://micrometer.io/) library.\n+Please consult its documentation for information on how to expose the collected metrics to\n+various monitoring systems such as [Prometheus](https://prometheus.io/), \n+[Dropwizard Metrics](https://metrics.dropwizard.io/4.1.2/) and [Datadog](https://www.datadoghq.com/).\n+\n+</Tip>\n+\n+## Collecting server-side metrics\n+\n+You can use <type://MetricCollectingService> with <type://MeterIdPrefixFunction> for collecting metrics\n+of your services.\n+\n+```java\n+import com.linecorp.armeria.common.MeterIdPrefixFunction;\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.server.metric.MetricCollectingService;\n+\n+Server.builder()\n+      .http(new InetSocketAddress(address, port))\n+      .service(new MyHttpService())\n+      .decorator(MetricCollectingService.newDecorator(\n+              MeterIdPrefixFunction.ofDefault(\"http.service\")))\n+      .build();\n+```\n+\n+If you are interested in monitoring [gRPC status](https://grpc.github.io/grpc/core/md_doc_statuscodes.html)\n+for a gRPC service, you can use <type://GrpcMeterIdPrefixFunction> instead of <type://MeterIdPrefixFunction>.\n+\n+```java\n+import com.linecorp.armeria.common.grpc.GrpcMeterIdPrefixFunction;\n+import com.linecorp.armeria.server.grpc.GrpcService;\n+\n+Server.builder()\n+      .http(new InetSocketAddress(address, port))\n+      .service(GrpcService.builder()\n+                          .addService(new MyHelloService())\n+                          .build())\n+      .decorator(MetricCollectingService.newDecorator(\n+              GrpcMeterIdPrefixFunction.of(\"grpc.service\")))\n+      .build();\n+```\n+\n+In cases where more sophisticated filtering and/or mangling of the generated metrics are required,\n+you can use the <type://ServerBuilder#meterRegistry(MeterRegistry)> method like this:\n+\n+```java\n+Server.builder()\n+      // ...\n+      .meterRegistry(myMeterRegistry);\n+```\n+\n+## Collecting client-side metrics\n+\n+This approach can used to collect metrics in a <type://WebClient> and a gRPC client:\n+\n+```java\n+import com.linecorp.armeria.client.Clients;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.client.metric.MetricCollectingClient;\n+\n+// Decorate a WebClient with MetricCollectingClient\n+WebClient.builder(httpUrl)\n+         .decorator(MetricCollectingClient.newDecorator(\n+                 MeterIdPrefixFunction.ofDefault(\"http.client\")))\n+         .build();\n+\n+// Decorate a gRPC client with MetricCollectingClient\n+Clients.builder(grpcUrl)\n+       .decorator(MetricCollectingClient.newDecorator(\n+               GrpcMeterIdPrefixFunction.of(\"grpc.client\")))\n+       .build(HelloServiceBlockingStub.class);\n+```\n+\n+Like with the server-side metrics described above, certain scenarios might require you to \n+provide a custom meter registry. To accomplish this, override the <type://ClientFactory> in this way:\n+\n+```java\n+import com.linecorp.armeria.client.ClientFactory;\n+import com.linecorp.armeria.client.Clients;\n+\n+ClientFactory clientFactory = \n+      ClientFactory.builder()\n+                   .meterRegistry(myMeterRegistry)\n+                   .build();\n+                   \n+// Set a cumster ClientFactory to a WebClient                   \n+WebClient.builder(httpUrl)\n+         .factory(clientFactory)\n+          // ...\n+         .build();\n+\n+// Set a cumster ClientFactory to a gRPC client\n+Clients.builder(grpcUrl)\n+       .factory(clientFactory)\n+        // ...\n+       .build(HelloServiceBlockingStub.class);\n+```\n+\n+## Changing the default distribution summary config\n+\n+A [distribution summary](https://micrometer.io/docs/concepts#_distribution_summaries) is used to track \n+the distribution of events. Armeria provides a sensible default\n+[DistributionStatisticConfig](https://javadoc.io/doc/io.micrometer/micrometer-core/latest/io/micrometer/core/instrument/distribution/DistributionStatisticConfig.html)\n+for measuring the following metrics:\n+- A length of the request content\n+- A length of the response content\n+- A duration of request\n+- A duration of response\n+\n+If you want to override the default config,\n+you can set your own `DistributionStatisticConfig` using <type://MoreMeters#setDistributionStatisticConfig(DistributionStatisticConfig)>.\n+\n+```java\n+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;\n+\n+DistributionStatisticConfig myDistStatCfg =\n+        DistributionStatisticConfig.builder()\n+                                  .percentilesHistogram(false)\n+                                  .sla()\n+                                  .percentiles(PERCENTILES)\n+                                  .percentilePrecision(10)\n+                                  .minimumExpectedValue(1L)\n+                                  .maximumExpectedValue(Long.MAX_VALUE)\n+                                  .expiry(Duration.ofMinutes(10))\n+                                  .bufferLength(10)\n+                                  .build();\n+MoreMeters.setDistributionStatisticConfig(myDistStatCfg);\n+```\n+\n+## Excluding certain meters created by Armeria\n+\n+Micrometer's `MeterRegistry` can be configured with [meter filters](https://micrometer.io/docs/concepts#_meter_filters).\n+If you need to control the exported meters, you can apply sophisticated filters to the `MeterRegistry`.\n+\n+```java\n+import io.micrometer.core.instrument.simple.SimpleMeterRegistry;\n+\n+final MeterRegistry filteredMeterRegistry = new SimpleMeterRegistry();\n+filteredMeterRegistry\n+        .config()\n+        .meterFilter(MeterFilter.deny(id -> \n+                id.getTag(\"service\").equals(\"MyHealthCheckService\")));\n+        .meterFilter(MeterFilter.denyNameStartsWith(\"jvm\"));\n+\n+Server.builder()\n+      // ...\n+      .meterRegistry(filteredMeterRegistry);\n+```\n+\n+Please refer to <type://MeterIdPrefixFunction> to know what kinds of tags are used for the request metrics.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95c12039e0c8e678abf685580cf34352c2fd6f71"}, "originalPosition": 158}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "169743a5431e2d25616fa2fb6b24bfb78fe1716d", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/169743a5431e2d25616fa2fb6b24bfb78fe1716d", "committedDate": "2020-11-27T04:14:02Z", "message": "Address comments by @trustin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5NzA3NjQ5", "url": "https://github.com/line/armeria/pull/3171#pullrequestreview-539707649", "createdAt": "2020-11-27T04:54:52Z", "commit": {"oid": "169743a5431e2d25616fa2fb6b24bfb78fe1716d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5NzE3MDE0", "url": "https://github.com/line/armeria/pull/3171#pullrequestreview-539717014", "createdAt": "2020-11-27T05:31:37Z", "commit": {"oid": "169743a5431e2d25616fa2fb6b24bfb78fe1716d"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNTozMTozN1rOH6xfyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNTozNDoxNVrOH6xh9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM5MDQwOA==", "bodyText": "can be used ... for a?", "url": "https://github.com/line/armeria/pull/3171#discussion_r531390408", "createdAt": "2020-11-27T05:31:37Z", "author": {"login": "minwoox"}, "path": "site/src/pages/docs/advanced-metrics.mdx", "diffHunk": "@@ -0,0 +1,153 @@\n+# Collecting metrics\n+\n+Armeria has built-in support for collecting metrics both on the server and client side.\n+This page describes how to enable this.\n+\n+<Tip>\n+\n+The metric data is collected using the [Micrometer](https://micrometer.io/) library.\n+Please consult its documentation for information on how to expose the collected metrics to\n+various monitoring systems such as [Prometheus](https://prometheus.io/), \n+[Dropwizard Metrics](https://metrics.dropwizard.io/4.1.2/) and [Datadog](https://www.datadoghq.com/).\n+\n+</Tip>\n+\n+## Collecting server-side metrics\n+\n+You can use <type://MetricCollectingService> with <type://MeterIdPrefixFunction> for collecting metrics\n+of your services.\n+\n+```java\n+import com.linecorp.armeria.common.MeterIdPrefixFunction;\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.server.metric.MetricCollectingService;\n+\n+Server.builder()\n+      .http(new InetSocketAddress(address, port))\n+      .service(new MyHttpService())\n+      .decorator(MetricCollectingService.newDecorator(\n+              MeterIdPrefixFunction.ofDefault(\"http.service\")))\n+      .build();\n+```\n+\n+If you are interested in monitoring [gRPC status](https://grpc.github.io/grpc/core/md_doc_statuscodes.html)\n+for a gRPC service, you can use <type://GrpcMeterIdPrefixFunction> instead of <type://MeterIdPrefixFunction>.\n+\n+```java\n+import com.linecorp.armeria.common.grpc.GrpcMeterIdPrefixFunction;\n+import com.linecorp.armeria.server.grpc.GrpcService;\n+\n+Server.builder()\n+      .http(new InetSocketAddress(address, port))\n+      .service(GrpcService.builder()\n+                          .addService(new MyHelloService())\n+                          .build())\n+      .decorator(MetricCollectingService.newDecorator(\n+              GrpcMeterIdPrefixFunction.of(\"grpc.service\")))\n+      .build();\n+```\n+\n+In cases where more sophisticated filtering and/or mangling of the generated metrics are required,\n+you can use the <type://ServerBuilder#meterRegistry(MeterRegistry)> method like this:\n+\n+```java\n+Server.builder()\n+      // ...\n+      .meterRegistry(myMeterRegistry);\n+```\n+\n+## Collecting client-side metrics\n+\n+This approach can used to collect metrics in a <type://WebClient> and a gRPC client:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "169743a5431e2d25616fa2fb6b24bfb78fe1716d"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM5MDY4Mw==", "bodyText": "Could remove with?", "url": "https://github.com/line/armeria/pull/3171#discussion_r531390683", "createdAt": "2020-11-27T05:32:53Z", "author": {"login": "minwoox"}, "path": "site/src/pages/docs/advanced-metrics.mdx", "diffHunk": "@@ -0,0 +1,153 @@\n+# Collecting metrics\n+\n+Armeria has built-in support for collecting metrics both on the server and client side.\n+This page describes how to enable this.\n+\n+<Tip>\n+\n+The metric data is collected using the [Micrometer](https://micrometer.io/) library.\n+Please consult its documentation for information on how to expose the collected metrics to\n+various monitoring systems such as [Prometheus](https://prometheus.io/), \n+[Dropwizard Metrics](https://metrics.dropwizard.io/4.1.2/) and [Datadog](https://www.datadoghq.com/).\n+\n+</Tip>\n+\n+## Collecting server-side metrics\n+\n+You can use <type://MetricCollectingService> with <type://MeterIdPrefixFunction> for collecting metrics\n+of your services.\n+\n+```java\n+import com.linecorp.armeria.common.MeterIdPrefixFunction;\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.server.metric.MetricCollectingService;\n+\n+Server.builder()\n+      .http(new InetSocketAddress(address, port))\n+      .service(new MyHttpService())\n+      .decorator(MetricCollectingService.newDecorator(\n+              MeterIdPrefixFunction.ofDefault(\"http.service\")))\n+      .build();\n+```\n+\n+If you are interested in monitoring [gRPC status](https://grpc.github.io/grpc/core/md_doc_statuscodes.html)\n+for a gRPC service, you can use <type://GrpcMeterIdPrefixFunction> instead of <type://MeterIdPrefixFunction>.\n+\n+```java\n+import com.linecorp.armeria.common.grpc.GrpcMeterIdPrefixFunction;\n+import com.linecorp.armeria.server.grpc.GrpcService;\n+\n+Server.builder()\n+      .http(new InetSocketAddress(address, port))\n+      .service(GrpcService.builder()\n+                          .addService(new MyHelloService())\n+                          .build())\n+      .decorator(MetricCollectingService.newDecorator(\n+              GrpcMeterIdPrefixFunction.of(\"grpc.service\")))\n+      .build();\n+```\n+\n+In cases where more sophisticated filtering and/or mangling of the generated metrics are required,\n+you can use the <type://ServerBuilder#meterRegistry(MeterRegistry)> method like this:\n+\n+```java\n+Server.builder()\n+      // ...\n+      .meterRegistry(myMeterRegistry);\n+```\n+\n+## Collecting client-side metrics\n+\n+This approach can used to collect metrics in a <type://WebClient> and a gRPC client:\n+\n+```java\n+import com.linecorp.armeria.client.Clients;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.client.metric.MetricCollectingClient;\n+\n+// Decorate a WebClient with MetricCollectingClient\n+WebClient.builder(httpUrl)\n+         .decorator(MetricCollectingClient.newDecorator(\n+                 MeterIdPrefixFunction.ofDefault(\"http.client\")))\n+         .build();\n+\n+// Decorate a gRPC client with MetricCollectingClient\n+Clients.builder(grpcUrl)\n+       .decorator(MetricCollectingClient.newDecorator(\n+               GrpcMeterIdPrefixFunction.of(\"grpc.client\")))\n+       .build(HelloServiceBlockingStub.class);\n+```\n+\n+Like with the server-side metrics described above, certain scenarios might require you to ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "169743a5431e2d25616fa2fb6b24bfb78fe1716d"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM5MDk2Nw==", "bodyText": "need one more space for indentation.", "url": "https://github.com/line/armeria/pull/3171#discussion_r531390967", "createdAt": "2020-11-27T05:34:15Z", "author": {"login": "minwoox"}, "path": "site/src/pages/docs/advanced-metrics.mdx", "diffHunk": "@@ -0,0 +1,153 @@\n+# Collecting metrics\n+\n+Armeria has built-in support for collecting metrics both on the server and client side.\n+This page describes how to enable this.\n+\n+<Tip>\n+\n+The metric data is collected using the [Micrometer](https://micrometer.io/) library.\n+Please consult its documentation for information on how to expose the collected metrics to\n+various monitoring systems such as [Prometheus](https://prometheus.io/), \n+[Dropwizard Metrics](https://metrics.dropwizard.io/4.1.2/) and [Datadog](https://www.datadoghq.com/).\n+\n+</Tip>\n+\n+## Collecting server-side metrics\n+\n+You can use <type://MetricCollectingService> with <type://MeterIdPrefixFunction> for collecting metrics\n+of your services.\n+\n+```java\n+import com.linecorp.armeria.common.MeterIdPrefixFunction;\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.server.metric.MetricCollectingService;\n+\n+Server.builder()\n+      .http(new InetSocketAddress(address, port))\n+      .service(new MyHttpService())\n+      .decorator(MetricCollectingService.newDecorator(\n+              MeterIdPrefixFunction.ofDefault(\"http.service\")))\n+      .build();\n+```\n+\n+If you are interested in monitoring [gRPC status](https://grpc.github.io/grpc/core/md_doc_statuscodes.html)\n+for a gRPC service, you can use <type://GrpcMeterIdPrefixFunction> instead of <type://MeterIdPrefixFunction>.\n+\n+```java\n+import com.linecorp.armeria.common.grpc.GrpcMeterIdPrefixFunction;\n+import com.linecorp.armeria.server.grpc.GrpcService;\n+\n+Server.builder()\n+      .http(new InetSocketAddress(address, port))\n+      .service(GrpcService.builder()\n+                          .addService(new MyHelloService())\n+                          .build())\n+      .decorator(MetricCollectingService.newDecorator(\n+              GrpcMeterIdPrefixFunction.of(\"grpc.service\")))\n+      .build();\n+```\n+\n+In cases where more sophisticated filtering and/or mangling of the generated metrics are required,\n+you can use the <type://ServerBuilder#meterRegistry(MeterRegistry)> method like this:\n+\n+```java\n+Server.builder()\n+      // ...\n+      .meterRegistry(myMeterRegistry);\n+```\n+\n+## Collecting client-side metrics\n+\n+This approach can used to collect metrics in a <type://WebClient> and a gRPC client:\n+\n+```java\n+import com.linecorp.armeria.client.Clients;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.client.metric.MetricCollectingClient;\n+\n+// Decorate a WebClient with MetricCollectingClient\n+WebClient.builder(httpUrl)\n+         .decorator(MetricCollectingClient.newDecorator(\n+                 MeterIdPrefixFunction.ofDefault(\"http.client\")))\n+         .build();\n+\n+// Decorate a gRPC client with MetricCollectingClient\n+Clients.builder(grpcUrl)\n+       .decorator(MetricCollectingClient.newDecorator(\n+               GrpcMeterIdPrefixFunction.of(\"grpc.client\")))\n+       .build(HelloServiceBlockingStub.class);\n+```\n+\n+Like with the server-side metrics described above, certain scenarios might require you to \n+provide a custom meter registry. To accomplish this, override the <type://ClientFactory> in this way:\n+\n+```java\n+import com.linecorp.armeria.client.ClientFactory;\n+import com.linecorp.armeria.client.Clients;\n+\n+ClientFactory clientFactory = \n+      ClientFactory.builder()\n+                   .meterRegistry(myMeterRegistry)\n+                   .build();\n+                   \n+// Set a cumster ClientFactory to a WebClient                   \n+WebClient.builder(httpUrl)\n+         .factory(clientFactory)\n+          // ...\n+         .build();\n+\n+// Set a cumster ClientFactory to a gRPC client\n+Clients.builder(grpcUrl)\n+       .factory(clientFactory)\n+        // ...\n+       .build(HelloServiceBlockingStub.class);\n+```\n+\n+## Changing the default distribution summary config\n+\n+A [distribution summary](https://micrometer.io/docs/concepts#_distribution_summaries) is used to track \n+the distribution of events. Armeria provides a sensible default\n+[DistributionStatisticConfig](https://javadoc.io/doc/io.micrometer/micrometer-core/latest/io/micrometer/core/instrument/distribution/DistributionStatisticConfig.html)\n+for measuring the following metrics:\n+- A length of the request content\n+- A length of the response content\n+- A duration of request\n+- A duration of response\n+\n+If you want to override the default config,\n+you can set your own `DistributionStatisticConfig` using <type://MoreMeters#setDistributionStatisticConfig(DistributionStatisticConfig)>.\n+\n+```java\n+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;\n+\n+DistributionStatisticConfig myDistStatCfg =\n+        DistributionStatisticConfig.builder()\n+                                  .percentilesHistogram(false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "169743a5431e2d25616fa2fb6b24bfb78fe1716d"}, "originalPosition": 126}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMDM1NDU0", "url": "https://github.com/line/armeria/pull/3171#pullrequestreview-540035454", "createdAt": "2020-11-27T14:53:04Z", "commit": {"oid": "169743a5431e2d25616fa2fb6b24bfb78fe1716d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "477417c7fcb38aba7f56b23a9825f585ee1a1986", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/477417c7fcb38aba7f56b23a9825f585ee1a1986", "committedDate": "2020-11-27T14:56:01Z", "message": "Address comments by @minwoox"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7528ce2592e8db96e055cef82615ceef04a65d39", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/7528ce2592e8db96e055cef82615ceef04a65d39", "committedDate": "2020-11-27T15:10:44Z", "message": "Add verb after can"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4819, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}