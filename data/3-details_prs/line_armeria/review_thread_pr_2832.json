{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5MDQ3NTAz", "number": 2832, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODozMDoyNlrOEIRRSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMjoyMDozMlrOEI-28A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTA3MDE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODozMDoyNlrOGoIQYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOTo0NzowOFrOGoK-fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczMTQ5MQ==", "bodyText": "Not sure why it was cause before. \ud83e\udd14", "url": "https://github.com/line/armeria/pull/2832#discussion_r444731491", "createdAt": "2020-06-24T08:30:26Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java", "diffHunk": "@@ -248,16 +248,16 @@ private void runThreadLocalContextCustomizers() {\n     }\n \n     private void failEarly(Throwable cause) {\n-        final RequestLogBuilder logBuilder = logBuilder();\n         final UnprocessedRequestException wrapped = new UnprocessedRequestException(cause);\n-        logBuilder.endRequest(wrapped);\n-        logBuilder.endResponse(wrapped);\n-\n         final HttpRequest req = request();\n         if (req != null) {\n             autoFillSchemeAndAuthority();\n-            req.abort(cause);\n+            req.abort(wrapped);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e82b49bee6c9b132793d5fd5a034a622d2717774"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczNTA0Mg==", "bodyText": "It seems my mistake. \ud83d\ude31", "url": "https://github.com/line/armeria/pull/2832#discussion_r444735042", "createdAt": "2020-06-24T08:36:32Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java", "diffHunk": "@@ -248,16 +248,16 @@ private void runThreadLocalContextCustomizers() {\n     }\n \n     private void failEarly(Throwable cause) {\n-        final RequestLogBuilder logBuilder = logBuilder();\n         final UnprocessedRequestException wrapped = new UnprocessedRequestException(cause);\n-        logBuilder.endRequest(wrapped);\n-        logBuilder.endResponse(wrapped);\n-\n         final HttpRequest req = request();\n         if (req != null) {\n             autoFillSchemeAndAuthority();\n-            req.abort(cause);\n+            req.abort(wrapped);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczMTQ5MQ=="}, "originalCommit": {"oid": "e82b49bee6c9b132793d5fd5a034a622d2717774"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc3NjA2MA==", "bodyText": "I think it didn't do any harm anyways. \ud83d\ude06\nFirst appeared at: https://github.com/line/armeria/pull/2248/files#diff-d437ddb5e0b4572dba776949bacf9becR233", "url": "https://github.com/line/armeria/pull/2832#discussion_r444776060", "createdAt": "2020-06-24T09:47:08Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java", "diffHunk": "@@ -248,16 +248,16 @@ private void runThreadLocalContextCustomizers() {\n     }\n \n     private void failEarly(Throwable cause) {\n-        final RequestLogBuilder logBuilder = logBuilder();\n         final UnprocessedRequestException wrapped = new UnprocessedRequestException(cause);\n-        logBuilder.endRequest(wrapped);\n-        logBuilder.endResponse(wrapped);\n-\n         final HttpRequest req = request();\n         if (req != null) {\n             autoFillSchemeAndAuthority();\n-            req.abort(cause);\n+            req.abort(wrapped);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczMTQ5MQ=="}, "originalCommit": {"oid": "e82b49bee6c9b132793d5fd5a034a622d2717774"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTExODM0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/HttpResponseDecoder.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODo0Mzo1MVrOGoIutQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOTo0ODoyN1rOGoLBnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczOTI1Mw==", "bodyText": "It seems unnecessary because of pre-checked condition. https://github.com/line/armeria/pull/2832/files#diff-833e9abb4a1607339097e0e3aab8b26dR226", "url": "https://github.com/line/armeria/pull/2832#discussion_r444739253", "createdAt": "2020-06-24T08:43:51Z", "author": {"login": "hexoul"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpResponseDecoder.java", "diffHunk": "@@ -199,50 +200,73 @@ public boolean isOpen() {\n          */\n         @Override\n         public boolean tryWrite(HttpObject o) {\n+            boolean wrote = false;\n             switch (state) {\n                 case WAIT_NON_INFORMATIONAL:\n-                    // NB: It's safe to call logBuilder.startResponse() multiple times.\n-                    if (ctx != null) {\n-                        ctx.logBuilder().startResponse();\n-                    }\n-\n-                    assert o instanceof HttpHeaders && !(o instanceof RequestHeaders) : o;\n-\n-                    if (o instanceof ResponseHeaders) {\n-                        final ResponseHeaders headers = (ResponseHeaders) o;\n-                        final HttpStatus status = headers.status();\n-                        if (!status.isInformational()) {\n-                            state = State.WAIT_DATA_OR_TRAILERS;\n-                            if (ctx != null) {\n-                                ctx.logBuilder().responseHeaders(headers);\n-                            }\n-                        }\n-                    }\n+                    wrote = handleWaitNonInformational(o);\n                     break;\n                 case WAIT_DATA_OR_TRAILERS:\n-                    if (o instanceof HttpHeaders) {\n-                        state = State.DONE;\n-                        if (ctx != null) {\n-                            ctx.logBuilder().responseTrailers((HttpHeaders) o);\n-                        }\n-                    } else {\n-                        if (ctx != null) {\n-                            ctx.logBuilder().increaseResponseLength((HttpData) o);\n-                        }\n-                    }\n+                    wrote = handleWaitDateOrTrailers(o);\n                     break;\n                 case DONE:\n                     ReferenceCountUtil.safeRelease(o);\n-                    return false;\n+                    break;\n             }\n-            return delegate.tryWrite(o);\n+\n+            return wrote;\n         }\n \n         @Override\n         public boolean tryWrite(Supplier<? extends HttpObject> o) {\n             return delegate.tryWrite(o);\n         }\n \n+        private boolean handleWaitNonInformational(HttpObject o) {\n+            // NB: It's safe to call logBuilder.startResponse() multiple times.\n+            if (ctx != null) {\n+                ctx.logBuilder().startResponse();\n+            }\n+\n+            assert o instanceof HttpHeaders && !(o instanceof RequestHeaders) : o;\n+\n+            if (o instanceof ResponseHeaders) {\n+                final ResponseHeaders headers = (ResponseHeaders) o;\n+                final HttpStatus status = headers.status();\n+                if (!status.isInformational()) {\n+                    state = State.WAIT_DATA_OR_TRAILERS;\n+                    if (ctx != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e82b49bee6c9b132793d5fd5a034a622d2717774"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2MjM4Ng==", "bodyText": "I don't think so because we didn't bail out when ctx == null.", "url": "https://github.com/line/armeria/pull/2832#discussion_r444762386", "createdAt": "2020-06-24T09:22:59Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpResponseDecoder.java", "diffHunk": "@@ -199,50 +200,73 @@ public boolean isOpen() {\n          */\n         @Override\n         public boolean tryWrite(HttpObject o) {\n+            boolean wrote = false;\n             switch (state) {\n                 case WAIT_NON_INFORMATIONAL:\n-                    // NB: It's safe to call logBuilder.startResponse() multiple times.\n-                    if (ctx != null) {\n-                        ctx.logBuilder().startResponse();\n-                    }\n-\n-                    assert o instanceof HttpHeaders && !(o instanceof RequestHeaders) : o;\n-\n-                    if (o instanceof ResponseHeaders) {\n-                        final ResponseHeaders headers = (ResponseHeaders) o;\n-                        final HttpStatus status = headers.status();\n-                        if (!status.isInformational()) {\n-                            state = State.WAIT_DATA_OR_TRAILERS;\n-                            if (ctx != null) {\n-                                ctx.logBuilder().responseHeaders(headers);\n-                            }\n-                        }\n-                    }\n+                    wrote = handleWaitNonInformational(o);\n                     break;\n                 case WAIT_DATA_OR_TRAILERS:\n-                    if (o instanceof HttpHeaders) {\n-                        state = State.DONE;\n-                        if (ctx != null) {\n-                            ctx.logBuilder().responseTrailers((HttpHeaders) o);\n-                        }\n-                    } else {\n-                        if (ctx != null) {\n-                            ctx.logBuilder().increaseResponseLength((HttpData) o);\n-                        }\n-                    }\n+                    wrote = handleWaitDateOrTrailers(o);\n                     break;\n                 case DONE:\n                     ReferenceCountUtil.safeRelease(o);\n-                    return false;\n+                    break;\n             }\n-            return delegate.tryWrite(o);\n+\n+            return wrote;\n         }\n \n         @Override\n         public boolean tryWrite(Supplier<? extends HttpObject> o) {\n             return delegate.tryWrite(o);\n         }\n \n+        private boolean handleWaitNonInformational(HttpObject o) {\n+            // NB: It's safe to call logBuilder.startResponse() multiple times.\n+            if (ctx != null) {\n+                ctx.logBuilder().startResponse();\n+            }\n+\n+            assert o instanceof HttpHeaders && !(o instanceof RequestHeaders) : o;\n+\n+            if (o instanceof ResponseHeaders) {\n+                final ResponseHeaders headers = (ResponseHeaders) o;\n+                final HttpStatus status = headers.status();\n+                if (!status.isInformational()) {\n+                    state = State.WAIT_DATA_OR_TRAILERS;\n+                    if (ctx != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczOTI1Mw=="}, "originalCommit": {"oid": "e82b49bee6c9b132793d5fd5a034a622d2717774"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2OTAxNQ==", "bodyText": "Oops sorry I misread. Please ignore this.", "url": "https://github.com/line/armeria/pull/2832#discussion_r444769015", "createdAt": "2020-06-24T09:34:33Z", "author": {"login": "hexoul"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpResponseDecoder.java", "diffHunk": "@@ -199,50 +200,73 @@ public boolean isOpen() {\n          */\n         @Override\n         public boolean tryWrite(HttpObject o) {\n+            boolean wrote = false;\n             switch (state) {\n                 case WAIT_NON_INFORMATIONAL:\n-                    // NB: It's safe to call logBuilder.startResponse() multiple times.\n-                    if (ctx != null) {\n-                        ctx.logBuilder().startResponse();\n-                    }\n-\n-                    assert o instanceof HttpHeaders && !(o instanceof RequestHeaders) : o;\n-\n-                    if (o instanceof ResponseHeaders) {\n-                        final ResponseHeaders headers = (ResponseHeaders) o;\n-                        final HttpStatus status = headers.status();\n-                        if (!status.isInformational()) {\n-                            state = State.WAIT_DATA_OR_TRAILERS;\n-                            if (ctx != null) {\n-                                ctx.logBuilder().responseHeaders(headers);\n-                            }\n-                        }\n-                    }\n+                    wrote = handleWaitNonInformational(o);\n                     break;\n                 case WAIT_DATA_OR_TRAILERS:\n-                    if (o instanceof HttpHeaders) {\n-                        state = State.DONE;\n-                        if (ctx != null) {\n-                            ctx.logBuilder().responseTrailers((HttpHeaders) o);\n-                        }\n-                    } else {\n-                        if (ctx != null) {\n-                            ctx.logBuilder().increaseResponseLength((HttpData) o);\n-                        }\n-                    }\n+                    wrote = handleWaitDateOrTrailers(o);\n                     break;\n                 case DONE:\n                     ReferenceCountUtil.safeRelease(o);\n-                    return false;\n+                    break;\n             }\n-            return delegate.tryWrite(o);\n+\n+            return wrote;\n         }\n \n         @Override\n         public boolean tryWrite(Supplier<? extends HttpObject> o) {\n             return delegate.tryWrite(o);\n         }\n \n+        private boolean handleWaitNonInformational(HttpObject o) {\n+            // NB: It's safe to call logBuilder.startResponse() multiple times.\n+            if (ctx != null) {\n+                ctx.logBuilder().startResponse();\n+            }\n+\n+            assert o instanceof HttpHeaders && !(o instanceof RequestHeaders) : o;\n+\n+            if (o instanceof ResponseHeaders) {\n+                final ResponseHeaders headers = (ResponseHeaders) o;\n+                final HttpStatus status = headers.status();\n+                if (!status.isInformational()) {\n+                    state = State.WAIT_DATA_OR_TRAILERS;\n+                    if (ctx != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczOTI1Mw=="}, "originalCommit": {"oid": "e82b49bee6c9b132793d5fd5a034a622d2717774"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc3Njg2Mw==", "bodyText": "No worries. I appreciate that you review our work! \ud83d\ude47", "url": "https://github.com/line/armeria/pull/2832#discussion_r444776863", "createdAt": "2020-06-24T09:48:27Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpResponseDecoder.java", "diffHunk": "@@ -199,50 +200,73 @@ public boolean isOpen() {\n          */\n         @Override\n         public boolean tryWrite(HttpObject o) {\n+            boolean wrote = false;\n             switch (state) {\n                 case WAIT_NON_INFORMATIONAL:\n-                    // NB: It's safe to call logBuilder.startResponse() multiple times.\n-                    if (ctx != null) {\n-                        ctx.logBuilder().startResponse();\n-                    }\n-\n-                    assert o instanceof HttpHeaders && !(o instanceof RequestHeaders) : o;\n-\n-                    if (o instanceof ResponseHeaders) {\n-                        final ResponseHeaders headers = (ResponseHeaders) o;\n-                        final HttpStatus status = headers.status();\n-                        if (!status.isInformational()) {\n-                            state = State.WAIT_DATA_OR_TRAILERS;\n-                            if (ctx != null) {\n-                                ctx.logBuilder().responseHeaders(headers);\n-                            }\n-                        }\n-                    }\n+                    wrote = handleWaitNonInformational(o);\n                     break;\n                 case WAIT_DATA_OR_TRAILERS:\n-                    if (o instanceof HttpHeaders) {\n-                        state = State.DONE;\n-                        if (ctx != null) {\n-                            ctx.logBuilder().responseTrailers((HttpHeaders) o);\n-                        }\n-                    } else {\n-                        if (ctx != null) {\n-                            ctx.logBuilder().increaseResponseLength((HttpData) o);\n-                        }\n-                    }\n+                    wrote = handleWaitDateOrTrailers(o);\n                     break;\n                 case DONE:\n                     ReferenceCountUtil.safeRelease(o);\n-                    return false;\n+                    break;\n             }\n-            return delegate.tryWrite(o);\n+\n+            return wrote;\n         }\n \n         @Override\n         public boolean tryWrite(Supplier<? extends HttpObject> o) {\n             return delegate.tryWrite(o);\n         }\n \n+        private boolean handleWaitNonInformational(HttpObject o) {\n+            // NB: It's safe to call logBuilder.startResponse() multiple times.\n+            if (ctx != null) {\n+                ctx.logBuilder().startResponse();\n+            }\n+\n+            assert o instanceof HttpHeaders && !(o instanceof RequestHeaders) : o;\n+\n+            if (o instanceof ResponseHeaders) {\n+                final ResponseHeaders headers = (ResponseHeaders) o;\n+                final HttpStatus status = headers.status();\n+                if (!status.isInformational()) {\n+                    state = State.WAIT_DATA_OR_TRAILERS;\n+                    if (ctx != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczOTI1Mw=="}, "originalCommit": {"oid": "e82b49bee6c9b132793d5fd5a034a622d2717774"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTg5MDYzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjozODo0NlrOGoQRHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMTowMzo1N1rOGooBtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2Mjc0OQ==", "bodyText": "nit: can remove this method and just call hasInterestedFlags directly?", "url": "https://github.com/line/armeria/pull/2832#discussion_r444862749", "createdAt": "2020-06-24T12:38:46Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -187,26 +188,60 @@ private static boolean isComplete(int flags) {\n \n     @Override\n     public boolean isRequestComplete() {\n-        return isAvailable(flags, RequestLogProperty.FLAGS_REQUEST_COMPLETE);\n+        return hasInterestedFlags(flags, RequestLogProperty.FLAGS_REQUEST_COMPLETE);\n     }\n \n     @Override\n     public boolean isAvailable(RequestLogProperty property) {\n-        return isAvailable(flags, property.flag());\n+        requireNonNull(property, \"property\");\n+        return hasInterestedFlags(flags, property.flag());\n+    }\n+\n+    @Override\n+    public boolean isAvailable(RequestLogProperty... properties) {\n+        requireNonNull(properties, \"properties\");\n+        checkArgument(properties.length != 0, \"properties is empty.\");\n+        return isAvailable(interestedFlags(properties));\n+    }\n+\n+    @Override\n+    public boolean isAvailable(Iterable<RequestLogProperty> properties) {\n+        requireNonNull(properties, \"properties\");\n+        final int flags = interestedFlags(properties);\n+        checkArgument(flags != 0, \"properties is empty.\");\n+        return isAvailable(flags);\n     }\n \n     private boolean isAvailable(int interestedFlags) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf7d0bab36d5c10eb9e76836ce2388bfd5977dce"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI0OTczMw==", "bodyText": "I guess it's better keeping it for readability - isAvailable(interestedFlags) vs. hasInterestedFlags(this.flags, interestedFlags).", "url": "https://github.com/line/armeria/pull/2832#discussion_r445249733", "createdAt": "2020-06-25T00:54:42Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -187,26 +188,60 @@ private static boolean isComplete(int flags) {\n \n     @Override\n     public boolean isRequestComplete() {\n-        return isAvailable(flags, RequestLogProperty.FLAGS_REQUEST_COMPLETE);\n+        return hasInterestedFlags(flags, RequestLogProperty.FLAGS_REQUEST_COMPLETE);\n     }\n \n     @Override\n     public boolean isAvailable(RequestLogProperty property) {\n-        return isAvailable(flags, property.flag());\n+        requireNonNull(property, \"property\");\n+        return hasInterestedFlags(flags, property.flag());\n+    }\n+\n+    @Override\n+    public boolean isAvailable(RequestLogProperty... properties) {\n+        requireNonNull(properties, \"properties\");\n+        checkArgument(properties.length != 0, \"properties is empty.\");\n+        return isAvailable(interestedFlags(properties));\n+    }\n+\n+    @Override\n+    public boolean isAvailable(Iterable<RequestLogProperty> properties) {\n+        requireNonNull(properties, \"properties\");\n+        final int flags = interestedFlags(properties);\n+        checkArgument(flags != 0, \"properties is empty.\");\n+        return isAvailable(flags);\n     }\n \n     private boolean isAvailable(int interestedFlags) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2Mjc0OQ=="}, "originalCommit": {"oid": "cf7d0bab36d5c10eb9e76836ce2388bfd5977dce"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MjAyMQ==", "bodyText": "SGTM. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2832#discussion_r445252021", "createdAt": "2020-06-25T01:03:57Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -187,26 +188,60 @@ private static boolean isComplete(int flags) {\n \n     @Override\n     public boolean isRequestComplete() {\n-        return isAvailable(flags, RequestLogProperty.FLAGS_REQUEST_COMPLETE);\n+        return hasInterestedFlags(flags, RequestLogProperty.FLAGS_REQUEST_COMPLETE);\n     }\n \n     @Override\n     public boolean isAvailable(RequestLogProperty property) {\n-        return isAvailable(flags, property.flag());\n+        requireNonNull(property, \"property\");\n+        return hasInterestedFlags(flags, property.flag());\n+    }\n+\n+    @Override\n+    public boolean isAvailable(RequestLogProperty... properties) {\n+        requireNonNull(properties, \"properties\");\n+        checkArgument(properties.length != 0, \"properties is empty.\");\n+        return isAvailable(interestedFlags(properties));\n+    }\n+\n+    @Override\n+    public boolean isAvailable(Iterable<RequestLogProperty> properties) {\n+        requireNonNull(properties, \"properties\");\n+        final int flags = interestedFlags(properties);\n+        checkArgument(flags != 0, \"properties is empty.\");\n+        return isAvailable(flags);\n     }\n \n     private boolean isAvailable(int interestedFlags) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2Mjc0OQ=="}, "originalCommit": {"oid": "cf7d0bab36d5c10eb9e76836ce2388bfd5977dce"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTkyNDkwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjo0ODo1NlrOGoQmtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjo0ODo1NlrOGoQmtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2ODI3Ng==", "bodyText": "Thanks, I needed it.", "url": "https://github.com/line/armeria/pull/2832#discussion_r444868276", "createdAt": "2020-06-24T12:48:56Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -1223,15 +1276,20 @@ public String responseContentPreview() {\n \n     @Override\n     public void responseContentPreview(@Nullable String responseContentPreview) {\n+        responseContentPreview(responseContentPreview, true);\n+    }\n+\n+    private void responseContentPreview(@Nullable String responseContentPreview, boolean warnIfSetAlready) {\n         if (isAvailable(RequestLogProperty.RESPONSE_CONTENT_PREVIEW)) {\n-            if (!warnedSettingContentPreviewTwice && responseContentPreview != null) {\n+            if (warnIfSetAlready && responseContentPreview != null && !warnedSettingContentPreviewTwice) {\n                 warnedSettingContentPreviewTwice = true;\n-                logger.warn(\"You tried to set the content preview twice: {} \" +\n+                logger.warn(\"You tried to set the response content preview twice: {} \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf7d0bab36d5c10eb9e76836ce2388bfd5977dce"}, "originalPosition": 320}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODUzOTM2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMjoyMDozMlrOGpRqJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMjoyMDozMlrOGpRqJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzNDExNw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/line/armeria/pull/2832#discussion_r445934117", "createdAt": "2020-06-26T02:20:32Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java", "diffHunk": "@@ -982,8 +1040,8 @@ private void endRequest0(@Nullable Throwable requestCause, long requestEndTimeNa\n \n         // Set names if request content is not deferred or it was deferred but has been set\n         // before the request completion.\n-        if (!isDeferRequestContentSet() ||\n-            (isDeferRequestContentSet() && isAvailable(RequestLogProperty.REQUEST_CONTENT))) {\n+        if (!hasInterestedFlags(deferredFlags, RequestLogProperty.REQUEST_CONTENT) ||\n+            isAvailable(RequestLogProperty.REQUEST_CONTENT)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dabe9cb0e55b90dbe940cda93e09ada674817bc5"}, "originalPosition": 279}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2388, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}