{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NDgwMDkw", "number": 2892, "title": "Make `HttpData` closeable and support more `ByteBuf` conversions", "bodyText": "Motivation:\n\nIt is currently inconvenient to deal with the life cycle of pooled\nHttData. A user has to manually release the underlying ByteBuf\nafter downcasting to ByteBufHolder.\nThe ways to convert an HttpData to a ByteBuf is quite limited.\nA user has to write various boilerplate code to compensate this.\nA user can modify the {reader,writer}Index of the returned\nByteBuf, which will cause many unexpected behaviors.\n\nEven Netty's default HTTP/2 flow controller modifies it, so we need\nsome protection mechanism.\n\n\n\nModifications:\n\nHttpData now extends SafeCloseable.\nPooledHttpData has been removed.\nByteBufHttpData does not implement ByteHolder anymore. Instead,\nHttpData provides well defined conversion methods named byteBuf()\nthat cover most use cases.\nAdded ByteBufAccessMode to support various conversion mode.\nRenamed DefaultHttpData to ByteArrayHttpData.\nRemoved ByteRangeHttpData in favor of ByteBufHttpData.\n\nIt was only used in test cases anyway.\n\n\nMoved PooledObjects to the unsafe package and made it public.\n\nMoved the documentation about pooled HttpData there.\n\n\nAdded @UnstableApi to all classes and methods related with pooled\nobjects.\nFixed various resource leaks found during testing this changeset.\n\nBuffer leaks in:\n\nDefaultStreamMessageDuplicator\nRetryingClient\nCircuitBreakerClient\nVarious test cases\n\n\nClientFactory leaks in various test cases\n\n\nCalled PooledObjects.touch() in various places for easier analysis of\nbuffer leaks.\n\nResult:\n\nLess confusing contract of HttpData-to-ByteBuf conversion\nEasier life cycle management of pooled HttpData.\nFixes #1936", "createdAt": "2020-07-10T14:42:48Z", "url": "https://github.com/line/armeria/pull/2892", "merged": true, "mergeCommit": {"oid": "744098d4ed83a65c6668fd863afebae14f5e2a1c"}, "closed": true, "closedAt": "2020-07-17T10:44:37Z", "author": {"login": "trustin"}, "timelineItems": {"totalCount": 41, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABczktAvAH2gAyNDQ3NDgwMDkwOjg0NWY3OWExMzNiMTJiM2U4MGJlZWRiNmY5MzY1YzAxNmNhYWNkZDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1xNr_AH2gAyNDQ3NDgwMDkwOmU5MGFmMmI5MGE5NDgwOTU3NDNlY2I3OTFkYTFjODBmNjFkM2VkOTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "845f79a133b12b3e80beedb6f9365c016caacdd2", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/845f79a133b12b3e80beedb6f9365c016caacdd2", "committedDate": "2020-07-10T14:41:58Z", "message": "Make `HttpData` closeable and support more `ByteBuf` conversions\n\nMotivation:\n\n- It is currently inconvenient to deal with the life cycle of pooled\n  `HttData`. A user has to manually release the underlying `ByteBuf`\n  after downcasting to `ByteBufHolder`.\n- The ways to convert an `HttpData` to a `ByteBuf` is quite limited.\n  A user has to write various boilerplate code to compensate this.\n- A user can modify the `{reader,writer}Index` of the returned\n  `ByteBuf`, which will cause many unexpected behaviors.\n  - Even Netty's default HTTP/2 flow controller modifies it, so we need\n    some protection mechanism.\n\nModifications:\n\n- `HttpData` now extends `SafeCloseable`.\n- `ByteBufHttpData` does not implement `ByteHolder` anymore. Instead,\n  `HttpData` provides well defined conversion methods named `byteBuf()`\n  that cover most use cases.\n- Added `ByteBufAccessMode` to support various conversion mode.\n- Renamed `DefaultHttpData` to `ByteArrayHttpData`.\n- Removed `ByteRangeHttpData` in favor of `ByteBufHttpData`.\n  - It was only used in test cases anyway.\n- Moved `PooledObjects` to the `unsafe` package and made it public.\n  - Moved the documentation about pooled `HttpData` there.\n- Added `@UnstableApi` to all classes and methods related with pooled\n  objects.\n\nResult:\n\n- Less confusing contract of `HttpData`-to-`ByteBuf` conversion\n- Easier life cycle management of pooled `HttpData`.\n- Fixes #1936"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29214210cade358b3a119ff80f295c339c53cfdf", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/29214210cade358b3a119ff80f295c339c53cfdf", "committedDate": "2020-07-10T14:53:11Z", "message": "Mask more unstable API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8abc447e9c0744abdc1c1dfc226faff88a9f163a", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/8abc447e9c0744abdc1c1dfc226faff88a9f163a", "committedDate": "2020-07-10T15:00:46Z", "message": "Merge branch 'master' into closeable_http_data"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3MDAwMDIy", "url": "https://github.com/line/armeria/pull/2892#pullrequestreview-447000022", "createdAt": "2020-07-13T06:02:08Z", "commit": {"oid": "8abc447e9c0744abdc1c1dfc226faff88a9f163a"}, "state": "APPROVED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNjowMjowOFrOGwceGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNTo0NzoyOVrOGxFDow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ1MTI5MQ==", "bodyText": "nit: 2020 \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2892#discussion_r453451291", "createdAt": "2020-07-13T06:02:08Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/ByteArrayHttpData.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 2016 LINE Corporation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8abc447e9c0744abdc1c1dfc226faff88a9f163a"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ1NDA3MQ==", "bodyText": "Better to use HttpData?", "url": "https://github.com/line/armeria/pull/2892#discussion_r453454071", "createdAt": "2020-07-13T06:12:04Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/ByteBufAccessMode.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import com.linecorp.armeria.common.util.UnstableApi;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.Channel;\n+\n+/**\n+ * Specifies the way a {@link ByteBuf} is retrieved from an {@link HttpData}.\n+ */\n+@UnstableApi\n+public enum ByteBufAccessMode {\n+    /**\n+     * Gets the duplicate (or slice) of the underlying {@link ByteBuf}. This mode is useful when you access\n+     * the {@link ByteBuf} within the life cycle of the {@link HttpData}:\n+     * <pre>{@code\n+     * try (HttpContent content = ...) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8abc447e9c0744abdc1c1dfc226faff88a9f163a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEwNDk5Mg==", "bodyText": "nit: rnn?", "url": "https://github.com/line/armeria/pull/2892#discussion_r454104992", "createdAt": "2020-07-14T05:10:51Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/ByteBufHttpData.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2016 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufInputStream;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import it.unimi.dsi.fastutil.io.FastByteArrayInputStream;\n+\n+/**\n+ * A {@link ByteBuf}-based {@link HttpData}.\n+ */\n+final class ByteBufHttpData implements HttpData {\n+\n+    private static final int FLAG_POOLED = 1;\n+    private static final int FLAG_END_OF_STREAM = 2;\n+    private static final int FLAG_CLOSED = 4;\n+\n+    private final ByteBuf buf;\n+    @Nullable\n+    private byte[] array;\n+    private int flags;\n+\n+    ByteBufHttpData(ByteBuf buf, boolean pooled) {\n+        this(buf, pooled ? FLAG_POOLED : 0, null);\n+    }\n+\n+    private ByteBufHttpData(ByteBuf buf, int flags, @Nullable byte[] array) {\n+        this.buf = buf;\n+        this.array = array;\n+        this.flags = flags;\n+    }\n+\n+    @Override\n+    public byte[] array() {\n+        if (array != null) {\n+            return array;\n+        }\n+\n+        final int length = buf.readableBytes();\n+        if (isPooled()) {\n+            buf.touch();\n+        } else if (buf.hasArray() && buf.arrayOffset() == 0 && buf.readerIndex() == 0) {\n+            final byte[] bufArray = buf.array();\n+            if (bufArray.length == length) {\n+                return array = bufArray;\n+            }\n+        }\n+\n+        return array = ByteBufUtil.getBytes(buf, buf.readerIndex(), length);\n+    }\n+\n+    @Override\n+    public int length() {\n+        return buf.readableBytes();\n+    }\n+\n+    @Override\n+    public String toString(Charset charset) {\n+        requireNonNull(charset, \"charset\");\n+        if (array != null) {\n+            return new String(array, charset);\n+        } else {\n+            return buf.toString(charset);\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        final MoreObjects.ToStringHelper helper =\n+                MoreObjects.toStringHelper(this)\n+                           .omitNullValues()\n+                           .addValue(buf.readableBytes() + \"B\");\n+\n+        if (isEndOfStream()) {\n+            helper.addValue(\"endOfStream\");\n+        }\n+        if (isPooled()) {\n+            helper.addValue(\"pooled\");\n+        }\n+        if ((flags & FLAG_CLOSED) != 0) {\n+            helper.addValue(\"closed\");\n+        }\n+\n+        return helper.add(\"byteBuf\", buf)\n+                     .toString();\n+    }\n+\n+    @Override\n+    public InputStream toInputStream() {\n+        if (array != null) {\n+            return new FastByteArrayInputStream(array);\n+        } else {\n+            return new ByteBufInputStream(buf.duplicate(), false);\n+        }\n+    }\n+\n+    @Override\n+    public boolean isEndOfStream() {\n+        return (flags & FLAG_END_OF_STREAM) != 0;\n+    }\n+\n+    @Override\n+    public ByteBufHttpData withEndOfStream(boolean endOfStream) {\n+        if (isEndOfStream() == endOfStream) {\n+            return this;\n+        }\n+\n+        int newFlags = flags & ~FLAG_END_OF_STREAM;\n+        if (endOfStream) {\n+            newFlags |= FLAG_END_OF_STREAM;\n+        }\n+\n+        return new ByteBufHttpData(buf, newFlags, array);\n+    }\n+\n+    @Override\n+    public boolean isPooled() {\n+        return (flags & FLAG_POOLED) != 0;\n+    }\n+\n+    @Override\n+    public ByteBuf byteBuf(ByteBufAccessMode mode) {\n+        switch (mode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8abc447e9c0744abdc1c1dfc226faff88a9f163a"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEwNzczMg==", "bodyText": "nit: rnn for mode?", "url": "https://github.com/line/armeria/pull/2892#discussion_r454107732", "createdAt": "2020-07-14T05:20:15Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/ByteArrayHttpData.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 2016 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.util.Arrays;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.buffer.Unpooled;\n+import io.netty.util.internal.EmptyArrays;\n+import it.unimi.dsi.fastutil.io.FastByteArrayInputStream;\n+\n+/**\n+ * A {@code byte[]}-based {@link HttpData}.\n+ */\n+final class ByteArrayHttpData implements HttpData {\n+\n+    static final ByteArrayHttpData EMPTY = new ByteArrayHttpData(EmptyArrays.EMPTY_BYTES, false);\n+    static final ByteArrayHttpData EMPTY_EOS = new ByteArrayHttpData(EmptyArrays.EMPTY_BYTES, true);\n+\n+    private final byte[] array;\n+    private final boolean endOfStream;\n+\n+    ByteArrayHttpData(byte[] array) {\n+        this(array, false);\n+    }\n+\n+    private ByteArrayHttpData(byte[] array, boolean endOfStream) {\n+        this.array = array;\n+        this.endOfStream = endOfStream;\n+    }\n+\n+    @Override\n+    public byte[] array() {\n+        return array;\n+    }\n+\n+    @Override\n+    public int length() {\n+        return array.length;\n+    }\n+\n+    @Override\n+    public String toString(Charset charset) {\n+        requireNonNull(charset, \"charset\");\n+        return new String(array, charset);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        final MoreObjects.ToStringHelper helper =\n+                MoreObjects.toStringHelper(this)\n+                           .omitNullValues()\n+                           .addValue(length() + \"B\");\n+\n+        if (isEndOfStream()) {\n+            helper.addValue(\"endOfStream\");\n+        }\n+        return helper.add(\"array\", array)\n+                     .toString();\n+    }\n+\n+    @Override\n+    public InputStream toInputStream() {\n+        return new FastByteArrayInputStream(array);\n+    }\n+\n+    @Override\n+    public boolean isEndOfStream() {\n+        return endOfStream;\n+    }\n+\n+    @Override\n+    public ByteArrayHttpData withEndOfStream(boolean endOfStream) {\n+        if (isEmpty()) {\n+            return endOfStream ? EMPTY_EOS : EMPTY;\n+        }\n+\n+        if (isEndOfStream() == endOfStream) {\n+            return this;\n+        }\n+        return new ByteArrayHttpData(array, endOfStream);\n+    }\n+\n+    @Override\n+    public boolean isPooled() {\n+        return false;\n+    }\n+\n+    @Override\n+    public ByteBuf byteBuf(ByteBufAccessMode mode) {\n+        if (isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8abc447e9c0744abdc1c1dfc226faff88a9f163a"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEwNzc4Ng==", "bodyText": "ditto", "url": "https://github.com/line/armeria/pull/2892#discussion_r454107786", "createdAt": "2020-07-14T05:20:26Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/ByteArrayHttpData.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 2016 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.util.Arrays;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.buffer.Unpooled;\n+import io.netty.util.internal.EmptyArrays;\n+import it.unimi.dsi.fastutil.io.FastByteArrayInputStream;\n+\n+/**\n+ * A {@code byte[]}-based {@link HttpData}.\n+ */\n+final class ByteArrayHttpData implements HttpData {\n+\n+    static final ByteArrayHttpData EMPTY = new ByteArrayHttpData(EmptyArrays.EMPTY_BYTES, false);\n+    static final ByteArrayHttpData EMPTY_EOS = new ByteArrayHttpData(EmptyArrays.EMPTY_BYTES, true);\n+\n+    private final byte[] array;\n+    private final boolean endOfStream;\n+\n+    ByteArrayHttpData(byte[] array) {\n+        this(array, false);\n+    }\n+\n+    private ByteArrayHttpData(byte[] array, boolean endOfStream) {\n+        this.array = array;\n+        this.endOfStream = endOfStream;\n+    }\n+\n+    @Override\n+    public byte[] array() {\n+        return array;\n+    }\n+\n+    @Override\n+    public int length() {\n+        return array.length;\n+    }\n+\n+    @Override\n+    public String toString(Charset charset) {\n+        requireNonNull(charset, \"charset\");\n+        return new String(array, charset);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        final MoreObjects.ToStringHelper helper =\n+                MoreObjects.toStringHelper(this)\n+                           .omitNullValues()\n+                           .addValue(length() + \"B\");\n+\n+        if (isEndOfStream()) {\n+            helper.addValue(\"endOfStream\");\n+        }\n+        return helper.add(\"array\", array)\n+                     .toString();\n+    }\n+\n+    @Override\n+    public InputStream toInputStream() {\n+        return new FastByteArrayInputStream(array);\n+    }\n+\n+    @Override\n+    public boolean isEndOfStream() {\n+        return endOfStream;\n+    }\n+\n+    @Override\n+    public ByteArrayHttpData withEndOfStream(boolean endOfStream) {\n+        if (isEmpty()) {\n+            return endOfStream ? EMPTY_EOS : EMPTY;\n+        }\n+\n+        if (isEndOfStream() == endOfStream) {\n+            return this;\n+        }\n+        return new ByteArrayHttpData(array, endOfStream);\n+    }\n+\n+    @Override\n+    public boolean isPooled() {\n+        return false;\n+    }\n+\n+    @Override\n+    public ByteBuf byteBuf(ByteBufAccessMode mode) {\n+        if (isEmpty()) {\n+            return Unpooled.EMPTY_BUFFER;\n+        }\n+\n+        if (mode != ByteBufAccessMode.DIRECT) {\n+            return Unpooled.wrappedBuffer(array);\n+        } else {\n+            final ByteBuf copy = newDirectByteBuf();\n+            copy.writeBytes(array);\n+            return copy;\n+        }\n+    }\n+\n+    @Override\n+    public ByteBuf byteBuf(int offset, int length, ByteBufAccessMode mode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8abc447e9c0744abdc1c1dfc226faff88a9f163a"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEwNzkwNA==", "bodyText": "ditto", "url": "https://github.com/line/armeria/pull/2892#discussion_r454107904", "createdAt": "2020-07-14T05:20:46Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/ByteBufHttpData.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2016 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufInputStream;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import it.unimi.dsi.fastutil.io.FastByteArrayInputStream;\n+\n+/**\n+ * A {@link ByteBuf}-based {@link HttpData}.\n+ */\n+final class ByteBufHttpData implements HttpData {\n+\n+    private static final int FLAG_POOLED = 1;\n+    private static final int FLAG_END_OF_STREAM = 2;\n+    private static final int FLAG_CLOSED = 4;\n+\n+    private final ByteBuf buf;\n+    @Nullable\n+    private byte[] array;\n+    private int flags;\n+\n+    ByteBufHttpData(ByteBuf buf, boolean pooled) {\n+        this(buf, pooled ? FLAG_POOLED : 0, null);\n+    }\n+\n+    private ByteBufHttpData(ByteBuf buf, int flags, @Nullable byte[] array) {\n+        this.buf = buf;\n+        this.array = array;\n+        this.flags = flags;\n+    }\n+\n+    @Override\n+    public byte[] array() {\n+        if (array != null) {\n+            return array;\n+        }\n+\n+        final int length = buf.readableBytes();\n+        if (isPooled()) {\n+            buf.touch();\n+        } else if (buf.hasArray() && buf.arrayOffset() == 0 && buf.readerIndex() == 0) {\n+            final byte[] bufArray = buf.array();\n+            if (bufArray.length == length) {\n+                return array = bufArray;\n+            }\n+        }\n+\n+        return array = ByteBufUtil.getBytes(buf, buf.readerIndex(), length);\n+    }\n+\n+    @Override\n+    public int length() {\n+        return buf.readableBytes();\n+    }\n+\n+    @Override\n+    public String toString(Charset charset) {\n+        requireNonNull(charset, \"charset\");\n+        if (array != null) {\n+            return new String(array, charset);\n+        } else {\n+            return buf.toString(charset);\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        final MoreObjects.ToStringHelper helper =\n+                MoreObjects.toStringHelper(this)\n+                           .omitNullValues()\n+                           .addValue(buf.readableBytes() + \"B\");\n+\n+        if (isEndOfStream()) {\n+            helper.addValue(\"endOfStream\");\n+        }\n+        if (isPooled()) {\n+            helper.addValue(\"pooled\");\n+        }\n+        if ((flags & FLAG_CLOSED) != 0) {\n+            helper.addValue(\"closed\");\n+        }\n+\n+        return helper.add(\"byteBuf\", buf)\n+                     .toString();\n+    }\n+\n+    @Override\n+    public InputStream toInputStream() {\n+        if (array != null) {\n+            return new FastByteArrayInputStream(array);\n+        } else {\n+            return new ByteBufInputStream(buf.duplicate(), false);\n+        }\n+    }\n+\n+    @Override\n+    public boolean isEndOfStream() {\n+        return (flags & FLAG_END_OF_STREAM) != 0;\n+    }\n+\n+    @Override\n+    public ByteBufHttpData withEndOfStream(boolean endOfStream) {\n+        if (isEndOfStream() == endOfStream) {\n+            return this;\n+        }\n+\n+        int newFlags = flags & ~FLAG_END_OF_STREAM;\n+        if (endOfStream) {\n+            newFlags |= FLAG_END_OF_STREAM;\n+        }\n+\n+        return new ByteBufHttpData(buf, newFlags, array);\n+    }\n+\n+    @Override\n+    public boolean isPooled() {\n+        return (flags & FLAG_POOLED) != 0;\n+    }\n+\n+    @Override\n+    public ByteBuf byteBuf(ByteBufAccessMode mode) {\n+        switch (mode) {\n+            case DUPLICATE:\n+                return buf.duplicate();\n+            case RETAINED_DUPLICATE:\n+                return buf.retainedDuplicate();\n+            case DIRECT:\n+                if (buf.isDirect()) {\n+                    return buf.retainedDuplicate();\n+                }\n+\n+                final ByteBuf copy = newDirectByteBuf();\n+                copy.writeBytes(buf, buf.readerIndex(), buf.readableBytes());\n+                return copy;\n+        }\n+\n+        throw new Error(); // Never reaches here.\n+    }\n+\n+    @Override\n+    public ByteBuf byteBuf(int offset, int length, ByteBufAccessMode mode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8abc447e9c0744abdc1c1dfc226faff88a9f163a"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDExNDgwNg==", "bodyText": "Could just otherwise it's no-op. ?", "url": "https://github.com/line/armeria/pull/2892#discussion_r454114806", "createdAt": "2020-07-14T05:43:12Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/unsafe/PooledObjects.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.unsafe;\n+\n+import java.util.concurrent.Executor;\n+\n+import org.reactivestreams.Subscriber;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.UnstableApi;\n+import com.linecorp.armeria.server.file.HttpFile;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+\n+/**\n+ * Utility class that provides ways to create a pooled {@link HttpData} and manage its life cycle.\n+ *\n+ * <p><b>Warning</b>: Using a pooled {@link HttpData} is very advanced and can open up much more complicated\n+ * management of a reference counted {@link ByteBuf}. You should only ever do this if you are very comfortable\n+ * with Netty. It is recommended to also read through\n+ * <a href=\"https://netty.io/wiki/reference-counted-objects.html\">Reference counted objects</a>\n+ * for more information on pooled objects.</p>\n+ *\n+ * <h3>What is a pooled {@link HttpData}?</h3>\n+ *\n+ * <p>A pooled {@link HttpData} is a special variant of {@link HttpData} whose {@link HttpData#isPooled()}\n+ * returns {@code true}. It's usually created via {@link HttpData#wrap(ByteBuf)} by wrapping an existing\n+ * {@link ByteBuf}. It can appear when you consume data using the operations such as:\n+ * <ul>\n+ *   <li>{@link StreamMessage#subscribe(Subscriber, SubscriptionOption...)} with\n+ *       {@link SubscriptionOption#WITH_POOLED_OBJECTS}</li>\n+ *   <li>{@link HttpRequest#aggregateWithPooledObjects(ByteBufAllocator)}</li>\n+ *   <li>{@link HttpResponse#aggregateWithPooledObjects(ByteBufAllocator)}</li>\n+ *   <li>{@link HttpFile#aggregateWithPooledObjects(Executor, ByteBufAllocator)}</li>\n+ * </ul></p>\n+ *\n+ * <p>To put it another way, you'll <b>never</b> see a pooled {@link HttpData} if you did not use such\n+ * operations. You can ignore the rest of this section if that's the case.</p>\n+ *\n+ * <p>Any time you receive a pooled {@link HttpData}, it will have an underlying {@link ByteBuf} that must be\n+ * released - failure to release the {@link ByteBuf} will result in a memory leak and poor performance.\n+ * You must make sure to do this by calling {@link HttpData#close()}, usually in a try-with-resources structure\n+ * to avoid side effects, e.g.\n+ * <pre>{@code\n+ * HttpResponse res = client.get(\"/\");\n+ * res.aggregateWithPooledObjects(ctx.alloc(), ctx.executor())\n+ *    .thenApply(aggResp -> {\n+ *        // try-with-resources here ensures the content is released\n+ *        // if it is a pooled HttpData, or otherwise is a no-op if it is not.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8abc447e9c0744abdc1c1dfc226faff88a9f163a"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDExNjI1OQ==", "bodyText": "\ud83d\ude04", "url": "https://github.com/line/armeria/pull/2892#discussion_r454116259", "createdAt": "2020-07-14T05:47:29Z", "author": {"login": "minwoox"}, "path": "core/src/test/java/com/linecorp/armeria/server/healthcheck/HealthCheckServiceTest.java", "diffHunk": "@@ -382,6 +382,7 @@ void custom() {\n                                    \"armeria-lphc\", \"60, 5\"),\n                 HttpData.ofUtf8(\"ok\")));\n \n+        System.err.println(\"--------------------------\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8abc447e9c0744abdc1c1dfc226faff88a9f163a"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3OTI4MTUy", "url": "https://github.com/line/armeria/pull/2892#pullrequestreview-447928152", "createdAt": "2020-07-14T09:10:05Z", "commit": {"oid": "8abc447e9c0744abdc1c1dfc226faff88a9f163a"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOToxMDowNlrOGxLGvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOToxNTo1NlrOGxLULg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIxNTM1Nw==", "bodyText": "I think this should come first for readability given the method's primary goal is changing the value of endofstream", "url": "https://github.com/line/armeria/pull/2892#discussion_r454215357", "createdAt": "2020-07-14T09:10:06Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/ByteArrayHttpData.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 2016 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.util.Arrays;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.buffer.Unpooled;\n+import io.netty.util.internal.EmptyArrays;\n+import it.unimi.dsi.fastutil.io.FastByteArrayInputStream;\n+\n+/**\n+ * A {@code byte[]}-based {@link HttpData}.\n+ */\n+final class ByteArrayHttpData implements HttpData {\n+\n+    static final ByteArrayHttpData EMPTY = new ByteArrayHttpData(EmptyArrays.EMPTY_BYTES, false);\n+    static final ByteArrayHttpData EMPTY_EOS = new ByteArrayHttpData(EmptyArrays.EMPTY_BYTES, true);\n+\n+    private final byte[] array;\n+    private final boolean endOfStream;\n+\n+    ByteArrayHttpData(byte[] array) {\n+        this(array, false);\n+    }\n+\n+    private ByteArrayHttpData(byte[] array, boolean endOfStream) {\n+        this.array = array;\n+        this.endOfStream = endOfStream;\n+    }\n+\n+    @Override\n+    public byte[] array() {\n+        return array;\n+    }\n+\n+    @Override\n+    public int length() {\n+        return array.length;\n+    }\n+\n+    @Override\n+    public String toString(Charset charset) {\n+        requireNonNull(charset, \"charset\");\n+        return new String(array, charset);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        final MoreObjects.ToStringHelper helper =\n+                MoreObjects.toStringHelper(this)\n+                           .omitNullValues()\n+                           .addValue(length() + \"B\");\n+\n+        if (isEndOfStream()) {\n+            helper.addValue(\"endOfStream\");\n+        }\n+        return helper.add(\"array\", array)\n+                     .toString();\n+    }\n+\n+    @Override\n+    public InputStream toInputStream() {\n+        return new FastByteArrayInputStream(array);\n+    }\n+\n+    @Override\n+    public boolean isEndOfStream() {\n+        return endOfStream;\n+    }\n+\n+    @Override\n+    public ByteArrayHttpData withEndOfStream(boolean endOfStream) {\n+        if (isEmpty()) {\n+            return endOfStream ? EMPTY_EOS : EMPTY;\n+        }\n+\n+        if (isEndOfStream() == endOfStream) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8abc447e9c0744abdc1c1dfc226faff88a9f163a"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIxODc5OA==", "bodyText": "DIRECT_RETAINED_DUPLICATE?", "url": "https://github.com/line/armeria/pull/2892#discussion_r454218798", "createdAt": "2020-07-14T09:15:56Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/ByteBufAccessMode.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import com.linecorp.armeria.common.util.UnstableApi;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.Channel;\n+\n+/**\n+ * Specifies the way a {@link ByteBuf} is retrieved from an {@link HttpData}.\n+ */\n+@UnstableApi\n+public enum ByteBufAccessMode {\n+    /**\n+     * Gets the duplicate (or slice) of the underlying {@link ByteBuf}. This mode is useful when you access\n+     * the {@link ByteBuf} within the life cycle of the {@link HttpData}:\n+     * <pre>{@code\n+     * try (HttpContent content = ...) {\n+     *     ByteBuf buf = content.byteBuf(ByteBufAccessMode.DUPLICATE);\n+     *     // Read something from 'buf' here.\n+     * }\n+     * }</pre>\n+     *\n+     * @see ByteBuf#duplicate()\n+     * @see ByteBuf#slice()\n+     */\n+    DUPLICATE,\n+    /**\n+     * Gets the retained duplicate (or slice) of the underlying {@link ByteBuf}. This mode is useful when\n+     * you access the {@link ByteBuf} beyond the life cycle of the {@link HttpData}, such as creating\n+     * another {@link HttpData} that shares the {@link ByteBuf}'s memory region:\n+     * <pre>{@code\n+     * HttpData data1 = HttpData.wrap(byteBuf);\n+     * HttpData data2 = HttpData.wrap(data1.byteBuf(ByteBufAccessMode.RETAINED_DUPLICATE));\n+     * }</pre>\n+     *\n+     * @see ByteBuf#retainedDuplicate()\n+     * @see ByteBuf#retainedSlice()\n+     */\n+    RETAINED_DUPLICATE,\n+    /**\n+     * Converts the underlying {@link ByteBuf} into a direct {@link ByteBuf} if necessary. If the underlying\n+     * {@link ByteBuf} is already direct, it behaves same with {@link #RETAINED_DUPLICATE}. Otherwise, a new\n+     * direct {@link ByteBuf} is allocated and the content of the underlying {@link ByteBuf} is copied into it.\n+     * This access mode is useful when you perform direct I/O or send data to a Netty {@link Channel}.\n+     */\n+    DIRECT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8abc447e9c0744abdc1c1dfc226faff88a9f163a"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3OTUyMzUz", "url": "https://github.com/line/armeria/pull/2892#pullrequestreview-447952353", "createdAt": "2020-07-14T09:42:38Z", "commit": {"oid": "8abc447e9c0744abdc1c1dfc226faff88a9f163a"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOTo0MjozOVrOGxMQMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMDoyNDo1M1rOGxNpZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIzNDE2MQ==", "bodyText": "Maybe:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            data.close();\n          \n          \n            \n                            buf.close();", "url": "https://github.com/line/armeria/pull/2892#discussion_r454234161", "createdAt": "2020-07-14T09:42:39Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/Http1ObjectEncoder.java", "diffHunk": "@@ -162,7 +161,7 @@ private ChannelFuture doWriteUnsplitData(int id, HttpData data, boolean endStrea\n             return future;\n         } finally {\n             if (!handled) {\n-                ReferenceCountUtil.safeRelease(buf);\n+                data.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8abc447e9c0744abdc1c1dfc226faff88a9f163a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIzNzk3Nw==", "bodyText": "Could remove | FLAG_CLOSED?", "url": "https://github.com/line/armeria/pull/2892#discussion_r454237977", "createdAt": "2020-07-14T09:49:23Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/ByteBufHttpData.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2016 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufInputStream;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import it.unimi.dsi.fastutil.io.FastByteArrayInputStream;\n+\n+/**\n+ * A {@link ByteBuf}-based {@link HttpData}.\n+ */\n+final class ByteBufHttpData implements HttpData {\n+\n+    private static final int FLAG_POOLED = 1;\n+    private static final int FLAG_END_OF_STREAM = 2;\n+    private static final int FLAG_CLOSED = 4;\n+\n+    private final ByteBuf buf;\n+    @Nullable\n+    private byte[] array;\n+    private int flags;\n+\n+    ByteBufHttpData(ByteBuf buf, boolean pooled) {\n+        this(buf, pooled ? FLAG_POOLED : 0, null);\n+    }\n+\n+    private ByteBufHttpData(ByteBuf buf, int flags, @Nullable byte[] array) {\n+        this.buf = buf;\n+        this.array = array;\n+        this.flags = flags;\n+    }\n+\n+    @Override\n+    public byte[] array() {\n+        if (array != null) {\n+            return array;\n+        }\n+\n+        final int length = buf.readableBytes();\n+        if (isPooled()) {\n+            buf.touch();\n+        } else if (buf.hasArray() && buf.arrayOffset() == 0 && buf.readerIndex() == 0) {\n+            final byte[] bufArray = buf.array();\n+            if (bufArray.length == length) {\n+                return array = bufArray;\n+            }\n+        }\n+\n+        return array = ByteBufUtil.getBytes(buf, buf.readerIndex(), length);\n+    }\n+\n+    @Override\n+    public int length() {\n+        return buf.readableBytes();\n+    }\n+\n+    @Override\n+    public String toString(Charset charset) {\n+        requireNonNull(charset, \"charset\");\n+        if (array != null) {\n+            return new String(array, charset);\n+        } else {\n+            return buf.toString(charset);\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        final MoreObjects.ToStringHelper helper =\n+                MoreObjects.toStringHelper(this)\n+                           .omitNullValues()\n+                           .addValue(buf.readableBytes() + \"B\");\n+\n+        if (isEndOfStream()) {\n+            helper.addValue(\"endOfStream\");\n+        }\n+        if (isPooled()) {\n+            helper.addValue(\"pooled\");\n+        }\n+        if ((flags & FLAG_CLOSED) != 0) {\n+            helper.addValue(\"closed\");\n+        }\n+\n+        return helper.add(\"byteBuf\", buf)\n+                     .toString();\n+    }\n+\n+    @Override\n+    public InputStream toInputStream() {\n+        if (array != null) {\n+            return new FastByteArrayInputStream(array);\n+        } else {\n+            return new ByteBufInputStream(buf.duplicate(), false);\n+        }\n+    }\n+\n+    @Override\n+    public boolean isEndOfStream() {\n+        return (flags & FLAG_END_OF_STREAM) != 0;\n+    }\n+\n+    @Override\n+    public ByteBufHttpData withEndOfStream(boolean endOfStream) {\n+        if (isEndOfStream() == endOfStream) {\n+            return this;\n+        }\n+\n+        int newFlags = flags & ~FLAG_END_OF_STREAM;\n+        if (endOfStream) {\n+            newFlags |= FLAG_END_OF_STREAM;\n+        }\n+\n+        return new ByteBufHttpData(buf, newFlags, array);\n+    }\n+\n+    @Override\n+    public boolean isPooled() {\n+        return (flags & FLAG_POOLED) != 0;\n+    }\n+\n+    @Override\n+    public ByteBuf byteBuf(ByteBufAccessMode mode) {\n+        switch (mode) {\n+            case DUPLICATE:\n+                return buf.duplicate();\n+            case RETAINED_DUPLICATE:\n+                return buf.retainedDuplicate();\n+            case DIRECT:\n+                if (buf.isDirect()) {\n+                    return buf.retainedDuplicate();\n+                }\n+\n+                final ByteBuf copy = newDirectByteBuf();\n+                copy.writeBytes(buf, buf.readerIndex(), buf.readableBytes());\n+                return copy;\n+        }\n+\n+        throw new Error(); // Never reaches here.\n+    }\n+\n+    @Override\n+    public ByteBuf byteBuf(int offset, int length, ByteBufAccessMode mode) {\n+        final int startIndex = buf.readerIndex() + offset;\n+        switch (mode) {\n+            case DUPLICATE:\n+                return buf.slice(startIndex, length);\n+            case RETAINED_DUPLICATE:\n+                return buf.retainedSlice(startIndex, length);\n+            case DIRECT:\n+                if (buf.isDirect()) {\n+                    return buf.retainedSlice(startIndex, length);\n+                }\n+\n+                final ByteBuf copy = newDirectByteBuf(length);\n+                copy.writeBytes(buf, startIndex, length);\n+                return copy;\n+        }\n+\n+        throw new Error(); // Never reaches here.\n+    }\n+\n+    private ByteBuf newDirectByteBuf() {\n+        return newDirectByteBuf(buf.readableBytes());\n+    }\n+\n+    private static ByteBuf newDirectByteBuf(int length) {\n+        return PooledByteBufAllocator.DEFAULT.directBuffer(length);\n+    }\n+\n+    @Override\n+    public void close() {\n+        // This is not thread safe, but an attempt to close one instance from multiple threads would fail\n+        // with an IllegalReferenceCountException anyway.\n+        if ((flags & (FLAG_POOLED | FLAG_CLOSED)) == FLAG_POOLED) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8abc447e9c0744abdc1c1dfc226faff88a9f163a"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI1Njk5Ng==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/line/armeria/pull/2892#discussion_r454256996", "createdAt": "2020-07-14T10:24:53Z", "author": {"login": "ikhoon"}, "path": "grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcWebUtil.java", "diffHunk": "@@ -77,41 +75,31 @@\n     @Nullable\n     public static HttpHeaders parseTrailers(HttpData response) {\n         requireNonNull(response, \"response\");\n-        final ByteBuf buf;\n-        if (response instanceof PooledHttpData) {\n-            buf = ((PooledHttpData) response).content();\n-        } else {\n-            buf = Unpooled.wrappedBuffer(response.array());\n-        }\n-        final int readerIndex = buf.readerIndex();\n+        final ByteBuf buf = response.byteBuf();\n \n-        try {\n-            HttpHeaders trailers = null;\n-            while (buf.isReadable(HEADER_LENGTH)) {\n-                final short type = buf.readUnsignedByte();\n-                if ((type & RESERVED_MASK) != 0) {\n-                    // Malformed header\n-                    break;\n-                }\n+        HttpHeaders trailers = null;\n+        while (buf.isReadable(HEADER_LENGTH)) {\n+            final short type = buf.readUnsignedByte();\n+            if ((type & RESERVED_MASK) != 0) {\n+                // Malformed header\n+                break;\n+            }\n \n-                final int length = buf.readInt();\n-                // 8th (MSB) bit of the 1st gRPC frame byte is:\n-                // - '1' for trailers\n-                // - '0' for data\n-                //\n-                // See: https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md#protocol-differences-vs-grpc-over-http2\n-                if (type >> 7 == 1) {\n-                    trailers = InternalGrpcWebUtil.parseGrpcWebTrailers(buf);\n-                    break;\n-                } else {\n-                    // Skip a gRPC content\n-                    buf.skipBytes(length);\n-                }\n+            final int length = buf.readInt();\n+            // 8th (MSB) bit of the 1st gRPC frame byte is:\n+            // - '1' for trailers\n+            // - '0' for data\n+            //\n+            // See: https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md#protocol-differences-vs-grpc-over-http2\n+            if (type >> 7 == 1) {\n+                trailers = InternalGrpcWebUtil.parseGrpcWebTrailers(buf);\n+                break;\n+            } else {\n+                // Skip a gRPC content\n+                buf.skipBytes(length);\n             }\n-            return trailers;\n-        } finally {\n-            buf.readerIndex(readerIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8abc447e9c0744abdc1c1dfc226faff88a9f163a"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d69a9a7ef5bd1eafd00ac7fa55f65d2170335ec6", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/d69a9a7ef5bd1eafd00ac7fa55f65d2170335ec6", "committedDate": "2020-07-16T05:14:03Z", "message": "Merge branch 'master' into closeable_http_data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3689af33f84f11c2c776ede40eb4e698ec0b5cc8", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/3689af33f84f11c2c776ede40eb4e698ec0b5cc8", "committedDate": "2020-07-16T05:21:02Z", "message": "Address all review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2942c653a88253ccadbfa68baef27378f6b6d9a2", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/2942c653a88253ccadbfa68baef27378f6b6d9a2", "committedDate": "2020-07-16T05:24:07Z", "message": "Fix compilation errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4f0115094b24ed61ebe4d7c364a5b103101507c", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/e4f0115094b24ed61ebe4d7c364a5b103101507c", "committedDate": "2020-07-16T11:13:31Z", "message": "Fix some leaks reported by the build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27def27588b9b095bb756bd2541e26e8c2f3c3b2", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/27def27588b9b095bb756bd2541e26e8c2f3c3b2", "committedDate": "2020-07-16T11:56:43Z", "message": "Fix a test failure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe5ced9afaa93f3af2d5dfd250f9ca260e1a3ebc", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/fe5ced9afaa93f3af2d5dfd250f9ca260e1a3ebc", "committedDate": "2020-07-16T12:11:33Z", "message": "Fix another `ClientFactory` leak"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a410c2846b37da56331f44c749af19f1311e35bf", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/a410c2846b37da56331f44c749af19f1311e35bf", "committedDate": "2020-07-16T15:09:13Z", "message": "Fix buffer leaks in 2 tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee51da2e53a15cc06b6748c870c39aef5845e021", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/ee51da2e53a15cc06b6748c870c39aef5845e021", "committedDate": "2020-07-16T17:40:30Z", "message": "Fix more leaks in the tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f93bdd898507325379cb8567b5e59675a119260", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/3f93bdd898507325379cb8567b5e59675a119260", "committedDate": "2020-07-16T17:41:01Z", "message": "Fix a buffer leak in `RetryingClient` /cc @minwoox"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e665a34742cdc2c945033967207109ba4b05ea45", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/e665a34742cdc2c945033967207109ba4b05ea45", "committedDate": "2020-07-16T17:42:28Z", "message": "Fix a leak in `Http1ObjectEncoder`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5571cca4b8991d57f33c6d786074da560c31d59", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/b5571cca4b8991d57f33c6d786074da560c31d59", "committedDate": "2020-07-16T18:11:52Z", "message": "Fix a leak in ServerMaxConnectionAgeTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b4695a2098aeedd5efda905868ce74e3ae965d7", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/8b4695a2098aeedd5efda905868ce74e3ae965d7", "committedDate": "2020-07-16T19:35:05Z", "message": "Fix a leak in `DefaultStreamMessageDuplicator` /cc @minwoox"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7afd6bf520e72474f4abeb4f7aa3840dc234a21d", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/7afd6bf520e72474f4abeb4f7aa3840dc234a21d", "committedDate": "2020-07-16T19:37:37Z", "message": "Fix another leak in `RetryingClient` /cc @minwoox"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f50fb965193620c5e452afc9d35ac82ee0045dad", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/f50fb965193620c5e452afc9d35ac82ee0045dad", "committedDate": "2020-07-16T19:50:40Z", "message": "Efficiency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d11525e14b2f4321c8c355099578c2ba7a0a876c", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/d11525e14b2f4321c8c355099578c2ba7a0a876c", "committedDate": "2020-07-16T20:13:22Z", "message": "Fix a leak similar to that of `RetryingClient` in `CircuitBreakerClient` /cc @ikhoon, @minwoox"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec59a3a7c7cf305e6f5be254e74911e6599ebec7", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/ec59a3a7c7cf305e6f5be254e74911e6599ebec7", "committedDate": "2020-07-16T20:32:11Z", "message": "More touches"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5023c6d67cb819ac5c4461679653f1ada8252a9", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/c5023c6d67cb819ac5c4461679653f1ada8252a9", "committedDate": "2020-07-16T20:32:59Z", "message": "One more touch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f2ae53e0d715d68ff42cfe923f7773610ac5b86", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/2f2ae53e0d715d68ff42cfe923f7773610ac5b86", "committedDate": "2020-07-16T20:43:07Z", "message": "Add `HttpData.touch()` to touch without creating a duplicate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed64db99319769435a816605a73f8361e14e924b", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/ed64db99319769435a816605a73f8361e14e924b", "committedDate": "2020-07-16T20:46:58Z", "message": "Simplify"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fef716085e8d7e67d8b07db516f37b0a4301d83", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/6fef716085e8d7e67d8b07db516f37b0a4301d83", "committedDate": "2020-07-17T02:27:28Z", "message": "Too many static imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51a0874a92172e9a9c7d36935f6c217b6f6de410", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/51a0874a92172e9a9c7d36935f6c217b6f6de410", "committedDate": "2020-07-17T02:34:04Z", "message": "Add more checks and comments as @minwoox suggested"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMzM1ODY3", "url": "https://github.com/line/armeria/pull/2892#pullrequestreview-450335867", "createdAt": "2020-07-17T02:33:34Z", "commit": {"oid": "ec59a3a7c7cf305e6f5be254e74911e6599ebec7"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMjozMzozNFrOGzDTvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMjozMzozNFrOGzDTvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE4NDc2NQ==", "bodyText": "nit: ByteBuf#touch(Object)", "url": "https://github.com/line/armeria/pull/2892#discussion_r456184765", "createdAt": "2020-07-17T02:33:34Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/unsafe/PooledObjects.java", "diffHunk": "@@ -100,10 +102,18 @@ public static void close(Object obj) {\n      * Does nothing if it's not a pooled {@link HttpData}.\n      */\n     public static void touch(Object obj) {\n+        touch(obj, obj);\n+    }\n+\n+    /**\n+     * Calls {@link ByteBuf#touch()} of the specified {@link HttpData}'s underlying {@link ByteBuf}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec59a3a7c7cf305e6f5be254e74911e6599ebec7"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd92cf48fdf6ae3cca10c2a1e3f070392d748943", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/bd92cf48fdf6ae3cca10c2a1e3f070392d748943", "committedDate": "2020-07-17T05:17:16Z", "message": "Reimplement HttpData.toString() so it is useful and good-looking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04fef12a47e25034a8d4ed0029a2f786e286464a", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/04fef12a47e25034a8d4ed0029a2f786e286464a", "committedDate": "2020-07-17T07:05:24Z", "message": "Fix a test failure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c746a61f00a2d98f21ce6696bb19342cc883c5ba", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/c746a61f00a2d98f21ce6696bb19342cc883c5ba", "committedDate": "2020-07-17T07:20:00Z", "message": "Address the comment from @minwoox"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fd04b617a80d01f389f7a837f2febefdb166b6c", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/3fd04b617a80d01f389f7a837f2febefdb166b6c", "committedDate": "2020-07-17T07:25:50Z", "message": "Optimize thanks to @minwoox"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a00241037a2c2280667af203bcd6752b3ea07d23", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/a00241037a2c2280667af203bcd6752b3ea07d23", "committedDate": "2020-07-17T08:05:01Z", "message": "Too many touches were causing slight perf drop\n\nNow touching less yet providing enough info"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "773ee46c0e64745745896772588483e88b41e861", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/773ee46c0e64745745896772588483e88b41e861", "committedDate": "2020-07-17T09:28:33Z", "message": "`HttpData` is relatively short-living, probably no need to cache strVal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f31392ef8320954267dcda9f83e8b3f17437895", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/2f31392ef8320954267dcda9f83e8b3f17437895", "committedDate": "2020-07-17T09:29:16Z", "message": "Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fa85c1cf9e4789800d6e9a8f279e4b2b0f718f9", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/1fa85c1cf9e4789800d6e9a8f279e4b2b0f718f9", "committedDate": "2020-07-17T09:34:08Z", "message": "DIRECT -> FOR_IO"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNTI2NDkx", "url": "https://github.com/line/armeria/pull/2892#pullrequestreview-450526491", "createdAt": "2020-07-17T09:52:26Z", "commit": {"oid": "1fa85c1cf9e4789800d6e9a8f279e4b2b0f718f9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNTI3NDk5", "url": "https://github.com/line/armeria/pull/2892#pullrequestreview-450527499", "createdAt": "2020-07-17T09:53:59Z", "commit": {"oid": "1fa85c1cf9e4789800d6e9a8f279e4b2b0f718f9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18378c68b349a4c4e72413746b96cca19c3dec08", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/18378c68b349a4c4e72413746b96cca19c3dec08", "committedDate": "2020-07-17T10:21:53Z", "message": "Merge branch 'master' into closeable_http_data"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "837cc247b57bf0f52354758e3313a9e2fc5f38aa", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/837cc247b57bf0f52354758e3313a9e2fc5f38aa", "committedDate": "2020-07-17T10:20:51Z", "message": "Merge branch 'master' into closeable_http_data"}, "afterCommit": {"oid": "18378c68b349a4c4e72413746b96cca19c3dec08", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/18378c68b349a4c4e72413746b96cca19c3dec08", "committedDate": "2020-07-17T10:21:53Z", "message": "Merge branch 'master' into closeable_http_data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e90af2b90a948095743ecb791da1c80f61d3ed95", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/e90af2b90a948095743ecb791da1c80f61d3ed95", "committedDate": "2020-07-17T10:24:22Z", "message": "Remove the obsolete tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4890, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}