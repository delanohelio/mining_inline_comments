{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5NDMzMTYz", "number": 2376, "title": "Generalize gRPC stub factory lookup mechanism", "bodyText": "Motivation:\nGrpcClientFactory currently assumes that the stub factory methods\nare always one of newStub(), newBlockingStub() and newAsyncStub().\nHowever, by using a plugin like grpc-reactor, the stub factory method\ncan be newReactorStub()\nModifications:\n\nGeneralize the stub factory lookup mechanism in GrpcClientFactory.\nMiscellaneous:\n\nClean-up logback-test.xml so that the log messages from Project\nReactor are logged.\n\n\n\nResult:\nPartial support for the gRPC client stubs generated with grpc-reactor.", "createdAt": "2020-01-06T07:51:38Z", "url": "https://github.com/line/armeria/pull/2376", "merged": true, "mergeCommit": {"oid": "be13b164dbd95878b14f83591e8aefbd16b826e2"}, "closed": true, "closedAt": "2020-01-07T03:06:31Z", "author": {"login": "trustin"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb3nSbBgH2gAyMzU5NDMzMTYzOjQ3ZTBhOTNlNmNjZThmMGQ3OWFjMjAzMzBiZTM5ZTY3MzcwZDNhZDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb333KuAFqTMzOTAxMDIzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "47e0a93e6cce8f0d79ac20330be39e67370d3ad6", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/47e0a93e6cce8f0d79ac20330be39e67370d3ad6", "committedDate": "2020-01-06T07:47:11Z", "message": "Generalize gRPC stub factory lookup mechanism\n\nMotivation:\n\n`GrpcClientFactory` currently assumes that the stub factory methods\nare always one of `newStub()`, `newBlockingStub()` and `newAsyncStub()`.\n\nHowever, by using a plugin like `grpc-reactor`, the stub factory method\ncan be `newReactorStub()`\n\nModifications:\n\n- Generalize the stub factory lookup mechanism in `GrpcClientFactory`.\n- Miscellaneous:\n  - Clean-up `logback-test.xml` so that the log messages from Project\n    Reactor are logged.\n\nResult:\n\nPartial support for the gRPC client stubs generated with `grpc-reactor`."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ca6d5ee3aff694355e165e15763c2b9e88ef180", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/9ca6d5ee3aff694355e165e15763c2b9e88ef180", "committedDate": "2020-01-06T07:53:24Z", "message": "Clean-up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4NTA2NTY1", "url": "https://github.com/line/armeria/pull/2376#pullrequestreview-338506565", "createdAt": "2020-01-06T07:56:36Z", "commit": {"oid": "9ca6d5ee3aff694355e165e15763c2b9e88ef180"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNzo1NjozN1rOFaXTtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNzo1NjozN1rOFaXTtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE4OTE3Mw==", "bodyText": "Cool check :)", "url": "https://github.com/line/armeria/pull/2376#discussion_r363189173", "createdAt": "2020-01-06T07:56:37Z", "author": {"login": "anuraaga"}, "path": "grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcClientFactory.java", "diffHunk": "@@ -101,61 +102,78 @@\n         final SerializationFormat serializationFormat = scheme.serializationFormat();\n         final Class<?> stubClass = clientType.getEnclosingClass();\n         if (stubClass == null) {\n-            throw new IllegalArgumentException(\"Client type not a gRPC client stub class, \" +\n-                                               \"should be something like ServiceNameGrpc.ServiceNameXXStub: \" +\n-                                               clientType);\n-        }\n-        final Method newStubMethod;\n-        final Method newBlockingStubMethod;\n-        final Method newFutureStubMethod;\n-        try {\n-            newStubMethod = stubClass.getDeclaredMethod(\"newStub\", Channel.class);\n-            newBlockingStubMethod = stubClass.getDeclaredMethod(\"newBlockingStub\", Channel.class);\n-            newFutureStubMethod = stubClass.getDeclaredMethod(\"newFutureStub\", Channel.class);\n-        } catch (NoSuchMethodException e) {\n-            throw new IllegalArgumentException(\"Client type not a gRPC client stub class, \" +\n-                                               \"should be something like ServiceNameGrpc.ServiceNameXXStub: \" +\n-                                               clientType, e);\n-        }\n-        final Method createClientMethod;\n-        if (newStubMethod.getReturnType() == clientType) {\n-            createClientMethod = newStubMethod;\n-        } else if (newBlockingStubMethod.getReturnType() == clientType) {\n-            createClientMethod = newBlockingStubMethod;\n-        } else if (newFutureStubMethod.getReturnType() == clientType) {\n-            createClientMethod = newFutureStubMethod;\n-        } else {\n-            throw new IllegalArgumentException(\"Client type not a gRPC client stub class, \" +\n-                                               \"should be something like ServiceNameGrpc.ServiceNameXXStub: \" +\n-                                               clientType);\n+            throw newUnknownClientTypeException(clientType);\n         }\n \n-        final HttpClient httpClient = newHttpClient(uri, scheme, options);\n+        final Method stubFactoryMethod = findStubFactoryMethod(clientType, stubClass);\n \n         final MessageMarshaller jsonMarshaller =\n                 GrpcSerializationFormats.isJson(serializationFormat) ?\n                 GrpcJsonUtil.jsonMarshaller(\n                         stubMethods(stubClass),\n                         options.getOrElse(GrpcClientOptions.JSON_MARSHALLER_CUSTOMIZER, NO_OP)) : null;\n+\n         final ArmeriaChannel channel = new ArmeriaChannel(\n                 ClientBuilderParams.of(this,\n                                        Strings.isNullOrEmpty(uri.getPath()) ? rootPathUri(uri) : uri,\n                                        clientType, options),\n-                httpClient,\n+                newHttpClient(uri, scheme, options),\n                 meterRegistry(),\n                 scheme.sessionProtocol(),\n                 endpoint,\n                 serializationFormat,\n                 jsonMarshaller);\n \n         try {\n-            // Verified createClientMethod.getReturnType == clientType\n+            // Verified stubFactoryMethod.getReturnType() == clientType in findStubFactoryMethod().\n             @SuppressWarnings(\"unchecked\")\n-            final T stub = (T) createClientMethod.invoke(null, channel);\n+            final T stub = (T) stubFactoryMethod.invoke(null, channel);\n             return stub;\n         } catch (IllegalAccessException | InvocationTargetException e) {\n-            throw new IllegalStateException(\"Could not create stub through reflection.\", e);\n+            throw new IllegalStateException(\"Could not create a gRPC stub through reflection.\", e);\n+        }\n+    }\n+\n+    private static <T> Method findStubFactoryMethod(Class<T> clientType, Class<?> stubClass) {\n+        Method newStubMethod = null;\n+        for (Method method : stubClass.getDeclaredMethods()) {\n+            final int methodModifiers = method.getModifiers();\n+            if (!(Modifier.isPublic(methodModifiers) && Modifier.isStatic(methodModifiers))) {\n+                // Must be public and static.\n+                continue;\n+            }\n+\n+            final String methodName = method.getName();\n+            if (!(methodName.startsWith(\"new\") && methodName.endsWith(\"Stub\"))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ca6d5ee3aff694355e165e15763c2b9e88ef180"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4NTgxNDA0", "url": "https://github.com/line/armeria/pull/2376#pullrequestreview-338581404", "createdAt": "2020-01-06T10:55:00Z", "commit": {"oid": "9ca6d5ee3aff694355e165e15763c2b9e88ef180"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MDEwMjM2", "url": "https://github.com/line/armeria/pull/2376#pullrequestreview-339010236", "createdAt": "2020-01-07T03:05:48Z", "commit": {"oid": "9ca6d5ee3aff694355e165e15763c2b9e88ef180"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 824, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}