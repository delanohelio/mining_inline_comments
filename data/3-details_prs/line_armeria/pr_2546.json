{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMzY4MzMx", "number": 2546, "title": "Allow setting example paths and queries for DocService", "bodyText": "Motivation:\nCurrently, a user cannot set example paths and queries. #2195\nThe endpoint path or queries are only set automatically when\nopening a URL that contains endpoint_path or queries as params.\nModifications:\n\nAdd examplePaths to DocService and DocServiceBuilder\nAdd exampleQueries to DocService and DocServiceBuilder\nShow examplePath if the endpoint_path is null and the examplePath is not null\nShow exampleQuery if the queries is null and the exampleQuery is not null\nMake ENDPOINT PATH input visible with read-only if a path is exact type\n\nResult:\nYou can now set an example path and queries for DocService\nFixes #2195", "createdAt": "2020-03-02T12:55:20Z", "url": "https://github.com/line/armeria/pull/2546", "merged": true, "mergeCommit": {"oid": "721f185e0d9b203d2c1e3345201db4b9ad02126a"}, "closed": true, "closedAt": "2020-03-10T04:19:49Z", "author": {"login": "ikhoon"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJtN_ygH2gAyMzgyMzY4MzMxOjEwOGEyMWQ0MjlhMDNmMmI0Njg4NGNmMTQ2MTA1ZTk1YWE4YzIxODA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMKqaagFqTM3MTY3MzM3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "108a21d429a03f2b46884cf146105e95aa8c2180", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/108a21d429a03f2b46884cf146105e95aa8c2180", "committedDate": "2020-03-02T12:52:25Z", "message": "Provide a way to set example paths and queries when building DocService\n\nMotivation:\n\nCurrently, a user cannot set example paths and queries. #2195\nThe endpoint path or queries are only set automatically when\nsharing a URL that contains `endpoint_path` or `queries` as params.\n\nModifications:\n\n- Add `examplePaths` to `DocService` and `DocServiceBuilder`\n- Add `exampleQueries` to `DocService` and `DocServiceBuilder`\n- Show `examplePath` if the `endpoint_path` is null and the `examplePath` is not null\n- Show `exampleQuery` if the `queries` is null and the `exampleQuery` is not null\n- Make `ENDPOINT PATH` input visible with readonlyif path type is exact\n\nResult:\nYou can now set an example path and queries for `DocService`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd0702874f5f96d77c1d1ecd2b0b21c7fb65c8c4", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/cd0702874f5f96d77c1d1ecd2b0b21c7fb65c8c4", "committedDate": "2020-03-03T07:03:28Z", "message": "Allow adding multiple example paths and queries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5825c196ee7a7ca94acc94243ce83e2a782b72c8", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/5825c196ee7a7ca94acc94243ce83e2a782b72c8", "committedDate": "2020-03-03T07:42:14Z", "message": "Fix checkstyle and clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23e5674b759a67aa24c42d91bc86d293ef81c780", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/23e5674b759a67aa24c42d91bc86d293ef81c780", "committedDate": "2020-03-03T07:51:39Z", "message": "Clean up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NzYzNDU4", "url": "https://github.com/line/armeria/pull/2546#pullrequestreview-367763458", "createdAt": "2020-03-03T07:57:13Z", "commit": {"oid": "23e5674b759a67aa24c42d91bc86d293ef81c780"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzo1NzoxNFrOFw7X3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzo1NzoxNFrOFw7X3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg0ODczMg==", "bodyText": "This was already a bit crazy but now even more so probably needs param comments e.g., /* exampleHttpHeaders= */ ImmutableMap.of()", "url": "https://github.com/line/armeria/pull/2546#discussion_r386848732", "createdAt": "2020-03-03T07:57:14Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/server/docs/DocService.java", "diffHunk": "@@ -108,14 +110,17 @@ public static DocServiceBuilder builder() {\n      * Creates a new instance.\n      */\n     public DocService() {\n-        this(ImmutableMap.of(), ImmutableMap.of(), ImmutableList.of(), DocServiceBuilder.ALL_SERVICES);\n+        this(ImmutableMap.of(), ImmutableMap.of(), ImmutableMap.of(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23e5674b759a67aa24c42d91bc86d293ef81c780"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a53840a980afc90a22a0dad05ccfd9533af6d0ad", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/a53840a980afc90a22a0dad05ccfd9533af6d0ad", "committedDate": "2020-03-03T08:19:48Z", "message": "Add param comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NTM1NTc3", "url": "https://github.com/line/armeria/pull/2546#pullrequestreview-368535577", "createdAt": "2020-03-04T06:43:40Z", "commit": {"oid": "a53840a980afc90a22a0dad05ccfd9533af6d0ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjo0Mzo0MFrOFxhkMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjo0Mzo0MFrOFxhkMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ3NDQ4MQ==", "bodyText": "Out of curiosity: is there special meaning for a space after code?", "url": "https://github.com/line/armeria/pull/2546#discussion_r387474481", "createdAt": "2020-03-04T06:43:40Z", "author": {"login": "hexoul"}, "path": "docs-client/src/containers/MethodPage/EndpointPath.tsx", "diffHunk": "@@ -37,15 +41,25 @@ const EndpointPath: React.FunctionComponent<Props> = (props) => (\n     <Typography variant=\"body2\" paragraph />\n     {props.endpointPathOpen && (\n       <>\n+        {props.examplePaths.length > 0 && (\n+          <>\n+            <Typography variant=\"body2\" paragraph />\n+            <Dropdown\n+              placeholder=\"Select an example path...\"\n+              options={props.examplePaths}\n+              onChange={props.onSelectedPathChange}\n+            />\n+          </>\n+        )}\n+        <Typography variant=\"body2\" paragraph />\n         <TextField\n-          multiline\n           fullWidth\n-          rows={1}\n-          value={props.endpointPath}\n+          value={props.additionalPath}\n           placeholder={endpointPathPlaceHolder}\n-          onChange={props.onEndpointPathChange}\n+          onChange={props.onPathFormChange}\n           inputProps={{\n-            className: 'code',\n+            readOnly: !props.editable,\n+            className: 'code ',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a53840a980afc90a22a0dad05ccfd9533af6d0ad"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NTQ5OTA3", "url": "https://github.com/line/armeria/pull/2546#pullrequestreview-368549907", "createdAt": "2020-03-04T07:22:15Z", "commit": {"oid": "a53840a980afc90a22a0dad05ccfd9533af6d0ad"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5957e4f032966b3f7ea60dda340eb3cdebcb3b0", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/f5957e4f032966b3f7ea60dda340eb3cdebcb3b0", "committedDate": "2020-03-04T07:32:39Z", "message": "Fix NPE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10c9559d14cb062b437a566ba03e148ef33a51d3", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/10c9559d14cb062b437a566ba03e148ef33a51d3", "committedDate": "2020-03-04T07:56:10Z", "message": "Address comments by @hexoul / Remove white space"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NTg5NDA0", "url": "https://github.com/line/armeria/pull/2546#pullrequestreview-369589404", "createdAt": "2020-03-05T13:59:56Z", "commit": {"oid": "10c9559d14cb062b437a566ba03e148ef33a51d3"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzo1OTo1NlrOFyUj1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDowNzo0OFrOFyU1lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwOTk3NA==", "bodyText": "the specified example queries -> the specified example query strings ? (for clarity)", "url": "https://github.com/line/armeria/pull/2546#discussion_r388309974", "createdAt": "2020-03-05T13:59:56Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/docs/DocServiceBuilder.java", "diffHunk": "@@ -183,6 +185,90 @@ private DocServiceBuilder exampleHttpHeaders0(String serviceName, String methodN\n         return this;\n     }\n \n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(Class<?> serviceType, String methodName, String... examplePaths) {\n+        requireNonNull(serviceType, \"serviceType\");\n+        return examplePaths(serviceType.getName(), methodName, examplePaths);\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(Class<?> serviceType, String methodName,\n+                                          Iterable<String> examplePaths) {\n+        requireNonNull(serviceType, \"serviceType\");\n+        return examplePaths(serviceType.getName(), methodName, examplePaths);\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(String serviceName, String methodName, String... examplePaths) {\n+        requireNonNull(examplePaths, \"examplePaths\");\n+        return examplePaths(serviceName, methodName, ImmutableList.copyOf(examplePaths));\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(String serviceName, String methodName,\n+                                          Iterable<String> examplePaths) {\n+        requireNonNull(serviceName, \"serviceName\");\n+        checkArgument(!serviceName.isEmpty(), \"serviceName is empty.\");\n+        requireNonNull(methodName, \"methodName\");\n+        checkArgument(!methodName.isEmpty(), \"methodName is empty.\");\n+        requireNonNull(examplePaths, \"examplePaths\");\n+        for (String examplePath : examplePaths) {\n+            requireNonNull(examplePath, \"examplePaths contains null\");\n+            this.examplePaths.computeIfAbsent(serviceName, unused -> ArrayListMultimap.create())\n+                             .put(methodName, examplePath);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified example queries for the method with the specified service and method name.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10c9559d14cb062b437a566ba03e148ef33a51d3"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMxMDA5Mg==", "bodyText": "queries -> queryStrings ?", "url": "https://github.com/line/armeria/pull/2546#discussion_r388310092", "createdAt": "2020-03-05T14:00:08Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/docs/DocServiceBuilder.java", "diffHunk": "@@ -183,6 +185,90 @@ private DocServiceBuilder exampleHttpHeaders0(String serviceName, String methodN\n         return this;\n     }\n \n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(Class<?> serviceType, String methodName, String... examplePaths) {\n+        requireNonNull(serviceType, \"serviceType\");\n+        return examplePaths(serviceType.getName(), methodName, examplePaths);\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(Class<?> serviceType, String methodName,\n+                                          Iterable<String> examplePaths) {\n+        requireNonNull(serviceType, \"serviceType\");\n+        return examplePaths(serviceType.getName(), methodName, examplePaths);\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(String serviceName, String methodName, String... examplePaths) {\n+        requireNonNull(examplePaths, \"examplePaths\");\n+        return examplePaths(serviceName, methodName, ImmutableList.copyOf(examplePaths));\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(String serviceName, String methodName,\n+                                          Iterable<String> examplePaths) {\n+        requireNonNull(serviceName, \"serviceName\");\n+        checkArgument(!serviceName.isEmpty(), \"serviceName is empty.\");\n+        requireNonNull(methodName, \"methodName\");\n+        checkArgument(!methodName.isEmpty(), \"methodName is empty.\");\n+        requireNonNull(examplePaths, \"examplePaths\");\n+        for (String examplePath : examplePaths) {\n+            requireNonNull(examplePath, \"examplePaths contains null\");\n+            this.examplePaths.computeIfAbsent(serviceName, unused -> ArrayListMultimap.create())\n+                             .put(methodName, examplePath);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified example queries for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder exampleQueries(Class<?> serviceType, String methodName, String... queries) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10c9559d14cb062b437a566ba03e148ef33a51d3"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMxNDUxNw==", "bodyText": "How about validating all paths and query strings, using PathAndQuery and QueryParams.fromQueryString()?", "url": "https://github.com/line/armeria/pull/2546#discussion_r388314517", "createdAt": "2020-03-05T14:07:48Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/docs/MethodInfo.java", "diffHunk": "@@ -108,6 +114,8 @@ public MethodInfo(String name,\n         this.exampleHttpHeaders = ImmutableList.copyOf(requireNonNull(exampleHttpHeaders,\n                                                                       \"exampleHttpHeaders\"));\n         this.exampleRequests = ImmutableList.copyOf(requireNonNull(exampleRequests, \"exampleRequests\"));\n+        this.examplePaths = ImmutableList.copyOf(requireNonNull(examplePaths, \"examplePaths\"));\n+        this.exampleQueries = ImmutableList.copyOf(requireNonNull(exampleQueries, \"exampleQueries\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10c9559d14cb062b437a566ba03e148ef33a51d3"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1597274e1bf0fa4ca028f3730f745873c86f6d9", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/a1597274e1bf0fa4ca028f3730f745873c86f6d9", "committedDate": "2020-03-06T09:12:46Z", "message": "Address comments by @trustin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMDUyOTc0", "url": "https://github.com/line/armeria/pull/2546#pullrequestreview-371052974", "createdAt": "2020-03-09T10:26:48Z", "commit": {"oid": "a1597274e1bf0fa4ca028f3730f745873c86f6d9"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMDoyNjo0OFrOFzhs7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMDoyODoxN1rOFzhv7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3Mzg3MQ==", "bodyText": "queries -> queryStrings", "url": "https://github.com/line/armeria/pull/2546#discussion_r389573871", "createdAt": "2020-03-09T10:26:48Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/docs/DocServiceBuilder.java", "diffHunk": "@@ -183,6 +186,95 @@ private DocServiceBuilder exampleHttpHeaders0(String serviceName, String methodN\n         return this;\n     }\n \n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(Class<?> serviceType, String methodName, String... examplePaths) {\n+        requireNonNull(serviceType, \"serviceType\");\n+        return examplePaths(serviceType.getName(), methodName, examplePaths);\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(Class<?> serviceType, String methodName,\n+                                          Iterable<String> examplePaths) {\n+        requireNonNull(serviceType, \"serviceType\");\n+        return examplePaths(serviceType.getName(), methodName, examplePaths);\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(String serviceName, String methodName, String... examplePaths) {\n+        requireNonNull(examplePaths, \"examplePaths\");\n+        return examplePaths(serviceName, methodName, ImmutableList.copyOf(examplePaths));\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(String serviceName, String methodName,\n+                                          Iterable<String> examplePaths) {\n+        requireNonNull(serviceName, \"serviceName\");\n+        checkArgument(!serviceName.isEmpty(), \"serviceName is empty.\");\n+        requireNonNull(methodName, \"methodName\");\n+        checkArgument(!methodName.isEmpty(), \"methodName is empty.\");\n+        requireNonNull(examplePaths, \"examplePaths\");\n+        for (String examplePath : examplePaths) {\n+            requireNonNull(examplePath, \"examplePaths contains null\");\n+            examplePaths.forEach(path -> checkArgument(PathAndQuery.parse(path) != null,\n+                                                       \"examplePaths contain an invalid path: {}\", path));\n+            this.examplePaths.computeIfAbsent(serviceName, unused -> ArrayListMultimap.create())\n+                             .put(methodName, examplePath);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified example query strings for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder exampleQueries(Class<?> serviceType, String methodName, String... queryStrings) {\n+        requireNonNull(serviceType, \"serviceType\");\n+        return exampleQueries(serviceType.getName(), methodName, queryStrings);\n+    }\n+\n+    /**\n+     * Adds the specified example query strings for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder exampleQueries(Class<?> serviceType, String methodName, Iterable<String> queries) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1597274e1bf0fa4ca028f3730f745873c86f6d9"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3MzkxMw==", "bodyText": "queries -> queryStrings", "url": "https://github.com/line/armeria/pull/2546#discussion_r389573913", "createdAt": "2020-03-09T10:26:52Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/docs/DocServiceBuilder.java", "diffHunk": "@@ -183,6 +186,95 @@ private DocServiceBuilder exampleHttpHeaders0(String serviceName, String methodN\n         return this;\n     }\n \n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(Class<?> serviceType, String methodName, String... examplePaths) {\n+        requireNonNull(serviceType, \"serviceType\");\n+        return examplePaths(serviceType.getName(), methodName, examplePaths);\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(Class<?> serviceType, String methodName,\n+                                          Iterable<String> examplePaths) {\n+        requireNonNull(serviceType, \"serviceType\");\n+        return examplePaths(serviceType.getName(), methodName, examplePaths);\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(String serviceName, String methodName, String... examplePaths) {\n+        requireNonNull(examplePaths, \"examplePaths\");\n+        return examplePaths(serviceName, methodName, ImmutableList.copyOf(examplePaths));\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(String serviceName, String methodName,\n+                                          Iterable<String> examplePaths) {\n+        requireNonNull(serviceName, \"serviceName\");\n+        checkArgument(!serviceName.isEmpty(), \"serviceName is empty.\");\n+        requireNonNull(methodName, \"methodName\");\n+        checkArgument(!methodName.isEmpty(), \"methodName is empty.\");\n+        requireNonNull(examplePaths, \"examplePaths\");\n+        for (String examplePath : examplePaths) {\n+            requireNonNull(examplePath, \"examplePaths contains null\");\n+            examplePaths.forEach(path -> checkArgument(PathAndQuery.parse(path) != null,\n+                                                       \"examplePaths contain an invalid path: {}\", path));\n+            this.examplePaths.computeIfAbsent(serviceName, unused -> ArrayListMultimap.create())\n+                             .put(methodName, examplePath);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified example query strings for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder exampleQueries(Class<?> serviceType, String methodName, String... queryStrings) {\n+        requireNonNull(serviceType, \"serviceType\");\n+        return exampleQueries(serviceType.getName(), methodName, queryStrings);\n+    }\n+\n+    /**\n+     * Adds the specified example query strings for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder exampleQueries(Class<?> serviceType, String methodName, Iterable<String> queries) {\n+        requireNonNull(serviceType, \"serviceType\");\n+        return exampleQueries(serviceType.getName(), methodName, queries);\n+    }\n+\n+    /**\n+     * Adds the specified example query strings for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder exampleQueries(String serviceName, String methodName, String... queryStrings) {\n+        requireNonNull(queryStrings, \"queryStrings\");\n+        return exampleQueries(serviceName, methodName, ImmutableList.copyOf(queryStrings));\n+    }\n+\n+    /**\n+     * Adds the specified example query strings for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder exampleQueries(String serviceName, String methodName, Iterable<String> queries) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1597274e1bf0fa4ca028f3730f745873c86f6d9"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3NDIzNw==", "bodyText": "paths? (like queryStrings below)", "url": "https://github.com/line/armeria/pull/2546#discussion_r389574237", "createdAt": "2020-03-09T10:27:29Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/docs/DocServiceBuilder.java", "diffHunk": "@@ -183,6 +186,95 @@ private DocServiceBuilder exampleHttpHeaders0(String serviceName, String methodN\n         return this;\n     }\n \n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(Class<?> serviceType, String methodName, String... examplePaths) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1597274e1bf0fa4ca028f3730f745873c86f6d9"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3NDI3Ng==", "bodyText": "paths? (like queryStrings below)", "url": "https://github.com/line/armeria/pull/2546#discussion_r389574276", "createdAt": "2020-03-09T10:27:33Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/docs/DocServiceBuilder.java", "diffHunk": "@@ -183,6 +186,95 @@ private DocServiceBuilder exampleHttpHeaders0(String serviceName, String methodN\n         return this;\n     }\n \n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(Class<?> serviceType, String methodName, String... examplePaths) {\n+        requireNonNull(serviceType, \"serviceType\");\n+        return examplePaths(serviceType.getName(), methodName, examplePaths);\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(Class<?> serviceType, String methodName,\n+                                          Iterable<String> examplePaths) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1597274e1bf0fa4ca028f3730f745873c86f6d9"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3NDM2NA==", "bodyText": "paths? (like queryStrings below)", "url": "https://github.com/line/armeria/pull/2546#discussion_r389574364", "createdAt": "2020-03-09T10:27:46Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/docs/DocServiceBuilder.java", "diffHunk": "@@ -183,6 +186,95 @@ private DocServiceBuilder exampleHttpHeaders0(String serviceName, String methodN\n         return this;\n     }\n \n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(Class<?> serviceType, String methodName, String... examplePaths) {\n+        requireNonNull(serviceType, \"serviceType\");\n+        return examplePaths(serviceType.getName(), methodName, examplePaths);\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(Class<?> serviceType, String methodName,\n+                                          Iterable<String> examplePaths) {\n+        requireNonNull(serviceType, \"serviceType\");\n+        return examplePaths(serviceType.getName(), methodName, examplePaths);\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(String serviceName, String methodName, String... examplePaths) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1597274e1bf0fa4ca028f3730f745873c86f6d9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3NDQyMw==", "bodyText": "paths? (like queryStrings below)", "url": "https://github.com/line/armeria/pull/2546#discussion_r389574423", "createdAt": "2020-03-09T10:27:51Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/docs/DocServiceBuilder.java", "diffHunk": "@@ -183,6 +186,95 @@ private DocServiceBuilder exampleHttpHeaders0(String serviceName, String methodN\n         return this;\n     }\n \n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(Class<?> serviceType, String methodName, String... examplePaths) {\n+        requireNonNull(serviceType, \"serviceType\");\n+        return examplePaths(serviceType.getName(), methodName, examplePaths);\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(Class<?> serviceType, String methodName,\n+                                          Iterable<String> examplePaths) {\n+        requireNonNull(serviceType, \"serviceType\");\n+        return examplePaths(serviceType.getName(), methodName, examplePaths);\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(String serviceName, String methodName, String... examplePaths) {\n+        requireNonNull(examplePaths, \"examplePaths\");\n+        return examplePaths(serviceName, methodName, ImmutableList.copyOf(examplePaths));\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(String serviceName, String methodName,\n+                                          Iterable<String> examplePaths) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1597274e1bf0fa4ca028f3730f745873c86f6d9"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3NDYzNg==", "bodyText": "This is not addressed yet.", "url": "https://github.com/line/armeria/pull/2546#discussion_r389574636", "createdAt": "2020-03-09T10:28:17Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/docs/MethodInfo.java", "diffHunk": "@@ -108,6 +114,8 @@ public MethodInfo(String name,\n         this.exampleHttpHeaders = ImmutableList.copyOf(requireNonNull(exampleHttpHeaders,\n                                                                       \"exampleHttpHeaders\"));\n         this.exampleRequests = ImmutableList.copyOf(requireNonNull(exampleRequests, \"exampleRequests\"));\n+        this.examplePaths = ImmutableList.copyOf(requireNonNull(examplePaths, \"examplePaths\"));\n+        this.exampleQueries = ImmutableList.copyOf(requireNonNull(exampleQueries, \"exampleQueries\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMxNDUxNw=="}, "originalCommit": {"oid": "10c9559d14cb062b437a566ba03e148ef33a51d3"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "773418ffe0052414485761a06f07ada9610a8a8a", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/773418ffe0052414485761a06f07ada9610a8a8a", "committedDate": "2020-03-09T11:12:39Z", "message": "Address comments by @trustin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "908e99eff3202789c6b3bde5eb90f99e85d01e4a", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/908e99eff3202789c6b3bde5eb90f99e85d01e4a", "committedDate": "2020-03-09T12:56:55Z", "message": "Address comments by @trustin / Use normalized path and queryString"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNjUxMjQ4", "url": "https://github.com/line/armeria/pull/2546#pullrequestreview-371651248", "createdAt": "2020-03-10T02:54:19Z", "commit": {"oid": "908e99eff3202789c6b3bde5eb90f99e85d01e4a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMjo1NDoxOVrOFz_5IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMjo1NDoxOVrOFz_5IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2ODUxMw==", "bodyText": "{} -> %s", "url": "https://github.com/line/armeria/pull/2546#discussion_r390068513", "createdAt": "2020-03-10T02:54:19Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/docs/MethodInfo.java", "diffHunk": "@@ -117,16 +118,25 @@ public MethodInfo(String name,\n                                                                       \"exampleHttpHeaders\"));\n         this.exampleRequests = ImmutableList.copyOf(requireNonNull(exampleRequests, \"exampleRequests\"));\n \n-        this.examplePaths = ImmutableList.copyOf(requireNonNull(examplePaths, \"examplePaths\"));\n-        this.examplePaths.forEach(path -> checkArgument(PathAndQuery.parse(path) != null,\n-                                                        \"examplePaths contains an invalid path: {}\", path));\n+        requireNonNull(examplePaths, \"examplePaths\");\n+        final ImmutableList.Builder<String> examplePathsBuilder =\n+                ImmutableList.builderWithExpectedSize(Iterables.size(examplePaths));\n+        for (String path : examplePaths) {\n+            final PathAndQuery pathAndQuery = PathAndQuery.parse(path);\n+            checkArgument(pathAndQuery != null, \"examplePaths contains an invalid path: {}\", path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "908e99eff3202789c6b3bde5eb90f99e85d01e4a"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNjUxMjcz", "url": "https://github.com/line/armeria/pull/2546#pullrequestreview-371651273", "createdAt": "2020-03-10T02:54:26Z", "commit": {"oid": "908e99eff3202789c6b3bde5eb90f99e85d01e4a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMjo1NDoyNlrOFz_5OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMjo1NDoyNlrOFz_5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2ODUzNg==", "bodyText": "{} -> %s", "url": "https://github.com/line/armeria/pull/2546#discussion_r390068536", "createdAt": "2020-03-10T02:54:26Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/docs/MethodInfo.java", "diffHunk": "@@ -117,16 +118,25 @@ public MethodInfo(String name,\n                                                                       \"exampleHttpHeaders\"));\n         this.exampleRequests = ImmutableList.copyOf(requireNonNull(exampleRequests, \"exampleRequests\"));\n \n-        this.examplePaths = ImmutableList.copyOf(requireNonNull(examplePaths, \"examplePaths\"));\n-        this.examplePaths.forEach(path -> checkArgument(PathAndQuery.parse(path) != null,\n-                                                        \"examplePaths contains an invalid path: {}\", path));\n+        requireNonNull(examplePaths, \"examplePaths\");\n+        final ImmutableList.Builder<String> examplePathsBuilder =\n+                ImmutableList.builderWithExpectedSize(Iterables.size(examplePaths));\n+        for (String path : examplePaths) {\n+            final PathAndQuery pathAndQuery = PathAndQuery.parse(path);\n+            checkArgument(pathAndQuery != null, \"examplePaths contains an invalid path: {}\", path);\n+            examplePathsBuilder.add(pathAndQuery.path());\n+        }\n+        this.examplePaths = examplePathsBuilder.build();\n \n-        this.exampleQueries = ImmutableList.copyOf(requireNonNull(exampleQueries, \"exampleQueries\"));\n-        this.exampleQueries.forEach(query -> {\n+        requireNonNull(exampleQueries, \"exampleQueries\");\n+        final ImmutableList.Builder<String> exampleQueriesBuilder =\n+                ImmutableList.builderWithExpectedSize(Iterables.size(exampleQueries));\n+        for (String query : exampleQueries) {\n             final PathAndQuery pathAndQuery = PathAndQuery.parse(query.startsWith(\"?\") ? query : '?' + query);\n-            checkArgument(pathAndQuery != null,\n-                          \"exampleQueries contains an invalid query string: {}\", query);\n-        });\n+            checkArgument(pathAndQuery != null, \"exampleQueries contains an invalid query string: {}\", query);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "908e99eff3202789c6b3bde5eb90f99e85d01e4a"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10d07ee593d20e2e9eb3a86e4421874f0410e707", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/10d07ee593d20e2e9eb3a86e4421874f0410e707", "committedDate": "2020-03-10T03:26:43Z", "message": "Address comments by @trustin / Preserve the original queryString"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45826bb77486b7cea0539c5504113144b7e46844", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/45826bb77486b7cea0539c5504113144b7e46844", "committedDate": "2020-03-10T03:40:38Z", "message": "Preserve original queryString in DocService client"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNjczMzc4", "url": "https://github.com/line/armeria/pull/2546#pullrequestreview-371673378", "createdAt": "2020-03-10T04:18:33Z", "commit": {"oid": "45826bb77486b7cea0539c5504113144b7e46844"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 633, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}