{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwNDAyMTM0", "number": 3135, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMTo1MToyMFrOEyJtiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMjowMjo0NFrOE1Mc9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDIzMzY4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/KeyedCircuitBreakerMapping.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMTo1MToyMFrOHoohDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjo1OTo1NFrOHpG3-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM2ODkxMQ==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            key = host + '#' + method + \"#\" + path;\n          \n          \n            \n                            key = host + '#' + method + '#' + path;", "url": "https://github.com/line/armeria/pull/3135#discussion_r512368911", "createdAt": "2020-10-27T01:51:20Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/KeyedCircuitBreakerMapping.java", "diffHunk": "@@ -57,20 +57,47 @@ public CircuitBreaker get(ClientRequestContext ctx, Request req) throws Exceptio\n         final String key;\n         final String host;\n         final String method;\n+        final String path;\n         switch (mappingKey) {\n             case HOST:\n                 key = host = host(ctx);\n                 method = null;\n+                path = null;\n                 break;\n             case METHOD:\n                 host = null;\n                 key = method = method(ctx);\n+                path = null;\n+                break;\n+            case PATH:\n+                host = null;\n+                method = null;\n+                key = path = path(ctx);\n                 break;\n             case HOST_AND_METHOD:\n                 host = host(ctx);\n                 method = method(ctx);\n+                path = null;\n                 key = host + '#' + method;\n                 break;\n+            case HOST_AND_PATH:\n+                host = host(ctx);\n+                method = null;\n+                path = path(ctx);\n+                key = host + '#' + path;\n+                break;\n+            case METHOD_AND_PATH:\n+                host = null;\n+                method = method(ctx);\n+                path = path(ctx);\n+                key = method + '#' + path;\n+                break;\n+            case HOST_AND_METHOD_AND_PATH:\n+                host = host(ctx);\n+                method = method(ctx);\n+                path = path(ctx);\n+                key = host + '#' + method + \"#\" + path;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "963806e07c7b834dd62fb41c14a9b256bf2e3eae"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg2NjI5Ng==", "bodyText": "This part has now changed. I made sure to use the char.", "url": "https://github.com/line/armeria/pull/3135#discussion_r512866296", "createdAt": "2020-10-27T16:59:54Z", "author": {"login": "haithamgabr"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/KeyedCircuitBreakerMapping.java", "diffHunk": "@@ -57,20 +57,47 @@ public CircuitBreaker get(ClientRequestContext ctx, Request req) throws Exceptio\n         final String key;\n         final String host;\n         final String method;\n+        final String path;\n         switch (mappingKey) {\n             case HOST:\n                 key = host = host(ctx);\n                 method = null;\n+                path = null;\n                 break;\n             case METHOD:\n                 host = null;\n                 key = method = method(ctx);\n+                path = null;\n+                break;\n+            case PATH:\n+                host = null;\n+                method = null;\n+                key = path = path(ctx);\n                 break;\n             case HOST_AND_METHOD:\n                 host = host(ctx);\n                 method = method(ctx);\n+                path = null;\n                 key = host + '#' + method;\n                 break;\n+            case HOST_AND_PATH:\n+                host = host(ctx);\n+                method = null;\n+                path = path(ctx);\n+                key = host + '#' + path;\n+                break;\n+            case METHOD_AND_PATH:\n+                host = null;\n+                method = method(ctx);\n+                path = path(ctx);\n+                key = method + '#' + path;\n+                break;\n+            case HOST_AND_METHOD_AND_PATH:\n+                host = host(ctx);\n+                method = method(ctx);\n+                path = path(ctx);\n+                key = host + '#' + method + \"#\" + path;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM2ODkxMQ=="}, "originalCommit": {"oid": "963806e07c7b834dd62fb41c14a9b256bf2e3eae"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDM0NzA0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMjo1MjoyM1rOHopi9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzowMDoxNVrOHpG5FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4NTc4Mw==", "bodyText": "The factory methods in this class are overly crowded.\nI think we can introduce a builder class that builds a CircuitBreakerMapping fluently.\nFor example:\nCircuitBreakerMapping mapping = \n    CircuitBreakerMapping.builder()\n                         .perMethod()\n                         .perPath()\n                         ...\n                        .build()\n\nCircuitBreakerClient.newDecorator(mapping, rule);", "url": "https://github.com/line/armeria/pull/3135#discussion_r512385783", "createdAt": "2020-10-27T02:52:23Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClient.java", "diffHunk": "@@ -183,6 +212,95 @@\n         return newDecorator(CircuitBreakerMapping.perHostAndMethod(factory), ruleWithContent);\n     }\n \n+    /**\n+     * Creates a new decorator that binds one {@link CircuitBreaker} per host and request path with\n+     * the specified {@link CircuitBreakerRule}.\n+     *\n+     * <p>Since {@link CircuitBreaker} is a unit of failure detection, don't reuse the same instance for\n+     * unrelated services.\n+     *\n+     * @param factory a function that takes a host+path and creates a new {@link CircuitBreaker}.\n+     */\n+    public static Function<? super HttpClient, CircuitBreakerClient>\n+    newPerHostAndPathDecorator(BiFunction<String, String, ? extends CircuitBreaker> factory,\n+                               CircuitBreakerRule rule) {\n+        return newDecorator(CircuitBreakerMapping.perHostAndPath(factory), rule);\n+    }\n+\n+    /**\n+     * Creates a new decorator that binds one {@link CircuitBreaker} per host and request path with\n+     * the specified {@link CircuitBreakerRuleWithContent}.\n+     *\n+     * <p>Since {@link CircuitBreaker} is a unit of failure detection, don't reuse the same instance for\n+     * unrelated services.\n+     *\n+     * @param factory a function that takes a host+path and creates a new {@link CircuitBreaker}.\n+     */\n+    public static Function<? super HttpClient, CircuitBreakerClient>\n+    newPerHostAndPathDecorator(BiFunction<String, String, ? extends CircuitBreaker> factory,\n+                               CircuitBreakerRuleWithContent<HttpResponse> ruleWithContent) {\n+        return newDecorator(CircuitBreakerMapping.perHostAndPath(factory), ruleWithContent);\n+    }\n+\n+    /**\n+     * Creates a new decorator that binds one {@link CircuitBreaker} per request method path with\n+     * the specified {@link CircuitBreakerRule}.\n+     *\n+     * <p>Since {@link CircuitBreaker} is a unit of failure detection, don't reuse the same instance for\n+     * unrelated services.\n+     *\n+     * @param factory a function that takes a method+path and creates a new {@link CircuitBreaker}.\n+     */\n+    public static Function<? super HttpClient, CircuitBreakerClient>\n+    newPerMethodAndPathDecorator(BiFunction<String, String, ? extends CircuitBreaker> factory,\n+                                 CircuitBreakerRule rule) {\n+        return newDecorator(CircuitBreakerMapping.perMethodAndPath(factory), rule);\n+    }\n+\n+    /**\n+     * Creates a new decorator that binds one {@link CircuitBreaker} per request method and path with\n+     * the specified {@link CircuitBreakerRuleWithContent}.\n+     *\n+     * <p>Since {@link CircuitBreaker} is a unit of failure detection, don't reuse the same instance for\n+     * unrelated services.\n+     *\n+     * @param factory a function that takes a method+path and creates a new {@link CircuitBreaker}.\n+     */\n+    public static Function<? super HttpClient, CircuitBreakerClient>\n+    newPerMethodAndPathDecorator(BiFunction<String, String, ? extends CircuitBreaker> factory,\n+                                 CircuitBreakerRuleWithContent<HttpResponse> ruleWithContent) {\n+        return newDecorator(CircuitBreakerMapping.perMethodAndPath(factory), ruleWithContent);\n+    }\n+\n+    /**\n+     * Creates a new decorator that binds one {@link CircuitBreaker} per host, request method and path with\n+     * the specified {@link CircuitBreakerRule}.\n+     *\n+     * <p>Since {@link CircuitBreaker} is a unit of failure detection, don't reuse the same instance for\n+     * unrelated services.\n+     *\n+     * @param factory a function that takes a host+method+path and creates a new {@link CircuitBreaker}.\n+     */\n+    public static Function<? super HttpClient, CircuitBreakerClient>\n+    newPerHostAndMethodAndPathDecorator(CircuitBreakerFactory factory, CircuitBreakerRule rule) {\n+        return newDecorator(CircuitBreakerMapping.perHostAndMethodAndPath(factory), rule);\n+    }\n+\n+    /**\n+     * Creates a new decorator that binds one {@link CircuitBreaker} per host, request method and path with\n+     * the specified {@link CircuitBreakerRuleWithContent}.\n+     *\n+     * <p>Since {@link CircuitBreaker} is a unit of failure detection, don't reuse the same instance for\n+     * unrelated services.\n+     *\n+     * @param factory a function that takes a host+method+path and creates a new {@link CircuitBreaker}.\n+     */\n+    public static Function<? super HttpClient, CircuitBreakerClient>\n+    newPerHostAndMethodAndPathDecorator(CircuitBreakerFactory factory,\n+                                        CircuitBreakerRuleWithContent<HttpResponse> ruleWithContent) {\n+        return newDecorator(CircuitBreakerMapping.perHostAndMethodAndPath(factory), ruleWithContent);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "963806e07c7b834dd62fb41c14a9b256bf2e3eae"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg2NjU4MA==", "bodyText": "Done.", "url": "https://github.com/line/armeria/pull/3135#discussion_r512866580", "createdAt": "2020-10-27T17:00:15Z", "author": {"login": "haithamgabr"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClient.java", "diffHunk": "@@ -183,6 +212,95 @@\n         return newDecorator(CircuitBreakerMapping.perHostAndMethod(factory), ruleWithContent);\n     }\n \n+    /**\n+     * Creates a new decorator that binds one {@link CircuitBreaker} per host and request path with\n+     * the specified {@link CircuitBreakerRule}.\n+     *\n+     * <p>Since {@link CircuitBreaker} is a unit of failure detection, don't reuse the same instance for\n+     * unrelated services.\n+     *\n+     * @param factory a function that takes a host+path and creates a new {@link CircuitBreaker}.\n+     */\n+    public static Function<? super HttpClient, CircuitBreakerClient>\n+    newPerHostAndPathDecorator(BiFunction<String, String, ? extends CircuitBreaker> factory,\n+                               CircuitBreakerRule rule) {\n+        return newDecorator(CircuitBreakerMapping.perHostAndPath(factory), rule);\n+    }\n+\n+    /**\n+     * Creates a new decorator that binds one {@link CircuitBreaker} per host and request path with\n+     * the specified {@link CircuitBreakerRuleWithContent}.\n+     *\n+     * <p>Since {@link CircuitBreaker} is a unit of failure detection, don't reuse the same instance for\n+     * unrelated services.\n+     *\n+     * @param factory a function that takes a host+path and creates a new {@link CircuitBreaker}.\n+     */\n+    public static Function<? super HttpClient, CircuitBreakerClient>\n+    newPerHostAndPathDecorator(BiFunction<String, String, ? extends CircuitBreaker> factory,\n+                               CircuitBreakerRuleWithContent<HttpResponse> ruleWithContent) {\n+        return newDecorator(CircuitBreakerMapping.perHostAndPath(factory), ruleWithContent);\n+    }\n+\n+    /**\n+     * Creates a new decorator that binds one {@link CircuitBreaker} per request method path with\n+     * the specified {@link CircuitBreakerRule}.\n+     *\n+     * <p>Since {@link CircuitBreaker} is a unit of failure detection, don't reuse the same instance for\n+     * unrelated services.\n+     *\n+     * @param factory a function that takes a method+path and creates a new {@link CircuitBreaker}.\n+     */\n+    public static Function<? super HttpClient, CircuitBreakerClient>\n+    newPerMethodAndPathDecorator(BiFunction<String, String, ? extends CircuitBreaker> factory,\n+                                 CircuitBreakerRule rule) {\n+        return newDecorator(CircuitBreakerMapping.perMethodAndPath(factory), rule);\n+    }\n+\n+    /**\n+     * Creates a new decorator that binds one {@link CircuitBreaker} per request method and path with\n+     * the specified {@link CircuitBreakerRuleWithContent}.\n+     *\n+     * <p>Since {@link CircuitBreaker} is a unit of failure detection, don't reuse the same instance for\n+     * unrelated services.\n+     *\n+     * @param factory a function that takes a method+path and creates a new {@link CircuitBreaker}.\n+     */\n+    public static Function<? super HttpClient, CircuitBreakerClient>\n+    newPerMethodAndPathDecorator(BiFunction<String, String, ? extends CircuitBreaker> factory,\n+                                 CircuitBreakerRuleWithContent<HttpResponse> ruleWithContent) {\n+        return newDecorator(CircuitBreakerMapping.perMethodAndPath(factory), ruleWithContent);\n+    }\n+\n+    /**\n+     * Creates a new decorator that binds one {@link CircuitBreaker} per host, request method and path with\n+     * the specified {@link CircuitBreakerRule}.\n+     *\n+     * <p>Since {@link CircuitBreaker} is a unit of failure detection, don't reuse the same instance for\n+     * unrelated services.\n+     *\n+     * @param factory a function that takes a host+method+path and creates a new {@link CircuitBreaker}.\n+     */\n+    public static Function<? super HttpClient, CircuitBreakerClient>\n+    newPerHostAndMethodAndPathDecorator(CircuitBreakerFactory factory, CircuitBreakerRule rule) {\n+        return newDecorator(CircuitBreakerMapping.perHostAndMethodAndPath(factory), rule);\n+    }\n+\n+    /**\n+     * Creates a new decorator that binds one {@link CircuitBreaker} per host, request method and path with\n+     * the specified {@link CircuitBreakerRuleWithContent}.\n+     *\n+     * <p>Since {@link CircuitBreaker} is a unit of failure detection, don't reuse the same instance for\n+     * unrelated services.\n+     *\n+     * @param factory a function that takes a host+method+path and creates a new {@link CircuitBreaker}.\n+     */\n+    public static Function<? super HttpClient, CircuitBreakerClient>\n+    newPerHostAndMethodAndPathDecorator(CircuitBreakerFactory factory,\n+                                        CircuitBreakerRuleWithContent<HttpResponse> ruleWithContent) {\n+        return newDecorator(CircuitBreakerMapping.perHostAndMethodAndPath(factory), ruleWithContent);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4NTc4Mw=="}, "originalCommit": {"oid": "963806e07c7b834dd62fb41c14a9b256bf2e3eae"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTE2MzIyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMapping.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMjoxMjoyMVrOHpXdUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjoyODozMFrOHpy27A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEzODAwMA==", "bodyText": "Could you move this builder class to top-level for keeping consistency with other builders?\nAdd static builder() method for creating this builder?", "url": "https://github.com/line/armeria/pull/3135#discussion_r513138000", "createdAt": "2020-10-28T02:12:21Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMapping.java", "diffHunk": "@@ -31,6 +30,62 @@\n @FunctionalInterface\n public interface CircuitBreakerMapping {\n \n+    /**\n+     * Builder class for building a CircuitBreakerMapping based on a combination of host, method and path.\n+     */\n+    class Builder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080a3a1799e21948b9d43f0991138cdb639acd19"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU4NjkyNA==", "bodyText": "Done", "url": "https://github.com/line/armeria/pull/3135#discussion_r513586924", "createdAt": "2020-10-28T16:28:30Z", "author": {"login": "haithamgabr"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMapping.java", "diffHunk": "@@ -31,6 +30,62 @@\n @FunctionalInterface\n public interface CircuitBreakerMapping {\n \n+    /**\n+     * Builder class for building a CircuitBreakerMapping based on a combination of host, method and path.\n+     */\n+    class Builder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEzODAwMA=="}, "originalCommit": {"oid": "080a3a1799e21948b9d43f0991138cdb639acd19"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTE3MTUxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMapping.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMjoxNzoxNVrOHpXiEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjoyNzo1MlrOHpy08g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEzOTIxOQ==", "bodyText": "How about raising an IllegalStateException if all per{Host,Method,Path} are false?", "url": "https://github.com/line/armeria/pull/3135#discussion_r513139219", "createdAt": "2020-10-28T02:17:15Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMapping.java", "diffHunk": "@@ -31,6 +30,62 @@\n @FunctionalInterface\n public interface CircuitBreakerMapping {\n \n+    /**\n+     * Builder class for building a CircuitBreakerMapping based on a combination of host, method and path.\n+     */\n+    class Builder {\n+        private boolean perHost;\n+        private boolean perMethod;\n+        private boolean perPath;\n+\n+        /**\n+         * Adds host dimension to the mapping Key.\n+         * @return this Builder.\n+         */\n+        public Builder perHost() {\n+            perHost = true;\n+            return this;\n+        }\n+\n+        /**\n+         * Adds method dimension to the mapping Key.\n+         * @return this Builder.\n+         */\n+        public Builder perMethod() {\n+            perMethod = true;\n+            return this;\n+        }\n+\n+        /**\n+         * Adds path dimension to the mapping Key.\n+         * @return this Builder.\n+         */\n+        public Builder perPath() {\n+            perPath = true;\n+            return this;\n+        }\n+\n+        /**\n+         * Builds the {@link CircuitBreakerMapping} using a three-dimensional factory.\n+         * @return a {@link CircuitBreakerMapping} based on the added dimensions.\n+         */\n+        public CircuitBreakerMapping build(CircuitBreakerFactory factory) {\n+            return new KeyedCircuitBreakerMapping(this, factory);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080a3a1799e21948b9d43f0991138cdb639acd19"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU4NjQxOA==", "bodyText": "Done", "url": "https://github.com/line/armeria/pull/3135#discussion_r513586418", "createdAt": "2020-10-28T16:27:52Z", "author": {"login": "haithamgabr"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMapping.java", "diffHunk": "@@ -31,6 +30,62 @@\n @FunctionalInterface\n public interface CircuitBreakerMapping {\n \n+    /**\n+     * Builder class for building a CircuitBreakerMapping based on a combination of host, method and path.\n+     */\n+    class Builder {\n+        private boolean perHost;\n+        private boolean perMethod;\n+        private boolean perPath;\n+\n+        /**\n+         * Adds host dimension to the mapping Key.\n+         * @return this Builder.\n+         */\n+        public Builder perHost() {\n+            perHost = true;\n+            return this;\n+        }\n+\n+        /**\n+         * Adds method dimension to the mapping Key.\n+         * @return this Builder.\n+         */\n+        public Builder perMethod() {\n+            perMethod = true;\n+            return this;\n+        }\n+\n+        /**\n+         * Adds path dimension to the mapping Key.\n+         * @return this Builder.\n+         */\n+        public Builder perPath() {\n+            perPath = true;\n+            return this;\n+        }\n+\n+        /**\n+         * Builds the {@link CircuitBreakerMapping} using a three-dimensional factory.\n+         * @return a {@link CircuitBreakerMapping} based on the added dimensions.\n+         */\n+        public CircuitBreakerMapping build(CircuitBreakerFactory factory) {\n+            return new KeyedCircuitBreakerMapping(this, factory);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEzOTIxOQ=="}, "originalCommit": {"oid": "080a3a1799e21948b9d43f0991138cdb639acd19"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTE5NDU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/KeyedCircuitBreakerMapping.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMjoyOTo0OFrOHpXvLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjoyNzo0NlrOHpy0jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE0MjU3Mw==", "bodyText": "I think we can drop # if one of isPer* flags is false.\nGuava Joiner could be useful for this case.\nstatic Joiner keyJoiner = Joiner.on('#').skipNulls();\nString key = keyJoiner.join(host, method, path);", "url": "https://github.com/line/armeria/pull/3135#discussion_r513142573", "createdAt": "2020-10-28T02:29:48Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/KeyedCircuitBreakerMapping.java", "diffHunk": "@@ -20,66 +20,59 @@\n \n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n-import java.util.function.BiFunction;\n \n import com.linecorp.armeria.client.ClientRequestContext;\n import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.Request;\n import com.linecorp.armeria.common.RpcRequest;\n \n /**\n- * A {@link CircuitBreakerMapping} that binds a {@link CircuitBreaker} to its {@link MappingKey}.\n- * If there is no circuit breaker bound to the key, a new one is created by using the given circuit breaker\n- * factory.\n+ * A {@link CircuitBreakerMapping} that binds a {@link CircuitBreaker} to a combination of host, method and/or\n+ * path. If there is no circuit breaker bound to the key, a new one is created by using the given circuit\n+ * breaker factory.\n  */\n final class KeyedCircuitBreakerMapping implements CircuitBreakerMapping {\n \n-    static final CircuitBreakerMapping hostMapping =\n-            new KeyedCircuitBreakerMapping(MappingKey.HOST, (host, method) -> CircuitBreaker.of(host));\n+    static final CircuitBreakerMapping hostMapping = new KeyedCircuitBreakerMapping(\n+            new CircuitBreakerMapping.Builder().perHost(),\n+            (host, method, path) -> CircuitBreaker.of(host));\n \n     private final ConcurrentMap<String, CircuitBreaker> mapping = new ConcurrentHashMap<>();\n \n-    private final MappingKey mappingKey;\n-    private final BiFunction<String, String, ? extends CircuitBreaker> factory;\n+    private final boolean isPerHost;\n+    private final boolean isPerMethod;\n+    private final boolean isPerPath;\n+    private final CircuitBreakerFactory factory;\n \n     /**\n-     * Creates a new {@link KeyedCircuitBreakerMapping} with the given {@link MappingKey} and\n+     * Creates a new {@link KeyedCircuitBreakerMapping} with the given {@link CircuitBreakerMapping.Builder} and\n      * {@link CircuitBreaker} factory.\n      */\n-    KeyedCircuitBreakerMapping(MappingKey mappingKey,\n-                               BiFunction<String, String, ? extends CircuitBreaker> factory) {\n-        this.mappingKey = requireNonNull(mappingKey, \"mappingKey\");\n+    KeyedCircuitBreakerMapping(CircuitBreakerMapping.Builder mappingBuilder, CircuitBreakerFactory factory) {\n+        requireNonNull(mappingBuilder, \"mappingBuilder\");\n+        isPerHost = mappingBuilder.isPerHost();\n+        isPerMethod = mappingBuilder.isPerMethod();\n+        isPerPath = mappingBuilder.isPerPath();\n         this.factory = requireNonNull(factory, \"factory\");\n     }\n \n     @Override\n     public CircuitBreaker get(ClientRequestContext ctx, Request req) throws Exception {\n-        final String key;\n-        final String host;\n-        final String method;\n-        switch (mappingKey) {\n-            case HOST:\n-                key = host = host(ctx);\n-                method = null;\n-                break;\n-            case METHOD:\n-                host = null;\n-                key = method = method(ctx);\n-                break;\n-            case HOST_AND_METHOD:\n-                host = host(ctx);\n-                method = method(ctx);\n-                key = host + '#' + method;\n-                break;\n-            default:\n-                // should never reach here.\n-                throw new Error();\n+        if (!isPerHost && !isPerMethod && !isPerPath) {\n+            // should never reach here.\n+            throw new Error();\n         }\n+        final String host = isPerHost ? host(ctx) : null;\n+        final String method = isPerMethod ? method(ctx) : null;\n+        final String path = isPerPath ? path(ctx) : null;\n+        final String key =\n+                (isPerHost ? host : \"\") + '#' + (isPerMethod ? method : \"\") + '#' + (isPerPath ? path : \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080a3a1799e21948b9d43f0991138cdb639acd19"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU4NjMxNg==", "bodyText": "Done through java streams.", "url": "https://github.com/line/armeria/pull/3135#discussion_r513586316", "createdAt": "2020-10-28T16:27:46Z", "author": {"login": "haithamgabr"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/KeyedCircuitBreakerMapping.java", "diffHunk": "@@ -20,66 +20,59 @@\n \n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n-import java.util.function.BiFunction;\n \n import com.linecorp.armeria.client.ClientRequestContext;\n import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.Request;\n import com.linecorp.armeria.common.RpcRequest;\n \n /**\n- * A {@link CircuitBreakerMapping} that binds a {@link CircuitBreaker} to its {@link MappingKey}.\n- * If there is no circuit breaker bound to the key, a new one is created by using the given circuit breaker\n- * factory.\n+ * A {@link CircuitBreakerMapping} that binds a {@link CircuitBreaker} to a combination of host, method and/or\n+ * path. If there is no circuit breaker bound to the key, a new one is created by using the given circuit\n+ * breaker factory.\n  */\n final class KeyedCircuitBreakerMapping implements CircuitBreakerMapping {\n \n-    static final CircuitBreakerMapping hostMapping =\n-            new KeyedCircuitBreakerMapping(MappingKey.HOST, (host, method) -> CircuitBreaker.of(host));\n+    static final CircuitBreakerMapping hostMapping = new KeyedCircuitBreakerMapping(\n+            new CircuitBreakerMapping.Builder().perHost(),\n+            (host, method, path) -> CircuitBreaker.of(host));\n \n     private final ConcurrentMap<String, CircuitBreaker> mapping = new ConcurrentHashMap<>();\n \n-    private final MappingKey mappingKey;\n-    private final BiFunction<String, String, ? extends CircuitBreaker> factory;\n+    private final boolean isPerHost;\n+    private final boolean isPerMethod;\n+    private final boolean isPerPath;\n+    private final CircuitBreakerFactory factory;\n \n     /**\n-     * Creates a new {@link KeyedCircuitBreakerMapping} with the given {@link MappingKey} and\n+     * Creates a new {@link KeyedCircuitBreakerMapping} with the given {@link CircuitBreakerMapping.Builder} and\n      * {@link CircuitBreaker} factory.\n      */\n-    KeyedCircuitBreakerMapping(MappingKey mappingKey,\n-                               BiFunction<String, String, ? extends CircuitBreaker> factory) {\n-        this.mappingKey = requireNonNull(mappingKey, \"mappingKey\");\n+    KeyedCircuitBreakerMapping(CircuitBreakerMapping.Builder mappingBuilder, CircuitBreakerFactory factory) {\n+        requireNonNull(mappingBuilder, \"mappingBuilder\");\n+        isPerHost = mappingBuilder.isPerHost();\n+        isPerMethod = mappingBuilder.isPerMethod();\n+        isPerPath = mappingBuilder.isPerPath();\n         this.factory = requireNonNull(factory, \"factory\");\n     }\n \n     @Override\n     public CircuitBreaker get(ClientRequestContext ctx, Request req) throws Exception {\n-        final String key;\n-        final String host;\n-        final String method;\n-        switch (mappingKey) {\n-            case HOST:\n-                key = host = host(ctx);\n-                method = null;\n-                break;\n-            case METHOD:\n-                host = null;\n-                key = method = method(ctx);\n-                break;\n-            case HOST_AND_METHOD:\n-                host = host(ctx);\n-                method = method(ctx);\n-                key = host + '#' + method;\n-                break;\n-            default:\n-                // should never reach here.\n-                throw new Error();\n+        if (!isPerHost && !isPerMethod && !isPerPath) {\n+            // should never reach here.\n+            throw new Error();\n         }\n+        final String host = isPerHost ? host(ctx) : null;\n+        final String method = isPerMethod ? method(ctx) : null;\n+        final String path = isPerPath ? path(ctx) : null;\n+        final String key =\n+                (isPerHost ? host : \"\") + '#' + (isPerMethod ? method : \"\") + '#' + (isPerPath ? path : \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE0MjU3Mw=="}, "originalCommit": {"oid": "080a3a1799e21948b9d43f0991138cdb639acd19"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjg2MzE3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMDo0NjozMVrOHrJudg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjoxNDowNlrOHrWLTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAxMDE2Ng==", "bodyText": "Need to hide the public constructor.", "url": "https://github.com/line/armeria/pull/3135#discussion_r515010166", "createdAt": "2020-10-30T10:46:31Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+/**\n+ * Builder class for building a CircuitBreakerMapping based on a combination of host, method and path.\n+ */\n+public final class CircuitBreakerMappingBuilder {\n+    private boolean perHost;\n+    private boolean perMethod;\n+    private boolean perPath;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a1f667951bc8151921169feba8269038cdb6484"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxNDE1Nw==", "bodyText": "Done", "url": "https://github.com/line/armeria/pull/3135#discussion_r515214157", "createdAt": "2020-10-30T16:14:06Z", "author": {"login": "haithamgabr"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+/**\n+ * Builder class for building a CircuitBreakerMapping based on a combination of host, method and path.\n+ */\n+public final class CircuitBreakerMappingBuilder {\n+    private boolean perHost;\n+    private boolean perMethod;\n+    private boolean perPath;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAxMDE2Ng=="}, "originalCommit": {"oid": "8a1f667951bc8151921169feba8269038cdb6484"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjk5MjQ3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyNDo1MFrOHrK68A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjoxMjo0OVrOHrWIbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAyOTc0NA==", "bodyText": "Thanks! \ud83d\ude47", "url": "https://github.com/line/armeria/pull/3135#discussion_r515029744", "createdAt": "2020-10-30T11:24:50Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClient.java", "diffHunk": "@@ -161,7 +190,10 @@\n      * unrelated services.\n      *\n      * @param factory a function that takes a host+method and creates a new {@link CircuitBreaker}.\n+     *\n+     * @deprecated Use newDecorator(), building a CircuitBreakerMapping using CircuitBreakerMapping.Builder().\n      */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a1f667951bc8151921169feba8269038cdb6484"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxMzQyMw==", "bodyText": "My pleasure :)", "url": "https://github.com/line/armeria/pull/3135#discussion_r515213423", "createdAt": "2020-10-30T16:12:49Z", "author": {"login": "haithamgabr"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClient.java", "diffHunk": "@@ -161,7 +190,10 @@\n      * unrelated services.\n      *\n      * @param factory a function that takes a host+method and creates a new {@link CircuitBreaker}.\n+     *\n+     * @deprecated Use newDecorator(), building a CircuitBreakerMapping using CircuitBreakerMapping.Builder().\n      */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAyOTc0NA=="}, "originalCommit": {"oid": "8a1f667951bc8151921169feba8269038cdb6484"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjk5NzI2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyNjowM1rOHrK9lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyNjowM1rOHrK9lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMDQyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Given a combination of host, method and path, creates a CircuitBreaker.\n          \n          \n            \n                 * Given a combination of host, method and path, creates a {@link CircuitBreaker}.", "url": "https://github.com/line/armeria/pull/3135#discussion_r515030420", "createdAt": "2020-10-30T11:26:03Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerFactory.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A functional interface that represents a mapper factory, mapping a combination of host, method and path\n+ * to a CircuitBreaker.\n+ */\n+@FunctionalInterface\n+interface CircuitBreakerFactory {\n+    /**\n+     * Given a combination of host, method and path, creates a CircuitBreaker.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a1f667951bc8151921169feba8269038cdb6484"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjk5Nzg0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyNjoxM1rOHrK98w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyNjoxM1rOHrK98w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMDUxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the CircuitBreaker instance corresponding to this combination.\n          \n          \n            \n                 * @return the {@link CircuitBreaker} instance corresponding to this combination.", "url": "https://github.com/line/armeria/pull/3135#discussion_r515030515", "createdAt": "2020-10-30T11:26:13Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerFactory.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A functional interface that represents a mapper factory, mapping a combination of host, method and path\n+ * to a CircuitBreaker.\n+ */\n+@FunctionalInterface\n+interface CircuitBreakerFactory {\n+    /**\n+     * Given a combination of host, method and path, creates a CircuitBreaker.\n+     * @param host the host of the context endpoint.\n+     * @param method the method of the context request.\n+     * @param path the path of the context request.\n+     * @return the CircuitBreaker instance corresponding to this combination.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a1f667951bc8151921169feba8269038cdb6484"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjk5OTEyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyNjozNVrOHrK-rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyNjozNVrOHrK-rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMDcwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * to a CircuitBreaker.\n          \n          \n            \n             * to a {@link CircuitBreaker}.", "url": "https://github.com/line/armeria/pull/3135#discussion_r515030700", "createdAt": "2020-10-30T11:26:35Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerFactory.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A functional interface that represents a mapper factory, mapping a combination of host, method and path\n+ * to a CircuitBreaker.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a1f667951bc8151921169feba8269038cdb6484"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzAwMjE0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMapping.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyNzoyMVrOHrLAWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyNzoyMVrOHrLAWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMTEyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns a Builder that builds a CircuitBreakerMapping by setting host, method and/or path.\n          \n          \n            \n                 * Returns a builder that builds a {@link CircuitBreakerMapping} by setting host, method and/or path.", "url": "https://github.com/line/armeria/pull/3135#discussion_r515031129", "createdAt": "2020-10-30T11:27:21Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMapping.java", "diffHunk": "@@ -22,30 +22,35 @@\n import java.util.function.Function;\n \n import com.linecorp.armeria.client.ClientRequestContext;\n-import com.linecorp.armeria.client.circuitbreaker.KeyedCircuitBreakerMapping.MappingKey;\n import com.linecorp.armeria.common.Request;\n \n /**\n  * Returns a {@link CircuitBreaker} instance from remote invocation parameters.\n  */\n @FunctionalInterface\n public interface CircuitBreakerMapping {\n-\n     /**\n      * Returns the default {@link CircuitBreakerMapping}.\n      */\n     static CircuitBreakerMapping ofDefault() {\n         return KeyedCircuitBreakerMapping.hostMapping;\n     }\n \n+    /**\n+     * Returns a Builder that builds a CircuitBreakerMapping by setting host, method and/or path.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a1f667951bc8151921169feba8269038cdb6484"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzAwMzI4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyNzo0MFrOHrLA-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyNzo0MFrOHrLA-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMTI5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Builder class for building a CircuitBreakerMapping based on a combination of host, method and path.\n          \n          \n            \n             * Builder class for building a {@link CircuitBreakerMapping} based on a combination of host, method and path.", "url": "https://github.com/line/armeria/pull/3135#discussion_r515031291", "createdAt": "2020-10-30T11:27:40Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+/**\n+ * Builder class for building a CircuitBreakerMapping based on a combination of host, method and path.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a1f667951bc8151921169feba8269038cdb6484"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzAwMzg3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyNzo1MVrOHrLBWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyNzo1MVrOHrLBWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMTM4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return this Builder.\n          \n          \n            \n                 * @return this builder.", "url": "https://github.com/line/armeria/pull/3135#discussion_r515031385", "createdAt": "2020-10-30T11:27:51Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+/**\n+ * Builder class for building a CircuitBreakerMapping based on a combination of host, method and path.\n+ */\n+public final class CircuitBreakerMappingBuilder {\n+    private boolean perHost;\n+    private boolean perMethod;\n+    private boolean perPath;\n+\n+    /**\n+     * Adds host dimension to the mapping Key.\n+     * @return this Builder.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a1f667951bc8151921169feba8269038cdb6484"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzAwNDI5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyODowMFrOHrLBmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyODowMFrOHrLBmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMTQ0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return this Builder.\n          \n          \n            \n                 * @return this builder.", "url": "https://github.com/line/armeria/pull/3135#discussion_r515031449", "createdAt": "2020-10-30T11:28:00Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+/**\n+ * Builder class for building a CircuitBreakerMapping based on a combination of host, method and path.\n+ */\n+public final class CircuitBreakerMappingBuilder {\n+    private boolean perHost;\n+    private boolean perMethod;\n+    private boolean perPath;\n+\n+    /**\n+     * Adds host dimension to the mapping Key.\n+     * @return this Builder.\n+     */\n+    public CircuitBreakerMappingBuilder perHost() {\n+        perHost = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Adds method dimension to the mapping Key.\n+     * @return this Builder.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a1f667951bc8151921169feba8269038cdb6484"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzAwNDYxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyODowNVrOHrLBxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyODowNVrOHrLBxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMTQ5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return this Builder.\n          \n          \n            \n                 * @return this builder.", "url": "https://github.com/line/armeria/pull/3135#discussion_r515031493", "createdAt": "2020-10-30T11:28:05Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+/**\n+ * Builder class for building a CircuitBreakerMapping based on a combination of host, method and path.\n+ */\n+public final class CircuitBreakerMappingBuilder {\n+    private boolean perHost;\n+    private boolean perMethod;\n+    private boolean perPath;\n+\n+    /**\n+     * Adds host dimension to the mapping Key.\n+     * @return this Builder.\n+     */\n+    public CircuitBreakerMappingBuilder perHost() {\n+        perHost = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Adds method dimension to the mapping Key.\n+     * @return this Builder.\n+     */\n+    public CircuitBreakerMappingBuilder perMethod() {\n+        perMethod = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Adds path dimension to the mapping Key.\n+     * @return this Builder.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a1f667951bc8151921169feba8269038cdb6484"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDgyMjAzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNjo0MjozNVrOHrssiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNDoxOTowOVrOHsGQ1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU4MzExNQ==", "bodyText": "Could be private and moved right after the member fields?", "url": "https://github.com/line/armeria/pull/3135#discussion_r515583115", "createdAt": "2020-11-01T06:42:35Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+/**\n+ * Builder class for building a {@link CircuitBreakerMapping} based on a combination of host, method and path.\n+ */\n+public final class CircuitBreakerMappingBuilder {\n+    private boolean perHost;\n+    private boolean perMethod;\n+    private boolean perPath;\n+\n+    /**\n+     * Adds host dimension to the mapping Key.\n+     * @return this builder.\n+     */\n+    public CircuitBreakerMappingBuilder perHost() {\n+        perHost = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Adds method dimension to the mapping Key.\n+     * @return this builder.\n+     */\n+    public CircuitBreakerMappingBuilder perMethod() {\n+        perMethod = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Adds path dimension to the mapping Key.\n+     * @return this builder.\n+     */\n+    public CircuitBreakerMappingBuilder perPath() {\n+        perPath = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Builds the {@link CircuitBreakerMapping} using a three-dimensional factory.\n+     * @return a {@link CircuitBreakerMapping} based on the added dimensions.\n+     */\n+    public CircuitBreakerMapping build(CircuitBreakerFactory factory) {\n+        if (!perHost && !perMethod && !perPath) {\n+            throw new IllegalStateException(\"A CircuitBreakerMapping must be per host, method and/or path\");\n+        }\n+        return new KeyedCircuitBreakerMapping(this, factory);\n+    }\n+\n+    boolean isPerHost() {\n+        return perHost;\n+    }\n+\n+    boolean isPerMethod() {\n+        return perMethod;\n+    }\n+\n+    boolean isPerPath() {\n+        return perPath;\n+    }\n+\n+    CircuitBreakerMappingBuilder() {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "988478ad563b081b191c9a0fa284d6b23e54a1c6"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAwMjAwNw==", "bodyText": "Moved it to the top, but has to stay package-private since it's called from CircuitBreakerMapping.builder()", "url": "https://github.com/line/armeria/pull/3135#discussion_r516002007", "createdAt": "2020-11-02T14:19:09Z", "author": {"login": "haithamgabr"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+/**\n+ * Builder class for building a {@link CircuitBreakerMapping} based on a combination of host, method and path.\n+ */\n+public final class CircuitBreakerMappingBuilder {\n+    private boolean perHost;\n+    private boolean perMethod;\n+    private boolean perPath;\n+\n+    /**\n+     * Adds host dimension to the mapping Key.\n+     * @return this builder.\n+     */\n+    public CircuitBreakerMappingBuilder perHost() {\n+        perHost = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Adds method dimension to the mapping Key.\n+     * @return this builder.\n+     */\n+    public CircuitBreakerMappingBuilder perMethod() {\n+        perMethod = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Adds path dimension to the mapping Key.\n+     * @return this builder.\n+     */\n+    public CircuitBreakerMappingBuilder perPath() {\n+        perPath = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Builds the {@link CircuitBreakerMapping} using a three-dimensional factory.\n+     * @return a {@link CircuitBreakerMapping} based on the added dimensions.\n+     */\n+    public CircuitBreakerMapping build(CircuitBreakerFactory factory) {\n+        if (!perHost && !perMethod && !perPath) {\n+            throw new IllegalStateException(\"A CircuitBreakerMapping must be per host, method and/or path\");\n+        }\n+        return new KeyedCircuitBreakerMapping(this, factory);\n+    }\n+\n+    boolean isPerHost() {\n+        return perHost;\n+    }\n+\n+    boolean isPerMethod() {\n+        return perMethod;\n+    }\n+\n+    boolean isPerPath() {\n+        return perPath;\n+    }\n+\n+    CircuitBreakerMappingBuilder() {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU4MzExNQ=="}, "originalCommit": {"oid": "988478ad563b081b191c9a0fa284d6b23e54a1c6"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjc3NDMzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTo0MzozNFrOHr857w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNDozNDoxNVrOHtI0Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg0ODY4Nw==", "bodyText": "Let's just remove this line. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/3135#discussion_r515848687", "createdAt": "2020-11-02T09:43:34Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+/**\n+ * Builder class for building a {@link CircuitBreakerMapping} based on a combination of host, method and path.\n+ */\n+public final class CircuitBreakerMappingBuilder {\n+    private boolean perHost;\n+    private boolean perMethod;\n+    private boolean perPath;\n+\n+    /**\n+     * Adds host dimension to the mapping Key.\n+     * @return this builder.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "988478ad563b081b191c9a0fa284d6b23e54a1c6"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA5MjQzOA==", "bodyText": "Done", "url": "https://github.com/line/armeria/pull/3135#discussion_r517092438", "createdAt": "2020-11-04T04:34:15Z", "author": {"login": "haithamgabr"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+/**\n+ * Builder class for building a {@link CircuitBreakerMapping} based on a combination of host, method and path.\n+ */\n+public final class CircuitBreakerMappingBuilder {\n+    private boolean perHost;\n+    private boolean perMethod;\n+    private boolean perPath;\n+\n+    /**\n+     * Adds host dimension to the mapping Key.\n+     * @return this builder.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg0ODY4Nw=="}, "originalCommit": {"oid": "988478ad563b081b191c9a0fa284d6b23e54a1c6"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjI0Mzk2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMTo1NjoxNFrOHsd8Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNDowNjo0NFrOHsfrCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM4OTk3NA==", "bodyText": "How about making all variables not nullable because it's not expensive to get these parameters?", "url": "https://github.com/line/armeria/pull/3135#discussion_r516389974", "createdAt": "2020-11-03T01:56:14Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerFactory.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A functional interface that represents a mapper factory, mapping a combination of host, method and path\n+ * to a {@link CircuitBreaker}.\n+ */\n+@FunctionalInterface\n+interface CircuitBreakerFactory {\n+    /**\n+     * Given a combination of host, method and path, creates a {@link CircuitBreaker}.\n+     * @param host the host of the context endpoint.\n+     * @param method the method of the context request.\n+     * @param path the path of the context request.\n+     * @return the {@link CircuitBreaker} instance corresponding to this combination.\n+     */\n+    CircuitBreaker apply(@Nullable String host, @Nullable String method, @Nullable String path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433ea841935ce25fe2c32b2b93ea6d9e473aff38"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxMjEyNw==", "bodyText": "I am not sure I understand what you're suggesting. They are nullable because they can be absent. e.g. map by host only, or host and method, or host and path, or all three.. etc.", "url": "https://github.com/line/armeria/pull/3135#discussion_r516412127", "createdAt": "2020-11-03T03:37:10Z", "author": {"login": "haithamgabr"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerFactory.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A functional interface that represents a mapper factory, mapping a combination of host, method and path\n+ * to a {@link CircuitBreaker}.\n+ */\n+@FunctionalInterface\n+interface CircuitBreakerFactory {\n+    /**\n+     * Given a combination of host, method and path, creates a {@link CircuitBreaker}.\n+     * @param host the host of the context endpoint.\n+     * @param method the method of the context request.\n+     * @param path the path of the context request.\n+     * @return the {@link CircuitBreaker} instance corresponding to this combination.\n+     */\n+    CircuitBreaker apply(@Nullable String host, @Nullable String method, @Nullable String path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM4OTk3NA=="}, "originalCommit": {"oid": "433ea841935ce25fe2c32b2b93ea6d9e473aff38"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxODMxMg==", "bodyText": "Ah, I missed that we create the key as a combination of host, method and path.\nSo I think this is good as it is. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/3135#discussion_r516418312", "createdAt": "2020-11-03T04:06:44Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerFactory.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A functional interface that represents a mapper factory, mapping a combination of host, method and path\n+ * to a {@link CircuitBreaker}.\n+ */\n+@FunctionalInterface\n+interface CircuitBreakerFactory {\n+    /**\n+     * Given a combination of host, method and path, creates a {@link CircuitBreaker}.\n+     * @param host the host of the context endpoint.\n+     * @param method the method of the context request.\n+     * @param path the path of the context request.\n+     * @return the {@link CircuitBreaker} instance corresponding to this combination.\n+     */\n+    CircuitBreaker apply(@Nullable String host, @Nullable String method, @Nullable String path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM4OTk3NA=="}, "originalCommit": {"oid": "433ea841935ce25fe2c32b2b93ea6d9e473aff38"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjI0OTE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/KeyedCircuitBreakerMapping.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMTo1OToyNVrOHsd_Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjo1NjowNFrOHtLE9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM5MDcxNA==", "bodyText": "How about just accepting CircuitBreakerMapping?\nWe don't actually need to know whether perHost, perMethod and perPath.", "url": "https://github.com/line/armeria/pull/3135#discussion_r516390714", "createdAt": "2020-11-03T01:59:25Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/KeyedCircuitBreakerMapping.java", "diffHunk": "@@ -17,69 +17,66 @@\n package com.linecorp.armeria.client.circuitbreaker;\n \n import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n \n+import java.util.Objects;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n-import java.util.function.BiFunction;\n+import java.util.stream.Stream;\n \n import com.linecorp.armeria.client.ClientRequestContext;\n import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.Request;\n import com.linecorp.armeria.common.RpcRequest;\n \n /**\n- * A {@link CircuitBreakerMapping} that binds a {@link CircuitBreaker} to its {@link MappingKey}.\n- * If there is no circuit breaker bound to the key, a new one is created by using the given circuit breaker\n- * factory.\n+ * A {@link CircuitBreakerMapping} that binds a {@link CircuitBreaker} to a combination of host, method and/or\n+ * path. If there is no circuit breaker bound to the key, a new one is created by using the given circuit\n+ * breaker factory.\n  */\n final class KeyedCircuitBreakerMapping implements CircuitBreakerMapping {\n \n-    static final CircuitBreakerMapping hostMapping =\n-            new KeyedCircuitBreakerMapping(MappingKey.HOST, (host, method) -> CircuitBreaker.of(host));\n+    static final CircuitBreakerMapping hostMapping = new KeyedCircuitBreakerMapping(\n+            CircuitBreakerMapping.builder().perHost(),\n+            (host, method, path) -> CircuitBreaker.of(host));\n \n     private final ConcurrentMap<String, CircuitBreaker> mapping = new ConcurrentHashMap<>();\n \n-    private final MappingKey mappingKey;\n-    private final BiFunction<String, String, ? extends CircuitBreaker> factory;\n+    private final boolean isPerHost;\n+    private final boolean isPerMethod;\n+    private final boolean isPerPath;\n+    private final CircuitBreakerFactory factory;\n \n     /**\n-     * Creates a new {@link KeyedCircuitBreakerMapping} with the given {@link MappingKey} and\n+     * Creates a new {@link KeyedCircuitBreakerMapping} with the given {@link CircuitBreakerMappingBuilder} and\n      * {@link CircuitBreaker} factory.\n      */\n-    KeyedCircuitBreakerMapping(MappingKey mappingKey,\n-                               BiFunction<String, String, ? extends CircuitBreaker> factory) {\n-        this.mappingKey = requireNonNull(mappingKey, \"mappingKey\");\n+    KeyedCircuitBreakerMapping(CircuitBreakerMappingBuilder mappingBuilder, CircuitBreakerFactory factory) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433ea841935ce25fe2c32b2b93ea6d9e473aff38"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA4NjMzMw==", "bodyText": "This is actually the concrete implementation of CircuitBreakerMapping, so it cannot have itself as a member.", "url": "https://github.com/line/armeria/pull/3135#discussion_r517086333", "createdAt": "2020-11-04T04:05:55Z", "author": {"login": "haithamgabr"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/KeyedCircuitBreakerMapping.java", "diffHunk": "@@ -17,69 +17,66 @@\n package com.linecorp.armeria.client.circuitbreaker;\n \n import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n \n+import java.util.Objects;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n-import java.util.function.BiFunction;\n+import java.util.stream.Stream;\n \n import com.linecorp.armeria.client.ClientRequestContext;\n import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.Request;\n import com.linecorp.armeria.common.RpcRequest;\n \n /**\n- * A {@link CircuitBreakerMapping} that binds a {@link CircuitBreaker} to its {@link MappingKey}.\n- * If there is no circuit breaker bound to the key, a new one is created by using the given circuit breaker\n- * factory.\n+ * A {@link CircuitBreakerMapping} that binds a {@link CircuitBreaker} to a combination of host, method and/or\n+ * path. If there is no circuit breaker bound to the key, a new one is created by using the given circuit\n+ * breaker factory.\n  */\n final class KeyedCircuitBreakerMapping implements CircuitBreakerMapping {\n \n-    static final CircuitBreakerMapping hostMapping =\n-            new KeyedCircuitBreakerMapping(MappingKey.HOST, (host, method) -> CircuitBreaker.of(host));\n+    static final CircuitBreakerMapping hostMapping = new KeyedCircuitBreakerMapping(\n+            CircuitBreakerMapping.builder().perHost(),\n+            (host, method, path) -> CircuitBreaker.of(host));\n \n     private final ConcurrentMap<String, CircuitBreaker> mapping = new ConcurrentHashMap<>();\n \n-    private final MappingKey mappingKey;\n-    private final BiFunction<String, String, ? extends CircuitBreaker> factory;\n+    private final boolean isPerHost;\n+    private final boolean isPerMethod;\n+    private final boolean isPerPath;\n+    private final CircuitBreakerFactory factory;\n \n     /**\n-     * Creates a new {@link KeyedCircuitBreakerMapping} with the given {@link MappingKey} and\n+     * Creates a new {@link KeyedCircuitBreakerMapping} with the given {@link CircuitBreakerMappingBuilder} and\n      * {@link CircuitBreaker} factory.\n      */\n-    KeyedCircuitBreakerMapping(MappingKey mappingKey,\n-                               BiFunction<String, String, ? extends CircuitBreaker> factory) {\n-        this.mappingKey = requireNonNull(mappingKey, \"mappingKey\");\n+    KeyedCircuitBreakerMapping(CircuitBreakerMappingBuilder mappingBuilder, CircuitBreakerFactory factory) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM5MDcxNA=="}, "originalCommit": {"oid": "433ea841935ce25fe2c32b2b93ea6d9e473aff38"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyOTQ2Mw==", "bodyText": "Yeah, I forgot to delete this comment after I left #3135 (comment)", "url": "https://github.com/line/armeria/pull/3135#discussion_r517129463", "createdAt": "2020-11-04T06:56:04Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/KeyedCircuitBreakerMapping.java", "diffHunk": "@@ -17,69 +17,66 @@\n package com.linecorp.armeria.client.circuitbreaker;\n \n import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n \n+import java.util.Objects;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n-import java.util.function.BiFunction;\n+import java.util.stream.Stream;\n \n import com.linecorp.armeria.client.ClientRequestContext;\n import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.Request;\n import com.linecorp.armeria.common.RpcRequest;\n \n /**\n- * A {@link CircuitBreakerMapping} that binds a {@link CircuitBreaker} to its {@link MappingKey}.\n- * If there is no circuit breaker bound to the key, a new one is created by using the given circuit breaker\n- * factory.\n+ * A {@link CircuitBreakerMapping} that binds a {@link CircuitBreaker} to a combination of host, method and/or\n+ * path. If there is no circuit breaker bound to the key, a new one is created by using the given circuit\n+ * breaker factory.\n  */\n final class KeyedCircuitBreakerMapping implements CircuitBreakerMapping {\n \n-    static final CircuitBreakerMapping hostMapping =\n-            new KeyedCircuitBreakerMapping(MappingKey.HOST, (host, method) -> CircuitBreaker.of(host));\n+    static final CircuitBreakerMapping hostMapping = new KeyedCircuitBreakerMapping(\n+            CircuitBreakerMapping.builder().perHost(),\n+            (host, method, path) -> CircuitBreaker.of(host));\n \n     private final ConcurrentMap<String, CircuitBreaker> mapping = new ConcurrentHashMap<>();\n \n-    private final MappingKey mappingKey;\n-    private final BiFunction<String, String, ? extends CircuitBreaker> factory;\n+    private final boolean isPerHost;\n+    private final boolean isPerMethod;\n+    private final boolean isPerPath;\n+    private final CircuitBreakerFactory factory;\n \n     /**\n-     * Creates a new {@link KeyedCircuitBreakerMapping} with the given {@link MappingKey} and\n+     * Creates a new {@link KeyedCircuitBreakerMapping} with the given {@link CircuitBreakerMappingBuilder} and\n      * {@link CircuitBreaker} factory.\n      */\n-    KeyedCircuitBreakerMapping(MappingKey mappingKey,\n-                               BiFunction<String, String, ? extends CircuitBreaker> factory) {\n-        this.mappingKey = requireNonNull(mappingKey, \"mappingKey\");\n+    KeyedCircuitBreakerMapping(CircuitBreakerMappingBuilder mappingBuilder, CircuitBreakerFactory factory) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM5MDcxNA=="}, "originalCommit": {"oid": "433ea841935ce25fe2c32b2b93ea6d9e473aff38"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjI1MjI5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMjowMToyMFrOHseA4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNDozNDowN1rOHtI0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM5MTEzNw==", "bodyText": "How about just:\nReturns a newly-created {@link CircuitBreakerMapping} with the specified {@link CircuitBreakerFactory} and properties set so far.", "url": "https://github.com/line/armeria/pull/3135#discussion_r516391137", "createdAt": "2020-11-03T02:01:20Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+/**\n+ * Builder class for building a {@link CircuitBreakerMapping} based on a combination of host, method and path.\n+ */\n+public final class CircuitBreakerMappingBuilder {\n+    private boolean perHost;\n+    private boolean perMethod;\n+    private boolean perPath;\n+\n+    CircuitBreakerMappingBuilder() {}\n+\n+    /**\n+     * Adds host dimension to the mapping Key.\n+     * @return this builder.\n+     */\n+    public CircuitBreakerMappingBuilder perHost() {\n+        perHost = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Adds method dimension to the mapping Key.\n+     * @return this builder.\n+     */\n+    public CircuitBreakerMappingBuilder perMethod() {\n+        perMethod = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Adds path dimension to the mapping Key.\n+     * @return this builder.\n+     */\n+    public CircuitBreakerMappingBuilder perPath() {\n+        perPath = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Builds the {@link CircuitBreakerMapping} using a three-dimensional factory.\n+     * @return a {@link CircuitBreakerMapping} based on the added dimensions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433ea841935ce25fe2c32b2b93ea6d9e473aff38"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA5MjQwMQ==", "bodyText": "Done.", "url": "https://github.com/line/armeria/pull/3135#discussion_r517092401", "createdAt": "2020-11-04T04:34:07Z", "author": {"login": "haithamgabr"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+/**\n+ * Builder class for building a {@link CircuitBreakerMapping} based on a combination of host, method and path.\n+ */\n+public final class CircuitBreakerMappingBuilder {\n+    private boolean perHost;\n+    private boolean perMethod;\n+    private boolean perPath;\n+\n+    CircuitBreakerMappingBuilder() {}\n+\n+    /**\n+     * Adds host dimension to the mapping Key.\n+     * @return this builder.\n+     */\n+    public CircuitBreakerMappingBuilder perHost() {\n+        perHost = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Adds method dimension to the mapping Key.\n+     * @return this builder.\n+     */\n+    public CircuitBreakerMappingBuilder perMethod() {\n+        perMethod = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Adds path dimension to the mapping Key.\n+     * @return this builder.\n+     */\n+    public CircuitBreakerMappingBuilder perPath() {\n+        perPath = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Builds the {@link CircuitBreakerMapping} using a three-dimensional factory.\n+     * @return a {@link CircuitBreakerMapping} based on the added dimensions.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM5MTEzNw=="}, "originalCommit": {"oid": "433ea841935ce25fe2c32b2b93ea6d9e473aff38"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjQ1MTkwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNDowOTo1OFrOHsftgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNDozMzo1NlrOHtI0AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxODk0Ng==", "bodyText": "How about just passing perHost, perMethod and perPath?\nThe builder is still mutable after CircuitBreakerMapping is created:\nCircuitBreakerMappingBuilder builder = ...\nbuilder.build(factory);\n// client makes a call\nbuilder.perPath() // This change the behavior.", "url": "https://github.com/line/armeria/pull/3135#discussion_r516418946", "createdAt": "2020-11-03T04:09:58Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+/**\n+ * Builder class for building a {@link CircuitBreakerMapping} based on a combination of host, method and path.\n+ */\n+public final class CircuitBreakerMappingBuilder {\n+    private boolean perHost;\n+    private boolean perMethod;\n+    private boolean perPath;\n+\n+    CircuitBreakerMappingBuilder() {}\n+\n+    /**\n+     * Adds host dimension to the mapping Key.\n+     * @return this builder.\n+     */\n+    public CircuitBreakerMappingBuilder perHost() {\n+        perHost = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Adds method dimension to the mapping Key.\n+     * @return this builder.\n+     */\n+    public CircuitBreakerMappingBuilder perMethod() {\n+        perMethod = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Adds path dimension to the mapping Key.\n+     * @return this builder.\n+     */\n+    public CircuitBreakerMappingBuilder perPath() {\n+        perPath = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Builds the {@link CircuitBreakerMapping} using a three-dimensional factory.\n+     * @return a {@link CircuitBreakerMapping} based on the added dimensions.\n+     */\n+    public CircuitBreakerMapping build(CircuitBreakerFactory factory) {\n+        if (!perHost && !perMethod && !perPath) {\n+            throw new IllegalStateException(\"A CircuitBreakerMapping must be per host, method and/or path\");\n+        }\n+        return new KeyedCircuitBreakerMapping(this, factory);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "433ea841935ce25fe2c32b2b93ea6d9e473aff38"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA5MjM1Mg==", "bodyText": "Done.", "url": "https://github.com/line/armeria/pull/3135#discussion_r517092352", "createdAt": "2020-11-04T04:33:56Z", "author": {"login": "haithamgabr"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+/**\n+ * Builder class for building a {@link CircuitBreakerMapping} based on a combination of host, method and path.\n+ */\n+public final class CircuitBreakerMappingBuilder {\n+    private boolean perHost;\n+    private boolean perMethod;\n+    private boolean perPath;\n+\n+    CircuitBreakerMappingBuilder() {}\n+\n+    /**\n+     * Adds host dimension to the mapping Key.\n+     * @return this builder.\n+     */\n+    public CircuitBreakerMappingBuilder perHost() {\n+        perHost = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Adds method dimension to the mapping Key.\n+     * @return this builder.\n+     */\n+    public CircuitBreakerMappingBuilder perMethod() {\n+        perMethod = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Adds path dimension to the mapping Key.\n+     * @return this builder.\n+     */\n+    public CircuitBreakerMappingBuilder perPath() {\n+        perPath = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Builds the {@link CircuitBreakerMapping} using a three-dimensional factory.\n+     * @return a {@link CircuitBreakerMapping} based on the added dimensions.\n+     */\n+    public CircuitBreakerMapping build(CircuitBreakerFactory factory) {\n+        if (!perHost && !perMethod && !perPath) {\n+            throw new IllegalStateException(\"A CircuitBreakerMapping must be per host, method and/or path\");\n+        }\n+        return new KeyedCircuitBreakerMapping(this, factory);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxODk0Ng=="}, "originalCommit": {"oid": "433ea841935ce25fe2c32b2b93ea6d9e473aff38"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTA3MDE2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/KeyedCircuitBreakerMapping.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjo1NzoxM1rOHtLGdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxOTo1ODoyMlrOHtnl0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyOTg0Nw==", "bodyText": "We can check this only once in the constructor.\nBut we already check this in build() method so I think we can completely remove this. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/3135#discussion_r517129847", "createdAt": "2020-11-04T06:57:13Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/KeyedCircuitBreakerMapping.java", "diffHunk": "@@ -17,69 +17,65 @@\n package com.linecorp.armeria.client.circuitbreaker;\n \n import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n \n+import java.util.Objects;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n-import java.util.function.BiFunction;\n+import java.util.stream.Stream;\n \n import com.linecorp.armeria.client.ClientRequestContext;\n import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.Request;\n import com.linecorp.armeria.common.RpcRequest;\n \n /**\n- * A {@link CircuitBreakerMapping} that binds a {@link CircuitBreaker} to its {@link MappingKey}.\n- * If there is no circuit breaker bound to the key, a new one is created by using the given circuit breaker\n- * factory.\n+ * A {@link CircuitBreakerMapping} that binds a {@link CircuitBreaker} to a combination of host, method and/or\n+ * path. If there is no circuit breaker bound to the key, a new one is created by using the given circuit\n+ * breaker factory.\n  */\n final class KeyedCircuitBreakerMapping implements CircuitBreakerMapping {\n \n-    static final CircuitBreakerMapping hostMapping =\n-            new KeyedCircuitBreakerMapping(MappingKey.HOST, (host, method) -> CircuitBreaker.of(host));\n+    static final CircuitBreakerMapping hostMapping = new KeyedCircuitBreakerMapping(\n+            true, false, false, (host, method, path) -> CircuitBreaker.of(host));\n \n     private final ConcurrentMap<String, CircuitBreaker> mapping = new ConcurrentHashMap<>();\n \n-    private final MappingKey mappingKey;\n-    private final BiFunction<String, String, ? extends CircuitBreaker> factory;\n+    private final boolean isPerHost;\n+    private final boolean isPerMethod;\n+    private final boolean isPerPath;\n+    private final CircuitBreakerFactory factory;\n \n     /**\n-     * Creates a new {@link KeyedCircuitBreakerMapping} with the given {@link MappingKey} and\n+     * Creates a new {@link KeyedCircuitBreakerMapping} with the given {@link CircuitBreakerMappingBuilder} and\n      * {@link CircuitBreaker} factory.\n      */\n-    KeyedCircuitBreakerMapping(MappingKey mappingKey,\n-                               BiFunction<String, String, ? extends CircuitBreaker> factory) {\n-        this.mappingKey = requireNonNull(mappingKey, \"mappingKey\");\n+    KeyedCircuitBreakerMapping(\n+            boolean perHost, boolean perMethod, boolean perPath, CircuitBreakerFactory factory) {\n+        isPerHost = perHost;\n+        isPerMethod = perMethod;\n+        isPerPath = perPath;\n         this.factory = requireNonNull(factory, \"factory\");\n     }\n \n     @Override\n     public CircuitBreaker get(ClientRequestContext ctx, Request req) throws Exception {\n-        final String key;\n-        final String host;\n-        final String method;\n-        switch (mappingKey) {\n-            case HOST:\n-                key = host = host(ctx);\n-                method = null;\n-                break;\n-            case METHOD:\n-                host = null;\n-                key = method = method(ctx);\n-                break;\n-            case HOST_AND_METHOD:\n-                host = host(ctx);\n-                method = method(ctx);\n-                key = host + '#' + method;\n-                break;\n-            default:\n-                // should never reach here.\n-                throw new Error();\n+        if (!isPerHost && !isPerMethod && !isPerPath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c35f87c86902cfcac3a10e87931920395cc0eca4"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU5NjYyNg==", "bodyText": "Done.", "url": "https://github.com/line/armeria/pull/3135#discussion_r517596626", "createdAt": "2020-11-04T19:58:22Z", "author": {"login": "haithamgabr"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/KeyedCircuitBreakerMapping.java", "diffHunk": "@@ -17,69 +17,65 @@\n package com.linecorp.armeria.client.circuitbreaker;\n \n import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n \n+import java.util.Objects;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n-import java.util.function.BiFunction;\n+import java.util.stream.Stream;\n \n import com.linecorp.armeria.client.ClientRequestContext;\n import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.Request;\n import com.linecorp.armeria.common.RpcRequest;\n \n /**\n- * A {@link CircuitBreakerMapping} that binds a {@link CircuitBreaker} to its {@link MappingKey}.\n- * If there is no circuit breaker bound to the key, a new one is created by using the given circuit breaker\n- * factory.\n+ * A {@link CircuitBreakerMapping} that binds a {@link CircuitBreaker} to a combination of host, method and/or\n+ * path. If there is no circuit breaker bound to the key, a new one is created by using the given circuit\n+ * breaker factory.\n  */\n final class KeyedCircuitBreakerMapping implements CircuitBreakerMapping {\n \n-    static final CircuitBreakerMapping hostMapping =\n-            new KeyedCircuitBreakerMapping(MappingKey.HOST, (host, method) -> CircuitBreaker.of(host));\n+    static final CircuitBreakerMapping hostMapping = new KeyedCircuitBreakerMapping(\n+            true, false, false, (host, method, path) -> CircuitBreaker.of(host));\n \n     private final ConcurrentMap<String, CircuitBreaker> mapping = new ConcurrentHashMap<>();\n \n-    private final MappingKey mappingKey;\n-    private final BiFunction<String, String, ? extends CircuitBreaker> factory;\n+    private final boolean isPerHost;\n+    private final boolean isPerMethod;\n+    private final boolean isPerPath;\n+    private final CircuitBreakerFactory factory;\n \n     /**\n-     * Creates a new {@link KeyedCircuitBreakerMapping} with the given {@link MappingKey} and\n+     * Creates a new {@link KeyedCircuitBreakerMapping} with the given {@link CircuitBreakerMappingBuilder} and\n      * {@link CircuitBreaker} factory.\n      */\n-    KeyedCircuitBreakerMapping(MappingKey mappingKey,\n-                               BiFunction<String, String, ? extends CircuitBreaker> factory) {\n-        this.mappingKey = requireNonNull(mappingKey, \"mappingKey\");\n+    KeyedCircuitBreakerMapping(\n+            boolean perHost, boolean perMethod, boolean perPath, CircuitBreakerFactory factory) {\n+        isPerHost = perHost;\n+        isPerMethod = perMethod;\n+        isPerPath = perPath;\n         this.factory = requireNonNull(factory, \"factory\");\n     }\n \n     @Override\n     public CircuitBreaker get(ClientRequestContext ctx, Request req) throws Exception {\n-        final String key;\n-        final String host;\n-        final String method;\n-        switch (mappingKey) {\n-            case HOST:\n-                key = host = host(ctx);\n-                method = null;\n-                break;\n-            case METHOD:\n-                host = null;\n-                key = method = method(ctx);\n-                break;\n-            case HOST_AND_METHOD:\n-                host = host(ctx);\n-                method = method(ctx);\n-                key = host + '#' + method;\n-                break;\n-            default:\n-                // should never reach here.\n-                throw new Error();\n+        if (!isPerHost && !isPerMethod && !isPerPath) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyOTg0Nw=="}, "originalCommit": {"oid": "c35f87c86902cfcac3a10e87931920395cc0eca4"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MjEyNjQ5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMTo1ODo0OVrOHtVEfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxOTo1ODoxNlrOHtnlmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5MzE4MQ==", "bodyText": "Don't we need public?", "url": "https://github.com/line/armeria/pull/3135#discussion_r517293181", "createdAt": "2020-11-04T11:58:49Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerFactory.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A functional interface that represents a mapper factory, mapping a combination of host, method and path\n+ * to a {@link CircuitBreaker}.\n+ */\n+@FunctionalInterface\n+interface CircuitBreakerFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c35f87c86902cfcac3a10e87931920395cc0eca4"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU5NjU2OA==", "bodyText": "Yes thanks a lot for spotting this. Done.", "url": "https://github.com/line/armeria/pull/3135#discussion_r517596568", "createdAt": "2020-11-04T19:58:16Z", "author": {"login": "haithamgabr"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerFactory.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A functional interface that represents a mapper factory, mapping a combination of host, method and path\n+ * to a {@link CircuitBreaker}.\n+ */\n+@FunctionalInterface\n+interface CircuitBreakerFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5MzE4MQ=="}, "originalCommit": {"oid": "c35f87c86902cfcac3a10e87931920395cc0eca4"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MjE0MDA1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMjowMjo0NFrOHtVMiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxOTo1ODowMlrOHtnlAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NTI0MQ==", "bodyText": "Could remove?", "url": "https://github.com/line/armeria/pull/3135#discussion_r517295241", "createdAt": "2020-11-04T12:02:44Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+/**\n+ * Builder class for building a {@link CircuitBreakerMapping} based on a combination of host, method and path.\n+ */\n+public final class CircuitBreakerMappingBuilder {\n+    private boolean perHost;\n+    private boolean perMethod;\n+    private boolean perPath;\n+\n+    CircuitBreakerMappingBuilder() {}\n+\n+    /**\n+     * Adds host dimension to the mapping Key.\n+     */\n+    public CircuitBreakerMappingBuilder perHost() {\n+        perHost = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Adds method dimension to the mapping Key.\n+     */\n+    public CircuitBreakerMappingBuilder perMethod() {\n+        perMethod = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Adds path dimension to the mapping Key.\n+     */\n+    public CircuitBreakerMappingBuilder perPath() {\n+        perPath = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Returns a newly-created {@link CircuitBreakerMapping} with the specified {@link CircuitBreakerFactory}\n+     * and properties set so far.\n+     */\n+    public CircuitBreakerMapping build(CircuitBreakerFactory factory) {\n+        if (!perHost && !perMethod && !perPath) {\n+            throw new IllegalStateException(\"A CircuitBreakerMapping must be per host, method and/or path\");\n+        }\n+        return new KeyedCircuitBreakerMapping(perHost, perMethod, perPath, factory);\n+    }\n+\n+    boolean isPerHost() {\n+        return perHost;\n+    }\n+\n+    boolean isPerMethod() {\n+        return perMethod;\n+    }\n+\n+    boolean isPerPath() {\n+        return perPath;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c35f87c86902cfcac3a10e87931920395cc0eca4"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU5NjQxOQ==", "bodyText": "Done. Thanks.", "url": "https://github.com/line/armeria/pull/3135#discussion_r517596419", "createdAt": "2020-11-04T19:58:02Z", "author": {"login": "haithamgabr"}, "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+/**\n+ * Builder class for building a {@link CircuitBreakerMapping} based on a combination of host, method and path.\n+ */\n+public final class CircuitBreakerMappingBuilder {\n+    private boolean perHost;\n+    private boolean perMethod;\n+    private boolean perPath;\n+\n+    CircuitBreakerMappingBuilder() {}\n+\n+    /**\n+     * Adds host dimension to the mapping Key.\n+     */\n+    public CircuitBreakerMappingBuilder perHost() {\n+        perHost = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Adds method dimension to the mapping Key.\n+     */\n+    public CircuitBreakerMappingBuilder perMethod() {\n+        perMethod = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Adds path dimension to the mapping Key.\n+     */\n+    public CircuitBreakerMappingBuilder perPath() {\n+        perPath = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Returns a newly-created {@link CircuitBreakerMapping} with the specified {@link CircuitBreakerFactory}\n+     * and properties set so far.\n+     */\n+    public CircuitBreakerMapping build(CircuitBreakerFactory factory) {\n+        if (!perHost && !perMethod && !perPath) {\n+            throw new IllegalStateException(\"A CircuitBreakerMapping must be per host, method and/or path\");\n+        }\n+        return new KeyedCircuitBreakerMapping(perHost, perMethod, perPath, factory);\n+    }\n+\n+    boolean isPerHost() {\n+        return perHost;\n+    }\n+\n+    boolean isPerMethod() {\n+        return perMethod;\n+    }\n+\n+    boolean isPerPath() {\n+        return perPath;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NTI0MQ=="}, "originalCommit": {"oid": "c35f87c86902cfcac3a10e87931920395cc0eca4"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1985, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}