{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3ODY5NzM3", "number": 2420, "title": "Use modern features of Gradle instead of custom scripts where possible.", "bodyText": "Figured a new decade is a good time to rewrite the Gradle scripts :) Also a good time since changing Maven scopes is sort of a breaking change.\nIf this PR looks good I or someone else could copy the script directory changes into gradle-scripts. I'm not sure what repos other than central dogma that's used in though - these changes are somewhat, though not highly breaking I think - add publish to BOM, use strictly for downgrading dependencies). Projects should still be able to use compile if they want though not completely sure.\n\nMigrate from java to java-library plugin which is recommended for libraries\nMigrate from deprecated compile to api / implementation. Former is compile classpath, latter is runtime classpath - https://docs.gradle.org/current/userguide/java_plugin.html#tab:configurations\nUse configureFeature fo Gradle native support of optional dependencies\nDon't generate POM files. With above changes, Gradle correctly generates POM files\n\nExcept do need to strip out shaded dependencies since that's on us\n\n\nReplace spring dependency management with Gradle's java-platform\n\nOverrides now use strictly version overriding, which is verified by Gradle so we don't need to verify it ourselves\n\n\nSwitch to compileOnly for optional thrift dependency. It maps to provided maven scope, which is more appropriate for a required provided dependency\nUse Gradle's java-platform to define BOM\nOnly evaluate runtime classpaths when creating shaded test runtime classpath. Compile classpath includes compile-only deps which should not be on the classpath when running tests (unless explicitly added). Normal test has this behavior and now shadedTest is a better approximation of it.\n\nResult:\n\nCleaner POMs. Our current POM generation seems to lack some sophistication and adds all exclude rules to all dependencies. Gradle attaches in a way that corresponds to the actual exclusions for example\n\n    <dependency>\n      <groupId>org.slf4j</groupId>\n      <artifactId>slf4j-api</artifactId>\n      <version>1.7.29</version>\n      <scope>runtime</scope>\n    </dependency>\n    <dependency>\n      <groupId>com.linecorp.armeria</groupId>\n      <artifactId>armeria-grpc-protocol</artifactId>\n      <version>0.97.1-SNAPSHOT</version>\n      <scope>runtime</scope>\n    </dependency>\n    <dependency>\n      <groupId>com.google.protobuf</groupId>\n      <artifactId>protobuf-java-util</artifactId>\n      <version>3.10.0</version>\n      <scope>runtime</scope>\n      <exclusions>\n        <exclusion>\n          <artifactId>error_prone_annotations</artifactId>\n          <groupId>com.google.errorprone</groupId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n\n\nLess leakage into user compile classpath by specifying implementation dependencies which are necessary when compiling Armeria, but not user code\nLess code / 3rd party plugins by taking advantage of Gradle native functionality\nProbably sightly faster builds\nMost importantly? Fixing thrift0.12 project not being actually used :-D", "createdAt": "2020-01-28T07:41:13Z", "url": "https://github.com/line/armeria/pull/2420", "merged": true, "mergeCommit": {"oid": "ada55675ab222e6d0401bdae7e9e640bfaacb73c"}, "closed": true, "closedAt": "2020-02-04T08:33:18Z", "author": {"login": "anuraaga"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-sPwaAH2gAyMzY3ODY5NzM3OjZmNDNkN2NiN2NhM2IxMTA0MTExNTZhN2I2YjgyYzNiYmQ3NmY3MWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcA9KpLgH2gAyMzY3ODY5NzM3OjZiNWRkOWNiZWU2YjE4MGVmYzRmYmRlNThiMzZjYmExYjBiNTFjZTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6f43d7cb7ca3b110411156a7b6b82c3bbd76f71d", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/line/armeria/commit/6f43d7cb7ca3b110411156a7b6b82c3bbd76f71d", "committedDate": "2020-01-28T07:31:16Z", "message": "Use modern features of Gradle instead of custom scripts where possible."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "267abc8abdce5e11a7d27dd74bfaacb5254d98be", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/line/armeria/commit/267abc8abdce5e11a7d27dd74bfaacb5254d98be", "committedDate": "2020-01-29T06:28:57Z", "message": "Make sure platform is added to all resolvable configurations and add grpc-protocol dependency to benchmarks since it's not automatically exposed by grpc anymore."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "663c45da19234cf60d06f66c819375f8bce7e44d", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/line/armeria/commit/663c45da19234cf60d06f66c819375f8bce7e44d", "committedDate": "2020-01-29T07:08:49Z", "message": "checkstyle is like jacoco and doesn't like platforms"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ac24f72bb58c9bb0420a01f915b6c289bfcea90", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/line/armeria/commit/1ac24f72bb58c9bb0420a01f915b6c289bfcea90", "committedDate": "2020-01-29T07:16:19Z", "message": "Set canBeConsumed for jmh and fix afterEvaluate location"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87c14ce91f4e7dd947ecb1ef5c650c94c9b301eb", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/line/armeria/commit/87c14ce91f4e7dd947ecb1ef5c650c94c9b301eb", "committedDate": "2020-01-29T07:26:52Z", "message": "Remove unnecessary configuration hack, earlier issue was due to afterEvaluate mistake."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d386404b435885078018e98cbc1e024aaefb7b9", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/line/armeria/commit/7d386404b435885078018e98cbc1e024aaefb7b9", "committedDate": "2020-01-29T07:42:35Z", "message": "Look at grpc-bom version in addition to grpc-core."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1c585efbcfb6d3c939a300a7758ddf7d7a36fb2", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/line/armeria/commit/d1c585efbcfb6d3c939a300a7758ddf7d7a36fb2", "committedDate": "2020-01-29T08:00:31Z", "message": "implementation -> api for saml impl dependencies which are in public API right now."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43fd0357ac42b16ea60cf635433efa9f07111243", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/line/armeria/commit/43fd0357ac42b16ea60cf635433efa9f07111243", "committedDate": "2020-01-29T09:16:00Z", "message": "Fix shaded test classpath configuration issue and optimize it a bit."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e85142dcd103ea88668ce222f3d89d8f6d2062bd", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/line/armeria/commit/e85142dcd103ea88668ce222f3d89d8f6d2062bd", "committedDate": "2020-01-29T09:55:56Z", "message": "Only evaluate runtime classpath when creating shaded test runtime classpath"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0660c2f65e71c34f936816f814831d1affaf0ecd", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/line/armeria/commit/0660c2f65e71c34f936816f814831d1affaf0ecd", "committedDate": "2020-01-29T10:07:25Z", "message": "jwt is actually in public API."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "df97bb2245354c6dc9d8508ab4c3963042da393a", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/line/armeria/commit/df97bb2245354c6dc9d8508ab4c3963042da393a", "committedDate": "2020-01-29T10:05:44Z", "message": "jwt is actually in public API."}, "afterCommit": {"oid": "0660c2f65e71c34f936816f814831d1affaf0ecd", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/line/armeria/commit/0660c2f65e71c34f936816f814831d1affaf0ecd", "committedDate": "2020-01-29T10:07:25Z", "message": "jwt is actually in public API."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d23e2acacfd67e37aee0bb1b637bc7d2d60d619", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/line/armeria/commit/7d23e2acacfd67e37aee0bb1b637bc7d2d60d619", "committedDate": "2020-01-29T10:23:52Z", "message": "Remove unnecessary excludes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3a1fdca184967568aec5fa1e41071bd6ef08d76", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/line/armeria/commit/c3a1fdca184967568aec5fa1e41071bd6ef08d76", "committedDate": "2020-01-29T10:59:27Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a73455622837144aa9daa74a44db522273887336", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/line/armeria/commit/a73455622837144aa9daa74a44db522273887336", "committedDate": "2020-01-29T11:20:12Z", "message": "Restore accidentally deleted exclusion, remove unnecessary exclusions, update CI JDKs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23730108bd21a0a259bdef34c1f598a13898bced", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/line/armeria/commit/23730108bd21a0a259bdef34c1f598a13898bced", "committedDate": "2020-01-29T11:34:14Z", "message": "Build with JDK13 to fix javadoc bug."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c839bee12344d069dcf6f4753b06a0772ac8f7a", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/line/armeria/commit/0c839bee12344d069dcf6f4753b06a0772ac8f7a", "committedDate": "2020-01-29T11:33:28Z", "message": "Build with JDK13 to fix javadoc bug."}, "afterCommit": {"oid": "23730108bd21a0a259bdef34c1f598a13898bced", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/line/armeria/commit/23730108bd21a0a259bdef34c1f598a13898bced", "committedDate": "2020-01-29T11:34:14Z", "message": "Build with JDK13 to fix javadoc bug."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1460fd3551824903a41bf09924ade7ef7bc3a68f", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/1460fd3551824903a41bf09924ade7ef7bc3a68f", "committedDate": "2020-01-30T03:25:41Z", "message": "Merge branch 'master' into modern-gradle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNTY0NzYz", "url": "https://github.com/line/armeria/pull/2420#pullrequestreview-350564763", "createdAt": "2020-01-30T03:32:04Z", "commit": {"oid": "1460fd3551824903a41bf09924ade7ef7bc3a68f"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMzozMjowNFrOFjeisg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMzo0MToxMFrOFjepEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc0NDg4Mg==", "bodyText": "Shouldn't we call evaluationDependsOn(...) from the outside of afterEvaluate { .. }?", "url": "https://github.com/line/armeria/pull/2420#discussion_r372744882", "createdAt": "2020-01-30T03:32:04Z", "author": {"login": "trustin"}, "path": "gradle/scripts/lib/common-dependencies.gradle", "diffHunk": "@@ -25,45 +25,96 @@ rootProject.ext {\n     }\n }\n \n-allprojects {\n-    apply plugin: 'io.spring.dependency-management'\n-\n-    dependencyManagement {\n-        generatedPomCustomization {\n-            enabled = false\n+def managedDependencyVersions = [:]\n+def managedDependencyExclusions = [:].withDefault { [] }\n+rootProject.ext.dependenciesYaml.forEach { String key, value ->\n+    if (key == 'boms') {\n+        value.each {\n+            def parsed = it.split(':')\n+            managedDependencyVersions[\"${parsed[0]}:${parsed[1]}\"] = parsed[2]\n         }\n-\n-        imports {\n-            if (rootProject.ext.dependenciesYaml.containsKey('boms')) {\n-                dependenciesYaml['boms'].each {\n-                    mavenBom \"${it}\"\n+    } else {\n+        def groupId = key\n+        def artifact = value as Map\n+        artifact.forEach { String artifactId, Map props ->\n+            if (props.containsKey('version')) {\n+                managedDependencyVersions[\"${groupId}:${artifactId}\"] = \"${props['version']}\"\n+            }\n+            if (props.containsKey('exclusions')) {\n+                props['exclusions'].each { String spec ->\n+                    def parsed = spec.split(':')\n+                    managedDependencyExclusions[\"${groupId}:${artifactId}\"].add([\n+                            group: parsed[0],\n+                            module: parsed[1],\n+                    ])\n                 }\n             }\n         }\n+    }\n+}\n+\n+configure(projectsWithFlags('dependencies')) {\n+    apply plugin: 'java-platform'\n+\n+    javaPlatform {\n+        allowDependencies()\n+    }\n+\n+    dependencies {\n+        if (rootProject.ext.dependenciesYaml.containsKey('boms')) {\n+            dependenciesYaml['boms'].each {\n+                api platform(\"${it}\")\n+            }\n+        }\n \n-        dependencies {\n+        constraints {\n             rootProject.ext.dependenciesYaml.forEach { String key, value ->\n                 if (key != 'boms') {\n                     def groupId = key\n                     def artifact = value as Map\n                     artifact.forEach { String artifactId, Map props ->\n                         if (props.containsKey('version')) {\n-                            dependency(\"${groupId}:${artifactId}:${props['version']}\") {\n-                                if (props.containsKey('exclusions')) {\n-                                    props['exclusions'].each { String spec ->\n-                                        exclude spec\n-                                    }\n-                                }\n-                            }\n+                            api \"${groupId}:${artifactId}:${props['version']}\"\n                         }\n                     }\n                 }\n             }\n         }\n     }\n+}\n \n+allprojects {\n     ext {\n-        managedVersions = dependencyManagement.managedVersions\n+        managedVersions = managedDependencyVersions\n+    }\n+}\n+\n+def dependencyProjects = projectsWithFlags('dependencies')\n+if (!dependencyProjects.isEmpty()) {\n+    def dependencyProject = dependencyProjects[0]\n+    configure(projectsWithFlags('java')) {\n+        // We need to use afterEvaluate because there is no way to guarantee configuration.canBeResolved and\n+        // canBeConsumed are set otherwise.\n+        afterEvaluate {\n+            evaluationDependsOn(dependencyProject.path)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1460fd3551824903a41bf09924ade7ef7bc3a68f"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc0NTQwMA==", "bodyText": "nit: space after { and before ->", "url": "https://github.com/line/armeria/pull/2420#discussion_r372745400", "createdAt": "2020-01-30T03:34:36Z", "author": {"login": "trustin"}, "path": "gradle/scripts/lib/java-publish.gradle", "diffHunk": "@@ -2,168 +2,101 @@ configure(projectsWithFlags('publish', 'java')) {\n     publishing {\n         publications {\n             jar(MavenPublication) {\n-                def currentArtifactId = project.ext.artifactId\n-                artifactId currentArtifactId\n+                from components.java\n \n-                // Generate the POM.\n-                pom.withXml {\n-                    asNode().children().last() + {\n-                        resolveStrategy = Closure.DELEGATE_FIRST\n+                // We don't publish Gradle metadata yet so don't need to worry about these variants.\n+                suppressPomMetadataWarningsFor('optionalApiElements')\n+                suppressPomMetadataWarningsFor('optionalRuntimeElements')\n \n-                        // Write the elements required by OSSRH.\n-                        name \"${project.ext.projectName} (${currentArtifactId})\"\n-                        description \"${project.ext.projectDescription} (${currentArtifactId})\"\n-                        url \"${project.ext.projectUrl}\"\n-                        inceptionYear \"${project.ext.inceptionYear}\"\n-\n-                        licenses {\n-                            license {\n-                                name \"${project.ext.licenseName}\"\n-                                url \"${project.ext.licenseUrl}\"\n-                                distribution 'repo'\n-                            }\n-                        }\n+                // Publish resolved versions\n+                versionMapping {\n+                    allVariants {\n+                        fromResolutionResult()\n+                    }\n+                }\n \n-                        developers {\n-                            developer {\n-                                name \"${project.ext.authorName}\"\n-                                email \"${project.ext.authorEmail}\"\n-                                url \"${project.ext.authorUrl}\"\n-                            }\n-                        }\n+                // Replace published jar with shaded when available. We manually create shading tasks instead of\n+                // applying the shadow plugin itself so need to do it ourselves.\n+                def jarOverrideFile = null\n+                def jarOverrideTask = null\n+                if (tasks.findByName('trimShadedJar')) {\n+                    jarOverrideFile = tasks.trimShadedJar.outJarFiles.find() as File\n+                    jarOverrideTask = tasks.trimShadedJar\n+                } else if (tasks.findByName('shadedJar')) {\n+                    jarOverrideFile = tasks.shadedJar.archivePath\n+                    jarOverrideTask = tasks.shadedJar\n+                }\n+                if (jarOverrideFile != null) {\n+                    // For some reason this needs to be in afterEvaluate or dependencies are lost from the POM.\n+                    afterEvaluate {\n+                        def unshaded = artifacts.find { it.classifier == null && it.extension == 'jar' }\n+                        artifacts.remove(unshaded)\n+                        artifact(jarOverrideFile).builtBy(jarOverrideTask)\n+                    }\n+                }\n \n-                        scm {\n-                            url \"${project.ext.scmUrl}\"\n-                            connection \"${project.ext.scmConnection}\"\n-                            developerConnection \"${project.ext.scmDeveloperConnection}\"\n+                // Clean up the POM.\n+                pom {\n+                    withXml {\n+                        // We publish resolved versions so don't need to publish our dependencyManagement too.\n+                        def dependencyManagement = asNode().get('dependencyManagement')\n+                        if (dependencyManagement != null) {\n+                            asNode().remove(dependencyManagement)\n                         }\n-\n-                        dependencies {\n-                            def writeExclusionRules = { Set<ExcludeRule> excludeRules ->\n-                                if (!excludeRules.empty) {\n-                                    exclusions {\n-                                        excludeRules.each { rule ->\n-                                            exclusion {\n-                                                groupId rule.group\n-                                                artifactId rule.module\n-                                            }\n-                                        }\n-                                    }\n-                                }\n-                            }\n-\n-                            // Write compile-time project dependencies.\n-                            configurations.compile.dependencies.findAll {\n-                                it instanceof ProjectDependency\n-                            }.collect {\n-                                (ProjectDependency) it\n-                            }.toSorted({\n-                                \"${it.group}:${it.dependencyProject.ext.artifactId}\"\n-                            }).each { dep ->\n-                                dependency {\n-                                    groupId dep.group\n-                                    artifactId dep.dependencyProject.ext.artifactId\n-                                    version dep.version ?: dep.dependencyProject.version\n-                                    if (dep.hasProperty('optional') && dep.optional) {\n-                                        optional true\n-                                    }\n-                                    writeExclusionRules(dep.excludeRules)\n-                                }\n-                            }\n-\n-                            // Write runtime project dependencies.\n-                            configurations.runtime.dependencies.findAll {\n-                                it instanceof ProjectDependency &&\n-                                !configurations.compile.dependencies.contains(it)\n-                            }.collect {\n-                                (ProjectDependency) it\n-                            }.toSorted({\n-                                \"${it.group}:${it.dependencyProject.ext.artifactId}\"\n-                            }).each { dep ->\n-                                dependency {\n-                                    groupId dep.group\n-                                    artifactId dep.dependencyProject.ext.artifactId\n-                                    version dep.version ?: dep.dependencyProject.version\n-                                    scope 'runtime'\n-                                    if (dep.hasProperty('optional') && dep.optional) {\n-                                        optional true\n-                                    }\n-                                    writeExclusionRules(dep.excludeRules)\n-                                }\n-                            }\n-\n-                            // Write module dependencies.\n-                            Set<ResolvedDependency> compileDeps =\n-                                    configurations.compile.resolvedConfiguration.firstLevelModuleDependencies\n-                            Set<ResolvedDependency> runtimeDeps =\n-                                    configurations.runtime.resolvedConfiguration.firstLevelModuleDependencies\n-                            Set<Dependency> unresolvedDeps =\n-                                    configurations.runtime.dependencies + configurations.compile.dependencies\n-\n-                            runtimeDeps.toSorted({ \"${it.moduleGroup}:${it.moduleName}\" }).each { dep ->\n-                                def unresolvedDep = unresolvedDeps.find {\n-                                    it.group == dep.moduleGroup && it.name == dep.moduleName\n-                                }\n-\n-                                if (unresolvedDep instanceof ExternalModuleDependency) {\n-                                    if (project.hasFlags('relocate') && project.ext.relocations.find({\n-                                        it.name == \"${dep.moduleGroup}:${dep.moduleName}\"\n-                                    })) {\n-                                        // Shaded dependency\n-                                        return\n-                                    }\n-\n-                                    dependency {\n-                                        groupId dep.moduleGroup\n-                                        artifactId dep.moduleName\n-                                        version dep.moduleVersion\n-\n-                                        // Write classifier if exists.\n-                                        if (dep.moduleArtifacts.find()?.classifier) {\n-                                            classifier dep.moduleArtifacts.find().classifier\n-                                        }\n-\n-                                        if (!compileDeps.contains(dep)) {\n-                                            scope 'runtime'\n-                                        }\n-\n-                                        if (unresolvedDep.hasProperty('optional') && unresolvedDep.optional) {\n-                                            optional true\n-                                        }\n-\n-                                        writeExclusionRules(unresolvedDep.excludeRules)\n-                                    }\n-                                }\n+                        \n+                        // Strip out shaded dependencies. We manually create shading tasks instead of applying\n+                        // the shadow plugin itself so need to do it ourselves.\n+                        def dependencies = asNode().get('dependencies')[0]\n+                        def shaded = dependencies.findAll {\n+                            def groupId = it.get('groupId')[0]\n+                            def artifactId = it.get('artifactId')[0]\n+                            return project.ext.relocations.find {\n+                                it.name == \"${groupId.text()}:${artifactId.text()}\"\n                             }\n                         }\n+                        shaded.each { dependencies.remove(it) }\n                     }\n                 }\n+            }\n+        }\n+    }\n+}\n \n-                // Find the main JAR and the task that generates it.\n-                File mainJarFile\n-                Task mainJarTask\n-                if (tasks.findByName('trimShadedJar')) {\n-                    mainJarFile = tasks.trimShadedJar.outJarFiles.find() as File\n-                    mainJarTask = tasks.trimShadedJar\n-                } else if (tasks.findByName('shadedJar')) {\n-                    mainJarFile = tasks.shadedJar.archivePath\n-                    mainJarTask = tasks.shadedJar\n-                } else {\n-                    mainJarFile = tasks.jar.archivePath\n-                    mainJarTask = tasks.jar\n+configure(projectsWithFlags('publish')) {\n+    publishing {\n+        publications.each {publication->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1460fd3551824903a41bf09924ade7ef7bc3a68f"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc0NTkxNQ==", "bodyText": "Do we now always generate source/javadoc JARs?", "url": "https://github.com/line/armeria/pull/2420#discussion_r372745915", "createdAt": "2020-01-30T03:37:42Z", "author": {"login": "trustin"}, "path": "gradle/scripts/lib/java.gradle", "diffHunk": "@@ -48,45 +59,12 @@ configure(projectsWithFlags('java')) {\n                     def useIncrementalCompilation = deps.size() == 0\n                     options.incremental = useIncrementalCompilation\n                     logger.info(\"${useIncrementalCompilation ? 'Enabling' : 'Disabling'} \" +\n-                                \"incremental compilation for '${task.path}'\")\n+                            \"incremental compilation for '${task.path}'\")\n                 }\n             }\n         }\n     }\n \n-    // Generate a source JAR.\n-    task sourceJar(type: Jar) {\n-        classifier = 'sources'\n-        from sourceSets.main.allSource\n-    }\n-\n-    // Generate a javadoc JAR.\n-    task javadocJar(type: Jar, dependsOn: tasks.javadoc) {\n-        classifier = 'javadoc'\n-        from javadoc.destinationDir\n-    }\n-\n-    // Generate source/javadoc JARs only when publishing.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1460fd3551824903a41bf09924ade7ef7bc3a68f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc0NjAyMg==", "bodyText": "Thanks! \ud83d\ude05", "url": "https://github.com/line/armeria/pull/2420#discussion_r372746022", "createdAt": "2020-01-30T03:38:19Z", "author": {"login": "trustin"}, "path": "settings.gradle", "diffHunk": "@@ -40,11 +40,14 @@ includeWithFlags ':it:server',                'java', 'relocate'\n includeWithFlags ':it:spring:boot-tomcat',    'java', 'relocate'\n includeWithFlags ':it:spring:boot-tomcat8.5', 'java', 'relocate'\n includeWithFlags ':testing-internal',         'java', 'relocate'\n-includeWithFlags ':thrift0.11',               'java', 'relocate'\n+includeWithFlags ':thrift0.12',               'java', 'relocate'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1460fd3551824903a41bf09924ade7ef7bc3a68f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc0NjUxMg==", "bodyText": "Perhaps we could make this done in settings-flags.gradle and use the name and flag that's less likely to clash with user modules, e.g. dependency-management?", "url": "https://github.com/line/armeria/pull/2420#discussion_r372746512", "createdAt": "2020-01-30T03:41:10Z", "author": {"login": "trustin"}, "path": "settings.gradle", "diffHunk": "@@ -40,11 +40,14 @@ includeWithFlags ':it:server',                'java', 'relocate'\n includeWithFlags ':it:spring:boot-tomcat',    'java', 'relocate'\n includeWithFlags ':it:spring:boot-tomcat8.5', 'java', 'relocate'\n includeWithFlags ':testing-internal',         'java', 'relocate'\n-includeWithFlags ':thrift0.11',               'java', 'relocate'\n+includeWithFlags ':thrift0.12',               'java', 'relocate'\n \n // Unpublished non-Java projects\n includeWithFlags ':docs-client'\n \n+// Unpublished dependency management project to create a virtual platform.\n+includeWithFlags ':dependencies', 'dependencies'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1460fd3551824903a41bf09924ade7ef7bc3a68f"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fa8419cf2b3b0bb42eea67fbfc967d8b6ad87a9", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/line/armeria/commit/3fa8419cf2b3b0bb42eea67fbfc967d8b6ad87a9", "committedDate": "2020-01-30T05:31:15Z", "message": "Cleanups"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5OTkwOTg0", "url": "https://github.com/line/armeria/pull/2420#pullrequestreview-349990984", "createdAt": "2020-01-29T10:10:24Z", "commit": {"oid": "0660c2f65e71c34f936816f814831d1affaf0ecd"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMDoxMDoyNVrOFjC9FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNToyNjoxNFrOFjfweQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5Mjg4NQ==", "bodyText": "I considered separating the netty modules we expose in our API and the ones we don't, but I found almost all actually do end up in the API, even netty-codec-http2 because of Http2Exception so just stuff them all into API", "url": "https://github.com/line/armeria/pull/2420#discussion_r372292885", "createdAt": "2020-01-29T10:10:25Z", "author": {"login": "anuraaga"}, "path": "core/build.gradle", "diffHunk": "@@ -85,52 +85,49 @@ dependencies {\n         \"java${version}TestImplementation\" files(sourceSets.test.output.classesDirs) { builtBy compileTestJava }\n     }\n \n+    // Logging decorators expose slf4j in API\n+    api 'org.slf4j:slf4j-api'\n+\n     // cglib\n-    testCompile 'cglib:cglib'\n+    testImplementation 'cglib:cglib'\n \n     // Caffeine\n-    compile 'com.github.ben-manes.caffeine:caffeine'\n+    implementation 'com.github.ben-manes.caffeine:caffeine'\n \n     // Jackson\n     [ 'jackson-core', 'jackson-annotations', 'jackson-databind' ].each {\n-        compile \"com.fasterxml.jackson.core:$it\"\n+        api \"com.fasterxml.jackson.core:$it\"\n     }\n \n     // Micrometer and other metric-related stuff\n-    compile 'io.micrometer:micrometer-core'\n-    compile('io.micrometer:micrometer-registry-prometheus') {\n-        ext.optional = true\n-    }\n-    compile('io.dropwizard.metrics:metrics-core') {\n-        ext.optional = true\n-    }\n-    compile('io.prometheus:simpleclient_common') {\n-        ext.optional = true\n-    }\n+    api 'io.micrometer:micrometer-core'\n+    optionalApi 'io.micrometer:micrometer-registry-prometheus'\n+    optionalApi 'io.dropwizard.metrics:metrics-core'\n+    optionalApi 'io.prometheus:simpleclient_common'\n \n     // Netty\n     [ 'netty-transport', 'netty-codec-http2', 'netty-codec-haproxy', 'netty-resolver-dns' ].each {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0660c2f65e71c34f936816f814831d1affaf0ecd"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5NjU5Mw==", "bodyText": "FYI shadedTest classpath used to contain validation-api while test didn't because it is compileOnly. Now neither do.", "url": "https://github.com/line/armeria/pull/2420#discussion_r372296593", "createdAt": "2020-01-29T10:17:29Z", "author": {"login": "anuraaga"}, "path": "spring/boot-autoconfigure/build.gradle", "diffHunk": "@@ -1,21 +1,19 @@\n dependencies {\n-    compile(project(':thrift')) {\n-        ext.optional = true // To let a user choose between thrift and thrift0.9.\n-    }\n-    compile project(':logback')\n+    // To let a user choose between thrift and thrift0.9.\n+    compileOnly project(':thrift')\n+    implementation project(':logback')\n \n-    compile('io.micrometer:micrometer-registry-prometheus') {\n-        ext.optional = true\n-    }\n-    compile('io.dropwizard.metrics:metrics-json') {\n-        ext.optional = true\n-    }\n-    compile 'javax.inject:javax.inject'\n+    // TODO(anuraaga): Consider removing these since this module does not have related functionality.\n+    optionalApi 'io.micrometer:micrometer-registry-prometheus'\n+    optionalApi 'io.dropwizard.metrics:metrics-json'\n+\n+    api 'javax.inject:javax.inject'\n     compileOnly 'javax.validation:validation-api'\n-    compile 'org.springframework.boot:spring-boot-starter'\n+    api 'org.springframework.boot:spring-boot-starter'\n     annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'\n \n-    testCompile project(':grpc')\n-    testCompile 'org.springframework.boot:spring-boot-starter-actuator'\n-    testCompile 'org.springframework.boot:spring-boot-starter-test'\n+    testImplementation project(':grpc')\n+    testImplementation project(':thrift')\n+    testImplementation 'org.springframework.boot:spring-boot-starter-actuator'\n+    testImplementation 'org.springframework.boot:spring-boot-starter-test'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0660c2f65e71c34f936816f814831d1affaf0ecd"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5NzE5Nw==", "bodyText": "Found this \"bug\" while playing with removing extraneous netty from compile classpath (though didn't end up actually doing that)", "url": "https://github.com/line/armeria/pull/2420#discussion_r372297197", "createdAt": "2020-01-29T10:18:42Z", "author": {"login": "anuraaga"}, "path": "testing-internal/src/main/java/com/linecorp/armeria/testing/internal/webapp/WebAppContainerTest.java", "diffHunk": "@@ -42,12 +42,11 @@\n import com.linecorp.armeria.client.ClientFactory;\n import com.linecorp.armeria.client.WebClient;\n import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpHeaderNames;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0660c2f65e71c34f936816f814831d1affaf0ecd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc2MjgxMg==", "bodyText": "It's always generated for assemble (and so build). I find this more idiomatic and not a huge problem - it only affects a curent target so e.g., :grpc:assemble only builds javadoc for grpc, not core. And IntelliJ Gradle Runner doesn't build javadoc. I was a bit surprised that our CI wasn't building javadoc, and I think it's good to verify javadoc builds in CI too.\nBut not hard to restore the skipping behavior if you still prefer that let me know.", "url": "https://github.com/line/armeria/pull/2420#discussion_r372762812", "createdAt": "2020-01-30T05:15:12Z", "author": {"login": "anuraaga"}, "path": "gradle/scripts/lib/java.gradle", "diffHunk": "@@ -48,45 +59,12 @@ configure(projectsWithFlags('java')) {\n                     def useIncrementalCompilation = deps.size() == 0\n                     options.incremental = useIncrementalCompilation\n                     logger.info(\"${useIncrementalCompilation ? 'Enabling' : 'Disabling'} \" +\n-                                \"incremental compilation for '${task.path}'\")\n+                            \"incremental compilation for '${task.path}'\")\n                 }\n             }\n         }\n     }\n \n-    // Generate a source JAR.\n-    task sourceJar(type: Jar) {\n-        classifier = 'sources'\n-        from sourceSets.main.allSource\n-    }\n-\n-    // Generate a javadoc JAR.\n-    task javadocJar(type: Jar, dependsOn: tasks.javadoc) {\n-        classifier = 'javadoc'\n-        from javadoc.destinationDir\n-    }\n-\n-    // Generate source/javadoc JARs only when publishing.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc0NTkxNQ=="}, "originalCommit": {"oid": "1460fd3551824903a41bf09924ade7ef7bc3a68f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc2MzQxOQ==", "bodyText": "I was somewhat surprised to find this in our public API, but looking at it realized it is tedious if we wanted to separate. Something to think about.\nAlso, I use java-jwt too and it's probably a fine choice, but worth giving a look at other libraries too I guess, maybe https://github.com/google/tink/blob/master/docs/JAVA-HOWTO.md", "url": "https://github.com/line/armeria/pull/2420#discussion_r372763419", "createdAt": "2020-01-30T05:18:34Z", "author": {"login": "anuraaga"}, "path": "saml/build.gradle", "diffHunk": "@@ -1,12 +1,12 @@\n dependencies {\n-    compile 'com.auth0:java-jwt'\n-    compile 'net.shibboleth.utilities:java-support'\n-    compile 'org.opensaml:opensaml-core'\n-    compile 'org.opensaml:opensaml-saml-api'\n-    compile 'org.opensaml:opensaml-saml-impl'\n-    compile 'org.opensaml:opensaml-messaging-api'\n-    compile 'org.opensaml:opensaml-messaging-impl'\n-    compile 'org.opensaml:opensaml-soap-api'\n-    compile 'org.opensaml:opensaml-soap-impl'\n-    testCompile 'org.jsoup:jsoup'\n+    api 'com.auth0:java-jwt'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1460fd3551824903a41bf09924ade7ef7bc3a68f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc2NDYxNQ==", "bodyText": "Good idea!", "url": "https://github.com/line/armeria/pull/2420#discussion_r372764615", "createdAt": "2020-01-30T05:25:19Z", "author": {"login": "anuraaga"}, "path": "settings.gradle", "diffHunk": "@@ -40,11 +40,14 @@ includeWithFlags ':it:server',                'java', 'relocate'\n includeWithFlags ':it:spring:boot-tomcat',    'java', 'relocate'\n includeWithFlags ':it:spring:boot-tomcat8.5', 'java', 'relocate'\n includeWithFlags ':testing-internal',         'java', 'relocate'\n-includeWithFlags ':thrift0.11',               'java', 'relocate'\n+includeWithFlags ':thrift0.12',               'java', 'relocate'\n \n // Unpublished non-Java projects\n includeWithFlags ':docs-client'\n \n+// Unpublished dependency management project to create a virtual platform.\n+includeWithFlags ':dependencies', 'dependencies'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc0NjUxMg=="}, "originalCommit": {"oid": "1460fd3551824903a41bf09924ade7ef7bc3a68f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc2NDc5Mw==", "bodyText": "Doh yeah", "url": "https://github.com/line/armeria/pull/2420#discussion_r372764793", "createdAt": "2020-01-30T05:26:14Z", "author": {"login": "anuraaga"}, "path": "gradle/scripts/lib/common-dependencies.gradle", "diffHunk": "@@ -25,45 +25,96 @@ rootProject.ext {\n     }\n }\n \n-allprojects {\n-    apply plugin: 'io.spring.dependency-management'\n-\n-    dependencyManagement {\n-        generatedPomCustomization {\n-            enabled = false\n+def managedDependencyVersions = [:]\n+def managedDependencyExclusions = [:].withDefault { [] }\n+rootProject.ext.dependenciesYaml.forEach { String key, value ->\n+    if (key == 'boms') {\n+        value.each {\n+            def parsed = it.split(':')\n+            managedDependencyVersions[\"${parsed[0]}:${parsed[1]}\"] = parsed[2]\n         }\n-\n-        imports {\n-            if (rootProject.ext.dependenciesYaml.containsKey('boms')) {\n-                dependenciesYaml['boms'].each {\n-                    mavenBom \"${it}\"\n+    } else {\n+        def groupId = key\n+        def artifact = value as Map\n+        artifact.forEach { String artifactId, Map props ->\n+            if (props.containsKey('version')) {\n+                managedDependencyVersions[\"${groupId}:${artifactId}\"] = \"${props['version']}\"\n+            }\n+            if (props.containsKey('exclusions')) {\n+                props['exclusions'].each { String spec ->\n+                    def parsed = spec.split(':')\n+                    managedDependencyExclusions[\"${groupId}:${artifactId}\"].add([\n+                            group: parsed[0],\n+                            module: parsed[1],\n+                    ])\n                 }\n             }\n         }\n+    }\n+}\n+\n+configure(projectsWithFlags('dependencies')) {\n+    apply plugin: 'java-platform'\n+\n+    javaPlatform {\n+        allowDependencies()\n+    }\n+\n+    dependencies {\n+        if (rootProject.ext.dependenciesYaml.containsKey('boms')) {\n+            dependenciesYaml['boms'].each {\n+                api platform(\"${it}\")\n+            }\n+        }\n \n-        dependencies {\n+        constraints {\n             rootProject.ext.dependenciesYaml.forEach { String key, value ->\n                 if (key != 'boms') {\n                     def groupId = key\n                     def artifact = value as Map\n                     artifact.forEach { String artifactId, Map props ->\n                         if (props.containsKey('version')) {\n-                            dependency(\"${groupId}:${artifactId}:${props['version']}\") {\n-                                if (props.containsKey('exclusions')) {\n-                                    props['exclusions'].each { String spec ->\n-                                        exclude spec\n-                                    }\n-                                }\n-                            }\n+                            api \"${groupId}:${artifactId}:${props['version']}\"\n                         }\n                     }\n                 }\n             }\n         }\n     }\n+}\n \n+allprojects {\n     ext {\n-        managedVersions = dependencyManagement.managedVersions\n+        managedVersions = managedDependencyVersions\n+    }\n+}\n+\n+def dependencyProjects = projectsWithFlags('dependencies')\n+if (!dependencyProjects.isEmpty()) {\n+    def dependencyProject = dependencyProjects[0]\n+    configure(projectsWithFlags('java')) {\n+        // We need to use afterEvaluate because there is no way to guarantee configuration.canBeResolved and\n+        // canBeConsumed are set otherwise.\n+        afterEvaluate {\n+            evaluationDependsOn(dependencyProject.path)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc0NDg4Mg=="}, "originalCommit": {"oid": "1460fd3551824903a41bf09924ade7ef7bc3a68f"}, "originalPosition": 95}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34794a4571b4cd50a9d1aa4ea5802bc20edc29f3", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/line/armeria/commit/34794a4571b4cd50a9d1aa4ea5802bc20edc29f3", "committedDate": "2020-01-31T06:07:40Z", "message": "Fix exclusions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e23bc759a65a8e053228d5ba21a0b094a227417", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/line/armeria/commit/3e23bc759a65a8e053228d5ba21a0b094a227417", "committedDate": "2020-01-31T07:39:29Z", "message": "Update README.md"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNDc5Mjcw", "url": "https://github.com/line/armeria/pull/2420#pullrequestreview-351479270", "createdAt": "2020-01-31T12:41:08Z", "commit": {"oid": "34794a4571b4cd50a9d1aa4ea5802bc20edc29f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMjo0MTowOFrOFkKN7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMjo0MTowOFrOFkKN7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ2MDQ2MA==", "bodyText": "This is nice. Good to know whenObjectAdded", "url": "https://github.com/line/armeria/pull/2420#discussion_r373460460", "createdAt": "2020-01-31T12:41:08Z", "author": {"login": "trustin"}, "path": "gradle/scripts/lib/common-dependencies.gradle", "diffHunk": "@@ -95,6 +95,16 @@ configure(dependencyManagementProject) {\n configure(projectsWithFlags('java')) {\n     evaluationDependsOn(dependencyManagementProject.path)\n \n+    configurations.configureEach { configuration ->\n+        configuration.dependencies.whenObjectAdded { dep ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34794a4571b4cd50a9d1aa4ea5802bc20edc29f3"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c84fcf056fe8b8667eb99e33058f65360083e15e", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/line/armeria/commit/c84fcf056fe8b8667eb99e33058f65360083e15e", "committedDate": "2020-02-01T06:25:50Z", "message": "Copy exclusions to reflections"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2042526530b4e598895e6429d3b65d031a5fb94", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/line/armeria/commit/f2042526530b4e598895e6429d3b65d031a5fb94", "committedDate": "2020-02-01T06:26:04Z", "message": "Merge branch 'modern-gradle' of github.com:anuraaga/armeria into modern-gradle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMDM1MjE1", "url": "https://github.com/line/armeria/pull/2420#pullrequestreview-352035215", "createdAt": "2020-02-03T06:07:03Z", "commit": {"oid": "f2042526530b4e598895e6429d3b65d031a5fb94"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNjc0MjA3", "url": "https://github.com/line/armeria/pull/2420#pullrequestreview-352674207", "createdAt": "2020-02-04T01:26:38Z", "commit": {"oid": "f2042526530b4e598895e6429d3b65d031a5fb94"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNzMzNTgz", "url": "https://github.com/line/armeria/pull/2420#pullrequestreview-352733583", "createdAt": "2020-02-04T05:37:19Z", "commit": {"oid": "f2042526530b4e598895e6429d3b65d031a5fb94"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNTozNzoxOVrOFlIlrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNTozNzoxOVrOFlIlrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4MjM0OA==", "bodyText": "I wonder why this is not testImplementation?", "url": "https://github.com/line/armeria/pull/2420#discussion_r374482348", "createdAt": "2020-02-04T05:37:19Z", "author": {"login": "ikhoon"}, "path": "jetty/build.gradle", "diffHunk": "@@ -1,7 +1,7 @@\n dependencies {\n     // Jetty\n-    compile 'org.eclipse.jetty:jetty-server'\n+    api 'org.eclipse.jetty:jetty-server'\n     ['jetty-webapp', 'jetty-annotations', 'apache-jsp', 'apache-jstl'].each {\n-        testCompile \"org.eclipse.jetty:$it\"\n+        api \"org.eclipse.jetty:$it\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2042526530b4e598895e6429d3b65d031a5fb94"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3e5fd858ba88d64d4926902bbcf51ed4c613d61", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/line/armeria/commit/a3e5fd858ba88d64d4926902bbcf51ed4c613d61", "committedDate": "2020-02-04T06:32:35Z", "message": "Fix jetty test scope."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b5dd9cbee6b180efc4fbde58b36cba1b0b51ce3", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/line/armeria/commit/6b5dd9cbee6b180efc4fbde58b36cba1b0b51ce3", "committedDate": "2020-02-04T08:21:55Z", "message": "Merge branch 'master' of github.com:line/armeria into modern-gradle"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 906, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}