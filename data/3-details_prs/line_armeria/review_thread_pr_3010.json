{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwODUzMjc5", "number": 3010, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjozMjozM1rOEaxTsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNTo1NjowOFrOEazWvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTA2MjkwOnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/server-annotated-service.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjozMjozM1rOHEZgPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjozMjozM1rOHEZgPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NDIwNQ==", "bodyText": "Let's add a reference link for Kotlin Coroutines\nhttps://kotlinlang.org/docs/reference/coroutines-overview.html\nBetter to describe how to install the Kotlin module?\ndependencies {\n    implementation 'com.linecorp.armeria:armeria-kotlin'\n}", "url": "https://github.com/line/armeria/pull/3010#discussion_r474374205", "createdAt": "2020-08-21T02:32:33Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support\n+\n+You can implement annotated services with Kotlin Coroutines.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae4f9338dfef01a502ab73d81cc9ec38f778005"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTA2NzM1OnYy", "diffSide": "RIGHT", "path": "examples/README.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjozNTowOVrOHEZixw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMzowMzo0MlrOHEaAJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NDg1NQ==", "bodyText": "Does gitpod support Kotlin? If so, we could add a link to it like we did for annotated-http-service.", "url": "https://github.com/line/armeria/pull/3010#discussion_r474374855", "createdAt": "2020-08-21T02:35:09Z", "author": {"login": "trustin"}, "path": "examples/README.md", "diffHunk": "@@ -6,6 +6,10 @@\n   - Learn how to write an HTTP service using annotations.\n   - See [Annotated services](https://armeria.dev/docs/server-annotated-service).\n \n+- `annotated-http-service-kotlin`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae4f9338dfef01a502ab73d81cc9ec38f778005"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM4MjI5OA==", "bodyText": "Gitpod seems to support Kotlin. https://www.gitpod.io/docs/languages/kotlin/", "url": "https://github.com/line/armeria/pull/3010#discussion_r474382298", "createdAt": "2020-08-21T03:03:24Z", "author": {"login": "okue"}, "path": "examples/README.md", "diffHunk": "@@ -6,6 +6,10 @@\n   - Learn how to write an HTTP service using annotations.\n   - See [Annotated services](https://armeria.dev/docs/server-annotated-service).\n \n+- `annotated-http-service-kotlin`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NDg1NQ=="}, "originalCommit": {"oid": "5ae4f9338dfef01a502ab73d81cc9ec38f778005"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM4MjM3Mw==", "bodyText": "I'll add a link.", "url": "https://github.com/line/armeria/pull/3010#discussion_r474382373", "createdAt": "2020-08-21T03:03:42Z", "author": {"login": "okue"}, "path": "examples/README.md", "diffHunk": "@@ -6,6 +6,10 @@\n   - Learn how to write an HTTP service using annotations.\n   - See [Annotated services](https://armeria.dev/docs/server-annotated-service).\n \n+- `annotated-http-service-kotlin`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NDg1NQ=="}, "originalCommit": {"oid": "5ae4f9338dfef01a502ab73d81cc9ec38f778005"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTA2ODA0OnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/server-annotated-service.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjozNToyMlrOHEZjIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjozNToyMlrOHEZjIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NDk0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If you annotates methods with `@Blocking` or enables `useBlockingTaskExecutor`,\n          \n          \n            \n            If you annotates methods with <type://@Blocking> or enables <type://AnnotatedServiceBindingBuilder#useBlockingTaskExecutor(boolean)>,", "url": "https://github.com/line/armeria/pull/3010#discussion_r474374944", "createdAt": "2020-08-21T02:35:22Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support\n+\n+You can implement annotated services with Kotlin Coroutines.\n+\n+```kotlin\n+class MyAnnotatedService {\n+    @Get(\"/users/{name}\")\n+    suspend fun getUserToken(@Param(\"name\") name: String): HttpResponse {\n+        val user = myReactiveRepository.findByName(name).await()\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+By default, armeria uses a context-aware event loop as a [coroutine dispatcher][CoroutineDispatcher].\n+If you annotates methods with `@Blocking` or enables `useBlockingTaskExecutor`,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae4f9338dfef01a502ab73d81cc9ec38f778005"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTA2ODc3OnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/server-annotated-service.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjozNTo0M1rOHEZjfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjozNTo0M1rOHEZjfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NTAzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            By default, armeria uses a context-aware event loop as a [coroutine dispatcher][CoroutineDispatcher].\n          \n          \n            \n            By default, Armeria uses a context-aware event loop as a [coroutine dispatcher][CoroutineDispatcher].", "url": "https://github.com/line/armeria/pull/3010#discussion_r474375039", "createdAt": "2020-08-21T02:35:43Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support\n+\n+You can implement annotated services with Kotlin Coroutines.\n+\n+```kotlin\n+class MyAnnotatedService {\n+    @Get(\"/users/{name}\")\n+    suspend fun getUserToken(@Param(\"name\") name: String): HttpResponse {\n+        val user = myReactiveRepository.findByName(name).await()\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+By default, armeria uses a context-aware event loop as a [coroutine dispatcher][CoroutineDispatcher].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae4f9338dfef01a502ab73d81cc9ec38f778005"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTA2OTU3OnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/server-annotated-service.mdx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjozNjoxNVrOHEZkAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMzoxOTo0NlrOHEaPMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NTE2OA==", "bodyText": "We do not capitalize every word in headings. Kotlin coroutines support or Kotlin Coroutines support?", "url": "https://github.com/line/armeria/pull/3010#discussion_r474375168", "createdAt": "2020-08-21T02:36:15Z", "author": {"login": "trustin"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae4f9338dfef01a502ab73d81cc9ec38f778005"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM4NjIyNQ==", "bodyText": "I'll change to Kotlin coroutines support", "url": "https://github.com/line/armeria/pull/3010#discussion_r474386225", "createdAt": "2020-08-21T03:19:46Z", "author": {"login": "okue"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NTE2OA=="}, "originalCommit": {"oid": "5ae4f9338dfef01a502ab73d81cc9ec38f778005"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTA3MDU4OnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/server-annotated-service.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjozNjo1MlrOHEZkjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjozNjo1MlrOHEZkjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NTMwOA==", "bodyText": "Can we just return a String here?", "url": "https://github.com/line/armeria/pull/3010#discussion_r474375308", "createdAt": "2020-08-21T02:36:52Z", "author": {"login": "trustin"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support\n+\n+You can implement annotated services with Kotlin Coroutines.\n+\n+```kotlin\n+class MyAnnotatedService {\n+    @Get(\"/users/{name}\")\n+    suspend fun getUserToken(@Param(\"name\") name: String): HttpResponse {\n+        val user = myReactiveRepository.findByName(name).await()\n+        return HttpResponse.of(user.token)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae4f9338dfef01a502ab73d81cc9ec38f778005"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTA3MTg0OnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/server-annotated-service.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjozNzo1MFrOHEZlYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjozNzo1MFrOHEZlYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NTUyMA==", "bodyText": "armeria -> Armeria\nIf coroutine dispatcher is referred only once, how about just using an inline hyperlink?", "url": "https://github.com/line/armeria/pull/3010#discussion_r474375520", "createdAt": "2020-08-21T02:37:50Z", "author": {"login": "trustin"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support\n+\n+You can implement annotated services with Kotlin Coroutines.\n+\n+```kotlin\n+class MyAnnotatedService {\n+    @Get(\"/users/{name}\")\n+    suspend fun getUserToken(@Param(\"name\") name: String): HttpResponse {\n+        val user = myReactiveRepository.findByName(name).await()\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+By default, armeria uses a context-aware event loop as a [coroutine dispatcher][CoroutineDispatcher].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae4f9338dfef01a502ab73d81cc9ec38f778005"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTA3MzYwOnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/server-annotated-service.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjozODo1NlrOHEZmYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjozODo1NlrOHEZmYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NTc3OQ==", "bodyText": "annotates methods -> annotate a service method\nenables ... -> enable the ... property,\n@Blocking -> <type://@Blocking>", "url": "https://github.com/line/armeria/pull/3010#discussion_r474375779", "createdAt": "2020-08-21T02:38:56Z", "author": {"login": "trustin"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support\n+\n+You can implement annotated services with Kotlin Coroutines.\n+\n+```kotlin\n+class MyAnnotatedService {\n+    @Get(\"/users/{name}\")\n+    suspend fun getUserToken(@Param(\"name\") name: String): HttpResponse {\n+        val user = myReactiveRepository.findByName(name).await()\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+By default, armeria uses a context-aware event loop as a [coroutine dispatcher][CoroutineDispatcher].\n+If you annotates methods with `@Blocking` or enables `useBlockingTaskExecutor`,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae4f9338dfef01a502ab73d81cc9ec38f778005"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTA3NDEwOnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/server-annotated-service.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjozOToyMFrOHEZmtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjozOToyMFrOHEZmtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NTg2Mw==", "bodyText": "How about: A context-aware blocking executor is used as a dispatcher if you annotate ...", "url": "https://github.com/line/armeria/pull/3010#discussion_r474375863", "createdAt": "2020-08-21T02:39:20Z", "author": {"login": "trustin"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support\n+\n+You can implement annotated services with Kotlin Coroutines.\n+\n+```kotlin\n+class MyAnnotatedService {\n+    @Get(\"/users/{name}\")\n+    suspend fun getUserToken(@Param(\"name\") name: String): HttpResponse {\n+        val user = myReactiveRepository.findByName(name).await()\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+By default, armeria uses a context-aware event loop as a [coroutine dispatcher][CoroutineDispatcher].\n+If you annotates methods with `@Blocking` or enables `useBlockingTaskExecutor`,\n+a context-aware blocking executor is used as a dispatcher.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae4f9338dfef01a502ab73d81cc9ec38f778005"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTA3NDU3OnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/server-annotated-service.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjozOTozMVrOHEZm9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjozOTozMVrOHEZm9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NTkyNg==", "bodyText": "enables -> Enable\nMissing period", "url": "https://github.com/line/armeria/pull/3010#discussion_r474375926", "createdAt": "2020-08-21T02:39:31Z", "author": {"login": "trustin"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support\n+\n+You can implement annotated services with Kotlin Coroutines.\n+\n+```kotlin\n+class MyAnnotatedService {\n+    @Get(\"/users/{name}\")\n+    suspend fun getUserToken(@Param(\"name\") name: String): HttpResponse {\n+        val user = myReactiveRepository.findByName(name).await()\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+By default, armeria uses a context-aware event loop as a [coroutine dispatcher][CoroutineDispatcher].\n+If you annotates methods with `@Blocking` or enables `useBlockingTaskExecutor`,\n+a context-aware blocking executor is used as a dispatcher.\n+\n+```kotlin\n+serverBuilder\n+    .annotatedService()\n+    // enables `useBlockingTaskExecutor`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae4f9338dfef01a502ab73d81cc9ec38f778005"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTA3NjAyOnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/server-annotated-service.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjo0MDoxNVrOHEZnvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjo0MDoxNVrOHEZnvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NjEyNQ==", "bodyText": "Ditto - could just return a String?", "url": "https://github.com/line/armeria/pull/3010#discussion_r474376125", "createdAt": "2020-08-21T02:40:15Z", "author": {"login": "trustin"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support\n+\n+You can implement annotated services with Kotlin Coroutines.\n+\n+```kotlin\n+class MyAnnotatedService {\n+    @Get(\"/users/{name}\")\n+    suspend fun getUserToken(@Param(\"name\") name: String): HttpResponse {\n+        val user = myReactiveRepository.findByName(name).await()\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+By default, armeria uses a context-aware event loop as a [coroutine dispatcher][CoroutineDispatcher].\n+If you annotates methods with `@Blocking` or enables `useBlockingTaskExecutor`,\n+a context-aware blocking executor is used as a dispatcher.\n+\n+```kotlin\n+serverBuilder\n+    .annotatedService()\n+    // enables `useBlockingTaskExecutor`\n+    .useBlockingTaskExecutor(true)\n+    .build(MyAnnotatedService())\n+\n+// or\n+\n+import com.linecorp.armeria.server.annotation.Blocking\n+\n+class MyAnnotatedService {\n+    @Blocking\n+    @Get(\"/blocking/users/{name}\")\n+    suspend fun getUserTokenBlocking(@Param(\"name\") name: String): HttpResponse {\n+        val id = myReactiveClient.getId(name).await()\n+        val user = myBlockingRepository.findById(id)\n+        return HttpResponse.of(user.token)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae4f9338dfef01a502ab73d81cc9ec38f778005"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTA3NjUwOnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/server-annotated-service.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjo0MDozNFrOHEZoAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjo0MDozNFrOHEZoAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NjE5NA==", "bodyText": "and/or could be simplified to 'or'", "url": "https://github.com/line/armeria/pull/3010#discussion_r474376194", "createdAt": "2020-08-21T02:40:34Z", "author": {"login": "trustin"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support\n+\n+You can implement annotated services with Kotlin Coroutines.\n+\n+```kotlin\n+class MyAnnotatedService {\n+    @Get(\"/users/{name}\")\n+    suspend fun getUserToken(@Param(\"name\") name: String): HttpResponse {\n+        val user = myReactiveRepository.findByName(name).await()\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+By default, armeria uses a context-aware event loop as a [coroutine dispatcher][CoroutineDispatcher].\n+If you annotates methods with `@Blocking` or enables `useBlockingTaskExecutor`,\n+a context-aware blocking executor is used as a dispatcher.\n+\n+```kotlin\n+serverBuilder\n+    .annotatedService()\n+    // enables `useBlockingTaskExecutor`\n+    .useBlockingTaskExecutor(true)\n+    .build(MyAnnotatedService())\n+\n+// or\n+\n+import com.linecorp.armeria.server.annotation.Blocking\n+\n+class MyAnnotatedService {\n+    @Blocking\n+    @Get(\"/blocking/users/{name}\")\n+    suspend fun getUserTokenBlocking(@Param(\"name\") name: String): HttpResponse {\n+        val id = myReactiveClient.getId(name).await()\n+        val user = myBlockingRepository.findById(id)\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+<Tip>\n+\n+If you use [Logback integration][logback] and/or [Zipkin integration][zipkin],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae4f9338dfef01a502ab73d81cc9ec38f778005"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTA3ODg0OnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/server-annotated-service.mdx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjo0MjoxMFrOHEZpcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMzo0MTo1MlrOHEaiwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NjU2Mg==", "bodyText": "... executed in a <type://RequestContext>-aware thread. ?\nIf >-aware breaks a link, then ... executed in a thread that is aware of <type://RequestContext>.", "url": "https://github.com/line/armeria/pull/3010#discussion_r474376562", "createdAt": "2020-08-21T02:42:10Z", "author": {"login": "trustin"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support\n+\n+You can implement annotated services with Kotlin Coroutines.\n+\n+```kotlin\n+class MyAnnotatedService {\n+    @Get(\"/users/{name}\")\n+    suspend fun getUserToken(@Param(\"name\") name: String): HttpResponse {\n+        val user = myReactiveRepository.findByName(name).await()\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+By default, armeria uses a context-aware event loop as a [coroutine dispatcher][CoroutineDispatcher].\n+If you annotates methods with `@Blocking` or enables `useBlockingTaskExecutor`,\n+a context-aware blocking executor is used as a dispatcher.\n+\n+```kotlin\n+serverBuilder\n+    .annotatedService()\n+    // enables `useBlockingTaskExecutor`\n+    .useBlockingTaskExecutor(true)\n+    .build(MyAnnotatedService())\n+\n+// or\n+\n+import com.linecorp.armeria.server.annotation.Blocking\n+\n+class MyAnnotatedService {\n+    @Blocking\n+    @Get(\"/blocking/users/{name}\")\n+    suspend fun getUserTokenBlocking(@Param(\"name\") name: String): HttpResponse {\n+        val id = myReactiveClient.getId(name).await()\n+        val user = myBlockingRepository.findById(id)\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+<Tip>\n+\n+If you use [Logback integration][logback] and/or [Zipkin integration][zipkin],\n+coroutines should be executed in threads context aware of [RequestContext][ctx].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae4f9338dfef01a502ab73d81cc9ec38f778005"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM5MTIzMw==", "bodyText": "I rewrite to the latter one.", "url": "https://github.com/line/armeria/pull/3010#discussion_r474391233", "createdAt": "2020-08-21T03:41:52Z", "author": {"login": "okue"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support\n+\n+You can implement annotated services with Kotlin Coroutines.\n+\n+```kotlin\n+class MyAnnotatedService {\n+    @Get(\"/users/{name}\")\n+    suspend fun getUserToken(@Param(\"name\") name: String): HttpResponse {\n+        val user = myReactiveRepository.findByName(name).await()\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+By default, armeria uses a context-aware event loop as a [coroutine dispatcher][CoroutineDispatcher].\n+If you annotates methods with `@Blocking` or enables `useBlockingTaskExecutor`,\n+a context-aware blocking executor is used as a dispatcher.\n+\n+```kotlin\n+serverBuilder\n+    .annotatedService()\n+    // enables `useBlockingTaskExecutor`\n+    .useBlockingTaskExecutor(true)\n+    .build(MyAnnotatedService())\n+\n+// or\n+\n+import com.linecorp.armeria.server.annotation.Blocking\n+\n+class MyAnnotatedService {\n+    @Blocking\n+    @Get(\"/blocking/users/{name}\")\n+    suspend fun getUserTokenBlocking(@Param(\"name\") name: String): HttpResponse {\n+        val id = myReactiveClient.getId(name).await()\n+        val user = myBlockingRepository.findById(id)\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+<Tip>\n+\n+If you use [Logback integration][logback] and/or [Zipkin integration][zipkin],\n+coroutines should be executed in threads context aware of [RequestContext][ctx].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NjU2Mg=="}, "originalCommit": {"oid": "5ae4f9338dfef01a502ab73d81cc9ec38f778005"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTA3OTE3OnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/server-annotated-service.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjo0MjoyNFrOHEZpog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjo0MjoyNFrOHEZpog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NjYxMA==", "bodyText": "Could just inine", "url": "https://github.com/line/armeria/pull/3010#discussion_r474376610", "createdAt": "2020-08-21T02:42:24Z", "author": {"login": "trustin"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support\n+\n+You can implement annotated services with Kotlin Coroutines.\n+\n+```kotlin\n+class MyAnnotatedService {\n+    @Get(\"/users/{name}\")\n+    suspend fun getUserToken(@Param(\"name\") name: String): HttpResponse {\n+        val user = myReactiveRepository.findByName(name).await()\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+By default, armeria uses a context-aware event loop as a [coroutine dispatcher][CoroutineDispatcher].\n+If you annotates methods with `@Blocking` or enables `useBlockingTaskExecutor`,\n+a context-aware blocking executor is used as a dispatcher.\n+\n+```kotlin\n+serverBuilder\n+    .annotatedService()\n+    // enables `useBlockingTaskExecutor`\n+    .useBlockingTaskExecutor(true)\n+    .build(MyAnnotatedService())\n+\n+// or\n+\n+import com.linecorp.armeria.server.annotation.Blocking\n+\n+class MyAnnotatedService {\n+    @Blocking\n+    @Get(\"/blocking/users/{name}\")\n+    suspend fun getUserTokenBlocking(@Param(\"name\") name: String): HttpResponse {\n+        val id = myReactiveClient.getId(name).await()\n+        val user = myBlockingRepository.findById(id)\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+<Tip>\n+\n+If you use [Logback integration][logback] and/or [Zipkin integration][zipkin],\n+coroutines should be executed in threads context aware of [RequestContext][ctx].\n+\n+</Tip>\n+\n+[CoroutineDispatcher]: https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/\n+[ctx]: https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/RequestContext.html\n+[logback]: /docs/advanced-logging\n+[zipkin]: /docs/advanced-zipkin", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae4f9338dfef01a502ab73d81cc9ec38f778005"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTA4MDM5OnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/server-annotated-service.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjo0Mjo1MlrOHEZqRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjo0Mjo1MlrOHEZqRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3Njc3Mg==", "bodyText": "CoroutineContextService could be monospaced", "url": "https://github.com/line/armeria/pull/3010#discussion_r474376772", "createdAt": "2020-08-21T02:42:52Z", "author": {"login": "trustin"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support\n+\n+You can implement annotated services with Kotlin Coroutines.\n+\n+```kotlin\n+class MyAnnotatedService {\n+    @Get(\"/users/{name}\")\n+    suspend fun getUserToken(@Param(\"name\") name: String): HttpResponse {\n+        val user = myReactiveRepository.findByName(name).await()\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+By default, armeria uses a context-aware event loop as a [coroutine dispatcher][CoroutineDispatcher].\n+If you annotates methods with `@Blocking` or enables `useBlockingTaskExecutor`,\n+a context-aware blocking executor is used as a dispatcher.\n+\n+```kotlin\n+serverBuilder\n+    .annotatedService()\n+    // enables `useBlockingTaskExecutor`\n+    .useBlockingTaskExecutor(true)\n+    .build(MyAnnotatedService())\n+\n+// or\n+\n+import com.linecorp.armeria.server.annotation.Blocking\n+\n+class MyAnnotatedService {\n+    @Blocking\n+    @Get(\"/blocking/users/{name}\")\n+    suspend fun getUserTokenBlocking(@Param(\"name\") name: String): HttpResponse {\n+        val id = myReactiveClient.getId(name).await()\n+        val user = myBlockingRepository.findById(id)\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+<Tip>\n+\n+If you use [Logback integration][logback] and/or [Zipkin integration][zipkin],\n+coroutines should be executed in threads context aware of [RequestContext][ctx].\n+\n+</Tip>\n+\n+[CoroutineDispatcher]: https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/\n+[ctx]: https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/RequestContext.html\n+[logback]: /docs/advanced-logging\n+[zipkin]: /docs/advanced-zipkin\n+\n+### CoroutineContextService decorator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae4f9338dfef01a502ab73d81cc9ec38f778005"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTA4MjAyOnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/setup.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjo0Mzo0OFrOHEZrPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjo0Mzo0OFrOHEZrPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NzAyMw==", "bodyText": "Kotlin coroutines support or Kotlin Coroutines support ?", "url": "https://github.com/line/armeria/pull/3010#discussion_r474377023", "createdAt": "2020-08-21T02:43:48Z", "author": {"login": "trustin"}, "path": "site/src/pages/docs/setup.mdx", "diffHunk": "@@ -40,6 +40,9 @@ the list of major Armeria artifacts which might interest you:\n +---------------------------------------------+---------------------------------------------------------------------------------+\n | `armeria-kafka`                             | Enables sending access logs to Kafka                                            |\n +---------------------------------------------+---------------------------------------------------------------------------------+\n+| `armeria-kotlin`                            | Kotlin support.                                                                 |\n+|                                             | See [Kotlin Coroutines Support][kotlin-coroutines-support].                     |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae4f9338dfef01a502ab73d81cc9ec38f778005"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTA4MzY5OnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/server-annotated-service.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjo0NDo0MVrOHEZsKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjo0NDo0MVrOHEZsKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NzI1OA==", "bodyText": "It would be more natural to return String for annotated services if don't need to control HTTP status or other headers.", "url": "https://github.com/line/armeria/pull/3010#discussion_r474377258", "createdAt": "2020-08-21T02:44:41Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support\n+\n+You can implement annotated services with Kotlin Coroutines.\n+\n+```kotlin\n+class MyAnnotatedService {\n+    @Get(\"/users/{name}\")\n+    suspend fun getUserToken(@Param(\"name\") name: String): HttpResponse {\n+        val user = myReactiveRepository.findByName(name).await()\n+        return HttpResponse.of(user.token)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae4f9338dfef01a502ab73d81cc9ec38f778005"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTA4NzkxOnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/server-annotated-service.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjo0NzoyMlrOHEZuqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMjo0NzoyMlrOHEZuqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3Nzg5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            using `CoroutineContextService` decorator.\n          \n          \n            \n            using <type://CoroutineContextService> decorator.", "url": "https://github.com/line/armeria/pull/3010#discussion_r474377897", "createdAt": "2020-08-21T02:47:22Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support\n+\n+You can implement annotated services with Kotlin Coroutines.\n+\n+```kotlin\n+class MyAnnotatedService {\n+    @Get(\"/users/{name}\")\n+    suspend fun getUserToken(@Param(\"name\") name: String): HttpResponse {\n+        val user = myReactiveRepository.findByName(name).await()\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+By default, armeria uses a context-aware event loop as a [coroutine dispatcher][CoroutineDispatcher].\n+If you annotates methods with `@Blocking` or enables `useBlockingTaskExecutor`,\n+a context-aware blocking executor is used as a dispatcher.\n+\n+```kotlin\n+serverBuilder\n+    .annotatedService()\n+    // enables `useBlockingTaskExecutor`\n+    .useBlockingTaskExecutor(true)\n+    .build(MyAnnotatedService())\n+\n+// or\n+\n+import com.linecorp.armeria.server.annotation.Blocking\n+\n+class MyAnnotatedService {\n+    @Blocking\n+    @Get(\"/blocking/users/{name}\")\n+    suspend fun getUserTokenBlocking(@Param(\"name\") name: String): HttpResponse {\n+        val id = myReactiveClient.getId(name).await()\n+        val user = myBlockingRepository.findById(id)\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+<Tip>\n+\n+If you use [Logback integration][logback] and/or [Zipkin integration][zipkin],\n+coroutines should be executed in threads context aware of [RequestContext][ctx].\n+\n+</Tip>\n+\n+[CoroutineDispatcher]: https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/\n+[ctx]: https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/RequestContext.html\n+[logback]: /docs/advanced-logging\n+[zipkin]: /docs/advanced-zipkin\n+\n+### CoroutineContextService decorator\n+\n+Armeria provides a way to configure a coroutine context of annotated service methods\n+using `CoroutineContextService` decorator.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae4f9338dfef01a502ab73d81cc9ec38f778005"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTE0NDE5OnYy", "diffSide": "LEFT", "path": "examples/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMzoxOTo1N1rOHEaPbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMzoxOTo1N1rOHEaPbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM4NjI4NQ==", "bodyText": "\ud83d\ude31", "url": "https://github.com/line/armeria/pull/3010#discussion_r474386285", "createdAt": "2020-08-21T03:19:57Z", "author": {"login": "ikhoon"}, "path": "examples/README.md", "diffHunk": "@@ -1,11 +1,18 @@\n # Armeria examples\n \n-- `annotated-http-service` <a href=\"https://gitpod.io/#project=annotated-http-service/https://github.com/ikhoon/armeria-examples/tree/master/annotated-http-service/src/main/java/example/armeria/server/annotated/Main.java\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef2290b1583a252ebd3185c5b58176dd0334e942"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTIzMDI5OnYy", "diffSide": "RIGHT", "path": "examples/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNDoxNTo1NFrOHEbAng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNDoxNTo1NFrOHEbAng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM5ODg3OA==", "bodyText": "Kotlin coroutines support?", "url": "https://github.com/line/armeria/pull/3010#discussion_r474398878", "createdAt": "2020-08-21T04:15:54Z", "author": {"login": "trustin"}, "path": "examples/README.md", "diffHunk": "@@ -1,11 +1,18 @@\n # Armeria examples\n \n-- `annotated-http-service` <a href=\"https://gitpod.io/#project=annotated-http-service/https://github.com/ikhoon/armeria-examples/tree/master/annotated-http-service/src/main/java/example/armeria/server/annotated/Main.java\">\n+- `annotated-http-service` <a href=\"https://gitpod.io/#project=annotated-http-service/https://github.com/line/armeria-examples/tree/master/annotated-http-service/src/main/java/example/armeria/server/annotated/Main.java\">\n                              <img align=\"absmiddle\" height=\"20\" src=\"https://gitpod.io/button/open-in-gitpod.svg\"/>\n                            </a> \n   - Learn how to write an HTTP service using annotations.\n   - See [Annotated services](https://armeria.dev/docs/server-annotated-service).\n \n+- `annotated-http-service-kotlin` <a href=\"https://gitpod.io/#project=annotated-http-service-kotlin/https://github.com/line/armeria-examples/tree/master/annotated-http-service-kotlin/src/main/kotlin/example/armeria/server/annotated/kotlin/Main.kt\">\n+                                    <img align=\"absmiddle\" height=\"20\" src=\"https://gitpod.io/button/open-in-gitpod.svg\"/>\n+                                  </a>\n+  - Learn how to write an HTTP service using annotations.\n+  - Learn how to write an HTTP service using annotations with Kotlin Coroutines.\n+  - See [Kotlin Coroutines Support](https://armeria.dev/docs/server-annotated-service#kotlin-coroutines-support).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61d07e7605d13501ba33bd289de94b0e414a7e1f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTM4ODE0OnYy", "diffSide": "RIGHT", "path": "examples/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNTo1MDoxNFrOHEcb-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNTo1NDoxM1rOHEcgIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyMjI2NQ==", "bodyText": "Could be removed or leave it intentionally?", "url": "https://github.com/line/armeria/pull/3010#discussion_r474422265", "createdAt": "2020-08-21T05:50:14Z", "author": {"login": "ikhoon"}, "path": "examples/README.md", "diffHunk": "@@ -1,11 +1,18 @@\n # Armeria examples\n \n-- `annotated-http-service` <a href=\"https://gitpod.io/#project=annotated-http-service/https://github.com/ikhoon/armeria-examples/tree/master/annotated-http-service/src/main/java/example/armeria/server/annotated/Main.java\">\n+- `annotated-http-service` <a href=\"https://gitpod.io/#project=annotated-http-service/https://github.com/line/armeria-examples/tree/master/annotated-http-service/src/main/java/example/armeria/server/annotated/Main.java\">\n                              <img align=\"absmiddle\" height=\"20\" src=\"https://gitpod.io/button/open-in-gitpod.svg\"/>\n                            </a> \n   - Learn how to write an HTTP service using annotations.\n   - See [Annotated services](https://armeria.dev/docs/server-annotated-service).\n \n+- `annotated-http-service-kotlin` <a href=\"https://gitpod.io/#project=annotated-http-service-kotlin/https://github.com/line/armeria-examples/tree/master/annotated-http-service-kotlin/src/main/kotlin/example/armeria/server/annotated/kotlin/Main.kt\">\n+                                    <img align=\"absmiddle\" height=\"20\" src=\"https://gitpod.io/button/open-in-gitpod.svg\"/>\n+                                  </a>\n+  - Learn how to write an HTTP service using annotations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b2987a45b15a712ee5c0306deb6e1590a241e90"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyMzMyOA==", "bodyText": "oops", "url": "https://github.com/line/armeria/pull/3010#discussion_r474423328", "createdAt": "2020-08-21T05:54:13Z", "author": {"login": "okue"}, "path": "examples/README.md", "diffHunk": "@@ -1,11 +1,18 @@\n # Armeria examples\n \n-- `annotated-http-service` <a href=\"https://gitpod.io/#project=annotated-http-service/https://github.com/ikhoon/armeria-examples/tree/master/annotated-http-service/src/main/java/example/armeria/server/annotated/Main.java\">\n+- `annotated-http-service` <a href=\"https://gitpod.io/#project=annotated-http-service/https://github.com/line/armeria-examples/tree/master/annotated-http-service/src/main/java/example/armeria/server/annotated/Main.java\">\n                              <img align=\"absmiddle\" height=\"20\" src=\"https://gitpod.io/button/open-in-gitpod.svg\"/>\n                            </a> \n   - Learn how to write an HTTP service using annotations.\n   - See [Annotated services](https://armeria.dev/docs/server-annotated-service).\n \n+- `annotated-http-service-kotlin` <a href=\"https://gitpod.io/#project=annotated-http-service-kotlin/https://github.com/line/armeria-examples/tree/master/annotated-http-service-kotlin/src/main/kotlin/example/armeria/server/annotated/kotlin/Main.kt\">\n+                                    <img align=\"absmiddle\" height=\"20\" src=\"https://gitpod.io/button/open-in-gitpod.svg\"/>\n+                                  </a>\n+  - Learn how to write an HTTP service using annotations.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyMjI2NQ=="}, "originalCommit": {"oid": "1b2987a45b15a712ee5c0306deb6e1590a241e90"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTM5ODM4OnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/server-annotated-service.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNTo1NjowOFrOHEciPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNTo1NjowOFrOHEciPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyMzg3MA==", "bodyText": "nit: dependencies.", "url": "https://github.com/line/armeria/pull/3010#discussion_r474423870", "createdAt": "2020-08-21T05:56:08Z", "author": {"login": "minwoox"}, "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,84 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin coroutines support\n+\n+You can implement annotated services with [Kotlin coroutines](https://kotlinlang.org/docs/reference/coroutines-overview.html)\n+by adding the following dependency.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03928175f91fd56a652ac31c4e0867bdb4978f8d"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2271, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}