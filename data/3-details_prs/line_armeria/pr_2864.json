{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzMTEzMTI1", "number": 2864, "title": "Allow a request to schedule timeout in nanoseconds precision", "bodyText": "Motivation:\na gRPC client sends a request timeout in nanoseconds using grpc-timeout header field.\nArmeria server converts it milliseconds internally.\nNanoseconds and microseconds precision will be dropped because of this conversion.\nLet's say a gRPC timeout value is 10,900,000ns.\nBefore sending a request, the upstream gRPC client schedules a timeout in nanoseconds.\nHowever, the Armeria server schedules a timeout in 10ms(without decimal point).\nThe server will cancel a request earlier than the upstream client. Then the request ends with CANCELLED, not DEADLINE_EXCEEDED.\nThis is not a critical problem in the real world because of network time.\nBut we can reduce unexpected failures in ArmeriaGrpcServerInteropTest.deadlineExceeded()\nSee #2812\nModifications:\n\nMake DefalutTimeoutController schedule a timeout in nanoseconds.\nRemove deprecated timeout APIs in {Service,Client}RequestContext\n\nextend{Request,Response}TimeoutMillis(long) and extend{Request,Response}Timeout(Duration)\nset{Request,Reponse}TimeoutAfterMillis(long) and set{Request,Response}TimeoutAfter(Duration)\nset{Request,Reponse}TimeoutAtMillis(long) and set{Request,Reponse}TimeoutAt(Duration)\n\n\n\nResult:\n\nYou can now schedule a request timeout in nanoseconds using:\n\nServiceRequestContext.setRequestTimeout(TimeoutMode, Duration)\nClientRequestContext.setReponseTimeout(TimeoutMode, Duration)\n\n\nRespect the nanoseconds precision of a grpc-timeout.\nFixes #2812", "createdAt": "2020-07-02T00:35:42Z", "url": "https://github.com/line/armeria/pull/2864", "merged": true, "mergeCommit": {"oid": "aaad41b41cf682d75827b518fa48a5163a56332c"}, "closed": true, "closedAt": "2020-07-02T05:36:36Z", "author": {"login": "ikhoon"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwzxfqAH2gAyNDQzMTEzMTI1OjIxNWI3YmE2YWEyY2E4MzM5OWI2MDkwZGU0MzY2MWYxYWVlYzc5YzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcw3Ou1gH2gAyNDQzMTEzMTI1OjU3Y2MyZmFkNjExMWIyMTA3OTBkNDhhYjc5YjA2ZDNjNDA3ODU1MDk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "215b7ba6aa2ca83399b6090de43661f1aeec79c6", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/215b7ba6aa2ca83399b6090de43661f1aeec79c6", "committedDate": "2020-07-02T00:33:40Z", "message": "Allow a request to schedule timeout in nanoseconds precision\n\nMotivation:\n\na gRPC client sends a request timeout in nanoseconds using `grpc-timeout` header field.\nArmeria server converts it milliseconds internally.\nNanoseconds and microseconds precision will be dropped because of this conversion.\n\nLet's say a gRPC timeout value is `10,900,000ns`.\nBefore sending a request, the upstream gRPC client schedules a timeout in nanoseconds.\nHowever, the Armeria server schedules a timeout in 10ms(without decimal point).\n\nThe server will cancel a request earlier than the upstream client.\nThis is not a critical problem in the real world because of network time.\nBut we can reduce unexpected failures in `ArmeriaGrpcServerInteropTest.deadlineExceeded()`\nSee #2812\n\nModifications:\n\n- Make DefalutTimeoutController schedule a timeout in nanoseconds.\n- Remove deprecated timeout API in {Service,Client}RequestContext\n  - extend{Request,Response}TimeoutMillis(long) and extend{Request,Response}Timeout(Duration)\n  - set{Request,Reponse}TimeoutAfterMillis(long) and set{Request,Response}TimeoutAfter(Duration)\n  - set{Request,Reponse}TimeoutAtMillis(long) and set{Request,Reponse}TimeoutAt(Duration)\n\nResult:\n\n- You can now schedule a request timeout in nanoseconds using:\n  - ServiceRequestContext.setRequestTimeout(TimeoutMode, Duration)\n  - ClientRequestContext.setReponseTimeout(TimeoutMode, Duration)\n- Respect the nanoseconds precision of a `grpc-timeout`.\n- Fixes #2812"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMjc5ODU4", "url": "https://github.com/line/armeria/pull/2864#pullrequestreview-441279858", "createdAt": "2020-07-02T00:46:13Z", "commit": {"oid": "215b7ba6aa2ca83399b6090de43661f1aeec79c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDo0NjoxNFrOGr5u3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDo0NjoxNFrOGr5u3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4NzgzNw==", "bodyText": "How about adding Nanos suffix to all methods that accept a long duration?", "url": "https://github.com/line/armeria/pull/2864#discussion_r448687837", "createdAt": "2020-07-02T00:46:14Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/TimeoutController.java", "diffHunk": "@@ -26,36 +26,36 @@\n public interface TimeoutController {\n \n     /**\n-     * Schedules a new timeout with the specified {@code timeoutMillis}.\n+     * Schedules a new timeout with the specified {@code timeoutNanos}.\n      * If a timeout is scheduled already, this method will not start a new timeout.\n      *\n-     * @param timeoutMillis a positive time amount value in milliseconds.\n+     * @param timeoutNanos a positive time amount value in nanoseconds.\n      * @return {@code true} if the timeout is scheduled.\n      *         {@code false} if the timeout has been scheduled, triggered already\n      *         or a timeout cannot be scheduled, e.g. request or response has been handled already.\n      */\n-    boolean scheduleTimeout(long timeoutMillis);\n+    boolean scheduleTimeout(long timeoutNanos);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "215b7ba6aa2ca83399b6090de43661f1aeec79c6"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMzI3MzU2", "url": "https://github.com/line/armeria/pull/2864#pullrequestreview-441327356", "createdAt": "2020-07-02T03:34:50Z", "commit": {"oid": "215b7ba6aa2ca83399b6090de43661f1aeec79c6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcee7c1c000ebcb82da9f44471417eb4fd1299fb", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/bcee7c1c000ebcb82da9f44471417eb4fd1299fb", "committedDate": "2020-07-02T03:52:33Z", "message": "Address comments by @trustin + checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ebd100c1395f3b48df7a461353725e2389da437", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/9ebd100c1395f3b48df7a461353725e2389da437", "committedDate": "2020-07-02T04:09:46Z", "message": "Fix flakyness"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMzQzNDYw", "url": "https://github.com/line/armeria/pull/2864#pullrequestreview-441343460", "createdAt": "2020-07-02T04:33:31Z", "commit": {"oid": "9ebd100c1395f3b48df7a461353725e2389da437"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57cc2fad6111b210790d48ab79b06d3c40785509", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/57cc2fad6111b210790d48ab79b06d3c40785509", "committedDate": "2020-07-02T04:35:19Z", "message": "Fix flaky"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 344, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}