{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MTkyMTA5", "number": 2369, "title": "Support reactor-grpc for client-side", "bodyText": "Update HelloServiceTest in :examples:grpc-reactor to use\nreactor-grpc for the client side.\nFix a bug where ArmeriaClientCall does not call onReady(), which made a Flux request not sent at all.\n\nFix provided by @cbornet", "createdAt": "2020-01-04T07:39:39Z", "url": "https://github.com/line/armeria/pull/2369", "merged": true, "mergeCommit": {"oid": "4f3fc223de552460e8514d991f259a9d502a82ca"}, "closed": true, "closedAt": "2020-01-07T07:36:56Z", "author": {"login": "trustin"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb3pMlYgFqTMzODU1NjQ2OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb352bQAFqTMzOTAzNjAxNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4NTU2NDY4", "url": "https://github.com/line/armeria/pull/2369#pullrequestreview-338556468", "createdAt": "2020-01-06T10:00:36Z", "commit": {"oid": "4fe6c3d1a8830a293409f61b2759ffb90367748c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxMDowMDozNlrOFaZorg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxMDowMDozNlrOFaZorg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzIyNzMxMA==", "bodyText": "You could write\nfinal String message = Flux.just(names).log()\n                             .map(name -> HelloRequest.newBuilder().setName(name).build())\n                             .as(helloService::lotsOfGreetings)\n                             .map(HelloReply::getMessage)\n                             .block();", "url": "https://github.com/line/armeria/pull/2369#discussion_r363227310", "createdAt": "2020-01-06T10:00:36Z", "author": {"login": "cbornet"}, "path": "examples/grpc-reactor/src/test/java/example/armeria/grpc/reactor/HelloServiceTest.java", "diffHunk": "@@ -50,179 +47,70 @@ private static String uri() {\n \n     @Test\n     void getReply() {\n-        final HelloServiceGrpc.HelloServiceBlockingStub helloService =\n-                Clients.newClient(uri(), HelloServiceGrpc.HelloServiceBlockingStub.class);\n-        assertThat(helloService.hello(HelloRequest.newBuilder().setName(\"Armeria\").build()).getMessage())\n-                .isEqualTo(\"Hello, Armeria!\");\n+        final HelloReply reply = helloService.hello(HelloRequest.newBuilder()\n+                                                                .setName(\"Armeria\")\n+                                                                .build()).block();\n+        assertThat(reply).isNotNull();\n+        assertThat(reply.getMessage()).isEqualTo(\"Hello, Armeria!\");\n     }\n \n     @Test\n     void getReplyWithDelay() {\n-        final HelloServiceGrpc.HelloServiceFutureStub helloService =\n-                Clients.newClient(uri(), HelloServiceGrpc.HelloServiceFutureStub.class);\n-        final ListenableFuture<HelloReply> future =\n-                helloService.lazyHello(HelloRequest.newBuilder().setName(\"Armeria\").build());\n-        final AtomicBoolean completed = new AtomicBoolean();\n-        Futures.addCallback(future, new FutureCallback<HelloReply>() {\n-            @Override\n-            public void onSuccess(HelloReply result) {\n-                assertThat(result.getMessage()).isEqualTo(\"Hello, Armeria!\");\n-                completed.set(true);\n-            }\n-\n-            @Override\n-            public void onFailure(Throwable t) {\n-                // Should never reach here.\n-                throw new Error(t);\n-            }\n-        }, MoreExecutors.directExecutor());\n-\n-        await().untilTrue(completed);\n+        final HelloReply reply = helloService.lazyHello(HelloRequest.newBuilder()\n+                                                                    .setName(\"Armeria\")\n+                                                                    .build()).block();\n+        assertThat(reply).isNotNull();\n+        assertThat(reply.getMessage()).isEqualTo(\"Hello, Armeria!\");\n     }\n \n     @Test\n     void getReplyFromServerSideBlockingCall() {\n-        final HelloServiceGrpc.HelloServiceBlockingStub helloService =\n-                Clients.newClient(uri(), HelloServiceGrpc.HelloServiceBlockingStub.class);\n         final Stopwatch watch = Stopwatch.createStarted();\n-        assertThat(helloService.blockingHello(HelloRequest.newBuilder().setName(\"Armeria\").build())\n-                               .getMessage()).isEqualTo(\"Hello, Armeria!\");\n+        final HelloReply reply = helloService.blockingHello(HelloRequest.newBuilder()\n+                                                                        .setName(\"Armeria\")\n+                                                                        .build()).block();\n+        assertThat(reply).isNotNull();\n+        assertThat(reply.getMessage()).isEqualTo(\"Hello, Armeria!\");\n         assertThat(watch.elapsed(TimeUnit.SECONDS)).isGreaterThanOrEqualTo(3);\n     }\n \n     @Test\n     void getLotsOfReplies() {\n-        final AtomicBoolean completed = new AtomicBoolean();\n-        helloService.lotsOfReplies(\n-                HelloRequest.newBuilder().setName(\"Armeria\").build(),\n-                new StreamObserver<HelloReply>() {\n-                    private int sequence;\n-\n-                    @Override\n-                    public void onNext(HelloReply value) {\n-                        assertThat(value.getMessage())\n-                                .isEqualTo(\"Hello, Armeria! (sequence: \" + ++sequence + ')');\n-                    }\n-\n-                    @Override\n-                    public void onError(Throwable t) {\n-                        // Should never reach here.\n-                        throw new Error(t);\n-                    }\n-\n-                    @Override\n-                    public void onCompleted() {\n-                        assertThat(sequence).isEqualTo(5);\n-                        completed.set(true);\n-                    }\n-                });\n-        await().untilTrue(completed);\n-    }\n+        final List<HelloReply> replies =\n+                helloService.lotsOfReplies(HelloRequest.newBuilder().setName(\"Armeria\").build())\n+                            .toStream().collect(toImmutableList());\n \n-    @Test\n-    void blockForLotsOfReplies() throws Exception {\n-        final BlockingQueue<HelloReply> replies = new LinkedBlockingQueue<>();\n-        final AtomicBoolean completed = new AtomicBoolean();\n-        helloService.lotsOfReplies(\n-                HelloRequest.newBuilder().setName(\"Armeria\").build(),\n-                new StreamObserver<HelloReply>() {\n-\n-                    @Override\n-                    public void onNext(HelloReply value) {\n-                        replies.offer(value);\n-                    }\n-\n-                    @Override\n-                    public void onError(Throwable t) {\n-                        // Should never reach here.\n-                        throw new Error(t);\n-                    }\n-\n-                    @Override\n-                    public void onCompleted() {\n-                        completed.set(true);\n-                    }\n-                });\n-        int sequence = 0;\n-        while (!completed.get() || !replies.isEmpty()) {\n-            final HelloReply value = replies.poll(100, TimeUnit.MILLISECONDS);\n-            if (value == null) {\n-                // Timed out, try again.\n-                continue;\n-            }\n-            assertThat(value.getMessage())\n-                    .isEqualTo(\"Hello, Armeria! (sequence: \" + ++sequence + ')');\n+        assertThat(replies).hasSize(5);\n+\n+        for (int i = 0; i < replies.size(); i++) {\n+            assertThat(replies.get(i).getMessage()).isEqualTo(\"Hello, Armeria! (sequence: \" + (i + 1) + ')');\n         }\n-        assertThat(sequence).isEqualTo(5);\n     }\n \n     @Test\n     void sendLotsOfGreetings() {\n         final String[] names = { \"Armeria\", \"Grpc\", \"Streaming\" };\n-        final AtomicBoolean completed = new AtomicBoolean();\n-        final StreamObserver<HelloRequest> request =\n-                helloService.lotsOfGreetings(new StreamObserver<HelloReply>() {\n-                    private boolean received;\n-\n-                    @Override\n-                    public void onNext(HelloReply value) {\n-                        assertThat(received).isFalse();\n-                        received = true;\n-                        assertThat(value.getMessage())\n-                                .isEqualTo(HelloServiceImpl.toMessage(String.join(\", \", names)));\n-                    }\n-\n-                    @Override\n-                    public void onError(Throwable t) {\n-                        // Should never reach here.\n-                        throw new Error(t);\n-                    }\n-\n-                    @Override\n-                    public void onCompleted() {\n-                        assertThat(received).isTrue();\n-                        completed.set(true);\n-                    }\n-                });\n-\n-        for (String name : names) {\n-            request.onNext(HelloRequest.newBuilder().setName(name).build());\n-        }\n-        request.onCompleted();\n-        await().untilTrue(completed);\n+        final Flux<HelloRequest> request = Flux.just(names).log()\n+                                               .map(name -> HelloRequest.newBuilder().setName(name).build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fe6c3d1a8830a293409f61b2759ffb90367748c"}, "originalPosition": 216}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc2a5e2fee29d0faf2ac5977ba38b5b0c1d75e6a", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/dc2a5e2fee29d0faf2ac5977ba38b5b0c1d75e6a", "committedDate": "2020-01-07T02:19:37Z", "message": "Generalize gRPC stub factory lookup mechanism\n\nMotivation:\n\n`GrpcClientFactory` currently assumes that the stub factory methods\nare always one of `newStub()`, `newBlockingStub()` and `newAsyncStub()`.\n\nHowever, by using a plugin like `grpc-reactor`, the stub factory method\ncan be `newReactorStub()`\n\nModifications:\n\n- Generalize the stub factory lookup mechanism in `GrpcClientFactory`.\n- Miscellaneous:\n  - Clean-up `logback-test.xml` so that the log messages from Project\n    Reactor are logged.\n\nResult:\n\nPartial support for the gRPC client stubs generated with `grpc-reactor`."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89b6f7e4315f0186b522e7b8db01fec64f64dee1", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/89b6f7e4315f0186b522e7b8db01fec64f64dee1", "committedDate": "2020-01-07T02:19:37Z", "message": "Clean-up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "379a9018e7321a1d61ab003dee9a24668ee23c0a", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/379a9018e7321a1d61ab003dee9a24668ee23c0a", "committedDate": "2020-01-07T02:20:27Z", "message": "Support reactor-grpc\n\n- Generalize the stub factory method lookup mechanism\n- Update `HelloServiceTest` in `:examples:grpc-reactor` to use\n  reactor-grpc for the client side.\n\nSending a `Flux` as a request does not work for an unknown reason.\n`ArmeriaClientCall.sendMessage()` is not called by gRPC."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d5078f7e28dd4285c2e1c003f6fde349d81bb29", "author": {"user": {"login": "cbornet", "name": "Christophe Bornet"}}, "url": "https://github.com/line/armeria/commit/0d5078f7e28dd4285c2e1c003f6fde349d81bb29", "committedDate": "2020-01-07T02:20:31Z", "message": "Call onReady() during ArmeriaClientCall init"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2ca92db9624c5f6d47a2353c6a32291f66698f81", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/2ca92db9624c5f6d47a2353c6a32291f66698f81", "committedDate": "2020-01-07T01:32:58Z", "message": "Call onReady() during ArmeriaClientCall init (#1)\n\nCall onReady() during ArmeriaClientCall init"}, "afterCommit": {"oid": "0d5078f7e28dd4285c2e1c003f6fde349d81bb29", "author": {"user": {"login": "cbornet", "name": "Christophe Bornet"}}, "url": "https://github.com/line/armeria/commit/0d5078f7e28dd4285c2e1c003f6fde349d81bb29", "committedDate": "2020-01-07T02:20:31Z", "message": "Call onReady() during ArmeriaClientCall init"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fccabfffde4c0ca582ebe6129e54c51f2428b4e", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/0fccabfffde4c0ca582ebe6129e54c51f2428b4e", "committedDate": "2020-01-07T03:07:23Z", "message": "Merge branch 'master' into support_reactor_grpc_client"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MDEzNTMx", "url": "https://github.com/line/armeria/pull/2369#pullrequestreview-339013531", "createdAt": "2020-01-07T03:22:01Z", "commit": {"oid": "0fccabfffde4c0ca582ebe6129e54c51f2428b4e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MDMzMDQw", "url": "https://github.com/line/armeria/pull/2369#pullrequestreview-339033040", "createdAt": "2020-01-07T05:09:27Z", "commit": {"oid": "0fccabfffde4c0ca582ebe6129e54c51f2428b4e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MDM2MDE2", "url": "https://github.com/line/armeria/pull/2369#pullrequestreview-339036016", "createdAt": "2020-01-07T05:24:48Z", "commit": {"oid": "0fccabfffde4c0ca582ebe6129e54c51f2428b4e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 788, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}