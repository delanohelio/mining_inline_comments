{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MDcyNTMw", "number": 2930, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjozMjoyMFrOERSI4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzowNzoyMVrOERSdBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTU4NDM1OnYy", "diffSide": "RIGHT", "path": "grpc-protocol/src/main/java/com/linecorp/armeria/internal/common/grpc/protocol/GrpcTrailersUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjozMjoyMVrOG16bGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjo0Mjo1MlrOG16jtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4NDkyMg==", "bodyText": "Is it OK to move this class to the internal package? /cc @anuraaga @adriancole", "url": "https://github.com/line/armeria/pull/2930#discussion_r459184922", "createdAt": "2020-07-23T02:32:21Z", "author": {"login": "trustin"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/internal/common/grpc/protocol/GrpcTrailersUtil.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2019 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.grpc.protocol;\n+\n+import static io.netty.util.AsciiString.c2b;\n+\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpHeadersBuilder;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;\n+import com.linecorp.armeria.common.grpc.protocol.StatusMessageEscaper;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Utility for creating response trailers for a gRPC status. Trailers are only returned from a server.\n+ */\n+public final class GrpcTrailersUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34346d7ab3327488db9b5c78d320248a90cacc10"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4NzEyNw==", "bodyText": "I thought there are not so much chances a user calls statusToTrailers, but I was not 100% sure. \ud83d\ude05", "url": "https://github.com/line/armeria/pull/2930#discussion_r459187127", "createdAt": "2020-07-23T02:42:52Z", "author": {"login": "minwoox"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/internal/common/grpc/protocol/GrpcTrailersUtil.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2019 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.grpc.protocol;\n+\n+import static io.netty.util.AsciiString.c2b;\n+\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.HttpHeadersBuilder;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;\n+import com.linecorp.armeria.common.grpc.protocol.StatusMessageEscaper;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Utility for creating response trailers for a gRPC status. Trailers are only returned from a server.\n+ */\n+public final class GrpcTrailersUtil {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4NDkyMg=="}, "originalCommit": {"oid": "34346d7ab3327488db9b5c78d320248a90cacc10"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTU5MDkwOnYy", "diffSide": "RIGHT", "path": "grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjozNjozNVrOG16erA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDo0NzozMFrOG18GPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4NTgzNg==", "bodyText": "Any reason to use a composite buffer? Probably better using buffer() with sensible initial capacity.", "url": "https://github.com/line/armeria/pull/2930#discussion_r459185836", "createdAt": "2020-07-23T02:36:35Z", "author": {"login": "trustin"}, "path": "grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java", "diffHunk": "@@ -317,9 +321,25 @@ public synchronized void setMessageCompression(boolean enabled) {\n     public void messageRead(DeframedMessage message) {\n         if (isGrpcWeb && message.type() >> 7 == 1) {\n             // grpc-web trailers\n-            final ByteBuf buf = message.buf();\n-            // trailers never compressed\n-            assert buf != null;\n+            final ByteBuf messageBuf = message.buf();\n+            final ByteBuf buf;\n+            if (messageBuf != null) {\n+                buf = messageBuf;\n+            } else {\n+                buf = ctx.alloc().compositeBuffer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34346d7ab3327488db9b5c78d320248a90cacc10"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MzI2MA==", "bodyText": "It is hard to know about the sensible initial capacity because I do not know how much it's expanded after decompression.\nAll other logic uses the composite buffer, so I followed it.\nCan I revisit this later to optimize this?", "url": "https://github.com/line/armeria/pull/2930#discussion_r459193260", "createdAt": "2020-07-23T03:12:29Z", "author": {"login": "minwoox"}, "path": "grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java", "diffHunk": "@@ -317,9 +321,25 @@ public synchronized void setMessageCompression(boolean enabled) {\n     public void messageRead(DeframedMessage message) {\n         if (isGrpcWeb && message.type() >> 7 == 1) {\n             // grpc-web trailers\n-            final ByteBuf buf = message.buf();\n-            // trailers never compressed\n-            assert buf != null;\n+            final ByteBuf messageBuf = message.buf();\n+            final ByteBuf buf;\n+            if (messageBuf != null) {\n+                buf = messageBuf;\n+            } else {\n+                buf = ctx.alloc().compositeBuffer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4NTgzNg=="}, "originalCommit": {"oid": "34346d7ab3327488db9b5c78d320248a90cacc10"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5NTgwMQ==", "bodyText": "Added TODO. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2930#discussion_r459195801", "createdAt": "2020-07-23T03:24:56Z", "author": {"login": "minwoox"}, "path": "grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java", "diffHunk": "@@ -317,9 +321,25 @@ public synchronized void setMessageCompression(boolean enabled) {\n     public void messageRead(DeframedMessage message) {\n         if (isGrpcWeb && message.type() >> 7 == 1) {\n             // grpc-web trailers\n-            final ByteBuf buf = message.buf();\n-            // trailers never compressed\n-            assert buf != null;\n+            final ByteBuf messageBuf = message.buf();\n+            final ByteBuf buf;\n+            if (messageBuf != null) {\n+                buf = messageBuf;\n+            } else {\n+                buf = ctx.alloc().compositeBuffer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4NTgzNg=="}, "originalCommit": {"oid": "34346d7ab3327488db9b5c78d320248a90cacc10"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxMjM0OA==", "bodyText": "SGTM", "url": "https://github.com/line/armeria/pull/2930#discussion_r459212348", "createdAt": "2020-07-23T04:47:30Z", "author": {"login": "trustin"}, "path": "grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java", "diffHunk": "@@ -317,9 +321,25 @@ public synchronized void setMessageCompression(boolean enabled) {\n     public void messageRead(DeframedMessage message) {\n         if (isGrpcWeb && message.type() >> 7 == 1) {\n             // grpc-web trailers\n-            final ByteBuf buf = message.buf();\n-            // trailers never compressed\n-            assert buf != null;\n+            final ByteBuf messageBuf = message.buf();\n+            final ByteBuf buf;\n+            if (messageBuf != null) {\n+                buf = messageBuf;\n+            } else {\n+                buf = ctx.alloc().compositeBuffer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4NTgzNg=="}, "originalCommit": {"oid": "34346d7ab3327488db9b5c78d320248a90cacc10"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTU5MTI4OnYy", "diffSide": "RIGHT", "path": "grpc/src/main/java/com/linecorp/armeria/internal/common/grpc/GrpcMessageMarshaller.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjozNjo1MFrOG16e3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjozNjo1MFrOG16e3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4NTg4Ng==", "bodyText": "Ditto", "url": "https://github.com/line/armeria/pull/2930#discussion_r459185886", "createdAt": "2020-07-23T02:36:50Z", "author": {"login": "trustin"}, "path": "grpc/src/main/java/com/linecorp/armeria/internal/common/grpc/GrpcMessageMarshaller.java", "diffHunk": "@@ -206,7 +206,7 @@ public O deserializeResponse(DeframedMessage message) throws IOException {\n             }\n             return buf;\n         } else {\n-            final ByteBuf buf = alloc.buffer();\n+            final ByteBuf buf = alloc.compositeBuffer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34346d7ab3327488db9b5c78d320248a90cacc10"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTU5MjgzOnYy", "diffSide": "LEFT", "path": "grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcClientTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjozNzo1OVrOG16fwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjozNzo1OVrOG16fwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4NjExNA==", "bodyText": "\ud83d\ude31", "url": "https://github.com/line/armeria/pull/2930#discussion_r459186114", "createdAt": "2020-07-23T02:37:59Z", "author": {"login": "trustin"}, "path": "grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcClientTest.java", "diffHunk": "@@ -175,8 +175,8 @@ public void close(Status status, Metadata trailers) {\n                                        .setMaxOutboundMessageSizeBytes(MAX_MESSAGE_SIZE)\n                                        .useClientTimeoutHeader(false)\n                                        .build()\n-                                       .decorate((client, ctx, req) -> {\n-                                           final HttpResponse res = client.serve(ctx, req);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34346d7ab3327488db9b5c78d320248a90cacc10"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTU5NDQ1OnYy", "diffSide": "LEFT", "path": "grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcClientTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjozOTowMlrOG16goA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzoxMzo1OVrOG1680w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4NjMzNg==", "bodyText": "Maybe better reverting this? Is it too noisy?", "url": "https://github.com/line/armeria/pull/2930#discussion_r459186336", "createdAt": "2020-07-23T02:39:02Z", "author": {"login": "trustin"}, "path": "grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcClientTest.java", "diffHunk": "@@ -211,11 +211,9 @@ void setUp() {\n         final URI uri = server.httpUri(GrpcSerializationFormats.PROTO);\n         blockingStub = Clients.builder(uri)\n                               .maxResponseLength(MAX_MESSAGE_SIZE)\n-                              .decorator(LoggingClient.builder().newDecorator())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34346d7ab3327488db9b5c78d320248a90cacc10"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4NzMyMw==", "bodyText": "Yes, and it makes the IntelliJ stuck. \ud83d\ude31", "url": "https://github.com/line/armeria/pull/2930#discussion_r459187323", "createdAt": "2020-07-23T02:43:55Z", "author": {"login": "minwoox"}, "path": "grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcClientTest.java", "diffHunk": "@@ -211,11 +211,9 @@ void setUp() {\n         final URI uri = server.httpUri(GrpcSerializationFormats.PROTO);\n         blockingStub = Clients.builder(uri)\n                               .maxResponseLength(MAX_MESSAGE_SIZE)\n-                              .decorator(LoggingClient.builder().newDecorator())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4NjMzNg=="}, "originalCommit": {"oid": "34346d7ab3327488db9b5c78d320248a90cacc10"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4OTgzMg==", "bodyText": "Or set the log level to TRACE?", "url": "https://github.com/line/armeria/pull/2930#discussion_r459189832", "createdAt": "2020-07-23T02:55:49Z", "author": {"login": "ikhoon"}, "path": "grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcClientTest.java", "diffHunk": "@@ -211,11 +211,9 @@ void setUp() {\n         final URI uri = server.httpUri(GrpcSerializationFormats.PROTO);\n         blockingStub = Clients.builder(uri)\n                               .maxResponseLength(MAX_MESSAGE_SIZE)\n-                              .decorator(LoggingClient.builder().newDecorator())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4NjMzNg=="}, "originalCommit": {"oid": "34346d7ab3327488db9b5c78d320248a90cacc10"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MzU1NQ==", "bodyText": "Let me just remove this. If we need if for debugging we can easily add it. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2930#discussion_r459193555", "createdAt": "2020-07-23T03:13:59Z", "author": {"login": "minwoox"}, "path": "grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcClientTest.java", "diffHunk": "@@ -211,11 +211,9 @@ void setUp() {\n         final URI uri = server.httpUri(GrpcSerializationFormats.PROTO);\n         blockingStub = Clients.builder(uri)\n                               .maxResponseLength(MAX_MESSAGE_SIZE)\n-                              .decorator(LoggingClient.builder().newDecorator())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4NjMzNg=="}, "originalCommit": {"oid": "34346d7ab3327488db9b5c78d320248a90cacc10"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTYwNTMwOnYy", "diffSide": "RIGHT", "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageFramer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjo0NjozNFrOG16muQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzoyMDowMFrOG17BzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4Nzg5Nw==", "bodyText": "nit: How about introducing a new method such as writeWebTrailers(ByteBuf message) so that you don't need to put false every where?", "url": "https://github.com/line/armeria/pull/2930#discussion_r459187897", "createdAt": "2020-07-23T02:46:34Z", "author": {"login": "ikhoon"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageFramer.java", "diffHunk": "@@ -104,19 +110,23 @@ public ArmeriaMessageFramer(ByteBufAllocator alloc, int maxOutboundMessageSize)\n      * Writes out a payload message.\n      *\n      * @param message the message to be written out. Ownership is taken by {@link ArmeriaMessageFramer}.\n+     * @param webTrailers tells whether the payload is web trailers\n      *\n      * @return an {@link HttpData} with the framed payload. Ownership is passed to caller.\n      */\n-    public HttpData writePayload(ByteBuf message) {\n+    public HttpData writePayload(ByteBuf message, boolean webTrailers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34346d7ab3327488db9b5c78d320248a90cacc10"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5NDgyOQ==", "bodyText": "That's a good idea. Added!", "url": "https://github.com/line/armeria/pull/2930#discussion_r459194829", "createdAt": "2020-07-23T03:20:00Z", "author": {"login": "minwoox"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageFramer.java", "diffHunk": "@@ -104,19 +110,23 @@ public ArmeriaMessageFramer(ByteBufAllocator alloc, int maxOutboundMessageSize)\n      * Writes out a payload message.\n      *\n      * @param message the message to be written out. Ownership is taken by {@link ArmeriaMessageFramer}.\n+     * @param webTrailers tells whether the payload is web trailers\n      *\n      * @return an {@link HttpData} with the framed payload. Ownership is passed to caller.\n      */\n-    public HttpData writePayload(ByteBuf message) {\n+    public HttpData writePayload(ByteBuf message, boolean webTrailers) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4Nzg5Nw=="}, "originalCommit": {"oid": "34346d7ab3327488db9b5c78d320248a90cacc10"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTYzNTkxOnYy", "diffSide": "RIGHT", "path": "grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcWebRetryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzowNzoyMlrOG163SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzowNzoyMlrOG163SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MjEzNg==", "bodyText": "\ud83d\ude31", "url": "https://github.com/line/armeria/pull/2930#discussion_r459192136", "createdAt": "2020-07-23T03:07:22Z", "author": {"login": "ikhoon"}, "path": "grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcWebRetryTest.java", "diffHunk": "@@ -112,8 +112,8 @@ void emptyCall(SerializationFormat serializationFormat) {\n                        .build(TestServiceBlockingStub.class);\n \n         try (ClientRequestContextCaptor captor = Clients.newContextCaptor()) {\n-            final SimpleResponse result = client.unaryCall(SimpleRequest.newBuilder().build());\n-            assertThat(result.getUsername()).isEqualTo(\"my name\");\n+            final Empty result = client.emptyCall(Empty.newBuilder().build());\n+            assertThat(result).isEqualTo(Empty.getDefaultInstance());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34346d7ab3327488db9b5c78d320248a90cacc10"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2121, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}