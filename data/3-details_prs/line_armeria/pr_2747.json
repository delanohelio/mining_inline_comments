{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNTc3MTQ5", "number": 2747, "title": "Provide a way to close a connection when exceeding the maximum age on server-side", "bodyText": "Motivation:\nSometimes users might want to disconnect an active connection after a certain period of time.\nThis is useful when balance loads with an L4 load balancer which not understand HTTP2 connection.\nBy closing connections periodically, new connections are able to spread to other servers.\nModifications:\n\nAdd defaultServerMaxConnectionAgeMillis flag. This option is disabled by default.\nAdd maxConnectionAge{Millis} to ServerBuilder`.\nRecord CONNECTION_START_TIME_NANO when a channel is initialized.\nDisconnect a connection after exceeding maxConnectionAge by sending:\n\n\"Connection: close\" for HTTP/1\nGOAWAY frame for HTTP/2\n\n\nFix a bug where channel.close() throws NullPointerException when idle timeout is set to 0\n\nResult:\n\nYou can now disconnect an old connection.", "createdAt": "2020-05-27T03:04:08Z", "url": "https://github.com/line/armeria/pull/2747", "merged": true, "mergeCommit": {"oid": "ec336fa661ddc4308e8a831b99c959f939533f99"}, "closed": true, "closedAt": "2020-06-05T04:34:19Z", "author": {"login": "ikhoon"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclQ1_aAFqTQxODgzNTQ2Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcn5EZNgH2gAyNDIzNTc3MTQ5OmU4MTAwNjVmNjc1NGVmMmNjMWM0MWY3MTY3MDhjMmE0YjA0M2Y2MWU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4ODM1NDY3", "url": "https://github.com/line/armeria/pull/2747#pullrequestreview-418835467", "createdAt": "2020-05-27T03:38:43Z", "commit": {"oid": "1fd330eb519e004d5930cd9950f32ea7365c6a6e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMzozODo0NFrOGa4Wwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMzozODo0NFrOGa4Wwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgzOTQ5MA==", "bodyText": "Question: Should we need to limit the minimum value?", "url": "https://github.com/line/armeria/pull/2747#discussion_r430839490", "createdAt": "2020-05-27T03:38:44Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java", "diffHunk": "@@ -499,6 +500,28 @@ public ServerBuilder pingInterval(Duration pingInterval) {\n         return this;\n     }\n \n+    /**\n+     * Sets the maximum allowed age of a connection in millis for keep-alive. A connection is disconnected\n+     * after the specified {@code maxConnectionAgeMillis} since the connection was established.\n+     *\n+     * @param maxConnectionAgeMillis the maximum connection age in millis. {@code 0} disables the limit.\n+     */\n+    public ServerBuilder maxConnectionAgeMillis(long maxConnectionAgeMillis) {\n+        validateNonNegative(maxConnectionAgeMillis, \"maxConnectionAgeMillis\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd330eb519e004d5930cd9950f32ea7365c6a6e"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MDMxMTc2", "url": "https://github.com/line/armeria/pull/2747#pullrequestreview-419031176", "createdAt": "2020-05-27T09:47:46Z", "commit": {"oid": "17a68a05144feaf076e518de722096d6e5177ee5"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTo0Nzo0N1rOGbBxzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDowOTowN1rOGbChtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk5Mzg3MQ==", "bodyText": "serverMax or maxServer? \ud83e\udd14", "url": "https://github.com/line/armeria/pull/2747#discussion_r430993871", "createdAt": "2020-05-27T09:47:47Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/Flags.java", "diffHunk": "@@ -242,6 +242,12 @@\n                     DEFAULT_DEFAULT_PING_INTERVAL_MILLIS,\n                     value -> value >= 0);\n \n+    private static final long DEFAULT_DEFAULT_SERVER_MAX_CONNECTION_AGE_MILLIS = 0; // Disabled", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17a68a05144feaf076e518de722096d6e5177ee5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk5NDAzMA==", "bodyText": "Thanks for fixing this \ud83d\ude47", "url": "https://github.com/line/armeria/pull/2747#discussion_r430994030", "createdAt": "2020-05-27T09:48:02Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/Http2ServerConnectionHandler.java", "diffHunk": "@@ -69,7 +69,7 @@\n     protected boolean needsImmediateDisconnection() {\n         return gracefulShutdownSupport.isShuttingDown() ||\n                requestDecoder.goAwayHandler().receivedErrorGoAway() ||\n-               keepAliveHandler.isClosing();\n+               (keepAliveHandler != null && keepAliveHandler.isClosing());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17a68a05144feaf076e518de722096d6e5177ee5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk5NzkyMA==", "bodyText": "Maybe better setting this after the session is ready, so that we do not take the time spent for TLS negotiation, etc? i.e. in HttpServerHandler.<init> We could also store it as a member field, which is much cheaper, then.", "url": "https://github.com/line/armeria/pull/2747#discussion_r430997920", "createdAt": "2020-05-27T09:54:36Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/HttpServerPipelineConfigurator.java", "diffHunk": "@@ -112,11 +117,15 @@\n         this.port = requireNonNull(port, \"port\");\n         this.sslContexts = sslContexts;\n         this.gracefulShutdownSupport = requireNonNull(gracefulShutdownSupport, \"gracefulShutdownSupport\");\n+        maxConnectionAgeMillis = config.maxConnectionAgeMillis();\n     }\n \n     @Override\n     protected void initChannel(Channel ch) throws Exception {\n         ChannelUtil.disableWriterBufferWatermark(ch);\n+        if (maxConnectionAgeMillis > 0) {\n+            ch.attr(CONNECTION_START_TIME_NANO).set(System.nanoTime());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17a68a05144feaf076e518de722096d6e5177ee5"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk5ODY3NQ==", "bodyText": "Good question, but I don't have a clue to be honest. What value would be considered too small? How about 1000, which should be a big enough value as 'second'?", "url": "https://github.com/line/armeria/pull/2747#discussion_r430998675", "createdAt": "2020-05-27T09:55:51Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java", "diffHunk": "@@ -499,6 +500,28 @@ public ServerBuilder pingInterval(Duration pingInterval) {\n         return this;\n     }\n \n+    /**\n+     * Sets the maximum allowed age of a connection in millis for keep-alive. A connection is disconnected\n+     * after the specified {@code maxConnectionAgeMillis} since the connection was established.\n+     *\n+     * @param maxConnectionAgeMillis the maximum connection age in millis. {@code 0} disables the limit.\n+     */\n+    public ServerBuilder maxConnectionAgeMillis(long maxConnectionAgeMillis) {\n+        validateNonNegative(maxConnectionAgeMillis, \"maxConnectionAgeMillis\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgzOTQ5MA=="}, "originalCommit": {"oid": "1fd330eb519e004d5930cd9950f32ea7365c6a6e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAwMTY4Mg==", "bodyText": "Could we make this test take less time?", "url": "https://github.com/line/armeria/pull/2747#discussion_r431001682", "createdAt": "2020-05-27T10:01:05Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/server/ServerMaxConnectionAgeTest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.withinPercentage;\n+import static org.awaitility.Awaitility.await;\n+\n+import java.net.InetSocketAddress;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.CsvSource;\n+\n+import com.google.common.base.Stopwatch;\n+\n+import com.linecorp.armeria.client.ClientFactory;\n+import com.linecorp.armeria.client.ConnectionPoolListener;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.testing.junit.server.ServerExtension;\n+\n+import io.netty.util.AttributeMap;\n+\n+class ServerMaxConnectionAgeTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17a68a05144feaf076e518de722096d6e5177ee5"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAwNjEzNA==", "bodyText": "I guess we don't really test the case of HTTP/1 pipelining enabled because we always wait until the response is received? Could we have dedicated tests for:\n\nHTTP/1 with pipelining enabled, so that the requests handled after the server sends Connection: close fails with some exception, e.g. ClosedSessionException, making sure they don't go through the decorator chain at all.\nHTTP/2 whth simultaneous request, so that we make sure the requests whose stream ID is greater than lastStreamId fail with an UnprocessedRequestException(GoAwayReceivedException), making sure they don't through the decorator chain at all.", "url": "https://github.com/line/armeria/pull/2747#discussion_r431006134", "createdAt": "2020-05-27T10:09:07Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/server/ServerMaxConnectionAgeTest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.withinPercentage;\n+import static org.awaitility.Awaitility.await;\n+\n+import java.net.InetSocketAddress;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.CsvSource;\n+\n+import com.google.common.base.Stopwatch;\n+\n+import com.linecorp.armeria.client.ClientFactory;\n+import com.linecorp.armeria.client.ConnectionPoolListener;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.testing.junit.server.ServerExtension;\n+\n+import io.netty.util.AttributeMap;\n+\n+class ServerMaxConnectionAgeTest {\n+\n+    private static final int MAX_CONNECTION_AGE_MILLIS = 5000;\n+\n+    @RegisterExtension\n+    static ServerExtension server = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) throws Exception {\n+            sb.idleTimeoutMillis(0);\n+            sb.maxConnectionAgeMillis(MAX_CONNECTION_AGE_MILLIS);\n+            sb.service(\"/\", (ctx, req) -> HttpResponse.of(HttpStatus.OK));\n+        }\n+    };\n+\n+    @RegisterExtension\n+    static ServerExtension serverKeepAlive = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) throws Exception {\n+            sb.idleTimeoutMillis(0);\n+            sb.service(\"/\", (ctx, req) -> HttpResponse.of(HttpStatus.OK));\n+        }\n+    };\n+\n+    AtomicInteger opened;\n+    AtomicInteger closed;\n+    ConnectionPoolListener connectionPoolListener;\n+\n+    @BeforeEach\n+    void setUp() {\n+        opened = new AtomicInteger();\n+        closed = new AtomicInteger();\n+        connectionPoolListener = new ConnectionPoolListener() {\n+            @Override\n+            public void connectionOpen(SessionProtocol protocol, InetSocketAddress remoteAddr,\n+                                       InetSocketAddress localAddr, AttributeMap attrs) throws Exception {\n+                opened.incrementAndGet();\n+            }\n+\n+            @Override\n+            public void connectionClosed(SessionProtocol protocol, InetSocketAddress remoteAddr,\n+                                         InetSocketAddress localAddr, AttributeMap attrs) throws Exception {\n+                closed.incrementAndGet();\n+            }\n+        };\n+    }\n+\n+    @CsvSource({ \"H1C, false\", \"H1C, true\", \"H2C, true\" })\n+    @ParameterizedTest\n+    void shouldDisconnectWhenMaxConnectionAgeIsExceeded(SessionProtocol protocol, boolean useHttp1Pipelining)\n+            throws InterruptedException {\n+        final ClientFactory clientFactory =\n+                ClientFactory.builder()\n+                             .connectionPoolListener(connectionPoolListener)\n+                             .useHttp1Pipelining(useHttp1Pipelining)\n+                             .idleTimeoutMillis(0)\n+                             .build();\n+        final WebClient client =\n+                WebClient.builder(server.uri(protocol))\n+                         .factory(clientFactory)\n+                         .build();\n+\n+        final Stopwatch stopwatch = Stopwatch.createStarted();\n+        final AtomicInteger oldClosed = new AtomicInteger();\n+\n+        while (closed.get() < 5) {\n+            assertThat(client.get(\"/\").aggregate().join().status()).isEqualTo(HttpStatus.OK);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17a68a05144feaf076e518de722096d6e5177ee5"}, "originalPosition": 109}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01f79928ef456c6e7f06e9fa566bc3fb8dfc8e7c", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/01f79928ef456c6e7f06e9fa566bc3fb8dfc8e7c", "committedDate": "2020-06-02T02:01:29Z", "message": "Provide a way to close a connection when exceeding the maximum age\n\nMotivation:\n\nSometimes users might want to disconnect an active connection after a certain period of time.\nThis is useful when balance loads with a L4 load balancer which not understand HTTP2 connection.\nBy closing connections periodically, new connections are able to spread to other servers.\n\nModifications:\n\n- Add `defaultServerMaxConnectionAgeMillis` flag. This option is disabled by default.\n- Add `maxConnectionAge{Millis} to `ServerBuilder`.\n- Record `CONNECTION_START_TIME_NANO` when a channel is initialized.\n- Disconnect a connection after exceeding maxConnectionAge by sending:\n  - \"Connection: close\" for HTTP/1\n  - GOAWAY frame for HTTP/2\n- Fix a bug where `channel.close()` throws NullPointerException when idle timeout is set to 0\n\nResult:\n\n- You can now send `GOAWAY` frame with HTTP/2 and `Connection: close`\n  with HTTP/1 for an old connection on server-side."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e91601328118198f2852e34c187071707f004d66", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/e91601328118198f2852e34c187071707f004d66", "committedDate": "2020-06-02T02:01:29Z", "message": "Close an idle connection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4a51c5d15d76f68f9a2dac9d8b10f894545c524", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/d4a51c5d15d76f68f9a2dac9d8b10f894545c524", "committedDate": "2020-06-02T02:01:29Z", "message": "Fix broken and flaky test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab7e489120ff6b97740ba2bcfe9ab6b82d2b869b", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/ab7e489120ff6b97740ba2bcfe9ab6b82d2b869b", "committedDate": "2020-06-02T02:01:30Z", "message": "Address comments by @trustin / Add test cases for H1C with pipeline and H2C"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "17a68a05144feaf076e518de722096d6e5177ee5", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/17a68a05144feaf076e518de722096d6e5177ee5", "committedDate": "2020-05-27T06:59:37Z", "message": "Fix broken and flaky test"}, "afterCommit": {"oid": "ab7e489120ff6b97740ba2bcfe9ab6b82d2b869b", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/ab7e489120ff6b97740ba2bcfe9ab6b82d2b869b", "committedDate": "2020-06-02T02:01:30Z", "message": "Address comments by @trustin / Add test cases for H1C with pipeline and H2C"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bc0ad72e528e579ba15b38e6fdd1006b0698b89", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/7bc0ad72e528e579ba15b38e6fdd1006b0698b89", "committedDate": "2020-06-02T03:41:40Z", "message": "Use scheduler"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMzU0MTUy", "url": "https://github.com/line/armeria/pull/2747#pullrequestreview-422354152", "createdAt": "2020-06-02T05:34:32Z", "commit": {"oid": "7bc0ad72e528e579ba15b38e6fdd1006b0698b89"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTozNDozMlrOGdiq1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTo1MjozNlrOGdi_Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyOTkwOA==", "bodyText": "Could use this.protocol instead?", "url": "https://github.com/line/armeria/pull/2747#discussion_r433629908", "createdAt": "2020-06-02T05:34:32Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java", "diffHunk": "@@ -314,6 +316,16 @@ private void handleRequest(ChannelHandlerContext ctx, DecodedHttpRequest req) th\n         final ProxiedAddresses proxiedAddresses = determineProxiedAddresses(channel, headers);\n         final InetAddress clientAddress = config.clientAddressMapper().apply(proxiedAddresses).getAddress();\n \n+        // Handle max connection age for HTTP/1.\n+        if (responseEncoder instanceof ServerHttp1ObjectEncoder &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bc0ad72e528e579ba15b38e6fdd1006b0698b89"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYzMDk3OA==", "bodyText": "Isn't it better closing the connection immediately? It could have been nicer if there a standard status code assigned for this case...", "url": "https://github.com/line/armeria/pull/2747#discussion_r433630978", "createdAt": "2020-06-02T05:38:15Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java", "diffHunk": "@@ -314,6 +316,16 @@ private void handleRequest(ChannelHandlerContext ctx, DecodedHttpRequest req) th\n         final ProxiedAddresses proxiedAddresses = determineProxiedAddresses(channel, headers);\n         final InetAddress clientAddress = config.clientAddressMapper().apply(proxiedAddresses).getAddress();\n \n+        // Handle max connection age for HTTP/1.\n+        if (responseEncoder instanceof ServerHttp1ObjectEncoder &&\n+            ((ServerHttp1ObjectEncoder) responseEncoder).isClosedConnection()) {\n+            final ServiceRequestContext reqCtx =\n+                    newEarlyRespondingRequestContext(channel, req, hostname, virtualHost,\n+                                                     proxiedAddresses, clientAddress, null);\n+            respond(ctx, reqCtx, HttpStatus.INTERNAL_SERVER_ERROR, null, ClosedSessionException.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bc0ad72e528e579ba15b38e6fdd1006b0698b89"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYzMTQ1OQ==", "bodyText": "How about isDisconnecting or sentConnectionCloseHeader ?", "url": "https://github.com/line/armeria/pull/2747#discussion_r433631459", "createdAt": "2020-06-02T05:40:02Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/ServerHttp1ObjectEncoder.java", "diffHunk": "@@ -47,6 +46,8 @@\n     private final boolean enableServerHeader;\n     private final boolean enableDateHeader;\n \n+    private boolean isClosedConnection;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bc0ad72e528e579ba15b38e6fdd1006b0698b89"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYzNTA4Mg==", "bodyText": "How about this:\n\nSend the first streaming POST response with a few bytes written.\n\nThe response stream must be stay open.\n\n\nWait until the first response's first few bytes were drained by Armeria.\n\nAt this point, we are sure the connection has been returned to the pool.\n\n\nSend the second non-streaming GET response.\nWait until the connection reaches its max age.", "url": "https://github.com/line/armeria/pull/2747#discussion_r433635082", "createdAt": "2020-06-02T05:52:36Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/server/ServerMaxConnectionAgeTest.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.linecorp.armeria.common.HttpStatus.INTERNAL_SERVER_ERROR;\n+import static com.linecorp.armeria.common.HttpStatus.OK;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.withinPercentage;\n+import static org.awaitility.Awaitility.await;\n+\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Supplier;\n+import java.util.stream.IntStream;\n+\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.CsvSource;\n+\n+import com.google.common.base.Stopwatch;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+\n+import com.linecorp.armeria.client.ClientFactory;\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.ClientRequestContextCaptor;\n+import com.linecorp.armeria.client.Clients;\n+import com.linecorp.armeria.client.ConnectionPoolListener;\n+import com.linecorp.armeria.client.GoAwayReceivedException;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.common.logging.RequestLog;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.testing.junit.server.ServerExtension;\n+\n+import io.netty.util.AttributeMap;\n+\n+class ServerMaxConnectionAgeTest {\n+\n+    private static final long MAX_CONNECTION_AGE = 1000;\n+\n+    @RegisterExtension\n+    static ServerExtension server = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) throws Exception {\n+            sb.idleTimeoutMillis(0);\n+            sb.requestTimeoutMillis(0);\n+            sb.maxConnectionAgeMillis(MAX_CONNECTION_AGE);\n+            sb.service(\"/\", (ctx, req) -> HttpResponse.of(OK));\n+            sb.service(\"/slow\", (ctx, req) ->\n+                    HttpResponse.delayed(HttpResponse.of(OK), Duration.ofMillis(400)));\n+        }\n+\n+        @Override\n+        protected boolean runForEachTest() {\n+            return true;\n+        }\n+    };\n+\n+    @RegisterExtension\n+    static ServerExtension serverKeepAlive = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) throws Exception {\n+            sb.idleTimeoutMillis(0);\n+            sb.requestTimeoutMillis(0);\n+            sb.service(\"/\", (ctx, req) ->\n+                    HttpResponse.delayed(HttpResponse.of(OK), Duration.ofMillis(100)));\n+        }\n+    };\n+\n+    private List<HttpResponse> responses;\n+    private AtomicInteger opened;\n+    private AtomicInteger closed;\n+    private ConnectionPoolListener connectionPoolListener;\n+\n+    @BeforeEach\n+    void setUp() {\n+        responses = new ArrayList<>();\n+        opened = new AtomicInteger();\n+        closed = new AtomicInteger();\n+        connectionPoolListener = new ConnectionPoolListener() {\n+            @Override\n+            public void connectionOpen(SessionProtocol protocol, InetSocketAddress remoteAddr,\n+                                       InetSocketAddress localAddr, AttributeMap attrs) throws Exception {\n+                opened.incrementAndGet();\n+            }\n+\n+            @Override\n+            public void connectionClosed(SessionProtocol protocol, InetSocketAddress remoteAddr,\n+                                         InetSocketAddress localAddr, AttributeMap attrs) throws Exception {\n+                closed.incrementAndGet();\n+            }\n+        };\n+    }\n+\n+    @Test\n+    void http1MaxConnectionAge() throws InterruptedException {\n+        final AtomicInteger oldClosed = new AtomicInteger();\n+        final WebClient client = newWebClient(server.uri(SessionProtocol.H1C));\n+\n+        final Stopwatch stopwatch = Stopwatch.createStarted();\n+        while (closed.get() < 5) {\n+            final AggregatedHttpResponse agg = client.get(\"/\").aggregate().join();\n+            assertThat(agg.status()).isEqualTo(OK);\n+\n+            final int closed = this.closed.get();\n+            assertThat(opened).hasValueBetween(closed, closed + 1);\n+\n+            // When a connection is disconnected, check the time from the previous disconnection.\n+            if (this.closed.get() > oldClosed.get()) {\n+                assertThat(stopwatch.elapsed().toMillis())\n+                        .isCloseTo(MAX_CONNECTION_AGE, withinPercentage(35));\n+                oldClosed.set(this.closed.get());\n+                stopwatch.reset().start();\n+            }\n+        }\n+    }\n+\n+    // TODO(ikhoon): This is a flaky test. Needs a idea to fix it.\n+    @Test\n+    void http1WithPipeliningMaxConnectionAge() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bc0ad72e528e579ba15b38e6fdd1006b0698b89"}, "originalPosition": 148}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51648b1aaa6ec93fd56294bd74706633e5f34bd7", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/51648b1aaa6ec93fd56294bd74706633e5f34bd7", "committedDate": "2020-06-03T07:05:25Z", "message": "Use Socket to emulate HTTP/1 pipeline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29232f4e8170998a62c3b7736ed3d6ae7730a6c7", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/29232f4e8170998a62c3b7736ed3d6ae7730a6c7", "committedDate": "2020-06-03T08:14:46Z", "message": "Clean up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MTMxNzQw", "url": "https://github.com/line/armeria/pull/2747#pullrequestreview-424131740", "createdAt": "2020-06-04T06:19:35Z", "commit": {"oid": "51648b1aaa6ec93fd56294bd74706633e5f34bd7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjoxOTozNVrOGe3SOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjoxOTozNVrOGe3SOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAxNjI0OA==", "bodyText": "Cruft?", "url": "https://github.com/line/armeria/pull/2747#discussion_r435016248", "createdAt": "2020-06-04T06:19:35Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/KeepAliveHandler.java", "diffHunk": "@@ -138,7 +138,10 @@ public final void initialize(ChannelHandlerContext ctx) {\n                                                   pingIdleTimeNanos, TimeUnit.NANOSECONDS);\n         }\n         if (maxConnectionAgeNanos > 0) {\n-            maxConnectionAgeFuture = executor().schedule(() -> isMaxConnectionAgeExceeded = true,\n+            maxConnectionAgeFuture = executor().schedule(() -> {\n+                                                             logger.info(\"make isMaxConnectionAgeExceeded true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51648b1aaa6ec93fd56294bd74706633e5f34bd7"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MTMyNTk3", "url": "https://github.com/line/armeria/pull/2747#pullrequestreview-424132597", "createdAt": "2020-06-04T06:21:30Z", "commit": {"oid": "51648b1aaa6ec93fd56294bd74706633e5f34bd7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjoyMTozMFrOGe3U-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjoyMTozMFrOGe3U-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAxNjk1NQ==", "bodyText": "Revert or ..?", "url": "https://github.com/line/armeria/pull/2747#discussion_r435016955", "createdAt": "2020-06-04T06:21:30Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/server/ServerMaxConnectionAgeTest.java", "diffHunk": "@@ -241,6 +238,7 @@ private WebClient newWebClient(URI uri, boolean useHttp1PipeLine) {\n                                                          .build();\n         return WebClient.builder(uri)\n                         .factory(clientFactory)\n+                        //                        .decorator(LoggingClient.newDecorator())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51648b1aaa6ec93fd56294bd74706633e5f34bd7"}, "originalPosition": 142}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MTQxOTc2", "url": "https://github.com/line/armeria/pull/2747#pullrequestreview-424141976", "createdAt": "2020-06-04T06:40:24Z", "commit": {"oid": "29232f4e8170998a62c3b7736ed3d6ae7730a6c7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6b8ac3ba8904a11ed3cc081abf52c4a68e95abb", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/f6b8ac3ba8904a11ed3cc081abf52c4a68e95abb", "committedDate": "2020-06-04T06:45:02Z", "message": "Remove cruft"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MTU5ODE3", "url": "https://github.com/line/armeria/pull/2747#pullrequestreview-424159817", "createdAt": "2020-06-04T07:11:06Z", "commit": {"oid": "f6b8ac3ba8904a11ed3cc081abf52c4a68e95abb"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNzoxMTowNlrOGe4onA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNzoxMzowM1rOGe4seQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAzODM2NA==", "bodyText": "milliseconds?", "url": "https://github.com/line/armeria/pull/2747#discussion_r435038364", "createdAt": "2020-06-04T07:11:06Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java", "diffHunk": "@@ -499,6 +501,34 @@ public ServerBuilder pingInterval(Duration pingInterval) {\n         return this;\n     }\n \n+    /**\n+     * Sets the maximum allowed age of a connection in millis for keep-alive. A connection is disconnected\n+     * after the specified {@code maxConnectionAgeMillis} since the connection was established.\n+     *\n+     * @param maxConnectionAgeMillis the maximum connection age in millis. {@code 0} disables the limit.\n+     * @throws IllegalArgumentException if the specified {@code maxConnectionAgeMillis} is smaller than\n+     *                                  {@value #MIN_MAX_CONNECTION_AGE_MILLIS} second.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6b8ac3ba8904a11ed3cc081abf52c4a68e95abb"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAzOTM1Mw==", "bodyText": "ditto.", "url": "https://github.com/line/armeria/pull/2747#discussion_r435039353", "createdAt": "2020-06-04T07:13:03Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java", "diffHunk": "@@ -499,6 +501,34 @@ public ServerBuilder pingInterval(Duration pingInterval) {\n         return this;\n     }\n \n+    /**\n+     * Sets the maximum allowed age of a connection in millis for keep-alive. A connection is disconnected\n+     * after the specified {@code maxConnectionAgeMillis} since the connection was established.\n+     *\n+     * @param maxConnectionAgeMillis the maximum connection age in millis. {@code 0} disables the limit.\n+     * @throws IllegalArgumentException if the specified {@code maxConnectionAgeMillis} is smaller than\n+     *                                  {@value #MIN_MAX_CONNECTION_AGE_MILLIS} second.\n+     */\n+    public ServerBuilder maxConnectionAgeMillis(long maxConnectionAgeMillis) {\n+        checkArgument(maxConnectionAgeMillis >= MIN_MAX_CONNECTION_AGE_MILLIS || maxConnectionAgeMillis == 0,\n+                      \"maxConnectionAgeMillis: %s (expected: >= %s or == 0)\",\n+                      maxConnectionAgeMillis, MIN_MAX_CONNECTION_AGE_MILLIS);\n+        this.maxConnectionAgeMillis = maxConnectionAgeMillis;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the maximum allowed age of a connection for keep-alive. A connection is disconnected\n+     * after the specified {@code maxConnectionAge} since the connection was established.\n+     *\n+     * @param maxConnectionAge the maximum connection age. {@code 0} disables the limit.\n+     * @throws IllegalArgumentException if the specified {@code maxConnectionAge} is smaller than\n+     *                                  {@value #MIN_MAX_CONNECTION_AGE_MILLIS} second.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6b8ac3ba8904a11ed3cc081abf52c4a68e95abb"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e810065f6754ef2cc1c41f716708c2a4b043f61e", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/e810065f6754ef2cc1c41f716708c2a4b043f61e", "committedDate": "2020-06-04T07:38:31Z", "message": "Address comments by @minwoox"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 567, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}