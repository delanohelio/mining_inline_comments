{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNDkxNTQw", "number": 2471, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo0NjoyM1rODeFW5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwNDozNjowMlrODeM4-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODcxNjU0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/VirtualHostBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo0NjoyM1rOFnDW0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzowNDo1MlrOFnD6xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ5Mzc3OA==", "bodyText": "Error is too generic in here may be we should throw more specific Exception in here", "url": "https://github.com/line/armeria/pull/2471#discussion_r376493778", "createdAt": "2020-02-07T16:46:23Z", "author": {"login": "mercanil"}, "path": "core/src/main/java/com/linecorp/armeria/server/VirtualHostBuilder.java", "diffHunk": "@@ -917,17 +911,24 @@ VirtualHost build(VirtualHostBuilder template) {\n         assert accessLoggerMapper != null;\n         assert extensions != null;\n \n-        virtualHostAnnotatedServiceBindingBuilders.stream()\n-                                                  .flatMap(b -> b.buildServiceConfigBuilder(extensions)\n-                                                                 .stream())\n-                                                  .forEach(this::addServiceConfigBuilder);\n-\n-        final List<ServiceConfigBuilder> serviceConfigBuilders =\n-                getServiceConfigBuilders(template);\n-        final List<ServiceConfig> serviceConfigs = serviceConfigBuilders.stream().map(cfgBuilder -> {\n-            return cfgBuilder.build(requestTimeoutMillis, maxRequestLength, verboseResponses,\n-                                    accessLogWriter, shutdownAccessLogWriterOnStop);\n-        }).collect(toImmutableList());\n+        final List<ServiceConfig> serviceConfigs = getServiceConfigSetters(template)\n+                .stream()\n+                .flatMap(cfgSetters -> {\n+                    if (cfgSetters instanceof VirtualHostAnnotatedServiceBindingBuilder) {\n+                        return ((VirtualHostAnnotatedServiceBindingBuilder) cfgSetters)\n+                                .buildServiceConfigBuilder(extensions).stream();\n+                    } else if (cfgSetters instanceof AnnotatedServiceBindingBuilder) {\n+                        return ((AnnotatedServiceBindingBuilder) cfgSetters)\n+                                .buildServiceConfigBuilder(extensions).stream();\n+                    } else if (cfgSetters instanceof ServiceConfigBuilder) {\n+                        return Stream.of((ServiceConfigBuilder) cfgSetters);\n+                    } else {\n+                        throw new Error(); // Should not reach here.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb99a7c5e009b1a0dc5d91445a9b2420558f311"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUwMjk4Mg==", "bodyText": "This is an internal API so users must not encounter this error. But, let me improve the error message.", "url": "https://github.com/line/armeria/pull/2471#discussion_r376502982", "createdAt": "2020-02-07T17:04:52Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/VirtualHostBuilder.java", "diffHunk": "@@ -917,17 +911,24 @@ VirtualHost build(VirtualHostBuilder template) {\n         assert accessLoggerMapper != null;\n         assert extensions != null;\n \n-        virtualHostAnnotatedServiceBindingBuilders.stream()\n-                                                  .flatMap(b -> b.buildServiceConfigBuilder(extensions)\n-                                                                 .stream())\n-                                                  .forEach(this::addServiceConfigBuilder);\n-\n-        final List<ServiceConfigBuilder> serviceConfigBuilders =\n-                getServiceConfigBuilders(template);\n-        final List<ServiceConfig> serviceConfigs = serviceConfigBuilders.stream().map(cfgBuilder -> {\n-            return cfgBuilder.build(requestTimeoutMillis, maxRequestLength, verboseResponses,\n-                                    accessLogWriter, shutdownAccessLogWriterOnStop);\n-        }).collect(toImmutableList());\n+        final List<ServiceConfig> serviceConfigs = getServiceConfigSetters(template)\n+                .stream()\n+                .flatMap(cfgSetters -> {\n+                    if (cfgSetters instanceof VirtualHostAnnotatedServiceBindingBuilder) {\n+                        return ((VirtualHostAnnotatedServiceBindingBuilder) cfgSetters)\n+                                .buildServiceConfigBuilder(extensions).stream();\n+                    } else if (cfgSetters instanceof AnnotatedServiceBindingBuilder) {\n+                        return ((AnnotatedServiceBindingBuilder) cfgSetters)\n+                                .buildServiceConfigBuilder(extensions).stream();\n+                    } else if (cfgSetters instanceof ServiceConfigBuilder) {\n+                        return Stream.of((ServiceConfigBuilder) cfgSetters);\n+                    } else {\n+                        throw new Error(); // Should not reach here.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ5Mzc3OA=="}, "originalCommit": {"oid": "6eb99a7c5e009b1a0dc5d91445a9b2420558f311"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTkyOTYwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/ServiceConfigBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwMzozOToxNVrOFnO-PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwMzo0MDo1N1rOFnO-kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY4NDA5Mw==", "bodyText": "You sometimes return ServiceConfigSetters and sometimes ServiceConfigBuilder in this class. It doesn't hurt to return ServiceConfigSetters because it's package-private, but perhaps it's better returning ServiceConfigBuilder for consistency.", "url": "https://github.com/line/armeria/pull/2471#discussion_r376684093", "createdAt": "2020-02-08T03:39:15Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/ServiceConfigBuilder.java", "diffHunk": "@@ -44,47 +47,47 @@\n         this.service = requireNonNull(service, \"service\");\n     }\n \n-    @Nullable\n-    Long requestTimeoutMillis() {\n-        return requestTimeoutMillis;\n+    @Override\n+    public ServiceConfigSetters requestTimeout(Duration requestTimeout) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb99a7c5e009b1a0dc5d91445a9b2420558f311"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY4NDE3Nw==", "bodyText": "Oops.. Thanks for pointing!", "url": "https://github.com/line/armeria/pull/2471#discussion_r376684177", "createdAt": "2020-02-08T03:40:57Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/ServiceConfigBuilder.java", "diffHunk": "@@ -44,47 +47,47 @@\n         this.service = requireNonNull(service, \"service\");\n     }\n \n-    @Nullable\n-    Long requestTimeoutMillis() {\n-        return requestTimeoutMillis;\n+    @Override\n+    public ServiceConfigSetters requestTimeout(Duration requestTimeout) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY4NDA5Mw=="}, "originalCommit": {"oid": "6eb99a7c5e009b1a0dc5d91445a9b2420558f311"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTk1MDY2OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/server/ServiceRoutingTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwNDozNjowMlrOFnPIjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwNDozNjowMlrOFnPIjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY4NjczNQ==", "bodyText": "nit: let's do this after adding the below annotated service so that two tri routers are made which is the regression case. never mind. \ud83d\ude05", "url": "https://github.com/line/armeria/pull/2471#discussion_r376686735", "createdAt": "2020-02-08T04:36:02Z", "author": {"login": "minwoox"}, "path": "core/src/test/java/com/linecorp/armeria/server/ServiceRoutingTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.annotation.Get;\n+import com.linecorp.armeria.server.annotation.Param;\n+import com.linecorp.armeria.testing.junit.server.ServerExtension;\n+\n+class ServiceRoutingTest {\n+    @RegisterExtension\n+    static ServerExtension server = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) throws Exception {\n+            sb.annotatedService(\"/api/v0/\", new Object() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab089e6ab27d2f2c9f0a0e2c2fcce7899da06dfb"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3001, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}