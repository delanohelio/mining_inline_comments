{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MjI4NDY1", "number": 2372, "reviewThreads": {"totalCount": 42, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNjo1MTo0NlrODV5ieQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwODoyNDoxOFrODnXscg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0Mjg5NDAxOnYy", "diffSide": "RIGHT", "path": "benchmarks/src/jmh/java/com/linecorp/armeria/common/HttpRequestHeaderConversionBenchmark.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNjo1MTo0NlrOFaWhsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNjo1MTo0NlrOFaWhsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE3NjM3MQ==", "bodyText": "These methods can be static?", "url": "https://github.com/line/armeria/pull/2372#discussion_r363176371", "createdAt": "2020-01-06T06:51:46Z", "author": {"login": "trustin"}, "path": "benchmarks/src/jmh/java/com/linecorp/armeria/common/HttpRequestHeaderConversionBenchmark.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2019 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.server.Server;\n+\n+@State(Scope.Benchmark)\n+public class HttpRequestHeaderConversionBenchmark {\n+\n+    private Server serverWithoutAdditionalHeaders;\n+\n+    private WebClient clientWithAdditionalHeadersHttp1;\n+    private WebClient clientWithAdditionalHeadersHttp2;\n+\n+    @Setup\n+    public void startServer() {\n+        final int port = 8080;\n+\n+        serverWithoutAdditionalHeaders = Server.builder()\n+                                               .http(port)\n+                                               .service(\"/header_conversion\", (ctx, req) -> {\n+                                                   return HttpResponse.of(HttpStatus.OK);\n+                                               })\n+                                               .build();\n+        serverWithoutAdditionalHeaders.start().join();\n+\n+        clientWithAdditionalHeadersHttp1 = WebClient.builder(\"h1c://127.0.0.1:\" + port)\n+                                                    .decorator(((delegate, ctx, req) -> {\n+                                                        addAdditionalHeaders(ctx);\n+                                                        addProhibitedHeaders(ctx);\n+                                                        addCookies(ctx);\n+                                                        return delegate.execute(ctx, req);\n+                                                    })).build();\n+\n+        clientWithAdditionalHeadersHttp2 = WebClient.builder(\"h2c://127.0.0.1:\" + port)\n+                                                    .decorator(((delegate, ctx, req) -> {\n+                                                        addAdditionalHeaders(ctx);\n+                                                        addProhibitedHeaders(ctx);\n+                                                        addCookies(ctx);\n+                                                        return delegate.execute(ctx, req);\n+                                                    })).build();\n+    }\n+\n+    private void addAdditionalHeaders(ClientRequestContext ctx) {\n+        ctx.addAdditionalRequestHeader(\"custom-header-1\", \"my-header-1\");\n+        ctx.addAdditionalRequestHeader(\"custom-header-2\", \"my-header-2\");\n+        ctx.addAdditionalRequestHeader(\"custom-header-3\", \"my-header-3\");\n+        ctx.addAdditionalRequestHeader(\"custom-header-4\", \"my-header-4\");\n+    }\n+\n+    private void addProhibitedHeaders(ClientRequestContext ctx) {\n+        ctx.addAdditionalRequestHeader(HttpHeaderNames.SCHEME, \"https\");\n+        ctx.addAdditionalRequestHeader(HttpHeaderNames.STATUS, \"503\");\n+        ctx.addAdditionalRequestHeader(HttpHeaderNames.METHOD, \"CONNECT\");\n+    }\n+\n+    private void addCookies(ClientRequestContext ctx) {\n+        ctx.addAdditionalRequestHeader(HttpHeaderNames.COOKIE, \"a=b; c=d\");\n+        ctx.addAdditionalRequestHeader(HttpHeaderNames.COOKIE, \"e=f; g=h\");\n+        ctx.addAdditionalRequestHeader(HttpHeaderNames.COOKIE, \"i=j; k=l\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70af23b0433e88930a8360a73f94d646af59309"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0Mjg5NDczOnYy", "diffSide": "RIGHT", "path": "benchmarks/src/jmh/java/com/linecorp/armeria/common/HttpResponseHeaderConversionBenchmark.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNjo1MjoyNlrOFaWiLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNjo1MjoyNlrOFaWiLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE3NjQ5NQ==", "bodyText": "These methods could be static.", "url": "https://github.com/line/armeria/pull/2372#discussion_r363176495", "createdAt": "2020-01-06T06:52:26Z", "author": {"login": "trustin"}, "path": "benchmarks/src/jmh/java/com/linecorp/armeria/common/HttpResponseHeaderConversionBenchmark.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2019 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+@State(Scope.Benchmark)\n+public class HttpResponseHeaderConversionBenchmark {\n+\n+    private Server serverWithAdditionalHeaders;\n+\n+    private WebClient clientWithoutAdditionalHeadersHttp1;\n+    private WebClient clientWithoutAdditionalHeadersHttp2;\n+\n+    @Setup\n+    public void startServer() {\n+        final int port = 8080;\n+\n+        serverWithAdditionalHeaders = Server.builder()\n+                                            .http(port)\n+                                            .service(\"/header_conversion\", (ctx, req) -> {\n+                           addAdditionalHeaders(ctx);\n+                           addProhibitedHeaders(ctx);\n+                           return HttpResponse.of(HttpStatus.OK);\n+                       })\n+                                            .build();\n+        serverWithAdditionalHeaders.start().join();\n+\n+        clientWithoutAdditionalHeadersHttp1 = WebClient.of(\"h1c://127.0.0.1:\" + port);\n+        clientWithoutAdditionalHeadersHttp2 = WebClient.of(\"h2c://127.0.0.1:\" + port);\n+    }\n+\n+    private void addAdditionalHeaders(ServiceRequestContext ctx) {\n+        ctx.addAdditionalResponseHeader(\"custom-header-1\", \"my-header-1\");\n+        ctx.addAdditionalResponseHeader(\"custom-header-2\", \"my-header-2\");\n+        ctx.addAdditionalResponseHeader(\"custom-header-3\", \"my-header-3\");\n+        ctx.addAdditionalResponseHeader(\"custom-header-4\", \"my-header-4\");\n+\n+        ctx.addAdditionalResponseTrailer(\"custom-trailer-1\", \"my-trailer-1\");\n+        ctx.addAdditionalResponseTrailer(\"custom-trailer-2\", \"my-trailer-2\");\n+        ctx.addAdditionalResponseTrailer(\"custom-trailer-3\", \"my-trailer-3\");\n+        ctx.addAdditionalResponseTrailer(\"custom-trailer-4\", \"my-trailer-4\");\n+    }\n+\n+    private void addProhibitedHeaders(ServiceRequestContext ctx) {\n+        ctx.addAdditionalResponseHeader(HttpHeaderNames.SCHEME, \"https\");\n+        ctx.addAdditionalResponseHeader(HttpHeaderNames.STATUS, \"100\");\n+        ctx.addAdditionalResponseHeader(HttpHeaderNames.METHOD, \"CONNECT\");\n+        ctx.addAdditionalResponseHeader(HttpHeaderNames.PATH, \"/foo\");\n+\n+        ctx.addAdditionalResponseTrailer(HttpHeaderNames.SCHEME, \"https\");\n+        ctx.addAdditionalResponseTrailer(HttpHeaderNames.STATUS, \"100\");\n+        ctx.addAdditionalResponseTrailer(HttpHeaderNames.METHOD, \"CONNECT\");\n+        ctx.addAdditionalResponseTrailer(HttpHeaderNames.PATH, \"/foo\");\n+        ctx.addAdditionalResponseTrailer(HttpHeaderNames.TRANSFER_ENCODING, \"magic\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70af23b0433e88930a8360a73f94d646af59309"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjkwNTM1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/Http1ObjectEncoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNzowMDo0NFrOFaWoXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQxNzoyMjo1OVrOFh1BMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE3ODA3Ng==", "bodyText": "Could we calculate userAgentHeader and authorityHeader until here (or Http2ObjectEncoder)? By doing so, we could remove userAgentHeader and authorityHeader parameter for many methods.", "url": "https://github.com/line/armeria/pull/2372#discussion_r363178076", "createdAt": "2020-01-06T07:00:44Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/Http1ObjectEncoder.java", "diffHunk": "@@ -277,26 +309,67 @@ private HttpObject convertClientHeaders(int streamId, HttpHeaders headers, boole\n \n     private void convert(int streamId, HttpHeaders inHeaders,\n                          io.netty.handler.codec.http.HttpHeaders outHeaders, boolean trailer,\n-                         boolean isRequest) throws Http2Exception {\n+                         boolean isRequest, boolean endStream,\n+                         HttpHeaders additionalHeaders, HttpHeaders additionalTrailers,\n+                         boolean enableServerHeader, boolean enableDateHeader,\n+                         @Nullable String authorityHeader, @Nullable String userAgentHeader)\n+            throws Http2Exception {\n \n         ArmeriaHttpUtil.toNettyHttp1(\n-                streamId, inHeaders, outHeaders, HttpVersion.HTTP_1_1, trailer, isRequest);\n+                streamId, inHeaders, additionalHeaders, additionalTrailers, outHeaders,\n+                HttpVersion.HTTP_1_1, trailer, isRequest, endStream);\n \n         outHeaders.remove(ExtensionHeaderNames.STREAM_ID.text());\n+\n         if (server) {\n             outHeaders.remove(ExtensionHeaderNames.SCHEME.text());\n+\n+            if (!trailer) {\n+                if (outHeaders.contains(HttpHeaderNames.CONTENT_LENGTH) &&\n+                    !additionalTrailers.isEmpty()) {\n+                    // We don't apply chunked encoding when the content-length header is set, which would\n+                    // prevent the trailers from being sent so we go ahead and remove content-length to\n+                    // force chunked encoding.\n+                    outHeaders.remove(HttpHeaderNames.CONTENT_LENGTH);\n+                }\n+\n+                if (enableServerHeader && !outHeaders.contains(HttpHeaderNames.SERVER)) {\n+                    outHeaders.add(HttpHeaderNames.SERVER, ArmeriaHttpUtil.SERVER_HEADER);\n+                }\n+\n+                if (enableDateHeader && !outHeaders.contains(HttpHeaderNames.DATE)) {\n+                    outHeaders.add(HttpHeaderNames.DATE, HttpTimestampSupplier.currentTime());\n+                }\n+            }\n         } else {\n             outHeaders.remove(ExtensionHeaderNames.PATH.text());\n+\n+            if (!trailer) {\n+                if (userAgentHeader != null && !outHeaders.contains(HttpHeaderNames.USER_AGENT)) {\n+                    outHeaders.add(HttpHeaderNames.USER_AGENT, userAgentHeader);\n+                }\n+\n+                if (authorityHeader != null && !outHeaders.contains(HttpHeaderNames.HOST)) {\n+                    outHeaders.add(HttpHeaderNames.HOST, authorityHeader);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70af23b0433e88930a8360a73f94d646af59309"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxNTk4NQ==", "bodyText": "Removed userAgentHeader and authorityHeader", "url": "https://github.com/line/armeria/pull/2372#discussion_r371015985", "createdAt": "2020-01-26T17:22:59Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/Http1ObjectEncoder.java", "diffHunk": "@@ -277,26 +309,67 @@ private HttpObject convertClientHeaders(int streamId, HttpHeaders headers, boole\n \n     private void convert(int streamId, HttpHeaders inHeaders,\n                          io.netty.handler.codec.http.HttpHeaders outHeaders, boolean trailer,\n-                         boolean isRequest) throws Http2Exception {\n+                         boolean isRequest, boolean endStream,\n+                         HttpHeaders additionalHeaders, HttpHeaders additionalTrailers,\n+                         boolean enableServerHeader, boolean enableDateHeader,\n+                         @Nullable String authorityHeader, @Nullable String userAgentHeader)\n+            throws Http2Exception {\n \n         ArmeriaHttpUtil.toNettyHttp1(\n-                streamId, inHeaders, outHeaders, HttpVersion.HTTP_1_1, trailer, isRequest);\n+                streamId, inHeaders, additionalHeaders, additionalTrailers, outHeaders,\n+                HttpVersion.HTTP_1_1, trailer, isRequest, endStream);\n \n         outHeaders.remove(ExtensionHeaderNames.STREAM_ID.text());\n+\n         if (server) {\n             outHeaders.remove(ExtensionHeaderNames.SCHEME.text());\n+\n+            if (!trailer) {\n+                if (outHeaders.contains(HttpHeaderNames.CONTENT_LENGTH) &&\n+                    !additionalTrailers.isEmpty()) {\n+                    // We don't apply chunked encoding when the content-length header is set, which would\n+                    // prevent the trailers from being sent so we go ahead and remove content-length to\n+                    // force chunked encoding.\n+                    outHeaders.remove(HttpHeaderNames.CONTENT_LENGTH);\n+                }\n+\n+                if (enableServerHeader && !outHeaders.contains(HttpHeaderNames.SERVER)) {\n+                    outHeaders.add(HttpHeaderNames.SERVER, ArmeriaHttpUtil.SERVER_HEADER);\n+                }\n+\n+                if (enableDateHeader && !outHeaders.contains(HttpHeaderNames.DATE)) {\n+                    outHeaders.add(HttpHeaderNames.DATE, HttpTimestampSupplier.currentTime());\n+                }\n+            }\n         } else {\n             outHeaders.remove(ExtensionHeaderNames.PATH.text());\n+\n+            if (!trailer) {\n+                if (userAgentHeader != null && !outHeaders.contains(HttpHeaderNames.USER_AGENT)) {\n+                    outHeaders.add(HttpHeaderNames.USER_AGENT, userAgentHeader);\n+                }\n+\n+                if (authorityHeader != null && !outHeaders.contains(HttpHeaderNames.HOST)) {\n+                    outHeaders.add(HttpHeaderNames.HOST, authorityHeader);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE3ODA3Ng=="}, "originalCommit": {"oid": "c70af23b0433e88930a8360a73f94d646af59309"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjkwNzM3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/Http2ObjectEncoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNzowMjoxNFrOFaWpcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNzowMjoxNFrOFaWpcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE3ODM1NQ==", "bodyText": "This is not correct. It must be either https or http (not h1c, ..)", "url": "https://github.com/line/armeria/pull/2372#discussion_r363178355", "createdAt": "2020-01-06T07:02:14Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/Http2ObjectEncoder.java", "diffHunk": "@@ -70,8 +88,58 @@ protected ChannelFuture doWriteHeaders(int id, int streamId, HttpHeaders headers\n         }\n \n         // Client starts a new stream.\n-        return encoder.writeHeaders(\n-                ctx, streamId, ArmeriaHttpUtil.toNettyHttp2(headers, server), 0, endStream, ctx.newPromise());\n+        return encoder.writeHeaders(ctx, streamId,\n+                                    convert(headers, additionalHeaders, additionalTrailers,\n+                                            false, endStream, isTrailer, enableServerHeader, enableDateHeader,\n+                                            sessionProtocol, authorityHeader, userAgentHeader),\n+                                    0, endStream, ctx.newPromise());\n+    }\n+\n+    private Http2Headers convert(HttpHeaders inputHeaders,\n+                                 HttpHeaders additionalHeaders, HttpHeaders additionalTrailers,\n+                                 boolean server, boolean endStream, boolean isTrailer,\n+                                 boolean enableServerHeader, boolean enableDateHeader,\n+                                 @Nullable SessionProtocol sessionProtocol,\n+                                 @Nullable String authorityHeader,\n+                                 @Nullable String userAgentHeader) {\n+\n+        final Http2Headers outputHeaders = ArmeriaHttpUtil.toNettyHttp2(inputHeaders,\n+                                                                        additionalHeaders, additionalTrailers,\n+                                                                        server, endStream, isTrailer);\n+\n+        if (!isTrailer) {\n+            if (server) {\n+                if (outputHeaders.contains(HttpHeaderNames.CONTENT_LENGTH) &&\n+                    !additionalTrailers.isEmpty()) {\n+                    // We don't apply chunked encoding when the content-length header is set, which would\n+                    // prevent the trailers from being sent so we go ahead and remove content-length to force\n+                    // chunked encoding.\n+                    outputHeaders.remove(HttpHeaderNames.CONTENT_LENGTH);\n+                }\n+\n+                if (enableServerHeader && !outputHeaders.contains(HttpHeaderNames.SERVER)) {\n+                    outputHeaders.add(HttpHeaderNames.SERVER, ArmeriaHttpUtil.SERVER_HEADER);\n+                }\n+\n+                if (enableDateHeader && !outputHeaders.contains(HttpHeaderNames.DATE)) {\n+                    outputHeaders.add(HttpHeaderNames.DATE, HttpTimestampSupplier.currentTime());\n+                }\n+            } else {\n+                if (userAgentHeader != null && !outputHeaders.contains(HttpHeaderNames.USER_AGENT)) {\n+                    outputHeaders.add(HttpHeaderNames.USER_AGENT, userAgentHeader);\n+                }\n+\n+                if (sessionProtocol != null && !outputHeaders.contains(HttpHeaderNames.SCHEME)) {\n+                    outputHeaders.scheme(sessionProtocol.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70af23b0433e88930a8360a73f94d646af59309"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjkwNzU5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/Http2ObjectEncoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNzowMjoyOVrOFaWpmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQxNzoyMzowNFrOFh1BMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE3ODM5Mg==", "bodyText": "Ditto for userAgentHeader and authorityHeader", "url": "https://github.com/line/armeria/pull/2372#discussion_r363178392", "createdAt": "2020-01-06T07:02:29Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/Http2ObjectEncoder.java", "diffHunk": "@@ -70,8 +88,58 @@ protected ChannelFuture doWriteHeaders(int id, int streamId, HttpHeaders headers\n         }\n \n         // Client starts a new stream.\n-        return encoder.writeHeaders(\n-                ctx, streamId, ArmeriaHttpUtil.toNettyHttp2(headers, server), 0, endStream, ctx.newPromise());\n+        return encoder.writeHeaders(ctx, streamId,\n+                                    convert(headers, additionalHeaders, additionalTrailers,\n+                                            false, endStream, isTrailer, enableServerHeader, enableDateHeader,\n+                                            sessionProtocol, authorityHeader, userAgentHeader),\n+                                    0, endStream, ctx.newPromise());\n+    }\n+\n+    private Http2Headers convert(HttpHeaders inputHeaders,\n+                                 HttpHeaders additionalHeaders, HttpHeaders additionalTrailers,\n+                                 boolean server, boolean endStream, boolean isTrailer,\n+                                 boolean enableServerHeader, boolean enableDateHeader,\n+                                 @Nullable SessionProtocol sessionProtocol,\n+                                 @Nullable String authorityHeader,\n+                                 @Nullable String userAgentHeader) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70af23b0433e88930a8360a73f94d646af59309"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxNTk4Nw==", "bodyText": "Removed userAgentHeader and authorityHeader", "url": "https://github.com/line/armeria/pull/2372#discussion_r371015987", "createdAt": "2020-01-26T17:23:04Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/Http2ObjectEncoder.java", "diffHunk": "@@ -70,8 +88,58 @@ protected ChannelFuture doWriteHeaders(int id, int streamId, HttpHeaders headers\n         }\n \n         // Client starts a new stream.\n-        return encoder.writeHeaders(\n-                ctx, streamId, ArmeriaHttpUtil.toNettyHttp2(headers, server), 0, endStream, ctx.newPromise());\n+        return encoder.writeHeaders(ctx, streamId,\n+                                    convert(headers, additionalHeaders, additionalTrailers,\n+                                            false, endStream, isTrailer, enableServerHeader, enableDateHeader,\n+                                            sessionProtocol, authorityHeader, userAgentHeader),\n+                                    0, endStream, ctx.newPromise());\n+    }\n+\n+    private Http2Headers convert(HttpHeaders inputHeaders,\n+                                 HttpHeaders additionalHeaders, HttpHeaders additionalTrailers,\n+                                 boolean server, boolean endStream, boolean isTrailer,\n+                                 boolean enableServerHeader, boolean enableDateHeader,\n+                                 @Nullable SessionProtocol sessionProtocol,\n+                                 @Nullable String authorityHeader,\n+                                 @Nullable String userAgentHeader) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE3ODM5Mg=="}, "originalCommit": {"oid": "c70af23b0433e88930a8360a73f94d646af59309"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjU3NjgxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/HttpHeaderUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwNjo0NzoyMVrOFfUt5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQxNzoyMzoxNlrOFh1BPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM4OTYwNg==", "bodyText": "If made public, should move to the internal package.", "url": "https://github.com/line/armeria/pull/2372#discussion_r368389606", "createdAt": "2020-01-20T06:47:21Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpHeaderUtil.java", "diffHunk": "@@ -20,11 +20,14 @@\n \n import io.netty.util.AsciiString;\n \n-final class HttpHeaderUtil {\n+/**\n+ * Provides utility functions for internal use related with HTTP headers.\n+ */\n+public final class HttpHeaderUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96e977b73dcb893b93ce885d83d766551dbe5be6"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxNTk5Nw==", "bodyText": "Moved to internal package.", "url": "https://github.com/line/armeria/pull/2372#discussion_r371015997", "createdAt": "2020-01-26T17:23:16Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpHeaderUtil.java", "diffHunk": "@@ -20,11 +20,14 @@\n \n import io.netty.util.AsciiString;\n \n-final class HttpHeaderUtil {\n+/**\n+ * Provides utility functions for internal use related with HTTP headers.\n+ */\n+public final class HttpHeaderUtil {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM4OTYwNg=="}, "originalCommit": {"oid": "96e977b73dcb893b93ce885d83d766551dbe5be6"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjU4Mzg5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwNjo1MjoxOVrOFfUyJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQxNzoyMzo0NlrOFh1BXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM5MDY5Mw==", "bodyText": "You can also remove the authorityHeader, because it can be derived from firstHeaders, reqCtx.additionalRequestHeaders() and channel.remoteAddress(). Note that HttpObjectEncoder and its subtypes always have a reference to the current channel.", "url": "https://github.com/line/armeria/pull/2372#discussion_r368390693", "createdAt": "2020-01-20T06:52:19Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "diffHunk": "@@ -192,11 +191,11 @@ private void writeFirstHeader() {\n         if (request.isEmpty()) {\n             state = State.DONE;\n             write0(firstHeaders, true, true,\n-                   reqCtx.additionalRequestHeaders(), requestSessionProtocol, authorityHeader, userAgentHeader);\n+                   reqCtx.additionalRequestHeaders(), requestSessionProtocol, authorityHeader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96e977b73dcb893b93ce885d83d766551dbe5be6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxNjAyOQ==", "bodyText": "Thanks for education \ud83d\ude00", "url": "https://github.com/line/armeria/pull/2372#discussion_r371016029", "createdAt": "2020-01-26T17:23:46Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "diffHunk": "@@ -192,11 +191,11 @@ private void writeFirstHeader() {\n         if (request.isEmpty()) {\n             state = State.DONE;\n             write0(firstHeaders, true, true,\n-                   reqCtx.additionalRequestHeaders(), requestSessionProtocol, authorityHeader, userAgentHeader);\n+                   reqCtx.additionalRequestHeaders(), requestSessionProtocol, authorityHeader);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM5MDY5Mw=="}, "originalCommit": {"oid": "96e977b73dcb893b93ce885d83d766551dbe5be6"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjMwMjk1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/Http1ObjectEncoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMjoyODowMVrOFgxUfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQxNzoyMzo1NlrOFh1Bag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkwNjgxNA==", "bodyText": ", \"sessionProtocol\" ?", "url": "https://github.com/line/armeria/pull/2372#discussion_r369906814", "createdAt": "2020-01-23T02:28:01Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/Http1ObjectEncoder.java", "diffHunk": "@@ -133,7 +133,7 @@ protected ChannelFuture doWriteHeaders(int id, int streamId, HttpHeaders headers\n                                                additionalHeaders, additionalTrailers,\n                                                enableServerHeader, enableDateHeader)\n                           : writeClientHeaders(id, streamId, headers, endStream, additionalHeaders,\n-                                               authorityHeader);\n+                                               requireNonNull(sessionProtocol));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f09cb1b4b6d393fd3499241da0da0b2f8cc27cc"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxNjA0Mg==", "bodyText": "Fixed it.", "url": "https://github.com/line/armeria/pull/2372#discussion_r371016042", "createdAt": "2020-01-26T17:23:56Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/Http1ObjectEncoder.java", "diffHunk": "@@ -133,7 +133,7 @@ protected ChannelFuture doWriteHeaders(int id, int streamId, HttpHeaders headers\n                                                additionalHeaders, additionalTrailers,\n                                                enableServerHeader, enableDateHeader)\n                           : writeClientHeaders(id, streamId, headers, endStream, additionalHeaders,\n-                                               authorityHeader);\n+                                               requireNonNull(sessionProtocol));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkwNjgxNA=="}, "originalCommit": {"oid": "4f09cb1b4b6d393fd3499241da0da0b2f8cc27cc"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjMwNTAzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/Http1ObjectEncoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMjozMDowMlrOFgxV2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMjozMDowMlrOFgxV2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkwNzE2MQ==", "bodyText": "How about splitting this method into four:\n\nconvertClientHeaders() and convertClientTrailers(), which don't require SessionProtocol\nconvertServerHeaders() and convertServerTrailers(), which require non-null SessionProtocol\n\n.. and remove all the ifs?", "url": "https://github.com/line/armeria/pull/2372#discussion_r369907161", "createdAt": "2020-01-23T02:30:02Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/Http1ObjectEncoder.java", "diffHunk": "@@ -311,7 +308,7 @@ private void convert(int streamId, HttpHeaders inHeaders,\n                          boolean isRequest, boolean endStream,\n                          HttpHeaders additionalHeaders, HttpHeaders additionalTrailers,\n                          boolean enableServerHeader, boolean enableDateHeader,\n-                         @Nullable String authorityHeader)\n+                         @Nullable SessionProtocol sessionProtocol)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f09cb1b4b6d393fd3499241da0da0b2f8cc27cc"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjMxNDA2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/Http2ObjectEncoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMjozNzo1NVrOFgxbgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMjozNzo1NVrOFgxbgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkwODYwOA==", "bodyText": "Ditto - could be split into 4 methods with clear roles.", "url": "https://github.com/line/armeria/pull/2372#discussion_r369908608", "createdAt": "2020-01-23T02:37:55Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/Http2ObjectEncoder.java", "diffHunk": "@@ -90,16 +91,15 @@ protected ChannelFuture doWriteHeaders(int id, int streamId, HttpHeaders headers\n         return encoder.writeHeaders(ctx, streamId,\n                                     convert(headers, additionalHeaders, additionalTrailers,\n                                             false, endStream, isTrailer, enableServerHeader, enableDateHeader,\n-                                            sessionProtocol, authorityHeader),\n+                                            sessionProtocol),\n                                     0, endStream, ctx.newPromise());\n     }\n \n     private Http2Headers convert(HttpHeaders inputHeaders,\n                                  HttpHeaders additionalHeaders, HttpHeaders additionalTrailers,\n                                  boolean server, boolean endStream, boolean isTrailer,\n                                  boolean enableServerHeader, boolean enableDateHeader,\n-                                 @Nullable SessionProtocol sessionProtocol,\n-                                 @Nullable String authorityHeader) {\n+                                 @Nullable SessionProtocol sessionProtocol) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f09cb1b4b6d393fd3499241da0da0b2f8cc27cc"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTE5MDA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/Http1ObjectEncoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNTo0NDozOFrOFi9Nfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTo1MDo0M1rOFjYxEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5ODc4Mw==", "bodyText": "convertClientHeaders0() could be inlined here because it's used only once.", "url": "https://github.com/line/armeria/pull/2372#discussion_r372198783", "createdAt": "2020-01-29T05:44:38Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/Http1ObjectEncoder.java", "diffHunk": "@@ -216,31 +239,78 @@ private HttpObject convertServerHeaders(\n         } else {\n             res = new DefaultHttpResponse(HttpVersion.HTTP_1_1, nettyStatus, false);\n             // Perform conversion.\n-            convert(streamId, headers, res.headers(), false, false);\n+            convertServerHeaders0(streamId, headers, res.headers(), endStream,\n+                                  additionalHeaders, additionalTrailers,\n+                                  enableServerHeader, enableDateHeader);\n             setTransferEncoding(res);\n         }\n \n         return res;\n     }\n \n-    private HttpObject convertClientHeaders(int streamId, HttpHeaders headers, boolean endStream)\n-            throws Http2Exception {\n+    private void convertServerHeaders0(\n+            int streamId, HttpHeaders inHeaders,\n+            io.netty.handler.codec.http.HttpHeaders outHeaders, boolean endStream,\n+            HttpHeaders additionalHeaders, HttpHeaders additionalTrailers,\n+            boolean enableServerHeader, boolean enableDateHeader) throws Http2Exception {\n \n-        // Leading headers will always have :method, trailers will never have it.\n-        final String method = headers.get(HttpHeaderNames.METHOD);\n-        if (method == null) {\n-            return convertTrailingHeaders(streamId, headers);\n+        ArmeriaHttpUtil.toNettyHttp1(\n+                streamId, inHeaders, additionalHeaders, additionalTrailers, outHeaders,\n+                HttpVersion.HTTP_1_1, false, false, endStream);\n+\n+        removeHttpExtensionHeaders(outHeaders);\n+\n+        if (outHeaders.contains(HttpHeaderNames.CONTENT_LENGTH) &&\n+            !additionalTrailers.isEmpty()) {\n+            // We don't apply chunked encoding when the content-length header is set, which would\n+            // prevent the trailers from being sent so we go ahead and remove content-length to\n+            // force chunked encoding.\n+            outHeaders.remove(HttpHeaderNames.CONTENT_LENGTH);\n+        }\n+\n+        if (enableServerHeader && !outHeaders.contains(HttpHeaderNames.SERVER)) {\n+            outHeaders.add(HttpHeaderNames.SERVER, ArmeriaHttpUtil.SERVER_HEADER);\n+        }\n+\n+        if (enableDateHeader && !outHeaders.contains(HttpHeaderNames.DATE)) {\n+            outHeaders.add(HttpHeaderNames.DATE, HttpTimestampSupplier.currentTime());\n+        }\n+    }\n+\n+    private LastHttpContent convertServerTrailers(\n+            int streamId, HttpHeaders inHeaders, boolean endStream,\n+            HttpHeaders additionalTrailers) throws Http2Exception {\n+\n+        final LastHttpContent lastContent = getLastHttpContent(inHeaders);\n+\n+        if (inHeaders.isEmpty()) {\n+            return lastContent;\n         }\n \n-        // Convert leading headers.\n+        ArmeriaHttpUtil.toNettyHttp1(\n+                streamId, inHeaders, HttpHeaders.of(), additionalTrailers, lastContent.trailingHeaders(),\n+                HttpVersion.HTTP_1_1, true, false, endStream);\n+\n+        removeHttpExtensionHeaders(lastContent.trailingHeaders());\n+\n+        return lastContent;\n+    }\n+\n+    private HttpObject convertClientHeaders(int streamId, HttpHeaders headers, boolean endStream,\n+                                            HttpHeaders additionalHeaders,\n+                                            SessionProtocol sessionProtocol) throws Http2Exception {\n+        requireNonNull(sessionProtocol);\n+\n+        final String method = headers.get(HttpHeaderNames.METHOD);\n         final String path = headers.get(HttpHeaderNames.PATH);\n         assert path != null;\n         final HttpRequest req = new DefaultHttpRequest(\n                 HttpVersion.HTTP_1_1,\n                 HttpMethod.valueOf(method),\n                 path, false);\n \n-        convert(streamId, headers, req.headers(), false, true);\n+        convertClientHeaders0(streamId, headers, req.headers(), endStream, additionalHeaders,\n+                              sessionProtocol);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73262810023e267bc4ae2e8d809c1a4b701ee252"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY1MDI1OQ==", "bodyText": "Inlined convertClientHeaders0().", "url": "https://github.com/line/armeria/pull/2372#discussion_r372650259", "createdAt": "2020-01-29T21:50:43Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/Http1ObjectEncoder.java", "diffHunk": "@@ -216,31 +239,78 @@ private HttpObject convertServerHeaders(\n         } else {\n             res = new DefaultHttpResponse(HttpVersion.HTTP_1_1, nettyStatus, false);\n             // Perform conversion.\n-            convert(streamId, headers, res.headers(), false, false);\n+            convertServerHeaders0(streamId, headers, res.headers(), endStream,\n+                                  additionalHeaders, additionalTrailers,\n+                                  enableServerHeader, enableDateHeader);\n             setTransferEncoding(res);\n         }\n \n         return res;\n     }\n \n-    private HttpObject convertClientHeaders(int streamId, HttpHeaders headers, boolean endStream)\n-            throws Http2Exception {\n+    private void convertServerHeaders0(\n+            int streamId, HttpHeaders inHeaders,\n+            io.netty.handler.codec.http.HttpHeaders outHeaders, boolean endStream,\n+            HttpHeaders additionalHeaders, HttpHeaders additionalTrailers,\n+            boolean enableServerHeader, boolean enableDateHeader) throws Http2Exception {\n \n-        // Leading headers will always have :method, trailers will never have it.\n-        final String method = headers.get(HttpHeaderNames.METHOD);\n-        if (method == null) {\n-            return convertTrailingHeaders(streamId, headers);\n+        ArmeriaHttpUtil.toNettyHttp1(\n+                streamId, inHeaders, additionalHeaders, additionalTrailers, outHeaders,\n+                HttpVersion.HTTP_1_1, false, false, endStream);\n+\n+        removeHttpExtensionHeaders(outHeaders);\n+\n+        if (outHeaders.contains(HttpHeaderNames.CONTENT_LENGTH) &&\n+            !additionalTrailers.isEmpty()) {\n+            // We don't apply chunked encoding when the content-length header is set, which would\n+            // prevent the trailers from being sent so we go ahead and remove content-length to\n+            // force chunked encoding.\n+            outHeaders.remove(HttpHeaderNames.CONTENT_LENGTH);\n+        }\n+\n+        if (enableServerHeader && !outHeaders.contains(HttpHeaderNames.SERVER)) {\n+            outHeaders.add(HttpHeaderNames.SERVER, ArmeriaHttpUtil.SERVER_HEADER);\n+        }\n+\n+        if (enableDateHeader && !outHeaders.contains(HttpHeaderNames.DATE)) {\n+            outHeaders.add(HttpHeaderNames.DATE, HttpTimestampSupplier.currentTime());\n+        }\n+    }\n+\n+    private LastHttpContent convertServerTrailers(\n+            int streamId, HttpHeaders inHeaders, boolean endStream,\n+            HttpHeaders additionalTrailers) throws Http2Exception {\n+\n+        final LastHttpContent lastContent = getLastHttpContent(inHeaders);\n+\n+        if (inHeaders.isEmpty()) {\n+            return lastContent;\n         }\n \n-        // Convert leading headers.\n+        ArmeriaHttpUtil.toNettyHttp1(\n+                streamId, inHeaders, HttpHeaders.of(), additionalTrailers, lastContent.trailingHeaders(),\n+                HttpVersion.HTTP_1_1, true, false, endStream);\n+\n+        removeHttpExtensionHeaders(lastContent.trailingHeaders());\n+\n+        return lastContent;\n+    }\n+\n+    private HttpObject convertClientHeaders(int streamId, HttpHeaders headers, boolean endStream,\n+                                            HttpHeaders additionalHeaders,\n+                                            SessionProtocol sessionProtocol) throws Http2Exception {\n+        requireNonNull(sessionProtocol);\n+\n+        final String method = headers.get(HttpHeaderNames.METHOD);\n         final String path = headers.get(HttpHeaderNames.PATH);\n         assert path != null;\n         final HttpRequest req = new DefaultHttpRequest(\n                 HttpVersion.HTTP_1_1,\n                 HttpMethod.valueOf(method),\n                 path, false);\n \n-        convert(streamId, headers, req.headers(), false, true);\n+        convertClientHeaders0(streamId, headers, req.headers(), endStream, additionalHeaders,\n+                              sessionProtocol);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5ODc4Mw=="}, "originalCommit": {"oid": "73262810023e267bc4ae2e8d809c1a4b701ee252"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTE5NjIyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/Http1ObjectEncoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNTo0OToxMlrOFi9RSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMTo0NjowOFrOFj69eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5OTc1Mw==", "bodyText": "What do you think about inlining this method? i.e.\nif (inHeaders.inEmpty()) {\n    return LastHttpContent.EMPTY_LAST_CONTENT;\n}\n\nfinal LastHttpContent lastContent = new DefaultLastHttpContent(...);\n.. which is more readable in my opinion.", "url": "https://github.com/line/armeria/pull/2372#discussion_r372199753", "createdAt": "2020-01-29T05:49:12Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/Http1ObjectEncoder.java", "diffHunk": "@@ -275,30 +345,59 @@ private HttpObject convertClientHeaders(int streamId, HttpHeaders headers, boole\n         return req;\n     }\n \n-    private void convert(int streamId, HttpHeaders inHeaders,\n-                         io.netty.handler.codec.http.HttpHeaders outHeaders, boolean trailer,\n-                         boolean isRequest) throws Http2Exception {\n+    private void convertClientHeaders0(\n+            int streamId, HttpHeaders inHeaders,\n+            io.netty.handler.codec.http.HttpHeaders outHeaders, boolean endStream,\n+            HttpHeaders additionalHeaders, SessionProtocol sessionProtocol) throws Http2Exception {\n \n         ArmeriaHttpUtil.toNettyHttp1(\n-                streamId, inHeaders, outHeaders, HttpVersion.HTTP_1_1, trailer, isRequest);\n+                streamId, inHeaders, additionalHeaders, HttpHeaders.of(), outHeaders,\n+                HttpVersion.HTTP_1_1, false, true, endStream);\n \n-        outHeaders.remove(ExtensionHeaderNames.STREAM_ID.text());\n-        if (server) {\n-            outHeaders.remove(ExtensionHeaderNames.SCHEME.text());\n-        } else {\n-            outHeaders.remove(ExtensionHeaderNames.PATH.text());\n+        removeHttpExtensionHeaders(outHeaders);\n+\n+        if (!outHeaders.contains(HttpHeaderNames.USER_AGENT)) {\n+            outHeaders.add(HttpHeaderNames.USER_AGENT, HttpHeaderUtil.USER_AGENT.toString());\n+        }\n+\n+        if (!outHeaders.contains(HttpHeaderNames.HOST)) {\n+            outHeaders.add(HttpHeaderNames.HOST,\n+                           ArmeriaHttpUtil.authorityHeader(\n+                                   ((InetSocketAddress) channel().remoteAddress()).getHostName(),\n+                                   ((InetSocketAddress) channel().remoteAddress()).getPort(),\n+                                   sessionProtocol.defaultPort()));\n         }\n     }\n \n-    private LastHttpContent convertTrailingHeaders(int streamId, HttpHeaders headers) throws Http2Exception {\n-        final LastHttpContent lastContent;\n+    private LastHttpContent convertClientTrailers(\n+            int streamId, HttpHeaders inHeaders, boolean endStream) throws Http2Exception {\n+\n+        final LastHttpContent lastContent = getLastHttpContent(inHeaders);\n+\n+        if (inHeaders.isEmpty()) {\n+            return lastContent;\n+        }\n+\n+        ArmeriaHttpUtil.toNettyHttp1(\n+                streamId, inHeaders, HttpHeaders.of(), HttpHeaders.of(), lastContent.trailingHeaders(),\n+                HttpVersion.HTTP_1_1, true, true, endStream);\n+\n+        removeHttpExtensionHeaders(lastContent.trailingHeaders());\n+\n+        return  lastContent;\n+    }\n+\n+    private LastHttpContent getLastHttpContent(HttpHeaders headers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73262810023e267bc4ae2e8d809c1a4b701ee252"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxMDQ4OA==", "bodyText": "Inlined method.\nI was thinking, removing code duplication by this method made poor readability and added more unnecessary codes. But I was not sure. Thanks for education.", "url": "https://github.com/line/armeria/pull/2372#discussion_r373210488", "createdAt": "2020-01-30T21:46:08Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/Http1ObjectEncoder.java", "diffHunk": "@@ -275,30 +345,59 @@ private HttpObject convertClientHeaders(int streamId, HttpHeaders headers, boole\n         return req;\n     }\n \n-    private void convert(int streamId, HttpHeaders inHeaders,\n-                         io.netty.handler.codec.http.HttpHeaders outHeaders, boolean trailer,\n-                         boolean isRequest) throws Http2Exception {\n+    private void convertClientHeaders0(\n+            int streamId, HttpHeaders inHeaders,\n+            io.netty.handler.codec.http.HttpHeaders outHeaders, boolean endStream,\n+            HttpHeaders additionalHeaders, SessionProtocol sessionProtocol) throws Http2Exception {\n \n         ArmeriaHttpUtil.toNettyHttp1(\n-                streamId, inHeaders, outHeaders, HttpVersion.HTTP_1_1, trailer, isRequest);\n+                streamId, inHeaders, additionalHeaders, HttpHeaders.of(), outHeaders,\n+                HttpVersion.HTTP_1_1, false, true, endStream);\n \n-        outHeaders.remove(ExtensionHeaderNames.STREAM_ID.text());\n-        if (server) {\n-            outHeaders.remove(ExtensionHeaderNames.SCHEME.text());\n-        } else {\n-            outHeaders.remove(ExtensionHeaderNames.PATH.text());\n+        removeHttpExtensionHeaders(outHeaders);\n+\n+        if (!outHeaders.contains(HttpHeaderNames.USER_AGENT)) {\n+            outHeaders.add(HttpHeaderNames.USER_AGENT, HttpHeaderUtil.USER_AGENT.toString());\n+        }\n+\n+        if (!outHeaders.contains(HttpHeaderNames.HOST)) {\n+            outHeaders.add(HttpHeaderNames.HOST,\n+                           ArmeriaHttpUtil.authorityHeader(\n+                                   ((InetSocketAddress) channel().remoteAddress()).getHostName(),\n+                                   ((InetSocketAddress) channel().remoteAddress()).getPort(),\n+                                   sessionProtocol.defaultPort()));\n         }\n     }\n \n-    private LastHttpContent convertTrailingHeaders(int streamId, HttpHeaders headers) throws Http2Exception {\n-        final LastHttpContent lastContent;\n+    private LastHttpContent convertClientTrailers(\n+            int streamId, HttpHeaders inHeaders, boolean endStream) throws Http2Exception {\n+\n+        final LastHttpContent lastContent = getLastHttpContent(inHeaders);\n+\n+        if (inHeaders.isEmpty()) {\n+            return lastContent;\n+        }\n+\n+        ArmeriaHttpUtil.toNettyHttp1(\n+                streamId, inHeaders, HttpHeaders.of(), HttpHeaders.of(), lastContent.trailingHeaders(),\n+                HttpVersion.HTTP_1_1, true, true, endStream);\n+\n+        removeHttpExtensionHeaders(lastContent.trailingHeaders());\n+\n+        return  lastContent;\n+    }\n+\n+    private LastHttpContent getLastHttpContent(HttpHeaders headers) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5OTc1Mw=="}, "originalCommit": {"oid": "73262810023e267bc4ae2e8d809c1a4b701ee252"}, "originalPosition": 267}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTIxMjA4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/HttpHeaderUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNjowMTozNlrOFi9bDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTo1Mjo1M1rOFjY05Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwMjI1NA==", "bodyText": "This method could be replaced with ArmeriaHttpUtil.authorityHeader()?", "url": "https://github.com/line/armeria/pull/2372#discussion_r372202254", "createdAt": "2020-01-29T06:01:36Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/HttpHeaderUtil.java", "diffHunk": "@@ -14,19 +14,22 @@\n  * under the License.\n  */\n \n-package com.linecorp.armeria.client;\n+package com.linecorp.armeria.internal;\n \n import com.linecorp.armeria.common.util.Version;\n \n import io.netty.util.AsciiString;\n \n-final class HttpHeaderUtil {\n+/**\n+ * Provides utility functions for internal use related with HTTP headers.\n+ */\n+public final class HttpHeaderUtil {\n \n     private static final String CLIENT_ARTIFACT_ID = \"armeria\";\n \n-    static final AsciiString USER_AGENT = AsciiString.cached(createUserAgentName());\n+    public static final AsciiString USER_AGENT = AsciiString.cached(createUserAgentName());\n \n-    static String hostHeader(String host, int port, int defaultPort) {\n+    public static String hostHeader(String host, int port, int defaultPort) {\n         if (port == defaultPort) {\n             return host;\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73262810023e267bc4ae2e8d809c1a4b701ee252"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY1MTIzNw==", "bodyText": "Replaced with ArmeriaHttpUtil.authorityHeader().", "url": "https://github.com/line/armeria/pull/2372#discussion_r372651237", "createdAt": "2020-01-29T21:52:53Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/HttpHeaderUtil.java", "diffHunk": "@@ -14,19 +14,22 @@\n  * under the License.\n  */\n \n-package com.linecorp.armeria.client;\n+package com.linecorp.armeria.internal;\n \n import com.linecorp.armeria.common.util.Version;\n \n import io.netty.util.AsciiString;\n \n-final class HttpHeaderUtil {\n+/**\n+ * Provides utility functions for internal use related with HTTP headers.\n+ */\n+public final class HttpHeaderUtil {\n \n     private static final String CLIENT_ARTIFACT_ID = \"armeria\";\n \n-    static final AsciiString USER_AGENT = AsciiString.cached(createUserAgentName());\n+    public static final AsciiString USER_AGENT = AsciiString.cached(createUserAgentName());\n \n-    static String hostHeader(String host, int port, int defaultPort) {\n+    public static String hostHeader(String host, int port, int defaultPort) {\n         if (port == defaultPort) {\n             return host;\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwMjI1NA=="}, "originalCommit": {"oid": "73262810023e267bc4ae2e8d809c1a4b701ee252"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTI2ODQ1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNjozODoxOFrOFi97Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTo0OToyN1rOFjYuxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIxMDUyMg==", "bodyText": "Version.indentity has been removed by #2398. Could you merge the master branch?", "url": "https://github.com/line/armeria/pull/2372#discussion_r372210522", "createdAt": "2020-01-29T06:38:18Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java", "diffHunk": "@@ -212,6 +214,16 @@ public boolean equals(AsciiString a, AsciiString b) {\n         HTTP_TRAILER_BLACKLIST.add(HttpHeaderNames.TRAILER, EMPTY_STRING);\n     }\n \n+    private static final Set<AsciiString> ADDITIONAL_REQUEST_HEADER_BLACKLIST = ImmutableSet.of(\n+            HttpHeaderNames.SCHEME, HttpHeaderNames.STATUS, HttpHeaderNames.METHOD);\n+\n+    private static final Set<AsciiString> ADDITIONAL_RESPONSE_HEADER_BLACKLIST = ImmutableSet.of(\n+            HttpHeaderNames.SCHEME, HttpHeaderNames.STATUS, HttpHeaderNames.METHOD, HttpHeaderNames.PATH);\n+\n+    public static final String SERVER_HEADER =\n+            \"Armeria/\" + Version.identify(ArmeriaHttpUtil.class.getClassLoader()).get(\"armeria\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73262810023e267bc4ae2e8d809c1a4b701ee252"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0OTY2OQ==", "bodyText": "Merged \ud83d\ude00", "url": "https://github.com/line/armeria/pull/2372#discussion_r372649669", "createdAt": "2020-01-29T21:49:27Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java", "diffHunk": "@@ -212,6 +214,16 @@ public boolean equals(AsciiString a, AsciiString b) {\n         HTTP_TRAILER_BLACKLIST.add(HttpHeaderNames.TRAILER, EMPTY_STRING);\n     }\n \n+    private static final Set<AsciiString> ADDITIONAL_REQUEST_HEADER_BLACKLIST = ImmutableSet.of(\n+            HttpHeaderNames.SCHEME, HttpHeaderNames.STATUS, HttpHeaderNames.METHOD);\n+\n+    private static final Set<AsciiString> ADDITIONAL_RESPONSE_HEADER_BLACKLIST = ImmutableSet.of(\n+            HttpHeaderNames.SCHEME, HttpHeaderNames.STATUS, HttpHeaderNames.METHOD, HttpHeaderNames.PATH);\n+\n+    public static final String SERVER_HEADER =\n+            \"Armeria/\" + Version.identify(ArmeriaHttpUtil.class.getClassLoader()).get(\"armeria\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIxMDUyMg=="}, "originalCommit": {"oid": "73262810023e267bc4ae2e8d809c1a4b701ee252"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTI3NzY5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNjo0NDoxNFrOFi-Aqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMTo0NzowOVrOFj6_MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIxMTg4Mg==", "bodyText": "inputHeaders.iterator() can return multiple entries with same name, so outputHeaders.remove(name); and inputHeaders.forEachValue() are highly inefficient. How about this:\nSet<AsciiString> removed = ...;\nfor (Entry<AsciiString, String> entry : inputHeaders) {\n    ... continue ...\n\n    if (removed.add(name)) {\n        outputHeaders.remove(name);\n    }\n    outputHeaders.add(name, value);\n}\nI have some more ideas for improving this, but I think it's not part of this PR.", "url": "https://github.com/line/armeria/pull/2372#discussion_r372211882", "createdAt": "2020-01-29T06:44:14Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java", "diffHunk": "@@ -801,62 +813,127 @@ private static void addHttp2Scheme(io.netty.handler.codec.http.HttpHeaders in, U\n \n     /**\n      * Converts the specified Armeria HTTP/2 headers into Netty HTTP/2 headers.\n+     *\n+     * @param inputHeaders The HTTP/2 headers to convert.\n+     * @param additionalHeaders The additional headers which will be merged.\n+     * @param additionalTrailers The additional trailers which will be merged.\n+     * @param server    {@code true} if the returned headers will be used in a response message.\n+     *                  {@code false} for request message.\n+     * @param endStream {@code true} if returned headers will end streams.\n+     *                  {@code false} otherwise.\n+     * @param isTrailer {@code true} if returned headers should be treated as trailers.\n+     *                  {@code false} otherwise.\n      */\n-    public static Http2Headers toNettyHttp2(HttpHeaders in, boolean server) {\n-        final Http2Headers out = new DefaultHttp2Headers(false, in.size());\n+    public static Http2Headers toNettyHttp2(HttpHeaders inputHeaders,\n+                                            HttpHeaders additionalHeaders, HttpHeaders additionalTrailers,\n+                                            boolean server, boolean endStream, boolean isTrailer) {\n+        final int headerSizeHint = inputHeaders.size() + additionalHeaders.size() + additionalTrailers.size();\n+        final Http2Headers outputHeaders = new DefaultHttp2Headers(false, headerSizeHint);\n \n-        // Trailers if it does not have :status.\n-        if (server && !in.contains(HttpHeaderNames.STATUS)) {\n-            for (Entry<AsciiString, String> entry : in) {\n-                final AsciiString name = entry.getKey();\n-                final String value = entry.getValue();\n-                if (name.isEmpty() || isTrailerBlacklisted(name)) {\n-                    continue;\n-                }\n-                out.add(name, value);\n-            }\n-        } else {\n-            in.forEach((BiConsumer<AsciiString, String>) out::add);\n-            out.remove(HttpHeaderNames.CONNECTION);\n-            out.remove(HttpHeaderNames.TRANSFER_ENCODING);\n+        mergeHeadersHttp2(inputHeaders, outputHeaders, !server, isTrailer, false);\n+\n+        if (!isTrailer) {\n+            mergeHeadersHttp2(additionalHeaders, outputHeaders, !server, false, true);\n         }\n \n-        if (!out.contains(HttpHeaderNames.COOKIE)) {\n-            return out;\n+        if (server && endStream) {\n+            mergeHeadersHttp2(additionalTrailers, outputHeaders, false, isTrailer, true);\n+        }\n+\n+        outputHeaders.remove(HttpHeaderNames.CONNECTION);\n+        outputHeaders.remove(HttpHeaderNames.TRANSFER_ENCODING);\n+\n+        if (!outputHeaders.contains(HttpHeaderNames.COOKIE)) {\n+            return outputHeaders;\n         }\n \n         // Split up cookies to allow for better compression.\n         // https://tools.ietf.org/html/rfc7540#section-8.1.2.5\n-        final List<CharSequence> cookies = out.getAllAndRemove(HttpHeaderNames.COOKIE);\n+        final List<CharSequence> cookies = outputHeaders.getAllAndRemove(HttpHeaderNames.COOKIE);\n         for (CharSequence c : cookies) {\n-            out.add(HttpHeaderNames.COOKIE, COOKIE_SPLITTER.split(c));\n+            outputHeaders.add(HttpHeaderNames.COOKIE, COOKIE_SPLITTER.split(c));\n         }\n \n-        return out;\n+        return outputHeaders;\n+    }\n+\n+    private static void mergeHeadersHttp2(HttpHeaders inputHeaders, Http2Headers outputHeaders,\n+                                          boolean isRequest, boolean isTrailer, boolean isAdditionalHeaders) {\n+        final Set<AsciiString> additionalHeaderBlackList = isRequest ? ADDITIONAL_REQUEST_HEADER_BLACKLIST\n+                                                                     : ADDITIONAL_RESPONSE_HEADER_BLACKLIST;\n+\n+        for (Entry<AsciiString, String> entry : inputHeaders) {\n+            final AsciiString name = entry.getKey();\n+\n+            if (name.isEmpty()) {\n+                continue;\n+            }\n+\n+            if (isAdditionalHeaders && additionalHeaderBlackList.contains(name)) {\n+                continue;\n+            }\n+\n+            if (isTrailer && isTrailerBlacklisted(name)) {\n+                continue;\n+            }\n+\n+            outputHeaders.remove(name);\n+            inputHeaders.forEachValue(name, newValue -> outputHeaders.add(name, newValue));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73262810023e267bc4ae2e8d809c1a4b701ee252"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxMDkyOA==", "bodyText": "Thanks, I fixed it.", "url": "https://github.com/line/armeria/pull/2372#discussion_r373210928", "createdAt": "2020-01-30T21:47:09Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java", "diffHunk": "@@ -801,62 +813,127 @@ private static void addHttp2Scheme(io.netty.handler.codec.http.HttpHeaders in, U\n \n     /**\n      * Converts the specified Armeria HTTP/2 headers into Netty HTTP/2 headers.\n+     *\n+     * @param inputHeaders The HTTP/2 headers to convert.\n+     * @param additionalHeaders The additional headers which will be merged.\n+     * @param additionalTrailers The additional trailers which will be merged.\n+     * @param server    {@code true} if the returned headers will be used in a response message.\n+     *                  {@code false} for request message.\n+     * @param endStream {@code true} if returned headers will end streams.\n+     *                  {@code false} otherwise.\n+     * @param isTrailer {@code true} if returned headers should be treated as trailers.\n+     *                  {@code false} otherwise.\n      */\n-    public static Http2Headers toNettyHttp2(HttpHeaders in, boolean server) {\n-        final Http2Headers out = new DefaultHttp2Headers(false, in.size());\n+    public static Http2Headers toNettyHttp2(HttpHeaders inputHeaders,\n+                                            HttpHeaders additionalHeaders, HttpHeaders additionalTrailers,\n+                                            boolean server, boolean endStream, boolean isTrailer) {\n+        final int headerSizeHint = inputHeaders.size() + additionalHeaders.size() + additionalTrailers.size();\n+        final Http2Headers outputHeaders = new DefaultHttp2Headers(false, headerSizeHint);\n \n-        // Trailers if it does not have :status.\n-        if (server && !in.contains(HttpHeaderNames.STATUS)) {\n-            for (Entry<AsciiString, String> entry : in) {\n-                final AsciiString name = entry.getKey();\n-                final String value = entry.getValue();\n-                if (name.isEmpty() || isTrailerBlacklisted(name)) {\n-                    continue;\n-                }\n-                out.add(name, value);\n-            }\n-        } else {\n-            in.forEach((BiConsumer<AsciiString, String>) out::add);\n-            out.remove(HttpHeaderNames.CONNECTION);\n-            out.remove(HttpHeaderNames.TRANSFER_ENCODING);\n+        mergeHeadersHttp2(inputHeaders, outputHeaders, !server, isTrailer, false);\n+\n+        if (!isTrailer) {\n+            mergeHeadersHttp2(additionalHeaders, outputHeaders, !server, false, true);\n         }\n \n-        if (!out.contains(HttpHeaderNames.COOKIE)) {\n-            return out;\n+        if (server && endStream) {\n+            mergeHeadersHttp2(additionalTrailers, outputHeaders, false, isTrailer, true);\n+        }\n+\n+        outputHeaders.remove(HttpHeaderNames.CONNECTION);\n+        outputHeaders.remove(HttpHeaderNames.TRANSFER_ENCODING);\n+\n+        if (!outputHeaders.contains(HttpHeaderNames.COOKIE)) {\n+            return outputHeaders;\n         }\n \n         // Split up cookies to allow for better compression.\n         // https://tools.ietf.org/html/rfc7540#section-8.1.2.5\n-        final List<CharSequence> cookies = out.getAllAndRemove(HttpHeaderNames.COOKIE);\n+        final List<CharSequence> cookies = outputHeaders.getAllAndRemove(HttpHeaderNames.COOKIE);\n         for (CharSequence c : cookies) {\n-            out.add(HttpHeaderNames.COOKIE, COOKIE_SPLITTER.split(c));\n+            outputHeaders.add(HttpHeaderNames.COOKIE, COOKIE_SPLITTER.split(c));\n         }\n \n-        return out;\n+        return outputHeaders;\n+    }\n+\n+    private static void mergeHeadersHttp2(HttpHeaders inputHeaders, Http2Headers outputHeaders,\n+                                          boolean isRequest, boolean isTrailer, boolean isAdditionalHeaders) {\n+        final Set<AsciiString> additionalHeaderBlackList = isRequest ? ADDITIONAL_REQUEST_HEADER_BLACKLIST\n+                                                                     : ADDITIONAL_RESPONSE_HEADER_BLACKLIST;\n+\n+        for (Entry<AsciiString, String> entry : inputHeaders) {\n+            final AsciiString name = entry.getKey();\n+\n+            if (name.isEmpty()) {\n+                continue;\n+            }\n+\n+            if (isAdditionalHeaders && additionalHeaderBlackList.contains(name)) {\n+                continue;\n+            }\n+\n+            if (isTrailer && isTrailerBlacklisted(name)) {\n+                continue;\n+            }\n+\n+            outputHeaders.remove(name);\n+            inputHeaders.forEachValue(name, newValue -> outputHeaders.add(name, newValue));\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIxMTg4Mg=="}, "originalCommit": {"oid": "73262810023e267bc4ae2e8d809c1a4b701ee252"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTI3ODMzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNjo0NDo0MlrOFi-BDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMTo0NjozNlrOFj6-Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIxMTk4MA==", "bodyText": "Ditto", "url": "https://github.com/line/armeria/pull/2372#discussion_r372211980", "createdAt": "2020-01-29T06:44:42Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java", "diffHunk": "@@ -871,19 +948,24 @@ public static void toNettyHttp1(\n                     continue;\n                 }\n \n+                if (isAdditionalHeader && additionalHeaderBlackList.contains(name)) {\n+                    continue;\n+                }\n+\n                 if (isTrailer && isTrailerBlacklisted(name)) {\n                     continue;\n                 }\n \n-                if (HttpHeaderNames.COOKIE.equals(name)) {\n+                if (isRequest && HttpHeaderNames.COOKIE.equals(name)) {\n                     // combine the cookie values into 1 header entry.\n                     // https://tools.ietf.org/html/rfc7540#section-8.1.2.5\n                     if (cookieJoiner == null) {\n                         cookieJoiner = new StringJoiner(COOKIE_SEPARATOR);\n                     }\n                     COOKIE_SPLITTER.split(value).forEach(cookieJoiner::add);\n                 } else {\n-                    outputHeaders.add(name, value);\n+                    outputHeaders.remove(name);\n+                    inputHeaders.forEachValue(name, newValue -> outputHeaders.add(name, newValue));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73262810023e267bc4ae2e8d809c1a4b701ee252"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxMDcwMw==", "bodyText": "Thanks, I fixed it.", "url": "https://github.com/line/armeria/pull/2372#discussion_r373210703", "createdAt": "2020-01-30T21:46:36Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java", "diffHunk": "@@ -871,19 +948,24 @@ public static void toNettyHttp1(\n                     continue;\n                 }\n \n+                if (isAdditionalHeader && additionalHeaderBlackList.contains(name)) {\n+                    continue;\n+                }\n+\n                 if (isTrailer && isTrailerBlacklisted(name)) {\n                     continue;\n                 }\n \n-                if (HttpHeaderNames.COOKIE.equals(name)) {\n+                if (isRequest && HttpHeaderNames.COOKIE.equals(name)) {\n                     // combine the cookie values into 1 header entry.\n                     // https://tools.ietf.org/html/rfc7540#section-8.1.2.5\n                     if (cookieJoiner == null) {\n                         cookieJoiner = new StringJoiner(COOKIE_SEPARATOR);\n                     }\n                     COOKIE_SPLITTER.split(value).forEach(cookieJoiner::add);\n                 } else {\n-                    outputHeaders.add(name, value);\n+                    outputHeaders.remove(name);\n+                    inputHeaders.forEachValue(name, newValue -> outputHeaders.add(name, newValue));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIxMTk4MA=="}, "originalCommit": {"oid": "73262810023e267bc4ae2e8d809c1a4b701ee252"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTMxNTcwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/Http1ObjectEncoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNzowNzo1MVrOFi-W8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTo0NjowOFrOFjYobw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIxNzU4NQ==", "bodyText": "Could be static?", "url": "https://github.com/line/armeria/pull/2372#discussion_r372217585", "createdAt": "2020-01-29T07:07:51Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/Http1ObjectEncoder.java", "diffHunk": "@@ -180,15 +205,11 @@ private ChannelFuture writeNonInformationalHeaders(int id, HttpObject converted,\n     }\n \n     private HttpObject convertServerHeaders(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73262810023e267bc4ae2e8d809c1a4b701ee252"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0ODA0Nw==", "bodyText": "Fixed it.", "url": "https://github.com/line/armeria/pull/2372#discussion_r372648047", "createdAt": "2020-01-29T21:46:08Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/Http1ObjectEncoder.java", "diffHunk": "@@ -180,15 +205,11 @@ private ChannelFuture writeNonInformationalHeaders(int id, HttpObject converted,\n     }\n \n     private HttpObject convertServerHeaders(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIxNzU4NQ=="}, "originalCommit": {"oid": "73262810023e267bc4ae2e8d809c1a4b701ee252"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTM0NzQ2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/Http2ObjectEncoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNzoxODozNVrOFi-n9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTo0NjozOVrOFjYpdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIyMTk0MA==", "bodyText": "nit: \"https\" -> SessionProtocol.HTTPS.uriText(), \"http\" -> SessionProtocol.HTTP.uriText()", "url": "https://github.com/line/armeria/pull/2372#discussion_r372221940", "createdAt": "2020-01-29T07:18:35Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/Http2ObjectEncoder.java", "diffHunk": "@@ -69,9 +101,83 @@ protected ChannelFuture doWriteHeaders(int id, int streamId, HttpHeaders headers\n             return newFailedFuture(ClosedPublisherException.get());\n         }\n \n+        if (!isTrailer) {\n+            convertedHeaders = convertClientHeaders(headers, additionalHeaders, additionalTrailers,\n+                                                    endStream, sessionProtocol);\n+        } else {\n+            convertedHeaders = convertClientTrailers(headers, additionalTrailers, endStream);\n+        }\n+\n         // Client starts a new stream.\n-        return encoder.writeHeaders(\n-                ctx, streamId, ArmeriaHttpUtil.toNettyHttp2(headers, server), 0, endStream, ctx.newPromise());\n+        return encoder.writeHeaders(ctx, streamId, convertedHeaders, 0, endStream, ctx.newPromise());\n+    }\n+\n+    private Http2Headers convertServerHeaders(\n+            HttpHeaders inputHeaders, HttpHeaders additionalHeaders, HttpHeaders additionalTrailers,\n+            boolean endStream, boolean enableServerHeader, boolean enableDateHeader) {\n+\n+        final Http2Headers outputHeaders = ArmeriaHttpUtil.toNettyHttp2(inputHeaders,\n+                                                                        additionalHeaders, additionalTrailers,\n+                                                                        true, endStream, false);\n+\n+        if (outputHeaders.contains(HttpHeaderNames.CONTENT_LENGTH) &&\n+            !additionalTrailers.isEmpty()) {\n+            // We don't apply chunked encoding when the content-length header is set, which would\n+            // prevent the trailers from being sent so we go ahead and remove content-length to force\n+            // chunked encoding.\n+            outputHeaders.remove(HttpHeaderNames.CONTENT_LENGTH);\n+        }\n+\n+        if (enableServerHeader && !outputHeaders.contains(HttpHeaderNames.SERVER)) {\n+            outputHeaders.add(HttpHeaderNames.SERVER, ArmeriaHttpUtil.SERVER_HEADER);\n+        }\n+\n+        if (enableDateHeader && !outputHeaders.contains(HttpHeaderNames.DATE)) {\n+            outputHeaders.add(HttpHeaderNames.DATE, HttpTimestampSupplier.currentTime());\n+        }\n+\n+        return outputHeaders;\n+    }\n+\n+    private Http2Headers convertServerTrailers(\n+            HttpHeaders inputHeaders, HttpHeaders additionalTrailers, boolean endStream) {\n+        return ArmeriaHttpUtil.toNettyHttp2(inputHeaders, HttpHeaders.of(), additionalTrailers,\n+                                            true, endStream, true);\n+    }\n+\n+    private Http2Headers convertClientHeaders(\n+            HttpHeaders inputHeaders, HttpHeaders additionalHeaders, HttpHeaders additionalTrailers,\n+            boolean endStream, SessionProtocol sessionProtocol) {\n+\n+        requireNonNull(sessionProtocol);\n+\n+        final Http2Headers outputHeaders = ArmeriaHttpUtil.toNettyHttp2(inputHeaders,\n+                                                                        additionalHeaders, additionalTrailers,\n+                                                                        false, endStream, false);\n+\n+        if (!outputHeaders.contains(HttpHeaderNames.USER_AGENT)) {\n+            outputHeaders.add(HttpHeaderNames.USER_AGENT, HttpHeaderUtil.USER_AGENT.toString());\n+        }\n+\n+        if (!outputHeaders.contains(HttpHeaderNames.SCHEME)) {\n+            outputHeaders.scheme(sessionProtocol.isTls() ? \"https\" : \"http\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73262810023e267bc4ae2e8d809c1a4b701ee252"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0ODMxMQ==", "bodyText": "Thank you, fixed it.", "url": "https://github.com/line/armeria/pull/2372#discussion_r372648311", "createdAt": "2020-01-29T21:46:39Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/Http2ObjectEncoder.java", "diffHunk": "@@ -69,9 +101,83 @@ protected ChannelFuture doWriteHeaders(int id, int streamId, HttpHeaders headers\n             return newFailedFuture(ClosedPublisherException.get());\n         }\n \n+        if (!isTrailer) {\n+            convertedHeaders = convertClientHeaders(headers, additionalHeaders, additionalTrailers,\n+                                                    endStream, sessionProtocol);\n+        } else {\n+            convertedHeaders = convertClientTrailers(headers, additionalTrailers, endStream);\n+        }\n+\n         // Client starts a new stream.\n-        return encoder.writeHeaders(\n-                ctx, streamId, ArmeriaHttpUtil.toNettyHttp2(headers, server), 0, endStream, ctx.newPromise());\n+        return encoder.writeHeaders(ctx, streamId, convertedHeaders, 0, endStream, ctx.newPromise());\n+    }\n+\n+    private Http2Headers convertServerHeaders(\n+            HttpHeaders inputHeaders, HttpHeaders additionalHeaders, HttpHeaders additionalTrailers,\n+            boolean endStream, boolean enableServerHeader, boolean enableDateHeader) {\n+\n+        final Http2Headers outputHeaders = ArmeriaHttpUtil.toNettyHttp2(inputHeaders,\n+                                                                        additionalHeaders, additionalTrailers,\n+                                                                        true, endStream, false);\n+\n+        if (outputHeaders.contains(HttpHeaderNames.CONTENT_LENGTH) &&\n+            !additionalTrailers.isEmpty()) {\n+            // We don't apply chunked encoding when the content-length header is set, which would\n+            // prevent the trailers from being sent so we go ahead and remove content-length to force\n+            // chunked encoding.\n+            outputHeaders.remove(HttpHeaderNames.CONTENT_LENGTH);\n+        }\n+\n+        if (enableServerHeader && !outputHeaders.contains(HttpHeaderNames.SERVER)) {\n+            outputHeaders.add(HttpHeaderNames.SERVER, ArmeriaHttpUtil.SERVER_HEADER);\n+        }\n+\n+        if (enableDateHeader && !outputHeaders.contains(HttpHeaderNames.DATE)) {\n+            outputHeaders.add(HttpHeaderNames.DATE, HttpTimestampSupplier.currentTime());\n+        }\n+\n+        return outputHeaders;\n+    }\n+\n+    private Http2Headers convertServerTrailers(\n+            HttpHeaders inputHeaders, HttpHeaders additionalTrailers, boolean endStream) {\n+        return ArmeriaHttpUtil.toNettyHttp2(inputHeaders, HttpHeaders.of(), additionalTrailers,\n+                                            true, endStream, true);\n+    }\n+\n+    private Http2Headers convertClientHeaders(\n+            HttpHeaders inputHeaders, HttpHeaders additionalHeaders, HttpHeaders additionalTrailers,\n+            boolean endStream, SessionProtocol sessionProtocol) {\n+\n+        requireNonNull(sessionProtocol);\n+\n+        final Http2Headers outputHeaders = ArmeriaHttpUtil.toNettyHttp2(inputHeaders,\n+                                                                        additionalHeaders, additionalTrailers,\n+                                                                        false, endStream, false);\n+\n+        if (!outputHeaders.contains(HttpHeaderNames.USER_AGENT)) {\n+            outputHeaders.add(HttpHeaderNames.USER_AGENT, HttpHeaderUtil.USER_AGENT.toString());\n+        }\n+\n+        if (!outputHeaders.contains(HttpHeaderNames.SCHEME)) {\n+            outputHeaders.scheme(sessionProtocol.isTls() ? \"https\" : \"http\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIyMTk0MA=="}, "originalCommit": {"oid": "73262810023e267bc4ae2e8d809c1a4b701ee252"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTM0ODg2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/Http2ObjectEncoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNzoxOToxNlrOFi-ovQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwMzowODoxMlrOFnZP8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIyMjE0MQ==", "bodyText": "We don't need requireNonNull in a private method. By the way, SessionProtocol seems nullable because the caller(doWriteHeaders) calls this method with nullable SessionProtocol.", "url": "https://github.com/line/armeria/pull/2372#discussion_r372222141", "createdAt": "2020-01-29T07:19:16Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/Http2ObjectEncoder.java", "diffHunk": "@@ -69,9 +101,83 @@ protected ChannelFuture doWriteHeaders(int id, int streamId, HttpHeaders headers\n             return newFailedFuture(ClosedPublisherException.get());\n         }\n \n+        if (!isTrailer) {\n+            convertedHeaders = convertClientHeaders(headers, additionalHeaders, additionalTrailers,\n+                                                    endStream, sessionProtocol);\n+        } else {\n+            convertedHeaders = convertClientTrailers(headers, additionalTrailers, endStream);\n+        }\n+\n         // Client starts a new stream.\n-        return encoder.writeHeaders(\n-                ctx, streamId, ArmeriaHttpUtil.toNettyHttp2(headers, server), 0, endStream, ctx.newPromise());\n+        return encoder.writeHeaders(ctx, streamId, convertedHeaders, 0, endStream, ctx.newPromise());\n+    }\n+\n+    private Http2Headers convertServerHeaders(\n+            HttpHeaders inputHeaders, HttpHeaders additionalHeaders, HttpHeaders additionalTrailers,\n+            boolean endStream, boolean enableServerHeader, boolean enableDateHeader) {\n+\n+        final Http2Headers outputHeaders = ArmeriaHttpUtil.toNettyHttp2(inputHeaders,\n+                                                                        additionalHeaders, additionalTrailers,\n+                                                                        true, endStream, false);\n+\n+        if (outputHeaders.contains(HttpHeaderNames.CONTENT_LENGTH) &&\n+            !additionalTrailers.isEmpty()) {\n+            // We don't apply chunked encoding when the content-length header is set, which would\n+            // prevent the trailers from being sent so we go ahead and remove content-length to force\n+            // chunked encoding.\n+            outputHeaders.remove(HttpHeaderNames.CONTENT_LENGTH);\n+        }\n+\n+        if (enableServerHeader && !outputHeaders.contains(HttpHeaderNames.SERVER)) {\n+            outputHeaders.add(HttpHeaderNames.SERVER, ArmeriaHttpUtil.SERVER_HEADER);\n+        }\n+\n+        if (enableDateHeader && !outputHeaders.contains(HttpHeaderNames.DATE)) {\n+            outputHeaders.add(HttpHeaderNames.DATE, HttpTimestampSupplier.currentTime());\n+        }\n+\n+        return outputHeaders;\n+    }\n+\n+    private Http2Headers convertServerTrailers(\n+            HttpHeaders inputHeaders, HttpHeaders additionalTrailers, boolean endStream) {\n+        return ArmeriaHttpUtil.toNettyHttp2(inputHeaders, HttpHeaders.of(), additionalTrailers,\n+                                            true, endStream, true);\n+    }\n+\n+    private Http2Headers convertClientHeaders(\n+            HttpHeaders inputHeaders, HttpHeaders additionalHeaders, HttpHeaders additionalTrailers,\n+            boolean endStream, SessionProtocol sessionProtocol) {\n+\n+        requireNonNull(sessionProtocol);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73262810023e267bc4ae2e8d809c1a4b701ee252"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg1MjQ2Nw==", "bodyText": "Removed SessionProtocol by setting it when it constructed \ud83d\ude00", "url": "https://github.com/line/armeria/pull/2372#discussion_r376852467", "createdAt": "2020-02-10T03:08:12Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/Http2ObjectEncoder.java", "diffHunk": "@@ -69,9 +101,83 @@ protected ChannelFuture doWriteHeaders(int id, int streamId, HttpHeaders headers\n             return newFailedFuture(ClosedPublisherException.get());\n         }\n \n+        if (!isTrailer) {\n+            convertedHeaders = convertClientHeaders(headers, additionalHeaders, additionalTrailers,\n+                                                    endStream, sessionProtocol);\n+        } else {\n+            convertedHeaders = convertClientTrailers(headers, additionalTrailers, endStream);\n+        }\n+\n         // Client starts a new stream.\n-        return encoder.writeHeaders(\n-                ctx, streamId, ArmeriaHttpUtil.toNettyHttp2(headers, server), 0, endStream, ctx.newPromise());\n+        return encoder.writeHeaders(ctx, streamId, convertedHeaders, 0, endStream, ctx.newPromise());\n+    }\n+\n+    private Http2Headers convertServerHeaders(\n+            HttpHeaders inputHeaders, HttpHeaders additionalHeaders, HttpHeaders additionalTrailers,\n+            boolean endStream, boolean enableServerHeader, boolean enableDateHeader) {\n+\n+        final Http2Headers outputHeaders = ArmeriaHttpUtil.toNettyHttp2(inputHeaders,\n+                                                                        additionalHeaders, additionalTrailers,\n+                                                                        true, endStream, false);\n+\n+        if (outputHeaders.contains(HttpHeaderNames.CONTENT_LENGTH) &&\n+            !additionalTrailers.isEmpty()) {\n+            // We don't apply chunked encoding when the content-length header is set, which would\n+            // prevent the trailers from being sent so we go ahead and remove content-length to force\n+            // chunked encoding.\n+            outputHeaders.remove(HttpHeaderNames.CONTENT_LENGTH);\n+        }\n+\n+        if (enableServerHeader && !outputHeaders.contains(HttpHeaderNames.SERVER)) {\n+            outputHeaders.add(HttpHeaderNames.SERVER, ArmeriaHttpUtil.SERVER_HEADER);\n+        }\n+\n+        if (enableDateHeader && !outputHeaders.contains(HttpHeaderNames.DATE)) {\n+            outputHeaders.add(HttpHeaderNames.DATE, HttpTimestampSupplier.currentTime());\n+        }\n+\n+        return outputHeaders;\n+    }\n+\n+    private Http2Headers convertServerTrailers(\n+            HttpHeaders inputHeaders, HttpHeaders additionalTrailers, boolean endStream) {\n+        return ArmeriaHttpUtil.toNettyHttp2(inputHeaders, HttpHeaders.of(), additionalTrailers,\n+                                            true, endStream, true);\n+    }\n+\n+    private Http2Headers convertClientHeaders(\n+            HttpHeaders inputHeaders, HttpHeaders additionalHeaders, HttpHeaders additionalTrailers,\n+            boolean endStream, SessionProtocol sessionProtocol) {\n+\n+        requireNonNull(sessionProtocol);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIyMjE0MQ=="}, "originalCommit": {"oid": "73262810023e267bc4ae2e8d809c1a4b701ee252"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTM2MDEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/Http2ObjectEncoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNzoyNTo1MFrOFi-vfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTo0ODoyN1rOFjYs2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIyMzg3MA==", "bodyText": "How about checking !additionalTrailers.isEmpty() first because I think isEmpty is cheaper and most of yours don't set trailers.\nif (!additionalTrailers.isEmpty() && outputHeaders.contains(HttpHeaderNames.CONTENT_LENGTH) {\n  ...\n}", "url": "https://github.com/line/armeria/pull/2372#discussion_r372223870", "createdAt": "2020-01-29T07:25:50Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/Http2ObjectEncoder.java", "diffHunk": "@@ -69,9 +101,83 @@ protected ChannelFuture doWriteHeaders(int id, int streamId, HttpHeaders headers\n             return newFailedFuture(ClosedPublisherException.get());\n         }\n \n+        if (!isTrailer) {\n+            convertedHeaders = convertClientHeaders(headers, additionalHeaders, additionalTrailers,\n+                                                    endStream, sessionProtocol);\n+        } else {\n+            convertedHeaders = convertClientTrailers(headers, additionalTrailers, endStream);\n+        }\n+\n         // Client starts a new stream.\n-        return encoder.writeHeaders(\n-                ctx, streamId, ArmeriaHttpUtil.toNettyHttp2(headers, server), 0, endStream, ctx.newPromise());\n+        return encoder.writeHeaders(ctx, streamId, convertedHeaders, 0, endStream, ctx.newPromise());\n+    }\n+\n+    private Http2Headers convertServerHeaders(\n+            HttpHeaders inputHeaders, HttpHeaders additionalHeaders, HttpHeaders additionalTrailers,\n+            boolean endStream, boolean enableServerHeader, boolean enableDateHeader) {\n+\n+        final Http2Headers outputHeaders = ArmeriaHttpUtil.toNettyHttp2(inputHeaders,\n+                                                                        additionalHeaders, additionalTrailers,\n+                                                                        true, endStream, false);\n+\n+        if (outputHeaders.contains(HttpHeaderNames.CONTENT_LENGTH) &&\n+            !additionalTrailers.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73262810023e267bc4ae2e8d809c1a4b701ee252"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0OTE3Ng==", "bodyText": "Fixed it. Thanks for education.", "url": "https://github.com/line/armeria/pull/2372#discussion_r372649176", "createdAt": "2020-01-29T21:48:27Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/Http2ObjectEncoder.java", "diffHunk": "@@ -69,9 +101,83 @@ protected ChannelFuture doWriteHeaders(int id, int streamId, HttpHeaders headers\n             return newFailedFuture(ClosedPublisherException.get());\n         }\n \n+        if (!isTrailer) {\n+            convertedHeaders = convertClientHeaders(headers, additionalHeaders, additionalTrailers,\n+                                                    endStream, sessionProtocol);\n+        } else {\n+            convertedHeaders = convertClientTrailers(headers, additionalTrailers, endStream);\n+        }\n+\n         // Client starts a new stream.\n-        return encoder.writeHeaders(\n-                ctx, streamId, ArmeriaHttpUtil.toNettyHttp2(headers, server), 0, endStream, ctx.newPromise());\n+        return encoder.writeHeaders(ctx, streamId, convertedHeaders, 0, endStream, ctx.newPromise());\n+    }\n+\n+    private Http2Headers convertServerHeaders(\n+            HttpHeaders inputHeaders, HttpHeaders additionalHeaders, HttpHeaders additionalTrailers,\n+            boolean endStream, boolean enableServerHeader, boolean enableDateHeader) {\n+\n+        final Http2Headers outputHeaders = ArmeriaHttpUtil.toNettyHttp2(inputHeaders,\n+                                                                        additionalHeaders, additionalTrailers,\n+                                                                        true, endStream, false);\n+\n+        if (outputHeaders.contains(HttpHeaderNames.CONTENT_LENGTH) &&\n+            !additionalTrailers.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIyMzg3MA=="}, "originalCommit": {"oid": "73262810023e267bc4ae2e8d809c1a4b701ee252"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTM4Mzc4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNzozODowNlrOFi-9Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTo0Nzo0MlrOFjYrbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIyNzQzMA==", "bodyText": "nit: Remove this blank line?", "url": "https://github.com/line/armeria/pull/2372#discussion_r372227430", "createdAt": "2020-01-29T07:38:06Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java", "diffHunk": "@@ -997,5 +1075,21 @@ public static boolean isTrailerBlacklisted(AsciiString name) {\n         }\n     }\n \n+    /**\n+     * Returns a authority header value of specified host and port.\n+     */\n+    public static String authorityHeader(String host, int port, int defaultPort) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73262810023e267bc4ae2e8d809c1a4b701ee252"}, "originalPosition": 239}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0ODgxNA==", "bodyText": "Removed.", "url": "https://github.com/line/armeria/pull/2372#discussion_r372648814", "createdAt": "2020-01-29T21:47:42Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java", "diffHunk": "@@ -997,5 +1075,21 @@ public static boolean isTrailerBlacklisted(AsciiString name) {\n         }\n     }\n \n+    /**\n+     * Returns a authority header value of specified host and port.\n+     */\n+    public static String authorityHeader(String host, int port, int defaultPort) {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIyNzQzMA=="}, "originalCommit": {"oid": "73262810023e267bc4ae2e8d809c1a4b701ee252"}, "originalPosition": 239}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTQyMjAzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/Http1ObjectEncoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNzo1NToxOFrOFi_TbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTo0ODo0MVrOFjYtMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIzMzA2OA==", "bodyText": "Ditto, check !additionalTrailers.isEmpty() first", "url": "https://github.com/line/armeria/pull/2372#discussion_r372233068", "createdAt": "2020-01-29T07:55:18Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/Http1ObjectEncoder.java", "diffHunk": "@@ -216,31 +239,78 @@ private HttpObject convertServerHeaders(\n         } else {\n             res = new DefaultHttpResponse(HttpVersion.HTTP_1_1, nettyStatus, false);\n             // Perform conversion.\n-            convert(streamId, headers, res.headers(), false, false);\n+            convertServerHeaders0(streamId, headers, res.headers(), endStream,\n+                                  additionalHeaders, additionalTrailers,\n+                                  enableServerHeader, enableDateHeader);\n             setTransferEncoding(res);\n         }\n \n         return res;\n     }\n \n-    private HttpObject convertClientHeaders(int streamId, HttpHeaders headers, boolean endStream)\n-            throws Http2Exception {\n+    private void convertServerHeaders0(\n+            int streamId, HttpHeaders inHeaders,\n+            io.netty.handler.codec.http.HttpHeaders outHeaders, boolean endStream,\n+            HttpHeaders additionalHeaders, HttpHeaders additionalTrailers,\n+            boolean enableServerHeader, boolean enableDateHeader) throws Http2Exception {\n \n-        // Leading headers will always have :method, trailers will never have it.\n-        final String method = headers.get(HttpHeaderNames.METHOD);\n-        if (method == null) {\n-            return convertTrailingHeaders(streamId, headers);\n+        ArmeriaHttpUtil.toNettyHttp1(\n+                streamId, inHeaders, additionalHeaders, additionalTrailers, outHeaders,\n+                HttpVersion.HTTP_1_1, false, false, endStream);\n+\n+        removeHttpExtensionHeaders(outHeaders);\n+\n+        if (outHeaders.contains(HttpHeaderNames.CONTENT_LENGTH) &&\n+            !additionalTrailers.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73262810023e267bc4ae2e8d809c1a4b701ee252"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0OTI2Ng==", "bodyText": "Fixed it.", "url": "https://github.com/line/armeria/pull/2372#discussion_r372649266", "createdAt": "2020-01-29T21:48:41Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/Http1ObjectEncoder.java", "diffHunk": "@@ -216,31 +239,78 @@ private HttpObject convertServerHeaders(\n         } else {\n             res = new DefaultHttpResponse(HttpVersion.HTTP_1_1, nettyStatus, false);\n             // Perform conversion.\n-            convert(streamId, headers, res.headers(), false, false);\n+            convertServerHeaders0(streamId, headers, res.headers(), endStream,\n+                                  additionalHeaders, additionalTrailers,\n+                                  enableServerHeader, enableDateHeader);\n             setTransferEncoding(res);\n         }\n \n         return res;\n     }\n \n-    private HttpObject convertClientHeaders(int streamId, HttpHeaders headers, boolean endStream)\n-            throws Http2Exception {\n+    private void convertServerHeaders0(\n+            int streamId, HttpHeaders inHeaders,\n+            io.netty.handler.codec.http.HttpHeaders outHeaders, boolean endStream,\n+            HttpHeaders additionalHeaders, HttpHeaders additionalTrailers,\n+            boolean enableServerHeader, boolean enableDateHeader) throws Http2Exception {\n \n-        // Leading headers will always have :method, trailers will never have it.\n-        final String method = headers.get(HttpHeaderNames.METHOD);\n-        if (method == null) {\n-            return convertTrailingHeaders(streamId, headers);\n+        ArmeriaHttpUtil.toNettyHttp1(\n+                streamId, inHeaders, additionalHeaders, additionalTrailers, outHeaders,\n+                HttpVersion.HTTP_1_1, false, false, endStream);\n+\n+        removeHttpExtensionHeaders(outHeaders);\n+\n+        if (outHeaders.contains(HttpHeaderNames.CONTENT_LENGTH) &&\n+            !additionalTrailers.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIzMzA2OA=="}, "originalCommit": {"oid": "73262810023e267bc4ae2e8d809c1a4b701ee252"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTQyNjc4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/Http2ObjectEncoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNzo1Nzo0MVrOFi_WPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTo0ODo1NFrOFjYtrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIzMzc5MA==", "bodyText": "Introduce a local variable for (InetSocketAddress) channel().remoteAddress()?", "url": "https://github.com/line/armeria/pull/2372#discussion_r372233790", "createdAt": "2020-01-29T07:57:41Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/Http2ObjectEncoder.java", "diffHunk": "@@ -69,9 +101,83 @@ protected ChannelFuture doWriteHeaders(int id, int streamId, HttpHeaders headers\n             return newFailedFuture(ClosedPublisherException.get());\n         }\n \n+        if (!isTrailer) {\n+            convertedHeaders = convertClientHeaders(headers, additionalHeaders, additionalTrailers,\n+                                                    endStream, sessionProtocol);\n+        } else {\n+            convertedHeaders = convertClientTrailers(headers, additionalTrailers, endStream);\n+        }\n+\n         // Client starts a new stream.\n-        return encoder.writeHeaders(\n-                ctx, streamId, ArmeriaHttpUtil.toNettyHttp2(headers, server), 0, endStream, ctx.newPromise());\n+        return encoder.writeHeaders(ctx, streamId, convertedHeaders, 0, endStream, ctx.newPromise());\n+    }\n+\n+    private Http2Headers convertServerHeaders(\n+            HttpHeaders inputHeaders, HttpHeaders additionalHeaders, HttpHeaders additionalTrailers,\n+            boolean endStream, boolean enableServerHeader, boolean enableDateHeader) {\n+\n+        final Http2Headers outputHeaders = ArmeriaHttpUtil.toNettyHttp2(inputHeaders,\n+                                                                        additionalHeaders, additionalTrailers,\n+                                                                        true, endStream, false);\n+\n+        if (outputHeaders.contains(HttpHeaderNames.CONTENT_LENGTH) &&\n+            !additionalTrailers.isEmpty()) {\n+            // We don't apply chunked encoding when the content-length header is set, which would\n+            // prevent the trailers from being sent so we go ahead and remove content-length to force\n+            // chunked encoding.\n+            outputHeaders.remove(HttpHeaderNames.CONTENT_LENGTH);\n+        }\n+\n+        if (enableServerHeader && !outputHeaders.contains(HttpHeaderNames.SERVER)) {\n+            outputHeaders.add(HttpHeaderNames.SERVER, ArmeriaHttpUtil.SERVER_HEADER);\n+        }\n+\n+        if (enableDateHeader && !outputHeaders.contains(HttpHeaderNames.DATE)) {\n+            outputHeaders.add(HttpHeaderNames.DATE, HttpTimestampSupplier.currentTime());\n+        }\n+\n+        return outputHeaders;\n+    }\n+\n+    private Http2Headers convertServerTrailers(\n+            HttpHeaders inputHeaders, HttpHeaders additionalTrailers, boolean endStream) {\n+        return ArmeriaHttpUtil.toNettyHttp2(inputHeaders, HttpHeaders.of(), additionalTrailers,\n+                                            true, endStream, true);\n+    }\n+\n+    private Http2Headers convertClientHeaders(\n+            HttpHeaders inputHeaders, HttpHeaders additionalHeaders, HttpHeaders additionalTrailers,\n+            boolean endStream, SessionProtocol sessionProtocol) {\n+\n+        requireNonNull(sessionProtocol);\n+\n+        final Http2Headers outputHeaders = ArmeriaHttpUtil.toNettyHttp2(inputHeaders,\n+                                                                        additionalHeaders, additionalTrailers,\n+                                                                        false, endStream, false);\n+\n+        if (!outputHeaders.contains(HttpHeaderNames.USER_AGENT)) {\n+            outputHeaders.add(HttpHeaderNames.USER_AGENT, HttpHeaderUtil.USER_AGENT.toString());\n+        }\n+\n+        if (!outputHeaders.contains(HttpHeaderNames.SCHEME)) {\n+            outputHeaders.scheme(sessionProtocol.isTls() ? \"https\" : \"http\");\n+        }\n+\n+        if (!outputHeaders.contains(HttpHeaderNames.AUTHORITY)) {\n+            outputHeaders.add(HttpHeaderNames.AUTHORITY,\n+                              ArmeriaHttpUtil.authorityHeader(\n+                                      ((InetSocketAddress) channel().remoteAddress()).getHostName(),\n+                                      ((InetSocketAddress) channel().remoteAddress()).getPort(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73262810023e267bc4ae2e8d809c1a4b701ee252"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0OTM5MA==", "bodyText": "Fixed it.", "url": "https://github.com/line/armeria/pull/2372#discussion_r372649390", "createdAt": "2020-01-29T21:48:54Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/Http2ObjectEncoder.java", "diffHunk": "@@ -69,9 +101,83 @@ protected ChannelFuture doWriteHeaders(int id, int streamId, HttpHeaders headers\n             return newFailedFuture(ClosedPublisherException.get());\n         }\n \n+        if (!isTrailer) {\n+            convertedHeaders = convertClientHeaders(headers, additionalHeaders, additionalTrailers,\n+                                                    endStream, sessionProtocol);\n+        } else {\n+            convertedHeaders = convertClientTrailers(headers, additionalTrailers, endStream);\n+        }\n+\n         // Client starts a new stream.\n-        return encoder.writeHeaders(\n-                ctx, streamId, ArmeriaHttpUtil.toNettyHttp2(headers, server), 0, endStream, ctx.newPromise());\n+        return encoder.writeHeaders(ctx, streamId, convertedHeaders, 0, endStream, ctx.newPromise());\n+    }\n+\n+    private Http2Headers convertServerHeaders(\n+            HttpHeaders inputHeaders, HttpHeaders additionalHeaders, HttpHeaders additionalTrailers,\n+            boolean endStream, boolean enableServerHeader, boolean enableDateHeader) {\n+\n+        final Http2Headers outputHeaders = ArmeriaHttpUtil.toNettyHttp2(inputHeaders,\n+                                                                        additionalHeaders, additionalTrailers,\n+                                                                        true, endStream, false);\n+\n+        if (outputHeaders.contains(HttpHeaderNames.CONTENT_LENGTH) &&\n+            !additionalTrailers.isEmpty()) {\n+            // We don't apply chunked encoding when the content-length header is set, which would\n+            // prevent the trailers from being sent so we go ahead and remove content-length to force\n+            // chunked encoding.\n+            outputHeaders.remove(HttpHeaderNames.CONTENT_LENGTH);\n+        }\n+\n+        if (enableServerHeader && !outputHeaders.contains(HttpHeaderNames.SERVER)) {\n+            outputHeaders.add(HttpHeaderNames.SERVER, ArmeriaHttpUtil.SERVER_HEADER);\n+        }\n+\n+        if (enableDateHeader && !outputHeaders.contains(HttpHeaderNames.DATE)) {\n+            outputHeaders.add(HttpHeaderNames.DATE, HttpTimestampSupplier.currentTime());\n+        }\n+\n+        return outputHeaders;\n+    }\n+\n+    private Http2Headers convertServerTrailers(\n+            HttpHeaders inputHeaders, HttpHeaders additionalTrailers, boolean endStream) {\n+        return ArmeriaHttpUtil.toNettyHttp2(inputHeaders, HttpHeaders.of(), additionalTrailers,\n+                                            true, endStream, true);\n+    }\n+\n+    private Http2Headers convertClientHeaders(\n+            HttpHeaders inputHeaders, HttpHeaders additionalHeaders, HttpHeaders additionalTrailers,\n+            boolean endStream, SessionProtocol sessionProtocol) {\n+\n+        requireNonNull(sessionProtocol);\n+\n+        final Http2Headers outputHeaders = ArmeriaHttpUtil.toNettyHttp2(inputHeaders,\n+                                                                        additionalHeaders, additionalTrailers,\n+                                                                        false, endStream, false);\n+\n+        if (!outputHeaders.contains(HttpHeaderNames.USER_AGENT)) {\n+            outputHeaders.add(HttpHeaderNames.USER_AGENT, HttpHeaderUtil.USER_AGENT.toString());\n+        }\n+\n+        if (!outputHeaders.contains(HttpHeaderNames.SCHEME)) {\n+            outputHeaders.scheme(sessionProtocol.isTls() ? \"https\" : \"http\");\n+        }\n+\n+        if (!outputHeaders.contains(HttpHeaderNames.AUTHORITY)) {\n+            outputHeaders.add(HttpHeaderNames.AUTHORITY,\n+                              ArmeriaHttpUtil.authorityHeader(\n+                                      ((InetSocketAddress) channel().remoteAddress()).getHostName(),\n+                                      ((InetSocketAddress) channel().remoteAddress()).getPort(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIzMzc5MA=="}, "originalCommit": {"oid": "73262810023e267bc4ae2e8d809c1a4b701ee252"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTYyMTcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOToxMjozOVrOFjBMXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMTo0NzozOVrOFj6_9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI2NDAzMQ==", "bodyText": "nit: false, false, null are hard to understand. \ud83d\ude05 Add comment to null and false value for readability?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            HttpHeaders.of(), HttpHeaders.of(), false, false, null);\n          \n          \n            \n                            HttpHeaders.of(), HttpHeaders.of(), false /* enableServerHeader */, false /* enableDateHeader */, null /* sessionProtocol */);", "url": "https://github.com/line/armeria/pull/2372#discussion_r372264031", "createdAt": "2020-01-29T09:12:39Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java", "diffHunk": "@@ -539,7 +540,8 @@ private ChannelFuture respond(ServiceRequestContext reqCtx, boolean addKeepAlive\n \n         final ResponseHeaders immutableResHeaders = resHeaders.build();\n         ChannelFuture future = responseEncoder.writeHeaders(\n-                req.id(), req.streamId(), immutableResHeaders, !hasContent);\n+                req.id(), req.streamId(), immutableResHeaders, !hasContent,\n+                HttpHeaders.of(), HttpHeaders.of(), false, false, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73262810023e267bc4ae2e8d809c1a4b701ee252"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxMTEyNA==", "bodyText": "Thanks, I fixed it.", "url": "https://github.com/line/armeria/pull/2372#discussion_r373211124", "createdAt": "2020-01-30T21:47:39Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java", "diffHunk": "@@ -539,7 +540,8 @@ private ChannelFuture respond(ServiceRequestContext reqCtx, boolean addKeepAlive\n \n         final ResponseHeaders immutableResHeaders = resHeaders.build();\n         ChannelFuture future = responseEncoder.writeHeaders(\n-                req.id(), req.streamId(), immutableResHeaders, !hasContent);\n+                req.id(), req.streamId(), immutableResHeaders, !hasContent,\n+                HttpHeaders.of(), HttpHeaders.of(), false, false, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI2NDAzMQ=="}, "originalCommit": {"oid": "73262810023e267bc4ae2e8d809c1a4b701ee252"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODExNDUwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMjoyMDo0N1rOFj_zWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMjozMjowOFrOFj_7Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4OTgxNg==", "bodyText": "IIRC this check can be removed.", "url": "https://github.com/line/armeria/pull/2372#discussion_r373289816", "createdAt": "2020-01-31T02:20:47Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java", "diffHunk": "@@ -801,63 +814,131 @@ private static void addHttp2Scheme(io.netty.handler.codec.http.HttpHeaders in, U\n \n     /**\n      * Converts the specified Armeria HTTP/2 headers into Netty HTTP/2 headers.\n+     *\n+     * @param inputHeaders The HTTP/2 headers to convert.\n+     * @param additionalHeaders The additional headers which will be merged.\n+     * @param additionalTrailers The additional trailers which will be merged.\n+     * @param server    {@code true} if the returned headers will be used in a response message.\n+     *                  {@code false} for request message.\n+     * @param endStream {@code true} if returned headers will end streams.\n+     *                  {@code false} otherwise.\n+     * @param isTrailer {@code true} if returned headers should be treated as trailers.\n+     *                  {@code false} otherwise.\n      */\n-    public static Http2Headers toNettyHttp2(HttpHeaders in, boolean server) {\n-        final Http2Headers out = new DefaultHttp2Headers(false, in.size());\n+    public static Http2Headers toNettyHttp2(HttpHeaders inputHeaders,\n+                                            HttpHeaders additionalHeaders, HttpHeaders additionalTrailers,\n+                                            boolean server, boolean endStream, boolean isTrailer) {\n+        final int headerSizeHint = inputHeaders.size() + additionalHeaders.size() + additionalTrailers.size();\n+        final Http2Headers outputHeaders = new DefaultHttp2Headers(false, headerSizeHint);\n \n-        // Trailers if it does not have :status.\n-        if (server && !in.contains(HttpHeaderNames.STATUS)) {\n-            for (Entry<AsciiString, String> entry : in) {\n-                final AsciiString name = entry.getKey();\n-                final String value = entry.getValue();\n-                if (name.isEmpty() || isTrailerBlacklisted(name)) {\n-                    continue;\n-                }\n-                out.add(name, value);\n-            }\n-        } else {\n-            in.forEach((BiConsumer<AsciiString, String>) out::add);\n-            out.remove(HttpHeaderNames.CONNECTION);\n-            out.remove(HttpHeaderNames.TRANSFER_ENCODING);\n+        mergeHeadersHttp2(inputHeaders, outputHeaders, !server, isTrailer, false);\n+\n+        if (!isTrailer) {\n+            mergeHeadersHttp2(additionalHeaders, outputHeaders, !server, false, true);\n         }\n \n-        if (!out.contains(HttpHeaderNames.COOKIE)) {\n-            return out;\n+        if (server && endStream) {\n+            mergeHeadersHttp2(additionalTrailers, outputHeaders, false, isTrailer, true);\n+        }\n+\n+        outputHeaders.remove(HttpHeaderNames.CONNECTION);\n+        outputHeaders.remove(HttpHeaderNames.TRANSFER_ENCODING);\n+\n+        if (!outputHeaders.contains(HttpHeaderNames.COOKIE)) {\n+            return outputHeaders;\n         }\n \n         // Split up cookies to allow for better compression.\n         // https://tools.ietf.org/html/rfc7540#section-8.1.2.5\n-        final List<CharSequence> cookies = out.getAllAndRemove(HttpHeaderNames.COOKIE);\n+        final List<CharSequence> cookies = outputHeaders.getAllAndRemove(HttpHeaderNames.COOKIE);\n         for (CharSequence c : cookies) {\n-            out.add(HttpHeaderNames.COOKIE, COOKIE_SPLITTER.split(c));\n+            outputHeaders.add(HttpHeaderNames.COOKIE, COOKIE_SPLITTER.split(c));\n         }\n \n-        return out;\n+        return outputHeaders;\n+    }\n+\n+    private static void mergeHeadersHttp2(HttpHeaders inputHeaders, Http2Headers outputHeaders,\n+                                          boolean isRequest, boolean isTrailer, boolean isAdditionalHeaders) {\n+        final Set<AsciiString> additionalHeaderBlackList = isRequest ? ADDITIONAL_REQUEST_HEADER_BLACKLIST\n+                                                                     : ADDITIONAL_RESPONSE_HEADER_BLACKLIST;\n+        final Set<AsciiString> removed = new HashSet<>();\n+        for (Entry<AsciiString, String> entry : inputHeaders) {\n+            final AsciiString name = entry.getKey();\n+            final String value = entry.getValue();\n+            if (name.isEmpty()) {\n+                continue;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20770207e8c9db61e31aae76a26fe631ce997f20"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI5MTg3OA==", "bodyText": "Pushed a fix to your branch.", "url": "https://github.com/line/armeria/pull/2372#discussion_r373291878", "createdAt": "2020-01-31T02:32:08Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java", "diffHunk": "@@ -801,63 +814,131 @@ private static void addHttp2Scheme(io.netty.handler.codec.http.HttpHeaders in, U\n \n     /**\n      * Converts the specified Armeria HTTP/2 headers into Netty HTTP/2 headers.\n+     *\n+     * @param inputHeaders The HTTP/2 headers to convert.\n+     * @param additionalHeaders The additional headers which will be merged.\n+     * @param additionalTrailers The additional trailers which will be merged.\n+     * @param server    {@code true} if the returned headers will be used in a response message.\n+     *                  {@code false} for request message.\n+     * @param endStream {@code true} if returned headers will end streams.\n+     *                  {@code false} otherwise.\n+     * @param isTrailer {@code true} if returned headers should be treated as trailers.\n+     *                  {@code false} otherwise.\n      */\n-    public static Http2Headers toNettyHttp2(HttpHeaders in, boolean server) {\n-        final Http2Headers out = new DefaultHttp2Headers(false, in.size());\n+    public static Http2Headers toNettyHttp2(HttpHeaders inputHeaders,\n+                                            HttpHeaders additionalHeaders, HttpHeaders additionalTrailers,\n+                                            boolean server, boolean endStream, boolean isTrailer) {\n+        final int headerSizeHint = inputHeaders.size() + additionalHeaders.size() + additionalTrailers.size();\n+        final Http2Headers outputHeaders = new DefaultHttp2Headers(false, headerSizeHint);\n \n-        // Trailers if it does not have :status.\n-        if (server && !in.contains(HttpHeaderNames.STATUS)) {\n-            for (Entry<AsciiString, String> entry : in) {\n-                final AsciiString name = entry.getKey();\n-                final String value = entry.getValue();\n-                if (name.isEmpty() || isTrailerBlacklisted(name)) {\n-                    continue;\n-                }\n-                out.add(name, value);\n-            }\n-        } else {\n-            in.forEach((BiConsumer<AsciiString, String>) out::add);\n-            out.remove(HttpHeaderNames.CONNECTION);\n-            out.remove(HttpHeaderNames.TRANSFER_ENCODING);\n+        mergeHeadersHttp2(inputHeaders, outputHeaders, !server, isTrailer, false);\n+\n+        if (!isTrailer) {\n+            mergeHeadersHttp2(additionalHeaders, outputHeaders, !server, false, true);\n         }\n \n-        if (!out.contains(HttpHeaderNames.COOKIE)) {\n-            return out;\n+        if (server && endStream) {\n+            mergeHeadersHttp2(additionalTrailers, outputHeaders, false, isTrailer, true);\n+        }\n+\n+        outputHeaders.remove(HttpHeaderNames.CONNECTION);\n+        outputHeaders.remove(HttpHeaderNames.TRANSFER_ENCODING);\n+\n+        if (!outputHeaders.contains(HttpHeaderNames.COOKIE)) {\n+            return outputHeaders;\n         }\n \n         // Split up cookies to allow for better compression.\n         // https://tools.ietf.org/html/rfc7540#section-8.1.2.5\n-        final List<CharSequence> cookies = out.getAllAndRemove(HttpHeaderNames.COOKIE);\n+        final List<CharSequence> cookies = outputHeaders.getAllAndRemove(HttpHeaderNames.COOKIE);\n         for (CharSequence c : cookies) {\n-            out.add(HttpHeaderNames.COOKIE, COOKIE_SPLITTER.split(c));\n+            outputHeaders.add(HttpHeaderNames.COOKIE, COOKIE_SPLITTER.split(c));\n         }\n \n-        return out;\n+        return outputHeaders;\n+    }\n+\n+    private static void mergeHeadersHttp2(HttpHeaders inputHeaders, Http2Headers outputHeaders,\n+                                          boolean isRequest, boolean isTrailer, boolean isAdditionalHeaders) {\n+        final Set<AsciiString> additionalHeaderBlackList = isRequest ? ADDITIONAL_REQUEST_HEADER_BLACKLIST\n+                                                                     : ADDITIONAL_RESPONSE_HEADER_BLACKLIST;\n+        final Set<AsciiString> removed = new HashSet<>();\n+        for (Entry<AsciiString, String> entry : inputHeaders) {\n+            final AsciiString name = entry.getKey();\n+            final String value = entry.getValue();\n+            if (name.isEmpty()) {\n+                continue;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4OTgxNg=="}, "originalCommit": {"oid": "20770207e8c9db61e31aae76a26fe631ce997f20"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODExNTYwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMjoyMTozMVrOFj_z8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMjozMjowMlrOFj_7Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4OTk3MA==", "bodyText": "This name.isEmpty() check can be removed as well.", "url": "https://github.com/line/armeria/pull/2372#discussion_r373289970", "createdAt": "2020-01-31T02:21:31Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java", "diffHunk": "@@ -871,18 +952,25 @@ public static void toNettyHttp1(\n                     continue;\n                 }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20770207e8c9db61e31aae76a26fe631ce997f20"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI5MTg2Mg==", "bodyText": "Pushed a fix to your branch.", "url": "https://github.com/line/armeria/pull/2372#discussion_r373291862", "createdAt": "2020-01-31T02:32:02Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java", "diffHunk": "@@ -871,18 +952,25 @@ public static void toNettyHttp1(\n                     continue;\n                 }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4OTk3MA=="}, "originalCommit": {"oid": "20770207e8c9db61e31aae76a26fe631ce997f20"}, "originalPosition": 198}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTEzMjg1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwNjo1NTowNVrOFkcrsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwNjo1NTowNVrOFkcrsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2Mjk5NQ==", "bodyText": "I think we can set requestSessionProtocol when creating Http*ObjectEncoder.\n\n  \n    \n      armeria/core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java\n    \n    \n        Lines 276 to 283\n      in\n      dcc56ab\n    \n    \n    \n    \n\n        \n          \n           final SessionProtocol protocol = (SessionProtocol) evt; \n        \n\n        \n          \n           this.protocol = protocol; \n        \n\n        \n          \n           if (protocol == H1 || protocol == H1C) { \n        \n\n        \n          \n               requestEncoder = new Http1ObjectEncoder(channel, false, protocol.isTls()); \n        \n\n        \n          \n               responseDecoder = ctx.pipeline().get(Http1ResponseDecoder.class); \n        \n\n        \n          \n           } else if (protocol == H2 || protocol == H2C) { \n        \n\n        \n          \n               final Http2ConnectionHandler handler = ctx.pipeline().get(Http2ConnectionHandler.class); \n        \n\n        \n          \n               requestEncoder = new Http2ObjectEncoder(ctx, handler.encoder());", "url": "https://github.com/line/armeria/pull/2372#discussion_r373762995", "createdAt": "2020-02-01T06:55:05Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "diffHunk": "@@ -181,59 +174,15 @@ private void writeFirstHeader() {\n \n         if (request.isEmpty()) {\n             state = State.DONE;\n-            write0(firstHeaders, true, true);\n+            write0(firstHeaders, true, true,\n+                   reqCtx.additionalRequestHeaders(), requestSessionProtocol);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccbd58921ed1428c164f8f67e0818803214b90e6"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTEzNTc1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/Http1ObjectEncoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwNzowNTo0MlrOFkctOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwNzowNTo0MlrOFkctOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2MzM4Ng==", "bodyText": "enableServerHeader, enableDateHeader is immutable after building Server.\nHow about setting these flags when creating Http*ObjectEncoder?\nIt would be cleaner to get these immutable flags from class fields than method passing.", "url": "https://github.com/line/armeria/pull/2372#discussion_r373763386", "createdAt": "2020-02-01T07:05:42Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/Http1ObjectEncoder.java", "diffHunk": "@@ -116,31 +120,43 @@ protected Channel channel() {\n     }\n \n     @Override\n-    protected ChannelFuture doWriteHeaders(int id, int streamId, HttpHeaders headers, boolean endStream) {\n+    protected ChannelFuture doWriteHeaders(int id, int streamId, HttpHeaders headers, boolean endStream,\n+                                           HttpHeaders additionalHeaders, HttpHeaders additionalTrailers,\n+                                           boolean enableServerHeader, boolean enableDateHeader,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccbd58921ed1428c164f8f67e0818803214b90e6"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTQzNDc2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/Http1ObjectEncoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMjowNjoxNFrOFucCaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxMzozMzoyNlrOFwJUow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIzODE4NQ==", "bodyText": "Could be final with package-private?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected ChannelFuture writeNonInformationalHeaders(int id, HttpObject converted, boolean endStream) {\n          \n          \n            \n                final ChannelFuture writeNonInformationalHeaders(int id, HttpObject converted, boolean endStream) {", "url": "https://github.com/line/armeria/pull/2372#discussion_r384238185", "createdAt": "2020-02-26T02:06:14Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/Http1ObjectEncoder.java", "diffHunk": "@@ -104,65 +89,17 @@\n      */\n     private final IntObjectMap<PendingWrites> pendingWritesMap = new IntObjectHashMap<>();\n \n-    public Http1ObjectEncoder(Channel ch, boolean server, boolean isTls) {\n+    protected Http1ObjectEncoder(Channel ch, SessionProtocol protocol) {\n         this.ch = requireNonNull(ch, \"ch\");\n-        this.server = server;\n-        this.isTls = isTls;\n+        this.protocol = requireNonNull(protocol, \"protocol\");\n     }\n \n     @Override\n     protected Channel channel() {\n         return ch;\n     }\n \n-    @Override\n-    protected ChannelFuture doWriteHeaders(int id, int streamId, HttpHeaders headers, boolean endStream) {\n-        if (!isWritable(id)) {\n-            return newClosedSessionFuture();\n-        }\n-\n-        try {\n-            return server ? writeServerHeaders(id, streamId, headers, endStream)\n-                          : writeClientHeaders(id, streamId, headers, endStream);\n-        } catch (Throwable t) {\n-            return newFailedFuture(t);\n-        }\n-    }\n-\n-    private ChannelFuture writeServerHeaders(\n-            int id, int streamId, HttpHeaders headers, boolean endStream) throws Http2Exception {\n-\n-        final HttpObject converted = convertServerHeaders(streamId, headers, endStream);\n-        final String status = headers.get(HttpHeaderNames.STATUS);\n-        if (status == null) {\n-            // Trailers\n-            final ChannelFuture f = write(id, converted, endStream);\n-            ch.flush();\n-            return f;\n-        }\n-\n-        if (!status.isEmpty() && status.charAt(0) == '1') {\n-            // Informational status headers.\n-            final ChannelFuture f = write(id, converted, false);\n-            if (endStream) {\n-                // Can't end a stream with informational status in HTTP/1.\n-                f.addListener(ChannelFutureListener.CLOSE);\n-            }\n-            ch.flush();\n-            return f;\n-        }\n-\n-        // Non-informational status headers.\n-        return writeNonInformationalHeaders(id, converted, endStream);\n-    }\n-\n-    private ChannelFuture writeClientHeaders(\n-            int id, int streamId, HttpHeaders headers, boolean endStream) throws Http2Exception {\n-\n-        return writeNonInformationalHeaders(id, convertClientHeaders(streamId, headers, endStream), endStream);\n-    }\n-\n-    private ChannelFuture writeNonInformationalHeaders(int id, HttpObject converted, boolean endStream) {\n+    protected ChannelFuture writeNonInformationalHeaders(int id, HttpObject converted, boolean endStream) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcb40799eef7e1c605950c26f329a9e050826258"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyODcwNw==", "bodyText": "I revert this to move ServerHttp1ObjectEncoder to armeria.internal.server package and ClientHttp1ObjectEncoder to armeria.internal.client.", "url": "https://github.com/line/armeria/pull/2372#discussion_r386028707", "createdAt": "2020-02-29T13:33:26Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/Http1ObjectEncoder.java", "diffHunk": "@@ -104,65 +89,17 @@\n      */\n     private final IntObjectMap<PendingWrites> pendingWritesMap = new IntObjectHashMap<>();\n \n-    public Http1ObjectEncoder(Channel ch, boolean server, boolean isTls) {\n+    protected Http1ObjectEncoder(Channel ch, SessionProtocol protocol) {\n         this.ch = requireNonNull(ch, \"ch\");\n-        this.server = server;\n-        this.isTls = isTls;\n+        this.protocol = requireNonNull(protocol, \"protocol\");\n     }\n \n     @Override\n     protected Channel channel() {\n         return ch;\n     }\n \n-    @Override\n-    protected ChannelFuture doWriteHeaders(int id, int streamId, HttpHeaders headers, boolean endStream) {\n-        if (!isWritable(id)) {\n-            return newClosedSessionFuture();\n-        }\n-\n-        try {\n-            return server ? writeServerHeaders(id, streamId, headers, endStream)\n-                          : writeClientHeaders(id, streamId, headers, endStream);\n-        } catch (Throwable t) {\n-            return newFailedFuture(t);\n-        }\n-    }\n-\n-    private ChannelFuture writeServerHeaders(\n-            int id, int streamId, HttpHeaders headers, boolean endStream) throws Http2Exception {\n-\n-        final HttpObject converted = convertServerHeaders(streamId, headers, endStream);\n-        final String status = headers.get(HttpHeaderNames.STATUS);\n-        if (status == null) {\n-            // Trailers\n-            final ChannelFuture f = write(id, converted, endStream);\n-            ch.flush();\n-            return f;\n-        }\n-\n-        if (!status.isEmpty() && status.charAt(0) == '1') {\n-            // Informational status headers.\n-            final ChannelFuture f = write(id, converted, false);\n-            if (endStream) {\n-                // Can't end a stream with informational status in HTTP/1.\n-                f.addListener(ChannelFutureListener.CLOSE);\n-            }\n-            ch.flush();\n-            return f;\n-        }\n-\n-        // Non-informational status headers.\n-        return writeNonInformationalHeaders(id, converted, endStream);\n-    }\n-\n-    private ChannelFuture writeClientHeaders(\n-            int id, int streamId, HttpHeaders headers, boolean endStream) throws Http2Exception {\n-\n-        return writeNonInformationalHeaders(id, convertClientHeaders(streamId, headers, endStream), endStream);\n-    }\n-\n-    private ChannelFuture writeNonInformationalHeaders(int id, HttpObject converted, boolean endStream) {\n+    protected ChannelFuture writeNonInformationalHeaders(int id, HttpObject converted, boolean endStream) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIzODE4NQ=="}, "originalCommit": {"oid": "dcb40799eef7e1c605950c26f329a9e050826258"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTQ0NDIzOnYy", "diffSide": "LEFT", "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMjoxMjoyMlrOFucIUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMTozNjo0MFrOFu9LeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIzOTY5Ng==", "bodyText": "Remove remoteAdress field of class? It seems not to use anymore.", "url": "https://github.com/line/armeria/pull/2372#discussion_r384239696", "createdAt": "2020-02-26T02:12:22Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "diffHunk": "@@ -172,65 +163,19 @@ private void writeFirstHeader() {\n             return;\n         }\n \n-        final RequestHeaders firstHeaders = autoFillHeaders();\n+        final RequestHeaders firstHeaders = request.headers();\n \n         final SessionProtocol protocol = session.protocol();\n         assert protocol != null;\n         logBuilder.requestHeaders(firstHeaders);\n \n         if (request.isEmpty()) {\n             state = State.DONE;\n-            write0(firstHeaders, true, true);\n+            write0(firstHeaders, true, true, reqCtx.additionalRequestHeaders());\n         } else {\n             state = State.NEEDS_DATA_OR_TRAILERS;\n-            write0(firstHeaders, false, true);\n-        }\n-    }\n-\n-    private RequestHeaders autoFillHeaders() {\n-        final RequestHeaders oldHeaders = request.headers();\n-        final RequestHeadersBuilder newHeaders = oldHeaders.toBuilder();\n-\n-        final HttpHeaders additionalHeaders = reqCtx.additionalRequestHeaders();\n-        if (!additionalHeaders.isEmpty()) {\n-            for (AsciiString name : additionalHeaders.names()) {\n-                if (!ADDITIONAL_HEADER_BLACKLIST.contains(name)) {\n-                    newHeaders.remove(name);\n-                    additionalHeaders.forEachValue(name, value -> newHeaders.add(name, value));\n-                }\n-            }\n-        }\n-\n-        if (!newHeaders.contains(HttpHeaderNames.USER_AGENT)) {\n-            newHeaders.add(HttpHeaderNames.USER_AGENT, HttpHeaderUtil.USER_AGENT.toString());\n+            write0(firstHeaders, false, true, reqCtx.additionalRequestHeaders());\n         }\n-\n-        // :scheme and :authority are auto-filled in the beginning of decorator chain,\n-        // but a decorator might have removed them, so we check again.\n-        final SessionProtocol sessionProtocol = reqCtx.sessionProtocol();\n-        if (newHeaders.scheme() == null) {\n-            newHeaders.scheme(sessionProtocol);\n-        }\n-\n-        if (newHeaders.authority() == null) {\n-            final String hostname = remoteAddress.getHostName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcb40799eef7e1c605950c26f329a9e050826258"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc4MTE3Ng==", "bodyText": "Removed. I also removed `HttpSessionHandler.removeAddress' too.", "url": "https://github.com/line/armeria/pull/2372#discussion_r384781176", "createdAt": "2020-02-26T21:36:40Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "diffHunk": "@@ -172,65 +163,19 @@ private void writeFirstHeader() {\n             return;\n         }\n \n-        final RequestHeaders firstHeaders = autoFillHeaders();\n+        final RequestHeaders firstHeaders = request.headers();\n \n         final SessionProtocol protocol = session.protocol();\n         assert protocol != null;\n         logBuilder.requestHeaders(firstHeaders);\n \n         if (request.isEmpty()) {\n             state = State.DONE;\n-            write0(firstHeaders, true, true);\n+            write0(firstHeaders, true, true, reqCtx.additionalRequestHeaders());\n         } else {\n             state = State.NEEDS_DATA_OR_TRAILERS;\n-            write0(firstHeaders, false, true);\n-        }\n-    }\n-\n-    private RequestHeaders autoFillHeaders() {\n-        final RequestHeaders oldHeaders = request.headers();\n-        final RequestHeadersBuilder newHeaders = oldHeaders.toBuilder();\n-\n-        final HttpHeaders additionalHeaders = reqCtx.additionalRequestHeaders();\n-        if (!additionalHeaders.isEmpty()) {\n-            for (AsciiString name : additionalHeaders.names()) {\n-                if (!ADDITIONAL_HEADER_BLACKLIST.contains(name)) {\n-                    newHeaders.remove(name);\n-                    additionalHeaders.forEachValue(name, value -> newHeaders.add(name, value));\n-                }\n-            }\n-        }\n-\n-        if (!newHeaders.contains(HttpHeaderNames.USER_AGENT)) {\n-            newHeaders.add(HttpHeaderNames.USER_AGENT, HttpHeaderUtil.USER_AGENT.toString());\n+            write0(firstHeaders, false, true, reqCtx.additionalRequestHeaders());\n         }\n-\n-        // :scheme and :authority are auto-filled in the beginning of decorator chain,\n-        // but a decorator might have removed them, so we check again.\n-        final SessionProtocol sessionProtocol = reqCtx.sessionProtocol();\n-        if (newHeaders.scheme() == null) {\n-            newHeaders.scheme(sessionProtocol);\n-        }\n-\n-        if (newHeaders.authority() == null) {\n-            final String hostname = remoteAddress.getHostName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIzOTY5Ng=="}, "originalCommit": {"oid": "dcb40799eef7e1c605950c26f329a9e050826258"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTQ1NTAxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMjoxOToyNlrOFucPLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMTozNDo1NVrOFu9HxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI0MTQ1NQ==", "bodyText": "nit: I'm not strong here, but could simplify a little. \ud83d\ude00\nif (request.isEmpty()) {\n    state = State.DONE;\n} else {\n    state = State.NEEDS_DATA_OR_TRAILERS;\n}\nwrite0(firstHeaders, request.isEmpty(), true, reqCtx.additionalRequestHeaders());", "url": "https://github.com/line/armeria/pull/2372#discussion_r384241455", "createdAt": "2020-02-26T02:19:26Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "diffHunk": "@@ -172,65 +163,19 @@ private void writeFirstHeader() {\n             return;\n         }\n \n-        final RequestHeaders firstHeaders = autoFillHeaders();\n+        final RequestHeaders firstHeaders = request.headers();\n \n         final SessionProtocol protocol = session.protocol();\n         assert protocol != null;\n         logBuilder.requestHeaders(firstHeaders);\n \n         if (request.isEmpty()) {\n             state = State.DONE;\n-            write0(firstHeaders, true, true);\n+            write0(firstHeaders, true, true, reqCtx.additionalRequestHeaders());\n         } else {\n             state = State.NEEDS_DATA_OR_TRAILERS;\n-            write0(firstHeaders, false, true);\n-        }\n-    }\n-\n-    private RequestHeaders autoFillHeaders() {\n-        final RequestHeaders oldHeaders = request.headers();\n-        final RequestHeadersBuilder newHeaders = oldHeaders.toBuilder();\n-\n-        final HttpHeaders additionalHeaders = reqCtx.additionalRequestHeaders();\n-        if (!additionalHeaders.isEmpty()) {\n-            for (AsciiString name : additionalHeaders.names()) {\n-                if (!ADDITIONAL_HEADER_BLACKLIST.contains(name)) {\n-                    newHeaders.remove(name);\n-                    additionalHeaders.forEachValue(name, value -> newHeaders.add(name, value));\n-                }\n-            }\n-        }\n-\n-        if (!newHeaders.contains(HttpHeaderNames.USER_AGENT)) {\n-            newHeaders.add(HttpHeaderNames.USER_AGENT, HttpHeaderUtil.USER_AGENT.toString());\n+            write0(firstHeaders, false, true, reqCtx.additionalRequestHeaders());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcb40799eef7e1c605950c26f329a9e050826258"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc4MDIyOQ==", "bodyText": "Fixed it.", "url": "https://github.com/line/armeria/pull/2372#discussion_r384780229", "createdAt": "2020-02-26T21:34:55Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "diffHunk": "@@ -172,65 +163,19 @@ private void writeFirstHeader() {\n             return;\n         }\n \n-        final RequestHeaders firstHeaders = autoFillHeaders();\n+        final RequestHeaders firstHeaders = request.headers();\n \n         final SessionProtocol protocol = session.protocol();\n         assert protocol != null;\n         logBuilder.requestHeaders(firstHeaders);\n \n         if (request.isEmpty()) {\n             state = State.DONE;\n-            write0(firstHeaders, true, true);\n+            write0(firstHeaders, true, true, reqCtx.additionalRequestHeaders());\n         } else {\n             state = State.NEEDS_DATA_OR_TRAILERS;\n-            write0(firstHeaders, false, true);\n-        }\n-    }\n-\n-    private RequestHeaders autoFillHeaders() {\n-        final RequestHeaders oldHeaders = request.headers();\n-        final RequestHeadersBuilder newHeaders = oldHeaders.toBuilder();\n-\n-        final HttpHeaders additionalHeaders = reqCtx.additionalRequestHeaders();\n-        if (!additionalHeaders.isEmpty()) {\n-            for (AsciiString name : additionalHeaders.names()) {\n-                if (!ADDITIONAL_HEADER_BLACKLIST.contains(name)) {\n-                    newHeaders.remove(name);\n-                    additionalHeaders.forEachValue(name, value -> newHeaders.add(name, value));\n-                }\n-            }\n-        }\n-\n-        if (!newHeaders.contains(HttpHeaderNames.USER_AGENT)) {\n-            newHeaders.add(HttpHeaderNames.USER_AGENT, HttpHeaderUtil.USER_AGENT.toString());\n+            write0(firstHeaders, false, true, reqCtx.additionalRequestHeaders());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI0MTQ1NQ=="}, "originalCommit": {"oid": "dcb40799eef7e1c605950c26f329a9e050826258"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTUwNDU5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpObjectEncoder.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMjo1MTowNVrOFucs3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMTo1ODozMVrOF0igKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI0OTA1NA==", "bodyText": "How about reviving writeHeaders(int id, int streamId, HttpHeaders headers, boolean endStream) and offering two versions of writerHeaders?\nBecause 1) we don't need to merge HTTP headers if there's no additional headers or tailers so it makes our code easy to optimize the performance. And 2) don't have to pass empty headers here(https://github.com/line/armeria/pull/2372/files#diff-f4134a31b2a8d080bf8fa97afccc2880R240)\n// for empty additional headers and tailers.\npublic final ChannelFuture writeHeaders(int id, int streamId, HttpHeaders headers, boolean endStream) { \n    // skip merging logic, directly convert to Netty headers\n    ... \n}\npublic final ChannelFuture writeHeaders(int id, int streamId, HttpHeaders headers, boolean endStream, HttpHeaders additionalHeaders, HttpHeaders additionalTrailers) {\n\tif (addtionalHeaders.isEmpty() && additionalTrailers.isEmpty()) {\n\t\treturn writeHeaders(id, streamId, headers);\n    }\n    ... \n}", "url": "https://github.com/line/armeria/pull/2372#discussion_r384249054", "createdAt": "2020-02-26T02:51:05Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpObjectEncoder.java", "diffHunk": "@@ -45,19 +45,21 @@ protected EventLoop eventLoop() {\n     /**\n      * Writes an {@link HttpHeaders}.\n      */\n-    public final ChannelFuture writeHeaders(int id, int streamId, HttpHeaders headers, boolean endStream) {\n-\n+    public final ChannelFuture writeHeaders(int id, int streamId, HttpHeaders headers, boolean endStream,\n+                                            HttpHeaders additionalHeaders, HttpHeaders additionalTrailers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcb40799eef7e1c605950c26f329a9e050826258"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc5ODcxNg==", "bodyText": "Yes, I think it's good idea. I will update this soon \ud83d\ude00", "url": "https://github.com/line/armeria/pull/2372#discussion_r384798716", "createdAt": "2020-02-26T22:11:46Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpObjectEncoder.java", "diffHunk": "@@ -45,19 +45,21 @@ protected EventLoop eventLoop() {\n     /**\n      * Writes an {@link HttpHeaders}.\n      */\n-    public final ChannelFuture writeHeaders(int id, int streamId, HttpHeaders headers, boolean endStream) {\n-\n+    public final ChannelFuture writeHeaders(int id, int streamId, HttpHeaders headers, boolean endStream,\n+                                            HttpHeaders additionalHeaders, HttpHeaders additionalTrailers) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI0OTA1NA=="}, "originalCommit": {"oid": "dcb40799eef7e1c605950c26f329a9e050826258"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk0MDg0Nw==", "bodyText": "It seems weird to me that this writeHeaders method has both additionalHeaders and additionalTrailers which cannot be used at the same time.\nHow about splitting writeHeaders to writeHeaders and writeTrailers?", "url": "https://github.com/line/armeria/pull/2372#discussion_r384940847", "createdAt": "2020-02-27T06:52:45Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpObjectEncoder.java", "diffHunk": "@@ -45,19 +45,21 @@ protected EventLoop eventLoop() {\n     /**\n      * Writes an {@link HttpHeaders}.\n      */\n-    public final ChannelFuture writeHeaders(int id, int streamId, HttpHeaders headers, boolean endStream) {\n-\n+    public final ChannelFuture writeHeaders(int id, int streamId, HttpHeaders headers, boolean endStream,\n+                                            HttpHeaders additionalHeaders, HttpHeaders additionalTrailers) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI0OTA1NA=="}, "originalCommit": {"oid": "dcb40799eef7e1c605950c26f329a9e050826258"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyNTk3Nw==", "bodyText": "I think additionalHeaders and additionalTrailers can be used at the same time when request headers end with additional trailers. (Do I understand correctly? \ud83e\udd14 )\nIt seems that it may happens here now.\n\n  \n    \n      armeria/core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java\n    \n    \n         Line 174\n      in\n      48f4132\n    \n    \n    \n    \n\n        \n          \n           fillAdditionalTrailers(newHeaders, additionalTrailers); \n        \n    \n  \n\n\nDo you think we need all possible overrides for this method?\npublic final ChannelFuture writeHeaders(int id, int streamId, HttpHeaders headers, boolean endStream)\npublic final ChannelFuture writeHeaders(int id, int streamId, HttpHeaders headers, boolean endStream, HttpHeaders additionalHeaders)\npublic final ChannelFuture writeTrailers(int id, int streamId, HttpHeaders headers, boolean endStream, HttpHeaders additionalTrailers)\npublic final ChannelFuture writeHeaders(int id, int streamId, HttpHeaders headers, boolean endStream, HttpHeaders additionalHeaders, HttpHeaders additionalTrailers)", "url": "https://github.com/line/armeria/pull/2372#discussion_r386025977", "createdAt": "2020-02-29T12:44:19Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpObjectEncoder.java", "diffHunk": "@@ -45,19 +45,21 @@ protected EventLoop eventLoop() {\n     /**\n      * Writes an {@link HttpHeaders}.\n      */\n-    public final ChannelFuture writeHeaders(int id, int streamId, HttpHeaders headers, boolean endStream) {\n-\n+    public final ChannelFuture writeHeaders(int id, int streamId, HttpHeaders headers, boolean endStream,\n+                                            HttpHeaders additionalHeaders, HttpHeaders additionalTrailers) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI0OTA1NA=="}, "originalCommit": {"oid": "dcb40799eef7e1c605950c26f329a9e050826258"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAyNjU3NA==", "bodyText": "It seems that it may happens here now.\n\nI think it's a bug so I fixed it. \ud83d\ude04\n#2544\nAfter this is merged, I think we can split the method to writeHeaders and writeTrailers. Sorry about the bug. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2372#discussion_r388026574", "createdAt": "2020-03-05T01:10:55Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpObjectEncoder.java", "diffHunk": "@@ -45,19 +45,21 @@ protected EventLoop eventLoop() {\n     /**\n      * Writes an {@link HttpHeaders}.\n      */\n-    public final ChannelFuture writeHeaders(int id, int streamId, HttpHeaders headers, boolean endStream) {\n-\n+    public final ChannelFuture writeHeaders(int id, int streamId, HttpHeaders headers, boolean endStream,\n+                                            HttpHeaders additionalHeaders, HttpHeaders additionalTrailers) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI0OTA1NA=="}, "originalCommit": {"oid": "dcb40799eef7e1c605950c26f329a9e050826258"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NjMxMg==", "bodyText": "#2544 has been fixed. @jyblue, could you rebase and squash into a single commit, since the history is getting pretty large?", "url": "https://github.com/line/armeria/pull/2372#discussion_r390086312", "createdAt": "2020-03-10T04:12:24Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpObjectEncoder.java", "diffHunk": "@@ -45,19 +45,21 @@ protected EventLoop eventLoop() {\n     /**\n      * Writes an {@link HttpHeaders}.\n      */\n-    public final ChannelFuture writeHeaders(int id, int streamId, HttpHeaders headers, boolean endStream) {\n-\n+    public final ChannelFuture writeHeaders(int id, int streamId, HttpHeaders headers, boolean endStream,\n+                                            HttpHeaders additionalHeaders, HttpHeaders additionalTrailers) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI0OTA1NA=="}, "originalCommit": {"oid": "dcb40799eef7e1c605950c26f329a9e050826258"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYzNTU2Mw==", "bodyText": "I squashed and rebase commit. I will also split writeHeaders methods soon. \ud83d\ude47\u200d\u2642\ufe0f", "url": "https://github.com/line/armeria/pull/2372#discussion_r390635563", "createdAt": "2020-03-10T21:58:31Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/HttpObjectEncoder.java", "diffHunk": "@@ -45,19 +45,21 @@ protected EventLoop eventLoop() {\n     /**\n      * Writes an {@link HttpHeaders}.\n      */\n-    public final ChannelFuture writeHeaders(int id, int streamId, HttpHeaders headers, boolean endStream) {\n-\n+    public final ChannelFuture writeHeaders(int id, int streamId, HttpHeaders headers, boolean endStream,\n+                                            HttpHeaders additionalHeaders, HttpHeaders additionalTrailers) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI0OTA1NA=="}, "originalCommit": {"oid": "dcb40799eef7e1c605950c26f329a9e050826258"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTUyOTM3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/ServerHttp2ObjectEncoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMzowODo1MVrOFuc8bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMTozNDozMVrOFu9HAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI1MzAzOA==", "bodyText": "Could Move these to under if condition?\nif (isStreamPresentAndWritable(streamId)) {\n    final boolean isTrailer = !headers.contains(HttpHeaderNames.STATUS);\n    final Http2Headers convertedHeaders;", "url": "https://github.com/line/armeria/pull/2372#discussion_r384253038", "createdAt": "2020-02-26T03:08:51Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/ServerHttp2ObjectEncoder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.stream.ClosedStreamException;\n+import com.linecorp.armeria.internal.common.util.HttpTimestampSupplier;\n+\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.http2.Http2ConnectionEncoder;\n+import io.netty.handler.codec.http2.Http2Headers;\n+\n+public final class ServerHttp2ObjectEncoder extends Http2ObjectEncoder {\n+    private final boolean enableServerHeader;\n+    private final boolean enableDateHeader;\n+\n+    public ServerHttp2ObjectEncoder(ChannelHandlerContext ctx, Http2ConnectionEncoder encoder,\n+                                       boolean enableServerHeader, boolean enableDateHeader) {\n+        super(ctx, encoder);\n+        this.enableServerHeader = enableServerHeader;\n+        this.enableDateHeader = enableDateHeader;\n+    }\n+\n+    @Override\n+    protected ChannelFuture doWriteHeaders(int id, int streamId, HttpHeaders headers, boolean endStream,\n+                                           HttpHeaders additionalHeaders, HttpHeaders additionalTrailers) {\n+        final boolean isTrailer = !headers.contains(HttpHeaderNames.STATUS);\n+        final Http2Headers convertedHeaders;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcb40799eef7e1c605950c26f329a9e050826258"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc4MDAzMw==", "bodyText": "Fixed it.", "url": "https://github.com/line/armeria/pull/2372#discussion_r384780033", "createdAt": "2020-02-26T21:34:31Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/ServerHttp2ObjectEncoder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.stream.ClosedStreamException;\n+import com.linecorp.armeria.internal.common.util.HttpTimestampSupplier;\n+\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.http2.Http2ConnectionEncoder;\n+import io.netty.handler.codec.http2.Http2Headers;\n+\n+public final class ServerHttp2ObjectEncoder extends Http2ObjectEncoder {\n+    private final boolean enableServerHeader;\n+    private final boolean enableDateHeader;\n+\n+    public ServerHttp2ObjectEncoder(ChannelHandlerContext ctx, Http2ConnectionEncoder encoder,\n+                                       boolean enableServerHeader, boolean enableDateHeader) {\n+        super(ctx, encoder);\n+        this.enableServerHeader = enableServerHeader;\n+        this.enableDateHeader = enableDateHeader;\n+    }\n+\n+    @Override\n+    protected ChannelFuture doWriteHeaders(int id, int streamId, HttpHeaders headers, boolean endStream,\n+                                           HttpHeaders additionalHeaders, HttpHeaders additionalTrailers) {\n+        final boolean isTrailer = !headers.contains(HttpHeaderNames.STATUS);\n+        final Http2Headers convertedHeaders;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI1MzAzOA=="}, "originalCommit": {"oid": "dcb40799eef7e1c605950c26f329a9e050826258"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzkxMzcyOnYy", "diffSide": "RIGHT", "path": "benchmarks/src/jmh/java/com/linecorp/armeria/common/HttpRequestHeaderConversionBenchmark.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjo0MjowNFrOFvGwVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMjoyMzowMVrOFwEg5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzODA2OQ==", "bodyText": "Time flies! \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2372#discussion_r384938069", "createdAt": "2020-02-27T06:42:04Z", "author": {"login": "trustin"}, "path": "benchmarks/src/jmh/java/com/linecorp/armeria/common/HttpRequestHeaderConversionBenchmark.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2019 LINE Corporation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59e88e87c0c81fed094a8e6154e6c148bc27f598"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5MjI3Ng==", "bodyText": "Should I update all modified files or just newly created one? \ud83e\udd14", "url": "https://github.com/line/armeria/pull/2372#discussion_r385392276", "createdAt": "2020-02-27T21:51:27Z", "author": {"login": "jyblue"}, "path": "benchmarks/src/jmh/java/com/linecorp/armeria/common/HttpRequestHeaderConversionBenchmark.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2019 LINE Corporation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzODA2OQ=="}, "originalCommit": {"oid": "59e88e87c0c81fed094a8e6154e6c148bc27f598"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2MDQwNA==", "bodyText": "newly created one. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2372#discussion_r385460404", "createdAt": "2020-02-28T01:14:42Z", "author": {"login": "minwoox"}, "path": "benchmarks/src/jmh/java/com/linecorp/armeria/common/HttpRequestHeaderConversionBenchmark.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2019 LINE Corporation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzODA2OQ=="}, "originalCommit": {"oid": "59e88e87c0c81fed094a8e6154e6c148bc27f598"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk0OTkyNQ==", "bodyText": "Thank you, fixed it.", "url": "https://github.com/line/armeria/pull/2372#discussion_r385949925", "createdAt": "2020-02-28T22:23:01Z", "author": {"login": "jyblue"}, "path": "benchmarks/src/jmh/java/com/linecorp/armeria/common/HttpRequestHeaderConversionBenchmark.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2019 LINE Corporation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzODA2OQ=="}, "originalCommit": {"oid": "59e88e87c0c81fed094a8e6154e6c148bc27f598"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzkxNTUwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/HttpHeaderUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjo0MzowNFrOFvGxZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMjoyMzo1MlrOFwEiHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzODM0Mw==", "bodyText": "Could we move this to armeria.internal.client?", "url": "https://github.com/line/armeria/pull/2372#discussion_r384938343", "createdAt": "2020-02-27T06:43:04Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/HttpHeaderUtil.java", "diffHunk": "@@ -14,25 +14,20 @@\n  * under the License.\n  */\n \n-package com.linecorp.armeria.client;\n+package com.linecorp.armeria.internal;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59e88e87c0c81fed094a8e6154e6c148bc27f598"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk1MDIzOQ==", "bodyText": "Moved to armeria.internal.client package.", "url": "https://github.com/line/armeria/pull/2372#discussion_r385950239", "createdAt": "2020-02-28T22:23:52Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/HttpHeaderUtil.java", "diffHunk": "@@ -14,25 +14,20 @@\n  * under the License.\n  */\n \n-package com.linecorp.armeria.client;\n+package com.linecorp.armeria.internal;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzODM0Mw=="}, "originalCommit": {"oid": "59e88e87c0c81fed094a8e6154e6c148bc27f598"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzkxODY2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/ClientHttp2ObjectEncoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjo0NTowMlrOFvGzbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMjoyMzoyMVrOFwEhTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzODg2Mg==", "bodyText": "How about using add() instead of shortcut methods for better performance?", "url": "https://github.com/line/armeria/pull/2372#discussion_r384938862", "createdAt": "2020-02-27T06:45:02Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/ClientHttp2ObjectEncoder.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.InetSocketAddress;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.common.stream.ClosedStreamException;\n+import com.linecorp.armeria.internal.HttpHeaderUtil;\n+\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.http2.Http2Connection;\n+import io.netty.handler.codec.http2.Http2ConnectionEncoder;\n+import io.netty.handler.codec.http2.Http2Headers;\n+\n+public final class ClientHttp2ObjectEncoder extends Http2ObjectEncoder {\n+    private final SessionProtocol protocol;\n+\n+    public ClientHttp2ObjectEncoder(ChannelHandlerContext ctx, Http2ConnectionEncoder encoder,\n+                                       SessionProtocol protocol) {\n+        super(ctx, encoder);\n+        this.protocol = requireNonNull(protocol, \"protocol\");\n+    }\n+\n+    @Override\n+    protected ChannelFuture doWriteHeaders(int id, int streamId, HttpHeaders headers, boolean endStream,\n+                                           HttpHeaders additionalHeaders, HttpHeaders additionalTrailers) {\n+        final Http2Connection conn = encoder().connection();\n+        final boolean isTrailer = !headers.contains(HttpHeaderNames.METHOD);\n+        final Http2Headers convertedHeaders;\n+\n+        if (isStreamPresentAndWritable(streamId)) {\n+            if (!isTrailer) {\n+                convertedHeaders = convertHeaders(headers, additionalHeaders, additionalTrailers);\n+            } else {\n+                convertedHeaders = convertTrailers(headers, additionalTrailers);\n+            }\n+            // Writing to an existing stream.\n+            return encoder().writeHeaders(ctx(), streamId, convertedHeaders, 0, endStream,\n+                                          ctx().newPromise());\n+        }\n+\n+        if (conn.local().mayHaveCreatedStream(streamId)) {\n+            // Stream has been closed.\n+            return newFailedFuture(ClosedStreamException.get());\n+        }\n+\n+        if (!isTrailer) {\n+            convertedHeaders = convertHeaders(headers, additionalHeaders, additionalTrailers);\n+        } else {\n+            convertedHeaders = convertTrailers(headers, additionalTrailers);\n+        }\n+\n+        // Client starts a new stream.\n+        return encoder().writeHeaders(ctx(), streamId, convertedHeaders, 0, endStream,\n+                                      ctx().newPromise());\n+    }\n+\n+    private Http2Headers convertHeaders(\n+            HttpHeaders inputHeaders, HttpHeaders additionalHeaders, HttpHeaders additionalTrailers) {\n+        final Http2Headers outputHeaders =\n+                ArmeriaHttpUtil.toNettyHttp2Client(inputHeaders, additionalHeaders, additionalTrailers, false);\n+\n+        if (!outputHeaders.contains(HttpHeaderNames.USER_AGENT)) {\n+            outputHeaders.add(HttpHeaderNames.USER_AGENT, HttpHeaderUtil.USER_AGENT.toString());\n+        }\n+\n+        if (!outputHeaders.contains(HttpHeaderNames.SCHEME)) {\n+            outputHeaders.scheme(protocol.isTls() ? SessionProtocol.HTTPS.uriText()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59e88e87c0c81fed094a8e6154e6c148bc27f598"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk1MDAzMQ==", "bodyText": "Fixed it \ud83d\udc4d", "url": "https://github.com/line/armeria/pull/2372#discussion_r385950031", "createdAt": "2020-02-28T22:23:21Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/ClientHttp2ObjectEncoder.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.InetSocketAddress;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.common.stream.ClosedStreamException;\n+import com.linecorp.armeria.internal.HttpHeaderUtil;\n+\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.http2.Http2Connection;\n+import io.netty.handler.codec.http2.Http2ConnectionEncoder;\n+import io.netty.handler.codec.http2.Http2Headers;\n+\n+public final class ClientHttp2ObjectEncoder extends Http2ObjectEncoder {\n+    private final SessionProtocol protocol;\n+\n+    public ClientHttp2ObjectEncoder(ChannelHandlerContext ctx, Http2ConnectionEncoder encoder,\n+                                       SessionProtocol protocol) {\n+        super(ctx, encoder);\n+        this.protocol = requireNonNull(protocol, \"protocol\");\n+    }\n+\n+    @Override\n+    protected ChannelFuture doWriteHeaders(int id, int streamId, HttpHeaders headers, boolean endStream,\n+                                           HttpHeaders additionalHeaders, HttpHeaders additionalTrailers) {\n+        final Http2Connection conn = encoder().connection();\n+        final boolean isTrailer = !headers.contains(HttpHeaderNames.METHOD);\n+        final Http2Headers convertedHeaders;\n+\n+        if (isStreamPresentAndWritable(streamId)) {\n+            if (!isTrailer) {\n+                convertedHeaders = convertHeaders(headers, additionalHeaders, additionalTrailers);\n+            } else {\n+                convertedHeaders = convertTrailers(headers, additionalTrailers);\n+            }\n+            // Writing to an existing stream.\n+            return encoder().writeHeaders(ctx(), streamId, convertedHeaders, 0, endStream,\n+                                          ctx().newPromise());\n+        }\n+\n+        if (conn.local().mayHaveCreatedStream(streamId)) {\n+            // Stream has been closed.\n+            return newFailedFuture(ClosedStreamException.get());\n+        }\n+\n+        if (!isTrailer) {\n+            convertedHeaders = convertHeaders(headers, additionalHeaders, additionalTrailers);\n+        } else {\n+            convertedHeaders = convertTrailers(headers, additionalTrailers);\n+        }\n+\n+        // Client starts a new stream.\n+        return encoder().writeHeaders(ctx(), streamId, convertedHeaders, 0, endStream,\n+                                      ctx().newPromise());\n+    }\n+\n+    private Http2Headers convertHeaders(\n+            HttpHeaders inputHeaders, HttpHeaders additionalHeaders, HttpHeaders additionalTrailers) {\n+        final Http2Headers outputHeaders =\n+                ArmeriaHttpUtil.toNettyHttp2Client(inputHeaders, additionalHeaders, additionalTrailers, false);\n+\n+        if (!outputHeaders.contains(HttpHeaderNames.USER_AGENT)) {\n+            outputHeaders.add(HttpHeaderNames.USER_AGENT, HttpHeaderUtil.USER_AGENT.toString());\n+        }\n+\n+        if (!outputHeaders.contains(HttpHeaderNames.SCHEME)) {\n+            outputHeaders.scheme(protocol.isTls() ? SessionProtocol.HTTPS.uriText()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzODg2Mg=="}, "originalCommit": {"oid": "59e88e87c0c81fed094a8e6154e6c148bc27f598"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzkyMTI1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/ServerHttp1ObjectEncoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjo0NjoyNFrOFvG05A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMjoyNToxM1rOFwEj4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzOTIzNg==", "bodyText": "Could be armeria.internal.server", "url": "https://github.com/line/armeria/pull/2372#discussion_r384939236", "createdAt": "2020-02-27T06:46:24Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/ServerHttp1ObjectEncoder.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59e88e87c0c81fed094a8e6154e6c148bc27f598"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk1MDY4OQ==", "bodyText": "Moved ServerHttp1ObjectEncoder, ServerHttp2ObjectEncoder to armeria.internal.server package.\nAnd also moved ClientHttp1ObjectEncoder, ClientHttp2ObjectEncoder to armeria.internal.client.", "url": "https://github.com/line/armeria/pull/2372#discussion_r385950689", "createdAt": "2020-02-28T22:25:13Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/ServerHttp1ObjectEncoder.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzOTIzNg=="}, "originalCommit": {"oid": "59e88e87c0c81fed094a8e6154e6c148bc27f598"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzkyMTc5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/ServerHttp2ObjectEncoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjo0NjozOVrOFvG1MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjo0NjozOVrOFvG1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzOTMxMg==", "bodyText": "Ditto", "url": "https://github.com/line/armeria/pull/2372#discussion_r384939312", "createdAt": "2020-02-27T06:46:39Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/ServerHttp2ObjectEncoder.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59e88e87c0c81fed094a8e6154e6c148bc27f598"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzkzOTM2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjo1Njo1MFrOFvG_9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxMjo0Nzo0OFrOFwJKrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk0MjA2OA==", "bodyText": "It seems weird to me that the write0 is called with HttpData and trailers(even though it's empty.)\nHow about just inlining write0 method? We can extract the common part to another method then. \ud83e\udd14", "url": "https://github.com/line/armeria/pull/2372#discussion_r384942068", "createdAt": "2020-02-27T06:56:50Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "diffHunk": "@@ -292,10 +232,10 @@ private void write(HttpObject o, boolean endOfStream, boolean flush) {\n             state = State.DONE;\n         }\n \n-        write0(o, endOfStream, flush);\n+        write0(o, endOfStream, flush, HttpHeaders.of());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59e88e87c0c81fed094a8e6154e6c148bc27f598"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyNjE1Ng==", "bodyText": "I inlined write0() and extracted some common lines to another method. PTAL.", "url": "https://github.com/line/armeria/pull/2372#discussion_r386026156", "createdAt": "2020-02-29T12:47:48Z", "author": {"login": "jyblue"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "diffHunk": "@@ -292,10 +232,10 @@ private void write(HttpObject o, boolean endOfStream, boolean flush) {\n             state = State.DONE;\n         }\n \n-        write0(o, endOfStream, flush);\n+        write0(o, endOfStream, flush, HttpHeaders.of());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk0MjA2OA=="}, "originalCommit": {"oid": "59e88e87c0c81fed094a8e6154e6c148bc27f598"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTg0NTM3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/Http1ObjectEncoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDoxODoxN1rOFyVN-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDoxODoxN1rOFyVN-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMyMDc2Mw==", "bodyText": "Please make all protected methods in this class final if possible.", "url": "https://github.com/line/armeria/pull/2372#discussion_r388320763", "createdAt": "2020-03-05T14:18:17Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/Http1ObjectEncoder.java", "diffHunk": "@@ -38,30 +35,19 @@\n import io.netty.channel.ChannelFuture;\n import io.netty.channel.ChannelFutureListener;\n import io.netty.channel.ChannelPromise;\n-import io.netty.handler.codec.http.DefaultFullHttpResponse;\n import io.netty.handler.codec.http.DefaultHttpContent;\n-import io.netty.handler.codec.http.DefaultHttpRequest;\n-import io.netty.handler.codec.http.DefaultHttpResponse;\n import io.netty.handler.codec.http.DefaultLastHttpContent;\n import io.netty.handler.codec.http.HttpContent;\n-import io.netty.handler.codec.http.HttpHeaderValues;\n-import io.netty.handler.codec.http.HttpMessage;\n-import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http.HttpHeaders;\n import io.netty.handler.codec.http.HttpObject;\n-import io.netty.handler.codec.http.HttpRequest;\n-import io.netty.handler.codec.http.HttpResponse;\n-import io.netty.handler.codec.http.HttpResponseStatus;\n-import io.netty.handler.codec.http.HttpUtil;\n-import io.netty.handler.codec.http.HttpVersion;\n import io.netty.handler.codec.http.LastHttpContent;\n import io.netty.handler.codec.http2.Http2Error;\n-import io.netty.handler.codec.http2.Http2Exception;\n import io.netty.handler.codec.http2.HttpConversionUtil.ExtensionHeaderNames;\n import io.netty.util.ReferenceCountUtil;\n import io.netty.util.collection.IntObjectHashMap;\n import io.netty.util.collection.IntObjectMap;\n \n-public final class Http1ObjectEncoder extends HttpObjectEncoder {\n+public abstract class Http1ObjectEncoder extends HttpObjectEncoder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edad787c4db66b736258527dcb2605601b30b8ae"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTg0NzM2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/common/Http2ObjectEncoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDoxODo0NVrOFyVPIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDoxODo0NVrOFyVPIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMyMTA1Ng==", "bodyText": "Please make all protected methods in this class final if possible.", "url": "https://github.com/line/armeria/pull/2372#discussion_r388321056", "createdAt": "2020-03-05T14:18:45Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/common/Http2ObjectEncoder.java", "diffHunk": "@@ -19,25 +19,22 @@\n import static java.util.Objects.requireNonNull;\n \n import com.linecorp.armeria.common.HttpData;\n-import com.linecorp.armeria.common.HttpHeaders;\n import com.linecorp.armeria.common.stream.ClosedStreamException;\n \n import io.netty.buffer.Unpooled;\n import io.netty.channel.Channel;\n import io.netty.channel.ChannelFuture;\n import io.netty.channel.ChannelHandlerContext;\n-import io.netty.handler.codec.http2.Http2Connection;\n import io.netty.handler.codec.http2.Http2ConnectionEncoder;\n import io.netty.handler.codec.http2.Http2Error;\n import io.netty.handler.codec.http2.Http2Stream;\n import io.netty.util.ReferenceCountUtil;\n \n-public final class Http2ObjectEncoder extends HttpObjectEncoder {\n-\n+public abstract class Http2ObjectEncoder extends HttpObjectEncoder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edad787c4db66b736258527dcb2605601b30b8ae"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjA5MjY2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/internal/client/ClientHttp1ObjectEncoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwODoyNDoxOFrOF1U7ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwODoyNDoxOFrOF1U7ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2MTgyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return  lastContent;\n          \n          \n            \n                    return lastContent;", "url": "https://github.com/line/armeria/pull/2372#discussion_r391461827", "createdAt": "2020-03-12T08:24:18Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/client/ClientHttp1ObjectEncoder.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.client;\n+\n+import java.net.InetSocketAddress;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.internal.common.ArmeriaHttpUtil;\n+import com.linecorp.armeria.internal.common.Http1ObjectEncoder;\n+\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.handler.codec.http.DefaultHttpRequest;\n+import io.netty.handler.codec.http.DefaultLastHttpContent;\n+import io.netty.handler.codec.http.HttpHeaderValues;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http.HttpObject;\n+import io.netty.handler.codec.http.HttpRequest;\n+import io.netty.handler.codec.http.HttpUtil;\n+import io.netty.handler.codec.http.HttpVersion;\n+import io.netty.handler.codec.http.LastHttpContent;\n+import io.netty.handler.codec.http2.Http2Exception;\n+\n+public final class ClientHttp1ObjectEncoder extends Http1ObjectEncoder {\n+    public ClientHttp1ObjectEncoder(Channel ch, SessionProtocol protocol) {\n+        super(ch, protocol);\n+    }\n+\n+    @Override\n+    protected ChannelFuture doWriteHeaders(int id, int streamId, HttpHeaders headers, boolean endStream,\n+                                           HttpHeaders additionalHeaders, HttpHeaders additionalTrailers) {\n+        if (!isWritable(id)) {\n+            return newClosedSessionFuture();\n+        }\n+\n+        try {\n+            final HttpObject converted;\n+            final String method = headers.get(HttpHeaderNames.METHOD);\n+            if (method == null) {\n+                converted = convertTrailers(streamId, headers);\n+            } else {\n+                converted = convertHeaders(streamId, headers, endStream, additionalHeaders);\n+            }\n+            return writeNonInformationalHeaders(id, converted, endStream);\n+        } catch (Throwable t) {\n+            return newFailedFuture(t);\n+        }\n+    }\n+\n+    private static LastHttpContent convertTrailers(int streamId, HttpHeaders inHeaders) throws Http2Exception {\n+        if (inHeaders.isEmpty()) {\n+            return LastHttpContent.EMPTY_LAST_CONTENT;\n+        }\n+        final LastHttpContent lastContent = new DefaultLastHttpContent(Unpooled.EMPTY_BUFFER, false);\n+\n+        ArmeriaHttpUtil.toNettyHttp1ClientTrailer(streamId, inHeaders, lastContent.trailingHeaders());\n+\n+        removeHttpExtensionHeaders(lastContent.trailingHeaders());\n+        return  lastContent;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3136f3185cd7bd0321308b0db8262e15e710224a"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2861, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}