{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM3ODY4MzAw", "number": 3219, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMzozNzowOFrOFEyTcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNDo1Njo1NVrOFEzVOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTYyODAwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/RequestContextWrapper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMzozNzowOFrOIE-iXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNDoyMjowNlrOIE_SmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA4OTgyMA==", "bodyText": "Would you pull up isCancelled() and isTimedOut() too?", "url": "https://github.com/line/armeria/pull/3219#discussion_r542089820", "createdAt": "2020-12-14T03:37:08Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/RequestContextWrapper.java", "diffHunk": "@@ -183,6 +183,27 @@ public MeterRegistry meterRegistry() {\n         return delegate().meterRegistry();\n     }\n \n+    @Override\n+    public void cancel(Throwable cause) {\n+        delegate().cancel(cause);\n+    }\n+\n+    @Override\n+    public void cancel() {\n+        delegate().cancel();\n+    }\n+\n+    @Override\n+    public void timeoutNow() {\n+        delegate().timeoutNow();\n+    }\n+\n+    @Override\n+    @Nullable\n+    public Throwable cancellationCause() {\n+        return delegate().cancellationCause();\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3050b80f31d8e8fd6e168ee3ff71f41c44585917"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwMDQxNw==", "bodyText": "Don't think we need to since they're implemented as default methods.", "url": "https://github.com/line/armeria/pull/3219#discussion_r542100417", "createdAt": "2020-12-14T04:15:31Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/RequestContextWrapper.java", "diffHunk": "@@ -183,6 +183,27 @@ public MeterRegistry meterRegistry() {\n         return delegate().meterRegistry();\n     }\n \n+    @Override\n+    public void cancel(Throwable cause) {\n+        delegate().cancel(cause);\n+    }\n+\n+    @Override\n+    public void cancel() {\n+        delegate().cancel();\n+    }\n+\n+    @Override\n+    public void timeoutNow() {\n+        delegate().timeoutNow();\n+    }\n+\n+    @Override\n+    @Nullable\n+    public Throwable cancellationCause() {\n+        return delegate().cancellationCause();\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA4OTgyMA=="}, "originalCommit": {"oid": "3050b80f31d8e8fd6e168ee3ff71f41c44585917"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwMjE2OQ==", "bodyText": "Ah... OK \ud83d\ude05", "url": "https://github.com/line/armeria/pull/3219#discussion_r542102169", "createdAt": "2020-12-14T04:22:06Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/RequestContextWrapper.java", "diffHunk": "@@ -183,6 +183,27 @@ public MeterRegistry meterRegistry() {\n         return delegate().meterRegistry();\n     }\n \n+    @Override\n+    public void cancel(Throwable cause) {\n+        delegate().cancel(cause);\n+    }\n+\n+    @Override\n+    public void cancel() {\n+        delegate().cancel();\n+    }\n+\n+    @Override\n+    public void timeoutNow() {\n+        delegate().timeoutNow();\n+    }\n+\n+    @Override\n+    @Nullable\n+    public Throwable cancellationCause() {\n+        return delegate().cancellationCause();\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA4OTgyMA=="}, "originalCommit": {"oid": "3050b80f31d8e8fd6e168ee3ff71f41c44585917"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTc1NDgxOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/common/RequestContextWrapperTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNDozNzowNVrOIE_i1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNDo0Mzo1NFrOIE_qAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwNjMyNw==", "bodyText": "Is the behavior of usingRecursiveComparison() documented somewhere? How does it select the methods to call and compare the return values?", "url": "https://github.com/line/armeria/pull/3219#discussion_r542106327", "createdAt": "2020-12-14T04:37:05Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/common/RequestContextWrapperTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.errorprone.annotations.MustBeClosed;\n+\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+class RequestContextWrapperTest {\n+\n+    private static final class WrappedRequestContext extends RequestContextWrapper<RequestContext> {\n+        private WrappedRequestContext(RequestContext delegate) {\n+            super(delegate);\n+        }\n+\n+        // Most wrappers will not want to push the delegate so we don't provide a default implementation of it.\n+        @Override\n+        @MustBeClosed\n+        public SafeCloseable push() {\n+            return delegate().push();\n+        }\n+    }\n+\n+    @Test\n+    void wrapMatchesNormal() {\n+        final RequestContext ctx = ServiceRequestContext.builder(HttpRequest.of(HttpMethod.GET, \"/\")).build();\n+        // Use reflective comparison to handle added fields automatically.\n+        assertThat(new WrappedRequestContext(ctx)).usingRecursiveComparison().ignoringFields(\"delegate\")\n+                                                  .isEqualTo(ctx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3050b80f31d8e8fd6e168ee3ff71f41c44585917"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwODE2Mw==", "bodyText": "Thanks! Found documentation at https://assertj.github.io/doc/#assertj-core-recursive-comparison and realized that I needed to set a configuration to allow it to extract Armeria properties - it looks at fields, normal bean-style getters, or with the configuration, non-bean style getters.", "url": "https://github.com/line/armeria/pull/3219#discussion_r542108163", "createdAt": "2020-12-14T04:43:54Z", "author": {"login": "anuraaga"}, "path": "core/src/test/java/com/linecorp/armeria/common/RequestContextWrapperTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.errorprone.annotations.MustBeClosed;\n+\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+class RequestContextWrapperTest {\n+\n+    private static final class WrappedRequestContext extends RequestContextWrapper<RequestContext> {\n+        private WrappedRequestContext(RequestContext delegate) {\n+            super(delegate);\n+        }\n+\n+        // Most wrappers will not want to push the delegate so we don't provide a default implementation of it.\n+        @Override\n+        @MustBeClosed\n+        public SafeCloseable push() {\n+            return delegate().push();\n+        }\n+    }\n+\n+    @Test\n+    void wrapMatchesNormal() {\n+        final RequestContext ctx = ServiceRequestContext.builder(HttpRequest.of(HttpMethod.GET, \"/\")).build();\n+        // Use reflective comparison to handle added fields automatically.\n+        assertThat(new WrappedRequestContext(ctx)).usingRecursiveComparison().ignoringFields(\"delegate\")\n+                                                  .isEqualTo(ctx);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwNjMyNw=="}, "originalCommit": {"oid": "3050b80f31d8e8fd6e168ee3ff71f41c44585917"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTc3MDU3OnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/com/linecorp/armeria/public_suffixes.txt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNDo0NDozOVrOIE_q4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNDo1MzoxMlrOIE_0AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwODM4NA==", "bodyText": "What's this file? It gets updated when I run the build", "url": "https://github.com/line/armeria/pull/3219#discussion_r542108384", "createdAt": "2020-12-14T04:44:39Z", "author": {"login": "anuraaga"}, "path": "core/src/main/resources/com/linecorp/armeria/public_suffixes.txt", "diffHunk": "@@ -986,7 +986,6 @@ boxfuse.io\n bozen-sudtirol.it", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abe19477d72eeb3c63310e8a94ca1a019688666a"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwOTEzOA==", "bodyText": "Me too \ud83d\ude05", "url": "https://github.com/line/armeria/pull/3219#discussion_r542109138", "createdAt": "2020-12-14T04:47:18Z", "author": {"login": "heowc"}, "path": "core/src/main/resources/com/linecorp/armeria/public_suffixes.txt", "diffHunk": "@@ -986,7 +986,6 @@ boxfuse.io\n bozen-sudtirol.it", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwODM4NA=="}, "originalCommit": {"oid": "abe19477d72eeb3c63310e8a94ca1a019688666a"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExMDcyMA==", "bodyText": "It's what's retrieved automatically from https://publicsuffix.org/ for handling cookies correctly.", "url": "https://github.com/line/armeria/pull/3219#discussion_r542110720", "createdAt": "2020-12-14T04:53:12Z", "author": {"login": "trustin"}, "path": "core/src/main/resources/com/linecorp/armeria/public_suffixes.txt", "diffHunk": "@@ -986,7 +986,6 @@ boxfuse.io\n bozen-sudtirol.it", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwODM4NA=="}, "originalCommit": {"oid": "abe19477d72eeb3c63310e8a94ca1a019688666a"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTc5NjQxOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/common/RequestContextWrapperTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNDo1Njo1NVrOIE_4BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNTowMzo0MFrOIE__QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExMTc0OQ==", "bodyText": "How about reverting back to the old value once this test is done? Otherwise we'll have to do this in the beginning of all tests for build reproducibility?", "url": "https://github.com/line/armeria/pull/3219#discussion_r542111749", "createdAt": "2020-12-14T04:56:55Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/common/RequestContextWrapperTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.errorprone.annotations.MustBeClosed;\n+\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+class RequestContextWrapperTest {\n+\n+    static {\n+        // Armeria properties use bare names.\n+        Assertions.setExtractBareNamePropertyMethods(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abe19477d72eeb3c63310e8a94ca1a019688666a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExMjI5OQ==", "bodyText": "Not sure - I figured it doesn't hurt to call it many times anyways in Armeria tests since Armeria uses bare name properties everywhere.", "url": "https://github.com/line/armeria/pull/3219#discussion_r542112299", "createdAt": "2020-12-14T04:58:53Z", "author": {"login": "anuraaga"}, "path": "core/src/test/java/com/linecorp/armeria/common/RequestContextWrapperTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.errorprone.annotations.MustBeClosed;\n+\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+class RequestContextWrapperTest {\n+\n+    static {\n+        // Armeria properties use bare names.\n+        Assertions.setExtractBareNamePropertyMethods(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExMTc0OQ=="}, "originalCommit": {"oid": "abe19477d72eeb3c63310e8a94ca1a019688666a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExMzYwMQ==", "bodyText": "Ah, yeah. Fine as long as future test cases call this when they use usingRecursiveComparison.", "url": "https://github.com/line/armeria/pull/3219#discussion_r542113601", "createdAt": "2020-12-14T05:03:40Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/common/RequestContextWrapperTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.errorprone.annotations.MustBeClosed;\n+\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+class RequestContextWrapperTest {\n+\n+    static {\n+        // Armeria properties use bare names.\n+        Assertions.setExtractBareNamePropertyMethods(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExMTc0OQ=="}, "originalCommit": {"oid": "abe19477d72eeb3c63310e8a94ca1a019688666a"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1796, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}