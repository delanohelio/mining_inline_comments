{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NTUxNTgz", "number": 2435, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMjoxNzo1NFrODcOC_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzo0MDo1MlrODdjgtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTE2ODYyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpStatus.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMjoxNzo1NFrOFkJu9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQyMTo0NDoyNVrOFkfMVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ1MjUzNQ==", "bodyText": "As I mentioned in the issue I don't find a lot of use in specifying client vs server, or convenience for information, which is so rare. But this is non-blocking and happy with what others think", "url": "https://github.com/line/armeria/pull/2435#discussion_r373452535", "createdAt": "2020-01-31T12:17:54Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpStatus.java", "diffHunk": "@@ -491,6 +491,31 @@ public boolean isContentAlwaysEmpty() {\n         return isContentAlwaysEmpty(code);\n     }\n \n+    /** Returns whether the {@link HttpStatus} is an information, with a status code of 1XX. */\n+    public boolean isInformation() {\n+        return codeClass().equals(HttpStatusClass.INFORMATIONAL);\n+    }\n+\n+    /** Returns whether the {@link HttpStatus} is a success, with a status code of 2XX. */\n+    public boolean isSuccess() {\n+        return codeClass().equals(HttpStatusClass.SUCCESS);\n+    }\n+\n+    /** Returns whether the {@link HttpStatus} is a redirection, with a status code of 3XX. */\n+    public boolean isRedirection() {\n+        return codeClass().equals(HttpStatusClass.REDIRECTION);\n+    }\n+\n+    /** Returns whether the {@link HttpStatus} is a client error, with a status code of 4XX. */\n+    public boolean isClientError() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b67f987f6f974784c6e9288e2af5edfa04b7a2c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ1OTY1Ng==", "bodyText": "I think it's OK to have all of is{Error,ServerError,ClientError}.", "url": "https://github.com/line/armeria/pull/2435#discussion_r373459656", "createdAt": "2020-01-31T12:38:51Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpStatus.java", "diffHunk": "@@ -491,6 +491,31 @@ public boolean isContentAlwaysEmpty() {\n         return isContentAlwaysEmpty(code);\n     }\n \n+    /** Returns whether the {@link HttpStatus} is an information, with a status code of 1XX. */\n+    public boolean isInformation() {\n+        return codeClass().equals(HttpStatusClass.INFORMATIONAL);\n+    }\n+\n+    /** Returns whether the {@link HttpStatus} is a success, with a status code of 2XX. */\n+    public boolean isSuccess() {\n+        return codeClass().equals(HttpStatusClass.SUCCESS);\n+    }\n+\n+    /** Returns whether the {@link HttpStatus} is a redirection, with a status code of 3XX. */\n+    public boolean isRedirection() {\n+        return codeClass().equals(HttpStatusClass.REDIRECTION);\n+    }\n+\n+    /** Returns whether the {@link HttpStatus} is a client error, with a status code of 4XX. */\n+    public boolean isClientError() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ1MjUzNQ=="}, "originalCommit": {"oid": "1b67f987f6f974784c6e9288e2af5edfa04b7a2c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUyNTUyNw==", "bodyText": "@mercanil I think you omitted the isError method. It could be\nboolean isError() {\n\treturn isClientError() || isServerError();\n}", "url": "https://github.com/line/armeria/pull/2435#discussion_r373525527", "createdAt": "2020-01-31T15:04:54Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpStatus.java", "diffHunk": "@@ -491,6 +491,31 @@ public boolean isContentAlwaysEmpty() {\n         return isContentAlwaysEmpty(code);\n     }\n \n+    /** Returns whether the {@link HttpStatus} is an information, with a status code of 1XX. */\n+    public boolean isInformation() {\n+        return codeClass().equals(HttpStatusClass.INFORMATIONAL);\n+    }\n+\n+    /** Returns whether the {@link HttpStatus} is a success, with a status code of 2XX. */\n+    public boolean isSuccess() {\n+        return codeClass().equals(HttpStatusClass.SUCCESS);\n+    }\n+\n+    /** Returns whether the {@link HttpStatus} is a redirection, with a status code of 3XX. */\n+    public boolean isRedirection() {\n+        return codeClass().equals(HttpStatusClass.REDIRECTION);\n+    }\n+\n+    /** Returns whether the {@link HttpStatus} is a client error, with a status code of 4XX. */\n+    public boolean isClientError() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ1MjUzNQ=="}, "originalCommit": {"oid": "1b67f987f6f974784c6e9288e2af5edfa04b7a2c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUzMjc2Nw==", "bodyText": "Thank you for suggestion @ikhoon but being more specific would be better. I prefer to keep as is.", "url": "https://github.com/line/armeria/pull/2435#discussion_r373532767", "createdAt": "2020-01-31T15:18:49Z", "author": {"login": "mercanil"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpStatus.java", "diffHunk": "@@ -491,6 +491,31 @@ public boolean isContentAlwaysEmpty() {\n         return isContentAlwaysEmpty(code);\n     }\n \n+    /** Returns whether the {@link HttpStatus} is an information, with a status code of 1XX. */\n+    public boolean isInformation() {\n+        return codeClass().equals(HttpStatusClass.INFORMATIONAL);\n+    }\n+\n+    /** Returns whether the {@link HttpStatus} is a success, with a status code of 2XX. */\n+    public boolean isSuccess() {\n+        return codeClass().equals(HttpStatusClass.SUCCESS);\n+    }\n+\n+    /** Returns whether the {@link HttpStatus} is a redirection, with a status code of 3XX. */\n+    public boolean isRedirection() {\n+        return codeClass().equals(HttpStatusClass.REDIRECTION);\n+    }\n+\n+    /** Returns whether the {@link HttpStatus} is a client error, with a status code of 4XX. */\n+    public boolean isClientError() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ1MjUzNQ=="}, "originalCommit": {"oid": "1b67f987f6f974784c6e9288e2af5edfa04b7a2c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NTgxMw==", "bodyText": "I'd prefer to have isError() for convenience. \ud83d\ude4f", "url": "https://github.com/line/armeria/pull/2435#discussion_r373755813", "createdAt": "2020-02-01T03:58:21Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpStatus.java", "diffHunk": "@@ -491,6 +491,31 @@ public boolean isContentAlwaysEmpty() {\n         return isContentAlwaysEmpty(code);\n     }\n \n+    /** Returns whether the {@link HttpStatus} is an information, with a status code of 1XX. */\n+    public boolean isInformation() {\n+        return codeClass().equals(HttpStatusClass.INFORMATIONAL);\n+    }\n+\n+    /** Returns whether the {@link HttpStatus} is a success, with a status code of 2XX. */\n+    public boolean isSuccess() {\n+        return codeClass().equals(HttpStatusClass.SUCCESS);\n+    }\n+\n+    /** Returns whether the {@link HttpStatus} is a redirection, with a status code of 3XX. */\n+    public boolean isRedirection() {\n+        return codeClass().equals(HttpStatusClass.REDIRECTION);\n+    }\n+\n+    /** Returns whether the {@link HttpStatus} is a client error, with a status code of 4XX. */\n+    public boolean isClientError() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ1MjUzNQ=="}, "originalCommit": {"oid": "1b67f987f6f974784c6e9288e2af5edfa04b7a2c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgwNDExNg==", "bodyText": "added isError() method. Thanks for advice.", "url": "https://github.com/line/armeria/pull/2435#discussion_r373804116", "createdAt": "2020-02-01T21:44:25Z", "author": {"login": "mercanil"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpStatus.java", "diffHunk": "@@ -491,6 +491,31 @@ public boolean isContentAlwaysEmpty() {\n         return isContentAlwaysEmpty(code);\n     }\n \n+    /** Returns whether the {@link HttpStatus} is an information, with a status code of 1XX. */\n+    public boolean isInformation() {\n+        return codeClass().equals(HttpStatusClass.INFORMATIONAL);\n+    }\n+\n+    /** Returns whether the {@link HttpStatus} is a success, with a status code of 2XX. */\n+    public boolean isSuccess() {\n+        return codeClass().equals(HttpStatusClass.SUCCESS);\n+    }\n+\n+    /** Returns whether the {@link HttpStatus} is a redirection, with a status code of 3XX. */\n+    public boolean isRedirection() {\n+        return codeClass().equals(HttpStatusClass.REDIRECTION);\n+    }\n+\n+    /** Returns whether the {@link HttpStatus} is a client error, with a status code of 4XX. */\n+    public boolean isClientError() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ1MjUzNQ=="}, "originalCommit": {"oid": "1b67f987f6f974784c6e9288e2af5edfa04b7a2c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTE4MDM4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpStatus.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMjoyMjo1OFrOFkJ1zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMjoyMjo1OFrOFkJ1zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ1NDI4NA==", "bodyText": "Could you use multiple line comments?\n/**\n * Returns whether ...\n */", "url": "https://github.com/line/armeria/pull/2435#discussion_r373454284", "createdAt": "2020-01-31T12:22:58Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpStatus.java", "diffHunk": "@@ -491,6 +491,31 @@ public boolean isContentAlwaysEmpty() {\n         return isContentAlwaysEmpty(code);\n     }\n \n+    /** Returns whether the {@link HttpStatus} is an information, with a status code of 1XX. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b67f987f6f974784c6e9288e2af5edfa04b7a2c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTIxNTA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpStatus.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMjozOToxN1rOFkKLUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMjozOToxN1rOFkKLUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ1OTc5NA==", "bodyText": "isInformational", "url": "https://github.com/line/armeria/pull/2435#discussion_r373459794", "createdAt": "2020-01-31T12:39:17Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpStatus.java", "diffHunk": "@@ -491,6 +491,31 @@ public boolean isContentAlwaysEmpty() {\n         return isContentAlwaysEmpty(code);\n     }\n \n+    /** Returns whether the {@link HttpStatus} is an information, with a status code of 1XX. */\n+    public boolean isInformation() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b67f987f6f974784c6e9288e2af5edfa04b7a2c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTU5NjA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpStatus.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwNjoyNTo1OVrOFkgUtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwNjoyNTo1OVrOFkgUtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyMjY0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return isClientError() || isClientError();\n          \n          \n            \n                    return isClientError() || isServerError();", "url": "https://github.com/line/armeria/pull/2435#discussion_r373822647", "createdAt": "2020-02-02T06:25:59Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpStatus.java", "diffHunk": "@@ -491,6 +491,48 @@ public boolean isContentAlwaysEmpty() {\n         return isContentAlwaysEmpty(code);\n     }\n \n+    /**\n+     * Returns whether the {@link HttpStatus} is an information, with a status code of 1XX.\n+     */\n+    public boolean isInformational() {\n+        return codeClass().equals(HttpStatusClass.INFORMATIONAL);\n+    }\n+\n+    /**\n+     * Returns whether the {@link HttpStatus} is a success, with a status code of 2XX.\n+     */\n+    public boolean isSuccess() {\n+        return codeClass().equals(HttpStatusClass.SUCCESS);\n+    }\n+\n+    /**\n+     * Returns whether the {@link HttpStatus} is a redirection, with a status code of 3XX.\n+     */\n+    public boolean isRedirection() {\n+        return codeClass().equals(HttpStatusClass.REDIRECTION);\n+    }\n+\n+    /**\n+     *  Returns whether the {@link HttpStatus} is a client error, with a status code of 4XX.\n+     */\n+    public boolean isClientError() {\n+        return codeClass().equals(HttpStatusClass.CLIENT_ERROR);\n+    }\n+\n+    /**\n+     * Returns whether the {@link HttpStatus} is a server error, with a status code of 5XX.\n+     */\n+    public boolean isServerError() {\n+        return codeClass().equals(HttpStatusClass.SERVER_ERROR);\n+    }\n+\n+    /**\n+     * Returns whether the {@link HttpStatus} is an error\n+     */\n+    public boolean isError(){\n+        return isClientError() || isClientError();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd5a6a6a531f7b9ab7376f63cd7ff4265685b36c"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDY4MzM5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/common/HttpStatusTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjo0MjoyMVrOFl2YcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzo0MzoyM1rOFl4ILw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzMjYyNQ==", "bodyText": "I don't think you really need a real server to test the behavior of the methods you added. How about removing this ServerExtension and just adding some simple tests like the following?\n@Test\nvoid isSuccess() {\n    assertThat(HttpStatus.valueOf(199).isSuccess()).isFalse();\n    assertThat(HttpStatus.valueOf(200).isSuccess()).isTrue();\n    assertThat(HttpStatus.valueOf(299).isSuccess()).isTrue();\n    assertThat(HttpStatus.valueOf(300).isSuccess()).isFalse();\n}\n\n...", "url": "https://github.com/line/armeria/pull/2435#discussion_r375232625", "createdAt": "2020-02-05T12:42:21Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/common/HttpStatusTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2019 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.server.AbstractHttpService;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.testing.junit.server.ServerExtension;\n+\n+class HttpStatusTest {\n+\n+    @RegisterExtension\n+    public static final ServerExtension server = new ServerExtension() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41fb3437f632c9bb96985d7300df3919b3bb4112"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI2MTIzMQ==", "bodyText": "Hi Trustin. Simple and better. I will update my PR. Thanks for suggestion", "url": "https://github.com/line/armeria/pull/2435#discussion_r375261231", "createdAt": "2020-02-05T13:43:23Z", "author": {"login": "mercanil"}, "path": "core/src/test/java/com/linecorp/armeria/common/HttpStatusTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2019 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.server.AbstractHttpService;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.testing.junit.server.ServerExtension;\n+\n+class HttpStatusTest {\n+\n+    @RegisterExtension\n+    public static final ServerExtension server = new ServerExtension() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzMjYyNQ=="}, "originalCommit": {"oid": "41fb3437f632c9bb96985d7300df3919b3bb4112"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzE2NzE4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpStatus.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzozNzoxN1rOFmOaaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzozNzoxN1rOFmOaaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNjM0NQ==", "bodyText": "This may be more efficient:\nreturn HttpStatusClass.INFORMATIONAL.contains(code);", "url": "https://github.com/line/armeria/pull/2435#discussion_r375626345", "createdAt": "2020-02-06T03:37:17Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpStatus.java", "diffHunk": "@@ -491,6 +492,48 @@ public boolean isContentAlwaysEmpty() {\n         return isContentAlwaysEmpty(code);\n     }\n \n+    /**\n+     * Returns whether the {@link HttpStatus} is an information, with a status code of 1XX.\n+     */\n+    public boolean isInformational() {\n+        return codeClass().equals(HttpStatusClass.INFORMATIONAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9df367acf9c0be3470deae71d6d843e9728cee90"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzE2ODY0OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/common/HttpStatusTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzozODozN1rOFmObSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzozODozN1rOFmObSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNjU2OQ==", "bodyText": "Could also add the following to ensure off-by-one cases:\nassertThat(HttpStatus.valueOf(99).isInformational()).isFalse();", "url": "https://github.com/line/armeria/pull/2435#discussion_r375626569", "createdAt": "2020-02-06T03:38:37Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/common/HttpStatusTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2019 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class HttpStatusTest {\n+    @Test\n+    void statusIsInformationIfStatusCode2XX() {\n+        assertThat(HttpStatus.valueOf(100).isInformational()).isTrue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9df367acf9c0be3470deae71d6d843e9728cee90"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzE2ODg1OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/common/HttpStatusTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzozODo1NVrOFmObbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzozODo1NVrOFmObbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNjYwNQ==", "bodyText": "Could also add the following to ensure off-by-one cases:\nassertThat(HttpStatus.valueOf(199).isSuccess()).isFalse();", "url": "https://github.com/line/armeria/pull/2435#discussion_r375626605", "createdAt": "2020-02-06T03:38:55Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/common/HttpStatusTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2019 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class HttpStatusTest {\n+    @Test\n+    void statusIsInformationIfStatusCode2XX() {\n+        assertThat(HttpStatus.valueOf(100).isInformational()).isTrue();\n+        assertThat(HttpStatus.valueOf(199).isInformational()).isTrue();\n+        assertThat(HttpStatus.valueOf(200).isInformational()).isFalse();\n+        assertThat(HttpStatus.valueOf(300).isInformational()).isFalse();\n+        assertThat(HttpStatus.valueOf(400).isInformational()).isFalse();\n+        assertThat(HttpStatus.valueOf(500).isInformational()).isFalse();\n+    }\n+\n+    @Test\n+    void statusIsSuccessIfStatusCode2XX() {\n+        assertThat(HttpStatus.valueOf(100).isSuccess()).isFalse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9df367acf9c0be3470deae71d6d843e9728cee90"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzE2OTI5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/common/HttpStatusTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzozOToxMlrOFmObqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzozOToxMlrOFmObqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNjY2NA==", "bodyText": "Could also add the following to ensure off-by-one cases:\nassertThat(HttpStatus.valueOf(299).isRedirection()).isFalse();", "url": "https://github.com/line/armeria/pull/2435#discussion_r375626664", "createdAt": "2020-02-06T03:39:12Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/common/HttpStatusTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2019 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class HttpStatusTest {\n+    @Test\n+    void statusIsInformationIfStatusCode2XX() {\n+        assertThat(HttpStatus.valueOf(100).isInformational()).isTrue();\n+        assertThat(HttpStatus.valueOf(199).isInformational()).isTrue();\n+        assertThat(HttpStatus.valueOf(200).isInformational()).isFalse();\n+        assertThat(HttpStatus.valueOf(300).isInformational()).isFalse();\n+        assertThat(HttpStatus.valueOf(400).isInformational()).isFalse();\n+        assertThat(HttpStatus.valueOf(500).isInformational()).isFalse();\n+    }\n+\n+    @Test\n+    void statusIsSuccessIfStatusCode2XX() {\n+        assertThat(HttpStatus.valueOf(100).isSuccess()).isFalse();\n+        assertThat(HttpStatus.valueOf(200).isSuccess()).isTrue();\n+        assertThat(HttpStatus.valueOf(299).isSuccess()).isTrue();\n+        assertThat(HttpStatus.valueOf(300).isSuccess()).isFalse();\n+        assertThat(HttpStatus.valueOf(400).isSuccess()).isFalse();\n+        assertThat(HttpStatus.valueOf(500).isSuccess()).isFalse();\n+    }\n+\n+    @Test\n+    void statusIsRedirectionIfStatusCode3XX() {\n+        assertThat(HttpStatus.valueOf(100).isRedirection()).isFalse();\n+        assertThat(HttpStatus.valueOf(200).isRedirection()).isFalse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9df367acf9c0be3470deae71d6d843e9728cee90"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzE2OTcwOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/common/HttpStatusTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzozOTo0MFrOFmOb4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzozOTo0MFrOFmOb4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNjcyMw==", "bodyText": "Could also add the following to ensure off-by-one cases:\nassertThat(HttpStatus.valueOf(399).isClientError()).isFalse();\nassertThat(HttpStatus.valueOf(500).isClientError()).isFalse();\n\nAnd please use isClientError() for this tese case.", "url": "https://github.com/line/armeria/pull/2435#discussion_r375626723", "createdAt": "2020-02-06T03:39:40Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/common/HttpStatusTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2019 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class HttpStatusTest {\n+    @Test\n+    void statusIsInformationIfStatusCode2XX() {\n+        assertThat(HttpStatus.valueOf(100).isInformational()).isTrue();\n+        assertThat(HttpStatus.valueOf(199).isInformational()).isTrue();\n+        assertThat(HttpStatus.valueOf(200).isInformational()).isFalse();\n+        assertThat(HttpStatus.valueOf(300).isInformational()).isFalse();\n+        assertThat(HttpStatus.valueOf(400).isInformational()).isFalse();\n+        assertThat(HttpStatus.valueOf(500).isInformational()).isFalse();\n+    }\n+\n+    @Test\n+    void statusIsSuccessIfStatusCode2XX() {\n+        assertThat(HttpStatus.valueOf(100).isSuccess()).isFalse();\n+        assertThat(HttpStatus.valueOf(200).isSuccess()).isTrue();\n+        assertThat(HttpStatus.valueOf(299).isSuccess()).isTrue();\n+        assertThat(HttpStatus.valueOf(300).isSuccess()).isFalse();\n+        assertThat(HttpStatus.valueOf(400).isSuccess()).isFalse();\n+        assertThat(HttpStatus.valueOf(500).isSuccess()).isFalse();\n+    }\n+\n+    @Test\n+    void statusIsRedirectionIfStatusCode3XX() {\n+        assertThat(HttpStatus.valueOf(100).isRedirection()).isFalse();\n+        assertThat(HttpStatus.valueOf(200).isRedirection()).isFalse();\n+        assertThat(HttpStatus.valueOf(300).isRedirection()).isTrue();\n+        assertThat(HttpStatus.valueOf(399).isRedirection()).isTrue();\n+        assertThat(HttpStatus.valueOf(400).isRedirection()).isFalse();\n+        assertThat(HttpStatus.valueOf(500).isRedirection()).isFalse();\n+    }\n+\n+    @Test\n+    void statusIsErrorIfStatusCode4XX() {\n+        assertThat(HttpStatus.valueOf(100).isError()).isFalse();\n+        assertThat(HttpStatus.valueOf(200).isError()).isFalse();\n+        assertThat(HttpStatus.valueOf(300).isError()).isFalse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9df367acf9c0be3470deae71d6d843e9728cee90"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzE3MTExOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/common/HttpStatusTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzo0MDo1MlrOFmOcug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzo0MDo1MlrOFmOcug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNjkzOA==", "bodyText": "Ditto:\n\nplease handle off-by-one errors\nplease use isServerError()", "url": "https://github.com/line/armeria/pull/2435#discussion_r375626938", "createdAt": "2020-02-06T03:40:52Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/common/HttpStatusTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2019 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class HttpStatusTest {\n+    @Test\n+    void statusIsInformationIfStatusCode2XX() {\n+        assertThat(HttpStatus.valueOf(100).isInformational()).isTrue();\n+        assertThat(HttpStatus.valueOf(199).isInformational()).isTrue();\n+        assertThat(HttpStatus.valueOf(200).isInformational()).isFalse();\n+        assertThat(HttpStatus.valueOf(300).isInformational()).isFalse();\n+        assertThat(HttpStatus.valueOf(400).isInformational()).isFalse();\n+        assertThat(HttpStatus.valueOf(500).isInformational()).isFalse();\n+    }\n+\n+    @Test\n+    void statusIsSuccessIfStatusCode2XX() {\n+        assertThat(HttpStatus.valueOf(100).isSuccess()).isFalse();\n+        assertThat(HttpStatus.valueOf(200).isSuccess()).isTrue();\n+        assertThat(HttpStatus.valueOf(299).isSuccess()).isTrue();\n+        assertThat(HttpStatus.valueOf(300).isSuccess()).isFalse();\n+        assertThat(HttpStatus.valueOf(400).isSuccess()).isFalse();\n+        assertThat(HttpStatus.valueOf(500).isSuccess()).isFalse();\n+    }\n+\n+    @Test\n+    void statusIsRedirectionIfStatusCode3XX() {\n+        assertThat(HttpStatus.valueOf(100).isRedirection()).isFalse();\n+        assertThat(HttpStatus.valueOf(200).isRedirection()).isFalse();\n+        assertThat(HttpStatus.valueOf(300).isRedirection()).isTrue();\n+        assertThat(HttpStatus.valueOf(399).isRedirection()).isTrue();\n+        assertThat(HttpStatus.valueOf(400).isRedirection()).isFalse();\n+        assertThat(HttpStatus.valueOf(500).isRedirection()).isFalse();\n+    }\n+\n+    @Test\n+    void statusIsErrorIfStatusCode4XX() {\n+        assertThat(HttpStatus.valueOf(100).isError()).isFalse();\n+        assertThat(HttpStatus.valueOf(200).isError()).isFalse();\n+        assertThat(HttpStatus.valueOf(300).isError()).isFalse();\n+        assertThat(HttpStatus.valueOf(400).isError()).isTrue();\n+        assertThat(HttpStatus.valueOf(499).isError()).isTrue();\n+    }\n+\n+    @Test\n+    void statusIsErrorIfStatusCode5XX() {\n+        assertThat(HttpStatus.valueOf(100).isError()).isFalse();\n+        assertThat(HttpStatus.valueOf(200).isError()).isFalse();\n+        assertThat(HttpStatus.valueOf(300).isError()).isFalse();\n+        assertThat(HttpStatus.valueOf(500).isError()).isTrue();\n+        assertThat(HttpStatus.valueOf(599).isError()).isTrue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9df367acf9c0be3470deae71d6d843e9728cee90"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2952, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}