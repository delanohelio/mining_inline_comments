{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExNDYxODQ4", "number": 3144, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMjowMDo0NlrOEyxzlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMzo1NjozMlrOEzG4nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjgwMjc4OnYy", "diffSide": "RIGHT", "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/HealthCheckServiceConfigurator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMjowMDo0NlrOHpmq1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo0ODozMlrOHpq6jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM4NzIyMA==", "bodyText": "Other Armeria configurators for Spring do not extend Ordered.\nDo we need to apply Ordered to others?\nAny thought? @heowc", "url": "https://github.com/line/armeria/pull/3144#discussion_r513387220", "createdAt": "2020-10-28T12:00:46Z", "author": {"login": "ikhoon"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/HealthCheckServiceConfigurator.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.annotation.AnnotationAwareOrderComparator;\n+import org.springframework.core.annotation.Order;\n+\n+import com.linecorp.armeria.server.healthcheck.HealthCheckService;\n+import com.linecorp.armeria.server.healthcheck.HealthCheckServiceBuilder;\n+\n+/**\n+ * Interface used to configure a {@link HealthCheckService} on the default armeria server.\n+ */\n+@FunctionalInterface\n+public interface HealthCheckServiceConfigurator extends Ordered {\n+\n+    /**\n+     * Configures the {@link HealthCheckService} using the specified {@link HealthCheckServiceBuilder}.\n+     */\n+    void configure(HealthCheckServiceBuilder healthCheckServiceBuilder);\n+\n+    /**\n+     * Returns the evaluation order of this configurator. A user can specify the order with an {@link Order}\n+     * annotation when defining a bean with a {@link Bean} annotation.\n+     *\n+     * <p>Note that the default value of the {@link Order} annotation is {@link Ordered#LOWEST_PRECEDENCE}\n+     * which equals to {@link Integer#MAX_VALUE}, but it is overridden to {@code 0} by this default method.\n+     *\n+     * @see Ordered#LOWEST_PRECEDENCE\n+     * @see Ordered#HIGHEST_PRECEDENCE\n+     * @see AnnotationAwareOrderComparator\n+     */\n+    default int getOrder() {\n+        return 0;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a497d0561945598cea4bf4429d50e4363d3ee524"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ1MjY1OA==", "bodyText": "Hmm, what configurators don't extend? I referred ArmeriaServerConfigurator and DocServiceConfigurator.\nOn the contrary, although I added Ordered, do we really need to support Ordered to here...? Let me watch this discussion.", "url": "https://github.com/line/armeria/pull/3144#discussion_r513452658", "createdAt": "2020-10-28T13:43:11Z", "author": {"login": "ghkim3221"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/HealthCheckServiceConfigurator.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.annotation.AnnotationAwareOrderComparator;\n+import org.springframework.core.annotation.Order;\n+\n+import com.linecorp.armeria.server.healthcheck.HealthCheckService;\n+import com.linecorp.armeria.server.healthcheck.HealthCheckServiceBuilder;\n+\n+/**\n+ * Interface used to configure a {@link HealthCheckService} on the default armeria server.\n+ */\n+@FunctionalInterface\n+public interface HealthCheckServiceConfigurator extends Ordered {\n+\n+    /**\n+     * Configures the {@link HealthCheckService} using the specified {@link HealthCheckServiceBuilder}.\n+     */\n+    void configure(HealthCheckServiceBuilder healthCheckServiceBuilder);\n+\n+    /**\n+     * Returns the evaluation order of this configurator. A user can specify the order with an {@link Order}\n+     * annotation when defining a bean with a {@link Bean} annotation.\n+     *\n+     * <p>Note that the default value of the {@link Order} annotation is {@link Ordered#LOWEST_PRECEDENCE}\n+     * which equals to {@link Integer#MAX_VALUE}, but it is overridden to {@code 0} by this default method.\n+     *\n+     * @see Ordered#LOWEST_PRECEDENCE\n+     * @see Ordered#HIGHEST_PRECEDENCE\n+     * @see AnnotationAwareOrderComparator\n+     */\n+    default int getOrder() {\n+        return 0;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM4NzIyMA=="}, "originalCommit": {"oid": "a497d0561945598cea4bf4429d50e4363d3ee524"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ1Njc4MA==", "bodyText": "Hmm, what configurators don't extend?\n\nOops, I checked different ArmeriaServerConfigurator file that is used for Dropwizard. \ud83d\ude05\nPlease ignore this review.", "url": "https://github.com/line/armeria/pull/3144#discussion_r513456780", "createdAt": "2020-10-28T13:48:32Z", "author": {"login": "ikhoon"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/HealthCheckServiceConfigurator.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.annotation.AnnotationAwareOrderComparator;\n+import org.springframework.core.annotation.Order;\n+\n+import com.linecorp.armeria.server.healthcheck.HealthCheckService;\n+import com.linecorp.armeria.server.healthcheck.HealthCheckServiceBuilder;\n+\n+/**\n+ * Interface used to configure a {@link HealthCheckService} on the default armeria server.\n+ */\n+@FunctionalInterface\n+public interface HealthCheckServiceConfigurator extends Ordered {\n+\n+    /**\n+     * Configures the {@link HealthCheckService} using the specified {@link HealthCheckServiceBuilder}.\n+     */\n+    void configure(HealthCheckServiceBuilder healthCheckServiceBuilder);\n+\n+    /**\n+     * Returns the evaluation order of this configurator. A user can specify the order with an {@link Order}\n+     * annotation when defining a bean with a {@link Bean} annotation.\n+     *\n+     * <p>Note that the default value of the {@link Order} annotation is {@link Ordered#LOWEST_PRECEDENCE}\n+     * which equals to {@link Integer#MAX_VALUE}, but it is overridden to {@code 0} by this default method.\n+     *\n+     * @see Ordered#LOWEST_PRECEDENCE\n+     * @see Ordered#HIGHEST_PRECEDENCE\n+     * @see AnnotationAwareOrderComparator\n+     */\n+    default int getOrder() {\n+        return 0;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM4NzIyMA=="}, "originalCommit": {"oid": "a497d0561945598cea4bf4429d50e4363d3ee524"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNzM0NTcyOnYy", "diffSide": "RIGHT", "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/internal/spring/ArmeriaConfigurationUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDowODo1NVrOHpr5fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNDozMDo0OVrOHqJhag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ3Mjg5NQ==", "bodyText": "How about leaving a warn message if healthCheckPath is empty and healthCheckServiceConfigurators is not empty such as:\nlogger.warn(\"{}s exist but they are disabled by the empty 'health-check-path' property. configurations: {}\", \n        HealthCheckServiceConfigurator.class.getSimpleName(), healthCheckServiceConfigurators);", "url": "https://github.com/line/armeria/pull/3144#discussion_r513472895", "createdAt": "2020-10-28T14:08:55Z", "author": {"login": "ikhoon"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/internal/spring/ArmeriaConfigurationUtil.java", "diffHunk": "@@ -102,7 +109,9 @@ public static void configureServerWithArmeriaSettings(ServerBuilder server, Arme\n \n         final String healthCheckPath = settings.getHealthCheckPath();\n         if (!Strings.isNullOrEmpty(healthCheckPath)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a497d0561945598cea4bf4429d50e4363d3ee524"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk1ODI1MA==", "bodyText": "Nice idea \ud83d\udc4d", "url": "https://github.com/line/armeria/pull/3144#discussion_r513958250", "createdAt": "2020-10-29T04:30:49Z", "author": {"login": "ghkim3221"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/internal/spring/ArmeriaConfigurationUtil.java", "diffHunk": "@@ -102,7 +109,9 @@ public static void configureServerWithArmeriaSettings(ServerBuilder server, Arme\n \n         final String healthCheckPath = settings.getHealthCheckPath();\n         if (!Strings.isNullOrEmpty(healthCheckPath)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ3Mjg5NQ=="}, "originalCommit": {"oid": "a497d0561945598cea4bf4429d50e4363d3ee524"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDI1NjI5OnYy", "diffSide": "RIGHT", "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/HealthCheckServiceConfigurator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMzo1NjozMlrOHqIRYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNDozMTo1NlrOHqJjyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzkzNzc2Mw==", "bodyText": "missing @Override", "url": "https://github.com/line/armeria/pull/3144#discussion_r513937763", "createdAt": "2020-10-29T03:56:32Z", "author": {"login": "minwoox"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/HealthCheckServiceConfigurator.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.annotation.AnnotationAwareOrderComparator;\n+import org.springframework.core.annotation.Order;\n+\n+import com.linecorp.armeria.server.healthcheck.HealthCheckService;\n+import com.linecorp.armeria.server.healthcheck.HealthCheckServiceBuilder;\n+\n+/**\n+ * Interface used to configure a {@link HealthCheckService} on the default armeria server.\n+ */\n+@FunctionalInterface\n+public interface HealthCheckServiceConfigurator extends Ordered {\n+\n+    /**\n+     * Configures the {@link HealthCheckService} using the specified {@link HealthCheckServiceBuilder}.\n+     */\n+    void configure(HealthCheckServiceBuilder healthCheckServiceBuilder);\n+\n+    /**\n+     * Returns the evaluation order of this configurator. A user can specify the order with an {@link Order}\n+     * annotation when defining a bean with a {@link Bean} annotation.\n+     *\n+     * <p>Note that the default value of the {@link Order} annotation is {@link Ordered#LOWEST_PRECEDENCE}\n+     * which equals to {@link Integer#MAX_VALUE}, but it is overridden to {@code 0} by this default method.\n+     *\n+     * @see Ordered#LOWEST_PRECEDENCE\n+     * @see Ordered#HIGHEST_PRECEDENCE\n+     * @see AnnotationAwareOrderComparator\n+     */\n+    default int getOrder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a497d0561945598cea4bf4429d50e4363d3ee524"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk1ODg1Nw==", "bodyText": "Ooops \ud83d\ude05", "url": "https://github.com/line/armeria/pull/3144#discussion_r513958857", "createdAt": "2020-10-29T04:31:56Z", "author": {"login": "ghkim3221"}, "path": "spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/HealthCheckServiceConfigurator.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.annotation.AnnotationAwareOrderComparator;\n+import org.springframework.core.annotation.Order;\n+\n+import com.linecorp.armeria.server.healthcheck.HealthCheckService;\n+import com.linecorp.armeria.server.healthcheck.HealthCheckServiceBuilder;\n+\n+/**\n+ * Interface used to configure a {@link HealthCheckService} on the default armeria server.\n+ */\n+@FunctionalInterface\n+public interface HealthCheckServiceConfigurator extends Ordered {\n+\n+    /**\n+     * Configures the {@link HealthCheckService} using the specified {@link HealthCheckServiceBuilder}.\n+     */\n+    void configure(HealthCheckServiceBuilder healthCheckServiceBuilder);\n+\n+    /**\n+     * Returns the evaluation order of this configurator. A user can specify the order with an {@link Order}\n+     * annotation when defining a bean with a {@link Bean} annotation.\n+     *\n+     * <p>Note that the default value of the {@link Order} annotation is {@link Ordered#LOWEST_PRECEDENCE}\n+     * which equals to {@link Integer#MAX_VALUE}, but it is overridden to {@code 0} by this default method.\n+     *\n+     * @see Ordered#LOWEST_PRECEDENCE\n+     * @see Ordered#HIGHEST_PRECEDENCE\n+     * @see AnnotationAwareOrderComparator\n+     */\n+    default int getOrder() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzkzNzc2Mw=="}, "originalCommit": {"oid": "a497d0561945598cea4bf4429d50e4363d3ee524"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1993, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}