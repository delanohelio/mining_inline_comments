{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyODU0MTM1", "number": 3110, "reviewThreads": {"totalCount": 47, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMjozMzoxNVrOEtSpHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMjo1NTo1MVrOE9dWmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTI2ODEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMjozMzoxNVrOHg_8_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMjozMzoxNVrOHg_8_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM2NDI4NA==", "bodyText": "I'm somewhat concerned that these methods make HttpRequest more crowded. How about moving them to HttpRequestBuilder? E.g. HttpRequest.builder().get(\"/{foo}\")...", "url": "https://github.com/line/armeria/pull/3110#discussion_r504364284", "createdAt": "2020-10-14T02:33:15Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequest.java", "diffHunk": "@@ -267,6 +267,62 @@ static HttpRequest of(RequestHeaders headers, Publisher<? extends HttpObject> pu\n         }\n     }\n \n+    /**\n+     * Creates a new {@link HttpRequestBuilder}.\n+     */\n+    static HttpRequestBuilder builder() {\n+        return new HttpRequestBuilder();\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with OPTIONS method and path.\n+     */\n+    static HttpRequestBuilder options(String path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d8c274f2ae945f145850ef6be8ce4becded391a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTI3MDA4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMjozNDozOFrOHg_-Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMjozNDozOFrOHg_-Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM2NDYxNA==", "bodyText": "Could accept CharSequence as name and Object as value?", "url": "https://github.com/line/armeria/pull/3110#discussion_r504364614", "createdAt": "2020-10-14T02:34:38Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,371 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+import com.linecorp.armeria.internal.common.DefaultHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    private final Map<String, String> pathParams = new HashMap<>();\n+    private HttpHeaders httpHeaders = HttpHeaders.of();\n+    private HttpHeaders httpTrailers = HttpHeaders.of();\n+    private QueryParams queryParams = QueryParams.of();\n+    private HttpData content = HttpData.empty();\n+    @Nullable\n+    private HttpMethod method;\n+    @Nullable\n+    private String path;\n+    @Nullable\n+    private MediaType mediaType;\n+    private boolean streaming;\n+\n+    HttpRequestBuilder() {\n+    }\n+\n+    HttpRequestBuilder(HttpMethod method, String path) {\n+        requireNonNull(method, \"method\");\n+        requireNonNull(path, \"path\");\n+        this.method = method;\n+        this.path = path;\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requireNonNull(method, \"method\");\n+        this.method = method;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        requireNonNull(path, \"path\");\n+        this.path = path;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, CharSequence content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        this.mediaType = mediaType;\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, String content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        this.mediaType = mediaType;\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType mediaType, @FormatString String format, Object... content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(format, \"format\");\n+        this.mediaType = mediaType;\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), format, content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, byte[] content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        this.mediaType = mediaType;\n+        this.content = HttpData.wrap(content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, HttpData content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        this.mediaType = mediaType;\n+        this.content = content;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(String name, String value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d8c274f2ae945f145850ef6be8ce4becded391a"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTI3MzY0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMjozNjoxNlrOHhAAPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMjozNjoxNlrOHhAAPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM2NTExNw==", "bodyText": "This will not work as expected if a user calls build() multiple times on the same builder instance. How about using a local variable?", "url": "https://github.com/line/armeria/pull/3110#discussion_r504365117", "createdAt": "2020-10-14T02:36:16Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,371 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+import com.linecorp.armeria.internal.common.DefaultHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    private final Map<String, String> pathParams = new HashMap<>();\n+    private HttpHeaders httpHeaders = HttpHeaders.of();\n+    private HttpHeaders httpTrailers = HttpHeaders.of();\n+    private QueryParams queryParams = QueryParams.of();\n+    private HttpData content = HttpData.empty();\n+    @Nullable\n+    private HttpMethod method;\n+    @Nullable\n+    private String path;\n+    @Nullable\n+    private MediaType mediaType;\n+    private boolean streaming;\n+\n+    HttpRequestBuilder() {\n+    }\n+\n+    HttpRequestBuilder(HttpMethod method, String path) {\n+        requireNonNull(method, \"method\");\n+        requireNonNull(path, \"path\");\n+        this.method = method;\n+        this.path = path;\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requireNonNull(method, \"method\");\n+        this.method = method;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        requireNonNull(path, \"path\");\n+        this.path = path;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, CharSequence content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        this.mediaType = mediaType;\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, String content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        this.mediaType = mediaType;\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType mediaType, @FormatString String format, Object... content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(format, \"format\");\n+        this.mediaType = mediaType;\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), format, content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, byte[] content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        this.mediaType = mediaType;\n+        this.content = HttpData.wrap(content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, HttpData content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        this.mediaType = mediaType;\n+        this.content = content;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(String name, String value) {\n+        requireNonNull(name, \"name\");\n+        requireNonNull(value, \"value\");\n+        httpHeaders = httpHeaders.toBuilder().add(name, value).build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        final HttpHeadersBuilder httpHeadersBuilder = this.httpHeaders.toBuilder();\n+        for (AsciiString name : httpHeaders.names()) {\n+            httpHeadersBuilder.add(name, requireNonNull(httpHeaders.get(name), \"header\"));\n+        }\n+        this.httpHeaders = httpHeadersBuilder.build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public HttpRequestBuilder trailers(HttpHeaders httpTrailers) {\n+        requireNonNull(httpTrailers, \"httpTrailers\");\n+        final HttpHeadersBuilder httpTrailersBuilder = this.httpTrailers.toBuilder();\n+        for (AsciiString name : httpTrailers.names()) {\n+            httpTrailersBuilder.add(name, requireNonNull(httpTrailers.get(name), \"trailer\"));\n+        }\n+        this.httpTrailers = httpTrailersBuilder.build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a path param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/{foo}\")\n+     *            .pathParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParam(String name, String value) {\n+        requireNonNull(name, \"name\");\n+        requireNonNull(value, \"value\");\n+        pathParams.put(name, value);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple path params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/{foo}/{bar}\")\n+     *            .pathParams(Map.of(\"foo\", \"bar\", \"bar\", \"baz\"))\n+     *            .build(); // GET `/bar/baz`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParams(Map<String, String> pathParams) {\n+        requireNonNull(pathParams, \"pathParams\");\n+        this.pathParams.putAll(pathParams);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a query param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/endpoint\")\n+     *            .queryParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/endpoint?foo=bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder queryParam(String name, String value) {\n+        requireNonNull(name, \"name\");\n+        requireNonNull(value, \"value\");\n+        queryParams = queryParams.toBuilder().add(name, value).build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple query params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/endpoint\")\n+     *            .queryParams(QueryParams.of(\"from\", \"foo\", \"limit\", 10))\n+     *            .build(); // GET `/endpoint?from=foo&limit=10`\n+     * }</pre>\n+     * @see QueryParams\n+     */\n+    public HttpRequestBuilder queryParams(QueryParams queryParams) {\n+        requireNonNull(queryParams, \"queryParams\");\n+        final QueryParamsBuilder queryParamsBuilder = this.queryParams.toBuilder();\n+        for (String name : queryParams.names()) {\n+            queryParamsBuilder.add(name, requireNonNull(queryParams.get(name), \"query\"));\n+        }\n+        this.queryParams = queryParamsBuilder.build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a cookie for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/\")\n+     *            .cookie(Cookie.of(\"cookie\", \"foo\"))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookie\n+     */\n+    public HttpRequestBuilder cookie(Cookie cookie) {\n+        requireNonNull(cookie, \"cookie\");\n+        cookies.add(cookie);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple cookies for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/\")\n+     *            .cookies(Cookies.of(Cookie.of(\"cookie1\", \"foo\"),\n+     *                                Cookie.of(\"cookie2\", \"bar\")))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookies\n+     */\n+    public HttpRequestBuilder cookies(Cookies cookies) {\n+        requireNonNull(cookies, \"cookies\");\n+        this.cookies.addAll(cookies);\n+        return this;\n+    }\n+\n+    /**\n+     * Makes this request a streaming request.\n+     */\n+    public HttpRequestBuilder streaming() {\n+        this.streaming = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Creates a new {@link HttpRequest}.\n+     */\n+    public HttpRequest build() {\n+        if (!pathParams.isEmpty()) {\n+            path = replacePathParams();\n+        }\n+        if (!queryParams.isEmpty()) {\n+            path += \"?\" + queryParams.toQueryString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d8c274f2ae945f145850ef6be8ce4becded391a"}, "originalPosition": 304}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTI4ODQ3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMjo0NDo0NFrOHhAI2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMjo0NDo0NFrOHhAI2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM2NzMyMg==", "bodyText": "I'm not sure if the streaming property is a good idea because build() returns an HttpRequest rather than HttpRequestWriter. How about focusing on providing the API for building non-streaming requests? We can later add a method like content(..., Publisher<HttpData>).", "url": "https://github.com/line/armeria/pull/3110#discussion_r504367322", "createdAt": "2020-10-14T02:44:44Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,371 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+import com.linecorp.armeria.internal.common.DefaultHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    private final Map<String, String> pathParams = new HashMap<>();\n+    private HttpHeaders httpHeaders = HttpHeaders.of();\n+    private HttpHeaders httpTrailers = HttpHeaders.of();\n+    private QueryParams queryParams = QueryParams.of();\n+    private HttpData content = HttpData.empty();\n+    @Nullable\n+    private HttpMethod method;\n+    @Nullable\n+    private String path;\n+    @Nullable\n+    private MediaType mediaType;\n+    private boolean streaming;\n+\n+    HttpRequestBuilder() {\n+    }\n+\n+    HttpRequestBuilder(HttpMethod method, String path) {\n+        requireNonNull(method, \"method\");\n+        requireNonNull(path, \"path\");\n+        this.method = method;\n+        this.path = path;\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requireNonNull(method, \"method\");\n+        this.method = method;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        requireNonNull(path, \"path\");\n+        this.path = path;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, CharSequence content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        this.mediaType = mediaType;\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, String content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        this.mediaType = mediaType;\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType mediaType, @FormatString String format, Object... content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(format, \"format\");\n+        this.mediaType = mediaType;\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), format, content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, byte[] content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        this.mediaType = mediaType;\n+        this.content = HttpData.wrap(content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, HttpData content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        this.mediaType = mediaType;\n+        this.content = content;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(String name, String value) {\n+        requireNonNull(name, \"name\");\n+        requireNonNull(value, \"value\");\n+        httpHeaders = httpHeaders.toBuilder().add(name, value).build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        final HttpHeadersBuilder httpHeadersBuilder = this.httpHeaders.toBuilder();\n+        for (AsciiString name : httpHeaders.names()) {\n+            httpHeadersBuilder.add(name, requireNonNull(httpHeaders.get(name), \"header\"));\n+        }\n+        this.httpHeaders = httpHeadersBuilder.build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public HttpRequestBuilder trailers(HttpHeaders httpTrailers) {\n+        requireNonNull(httpTrailers, \"httpTrailers\");\n+        final HttpHeadersBuilder httpTrailersBuilder = this.httpTrailers.toBuilder();\n+        for (AsciiString name : httpTrailers.names()) {\n+            httpTrailersBuilder.add(name, requireNonNull(httpTrailers.get(name), \"trailer\"));\n+        }\n+        this.httpTrailers = httpTrailersBuilder.build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a path param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/{foo}\")\n+     *            .pathParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParam(String name, String value) {\n+        requireNonNull(name, \"name\");\n+        requireNonNull(value, \"value\");\n+        pathParams.put(name, value);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple path params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/{foo}/{bar}\")\n+     *            .pathParams(Map.of(\"foo\", \"bar\", \"bar\", \"baz\"))\n+     *            .build(); // GET `/bar/baz`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParams(Map<String, String> pathParams) {\n+        requireNonNull(pathParams, \"pathParams\");\n+        this.pathParams.putAll(pathParams);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a query param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/endpoint\")\n+     *            .queryParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/endpoint?foo=bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder queryParam(String name, String value) {\n+        requireNonNull(name, \"name\");\n+        requireNonNull(value, \"value\");\n+        queryParams = queryParams.toBuilder().add(name, value).build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple query params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/endpoint\")\n+     *            .queryParams(QueryParams.of(\"from\", \"foo\", \"limit\", 10))\n+     *            .build(); // GET `/endpoint?from=foo&limit=10`\n+     * }</pre>\n+     * @see QueryParams\n+     */\n+    public HttpRequestBuilder queryParams(QueryParams queryParams) {\n+        requireNonNull(queryParams, \"queryParams\");\n+        final QueryParamsBuilder queryParamsBuilder = this.queryParams.toBuilder();\n+        for (String name : queryParams.names()) {\n+            queryParamsBuilder.add(name, requireNonNull(queryParams.get(name), \"query\"));\n+        }\n+        this.queryParams = queryParamsBuilder.build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a cookie for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/\")\n+     *            .cookie(Cookie.of(\"cookie\", \"foo\"))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookie\n+     */\n+    public HttpRequestBuilder cookie(Cookie cookie) {\n+        requireNonNull(cookie, \"cookie\");\n+        cookies.add(cookie);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple cookies for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/\")\n+     *            .cookies(Cookies.of(Cookie.of(\"cookie1\", \"foo\"),\n+     *                                Cookie.of(\"cookie2\", \"bar\")))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookies\n+     */\n+    public HttpRequestBuilder cookies(Cookies cookies) {\n+        requireNonNull(cookies, \"cookies\");\n+        this.cookies.addAll(cookies);\n+        return this;\n+    }\n+\n+    /**\n+     * Makes this request a streaming request.\n+     */\n+    public HttpRequestBuilder streaming() {\n+        this.streaming = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Creates a new {@link HttpRequest}.\n+     */\n+    public HttpRequest build() {\n+        if (!pathParams.isEmpty()) {\n+            path = replacePathParams();\n+        }\n+        if (!queryParams.isEmpty()) {\n+            path += \"?\" + queryParams.toQueryString();\n+        }\n+        final RequestHeaders requestHeaders = buildRequestHeader();\n+        if (streaming) {\n+            return new DefaultHttpRequest(requestHeaders);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d8c274f2ae945f145850ef6be8ce4becded391a"}, "originalPosition": 308}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTI4OTg0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMjo0NToyNFrOHhAJnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMjo0NToyNFrOHhAJnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM2NzUxOQ==", "bodyText": "requestHeaders()?", "url": "https://github.com/line/armeria/pull/3110#discussion_r504367519", "createdAt": "2020-10-14T02:45:24Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,371 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+import com.linecorp.armeria.internal.common.DefaultHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    private final Map<String, String> pathParams = new HashMap<>();\n+    private HttpHeaders httpHeaders = HttpHeaders.of();\n+    private HttpHeaders httpTrailers = HttpHeaders.of();\n+    private QueryParams queryParams = QueryParams.of();\n+    private HttpData content = HttpData.empty();\n+    @Nullable\n+    private HttpMethod method;\n+    @Nullable\n+    private String path;\n+    @Nullable\n+    private MediaType mediaType;\n+    private boolean streaming;\n+\n+    HttpRequestBuilder() {\n+    }\n+\n+    HttpRequestBuilder(HttpMethod method, String path) {\n+        requireNonNull(method, \"method\");\n+        requireNonNull(path, \"path\");\n+        this.method = method;\n+        this.path = path;\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requireNonNull(method, \"method\");\n+        this.method = method;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        requireNonNull(path, \"path\");\n+        this.path = path;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, CharSequence content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        this.mediaType = mediaType;\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, String content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        this.mediaType = mediaType;\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType mediaType, @FormatString String format, Object... content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(format, \"format\");\n+        this.mediaType = mediaType;\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), format, content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, byte[] content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        this.mediaType = mediaType;\n+        this.content = HttpData.wrap(content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, HttpData content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        this.mediaType = mediaType;\n+        this.content = content;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(String name, String value) {\n+        requireNonNull(name, \"name\");\n+        requireNonNull(value, \"value\");\n+        httpHeaders = httpHeaders.toBuilder().add(name, value).build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        final HttpHeadersBuilder httpHeadersBuilder = this.httpHeaders.toBuilder();\n+        for (AsciiString name : httpHeaders.names()) {\n+            httpHeadersBuilder.add(name, requireNonNull(httpHeaders.get(name), \"header\"));\n+        }\n+        this.httpHeaders = httpHeadersBuilder.build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public HttpRequestBuilder trailers(HttpHeaders httpTrailers) {\n+        requireNonNull(httpTrailers, \"httpTrailers\");\n+        final HttpHeadersBuilder httpTrailersBuilder = this.httpTrailers.toBuilder();\n+        for (AsciiString name : httpTrailers.names()) {\n+            httpTrailersBuilder.add(name, requireNonNull(httpTrailers.get(name), \"trailer\"));\n+        }\n+        this.httpTrailers = httpTrailersBuilder.build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a path param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/{foo}\")\n+     *            .pathParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParam(String name, String value) {\n+        requireNonNull(name, \"name\");\n+        requireNonNull(value, \"value\");\n+        pathParams.put(name, value);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple path params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/{foo}/{bar}\")\n+     *            .pathParams(Map.of(\"foo\", \"bar\", \"bar\", \"baz\"))\n+     *            .build(); // GET `/bar/baz`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParams(Map<String, String> pathParams) {\n+        requireNonNull(pathParams, \"pathParams\");\n+        this.pathParams.putAll(pathParams);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a query param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/endpoint\")\n+     *            .queryParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/endpoint?foo=bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder queryParam(String name, String value) {\n+        requireNonNull(name, \"name\");\n+        requireNonNull(value, \"value\");\n+        queryParams = queryParams.toBuilder().add(name, value).build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple query params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/endpoint\")\n+     *            .queryParams(QueryParams.of(\"from\", \"foo\", \"limit\", 10))\n+     *            .build(); // GET `/endpoint?from=foo&limit=10`\n+     * }</pre>\n+     * @see QueryParams\n+     */\n+    public HttpRequestBuilder queryParams(QueryParams queryParams) {\n+        requireNonNull(queryParams, \"queryParams\");\n+        final QueryParamsBuilder queryParamsBuilder = this.queryParams.toBuilder();\n+        for (String name : queryParams.names()) {\n+            queryParamsBuilder.add(name, requireNonNull(queryParams.get(name), \"query\"));\n+        }\n+        this.queryParams = queryParamsBuilder.build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a cookie for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/\")\n+     *            .cookie(Cookie.of(\"cookie\", \"foo\"))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookie\n+     */\n+    public HttpRequestBuilder cookie(Cookie cookie) {\n+        requireNonNull(cookie, \"cookie\");\n+        cookies.add(cookie);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple cookies for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/\")\n+     *            .cookies(Cookies.of(Cookie.of(\"cookie1\", \"foo\"),\n+     *                                Cookie.of(\"cookie2\", \"bar\")))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookies\n+     */\n+    public HttpRequestBuilder cookies(Cookies cookies) {\n+        requireNonNull(cookies, \"cookies\");\n+        this.cookies.addAll(cookies);\n+        return this;\n+    }\n+\n+    /**\n+     * Makes this request a streaming request.\n+     */\n+    public HttpRequestBuilder streaming() {\n+        this.streaming = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Creates a new {@link HttpRequest}.\n+     */\n+    public HttpRequest build() {\n+        if (!pathParams.isEmpty()) {\n+            path = replacePathParams();\n+        }\n+        if (!queryParams.isEmpty()) {\n+            path += \"?\" + queryParams.toQueryString();\n+        }\n+        final RequestHeaders requestHeaders = buildRequestHeader();\n+        if (streaming) {\n+            return new DefaultHttpRequest(requestHeaders);\n+        }\n+        if (content.length() == 0) {\n+            content.close();\n+            if (httpTrailers.isEmpty()) {\n+                return new EmptyFixedHttpRequest(requestHeaders);\n+            } else {\n+                return new OneElementFixedHttpRequest(requestHeaders, httpTrailers);\n+            }\n+        }\n+        if (httpTrailers.isEmpty()) {\n+            return new OneElementFixedHttpRequest(requestHeaders, content);\n+        } else {\n+            return new TwoElementFixedHttpRequest(requestHeaders, content, httpTrailers);\n+        }\n+    }\n+\n+    private RequestHeaders buildRequestHeader() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d8c274f2ae945f145850ef6be8ce4becded391a"}, "originalPosition": 325}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTI5MzAwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMjo0NzoyNFrOHhALgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNjozMTo0N1rOHipAww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM2ODAwMA==", "bodyText": "Perhaps you could keep the RequestHeadersBuilder as a member field of this builder and add headers and cookies directly to it?", "url": "https://github.com/line/armeria/pull/3110#discussion_r504368000", "createdAt": "2020-10-14T02:47:24Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,371 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+import com.linecorp.armeria.internal.common.DefaultHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    private final Map<String, String> pathParams = new HashMap<>();\n+    private HttpHeaders httpHeaders = HttpHeaders.of();\n+    private HttpHeaders httpTrailers = HttpHeaders.of();\n+    private QueryParams queryParams = QueryParams.of();\n+    private HttpData content = HttpData.empty();\n+    @Nullable\n+    private HttpMethod method;\n+    @Nullable\n+    private String path;\n+    @Nullable\n+    private MediaType mediaType;\n+    private boolean streaming;\n+\n+    HttpRequestBuilder() {\n+    }\n+\n+    HttpRequestBuilder(HttpMethod method, String path) {\n+        requireNonNull(method, \"method\");\n+        requireNonNull(path, \"path\");\n+        this.method = method;\n+        this.path = path;\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requireNonNull(method, \"method\");\n+        this.method = method;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        requireNonNull(path, \"path\");\n+        this.path = path;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, CharSequence content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        this.mediaType = mediaType;\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, String content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        this.mediaType = mediaType;\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType mediaType, @FormatString String format, Object... content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(format, \"format\");\n+        this.mediaType = mediaType;\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), format, content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, byte[] content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        this.mediaType = mediaType;\n+        this.content = HttpData.wrap(content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, HttpData content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        this.mediaType = mediaType;\n+        this.content = content;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(String name, String value) {\n+        requireNonNull(name, \"name\");\n+        requireNonNull(value, \"value\");\n+        httpHeaders = httpHeaders.toBuilder().add(name, value).build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        final HttpHeadersBuilder httpHeadersBuilder = this.httpHeaders.toBuilder();\n+        for (AsciiString name : httpHeaders.names()) {\n+            httpHeadersBuilder.add(name, requireNonNull(httpHeaders.get(name), \"header\"));\n+        }\n+        this.httpHeaders = httpHeadersBuilder.build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public HttpRequestBuilder trailers(HttpHeaders httpTrailers) {\n+        requireNonNull(httpTrailers, \"httpTrailers\");\n+        final HttpHeadersBuilder httpTrailersBuilder = this.httpTrailers.toBuilder();\n+        for (AsciiString name : httpTrailers.names()) {\n+            httpTrailersBuilder.add(name, requireNonNull(httpTrailers.get(name), \"trailer\"));\n+        }\n+        this.httpTrailers = httpTrailersBuilder.build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a path param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/{foo}\")\n+     *            .pathParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParam(String name, String value) {\n+        requireNonNull(name, \"name\");\n+        requireNonNull(value, \"value\");\n+        pathParams.put(name, value);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple path params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/{foo}/{bar}\")\n+     *            .pathParams(Map.of(\"foo\", \"bar\", \"bar\", \"baz\"))\n+     *            .build(); // GET `/bar/baz`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParams(Map<String, String> pathParams) {\n+        requireNonNull(pathParams, \"pathParams\");\n+        this.pathParams.putAll(pathParams);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a query param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/endpoint\")\n+     *            .queryParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/endpoint?foo=bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder queryParam(String name, String value) {\n+        requireNonNull(name, \"name\");\n+        requireNonNull(value, \"value\");\n+        queryParams = queryParams.toBuilder().add(name, value).build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple query params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/endpoint\")\n+     *            .queryParams(QueryParams.of(\"from\", \"foo\", \"limit\", 10))\n+     *            .build(); // GET `/endpoint?from=foo&limit=10`\n+     * }</pre>\n+     * @see QueryParams\n+     */\n+    public HttpRequestBuilder queryParams(QueryParams queryParams) {\n+        requireNonNull(queryParams, \"queryParams\");\n+        final QueryParamsBuilder queryParamsBuilder = this.queryParams.toBuilder();\n+        for (String name : queryParams.names()) {\n+            queryParamsBuilder.add(name, requireNonNull(queryParams.get(name), \"query\"));\n+        }\n+        this.queryParams = queryParamsBuilder.build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a cookie for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/\")\n+     *            .cookie(Cookie.of(\"cookie\", \"foo\"))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookie\n+     */\n+    public HttpRequestBuilder cookie(Cookie cookie) {\n+        requireNonNull(cookie, \"cookie\");\n+        cookies.add(cookie);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple cookies for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/\")\n+     *            .cookies(Cookies.of(Cookie.of(\"cookie1\", \"foo\"),\n+     *                                Cookie.of(\"cookie2\", \"bar\")))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookies\n+     */\n+    public HttpRequestBuilder cookies(Cookies cookies) {\n+        requireNonNull(cookies, \"cookies\");\n+        this.cookies.addAll(cookies);\n+        return this;\n+    }\n+\n+    /**\n+     * Makes this request a streaming request.\n+     */\n+    public HttpRequestBuilder streaming() {\n+        this.streaming = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Creates a new {@link HttpRequest}.\n+     */\n+    public HttpRequest build() {\n+        if (!pathParams.isEmpty()) {\n+            path = replacePathParams();\n+        }\n+        if (!queryParams.isEmpty()) {\n+            path += \"?\" + queryParams.toQueryString();\n+        }\n+        final RequestHeaders requestHeaders = buildRequestHeader();\n+        if (streaming) {\n+            return new DefaultHttpRequest(requestHeaders);\n+        }\n+        if (content.length() == 0) {\n+            content.close();\n+            if (httpTrailers.isEmpty()) {\n+                return new EmptyFixedHttpRequest(requestHeaders);\n+            } else {\n+                return new OneElementFixedHttpRequest(requestHeaders, httpTrailers);\n+            }\n+        }\n+        if (httpTrailers.isEmpty()) {\n+            return new OneElementFixedHttpRequest(requestHeaders, content);\n+        } else {\n+            return new TwoElementFixedHttpRequest(requestHeaders, content, httpTrailers);\n+        }\n+    }\n+\n+    private RequestHeaders buildRequestHeader() {\n+        requireNonNull(path, \"path\");\n+        requireNonNull(method, \"method\");\n+        final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder().method(method).path(path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d8c274f2ae945f145850ef6be8ce4becded391a"}, "originalPosition": 328}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk1NzI4Ng==", "bodyText": "Sure, we can add headers directly to RequestHeadersBuilder, but cookies need to be set once in the end because there can be only one cookie header (right?)", "url": "https://github.com/line/armeria/pull/3110#discussion_r504957286", "createdAt": "2020-10-14T20:37:16Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,371 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+import com.linecorp.armeria.internal.common.DefaultHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    private final Map<String, String> pathParams = new HashMap<>();\n+    private HttpHeaders httpHeaders = HttpHeaders.of();\n+    private HttpHeaders httpTrailers = HttpHeaders.of();\n+    private QueryParams queryParams = QueryParams.of();\n+    private HttpData content = HttpData.empty();\n+    @Nullable\n+    private HttpMethod method;\n+    @Nullable\n+    private String path;\n+    @Nullable\n+    private MediaType mediaType;\n+    private boolean streaming;\n+\n+    HttpRequestBuilder() {\n+    }\n+\n+    HttpRequestBuilder(HttpMethod method, String path) {\n+        requireNonNull(method, \"method\");\n+        requireNonNull(path, \"path\");\n+        this.method = method;\n+        this.path = path;\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requireNonNull(method, \"method\");\n+        this.method = method;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        requireNonNull(path, \"path\");\n+        this.path = path;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, CharSequence content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        this.mediaType = mediaType;\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, String content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        this.mediaType = mediaType;\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType mediaType, @FormatString String format, Object... content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(format, \"format\");\n+        this.mediaType = mediaType;\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), format, content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, byte[] content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        this.mediaType = mediaType;\n+        this.content = HttpData.wrap(content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, HttpData content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        this.mediaType = mediaType;\n+        this.content = content;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(String name, String value) {\n+        requireNonNull(name, \"name\");\n+        requireNonNull(value, \"value\");\n+        httpHeaders = httpHeaders.toBuilder().add(name, value).build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        final HttpHeadersBuilder httpHeadersBuilder = this.httpHeaders.toBuilder();\n+        for (AsciiString name : httpHeaders.names()) {\n+            httpHeadersBuilder.add(name, requireNonNull(httpHeaders.get(name), \"header\"));\n+        }\n+        this.httpHeaders = httpHeadersBuilder.build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public HttpRequestBuilder trailers(HttpHeaders httpTrailers) {\n+        requireNonNull(httpTrailers, \"httpTrailers\");\n+        final HttpHeadersBuilder httpTrailersBuilder = this.httpTrailers.toBuilder();\n+        for (AsciiString name : httpTrailers.names()) {\n+            httpTrailersBuilder.add(name, requireNonNull(httpTrailers.get(name), \"trailer\"));\n+        }\n+        this.httpTrailers = httpTrailersBuilder.build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a path param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/{foo}\")\n+     *            .pathParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParam(String name, String value) {\n+        requireNonNull(name, \"name\");\n+        requireNonNull(value, \"value\");\n+        pathParams.put(name, value);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple path params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/{foo}/{bar}\")\n+     *            .pathParams(Map.of(\"foo\", \"bar\", \"bar\", \"baz\"))\n+     *            .build(); // GET `/bar/baz`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParams(Map<String, String> pathParams) {\n+        requireNonNull(pathParams, \"pathParams\");\n+        this.pathParams.putAll(pathParams);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a query param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/endpoint\")\n+     *            .queryParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/endpoint?foo=bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder queryParam(String name, String value) {\n+        requireNonNull(name, \"name\");\n+        requireNonNull(value, \"value\");\n+        queryParams = queryParams.toBuilder().add(name, value).build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple query params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/endpoint\")\n+     *            .queryParams(QueryParams.of(\"from\", \"foo\", \"limit\", 10))\n+     *            .build(); // GET `/endpoint?from=foo&limit=10`\n+     * }</pre>\n+     * @see QueryParams\n+     */\n+    public HttpRequestBuilder queryParams(QueryParams queryParams) {\n+        requireNonNull(queryParams, \"queryParams\");\n+        final QueryParamsBuilder queryParamsBuilder = this.queryParams.toBuilder();\n+        for (String name : queryParams.names()) {\n+            queryParamsBuilder.add(name, requireNonNull(queryParams.get(name), \"query\"));\n+        }\n+        this.queryParams = queryParamsBuilder.build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a cookie for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/\")\n+     *            .cookie(Cookie.of(\"cookie\", \"foo\"))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookie\n+     */\n+    public HttpRequestBuilder cookie(Cookie cookie) {\n+        requireNonNull(cookie, \"cookie\");\n+        cookies.add(cookie);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple cookies for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/\")\n+     *            .cookies(Cookies.of(Cookie.of(\"cookie1\", \"foo\"),\n+     *                                Cookie.of(\"cookie2\", \"bar\")))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookies\n+     */\n+    public HttpRequestBuilder cookies(Cookies cookies) {\n+        requireNonNull(cookies, \"cookies\");\n+        this.cookies.addAll(cookies);\n+        return this;\n+    }\n+\n+    /**\n+     * Makes this request a streaming request.\n+     */\n+    public HttpRequestBuilder streaming() {\n+        this.streaming = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Creates a new {@link HttpRequest}.\n+     */\n+    public HttpRequest build() {\n+        if (!pathParams.isEmpty()) {\n+            path = replacePathParams();\n+        }\n+        if (!queryParams.isEmpty()) {\n+            path += \"?\" + queryParams.toQueryString();\n+        }\n+        final RequestHeaders requestHeaders = buildRequestHeader();\n+        if (streaming) {\n+            return new DefaultHttpRequest(requestHeaders);\n+        }\n+        if (content.length() == 0) {\n+            content.close();\n+            if (httpTrailers.isEmpty()) {\n+                return new EmptyFixedHttpRequest(requestHeaders);\n+            } else {\n+                return new OneElementFixedHttpRequest(requestHeaders, httpTrailers);\n+            }\n+        }\n+        if (httpTrailers.isEmpty()) {\n+            return new OneElementFixedHttpRequest(requestHeaders, content);\n+        } else {\n+            return new TwoElementFixedHttpRequest(requestHeaders, content, httpTrailers);\n+        }\n+    }\n+\n+    private RequestHeaders buildRequestHeader() {\n+        requireNonNull(path, \"path\");\n+        requireNonNull(method, \"method\");\n+        final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder().method(method).path(path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM2ODAwMA=="}, "originalCommit": {"oid": "6d8c274f2ae945f145850ef6be8ce4becded391a"}, "originalPosition": 328}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA4NTU3MQ==", "bodyText": "That's correct.", "url": "https://github.com/line/armeria/pull/3110#discussion_r506085571", "createdAt": "2020-10-16T06:31:47Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,371 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+import com.linecorp.armeria.internal.common.DefaultHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    private final Map<String, String> pathParams = new HashMap<>();\n+    private HttpHeaders httpHeaders = HttpHeaders.of();\n+    private HttpHeaders httpTrailers = HttpHeaders.of();\n+    private QueryParams queryParams = QueryParams.of();\n+    private HttpData content = HttpData.empty();\n+    @Nullable\n+    private HttpMethod method;\n+    @Nullable\n+    private String path;\n+    @Nullable\n+    private MediaType mediaType;\n+    private boolean streaming;\n+\n+    HttpRequestBuilder() {\n+    }\n+\n+    HttpRequestBuilder(HttpMethod method, String path) {\n+        requireNonNull(method, \"method\");\n+        requireNonNull(path, \"path\");\n+        this.method = method;\n+        this.path = path;\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requireNonNull(method, \"method\");\n+        this.method = method;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        requireNonNull(path, \"path\");\n+        this.path = path;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, CharSequence content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        this.mediaType = mediaType;\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, String content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        this.mediaType = mediaType;\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType mediaType, @FormatString String format, Object... content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(format, \"format\");\n+        this.mediaType = mediaType;\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), format, content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, byte[] content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        this.mediaType = mediaType;\n+        this.content = HttpData.wrap(content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, HttpData content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        this.mediaType = mediaType;\n+        this.content = content;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(String name, String value) {\n+        requireNonNull(name, \"name\");\n+        requireNonNull(value, \"value\");\n+        httpHeaders = httpHeaders.toBuilder().add(name, value).build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        final HttpHeadersBuilder httpHeadersBuilder = this.httpHeaders.toBuilder();\n+        for (AsciiString name : httpHeaders.names()) {\n+            httpHeadersBuilder.add(name, requireNonNull(httpHeaders.get(name), \"header\"));\n+        }\n+        this.httpHeaders = httpHeadersBuilder.build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public HttpRequestBuilder trailers(HttpHeaders httpTrailers) {\n+        requireNonNull(httpTrailers, \"httpTrailers\");\n+        final HttpHeadersBuilder httpTrailersBuilder = this.httpTrailers.toBuilder();\n+        for (AsciiString name : httpTrailers.names()) {\n+            httpTrailersBuilder.add(name, requireNonNull(httpTrailers.get(name), \"trailer\"));\n+        }\n+        this.httpTrailers = httpTrailersBuilder.build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a path param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/{foo}\")\n+     *            .pathParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParam(String name, String value) {\n+        requireNonNull(name, \"name\");\n+        requireNonNull(value, \"value\");\n+        pathParams.put(name, value);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple path params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/{foo}/{bar}\")\n+     *            .pathParams(Map.of(\"foo\", \"bar\", \"bar\", \"baz\"))\n+     *            .build(); // GET `/bar/baz`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParams(Map<String, String> pathParams) {\n+        requireNonNull(pathParams, \"pathParams\");\n+        this.pathParams.putAll(pathParams);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a query param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/endpoint\")\n+     *            .queryParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/endpoint?foo=bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder queryParam(String name, String value) {\n+        requireNonNull(name, \"name\");\n+        requireNonNull(value, \"value\");\n+        queryParams = queryParams.toBuilder().add(name, value).build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple query params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/endpoint\")\n+     *            .queryParams(QueryParams.of(\"from\", \"foo\", \"limit\", 10))\n+     *            .build(); // GET `/endpoint?from=foo&limit=10`\n+     * }</pre>\n+     * @see QueryParams\n+     */\n+    public HttpRequestBuilder queryParams(QueryParams queryParams) {\n+        requireNonNull(queryParams, \"queryParams\");\n+        final QueryParamsBuilder queryParamsBuilder = this.queryParams.toBuilder();\n+        for (String name : queryParams.names()) {\n+            queryParamsBuilder.add(name, requireNonNull(queryParams.get(name), \"query\"));\n+        }\n+        this.queryParams = queryParamsBuilder.build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a cookie for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/\")\n+     *            .cookie(Cookie.of(\"cookie\", \"foo\"))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookie\n+     */\n+    public HttpRequestBuilder cookie(Cookie cookie) {\n+        requireNonNull(cookie, \"cookie\");\n+        cookies.add(cookie);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple cookies for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/\")\n+     *            .cookies(Cookies.of(Cookie.of(\"cookie1\", \"foo\"),\n+     *                                Cookie.of(\"cookie2\", \"bar\")))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookies\n+     */\n+    public HttpRequestBuilder cookies(Cookies cookies) {\n+        requireNonNull(cookies, \"cookies\");\n+        this.cookies.addAll(cookies);\n+        return this;\n+    }\n+\n+    /**\n+     * Makes this request a streaming request.\n+     */\n+    public HttpRequestBuilder streaming() {\n+        this.streaming = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Creates a new {@link HttpRequest}.\n+     */\n+    public HttpRequest build() {\n+        if (!pathParams.isEmpty()) {\n+            path = replacePathParams();\n+        }\n+        if (!queryParams.isEmpty()) {\n+            path += \"?\" + queryParams.toQueryString();\n+        }\n+        final RequestHeaders requestHeaders = buildRequestHeader();\n+        if (streaming) {\n+            return new DefaultHttpRequest(requestHeaders);\n+        }\n+        if (content.length() == 0) {\n+            content.close();\n+            if (httpTrailers.isEmpty()) {\n+                return new EmptyFixedHttpRequest(requestHeaders);\n+            } else {\n+                return new OneElementFixedHttpRequest(requestHeaders, httpTrailers);\n+            }\n+        }\n+        if (httpTrailers.isEmpty()) {\n+            return new OneElementFixedHttpRequest(requestHeaders, content);\n+        } else {\n+            return new TwoElementFixedHttpRequest(requestHeaders, content, httpTrailers);\n+        }\n+    }\n+\n+    private RequestHeaders buildRequestHeader() {\n+        requireNonNull(path, \"path\");\n+        requireNonNull(method, \"method\");\n+        final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder().method(method).path(path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM2ODAwMA=="}, "originalCommit": {"oid": "6d8c274f2ae945f145850ef6be8ce4becded391a"}, "originalPosition": 328}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTI5NDA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMjo0ODowNFrOHhAMIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMjo0ODowNFrOHhAMIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM2ODE2MQ==", "bodyText": "It'd be nice if we support :param pattern as well.", "url": "https://github.com/line/armeria/pull/3110#discussion_r504368161", "createdAt": "2020-10-14T02:48:04Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,371 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+import com.linecorp.armeria.internal.common.DefaultHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    private final Map<String, String> pathParams = new HashMap<>();\n+    private HttpHeaders httpHeaders = HttpHeaders.of();\n+    private HttpHeaders httpTrailers = HttpHeaders.of();\n+    private QueryParams queryParams = QueryParams.of();\n+    private HttpData content = HttpData.empty();\n+    @Nullable\n+    private HttpMethod method;\n+    @Nullable\n+    private String path;\n+    @Nullable\n+    private MediaType mediaType;\n+    private boolean streaming;\n+\n+    HttpRequestBuilder() {\n+    }\n+\n+    HttpRequestBuilder(HttpMethod method, String path) {\n+        requireNonNull(method, \"method\");\n+        requireNonNull(path, \"path\");\n+        this.method = method;\n+        this.path = path;\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requireNonNull(method, \"method\");\n+        this.method = method;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        requireNonNull(path, \"path\");\n+        this.path = path;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, CharSequence content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        this.mediaType = mediaType;\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, String content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        this.mediaType = mediaType;\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType mediaType, @FormatString String format, Object... content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(format, \"format\");\n+        this.mediaType = mediaType;\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), format, content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, byte[] content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        this.mediaType = mediaType;\n+        this.content = HttpData.wrap(content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, HttpData content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        this.mediaType = mediaType;\n+        this.content = content;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(String name, String value) {\n+        requireNonNull(name, \"name\");\n+        requireNonNull(value, \"value\");\n+        httpHeaders = httpHeaders.toBuilder().add(name, value).build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        final HttpHeadersBuilder httpHeadersBuilder = this.httpHeaders.toBuilder();\n+        for (AsciiString name : httpHeaders.names()) {\n+            httpHeadersBuilder.add(name, requireNonNull(httpHeaders.get(name), \"header\"));\n+        }\n+        this.httpHeaders = httpHeadersBuilder.build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public HttpRequestBuilder trailers(HttpHeaders httpTrailers) {\n+        requireNonNull(httpTrailers, \"httpTrailers\");\n+        final HttpHeadersBuilder httpTrailersBuilder = this.httpTrailers.toBuilder();\n+        for (AsciiString name : httpTrailers.names()) {\n+            httpTrailersBuilder.add(name, requireNonNull(httpTrailers.get(name), \"trailer\"));\n+        }\n+        this.httpTrailers = httpTrailersBuilder.build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a path param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/{foo}\")\n+     *            .pathParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParam(String name, String value) {\n+        requireNonNull(name, \"name\");\n+        requireNonNull(value, \"value\");\n+        pathParams.put(name, value);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple path params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/{foo}/{bar}\")\n+     *            .pathParams(Map.of(\"foo\", \"bar\", \"bar\", \"baz\"))\n+     *            .build(); // GET `/bar/baz`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParams(Map<String, String> pathParams) {\n+        requireNonNull(pathParams, \"pathParams\");\n+        this.pathParams.putAll(pathParams);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a query param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/endpoint\")\n+     *            .queryParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/endpoint?foo=bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder queryParam(String name, String value) {\n+        requireNonNull(name, \"name\");\n+        requireNonNull(value, \"value\");\n+        queryParams = queryParams.toBuilder().add(name, value).build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple query params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/endpoint\")\n+     *            .queryParams(QueryParams.of(\"from\", \"foo\", \"limit\", 10))\n+     *            .build(); // GET `/endpoint?from=foo&limit=10`\n+     * }</pre>\n+     * @see QueryParams\n+     */\n+    public HttpRequestBuilder queryParams(QueryParams queryParams) {\n+        requireNonNull(queryParams, \"queryParams\");\n+        final QueryParamsBuilder queryParamsBuilder = this.queryParams.toBuilder();\n+        for (String name : queryParams.names()) {\n+            queryParamsBuilder.add(name, requireNonNull(queryParams.get(name), \"query\"));\n+        }\n+        this.queryParams = queryParamsBuilder.build();\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a cookie for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/\")\n+     *            .cookie(Cookie.of(\"cookie\", \"foo\"))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookie\n+     */\n+    public HttpRequestBuilder cookie(Cookie cookie) {\n+        requireNonNull(cookie, \"cookie\");\n+        cookies.add(cookie);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple cookies for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.get(\"/\")\n+     *            .cookies(Cookies.of(Cookie.of(\"cookie1\", \"foo\"),\n+     *                                Cookie.of(\"cookie2\", \"bar\")))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookies\n+     */\n+    public HttpRequestBuilder cookies(Cookies cookies) {\n+        requireNonNull(cookies, \"cookies\");\n+        this.cookies.addAll(cookies);\n+        return this;\n+    }\n+\n+    /**\n+     * Makes this request a streaming request.\n+     */\n+    public HttpRequestBuilder streaming() {\n+        this.streaming = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Creates a new {@link HttpRequest}.\n+     */\n+    public HttpRequest build() {\n+        if (!pathParams.isEmpty()) {\n+            path = replacePathParams();\n+        }\n+        if (!queryParams.isEmpty()) {\n+            path += \"?\" + queryParams.toQueryString();\n+        }\n+        final RequestHeaders requestHeaders = buildRequestHeader();\n+        if (streaming) {\n+            return new DefaultHttpRequest(requestHeaders);\n+        }\n+        if (content.length() == 0) {\n+            content.close();\n+            if (httpTrailers.isEmpty()) {\n+                return new EmptyFixedHttpRequest(requestHeaders);\n+            } else {\n+                return new OneElementFixedHttpRequest(requestHeaders, httpTrailers);\n+            }\n+        }\n+        if (httpTrailers.isEmpty()) {\n+            return new OneElementFixedHttpRequest(requestHeaders, content);\n+        } else {\n+            return new TwoElementFixedHttpRequest(requestHeaders, content, httpTrailers);\n+        }\n+    }\n+\n+    private RequestHeaders buildRequestHeader() {\n+        requireNonNull(path, \"path\");\n+        requireNonNull(method, \"method\");\n+        final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder().method(method).path(path);\n+        if (mediaType != null) {\n+            requestHeadersBuilder.contentType(mediaType);\n+        }\n+        if (!httpHeaders.isEmpty()) {\n+            for (AsciiString name : httpHeaders.names()) {\n+                requestHeadersBuilder.add(name, requireNonNull(httpHeaders.get(name), \"header\"));\n+            }\n+        }\n+        if (!cookies.isEmpty()) {\n+            requestHeadersBuilder.add(COOKIE, Cookie.toCookieHeader(cookies));\n+        }\n+        if (content.length() == 0) {\n+            requestHeadersBuilder.remove(CONTENT_LENGTH);\n+        } else {\n+            requestHeadersBuilder.setInt(CONTENT_LENGTH, content.length());\n+        }\n+        return requestHeadersBuilder.build();\n+    }\n+\n+    private String replacePathParams() {\n+        requireNonNull(path, \"path\");\n+        int i = 0;\n+        final StringBuilder pathBuilder = new StringBuilder(path);\n+        while (i < pathBuilder.length()) {\n+            if (pathBuilder.charAt(i) == '{') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d8c274f2ae945f145850ef6be8ce4becded391a"}, "originalPosition": 353}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTg0NjU5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNToxMjoxMlrOHinLqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNToxMjoxMlrOHinLqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA1NTU5NQ==", "bodyText": "Add @VisibleForTesting or how about removing this constructor and using public APIs for the test?", "url": "https://github.com/line/armeria/pull/3110#discussion_r506055595", "createdAt": "2020-10-16T05:12:12Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private Publisher<? extends HttpObject> publisher;\n+    @Nullable\n+    private String path;\n+\n+    HttpRequestBuilder() {\n+    }\n+\n+    HttpRequestBuilder(HttpMethod method, String path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27a602cab4a0beb2f37670d1569b3a9b147b7989"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTg1MjU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNToxNTozNlrOHinPKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNToxNTozNlrOHinPKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA1NjQ5MQ==", "bodyText": "Could be removed?", "url": "https://github.com/line/armeria/pull/3110#discussion_r506056491", "createdAt": "2020-10-16T05:15:36Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private Publisher<? extends HttpObject> publisher;\n+    @Nullable\n+    private String path;\n+\n+    HttpRequestBuilder() {\n+    }\n+\n+    HttpRequestBuilder(HttpMethod method, String path) {\n+        requireNonNull(method, \"method\");\n+        requireNonNull(path, \"path\");\n+        requestHeadersBuilder.method(method);\n+        this.path = path;\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     *\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requireNonNull(method, \"method\");\n+        requestHeadersBuilder.method(method);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        requireNonNull(path, \"path\");\n+        this.path = path;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, CharSequence content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        this.publisher = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27a602cab4a0beb2f37670d1569b3a9b147b7989"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTg1Mjg5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNToxNTo0OVrOHinPWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNToxNTo0OVrOHinPWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA1NjUzOA==", "bodyText": "Ditto.", "url": "https://github.com/line/armeria/pull/3110#discussion_r506056538", "createdAt": "2020-10-16T05:15:49Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private Publisher<? extends HttpObject> publisher;\n+    @Nullable\n+    private String path;\n+\n+    HttpRequestBuilder() {\n+    }\n+\n+    HttpRequestBuilder(HttpMethod method, String path) {\n+        requireNonNull(method, \"method\");\n+        requireNonNull(path, \"path\");\n+        requestHeadersBuilder.method(method);\n+        this.path = path;\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     *\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requireNonNull(method, \"method\");\n+        requestHeadersBuilder.method(method);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        requireNonNull(path, \"path\");\n+        this.path = path;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, CharSequence content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, String content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        this.publisher = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27a602cab4a0beb2f37670d1569b3a9b147b7989"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTg1NDUzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNToxNjozOFrOHinQMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNToxNjozOFrOHinQMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA1Njc1Mg==", "bodyText": "Add requireNonNull(content, \"content\")?", "url": "https://github.com/line/armeria/pull/3110#discussion_r506056752", "createdAt": "2020-10-16T05:16:38Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private Publisher<? extends HttpObject> publisher;\n+    @Nullable\n+    private String path;\n+\n+    HttpRequestBuilder() {\n+    }\n+\n+    HttpRequestBuilder(HttpMethod method, String path) {\n+        requireNonNull(method, \"method\");\n+        requireNonNull(path, \"path\");\n+        requestHeadersBuilder.method(method);\n+        this.path = path;\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     *\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requireNonNull(method, \"method\");\n+        requestHeadersBuilder.method(method);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        requireNonNull(path, \"path\");\n+        this.path = path;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, CharSequence content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, String content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType mediaType, @FormatString String format, Object... content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(format, \"format\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27a602cab4a0beb2f37670d1569b3a9b147b7989"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTg1NzczOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNToxODozMFrOHinSIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNToxODozMFrOHinSIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA1NzI0OQ==", "bodyText": "Global comment: How about raising an IllegalStateException if this.content or this.publisher was set already.", "url": "https://github.com/line/armeria/pull/3110#discussion_r506057249", "createdAt": "2020-10-16T05:18:30Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private Publisher<? extends HttpObject> publisher;\n+    @Nullable\n+    private String path;\n+\n+    HttpRequestBuilder() {\n+    }\n+\n+    HttpRequestBuilder(HttpMethod method, String path) {\n+        requireNonNull(method, \"method\");\n+        requireNonNull(path, \"path\");\n+        requestHeadersBuilder.method(method);\n+        this.path = path;\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     *\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requireNonNull(method, \"method\");\n+        requestHeadersBuilder.method(method);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        requireNonNull(path, \"path\");\n+        this.path = path;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, CharSequence content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, String content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType mediaType, @FormatString String format, Object... content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(format, \"format\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), format, content);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27a602cab4a0beb2f37670d1569b3a9b147b7989"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTg2MzM0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNToyMTozMFrOHinVKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNToyMTozMFrOHinVKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA1ODAyNg==", "bodyText": "Global comment: It would better to use contentType for a parameter name because its value is used as a Content-Type header.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public HttpRequestBuilder content(MediaType mediaType, byte[] content) {\n          \n          \n            \n                public HttpRequestBuilder content(MediaType contentType, byte[] content) {", "url": "https://github.com/line/armeria/pull/3110#discussion_r506058026", "createdAt": "2020-10-16T05:21:30Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private Publisher<? extends HttpObject> publisher;\n+    @Nullable\n+    private String path;\n+\n+    HttpRequestBuilder() {\n+    }\n+\n+    HttpRequestBuilder(HttpMethod method, String path) {\n+        requireNonNull(method, \"method\");\n+        requireNonNull(path, \"path\");\n+        requestHeadersBuilder.method(method);\n+        this.path = path;\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     *\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requireNonNull(method, \"method\");\n+        requestHeadersBuilder.method(method);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        requireNonNull(path, \"path\");\n+        this.path = path;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, CharSequence content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, String content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType mediaType, @FormatString String format, Object... content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(format, \"format\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), format, content);\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, byte[] content) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27a602cab4a0beb2f37670d1569b3a9b147b7989"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTg2NzQ0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNToyMzo1N1rOHinXww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNToyMzo1N1rOHinXww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA1ODY5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public HttpRequestBuilder content(MediaType mediaType, Publisher<HttpData> publisher) {\n          \n          \n            \n                public HttpRequestBuilder content(MediaType mediaType, Publisher<? extends HttpData> publisher) {", "url": "https://github.com/line/armeria/pull/3110#discussion_r506058691", "createdAt": "2020-10-16T05:23:57Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private Publisher<? extends HttpObject> publisher;\n+    @Nullable\n+    private String path;\n+\n+    HttpRequestBuilder() {\n+    }\n+\n+    HttpRequestBuilder(HttpMethod method, String path) {\n+        requireNonNull(method, \"method\");\n+        requireNonNull(path, \"path\");\n+        requestHeadersBuilder.method(method);\n+        this.path = path;\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     *\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requireNonNull(method, \"method\");\n+        requestHeadersBuilder.method(method);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        requireNonNull(path, \"path\");\n+        this.path = path;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, CharSequence content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, String content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType mediaType, @FormatString String format, Object... content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(format, \"format\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), format, content);\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, byte[] content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.wrap(content);\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, HttpData content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = content;\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, Publisher<HttpData> publisher) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27a602cab4a0beb2f37670d1569b3a9b147b7989"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTg4MDE0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNToyOTo0MFrOHinewQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNToyOTo0MFrOHinewQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA2MDQ4MQ==", "bodyText": "Use httpHeaders.forEach(...) for:\n\nWe can remove additional hash lookup costs.\nThe value is not null always.", "url": "https://github.com/line/armeria/pull/3110#discussion_r506060481", "createdAt": "2020-10-16T05:29:40Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private Publisher<? extends HttpObject> publisher;\n+    @Nullable\n+    private String path;\n+\n+    HttpRequestBuilder() {\n+    }\n+\n+    HttpRequestBuilder(HttpMethod method, String path) {\n+        requireNonNull(method, \"method\");\n+        requireNonNull(path, \"path\");\n+        requestHeadersBuilder.method(method);\n+        this.path = path;\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     *\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requireNonNull(method, \"method\");\n+        requestHeadersBuilder.method(method);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        requireNonNull(path, \"path\");\n+        this.path = path;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, CharSequence content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, String content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType mediaType, @FormatString String format, Object... content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(format, \"format\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), format, content);\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, byte[] content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.wrap(content);\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, HttpData content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = content;\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, Publisher<HttpData> publisher) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(publisher, \"publisher\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.publisher = publisher;\n+        this.content = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(CharSequence name, Object value) {\n+        requireNonNull(name, \"name\");\n+        requireNonNull(value, \"value\");\n+        requestHeadersBuilder.setObject(name, value);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     *\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        for (AsciiString name : httpHeaders.names()) {\n+            requestHeadersBuilder.set(name, requireNonNull(httpHeaders.get(name), \"header\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27a602cab4a0beb2f37670d1569b3a9b147b7989"}, "originalPosition": 222}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTg4MTE3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNTozMDoxM1rOHinfTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNTozMDoxM1rOHinfTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA2MDYyMA==", "bodyText": "Ditto.", "url": "https://github.com/line/armeria/pull/3110#discussion_r506060620", "createdAt": "2020-10-16T05:30:13Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private Publisher<? extends HttpObject> publisher;\n+    @Nullable\n+    private String path;\n+\n+    HttpRequestBuilder() {\n+    }\n+\n+    HttpRequestBuilder(HttpMethod method, String path) {\n+        requireNonNull(method, \"method\");\n+        requireNonNull(path, \"path\");\n+        requestHeadersBuilder.method(method);\n+        this.path = path;\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     *\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requireNonNull(method, \"method\");\n+        requestHeadersBuilder.method(method);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        requireNonNull(path, \"path\");\n+        this.path = path;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, CharSequence content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, String content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType mediaType, @FormatString String format, Object... content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(format, \"format\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), format, content);\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, byte[] content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.wrap(content);\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, HttpData content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = content;\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, Publisher<HttpData> publisher) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(publisher, \"publisher\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.publisher = publisher;\n+        this.content = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(CharSequence name, Object value) {\n+        requireNonNull(name, \"name\");\n+        requireNonNull(value, \"value\");\n+        requestHeadersBuilder.setObject(name, value);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     *\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        for (AsciiString name : httpHeaders.names()) {\n+            requestHeadersBuilder.set(name, requireNonNull(httpHeaders.get(name), \"header\"));\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public HttpRequestBuilder trailers(HttpHeaders httpTrailers) {\n+        requireNonNull(httpTrailers, \"httpTrailers\");\n+        for (AsciiString name : httpTrailers.names()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27a602cab4a0beb2f37670d1569b3a9b147b7989"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTg4MzUzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNTozMTozMlrOHingow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNTozMTozMlrOHingow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA2MDk2Mw==", "bodyText": "Ditto, let's use forEach.", "url": "https://github.com/line/armeria/pull/3110#discussion_r506060963", "createdAt": "2020-10-16T05:31:32Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private Publisher<? extends HttpObject> publisher;\n+    @Nullable\n+    private String path;\n+\n+    HttpRequestBuilder() {\n+    }\n+\n+    HttpRequestBuilder(HttpMethod method, String path) {\n+        requireNonNull(method, \"method\");\n+        requireNonNull(path, \"path\");\n+        requestHeadersBuilder.method(method);\n+        this.path = path;\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     *\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requireNonNull(method, \"method\");\n+        requestHeadersBuilder.method(method);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        requireNonNull(path, \"path\");\n+        this.path = path;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, CharSequence content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, String content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType mediaType, @FormatString String format, Object... content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(format, \"format\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), format, content);\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, byte[] content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.wrap(content);\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, HttpData content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = content;\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, Publisher<HttpData> publisher) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(publisher, \"publisher\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.publisher = publisher;\n+        this.content = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(CharSequence name, Object value) {\n+        requireNonNull(name, \"name\");\n+        requireNonNull(value, \"value\");\n+        requestHeadersBuilder.setObject(name, value);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     *\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        for (AsciiString name : httpHeaders.names()) {\n+            requestHeadersBuilder.set(name, requireNonNull(httpHeaders.get(name), \"header\"));\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public HttpRequestBuilder trailers(HttpHeaders httpTrailers) {\n+        requireNonNull(httpTrailers, \"httpTrailers\");\n+        for (AsciiString name : httpTrailers.names()) {\n+            httpTrailersBuilder.set(name, requireNonNull(httpTrailers.get(name), \"trailer\"));\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a path param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}\")\n+     *            .pathParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParam(String name, Object value) {\n+        requireNonNull(name, \"name\");\n+        requireNonNull(value, \"value\");\n+        pathParams.put(name, value);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple path params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}/{bar}\")\n+     *            .pathParams(Map.of(\"foo\", \"bar\", \"bar\", \"baz\"))\n+     *            .build(); // GET `/bar/baz`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParams(Map<String, Object> pathParams) {\n+        requireNonNull(pathParams, \"pathParams\");\n+        this.pathParams.putAll(pathParams);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a query param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/endpoint?foo=bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder queryParam(String name, Object value) {\n+        requireNonNull(name, \"name\");\n+        requireNonNull(value, \"value\");\n+        queryParamsBuilder.setObject(name, value);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple query params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParams(QueryParams.of(\"from\", \"foo\", \"limit\", 10))\n+     *            .build(); // GET `/endpoint?from=foo&limit=10`\n+     * }</pre>\n+     *\n+     * @see QueryParams\n+     */\n+    public HttpRequestBuilder queryParams(QueryParams queryParams) {\n+        requireNonNull(queryParams, \"queryParams\");\n+        for (String name : queryParams.names()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27a602cab4a0beb2f37670d1569b3a9b147b7989"}, "originalPosition": 298}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTkwNjg1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNTo0MzozOVrOHint4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QyMDowMDo0NFrOHjfhLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA2NDM1Mg==", "bodyText": "If httpTrailersBuilder is not empty, we need to add the trailers as the last part of publisher. This is complex a bit. \ud83e\udd2a\nI was working on making a StreamMessage that append a message to an existing StreamMessage if it was completed successfully.\nhttps://github.com/ikhoon/armeria/blob/multipart/core/src/main/java/com/linecorp/armeria/common/multipart/StreamMessageOnCompleteResumeWith.java\nI think we can support Publisher as a content later when #2894 is merged,", "url": "https://github.com/line/armeria/pull/3110#discussion_r506064352", "createdAt": "2020-10-16T05:43:39Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private Publisher<? extends HttpObject> publisher;\n+    @Nullable\n+    private String path;\n+\n+    HttpRequestBuilder() {\n+    }\n+\n+    HttpRequestBuilder(HttpMethod method, String path) {\n+        requireNonNull(method, \"method\");\n+        requireNonNull(path, \"path\");\n+        requestHeadersBuilder.method(method);\n+        this.path = path;\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     *\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requireNonNull(method, \"method\");\n+        requestHeadersBuilder.method(method);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        requireNonNull(path, \"path\");\n+        this.path = path;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, CharSequence content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, String content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType mediaType, @FormatString String format, Object... content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(format, \"format\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), format, content);\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, byte[] content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.wrap(content);\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, HttpData content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = content;\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, Publisher<HttpData> publisher) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(publisher, \"publisher\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.publisher = publisher;\n+        this.content = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(CharSequence name, Object value) {\n+        requireNonNull(name, \"name\");\n+        requireNonNull(value, \"value\");\n+        requestHeadersBuilder.setObject(name, value);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     *\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        for (AsciiString name : httpHeaders.names()) {\n+            requestHeadersBuilder.set(name, requireNonNull(httpHeaders.get(name), \"header\"));\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public HttpRequestBuilder trailers(HttpHeaders httpTrailers) {\n+        requireNonNull(httpTrailers, \"httpTrailers\");\n+        for (AsciiString name : httpTrailers.names()) {\n+            httpTrailersBuilder.set(name, requireNonNull(httpTrailers.get(name), \"trailer\"));\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a path param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}\")\n+     *            .pathParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParam(String name, Object value) {\n+        requireNonNull(name, \"name\");\n+        requireNonNull(value, \"value\");\n+        pathParams.put(name, value);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple path params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}/{bar}\")\n+     *            .pathParams(Map.of(\"foo\", \"bar\", \"bar\", \"baz\"))\n+     *            .build(); // GET `/bar/baz`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParams(Map<String, Object> pathParams) {\n+        requireNonNull(pathParams, \"pathParams\");\n+        this.pathParams.putAll(pathParams);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a query param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/endpoint?foo=bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder queryParam(String name, Object value) {\n+        requireNonNull(name, \"name\");\n+        requireNonNull(value, \"value\");\n+        queryParamsBuilder.setObject(name, value);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple query params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParams(QueryParams.of(\"from\", \"foo\", \"limit\", 10))\n+     *            .build(); // GET `/endpoint?from=foo&limit=10`\n+     * }</pre>\n+     *\n+     * @see QueryParams\n+     */\n+    public HttpRequestBuilder queryParams(QueryParams queryParams) {\n+        requireNonNull(queryParams, \"queryParams\");\n+        for (String name : queryParams.names()) {\n+            queryParamsBuilder.set(name, requireNonNull(queryParams.get(name), \"query\"));\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a cookie for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookie(Cookie.of(\"cookie\", \"foo\"))\n+     *            .build();\n+     * }</pre>\n+     *\n+     * @see Cookie\n+     */\n+    public HttpRequestBuilder cookie(Cookie cookie) {\n+        requireNonNull(cookie, \"cookie\");\n+        cookies.add(cookie);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple cookies for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookies(Cookies.of(Cookie.of(\"cookie1\", \"foo\"),\n+     *                                Cookie.of(\"cookie2\", \"bar\")))\n+     *            .build();\n+     * }</pre>\n+     *\n+     * @see Cookies\n+     */\n+    public HttpRequestBuilder cookies(Cookies cookies) {\n+        requireNonNull(cookies, \"cookies\");\n+        this.cookies.addAll(cookies);\n+        return this;\n+    }\n+\n+    /**\n+     * Creates a new {@link HttpRequest}.\n+     */\n+    public HttpRequest build() {\n+        final RequestHeaders requestHeaders = requestHeaders();\n+        if (content == null || content.length() == 0) {\n+            if (content != null) {\n+                content.close();\n+            }\n+            if (publisher != null) {\n+                if (publisher instanceof HttpRequest) {\n+                    return ((HttpRequest) publisher).withHeaders(requestHeaders);\n+                }\n+                return new PublisherBasedHttpRequest(requestHeaders, publisher);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27a602cab4a0beb2f37670d1569b3a9b147b7989"}, "originalPosition": 352}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk3ODYwNQ==", "bodyText": "Sounds good, let's push back Publisher now. I'll add a TODO.", "url": "https://github.com/line/armeria/pull/3110#discussion_r506978605", "createdAt": "2020-10-17T20:00:44Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Publisher;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private Publisher<? extends HttpObject> publisher;\n+    @Nullable\n+    private String path;\n+\n+    HttpRequestBuilder() {\n+    }\n+\n+    HttpRequestBuilder(HttpMethod method, String path) {\n+        requireNonNull(method, \"method\");\n+        requireNonNull(path, \"path\");\n+        requestHeadersBuilder.method(method);\n+        this.path = path;\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     *\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requireNonNull(method, \"method\");\n+        requestHeadersBuilder.method(method);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        requireNonNull(path, \"path\");\n+        this.path = path;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, CharSequence content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, String content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), content);\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType mediaType, @FormatString String format, Object... content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(format, \"format\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.of(mediaType.charset(StandardCharsets.UTF_8), format, content);\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, byte[] content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = HttpData.wrap(content);\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, HttpData content) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.content = content;\n+        this.publisher = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType mediaType, Publisher<HttpData> publisher) {\n+        requireNonNull(mediaType, \"mediaType\");\n+        requireNonNull(publisher, \"publisher\");\n+        requestHeadersBuilder.contentType(mediaType);\n+        this.publisher = publisher;\n+        this.content = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(CharSequence name, Object value) {\n+        requireNonNull(name, \"name\");\n+        requireNonNull(value, \"value\");\n+        requestHeadersBuilder.setObject(name, value);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     *\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        for (AsciiString name : httpHeaders.names()) {\n+            requestHeadersBuilder.set(name, requireNonNull(httpHeaders.get(name), \"header\"));\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public HttpRequestBuilder trailers(HttpHeaders httpTrailers) {\n+        requireNonNull(httpTrailers, \"httpTrailers\");\n+        for (AsciiString name : httpTrailers.names()) {\n+            httpTrailersBuilder.set(name, requireNonNull(httpTrailers.get(name), \"trailer\"));\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a path param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}\")\n+     *            .pathParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParam(String name, Object value) {\n+        requireNonNull(name, \"name\");\n+        requireNonNull(value, \"value\");\n+        pathParams.put(name, value);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple path params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}/{bar}\")\n+     *            .pathParams(Map.of(\"foo\", \"bar\", \"bar\", \"baz\"))\n+     *            .build(); // GET `/bar/baz`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParams(Map<String, Object> pathParams) {\n+        requireNonNull(pathParams, \"pathParams\");\n+        this.pathParams.putAll(pathParams);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a query param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/endpoint?foo=bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder queryParam(String name, Object value) {\n+        requireNonNull(name, \"name\");\n+        requireNonNull(value, \"value\");\n+        queryParamsBuilder.setObject(name, value);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple query params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParams(QueryParams.of(\"from\", \"foo\", \"limit\", 10))\n+     *            .build(); // GET `/endpoint?from=foo&limit=10`\n+     * }</pre>\n+     *\n+     * @see QueryParams\n+     */\n+    public HttpRequestBuilder queryParams(QueryParams queryParams) {\n+        requireNonNull(queryParams, \"queryParams\");\n+        for (String name : queryParams.names()) {\n+            queryParamsBuilder.set(name, requireNonNull(queryParams.get(name), \"query\"));\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a cookie for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookie(Cookie.of(\"cookie\", \"foo\"))\n+     *            .build();\n+     * }</pre>\n+     *\n+     * @see Cookie\n+     */\n+    public HttpRequestBuilder cookie(Cookie cookie) {\n+        requireNonNull(cookie, \"cookie\");\n+        cookies.add(cookie);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple cookies for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookies(Cookies.of(Cookie.of(\"cookie1\", \"foo\"),\n+     *                                Cookie.of(\"cookie2\", \"bar\")))\n+     *            .build();\n+     * }</pre>\n+     *\n+     * @see Cookies\n+     */\n+    public HttpRequestBuilder cookies(Cookies cookies) {\n+        requireNonNull(cookies, \"cookies\");\n+        this.cookies.addAll(cookies);\n+        return this;\n+    }\n+\n+    /**\n+     * Creates a new {@link HttpRequest}.\n+     */\n+    public HttpRequest build() {\n+        final RequestHeaders requestHeaders = requestHeaders();\n+        if (content == null || content.length() == 0) {\n+            if (content != null) {\n+                content.close();\n+            }\n+            if (publisher != null) {\n+                if (publisher instanceof HttpRequest) {\n+                    return ((HttpRequest) publisher).withHeaders(requestHeaders);\n+                }\n+                return new PublisherBasedHttpRequest(requestHeaders, publisher);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA2NDM1Mg=="}, "originalCommit": {"oid": "27a602cab4a0beb2f37670d1569b3a9b147b7989"}, "originalPosition": 352}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjA1MzI5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNToxNzowNlrOHoBI0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNToxNzowNlrOHoBI0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyMzcyOA==", "bodyText": "I think we can remove this.", "url": "https://github.com/line/armeria/pull/3110#discussion_r511723728", "createdAt": "2020-10-26T05:17:06Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    // TODO(tumile): Add content(Publisher).\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private String path;\n+\n+    HttpRequestBuilder() {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac88534a85c16d82c3c2bbcc56d7b71591154321"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjA2OTQ4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNToyNzo0N1rOHoBRrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNToyNzo0N1rOHoBRrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyNTk5OA==", "bodyText": "Could use content.isEmpty() instead of content.length() == 0.", "url": "https://github.com/line/armeria/pull/3110#discussion_r511725998", "createdAt": "2020-10-26T05:27:47Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    // TODO(tumile): Add content(Publisher).\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private String path;\n+\n+    HttpRequestBuilder() {}\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PATCH method and path.\n+     */\n+    public HttpRequestBuilder patch(String path) {\n+        return method(HttpMethod.PATCH).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with OPTIONS method and path.\n+     */\n+    public HttpRequestBuilder options(String path) {\n+        return method(HttpMethod.OPTIONS).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with HEAD method and path.\n+     */\n+    public HttpRequestBuilder head(String path) {\n+        return method(HttpMethod.HEAD).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with TRACE method and path.\n+     */\n+    public HttpRequestBuilder trace(String path) {\n+        return method(HttpMethod.TRACE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requestHeadersBuilder.method(requireNonNull(method, \"method\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        this.path = requireNonNull(path, \"path\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, CharSequence content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, String content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType contentType, @FormatString String format, Object... content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(format, \"format\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), format, content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, byte[] content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.wrap(content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, HttpData content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = content;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(CharSequence name, Object value) {\n+        requestHeadersBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        httpHeaders.forEach((BiConsumer<AsciiString, String>) requestHeadersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public HttpRequestBuilder trailers(HttpHeaders httpTrailers) {\n+        requireNonNull(httpTrailers, \"httpTrailers\");\n+        httpTrailers.forEach((BiConsumer<AsciiString, String>) httpTrailersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a path param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}\")\n+     *            .pathParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParam(String name, Object value) {\n+        pathParams.put(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple path params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}/{bar}\")\n+     *            .pathParams(Map.of(\"foo\", \"bar\", \"bar\", \"baz\"))\n+     *            .build(); // GET `/bar/baz`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParams(Map<String, Object> pathParams) {\n+        this.pathParams.putAll(requireNonNull(pathParams, \"pathParams\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a query param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/endpoint?foo=bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder queryParam(String name, Object value) {\n+        queryParamsBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple query params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParams(QueryParams.of(\"from\", \"foo\", \"limit\", 10))\n+     *            .build(); // GET `/endpoint?from=foo&limit=10`\n+     * }</pre>\n+     * @see QueryParams\n+     */\n+    public HttpRequestBuilder queryParams(QueryParams queryParams) {\n+        requireNonNull(queryParams, \"queryParams\");\n+        queryParams.forEach((BiConsumer<String, String>) queryParamsBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a cookie for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookie(Cookie.of(\"cookie\", \"foo\"))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookie\n+     */\n+    public HttpRequestBuilder cookie(Cookie cookie) {\n+        cookies.add(requireNonNull(cookie, \"cookie\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple cookies for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookies(Cookies.of(Cookie.of(\"cookie1\", \"foo\"),\n+     *                                Cookie.of(\"cookie2\", \"bar\")))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookies\n+     */\n+    public HttpRequestBuilder cookies(Cookies cookies) {\n+        this.cookies.addAll(requireNonNull(cookies, \"cookies\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Creates a new {@link HttpRequest}.\n+     */\n+    public HttpRequest build() {\n+        final RequestHeaders requestHeaders = requestHeaders();\n+        if (content == null || content.length() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac88534a85c16d82c3c2bbcc56d7b71591154321"}, "originalPosition": 330}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjA2OTU4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNToyNzo1M1rOHoBRvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNToyNzo1M1rOHoBRvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyNjAxMg==", "bodyText": "ditto", "url": "https://github.com/line/armeria/pull/3110#discussion_r511726012", "createdAt": "2020-10-26T05:27:53Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    // TODO(tumile): Add content(Publisher).\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private String path;\n+\n+    HttpRequestBuilder() {}\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PATCH method and path.\n+     */\n+    public HttpRequestBuilder patch(String path) {\n+        return method(HttpMethod.PATCH).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with OPTIONS method and path.\n+     */\n+    public HttpRequestBuilder options(String path) {\n+        return method(HttpMethod.OPTIONS).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with HEAD method and path.\n+     */\n+    public HttpRequestBuilder head(String path) {\n+        return method(HttpMethod.HEAD).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with TRACE method and path.\n+     */\n+    public HttpRequestBuilder trace(String path) {\n+        return method(HttpMethod.TRACE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requestHeadersBuilder.method(requireNonNull(method, \"method\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        this.path = requireNonNull(path, \"path\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, CharSequence content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, String content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType contentType, @FormatString String format, Object... content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(format, \"format\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), format, content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, byte[] content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.wrap(content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, HttpData content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = content;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(CharSequence name, Object value) {\n+        requestHeadersBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        httpHeaders.forEach((BiConsumer<AsciiString, String>) requestHeadersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public HttpRequestBuilder trailers(HttpHeaders httpTrailers) {\n+        requireNonNull(httpTrailers, \"httpTrailers\");\n+        httpTrailers.forEach((BiConsumer<AsciiString, String>) httpTrailersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a path param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}\")\n+     *            .pathParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParam(String name, Object value) {\n+        pathParams.put(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple path params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}/{bar}\")\n+     *            .pathParams(Map.of(\"foo\", \"bar\", \"bar\", \"baz\"))\n+     *            .build(); // GET `/bar/baz`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParams(Map<String, Object> pathParams) {\n+        this.pathParams.putAll(requireNonNull(pathParams, \"pathParams\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a query param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/endpoint?foo=bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder queryParam(String name, Object value) {\n+        queryParamsBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple query params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParams(QueryParams.of(\"from\", \"foo\", \"limit\", 10))\n+     *            .build(); // GET `/endpoint?from=foo&limit=10`\n+     * }</pre>\n+     * @see QueryParams\n+     */\n+    public HttpRequestBuilder queryParams(QueryParams queryParams) {\n+        requireNonNull(queryParams, \"queryParams\");\n+        queryParams.forEach((BiConsumer<String, String>) queryParamsBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a cookie for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookie(Cookie.of(\"cookie\", \"foo\"))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookie\n+     */\n+    public HttpRequestBuilder cookie(Cookie cookie) {\n+        cookies.add(requireNonNull(cookie, \"cookie\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple cookies for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookies(Cookies.of(Cookie.of(\"cookie1\", \"foo\"),\n+     *                                Cookie.of(\"cookie2\", \"bar\")))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookies\n+     */\n+    public HttpRequestBuilder cookies(Cookies cookies) {\n+        this.cookies.addAll(requireNonNull(cookies, \"cookies\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Creates a new {@link HttpRequest}.\n+     */\n+    public HttpRequest build() {\n+        final RequestHeaders requestHeaders = requestHeaders();\n+        if (content == null || content.length() == 0) {\n+            if (content != null) {\n+                content.close();\n+            }\n+            if (httpTrailersBuilder.isEmpty()) {\n+                return new EmptyFixedHttpRequest(requestHeaders);\n+            }\n+            return new OneElementFixedHttpRequest(requestHeaders, httpTrailersBuilder.build());\n+        }\n+        if (httpTrailersBuilder.isEmpty()) {\n+            return new OneElementFixedHttpRequest(requestHeaders, content);\n+        }\n+        return new TwoElementFixedHttpRequest(requestHeaders, content, httpTrailersBuilder.build());\n+    }\n+\n+    private RequestHeaders requestHeaders() {\n+        requestHeadersBuilder.path(fullPath());\n+        if (!cookies.isEmpty()) {\n+            requestHeadersBuilder.set(COOKIE, Cookie.toCookieHeader(cookies));\n+        }\n+        if (content == null || content.length() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac88534a85c16d82c3c2bbcc56d7b71591154321"}, "originalPosition": 350}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjA3MDAzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNToyODoxNFrOHoBR_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNToyODoxNFrOHoBR_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyNjA3OQ==", "bodyText": "Can use '?'", "url": "https://github.com/line/armeria/pull/3110#discussion_r511726079", "createdAt": "2020-10-26T05:28:14Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    // TODO(tumile): Add content(Publisher).\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private String path;\n+\n+    HttpRequestBuilder() {}\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PATCH method and path.\n+     */\n+    public HttpRequestBuilder patch(String path) {\n+        return method(HttpMethod.PATCH).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with OPTIONS method and path.\n+     */\n+    public HttpRequestBuilder options(String path) {\n+        return method(HttpMethod.OPTIONS).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with HEAD method and path.\n+     */\n+    public HttpRequestBuilder head(String path) {\n+        return method(HttpMethod.HEAD).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with TRACE method and path.\n+     */\n+    public HttpRequestBuilder trace(String path) {\n+        return method(HttpMethod.TRACE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requestHeadersBuilder.method(requireNonNull(method, \"method\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        this.path = requireNonNull(path, \"path\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, CharSequence content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, String content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType contentType, @FormatString String format, Object... content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(format, \"format\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), format, content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, byte[] content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.wrap(content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, HttpData content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = content;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(CharSequence name, Object value) {\n+        requestHeadersBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        httpHeaders.forEach((BiConsumer<AsciiString, String>) requestHeadersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public HttpRequestBuilder trailers(HttpHeaders httpTrailers) {\n+        requireNonNull(httpTrailers, \"httpTrailers\");\n+        httpTrailers.forEach((BiConsumer<AsciiString, String>) httpTrailersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a path param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}\")\n+     *            .pathParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParam(String name, Object value) {\n+        pathParams.put(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple path params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}/{bar}\")\n+     *            .pathParams(Map.of(\"foo\", \"bar\", \"bar\", \"baz\"))\n+     *            .build(); // GET `/bar/baz`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParams(Map<String, Object> pathParams) {\n+        this.pathParams.putAll(requireNonNull(pathParams, \"pathParams\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a query param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/endpoint?foo=bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder queryParam(String name, Object value) {\n+        queryParamsBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple query params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParams(QueryParams.of(\"from\", \"foo\", \"limit\", 10))\n+     *            .build(); // GET `/endpoint?from=foo&limit=10`\n+     * }</pre>\n+     * @see QueryParams\n+     */\n+    public HttpRequestBuilder queryParams(QueryParams queryParams) {\n+        requireNonNull(queryParams, \"queryParams\");\n+        queryParams.forEach((BiConsumer<String, String>) queryParamsBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a cookie for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookie(Cookie.of(\"cookie\", \"foo\"))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookie\n+     */\n+    public HttpRequestBuilder cookie(Cookie cookie) {\n+        cookies.add(requireNonNull(cookie, \"cookie\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple cookies for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookies(Cookies.of(Cookie.of(\"cookie1\", \"foo\"),\n+     *                                Cookie.of(\"cookie2\", \"bar\")))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookies\n+     */\n+    public HttpRequestBuilder cookies(Cookies cookies) {\n+        this.cookies.addAll(requireNonNull(cookies, \"cookies\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Creates a new {@link HttpRequest}.\n+     */\n+    public HttpRequest build() {\n+        final RequestHeaders requestHeaders = requestHeaders();\n+        if (content == null || content.length() == 0) {\n+            if (content != null) {\n+                content.close();\n+            }\n+            if (httpTrailersBuilder.isEmpty()) {\n+                return new EmptyFixedHttpRequest(requestHeaders);\n+            }\n+            return new OneElementFixedHttpRequest(requestHeaders, httpTrailersBuilder.build());\n+        }\n+        if (httpTrailersBuilder.isEmpty()) {\n+            return new OneElementFixedHttpRequest(requestHeaders, content);\n+        }\n+        return new TwoElementFixedHttpRequest(requestHeaders, content, httpTrailersBuilder.build());\n+    }\n+\n+    private RequestHeaders requestHeaders() {\n+        requestHeadersBuilder.path(fullPath());\n+        if (!cookies.isEmpty()) {\n+            requestHeadersBuilder.set(COOKIE, Cookie.toCookieHeader(cookies));\n+        }\n+        if (content == null || content.length() == 0) {\n+            requestHeadersBuilder.remove(CONTENT_LENGTH);\n+        } else {\n+            requestHeadersBuilder.setInt(CONTENT_LENGTH, content.length());\n+        }\n+        return requestHeadersBuilder.build();\n+    }\n+\n+    private String fullPath() {\n+        final StringBuilder pathBuilder = new StringBuilder(requireNonNull(this.path, \"path\"));\n+        if (!pathParams.isEmpty()) {\n+            int i = 0;\n+            while (i < pathBuilder.length()) {\n+                if (pathBuilder.charAt(i) == '{') {\n+                    int j = i;\n+                    while (j < pathBuilder.length() && pathBuilder.charAt(j) != '}') {\n+                        j++;\n+                    }\n+                    if (j == pathBuilder.length()) {\n+                        break;\n+                    }\n+                    final String name = pathBuilder.substring(i + 1, j);\n+                    if (pathParams.containsKey(name)) {\n+                        final String value = pathParams.get(name).toString();\n+                        pathBuilder.replace(i, j + 1, value);\n+                        i += value.length() - 1;\n+                    }\n+                } else if (pathBuilder.charAt(i) == ':') {\n+                    int j = i;\n+                    while (j < pathBuilder.length() && pathBuilder.charAt(j) != '/') {\n+                        j++;\n+                    }\n+                    final String name = pathBuilder.substring(i + 1, j);\n+                    if (pathParams.containsKey(name)) {\n+                        final String value = pathParams.get(name).toString();\n+                        pathBuilder.replace(i, j, value);\n+                        i += value.length();\n+                    }\n+                }\n+                i++;\n+            }\n+        }\n+        if (!queryParamsBuilder.isEmpty()) {\n+            pathBuilder.append(\"?\").append(queryParamsBuilder.toQueryString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac88534a85c16d82c3c2bbcc56d7b71591154321"}, "originalPosition": 393}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjA3MDkwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNToyODo1MVrOHoBSfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNToyODo1MVrOHoBSfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyNjIwNQ==", "bodyText": "can remove this. and how about raising an IllegalStateException rather than NPE?\ncheckState(path != null, \"path must be set.\")", "url": "https://github.com/line/armeria/pull/3110#discussion_r511726205", "createdAt": "2020-10-26T05:28:51Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    // TODO(tumile): Add content(Publisher).\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private String path;\n+\n+    HttpRequestBuilder() {}\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PATCH method and path.\n+     */\n+    public HttpRequestBuilder patch(String path) {\n+        return method(HttpMethod.PATCH).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with OPTIONS method and path.\n+     */\n+    public HttpRequestBuilder options(String path) {\n+        return method(HttpMethod.OPTIONS).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with HEAD method and path.\n+     */\n+    public HttpRequestBuilder head(String path) {\n+        return method(HttpMethod.HEAD).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with TRACE method and path.\n+     */\n+    public HttpRequestBuilder trace(String path) {\n+        return method(HttpMethod.TRACE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requestHeadersBuilder.method(requireNonNull(method, \"method\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        this.path = requireNonNull(path, \"path\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, CharSequence content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, String content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType contentType, @FormatString String format, Object... content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(format, \"format\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), format, content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, byte[] content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.wrap(content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, HttpData content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = content;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(CharSequence name, Object value) {\n+        requestHeadersBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        httpHeaders.forEach((BiConsumer<AsciiString, String>) requestHeadersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public HttpRequestBuilder trailers(HttpHeaders httpTrailers) {\n+        requireNonNull(httpTrailers, \"httpTrailers\");\n+        httpTrailers.forEach((BiConsumer<AsciiString, String>) httpTrailersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a path param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}\")\n+     *            .pathParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParam(String name, Object value) {\n+        pathParams.put(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple path params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}/{bar}\")\n+     *            .pathParams(Map.of(\"foo\", \"bar\", \"bar\", \"baz\"))\n+     *            .build(); // GET `/bar/baz`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParams(Map<String, Object> pathParams) {\n+        this.pathParams.putAll(requireNonNull(pathParams, \"pathParams\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a query param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/endpoint?foo=bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder queryParam(String name, Object value) {\n+        queryParamsBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple query params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParams(QueryParams.of(\"from\", \"foo\", \"limit\", 10))\n+     *            .build(); // GET `/endpoint?from=foo&limit=10`\n+     * }</pre>\n+     * @see QueryParams\n+     */\n+    public HttpRequestBuilder queryParams(QueryParams queryParams) {\n+        requireNonNull(queryParams, \"queryParams\");\n+        queryParams.forEach((BiConsumer<String, String>) queryParamsBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a cookie for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookie(Cookie.of(\"cookie\", \"foo\"))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookie\n+     */\n+    public HttpRequestBuilder cookie(Cookie cookie) {\n+        cookies.add(requireNonNull(cookie, \"cookie\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple cookies for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookies(Cookies.of(Cookie.of(\"cookie1\", \"foo\"),\n+     *                                Cookie.of(\"cookie2\", \"bar\")))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookies\n+     */\n+    public HttpRequestBuilder cookies(Cookies cookies) {\n+        this.cookies.addAll(requireNonNull(cookies, \"cookies\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Creates a new {@link HttpRequest}.\n+     */\n+    public HttpRequest build() {\n+        final RequestHeaders requestHeaders = requestHeaders();\n+        if (content == null || content.length() == 0) {\n+            if (content != null) {\n+                content.close();\n+            }\n+            if (httpTrailersBuilder.isEmpty()) {\n+                return new EmptyFixedHttpRequest(requestHeaders);\n+            }\n+            return new OneElementFixedHttpRequest(requestHeaders, httpTrailersBuilder.build());\n+        }\n+        if (httpTrailersBuilder.isEmpty()) {\n+            return new OneElementFixedHttpRequest(requestHeaders, content);\n+        }\n+        return new TwoElementFixedHttpRequest(requestHeaders, content, httpTrailersBuilder.build());\n+    }\n+\n+    private RequestHeaders requestHeaders() {\n+        requestHeadersBuilder.path(fullPath());\n+        if (!cookies.isEmpty()) {\n+            requestHeadersBuilder.set(COOKIE, Cookie.toCookieHeader(cookies));\n+        }\n+        if (content == null || content.length() == 0) {\n+            requestHeadersBuilder.remove(CONTENT_LENGTH);\n+        } else {\n+            requestHeadersBuilder.setInt(CONTENT_LENGTH, content.length());\n+        }\n+        return requestHeadersBuilder.build();\n+    }\n+\n+    private String fullPath() {\n+        final StringBuilder pathBuilder = new StringBuilder(requireNonNull(this.path, \"path\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac88534a85c16d82c3c2bbcc56d7b71591154321"}, "originalPosition": 359}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjA5MTMxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTo0MjowOVrOHoBeIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTo0MjowOVrOHoBeIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyOTE4Ng==", "bodyText": "nit: buildPath?", "url": "https://github.com/line/armeria/pull/3110#discussion_r511729186", "createdAt": "2020-10-26T05:42:09Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    // TODO(tumile): Add content(Publisher).\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private String path;\n+\n+    HttpRequestBuilder() {}\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PATCH method and path.\n+     */\n+    public HttpRequestBuilder patch(String path) {\n+        return method(HttpMethod.PATCH).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with OPTIONS method and path.\n+     */\n+    public HttpRequestBuilder options(String path) {\n+        return method(HttpMethod.OPTIONS).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with HEAD method and path.\n+     */\n+    public HttpRequestBuilder head(String path) {\n+        return method(HttpMethod.HEAD).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with TRACE method and path.\n+     */\n+    public HttpRequestBuilder trace(String path) {\n+        return method(HttpMethod.TRACE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requestHeadersBuilder.method(requireNonNull(method, \"method\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        this.path = requireNonNull(path, \"path\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, CharSequence content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, String content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType contentType, @FormatString String format, Object... content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(format, \"format\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), format, content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, byte[] content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.wrap(content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, HttpData content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = content;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(CharSequence name, Object value) {\n+        requestHeadersBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        httpHeaders.forEach((BiConsumer<AsciiString, String>) requestHeadersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public HttpRequestBuilder trailers(HttpHeaders httpTrailers) {\n+        requireNonNull(httpTrailers, \"httpTrailers\");\n+        httpTrailers.forEach((BiConsumer<AsciiString, String>) httpTrailersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a path param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}\")\n+     *            .pathParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParam(String name, Object value) {\n+        pathParams.put(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple path params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}/{bar}\")\n+     *            .pathParams(Map.of(\"foo\", \"bar\", \"bar\", \"baz\"))\n+     *            .build(); // GET `/bar/baz`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParams(Map<String, Object> pathParams) {\n+        this.pathParams.putAll(requireNonNull(pathParams, \"pathParams\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a query param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/endpoint?foo=bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder queryParam(String name, Object value) {\n+        queryParamsBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple query params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParams(QueryParams.of(\"from\", \"foo\", \"limit\", 10))\n+     *            .build(); // GET `/endpoint?from=foo&limit=10`\n+     * }</pre>\n+     * @see QueryParams\n+     */\n+    public HttpRequestBuilder queryParams(QueryParams queryParams) {\n+        requireNonNull(queryParams, \"queryParams\");\n+        queryParams.forEach((BiConsumer<String, String>) queryParamsBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a cookie for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookie(Cookie.of(\"cookie\", \"foo\"))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookie\n+     */\n+    public HttpRequestBuilder cookie(Cookie cookie) {\n+        cookies.add(requireNonNull(cookie, \"cookie\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple cookies for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookies(Cookies.of(Cookie.of(\"cookie1\", \"foo\"),\n+     *                                Cookie.of(\"cookie2\", \"bar\")))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookies\n+     */\n+    public HttpRequestBuilder cookies(Cookies cookies) {\n+        this.cookies.addAll(requireNonNull(cookies, \"cookies\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Creates a new {@link HttpRequest}.\n+     */\n+    public HttpRequest build() {\n+        final RequestHeaders requestHeaders = requestHeaders();\n+        if (content == null || content.length() == 0) {\n+            if (content != null) {\n+                content.close();\n+            }\n+            if (httpTrailersBuilder.isEmpty()) {\n+                return new EmptyFixedHttpRequest(requestHeaders);\n+            }\n+            return new OneElementFixedHttpRequest(requestHeaders, httpTrailersBuilder.build());\n+        }\n+        if (httpTrailersBuilder.isEmpty()) {\n+            return new OneElementFixedHttpRequest(requestHeaders, content);\n+        }\n+        return new TwoElementFixedHttpRequest(requestHeaders, content, httpTrailersBuilder.build());\n+    }\n+\n+    private RequestHeaders requestHeaders() {\n+        requestHeadersBuilder.path(fullPath());\n+        if (!cookies.isEmpty()) {\n+            requestHeadersBuilder.set(COOKIE, Cookie.toCookieHeader(cookies));\n+        }\n+        if (content == null || content.length() == 0) {\n+            requestHeadersBuilder.remove(CONTENT_LENGTH);\n+        } else {\n+            requestHeadersBuilder.setInt(CONTENT_LENGTH, content.length());\n+        }\n+        return requestHeadersBuilder.build();\n+    }\n+\n+    private String fullPath() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac88534a85c16d82c3c2bbcc56d7b71591154321"}, "originalPosition": 358}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTE3Mjc5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwODo0MDo0MlrOHqRbSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwODo0MDo0MlrOHqRbSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA4Nzc1Mg==", "bodyText": "How about just delegating for all content methods?\nreturn content(contentType, HttpData.of(contentType.charset(StandardCharsets.UTF_8), content));", "url": "https://github.com/line/armeria/pull/3110#discussion_r514087752", "createdAt": "2020-10-29T08:40:42Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    // TODO(tumile): Add content(Publisher).\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private String path;\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PATCH method and path.\n+     */\n+    public HttpRequestBuilder patch(String path) {\n+        return method(HttpMethod.PATCH).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with OPTIONS method and path.\n+     */\n+    public HttpRequestBuilder options(String path) {\n+        return method(HttpMethod.OPTIONS).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with HEAD method and path.\n+     */\n+    public HttpRequestBuilder head(String path) {\n+        return method(HttpMethod.HEAD).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with TRACE method and path.\n+     */\n+    public HttpRequestBuilder trace(String path) {\n+        return method(HttpMethod.TRACE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requestHeadersBuilder.method(requireNonNull(method, \"method\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        this.path = requireNonNull(path, \"path\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, CharSequence content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1e80a941e6c67f253f3946e6b489f8c8c17bf0a"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTI1NjU1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOTowMjozMVrOHqSOeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMjozMDoxMFrOHud_lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEwMDg1Nw==", "bodyText": "How about raising an exception if this does not contain it?", "url": "https://github.com/line/armeria/pull/3110#discussion_r514100857", "createdAt": "2020-10-29T09:02:31Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    // TODO(tumile): Add content(Publisher).\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private String path;\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PATCH method and path.\n+     */\n+    public HttpRequestBuilder patch(String path) {\n+        return method(HttpMethod.PATCH).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with OPTIONS method and path.\n+     */\n+    public HttpRequestBuilder options(String path) {\n+        return method(HttpMethod.OPTIONS).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with HEAD method and path.\n+     */\n+    public HttpRequestBuilder head(String path) {\n+        return method(HttpMethod.HEAD).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with TRACE method and path.\n+     */\n+    public HttpRequestBuilder trace(String path) {\n+        return method(HttpMethod.TRACE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requestHeadersBuilder.method(requireNonNull(method, \"method\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        this.path = requireNonNull(path, \"path\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, CharSequence content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, String content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType contentType, @FormatString String format, Object... content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(format, \"format\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), format, content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, byte[] content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.wrap(content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, HttpData content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = content;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(CharSequence name, Object value) {\n+        requestHeadersBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        httpHeaders.forEach((BiConsumer<AsciiString, String>) requestHeadersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public HttpRequestBuilder trailers(HttpHeaders httpTrailers) {\n+        requireNonNull(httpTrailers, \"httpTrailers\");\n+        httpTrailers.forEach((BiConsumer<AsciiString, String>) httpTrailersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a path param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}\")\n+     *            .pathParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParam(String name, Object value) {\n+        pathParams.put(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple path params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}/{bar}\")\n+     *            .pathParams(Map.of(\"foo\", \"bar\", \"bar\", \"baz\"))\n+     *            .build(); // GET `/bar/baz`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParams(Map<String, Object> pathParams) {\n+        this.pathParams.putAll(requireNonNull(pathParams, \"pathParams\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a query param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/endpoint?foo=bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder queryParam(String name, Object value) {\n+        queryParamsBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple query params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParams(QueryParams.of(\"from\", \"foo\", \"limit\", 10))\n+     *            .build(); // GET `/endpoint?from=foo&limit=10`\n+     * }</pre>\n+     * @see QueryParams\n+     */\n+    public HttpRequestBuilder queryParams(QueryParams queryParams) {\n+        requireNonNull(queryParams, \"queryParams\");\n+        queryParams.forEach((BiConsumer<String, String>) queryParamsBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a cookie for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookie(Cookie.of(\"cookie\", \"foo\"))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookie\n+     */\n+    public HttpRequestBuilder cookie(Cookie cookie) {\n+        cookies.add(requireNonNull(cookie, \"cookie\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple cookies for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookies(Cookies.of(Cookie.of(\"cookie1\", \"foo\"),\n+     *                                Cookie.of(\"cookie2\", \"bar\")))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookies\n+     */\n+    public HttpRequestBuilder cookies(Cookies cookies) {\n+        this.cookies.addAll(requireNonNull(cookies, \"cookies\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Creates a new {@link HttpRequest}.\n+     */\n+    public HttpRequest build() {\n+        final RequestHeaders requestHeaders = requestHeaders();\n+        if (content == null || content.isEmpty()) {\n+            if (content != null) {\n+                content.close();\n+            }\n+            if (httpTrailersBuilder.isEmpty()) {\n+                return new EmptyFixedHttpRequest(requestHeaders);\n+            }\n+            return new OneElementFixedHttpRequest(requestHeaders, httpTrailersBuilder.build());\n+        }\n+        if (httpTrailersBuilder.isEmpty()) {\n+            return new OneElementFixedHttpRequest(requestHeaders, content);\n+        }\n+        return new TwoElementFixedHttpRequest(requestHeaders, content, httpTrailersBuilder.build());\n+    }\n+\n+    private RequestHeaders requestHeaders() {\n+        requestHeadersBuilder.path(buildPath());\n+        if (!cookies.isEmpty()) {\n+            requestHeadersBuilder.set(COOKIE, Cookie.toCookieHeader(cookies));\n+        }\n+        if (content == null || content.isEmpty()) {\n+            requestHeadersBuilder.remove(CONTENT_LENGTH);\n+        } else {\n+            requestHeadersBuilder.setInt(CONTENT_LENGTH, content.length());\n+        }\n+        return requestHeadersBuilder.build();\n+    }\n+\n+    private String buildPath() {\n+        checkState(path != null, \"path must be set.\");\n+        final StringBuilder pathBuilder = new StringBuilder(path);\n+        if (!pathParams.isEmpty()) {\n+            int i = 0;\n+            while (i < pathBuilder.length()) {\n+                if (pathBuilder.charAt(i) == '{') {\n+                    int j = i;\n+                    while (j < pathBuilder.length() && pathBuilder.charAt(j) != '}') {\n+                        j++;\n+                    }\n+                    if (j == pathBuilder.length()) {\n+                        break;\n+                    }\n+                    final String name = pathBuilder.substring(i + 1, j);\n+                    if (pathParams.containsKey(name)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1e80a941e6c67f253f3946e6b489f8c8c17bf0a"}, "originalPosition": 372}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE0OTQ3NQ==", "bodyText": "I think sometimes users might want to send {} as a path string without templatizing it.", "url": "https://github.com/line/armeria/pull/3110#discussion_r515149475", "createdAt": "2020-10-30T14:45:25Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    // TODO(tumile): Add content(Publisher).\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private String path;\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PATCH method and path.\n+     */\n+    public HttpRequestBuilder patch(String path) {\n+        return method(HttpMethod.PATCH).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with OPTIONS method and path.\n+     */\n+    public HttpRequestBuilder options(String path) {\n+        return method(HttpMethod.OPTIONS).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with HEAD method and path.\n+     */\n+    public HttpRequestBuilder head(String path) {\n+        return method(HttpMethod.HEAD).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with TRACE method and path.\n+     */\n+    public HttpRequestBuilder trace(String path) {\n+        return method(HttpMethod.TRACE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requestHeadersBuilder.method(requireNonNull(method, \"method\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        this.path = requireNonNull(path, \"path\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, CharSequence content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, String content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType contentType, @FormatString String format, Object... content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(format, \"format\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), format, content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, byte[] content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.wrap(content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, HttpData content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = content;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(CharSequence name, Object value) {\n+        requestHeadersBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        httpHeaders.forEach((BiConsumer<AsciiString, String>) requestHeadersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public HttpRequestBuilder trailers(HttpHeaders httpTrailers) {\n+        requireNonNull(httpTrailers, \"httpTrailers\");\n+        httpTrailers.forEach((BiConsumer<AsciiString, String>) httpTrailersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a path param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}\")\n+     *            .pathParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParam(String name, Object value) {\n+        pathParams.put(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple path params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}/{bar}\")\n+     *            .pathParams(Map.of(\"foo\", \"bar\", \"bar\", \"baz\"))\n+     *            .build(); // GET `/bar/baz`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParams(Map<String, Object> pathParams) {\n+        this.pathParams.putAll(requireNonNull(pathParams, \"pathParams\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a query param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/endpoint?foo=bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder queryParam(String name, Object value) {\n+        queryParamsBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple query params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParams(QueryParams.of(\"from\", \"foo\", \"limit\", 10))\n+     *            .build(); // GET `/endpoint?from=foo&limit=10`\n+     * }</pre>\n+     * @see QueryParams\n+     */\n+    public HttpRequestBuilder queryParams(QueryParams queryParams) {\n+        requireNonNull(queryParams, \"queryParams\");\n+        queryParams.forEach((BiConsumer<String, String>) queryParamsBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a cookie for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookie(Cookie.of(\"cookie\", \"foo\"))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookie\n+     */\n+    public HttpRequestBuilder cookie(Cookie cookie) {\n+        cookies.add(requireNonNull(cookie, \"cookie\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple cookies for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookies(Cookies.of(Cookie.of(\"cookie1\", \"foo\"),\n+     *                                Cookie.of(\"cookie2\", \"bar\")))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookies\n+     */\n+    public HttpRequestBuilder cookies(Cookies cookies) {\n+        this.cookies.addAll(requireNonNull(cookies, \"cookies\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Creates a new {@link HttpRequest}.\n+     */\n+    public HttpRequest build() {\n+        final RequestHeaders requestHeaders = requestHeaders();\n+        if (content == null || content.isEmpty()) {\n+            if (content != null) {\n+                content.close();\n+            }\n+            if (httpTrailersBuilder.isEmpty()) {\n+                return new EmptyFixedHttpRequest(requestHeaders);\n+            }\n+            return new OneElementFixedHttpRequest(requestHeaders, httpTrailersBuilder.build());\n+        }\n+        if (httpTrailersBuilder.isEmpty()) {\n+            return new OneElementFixedHttpRequest(requestHeaders, content);\n+        }\n+        return new TwoElementFixedHttpRequest(requestHeaders, content, httpTrailersBuilder.build());\n+    }\n+\n+    private RequestHeaders requestHeaders() {\n+        requestHeadersBuilder.path(buildPath());\n+        if (!cookies.isEmpty()) {\n+            requestHeadersBuilder.set(COOKIE, Cookie.toCookieHeader(cookies));\n+        }\n+        if (content == null || content.isEmpty()) {\n+            requestHeadersBuilder.remove(CONTENT_LENGTH);\n+        } else {\n+            requestHeadersBuilder.setInt(CONTENT_LENGTH, content.length());\n+        }\n+        return requestHeadersBuilder.build();\n+    }\n+\n+    private String buildPath() {\n+        checkState(path != null, \"path must be set.\");\n+        final StringBuilder pathBuilder = new StringBuilder(path);\n+        if (!pathParams.isEmpty()) {\n+            int i = 0;\n+            while (i < pathBuilder.length()) {\n+                if (pathBuilder.charAt(i) == '{') {\n+                    int j = i;\n+                    while (j < pathBuilder.length() && pathBuilder.charAt(j) != '}') {\n+                        j++;\n+                    }\n+                    if (j == pathBuilder.length()) {\n+                        break;\n+                    }\n+                    final String name = pathBuilder.substring(i + 1, j);\n+                    if (pathParams.containsKey(name)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEwMDg1Nw=="}, "originalCommit": {"oid": "b1e80a941e6c67f253f3946e6b489f8c8c17bf0a"}, "originalPosition": 372}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU4Mjk2OA==", "bodyText": "How about adding a method like disablePathParams() so that path parameter substitution is disabled completely and thus : or {} is handled in verbatim? /cc @tumile", "url": "https://github.com/line/armeria/pull/3110#discussion_r515582968", "createdAt": "2020-11-01T06:40:49Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    // TODO(tumile): Add content(Publisher).\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private String path;\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PATCH method and path.\n+     */\n+    public HttpRequestBuilder patch(String path) {\n+        return method(HttpMethod.PATCH).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with OPTIONS method and path.\n+     */\n+    public HttpRequestBuilder options(String path) {\n+        return method(HttpMethod.OPTIONS).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with HEAD method and path.\n+     */\n+    public HttpRequestBuilder head(String path) {\n+        return method(HttpMethod.HEAD).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with TRACE method and path.\n+     */\n+    public HttpRequestBuilder trace(String path) {\n+        return method(HttpMethod.TRACE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requestHeadersBuilder.method(requireNonNull(method, \"method\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        this.path = requireNonNull(path, \"path\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, CharSequence content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, String content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType contentType, @FormatString String format, Object... content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(format, \"format\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), format, content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, byte[] content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.wrap(content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, HttpData content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = content;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(CharSequence name, Object value) {\n+        requestHeadersBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        httpHeaders.forEach((BiConsumer<AsciiString, String>) requestHeadersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public HttpRequestBuilder trailers(HttpHeaders httpTrailers) {\n+        requireNonNull(httpTrailers, \"httpTrailers\");\n+        httpTrailers.forEach((BiConsumer<AsciiString, String>) httpTrailersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a path param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}\")\n+     *            .pathParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParam(String name, Object value) {\n+        pathParams.put(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple path params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}/{bar}\")\n+     *            .pathParams(Map.of(\"foo\", \"bar\", \"bar\", \"baz\"))\n+     *            .build(); // GET `/bar/baz`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParams(Map<String, Object> pathParams) {\n+        this.pathParams.putAll(requireNonNull(pathParams, \"pathParams\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a query param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/endpoint?foo=bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder queryParam(String name, Object value) {\n+        queryParamsBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple query params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParams(QueryParams.of(\"from\", \"foo\", \"limit\", 10))\n+     *            .build(); // GET `/endpoint?from=foo&limit=10`\n+     * }</pre>\n+     * @see QueryParams\n+     */\n+    public HttpRequestBuilder queryParams(QueryParams queryParams) {\n+        requireNonNull(queryParams, \"queryParams\");\n+        queryParams.forEach((BiConsumer<String, String>) queryParamsBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a cookie for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookie(Cookie.of(\"cookie\", \"foo\"))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookie\n+     */\n+    public HttpRequestBuilder cookie(Cookie cookie) {\n+        cookies.add(requireNonNull(cookie, \"cookie\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple cookies for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookies(Cookies.of(Cookie.of(\"cookie1\", \"foo\"),\n+     *                                Cookie.of(\"cookie2\", \"bar\")))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookies\n+     */\n+    public HttpRequestBuilder cookies(Cookies cookies) {\n+        this.cookies.addAll(requireNonNull(cookies, \"cookies\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Creates a new {@link HttpRequest}.\n+     */\n+    public HttpRequest build() {\n+        final RequestHeaders requestHeaders = requestHeaders();\n+        if (content == null || content.isEmpty()) {\n+            if (content != null) {\n+                content.close();\n+            }\n+            if (httpTrailersBuilder.isEmpty()) {\n+                return new EmptyFixedHttpRequest(requestHeaders);\n+            }\n+            return new OneElementFixedHttpRequest(requestHeaders, httpTrailersBuilder.build());\n+        }\n+        if (httpTrailersBuilder.isEmpty()) {\n+            return new OneElementFixedHttpRequest(requestHeaders, content);\n+        }\n+        return new TwoElementFixedHttpRequest(requestHeaders, content, httpTrailersBuilder.build());\n+    }\n+\n+    private RequestHeaders requestHeaders() {\n+        requestHeadersBuilder.path(buildPath());\n+        if (!cookies.isEmpty()) {\n+            requestHeadersBuilder.set(COOKIE, Cookie.toCookieHeader(cookies));\n+        }\n+        if (content == null || content.isEmpty()) {\n+            requestHeadersBuilder.remove(CONTENT_LENGTH);\n+        } else {\n+            requestHeadersBuilder.setInt(CONTENT_LENGTH, content.length());\n+        }\n+        return requestHeadersBuilder.build();\n+    }\n+\n+    private String buildPath() {\n+        checkState(path != null, \"path must be set.\");\n+        final StringBuilder pathBuilder = new StringBuilder(path);\n+        if (!pathParams.isEmpty()) {\n+            int i = 0;\n+            while (i < pathBuilder.length()) {\n+                if (pathBuilder.charAt(i) == '{') {\n+                    int j = i;\n+                    while (j < pathBuilder.length() && pathBuilder.charAt(j) != '}') {\n+                        j++;\n+                    }\n+                    if (j == pathBuilder.length()) {\n+                        break;\n+                    }\n+                    final String name = pathBuilder.substring(i + 1, j);\n+                    if (pathParams.containsKey(name)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEwMDg1Nw=="}, "originalCommit": {"oid": "b1e80a941e6c67f253f3946e6b489f8c8c17bf0a"}, "originalPosition": 372}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM5NjI0NA==", "bodyText": "How about adding a method like disablePathParams()\n\nThat's a good idea. \ud83d\udc4d", "url": "https://github.com/line/armeria/pull/3110#discussion_r516396244", "createdAt": "2020-11-03T02:24:00Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    // TODO(tumile): Add content(Publisher).\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private String path;\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PATCH method and path.\n+     */\n+    public HttpRequestBuilder patch(String path) {\n+        return method(HttpMethod.PATCH).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with OPTIONS method and path.\n+     */\n+    public HttpRequestBuilder options(String path) {\n+        return method(HttpMethod.OPTIONS).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with HEAD method and path.\n+     */\n+    public HttpRequestBuilder head(String path) {\n+        return method(HttpMethod.HEAD).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with TRACE method and path.\n+     */\n+    public HttpRequestBuilder trace(String path) {\n+        return method(HttpMethod.TRACE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requestHeadersBuilder.method(requireNonNull(method, \"method\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        this.path = requireNonNull(path, \"path\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, CharSequence content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, String content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType contentType, @FormatString String format, Object... content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(format, \"format\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), format, content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, byte[] content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.wrap(content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, HttpData content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = content;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(CharSequence name, Object value) {\n+        requestHeadersBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        httpHeaders.forEach((BiConsumer<AsciiString, String>) requestHeadersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public HttpRequestBuilder trailers(HttpHeaders httpTrailers) {\n+        requireNonNull(httpTrailers, \"httpTrailers\");\n+        httpTrailers.forEach((BiConsumer<AsciiString, String>) httpTrailersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a path param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}\")\n+     *            .pathParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParam(String name, Object value) {\n+        pathParams.put(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple path params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}/{bar}\")\n+     *            .pathParams(Map.of(\"foo\", \"bar\", \"bar\", \"baz\"))\n+     *            .build(); // GET `/bar/baz`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParams(Map<String, Object> pathParams) {\n+        this.pathParams.putAll(requireNonNull(pathParams, \"pathParams\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a query param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/endpoint?foo=bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder queryParam(String name, Object value) {\n+        queryParamsBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple query params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParams(QueryParams.of(\"from\", \"foo\", \"limit\", 10))\n+     *            .build(); // GET `/endpoint?from=foo&limit=10`\n+     * }</pre>\n+     * @see QueryParams\n+     */\n+    public HttpRequestBuilder queryParams(QueryParams queryParams) {\n+        requireNonNull(queryParams, \"queryParams\");\n+        queryParams.forEach((BiConsumer<String, String>) queryParamsBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a cookie for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookie(Cookie.of(\"cookie\", \"foo\"))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookie\n+     */\n+    public HttpRequestBuilder cookie(Cookie cookie) {\n+        cookies.add(requireNonNull(cookie, \"cookie\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple cookies for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookies(Cookies.of(Cookie.of(\"cookie1\", \"foo\"),\n+     *                                Cookie.of(\"cookie2\", \"bar\")))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookies\n+     */\n+    public HttpRequestBuilder cookies(Cookies cookies) {\n+        this.cookies.addAll(requireNonNull(cookies, \"cookies\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Creates a new {@link HttpRequest}.\n+     */\n+    public HttpRequest build() {\n+        final RequestHeaders requestHeaders = requestHeaders();\n+        if (content == null || content.isEmpty()) {\n+            if (content != null) {\n+                content.close();\n+            }\n+            if (httpTrailersBuilder.isEmpty()) {\n+                return new EmptyFixedHttpRequest(requestHeaders);\n+            }\n+            return new OneElementFixedHttpRequest(requestHeaders, httpTrailersBuilder.build());\n+        }\n+        if (httpTrailersBuilder.isEmpty()) {\n+            return new OneElementFixedHttpRequest(requestHeaders, content);\n+        }\n+        return new TwoElementFixedHttpRequest(requestHeaders, content, httpTrailersBuilder.build());\n+    }\n+\n+    private RequestHeaders requestHeaders() {\n+        requestHeadersBuilder.path(buildPath());\n+        if (!cookies.isEmpty()) {\n+            requestHeadersBuilder.set(COOKIE, Cookie.toCookieHeader(cookies));\n+        }\n+        if (content == null || content.isEmpty()) {\n+            requestHeadersBuilder.remove(CONTENT_LENGTH);\n+        } else {\n+            requestHeadersBuilder.setInt(CONTENT_LENGTH, content.length());\n+        }\n+        return requestHeadersBuilder.build();\n+    }\n+\n+    private String buildPath() {\n+        checkState(path != null, \"path must be set.\");\n+        final StringBuilder pathBuilder = new StringBuilder(path);\n+        if (!pathParams.isEmpty()) {\n+            int i = 0;\n+            while (i < pathBuilder.length()) {\n+                if (pathBuilder.charAt(i) == '{') {\n+                    int j = i;\n+                    while (j < pathBuilder.length() && pathBuilder.charAt(j) != '}') {\n+                        j++;\n+                    }\n+                    if (j == pathBuilder.length()) {\n+                        break;\n+                    }\n+                    final String name = pathBuilder.substring(i + 1, j);\n+                    if (pathParams.containsKey(name)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEwMDg1Nw=="}, "originalCommit": {"oid": "b1e80a941e6c67f253f3946e6b489f8c8c17bf0a"}, "originalPosition": 372}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcyMjE4MQ==", "bodyText": "Sounds good. So if pathParams is enabled and we have a {} that does not match I assume we'll raise an exception?", "url": "https://github.com/line/armeria/pull/3110#discussion_r516722181", "createdAt": "2020-11-03T14:47:38Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    // TODO(tumile): Add content(Publisher).\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private String path;\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PATCH method and path.\n+     */\n+    public HttpRequestBuilder patch(String path) {\n+        return method(HttpMethod.PATCH).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with OPTIONS method and path.\n+     */\n+    public HttpRequestBuilder options(String path) {\n+        return method(HttpMethod.OPTIONS).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with HEAD method and path.\n+     */\n+    public HttpRequestBuilder head(String path) {\n+        return method(HttpMethod.HEAD).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with TRACE method and path.\n+     */\n+    public HttpRequestBuilder trace(String path) {\n+        return method(HttpMethod.TRACE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requestHeadersBuilder.method(requireNonNull(method, \"method\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        this.path = requireNonNull(path, \"path\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, CharSequence content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, String content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType contentType, @FormatString String format, Object... content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(format, \"format\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), format, content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, byte[] content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.wrap(content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, HttpData content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = content;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(CharSequence name, Object value) {\n+        requestHeadersBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        httpHeaders.forEach((BiConsumer<AsciiString, String>) requestHeadersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public HttpRequestBuilder trailers(HttpHeaders httpTrailers) {\n+        requireNonNull(httpTrailers, \"httpTrailers\");\n+        httpTrailers.forEach((BiConsumer<AsciiString, String>) httpTrailersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a path param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}\")\n+     *            .pathParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParam(String name, Object value) {\n+        pathParams.put(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple path params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}/{bar}\")\n+     *            .pathParams(Map.of(\"foo\", \"bar\", \"bar\", \"baz\"))\n+     *            .build(); // GET `/bar/baz`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParams(Map<String, Object> pathParams) {\n+        this.pathParams.putAll(requireNonNull(pathParams, \"pathParams\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a query param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/endpoint?foo=bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder queryParam(String name, Object value) {\n+        queryParamsBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple query params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParams(QueryParams.of(\"from\", \"foo\", \"limit\", 10))\n+     *            .build(); // GET `/endpoint?from=foo&limit=10`\n+     * }</pre>\n+     * @see QueryParams\n+     */\n+    public HttpRequestBuilder queryParams(QueryParams queryParams) {\n+        requireNonNull(queryParams, \"queryParams\");\n+        queryParams.forEach((BiConsumer<String, String>) queryParamsBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a cookie for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookie(Cookie.of(\"cookie\", \"foo\"))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookie\n+     */\n+    public HttpRequestBuilder cookie(Cookie cookie) {\n+        cookies.add(requireNonNull(cookie, \"cookie\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple cookies for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookies(Cookies.of(Cookie.of(\"cookie1\", \"foo\"),\n+     *                                Cookie.of(\"cookie2\", \"bar\")))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookies\n+     */\n+    public HttpRequestBuilder cookies(Cookies cookies) {\n+        this.cookies.addAll(requireNonNull(cookies, \"cookies\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Creates a new {@link HttpRequest}.\n+     */\n+    public HttpRequest build() {\n+        final RequestHeaders requestHeaders = requestHeaders();\n+        if (content == null || content.isEmpty()) {\n+            if (content != null) {\n+                content.close();\n+            }\n+            if (httpTrailersBuilder.isEmpty()) {\n+                return new EmptyFixedHttpRequest(requestHeaders);\n+            }\n+            return new OneElementFixedHttpRequest(requestHeaders, httpTrailersBuilder.build());\n+        }\n+        if (httpTrailersBuilder.isEmpty()) {\n+            return new OneElementFixedHttpRequest(requestHeaders, content);\n+        }\n+        return new TwoElementFixedHttpRequest(requestHeaders, content, httpTrailersBuilder.build());\n+    }\n+\n+    private RequestHeaders requestHeaders() {\n+        requestHeadersBuilder.path(buildPath());\n+        if (!cookies.isEmpty()) {\n+            requestHeadersBuilder.set(COOKIE, Cookie.toCookieHeader(cookies));\n+        }\n+        if (content == null || content.isEmpty()) {\n+            requestHeadersBuilder.remove(CONTENT_LENGTH);\n+        } else {\n+            requestHeadersBuilder.setInt(CONTENT_LENGTH, content.length());\n+        }\n+        return requestHeadersBuilder.build();\n+    }\n+\n+    private String buildPath() {\n+        checkState(path != null, \"path must be set.\");\n+        final StringBuilder pathBuilder = new StringBuilder(path);\n+        if (!pathParams.isEmpty()) {\n+            int i = 0;\n+            while (i < pathBuilder.length()) {\n+                if (pathBuilder.charAt(i) == '{') {\n+                    int j = i;\n+                    while (j < pathBuilder.length() && pathBuilder.charAt(j) != '}') {\n+                        j++;\n+                    }\n+                    if (j == pathBuilder.length()) {\n+                        break;\n+                    }\n+                    final String name = pathBuilder.substring(i + 1, j);\n+                    if (pathParams.containsKey(name)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEwMDg1Nw=="}, "originalCommit": {"oid": "b1e80a941e6c67f253f3946e6b489f8c8c17bf0a"}, "originalPosition": 372}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ4Nzk1Nw==", "bodyText": "Correct", "url": "https://github.com/line/armeria/pull/3110#discussion_r518487957", "createdAt": "2020-11-06T02:30:10Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    // TODO(tumile): Add content(Publisher).\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private String path;\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PATCH method and path.\n+     */\n+    public HttpRequestBuilder patch(String path) {\n+        return method(HttpMethod.PATCH).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with OPTIONS method and path.\n+     */\n+    public HttpRequestBuilder options(String path) {\n+        return method(HttpMethod.OPTIONS).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with HEAD method and path.\n+     */\n+    public HttpRequestBuilder head(String path) {\n+        return method(HttpMethod.HEAD).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with TRACE method and path.\n+     */\n+    public HttpRequestBuilder trace(String path) {\n+        return method(HttpMethod.TRACE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requestHeadersBuilder.method(requireNonNull(method, \"method\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        this.path = requireNonNull(path, \"path\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, CharSequence content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, String content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType contentType, @FormatString String format, Object... content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(format, \"format\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), format, content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, byte[] content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.wrap(content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, HttpData content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = content;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(CharSequence name, Object value) {\n+        requestHeadersBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        httpHeaders.forEach((BiConsumer<AsciiString, String>) requestHeadersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public HttpRequestBuilder trailers(HttpHeaders httpTrailers) {\n+        requireNonNull(httpTrailers, \"httpTrailers\");\n+        httpTrailers.forEach((BiConsumer<AsciiString, String>) httpTrailersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a path param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}\")\n+     *            .pathParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParam(String name, Object value) {\n+        pathParams.put(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple path params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}/{bar}\")\n+     *            .pathParams(Map.of(\"foo\", \"bar\", \"bar\", \"baz\"))\n+     *            .build(); // GET `/bar/baz`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParams(Map<String, Object> pathParams) {\n+        this.pathParams.putAll(requireNonNull(pathParams, \"pathParams\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a query param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/endpoint?foo=bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder queryParam(String name, Object value) {\n+        queryParamsBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple query params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParams(QueryParams.of(\"from\", \"foo\", \"limit\", 10))\n+     *            .build(); // GET `/endpoint?from=foo&limit=10`\n+     * }</pre>\n+     * @see QueryParams\n+     */\n+    public HttpRequestBuilder queryParams(QueryParams queryParams) {\n+        requireNonNull(queryParams, \"queryParams\");\n+        queryParams.forEach((BiConsumer<String, String>) queryParamsBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a cookie for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookie(Cookie.of(\"cookie\", \"foo\"))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookie\n+     */\n+    public HttpRequestBuilder cookie(Cookie cookie) {\n+        cookies.add(requireNonNull(cookie, \"cookie\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple cookies for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookies(Cookies.of(Cookie.of(\"cookie1\", \"foo\"),\n+     *                                Cookie.of(\"cookie2\", \"bar\")))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookies\n+     */\n+    public HttpRequestBuilder cookies(Cookies cookies) {\n+        this.cookies.addAll(requireNonNull(cookies, \"cookies\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Creates a new {@link HttpRequest}.\n+     */\n+    public HttpRequest build() {\n+        final RequestHeaders requestHeaders = requestHeaders();\n+        if (content == null || content.isEmpty()) {\n+            if (content != null) {\n+                content.close();\n+            }\n+            if (httpTrailersBuilder.isEmpty()) {\n+                return new EmptyFixedHttpRequest(requestHeaders);\n+            }\n+            return new OneElementFixedHttpRequest(requestHeaders, httpTrailersBuilder.build());\n+        }\n+        if (httpTrailersBuilder.isEmpty()) {\n+            return new OneElementFixedHttpRequest(requestHeaders, content);\n+        }\n+        return new TwoElementFixedHttpRequest(requestHeaders, content, httpTrailersBuilder.build());\n+    }\n+\n+    private RequestHeaders requestHeaders() {\n+        requestHeadersBuilder.path(buildPath());\n+        if (!cookies.isEmpty()) {\n+            requestHeadersBuilder.set(COOKIE, Cookie.toCookieHeader(cookies));\n+        }\n+        if (content == null || content.isEmpty()) {\n+            requestHeadersBuilder.remove(CONTENT_LENGTH);\n+        } else {\n+            requestHeadersBuilder.setInt(CONTENT_LENGTH, content.length());\n+        }\n+        return requestHeadersBuilder.build();\n+    }\n+\n+    private String buildPath() {\n+        checkState(path != null, \"path must be set.\");\n+        final StringBuilder pathBuilder = new StringBuilder(path);\n+        if (!pathParams.isEmpty()) {\n+            int i = 0;\n+            while (i < pathBuilder.length()) {\n+                if (pathBuilder.charAt(i) == '{') {\n+                    int j = i;\n+                    while (j < pathBuilder.length() && pathBuilder.charAt(j) != '}') {\n+                        j++;\n+                    }\n+                    if (j == pathBuilder.length()) {\n+                        break;\n+                    }\n+                    final String name = pathBuilder.substring(i + 1, j);\n+                    if (pathParams.containsKey(name)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEwMDg1Nw=="}, "originalCommit": {"oid": "b1e80a941e6c67f253f3946e6b489f8c8c17bf0a"}, "originalPosition": 372}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjk1Njk4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToxNTo0NlrOHrKnIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToxNTo0NlrOHrKnIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAyNDY3Mw==", "bodyText": "Could you rephrase the Javadoc a little? This method doesn't really create a new builder anymore \ud83d\ude04", "url": "https://github.com/line/armeria/pull/3110#discussion_r515024673", "createdAt": "2020-10-30T11:15:46Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    // TODO(tumile): Add content(Publisher).\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private String path;\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1e80a941e6c67f253f3946e6b489f8c8c17bf0a"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjk2Mjc2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToxNzoxOFrOHrKqZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToxNzoxOFrOHrKqZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAyNTUxMA==", "bodyText": "queryParamsBuilder.set(queryParams) does the same job. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/3110#discussion_r515025510", "createdAt": "2020-10-30T11:17:18Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    // TODO(tumile): Add content(Publisher).\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private String path;\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PATCH method and path.\n+     */\n+    public HttpRequestBuilder patch(String path) {\n+        return method(HttpMethod.PATCH).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with OPTIONS method and path.\n+     */\n+    public HttpRequestBuilder options(String path) {\n+        return method(HttpMethod.OPTIONS).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with HEAD method and path.\n+     */\n+    public HttpRequestBuilder head(String path) {\n+        return method(HttpMethod.HEAD).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with TRACE method and path.\n+     */\n+    public HttpRequestBuilder trace(String path) {\n+        return method(HttpMethod.TRACE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requestHeadersBuilder.method(requireNonNull(method, \"method\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        this.path = requireNonNull(path, \"path\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, CharSequence content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, String content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType contentType, @FormatString String format, Object... content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(format, \"format\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), format, content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, byte[] content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.wrap(content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, HttpData content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = content;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(CharSequence name, Object value) {\n+        requestHeadersBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        httpHeaders.forEach((BiConsumer<AsciiString, String>) requestHeadersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public HttpRequestBuilder trailers(HttpHeaders httpTrailers) {\n+        requireNonNull(httpTrailers, \"httpTrailers\");\n+        httpTrailers.forEach((BiConsumer<AsciiString, String>) httpTrailersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a path param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}\")\n+     *            .pathParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParam(String name, Object value) {\n+        pathParams.put(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple path params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}/{bar}\")\n+     *            .pathParams(Map.of(\"foo\", \"bar\", \"bar\", \"baz\"))\n+     *            .build(); // GET `/bar/baz`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParams(Map<String, Object> pathParams) {\n+        this.pathParams.putAll(requireNonNull(pathParams, \"pathParams\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a query param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/endpoint?foo=bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder queryParam(String name, Object value) {\n+        queryParamsBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple query params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParams(QueryParams.of(\"from\", \"foo\", \"limit\", 10))\n+     *            .build(); // GET `/endpoint?from=foo&limit=10`\n+     * }</pre>\n+     * @see QueryParams\n+     */\n+    public HttpRequestBuilder queryParams(QueryParams queryParams) {\n+        requireNonNull(queryParams, \"queryParams\");\n+        queryParams.forEach((BiConsumer<String, String>) queryParamsBuilder::set);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1e80a941e6c67f253f3946e6b489f8c8c17bf0a"}, "originalPosition": 289}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjk2NTE1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToxODowMFrOHrKryw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToxODowMFrOHrKryw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAyNTg2Nw==", "bodyText": "Could accept Iterable<? extends Entry<? extends String, String>> instead.", "url": "https://github.com/line/armeria/pull/3110#discussion_r515025867", "createdAt": "2020-10-30T11:18:00Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    // TODO(tumile): Add content(Publisher).\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private String path;\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PATCH method and path.\n+     */\n+    public HttpRequestBuilder patch(String path) {\n+        return method(HttpMethod.PATCH).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with OPTIONS method and path.\n+     */\n+    public HttpRequestBuilder options(String path) {\n+        return method(HttpMethod.OPTIONS).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with HEAD method and path.\n+     */\n+    public HttpRequestBuilder head(String path) {\n+        return method(HttpMethod.HEAD).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with TRACE method and path.\n+     */\n+    public HttpRequestBuilder trace(String path) {\n+        return method(HttpMethod.TRACE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requestHeadersBuilder.method(requireNonNull(method, \"method\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        this.path = requireNonNull(path, \"path\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, CharSequence content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, String content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType contentType, @FormatString String format, Object... content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(format, \"format\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), format, content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, byte[] content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.wrap(content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, HttpData content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = content;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(CharSequence name, Object value) {\n+        requestHeadersBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        httpHeaders.forEach((BiConsumer<AsciiString, String>) requestHeadersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public HttpRequestBuilder trailers(HttpHeaders httpTrailers) {\n+        requireNonNull(httpTrailers, \"httpTrailers\");\n+        httpTrailers.forEach((BiConsumer<AsciiString, String>) httpTrailersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a path param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}\")\n+     *            .pathParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParam(String name, Object value) {\n+        pathParams.put(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple path params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}/{bar}\")\n+     *            .pathParams(Map.of(\"foo\", \"bar\", \"bar\", \"baz\"))\n+     *            .build(); // GET `/bar/baz`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParams(Map<String, Object> pathParams) {\n+        this.pathParams.putAll(requireNonNull(pathParams, \"pathParams\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a query param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/endpoint?foo=bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder queryParam(String name, Object value) {\n+        queryParamsBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple query params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParams(QueryParams.of(\"from\", \"foo\", \"limit\", 10))\n+     *            .build(); // GET `/endpoint?from=foo&limit=10`\n+     * }</pre>\n+     * @see QueryParams\n+     */\n+    public HttpRequestBuilder queryParams(QueryParams queryParams) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1e80a941e6c67f253f3946e6b489f8c8c17bf0a"}, "originalPosition": 287}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjk3MDg2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToxOToxNVrOHrKu6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToxOToxNVrOHrKu6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAyNjY2NQ==", "bodyText": "Could accept Iterable<? extends Entry<? extends CharSequence, String>> instead.\nrequestHeadersBuilder.set(httpHeaders) does the same job.", "url": "https://github.com/line/armeria/pull/3110#discussion_r515026665", "createdAt": "2020-10-30T11:19:15Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    // TODO(tumile): Add content(Publisher).\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private String path;\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PATCH method and path.\n+     */\n+    public HttpRequestBuilder patch(String path) {\n+        return method(HttpMethod.PATCH).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with OPTIONS method and path.\n+     */\n+    public HttpRequestBuilder options(String path) {\n+        return method(HttpMethod.OPTIONS).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with HEAD method and path.\n+     */\n+    public HttpRequestBuilder head(String path) {\n+        return method(HttpMethod.HEAD).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with TRACE method and path.\n+     */\n+    public HttpRequestBuilder trace(String path) {\n+        return method(HttpMethod.TRACE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requestHeadersBuilder.method(requireNonNull(method, \"method\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        this.path = requireNonNull(path, \"path\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, CharSequence content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, String content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType contentType, @FormatString String format, Object... content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(format, \"format\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), format, content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, byte[] content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.wrap(content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, HttpData content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = content;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(CharSequence name, Object value) {\n+        requestHeadersBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        httpHeaders.forEach((BiConsumer<AsciiString, String>) requestHeadersBuilder::set);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1e80a941e6c67f253f3946e6b489f8c8c17bf0a"}, "originalPosition": 222}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjk3MjQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToxOTozOVrOHrKvyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToxOTozOVrOHrKvyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAyNjg5MQ==", "bodyText": "Could accept Iterable<? extends Entry<? extends CharSequence, String>> instead.\nhttpTrailersBuilder.set(httpTrailers) does the same job.", "url": "https://github.com/line/armeria/pull/3110#discussion_r515026891", "createdAt": "2020-10-30T11:19:39Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    // TODO(tumile): Add content(Publisher).\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private String path;\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PATCH method and path.\n+     */\n+    public HttpRequestBuilder patch(String path) {\n+        return method(HttpMethod.PATCH).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with OPTIONS method and path.\n+     */\n+    public HttpRequestBuilder options(String path) {\n+        return method(HttpMethod.OPTIONS).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with HEAD method and path.\n+     */\n+    public HttpRequestBuilder head(String path) {\n+        return method(HttpMethod.HEAD).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with TRACE method and path.\n+     */\n+    public HttpRequestBuilder trace(String path) {\n+        return method(HttpMethod.TRACE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requestHeadersBuilder.method(requireNonNull(method, \"method\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        this.path = requireNonNull(path, \"path\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, CharSequence content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, String content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType contentType, @FormatString String format, Object... content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(format, \"format\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), format, content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, byte[] content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.wrap(content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, HttpData content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = content;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(CharSequence name, Object value) {\n+        requestHeadersBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        httpHeaders.forEach((BiConsumer<AsciiString, String>) requestHeadersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public HttpRequestBuilder trailers(HttpHeaders httpTrailers) {\n+        requireNonNull(httpTrailers, \"httpTrailers\");\n+        httpTrailers.forEach((BiConsumer<AsciiString, String>) httpTrailersBuilder::set);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1e80a941e6c67f253f3946e6b489f8c8c17bf0a"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjk3OTQzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyMToyNFrOHrKzoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyMToyNFrOHrKzoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAyNzg3Mg==", "bodyText": "Could we accept Iterable<? extends Entry<String, ?>> instead? I think it will also accept Map<String, ?>.", "url": "https://github.com/line/armeria/pull/3110#discussion_r515027872", "createdAt": "2020-10-30T11:21:24Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    // TODO(tumile): Add content(Publisher).\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private String path;\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PATCH method and path.\n+     */\n+    public HttpRequestBuilder patch(String path) {\n+        return method(HttpMethod.PATCH).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with OPTIONS method and path.\n+     */\n+    public HttpRequestBuilder options(String path) {\n+        return method(HttpMethod.OPTIONS).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with HEAD method and path.\n+     */\n+    public HttpRequestBuilder head(String path) {\n+        return method(HttpMethod.HEAD).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with TRACE method and path.\n+     */\n+    public HttpRequestBuilder trace(String path) {\n+        return method(HttpMethod.TRACE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requestHeadersBuilder.method(requireNonNull(method, \"method\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        this.path = requireNonNull(path, \"path\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, CharSequence content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, String content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType contentType, @FormatString String format, Object... content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(format, \"format\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), format, content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, byte[] content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.wrap(content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, HttpData content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = content;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(CharSequence name, Object value) {\n+        requestHeadersBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        httpHeaders.forEach((BiConsumer<AsciiString, String>) requestHeadersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public HttpRequestBuilder trailers(HttpHeaders httpTrailers) {\n+        requireNonNull(httpTrailers, \"httpTrailers\");\n+        httpTrailers.forEach((BiConsumer<AsciiString, String>) httpTrailersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a path param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}\")\n+     *            .pathParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParam(String name, Object value) {\n+        pathParams.put(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple path params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}/{bar}\")\n+     *            .pathParams(Map.of(\"foo\", \"bar\", \"bar\", \"baz\"))\n+     *            .build(); // GET `/bar/baz`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParams(Map<String, Object> pathParams) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1e80a941e6c67f253f3946e6b489f8c8c17bf0a"}, "originalPosition": 258}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjk4Mjk1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyMjoyMFrOHrK1rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToyMjoyMFrOHrK1rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAyODM5Ng==", "bodyText": "Thanks, @tumile \u2764\ufe0f", "url": "https://github.com/line/armeria/pull/3110#discussion_r515028396", "createdAt": "2020-10-30T11:22:20Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    // TODO(tumile): Add content(Publisher).\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private String path;\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PATCH method and path.\n+     */\n+    public HttpRequestBuilder patch(String path) {\n+        return method(HttpMethod.PATCH).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with OPTIONS method and path.\n+     */\n+    public HttpRequestBuilder options(String path) {\n+        return method(HttpMethod.OPTIONS).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with HEAD method and path.\n+     */\n+    public HttpRequestBuilder head(String path) {\n+        return method(HttpMethod.HEAD).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with TRACE method and path.\n+     */\n+    public HttpRequestBuilder trace(String path) {\n+        return method(HttpMethod.TRACE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requestHeadersBuilder.method(requireNonNull(method, \"method\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        this.path = requireNonNull(path, \"path\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, CharSequence content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, String content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType contentType, @FormatString String format, Object... content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(format, \"format\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), format, content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, byte[] content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.wrap(content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, HttpData content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = content;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(CharSequence name, Object value) {\n+        requestHeadersBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        httpHeaders.forEach((BiConsumer<AsciiString, String>) requestHeadersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public HttpRequestBuilder trailers(HttpHeaders httpTrailers) {\n+        requireNonNull(httpTrailers, \"httpTrailers\");\n+        httpTrailers.forEach((BiConsumer<AsciiString, String>) httpTrailersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a path param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}\")\n+     *            .pathParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParam(String name, Object value) {\n+        pathParams.put(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple path params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}/{bar}\")\n+     *            .pathParams(Map.of(\"foo\", \"bar\", \"bar\", \"baz\"))\n+     *            .build(); // GET `/bar/baz`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParams(Map<String, Object> pathParams) {\n+        this.pathParams.putAll(requireNonNull(pathParams, \"pathParams\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a query param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/endpoint?foo=bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder queryParam(String name, Object value) {\n+        queryParamsBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple query params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParams(QueryParams.of(\"from\", \"foo\", \"limit\", 10))\n+     *            .build(); // GET `/endpoint?from=foo&limit=10`\n+     * }</pre>\n+     * @see QueryParams\n+     */\n+    public HttpRequestBuilder queryParams(QueryParams queryParams) {\n+        requireNonNull(queryParams, \"queryParams\");\n+        queryParams.forEach((BiConsumer<String, String>) queryParamsBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a cookie for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookie(Cookie.of(\"cookie\", \"foo\"))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookie\n+     */\n+    public HttpRequestBuilder cookie(Cookie cookie) {\n+        cookies.add(requireNonNull(cookie, \"cookie\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple cookies for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookies(Cookies.of(Cookie.of(\"cookie1\", \"foo\"),\n+     *                                Cookie.of(\"cookie2\", \"bar\")))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookies\n+     */\n+    public HttpRequestBuilder cookies(Cookies cookies) {\n+        this.cookies.addAll(requireNonNull(cookies, \"cookies\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Creates a new {@link HttpRequest}.\n+     */\n+    public HttpRequest build() {\n+        final RequestHeaders requestHeaders = requestHeaders();\n+        if (content == null || content.isEmpty()) {\n+            if (content != null) {\n+                content.close();\n+            }\n+            if (httpTrailersBuilder.isEmpty()) {\n+                return new EmptyFixedHttpRequest(requestHeaders);\n+            }\n+            return new OneElementFixedHttpRequest(requestHeaders, httpTrailersBuilder.build());\n+        }\n+        if (httpTrailersBuilder.isEmpty()) {\n+            return new OneElementFixedHttpRequest(requestHeaders, content);\n+        }\n+        return new TwoElementFixedHttpRequest(requestHeaders, content, httpTrailersBuilder.build());\n+    }\n+\n+    private RequestHeaders requestHeaders() {\n+        requestHeadersBuilder.path(buildPath());\n+        if (!cookies.isEmpty()) {\n+            requestHeadersBuilder.set(COOKIE, Cookie.toCookieHeader(cookies));\n+        }\n+        if (content == null || content.isEmpty()) {\n+            requestHeadersBuilder.remove(CONTENT_LENGTH);\n+        } else {\n+            requestHeadersBuilder.setInt(CONTENT_LENGTH, content.length());\n+        }\n+        return requestHeadersBuilder.build();\n+    }\n+\n+    private String buildPath() {\n+        checkState(path != null, \"path must be set.\");\n+        final StringBuilder pathBuilder = new StringBuilder(path);\n+        if (!pathParams.isEmpty()) {\n+            int i = 0;\n+            while (i < pathBuilder.length()) {\n+                if (pathBuilder.charAt(i) == '{') {\n+                    int j = i;\n+                    while (j < pathBuilder.length() && pathBuilder.charAt(j) != '}') {\n+                        j++;\n+                    }\n+                    if (j == pathBuilder.length()) {\n+                        break;\n+                    }\n+                    final String name = pathBuilder.substring(i + 1, j);\n+                    if (pathParams.containsKey(name)) {\n+                        final String value = pathParams.get(name).toString();\n+                        pathBuilder.replace(i, j + 1, value);\n+                        i += value.length() - 1;\n+                    }\n+                } else if (pathBuilder.charAt(i) == ':') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1e80a941e6c67f253f3946e6b489f8c8c17bf0a"}, "originalPosition": 377}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzc0NTM4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNDozOTo0MFrOHrR_PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNDozOTo0MFrOHrR_PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE0NTUzMw==", "bodyText": "Micro optimization: Return path if pathParams.isEmpty() and queryParamsBuilder.isEmpty()?", "url": "https://github.com/line/armeria/pull/3110#discussion_r515145533", "createdAt": "2020-10-30T14:39:40Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    // TODO(tumile): Add content(Publisher).\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private String path;\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PATCH method and path.\n+     */\n+    public HttpRequestBuilder patch(String path) {\n+        return method(HttpMethod.PATCH).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with OPTIONS method and path.\n+     */\n+    public HttpRequestBuilder options(String path) {\n+        return method(HttpMethod.OPTIONS).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with HEAD method and path.\n+     */\n+    public HttpRequestBuilder head(String path) {\n+        return method(HttpMethod.HEAD).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with TRACE method and path.\n+     */\n+    public HttpRequestBuilder trace(String path) {\n+        return method(HttpMethod.TRACE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requestHeadersBuilder.method(requireNonNull(method, \"method\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        this.path = requireNonNull(path, \"path\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, CharSequence content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, String content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType contentType, @FormatString String format, Object... content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(format, \"format\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), format, content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, byte[] content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.wrap(content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, HttpData content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = content;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(CharSequence name, Object value) {\n+        requestHeadersBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        httpHeaders.forEach((BiConsumer<AsciiString, String>) requestHeadersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public HttpRequestBuilder trailers(HttpHeaders httpTrailers) {\n+        requireNonNull(httpTrailers, \"httpTrailers\");\n+        httpTrailers.forEach((BiConsumer<AsciiString, String>) httpTrailersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a path param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}\")\n+     *            .pathParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParam(String name, Object value) {\n+        pathParams.put(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple path params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}/{bar}\")\n+     *            .pathParams(Map.of(\"foo\", \"bar\", \"bar\", \"baz\"))\n+     *            .build(); // GET `/bar/baz`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParams(Map<String, Object> pathParams) {\n+        this.pathParams.putAll(requireNonNull(pathParams, \"pathParams\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a query param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/endpoint?foo=bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder queryParam(String name, Object value) {\n+        queryParamsBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple query params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParams(QueryParams.of(\"from\", \"foo\", \"limit\", 10))\n+     *            .build(); // GET `/endpoint?from=foo&limit=10`\n+     * }</pre>\n+     * @see QueryParams\n+     */\n+    public HttpRequestBuilder queryParams(QueryParams queryParams) {\n+        requireNonNull(queryParams, \"queryParams\");\n+        queryParams.forEach((BiConsumer<String, String>) queryParamsBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a cookie for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookie(Cookie.of(\"cookie\", \"foo\"))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookie\n+     */\n+    public HttpRequestBuilder cookie(Cookie cookie) {\n+        cookies.add(requireNonNull(cookie, \"cookie\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple cookies for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookies(Cookies.of(Cookie.of(\"cookie1\", \"foo\"),\n+     *                                Cookie.of(\"cookie2\", \"bar\")))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookies\n+     */\n+    public HttpRequestBuilder cookies(Cookies cookies) {\n+        this.cookies.addAll(requireNonNull(cookies, \"cookies\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Creates a new {@link HttpRequest}.\n+     */\n+    public HttpRequest build() {\n+        final RequestHeaders requestHeaders = requestHeaders();\n+        if (content == null || content.isEmpty()) {\n+            if (content != null) {\n+                content.close();\n+            }\n+            if (httpTrailersBuilder.isEmpty()) {\n+                return new EmptyFixedHttpRequest(requestHeaders);\n+            }\n+            return new OneElementFixedHttpRequest(requestHeaders, httpTrailersBuilder.build());\n+        }\n+        if (httpTrailersBuilder.isEmpty()) {\n+            return new OneElementFixedHttpRequest(requestHeaders, content);\n+        }\n+        return new TwoElementFixedHttpRequest(requestHeaders, content, httpTrailersBuilder.build());\n+    }\n+\n+    private RequestHeaders requestHeaders() {\n+        requestHeadersBuilder.path(buildPath());\n+        if (!cookies.isEmpty()) {\n+            requestHeadersBuilder.set(COOKIE, Cookie.toCookieHeader(cookies));\n+        }\n+        if (content == null || content.isEmpty()) {\n+            requestHeadersBuilder.remove(CONTENT_LENGTH);\n+        } else {\n+            requestHeadersBuilder.setInt(CONTENT_LENGTH, content.length());\n+        }\n+        return requestHeadersBuilder.build();\n+    }\n+\n+    private String buildPath() {\n+        checkState(path != null, \"path must be set.\");\n+        final StringBuilder pathBuilder = new StringBuilder(path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1e80a941e6c67f253f3946e6b489f8c8c17bf0a"}, "originalPosition": 359}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzc4MDI0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNDo0ODowMFrOHrSVMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMDowMTo0NVrOHrjQ6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE1MTE1Mg==", "bodyText": "Maybe?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                int j = i;\n          \n          \n            \n                                int j = i + 1;\n          \n      \n    \n    \n  \n\nAnd we need to check whether j is greater than pathBuilder.length() just in case a path ends with /foo/bar{", "url": "https://github.com/line/armeria/pull/3110#discussion_r515151152", "createdAt": "2020-10-30T14:48:00Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    // TODO(tumile): Add content(Publisher).\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private String path;\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PATCH method and path.\n+     */\n+    public HttpRequestBuilder patch(String path) {\n+        return method(HttpMethod.PATCH).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with OPTIONS method and path.\n+     */\n+    public HttpRequestBuilder options(String path) {\n+        return method(HttpMethod.OPTIONS).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with HEAD method and path.\n+     */\n+    public HttpRequestBuilder head(String path) {\n+        return method(HttpMethod.HEAD).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with TRACE method and path.\n+     */\n+    public HttpRequestBuilder trace(String path) {\n+        return method(HttpMethod.TRACE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requestHeadersBuilder.method(requireNonNull(method, \"method\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        this.path = requireNonNull(path, \"path\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, CharSequence content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, String content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType contentType, @FormatString String format, Object... content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(format, \"format\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), format, content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, byte[] content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.wrap(content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, HttpData content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = content;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(CharSequence name, Object value) {\n+        requestHeadersBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        httpHeaders.forEach((BiConsumer<AsciiString, String>) requestHeadersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public HttpRequestBuilder trailers(HttpHeaders httpTrailers) {\n+        requireNonNull(httpTrailers, \"httpTrailers\");\n+        httpTrailers.forEach((BiConsumer<AsciiString, String>) httpTrailersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a path param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}\")\n+     *            .pathParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParam(String name, Object value) {\n+        pathParams.put(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple path params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}/{bar}\")\n+     *            .pathParams(Map.of(\"foo\", \"bar\", \"bar\", \"baz\"))\n+     *            .build(); // GET `/bar/baz`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParams(Map<String, Object> pathParams) {\n+        this.pathParams.putAll(requireNonNull(pathParams, \"pathParams\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a query param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/endpoint?foo=bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder queryParam(String name, Object value) {\n+        queryParamsBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple query params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParams(QueryParams.of(\"from\", \"foo\", \"limit\", 10))\n+     *            .build(); // GET `/endpoint?from=foo&limit=10`\n+     * }</pre>\n+     * @see QueryParams\n+     */\n+    public HttpRequestBuilder queryParams(QueryParams queryParams) {\n+        requireNonNull(queryParams, \"queryParams\");\n+        queryParams.forEach((BiConsumer<String, String>) queryParamsBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a cookie for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookie(Cookie.of(\"cookie\", \"foo\"))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookie\n+     */\n+    public HttpRequestBuilder cookie(Cookie cookie) {\n+        cookies.add(requireNonNull(cookie, \"cookie\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple cookies for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookies(Cookies.of(Cookie.of(\"cookie1\", \"foo\"),\n+     *                                Cookie.of(\"cookie2\", \"bar\")))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookies\n+     */\n+    public HttpRequestBuilder cookies(Cookies cookies) {\n+        this.cookies.addAll(requireNonNull(cookies, \"cookies\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Creates a new {@link HttpRequest}.\n+     */\n+    public HttpRequest build() {\n+        final RequestHeaders requestHeaders = requestHeaders();\n+        if (content == null || content.isEmpty()) {\n+            if (content != null) {\n+                content.close();\n+            }\n+            if (httpTrailersBuilder.isEmpty()) {\n+                return new EmptyFixedHttpRequest(requestHeaders);\n+            }\n+            return new OneElementFixedHttpRequest(requestHeaders, httpTrailersBuilder.build());\n+        }\n+        if (httpTrailersBuilder.isEmpty()) {\n+            return new OneElementFixedHttpRequest(requestHeaders, content);\n+        }\n+        return new TwoElementFixedHttpRequest(requestHeaders, content, httpTrailersBuilder.build());\n+    }\n+\n+    private RequestHeaders requestHeaders() {\n+        requestHeadersBuilder.path(buildPath());\n+        if (!cookies.isEmpty()) {\n+            requestHeadersBuilder.set(COOKIE, Cookie.toCookieHeader(cookies));\n+        }\n+        if (content == null || content.isEmpty()) {\n+            requestHeadersBuilder.remove(CONTENT_LENGTH);\n+        } else {\n+            requestHeadersBuilder.setInt(CONTENT_LENGTH, content.length());\n+        }\n+        return requestHeadersBuilder.build();\n+    }\n+\n+    private String buildPath() {\n+        checkState(path != null, \"path must be set.\");\n+        final StringBuilder pathBuilder = new StringBuilder(path);\n+        if (!pathParams.isEmpty()) {\n+            int i = 0;\n+            while (i < pathBuilder.length()) {\n+                if (pathBuilder.charAt(i) == '{') {\n+                    int j = i;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1e80a941e6c67f253f3946e6b489f8c8c17bf0a"}, "originalPosition": 364}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyODU4Nw==", "bodyText": "I added this test. Let me know if there is anything missing.\n\n  \n    \n      armeria/core/src/test/java/com/linecorp/armeria/common/HttpRequestBuilderTest.java\n    \n    \n        Lines 114 to 129\n      in\n      5e7c506\n    \n    \n    \n    \n\n        \n          \n           void buildWithPathParams2() { \n        \n\n        \n          \n               HttpRequest request = new HttpRequestBuilder().get(\"/{foo}/{bar}/:unknown/foo/{}/{unknown}/a{\") \n        \n\n        \n          \n                                                             .pathParams(ImmutableMap.of(\"foo\", \"foo\", \"bar\", \"bar\")) \n        \n\n        \n          \n                                                             .build(); \n        \n\n        \n          \n               assertThat(request.path()).isEqualTo(\"/foo/bar/:unknown/foo/{}/{unknown}/a{\"); \n        \n\n        \n          \n            \n        \n\n        \n          \n               request = new HttpRequestBuilder().get(\"/{foo}/{unknown}/:id/:/{/foo/}/:\") \n        \n\n        \n          \n                                                 .pathParams(ImmutableMap.of(\"id\", 1, \"foo\", \"foo\")) \n        \n\n        \n          \n                                                 .build(); \n        \n\n        \n          \n               assertThat(request.path()).isEqualTo(\"/foo/{unknown}/1/:/{/foo/}/:\"); \n        \n\n        \n          \n            \n        \n\n        \n          \n               request = new HttpRequestBuilder().get(\"/{}/:\") \n        \n\n        \n          \n                                                 .pathParams(ImmutableMap.of(\"\", \"foo\")) \n        \n\n        \n          \n                                                 .build(); \n        \n\n        \n          \n               assertThat(request.path()).isEqualTo(\"/foo/foo\"); \n        \n\n        \n          \n           }", "url": "https://github.com/line/armeria/pull/3110#discussion_r515428587", "createdAt": "2020-10-31T00:01:45Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    // TODO(tumile): Add content(Publisher).\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private String path;\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PATCH method and path.\n+     */\n+    public HttpRequestBuilder patch(String path) {\n+        return method(HttpMethod.PATCH).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with OPTIONS method and path.\n+     */\n+    public HttpRequestBuilder options(String path) {\n+        return method(HttpMethod.OPTIONS).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with HEAD method and path.\n+     */\n+    public HttpRequestBuilder head(String path) {\n+        return method(HttpMethod.HEAD).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with TRACE method and path.\n+     */\n+    public HttpRequestBuilder trace(String path) {\n+        return method(HttpMethod.TRACE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requestHeadersBuilder.method(requireNonNull(method, \"method\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        this.path = requireNonNull(path, \"path\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, CharSequence content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, String content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType contentType, @FormatString String format, Object... content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(format, \"format\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), format, content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, byte[] content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.wrap(content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, HttpData content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = content;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(CharSequence name, Object value) {\n+        requestHeadersBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        httpHeaders.forEach((BiConsumer<AsciiString, String>) requestHeadersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public HttpRequestBuilder trailers(HttpHeaders httpTrailers) {\n+        requireNonNull(httpTrailers, \"httpTrailers\");\n+        httpTrailers.forEach((BiConsumer<AsciiString, String>) httpTrailersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a path param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}\")\n+     *            .pathParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParam(String name, Object value) {\n+        pathParams.put(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple path params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}/{bar}\")\n+     *            .pathParams(Map.of(\"foo\", \"bar\", \"bar\", \"baz\"))\n+     *            .build(); // GET `/bar/baz`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParams(Map<String, Object> pathParams) {\n+        this.pathParams.putAll(requireNonNull(pathParams, \"pathParams\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a query param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/endpoint?foo=bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder queryParam(String name, Object value) {\n+        queryParamsBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple query params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParams(QueryParams.of(\"from\", \"foo\", \"limit\", 10))\n+     *            .build(); // GET `/endpoint?from=foo&limit=10`\n+     * }</pre>\n+     * @see QueryParams\n+     */\n+    public HttpRequestBuilder queryParams(QueryParams queryParams) {\n+        requireNonNull(queryParams, \"queryParams\");\n+        queryParams.forEach((BiConsumer<String, String>) queryParamsBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a cookie for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookie(Cookie.of(\"cookie\", \"foo\"))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookie\n+     */\n+    public HttpRequestBuilder cookie(Cookie cookie) {\n+        cookies.add(requireNonNull(cookie, \"cookie\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple cookies for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookies(Cookies.of(Cookie.of(\"cookie1\", \"foo\"),\n+     *                                Cookie.of(\"cookie2\", \"bar\")))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookies\n+     */\n+    public HttpRequestBuilder cookies(Cookies cookies) {\n+        this.cookies.addAll(requireNonNull(cookies, \"cookies\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Creates a new {@link HttpRequest}.\n+     */\n+    public HttpRequest build() {\n+        final RequestHeaders requestHeaders = requestHeaders();\n+        if (content == null || content.isEmpty()) {\n+            if (content != null) {\n+                content.close();\n+            }\n+            if (httpTrailersBuilder.isEmpty()) {\n+                return new EmptyFixedHttpRequest(requestHeaders);\n+            }\n+            return new OneElementFixedHttpRequest(requestHeaders, httpTrailersBuilder.build());\n+        }\n+        if (httpTrailersBuilder.isEmpty()) {\n+            return new OneElementFixedHttpRequest(requestHeaders, content);\n+        }\n+        return new TwoElementFixedHttpRequest(requestHeaders, content, httpTrailersBuilder.build());\n+    }\n+\n+    private RequestHeaders requestHeaders() {\n+        requestHeadersBuilder.path(buildPath());\n+        if (!cookies.isEmpty()) {\n+            requestHeadersBuilder.set(COOKIE, Cookie.toCookieHeader(cookies));\n+        }\n+        if (content == null || content.isEmpty()) {\n+            requestHeadersBuilder.remove(CONTENT_LENGTH);\n+        } else {\n+            requestHeadersBuilder.setInt(CONTENT_LENGTH, content.length());\n+        }\n+        return requestHeadersBuilder.build();\n+    }\n+\n+    private String buildPath() {\n+        checkState(path != null, \"path must be set.\");\n+        final StringBuilder pathBuilder = new StringBuilder(path);\n+        if (!pathParams.isEmpty()) {\n+            int i = 0;\n+            while (i < pathBuilder.length()) {\n+                if (pathBuilder.charAt(i) == '{') {\n+                    int j = i;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE1MTE1Mg=="}, "originalCommit": {"oid": "b1e80a941e6c67f253f3946e6b489f8c8c17bf0a"}, "originalPosition": 364}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzgxNjAwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNDo1MzozNVrOHrSs5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNDo1MzozNVrOHrSs5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE1NzIyMw==", "bodyText": "Ditto\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                int j = i;\n          \n          \n            \n                                int j = i + 1;\n          \n      \n    \n    \n  \n\nAnd check the end condition.", "url": "https://github.com/line/armeria/pull/3110#discussion_r515157223", "createdAt": "2020-10-30T14:53:35Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    // TODO(tumile): Add content(Publisher).\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private String path;\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PATCH method and path.\n+     */\n+    public HttpRequestBuilder patch(String path) {\n+        return method(HttpMethod.PATCH).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with OPTIONS method and path.\n+     */\n+    public HttpRequestBuilder options(String path) {\n+        return method(HttpMethod.OPTIONS).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with HEAD method and path.\n+     */\n+    public HttpRequestBuilder head(String path) {\n+        return method(HttpMethod.HEAD).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with TRACE method and path.\n+     */\n+    public HttpRequestBuilder trace(String path) {\n+        return method(HttpMethod.TRACE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requestHeadersBuilder.method(requireNonNull(method, \"method\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        this.path = requireNonNull(path, \"path\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, CharSequence content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, String content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType contentType, @FormatString String format, Object... content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(format, \"format\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), format, content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, byte[] content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.wrap(content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, HttpData content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = content;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(CharSequence name, Object value) {\n+        requestHeadersBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(HttpHeaders httpHeaders) {\n+        requireNonNull(httpHeaders, \"httpHeaders\");\n+        httpHeaders.forEach((BiConsumer<AsciiString, String>) requestHeadersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public HttpRequestBuilder trailers(HttpHeaders httpTrailers) {\n+        requireNonNull(httpTrailers, \"httpTrailers\");\n+        httpTrailers.forEach((BiConsumer<AsciiString, String>) httpTrailersBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a path param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}\")\n+     *            .pathParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParam(String name, Object value) {\n+        pathParams.put(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple path params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}/{bar}\")\n+     *            .pathParams(Map.of(\"foo\", \"bar\", \"bar\", \"baz\"))\n+     *            .build(); // GET `/bar/baz`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParams(Map<String, Object> pathParams) {\n+        this.pathParams.putAll(requireNonNull(pathParams, \"pathParams\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a query param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/endpoint?foo=bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder queryParam(String name, Object value) {\n+        queryParamsBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple query params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParams(QueryParams.of(\"from\", \"foo\", \"limit\", 10))\n+     *            .build(); // GET `/endpoint?from=foo&limit=10`\n+     * }</pre>\n+     * @see QueryParams\n+     */\n+    public HttpRequestBuilder queryParams(QueryParams queryParams) {\n+        requireNonNull(queryParams, \"queryParams\");\n+        queryParams.forEach((BiConsumer<String, String>) queryParamsBuilder::set);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a cookie for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookie(Cookie.of(\"cookie\", \"foo\"))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookie\n+     */\n+    public HttpRequestBuilder cookie(Cookie cookie) {\n+        cookies.add(requireNonNull(cookie, \"cookie\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple cookies for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookies(Cookies.of(Cookie.of(\"cookie1\", \"foo\"),\n+     *                                Cookie.of(\"cookie2\", \"bar\")))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookies\n+     */\n+    public HttpRequestBuilder cookies(Cookies cookies) {\n+        this.cookies.addAll(requireNonNull(cookies, \"cookies\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Creates a new {@link HttpRequest}.\n+     */\n+    public HttpRequest build() {\n+        final RequestHeaders requestHeaders = requestHeaders();\n+        if (content == null || content.isEmpty()) {\n+            if (content != null) {\n+                content.close();\n+            }\n+            if (httpTrailersBuilder.isEmpty()) {\n+                return new EmptyFixedHttpRequest(requestHeaders);\n+            }\n+            return new OneElementFixedHttpRequest(requestHeaders, httpTrailersBuilder.build());\n+        }\n+        if (httpTrailersBuilder.isEmpty()) {\n+            return new OneElementFixedHttpRequest(requestHeaders, content);\n+        }\n+        return new TwoElementFixedHttpRequest(requestHeaders, content, httpTrailersBuilder.build());\n+    }\n+\n+    private RequestHeaders requestHeaders() {\n+        requestHeadersBuilder.path(buildPath());\n+        if (!cookies.isEmpty()) {\n+            requestHeadersBuilder.set(COOKIE, Cookie.toCookieHeader(cookies));\n+        }\n+        if (content == null || content.isEmpty()) {\n+            requestHeadersBuilder.remove(CONTENT_LENGTH);\n+        } else {\n+            requestHeadersBuilder.setInt(CONTENT_LENGTH, content.length());\n+        }\n+        return requestHeadersBuilder.build();\n+    }\n+\n+    private String buildPath() {\n+        checkState(path != null, \"path must be set.\");\n+        final StringBuilder pathBuilder = new StringBuilder(path);\n+        if (!pathParams.isEmpty()) {\n+            int i = 0;\n+            while (i < pathBuilder.length()) {\n+                if (pathBuilder.charAt(i) == '{') {\n+                    int j = i;\n+                    while (j < pathBuilder.length() && pathBuilder.charAt(j) != '}') {\n+                        j++;\n+                    }\n+                    if (j == pathBuilder.length()) {\n+                        break;\n+                    }\n+                    final String name = pathBuilder.substring(i + 1, j);\n+                    if (pathParams.containsKey(name)) {\n+                        final String value = pathParams.get(name).toString();\n+                        pathBuilder.replace(i, j + 1, value);\n+                        i += value.length() - 1;\n+                    }\n+                } else if (pathBuilder.charAt(i) == ':') {\n+                    int j = i;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1e80a941e6c67f253f3946e6b489f8c8c17bf0a"}, "originalPosition": 378}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzgzNDAzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNDo1NzowN1rOHrS4rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNDo1NzowN1rOHrS4rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE2MDIzOA==", "bodyText": "content is not copied. We need to add a notice to Javadoc.\nThe {@code content} will be wrapped using {@link HttpData#wrap(byte[])}, \nso any changes made to {@code content} will be reflected in the request.", "url": "https://github.com/line/armeria/pull/3110#discussion_r515160238", "createdAt": "2020-10-30T14:57:07Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    // TODO(tumile): Add content(Publisher).\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private String path;\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with PATCH method and path.\n+     */\n+    public HttpRequestBuilder patch(String path) {\n+        return method(HttpMethod.PATCH).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with OPTIONS method and path.\n+     */\n+    public HttpRequestBuilder options(String path) {\n+        return method(HttpMethod.OPTIONS).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with HEAD method and path.\n+     */\n+    public HttpRequestBuilder head(String path) {\n+        return method(HttpMethod.HEAD).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to create a new {@link HttpRequestBuilder} with TRACE method and path.\n+     */\n+    public HttpRequestBuilder trace(String path) {\n+        return method(HttpMethod.TRACE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requestHeadersBuilder.method(requireNonNull(method, \"method\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        this.path = requireNonNull(path, \"path\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, CharSequence content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, String content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request. The content of the request is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType contentType, @FormatString String format, Object... content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(format, \"format\");\n+        requireNonNull(content, \"content\");\n+\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = HttpData.of(contentType.charset(StandardCharsets.UTF_8), format, content);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1e80a941e6c67f253f3946e6b489f8c8c17bf0a"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDgxNTMxOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/common/HttpRequestBuilderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNjozMzoxOVrOHrspdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNjozMzoxOVrOHrspdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU4MjMyNw==", "bodyText": "nit: could remove public.", "url": "https://github.com/line/armeria/pull/3110#discussion_r515582327", "createdAt": "2020-11-01T06:33:19Z", "author": {"login": "trustin"}, "path": "core/src/test/java/com/linecorp/armeria/common/HttpRequestBuilderTest.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.linecorp.armeria.common.HttpHeaderNames.AUTHORIZATION;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.util.List;\n+import java.util.Map.Entry;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+import io.netty.util.AsciiString;\n+import reactor.test.StepVerifier;\n+\n+public class HttpRequestBuilderTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e7c506c82aacd19fbb11a3268cc9bbe1e90d0e7"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDgxNTQ1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNjozMzozNFrOHrspiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNjozMzozNFrOHrspiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU4MjM0NA==", "bodyText": "Could be public? \ud83d\ude04", "url": "https://github.com/line/armeria/pull/3110#discussion_r515582344", "createdAt": "2020-11-01T06:33:34Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,386 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e7c506c82aacd19fbb11a3268cc9bbe1e90d0e7"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDgxNTcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNjozMzo0OVrOHrsppA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNjozMzo0OVrOHrsppA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU4MjM3Mg==", "bodyText": "Please make the default constructor private.", "url": "https://github.com/line/armeria/pull/3110#discussion_r515582372", "createdAt": "2020-11-01T06:33:49Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,386 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    // TODO(tumile): Add content(Publisher).\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private String path;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e7c506c82aacd19fbb11a3268cc9bbe1e90d0e7"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDgxOTUxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNjozOToxMVrOHrsrZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNjozOToxMVrOHrsrZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU4MjgyMw==", "bodyText": "Iterable<? extends Cookie> ?", "url": "https://github.com/line/armeria/pull/3110#discussion_r515582823", "createdAt": "2020-11-01T06:39:11Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,386 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+final class HttpRequestBuilder {\n+\n+    // TODO(tumile): Add content(Publisher).\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private String path;\n+\n+    /**\n+     * Shortcut to set GET method and path.\n+     */\n+    public HttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to set POST method and path.\n+     */\n+    public HttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to set PUT method and path.\n+     */\n+    public HttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to set DELETE method and path.\n+     */\n+    public HttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to set PATCH method and path.\n+     */\n+    public HttpRequestBuilder patch(String path) {\n+        return method(HttpMethod.PATCH).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to set OPTIONS method and path.\n+     */\n+    public HttpRequestBuilder options(String path) {\n+        return method(HttpMethod.OPTIONS).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to set HEAD method and path.\n+     */\n+    public HttpRequestBuilder head(String path) {\n+        return method(HttpMethod.HEAD).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to set TRACE method and path.\n+     */\n+    public HttpRequestBuilder trace(String path) {\n+        return method(HttpMethod.TRACE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public HttpRequestBuilder method(HttpMethod method) {\n+        requestHeadersBuilder.method(requireNonNull(method, \"method\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public HttpRequestBuilder path(String path) {\n+        this.path = requireNonNull(path, \"path\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, CharSequence content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+        return content(contentType, HttpData.of(contentType.charset(StandardCharsets.UTF_8), content));\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, String content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+        return content(contentType, HttpData.of(contentType.charset(StandardCharsets.UTF_8), content));\n+    }\n+\n+    /**\n+     * Sets the content for this request. The {@code content} is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public HttpRequestBuilder content(MediaType contentType, @FormatString String format, Object... content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(format, \"format\");\n+        requireNonNull(content, \"content\");\n+        return content(contentType, HttpData.of(contentType.charset(StandardCharsets.UTF_8), format, content));\n+    }\n+\n+    /**\n+     * Sets the content for this request. The {@code content} will be wrapped using\n+     * {@link HttpData#wrap(byte[])}, so any changes made to {@code content} will be reflected in the request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, byte[] content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+        return content(contentType, HttpData.wrap(content));\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public HttpRequestBuilder content(MediaType contentType, HttpData content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = content;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder header(CharSequence name, Object value) {\n+        requestHeadersBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     * @see HttpHeaders\n+     */\n+    public HttpRequestBuilder headers(Iterable<? extends Entry<? extends CharSequence, String>> headers) {\n+        requireNonNull(headers, \"headers\");\n+        requestHeadersBuilder.set(headers);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public HttpRequestBuilder trailers(Iterable<? extends Entry<? extends CharSequence, String>> trailers) {\n+        requireNonNull(trailers, \"trailers\");\n+        httpTrailersBuilder.set(trailers);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a path param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}\")\n+     *            .pathParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParam(String name, Object value) {\n+        pathParams.put(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple path params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}/{bar}\")\n+     *            .pathParams(Map.of(\"foo\", \"bar\", \"bar\", \"baz\"))\n+     *            .build(); // GET `/bar/baz`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder pathParams(Map<String, ?> pathParams) {\n+        this.pathParams.putAll(requireNonNull(pathParams, \"pathParams\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a query param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/endpoint?foo=bar`\n+     * }</pre>\n+     */\n+    public HttpRequestBuilder queryParam(String name, Object value) {\n+        queryParamsBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple query params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParams(QueryParams.of(\"from\", \"foo\", \"limit\", 10))\n+     *            .build(); // GET `/endpoint?from=foo&limit=10`\n+     * }</pre>\n+     * @see QueryParams\n+     */\n+    public HttpRequestBuilder queryParams(Iterable<? extends Entry<? extends String, String>> queryParams) {\n+        requireNonNull(queryParams, \"queryParams\");\n+        queryParamsBuilder.set(queryParams);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a cookie for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookie(Cookie.of(\"cookie\", \"foo\"))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookie\n+     */\n+    public HttpRequestBuilder cookie(Cookie cookie) {\n+        cookies.add(requireNonNull(cookie, \"cookie\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple cookies for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookies(Cookies.of(Cookie.of(\"cookie1\", \"foo\"),\n+     *                                Cookie.of(\"cookie2\", \"bar\")))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookies\n+     */\n+    public HttpRequestBuilder cookies(Cookies cookies) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e7c506c82aacd19fbb11a3268cc9bbe1e90d0e7"}, "originalPosition": 305}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTc3MTEyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMjozMDo1OVrOHueAbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMjozMDo1OVrOHueAbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ4ODE3NA==", "bodyText": "This is somewhat confusing. How about using \"foo\", \"1\", \"bar\", \"2\"?", "url": "https://github.com/line/armeria/pull/3110#discussion_r518488174", "createdAt": "2020-11-06T02:30:59Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -236,7 +239,7 @@ public HttpRequestBuilder pathParam(String name, Object value) {\n      * Sets multiple path params for this request. For example:\n      * <pre>{@code\n      * HttpRequest.builder()\n-     *            .get(\"/{foo}/{bar}\")\n+     *            .get(\"/{foo}/:bar\")\n      *            .pathParams(Map.of(\"foo\", \"bar\", \"bar\", \"baz\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a15293f7aa31b0f6a523f94c39ecdc8462d355"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTc3Mzg3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMjozMjoyM1rOHueB7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODoyODozNFrOHvjmRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ4ODU1Ng==", "bodyText": "Would it be possible to make this constructor package-local so that this class can't be extended by a user?", "url": "https://github.com/line/armeria/pull/3110#discussion_r518488556", "createdAt": "2020-11-06T02:32:23Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -56,7 +56,7 @@\n     private String path;\n     private boolean disablePathParams;\n \n-    HttpRequestBuilder() {}\n+    protected HttpRequestBuilder() {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b7c7abfbcfc09915aa0f9917093fa3cf28ff4df"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUzOTcyOQ==", "bodyText": "Yes, but shall we move WebClientRequestBuilder to common?\nOr I can make this abstract and have a final DefaultHttpRequestBuilder extend it and override return types.", "url": "https://github.com/line/armeria/pull/3110#discussion_r518539729", "createdAt": "2020-11-06T06:00:45Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -56,7 +56,7 @@\n     private String path;\n     private boolean disablePathParams;\n \n-    HttpRequestBuilder() {}\n+    protected HttpRequestBuilder() {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ4ODU1Ng=="}, "originalCommit": {"oid": "8b7c7abfbcfc09915aa0f9917093fa3cf28ff4df"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU0MjQ5MA==", "bodyText": "We shouldn't move it to common. How about:\n\nIntroducing public AbstractHttpRequestBuilder with a protected buildRequest() method and without build() method;\nAdding public final HttpRequestBuilder extends AbstractHttpRequestBuilder; and\nAdding public final WebClientHttpRequestBuilder extends AbstractHttpRequestBuilder ?", "url": "https://github.com/line/armeria/pull/3110#discussion_r518542490", "createdAt": "2020-11-06T06:11:04Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -56,7 +56,7 @@\n     private String path;\n     private boolean disablePathParams;\n \n-    HttpRequestBuilder() {}\n+    protected HttpRequestBuilder() {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ4ODU1Ng=="}, "originalCommit": {"oid": "8b7c7abfbcfc09915aa0f9917093fa3cf28ff4df"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU0Mjg2OQ==", "bodyText": "I'm also not sure if the name WebClientHttpRequestBuilder is correct, because its eventual purpose is to execute a request and building it is just a part of the process. Should we rename it to something else? \ud83e\udd14", "url": "https://github.com/line/armeria/pull/3110#discussion_r518542869", "createdAt": "2020-11-06T06:12:28Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -56,7 +56,7 @@\n     private String path;\n     private boolean disablePathParams;\n \n-    HttpRequestBuilder() {}\n+    protected HttpRequestBuilder() {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ4ODU1Ng=="}, "originalCommit": {"oid": "8b7c7abfbcfc09915aa0f9917093fa3cf28ff4df"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU0ODY3Mw==", "bodyText": "I like WebClientHttpRequestPipeline because to me it looks like a pipeline \ud83d\ude04", "url": "https://github.com/line/armeria/pull/3110#discussion_r518548673", "createdAt": "2020-11-06T06:32:58Z", "author": {"login": "tumile"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -56,7 +56,7 @@\n     private String path;\n     private boolean disablePathParams;\n \n-    HttpRequestBuilder() {}\n+    protected HttpRequestBuilder() {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ4ODU1Ng=="}, "originalCommit": {"oid": "8b7c7abfbcfc09915aa0f9917093fa3cf28ff4df"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYyODM1Nw==", "bodyText": "How about WebClientPreparation? \ud83e\udd14", "url": "https://github.com/line/armeria/pull/3110#discussion_r519628357", "createdAt": "2020-11-09T08:28:34Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequestBuilder.java", "diffHunk": "@@ -56,7 +56,7 @@\n     private String path;\n     private boolean disablePathParams;\n \n-    HttpRequestBuilder() {}\n+    protected HttpRequestBuilder() {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ4ODU1Ng=="}, "originalCommit": {"oid": "8b7c7abfbcfc09915aa0f9917093fa3cf28ff4df"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTQwNzUzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/WebClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODo0NTo0MFrOHztApg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODo0NTo0MFrOHztApg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk3Njg3MA==", "bodyText": "How about making this a little more user-friendly, e.g.\nPrepares to send a new {@link HttpRequest} by building it fluently.\n<pre>{@code\n... a simple yet useful example ...\n}</pre>", "url": "https://github.com/line/armeria/pull/3110#discussion_r523976870", "createdAt": "2020-11-16T08:45:40Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/WebClient.java", "diffHunk": "@@ -275,6 +275,13 @@ default HttpResponse execute(RequestHeaders headers, String content, Charset cha\n         return execute(HttpRequest.of(headers, HttpData.of(charset, content)));\n     }\n \n+    /**\n+     * Returns a new {@link WebClientRequestPreparation}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15ab6ab7ebef432403b7d540b4d0a0a219c03248"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTQxMDE4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/AbstractHttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODo0NjoyNVrOHztCRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODo0NjoyNVrOHztCRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk3NzI4Ng==", "bodyText": "final?", "url": "https://github.com/line/armeria/pull/3110#discussion_r523977286", "createdAt": "2020-11-16T08:46:25Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/AbstractHttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,395 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+public abstract class AbstractHttpRequestBuilder {\n+\n+    // TODO(tumile): Add content(Publisher).\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();\n+    @Nullable\n+    private HttpData content;\n+    @Nullable\n+    private String path;\n+    private boolean disablePathParams;\n+\n+    /**\n+     * Shortcut to set GET method and path.\n+     */\n+    public AbstractHttpRequestBuilder get(String path) {\n+        return method(HttpMethod.GET).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to set POST method and path.\n+     */\n+    public AbstractHttpRequestBuilder post(String path) {\n+        return method(HttpMethod.POST).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to set PUT method and path.\n+     */\n+    public AbstractHttpRequestBuilder put(String path) {\n+        return method(HttpMethod.PUT).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to set DELETE method and path.\n+     */\n+    public AbstractHttpRequestBuilder delete(String path) {\n+        return method(HttpMethod.DELETE).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to set PATCH method and path.\n+     */\n+    public AbstractHttpRequestBuilder patch(String path) {\n+        return method(HttpMethod.PATCH).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to set OPTIONS method and path.\n+     */\n+    public AbstractHttpRequestBuilder options(String path) {\n+        return method(HttpMethod.OPTIONS).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to set HEAD method and path.\n+     */\n+    public AbstractHttpRequestBuilder head(String path) {\n+        return method(HttpMethod.HEAD).path(path);\n+    }\n+\n+    /**\n+     * Shortcut to set TRACE method and path.\n+     */\n+    public AbstractHttpRequestBuilder trace(String path) {\n+        return method(HttpMethod.TRACE).path(path);\n+    }\n+\n+    /**\n+     * Sets the method for this request.\n+     * @see HttpMethod\n+     */\n+    public AbstractHttpRequestBuilder method(HttpMethod method) {\n+        requestHeadersBuilder.method(requireNonNull(method, \"method\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the path for this request.\n+     */\n+    public AbstractHttpRequestBuilder path(String path) {\n+        this.path = requireNonNull(path, \"path\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public AbstractHttpRequestBuilder content(MediaType contentType, CharSequence content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+        return content(contentType, HttpData.of(contentType.charset(StandardCharsets.UTF_8), content));\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public AbstractHttpRequestBuilder content(MediaType contentType, String content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+        return content(contentType, HttpData.of(contentType.charset(StandardCharsets.UTF_8), content));\n+    }\n+\n+    /**\n+     * Sets the content for this request. The {@code content} is formatted by\n+     * {@link String#format(Locale, String, Object...)} with {@linkplain Locale#ENGLISH English locale}.\n+     */\n+    @FormatMethod\n+    public AbstractHttpRequestBuilder content(MediaType contentType, @FormatString String format,\n+                                              Object... content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(format, \"format\");\n+        requireNonNull(content, \"content\");\n+        return content(contentType, HttpData.of(contentType.charset(StandardCharsets.UTF_8), format, content));\n+    }\n+\n+    /**\n+     * Sets the content for this request. The {@code content} will be wrapped using\n+     * {@link HttpData#wrap(byte[])}, so any changes made to {@code content} will be reflected in the request.\n+     */\n+    public AbstractHttpRequestBuilder content(MediaType contentType, byte[] content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+        return content(contentType, HttpData.wrap(content));\n+    }\n+\n+    /**\n+     * Sets the content for this request.\n+     */\n+    public AbstractHttpRequestBuilder content(MediaType contentType, HttpData content) {\n+        requireNonNull(contentType, \"contentType\");\n+        requireNonNull(content, \"content\");\n+        requestHeadersBuilder.contentType(contentType);\n+        this.content = content;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a header for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .header(\"authorization\", \"foo\")\n+     *            .build();\n+     * }</pre>\n+     */\n+    public AbstractHttpRequestBuilder header(CharSequence name, Object value) {\n+        requestHeadersBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple headers for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .headers(HttpHeaders.of(\"authorization\", \"foo\", \"bar\", \"baz\"))\n+     *            .build();\n+     * }</pre>\n+     * @see HttpHeaders\n+     */\n+    public AbstractHttpRequestBuilder headers(\n+            Iterable<? extends Entry<? extends CharSequence, String>> headers) {\n+        requireNonNull(headers, \"headers\");\n+        requestHeadersBuilder.set(headers);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets HTTP trailers for this request.\n+     */\n+    public AbstractHttpRequestBuilder trailers(\n+            Iterable<? extends Entry<? extends CharSequence, String>> trailers) {\n+        requireNonNull(trailers, \"trailers\");\n+        httpTrailersBuilder.set(trailers);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a path param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}\")\n+     *            .pathParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/bar`\n+     * }</pre>\n+     */\n+    public AbstractHttpRequestBuilder pathParam(String name, Object value) {\n+        pathParams.put(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple path params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/{foo}/:bar\")\n+     *            .pathParams(Map.of(\"foo\", 1, \"bar\", 2))\n+     *            .build(); // GET `/1/2`\n+     * }</pre>\n+     */\n+    public AbstractHttpRequestBuilder pathParams(Map<String, ?> pathParams) {\n+        this.pathParams.putAll(requireNonNull(pathParams, \"pathParams\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Disables path parameters substitution. If path parameter is not disabled and a parameter's, specified\n+     * using {@code {}} or {@code :}, value is not found, an {@link IllegalStateException} is thrown.\n+     */\n+    public AbstractHttpRequestBuilder disablePathParams() {\n+        disablePathParams = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a query param for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParam(\"foo\", \"bar\")\n+     *            .build(); // GET `/endpoint?foo=bar`\n+     * }</pre>\n+     */\n+    public AbstractHttpRequestBuilder queryParam(String name, Object value) {\n+        queryParamsBuilder.setObject(requireNonNull(name, \"name\"), requireNonNull(value, \"value\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple query params for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/endpoint\")\n+     *            .queryParams(QueryParams.of(\"from\", \"foo\", \"limit\", 10))\n+     *            .build(); // GET `/endpoint?from=foo&limit=10`\n+     * }</pre>\n+     * @see QueryParams\n+     */\n+    public AbstractHttpRequestBuilder queryParams(\n+            Iterable<? extends Entry<? extends String, String>> queryParams) {\n+        requireNonNull(queryParams, \"queryParams\");\n+        queryParamsBuilder.set(queryParams);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets a cookie for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookie(Cookie.of(\"cookie\", \"foo\"))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookie\n+     */\n+    public AbstractHttpRequestBuilder cookie(Cookie cookie) {\n+        cookies.add(requireNonNull(cookie, \"cookie\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets multiple cookies for this request. For example:\n+     * <pre>{@code\n+     * HttpRequest.builder()\n+     *            .get(\"/\")\n+     *            .cookies(Cookies.of(Cookie.of(\"cookie1\", \"foo\"),\n+     *                                Cookie.of(\"cookie2\", \"bar\")))\n+     *            .build();\n+     * }</pre>\n+     * @see Cookies\n+     */\n+    public AbstractHttpRequestBuilder cookies(Iterable<? extends Cookie> cookies) {\n+        requireNonNull(cookies, \"cookies\").forEach(this.cookies::add);\n+        return this;\n+    }\n+\n+    /**\n+     * Creates a new {@link HttpRequest}.\n+     */\n+    protected HttpRequest buildRequest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15ab6ab7ebef432403b7d540b4d0a0a219c03248"}, "originalPosition": 327}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODY5MTY4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/AbstractHttpRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMjo0MjoxMlrOH4pmiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMjo0MjoxMlrOH4pmiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2MzkxMg==", "bodyText": "Could you lazily initialize cookies with @Nullable? AFAIK, RESTful requests do not heavily use cookies.\nAnd it would be also nice to make pathParams nullable.", "url": "https://github.com/line/armeria/pull/3110#discussion_r529163912", "createdAt": "2020-11-24T02:42:12Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/AbstractHttpRequestBuilder.java", "diffHunk": "@@ -0,0 +1,395 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;\n+import static com.linecorp.armeria.common.HttpHeaderNames.COOKIE;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.errorprone.annotations.FormatMethod;\n+import com.google.errorprone.annotations.FormatString;\n+\n+import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;\n+import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;\n+\n+/**\n+ * Builds a new {@link HttpRequest}.\n+ */\n+public abstract class AbstractHttpRequestBuilder {\n+\n+    // TODO(tumile): Add content(Publisher).\n+\n+    private final RequestHeadersBuilder requestHeadersBuilder = RequestHeaders.builder();\n+    private final HttpHeadersBuilder httpTrailersBuilder = HttpHeaders.builder();\n+    private final QueryParamsBuilder queryParamsBuilder = QueryParams.builder();\n+    private final Map<String, Object> pathParams = new HashMap<>();\n+    private final List<Cookie> cookies = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07a101c08afa46ca86c34e5c1f77c39f30f54b25"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODc5NTEyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/client/WebClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMjo1NTo1MVrOH6KIWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMjo1NTo1MVrOH6KIWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc0NTQzNQ==", "bodyText": "nit: an {@link HttpRequest}", "url": "https://github.com/line/armeria/pull/3110#discussion_r530745435", "createdAt": "2020-11-26T02:55:51Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/client/WebClient.java", "diffHunk": "@@ -275,6 +275,21 @@ default HttpResponse execute(RequestHeaders headers, String content, Charset cha\n         return execute(HttpRequest.of(headers, HttpData.of(charset, content)));\n     }\n \n+    /**\n+     * Prepares to send a {@link HttpRequest} using fluent builder.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba35648301d184731a63a15f51ec428e6db630fe"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1949, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}