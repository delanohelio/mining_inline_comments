{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2OTI2NjUz", "number": 2938, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNjoyNDoxNlrOESQFMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNDoxNzoxOFrOETg1RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTczMjk3OnYy", "diffSide": "RIGHT", "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageDeframer.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNjoyNDoxNlrOG3VG0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMToxOToyOVrOG35Ilg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY3MDY3Mg==", "bodyText": "I believe this won't work if a message spans across HTTP/2 frames since we'll terminate a base64 decode in the middle. It's where I gave up on this ;)", "url": "https://github.com/line/armeria/pull/2938#discussion_r460670672", "createdAt": "2020-07-27T06:24:16Z", "author": {"login": "anuraaga"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageDeframer.java", "diffHunk": "@@ -276,8 +279,15 @@ public void deframe(HttpData data, boolean endOfStream) {\n         if (dataLength != 0) {\n             final ByteBuf buf = data.byteBuf();\n             assert unprocessed != null;\n-            unprocessed.add(buf);\n-            unprocessedBytes += dataLength;\n+            if (decodeBase64) {\n+                final ByteBuf decoded = Unpooled.wrappedBuffer(Base64.getDecoder().decode(buf.nioBuffer()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27f704e51def8b7812d3a970c5948a607c809f08"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY3MTMyMw==", "bodyText": "Oops, I thought the encoded message does not span across the frames. Let me check how Akka is doing this. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2938#discussion_r460671323", "createdAt": "2020-07-27T06:26:05Z", "author": {"login": "minwoox"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageDeframer.java", "diffHunk": "@@ -276,8 +279,15 @@ public void deframe(HttpData data, boolean endOfStream) {\n         if (dataLength != 0) {\n             final ByteBuf buf = data.byteBuf();\n             assert unprocessed != null;\n-            unprocessed.add(buf);\n-            unprocessedBytes += dataLength;\n+            if (decodeBase64) {\n+                final ByteBuf decoded = Unpooled.wrappedBuffer(Base64.getDecoder().decode(buf.nioBuffer()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY3MDY3Mg=="}, "originalCommit": {"oid": "27f704e51def8b7812d3a970c5948a607c809f08"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY3NTA0Ng==", "bodyText": "Time to write a stateful decoder? \ud83d\ude06", "url": "https://github.com/line/armeria/pull/2938#discussion_r460675046", "createdAt": "2020-07-27T06:36:25Z", "author": {"login": "trustin"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageDeframer.java", "diffHunk": "@@ -276,8 +279,15 @@ public void deframe(HttpData data, boolean endOfStream) {\n         if (dataLength != 0) {\n             final ByteBuf buf = data.byteBuf();\n             assert unprocessed != null;\n-            unprocessed.add(buf);\n-            unprocessedBytes += dataLength;\n+            if (decodeBase64) {\n+                final ByteBuf decoded = Unpooled.wrappedBuffer(Base64.getDecoder().decode(buf.nioBuffer()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY3MDY3Mg=="}, "originalCommit": {"oid": "27f704e51def8b7812d3a970c5948a607c809f08"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY3NTQyMA==", "bodyText": "I guess so. \ud83d\ude05  Let me think a bit more about how to solve this. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2938#discussion_r460675420", "createdAt": "2020-07-27T06:37:19Z", "author": {"login": "minwoox"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageDeframer.java", "diffHunk": "@@ -276,8 +279,15 @@ public void deframe(HttpData data, boolean endOfStream) {\n         if (dataLength != 0) {\n             final ByteBuf buf = data.byteBuf();\n             assert unprocessed != null;\n-            unprocessed.add(buf);\n-            unprocessedBytes += dataLength;\n+            if (decodeBase64) {\n+                final ByteBuf decoded = Unpooled.wrappedBuffer(Base64.getDecoder().decode(buf.nioBuffer()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY3MDY3Mg=="}, "originalCommit": {"oid": "27f704e51def8b7812d3a970c5948a607c809f08"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwNDkzOQ==", "bodyText": "@anuraaga Should I also consider the case in which the padding is in the middle of a frame? I think there's no such implementations, but just wanted to make sure. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2938#discussion_r460704939", "createdAt": "2020-07-27T07:45:47Z", "author": {"login": "minwoox"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageDeframer.java", "diffHunk": "@@ -276,8 +279,15 @@ public void deframe(HttpData data, boolean endOfStream) {\n         if (dataLength != 0) {\n             final ByteBuf buf = data.byteBuf();\n             assert unprocessed != null;\n-            unprocessed.add(buf);\n-            unprocessedBytes += dataLength;\n+            if (decodeBase64) {\n+                final ByteBuf decoded = Unpooled.wrappedBuffer(Base64.getDecoder().decode(buf.nioBuffer()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY3MDY3Mg=="}, "originalCommit": {"oid": "27f704e51def8b7812d3a970c5948a607c809f08"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwNzUyMA==", "bodyText": "I think it can definitely happen, especially when a decorator decides to split frames.", "url": "https://github.com/line/armeria/pull/2938#discussion_r460707520", "createdAt": "2020-07-27T07:50:43Z", "author": {"login": "trustin"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageDeframer.java", "diffHunk": "@@ -276,8 +279,15 @@ public void deframe(HttpData data, boolean endOfStream) {\n         if (dataLength != 0) {\n             final ByteBuf buf = data.byteBuf();\n             assert unprocessed != null;\n-            unprocessed.add(buf);\n-            unprocessedBytes += dataLength;\n+            if (decodeBase64) {\n+                final ByteBuf decoded = Unpooled.wrappedBuffer(Base64.getDecoder().decode(buf.nioBuffer()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY3MDY3Mg=="}, "originalCommit": {"oid": "27f704e51def8b7812d3a970c5948a607c809f08"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwNzc1Nw==", "bodyText": "Ah yeah both cases for sure", "url": "https://github.com/line/armeria/pull/2938#discussion_r460707757", "createdAt": "2020-07-27T07:51:11Z", "author": {"login": "anuraaga"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageDeframer.java", "diffHunk": "@@ -276,8 +279,15 @@ public void deframe(HttpData data, boolean endOfStream) {\n         if (dataLength != 0) {\n             final ByteBuf buf = data.byteBuf();\n             assert unprocessed != null;\n-            unprocessed.add(buf);\n-            unprocessedBytes += dataLength;\n+            if (decodeBase64) {\n+                final ByteBuf decoded = Unpooled.wrappedBuffer(Base64.getDecoder().decode(buf.nioBuffer()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY3MDY3Mg=="}, "originalCommit": {"oid": "27f704e51def8b7812d3a970c5948a607c809f08"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMjg4Mg==", "bodyText": "\ud83d\ude31", "url": "https://github.com/line/armeria/pull/2938#discussion_r460712882", "createdAt": "2020-07-27T08:00:50Z", "author": {"login": "minwoox"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageDeframer.java", "diffHunk": "@@ -276,8 +279,15 @@ public void deframe(HttpData data, boolean endOfStream) {\n         if (dataLength != 0) {\n             final ByteBuf buf = data.byteBuf();\n             assert unprocessed != null;\n-            unprocessed.add(buf);\n-            unprocessedBytes += dataLength;\n+            if (decodeBase64) {\n+                final ByteBuf decoded = Unpooled.wrappedBuffer(Base64.getDecoder().decode(buf.nioBuffer()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY3MDY3Mg=="}, "originalCommit": {"oid": "27f704e51def8b7812d3a970c5948a607c809f08"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI2MDk1MA==", "bodyText": "Fixed. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2938#discussion_r461260950", "createdAt": "2020-07-28T01:19:29Z", "author": {"login": "minwoox"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageDeframer.java", "diffHunk": "@@ -276,8 +279,15 @@ public void deframe(HttpData data, boolean endOfStream) {\n         if (dataLength != 0) {\n             final ByteBuf buf = data.byteBuf();\n             assert unprocessed != null;\n-            unprocessed.add(buf);\n-            unprocessedBytes += dataLength;\n+            if (decodeBase64) {\n+                final ByteBuf decoded = Unpooled.wrappedBuffer(Base64.getDecoder().decode(buf.nioBuffer()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY3MDY3Mg=="}, "originalCommit": {"oid": "27f704e51def8b7812d3a970c5948a607c809f08"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTczNTEzOnYy", "diffSide": "RIGHT", "path": "dependencies.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNjoyNTowMlrOG3VH8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMToxNTo1N1rOG35E3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY3MDk2MA==", "bodyText": "Global comment: Use Scala 2.13? Because we already use it. :-)\nhttps://mvnrepository.com/artifact/com.lightbend.akka.grpc/akka-grpc-runtime_2.13/1.0.1", "url": "https://github.com/line/armeria/pull/2938#discussion_r460670960", "createdAt": "2020-07-27T06:25:02Z", "author": {"login": "ikhoon"}, "path": "dependencies.yml", "diffHunk": "@@ -115,6 +119,10 @@ com.google.protobuf:\n   protobuf-gradle-plugin: { version: '0.8.12' }\n   protoc: { version: *PROTOBUF_VERSION }\n \n+# Akka is used only for testing in it:grpcweb module.\n+com.lightbend.akka.grpc:\n+  akka-grpc-runtime_2.12: { version: '1.0.1' }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27f704e51def8b7812d3a970c5948a607c809f08"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI1OTk5OQ==", "bodyText": "2.13 somehow does not work well with Java. So I chose to use 2.12. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2938#discussion_r461259999", "createdAt": "2020-07-28T01:15:57Z", "author": {"login": "minwoox"}, "path": "dependencies.yml", "diffHunk": "@@ -115,6 +119,10 @@ com.google.protobuf:\n   protobuf-gradle-plugin: { version: '0.8.12' }\n   protoc: { version: *PROTOBUF_VERSION }\n \n+# Akka is used only for testing in it:grpcweb module.\n+com.lightbend.akka.grpc:\n+  akka-grpc-runtime_2.12: { version: '1.0.1' }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY3MDk2MA=="}, "originalCommit": {"oid": "27f704e51def8b7812d3a970c5948a607c809f08"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTc2NTIxOnYy", "diffSide": "RIGHT", "path": "gradle/scripts/lib/java-rpc-proto.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNjozNzoyMlrOG3VZaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNjozNzoyMlrOG3VZaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY3NTQzMw==", "bodyText": "Please send a pull request for this to line/gradle-scripts first.", "url": "https://github.com/line/armeria/pull/2938#discussion_r460675433", "createdAt": "2020-07-27T06:37:22Z", "author": {"login": "trustin"}, "path": "gradle/scripts/lib/java-rpc-proto.gradle", "diffHunk": "@@ -52,6 +52,14 @@ configure(projectsWithFlags('java')) {\n                             artifact = artifactName\n                         }\n                     }\n+\n+                    if (project.ext.hasFlag('akka-grpc')) {\n+                        def artifactName = \"com.lightbend.akka.grpc:akka-grpc-codegen_2.12:${managedVersions['com.lightbend.akka.grpc:akka-grpc-runtime_2.12']}:\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27f704e51def8b7812d3a970c5948a607c809f08"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTc2Nzg2OnYy", "diffSide": "RIGHT", "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageFramer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNjozODozMlrOG3Va_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNjo0MTowMFrOG3VeVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY3NTgzNw==", "bodyText": "Curious if we need to check against the decoded data or the encoded data.", "url": "https://github.com/line/armeria/pull/2938#discussion_r460675837", "createdAt": "2020-07-27T06:38:32Z", "author": {"login": "trustin"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageFramer.java", "diffHunk": "@@ -188,10 +206,7 @@ private ByteBuf write(ByteBuf message, boolean compressed, boolean webTrailers)\n         final int messageLength = message.readableBytes();\n         if (maxOutboundMessageSize >= 0 && messageLength > maxOutboundMessageSize) {\n             message.release();\n-            throw new ArmeriaStatusException(\n-                    StatusCodes.RESOURCE_EXHAUSTED,\n-                    String.format(\"message too large %d > %d\", messageLength,\n-                                  maxOutboundMessageSize));\n+            throw newMessageTooLargeException(messageLength);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27f704e51def8b7812d3a970c5948a607c809f08"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY3NjY5Mg==", "bodyText": "We were checking the size of compressed data when compressing which means the actual size. So I followed it by checking the size of encoded data. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2938#discussion_r460676692", "createdAt": "2020-07-27T06:41:00Z", "author": {"login": "minwoox"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageFramer.java", "diffHunk": "@@ -188,10 +206,7 @@ private ByteBuf write(ByteBuf message, boolean compressed, boolean webTrailers)\n         final int messageLength = message.readableBytes();\n         if (maxOutboundMessageSize >= 0 && messageLength > maxOutboundMessageSize) {\n             message.release();\n-            throw new ArmeriaStatusException(\n-                    StatusCodes.RESOURCE_EXHAUSTED,\n-                    String.format(\"message too large %d > %d\", messageLength,\n-                                  maxOutboundMessageSize));\n+            throw newMessageTooLargeException(messageLength);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY3NTgzNw=="}, "originalCommit": {"oid": "27f704e51def8b7812d3a970c5948a607c809f08"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDMyMTY0OnYy", "diffSide": "RIGHT", "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageFramer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjozMDoyNlrOG4mUig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMzowMToyMFrOG4m0UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwMTI5MA==", "bodyText": "Could use Netty's Base64", "url": "https://github.com/line/armeria/pull/2938#discussion_r462001290", "createdAt": "2020-07-29T02:30:26Z", "author": {"login": "trustin"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageFramer.java", "diffHunk": "@@ -137,10 +142,23 @@ public HttpData writePayload(ByteBuf message, boolean webTrailers) {\n             } else {\n                 buf = writeUncompressed(message, webTrailers);\n             }\n+\n+            final ByteBuf maybeEncodedBuf;\n+            if (encodeBase64) {\n+                final ByteBuffer base64Encoded = Base64.getEncoder().encode(buf.nioBuffer());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a340f2d648c35b33566c93f56bff5f496beb4adb"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwOTQyNQ==", "bodyText": "Ah Thanks. \ud83d\ude05", "url": "https://github.com/line/armeria/pull/2938#discussion_r462009425", "createdAt": "2020-07-29T03:01:20Z", "author": {"login": "minwoox"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageFramer.java", "diffHunk": "@@ -137,10 +142,23 @@ public HttpData writePayload(ByteBuf message, boolean webTrailers) {\n             } else {\n                 buf = writeUncompressed(message, webTrailers);\n             }\n+\n+            final ByteBuf maybeEncodedBuf;\n+            if (encodeBase64) {\n+                final ByteBuffer base64Encoded = Base64.getEncoder().encode(buf.nioBuffer());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwMTI5MA=="}, "originalCommit": {"oid": "a340f2d648c35b33566c93f56bff5f496beb4adb"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDMyMzMxOnYy", "diffSide": "RIGHT", "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageFramer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjozMToxMlrOG4mVcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMzowMTozMFrOG4m0gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwMTUyMA==", "bodyText": "Could be simplified into return HttpData.wrap(maybeEncodedBuf).withEndOfStream(webTrailers);", "url": "https://github.com/line/armeria/pull/2938#discussion_r462001520", "createdAt": "2020-07-29T02:31:12Z", "author": {"login": "trustin"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageFramer.java", "diffHunk": "@@ -137,10 +142,23 @@ public HttpData writePayload(ByteBuf message, boolean webTrailers) {\n             } else {\n                 buf = writeUncompressed(message, webTrailers);\n             }\n+\n+            final ByteBuf maybeEncodedBuf;\n+            if (encodeBase64) {\n+                final ByteBuffer base64Encoded = Base64.getEncoder().encode(buf.nioBuffer());\n+                buf.release();\n+                if (maxOutboundMessageSize >= 0 && base64Encoded.remaining() > maxOutboundMessageSize) {\n+                    throw newMessageTooLargeException(base64Encoded.remaining());\n+                }\n+                maybeEncodedBuf = Unpooled.wrappedBuffer(base64Encoded);\n+            } else {\n+                maybeEncodedBuf = buf;\n+            }\n+\n             if (webTrailers) {\n-                return HttpData.wrap(buf).withEndOfStream();\n+                return HttpData.wrap(maybeEncodedBuf).withEndOfStream();\n             }\n-            return HttpData.wrap(buf);\n+            return HttpData.wrap(maybeEncodedBuf);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a340f2d648c35b33566c93f56bff5f496beb4adb"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwOTQ3NQ==", "bodyText": "Fixed. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2938#discussion_r462009475", "createdAt": "2020-07-29T03:01:30Z", "author": {"login": "minwoox"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageFramer.java", "diffHunk": "@@ -137,10 +142,23 @@ public HttpData writePayload(ByteBuf message, boolean webTrailers) {\n             } else {\n                 buf = writeUncompressed(message, webTrailers);\n             }\n+\n+            final ByteBuf maybeEncodedBuf;\n+            if (encodeBase64) {\n+                final ByteBuffer base64Encoded = Base64.getEncoder().encode(buf.nioBuffer());\n+                buf.release();\n+                if (maxOutboundMessageSize >= 0 && base64Encoded.remaining() > maxOutboundMessageSize) {\n+                    throw newMessageTooLargeException(base64Encoded.remaining());\n+                }\n+                maybeEncodedBuf = Unpooled.wrappedBuffer(base64Encoded);\n+            } else {\n+                maybeEncodedBuf = buf;\n+            }\n+\n             if (webTrailers) {\n-                return HttpData.wrap(buf).withEndOfStream();\n+                return HttpData.wrap(maybeEncodedBuf).withEndOfStream();\n             }\n-            return HttpData.wrap(buf);\n+            return HttpData.wrap(maybeEncodedBuf);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwMTUyMA=="}, "originalCommit": {"oid": "a340f2d648c35b33566c93f56bff5f496beb4adb"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDMzMDM3OnYy", "diffSide": "RIGHT", "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/Base64Decoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjozNTowNlrOG4mZeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMzowMTo1MlrOG4m06A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwMjU1Mg==", "bodyText": "How about using a boolean flag and check it in the finally block instead?\nboolean success = false;\ntry {\n    ...\n    success = true;\n    return dest;\n} finally {\n    if (!success) { dest.release(); }\n    src.release();\n}", "url": "https://github.com/line/armeria/pull/2938#discussion_r462002552", "createdAt": "2020-07-29T02:35:06Z", "author": {"login": "trustin"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/Base64Decoder.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.grpc.protocol;\n+\n+import java.util.Base64;\n+\n+import javax.annotation.Nullable;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.util.ByteProcessor;\n+\n+/**\n+ * A stateful Base64decoder. Unlike {@link Base64#getDecoder()}, this decoder does not end when it meets\n+ * padding('='), but continues to decode until the end of the {@link ByteBuf} given by\n+ * {@link #decode(ByteBuf)}. If the {@link ByteBuf} does not have necessary 4 bytes to decode as 3 bytes,\n+ * it stores the remained bytes and prepend them to the next {@link #decode(ByteBuf)} and decode together.\n+ */\n+final class Base64Decoder implements ByteProcessor {\n+\n+    // Forked from https://github.com/netty/netty/blob/netty-4.1.51.Final/codec\n+    // /src/main/java/io/netty/handler/codec/base64/Base64.java\n+\n+    private static final byte WHITE_SPACE_ENC = -5; // Indicates white space in encoding\n+\n+    private static final byte EQUALS_SIGN_ENC = -1; // Indicates equals sign in encoding\n+\n+    private static final byte[] DECODABET = {\n+            -9, -9, -9, -9, -9, -9,\n+            -9, -9, -9, // Decimal  0 -  8\n+            -5, -5, // Whitespace: Tab and Linefeed\n+            -9, -9, // Decimal 11 - 12\n+            -5, // Whitespace: Carriage Return\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 14 - 26\n+            -9, -9, -9, -9, -9, // Decimal 27 - 31\n+            -5, // Whitespace: Space\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 33 - 42\n+            62, // Plus sign at decimal 43\n+            -9, -9, -9, // Decimal 44 - 46\n+            63, // Slash at decimal 47\n+            52, 53, 54, 55, 56, 57, 58, 59, 60, 61, // Numbers zero through nine\n+            -9, -9, -9, // Decimal 58 - 60\n+            -1, // Equals sign at decimal 61\n+            -9, -9, -9, // Decimal 62 - 64\n+            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, // Letters 'A' through 'N'\n+            14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, // Letters 'O' through 'Z'\n+            -9, -9, -9, -9, -9, -9, // Decimal 91 - 96\n+            26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, // Letters 'a' through 'm'\n+            39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, // Letters 'n' through 'z'\n+            -9, -9, -9, -9, -9, // Decimal 123 - 127\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 128 - 140\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 141 - 153\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 154 - 166\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 167 - 179\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 180 - 192\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 193 - 205\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 206 - 218\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 219 - 231\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 232 - 244\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9              // Decimal 245 - 255\n+    };\n+\n+    private final ByteBufAllocator allocator;\n+    @Nullable\n+    private ByteBuf dest;\n+    private final byte[] last3 = new byte[3]; // The 4th byte is stored in a local variable.\n+    private int pos;\n+\n+    Base64Decoder(ByteBufAllocator allocator) {\n+        this.allocator = allocator;\n+    }\n+\n+    ByteBuf decode(ByteBuf src) {\n+        final ByteBuf dest = allocator.buffer(decodedBufferSize(src.readableBytes()));\n+        this.dest = dest;\n+        try {\n+            src.forEachByte(this);\n+            return dest;\n+        } catch (Throwable t) {\n+            dest.release();\n+            throw t;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a340f2d648c35b33566c93f56bff5f496beb4adb"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwOTU3Ng==", "bodyText": "That's a good suggestion.", "url": "https://github.com/line/armeria/pull/2938#discussion_r462009576", "createdAt": "2020-07-29T03:01:52Z", "author": {"login": "minwoox"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/Base64Decoder.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.grpc.protocol;\n+\n+import java.util.Base64;\n+\n+import javax.annotation.Nullable;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.util.ByteProcessor;\n+\n+/**\n+ * A stateful Base64decoder. Unlike {@link Base64#getDecoder()}, this decoder does not end when it meets\n+ * padding('='), but continues to decode until the end of the {@link ByteBuf} given by\n+ * {@link #decode(ByteBuf)}. If the {@link ByteBuf} does not have necessary 4 bytes to decode as 3 bytes,\n+ * it stores the remained bytes and prepend them to the next {@link #decode(ByteBuf)} and decode together.\n+ */\n+final class Base64Decoder implements ByteProcessor {\n+\n+    // Forked from https://github.com/netty/netty/blob/netty-4.1.51.Final/codec\n+    // /src/main/java/io/netty/handler/codec/base64/Base64.java\n+\n+    private static final byte WHITE_SPACE_ENC = -5; // Indicates white space in encoding\n+\n+    private static final byte EQUALS_SIGN_ENC = -1; // Indicates equals sign in encoding\n+\n+    private static final byte[] DECODABET = {\n+            -9, -9, -9, -9, -9, -9,\n+            -9, -9, -9, // Decimal  0 -  8\n+            -5, -5, // Whitespace: Tab and Linefeed\n+            -9, -9, // Decimal 11 - 12\n+            -5, // Whitespace: Carriage Return\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 14 - 26\n+            -9, -9, -9, -9, -9, // Decimal 27 - 31\n+            -5, // Whitespace: Space\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 33 - 42\n+            62, // Plus sign at decimal 43\n+            -9, -9, -9, // Decimal 44 - 46\n+            63, // Slash at decimal 47\n+            52, 53, 54, 55, 56, 57, 58, 59, 60, 61, // Numbers zero through nine\n+            -9, -9, -9, // Decimal 58 - 60\n+            -1, // Equals sign at decimal 61\n+            -9, -9, -9, // Decimal 62 - 64\n+            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, // Letters 'A' through 'N'\n+            14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, // Letters 'O' through 'Z'\n+            -9, -9, -9, -9, -9, -9, // Decimal 91 - 96\n+            26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, // Letters 'a' through 'm'\n+            39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, // Letters 'n' through 'z'\n+            -9, -9, -9, -9, -9, // Decimal 123 - 127\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 128 - 140\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 141 - 153\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 154 - 166\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 167 - 179\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 180 - 192\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 193 - 205\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 206 - 218\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 219 - 231\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 232 - 244\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9              // Decimal 245 - 255\n+    };\n+\n+    private final ByteBufAllocator allocator;\n+    @Nullable\n+    private ByteBuf dest;\n+    private final byte[] last3 = new byte[3]; // The 4th byte is stored in a local variable.\n+    private int pos;\n+\n+    Base64Decoder(ByteBufAllocator allocator) {\n+        this.allocator = allocator;\n+    }\n+\n+    ByteBuf decode(ByteBuf src) {\n+        final ByteBuf dest = allocator.buffer(decodedBufferSize(src.readableBytes()));\n+        this.dest = dest;\n+        try {\n+            src.forEachByte(this);\n+            return dest;\n+        } catch (Throwable t) {\n+            dest.release();\n+            throw t;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwMjU1Mg=="}, "originalCommit": {"oid": "a340f2d648c35b33566c93f56bff5f496beb4adb"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDMzNDYxOnYy", "diffSide": "RIGHT", "path": "grpc-protocol/src/test/java/com/linecorp/armeria/common/grpc/protocol/Base64DecoderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjozNzo0NFrOG4mb6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMzowMjo0OFrOG4m14w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwMzE3OQ==", "bodyText": "Would you mind adding a test case for two concatenated base64 strings with paddings? e.g. 123456==123456==", "url": "https://github.com/line/armeria/pull/2938#discussion_r462003179", "createdAt": "2020-07-29T02:37:44Z", "author": {"login": "trustin"}, "path": "grpc-protocol/src/test/java/com/linecorp/armeria/common/grpc/protocol/Base64DecoderTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.grpc.protocol;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Random;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.buffer.Unpooled;\n+\n+class Base64DecoderTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a340f2d648c35b33566c93f56bff5f496beb4adb"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwOTgyNw==", "bodyText": "I believe that this case will produce such a case, but let me add one for clarification. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2938#discussion_r462009827", "createdAt": "2020-07-29T03:02:48Z", "author": {"login": "minwoox"}, "path": "grpc-protocol/src/test/java/com/linecorp/armeria/common/grpc/protocol/Base64DecoderTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.grpc.protocol;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Random;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.buffer.Unpooled;\n+\n+class Base64DecoderTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwMzE3OQ=="}, "originalCommit": {"oid": "a340f2d648c35b33566c93f56bff5f496beb4adb"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDMzOTI5OnYy", "diffSide": "RIGHT", "path": "grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcClientOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjo0MDoyOFrOG4melw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMzowMzoyOFrOG4m2jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwMzg2Mw==", "bodyText": "Does this fail or just do nothing? If the latter, how about 'this has no effect if ..' ?", "url": "https://github.com/line/armeria/pull/2938#discussion_r462003863", "createdAt": "2020-07-29T02:40:28Z", "author": {"login": "trustin"}, "path": "grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcClientOptions.java", "diffHunk": "@@ -77,9 +78,8 @@\n      * work. If {@link GrpcUnsafeBufferUtil#releaseBuffer(Object, RequestContext)} is not called, the memory\n      * will be leaked.\n      *\n-     * <p>Due to the limited lifetime of {@link RequestContext} for blocking and async clients, this option\n-     * is only really useful in conjunction with streaming clients. Even when using unary methods, it is\n-     * recommended to use a streaming stub for easy access to the {@link RequestContext}.\n+     * <p>Note that this isn't working if the payloads are compressed or the {@link SerializationFormat} is\n+     * {@link GrpcSerializationFormats#PROTO_WEB_TEXT}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a340f2d648c35b33566c93f56bff5f496beb4adb"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwOTk5Ng==", "bodyText": "Let me use this has no effect if ... phrase, thanks!", "url": "https://github.com/line/armeria/pull/2938#discussion_r462009996", "createdAt": "2020-07-29T03:03:28Z", "author": {"login": "minwoox"}, "path": "grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcClientOptions.java", "diffHunk": "@@ -77,9 +78,8 @@\n      * work. If {@link GrpcUnsafeBufferUtil#releaseBuffer(Object, RequestContext)} is not called, the memory\n      * will be leaked.\n      *\n-     * <p>Due to the limited lifetime of {@link RequestContext} for blocking and async clients, this option\n-     * is only really useful in conjunction with streaming clients. Even when using unary methods, it is\n-     * recommended to use a streaming stub for easy access to the {@link RequestContext}.\n+     * <p>Note that this isn't working if the payloads are compressed or the {@link SerializationFormat} is\n+     * {@link GrpcSerializationFormats#PROTO_WEB_TEXT}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwMzg2Mw=="}, "originalCommit": {"oid": "a340f2d648c35b33566c93f56bff5f496beb4adb"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDM0MTcxOnYy", "diffSide": "RIGHT", "path": "grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcWebUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjo0MTo0NlrOG4mf9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMzowNjo1MVrOG4m52g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwNDIxMg==", "bodyText": "How about adding @throws to the Javadoc?", "url": "https://github.com/line/armeria/pull/2938#discussion_r462004212", "createdAt": "2020-07-29T02:41:46Z", "author": {"login": "trustin"}, "path": "grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcWebUtil.java", "diffHunk": "@@ -73,8 +77,15 @@\n      * }</pre>\n      */\n     @Nullable\n-    public static HttpHeaders parseTrailers(HttpData response) {\n+    public static HttpHeaders parseTrailers(ClientRequestContext ctx, HttpData response) {\n+        requireNonNull(ctx, \"ctx\");\n         requireNonNull(response, \"response\");\n+        final SerializationFormat serializationFormat =\n+                ctx.log().ensureAvailable(RequestLogProperty.SCHEME).scheme().serializationFormat();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a340f2d648c35b33566c93f56bff5f496beb4adb"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxMDg0Mg==", "bodyText": "Added. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2938#discussion_r462010842", "createdAt": "2020-07-29T03:06:51Z", "author": {"login": "minwoox"}, "path": "grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcWebUtil.java", "diffHunk": "@@ -73,8 +77,15 @@\n      * }</pre>\n      */\n     @Nullable\n-    public static HttpHeaders parseTrailers(HttpData response) {\n+    public static HttpHeaders parseTrailers(ClientRequestContext ctx, HttpData response) {\n+        requireNonNull(ctx, \"ctx\");\n         requireNonNull(response, \"response\");\n+        final SerializationFormat serializationFormat =\n+                ctx.log().ensureAvailable(RequestLogProperty.SCHEME).scheme().serializationFormat();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwNDIxMg=="}, "originalCommit": {"oid": "a340f2d648c35b33566c93f56bff5f496beb4adb"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDU5MzkyOnYy", "diffSide": "RIGHT", "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageFramer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNToxMToxNFrOG4ozsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNToxMToxNFrOG4ozsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA0MjAzNA==", "bodyText": "Could we release the buffers at the finally block, so that any exceptions do not leak the buffers?", "url": "https://github.com/line/armeria/pull/2938#discussion_r462042034", "createdAt": "2020-07-29T05:11:14Z", "author": {"login": "trustin"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageFramer.java", "diffHunk": "@@ -145,20 +143,19 @@ public HttpData writePayload(ByteBuf message, boolean webTrailers) {\n \n             final ByteBuf maybeEncodedBuf;\n             if (encodeBase64) {\n-                final ByteBuffer base64Encoded = Base64.getEncoder().encode(buf.nioBuffer());\n+                final ByteBuf base64Encoded = Base64.encode(buf);\n                 buf.release();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbfe8c584a58a3c562d0649c1005879d0e2baf0d"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDU5NTQwOnYy", "diffSide": "RIGHT", "path": "grpc-protocol/src/test/java/com/linecorp/armeria/common/grpc/protocol/Base64DecoderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNToxMjowOVrOG4o0mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNTo0NDoyM1rOG4pZLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA0MjI2NQ==", "bodyText": "Method name? \ud83d\ude06", "url": "https://github.com/line/armeria/pull/2938#discussion_r462042265", "createdAt": "2020-07-29T05:12:09Z", "author": {"login": "trustin"}, "path": "grpc-protocol/src/test/java/com/linecorp/armeria/common/grpc/protocol/Base64DecoderTest.java", "diffHunk": "@@ -29,34 +28,51 @@\n import io.netty.buffer.ByteBuf;\n import io.netty.buffer.PooledByteBufAllocator;\n import io.netty.buffer.Unpooled;\n+import io.netty.handler.codec.base64.Base64;\n \n class Base64DecoderTest {\n \n-    private static final byte[][] EMPTY_BYTES = new byte[0][0];\n+    private static final ByteBuf[] EMPTY_BYTE_BUF = new ByteBuf[0];\n+\n+    @Test\n+    void aaa() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbfe8c584a58a3c562d0649c1005879d0e2baf0d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA1MTYzMQ==", "bodyText": "\ud83d\ude40", "url": "https://github.com/line/armeria/pull/2938#discussion_r462051631", "createdAt": "2020-07-29T05:44:23Z", "author": {"login": "minwoox"}, "path": "grpc-protocol/src/test/java/com/linecorp/armeria/common/grpc/protocol/Base64DecoderTest.java", "diffHunk": "@@ -29,34 +28,51 @@\n import io.netty.buffer.ByteBuf;\n import io.netty.buffer.PooledByteBufAllocator;\n import io.netty.buffer.Unpooled;\n+import io.netty.handler.codec.base64.Base64;\n \n class Base64DecoderTest {\n \n-    private static final byte[][] EMPTY_BYTES = new byte[0][0];\n+    private static final ByteBuf[] EMPTY_BYTE_BUF = new ByteBuf[0];\n+\n+    @Test\n+    void aaa() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA0MjI2NQ=="}, "originalCommit": {"oid": "fbfe8c584a58a3c562d0649c1005879d0e2baf0d"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDU5NzM4OnYy", "diffSide": "RIGHT", "path": "grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcClientOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNToxMzoyN1rOG4o18A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNToxNjowOFrOG4o4yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA0MjYwOA==", "bodyText": "Is this should not or do not need to? It'd be nice if nothing bad happens the releaseBuffer() is called.", "url": "https://github.com/line/armeria/pull/2938#discussion_r462042608", "createdAt": "2020-07-29T05:13:27Z", "author": {"login": "trustin"}, "path": "grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcClientOptions.java", "diffHunk": "@@ -78,8 +78,9 @@\n      * work. If {@link GrpcUnsafeBufferUtil#releaseBuffer(Object, RequestContext)} is not called, the memory\n      * will be leaked.\n      *\n-     * <p>Note that this isn't working if the payloads are compressed or the {@link SerializationFormat} is\n-     * {@link GrpcSerializationFormats#PROTO_WEB_TEXT}.\n+     * <p>Note that this has no effect if the payloads are compressed or the {@link SerializationFormat} is\n+     * {@link GrpcSerializationFormats#PROTO_WEB_TEXT}, so you should not call", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbfe8c584a58a3c562d0649c1005879d0e2baf0d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA0MzMzNg==", "bodyText": "It raises an exception if it's called.\nLet me just return boolean instead of raising an exception. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2938#discussion_r462043336", "createdAt": "2020-07-29T05:16:08Z", "author": {"login": "minwoox"}, "path": "grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcClientOptions.java", "diffHunk": "@@ -78,8 +78,9 @@\n      * work. If {@link GrpcUnsafeBufferUtil#releaseBuffer(Object, RequestContext)} is not called, the memory\n      * will be leaked.\n      *\n-     * <p>Note that this isn't working if the payloads are compressed or the {@link SerializationFormat} is\n-     * {@link GrpcSerializationFormats#PROTO_WEB_TEXT}.\n+     * <p>Note that this has no effect if the payloads are compressed or the {@link SerializationFormat} is\n+     * {@link GrpcSerializationFormats#PROTO_WEB_TEXT}, so you should not call", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA0MjYwOA=="}, "originalCommit": {"oid": "fbfe8c584a58a3c562d0649c1005879d0e2baf0d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDU5ODEwOnYy", "diffSide": "RIGHT", "path": "grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcWebUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNToxMzo1M1rOG4o2XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNTo0NDozNVrOG4pZaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA0MjcxNw==", "bodyText": "A user did not specify RequestLogProperty, so please rephrase it.", "url": "https://github.com/line/armeria/pull/2938#discussion_r462042717", "createdAt": "2020-07-29T05:13:53Z", "author": {"login": "trustin"}, "path": "grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcWebUtil.java", "diffHunk": "@@ -75,6 +76,9 @@\n      *                })))\n      *        .build(MyGrpcStub.class);\n      * }</pre>\n+     *\n+     * @throws RequestLogAvailabilityException if the specified {@link RequestLogProperty#SCHEME} is not\n+     *                                         available yet.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbfe8c584a58a3c562d0649c1005879d0e2baf0d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA1MTY4OA==", "bodyText": "Oops fixed. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2938#discussion_r462051688", "createdAt": "2020-07-29T05:44:35Z", "author": {"login": "minwoox"}, "path": "grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcWebUtil.java", "diffHunk": "@@ -75,6 +76,9 @@\n      *                })))\n      *        .build(MyGrpcStub.class);\n      * }</pre>\n+     *\n+     * @throws RequestLogAvailabilityException if the specified {@link RequestLogProperty#SCHEME} is not\n+     *                                         available yet.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA0MjcxNw=="}, "originalCommit": {"oid": "fbfe8c584a58a3c562d0649c1005879d0e2baf0d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTAzMzY5OnYy", "diffSide": "RIGHT", "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/Base64Decoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNzo1NDo1OFrOG4s5Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOTozMTowM1rOG4wazQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEwODk3OA==", "bodyText": "Add Netty licence?", "url": "https://github.com/line/armeria/pull/2938#discussion_r462108978", "createdAt": "2020-07-29T07:54:58Z", "author": {"login": "ikhoon"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/Base64Decoder.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8c00aeb45cde3fdf31d12e6b7d5fe74210427ff"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2NjczMw==", "bodyText": "Oops Added.", "url": "https://github.com/line/armeria/pull/2938#discussion_r462166733", "createdAt": "2020-07-29T09:31:03Z", "author": {"login": "minwoox"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/Base64Decoder.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEwODk3OA=="}, "originalCommit": {"oid": "f8c00aeb45cde3fdf31d12e6b7d5fe74210427ff"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTE1MzAwOnYy", "diffSide": "RIGHT", "path": "grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcWebUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODoyNjozN1rOG4uCJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODoyNjozN1rOG4uCJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEyNzY1NQ==", "bodyText": "Thanks!", "url": "https://github.com/line/armeria/pull/2938#discussion_r462127655", "createdAt": "2020-07-29T08:26:37Z", "author": {"login": "ikhoon"}, "path": "grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcWebUtil.java", "diffHunk": "@@ -62,19 +68,30 @@\n      * <pre>{@code\n      * Clients.builder(grpcServerUri)\n      *        .decorator(RetryingClient.newDecorator(\n-     *                RetryRuleWithContent.onResponse(response -> {\n+     *                RetryRuleWithContent.onResponse((ctx, response) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8c00aeb45cde3fdf31d12e6b7d5fe74210427ff"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTE5OTk3OnYy", "diffSide": "RIGHT", "path": "grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODozNzo1OFrOG4ueIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOTozNTozNlrOG4wk9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEzNDgxOA==", "bodyText": "Don't we need to improve the error message at line 348?\ne.g. serializationFormat.uriTxt() + \" trailers malformed...\"", "url": "https://github.com/line/armeria/pull/2938#discussion_r462134818", "createdAt": "2020-07-29T08:37:58Z", "author": {"login": "ikhoon"}, "path": "grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java", "diffHunk": "@@ -319,7 +320,7 @@ public synchronized void setMessageCompression(boolean enabled) {\n \n     @Override\n     public void messageRead(DeframedMessage message) {\n-        if (isGrpcWeb && message.type() >> 7 == 1) {\n+        if (GrpcSerializationFormats.isGrpcWeb(serializationFormat) && message.type() >> 7 == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8c00aeb45cde3fdf31d12e6b7d5fe74210427ff"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2OTMzMg==", "bodyText": "Fixed Thanks!", "url": "https://github.com/line/armeria/pull/2938#discussion_r462169332", "createdAt": "2020-07-29T09:35:36Z", "author": {"login": "minwoox"}, "path": "grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java", "diffHunk": "@@ -319,7 +320,7 @@ public synchronized void setMessageCompression(boolean enabled) {\n \n     @Override\n     public void messageRead(DeframedMessage message) {\n-        if (isGrpcWeb && message.type() >> 7 == 1) {\n+        if (GrpcSerializationFormats.isGrpcWeb(serializationFormat) && message.type() >> 7 == 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEzNDgxOA=="}, "originalCommit": {"oid": "f8c00aeb45cde3fdf31d12e6b7d5fe74210427ff"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTIwNjA1OnYy", "diffSide": "RIGHT", "path": "grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODozOTo0NlrOG4uiAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOTozNzoxMFrOG4woMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEzNTgxMA==", "bodyText": "nit: Use consitent word? grpcWebText vs webText?", "url": "https://github.com/line/armeria/pull/2938#discussion_r462135810", "createdAt": "2020-07-29T08:39:46Z", "author": {"login": "ikhoon"}, "path": "grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java", "diffHunk": "@@ -358,13 +359,14 @@ public void messageRead(DeframedMessage message) {\n         }\n \n         try {\n-            final O msg = marshaller.deserializeResponse(message);\n+            final boolean webText = GrpcSerializationFormats.isGrpcWebText(serializationFormat);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8c00aeb45cde3fdf31d12e6b7d5fe74210427ff"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE3MDE2MQ==", "bodyText": "I think it's okay unless the different names are used in a method. But Let me change to use grpcWebText. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2938#discussion_r462170161", "createdAt": "2020-07-29T09:37:10Z", "author": {"login": "minwoox"}, "path": "grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java", "diffHunk": "@@ -358,13 +359,14 @@ public void messageRead(DeframedMessage message) {\n         }\n \n         try {\n-            final O msg = marshaller.deserializeResponse(message);\n+            final boolean webText = GrpcSerializationFormats.isGrpcWebText(serializationFormat);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEzNTgxMA=="}, "originalCommit": {"oid": "f8c00aeb45cde3fdf31d12e6b7d5fe74210427ff"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTIyMTY5OnYy", "diffSide": "RIGHT", "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/ArmeriaServerCall.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODo0NDoxOFrOG4ursQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODo0NDoxOFrOG4ursQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEzODI4OQ==", "bodyText": "Ditto: grpcWebText vs webText? \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2938#discussion_r462138289", "createdAt": "2020-07-29T08:44:18Z", "author": {"login": "ikhoon"}, "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/ArmeriaServerCall.java", "diffHunk": "@@ -375,8 +373,10 @@ public void messageRead(DeframedMessage message) {\n             }\n         }\n \n+        final boolean webText = GrpcSerializationFormats.isGrpcWebText(serializationFormat);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8c00aeb45cde3fdf31d12e6b7d5fe74210427ff"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTM0MzcyOnYy", "diffSide": "RIGHT", "path": "site/src/pages/docs/client-grpc.mdx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOToxNTo1NFrOG4v3SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOTozNzozOFrOG4wpPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1NzY0MQ==", "bodyText": "nit: gproto-web, gproto-web-text or gjson-web.\ud83e\udd23", "url": "https://github.com/line/armeria/pull/2938#discussion_r462157641", "createdAt": "2020-07-29T09:15:54Z", "author": {"login": "ikhoon"}, "path": "site/src/pages/docs/client-grpc.mdx", "diffHunk": "@@ -46,7 +46,7 @@ assert reply.getMessage().equals(\"Hello, Armerian World!\");\n \n Note that we added the serialization format of the call using the `+` operator in the scheme part of the URI.\n Because we are calling a [gRPC] server, we can choose: `gproto` or `gjson`. If you are using [gRPC-web], \n-you can use `gproto-web` or `gjson-web`.\n+you can use `gproto-web`, `gjson-web` or `gproto-web-text`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8c00aeb45cde3fdf31d12e6b7d5fe74210427ff"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE3MDQyOA==", "bodyText": "Fixed. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2938#discussion_r462170428", "createdAt": "2020-07-29T09:37:38Z", "author": {"login": "minwoox"}, "path": "site/src/pages/docs/client-grpc.mdx", "diffHunk": "@@ -46,7 +46,7 @@ assert reply.getMessage().equals(\"Hello, Armerian World!\");\n \n Note that we added the serialization format of the call using the `+` operator in the scheme part of the URI.\n Because we are calling a [gRPC] server, we can choose: `gproto` or `gjson`. If you are using [gRPC-web], \n-you can use `gproto-web` or `gjson-web`.\n+you can use `gproto-web`, `gjson-web` or `gproto-web-text`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1NzY0MQ=="}, "originalCommit": {"oid": "f8c00aeb45cde3fdf31d12e6b7d5fe74210427ff"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTM2NTYwOnYy", "diffSide": "RIGHT", "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcServiceBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOToyMTo0NFrOG4wEsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOToyMTo0NFrOG4wEsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2MTA3NQ==", "bodyText": "Changed to support all GrpcSerializationFormats by default because there's no regression on performance and @ikhoon sometimes forgets about specifying JSON format when he's doing some test. \ud83e\udd23  /cc @anuraaga", "url": "https://github.com/line/armeria/pull/2938#discussion_r462161075", "createdAt": "2020-07-29T09:21:44Z", "author": {"login": "minwoox"}, "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcServiceBuilder.java", "diffHunk": "@@ -65,7 +65,7 @@\n public final class GrpcServiceBuilder {\n \n     private static final Set<SerializationFormat> DEFAULT_SUPPORTED_SERIALIZATION_FORMATS =\n-            ImmutableSet.of(GrpcSerializationFormats.PROTO, GrpcSerializationFormats.PROTO_WEB);\n+            GrpcSerializationFormats.values();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d9cad5f55f5501ef557576c87f884ce537d44d4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTM2OTgyOnYy", "diffSide": "RIGHT", "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcServiceBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOToyMjo0N1rOG4wHNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOTozMTowMVrOG4wawA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2MTcxOA==", "bodyText": "Could you enable all gRPC protocols by default?\nMost of Armeria users use gRPC-Java and com.google.protobuf.Message. Armeria can encode and decode the messages by default.\nEven though Armeria does not support ScalaPB JSON by default. \ud83d\ude05\nAny thoughts? @anuraaga", "url": "https://github.com/line/armeria/pull/2938#discussion_r462161718", "createdAt": "2020-07-29T09:22:47Z", "author": {"login": "ikhoon"}, "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcServiceBuilder.java", "diffHunk": "@@ -65,7 +65,9 @@\n public final class GrpcServiceBuilder {\n \n     private static final Set<SerializationFormat> DEFAULT_SUPPORTED_SERIALIZATION_FORMATS =\n-            ImmutableSet.of(GrpcSerializationFormats.PROTO, GrpcSerializationFormats.PROTO_WEB);\n+            ImmutableSet.of(GrpcSerializationFormats.PROTO,\n+                            GrpcSerializationFormats.PROTO_WEB,\n+                            GrpcSerializationFormats.PROTO_WEB_TEXT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8c00aeb45cde3fdf31d12e6b7d5fe74210427ff"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2NjcyMA==", "bodyText": "Oops... Ditto \ud83e\udd23", "url": "https://github.com/line/armeria/pull/2938#discussion_r462166720", "createdAt": "2020-07-29T09:31:01Z", "author": {"login": "ikhoon"}, "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcServiceBuilder.java", "diffHunk": "@@ -65,7 +65,9 @@\n public final class GrpcServiceBuilder {\n \n     private static final Set<SerializationFormat> DEFAULT_SUPPORTED_SERIALIZATION_FORMATS =\n-            ImmutableSet.of(GrpcSerializationFormats.PROTO, GrpcSerializationFormats.PROTO_WEB);\n+            ImmutableSet.of(GrpcSerializationFormats.PROTO,\n+                            GrpcSerializationFormats.PROTO_WEB,\n+                            GrpcSerializationFormats.PROTO_WEB_TEXT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2MTcxOA=="}, "originalCommit": {"oid": "f8c00aeb45cde3fdf31d12e6b7d5fe74210427ff"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTQwNzY1OnYy", "diffSide": "RIGHT", "path": "grpc/src/main/java/com/linecorp/armeria/unsafe/grpc/GrpcUnsafeBufferUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOTozMjozM1rOG4wePw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOTo0NDoxOVrOG4w4gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2NzYxNQ==", "bodyText": "Does a user need to check the return value? I guess it will be usually fire-and-forget.\nIf we ever return something, I think we need to distinguish between non-existent buffer and release() returning false.", "url": "https://github.com/line/armeria/pull/2938#discussion_r462167615", "createdAt": "2020-07-29T09:32:33Z", "author": {"login": "trustin"}, "path": "grpc/src/main/java/com/linecorp/armeria/unsafe/grpc/GrpcUnsafeBufferUtil.java", "diffHunk": "@@ -57,16 +57,24 @@ public static void storeBuffer(ByteBuf buf, Object message, RequestContext ctx)\n \n     /**\n      * Releases the {@link ByteBuf} backing the specified {@link Message}.\n+     *\n+     * @return {@code true} if and only if the reference count of the stored {@link ByteBuf} became {@code 0}.\n+     *         This will return {@code false} if the reference count does not become {@code 0} or,\n+     *         {@link #storeBuffer(ByteBuf, Object, RequestContext)} has not been called for the specified\n+     *         message and {@link RequestContext}.\n      */\n-    public static void releaseBuffer(Object message, RequestContext ctx) {\n+    @CheckReturnValue\n+    public static boolean releaseBuffer(Object message, RequestContext ctx) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8c00aeb45cde3fdf31d12e6b7d5fe74210427ff"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE3NDMzOA==", "bodyText": "Changed to do nothing if there's no stored buffer. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2938#discussion_r462174338", "createdAt": "2020-07-29T09:44:19Z", "author": {"login": "minwoox"}, "path": "grpc/src/main/java/com/linecorp/armeria/unsafe/grpc/GrpcUnsafeBufferUtil.java", "diffHunk": "@@ -57,16 +57,24 @@ public static void storeBuffer(ByteBuf buf, Object message, RequestContext ctx)\n \n     /**\n      * Releases the {@link ByteBuf} backing the specified {@link Message}.\n+     *\n+     * @return {@code true} if and only if the reference count of the stored {@link ByteBuf} became {@code 0}.\n+     *         This will return {@code false} if the reference count does not become {@code 0} or,\n+     *         {@link #storeBuffer(ByteBuf, Object, RequestContext)} has not been called for the specified\n+     *         message and {@link RequestContext}.\n      */\n-    public static void releaseBuffer(Object message, RequestContext ctx) {\n+    @CheckReturnValue\n+    public static boolean releaseBuffer(Object message, RequestContext ctx) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2NzYxNQ=="}, "originalCommit": {"oid": "f8c00aeb45cde3fdf31d12e6b7d5fe74210427ff"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODk1MzY3OnYy", "diffSide": "RIGHT", "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/Base64Decoder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNDoxMToxM1rOG5SY1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNDoxMToxM1rOG5SY1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcyMzI4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A stateful Base64decoder. Unlike {@link Base64#getDecoder()}, this decoder does not end when it meets\n          \n          \n            \n             * A stateful Base64decoder. Unlike {@link io.netty.handler.codec.base64.Base64Decoder}, this decoder does not end when it meets\n          \n      \n    \n    \n  \n\nImportant to describe the difference in this fork, not behavior vs JDK.", "url": "https://github.com/line/armeria/pull/2938#discussion_r462723284", "createdAt": "2020-07-30T04:11:13Z", "author": {"login": "anuraaga"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/Base64Decoder.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Written by Robert Harder and released to the public domain, as explained at\n+ * http://creativecommons.org/licenses/publicdomain\n+ */\n+package com.linecorp.armeria.common.grpc.protocol;\n+\n+import java.util.Base64;\n+\n+import javax.annotation.Nullable;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.util.ByteProcessor;\n+\n+/**\n+ * A stateful Base64decoder. Unlike {@link Base64#getDecoder()}, this decoder does not end when it meets", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30da9cf5b641fe80034601b0aa944d0987b987be"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODk1NTQ0OnYy", "diffSide": "RIGHT", "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/Base64Decoder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNDoxMjoyOFrOG5SZ4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNDoyMjoxN1rOG5SjRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcyMzU1NA==", "bodyText": "Why do we ignore white space, that seems like malformed base64?", "url": "https://github.com/line/armeria/pull/2938#discussion_r462723554", "createdAt": "2020-07-30T04:12:28Z", "author": {"login": "anuraaga"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/Base64Decoder.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Written by Robert Harder and released to the public domain, as explained at\n+ * http://creativecommons.org/licenses/publicdomain\n+ */\n+package com.linecorp.armeria.common.grpc.protocol;\n+\n+import java.util.Base64;\n+\n+import javax.annotation.Nullable;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.util.ByteProcessor;\n+\n+/**\n+ * A stateful Base64decoder. Unlike {@link Base64#getDecoder()}, this decoder does not end when it meets\n+ * padding('='), but continues to decode until the end of the {@link ByteBuf} given by\n+ * {@link #decode(ByteBuf)}. If the {@link ByteBuf} does not have necessary 4 bytes to decode as 3 bytes,\n+ * it stores the remained bytes and prepend them to the next {@link #decode(ByteBuf)} and decode together.\n+ */\n+final class Base64Decoder implements ByteProcessor {\n+\n+    // Forked from https://github.com/netty/netty/blob/netty-4.1.51.Final/codec\n+    // /src/main/java/io/netty/handler/codec/base64/Base64.java\n+\n+    private static final byte WHITE_SPACE_ENC = -5; // Indicates white space in encoding\n+\n+    private static final byte EQUALS_SIGN_ENC = -1; // Indicates equals sign in encoding\n+\n+    private static final byte[] DECODABET = {\n+            -9, -9, -9, -9, -9, -9,\n+            -9, -9, -9, // Decimal  0 -  8\n+            -5, -5, // Whitespace: Tab and Linefeed\n+            -9, -9, // Decimal 11 - 12\n+            -5, // Whitespace: Carriage Return\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 14 - 26\n+            -9, -9, -9, -9, -9, // Decimal 27 - 31\n+            -5, // Whitespace: Space\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 33 - 42\n+            62, // Plus sign at decimal 43\n+            -9, -9, -9, // Decimal 44 - 46\n+            63, // Slash at decimal 47\n+            52, 53, 54, 55, 56, 57, 58, 59, 60, 61, // Numbers zero through nine\n+            -9, -9, -9, // Decimal 58 - 60\n+            -1, // Equals sign at decimal 61\n+            -9, -9, -9, // Decimal 62 - 64\n+            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, // Letters 'A' through 'N'\n+            14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, // Letters 'O' through 'Z'\n+            -9, -9, -9, -9, -9, -9, // Decimal 91 - 96\n+            26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, // Letters 'a' through 'm'\n+            39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, // Letters 'n' through 'z'\n+            -9, -9, -9, -9, -9, // Decimal 123 - 127\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 128 - 140\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 141 - 153\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 154 - 166\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 167 - 179\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 180 - 192\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 193 - 205\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 206 - 218\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 219 - 231\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 232 - 244\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9              // Decimal 245 - 255\n+    };\n+\n+    private final ByteBufAllocator allocator;\n+    @Nullable\n+    private ByteBuf dest;\n+    private final byte[] last3 = new byte[3]; // The 4th byte is stored in a local variable.\n+    private int pos;\n+\n+    Base64Decoder(ByteBufAllocator allocator) {\n+        this.allocator = allocator;\n+    }\n+\n+    ByteBuf decode(ByteBuf src) {\n+        final ByteBuf dest = allocator.buffer(decodedBufferSize(src.readableBytes()));\n+        this.dest = dest;\n+        boolean success = false;\n+        try {\n+            src.forEachByte(this);\n+            success = true;\n+            return dest;\n+        } finally {\n+            if (!success) {\n+                dest.release();\n+            }\n+            src.release();\n+        }\n+    }\n+\n+    private int decodedBufferSize(int len) {\n+        return (len + pos) / 4 * 3;\n+    }\n+\n+    @Override\n+    public boolean process(byte value) throws Exception {\n+        final byte decodedByte = DECODABET[value & 0xFF];\n+        if (decodedByte < WHITE_SPACE_ENC) {\n+            throw new IllegalArgumentException(\n+                    \"invalid Base64 input character: \" + (short) (value & 0xFF) + \" (decimal)\");\n+        }\n+\n+        // White space, Equals sign or better\n+        if (decodedByte < EQUALS_SIGN_ENC) {\n+            // Ignore the white space.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30da9cf5b641fe80034601b0aa944d0987b987be"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcyNTk1OA==", "bodyText": "Let me raise an exception. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2938#discussion_r462725958", "createdAt": "2020-07-30T04:22:17Z", "author": {"login": "minwoox"}, "path": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/Base64Decoder.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Written by Robert Harder and released to the public domain, as explained at\n+ * http://creativecommons.org/licenses/publicdomain\n+ */\n+package com.linecorp.armeria.common.grpc.protocol;\n+\n+import java.util.Base64;\n+\n+import javax.annotation.Nullable;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.util.ByteProcessor;\n+\n+/**\n+ * A stateful Base64decoder. Unlike {@link Base64#getDecoder()}, this decoder does not end when it meets\n+ * padding('='), but continues to decode until the end of the {@link ByteBuf} given by\n+ * {@link #decode(ByteBuf)}. If the {@link ByteBuf} does not have necessary 4 bytes to decode as 3 bytes,\n+ * it stores the remained bytes and prepend them to the next {@link #decode(ByteBuf)} and decode together.\n+ */\n+final class Base64Decoder implements ByteProcessor {\n+\n+    // Forked from https://github.com/netty/netty/blob/netty-4.1.51.Final/codec\n+    // /src/main/java/io/netty/handler/codec/base64/Base64.java\n+\n+    private static final byte WHITE_SPACE_ENC = -5; // Indicates white space in encoding\n+\n+    private static final byte EQUALS_SIGN_ENC = -1; // Indicates equals sign in encoding\n+\n+    private static final byte[] DECODABET = {\n+            -9, -9, -9, -9, -9, -9,\n+            -9, -9, -9, // Decimal  0 -  8\n+            -5, -5, // Whitespace: Tab and Linefeed\n+            -9, -9, // Decimal 11 - 12\n+            -5, // Whitespace: Carriage Return\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 14 - 26\n+            -9, -9, -9, -9, -9, // Decimal 27 - 31\n+            -5, // Whitespace: Space\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 33 - 42\n+            62, // Plus sign at decimal 43\n+            -9, -9, -9, // Decimal 44 - 46\n+            63, // Slash at decimal 47\n+            52, 53, 54, 55, 56, 57, 58, 59, 60, 61, // Numbers zero through nine\n+            -9, -9, -9, // Decimal 58 - 60\n+            -1, // Equals sign at decimal 61\n+            -9, -9, -9, // Decimal 62 - 64\n+            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, // Letters 'A' through 'N'\n+            14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, // Letters 'O' through 'Z'\n+            -9, -9, -9, -9, -9, -9, // Decimal 91 - 96\n+            26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, // Letters 'a' through 'm'\n+            39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, // Letters 'n' through 'z'\n+            -9, -9, -9, -9, -9, // Decimal 123 - 127\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 128 - 140\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 141 - 153\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 154 - 166\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 167 - 179\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 180 - 192\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 193 - 205\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 206 - 218\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 219 - 231\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 232 - 244\n+            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9              // Decimal 245 - 255\n+    };\n+\n+    private final ByteBufAllocator allocator;\n+    @Nullable\n+    private ByteBuf dest;\n+    private final byte[] last3 = new byte[3]; // The 4th byte is stored in a local variable.\n+    private int pos;\n+\n+    Base64Decoder(ByteBufAllocator allocator) {\n+        this.allocator = allocator;\n+    }\n+\n+    ByteBuf decode(ByteBuf src) {\n+        final ByteBuf dest = allocator.buffer(decodedBufferSize(src.readableBytes()));\n+        this.dest = dest;\n+        boolean success = false;\n+        try {\n+            src.forEachByte(this);\n+            success = true;\n+            return dest;\n+        } finally {\n+            if (!success) {\n+                dest.release();\n+            }\n+            src.release();\n+        }\n+    }\n+\n+    private int decodedBufferSize(int len) {\n+        return (len + pos) / 4 * 3;\n+    }\n+\n+    @Override\n+    public boolean process(byte value) throws Exception {\n+        final byte decodedByte = DECODABET[value & 0xFF];\n+        if (decodedByte < WHITE_SPACE_ENC) {\n+            throw new IllegalArgumentException(\n+                    \"invalid Base64 input character: \" + (short) (value & 0xFF) + \" (decimal)\");\n+        }\n+\n+        // White space, Equals sign or better\n+        if (decodedByte < EQUALS_SIGN_ENC) {\n+            // Ignore the white space.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcyMzU1NA=="}, "originalCommit": {"oid": "30da9cf5b641fe80034601b0aa944d0987b987be"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODk2MzI0OnYy", "diffSide": "RIGHT", "path": "grpc-protocol/src/test/java/com/linecorp/armeria/common/grpc/protocol/Base64DecoderTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNDoxNzoxOFrOG5SeSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNDoyMDowNlrOG5Sg4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcyNDY4MQ==", "bodyText": "I don't think we should generate test cases randomly, it's very hard to be convinced this class is actually a complete test for base64, can you write a more concrete, easy to reason about test suite? Of course this is a big reason I didn't want to implement it :)", "url": "https://github.com/line/armeria/pull/2938#discussion_r462724681", "createdAt": "2020-07-30T04:17:18Z", "author": {"login": "anuraaga"}, "path": "grpc-protocol/src/test/java/com/linecorp/armeria/common/grpc/protocol/Base64DecoderTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.grpc.protocol;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Random;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.buffer.Unpooled;\n+import io.netty.handler.codec.base64.Base64;\n+\n+class Base64DecoderTest {\n+\n+    private static final ByteBuf[] EMPTY_BYTE_BUF = new ByteBuf[0];\n+\n+    @Test\n+    void decodeConcatenatedBufsWithPadding() {\n+        final String str = \"abcd\"; // YWJjZA==\n+        final ByteBuf buf = Unpooled.wrappedBuffer(str.getBytes());\n+        final ByteBuf encoded1 = Base64.encode(buf);\n+        buf.readerIndex(0);\n+        final ByteBuf encoded2 = Base64.encode(buf);\n+        final ByteBuf concatenated = Unpooled.wrappedBuffer(encoded1, encoded2); // YWJjZA==YWJjZA==\n+        final Base64Decoder base64Decoder = new Base64Decoder(PooledByteBufAllocator.DEFAULT);\n+        final ByteBuf decoded = base64Decoder.decode(concatenated);\n+        assertThat(decoded.toString(Charset.defaultCharset())).isEqualTo(\"abcdabcd\");\n+        decoded.release();\n+    }\n+\n+    @Test\n+    void decodeMultipleEncodedBytes() {\n+        final String str = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz1234567890\";\n+        final byte[] bytes = str.getBytes();\n+        final List<ByteBuf> fragments = fragmentRandomly(bytes);\n+        final int half = fragments.size() / 2;\n+        final ByteBuf first =\n+                Unpooled.wrappedBuffer(fragments.subList(0, half).toArray(EMPTY_BYTE_BUF));\n+        final ByteBuf second =\n+                Unpooled.wrappedBuffer(fragments.subList(half, fragments.size()).toArray(EMPTY_BYTE_BUF));\n+        final Base64Decoder base64Decoder = new Base64Decoder(PooledByteBufAllocator.DEFAULT);\n+        final ByteBuf decodedFirst = base64Decoder.decode(first);\n+        final ByteBuf decodedSecond = base64Decoder.decode(second);\n+        assertThat(Unpooled.wrappedBuffer(decodedFirst, decodedSecond).toString(Charset.defaultCharset()))\n+                .isEqualTo(str);\n+        decodedFirst.release();\n+        decodedSecond.release();\n+    }\n+\n+    private static List<ByteBuf> fragmentRandomly(byte[] bytes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d13089d228833abf634c2ec4d2d49f2a89a7c888"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcyNTM0Ng==", "bodyText": "I'm working on a PR that supports compression and decoding base64 in GrpcWebUtil.\nLet me work on this in that PR. \ud83d\ude04", "url": "https://github.com/line/armeria/pull/2938#discussion_r462725346", "createdAt": "2020-07-30T04:20:06Z", "author": {"login": "minwoox"}, "path": "grpc-protocol/src/test/java/com/linecorp/armeria/common/grpc/protocol/Base64DecoderTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.grpc.protocol;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Random;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.buffer.Unpooled;\n+import io.netty.handler.codec.base64.Base64;\n+\n+class Base64DecoderTest {\n+\n+    private static final ByteBuf[] EMPTY_BYTE_BUF = new ByteBuf[0];\n+\n+    @Test\n+    void decodeConcatenatedBufsWithPadding() {\n+        final String str = \"abcd\"; // YWJjZA==\n+        final ByteBuf buf = Unpooled.wrappedBuffer(str.getBytes());\n+        final ByteBuf encoded1 = Base64.encode(buf);\n+        buf.readerIndex(0);\n+        final ByteBuf encoded2 = Base64.encode(buf);\n+        final ByteBuf concatenated = Unpooled.wrappedBuffer(encoded1, encoded2); // YWJjZA==YWJjZA==\n+        final Base64Decoder base64Decoder = new Base64Decoder(PooledByteBufAllocator.DEFAULT);\n+        final ByteBuf decoded = base64Decoder.decode(concatenated);\n+        assertThat(decoded.toString(Charset.defaultCharset())).isEqualTo(\"abcdabcd\");\n+        decoded.release();\n+    }\n+\n+    @Test\n+    void decodeMultipleEncodedBytes() {\n+        final String str = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz1234567890\";\n+        final byte[] bytes = str.getBytes();\n+        final List<ByteBuf> fragments = fragmentRandomly(bytes);\n+        final int half = fragments.size() / 2;\n+        final ByteBuf first =\n+                Unpooled.wrappedBuffer(fragments.subList(0, half).toArray(EMPTY_BYTE_BUF));\n+        final ByteBuf second =\n+                Unpooled.wrappedBuffer(fragments.subList(half, fragments.size()).toArray(EMPTY_BYTE_BUF));\n+        final Base64Decoder base64Decoder = new Base64Decoder(PooledByteBufAllocator.DEFAULT);\n+        final ByteBuf decodedFirst = base64Decoder.decode(first);\n+        final ByteBuf decodedSecond = base64Decoder.decode(second);\n+        assertThat(Unpooled.wrappedBuffer(decodedFirst, decodedSecond).toString(Charset.defaultCharset()))\n+                .isEqualTo(str);\n+        decodedFirst.release();\n+        decodedSecond.release();\n+    }\n+\n+    private static List<ByteBuf> fragmentRandomly(byte[] bytes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcyNDY4MQ=="}, "originalCommit": {"oid": "d13089d228833abf634c2ec4d2d49f2a89a7c888"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2142, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}