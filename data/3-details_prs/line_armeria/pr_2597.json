{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5ODkwNTg4", "number": 2597, "title": "Assign stream ID right before writing RequestHeaders", "bodyText": "Motivation:\nWhen sending requests asynchronously, the requests might not be sending in order due to DNS resolution and HTTP/2 multiplexing.\nIf it happens after stream ID is assigned, the request, which tries to create a new stream after a stream whose ID is bigger is created, couldn't be used.\nModifications:\n\nAssign the stream ID right before writing RequestHeaders.\n\nResult:\n\nYou no longer see ClosedStreamException due to the stream creation reversal", "createdAt": "2020-03-17T15:01:27Z", "url": "https://github.com/line/armeria/pull/2597", "merged": true, "mergeCommit": {"oid": "711cea08b59286f5f847e5c4f17aedec5ada97de"}, "closed": true, "closedAt": "2020-03-19T04:54:45Z", "author": {"login": "minwoox"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOkC7QAH2gAyMzg5ODkwNTg4OmRkNjVjNjM4M2IxZTkyNTlkN2YyMzU3MjY5NWYyMzZjOTYwNjczNmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOw-PfgFqTM3NjU4MzkzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dd65c6383b1e9259d7f23572695f236c9606736d", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/dd65c6383b1e9259d7f23572695f236c9606736d", "committedDate": "2020-03-17T15:00:48Z", "message": "Assign stream ID right before writing RequestHeaders\nMotivation:\nWhen sending requests asyncronously, the requests might not be sending in order due to DNS resolution and HTTP/2 multiplexing.\nIf it happens after stream ID is assigned, the request, which tries to create a new stream after a stream whose ID is bigger is created, couldn't be used.\n\nModifications:\n- Assign the stream ID right before writing `RequestHeaders`.\n\nResult:\n- You no longer see `ClosedStreamException` due to the stream reversal"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NTA4ODIy", "url": "https://github.com/line/armeria/pull/2597#pullrequestreview-376508822", "createdAt": "2020-03-18T01:31:54Z", "commit": {"oid": "dd65c6383b1e9259d7f23572695f236c9606736d"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMTozMTo1NFrOF3zfIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMTozNjoxM1rOF3zi-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1OTU1Mg==", "bodyText": "How about adding a message to the exception? Could use different message for the two cases (!session.canSendRequest() and id >= MAX_NUM_REQUESTS_SENT)", "url": "https://github.com/line/armeria/pull/2597#discussion_r394059552", "createdAt": "2020-03-18T01:31:54Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "diffHunk": "@@ -122,43 +129,53 @@ public void operationComplete(ChannelFuture future) throws Exception {\n                 return;\n             }\n \n-            fail(future.cause());\n-        }\n-\n-        final Throwable cause = future.cause();\n-        if (!(cause instanceof ClosedStreamException)) {\n-            final Channel ch = future.channel();\n-            Exceptions.logIfUnexpected(logger, ch, HttpSession.get(ch).protocol(), cause);\n-            ch.close();\n+            failAndWriteResetIfActive(future.cause());\n         }\n     }\n \n     @Override\n     public void onSubscribe(Subscription subscription) {\n         assert this.subscription == null;\n         this.subscription = subscription;\n+        if (state == State.DONE) {\n+            cancelSubscription();\n+            return;\n+        }\n \n-        final EventLoop eventLoop = ch.eventLoop();\n+        final HttpSession session = HttpSession.get(ch);\n+        id = session.getAndIncrementNumRequestsSent();\n+        if (!session.canSendRequest() || id >= MAX_NUM_REQUESTS_SENT) {\n+            responseDecoder.disconnectWhenFinished();\n+            // No need to send RST because we didn't send any packet and this will be disconnected anyway.\n+            fail(new UnprocessedRequestException(ClosedSessionException.get()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd65c6383b1e9259d7f23572695f236c9606736d"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA2MDQ0NQ==", "bodyText": "I think failAndReset() is enough. Whether a channel is active or not doesn't matter much because the RST_STREAM frame would not be sent even if we didn't have if (ch.isActive()).", "url": "https://github.com/line/armeria/pull/2597#discussion_r394060445", "createdAt": "2020-03-18T01:35:45Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "diffHunk": "@@ -298,7 +322,7 @@ private void cancelSubscription() {\n         subscription.cancel();\n     }\n \n-    private void failAndRespond(Throwable cause) {\n+    private void failAndWriteResetIfActive(Throwable cause) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd65c6383b1e9259d7f23572695f236c9606736d"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA2MDUzNw==", "bodyText": "Maybe better returning MAX_NUM_REQUESTS_SENT?", "url": "https://github.com/line/armeria/pull/2597#discussion_r394060537", "createdAt": "2020-03-18T01:36:13Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpSession.java", "diffHunk": "@@ -63,6 +63,11 @@ public void retryWithH1C() {\n \n         @Override\n         public void deactivate() {}\n+\n+        @Override\n+        public int getAndIncrementNumRequestsSent() {\n+            return 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd65c6383b1e9259d7f23572695f236c9606736d"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "986c0f1a1a96cc2c76f8f4879a626820272d6bf9", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/986c0f1a1a96cc2c76f8f4879a626820272d6bf9", "committedDate": "2020-03-18T02:06:25Z", "message": "Address comments by @trustin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NTY3MzU3", "url": "https://github.com/line/armeria/pull/2597#pullrequestreview-376567357", "createdAt": "2020-03-18T05:07:50Z", "commit": {"oid": "986c0f1a1a96cc2c76f8f4879a626820272d6bf9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NTY0MDk5", "url": "https://github.com/line/armeria/pull/2597#pullrequestreview-376564099", "createdAt": "2020-03-18T04:55:38Z", "commit": {"oid": "986c0f1a1a96cc2c76f8f4879a626820272d6bf9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDo1NTozOFrOF32WQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNTowOTozN1rOF32iHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwNjQzNA==", "bodyText": "The prefix ++ seems increment and get the numRequestsSent.", "url": "https://github.com/line/armeria/pull/2597#discussion_r394106434", "createdAt": "2020-03-18T04:55:38Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java", "diffHunk": "@@ -146,37 +146,41 @@ public boolean canSendRequest() {\n     }\n \n     @Override\n-    public boolean invoke(ClientRequestContext ctx, HttpRequest req, DecodedHttpResponse res) {\n+    public void invoke(PooledChannel pooledChannel, ClientRequestContext ctx,\n+                       HttpRequest req, DecodedHttpResponse res) {\n         if (handleEarlyCancellation(ctx, req, res)) {\n-            return true;\n+            pooledChannel.release();\n+            return;\n         }\n \n         final long writeTimeoutMillis = ctx.writeTimeoutMillis();\n-        final long responseTimeoutMillis = ctx.responseTimeoutMillis();\n-        final long maxContentLength = ctx.maxResponseLength();\n \n+        assert protocol != null;\n         assert responseDecoder != null;\n         assert requestEncoder != null;\n-\n-        final int numRequestsSent = ++this.numRequestsSent;\n-        final HttpResponseWrapper wrappedRes =\n-                responseDecoder.addResponse(numRequestsSent, res, ctx,\n-                                            channel.eventLoop(), responseTimeoutMillis, maxContentLength);\n-        if (ctx instanceof DefaultClientRequestContext) {\n-            ((DefaultClientRequestContext) ctx).setResponseTimeoutController(wrappedRes);\n+        if (!protocol.isMultiplex()) {\n+            // When HTTP/1.1 is used:\n+            // If pipelining is enabled, return as soon as the request is fully sent.\n+            // If pipelining is disabled, return after the response is fully received.\n+            final CompletableFuture<Void> completionFuture =\n+                    useHttp1Pipelining ? req.whenComplete() : res.whenComplete();\n+            completionFuture.handle((ret, cause) -> {\n+                if (!responseDecoder.needsToDisconnectWhenFinished()) {\n+                    pooledChannel.release();\n+                }\n+                return null;\n+            });\n         }\n \n         final HttpRequestSubscriber reqSubscriber =\n-                new HttpRequestSubscriber(channel, requestEncoder, numRequestsSent,\n-                                          req, wrappedRes, ctx, writeTimeoutMillis);\n+                new HttpRequestSubscriber(channel, requestEncoder, responseDecoder,\n+                                          req, res, ctx, writeTimeoutMillis);\n         req.subscribe(reqSubscriber, channel.eventLoop(), WITH_POOLED_OBJECTS);\n+    }\n \n-        if (numRequestsSent >= MAX_NUM_REQUESTS_SENT) {\n-            responseDecoder.disconnectWhenFinished();\n-            return false;\n-        } else {\n-            return true;\n-        }\n+    @Override\n+    public int getAndIncrementNumRequestsSent() {\n+        return ++numRequestsSent;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "986c0f1a1a96cc2c76f8f4879a626820272d6bf9"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwOTQ3MA==", "bodyText": "Don't we need to wrap this cause with UnprocessedRequestException?", "url": "https://github.com/line/armeria/pull/2597#discussion_r394109470", "createdAt": "2020-03-18T05:09:37Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "diffHunk": "@@ -218,7 +242,12 @@ public void onNext(HttpObject o) {\n     @Override\n     public void onError(Throwable cause) {\n         isSubscriptionCompleted = true;\n-        failAndRespond(cause);\n+        if (id >= 0) { // onSubscribe is called.\n+            failAndReset(cause);\n+        } else {\n+            // No need to send RST because we didn't send any packet.\n+            fail(cause);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "986c0f1a1a96cc2c76f8f4879a626820272d6bf9"}, "originalPosition": 201}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f3762634b515c614436591436a3e4315fdb38d2", "author": {"user": {"login": "minwoox", "name": "minux"}}, "url": "https://github.com/line/armeria/commit/9f3762634b515c614436591436a3e4315fdb38d2", "committedDate": "2020-03-18T05:15:06Z", "message": "Address comments by @ikhoon"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NTc0OTE1", "url": "https://github.com/line/armeria/pull/2597#pullrequestreview-376574915", "createdAt": "2020-03-18T05:35:10Z", "commit": {"oid": "9f3762634b515c614436591436a3e4315fdb38d2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNTozNToxMFrOF324yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNTozNToxMFrOF324yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExNTI3NQ==", "bodyText": "Question: We don't need to care about the type of cause just in case the cause is instance of UnprocessedRequestException already?\nIf the cause can not be UnprocessedRequestException, skip this review \ud83d\ude00", "url": "https://github.com/line/armeria/pull/2597#discussion_r394115275", "createdAt": "2020-03-18T05:35:10Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "diffHunk": "@@ -218,7 +242,12 @@ public void onNext(HttpObject o) {\n     @Override\n     public void onError(Throwable cause) {\n         isSubscriptionCompleted = true;\n-        failAndRespond(cause);\n+        if (id >= 0) { // onSubscribe is called.\n+            failAndReset(cause);\n+        } else {\n+            // No need to send RST because we didn't send any packet.\n+            fail(new UnprocessedRequestException(cause));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f3762634b515c614436591436a3e4315fdb38d2"}, "originalPosition": 201}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NTgzOTM2", "url": "https://github.com/line/armeria/pull/2597#pullrequestreview-376583936", "createdAt": "2020-03-18T06:04:18Z", "commit": {"oid": "9f3762634b515c614436591436a3e4315fdb38d2"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNjowNDoxOFrOF33VYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNjowNDoxOFrOF33VYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEyMjU5Mg==", "bodyText": "Thanks for the explanation! \ud83d\ude4f", "url": "https://github.com/line/armeria/pull/2597#discussion_r394122592", "createdAt": "2020-03-18T06:04:18Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "diffHunk": "@@ -218,7 +242,12 @@ public void onNext(HttpObject o) {\n     @Override\n     public void onError(Throwable cause) {\n         isSubscriptionCompleted = true;\n-        failAndRespond(cause);\n+        if (id >= 0) { // onSubscribe is called.\n+            failAndReset(cause);\n+        } else {\n+            // No need to send RST because we didn't send any packet.\n+            fail(new UnprocessedRequestException(cause));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExNTI3NQ=="}, "originalCommit": {"oid": "9f3762634b515c614436591436a3e4315fdb38d2"}, "originalPosition": 201}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 698, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}