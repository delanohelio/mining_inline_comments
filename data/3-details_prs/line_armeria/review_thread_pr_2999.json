{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5MTcxMDA2", "number": 2999, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNDozMDowOFrOEZToFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNzoyNzoyNlrOEZWN8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTcxNDEyOnYy", "diffSide": "RIGHT", "path": "reactor3/src/test/java/com/linecorp/armeria/common/reactor3/ContextAwareFluxTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNDozMDowOFrOHCC6pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNjoxNzo0NFrOHCE1uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwNjk4Mw==", "bodyText": "How about adding a test case for ParallelFlux and adding @Ignore to it?", "url": "https://github.com/line/armeria/pull/2999#discussion_r471906983", "createdAt": "2020-08-18T04:30:08Z", "author": {"login": "trustin"}, "path": "reactor3/src/test/java/com/linecorp/armeria/common/reactor3/ContextAwareFluxTest.java", "diffHunk": "@@ -0,0 +1,399 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.reactor3;\n+\n+import static com.linecorp.armeria.common.reactor3.ContextAwareMonoTest.ctxExists;\n+import static com.linecorp.armeria.common.reactor3.ContextAwareMonoTest.newContext;\n+import static com.linecorp.armeria.common.reactor3.ContextAwareMonoTest.noopSubscription;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.reactivestreams.Publisher;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+import com.linecorp.armeria.internal.testing.AnticipatedException;\n+\n+import reactor.core.Disposable;\n+import reactor.core.publisher.ConnectableFlux;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Schedulers;\n+import reactor.test.StepVerifier;\n+\n+class ContextAwareFluxTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c18de87d3718e1f36aa3122ad1d34aa3f53b681"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkyODE5NQ==", "bodyText": "Can I add it when I implement the hook later?\nIt seems weird that adding test cases for what I didn't implement it yet. \ud83d\ude0e", "url": "https://github.com/line/armeria/pull/2999#discussion_r471928195", "createdAt": "2020-08-18T05:46:04Z", "author": {"login": "minwoox"}, "path": "reactor3/src/test/java/com/linecorp/armeria/common/reactor3/ContextAwareFluxTest.java", "diffHunk": "@@ -0,0 +1,399 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.reactor3;\n+\n+import static com.linecorp.armeria.common.reactor3.ContextAwareMonoTest.ctxExists;\n+import static com.linecorp.armeria.common.reactor3.ContextAwareMonoTest.newContext;\n+import static com.linecorp.armeria.common.reactor3.ContextAwareMonoTest.noopSubscription;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.reactivestreams.Publisher;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+import com.linecorp.armeria.internal.testing.AnticipatedException;\n+\n+import reactor.core.Disposable;\n+import reactor.core.publisher.ConnectableFlux;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Schedulers;\n+import reactor.test.StepVerifier;\n+\n+class ContextAwareFluxTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwNjk4Mw=="}, "originalCommit": {"oid": "8c18de87d3718e1f36aa3122ad1d34aa3f53b681"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkzODQ5MQ==", "bodyText": "No problem", "url": "https://github.com/line/armeria/pull/2999#discussion_r471938491", "createdAt": "2020-08-18T06:17:44Z", "author": {"login": "trustin"}, "path": "reactor3/src/test/java/com/linecorp/armeria/common/reactor3/ContextAwareFluxTest.java", "diffHunk": "@@ -0,0 +1,399 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.reactor3;\n+\n+import static com.linecorp.armeria.common.reactor3.ContextAwareMonoTest.ctxExists;\n+import static com.linecorp.armeria.common.reactor3.ContextAwareMonoTest.newContext;\n+import static com.linecorp.armeria.common.reactor3.ContextAwareMonoTest.noopSubscription;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.reactivestreams.Publisher;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+import com.linecorp.armeria.internal.testing.AnticipatedException;\n+\n+import reactor.core.Disposable;\n+import reactor.core.publisher.ConnectableFlux;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Schedulers;\n+import reactor.test.StepVerifier;\n+\n+class ContextAwareFluxTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwNjk4Mw=="}, "originalCommit": {"oid": "8c18de87d3718e1f36aa3122ad1d34aa3f53b681"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTcxNTA2OnYy", "diffSide": "RIGHT", "path": "reactor3/src/main/java/com/linecorp/armeria/common/reactor3/RequestContextHooks.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNDozMDozN1rOHCC7Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNTo0MjoxOFrOHCEI0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwNzExNA==", "bodyText": "How about any relevance to Reactor's own for clarity?", "url": "https://github.com/line/armeria/pull/2999#discussion_r471907114", "createdAt": "2020-08-18T04:30:37Z", "author": {"login": "trustin"}, "path": "reactor3/src/main/java/com/linecorp/armeria/common/reactor3/RequestContextHooks.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.reactor3;\n+\n+import java.util.function.Consumer;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.ContextHolder;\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.RequestContextStorage;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Disposable;\n+import reactor.core.Scannable;\n+import reactor.core.Scannable.Attr;\n+import reactor.core.publisher.ConnectableFlux;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Hooks;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.ParallelFlux;\n+import reactor.util.context.Context;\n+\n+/**\n+ * Utility class to keep {@link RequestContext} during\n+ * <a href=\"https://github.com/reactor/reactor-core\">Reactor</a> operations.\n+ */\n+public final class RequestContextHooks {\n+\n+    private static final String ON_EACH_OPERATOR_HOOK_KEY =\n+            RequestContextHooks.class.getName() + \"#ON_EACH_OPERATOR_HOOK_KEY\";\n+\n+    private static final String ON_LAST_OPERATOR_HOOK_KEY =\n+            RequestContextHooks.class.getName() + \"#ON_LAST_OPERATOR_HOOK_KEY\";\n+\n+    private static boolean enabled;\n+\n+    /**\n+     * Enables {@link RequestContext} during Reactor operations.\n+     * The reactor {@link Publisher}s such as {@link Mono} and {@link Flux} will have the\n+     * {@link RequestContext} which is in the {@link RequestContextStorage} when the {@link Publisher}s\n+     * are created. Then, the {@link RequestContext} is propagated during the\n+     * operations so that you can get the context using {@link RequestContext#current()}.\n+     *\n+     * <p>However, please note that {@link Mono#doOnCancel(Runnable)}, {@link Mono#doFinally(Consumer)},\n+     * {@link Flux#doOnCancel(Runnable)} and {@link Flux#doFinally(Consumer)} will not propagate the context.\n+     *\n+     * <p>Also, note that this method does not have any relevance to {@link Context} API.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c18de87d3718e1f36aa3122ad1d34aa3f53b681"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkyNjk5NA==", "bodyText": "Fixed. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2999#discussion_r471926994", "createdAt": "2020-08-18T05:42:18Z", "author": {"login": "minwoox"}, "path": "reactor3/src/main/java/com/linecorp/armeria/common/reactor3/RequestContextHooks.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.reactor3;\n+\n+import java.util.function.Consumer;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.ContextHolder;\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.RequestContextStorage;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Disposable;\n+import reactor.core.Scannable;\n+import reactor.core.Scannable.Attr;\n+import reactor.core.publisher.ConnectableFlux;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Hooks;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.ParallelFlux;\n+import reactor.util.context.Context;\n+\n+/**\n+ * Utility class to keep {@link RequestContext} during\n+ * <a href=\"https://github.com/reactor/reactor-core\">Reactor</a> operations.\n+ */\n+public final class RequestContextHooks {\n+\n+    private static final String ON_EACH_OPERATOR_HOOK_KEY =\n+            RequestContextHooks.class.getName() + \"#ON_EACH_OPERATOR_HOOK_KEY\";\n+\n+    private static final String ON_LAST_OPERATOR_HOOK_KEY =\n+            RequestContextHooks.class.getName() + \"#ON_LAST_OPERATOR_HOOK_KEY\";\n+\n+    private static boolean enabled;\n+\n+    /**\n+     * Enables {@link RequestContext} during Reactor operations.\n+     * The reactor {@link Publisher}s such as {@link Mono} and {@link Flux} will have the\n+     * {@link RequestContext} which is in the {@link RequestContextStorage} when the {@link Publisher}s\n+     * are created. Then, the {@link RequestContext} is propagated during the\n+     * operations so that you can get the context using {@link RequestContext#current()}.\n+     *\n+     * <p>However, please note that {@link Mono#doOnCancel(Runnable)}, {@link Mono#doFinally(Consumer)},\n+     * {@link Flux#doOnCancel(Runnable)} and {@link Flux#doFinally(Consumer)} will not propagate the context.\n+     *\n+     * <p>Also, note that this method does not have any relevance to {@link Context} API.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwNzExNA=="}, "originalCommit": {"oid": "8c18de87d3718e1f36aa3122ad1d34aa3f53b681"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTcyMzY0OnYy", "diffSide": "RIGHT", "path": "reactor3/src/main/java/com/linecorp/armeria/common/reactor3/RequestContextHooks.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNDozNTo0NlrOHCDAEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNTo0MjozMFrOHCEJKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwODM2OA==", "bodyText": "Should we log a warning message once when we reach here for potentially less confusion?", "url": "https://github.com/line/armeria/pull/2999#discussion_r471908368", "createdAt": "2020-08-18T04:35:46Z", "author": {"login": "trustin"}, "path": "reactor3/src/main/java/com/linecorp/armeria/common/reactor3/RequestContextHooks.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.reactor3;\n+\n+import java.util.function.Consumer;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.ContextHolder;\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.RequestContextStorage;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Disposable;\n+import reactor.core.Scannable;\n+import reactor.core.Scannable.Attr;\n+import reactor.core.publisher.ConnectableFlux;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Hooks;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.ParallelFlux;\n+import reactor.util.context.Context;\n+\n+/**\n+ * Utility class to keep {@link RequestContext} during\n+ * <a href=\"https://github.com/reactor/reactor-core\">Reactor</a> operations.\n+ */\n+public final class RequestContextHooks {\n+\n+    private static final String ON_EACH_OPERATOR_HOOK_KEY =\n+            RequestContextHooks.class.getName() + \"#ON_EACH_OPERATOR_HOOK_KEY\";\n+\n+    private static final String ON_LAST_OPERATOR_HOOK_KEY =\n+            RequestContextHooks.class.getName() + \"#ON_LAST_OPERATOR_HOOK_KEY\";\n+\n+    private static boolean enabled;\n+\n+    /**\n+     * Enables {@link RequestContext} during Reactor operations.\n+     * The reactor {@link Publisher}s such as {@link Mono} and {@link Flux} will have the\n+     * {@link RequestContext} which is in the {@link RequestContextStorage} when the {@link Publisher}s\n+     * are created. Then, the {@link RequestContext} is propagated during the\n+     * operations so that you can get the context using {@link RequestContext#current()}.\n+     *\n+     * <p>However, please note that {@link Mono#doOnCancel(Runnable)}, {@link Mono#doFinally(Consumer)},\n+     * {@link Flux#doOnCancel(Runnable)} and {@link Flux#doFinally(Consumer)} will not propagate the context.\n+     *\n+     * <p>Also, note that this method does not have any relevance to {@link Context} API.\n+     */\n+    public static synchronized void enable() {\n+        if (enabled) {\n+            return;\n+        }\n+        Hooks.onEachOperator(ON_EACH_OPERATOR_HOOK_KEY, source -> {\n+            if (source instanceof ContextHolder) {\n+                return source;\n+            }\n+\n+            if (source instanceof Scannable) {\n+                final Object parent = ((Scannable) source).scanUnsafe(Attr.PARENT);\n+                if (parent instanceof ContextHolder) {\n+                    return makeContextAware(source, ((ContextHolder) parent).context());\n+                }\n+            }\n+            return RequestContext.mapCurrent(requestContext -> makeContextAware(source, requestContext),\n+                                             () -> source);\n+        });\n+\n+        Hooks.onLastOperator(ON_LAST_OPERATOR_HOOK_KEY, source -> {\n+            if (source instanceof ContextHolder) {\n+                return source;\n+            }\n+\n+            if (source instanceof Scannable) {\n+                final Object parent = ((Scannable) source).scanUnsafe(Attr.PARENT);\n+                if (parent instanceof ContextHolder) {\n+                    return makeContextAware(source, ((ContextHolder) parent).context());\n+                }\n+            }\n+            return source;\n+        });\n+\n+        enabled = true;\n+    }\n+\n+    /**\n+     * Disables {@link RequestContext} during Reactor operations.\n+     */\n+    public static synchronized void disable() {\n+        if (!enabled) {\n+            return;\n+        }\n+        Hooks.resetOnEachOperator(ON_EACH_OPERATOR_HOOK_KEY);\n+        Hooks.resetOnLastOperator(ON_LAST_OPERATOR_HOOK_KEY);\n+        enabled = false;\n+    }\n+\n+    private static Publisher<Object> makeContextAware(Publisher<Object> source, RequestContext ctx) {\n+        if (source instanceof Mono) {\n+            return new ContextAwareMono((Mono<Object>) source, ctx);\n+        }\n+        if (source instanceof ConnectableFlux) {\n+            return new ContextAwareConnectableFlux((ConnectableFlux<Object>) source, ctx);\n+        }\n+        if (source instanceof ParallelFlux) {\n+            // TODO(minwoox) Support ParallelFlux after\n+            //               https://github.com/reactor/reactor-core/issues/2328 is addressed.\n+            return source;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c18de87d3718e1f36aa3122ad1d34aa3f53b681"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkyNzA4MQ==", "bodyText": "Added. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2999#discussion_r471927081", "createdAt": "2020-08-18T05:42:30Z", "author": {"login": "minwoox"}, "path": "reactor3/src/main/java/com/linecorp/armeria/common/reactor3/RequestContextHooks.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.reactor3;\n+\n+import java.util.function.Consumer;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.ContextHolder;\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.RequestContextStorage;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Disposable;\n+import reactor.core.Scannable;\n+import reactor.core.Scannable.Attr;\n+import reactor.core.publisher.ConnectableFlux;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Hooks;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.ParallelFlux;\n+import reactor.util.context.Context;\n+\n+/**\n+ * Utility class to keep {@link RequestContext} during\n+ * <a href=\"https://github.com/reactor/reactor-core\">Reactor</a> operations.\n+ */\n+public final class RequestContextHooks {\n+\n+    private static final String ON_EACH_OPERATOR_HOOK_KEY =\n+            RequestContextHooks.class.getName() + \"#ON_EACH_OPERATOR_HOOK_KEY\";\n+\n+    private static final String ON_LAST_OPERATOR_HOOK_KEY =\n+            RequestContextHooks.class.getName() + \"#ON_LAST_OPERATOR_HOOK_KEY\";\n+\n+    private static boolean enabled;\n+\n+    /**\n+     * Enables {@link RequestContext} during Reactor operations.\n+     * The reactor {@link Publisher}s such as {@link Mono} and {@link Flux} will have the\n+     * {@link RequestContext} which is in the {@link RequestContextStorage} when the {@link Publisher}s\n+     * are created. Then, the {@link RequestContext} is propagated during the\n+     * operations so that you can get the context using {@link RequestContext#current()}.\n+     *\n+     * <p>However, please note that {@link Mono#doOnCancel(Runnable)}, {@link Mono#doFinally(Consumer)},\n+     * {@link Flux#doOnCancel(Runnable)} and {@link Flux#doFinally(Consumer)} will not propagate the context.\n+     *\n+     * <p>Also, note that this method does not have any relevance to {@link Context} API.\n+     */\n+    public static synchronized void enable() {\n+        if (enabled) {\n+            return;\n+        }\n+        Hooks.onEachOperator(ON_EACH_OPERATOR_HOOK_KEY, source -> {\n+            if (source instanceof ContextHolder) {\n+                return source;\n+            }\n+\n+            if (source instanceof Scannable) {\n+                final Object parent = ((Scannable) source).scanUnsafe(Attr.PARENT);\n+                if (parent instanceof ContextHolder) {\n+                    return makeContextAware(source, ((ContextHolder) parent).context());\n+                }\n+            }\n+            return RequestContext.mapCurrent(requestContext -> makeContextAware(source, requestContext),\n+                                             () -> source);\n+        });\n+\n+        Hooks.onLastOperator(ON_LAST_OPERATOR_HOOK_KEY, source -> {\n+            if (source instanceof ContextHolder) {\n+                return source;\n+            }\n+\n+            if (source instanceof Scannable) {\n+                final Object parent = ((Scannable) source).scanUnsafe(Attr.PARENT);\n+                if (parent instanceof ContextHolder) {\n+                    return makeContextAware(source, ((ContextHolder) parent).context());\n+                }\n+            }\n+            return source;\n+        });\n+\n+        enabled = true;\n+    }\n+\n+    /**\n+     * Disables {@link RequestContext} during Reactor operations.\n+     */\n+    public static synchronized void disable() {\n+        if (!enabled) {\n+            return;\n+        }\n+        Hooks.resetOnEachOperator(ON_EACH_OPERATOR_HOOK_KEY);\n+        Hooks.resetOnLastOperator(ON_LAST_OPERATOR_HOOK_KEY);\n+        enabled = false;\n+    }\n+\n+    private static Publisher<Object> makeContextAware(Publisher<Object> source, RequestContext ctx) {\n+        if (source instanceof Mono) {\n+            return new ContextAwareMono((Mono<Object>) source, ctx);\n+        }\n+        if (source instanceof ConnectableFlux) {\n+            return new ContextAwareConnectableFlux((ConnectableFlux<Object>) source, ctx);\n+        }\n+        if (source instanceof ParallelFlux) {\n+            // TODO(minwoox) Support ParallelFlux after\n+            //               https://github.com/reactor/reactor-core/issues/2328 is addressed.\n+            return source;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwODM2OA=="}, "originalCommit": {"oid": "8c18de87d3718e1f36aa3122ad1d34aa3f53b681"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDEzODc0OnYy", "diffSide": "RIGHT", "path": "reactor3/src/main/java/com/linecorp/armeria/common/reactor3/RequestContextHooks.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNzoyNzoyNlrOHCGybQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwODo0Nzo0M1rOHCJx4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk3MDQxMw==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static class ContextAwareFlux extends Flux<Object> implements ContextHolder {\n          \n          \n            \n                private static final class ContextAwareFlux extends Flux<Object> implements ContextHolder {", "url": "https://github.com/line/armeria/pull/2999#discussion_r471970413", "createdAt": "2020-08-18T07:27:26Z", "author": {"login": "ikhoon"}, "path": "reactor3/src/main/java/com/linecorp/armeria/common/reactor3/RequestContextHooks.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.reactor3;\n+\n+import java.util.function.Consumer;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.common.ContextHolder;\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.RequestContextStorage;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Disposable;\n+import reactor.core.Scannable;\n+import reactor.core.Scannable.Attr;\n+import reactor.core.publisher.ConnectableFlux;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Hooks;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.ParallelFlux;\n+import reactor.util.context.Context;\n+\n+/**\n+ * Utility class to keep {@link RequestContext} during\n+ * <a href=\"https://github.com/reactor/reactor-core\">Reactor</a> operations.\n+ */\n+public final class RequestContextHooks {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(RequestContextHooks.class);\n+\n+    private static final String ON_EACH_OPERATOR_HOOK_KEY =\n+            RequestContextHooks.class.getName() + \"#ON_EACH_OPERATOR_HOOK_KEY\";\n+\n+    private static final String ON_LAST_OPERATOR_HOOK_KEY =\n+            RequestContextHooks.class.getName() + \"#ON_LAST_OPERATOR_HOOK_KEY\";\n+\n+    private static boolean warnedParallelFluxUnsupported;\n+\n+    private static boolean enabled;\n+\n+    /**\n+     * Enables {@link RequestContext} during Reactor operations.\n+     * The reactor {@link Publisher}s such as {@link Mono} and {@link Flux} will have the\n+     * {@link RequestContext} which is in the {@link RequestContextStorage} when the {@link Publisher}s\n+     * are created. Then, the {@link RequestContext} is propagated during the\n+     * operations so that you can get the context using {@link RequestContext#current()}.\n+     *\n+     * <p>However, please note that {@link Mono#doOnCancel(Runnable)}, {@link Mono#doFinally(Consumer)},\n+     * {@link Flux#doOnCancel(Runnable)} and {@link Flux#doFinally(Consumer)} will not propagate the context.\n+     *\n+     * <p>Also, note that this method does not have any relevance to Reactor's own {@link Context} API.\n+     */\n+    public static synchronized void enable() {\n+        if (enabled) {\n+            return;\n+        }\n+        Hooks.onEachOperator(ON_EACH_OPERATOR_HOOK_KEY, source -> {\n+            if (source instanceof ContextHolder) {\n+                return source;\n+            }\n+\n+            if (source instanceof Scannable) {\n+                final Object parent = ((Scannable) source).scanUnsafe(Attr.PARENT);\n+                if (parent instanceof ContextHolder) {\n+                    return makeContextAware(source, ((ContextHolder) parent).context());\n+                }\n+            }\n+            return RequestContext.mapCurrent(requestContext -> makeContextAware(source, requestContext),\n+                                             () -> source);\n+        });\n+\n+        Hooks.onLastOperator(ON_LAST_OPERATOR_HOOK_KEY, source -> {\n+            if (source instanceof ContextHolder) {\n+                return source;\n+            }\n+\n+            if (source instanceof Scannable) {\n+                final Object parent = ((Scannable) source).scanUnsafe(Attr.PARENT);\n+                if (parent instanceof ContextHolder) {\n+                    return makeContextAware(source, ((ContextHolder) parent).context());\n+                }\n+            }\n+            return source;\n+        });\n+\n+        enabled = true;\n+    }\n+\n+    /**\n+     * Disables {@link RequestContext} during Reactor operations.\n+     */\n+    public static synchronized void disable() {\n+        if (!enabled) {\n+            return;\n+        }\n+        Hooks.resetOnEachOperator(ON_EACH_OPERATOR_HOOK_KEY);\n+        Hooks.resetOnLastOperator(ON_LAST_OPERATOR_HOOK_KEY);\n+        enabled = false;\n+    }\n+\n+    private static Publisher<Object> makeContextAware(Publisher<Object> source, RequestContext ctx) {\n+        if (source instanceof Mono) {\n+            return new ContextAwareMono((Mono<Object>) source, ctx);\n+        }\n+        if (source instanceof ConnectableFlux) {\n+            return new ContextAwareConnectableFlux((ConnectableFlux<Object>) source, ctx);\n+        }\n+        if (source instanceof ParallelFlux) {\n+            // TODO(minwoox) Support ParallelFlux after\n+            //               https://github.com/reactor/reactor-core/issues/2328 is addressed.\n+            if (!warnedParallelFluxUnsupported) {\n+                warnedParallelFluxUnsupported = true;\n+                logger.warn(\"Hooks for {} are not supported yet.\", ParallelFlux.class.getSimpleName());\n+            }\n+            return source;\n+        }\n+        if (source instanceof Flux) {\n+            return new ContextAwareFlux((Flux<Object>) source, ctx);\n+        }\n+        return source;\n+    }\n+\n+    private RequestContextHooks() {}\n+\n+    private static class ContextAwareMono extends Mono<Object> implements ContextHolder {\n+\n+        private final Mono<Object> source;\n+        private final RequestContext ctx;\n+\n+        ContextAwareMono(Mono<Object> source, RequestContext ctx) {\n+            this.source = source;\n+            this.ctx = ctx;\n+        }\n+\n+        @Override\n+        public RequestContext context() {\n+            return ctx;\n+        }\n+\n+        @Override\n+        public void subscribe(CoreSubscriber<? super Object> subscriber) {\n+            try (SafeCloseable ignored = ctx.push()) {\n+                if (subscriber instanceof ContextAwareCoreSubscriber) {\n+                    source.subscribe(subscriber);\n+                } else {\n+                    source.subscribe(new ContextAwareCoreSubscriber(subscriber, ctx));\n+                }\n+            }\n+        }\n+    }\n+\n+    private static class ContextAwareFlux extends Flux<Object> implements ContextHolder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5852f1cb70547d4559c14d4279e10545923a5cf3"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAxOTQyNQ==", "bodyText": "Fixed. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2999#discussion_r472019425", "createdAt": "2020-08-18T08:47:43Z", "author": {"login": "minwoox"}, "path": "reactor3/src/main/java/com/linecorp/armeria/common/reactor3/RequestContextHooks.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.reactor3;\n+\n+import java.util.function.Consumer;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscription;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.common.ContextHolder;\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.RequestContextStorage;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Disposable;\n+import reactor.core.Scannable;\n+import reactor.core.Scannable.Attr;\n+import reactor.core.publisher.ConnectableFlux;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Hooks;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.ParallelFlux;\n+import reactor.util.context.Context;\n+\n+/**\n+ * Utility class to keep {@link RequestContext} during\n+ * <a href=\"https://github.com/reactor/reactor-core\">Reactor</a> operations.\n+ */\n+public final class RequestContextHooks {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(RequestContextHooks.class);\n+\n+    private static final String ON_EACH_OPERATOR_HOOK_KEY =\n+            RequestContextHooks.class.getName() + \"#ON_EACH_OPERATOR_HOOK_KEY\";\n+\n+    private static final String ON_LAST_OPERATOR_HOOK_KEY =\n+            RequestContextHooks.class.getName() + \"#ON_LAST_OPERATOR_HOOK_KEY\";\n+\n+    private static boolean warnedParallelFluxUnsupported;\n+\n+    private static boolean enabled;\n+\n+    /**\n+     * Enables {@link RequestContext} during Reactor operations.\n+     * The reactor {@link Publisher}s such as {@link Mono} and {@link Flux} will have the\n+     * {@link RequestContext} which is in the {@link RequestContextStorage} when the {@link Publisher}s\n+     * are created. Then, the {@link RequestContext} is propagated during the\n+     * operations so that you can get the context using {@link RequestContext#current()}.\n+     *\n+     * <p>However, please note that {@link Mono#doOnCancel(Runnable)}, {@link Mono#doFinally(Consumer)},\n+     * {@link Flux#doOnCancel(Runnable)} and {@link Flux#doFinally(Consumer)} will not propagate the context.\n+     *\n+     * <p>Also, note that this method does not have any relevance to Reactor's own {@link Context} API.\n+     */\n+    public static synchronized void enable() {\n+        if (enabled) {\n+            return;\n+        }\n+        Hooks.onEachOperator(ON_EACH_OPERATOR_HOOK_KEY, source -> {\n+            if (source instanceof ContextHolder) {\n+                return source;\n+            }\n+\n+            if (source instanceof Scannable) {\n+                final Object parent = ((Scannable) source).scanUnsafe(Attr.PARENT);\n+                if (parent instanceof ContextHolder) {\n+                    return makeContextAware(source, ((ContextHolder) parent).context());\n+                }\n+            }\n+            return RequestContext.mapCurrent(requestContext -> makeContextAware(source, requestContext),\n+                                             () -> source);\n+        });\n+\n+        Hooks.onLastOperator(ON_LAST_OPERATOR_HOOK_KEY, source -> {\n+            if (source instanceof ContextHolder) {\n+                return source;\n+            }\n+\n+            if (source instanceof Scannable) {\n+                final Object parent = ((Scannable) source).scanUnsafe(Attr.PARENT);\n+                if (parent instanceof ContextHolder) {\n+                    return makeContextAware(source, ((ContextHolder) parent).context());\n+                }\n+            }\n+            return source;\n+        });\n+\n+        enabled = true;\n+    }\n+\n+    /**\n+     * Disables {@link RequestContext} during Reactor operations.\n+     */\n+    public static synchronized void disable() {\n+        if (!enabled) {\n+            return;\n+        }\n+        Hooks.resetOnEachOperator(ON_EACH_OPERATOR_HOOK_KEY);\n+        Hooks.resetOnLastOperator(ON_LAST_OPERATOR_HOOK_KEY);\n+        enabled = false;\n+    }\n+\n+    private static Publisher<Object> makeContextAware(Publisher<Object> source, RequestContext ctx) {\n+        if (source instanceof Mono) {\n+            return new ContextAwareMono((Mono<Object>) source, ctx);\n+        }\n+        if (source instanceof ConnectableFlux) {\n+            return new ContextAwareConnectableFlux((ConnectableFlux<Object>) source, ctx);\n+        }\n+        if (source instanceof ParallelFlux) {\n+            // TODO(minwoox) Support ParallelFlux after\n+            //               https://github.com/reactor/reactor-core/issues/2328 is addressed.\n+            if (!warnedParallelFluxUnsupported) {\n+                warnedParallelFluxUnsupported = true;\n+                logger.warn(\"Hooks for {} are not supported yet.\", ParallelFlux.class.getSimpleName());\n+            }\n+            return source;\n+        }\n+        if (source instanceof Flux) {\n+            return new ContextAwareFlux((Flux<Object>) source, ctx);\n+        }\n+        return source;\n+    }\n+\n+    private RequestContextHooks() {}\n+\n+    private static class ContextAwareMono extends Mono<Object> implements ContextHolder {\n+\n+        private final Mono<Object> source;\n+        private final RequestContext ctx;\n+\n+        ContextAwareMono(Mono<Object> source, RequestContext ctx) {\n+            this.source = source;\n+            this.ctx = ctx;\n+        }\n+\n+        @Override\n+        public RequestContext context() {\n+            return ctx;\n+        }\n+\n+        @Override\n+        public void subscribe(CoreSubscriber<? super Object> subscriber) {\n+            try (SafeCloseable ignored = ctx.push()) {\n+                if (subscriber instanceof ContextAwareCoreSubscriber) {\n+                    source.subscribe(subscriber);\n+                } else {\n+                    source.subscribe(new ContextAwareCoreSubscriber(subscriber, ctx));\n+                }\n+            }\n+        }\n+    }\n+\n+    private static class ContextAwareFlux extends Flux<Object> implements ContextHolder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk3MDQxMw=="}, "originalCommit": {"oid": "5852f1cb70547d4559c14d4279e10545923a5cf3"}, "originalPosition": 170}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2232, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}