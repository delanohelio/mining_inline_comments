{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5MTAzMDEz", "number": 2592, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOTo0NDo0OFrODoQRKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOTo0Nzo1N1rODoQVpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTM2MTY4OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/common/util/CountingSamplerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOTo0NDo0OFrOF2sM7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOTo0NjoxMFrOF2sQDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg5MTYyOA==", "bodyText": "Isn't this 1?", "url": "https://github.com/line/armeria/pull/2592#discussion_r392891628", "createdAt": "2020-03-16T09:44:48Z", "author": {"login": "minwoox"}, "path": "core/src/test/java/com/linecorp/armeria/common/util/CountingSamplerTest.java", "diffHunk": "@@ -36,22 +36,29 @@\n \n public class CountingSamplerTest {\n     @Test\n-    public void testSamplingRateMinimumLimit() throws Exception {\n-        assertThatThrownBy(() -> CountingSampler.create(-1.99)).isInstanceOf(IllegalArgumentException.class);\n+    public void testSamplingRateMinimumLimit() {\n+        assertThatThrownBy(() -> CountingSampler.create(-1.99f)).isInstanceOf(IllegalArgumentException.class);\n     }\n \n     @Test\n-    public void testSamplingRateMaximumLimit() throws Exception {\n-        assertThatThrownBy(() -> CountingSampler.create(1.01)).isInstanceOf(IllegalArgumentException.class);\n+    public void testSamplingRateMaximumLimit() {\n+        assertThatThrownBy(() -> CountingSampler.create(1.01f)).isInstanceOf(IllegalArgumentException.class);\n     }\n \n     @Test\n-    public void testNeverSampledSampler() throws Exception {\n-        assertThat(CountingSampler.create(0.0)).isSameAs(Sampler.never());\n+    public void testSamplingRatePercentageRounding() {\n+        assertThat(CountingSampler.create(0.01f)).isInstanceOfSatisfying(CountingSampler.class, sampler -> {\n+            assertThat(sampler.sampleDecisions.cardinality()).isEqualTo(10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1228cadb5131a8f28dcb4f5e2e675890ce622fcb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg5MjQzMQ==", "bodyText": "Just noticed it, thanks. Copied from SamplerTest too quickly \ud83d\ude05", "url": "https://github.com/line/armeria/pull/2592#discussion_r392892431", "createdAt": "2020-03-16T09:46:10Z", "author": {"login": "KarboniteKream"}, "path": "core/src/test/java/com/linecorp/armeria/common/util/CountingSamplerTest.java", "diffHunk": "@@ -36,22 +36,29 @@\n \n public class CountingSamplerTest {\n     @Test\n-    public void testSamplingRateMinimumLimit() throws Exception {\n-        assertThatThrownBy(() -> CountingSampler.create(-1.99)).isInstanceOf(IllegalArgumentException.class);\n+    public void testSamplingRateMinimumLimit() {\n+        assertThatThrownBy(() -> CountingSampler.create(-1.99f)).isInstanceOf(IllegalArgumentException.class);\n     }\n \n     @Test\n-    public void testSamplingRateMaximumLimit() throws Exception {\n-        assertThatThrownBy(() -> CountingSampler.create(1.01)).isInstanceOf(IllegalArgumentException.class);\n+    public void testSamplingRateMaximumLimit() {\n+        assertThatThrownBy(() -> CountingSampler.create(1.01f)).isInstanceOf(IllegalArgumentException.class);\n     }\n \n     @Test\n-    public void testNeverSampledSampler() throws Exception {\n-        assertThat(CountingSampler.create(0.0)).isSameAs(Sampler.never());\n+    public void testSamplingRatePercentageRounding() {\n+        assertThat(CountingSampler.create(0.01f)).isInstanceOfSatisfying(CountingSampler.class, sampler -> {\n+            assertThat(sampler.sampleDecisions.cardinality()).isEqualTo(10);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg5MTYyOA=="}, "originalCommit": {"oid": "1228cadb5131a8f28dcb4f5e2e675890ce622fcb"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTM3MzE3OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/linecorp/armeria/common/util/CountingSamplerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOTo0Nzo1N1rOF2sTyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOTo0Nzo1N1rOF2sTyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg5MzM4NA==", "bodyText": "nit: you could just do isOne().", "url": "https://github.com/line/armeria/pull/2592#discussion_r392893384", "createdAt": "2020-03-16T09:47:57Z", "author": {"login": "minwoox"}, "path": "core/src/test/java/com/linecorp/armeria/common/util/CountingSamplerTest.java", "diffHunk": "@@ -36,22 +36,29 @@\n \n public class CountingSamplerTest {\n     @Test\n-    public void testSamplingRateMinimumLimit() throws Exception {\n-        assertThatThrownBy(() -> CountingSampler.create(-1.99)).isInstanceOf(IllegalArgumentException.class);\n+    public void testSamplingRateMinimumLimit() {\n+        assertThatThrownBy(() -> CountingSampler.create(-1.99f)).isInstanceOf(IllegalArgumentException.class);\n     }\n \n     @Test\n-    public void testSamplingRateMaximumLimit() throws Exception {\n-        assertThatThrownBy(() -> CountingSampler.create(1.01)).isInstanceOf(IllegalArgumentException.class);\n+    public void testSamplingRateMaximumLimit() {\n+        assertThatThrownBy(() -> CountingSampler.create(1.01f)).isInstanceOf(IllegalArgumentException.class);\n     }\n \n     @Test\n-    public void testNeverSampledSampler() throws Exception {\n-        assertThat(CountingSampler.create(0.0)).isSameAs(Sampler.never());\n+    public void testSamplingRatePercentageRounding() {\n+        assertThat(CountingSampler.create(0.01f)).isInstanceOfSatisfying(CountingSampler.class, sampler -> {\n+            assertThat(sampler.sampleDecisions.cardinality()).isEqualTo(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "956ddb8d33c94cc826be18d7f2f263df477deec4"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2773, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}