{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwOTM0MjQy", "number": 3105, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwODozMjowOVrOEsQ0eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDo1ODowOFrOEs-46A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODQ4Mzc4OnYy", "diffSide": "RIGHT", "path": "logback/src/main/java/com/linecorp/armeria/common/logback/UnionMap.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwODozMjowOVrOHfeT-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwODozMjowOVrOHfeT-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc2NDUzOQ==", "bodyText": "We aren't using Guava in the other project but Sets.union should work fine here.", "url": "https://github.com/line/armeria/pull/3105#discussion_r502764539", "createdAt": "2020-10-10T08:32:09Z", "author": {"login": "anuraaga"}, "path": "logback/src/main/java/com/linecorp/armeria/common/logback/UnionMap.java", "diffHunk": "@@ -108,6 +110,99 @@ public void clear() {\n             return entrySet;\n         }\n \n-        return entrySet = Collections.unmodifiableSet(Sets.union(first.entrySet(), second.entrySet()));\n+        // Check for dupes first to reduce allocations on the vastly more common case where there aren't any.\n+        boolean secondHasDupes = false;\n+        for (Entry<K, V> entry : second.entrySet()) {\n+            if (first.containsKey(entry.getKey())) {\n+                secondHasDupes = true;\n+                break;\n+            }\n+        }\n+\n+        final Set<Entry<K, V>> filteredSecond;\n+        if (!secondHasDupes) {\n+            filteredSecond = second.entrySet();\n+        } else {\n+            filteredSecond = new LinkedHashSet<>();\n+            for (Entry<K, V> entry : second.entrySet()) {\n+                if (!first.containsKey(entry.getKey())) {\n+                    filteredSecond.add(entry);\n+                }\n+            }\n+        }\n+        return entrySet =\n+                Collections.unmodifiableSet(new ConcatenatedSet<>(first.entrySet(), filteredSecond));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1393a36700711e9ea9307780f069d14c5f057ef4"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDUwMDgyOnYy", "diffSide": "RIGHT", "path": "logback/src/main/java/com/linecorp/armeria/common/logback/UnionMap.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMTo1NTozNVrOHgStIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMTo1NTozNVrOHgStIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYyMjk0Ng==", "bodyText": "nit: Could introduce second.entrySet() as a local variable and reuse?", "url": "https://github.com/line/armeria/pull/3105#discussion_r503622946", "createdAt": "2020-10-13T01:55:35Z", "author": {"login": "ikhoon"}, "path": "logback/src/main/java/com/linecorp/armeria/common/logback/UnionMap.java", "diffHunk": "@@ -108,6 +109,26 @@ public void clear() {\n             return entrySet;\n         }\n \n-        return entrySet = Collections.unmodifiableSet(Sets.union(first.entrySet(), second.entrySet()));\n+        // Check for dupes first to reduce allocations on the vastly more common case where there aren't any.\n+        boolean secondHasDupes = false;\n+        for (Entry<K, V> entry : second.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2416694fd807caf8b1fdd6ae86059cee3c0c8a4f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTAyMDcxOnYy", "diffSide": "RIGHT", "path": "logback/src/main/java/com/linecorp/armeria/common/logback/UnionMap.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjozOToyNVrOHgXbKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOToxMjozNVrOHgdGxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcwMDI2NA==", "bodyText": "IIUC, Sets.union() returns an immutable view, so there`s no need to wrap it again. It also handles the duplicate entries already, so maybe we can simplify most of this pull request?", "url": "https://github.com/line/armeria/pull/3105#discussion_r503700264", "createdAt": "2020-10-13T06:39:25Z", "author": {"login": "trustin"}, "path": "logback/src/main/java/com/linecorp/armeria/common/logback/UnionMap.java", "diffHunk": "@@ -108,6 +109,26 @@ public void clear() {\n             return entrySet;\n         }\n \n-        return entrySet = Collections.unmodifiableSet(Sets.union(first.entrySet(), second.entrySet()));\n+        // Check for dupes first to reduce allocations on the vastly more common case where there aren't any.\n+        boolean secondHasDupes = false;\n+        for (Entry<K, V> entry : second.entrySet()) {\n+            if (first.containsKey(entry.getKey())) {\n+                secondHasDupes = true;\n+                break;\n+            }\n+        }\n+\n+        final Set<Entry<K, V>> filteredSecond;\n+        if (!secondHasDupes) {\n+            filteredSecond = second.entrySet();\n+        } else {\n+            filteredSecond = new LinkedHashSet<>();\n+            for (Entry<K, V> entry : second.entrySet()) {\n+                if (!first.containsKey(entry.getKey())) {\n+                    filteredSecond.add(entry);\n+                }\n+            }\n+        }\n+        return entrySet = Collections.unmodifiableSet(Sets.union(first.entrySet(), filteredSecond));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2416694fd807caf8b1fdd6ae86059cee3c0c8a4f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxNzU0MQ==", "bodyText": "It handles duplicates, but the items of the set are Entry, not the key, so it's not deduping. Hence the bug in the first place :)", "url": "https://github.com/line/armeria/pull/3105#discussion_r503717541", "createdAt": "2020-10-13T07:15:08Z", "author": {"login": "anuraaga"}, "path": "logback/src/main/java/com/linecorp/armeria/common/logback/UnionMap.java", "diffHunk": "@@ -108,6 +109,26 @@ public void clear() {\n             return entrySet;\n         }\n \n-        return entrySet = Collections.unmodifiableSet(Sets.union(first.entrySet(), second.entrySet()));\n+        // Check for dupes first to reduce allocations on the vastly more common case where there aren't any.\n+        boolean secondHasDupes = false;\n+        for (Entry<K, V> entry : second.entrySet()) {\n+            if (first.containsKey(entry.getKey())) {\n+                secondHasDupes = true;\n+                break;\n+            }\n+        }\n+\n+        final Set<Entry<K, V>> filteredSecond;\n+        if (!secondHasDupes) {\n+            filteredSecond = second.entrySet();\n+        } else {\n+            filteredSecond = new LinkedHashSet<>();\n+            for (Entry<K, V> entry : second.entrySet()) {\n+                if (!first.containsKey(entry.getKey())) {\n+                    filteredSecond.add(entry);\n+                }\n+            }\n+        }\n+        return entrySet = Collections.unmodifiableSet(Sets.union(first.entrySet(), filteredSecond));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcwMDI2NA=="}, "originalCommit": {"oid": "2416694fd807caf8b1fdd6ae86059cee3c0c8a4f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2NTI0MQ==", "bodyText": "Ah \ud83e\udd23", "url": "https://github.com/line/armeria/pull/3105#discussion_r503765241", "createdAt": "2020-10-13T08:30:44Z", "author": {"login": "trustin"}, "path": "logback/src/main/java/com/linecorp/armeria/common/logback/UnionMap.java", "diffHunk": "@@ -108,6 +109,26 @@ public void clear() {\n             return entrySet;\n         }\n \n-        return entrySet = Collections.unmodifiableSet(Sets.union(first.entrySet(), second.entrySet()));\n+        // Check for dupes first to reduce allocations on the vastly more common case where there aren't any.\n+        boolean secondHasDupes = false;\n+        for (Entry<K, V> entry : second.entrySet()) {\n+            if (first.containsKey(entry.getKey())) {\n+                secondHasDupes = true;\n+                break;\n+            }\n+        }\n+\n+        final Set<Entry<K, V>> filteredSecond;\n+        if (!secondHasDupes) {\n+            filteredSecond = second.entrySet();\n+        } else {\n+            filteredSecond = new LinkedHashSet<>();\n+            for (Entry<K, V> entry : second.entrySet()) {\n+                if (!first.containsKey(entry.getKey())) {\n+                    filteredSecond.add(entry);\n+                }\n+            }\n+        }\n+        return entrySet = Collections.unmodifiableSet(Sets.union(first.entrySet(), filteredSecond));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcwMDI2NA=="}, "originalCommit": {"oid": "2416694fd807caf8b1fdd6ae86059cee3c0c8a4f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2NjEzMQ==", "bodyText": "If that's the case, then maybe ConcatenatedSet is better, especially in terms of iteration performance?", "url": "https://github.com/line/armeria/pull/3105#discussion_r503766131", "createdAt": "2020-10-13T08:32:08Z", "author": {"login": "trustin"}, "path": "logback/src/main/java/com/linecorp/armeria/common/logback/UnionMap.java", "diffHunk": "@@ -108,6 +109,26 @@ public void clear() {\n             return entrySet;\n         }\n \n-        return entrySet = Collections.unmodifiableSet(Sets.union(first.entrySet(), second.entrySet()));\n+        // Check for dupes first to reduce allocations on the vastly more common case where there aren't any.\n+        boolean secondHasDupes = false;\n+        for (Entry<K, V> entry : second.entrySet()) {\n+            if (first.containsKey(entry.getKey())) {\n+                secondHasDupes = true;\n+                break;\n+            }\n+        }\n+\n+        final Set<Entry<K, V>> filteredSecond;\n+        if (!secondHasDupes) {\n+            filteredSecond = second.entrySet();\n+        } else {\n+            filteredSecond = new LinkedHashSet<>();\n+            for (Entry<K, V> entry : second.entrySet()) {\n+                if (!first.containsKey(entry.getKey())) {\n+                    filteredSecond.add(entry);\n+                }\n+            }\n+        }\n+        return entrySet = Collections.unmodifiableSet(Sets.union(first.entrySet(), filteredSecond));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcwMDI2NA=="}, "originalCommit": {"oid": "2416694fd807caf8b1fdd6ae86059cee3c0c8a4f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc5MzM1MQ==", "bodyText": "Ah yeah that's true, I forgot I removed the dedupe logic from it assuming the caller deduped to get some performance back. @kojilin Sorry for the bad pointer, it's probably good to avoid Sets.union here.", "url": "https://github.com/line/armeria/pull/3105#discussion_r503793351", "createdAt": "2020-10-13T09:12:35Z", "author": {"login": "anuraaga"}, "path": "logback/src/main/java/com/linecorp/armeria/common/logback/UnionMap.java", "diffHunk": "@@ -108,6 +109,26 @@ public void clear() {\n             return entrySet;\n         }\n \n-        return entrySet = Collections.unmodifiableSet(Sets.union(first.entrySet(), second.entrySet()));\n+        // Check for dupes first to reduce allocations on the vastly more common case where there aren't any.\n+        boolean secondHasDupes = false;\n+        for (Entry<K, V> entry : second.entrySet()) {\n+            if (first.containsKey(entry.getKey())) {\n+                secondHasDupes = true;\n+                break;\n+            }\n+        }\n+\n+        final Set<Entry<K, V>> filteredSecond;\n+        if (!secondHasDupes) {\n+            filteredSecond = second.entrySet();\n+        } else {\n+            filteredSecond = new LinkedHashSet<>();\n+            for (Entry<K, V> entry : second.entrySet()) {\n+                if (!first.containsKey(entry.getKey())) {\n+                    filteredSecond.add(entry);\n+                }\n+            }\n+        }\n+        return entrySet = Collections.unmodifiableSet(Sets.union(first.entrySet(), filteredSecond));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcwMDI2NA=="}, "originalCommit": {"oid": "2416694fd807caf8b1fdd6ae86059cee3c0c8a4f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjAzMTc2OnYy", "diffSide": "RIGHT", "path": "logback/src/main/java/com/linecorp/armeria/common/logback/UnionMap.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDo1ODowOFrOHghDMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDo1ODowOFrOHghDMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg1Nzk3MQ==", "bodyText": "This is the last comment I believe: Do we need to wrap ConcatenatedSet with UnmodifiableSet? It looks unmodifiable already.", "url": "https://github.com/line/armeria/pull/3105#discussion_r503857971", "createdAt": "2020-10-13T10:58:08Z", "author": {"login": "trustin"}, "path": "logback/src/main/java/com/linecorp/armeria/common/logback/UnionMap.java", "diffHunk": "@@ -108,6 +110,99 @@ public void clear() {\n             return entrySet;\n         }\n \n-        return entrySet = Collections.unmodifiableSet(Sets.union(first.entrySet(), second.entrySet()));\n+        // Check for dupes first to reduce allocations on the vastly more common case where there aren't any.\n+        boolean secondHasDupes = false;\n+        final Set<Entry<K, V>> secondEntries = second.entrySet();\n+        for (Entry<K, V> entry : secondEntries) {\n+            if (first.containsKey(entry.getKey())) {\n+                secondHasDupes = true;\n+                break;\n+            }\n+        }\n+\n+        final Set<Entry<K, V>> filteredSecond;\n+        if (!secondHasDupes) {\n+            filteredSecond = secondEntries;\n+        } else {\n+            filteredSecond = new LinkedHashSet<>();\n+            for (Entry<K, V> entry : secondEntries) {\n+                if (!first.containsKey(entry.getKey())) {\n+                    filteredSecond.add(entry);\n+                }\n+            }\n+        }\n+        return entrySet = Collections.unmodifiableSet(new ConcatenatedSet<>(first.entrySet(), filteredSecond));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "336d843dad02e6906d4b084dc96345303121536f"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1932, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}