{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNTQ4Njc5", "number": 2742, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNTo0NTo1MVrOD_RGOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNTo1Mjo0MFrOD_RKGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjY3MDAwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/metric/MoreMeters.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNTo0NTo1MVrOGZ1SWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMDowNDoxOFrOGaLS7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc0MDYzNQ==", "bodyText": "nit: I'm not strong here, but could be inlined?\nprivate static final boolean MICROMETER_1_5 = !ReflectionUtils.getMethods(Builder.class, method ->\n        method != null && \"serviceLevelObjectives\".equals(method.getName())).isEmpty();", "url": "https://github.com/line/armeria/pull/2742#discussion_r429740635", "createdAt": "2020-05-25T05:45:51Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/metric/MoreMeters.java", "diffHunk": "@@ -38,8 +45,22 @@\n  */\n public final class MoreMeters {\n \n+    private static final Logger logger = LoggerFactory.getLogger(MoreMeters.class);\n+\n     private static final double[] PERCENTILES = { 0, 0.5, 0.75, 0.9, 0.95, 0.98, 0.99, 0.999, 1.0 };\n \n+    private static final boolean MICROMETER_1_5;\n+\n+    static {\n+        final Set<Method> methods = ReflectionUtils.getMethods(Builder.class, method ->\n+                method != null && \"serviceLevelObjectives\".equals(method.getName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "587b278205cec92bf1c762f14abb83d37da27554"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEwMTIzMQ==", "bodyText": "Fixed. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2742#discussion_r430101231", "createdAt": "2020-05-26T00:04:18Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/metric/MoreMeters.java", "diffHunk": "@@ -38,8 +45,22 @@\n  */\n public final class MoreMeters {\n \n+    private static final Logger logger = LoggerFactory.getLogger(MoreMeters.class);\n+\n     private static final double[] PERCENTILES = { 0, 0.5, 0.75, 0.9, 0.95, 0.98, 0.99, 0.999, 1.0 };\n \n+    private static final boolean MICROMETER_1_5;\n+\n+    static {\n+        final Set<Method> methods = ReflectionUtils.getMethods(Builder.class, method ->\n+                method != null && \"serviceLevelObjectives\".equals(method.getName()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc0MDYzNQ=="}, "originalCommit": {"oid": "587b278205cec92bf1c762f14abb83d37da27554"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjY3MTAyOnYy", "diffSide": "RIGHT", "path": "it/micrometer1.3/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNTo0NjozMVrOGZ1S9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMDowNDo1NVrOGaLTQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc0MDc4OA==", "bodyText": "This test is better than nothing, but I wonder if it's not hard to collect all our **MetricsIntegrationTest for this check.", "url": "https://github.com/line/armeria/pull/2742#discussion_r429740788", "createdAt": "2020-05-25T05:46:31Z", "author": {"login": "anuraaga"}, "path": "it/micrometer1.3/build.gradle", "diffHunk": "@@ -0,0 +1,12 @@\n+dependencies {\n+    [ 'micrometer-core', 'micrometer-registry-prometheus' ].each {\n+        implementation(\"io.micrometer:$it\") {\n+            version {\n+                // Will fail the build if the override doesn't work\n+                strictly '1.3.9'\n+            }\n+        }\n+    }\n+}\n+\n+tasks.compileTestJava.source \"${rootProject.projectDir}/core/src/test/java/com/linecorp/armeria/internal/common/metric/RequestMetricSupportTest.java\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "587b278205cec92bf1c762f14abb83d37da27554"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEwMTMxMg==", "bodyText": "Yeah, it's a good idea to cover them. Added.", "url": "https://github.com/line/armeria/pull/2742#discussion_r430101312", "createdAt": "2020-05-26T00:04:55Z", "author": {"login": "minwoox"}, "path": "it/micrometer1.3/build.gradle", "diffHunk": "@@ -0,0 +1,12 @@\n+dependencies {\n+    [ 'micrometer-core', 'micrometer-registry-prometheus' ].each {\n+        implementation(\"io.micrometer:$it\") {\n+            version {\n+                // Will fail the build if the override doesn't work\n+                strictly '1.3.9'\n+            }\n+        }\n+    }\n+}\n+\n+tasks.compileTestJava.source \"${rootProject.projectDir}/core/src/test/java/com/linecorp/armeria/internal/common/metric/RequestMetricSupportTest.java\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc0MDc4OA=="}, "originalCommit": {"oid": "587b278205cec92bf1c762f14abb83d37da27554"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjY3OTk0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/metric/MoreMeters.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNTo1Mjo0MFrOGZ1YoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMDowNTozM1rOGaLTiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc0MjI0MQ==", "bodyText": "Can you add a TODO with a link to the issue to clean this up?", "url": "https://github.com/line/armeria/pull/2742#discussion_r429742241", "createdAt": "2020-05-25T05:52:40Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/metric/MoreMeters.java", "diffHunk": "@@ -38,8 +45,22 @@\n  */\n public final class MoreMeters {\n \n+    private static final Logger logger = LoggerFactory.getLogger(MoreMeters.class);\n+\n     private static final double[] PERCENTILES = { 0, 0.5, 0.75, 0.9, 0.95, 0.98, 0.99, 0.999, 1.0 };\n \n+    private static final boolean MICROMETER_1_5;\n+\n+    static {\n+        final Set<Method> methods = ReflectionUtils.getMethods(Builder.class, method ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "587b278205cec92bf1c762f14abb83d37da27554"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc0Mjc3Mg==", "bodyText": "I still need this logic because we can set serviceLevelObjectives from 1.5. \ud83e\udd14", "url": "https://github.com/line/armeria/pull/2742#discussion_r429742772", "createdAt": "2020-05-25T05:54:51Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/metric/MoreMeters.java", "diffHunk": "@@ -38,8 +45,22 @@\n  */\n public final class MoreMeters {\n \n+    private static final Logger logger = LoggerFactory.getLogger(MoreMeters.class);\n+\n     private static final double[] PERCENTILES = { 0, 0.5, 0.75, 0.9, 0.95, 0.98, 0.99, 0.999, 1.0 };\n \n+    private static final boolean MICROMETER_1_5;\n+\n+    static {\n+        final Set<Method> methods = ReflectionUtils.getMethods(Builder.class, method ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc0MjI0MQ=="}, "originalCommit": {"oid": "587b278205cec92bf1c762f14abb83d37da27554"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc0NjUzMA==", "bodyText": "Ah guess it makes sense. Wonder if using new micrometer APIs are worth these fragile-looking branches vs just compiling against 1.3.x. For example, I think this sort of branch breaks graalvm.", "url": "https://github.com/line/armeria/pull/2742#discussion_r429746530", "createdAt": "2020-05-25T06:07:27Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/metric/MoreMeters.java", "diffHunk": "@@ -38,8 +45,22 @@\n  */\n public final class MoreMeters {\n \n+    private static final Logger logger = LoggerFactory.getLogger(MoreMeters.class);\n+\n     private static final double[] PERCENTILES = { 0, 0.5, 0.75, 0.9, 0.95, 0.98, 0.99, 0.999, 1.0 };\n \n+    private static final boolean MICROMETER_1_5;\n+\n+    static {\n+        final Set<Method> methods = ReflectionUtils.getMethods(Builder.class, method ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc0MjI0MQ=="}, "originalCommit": {"oid": "587b278205cec92bf1c762f14abb83d37da27554"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1NDI4NQ==", "bodyText": "I think this sort of branch breaks graalvm.\n\nIf it's so, then we should not branch but send a PR to fix this. \ud83d\ude04\nLet me send a one for this.", "url": "https://github.com/line/armeria/pull/2742#discussion_r429754285", "createdAt": "2020-05-25T06:35:24Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/metric/MoreMeters.java", "diffHunk": "@@ -38,8 +45,22 @@\n  */\n public final class MoreMeters {\n \n+    private static final Logger logger = LoggerFactory.getLogger(MoreMeters.class);\n+\n     private static final double[] PERCENTILES = { 0, 0.5, 0.75, 0.9, 0.95, 0.98, 0.99, 0.999, 1.0 };\n \n+    private static final boolean MICROMETER_1_5;\n+\n+    static {\n+        final Set<Method> methods = ReflectionUtils.getMethods(Builder.class, method ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc0MjI0MQ=="}, "originalCommit": {"oid": "587b278205cec92bf1c762f14abb83d37da27554"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc2Mzg0OQ==", "bodyText": "Build.class.getMethod(....); will do the job I guess? No need to use Reflections library.\nI don't think this breaks GraalVM anymore since they have changed the default behavior of static initializer evaluation. Even if they evaluate this block at image build time, I think it's fine because Micrometer will be baked in together, no?", "url": "https://github.com/line/armeria/pull/2742#discussion_r429763849", "createdAt": "2020-05-25T07:02:39Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/metric/MoreMeters.java", "diffHunk": "@@ -38,8 +45,22 @@\n  */\n public final class MoreMeters {\n \n+    private static final Logger logger = LoggerFactory.getLogger(MoreMeters.class);\n+\n     private static final double[] PERCENTILES = { 0, 0.5, 0.75, 0.9, 0.95, 0.98, 0.99, 0.999, 1.0 };\n \n+    private static final boolean MICROMETER_1_5;\n+\n+    static {\n+        final Set<Method> methods = ReflectionUtils.getMethods(Builder.class, method ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc0MjI0MQ=="}, "originalCommit": {"oid": "587b278205cec92bf1c762f14abb83d37da27554"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3Njc1NA==", "bodyText": "Yeah it's probably OK nowadays. Just I don't see such branching on versions in static languages much \ud83d\ude05", "url": "https://github.com/line/armeria/pull/2742#discussion_r429776754", "createdAt": "2020-05-25T07:33:40Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/metric/MoreMeters.java", "diffHunk": "@@ -38,8 +45,22 @@\n  */\n public final class MoreMeters {\n \n+    private static final Logger logger = LoggerFactory.getLogger(MoreMeters.class);\n+\n     private static final double[] PERCENTILES = { 0, 0.5, 0.75, 0.9, 0.95, 0.98, 0.99, 0.999, 1.0 };\n \n+    private static final boolean MICROMETER_1_5;\n+\n+    static {\n+        final Set<Method> methods = ReflectionUtils.getMethods(Builder.class, method ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc0MjI0MQ=="}, "originalCommit": {"oid": "587b278205cec92bf1c762f14abb83d37da27554"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEwMTM4NQ==", "bodyText": "Changed to use getMethod.", "url": "https://github.com/line/armeria/pull/2742#discussion_r430101385", "createdAt": "2020-05-26T00:05:33Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/metric/MoreMeters.java", "diffHunk": "@@ -38,8 +45,22 @@\n  */\n public final class MoreMeters {\n \n+    private static final Logger logger = LoggerFactory.getLogger(MoreMeters.class);\n+\n     private static final double[] PERCENTILES = { 0, 0.5, 0.75, 0.9, 0.95, 0.98, 0.99, 0.999, 1.0 };\n \n+    private static final boolean MICROMETER_1_5;\n+\n+    static {\n+        final Set<Method> methods = ReflectionUtils.getMethods(Builder.class, method ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc0MjI0MQ=="}, "originalCommit": {"oid": "587b278205cec92bf1c762f14abb83d37da27554"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2658, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}