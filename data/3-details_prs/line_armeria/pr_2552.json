{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MDg1MjA0", "number": 2552, "title": "Revamp ZooKeeper{EndpointGroupBuilder, UpdatingListenerBuilder}", "bodyText": "Motivation:\nA CuratorFramework is created internally when building ZooKeeperEndpointGroup and ZooKeeperUpdatingListner\nif a user specifies a ZooKeeper connection string.\nHowever, the ways of customizing CuratorFramework are different between ZooKeeperUpdatingListner and ZooKeeperEndpointGroupBuilder.\nIt will confuse the user who uses both of them.\nModifications:\n\nAdd AbstractCuratorFrameworkBuilder for sharing common\nmethods when configuring CuratorFramework\nRemove ZooKeeperDefaults and merge the values into AbstractCuratorFrameworkBuilder\nMigrate Zookeeper test code to JUnit5\n\nAdd ZooKeeperExtension\nFork TemporaryFolder from CentralDogma\nClean up test code\n\n\nDeprecate ZooKeeperUpdatingListener.nodeValueCodec() in favor of\nZooKeeperUpdatingListener.codec()\n\nResult:\nImprove API consistency", "createdAt": "2020-03-05T06:06:08Z", "url": "https://github.com/line/armeria/pull/2552", "merged": true, "mergeCommit": {"oid": "3ac4fb31aa1325d7647192e16010167f76441237"}, "closed": true, "closedAt": "2020-03-09T09:07:09Z", "author": {"login": "ikhoon"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKlMryAH2gAyMzg0MDg1MjA0OjFlYzg3NGM5ZjQ5N2IzNTU4OGMyN2NiMTQzMGVlYmVmNWM0M2VmYmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcL6LMPAH2gAyMzg0MDg1MjA0OjYzMzExYTJjZmViZjVmZWI2MDg5YjQ5ZWZkNGY5Y2EwOWM5ZmIzNmQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1ec874c9f497b35588c27cb1430eebef5c43efbe", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/1ec874c9f497b35588c27cb1430eebef5c43efbe", "committedDate": "2020-03-05T06:05:40Z", "message": "Revamp ZooKeeper{EndpointGroupBuilder, UpdatingListenerBuilder}\n\nMotivation:\n\nA `CuratorFramework` is created internally when building `ZooKeeperEndpointGroup` and `ZooKeeperUpdatingListner`\nif a user specifies a ZooKeeper connection string.\nWays of customizing `CuratorFramework` are different between `ZooKeeperUpdatingListner` and `ZooKeeperEndpointGroupBuilder`\nIt will confuse the user who uses both of them.\n\nModifications:\n\n- Add `AbstractCuratorFrameworkFactoryBuilder` for sharing common\n  methods when configuring `CuratorFramework`\n- Remove `ZooKeeperDefaults` and merge the configures into AbstractCuratorFrameworkFactoryBuilder\n- Migrate Zookeeper test code to JUnit5\n  - Add `ZooKeeperInstanceExtension`\n  - Fork `TemporaryFolder` from CentralDogma\n  - Clean test code\n- Deprecate `ZooKeeperUpdatingListener.nodeValueCodec` in favor of\n  `ZooKeeperUpdatingListener.codec`\n\nResult:\n\nImprove API consistency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5eccd4f96b54a5ddefd3e7cedd533cdc1d872df", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/a5eccd4f96b54a5ddefd3e7cedd533cdc1d872df", "committedDate": "2020-03-05T06:06:55Z", "message": "Revert wrong commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfc6a54998a193be4387cf61ae23ec180b33952c", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/dfc6a54998a193be4387cf61ae23ec180b33952c", "committedDate": "2020-03-05T06:15:33Z", "message": "Clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efbbecbabe43a917f46581efd89bdcbda386b071", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/efbbecbabe43a917f46581efd89bdcbda386b071", "committedDate": "2020-03-05T06:49:05Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4dcc9f3011a04961de4630a83e491e8540f97f50", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/4dcc9f3011a04961de4630a83e491e8540f97f50", "committedDate": "2020-03-05T08:05:38Z", "message": "Move AbstractCuratorFrameworkFactoryBuilder from 'internal.common.zookeeper' to 'common.zookeeper'"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5Mzg1NzUw", "url": "https://github.com/line/armeria/pull/2552#pullrequestreview-369385750", "createdAt": "2020-03-05T08:51:26Z", "commit": {"oid": "4dcc9f3011a04961de4630a83e491e8540f97f50"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo1MToyNlrOFyK2nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo1OTozMlrOFyLHKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1MDk0Mw==", "bodyText": "We have this on line 40 as well. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2552#discussion_r388150943", "createdAt": "2020-03-05T08:51:26Z", "author": {"login": "minwoox"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListenerBuilder.java", "diffHunk": "@@ -53,20 +51,16 @@\n  * <pre>{@code\n  * ZooKeeperUpdatingListener listener =\n  *     ZooKeeperUpdatingListener.builder(curatorFramework, \"/myProductionEndpoints\")\n- *                              .nodeValueCodec(NodeValueCodec.DEFAULT)\n+ *                              .codec(NodeValueCodec.DEFAULT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcc9f3011a04961de4630a83e491e8540f97f50"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1MjE4MQ==", "bodyText": "Is there any reason that you deprecated this? because it seems fine to me. \ud83d\ude09", "url": "https://github.com/line/armeria/pull/2552#discussion_r388152181", "createdAt": "2020-03-05T08:53:53Z", "author": {"login": "minwoox"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListenerBuilder.java", "diffHunk": "@@ -80,129 +74,97 @@\n      */\n     ZooKeeperUpdatingListenerBuilder(CuratorFramework client, String zNodePath) {\n         this.client = requireNonNull(client, \"client\");\n-        connectionStr = null;\n         this.zNodePath = requireNonNull(zNodePath, \"zNodePath\");\n         checkArgument(!this.zNodePath.isEmpty(), \"zNodePath can't be empty\");\n     }\n \n     /**\n      * Creates a {@link ZooKeeperUpdatingListenerBuilder} with a ZooKeeper connection string and a zNode path.\n      *\n-     * @param connectionStr the ZooKeeper connection string\n+     * @param zkConnectionStr the ZooKeeper connection string\n      * @param zNodePath the ZooKeeper node to register\n      */\n-    ZooKeeperUpdatingListenerBuilder(String connectionStr, String zNodePath) {\n-        this.connectionStr = requireNonNull(connectionStr, \"connectionStr\");\n-        checkArgument(!this.connectionStr.isEmpty(), \"connectionStr can't be empty\");\n+    ZooKeeperUpdatingListenerBuilder(String zkConnectionStr, String zNodePath) {\n+        super(requireNonNull(zkConnectionStr, \"zkConnectionStr\"));\n+        client = null;\n         this.zNodePath = requireNonNull(zNodePath, \"zNodePath\");\n         checkArgument(!this.zNodePath.isEmpty(), \"zNodePath can't be empty\");\n     }\n \n-    private void ensureInternalClient() {\n-        checkState(client == null,\n-                   \"This method is allowed only when created with a connection string.\");\n-    }\n-\n     /**\n-     * Sets the connect timeout.\n-     *\n-     * @param connectTimeout the connect timeout\n-     *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n-     */\n-    public ZooKeeperUpdatingListenerBuilder connectTimeout(Duration connectTimeout) {\n-        requireNonNull(connectTimeout, \"connectTimeout\");\n-        checkArgument(!connectTimeout.isZero() && !connectTimeout.isNegative(),\n-                      \"connectTimeout: %s (expected: > 0)\", connectTimeout);\n-        return connectTimeoutMillis(connectTimeout.toMillis());\n-    }\n-\n-    /**\n-     * Sets the connect timeout (in ms). (default: {@value ZooKeeperDefaults#DEFAULT_CONNECT_TIMEOUT_MS})\n-     *\n-     * @param connectTimeoutMillis the connect timeout\n-     *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n-     */\n-    public ZooKeeperUpdatingListenerBuilder connectTimeoutMillis(long connectTimeoutMillis) {\n-        ensureInternalClient();\n-        checkArgument(connectTimeoutMillis > 0,\n-                      \"connectTimeoutMillis: %s (expected: > 0)\", connectTimeoutMillis);\n-        this.connectTimeoutMillis = Ints.saturatedCast(connectTimeoutMillis);\n-        return this;\n-    }\n-\n-    /**\n-     * Sets the session timeout.\n-     *\n-     * @param sessionTimeout the session timeout\n-     *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n-     */\n-    public ZooKeeperUpdatingListenerBuilder sessionTimeout(Duration sessionTimeout) {\n-        requireNonNull(sessionTimeout, \"sessionTimeout\");\n-        checkArgument(!sessionTimeout.isZero() && !sessionTimeout.isNegative(),\n-                      \"sessionTimeout: %s (expected: > 0)\", sessionTimeout);\n-        return sessionTimeoutMillis(sessionTimeout.toMillis());\n-    }\n-\n-    /**\n-     * Sets the session timeout (in ms). (default: {@value ZooKeeperDefaults#DEFAULT_SESSION_TIMEOUT_MS})\n-     *\n-     * @param sessionTimeoutMillis the session timeout\n+     * Sets the {@link Endpoint} to register. If not set, the current host name is used automatically.\n      *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n+     * @param endpoint the {@link Endpoint} to register\n      */\n-    public ZooKeeperUpdatingListenerBuilder sessionTimeoutMillis(long sessionTimeoutMillis) {\n-        ensureInternalClient();\n-        checkArgument(sessionTimeoutMillis > 0,\n-                      \"sessionTimeoutMillis: %s (expected: > 0)\", sessionTimeoutMillis);\n-        this.sessionTimeoutMillis = Ints.saturatedCast(sessionTimeoutMillis);\n+    public ZooKeeperUpdatingListenerBuilder endpoint(Endpoint endpoint) {\n+        this.endpoint = requireNonNull(endpoint, \"endpoint\");\n         return this;\n     }\n \n     /**\n-     * Sets the {@link Endpoint} to register. If not set, the current host name is used automatically.\n+     * Sets the {@link NodeValueCodec} to encode or decode ZooKeeper data.\n      *\n-     * @param endpoint the {@link Endpoint} to register\n+     * @param nodeValueCodec the {@link NodeValueCodec} instance to use\n      */\n-    public ZooKeeperUpdatingListenerBuilder endpoint(Endpoint endpoint) {\n-        this.endpoint = requireNonNull(endpoint, \"endpoint\");\n+    public ZooKeeperUpdatingListenerBuilder codec(NodeValueCodec nodeValueCodec) {\n+        this.nodeValueCodec = requireNonNull(nodeValueCodec, \"nodeValueCodec\");\n         return this;\n     }\n \n     /**\n      * Sets the {@link NodeValueCodec} to encode or decode ZooKeeper data.\n      *\n      * @param nodeValueCodec the {@link NodeValueCodec} instance to use\n+     *\n+     * @deprecated Use {@link #codec(NodeValueCodec)}\n      */\n+    @Deprecated\n     public ZooKeeperUpdatingListenerBuilder nodeValueCodec(NodeValueCodec nodeValueCodec) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcc9f3011a04961de4630a83e491e8540f97f50"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1NTE3Ng==", "bodyText": "How about adding this class to the extension?", "url": "https://github.com/line/armeria/pull/2552#discussion_r388155176", "createdAt": "2020-03-05T08:59:32Z", "author": {"login": "minwoox"}, "path": "zookeeper/src/test/java/com/linecorp/armeria/common/zookeeper/ZooKeeperTestUtil.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.zookeeper;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.net.ServerSocket;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+\n+public final class ZooKeeperTestUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcc9f3011a04961de4630a83e491e8540f97f50"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f59672f6196b9dabbdb5f0ddcde5cc03c3e43698", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/f59672f6196b9dabbdb5f0ddcde5cc03c3e43698", "committedDate": "2020-03-05T10:20:01Z", "message": "Address comments by @minwoox / Fix Javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NTU0Njc0", "url": "https://github.com/line/armeria/pull/2552#pullrequestreview-369554674", "createdAt": "2020-03-05T13:12:14Z", "commit": {"oid": "f59672f6196b9dabbdb5f0ddcde5cc03c3e43698"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzoxMjoxNFrOFyS7SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzoyMToyM1rOFyTN_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4MzIwOA==", "bodyText": "ImmutableList.builder()", "url": "https://github.com/line/armeria/pull/2552#discussion_r388283208", "createdAt": "2020-03-05T13:12:14Z", "author": {"login": "trustin"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/AbstractCuratorFrameworkBuilder.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.zookeeper;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.function.Consumer;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.framework.CuratorFrameworkFactory.Builder;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.primitives.Ints;\n+\n+import com.linecorp.armeria.common.util.UnstableApi;\n+\n+/**\n+ * A skeletal builder implementation for {@link CuratorFramework}.\n+ */\n+@UnstableApi\n+public class AbstractCuratorFrameworkBuilder {\n+\n+    private static final int DEFAULT_CONNECT_TIMEOUT_MILLIS = 1000;\n+    private static final int DEFAULT_SESSION_TIMEOUT_MILLIS = 10000;\n+    private static final ExponentialBackoffRetry DEFAULT_RETRY_POLICY =\n+            new ExponentialBackoffRetry(DEFAULT_CONNECT_TIMEOUT_MILLIS, 3);\n+\n+    @Nullable\n+    private final CuratorFrameworkFactory.Builder clientBuilder;\n+    @Nullable\n+    private final ImmutableList.Builder<Consumer<? super Builder>> customizers;\n+\n+    /**\n+     * Creates a new instance with the specified {@code zkConnectionStr}.\n+     */\n+    protected AbstractCuratorFrameworkBuilder(String zkConnectionStr) {\n+        checkArgument(!zkConnectionStr.isEmpty(), \"zkConnectionStr can't be empty\");\n+        clientBuilder = CuratorFrameworkFactory.builder()\n+                                               .connectString(zkConnectionStr)\n+                                               .connectionTimeoutMs(DEFAULT_CONNECT_TIMEOUT_MILLIS)\n+                                               .sessionTimeoutMs(DEFAULT_SESSION_TIMEOUT_MILLIS)\n+                                               .retryPolicy(DEFAULT_RETRY_POLICY);\n+        customizers = new ImmutableList.Builder<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f59672f6196b9dabbdb5f0ddcde5cc03c3e43698"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4MzI4Nw==", "bodyText": "Missing period", "url": "https://github.com/line/armeria/pull/2552#discussion_r388283287", "createdAt": "2020-03-05T13:12:23Z", "author": {"login": "trustin"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/AbstractCuratorFrameworkBuilder.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.zookeeper;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.function.Consumer;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.framework.CuratorFrameworkFactory.Builder;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.primitives.Ints;\n+\n+import com.linecorp.armeria.common.util.UnstableApi;\n+\n+/**\n+ * A skeletal builder implementation for {@link CuratorFramework}.\n+ */\n+@UnstableApi\n+public class AbstractCuratorFrameworkBuilder {\n+\n+    private static final int DEFAULT_CONNECT_TIMEOUT_MILLIS = 1000;\n+    private static final int DEFAULT_SESSION_TIMEOUT_MILLIS = 10000;\n+    private static final ExponentialBackoffRetry DEFAULT_RETRY_POLICY =\n+            new ExponentialBackoffRetry(DEFAULT_CONNECT_TIMEOUT_MILLIS, 3);\n+\n+    @Nullable\n+    private final CuratorFrameworkFactory.Builder clientBuilder;\n+    @Nullable\n+    private final ImmutableList.Builder<Consumer<? super Builder>> customizers;\n+\n+    /**\n+     * Creates a new instance with the specified {@code zkConnectionStr}.\n+     */\n+    protected AbstractCuratorFrameworkBuilder(String zkConnectionStr) {\n+        checkArgument(!zkConnectionStr.isEmpty(), \"zkConnectionStr can't be empty\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f59672f6196b9dabbdb5f0ddcde5cc03c3e43698"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4MzU0Nw==", "bodyText": "is -> ms is", "url": "https://github.com/line/armeria/pull/2552#discussion_r388283547", "createdAt": "2020-03-05T13:12:56Z", "author": {"login": "trustin"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/AbstractCuratorFrameworkBuilder.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.zookeeper;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.function.Consumer;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.framework.CuratorFrameworkFactory.Builder;\n+import org.apache.curator.retry.ExponentialBackoffRetry;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.primitives.Ints;\n+\n+import com.linecorp.armeria.common.util.UnstableApi;\n+\n+/**\n+ * A skeletal builder implementation for {@link CuratorFramework}.\n+ */\n+@UnstableApi\n+public class AbstractCuratorFrameworkBuilder {\n+\n+    private static final int DEFAULT_CONNECT_TIMEOUT_MILLIS = 1000;\n+    private static final int DEFAULT_SESSION_TIMEOUT_MILLIS = 10000;\n+    private static final ExponentialBackoffRetry DEFAULT_RETRY_POLICY =\n+            new ExponentialBackoffRetry(DEFAULT_CONNECT_TIMEOUT_MILLIS, 3);\n+\n+    @Nullable\n+    private final CuratorFrameworkFactory.Builder clientBuilder;\n+    @Nullable\n+    private final ImmutableList.Builder<Consumer<? super Builder>> customizers;\n+\n+    /**\n+     * Creates a new instance with the specified {@code zkConnectionStr}.\n+     */\n+    protected AbstractCuratorFrameworkBuilder(String zkConnectionStr) {\n+        checkArgument(!zkConnectionStr.isEmpty(), \"zkConnectionStr can't be empty\");\n+        clientBuilder = CuratorFrameworkFactory.builder()\n+                                               .connectString(zkConnectionStr)\n+                                               .connectionTimeoutMs(DEFAULT_CONNECT_TIMEOUT_MILLIS)\n+                                               .sessionTimeoutMs(DEFAULT_SESSION_TIMEOUT_MILLIS)\n+                                               .retryPolicy(DEFAULT_RETRY_POLICY);\n+        customizers = new ImmutableList.Builder<>();\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     */\n+    protected AbstractCuratorFrameworkBuilder() {\n+        clientBuilder = null;\n+        customizers = null;\n+    }\n+\n+    /**\n+     * Sets the specified connect timeout. {@value DEFAULT_CONNECT_TIMEOUT_MILLIS} is used by default.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f59672f6196b9dabbdb5f0ddcde5cc03c3e43698"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4NTI3Mw==", "bodyText": "+1 for using codec() for consistency.", "url": "https://github.com/line/armeria/pull/2552#discussion_r388285273", "createdAt": "2020-03-05T13:16:15Z", "author": {"login": "trustin"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListenerBuilder.java", "diffHunk": "@@ -80,129 +74,97 @@\n      */\n     ZooKeeperUpdatingListenerBuilder(CuratorFramework client, String zNodePath) {\n         this.client = requireNonNull(client, \"client\");\n-        connectionStr = null;\n         this.zNodePath = requireNonNull(zNodePath, \"zNodePath\");\n         checkArgument(!this.zNodePath.isEmpty(), \"zNodePath can't be empty\");\n     }\n \n     /**\n      * Creates a {@link ZooKeeperUpdatingListenerBuilder} with a ZooKeeper connection string and a zNode path.\n      *\n-     * @param connectionStr the ZooKeeper connection string\n+     * @param zkConnectionStr the ZooKeeper connection string\n      * @param zNodePath the ZooKeeper node to register\n      */\n-    ZooKeeperUpdatingListenerBuilder(String connectionStr, String zNodePath) {\n-        this.connectionStr = requireNonNull(connectionStr, \"connectionStr\");\n-        checkArgument(!this.connectionStr.isEmpty(), \"connectionStr can't be empty\");\n+    ZooKeeperUpdatingListenerBuilder(String zkConnectionStr, String zNodePath) {\n+        super(requireNonNull(zkConnectionStr, \"zkConnectionStr\"));\n+        client = null;\n         this.zNodePath = requireNonNull(zNodePath, \"zNodePath\");\n         checkArgument(!this.zNodePath.isEmpty(), \"zNodePath can't be empty\");\n     }\n \n-    private void ensureInternalClient() {\n-        checkState(client == null,\n-                   \"This method is allowed only when created with a connection string.\");\n-    }\n-\n     /**\n-     * Sets the connect timeout.\n-     *\n-     * @param connectTimeout the connect timeout\n-     *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n-     */\n-    public ZooKeeperUpdatingListenerBuilder connectTimeout(Duration connectTimeout) {\n-        requireNonNull(connectTimeout, \"connectTimeout\");\n-        checkArgument(!connectTimeout.isZero() && !connectTimeout.isNegative(),\n-                      \"connectTimeout: %s (expected: > 0)\", connectTimeout);\n-        return connectTimeoutMillis(connectTimeout.toMillis());\n-    }\n-\n-    /**\n-     * Sets the connect timeout (in ms). (default: {@value ZooKeeperDefaults#DEFAULT_CONNECT_TIMEOUT_MS})\n-     *\n-     * @param connectTimeoutMillis the connect timeout\n-     *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n-     */\n-    public ZooKeeperUpdatingListenerBuilder connectTimeoutMillis(long connectTimeoutMillis) {\n-        ensureInternalClient();\n-        checkArgument(connectTimeoutMillis > 0,\n-                      \"connectTimeoutMillis: %s (expected: > 0)\", connectTimeoutMillis);\n-        this.connectTimeoutMillis = Ints.saturatedCast(connectTimeoutMillis);\n-        return this;\n-    }\n-\n-    /**\n-     * Sets the session timeout.\n-     *\n-     * @param sessionTimeout the session timeout\n-     *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n-     */\n-    public ZooKeeperUpdatingListenerBuilder sessionTimeout(Duration sessionTimeout) {\n-        requireNonNull(sessionTimeout, \"sessionTimeout\");\n-        checkArgument(!sessionTimeout.isZero() && !sessionTimeout.isNegative(),\n-                      \"sessionTimeout: %s (expected: > 0)\", sessionTimeout);\n-        return sessionTimeoutMillis(sessionTimeout.toMillis());\n-    }\n-\n-    /**\n-     * Sets the session timeout (in ms). (default: {@value ZooKeeperDefaults#DEFAULT_SESSION_TIMEOUT_MS})\n-     *\n-     * @param sessionTimeoutMillis the session timeout\n+     * Sets the {@link Endpoint} to register. If not set, the current host name is used automatically.\n      *\n-     * @throws IllegalStateException if this builder is constructed with\n-     *                               {@link ZooKeeperUpdatingListener#builder(CuratorFramework, String)}\n+     * @param endpoint the {@link Endpoint} to register\n      */\n-    public ZooKeeperUpdatingListenerBuilder sessionTimeoutMillis(long sessionTimeoutMillis) {\n-        ensureInternalClient();\n-        checkArgument(sessionTimeoutMillis > 0,\n-                      \"sessionTimeoutMillis: %s (expected: > 0)\", sessionTimeoutMillis);\n-        this.sessionTimeoutMillis = Ints.saturatedCast(sessionTimeoutMillis);\n+    public ZooKeeperUpdatingListenerBuilder endpoint(Endpoint endpoint) {\n+        this.endpoint = requireNonNull(endpoint, \"endpoint\");\n         return this;\n     }\n \n     /**\n-     * Sets the {@link Endpoint} to register. If not set, the current host name is used automatically.\n+     * Sets the {@link NodeValueCodec} to encode or decode ZooKeeper data.\n      *\n-     * @param endpoint the {@link Endpoint} to register\n+     * @param nodeValueCodec the {@link NodeValueCodec} instance to use\n      */\n-    public ZooKeeperUpdatingListenerBuilder endpoint(Endpoint endpoint) {\n-        this.endpoint = requireNonNull(endpoint, \"endpoint\");\n+    public ZooKeeperUpdatingListenerBuilder codec(NodeValueCodec nodeValueCodec) {\n+        this.nodeValueCodec = requireNonNull(nodeValueCodec, \"nodeValueCodec\");\n         return this;\n     }\n \n     /**\n      * Sets the {@link NodeValueCodec} to encode or decode ZooKeeper data.\n      *\n      * @param nodeValueCodec the {@link NodeValueCodec} instance to use\n+     *\n+     * @deprecated Use {@link #codec(NodeValueCodec)}\n      */\n+    @Deprecated\n     public ZooKeeperUpdatingListenerBuilder nodeValueCodec(NodeValueCodec nodeValueCodec) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1MjE4MQ=="}, "originalCommit": {"oid": "4dcc9f3011a04961de4630a83e491e8540f97f50"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4NTg3Mg==", "bodyText": "How about just ZooKeeperExtension?", "url": "https://github.com/line/armeria/pull/2552#discussion_r388285872", "createdAt": "2020-03-05T13:17:22Z", "author": {"login": "trustin"}, "path": "zookeeper/src/test/java/com/linecorp/armeria/common/zookeeper/ZooKeeperInstanceExtension.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.zookeeper;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import java.time.Duration;\n+\n+import javax.annotation.Nullable;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+import com.linecorp.armeria.common.util.Exceptions;\n+import com.linecorp.armeria.internal.testing.TemporaryFolder;\n+import com.linecorp.armeria.testing.junit.common.AbstractAllOrEachExtension;\n+\n+import zookeeperjunit.CloseableZooKeeper;\n+import zookeeperjunit.ZKFactory;\n+import zookeeperjunit.ZKInstance;\n+import zookeeperjunit.ZooKeeperAssert;\n+\n+public class ZooKeeperInstanceExtension extends AbstractAllOrEachExtension implements ZooKeeperAssert {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f59672f6196b9dabbdb5f0ddcde5cc03c3e43698"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4NjY0Mg==", "bodyText": "I prefer keeping ZooKeeperInstanceExtension generic enough just in case we reuse it somewhere else or someone else fork it in their projects.", "url": "https://github.com/line/armeria/pull/2552#discussion_r388286642", "createdAt": "2020-03-05T13:18:53Z", "author": {"login": "trustin"}, "path": "zookeeper/src/test/java/com/linecorp/armeria/common/zookeeper/ZooKeeperTestUtil.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.zookeeper;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.net.ServerSocket;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+\n+public final class ZooKeeperTestUtil {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1NTE3Ng=="}, "originalCommit": {"oid": "4dcc9f3011a04961de4630a83e491e8540f97f50"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4Nzk5Ng==", "bodyText": "Perhaps we could move this field up and make buildCuratorFramework() return it? We could add a method like isUserSpecifiedCuratorFramework() to AbstractCuratorFrameworkBuilder.", "url": "https://github.com/line/armeria/pull/2552#discussion_r388287996", "createdAt": "2020-03-05T13:21:23Z", "author": {"login": "trustin"}, "path": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroupBuilder.java", "diffHunk": "@@ -15,58 +15,41 @@\n  */\n package com.linecorp.armeria.client.zookeeper;\n \n-import static com.google.common.base.Preconditions.checkState;\n-import static com.linecorp.armeria.internal.common.zookeeper.ZooKeeperDefaults.DEFAULT_CONNECT_TIMEOUT_MS;\n-import static com.linecorp.armeria.internal.common.zookeeper.ZooKeeperDefaults.DEFAULT_RETRY_POLICY;\n-import static com.linecorp.armeria.internal.common.zookeeper.ZooKeeperDefaults.DEFAULT_SESSION_TIMEOUT_MS;\n import static java.util.Objects.requireNonNull;\n \n-import java.util.ArrayList;\n-import java.util.List;\n+import java.time.Duration;\n import java.util.function.Consumer;\n \n import javax.annotation.Nullable;\n \n import org.apache.curator.framework.CuratorFramework;\n-import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.framework.CuratorFrameworkFactory.Builder;\n \n import com.linecorp.armeria.client.endpoint.EndpointSelectionStrategy;\n+import com.linecorp.armeria.common.zookeeper.AbstractCuratorFrameworkBuilder;\n import com.linecorp.armeria.common.zookeeper.NodeValueCodec;\n \n /**\n  * Builds a {@link ZooKeeperEndpointGroup}.\n  */\n-public final class ZooKeeperEndpointGroupBuilder {\n+public final class ZooKeeperEndpointGroupBuilder extends AbstractCuratorFrameworkBuilder {\n \n     @Nullable\n     private final CuratorFramework client;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f59672f6196b9dabbdb5f0ddcde5cc03c3e43698"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b486896042ae1685bb79e32db09b9a90a7d9aaa9", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/b486896042ae1685bb79e32db09b9a90a7d9aaa9", "committedDate": "2020-03-06T06:56:55Z", "message": "Address comments by @trustin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2617ef26836962fc23ce67e86b2c9916a9e15c2", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/a2617ef26836962fc23ce67e86b2c9916a9e15c2", "committedDate": "2020-03-06T08:03:52Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9360a1279dfbd93fbe6e51fe2bffe3a0286b6e33", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/9360a1279dfbd93fbe6e51fe2bffe3a0286b6e33", "committedDate": "2020-03-06T11:15:42Z", "message": "Update Javadoc & clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e682a46a5c043c5dc6020d9796c9ef6bc9c5fd2b", "author": {"user": {"login": "ikhoon", "name": "Ikhun Um"}}, "url": "https://github.com/line/armeria/commit/e682a46a5c043c5dc6020d9796c9ef6bc9c5fd2b", "committedDate": "2020-03-06T11:21:50Z", "message": "more clean up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMDAwNjU1", "url": "https://github.com/line/armeria/pull/2552#pullrequestreview-371000655", "createdAt": "2020-03-09T09:03:34Z", "commit": {"oid": "e682a46a5c043c5dc6020d9796c9ef6bc9c5fd2b"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTowMzozNVrOFzfHwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTowMzozNVrOFzfHwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUzMTU4NA==", "bodyText": "nit: Now 0.44.4", "url": "https://github.com/line/armeria/pull/2552#discussion_r389531584", "createdAt": "2020-03-09T09:03:35Z", "author": {"login": "trustin"}, "path": "testing-internal/src/main/java/com/linecorp/armeria/internal/testing/TemporaryFolder.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.testing;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Comparator;\n+import java.util.stream.Stream;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A helper class to handle temporary folders in JUnit {@code Extension}s.\n+ */\n+public class TemporaryFolder {\n+\n+    // Forked from CentralDogma 0.44.3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e682a46a5c043c5dc6020d9796c9ef6bc9c5fd2b"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63311a2cfebf5feb6089b49efd4f9ca09c9fb36d", "author": {"user": {"login": "trustin", "name": "Trustin Lee"}}, "url": "https://github.com/line/armeria/commit/63311a2cfebf5feb6089b49efd4f9ca09c9fb36d", "committedDate": "2020-03-09T09:05:58Z", "message": "Update TemporaryFolder.java"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 643, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}