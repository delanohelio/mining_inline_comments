{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MTkyMTA5", "number": 2369, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxMDowMDozNlrODV7msg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxMDowMDozNlrODV7msg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MzIzMjUwOnYy", "diffSide": "RIGHT", "path": "examples/grpc-reactor/src/test/java/example/armeria/grpc/reactor/HelloServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxMDowMDozNlrOFaZorg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxMDowMDozNlrOFaZorg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzIyNzMxMA==", "bodyText": "You could write\nfinal String message = Flux.just(names).log()\n                             .map(name -> HelloRequest.newBuilder().setName(name).build())\n                             .as(helloService::lotsOfGreetings)\n                             .map(HelloReply::getMessage)\n                             .block();", "url": "https://github.com/line/armeria/pull/2369#discussion_r363227310", "createdAt": "2020-01-06T10:00:36Z", "author": {"login": "cbornet"}, "path": "examples/grpc-reactor/src/test/java/example/armeria/grpc/reactor/HelloServiceTest.java", "diffHunk": "@@ -50,179 +47,70 @@ private static String uri() {\n \n     @Test\n     void getReply() {\n-        final HelloServiceGrpc.HelloServiceBlockingStub helloService =\n-                Clients.newClient(uri(), HelloServiceGrpc.HelloServiceBlockingStub.class);\n-        assertThat(helloService.hello(HelloRequest.newBuilder().setName(\"Armeria\").build()).getMessage())\n-                .isEqualTo(\"Hello, Armeria!\");\n+        final HelloReply reply = helloService.hello(HelloRequest.newBuilder()\n+                                                                .setName(\"Armeria\")\n+                                                                .build()).block();\n+        assertThat(reply).isNotNull();\n+        assertThat(reply.getMessage()).isEqualTo(\"Hello, Armeria!\");\n     }\n \n     @Test\n     void getReplyWithDelay() {\n-        final HelloServiceGrpc.HelloServiceFutureStub helloService =\n-                Clients.newClient(uri(), HelloServiceGrpc.HelloServiceFutureStub.class);\n-        final ListenableFuture<HelloReply> future =\n-                helloService.lazyHello(HelloRequest.newBuilder().setName(\"Armeria\").build());\n-        final AtomicBoolean completed = new AtomicBoolean();\n-        Futures.addCallback(future, new FutureCallback<HelloReply>() {\n-            @Override\n-            public void onSuccess(HelloReply result) {\n-                assertThat(result.getMessage()).isEqualTo(\"Hello, Armeria!\");\n-                completed.set(true);\n-            }\n-\n-            @Override\n-            public void onFailure(Throwable t) {\n-                // Should never reach here.\n-                throw new Error(t);\n-            }\n-        }, MoreExecutors.directExecutor());\n-\n-        await().untilTrue(completed);\n+        final HelloReply reply = helloService.lazyHello(HelloRequest.newBuilder()\n+                                                                    .setName(\"Armeria\")\n+                                                                    .build()).block();\n+        assertThat(reply).isNotNull();\n+        assertThat(reply.getMessage()).isEqualTo(\"Hello, Armeria!\");\n     }\n \n     @Test\n     void getReplyFromServerSideBlockingCall() {\n-        final HelloServiceGrpc.HelloServiceBlockingStub helloService =\n-                Clients.newClient(uri(), HelloServiceGrpc.HelloServiceBlockingStub.class);\n         final Stopwatch watch = Stopwatch.createStarted();\n-        assertThat(helloService.blockingHello(HelloRequest.newBuilder().setName(\"Armeria\").build())\n-                               .getMessage()).isEqualTo(\"Hello, Armeria!\");\n+        final HelloReply reply = helloService.blockingHello(HelloRequest.newBuilder()\n+                                                                        .setName(\"Armeria\")\n+                                                                        .build()).block();\n+        assertThat(reply).isNotNull();\n+        assertThat(reply.getMessage()).isEqualTo(\"Hello, Armeria!\");\n         assertThat(watch.elapsed(TimeUnit.SECONDS)).isGreaterThanOrEqualTo(3);\n     }\n \n     @Test\n     void getLotsOfReplies() {\n-        final AtomicBoolean completed = new AtomicBoolean();\n-        helloService.lotsOfReplies(\n-                HelloRequest.newBuilder().setName(\"Armeria\").build(),\n-                new StreamObserver<HelloReply>() {\n-                    private int sequence;\n-\n-                    @Override\n-                    public void onNext(HelloReply value) {\n-                        assertThat(value.getMessage())\n-                                .isEqualTo(\"Hello, Armeria! (sequence: \" + ++sequence + ')');\n-                    }\n-\n-                    @Override\n-                    public void onError(Throwable t) {\n-                        // Should never reach here.\n-                        throw new Error(t);\n-                    }\n-\n-                    @Override\n-                    public void onCompleted() {\n-                        assertThat(sequence).isEqualTo(5);\n-                        completed.set(true);\n-                    }\n-                });\n-        await().untilTrue(completed);\n-    }\n+        final List<HelloReply> replies =\n+                helloService.lotsOfReplies(HelloRequest.newBuilder().setName(\"Armeria\").build())\n+                            .toStream().collect(toImmutableList());\n \n-    @Test\n-    void blockForLotsOfReplies() throws Exception {\n-        final BlockingQueue<HelloReply> replies = new LinkedBlockingQueue<>();\n-        final AtomicBoolean completed = new AtomicBoolean();\n-        helloService.lotsOfReplies(\n-                HelloRequest.newBuilder().setName(\"Armeria\").build(),\n-                new StreamObserver<HelloReply>() {\n-\n-                    @Override\n-                    public void onNext(HelloReply value) {\n-                        replies.offer(value);\n-                    }\n-\n-                    @Override\n-                    public void onError(Throwable t) {\n-                        // Should never reach here.\n-                        throw new Error(t);\n-                    }\n-\n-                    @Override\n-                    public void onCompleted() {\n-                        completed.set(true);\n-                    }\n-                });\n-        int sequence = 0;\n-        while (!completed.get() || !replies.isEmpty()) {\n-            final HelloReply value = replies.poll(100, TimeUnit.MILLISECONDS);\n-            if (value == null) {\n-                // Timed out, try again.\n-                continue;\n-            }\n-            assertThat(value.getMessage())\n-                    .isEqualTo(\"Hello, Armeria! (sequence: \" + ++sequence + ')');\n+        assertThat(replies).hasSize(5);\n+\n+        for (int i = 0; i < replies.size(); i++) {\n+            assertThat(replies.get(i).getMessage()).isEqualTo(\"Hello, Armeria! (sequence: \" + (i + 1) + ')');\n         }\n-        assertThat(sequence).isEqualTo(5);\n     }\n \n     @Test\n     void sendLotsOfGreetings() {\n         final String[] names = { \"Armeria\", \"Grpc\", \"Streaming\" };\n-        final AtomicBoolean completed = new AtomicBoolean();\n-        final StreamObserver<HelloRequest> request =\n-                helloService.lotsOfGreetings(new StreamObserver<HelloReply>() {\n-                    private boolean received;\n-\n-                    @Override\n-                    public void onNext(HelloReply value) {\n-                        assertThat(received).isFalse();\n-                        received = true;\n-                        assertThat(value.getMessage())\n-                                .isEqualTo(HelloServiceImpl.toMessage(String.join(\", \", names)));\n-                    }\n-\n-                    @Override\n-                    public void onError(Throwable t) {\n-                        // Should never reach here.\n-                        throw new Error(t);\n-                    }\n-\n-                    @Override\n-                    public void onCompleted() {\n-                        assertThat(received).isTrue();\n-                        completed.set(true);\n-                    }\n-                });\n-\n-        for (String name : names) {\n-            request.onNext(HelloRequest.newBuilder().setName(name).build());\n-        }\n-        request.onCompleted();\n-        await().untilTrue(completed);\n+        final Flux<HelloRequest> request = Flux.just(names).log()\n+                                               .map(name -> HelloRequest.newBuilder().setName(name).build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fe6c3d1a8830a293409f61b2759ffb90367748c"}, "originalPosition": 216}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2846, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}