{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1NTg3MTc0", "number": 2803, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODozOToxOFrOEGQMsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDoxOToyNlrOEGSgQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTkyMzA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/logging/LoggingDecoratorBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODozOToxOFrOGk7rOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMTo0OTowMVrOGlCIkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3OTY0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * It is common to have the {@link Function} that removes sensitive headers, like {@code \"Cookie\"} and\n          \n          \n            \n                 * It is common to have the {@link BiFunction} that removes sensitive headers, like {@code \"Cookie\"} and", "url": "https://github.com/line/armeria/pull/2803#discussion_r441379643", "createdAt": "2020-06-17T08:39:18Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/LoggingDecoratorBuilder.java", "diffHunk": "@@ -182,76 +195,157 @@ public LoggingDecoratorBuilder responseLogLevelMapper(\n         return responseLogLevelMapper;\n     }\n \n+    /**\n+     * Sets the {@link BiFunction} to use to sanitize request headers before logging. It is common to have the\n+     * {@link BiFunction} that removes sensitive headers, like {@code Cookie}, before logging. If unset, will\n+     * not sanitize request headers.\n+     */\n+    public LoggingDecoratorBuilder requestHeadersSanitizer(\n+            BiFunction<? super RequestContext, ? super HttpHeaders, ?> requestHeadersSanitizer) {\n+        this.requestHeadersSanitizer = requireNonNull(requestHeadersSanitizer, \"requestHeadersSanitizer\");\n+        return this;\n+    }\n+\n     /**\n      * Sets the {@link Function} to use to sanitize request headers before logging. It is common to have the\n      * {@link Function} that removes sensitive headers, like {@code Cookie}, before logging. If unset, will use\n      * {@link Function#identity()}.\n+     *\n+     * @deprecated Use {@link #requestHeadersSanitizer(BiFunction)}.\n      */\n+    @Deprecated\n     public LoggingDecoratorBuilder requestHeadersSanitizer(\n             Function<? super HttpHeaders, ?> requestHeadersSanitizer) {\n-        this.requestHeadersSanitizer = requireNonNull(requestHeadersSanitizer, \"requestHeadersSanitizer\");\n-        return this;\n+        requireNonNull(requestHeadersSanitizer, \"requestHeadersSanitizer\");\n+        return requestHeadersSanitizer((ctx, headers) -> requestHeadersSanitizer.apply(headers));\n     }\n \n     /**\n-     * Returns the {@link Function} to use to sanitize request headers before logging.\n+     * Returns the {@link BiFunction} to use to sanitize request headers before logging.\n      */\n-    protected Function<? super HttpHeaders, ?> requestHeadersSanitizer() {\n+    protected BiFunction<? super RequestContext, ? super HttpHeaders, ?> requestHeadersSanitizer() {\n         return requestHeadersSanitizer;\n     }\n \n+    /**\n+     * Sets the {@link BiFunction} to use to sanitize response headers before logging. It is common to have the\n+     * {@link BiFunction} that removes sensitive headers, like {@code Set-Cookie}, before logging. If unset,\n+     * will not sanitize response headers.\n+     */\n+    public LoggingDecoratorBuilder responseHeadersSanitizer(\n+            BiFunction<? super RequestContext, ? super HttpHeaders, ?> responseHeadersSanitizer) {\n+        this.responseHeadersSanitizer = requireNonNull(responseHeadersSanitizer, \"responseHeadersSanitizer\");\n+        return this;\n+    }\n+\n     /**\n      * Sets the {@link Function} to use to sanitize response headers before logging. It is common to have the\n      * {@link Function} that removes sensitive headers, like {@code Set-Cookie}, before logging. If unset,\n      * will use {@link Function#identity()}.\n+     *\n+     * @deprecated Use {@link #responseHeadersSanitizer(BiFunction)}.\n      */\n+    @Deprecated\n     public LoggingDecoratorBuilder responseHeadersSanitizer(\n             Function<? super HttpHeaders, ?> responseHeadersSanitizer) {\n-        this.responseHeadersSanitizer = requireNonNull(responseHeadersSanitizer, \"responseHeadersSanitizer\");\n-        return this;\n+        requireNonNull(responseHeadersSanitizer, \"responseHeadersSanitizer\");\n+        return responseHeadersSanitizer((ctx, headers) -> responseHeadersSanitizer.apply(headers));\n     }\n \n     /**\n-     * Returns the {@link Function} to use to sanitize response headers before logging.\n+     * Returns the {@link BiFunction} to use to sanitize response headers before logging.\n      */\n-    protected Function<? super HttpHeaders, ?> responseHeadersSanitizer() {\n+    protected BiFunction<? super RequestContext, ? super HttpHeaders, ?> responseHeadersSanitizer() {\n         return responseHeadersSanitizer;\n     }\n \n+    /**\n+     * Sets the {@link BiFunction} to use to sanitize request trailers before logging. If unset,\n+     * will not sanitize request trailers.\n+     */\n+    public LoggingDecoratorBuilder requestTrailersSanitizer(\n+            BiFunction<? super RequestContext, ? super HttpHeaders, ?> requestTrailersSanitizer) {\n+        this.requestTrailersSanitizer = requireNonNull(requestTrailersSanitizer, \"requestTrailersSanitizer\");\n+        return this;\n+    }\n+\n     /**\n      * Sets the {@link Function} to use to sanitize request trailers before logging. If unset,\n      * will use {@link Function#identity()}.\n+     *\n+     * @deprecated Use {@link #requestTrailersSanitizer(BiFunction)}.\n      */\n+    @Deprecated\n     public LoggingDecoratorBuilder requestTrailersSanitizer(\n             Function<? super HttpHeaders, ?> requestTrailersSanitizer) {\n-        this.requestTrailersSanitizer = requireNonNull(requestTrailersSanitizer, \"requestTrailersSanitizer\");\n-        return this;\n+        requireNonNull(requestTrailersSanitizer, \"requestTrailersSanitizer\");\n+        return requestTrailersSanitizer((ctx, trailers) -> requestTrailersSanitizer.apply(trailers));\n     }\n \n     /**\n-     * Returns the {@link Function} to use to sanitize request trailers before logging.\n+     * Returns the {@link BiFunction} to use to sanitize request trailers before logging.\n      */\n-    protected Function<? super HttpHeaders, ?> requestTrailersSanitizer() {\n+    protected BiFunction<? super RequestContext, ? super HttpHeaders, ?> requestTrailersSanitizer() {\n         return requestTrailersSanitizer;\n     }\n \n+    /**\n+     * Sets the {@link BiFunction} to use to sanitize response trailers before logging. If unset,\n+     * will not sanitize response trailers.\n+     */\n+    public LoggingDecoratorBuilder responseTrailersSanitizer(\n+            BiFunction<? super RequestContext, ? super HttpHeaders, ?> responseTrailersSanitizer) {\n+        this.responseTrailersSanitizer = requireNonNull(responseTrailersSanitizer, \"responseTrailersSanitizer\");\n+        return this;\n+    }\n+\n     /**\n      * Sets the {@link Function} to use to sanitize response trailers before logging. If unset,\n      * will use {@link Function#identity()}.\n+     *\n+     * @deprecated Use {@link #responseTrailersSanitizer(BiFunction)}.\n      */\n+    @Deprecated\n     public LoggingDecoratorBuilder responseTrailersSanitizer(\n             Function<? super HttpHeaders, ?> responseTrailersSanitizer) {\n-        this.responseTrailersSanitizer = requireNonNull(responseTrailersSanitizer, \"responseTrailersSanitizer\");\n-        return this;\n+        requireNonNull(responseTrailersSanitizer, \"responseTrailersSanitizer\");\n+        return responseTrailersSanitizer((ctx, trailers) -> responseTrailersSanitizer.apply(trailers));\n     }\n \n     /**\n      * Returns the {@link Function} to use to sanitize response trailers before logging.\n      */\n-    protected Function<? super HttpHeaders, ?> responseTrailersSanitizer() {\n+    protected BiFunction<? super RequestContext, ? super HttpHeaders, ?> responseTrailersSanitizer() {\n         return responseTrailersSanitizer;\n     }\n \n+    /**\n+     * Sets the {@link BiFunction} to use to sanitize request, response and trailers before logging.\n+     * It is common to have the {@link Function} that removes sensitive headers, like {@code \"Cookie\"} and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c8059579b9d1125a0d32c1092952d5a0d43ca7e"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ4NTQ1Ng==", "bodyText": "Thanks!", "url": "https://github.com/line/armeria/pull/2803#discussion_r441485456", "createdAt": "2020-06-17T11:49:01Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/logging/LoggingDecoratorBuilder.java", "diffHunk": "@@ -182,76 +195,157 @@ public LoggingDecoratorBuilder responseLogLevelMapper(\n         return responseLogLevelMapper;\n     }\n \n+    /**\n+     * Sets the {@link BiFunction} to use to sanitize request headers before logging. It is common to have the\n+     * {@link BiFunction} that removes sensitive headers, like {@code Cookie}, before logging. If unset, will\n+     * not sanitize request headers.\n+     */\n+    public LoggingDecoratorBuilder requestHeadersSanitizer(\n+            BiFunction<? super RequestContext, ? super HttpHeaders, ?> requestHeadersSanitizer) {\n+        this.requestHeadersSanitizer = requireNonNull(requestHeadersSanitizer, \"requestHeadersSanitizer\");\n+        return this;\n+    }\n+\n     /**\n      * Sets the {@link Function} to use to sanitize request headers before logging. It is common to have the\n      * {@link Function} that removes sensitive headers, like {@code Cookie}, before logging. If unset, will use\n      * {@link Function#identity()}.\n+     *\n+     * @deprecated Use {@link #requestHeadersSanitizer(BiFunction)}.\n      */\n+    @Deprecated\n     public LoggingDecoratorBuilder requestHeadersSanitizer(\n             Function<? super HttpHeaders, ?> requestHeadersSanitizer) {\n-        this.requestHeadersSanitizer = requireNonNull(requestHeadersSanitizer, \"requestHeadersSanitizer\");\n-        return this;\n+        requireNonNull(requestHeadersSanitizer, \"requestHeadersSanitizer\");\n+        return requestHeadersSanitizer((ctx, headers) -> requestHeadersSanitizer.apply(headers));\n     }\n \n     /**\n-     * Returns the {@link Function} to use to sanitize request headers before logging.\n+     * Returns the {@link BiFunction} to use to sanitize request headers before logging.\n      */\n-    protected Function<? super HttpHeaders, ?> requestHeadersSanitizer() {\n+    protected BiFunction<? super RequestContext, ? super HttpHeaders, ?> requestHeadersSanitizer() {\n         return requestHeadersSanitizer;\n     }\n \n+    /**\n+     * Sets the {@link BiFunction} to use to sanitize response headers before logging. It is common to have the\n+     * {@link BiFunction} that removes sensitive headers, like {@code Set-Cookie}, before logging. If unset,\n+     * will not sanitize response headers.\n+     */\n+    public LoggingDecoratorBuilder responseHeadersSanitizer(\n+            BiFunction<? super RequestContext, ? super HttpHeaders, ?> responseHeadersSanitizer) {\n+        this.responseHeadersSanitizer = requireNonNull(responseHeadersSanitizer, \"responseHeadersSanitizer\");\n+        return this;\n+    }\n+\n     /**\n      * Sets the {@link Function} to use to sanitize response headers before logging. It is common to have the\n      * {@link Function} that removes sensitive headers, like {@code Set-Cookie}, before logging. If unset,\n      * will use {@link Function#identity()}.\n+     *\n+     * @deprecated Use {@link #responseHeadersSanitizer(BiFunction)}.\n      */\n+    @Deprecated\n     public LoggingDecoratorBuilder responseHeadersSanitizer(\n             Function<? super HttpHeaders, ?> responseHeadersSanitizer) {\n-        this.responseHeadersSanitizer = requireNonNull(responseHeadersSanitizer, \"responseHeadersSanitizer\");\n-        return this;\n+        requireNonNull(responseHeadersSanitizer, \"responseHeadersSanitizer\");\n+        return responseHeadersSanitizer((ctx, headers) -> responseHeadersSanitizer.apply(headers));\n     }\n \n     /**\n-     * Returns the {@link Function} to use to sanitize response headers before logging.\n+     * Returns the {@link BiFunction} to use to sanitize response headers before logging.\n      */\n-    protected Function<? super HttpHeaders, ?> responseHeadersSanitizer() {\n+    protected BiFunction<? super RequestContext, ? super HttpHeaders, ?> responseHeadersSanitizer() {\n         return responseHeadersSanitizer;\n     }\n \n+    /**\n+     * Sets the {@link BiFunction} to use to sanitize request trailers before logging. If unset,\n+     * will not sanitize request trailers.\n+     */\n+    public LoggingDecoratorBuilder requestTrailersSanitizer(\n+            BiFunction<? super RequestContext, ? super HttpHeaders, ?> requestTrailersSanitizer) {\n+        this.requestTrailersSanitizer = requireNonNull(requestTrailersSanitizer, \"requestTrailersSanitizer\");\n+        return this;\n+    }\n+\n     /**\n      * Sets the {@link Function} to use to sanitize request trailers before logging. If unset,\n      * will use {@link Function#identity()}.\n+     *\n+     * @deprecated Use {@link #requestTrailersSanitizer(BiFunction)}.\n      */\n+    @Deprecated\n     public LoggingDecoratorBuilder requestTrailersSanitizer(\n             Function<? super HttpHeaders, ?> requestTrailersSanitizer) {\n-        this.requestTrailersSanitizer = requireNonNull(requestTrailersSanitizer, \"requestTrailersSanitizer\");\n-        return this;\n+        requireNonNull(requestTrailersSanitizer, \"requestTrailersSanitizer\");\n+        return requestTrailersSanitizer((ctx, trailers) -> requestTrailersSanitizer.apply(trailers));\n     }\n \n     /**\n-     * Returns the {@link Function} to use to sanitize request trailers before logging.\n+     * Returns the {@link BiFunction} to use to sanitize request trailers before logging.\n      */\n-    protected Function<? super HttpHeaders, ?> requestTrailersSanitizer() {\n+    protected BiFunction<? super RequestContext, ? super HttpHeaders, ?> requestTrailersSanitizer() {\n         return requestTrailersSanitizer;\n     }\n \n+    /**\n+     * Sets the {@link BiFunction} to use to sanitize response trailers before logging. If unset,\n+     * will not sanitize response trailers.\n+     */\n+    public LoggingDecoratorBuilder responseTrailersSanitizer(\n+            BiFunction<? super RequestContext, ? super HttpHeaders, ?> responseTrailersSanitizer) {\n+        this.responseTrailersSanitizer = requireNonNull(responseTrailersSanitizer, \"responseTrailersSanitizer\");\n+        return this;\n+    }\n+\n     /**\n      * Sets the {@link Function} to use to sanitize response trailers before logging. If unset,\n      * will use {@link Function#identity()}.\n+     *\n+     * @deprecated Use {@link #responseTrailersSanitizer(BiFunction)}.\n      */\n+    @Deprecated\n     public LoggingDecoratorBuilder responseTrailersSanitizer(\n             Function<? super HttpHeaders, ?> responseTrailersSanitizer) {\n-        this.responseTrailersSanitizer = requireNonNull(responseTrailersSanitizer, \"responseTrailersSanitizer\");\n-        return this;\n+        requireNonNull(responseTrailersSanitizer, \"responseTrailersSanitizer\");\n+        return responseTrailersSanitizer((ctx, trailers) -> responseTrailersSanitizer.apply(trailers));\n     }\n \n     /**\n      * Returns the {@link Function} to use to sanitize response trailers before logging.\n      */\n-    protected Function<? super HttpHeaders, ?> responseTrailersSanitizer() {\n+    protected BiFunction<? super RequestContext, ? super HttpHeaders, ?> responseTrailersSanitizer() {\n         return responseTrailersSanitizer;\n     }\n \n+    /**\n+     * Sets the {@link BiFunction} to use to sanitize request, response and trailers before logging.\n+     * It is common to have the {@link Function} that removes sensitive headers, like {@code \"Cookie\"} and", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3OTY0Mw=="}, "originalCommit": {"oid": "9c8059579b9d1125a0d32c1092952d5a0d43ca7e"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDMwMDE3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/util/Functions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDoxOToxNVrOGk_bMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDoxOToxNVrOGk_bMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ0MTA3Mg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/line/armeria/pull/2803#discussion_r441441072", "createdAt": "2020-06-17T10:19:15Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/util/Functions.java", "diffHunk": "@@ -194,5 +194,19 @@\n         };\n     }\n \n+    /**\n+     * Returns a {@link BiFunction} that returns the first argument.\n+     */\n+    public static <T, U> BiFunction<T, U, T> first() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c8059579b9d1125a0d32c1092952d5a0d43ca7e"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDMwMDgzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/util/Functions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDoxOToyNlrOGk_blQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDoxOToyNlrOGk_blQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ0MTE3Mw==", "bodyText": "\ud83d\udc4d \ud83d\udc4d", "url": "https://github.com/line/armeria/pull/2803#discussion_r441441173", "createdAt": "2020-06-17T10:19:26Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/util/Functions.java", "diffHunk": "@@ -194,5 +194,19 @@\n         };\n     }\n \n+    /**\n+     * Returns a {@link BiFunction} that returns the first argument.\n+     */\n+    public static <T, U> BiFunction<T, U, T> first() {\n+        return (first, second) -> first;\n+    }\n+\n+    /**\n+     * Returns a {@link BiFunction} that returns the second argument.\n+     */\n+    public static <T, U> BiFunction<T, U, U> second() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c8059579b9d1125a0d32c1092952d5a0d43ca7e"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2354, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}