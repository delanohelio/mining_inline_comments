{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExNDU0NjI0", "number": 3143, "title": "Add arbitrary param parsers", "bodyText": "This changeset adds the ability to convert String parameters\n(those marked with @Query, @Header and @Param) to be converted\nto any arbitrary object type, provided that the class has at least\none of the following methods (discovered in order):\n\npublic static T of(String)\npublic static T valueOf(String)\npublic static T fromString(String)\npublic T(String)\n\nIf a method exists but throws an exception on conversion, the next will\nNOT be tried.\nCloses #2574", "createdAt": "2020-10-28T10:52:10Z", "url": "https://github.com/line/armeria/pull/3143", "merged": true, "mergeCommit": {"oid": "25a0ffade6c9e2a63ec32dcda70ca2391178c13f"}, "closed": true, "closedAt": "2020-11-03T09:00:24Z", "author": {"login": "tobias-"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdW7sKGAFqTUxODU1NDIyMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdYvkoZAFqTUyMjE1Mzk3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NTU0MjIz", "url": "https://github.com/line/armeria/pull/3143#pullrequestreview-518554223", "createdAt": "2020-10-28T11:16:12Z", "commit": {"oid": "f5303eea767feb84631e03870a76ffdfeb0e1b7c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMToxNjoxMlrOHplJnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMToxNjoxMlrOHplJnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2MjMzNQ==", "bodyText": "How about changing this line, rather than special casing in stringToType()?", "url": "https://github.com/line/armeria/pull/3143#discussion_r513362335", "createdAt": "2020-10-28T11:16:12Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -74,6 +81,12 @@\n                     .put(Object.class, Function.identity())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5303eea767feb84631e03870a76ffdfeb0e1b7c"}, "originalPosition": 27}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f5303eea767feb84631e03870a76ffdfeb0e1b7c", "author": {"user": {"login": "tobias-", "name": "Sn\u014dwball"}}, "url": "https://github.com/line/armeria/commit/f5303eea767feb84631e03870a76ffdfeb0e1b7c", "committedDate": "2020-10-28T10:51:40Z", "message": "Add arbitrary param parsers\n\nThis will add the ability to convert String parameters\n(those marked with @Query, @Header and @Param) to be converted\nto any arbitrary object type, provided that the class has at least\none of the following methods (discovered in order):\npublic static T of(String)\npublic static T valueOf(String)\npublic static T fromString(String)\npublic T(String)\n\nIf a method exists but throws an exception on conversion, the next will\nNOT be tried.\n\nCloses #2574"}, "afterCommit": {"oid": "57be31b2608c080096a3cc40e031fb93d342eb99", "author": {"user": {"login": "tobias-", "name": "Sn\u014dwball"}}, "url": "https://github.com/line/armeria/commit/57be31b2608c080096a3cc40e031fb93d342eb99", "committedDate": "2020-10-28T11:22:28Z", "message": "Add arbitrary param parsers\n\nThis will add the ability to convert String parameters\n(those marked with @Query, @Header and @Param) to be converted\nto any arbitrary object type, provided that the class has at least\none of the following methods (discovered in order):\npublic static T of(String)\npublic static T valueOf(String)\npublic static T fromString(String)\npublic T(String)\n\nIf a method exists but throws an exception on conversion, the next will\nNOT be tried.\n\nCloses #2574"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NTU1NTEx", "url": "https://github.com/line/armeria/pull/3143#pullrequestreview-518555511", "createdAt": "2020-10-28T11:18:00Z", "commit": {"oid": "f5303eea767feb84631e03870a76ffdfeb0e1b7c"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMToxODowMFrOHplNdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMToyNDowOVrOHplagQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2MzMxNg==", "bodyText": "Could we skip the method that returns the type that's not compatible with clazz?\nHow about using MethodHandle, which is faster than reflection? https://www.baeldung.com/java-method-handles", "url": "https://github.com/line/armeria/pull/3143#discussion_r513363316", "createdAt": "2020-10-28T11:18:00Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -82,6 +95,69 @@\n                     .put(\"0\", false)\n                     .build();\n \n+    /**\n+     * Try to get a public static method with a single {@link String} argument in clazz.\n+     * @param clazz the class being introspected\n+     * @param methodName the method expected\n+     * @param <T> the expected result. It is *not* checked\n+     * @return a function that takes a {@link String} and produces a {@link T}\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Nullable\n+    private static <T> Function<String, T> getPublicStaticMethod(final Class<T> clazz,\n+                                                                 final String methodName) {\n+        try {\n+            final Method method = clazz.getMethod(methodName, String.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5303eea767feb84631e03870a76ffdfeb0e1b7c"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2NDMyOQ==", "bodyText": "Ditto - could use method handles?", "url": "https://github.com/line/armeria/pull/3143#discussion_r513364329", "createdAt": "2020-10-28T11:19:47Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -82,6 +95,69 @@\n                     .put(\"0\", false)\n                     .build();\n \n+    /**\n+     * Try to get a public static method with a single {@link String} argument in clazz.\n+     * @param clazz the class being introspected\n+     * @param methodName the method expected\n+     * @param <T> the expected result. It is *not* checked\n+     * @return a function that takes a {@link String} and produces a {@link T}\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Nullable\n+    private static <T> Function<String, T> getPublicStaticMethod(final Class<T> clazz,\n+                                                                 final String methodName) {\n+        try {\n+            final Method method = clazz.getMethod(methodName, String.class);\n+            return (str) -> {\n+                try {\n+                    return (T) method.invoke(null, str);\n+                } catch (RuntimeException e) {\n+                    throw e;\n+                } catch (Exception e) {\n+                    throw new IllegalArgumentException(e);\n+                }\n+            };\n+        } catch (Throwable t) {\n+            // No valid public static method found\n+        }\n+        return null;\n+    }\n+\n+    @Nullable\n+    private static <T> Function<String, T> getStringConstructor(final Class<T> clazz) {\n+        try {\n+            final Constructor<T> constructor = clazz.getConstructor(String.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5303eea767feb84631e03870a76ffdfeb0e1b7c"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2NTY0Mg==", "bodyText": "Could use Exceptions.throwUnsafely() instead of wrapping with IAE?\nCould catch an InvocationTargetException and unwrap before throwing", "url": "https://github.com/line/armeria/pull/3143#discussion_r513365642", "createdAt": "2020-10-28T11:22:10Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -82,6 +95,69 @@\n                     .put(\"0\", false)\n                     .build();\n \n+    /**\n+     * Try to get a public static method with a single {@link String} argument in clazz.\n+     * @param clazz the class being introspected\n+     * @param methodName the method expected\n+     * @param <T> the expected result. It is *not* checked\n+     * @return a function that takes a {@link String} and produces a {@link T}\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Nullable\n+    private static <T> Function<String, T> getPublicStaticMethod(final Class<T> clazz,\n+                                                                 final String methodName) {\n+        try {\n+            final Method method = clazz.getMethod(methodName, String.class);\n+            return (str) -> {\n+                try {\n+                    return (T) method.invoke(null, str);\n+                } catch (RuntimeException e) {\n+                    throw e;\n+                } catch (Exception e) {\n+                    throw new IllegalArgumentException(e);\n+                }\n+            };\n+        } catch (Throwable t) {\n+            // No valid public static method found\n+        }\n+        return null;\n+    }\n+\n+    @Nullable\n+    private static <T> Function<String, T> getStringConstructor(final Class<T> clazz) {\n+        try {\n+            final Constructor<T> constructor = clazz.getConstructor(String.class);\n+            return (str) -> {\n+                try {\n+                    return constructor.newInstance(str);\n+                } catch (RuntimeException e) {\n+                    throw e;\n+                } catch (Exception e) {\n+                    throw new IllegalArgumentException(e);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5303eea767feb84631e03870a76ffdfeb0e1b7c"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2NTcwMg==", "bodyText": "Could use Exceptions.throwUnsafely() instead of wrapping with IAE?\nCould catch an InvocationTargetException and unwrap before throwing", "url": "https://github.com/line/armeria/pull/3143#discussion_r513365702", "createdAt": "2020-10-28T11:22:17Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -82,6 +95,69 @@\n                     .put(\"0\", false)\n                     .build();\n \n+    /**\n+     * Try to get a public static method with a single {@link String} argument in clazz.\n+     * @param clazz the class being introspected\n+     * @param methodName the method expected\n+     * @param <T> the expected result. It is *not* checked\n+     * @return a function that takes a {@link String} and produces a {@link T}\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Nullable\n+    private static <T> Function<String, T> getPublicStaticMethod(final Class<T> clazz,\n+                                                                 final String methodName) {\n+        try {\n+            final Method method = clazz.getMethod(methodName, String.class);\n+            return (str) -> {\n+                try {\n+                    return (T) method.invoke(null, str);\n+                } catch (RuntimeException e) {\n+                    throw e;\n+                } catch (Exception e) {\n+                    throw new IllegalArgumentException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5303eea767feb84631e03870a76ffdfeb0e1b7c"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM2NjY1Nw==", "bodyText": "I guess the value doesn't need to be weak. The value will be automatically deferenced when the key is collected.", "url": "https://github.com/line/armeria/pull/3143#discussion_r513366657", "createdAt": "2020-10-28T11:24:09Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -74,6 +81,12 @@\n                     .put(Object.class, Function.identity())\n                     .build();\n \n+    /**\n+     * \"Cache\" of converters from string to the Class in the key.\n+     */\n+    private static final Map<Class<?>, Function<String, ?>> convertExternalTypes =\n+            new MapMaker().weakKeys().weakValues().makeMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57be31b2608c080096a3cc40e031fb93d342eb99"}, "originalPosition": 34}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "57be31b2608c080096a3cc40e031fb93d342eb99", "author": {"user": {"login": "tobias-", "name": "Sn\u014dwball"}}, "url": "https://github.com/line/armeria/commit/57be31b2608c080096a3cc40e031fb93d342eb99", "committedDate": "2020-10-28T11:22:28Z", "message": "Add arbitrary param parsers\n\nThis will add the ability to convert String parameters\n(those marked with @Query, @Header and @Param) to be converted\nto any arbitrary object type, provided that the class has at least\none of the following methods (discovered in order):\npublic static T of(String)\npublic static T valueOf(String)\npublic static T fromString(String)\npublic T(String)\n\nIf a method exists but throws an exception on conversion, the next will\nNOT be tried.\n\nCloses #2574"}, "afterCommit": {"oid": "9a9fa299cf789ad94eaf49b39c475dfe268d6b0f", "author": {"user": {"login": "tobias-", "name": "Sn\u014dwball"}}, "url": "https://github.com/line/armeria/commit/9a9fa299cf789ad94eaf49b39c475dfe268d6b0f", "committedDate": "2020-10-28T12:33:43Z", "message": "Add arbitrary param parsers\n\nThis will add the ability to convert String parameters\n(those marked with @Query, @Header and @Param) to be converted\nto any arbitrary object type, provided that the class has at least\none of the following methods (discovered in order):\npublic static T of(String)\npublic static T valueOf(String)\npublic static T fromString(String)\npublic T(String)\n\nIf a method exists but throws an exception on conversion, the next will\nNOT be tried.\n\nCloses #2574"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwMzM2NjEx", "url": "https://github.com/line/armeria/pull/3143#pullrequestreview-520336611", "createdAt": "2020-10-30T02:23:56Z", "commit": {"oid": "9a9fa299cf789ad94eaf49b39c475dfe268d6b0f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMjoyMzo1NlrOHq34CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMjoyNTowN1rOHq38fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDcxNzcwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2018 LINE Corporation\n          \n          \n            \n             * Copyright 2020 LINE Corporation", "url": "https://github.com/line/armeria/pull/3143#discussion_r514717705", "createdAt": "2020-10-30T02:23:56Z", "author": {"login": "heowc"}, "path": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtilTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2018 LINE Corporation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9fa299cf789ad94eaf49b39c475dfe268d6b0f"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDcxODg0Nw==", "bodyText": "I think you can remove all public keywords from that class.", "url": "https://github.com/line/armeria/pull/3143#discussion_r514718847", "createdAt": "2020-10-30T02:25:07Z", "author": {"login": "heowc"}, "path": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtilTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.server.annotation;\n+\n+import static com.linecorp.armeria.internal.server.annotation.AnnotatedServiceTypeUtil.stringToType;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.util.UUID;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class AnnotatedServiceTypeUtilTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9fa299cf789ad94eaf49b39c475dfe268d6b0f"}, "originalPosition": 25}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9a9fa299cf789ad94eaf49b39c475dfe268d6b0f", "author": {"user": {"login": "tobias-", "name": "Sn\u014dwball"}}, "url": "https://github.com/line/armeria/commit/9a9fa299cf789ad94eaf49b39c475dfe268d6b0f", "committedDate": "2020-10-28T12:33:43Z", "message": "Add arbitrary param parsers\n\nThis will add the ability to convert String parameters\n(those marked with @Query, @Header and @Param) to be converted\nto any arbitrary object type, provided that the class has at least\none of the following methods (discovered in order):\npublic static T of(String)\npublic static T valueOf(String)\npublic static T fromString(String)\npublic T(String)\n\nIf a method exists but throws an exception on conversion, the next will\nNOT be tried.\n\nCloses #2574"}, "afterCommit": {"oid": "565febc6a1736f27cb4bba119e32679b398988e6", "author": {"user": {"login": "tobias-", "name": "Sn\u014dwball"}}, "url": "https://github.com/line/armeria/commit/565febc6a1736f27cb4bba119e32679b398988e6", "committedDate": "2020-10-30T07:06:52Z", "message": "Add arbitrary param parsers\n\nThis will add the ability to convert String parameters\n(those marked with @Query, @Header and @Param) to be converted\nto any arbitrary object type, provided that the class has at least\none of the following methods (discovered in order):\npublic static T of(String)\npublic static T valueOf(String)\npublic static T fromString(String)\npublic T(String)\n\nIf a method exists but throws an exception on conversion, the next will\nNOT be tried.\n\nCloses #2574"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwNDg0NjU1", "url": "https://github.com/line/armeria/pull/3143#pullrequestreview-520484655", "createdAt": "2020-10-30T09:10:01Z", "commit": {"oid": "565febc6a1736f27cb4bba119e32679b398988e6"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOToxMDowMVrOHrGktw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOToxMDo0NlrOHrGmGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1ODUxOQ==", "bodyText": "nit: {@code clazz}", "url": "https://github.com/line/armeria/pull/3143#discussion_r514958519", "createdAt": "2020-10-30T09:10:01Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -82,6 +99,73 @@\n                     .put(\"0\", false)\n                     .build();\n \n+    /**\n+     * Try to get a public static method {@link MethodHandle} with a single {@link String} argument\n+     * in clazz.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "565febc6a1736f27cb4bba119e32679b398988e6"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1ODg3NA==", "bodyText": "nit: {@code clazz}", "url": "https://github.com/line/armeria/pull/3143#discussion_r514958874", "createdAt": "2020-10-30T09:10:46Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -82,6 +99,73 @@\n                     .put(\"0\", false)\n                     .build();\n \n+    /**\n+     * Try to get a public static method {@link MethodHandle} with a single {@link String} argument\n+     * in clazz.\n+     * @param <T> the expected result\n+     * @param clazz the class being introspected\n+     * @param methodName the method expected\n+     * @return a function that takes a {@link String} and produces a {@link T}\n+     */\n+    @Nullable\n+    private static <T> MethodHandle getPublicStaticMethodHandle(final Class<T> clazz,\n+                                                                final String methodName) {\n+        try {\n+            final MethodType methodType = MethodType.methodType(clazz, String.class);\n+            return MethodHandles.publicLookup().findStatic(clazz, methodName, methodType);\n+        } catch (Throwable t) {\n+            // No valid public static method found\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Try to get a constructor {@link MethodHandle} with a single {@link String} argument in clazz.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "565febc6a1736f27cb4bba119e32679b398988e6"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwNTQ3MzQ3", "url": "https://github.com/line/armeria/pull/3143#pullrequestreview-520547347", "createdAt": "2020-10-30T10:37:23Z", "commit": {"oid": "565febc6a1736f27cb4bba119e32679b398988e6"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMDozNzoyM1rOHrJcMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMDozODozM1rOHrJebw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAwNTQ4OA==", "bodyText": "Could we also double check the static method returns the object that's compatible with clazz? i.e.\nif (!clazz.isAssignableFrom(methodType.returnType())) {\n    return;\n}\n\n\n\nCould you also add the test case for the static method that returns an incompatible type? e.g.\npublic class Foo {\n    public static Bar of(String value) { new Bar(value); }\n}\npublic class Bar { ... }", "url": "https://github.com/line/armeria/pull/3143#discussion_r515005488", "createdAt": "2020-10-30T10:37:23Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -82,6 +99,73 @@\n                     .put(\"0\", false)\n                     .build();\n \n+    /**\n+     * Try to get a public static method {@link MethodHandle} with a single {@link String} argument\n+     * in clazz.\n+     * @param <T> the expected result\n+     * @param clazz the class being introspected\n+     * @param methodName the method expected\n+     * @return a function that takes a {@link String} and produces a {@link T}\n+     */\n+    @Nullable\n+    private static <T> MethodHandle getPublicStaticMethodHandle(final Class<T> clazz,\n+                                                                final String methodName) {\n+        try {\n+            final MethodType methodType = MethodType.methodType(clazz, String.class);\n+            return MethodHandles.publicLookup().findStatic(clazz, methodName, methodType);\n+        } catch (Throwable t) {\n+            // No valid public static method found\n+            return null;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "565febc6a1736f27cb4bba119e32679b398988e6"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAwNjA2Mw==", "bodyText": "How about returning early when methodHandle == null so we reduce the cognitive load of the reader?", "url": "https://github.com/line/armeria/pull/3143#discussion_r515006063", "createdAt": "2020-10-30T10:38:33Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java", "diffHunk": "@@ -82,6 +99,73 @@\n                     .put(\"0\", false)\n                     .build();\n \n+    /**\n+     * Try to get a public static method {@link MethodHandle} with a single {@link String} argument\n+     * in clazz.\n+     * @param <T> the expected result\n+     * @param clazz the class being introspected\n+     * @param methodName the method expected\n+     * @return a function that takes a {@link String} and produces a {@link T}\n+     */\n+    @Nullable\n+    private static <T> MethodHandle getPublicStaticMethodHandle(final Class<T> clazz,\n+                                                                final String methodName) {\n+        try {\n+            final MethodType methodType = MethodType.methodType(clazz, String.class);\n+            return MethodHandles.publicLookup().findStatic(clazz, methodName, methodType);\n+        } catch (Throwable t) {\n+            // No valid public static method found\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Try to get a constructor {@link MethodHandle} with a single {@link String} argument in clazz.\n+     * @param <T> the expected result\n+     * @param clazz the class being introspected\n+     * @return a function that takes a {@link String} and produces a {@link T}\n+     */\n+    @Nullable\n+    private static <T> MethodHandle getStringConstructorMethodHandle(final Class<T> clazz) {\n+        try {\n+            final MethodType methodType = MethodType.methodType(void.class, String.class);\n+            return MethodHandles.publicLookup().findConstructor(clazz, methodType);\n+        } catch (Throwable t) {\n+            // No valid constructor found\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Try to get a function that can create an instance of type {@code clazz} with a single\n+     * {@link String} argument.\n+     * @param <T> the expected resulting type\n+     * @param clazz the class being introspected\n+     * @return a function that takes a {@link String} and produces a {@code T}\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Nullable\n+    static <T> Function<String, T> getCreatorMethod(Class<T> clazz) {\n+        final MethodHandle methodHandle = Stream.of(\"of\", \"valueOf\", \"fromString\")\n+                     .map((methodName) -> getPublicStaticMethodHandle(clazz, methodName))\n+                     .filter(Objects::nonNull)\n+                     .findFirst()\n+                     .orElseGet(() -> getStringConstructorMethodHandle(clazz));\n+        if (methodHandle != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "565febc6a1736f27cb4bba119e32679b398988e6"}, "originalPosition": 99}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "565febc6a1736f27cb4bba119e32679b398988e6", "author": {"user": {"login": "tobias-", "name": "Sn\u014dwball"}}, "url": "https://github.com/line/armeria/commit/565febc6a1736f27cb4bba119e32679b398988e6", "committedDate": "2020-10-30T07:06:52Z", "message": "Add arbitrary param parsers\n\nThis will add the ability to convert String parameters\n(those marked with @Query, @Header and @Param) to be converted\nto any arbitrary object type, provided that the class has at least\none of the following methods (discovered in order):\npublic static T of(String)\npublic static T valueOf(String)\npublic static T fromString(String)\npublic T(String)\n\nIf a method exists but throws an exception on conversion, the next will\nNOT be tried.\n\nCloses #2574"}, "afterCommit": {"oid": "e5d2902ed9451e1fd7432c0c374f154c67e2b1e6", "author": {"user": {"login": "tobias-", "name": "Sn\u014dwball"}}, "url": "https://github.com/line/armeria/commit/e5d2902ed9451e1fd7432c0c374f154c67e2b1e6", "committedDate": "2020-10-30T11:01:27Z", "message": "Add arbitrary param parsers\n\nThis will add the ability to convert String parameters\n(those marked with @Query, @Header and @Param) to be converted\nto any arbitrary object type, provided that the class has at least\none of the following methods (discovered in order):\npublic static T of(String)\npublic static T valueOf(String)\npublic static T fromString(String)\npublic T(String)\n\nIf a method exists but throws an exception on conversion, the next will\nNOT be tried.\n\nCloses #2574"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwNTY0NTA5", "url": "https://github.com/line/armeria/pull/3143#pullrequestreview-520564509", "createdAt": "2020-10-30T11:03:40Z", "commit": {"oid": "e5d2902ed9451e1fd7432c0c374f154c67e2b1e6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ded76975068fd1bdc5d6a9979846bfbacc3dbb28", "author": {"user": {"login": "tobias-", "name": "Sn\u014dwball"}}, "url": "https://github.com/line/armeria/commit/ded76975068fd1bdc5d6a9979846bfbacc3dbb28", "committedDate": "2020-10-30T11:34:31Z", "message": "Add arbitrary param parsers\n\nThis will add the ability to convert String parameters\n(those marked with @Query, @Header and @Param) to be converted\nto any arbitrary object type, provided that the class has at least\none of the following methods (discovered in order):\npublic static T of(String)\npublic static T valueOf(String)\npublic static T fromString(String)\npublic T(String)\n\nIf a method exists but throws an exception on conversion, the next will\nNOT be tried.\n\nCloses #2574"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e5d2902ed9451e1fd7432c0c374f154c67e2b1e6", "author": {"user": {"login": "tobias-", "name": "Sn\u014dwball"}}, "url": "https://github.com/line/armeria/commit/e5d2902ed9451e1fd7432c0c374f154c67e2b1e6", "committedDate": "2020-10-30T11:01:27Z", "message": "Add arbitrary param parsers\n\nThis will add the ability to convert String parameters\n(those marked with @Query, @Header and @Param) to be converted\nto any arbitrary object type, provided that the class has at least\none of the following methods (discovered in order):\npublic static T of(String)\npublic static T valueOf(String)\npublic static T fromString(String)\npublic T(String)\n\nIf a method exists but throws an exception on conversion, the next will\nNOT be tried.\n\nCloses #2574"}, "afterCommit": {"oid": "ded76975068fd1bdc5d6a9979846bfbacc3dbb28", "author": {"user": {"login": "tobias-", "name": "Sn\u014dwball"}}, "url": "https://github.com/line/armeria/commit/ded76975068fd1bdc5d6a9979846bfbacc3dbb28", "committedDate": "2020-10-30T11:34:31Z", "message": "Add arbitrary param parsers\n\nThis will add the ability to convert String parameters\n(those marked with @Query, @Header and @Param) to be converted\nto any arbitrary object type, provided that the class has at least\none of the following methods (discovered in order):\npublic static T of(String)\npublic static T valueOf(String)\npublic static T fromString(String)\npublic T(String)\n\nIf a method exists but throws an exception on conversion, the next will\nNOT be tried.\n\nCloses #2574"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMTUzOTcz", "url": "https://github.com/line/armeria/pull/3143#pullrequestreview-522153973", "createdAt": "2020-11-03T02:16:58Z", "commit": {"oid": "ded76975068fd1bdc5d6a9979846bfbacc3dbb28"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4777, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}