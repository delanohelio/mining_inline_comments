{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyOTczODc4", "number": 2745, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNDowNzowM1rOD_g95A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNDoxMzo1M1rOD_hBcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTI3MDEyOnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/0.99.6.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNDowNzowM1rOGaN-sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNDowNzowM1rOGaN-sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE0NTIwMg==", "bodyText": "lets -> let", "url": "https://github.com/line/armeria/pull/2745#discussion_r430145202", "createdAt": "2020-05-26T04:07:03Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/0.99.6.mdx", "diffHunk": "@@ -0,0 +1,117 @@\n+## \ud83c\udf1f New features\n+\n+- New <type://CircuitBreakerRule> and <type://CircuitBreakerRuleWithContent> API lets you define a complex", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8824670516f3412cf09d8812bcdb5b981422ee54"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTI3MjgwOnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/0.99.6.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNDowOToxOFrOGaOAWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNDowOToxOFrOGaOAWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE0NTYyNw==", "bodyText": "Move the comment up so that the line is not too long? That being said, please check the release note page code snippets do not overflow horizontally.", "url": "https://github.com/line/armeria/pull/2745#discussion_r430145627", "createdAt": "2020-05-26T04:09:18Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/0.99.6.mdx", "diffHunk": "@@ -0,0 +1,117 @@\n+## \ud83c\udf1f New features\n+\n+- New <type://CircuitBreakerRule> and <type://CircuitBreakerRuleWithContent> API lets you define a complex\n+  circuit breaking policy conveniently. #2726\n+  ```java\n+  CircuitBreakerRule myRule =\n+      CircuitBreakerRule.of(\n+          // A failure if an Exception is raised.\n+          CircuitBreakerRule.onException(),\n+          // Neither a success nor a failure because the request has not been handled by the server.\n+          CircuitBreakerRule.builder()\n+                            .onUnprocessed()\n+                            .thenIgnore(),\n+          // A failure if the response is 5xx.\n+          CircuitBreakerRule.onServerErrorStatus(),\n+          // A success if the response is 2xx.\n+          CircuitBreakerRule.builder()\n+                            .onStatusClass(HttpStatusClass.SUCCESS)\n+                            .thenSuccess(),\n+          // Neither a success nor a failure. Do not take this response into account.\n+          CircuitBreakerRule.builder().thenIgnore());\n+  ```\n+- You can now easily bind an MDC property to a <type://RequestContext> and log it using a logging framework.\n+  #2634 #2724 #2729\n+  ```java\n+  ServiceRequestContext sctx = ...;\n+  try (SafeCloseable ignored = sctx.push()) {\n+      RequestScopedMdc.put(sctx, \"transactionId\", \"1234\");\n+\n+      ClientRequestContext cctx = ...;\n+      try (SafeCloseable ignored2 = cctx.push()) {\n+          assert MDC.get(\"transactionId\").equals(\"1234\");\n+      }\n+  }\n+  ```\n+- You can now install a custom hook to <type://RequestContextStorage> in runtime, usually at startup time. #2723\n+  ```java\n+  RequestContextStorage.hook(delegate -> new RequestContextStorageWrapper(delegate) {\n+      @Nullable\n+      @Override\n+      public <T extends RequestContext> T push(RequestContext toPush) {\n+          MDC.put(\"foo\", toPush.attr(FOO)); // Usually, you can just use RequestScopedMdc for this purpose.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8824670516f3412cf09d8812bcdb5b981422ee54"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTI3MzQ3OnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/0.99.6.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNDowOTo0OVrOGaOAuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNDowOTo0OVrOGaOAuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE0NTcyMA==", "bodyText": "type://DocService", "url": "https://github.com/line/armeria/pull/2745#discussion_r430145720", "createdAt": "2020-05-26T04:09:49Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/0.99.6.mdx", "diffHunk": "@@ -0,0 +1,117 @@\n+## \ud83c\udf1f New features\n+\n+- New <type://CircuitBreakerRule> and <type://CircuitBreakerRuleWithContent> API lets you define a complex\n+  circuit breaking policy conveniently. #2726\n+  ```java\n+  CircuitBreakerRule myRule =\n+      CircuitBreakerRule.of(\n+          // A failure if an Exception is raised.\n+          CircuitBreakerRule.onException(),\n+          // Neither a success nor a failure because the request has not been handled by the server.\n+          CircuitBreakerRule.builder()\n+                            .onUnprocessed()\n+                            .thenIgnore(),\n+          // A failure if the response is 5xx.\n+          CircuitBreakerRule.onServerErrorStatus(),\n+          // A success if the response is 2xx.\n+          CircuitBreakerRule.builder()\n+                            .onStatusClass(HttpStatusClass.SUCCESS)\n+                            .thenSuccess(),\n+          // Neither a success nor a failure. Do not take this response into account.\n+          CircuitBreakerRule.builder().thenIgnore());\n+  ```\n+- You can now easily bind an MDC property to a <type://RequestContext> and log it using a logging framework.\n+  #2634 #2724 #2729\n+  ```java\n+  ServiceRequestContext sctx = ...;\n+  try (SafeCloseable ignored = sctx.push()) {\n+      RequestScopedMdc.put(sctx, \"transactionId\", \"1234\");\n+\n+      ClientRequestContext cctx = ...;\n+      try (SafeCloseable ignored2 = cctx.push()) {\n+          assert MDC.get(\"transactionId\").equals(\"1234\");\n+      }\n+  }\n+  ```\n+- You can now install a custom hook to <type://RequestContextStorage> in runtime, usually at startup time. #2723\n+  ```java\n+  RequestContextStorage.hook(delegate -> new RequestContextStorageWrapper(delegate) {\n+      @Nullable\n+      @Override\n+      public <T extends RequestContext> T push(RequestContext toPush) {\n+          MDC.put(\"foo\", toPush.attr(FOO)); // Usually, you can just use RequestScopedMdc for this purpose.\n+          return super.push(toPush);\n+      }\n+\n+      @Override\n+      public void pop(RequestContext current, @Nullable RequestContext toRestore) {\n+          MDC.remove(\"foo\");\n+          super.pop(current, toRestore);\n+      }\n+\n+      ...\n+  }\n+  ```\n+- You can now set method and parameter descriptions for annotated services in doc service using Javadoc. #2697", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8824670516f3412cf09d8812bcdb5b981422ee54"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTI3NTU5OnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/0.99.6.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNDoxMTozMVrOGaOCAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNDoxMTozMVrOGaOCAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE0NjA1MA==", "bodyText": "recommend -> recommended\nIt is recommended to use ..., though.", "url": "https://github.com/line/armeria/pull/2745#discussion_r430146050", "createdAt": "2020-05-26T04:11:31Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/0.99.6.mdx", "diffHunk": "@@ -0,0 +1,117 @@\n+## \ud83c\udf1f New features\n+\n+- New <type://CircuitBreakerRule> and <type://CircuitBreakerRuleWithContent> API lets you define a complex\n+  circuit breaking policy conveniently. #2726\n+  ```java\n+  CircuitBreakerRule myRule =\n+      CircuitBreakerRule.of(\n+          // A failure if an Exception is raised.\n+          CircuitBreakerRule.onException(),\n+          // Neither a success nor a failure because the request has not been handled by the server.\n+          CircuitBreakerRule.builder()\n+                            .onUnprocessed()\n+                            .thenIgnore(),\n+          // A failure if the response is 5xx.\n+          CircuitBreakerRule.onServerErrorStatus(),\n+          // A success if the response is 2xx.\n+          CircuitBreakerRule.builder()\n+                            .onStatusClass(HttpStatusClass.SUCCESS)\n+                            .thenSuccess(),\n+          // Neither a success nor a failure. Do not take this response into account.\n+          CircuitBreakerRule.builder().thenIgnore());\n+  ```\n+- You can now easily bind an MDC property to a <type://RequestContext> and log it using a logging framework.\n+  #2634 #2724 #2729\n+  ```java\n+  ServiceRequestContext sctx = ...;\n+  try (SafeCloseable ignored = sctx.push()) {\n+      RequestScopedMdc.put(sctx, \"transactionId\", \"1234\");\n+\n+      ClientRequestContext cctx = ...;\n+      try (SafeCloseable ignored2 = cctx.push()) {\n+          assert MDC.get(\"transactionId\").equals(\"1234\");\n+      }\n+  }\n+  ```\n+- You can now install a custom hook to <type://RequestContextStorage> in runtime, usually at startup time. #2723\n+  ```java\n+  RequestContextStorage.hook(delegate -> new RequestContextStorageWrapper(delegate) {\n+      @Nullable\n+      @Override\n+      public <T extends RequestContext> T push(RequestContext toPush) {\n+          MDC.put(\"foo\", toPush.attr(FOO)); // Usually, you can just use RequestScopedMdc for this purpose.\n+          return super.push(toPush);\n+      }\n+\n+      @Override\n+      public void pop(RequestContext current, @Nullable RequestContext toRestore) {\n+          MDC.remove(\"foo\");\n+          super.pop(current, toRestore);\n+      }\n+\n+      ...\n+  }\n+  ```\n+- You can now set method and parameter descriptions for annotated services in doc service using Javadoc. #2697\n+- You can now easily sanitize headers and content using <type://RegexBasedSanitizer>. #1810 #2721\n+\n+## \ud83d\udcc8 Improvements\n+\n+- You can now easily call `ownAttr()` from <type://RequestContext>. #2727\n+  - You don't have to check if the context is <type://ClientRequestContext> or not anymore.\n+  - `root()` and `ownAttrs()` are pulled up as well.\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- You can now use Armeria 0.99.6 with Micrometer 1.3.9 (Using Micrometer 1.5.1 is recommend though). #2742", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8824670516f3412cf09d8812bcdb5b981422ee54"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTI3NjQ0OnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/0.99.6.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNDoxMjoxNlrOGaOCgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNDoxMjoxNlrOGaOCgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE0NjE3OA==", "bodyText": "type://DocService", "url": "https://github.com/line/armeria/pull/2745#discussion_r430146178", "createdAt": "2020-05-26T04:12:16Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/0.99.6.mdx", "diffHunk": "@@ -0,0 +1,117 @@\n+## \ud83c\udf1f New features\n+\n+- New <type://CircuitBreakerRule> and <type://CircuitBreakerRuleWithContent> API lets you define a complex\n+  circuit breaking policy conveniently. #2726\n+  ```java\n+  CircuitBreakerRule myRule =\n+      CircuitBreakerRule.of(\n+          // A failure if an Exception is raised.\n+          CircuitBreakerRule.onException(),\n+          // Neither a success nor a failure because the request has not been handled by the server.\n+          CircuitBreakerRule.builder()\n+                            .onUnprocessed()\n+                            .thenIgnore(),\n+          // A failure if the response is 5xx.\n+          CircuitBreakerRule.onServerErrorStatus(),\n+          // A success if the response is 2xx.\n+          CircuitBreakerRule.builder()\n+                            .onStatusClass(HttpStatusClass.SUCCESS)\n+                            .thenSuccess(),\n+          // Neither a success nor a failure. Do not take this response into account.\n+          CircuitBreakerRule.builder().thenIgnore());\n+  ```\n+- You can now easily bind an MDC property to a <type://RequestContext> and log it using a logging framework.\n+  #2634 #2724 #2729\n+  ```java\n+  ServiceRequestContext sctx = ...;\n+  try (SafeCloseable ignored = sctx.push()) {\n+      RequestScopedMdc.put(sctx, \"transactionId\", \"1234\");\n+\n+      ClientRequestContext cctx = ...;\n+      try (SafeCloseable ignored2 = cctx.push()) {\n+          assert MDC.get(\"transactionId\").equals(\"1234\");\n+      }\n+  }\n+  ```\n+- You can now install a custom hook to <type://RequestContextStorage> in runtime, usually at startup time. #2723\n+  ```java\n+  RequestContextStorage.hook(delegate -> new RequestContextStorageWrapper(delegate) {\n+      @Nullable\n+      @Override\n+      public <T extends RequestContext> T push(RequestContext toPush) {\n+          MDC.put(\"foo\", toPush.attr(FOO)); // Usually, you can just use RequestScopedMdc for this purpose.\n+          return super.push(toPush);\n+      }\n+\n+      @Override\n+      public void pop(RequestContext current, @Nullable RequestContext toRestore) {\n+          MDC.remove(\"foo\");\n+          super.pop(current, toRestore);\n+      }\n+\n+      ...\n+  }\n+  ```\n+- You can now set method and parameter descriptions for annotated services in doc service using Javadoc. #2697\n+- You can now easily sanitize headers and content using <type://RegexBasedSanitizer>. #1810 #2721\n+\n+## \ud83d\udcc8 Improvements\n+\n+- You can now easily call `ownAttr()` from <type://RequestContext>. #2727\n+  - You don't have to check if the context is <type://ClientRequestContext> or not anymore.\n+  - `root()` and `ownAttrs()` are pulled up as well.\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- You can now use Armeria 0.99.6 with Micrometer 1.3.9 (Using Micrometer 1.5.1 is recommend though). #2742\n+- You can now retry even when the current <type://EndpointGroup> is empty. #2736\n+- You can send a request by setting the authority and scheme header to <type://RequestHeaders>. #2730 #2734\n+- You no longer see `&lt;zero-length response&gt;` in doc service anymore. #2732", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8824670516f3412cf09d8812bcdb5b981422ee54"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTI3ODI0OnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/0.99.6.mdx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNDoxMzowMVrOGaODaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNDoxMzowMVrOGaODaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE0NjQwOQ==", "bodyText": "while building ... -> when Armeria is shaded.", "url": "https://github.com/line/armeria/pull/2745#discussion_r430146409", "createdAt": "2020-05-26T04:13:01Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/0.99.6.mdx", "diffHunk": "@@ -0,0 +1,117 @@\n+## \ud83c\udf1f New features\n+\n+- New <type://CircuitBreakerRule> and <type://CircuitBreakerRuleWithContent> API lets you define a complex\n+  circuit breaking policy conveniently. #2726\n+  ```java\n+  CircuitBreakerRule myRule =\n+      CircuitBreakerRule.of(\n+          // A failure if an Exception is raised.\n+          CircuitBreakerRule.onException(),\n+          // Neither a success nor a failure because the request has not been handled by the server.\n+          CircuitBreakerRule.builder()\n+                            .onUnprocessed()\n+                            .thenIgnore(),\n+          // A failure if the response is 5xx.\n+          CircuitBreakerRule.onServerErrorStatus(),\n+          // A success if the response is 2xx.\n+          CircuitBreakerRule.builder()\n+                            .onStatusClass(HttpStatusClass.SUCCESS)\n+                            .thenSuccess(),\n+          // Neither a success nor a failure. Do not take this response into account.\n+          CircuitBreakerRule.builder().thenIgnore());\n+  ```\n+- You can now easily bind an MDC property to a <type://RequestContext> and log it using a logging framework.\n+  #2634 #2724 #2729\n+  ```java\n+  ServiceRequestContext sctx = ...;\n+  try (SafeCloseable ignored = sctx.push()) {\n+      RequestScopedMdc.put(sctx, \"transactionId\", \"1234\");\n+\n+      ClientRequestContext cctx = ...;\n+      try (SafeCloseable ignored2 = cctx.push()) {\n+          assert MDC.get(\"transactionId\").equals(\"1234\");\n+      }\n+  }\n+  ```\n+- You can now install a custom hook to <type://RequestContextStorage> in runtime, usually at startup time. #2723\n+  ```java\n+  RequestContextStorage.hook(delegate -> new RequestContextStorageWrapper(delegate) {\n+      @Nullable\n+      @Override\n+      public <T extends RequestContext> T push(RequestContext toPush) {\n+          MDC.put(\"foo\", toPush.attr(FOO)); // Usually, you can just use RequestScopedMdc for this purpose.\n+          return super.push(toPush);\n+      }\n+\n+      @Override\n+      public void pop(RequestContext current, @Nullable RequestContext toRestore) {\n+          MDC.remove(\"foo\");\n+          super.pop(current, toRestore);\n+      }\n+\n+      ...\n+  }\n+  ```\n+- You can now set method and parameter descriptions for annotated services in doc service using Javadoc. #2697\n+- You can now easily sanitize headers and content using <type://RegexBasedSanitizer>. #1810 #2721\n+\n+## \ud83d\udcc8 Improvements\n+\n+- You can now easily call `ownAttr()` from <type://RequestContext>. #2727\n+  - You don't have to check if the context is <type://ClientRequestContext> or not anymore.\n+  - `root()` and `ownAttrs()` are pulled up as well.\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- You can now use Armeria 0.99.6 with Micrometer 1.3.9 (Using Micrometer 1.5.1 is recommend though). #2742\n+- You can now retry even when the current <type://EndpointGroup> is empty. #2736\n+- You can send a request by setting the authority and scheme header to <type://RequestHeaders>. #2730 #2734\n+- You no longer see `&lt;zero-length response&gt;` in doc service anymore. #2732\n+- A `NullPointerException` is not raised anymore due to the dependency order while building with Armeria.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8824670516f3412cf09d8812bcdb5b981422ee54"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTI3OTIxOnYy", "diffSide": "RIGHT", "path": "site/src/pages/release-notes/0.99.6.mdx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNDoxMzo1M1rOGaOEDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNDoxOTo0N1rOGaOIkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE0NjU3Mw==", "bodyText": "Unicode arrows?", "url": "https://github.com/line/armeria/pull/2745#discussion_r430146573", "createdAt": "2020-05-26T04:13:53Z", "author": {"login": "trustin"}, "path": "site/src/pages/release-notes/0.99.6.mdx", "diffHunk": "@@ -0,0 +1,117 @@\n+## \ud83c\udf1f New features\n+\n+- New <type://CircuitBreakerRule> and <type://CircuitBreakerRuleWithContent> API lets you define a complex\n+  circuit breaking policy conveniently. #2726\n+  ```java\n+  CircuitBreakerRule myRule =\n+      CircuitBreakerRule.of(\n+          // A failure if an Exception is raised.\n+          CircuitBreakerRule.onException(),\n+          // Neither a success nor a failure because the request has not been handled by the server.\n+          CircuitBreakerRule.builder()\n+                            .onUnprocessed()\n+                            .thenIgnore(),\n+          // A failure if the response is 5xx.\n+          CircuitBreakerRule.onServerErrorStatus(),\n+          // A success if the response is 2xx.\n+          CircuitBreakerRule.builder()\n+                            .onStatusClass(HttpStatusClass.SUCCESS)\n+                            .thenSuccess(),\n+          // Neither a success nor a failure. Do not take this response into account.\n+          CircuitBreakerRule.builder().thenIgnore());\n+  ```\n+- You can now easily bind an MDC property to a <type://RequestContext> and log it using a logging framework.\n+  #2634 #2724 #2729\n+  ```java\n+  ServiceRequestContext sctx = ...;\n+  try (SafeCloseable ignored = sctx.push()) {\n+      RequestScopedMdc.put(sctx, \"transactionId\", \"1234\");\n+\n+      ClientRequestContext cctx = ...;\n+      try (SafeCloseable ignored2 = cctx.push()) {\n+          assert MDC.get(\"transactionId\").equals(\"1234\");\n+      }\n+  }\n+  ```\n+- You can now install a custom hook to <type://RequestContextStorage> in runtime, usually at startup time. #2723\n+  ```java\n+  RequestContextStorage.hook(delegate -> new RequestContextStorageWrapper(delegate) {\n+      @Nullable\n+      @Override\n+      public <T extends RequestContext> T push(RequestContext toPush) {\n+          MDC.put(\"foo\", toPush.attr(FOO)); // Usually, you can just use RequestScopedMdc for this purpose.\n+          return super.push(toPush);\n+      }\n+\n+      @Override\n+      public void pop(RequestContext current, @Nullable RequestContext toRestore) {\n+          MDC.remove(\"foo\");\n+          super.pop(current, toRestore);\n+      }\n+\n+      ...\n+  }\n+  ```\n+- You can now set method and parameter descriptions for annotated services in doc service using Javadoc. #2697\n+- You can now easily sanitize headers and content using <type://RegexBasedSanitizer>. #1810 #2721\n+\n+## \ud83d\udcc8 Improvements\n+\n+- You can now easily call `ownAttr()` from <type://RequestContext>. #2727\n+  - You don't have to check if the context is <type://ClientRequestContext> or not anymore.\n+  - `root()` and `ownAttrs()` are pulled up as well.\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- You can now use Armeria 0.99.6 with Micrometer 1.3.9 (Using Micrometer 1.5.1 is recommend though). #2742\n+- You can now retry even when the current <type://EndpointGroup> is empty. #2736\n+- You can send a request by setting the authority and scheme header to <type://RequestHeaders>. #2730 #2734\n+- You no longer see `&lt;zero-length response&gt;` in doc service anymore. #2732\n+- A `NullPointerException` is not raised anymore due to the dependency order while building with Armeria.\n+  #2731 #2735\n+\n+## \u2622\ufe0f Breaking changes\n+\n+- `RetryStrategy` and `RetryStrategyWithContent` are gone in favor of\n+  <type://RetryRule> and <type://RetryRuleWithContent>. #2726\n+- `CircuitBreakerStrategy` and `CircuitBreakerStrategyWithContent` are gone in favor of\n+  <type://CircuitBreakerRule> and <type://CircuitBreakerRuleWithContent>. #2726\n+- `EndpointSelector.select()` (and thus EndpointGroup.select() as well) now returns `null`\n+  instead of throwing an <type://EmptyEndpointGroupException>. #2736\n+- The method signature of `ClientFactory.acquireEventLoop()` and `EventLoopScheduler.acquire()`\n+  have been changed. #2736\n+\n+## \u26d3 Dependencies\n+\n+- Brave 5.11.2 -> 5.12.3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8824670516f3412cf09d8812bcdb5b981422ee54"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE0NzcyOA==", "bodyText": "Oops, didn't notice that. \ud83d\ude05", "url": "https://github.com/line/armeria/pull/2745#discussion_r430147728", "createdAt": "2020-05-26T04:19:47Z", "author": {"login": "minwoox"}, "path": "site/src/pages/release-notes/0.99.6.mdx", "diffHunk": "@@ -0,0 +1,117 @@\n+## \ud83c\udf1f New features\n+\n+- New <type://CircuitBreakerRule> and <type://CircuitBreakerRuleWithContent> API lets you define a complex\n+  circuit breaking policy conveniently. #2726\n+  ```java\n+  CircuitBreakerRule myRule =\n+      CircuitBreakerRule.of(\n+          // A failure if an Exception is raised.\n+          CircuitBreakerRule.onException(),\n+          // Neither a success nor a failure because the request has not been handled by the server.\n+          CircuitBreakerRule.builder()\n+                            .onUnprocessed()\n+                            .thenIgnore(),\n+          // A failure if the response is 5xx.\n+          CircuitBreakerRule.onServerErrorStatus(),\n+          // A success if the response is 2xx.\n+          CircuitBreakerRule.builder()\n+                            .onStatusClass(HttpStatusClass.SUCCESS)\n+                            .thenSuccess(),\n+          // Neither a success nor a failure. Do not take this response into account.\n+          CircuitBreakerRule.builder().thenIgnore());\n+  ```\n+- You can now easily bind an MDC property to a <type://RequestContext> and log it using a logging framework.\n+  #2634 #2724 #2729\n+  ```java\n+  ServiceRequestContext sctx = ...;\n+  try (SafeCloseable ignored = sctx.push()) {\n+      RequestScopedMdc.put(sctx, \"transactionId\", \"1234\");\n+\n+      ClientRequestContext cctx = ...;\n+      try (SafeCloseable ignored2 = cctx.push()) {\n+          assert MDC.get(\"transactionId\").equals(\"1234\");\n+      }\n+  }\n+  ```\n+- You can now install a custom hook to <type://RequestContextStorage> in runtime, usually at startup time. #2723\n+  ```java\n+  RequestContextStorage.hook(delegate -> new RequestContextStorageWrapper(delegate) {\n+      @Nullable\n+      @Override\n+      public <T extends RequestContext> T push(RequestContext toPush) {\n+          MDC.put(\"foo\", toPush.attr(FOO)); // Usually, you can just use RequestScopedMdc for this purpose.\n+          return super.push(toPush);\n+      }\n+\n+      @Override\n+      public void pop(RequestContext current, @Nullable RequestContext toRestore) {\n+          MDC.remove(\"foo\");\n+          super.pop(current, toRestore);\n+      }\n+\n+      ...\n+  }\n+  ```\n+- You can now set method and parameter descriptions for annotated services in doc service using Javadoc. #2697\n+- You can now easily sanitize headers and content using <type://RegexBasedSanitizer>. #1810 #2721\n+\n+## \ud83d\udcc8 Improvements\n+\n+- You can now easily call `ownAttr()` from <type://RequestContext>. #2727\n+  - You don't have to check if the context is <type://ClientRequestContext> or not anymore.\n+  - `root()` and `ownAttrs()` are pulled up as well.\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- You can now use Armeria 0.99.6 with Micrometer 1.3.9 (Using Micrometer 1.5.1 is recommend though). #2742\n+- You can now retry even when the current <type://EndpointGroup> is empty. #2736\n+- You can send a request by setting the authority and scheme header to <type://RequestHeaders>. #2730 #2734\n+- You no longer see `&lt;zero-length response&gt;` in doc service anymore. #2732\n+- A `NullPointerException` is not raised anymore due to the dependency order while building with Armeria.\n+  #2731 #2735\n+\n+## \u2622\ufe0f Breaking changes\n+\n+- `RetryStrategy` and `RetryStrategyWithContent` are gone in favor of\n+  <type://RetryRule> and <type://RetryRuleWithContent>. #2726\n+- `CircuitBreakerStrategy` and `CircuitBreakerStrategyWithContent` are gone in favor of\n+  <type://CircuitBreakerRule> and <type://CircuitBreakerRuleWithContent>. #2726\n+- `EndpointSelector.select()` (and thus EndpointGroup.select() as well) now returns `null`\n+  instead of throwing an <type://EmptyEndpointGroupException>. #2736\n+- The method signature of `ClientFactory.acquireEventLoop()` and `EventLoopScheduler.acquire()`\n+  have been changed. #2736\n+\n+## \u26d3 Dependencies\n+\n+- Brave 5.11.2 -> 5.12.3", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE0NjU3Mw=="}, "originalCommit": {"oid": "8824670516f3412cf09d8812bcdb5b981422ee54"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2660, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}