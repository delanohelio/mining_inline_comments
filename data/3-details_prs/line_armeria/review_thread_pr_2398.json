{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyOTU3MjQ1", "number": 2398, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwNjowNzo0OVrODYEkPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOTozMjowMFrODYHGIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTY3MjI4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/util/Version.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwNjowNzo0OVrOFduGjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwNjowNzo0OVrOFduGjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjcwODM2Ng==", "bodyText": "jar -> JAR?", "url": "https://github.com/line/armeria/pull/2398#discussion_r366708366", "createdAt": "2020-01-15T06:07:49Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/common/util/Version.java", "diffHunk": "@@ -89,61 +99,76 @@\n     public static Map<String, Version> identify(ClassLoader classLoader) {\n         requireNonNull(classLoader, \"classLoader\");\n \n-        // Collect all properties.\n-        final Properties props = new Properties();\n-        try {\n-            final Enumeration<URL> resources = classLoader.getResources(PROP_RESOURCE_PATH);\n-            while (resources.hasMoreElements()) {\n-                final URL url = resources.nextElement();\n-                final InputStream in = url.openStream();\n-                try {\n-                    props.load(in);\n-                } finally {\n-                    Closeables.closeQuietly(in);\n+        return VERSIONS.computeIfAbsent(classLoader, cl -> {\n+            boolean foundProperties = false;\n+\n+            // Collect all properties.\n+            final Properties props = new Properties();\n+            try {\n+                final Enumeration<URL> resources = cl.getResources(PROP_RESOURCE_PATH);\n+                while (resources.hasMoreElements()) {\n+                    foundProperties = true;\n+                    final URL url = resources.nextElement();\n+                    final InputStream in = url.openStream();\n+                    try {\n+                        props.load(in);\n+                    } finally {\n+                        Closeables.closeQuietly(in);\n+                    }\n                 }\n+            } catch (Exception ignore) {\n+                // Not critical. Just ignore.\n             }\n-        } catch (Exception ignore) {\n-            // Not critical. Just ignore.\n-        }\n \n-        // Collect all artifactIds.\n-        final Set<String> artifactIds = new HashSet<>();\n-        for (Object o: props.keySet()) {\n-            final String k = (String) o;\n-\n-            final int dotIndex = k.indexOf('.');\n-            if (dotIndex <= 0) {\n-                continue;\n+            if (!foundProperties) {\n+                logger.info(\n+                        \"Could not find any property files at \" +\n+                        \"META-INF/com.linecorp.armeria.versions.properties. \" +\n+                        \"This usually indicates an issue with your application packaging, for example using \" +\n+                        \"a fat-jar method that only keeps one copy of any file. For maximum functionality, \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0761441c2eaeec6c0d453ccd04ef5cc155619f6d"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTY3MzY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/server/Server.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwNjowODozN1rOFduHTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOToxODo0NVrOFdxn1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjcwODU1Ng==", "bodyText": "Should we fall back to the values like UNKNOWN?", "url": "https://github.com/line/armeria/pull/2398#discussion_r366708556", "createdAt": "2020-01-15T06:08:37Z", "author": {"login": "trustin"}, "path": "core/src/main/java/com/linecorp/armeria/server/Server.java", "diffHunk": "@@ -317,21 +317,23 @@ public int numConnections() {\n     @VisibleForTesting\n     void setupVersionMetrics() {\n         final MeterRegistry meterRegistry = config().meterRegistry();\n-        final Map<String, Version> map = Version.identify(getClass().getClassLoader());\n+        final Map<String, Version> map = Version.identify(Server.class.getClassLoader());\n         final Version versionInfo = map.get(\"armeria\");\n-        final String version = versionInfo.artifactVersion();\n-        final String commit = versionInfo.longCommitHash();\n-        final String repositoryStatus = versionInfo.repositoryStatus();\n-        final List<Tag> tags = ImmutableList.of(Tag.of(\"version\", version),\n-                                                Tag.of(\"commit\", commit),\n-                                                Tag.of(Flags.useLegacyMeterNames() ? \"repoStatus\"\n-                                                                                   : \"repo.status\",\n-                                                       repositoryStatus));\n-        Gauge.builder(\"armeria.build.info\", () -> 1)\n-             .tags(tags)\n-             .description(\"A metric with a constant '1' value labeled by version and commit hash\" +\n-                          \" from which Armeria was built.\")\n-             .register(meterRegistry);\n+        if (versionInfo != null) {\n+            final String version = versionInfo.artifactVersion();\n+            final String commit = versionInfo.longCommitHash();\n+            final String repositoryStatus = versionInfo.repositoryStatus();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0761441c2eaeec6c0d453ccd04ef5cc155619f6d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc2NjAzNg==", "bodyText": "Ah good point, went ahead and added methods that will return a default value when not found.", "url": "https://github.com/line/armeria/pull/2398#discussion_r366766036", "createdAt": "2020-01-15T09:18:45Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/server/Server.java", "diffHunk": "@@ -317,21 +317,23 @@ public int numConnections() {\n     @VisibleForTesting\n     void setupVersionMetrics() {\n         final MeterRegistry meterRegistry = config().meterRegistry();\n-        final Map<String, Version> map = Version.identify(getClass().getClassLoader());\n+        final Map<String, Version> map = Version.identify(Server.class.getClassLoader());\n         final Version versionInfo = map.get(\"armeria\");\n-        final String version = versionInfo.artifactVersion();\n-        final String commit = versionInfo.longCommitHash();\n-        final String repositoryStatus = versionInfo.repositoryStatus();\n-        final List<Tag> tags = ImmutableList.of(Tag.of(\"version\", version),\n-                                                Tag.of(\"commit\", commit),\n-                                                Tag.of(Flags.useLegacyMeterNames() ? \"repoStatus\"\n-                                                                                   : \"repo.status\",\n-                                                       repositoryStatus));\n-        Gauge.builder(\"armeria.build.info\", () -> 1)\n-             .tags(tags)\n-             .description(\"A metric with a constant '1' value labeled by version and commit hash\" +\n-                          \" from which Armeria was built.\")\n-             .register(meterRegistry);\n+        if (versionInfo != null) {\n+            final String version = versionInfo.artifactVersion();\n+            final String commit = versionInfo.longCommitHash();\n+            final String repositoryStatus = versionInfo.repositoryStatus();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjcwODU1Ng=="}, "originalCommit": {"oid": "0761441c2eaeec6c0d453ccd04ef5cc155619f6d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTcwMjIzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/util/Version.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwNjozMDoxMVrOFduYEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwNjozMDoxMVrOFduYEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjcxMjg0OA==", "bodyText": "nit: space between o:", "url": "https://github.com/line/armeria/pull/2398#discussion_r366712848", "createdAt": "2020-01-15T06:30:11Z", "author": {"login": "minwoox"}, "path": "core/src/main/java/com/linecorp/armeria/common/util/Version.java", "diffHunk": "@@ -89,61 +99,76 @@\n     public static Map<String, Version> identify(ClassLoader classLoader) {\n         requireNonNull(classLoader, \"classLoader\");\n \n-        // Collect all properties.\n-        final Properties props = new Properties();\n-        try {\n-            final Enumeration<URL> resources = classLoader.getResources(PROP_RESOURCE_PATH);\n-            while (resources.hasMoreElements()) {\n-                final URL url = resources.nextElement();\n-                final InputStream in = url.openStream();\n-                try {\n-                    props.load(in);\n-                } finally {\n-                    Closeables.closeQuietly(in);\n+        return VERSIONS.computeIfAbsent(classLoader, cl -> {\n+            boolean foundProperties = false;\n+\n+            // Collect all properties.\n+            final Properties props = new Properties();\n+            try {\n+                final Enumeration<URL> resources = cl.getResources(PROP_RESOURCE_PATH);\n+                while (resources.hasMoreElements()) {\n+                    foundProperties = true;\n+                    final URL url = resources.nextElement();\n+                    final InputStream in = url.openStream();\n+                    try {\n+                        props.load(in);\n+                    } finally {\n+                        Closeables.closeQuietly(in);\n+                    }\n                 }\n+            } catch (Exception ignore) {\n+                // Not critical. Just ignore.\n             }\n-        } catch (Exception ignore) {\n-            // Not critical. Just ignore.\n-        }\n \n-        // Collect all artifactIds.\n-        final Set<String> artifactIds = new HashSet<>();\n-        for (Object o: props.keySet()) {\n-            final String k = (String) o;\n-\n-            final int dotIndex = k.indexOf('.');\n-            if (dotIndex <= 0) {\n-                continue;\n+            if (!foundProperties) {\n+                logger.info(\n+                        \"Could not find any property files at \" +\n+                        \"META-INF/com.linecorp.armeria.versions.properties. \" +\n+                        \"This usually indicates an issue with your application packaging, for example using \" +\n+                        \"a fat-jar method that only keeps one copy of any file. For maximum functionality, \" +\n+                        \"it is recommended to fix your packaging to include these files.\");\n+                return ImmutableMap.of();\n             }\n \n-            final String artifactId = k.substring(0, dotIndex);\n+            // Collect all artifactIds.\n+            final Set<String> artifactIds = new HashSet<>();\n+            for (Object o: props.keySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0761441c2eaeec6c0d453ccd04ef5cc155619f6d"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NjA4NDc3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/util/Version.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOTozMToxOFrOFdx_MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOTo1NjozMVrOFdywEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc3MjAxNw==", "bodyText": "nit: make it singleton?", "url": "https://github.com/line/armeria/pull/2398#discussion_r366772017", "createdAt": "2020-01-15T09:31:18Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/util/Version.java", "diffHunk": "@@ -71,6 +78,36 @@\n     private static final String PROP_LONG_COMMIT_HASH = \".longCommitHash\";\n     private static final String PROP_REPO_STATUS = \".repoStatus\";\n \n+    private static final Map<ClassLoader, Map<String, Version>> VERSIONS =\n+            new MapMaker().weakKeys().makeMap();\n+\n+    /**\n+     * Returns the version information for the Armeria artifact named {@code artifactId}. If information for\n+     * the artifact can't be found, a default value is returned with arbitrary {@code unknown} values.\n+     */\n+    public static Version get(String artifactId) {\n+        return get(artifactId, Version.class.getClassLoader());\n+    }\n+\n+    /**\n+     * Returns the version information for the Armeria artifact named {@code artifactId} using the specified\n+     * {@link ClassLoader}. If information for the artifact can't be found, a default value is returned\n+     * with arbitrary {@code unknown} values.\n+     */\n+    public static Version get(String artifactId, ClassLoader classLoader) {\n+        final Version version = identify(classLoader).get(artifactId);\n+        if (version != null) {\n+            return version;\n+        }\n+        return new Version(\n+                artifactId,\n+                \"unknown\",\n+                0,\n+                \"unknown\",\n+                \"unknown\",\n+                \"unknown\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15ba002a86c44da6e34db46a57da753bf0a1e0c5"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc3NDc4OQ==", "bodyText": "Unfortunately, it has artifactId mainly for use in DocService. I could special-case docservice itself but since this is an unexpected case, I figured it's fine to keep it simple like this.", "url": "https://github.com/line/armeria/pull/2398#discussion_r366774789", "createdAt": "2020-01-15T09:37:09Z", "author": {"login": "anuraaga"}, "path": "core/src/main/java/com/linecorp/armeria/common/util/Version.java", "diffHunk": "@@ -71,6 +78,36 @@\n     private static final String PROP_LONG_COMMIT_HASH = \".longCommitHash\";\n     private static final String PROP_REPO_STATUS = \".repoStatus\";\n \n+    private static final Map<ClassLoader, Map<String, Version>> VERSIONS =\n+            new MapMaker().weakKeys().makeMap();\n+\n+    /**\n+     * Returns the version information for the Armeria artifact named {@code artifactId}. If information for\n+     * the artifact can't be found, a default value is returned with arbitrary {@code unknown} values.\n+     */\n+    public static Version get(String artifactId) {\n+        return get(artifactId, Version.class.getClassLoader());\n+    }\n+\n+    /**\n+     * Returns the version information for the Armeria artifact named {@code artifactId} using the specified\n+     * {@link ClassLoader}. If information for the artifact can't be found, a default value is returned\n+     * with arbitrary {@code unknown} values.\n+     */\n+    public static Version get(String artifactId, ClassLoader classLoader) {\n+        final Version version = identify(classLoader).get(artifactId);\n+        if (version != null) {\n+            return version;\n+        }\n+        return new Version(\n+                artifactId,\n+                \"unknown\",\n+                0,\n+                \"unknown\",\n+                \"unknown\",\n+                \"unknown\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc3MjAxNw=="}, "originalCommit": {"oid": "15ba002a86c44da6e34db46a57da753bf0a1e0c5"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc4NDUzMQ==", "bodyText": "If this is mainly used for DocsService, LGTM \ud83d\udc4d", "url": "https://github.com/line/armeria/pull/2398#discussion_r366784531", "createdAt": "2020-01-15T09:56:31Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/util/Version.java", "diffHunk": "@@ -71,6 +78,36 @@\n     private static final String PROP_LONG_COMMIT_HASH = \".longCommitHash\";\n     private static final String PROP_REPO_STATUS = \".repoStatus\";\n \n+    private static final Map<ClassLoader, Map<String, Version>> VERSIONS =\n+            new MapMaker().weakKeys().makeMap();\n+\n+    /**\n+     * Returns the version information for the Armeria artifact named {@code artifactId}. If information for\n+     * the artifact can't be found, a default value is returned with arbitrary {@code unknown} values.\n+     */\n+    public static Version get(String artifactId) {\n+        return get(artifactId, Version.class.getClassLoader());\n+    }\n+\n+    /**\n+     * Returns the version information for the Armeria artifact named {@code artifactId} using the specified\n+     * {@link ClassLoader}. If information for the artifact can't be found, a default value is returned\n+     * with arbitrary {@code unknown} values.\n+     */\n+    public static Version get(String artifactId, ClassLoader classLoader) {\n+        final Version version = identify(classLoader).get(artifactId);\n+        if (version != null) {\n+            return version;\n+        }\n+        return new Version(\n+                artifactId,\n+                \"unknown\",\n+                0,\n+                \"unknown\",\n+                \"unknown\",\n+                \"unknown\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc3MjAxNw=="}, "originalCommit": {"oid": "15ba002a86c44da6e34db46a57da753bf0a1e0c5"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NjA4Njc1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/linecorp/armeria/common/util/Version.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOTozMjowMFrOFdyAYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOTozMjowMFrOFdyAYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc3MjMyMQ==", "bodyText": "Nice! \ud83d\udc4d", "url": "https://github.com/line/armeria/pull/2398#discussion_r366772321", "createdAt": "2020-01-15T09:32:00Z", "author": {"login": "ikhoon"}, "path": "core/src/main/java/com/linecorp/armeria/common/util/Version.java", "diffHunk": "@@ -71,6 +78,36 @@\n     private static final String PROP_LONG_COMMIT_HASH = \".longCommitHash\";\n     private static final String PROP_REPO_STATUS = \".repoStatus\";\n \n+    private static final Map<ClassLoader, Map<String, Version>> VERSIONS =\n+            new MapMaker().weakKeys().makeMap();\n+\n+    /**\n+     * Returns the version information for the Armeria artifact named {@code artifactId}. If information for\n+     * the artifact can't be found, a default value is returned with arbitrary {@code unknown} values.\n+     */\n+    public static Version get(String artifactId) {\n+        return get(artifactId, Version.class.getClassLoader());\n+    }\n+\n+    /**\n+     * Returns the version information for the Armeria artifact named {@code artifactId} using the specified\n+     * {@link ClassLoader}. If information for the artifact can't be found, a default value is returned\n+     * with arbitrary {@code unknown} values.\n+     */\n+    public static Version get(String artifactId, ClassLoader classLoader) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15ba002a86c44da6e34db46a57da753bf0a1e0c5"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2899, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}