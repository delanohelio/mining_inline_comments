{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyMDc2Nzk0", "number": 334, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjoyMTowNFrOE50n7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODozOTo1OVrOE_Sd0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDY2NDc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjoyMTowNFrOH0h0Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMzoxNjo0N1rOH00SZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0MjA0Ng==", "bodyText": "we don't use star imports typically. Old codestyle has some but we are moving away from that", "url": "https://github.com/FabricMC/fabric-loader/pull/334#discussion_r524842046", "createdAt": "2020-11-17T02:21:04Z", "author": {"login": "i509VCB"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -19,28 +19,23 @@\n import com.google.common.jimfs.Configuration;\n import com.google.common.jimfs.Jimfs;\n import com.google.common.jimfs.PathType;\n-\n import net.fabricmc.loader.FabricLoader;\n+import net.fabricmc.loader.api.Version;\n import net.fabricmc.loader.api.metadata.ModDependency;\n import net.fabricmc.loader.game.GameProvider.BuiltinMod;\n-import net.fabricmc.loader.api.Version;\n import net.fabricmc.loader.launch.common.FabricLauncherBase;\n import net.fabricmc.loader.lib.gson.MalformedJsonException;\n import net.fabricmc.loader.metadata.LoaderModMetadata;\n-import net.fabricmc.loader.metadata.NestedJarEntry;\n import net.fabricmc.loader.metadata.ModMetadataParser;\n+import net.fabricmc.loader.metadata.NestedJarEntry;\n import net.fabricmc.loader.metadata.ParseMetadataException;\n import net.fabricmc.loader.util.FileSystemUtil;\n import net.fabricmc.loader.util.UrlConversionException;\n import net.fabricmc.loader.util.UrlUtil;\n import net.fabricmc.loader.util.sat4j.core.VecInt;\n import net.fabricmc.loader.util.sat4j.minisat.SolverFactory;\n-import net.fabricmc.loader.util.sat4j.specs.ContradictionException;\n-import net.fabricmc.loader.util.sat4j.specs.IProblem;\n-import net.fabricmc.loader.util.sat4j.specs.ISolver;\n-import net.fabricmc.loader.util.sat4j.specs.IVecInt;\n import net.fabricmc.loader.util.sat4j.specs.TimeoutException;\n-\n+import net.fabricmc.loader.util.sat4j.specs.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea23a95e16e53b3a4f35134ac20436344f4a8bd"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEyMzU0OA==", "bodyText": "Just noticed all that import cleaning noise, must have left IDEA's formatter on :P", "url": "https://github.com/FabricMC/fabric-loader/pull/334#discussion_r525123548", "createdAt": "2020-11-17T12:40:43Z", "author": {"login": "AMereBagatelle"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -19,28 +19,23 @@\n import com.google.common.jimfs.Configuration;\n import com.google.common.jimfs.Jimfs;\n import com.google.common.jimfs.PathType;\n-\n import net.fabricmc.loader.FabricLoader;\n+import net.fabricmc.loader.api.Version;\n import net.fabricmc.loader.api.metadata.ModDependency;\n import net.fabricmc.loader.game.GameProvider.BuiltinMod;\n-import net.fabricmc.loader.api.Version;\n import net.fabricmc.loader.launch.common.FabricLauncherBase;\n import net.fabricmc.loader.lib.gson.MalformedJsonException;\n import net.fabricmc.loader.metadata.LoaderModMetadata;\n-import net.fabricmc.loader.metadata.NestedJarEntry;\n import net.fabricmc.loader.metadata.ModMetadataParser;\n+import net.fabricmc.loader.metadata.NestedJarEntry;\n import net.fabricmc.loader.metadata.ParseMetadataException;\n import net.fabricmc.loader.util.FileSystemUtil;\n import net.fabricmc.loader.util.UrlConversionException;\n import net.fabricmc.loader.util.UrlUtil;\n import net.fabricmc.loader.util.sat4j.core.VecInt;\n import net.fabricmc.loader.util.sat4j.minisat.SolverFactory;\n-import net.fabricmc.loader.util.sat4j.specs.ContradictionException;\n-import net.fabricmc.loader.util.sat4j.specs.IProblem;\n-import net.fabricmc.loader.util.sat4j.specs.ISolver;\n-import net.fabricmc.loader.util.sat4j.specs.IVecInt;\n import net.fabricmc.loader.util.sat4j.specs.TimeoutException;\n-\n+import net.fabricmc.loader.util.sat4j.specs.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0MjA0Ng=="}, "originalCommit": {"oid": "aea23a95e16e53b3a4f35134ac20436344f4a8bd"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE0NDY3Ng==", "bodyText": "I think that I got it all", "url": "https://github.com/FabricMC/fabric-loader/pull/334#discussion_r525144676", "createdAt": "2020-11-17T13:16:47Z", "author": {"login": "AMereBagatelle"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -19,28 +19,23 @@\n import com.google.common.jimfs.Configuration;\n import com.google.common.jimfs.Jimfs;\n import com.google.common.jimfs.PathType;\n-\n import net.fabricmc.loader.FabricLoader;\n+import net.fabricmc.loader.api.Version;\n import net.fabricmc.loader.api.metadata.ModDependency;\n import net.fabricmc.loader.game.GameProvider.BuiltinMod;\n-import net.fabricmc.loader.api.Version;\n import net.fabricmc.loader.launch.common.FabricLauncherBase;\n import net.fabricmc.loader.lib.gson.MalformedJsonException;\n import net.fabricmc.loader.metadata.LoaderModMetadata;\n-import net.fabricmc.loader.metadata.NestedJarEntry;\n import net.fabricmc.loader.metadata.ModMetadataParser;\n+import net.fabricmc.loader.metadata.NestedJarEntry;\n import net.fabricmc.loader.metadata.ParseMetadataException;\n import net.fabricmc.loader.util.FileSystemUtil;\n import net.fabricmc.loader.util.UrlConversionException;\n import net.fabricmc.loader.util.UrlUtil;\n import net.fabricmc.loader.util.sat4j.core.VecInt;\n import net.fabricmc.loader.util.sat4j.minisat.SolverFactory;\n-import net.fabricmc.loader.util.sat4j.specs.ContradictionException;\n-import net.fabricmc.loader.util.sat4j.specs.IProblem;\n-import net.fabricmc.loader.util.sat4j.specs.ISolver;\n-import net.fabricmc.loader.util.sat4j.specs.IVecInt;\n import net.fabricmc.loader.util.sat4j.specs.TimeoutException;\n-\n+import net.fabricmc.loader.util.sat4j.specs.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0MjA0Ng=="}, "originalCommit": {"oid": "aea23a95e16e53b3a4f35134ac20436344f4a8bd"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDY3NDkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/metadata/V1ModMetadataParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjoyNTo0MVrOH0h6DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjoyNTo0MVrOH0h6DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0MzUzMw==", "bodyText": "Why not flip the condition here so you can just set the variable value from the nextString", "url": "https://github.com/FabricMC/fabric-loader/pull/334#discussion_r524843533", "createdAt": "2020-11-17T02:25:41Z", "author": {"login": "i509VCB"}, "path": "src/main/java/net/fabricmc/loader/metadata/V1ModMetadataParser.java", "diffHunk": "@@ -220,7 +214,29 @@ static LoaderModMetadata parse(Logger logger, JsonReader reader) throws IOExcept\n \n \t\tModMetadataParser.logWarningMessages(logger, id, warnings);\n \n-\t\treturn new V1ModMetadata(id, version, environment, entrypoints, jars, mixins, accessWidener, depends, recommends, suggests, conflicts, breaks, requires, name, description, authors, contributors, contact, license, icon, languageAdapters, customValues);\n+\t\treturn new V1ModMetadata(id, version, aliases, environment, entrypoints, jars, mixins, accessWidener, depends, recommends, suggests, conflicts, breaks, requires, name, description, authors, contributors, contact, license, icon, languageAdapters, customValues);\n+\t}\n+\n+\tprivate static void readAliases(JsonReader reader, List<String> aliases) throws IOException, ParseMetadataException {\n+\t\tif (reader.peek() != JsonToken.BEGIN_ARRAY) {\n+\t\t\tthrow new ParseMetadataException(\"Aliases must be in an array\");\n+\t\t}\n+\n+\t\treader.beginArray();\n+\n+\t\twhile (reader.hasNext()) {\n+\t\t\tString alias;\n+\n+\t\t\tif (reader.peek() == JsonToken.STRING) {\n+\t\t\t\talias = reader.nextString();\n+\t\t\t} else {\n+\t\t\t\tthrow new ParseMetadataException(\"Aliases must be a string\", reader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea23a95e16e53b3a4f35134ac20436344f4a8bd"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDEzNjM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/metadata/V1ModMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxOToxMTo1N1rOH3dfxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxOToxMTo1N1rOH3dfxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkxNjk5Nw==", "bodyText": "Make this an unmodifiableList, see the maps bellow.", "url": "https://github.com/FabricMC/fabric-loader/pull/334#discussion_r527916997", "createdAt": "2020-11-20T19:11:57Z", "author": {"login": "modmuss50"}, "path": "src/main/java/net/fabricmc/loader/metadata/V1ModMetadata.java", "diffHunk": "@@ -76,9 +79,10 @@\n \t// Optional (custom values)\n \tprivate final Map<String, CustomValue> customValues;\n \n-\tV1ModMetadata(String id, Version version, ModEnvironment environment, Map<String, List<EntrypointMetadata>> entrypoints, Collection<NestedJarEntry> jars, Collection<MixinEntry> mixins, /* @Nullable */ String accessWidener, Map<String, ModDependency> depends, Map<String, ModDependency> recommends, Map<String, ModDependency> suggests, Map<String, ModDependency> conflicts, Map<String, ModDependency> breaks, Map<String, ModDependency> requires, /* @Nullable */ String name, /* @Nullable */String description, Collection<Person> authors, Collection<Person> contributors, /* @Nullable */ContactInformation contact, Collection<String> license, IconEntry icon, Map<String, String> languageAdapters, Map<String, CustomValue> customValues) {\n+\tV1ModMetadata(String id, Version version, Collection<String> aliases, ModEnvironment environment, Map<String, List<EntrypointMetadata>> entrypoints, Collection<NestedJarEntry> jars, Collection<MixinEntry> mixins, /* @Nullable */ String accessWidener, Map<String, ModDependency> depends, Map<String, ModDependency> recommends, Map<String, ModDependency> suggests, Map<String, ModDependency> conflicts, Map<String, ModDependency> breaks, Map<String, ModDependency> requires, /* @Nullable */ String name, /* @Nullable */String description, Collection<Person> authors, Collection<Person> contributors, /* @Nullable */ContactInformation contact, Collection<String> license, IconEntry icon, Map<String, String> languageAdapters, Map<String, CustomValue> customValues) {\n \t\tthis.id = id;\n \t\tthis.version = version;\n+\t\tthis.aliases = aliases;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "237829b53d8bf52689b16c84047c2a1b4faa3610"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDE1MzM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxOToxNjozOVrOH3dqJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDowMzoyN1rOH3fCBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkxOTY1Mw==", "bodyText": "I'm not sure if this is sufficient to resolve a normal set of mods - what happens if there is an older version of fabric-api (with an id of \"fabric\") in the mods folder as well as a newer one (with an id of \"fabric-api\" and an alias of \"fabric\")? Depending on the order of the hash map I think this might either load both or only one? (Also this doesn't seem to have duplication checking in FabricLoader.addMod() - I don't think that's enough to fix this, but it would be able to at least detect when this happens)", "url": "https://github.com/FabricMC/fabric-loader/pull/334#discussion_r527919653", "createdAt": "2020-11-20T19:16:39Z", "author": {"login": "AlexIIL"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -98,6 +98,9 @@ private static IVecInt toVecInt(IntStream stream) {\n \t\tfor (ModCandidateSet mcs : modCandidateSetMap.values()) {\n \t\t\tCollection<ModCandidate> s = mcs.toSortedSet();\n \t\t\tmodCandidateMap.put(mcs.getModId(), s);\n+\t\t\tfor (String modAlias : mcs.getModAliases()) {\n+\t\t\t\tmodCandidateMap.put(modAlias, s);\n+\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "237829b53d8bf52689b16c84047c2a1b4faa3610"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk0MDg5MQ==", "bodyText": "(Just FYI AMereBagatelle#1 seems to fix this from my testing) - this doesn't happen any more for simple mode after 635f5c0)", "url": "https://github.com/FabricMC/fabric-loader/pull/334#discussion_r527940891", "createdAt": "2020-11-20T20:00:37Z", "author": {"login": "AlexIIL"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -98,6 +98,9 @@ private static IVecInt toVecInt(IntStream stream) {\n \t\tfor (ModCandidateSet mcs : modCandidateSetMap.values()) {\n \t\t\tCollection<ModCandidate> s = mcs.toSortedSet();\n \t\t\tmodCandidateMap.put(mcs.getModId(), s);\n+\t\t\tfor (String modAlias : mcs.getModAliases()) {\n+\t\t\t\tmodCandidateMap.put(modAlias, s);\n+\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkxOTY1Mw=="}, "originalCommit": {"oid": "237829b53d8bf52689b16c84047c2a1b4faa3610"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk0MjE1MQ==", "bodyText": "Merged the PR into the PR, thank you", "url": "https://github.com/FabricMC/fabric-loader/pull/334#discussion_r527942151", "createdAt": "2020-11-20T20:03:27Z", "author": {"login": "AMereBagatelle"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -98,6 +98,9 @@ private static IVecInt toVecInt(IntStream stream) {\n \t\tfor (ModCandidateSet mcs : modCandidateSetMap.values()) {\n \t\t\tCollection<ModCandidate> s = mcs.toSortedSet();\n \t\t\tmodCandidateMap.put(mcs.getModId(), s);\n+\t\t\tfor (String modAlias : mcs.getModAliases()) {\n+\t\t\t\tmodCandidateMap.put(modAlias, s);\n+\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkxOTY1Mw=="}, "originalCommit": {"oid": "237829b53d8bf52689b16c84047c2a1b4faa3610"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDE2MzQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/FabricLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxOToxOTo0MVrOH3dwJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxOTo0MTozMVrOH3eaDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyMTE5MQ==", "bodyText": "Am I just missing something or is there no duplication checking? Lets say 2 mods define the same aliases this should fail in a similar way to duplicate mods.", "url": "https://github.com/FabricMC/fabric-loader/pull/334#discussion_r527921191", "createdAt": "2020-11-20T19:19:41Z", "author": {"login": "modmuss50"}, "path": "src/main/java/net/fabricmc/loader/FabricLoader.java", "diffHunk": "@@ -333,6 +333,9 @@ protected void addMod(ModCandidate candidate) throws ModResolutionException {\n \t\tModContainer container = new ModContainer(info, originUrl);\n \t\tmods.add(container);\n \t\tmodMap.put(info.getId(), container);\n+\t\tfor (String alias : info.getAliases()) {\n+\t\t\tmodMap.put(alias, container);\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "237829b53d8bf52689b16c84047c2a1b4faa3610"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkzMTkxOA==", "bodyText": "I have now implemented the duplication checks, same way as the mods itself does it with a slightly different message (\"mod id\" -> \"alias\" of course)", "url": "https://github.com/FabricMC/fabric-loader/pull/334#discussion_r527931918", "createdAt": "2020-11-20T19:41:31Z", "author": {"login": "AMereBagatelle"}, "path": "src/main/java/net/fabricmc/loader/FabricLoader.java", "diffHunk": "@@ -333,6 +333,9 @@ protected void addMod(ModCandidate candidate) throws ModResolutionException {\n \t\tModContainer container = new ModContainer(info, originUrl);\n \t\tmods.add(container);\n \t\tmodMap.put(info.getId(), container);\n+\t\tfor (String alias : info.getAliases()) {\n+\t\t\tmodMap.put(alias, container);\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyMTE5MQ=="}, "originalCommit": {"oid": "237829b53d8bf52689b16c84047c2a1b4faa3610"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMTg1NTk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/metadata/V1ModMetadataParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQxMDoyNzoyM1rOH3tgXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQxMDoyNzoyM1rOH3tgXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE3OTI5Mg==", "bodyText": "We can inline the reader.nextString() call right into the aliases.add(String) method", "url": "https://github.com/FabricMC/fabric-loader/pull/334#discussion_r528179292", "createdAt": "2020-11-21T10:27:23Z", "author": {"login": "i509VCB"}, "path": "src/main/java/net/fabricmc/loader/metadata/V1ModMetadataParser.java", "diffHunk": "@@ -220,7 +226,29 @@ static LoaderModMetadata parse(Logger logger, JsonReader reader) throws IOExcept\n \n \t\tModMetadataParser.logWarningMessages(logger, id, warnings);\n \n-\t\treturn new V1ModMetadata(id, version, environment, entrypoints, jars, mixins, accessWidener, depends, recommends, suggests, conflicts, breaks, requires, name, description, authors, contributors, contact, license, icon, languageAdapters, customValues);\n+\t\treturn new V1ModMetadata(id, version, aliases, environment, entrypoints, jars, mixins, accessWidener, depends, recommends, suggests, conflicts, breaks, requires, name, description, authors, contributors, contact, license, icon, languageAdapters, customValues);\n+\t}\n+\n+\tprivate static void readAliases(JsonReader reader, List<String> aliases) throws IOException, ParseMetadataException {\n+\t\tif (reader.peek() != JsonToken.BEGIN_ARRAY) {\n+\t\t\tthrow new ParseMetadataException(\"Aliases must be in an array\");\n+\t\t}\n+\n+\t\treader.beginArray();\n+\n+\t\twhile (reader.hasNext()) {\n+\t\t\tString alias;\n+\n+\t\t\tif (reader.peek() != JsonToken.STRING) {\n+\t\t\t\tthrow new ParseMetadataException(\"Aliases must be a string\", reader);\n+\t\t\t}\n+\n+\t\t\talias = reader.nextString();\n+\n+\t\t\taliases.add(alias);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "377428fc034c2267180d25985f4be092cb161e6a"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMTg1NjYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/metadata/V1ModMetadataParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQxMDoyODoyNFrOH3tgpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQxMDoyODoyNFrOH3tgpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE3OTM2Ng==", "bodyText": "Since this is referring to a specific entry.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\tthrow new ParseMetadataException(\"Aliases must be a string\", reader);\n          \n          \n            \n            \t\t\t\tthrow new ParseMetadataException(\"Alias must be a string\", reader);", "url": "https://github.com/FabricMC/fabric-loader/pull/334#discussion_r528179366", "createdAt": "2020-11-21T10:28:24Z", "author": {"login": "i509VCB"}, "path": "src/main/java/net/fabricmc/loader/metadata/V1ModMetadataParser.java", "diffHunk": "@@ -220,7 +226,29 @@ static LoaderModMetadata parse(Logger logger, JsonReader reader) throws IOExcept\n \n \t\tModMetadataParser.logWarningMessages(logger, id, warnings);\n \n-\t\treturn new V1ModMetadata(id, version, environment, entrypoints, jars, mixins, accessWidener, depends, recommends, suggests, conflicts, breaks, requires, name, description, authors, contributors, contact, license, icon, languageAdapters, customValues);\n+\t\treturn new V1ModMetadata(id, version, aliases, environment, entrypoints, jars, mixins, accessWidener, depends, recommends, suggests, conflicts, breaks, requires, name, description, authors, contributors, contact, license, icon, languageAdapters, customValues);\n+\t}\n+\n+\tprivate static void readAliases(JsonReader reader, List<String> aliases) throws IOException, ParseMetadataException {\n+\t\tif (reader.peek() != JsonToken.BEGIN_ARRAY) {\n+\t\t\tthrow new ParseMetadataException(\"Aliases must be in an array\");\n+\t\t}\n+\n+\t\treader.beginArray();\n+\n+\t\twhile (reader.hasNext()) {\n+\t\t\tString alias;\n+\n+\t\t\tif (reader.peek() != JsonToken.STRING) {\n+\t\t\t\tthrow new ParseMetadataException(\"Aliases must be a string\", reader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "377428fc034c2267180d25985f4be092cb161e6a"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMTg2MjExOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/metadata/BuiltinModMetadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQxMDozNToxOVrOH3tjLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQxMDozNToxOVrOH3tjLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE4MDAxMg==", "bodyText": "Not in scope of this PR, but it may a neat thing to look into for a GameProvider's builtin mods to possibly provide aliases.", "url": "https://github.com/FabricMC/fabric-loader/pull/334#discussion_r528180012", "createdAt": "2020-11-21T10:35:19Z", "author": {"login": "i509VCB"}, "path": "src/main/java/net/fabricmc/loader/metadata/BuiltinModMetadata.java", "diffHunk": "@@ -76,6 +76,11 @@ public String getId() {\n \t\treturn id;\n \t}\n \n+\t@Override\n+\tpublic Collection<String> getAliases() {\n+\t\treturn Collections.emptyList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "377428fc034c2267180d25985f4be092cb161e6a"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Nzk4Mjg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODozOTo1OVrOH86puA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOTozMjo1M1rOH88l5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYzNzU2MA==", "bodyText": "This appears to be broken when giving fabric loader an alias:\n{\n  \"schemaVersion\": 1,\n  \"id\": \"fabricloader\",\n  \"aliases\": [\n    \"testmod\"\n  ]\nFails with a duplicate mod id of fabricloader.", "url": "https://github.com/FabricMC/fabric-loader/pull/334#discussion_r533637560", "createdAt": "2020-12-01T18:39:59Z", "author": {"login": "modmuss50"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -92,12 +92,15 @@ private static IVecInt toVecInt(IntStream stream) {\n \tpublic Map<String, ModCandidate> findCompatibleSet(Logger logger, Map<String, ModCandidateSet> modCandidateSetMap) throws ModResolutionException {\n \t\t// First, map all ModCandidateSets to Set<ModCandidate>s.\n \t\tboolean isAdvanced = false;\n-\t\tMap<String, Collection<ModCandidate>> modCandidateMap = new HashMap<>();\n+\t\tMap<String, List<ModCandidate>> modCandidateMap = new HashMap<>();\n \t\tSet<String> mandatoryMods = new HashSet<>();\n \n \t\tfor (ModCandidateSet mcs : modCandidateSetMap.values()) {\n \t\t\tCollection<ModCandidate> s = mcs.toSortedSet();\n-\t\t\tmodCandidateMap.put(mcs.getModId(), s);\n+\t\t\tmodCandidateMap.computeIfAbsent(mcs.getModId(), i -> new ArrayList<>()).addAll(s);\n+\t\t\tfor (String modAlias : mcs.getModAliases()) {\n+\t\t\t\tmodCandidateMap.computeIfAbsent(modAlias, i -> new ArrayList<>()).addAll(s);\n+\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8c473ce11f91a45030ace9d6e7aa060fa1f00fa"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY0NjA1Mg==", "bodyText": "Doesn't seem to do the same for me?  I aliased fabricloader in the fabric.mod.json and it didn't give any errors.\nI'd assume then that you have the testmod in your mods folder.", "url": "https://github.com/FabricMC/fabric-loader/pull/334#discussion_r533646052", "createdAt": "2020-12-01T18:53:49Z", "author": {"login": "AMereBagatelle"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -92,12 +92,15 @@ private static IVecInt toVecInt(IntStream stream) {\n \tpublic Map<String, ModCandidate> findCompatibleSet(Logger logger, Map<String, ModCandidateSet> modCandidateSetMap) throws ModResolutionException {\n \t\t// First, map all ModCandidateSets to Set<ModCandidate>s.\n \t\tboolean isAdvanced = false;\n-\t\tMap<String, Collection<ModCandidate>> modCandidateMap = new HashMap<>();\n+\t\tMap<String, List<ModCandidate>> modCandidateMap = new HashMap<>();\n \t\tSet<String> mandatoryMods = new HashSet<>();\n \n \t\tfor (ModCandidateSet mcs : modCandidateSetMap.values()) {\n \t\t\tCollection<ModCandidate> s = mcs.toSortedSet();\n-\t\t\tmodCandidateMap.put(mcs.getModId(), s);\n+\t\t\tmodCandidateMap.computeIfAbsent(mcs.getModId(), i -> new ArrayList<>()).addAll(s);\n+\t\t\tfor (String modAlias : mcs.getModAliases()) {\n+\t\t\t\tmodCandidateMap.computeIfAbsent(modAlias, i -> new ArrayList<>()).addAll(s);\n+\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYzNzU2MA=="}, "originalCommit": {"oid": "e8c473ce11f91a45030ace9d6e7aa060fa1f00fa"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY0NjcyNA==", "bodyText": "Ill take another look, the testmod has the id of test", "url": "https://github.com/FabricMC/fabric-loader/pull/334#discussion_r533646724", "createdAt": "2020-12-01T18:54:53Z", "author": {"login": "modmuss50"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -92,12 +92,15 @@ private static IVecInt toVecInt(IntStream stream) {\n \tpublic Map<String, ModCandidate> findCompatibleSet(Logger logger, Map<String, ModCandidateSet> modCandidateSetMap) throws ModResolutionException {\n \t\t// First, map all ModCandidateSets to Set<ModCandidate>s.\n \t\tboolean isAdvanced = false;\n-\t\tMap<String, Collection<ModCandidate>> modCandidateMap = new HashMap<>();\n+\t\tMap<String, List<ModCandidate>> modCandidateMap = new HashMap<>();\n \t\tSet<String> mandatoryMods = new HashSet<>();\n \n \t\tfor (ModCandidateSet mcs : modCandidateSetMap.values()) {\n \t\t\tCollection<ModCandidate> s = mcs.toSortedSet();\n-\t\t\tmodCandidateMap.put(mcs.getModId(), s);\n+\t\t\tmodCandidateMap.computeIfAbsent(mcs.getModId(), i -> new ArrayList<>()).addAll(s);\n+\t\t\tfor (String modAlias : mcs.getModAliases()) {\n+\t\t\t\tmodCandidateMap.computeIfAbsent(modAlias, i -> new ArrayList<>()).addAll(s);\n+\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYzNzU2MA=="}, "originalCommit": {"oid": "e8c473ce11f91a45030ace9d6e7aa060fa1f00fa"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY0ODY1MQ==", "bodyText": "In any case, it would probably be preferable for Loader to prefer an actual mod id to an alias which might be what the problem is here.", "url": "https://github.com/FabricMC/fabric-loader/pull/334#discussion_r533648651", "createdAt": "2020-12-01T18:57:52Z", "author": {"login": "AMereBagatelle"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -92,12 +92,15 @@ private static IVecInt toVecInt(IntStream stream) {\n \tpublic Map<String, ModCandidate> findCompatibleSet(Logger logger, Map<String, ModCandidateSet> modCandidateSetMap) throws ModResolutionException {\n \t\t// First, map all ModCandidateSets to Set<ModCandidate>s.\n \t\tboolean isAdvanced = false;\n-\t\tMap<String, Collection<ModCandidate>> modCandidateMap = new HashMap<>();\n+\t\tMap<String, List<ModCandidate>> modCandidateMap = new HashMap<>();\n \t\tSet<String> mandatoryMods = new HashSet<>();\n \n \t\tfor (ModCandidateSet mcs : modCandidateSetMap.values()) {\n \t\t\tCollection<ModCandidate> s = mcs.toSortedSet();\n-\t\t\tmodCandidateMap.put(mcs.getModId(), s);\n+\t\t\tmodCandidateMap.computeIfAbsent(mcs.getModId(), i -> new ArrayList<>()).addAll(s);\n+\t\t\tfor (String modAlias : mcs.getModAliases()) {\n+\t\t\t\tmodCandidateMap.computeIfAbsent(modAlias, i -> new ArrayList<>()).addAll(s);\n+\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYzNzU2MA=="}, "originalCommit": {"oid": "e8c473ce11f91a45030ace9d6e7aa060fa1f00fa"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY0OTA4Ng==", "bodyText": "Yes, I dont plan on using an alias in loader anytime soon, but the option should be there. Ill dig into it more to see whats going on.", "url": "https://github.com/FabricMC/fabric-loader/pull/334#discussion_r533649086", "createdAt": "2020-12-01T18:58:36Z", "author": {"login": "modmuss50"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -92,12 +92,15 @@ private static IVecInt toVecInt(IntStream stream) {\n \tpublic Map<String, ModCandidate> findCompatibleSet(Logger logger, Map<String, ModCandidateSet> modCandidateSetMap) throws ModResolutionException {\n \t\t// First, map all ModCandidateSets to Set<ModCandidate>s.\n \t\tboolean isAdvanced = false;\n-\t\tMap<String, Collection<ModCandidate>> modCandidateMap = new HashMap<>();\n+\t\tMap<String, List<ModCandidate>> modCandidateMap = new HashMap<>();\n \t\tSet<String> mandatoryMods = new HashSet<>();\n \n \t\tfor (ModCandidateSet mcs : modCandidateSetMap.values()) {\n \t\t\tCollection<ModCandidate> s = mcs.toSortedSet();\n-\t\t\tmodCandidateMap.put(mcs.getModId(), s);\n+\t\t\tmodCandidateMap.computeIfAbsent(mcs.getModId(), i -> new ArrayList<>()).addAll(s);\n+\t\t\tfor (String modAlias : mcs.getModAliases()) {\n+\t\t\t\tmodCandidateMap.computeIfAbsent(modAlias, i -> new ArrayList<>()).addAll(s);\n+\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYzNzU2MA=="}, "originalCommit": {"oid": "e8c473ce11f91a45030ace9d6e7aa060fa1f00fa"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1Mjk5NQ==", "bodyText": "Seems to fail when going down the none advanced path (ModReslover:113). Make sure you dont have any mods in the mods dir when testing.", "url": "https://github.com/FabricMC/fabric-loader/pull/334#discussion_r533652995", "createdAt": "2020-12-01T19:04:51Z", "author": {"login": "modmuss50"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -92,12 +92,15 @@ private static IVecInt toVecInt(IntStream stream) {\n \tpublic Map<String, ModCandidate> findCompatibleSet(Logger logger, Map<String, ModCandidateSet> modCandidateSetMap) throws ModResolutionException {\n \t\t// First, map all ModCandidateSets to Set<ModCandidate>s.\n \t\tboolean isAdvanced = false;\n-\t\tMap<String, Collection<ModCandidate>> modCandidateMap = new HashMap<>();\n+\t\tMap<String, List<ModCandidate>> modCandidateMap = new HashMap<>();\n \t\tSet<String> mandatoryMods = new HashSet<>();\n \n \t\tfor (ModCandidateSet mcs : modCandidateSetMap.values()) {\n \t\t\tCollection<ModCandidate> s = mcs.toSortedSet();\n-\t\t\tmodCandidateMap.put(mcs.getModId(), s);\n+\t\t\tmodCandidateMap.computeIfAbsent(mcs.getModId(), i -> new ArrayList<>()).addAll(s);\n+\t\t\tfor (String modAlias : mcs.getModAliases()) {\n+\t\t\t\tmodCandidateMap.computeIfAbsent(modAlias, i -> new ArrayList<>()).addAll(s);\n+\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYzNzU2MA=="}, "originalCommit": {"oid": "e8c473ce11f91a45030ace9d6e7aa060fa1f00fa"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY2OTM1MQ==", "bodyText": "I see what you mean, whoops", "url": "https://github.com/FabricMC/fabric-loader/pull/334#discussion_r533669351", "createdAt": "2020-12-01T19:32:53Z", "author": {"login": "AMereBagatelle"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -92,12 +92,15 @@ private static IVecInt toVecInt(IntStream stream) {\n \tpublic Map<String, ModCandidate> findCompatibleSet(Logger logger, Map<String, ModCandidateSet> modCandidateSetMap) throws ModResolutionException {\n \t\t// First, map all ModCandidateSets to Set<ModCandidate>s.\n \t\tboolean isAdvanced = false;\n-\t\tMap<String, Collection<ModCandidate>> modCandidateMap = new HashMap<>();\n+\t\tMap<String, List<ModCandidate>> modCandidateMap = new HashMap<>();\n \t\tSet<String> mandatoryMods = new HashSet<>();\n \n \t\tfor (ModCandidateSet mcs : modCandidateSetMap.values()) {\n \t\t\tCollection<ModCandidate> s = mcs.toSortedSet();\n-\t\t\tmodCandidateMap.put(mcs.getModId(), s);\n+\t\t\tmodCandidateMap.computeIfAbsent(mcs.getModId(), i -> new ArrayList<>()).addAll(s);\n+\t\t\tfor (String modAlias : mcs.getModAliases()) {\n+\t\t\t\tmodCandidateMap.computeIfAbsent(modAlias, i -> new ArrayList<>()).addAll(s);\n+\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYzNzU2MA=="}, "originalCommit": {"oid": "e8c473ce11f91a45030ace9d6e7aa060fa1f00fa"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3270, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}