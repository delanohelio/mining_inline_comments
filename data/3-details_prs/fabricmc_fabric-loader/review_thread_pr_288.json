{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NzQ1NzM3", "number": 288, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMzo1NDo1OFrOESJrBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMjo0NTowNFrOEX39Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDY4MjkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/launch/FabricTweaker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMzo1NDo1OFrOG3MkNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMzo1ODowOFrOG3MlgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzMDc0MA==", "bodyText": "ClientModInitializer and DedicatedServerModInitializers have @Environment annotations. Is this exclusion going to affect their class transformation?", "url": "https://github.com/FabricMC/fabric-loader/pull/288#discussion_r460530740", "createdAt": "2020-07-26T13:54:58Z", "author": {"login": "JamiesWhiteShirt"}, "path": "src/main/java/net/fabricmc/loader/launch/FabricTweaker.java", "diffHunk": "@@ -88,13 +101,19 @@ public void injectIntoClassLoader(LaunchClassLoader launchClassLoader) {\n \n \t\tlaunchClassLoader.addClassLoaderExclusion(\"net.fabricmc.api.Environment\");\n \t\tlaunchClassLoader.addClassLoaderExclusion(\"net.fabricmc.api.EnvType\");\n+\t\tlaunchClassLoader.addClassLoaderExclusion(\"net.fabricmc.api.ModInitializer\");\n+\t\tlaunchClassLoader.addClassLoaderExclusion(\"net.fabricmc.api.ClientModInitializer\");\n+\t\tlaunchClassLoader.addClassLoaderExclusion(\"net.fabricmc.api.DedicatedServerModInitializer\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4525ea1ebd22b8c4b2f06cf33b728d657d730297"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzMTA3Mw==", "bodyText": "Nevermind, they don't.", "url": "https://github.com/FabricMC/fabric-loader/pull/288#discussion_r460531073", "createdAt": "2020-07-26T13:58:08Z", "author": {"login": "JamiesWhiteShirt"}, "path": "src/main/java/net/fabricmc/loader/launch/FabricTweaker.java", "diffHunk": "@@ -88,13 +101,19 @@ public void injectIntoClassLoader(LaunchClassLoader launchClassLoader) {\n \n \t\tlaunchClassLoader.addClassLoaderExclusion(\"net.fabricmc.api.Environment\");\n \t\tlaunchClassLoader.addClassLoaderExclusion(\"net.fabricmc.api.EnvType\");\n+\t\tlaunchClassLoader.addClassLoaderExclusion(\"net.fabricmc.api.ModInitializer\");\n+\t\tlaunchClassLoader.addClassLoaderExclusion(\"net.fabricmc.api.ClientModInitializer\");\n+\t\tlaunchClassLoader.addClassLoaderExclusion(\"net.fabricmc.api.DedicatedServerModInitializer\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzMDc0MA=="}, "originalCommit": {"oid": "4525ea1ebd22b8c4b2f06cf33b728d657d730297"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDc1NDQ5OnYy", "diffSide": "LEFT", "path": "src/main/java/net/fabricmc/loader/entrypoint/EntrypointTransformer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNToxOTo0OVrOG3NHbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxNTozMDoxOVrOG3NLvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzOTc1Ng==", "bodyText": "Why? I haven't looked at this in detail, but this looks at first glance like it might cause an infinite loop. I.e. EntrypointTransformer asks to run transformers which runs the EntrypointTransformer", "url": "https://github.com/FabricMC/fabric-loader/pull/288#discussion_r460539756", "createdAt": "2020-07-26T15:19:49Z", "author": {"login": "Earthcomputer"}, "path": "src/main/java/net/fabricmc/loader/entrypoint/EntrypointTransformer.java", "diffHunk": "@@ -42,7 +42,7 @@ public EntrypointTransformer(Function<EntrypointTransformer, List<EntrypointPatc\n \t}\n \n \tClassNode loadClass(FabricLauncher launcher, String className) throws IOException {\n-\t\tbyte[] data = patchedClasses.containsKey(className) ? patchedClasses.get(className) : launcher.getClassByteArray(className, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4525ea1ebd22b8c4b2f06cf33b728d657d730297"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU0MDg2Mw==", "bodyText": "It's not. The EntrypointTransformer is not an actual tranformer, i.e. it's never called in response to class loading. It's merely called during bootstrap, loads the bytecode, applies its patch and then stores the result in a map.\nThe real transformer merely queries that map, if it has an entry (and at this point it won't), it returns that and otherwise it just delegates further.", "url": "https://github.com/FabricMC/fabric-loader/pull/288#discussion_r460540863", "createdAt": "2020-07-26T15:30:19Z", "author": {"login": "Johni0702"}, "path": "src/main/java/net/fabricmc/loader/entrypoint/EntrypointTransformer.java", "diffHunk": "@@ -42,7 +42,7 @@ public EntrypointTransformer(Function<EntrypointTransformer, List<EntrypointPatc\n \t}\n \n \tClassNode loadClass(FabricLauncher launcher, String className) throws IOException {\n-\t\tbyte[] data = patchedClasses.containsKey(className) ? patchedClasses.get(className) : launcher.getClassByteArray(className, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzOTc1Ng=="}, "originalCommit": {"oid": "4525ea1ebd22b8c4b2f06cf33b728d657d730297"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTY3NjQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/launch/FabricTweaker.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMjo1ODoyMlrOG9Kz7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzowOTowMlrOG9O-Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc5MzQ1Mg==", "bodyText": "Hmm is there a reason specifically why we need to exclude the mod initializers?", "url": "https://github.com/FabricMC/fabric-loader/pull/288#discussion_r466793452", "createdAt": "2020-08-07T02:58:22Z", "author": {"login": "i509VCB"}, "path": "src/main/java/net/fabricmc/loader/launch/FabricTweaker.java", "diffHunk": "@@ -88,13 +101,19 @@ public void injectIntoClassLoader(LaunchClassLoader launchClassLoader) {\n \n \t\tlaunchClassLoader.addClassLoaderExclusion(\"net.fabricmc.api.Environment\");\n \t\tlaunchClassLoader.addClassLoaderExclusion(\"net.fabricmc.api.EnvType\");\n+\t\tlaunchClassLoader.addClassLoaderExclusion(\"net.fabricmc.api.ModInitializer\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4525ea1ebd22b8c4b2f06cf33b728d657d730297"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg0Nzg2Mw==", "bodyText": "Yes, it's explained in the commit message:\n\nThese interfaces are accessed from the Entrypoint* classes which themselves are\nexcluded from the LaunchClassLoader. Not excluding the interfaces will cause\nthose to be loaded by the LaunchClassLoader as well as its parent, leading to\ncasting errors when mod entry points are to be invoked.\n\n49f6f49", "url": "https://github.com/FabricMC/fabric-loader/pull/288#discussion_r466847863", "createdAt": "2020-08-07T06:32:52Z", "author": {"login": "Johni0702"}, "path": "src/main/java/net/fabricmc/loader/launch/FabricTweaker.java", "diffHunk": "@@ -88,13 +101,19 @@ public void injectIntoClassLoader(LaunchClassLoader launchClassLoader) {\n \n \t\tlaunchClassLoader.addClassLoaderExclusion(\"net.fabricmc.api.Environment\");\n \t\tlaunchClassLoader.addClassLoaderExclusion(\"net.fabricmc.api.EnvType\");\n+\t\tlaunchClassLoader.addClassLoaderExclusion(\"net.fabricmc.api.ModInitializer\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc5MzQ1Mg=="}, "originalCommit": {"oid": "4525ea1ebd22b8c4b2f06cf33b728d657d730297"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg2MTY1OQ==", "bodyText": "I see. I've let modmuss and player know about this PR so they can look into it since they have a better grasp on loader internals than I do", "url": "https://github.com/FabricMC/fabric-loader/pull/288#discussion_r466861659", "createdAt": "2020-08-07T07:09:02Z", "author": {"login": "i509VCB"}, "path": "src/main/java/net/fabricmc/loader/launch/FabricTweaker.java", "diffHunk": "@@ -88,13 +101,19 @@ public void injectIntoClassLoader(LaunchClassLoader launchClassLoader) {\n \n \t\tlaunchClassLoader.addClassLoaderExclusion(\"net.fabricmc.api.Environment\");\n \t\tlaunchClassLoader.addClassLoaderExclusion(\"net.fabricmc.api.EnvType\");\n+\t\tlaunchClassLoader.addClassLoaderExclusion(\"net.fabricmc.api.ModInitializer\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc5MzQ1Mg=="}, "originalCommit": {"oid": "4525ea1ebd22b8c4b2f06cf33b728d657d730297"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDY5NTAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/launch/FabricTweaker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMjo0NTowNFrOG_6CXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxNzozMTo1NlrOHJc1rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY2NDM0OQ==", "bodyText": "Is it safe to call the black board at this point, I wonder", "url": "https://github.com/FabricMC/fabric-loader/pull/288#discussion_r469664349", "createdAt": "2020-08-13T02:45:04Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/launch/FabricTweaker.java", "diffHunk": "@@ -24,30 +24,43 @@\n import net.fabricmc.loader.game.MinecraftGameProvider;\n import net.fabricmc.loader.launch.common.FabricLauncherBase;\n import net.fabricmc.loader.launch.common.FabricMixinBootstrap;\n+import net.fabricmc.loader.util.Arguments;\n import net.fabricmc.loader.util.UrlConversionException;\n import net.fabricmc.loader.util.UrlUtil;\n+import net.minecraft.launchwrapper.IClassTransformer;\n import net.minecraft.launchwrapper.ITweaker;\n import net.minecraft.launchwrapper.Launch;\n import net.minecraft.launchwrapper.LaunchClassLoader;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.spongepowered.asm.launch.MixinBootstrap;\n import org.spongepowered.asm.mixin.MixinEnvironment;\n+import org.spongepowered.asm.mixin.transformer.Proxy;\n \n+import java.io.ByteArrayOutputStream;\n import java.io.File;\n+import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.lang.reflect.Field;\n import java.net.JarURLConnection;\n import java.net.URL;\n+import java.nio.file.Path;\n import java.util.Collection;\n import java.util.List;\n+import java.util.Map;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarInputStream;\n \n public abstract class FabricTweaker extends FabricLauncherBase implements ITweaker {\n \tprotected static Logger LOGGER = LogManager.getFormatterLogger(\"Fabric|Tweaker\");\n-\tprotected String[] arguments;\n+\tprotected Arguments arguments;\n \tprivate LaunchClassLoader launchClassLoader;\n \tprivate boolean isDevelopment;\n \n+\t@SuppressWarnings(\"unchecked\")\n+\tprivate final boolean isPrimaryTweaker = ((List<ITweaker>) Launch.blackboard.get(\"Tweaks\")).isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4525ea1ebd22b8c4b2f06cf33b728d657d730297"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY3MTcyNA==", "bodyText": "should be, it is a very basic primitive", "url": "https://github.com/FabricMC/fabric-loader/pull/288#discussion_r479671724", "createdAt": "2020-08-29T17:31:56Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/launch/FabricTweaker.java", "diffHunk": "@@ -24,30 +24,43 @@\n import net.fabricmc.loader.game.MinecraftGameProvider;\n import net.fabricmc.loader.launch.common.FabricLauncherBase;\n import net.fabricmc.loader.launch.common.FabricMixinBootstrap;\n+import net.fabricmc.loader.util.Arguments;\n import net.fabricmc.loader.util.UrlConversionException;\n import net.fabricmc.loader.util.UrlUtil;\n+import net.minecraft.launchwrapper.IClassTransformer;\n import net.minecraft.launchwrapper.ITweaker;\n import net.minecraft.launchwrapper.Launch;\n import net.minecraft.launchwrapper.LaunchClassLoader;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.spongepowered.asm.launch.MixinBootstrap;\n import org.spongepowered.asm.mixin.MixinEnvironment;\n+import org.spongepowered.asm.mixin.transformer.Proxy;\n \n+import java.io.ByteArrayOutputStream;\n import java.io.File;\n+import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.lang.reflect.Field;\n import java.net.JarURLConnection;\n import java.net.URL;\n+import java.nio.file.Path;\n import java.util.Collection;\n import java.util.List;\n+import java.util.Map;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarInputStream;\n \n public abstract class FabricTweaker extends FabricLauncherBase implements ITweaker {\n \tprotected static Logger LOGGER = LogManager.getFormatterLogger(\"Fabric|Tweaker\");\n-\tprotected String[] arguments;\n+\tprotected Arguments arguments;\n \tprivate LaunchClassLoader launchClassLoader;\n \tprivate boolean isDevelopment;\n \n+\t@SuppressWarnings(\"unchecked\")\n+\tprivate final boolean isPrimaryTweaker = ((List<ITweaker>) Launch.blackboard.get(\"Tweaks\")).isEmpty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY2NDM0OQ=="}, "originalCommit": {"oid": "4525ea1ebd22b8c4b2f06cf33b728d657d730297"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3314, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}