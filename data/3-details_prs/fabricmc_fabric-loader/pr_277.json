{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4Mzk5Mzk5", "number": 277, "title": "Add friendlier dependency resolution error descriptions", "bodyText": "Closes #229, closes #276.\nAdds more detailed information and instructions to certain errors found by the mod resolver.\nThese errors are:\n\nA dependency being missing\nA dependency being located, but not satisfying the version constraints\nConflicting mods\nCritically conflicting mods\nDependencies with invalid IDs", "createdAt": "2020-07-13T17:45:33Z", "url": "https://github.com/FabricMC/fabric-loader/pull/277", "merged": true, "mergeCommit": {"oid": "b9d4a16b0b3edf957d3852ca4d9e45044afa5def"}, "closed": true, "closedAt": "2020-10-26T18:57:53Z", "author": {"login": "Leo40Git"}, "timelineItems": {"totalCount": 58, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0lHJJAH2gAyNDQ4Mzk5Mzk5OmY4NjMxNTI0YWEzNmU4ZWYzYzliMzE5YjczMjU3MjQxNTk1OWY2NmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWY9kAAFqTUxNzA3ODk5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f8631524aa36e8ef3c9b319b732572415959f66d", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/f8631524aa36e8ef3c9b319b732572415959f66d", "committedDate": "2020-07-13T17:44:26Z", "message": "first draft, todo: friendlier version strings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89aad6fcc609d1c1822b715bc412aa3e27708ef8", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/89aad6fcc609d1c1822b715bc412aa3e27708ef8", "committedDate": "2020-07-13T17:46:51Z", "message": "Fix location of exclamation mark"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1cb82bda319b1f1b7b7e23bb7f549129a5afb0d", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/c1cb82bda319b1f1b7b7e23bb7f549129a5afb0d", "committedDate": "2020-07-13T17:51:27Z", "message": "missed a depModId here"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74c5eb5f370eece720e219315bd745d0354882c9", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/74c5eb5f370eece720e219315bd745d0354882c9", "committedDate": "2020-07-13T18:11:15Z", "message": "and that's why you use IDEs, kids"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15f11f99bf9ffdaf829326ade6cfcb3a3720f57e", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/15f11f99bf9ffdaf829326ade6cfcb3a3720f57e", "committedDate": "2020-07-13T18:22:19Z", "message": "show correct version in \"different version is present\" error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a66dcb3aa54880846a2e0bc306dc9b74db4623f", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/1a66dcb3aa54880846a2e0bc306dc9b74db4623f", "committedDate": "2020-07-13T18:39:07Z", "message": "Friendly version strings done in a decidedly non-friendly way\n\nAlso, error window requests focus now"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1622a04b81b6383c266b99f7a45c718cfc697ce4", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/1622a04b81b6383c266b99f7a45c718cfc697ce4", "committedDate": "2020-07-13T18:54:54Z", "message": "TODO: Make lines that start with \"INFO:\" show up as child nodes\n\nI need to go to sleep, will do tomorrow"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NTE0MjE1", "url": "https://github.com/FabricMC/fabric-loader/pull/277#pullrequestreview-447514215", "createdAt": "2020-07-13T18:52:52Z", "commit": {"oid": "1a66dcb3aa54880846a2e0bc306dc9b74db4623f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODo1Mjo1MlrOGw1fuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODo1Mjo1MlrOGw1fuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg2MTMwNw==", "bodyText": "good lord switch block may be least messy", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r453861307", "createdAt": "2020-07-13T18:52:52Z", "author": {"login": "i509VCB"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -340,20 +340,56 @@ private void addErrorToList(ModCandidate candidate, ModDependency dependency, Ma\n \t\t\terrors.append(\"\\n - Mod \").append(candidate.getInfo().getId()).append(\" \").append(errorType).append(\" mod \").append(dependency).append(\", \");\n \n \t\t\tif (depCandidate == null) {\n-\t\t\t\terrors.append(\"which is missing\");\n-\t\t\t} else if (cond) {\n-\t\t\t\terrors.append(\"but a different version is present: \").append(depCandidate.getInfo().getVersion());\n-\t\t\t} else if (errorType.contains(\"conf\")) {\n-\t\t\t\t// CONFLICTS WITH\n-\t\t\t\terrors.append(\"but the conflicting version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\terrors.append(\"which is missing!\");\n+\t\t\t\terrors.append(\"\\n     You must install \").append(horribleModDependencyToStringMethod(dependency)).append(\" of \").append(depModId).append(\".\");\n \t\t\t} else {\n-\t\t\t\terrors.append(\"but the breaking version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\tfinal String depCandidateVer = depCandidate.getInfo().getVersion().getFriendlyString();\n+\t\t\t\tif (cond) {\n+\t\t\t\t\terrors.append(\"but a different version is present: \").append(depCandidateVer).append(\"!\");\n+\t\t\t\t\terrors.append(\"\\n     You must install \").append(horribleModDependencyToStringMethod(dependency)).append(\" of \").append(depModId).append(\".\");\n+\t\t\t\t} else if (errorType.contains(\"conf\")) {\n+\t\t\t\t\t// CONFLICTS WITH\n+\t\t\t\t\terrors.append(\"but the conflicting version is present: \").append(depCandidateVer).append(\"!\");\n+\t\t\t\t\terrors.append(\"\\n     While this won't prevent you from starting the game, the developer(s) of \").append(candidate.getInfo().getId());\n+\t\t\t\t\terrors.append(\"\\n     have found that version \").append(depCandidateVer).append(\" of \").append(depModId);\n+\t\t\t\t\terrors.append(\"\\n     conflicts with their mod. It is heavily recommended to remove one of the mods.\");\n+\t\t\t\t} else {\n+\t\t\t\t\terrors.append(\"but the breaking version is present: \").append(depCandidate.getInfo().getVersion()).append(\"!\");\n+\t\t\t\t\terrors.append(\"\\n     The developer(s) of \").append(candidate.getInfo().getId());\n+\t\t\t\t\terrors.append(\"\\n     have found that version \").append(depCandidateVer).append(\" of \").append(depModId);\n+\t\t\t\t\terrors.append(\"\\n     critically conflicts with their mod. You must remove one of the mods.\");\n+\t\t\t\t}\n \t\t\t}\n \n-\t\t\terrors.append(\"!\");\n+\t\t\t//errors.append(\"!\");\n \t\t}\n \t}\n \n+\t// lord forgive me for what I must do\n+\tprivate static String horribleModDependencyToStringMethod(ModDependency dependency) {\n+\t\tString depStr = dependency.toString();\n+\t\tint verStart = depStr.indexOf('[');\n+\t\tif (verStart < 0)\n+\t\t\treturn \"unknown version\";\n+\t\tint verEnd = depStr.indexOf(']');\n+\t\tif (verEnd < verStart)\n+\t\t\treturn \"unknown version\";\n+\t\tString verStr = depStr.substring(verStart + 1, verEnd);\n+\t\tif (\"*\".equals(verStr))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a66dcb3aa54880846a2e0bc306dc9b74db4623f"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4531a204e3226f0cc5b443651ac4b5a1c0ba1687", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/4531a204e3226f0cc5b443651ac4b5a1c0ba1687", "committedDate": "2020-07-14T08:19:37Z", "message": "Split each error to their own \"append\" method\n\nRemove manual newlines from \"conflicts\" and \"breaks\" descriptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f01d49fd2100fc6d6a1357146860c139d7315c04", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/f01d49fd2100fc6d6a1357146860c139d7315c04", "committedDate": "2020-07-14T08:30:31Z", "message": "Improved the look of error descriptions\n\nFabricStatusTree: lines starting with \"INFO:\" now get appended to the last child as a sub-child\nUnsatisfied \"depends\", \"breaks\" and \"conflicts\" now use the dependency candidate's name instead of the dependency's mod ID"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7147b77c7fbbb081ade3a3be5a7ab424f207f4d7", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/7147b77c7fbbb081ade3a3be5a7ab424f207f4d7", "committedDate": "2020-07-14T08:43:52Z", "message": "Error descriptions will no longer break horribly on v0/v2+ schemas\n\nNote: Error descriptions for mods using v0 schema will still probably not look quite right"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b379ea8412eb7d7d9822fe631390bd28100f0a6c", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/b379ea8412eb7d7d9822fe631390bd28100f0a6c", "committedDate": "2020-07-14T11:24:13Z", "message": "Improve some wording, clean up console output"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47f794e92194815a40318448891d412180b1e047", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/47f794e92194815a40318448891d412180b1e047", "committedDate": "2020-07-14T11:38:02Z", "message": "Error descriptions now have info icon and are bold and brash\n\nMain error node now displays dependency candidate mod name if available"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "043afe60889ed2ad410b8487ad3ce72024fa9914", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/043afe60889ed2ad410b8487ad3ce72024fa9914", "committedDate": "2020-07-14T12:05:12Z", "message": "Mod names are now wrapped in double quotes rather than single quotes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81fed5b4d1e8e2a9635ed275d28acd10bd75a2a6", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/81fed5b4d1e8e2a9635ed275d28acd10bd75a2a6", "committedDate": "2020-07-14T12:45:43Z", "message": "Revert \"Mod names are now wrapped in double quotes rather than single quotes\"\n\nThis reverts commit 043afe60889ed2ad410b8487ad3ce72024fa9914."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MzY1MTg1", "url": "https://github.com/FabricMC/fabric-loader/pull/277#pullrequestreview-448365185", "createdAt": "2020-07-14T18:36:10Z", "commit": {"oid": "81fed5b4d1e8e2a9635ed275d28acd10bd75a2a6"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODozNjoxMFrOGxgVtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODozODo0NVrOGxgbNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2MzI1NA==", "bodyText": "I somewhat feel like exposing this is in api may not be a great idea for future translation support if someone writes that into loader.\nThis makes supporting translations in loader very hard as it does not expose the language aspect of these friendly version strings.\nMaybe until we decide on a translation system, this should be on a sort of AbstractModDependency", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r454563254", "createdAt": "2020-07-14T18:36:10Z", "author": {"login": "i509VCB"}, "path": "src/main/java/net/fabricmc/loader/api/metadata/ModDependency.java", "diffHunk": "@@ -33,4 +33,11 @@\n \t * @param version the version to check\n \t */\n \tboolean matches(Version version);\n+\n+\t/**\n+\t * Converts this dependency's version range to a user-friendly text representation.\n+\t *\n+\t * @return a user-friendly representation of this dependency's version range\n+\t */\n+\tString getFriendlyVersionString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81fed5b4d1e8e2a9635ed275d28acd10bd75a2a6"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2NDY2MA==", "bodyText": "This implementation could be dragged to an AbstractModDependency so we don't have two copies.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r454564660", "createdAt": "2020-07-14T18:38:45Z", "author": {"login": "i509VCB"}, "path": "src/main/java/net/fabricmc/loader/metadata/ModMetadataV1.java", "diffHunk": "@@ -300,6 +300,44 @@ public boolean matches(Version version) {\n \t\t\t\t\t\t\treturn false;\n \t\t\t\t\t\t}\n \n+\t\t\t\t\t\t@Override\n+\t\t\t\t\t\tpublic String getFriendlyVersionString() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81fed5b4d1e8e2a9635ed275d28acd10bd75a2a6"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NTMxNTU1", "url": "https://github.com/FabricMC/fabric-loader/pull/277#pullrequestreview-448531555", "createdAt": "2020-07-14T23:25:00Z", "commit": {"oid": "81fed5b4d1e8e2a9635ed275d28acd10bd75a2a6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzoyNTowMFrOGxoxgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzoyNzo1MlrOGxo0xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwMTQ0Mg==", "bodyText": "This shouldn't throw an exception, instead you could log an error and/or add an additional \"error\" node with the problem. (Or you could just ignore the tab, and not append it).", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r454701442", "createdAt": "2020-07-14T23:25:00Z", "author": {"login": "AlexIIL"}, "path": "src/main/java/net/fabricmc/loader/gui/FabricStatusTree.java", "diffHunk": "@@ -204,9 +204,32 @@ public void setInfo() {\n \t\t}\n \n \t\tpublic FabricStatusNode addChild(String string) {\n-\t\t\tFabricStatusNode child = new FabricStatusNode(this, string);\n-\t\t\tchildren.add(child);\n-\t\t\treturn child;\n+\t\t\tif (string.startsWith(\"\\t\")) {\n+\t\t\t\tif (children.size() == 0)\n+\t\t\t\t\tthrow new RuntimeException(\"Tried to add indented node without having a root node\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81fed5b4d1e8e2a9635ed275d28acd10bd75a2a6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwMjI3Nw==", "bodyText": "This should probably only remove the dash if the string starts with a dash rather than just finding the first one to remove.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r454702277", "createdAt": "2020-07-14T23:27:52Z", "author": {"login": "AlexIIL"}, "path": "src/main/java/net/fabricmc/loader/gui/FabricStatusTree.java", "diffHunk": "@@ -204,9 +204,32 @@ public void setInfo() {\n \t\t}\n \n \t\tpublic FabricStatusNode addChild(String string) {\n-\t\t\tFabricStatusNode child = new FabricStatusNode(this, string);\n-\t\t\tchildren.add(child);\n-\t\t\treturn child;\n+\t\t\tif (string.startsWith(\"\\t\")) {\n+\t\t\t\tif (children.size() == 0)\n+\t\t\t\t\tthrow new RuntimeException(\"Tried to add indented node without having a root node\");\n+\t\t\t\tFabricStatusNode lastChild = children.get(children.size() - 1);\n+\t\t\t\tFabricStatusNode subChild = new FabricStatusNode(lastChild, emboldenForNode(string.substring(1)));\n+\t\t\t\tsubChild.warningLevel = FabricTreeWarningLevel.INFO;\n+\t\t\t\tlastChild.children.add(subChild);\n+\t\t\t\tlastChild.expandByDefault = true;\n+\t\t\t\treturn lastChild;\n+\t\t\t} else {\n+\t\t\t\tFabricStatusNode child = new FabricStatusNode(this, cleanForNode(string));\n+\t\t\t\tchildren.add(child);\n+\t\t\t\treturn child;\n+\t\t\t}\n+\t\t}\n+\n+\t\tprivate String cleanForNode(String string) {\n+\t\t\tint dashIndex = string.indexOf('-');\n+\t\t\tif (dashIndex > 0)\n+\t\t\t\tstring = string.substring(dashIndex + 1);\n+\t\t\tstring = string.trim();\n+\t\t\treturn string;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81fed5b4d1e8e2a9635ed275d28acd10bd75a2a6"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "252d8f26f67faa78b177567ec3877d4665f6f2aa", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/252d8f26f67faa78b177567ec3877d4665f6f2aa", "committedDate": "2020-07-15T09:57:19Z", "message": "Represent version ranges with data structures rather than strings\n\nAbstractModDependency is now a thing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d7cad30f3254dcda5455c5baa43a6012fd18720", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/8d7cad30f3254dcda5455c5baa43a6012fd18720", "committedDate": "2020-07-15T10:05:29Z", "message": "AlexIIL review changes\n\n- trying to add indented node before root node no longer crashes\n- fix dash removal to only remove dash if it's at the start of the string"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e664bac20feaa9a474d843acc2db288b0f5f496e", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/e664bac20feaa9a474d843acc2db288b0f5f496e", "committedDate": "2020-07-15T10:06:47Z", "message": "Merge branch 'master' into friendly-errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d500c28446a8d0e9d95e86817c5391e32357df8f", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/d500c28446a8d0e9d95e86817c5391e32357df8f", "committedDate": "2020-07-15T10:15:54Z", "message": "Log non-Fabric mod JARs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5037a1ce7876b2d1e109a9cabd0d56f918890b34", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/5037a1ce7876b2d1e109a9cabd0d56f918890b34", "committedDate": "2020-07-15T10:43:42Z", "message": "Handle ^, ~ and string versions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d616a1dd1616fc849c93e51b5b14fa445b056d43", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/d616a1dd1616fc849c93e51b5b14fa445b056d43", "committedDate": "2020-07-15T10:46:34Z", "message": "i guess this counts as an optimization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adecf0462f100b0bf5bf556c3a9ce95fe2877c78", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/adecf0462f100b0bf5bf556c3a9ce95fe2877c78", "committedDate": "2020-07-15T11:17:11Z", "message": "streams are cool, i guess"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "000498779edd98b0453f25bc09fcbeb2ac6d4826", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/000498779edd98b0453f25bc09fcbeb2ac6d4826", "committedDate": "2020-07-15T11:23:02Z", "message": "allow deeper node indentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f37d6afb9cb86b37518e211875298be54466b707", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/f37d6afb9cb86b37518e211875298be54466b707", "committedDate": "2020-07-15T14:09:17Z", "message": "AbstractModDependency: simplify version ranges, make it unmodifiable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMTYwMTQw", "url": "https://github.com/FabricMC/fabric-loader/pull/277#pullrequestreview-451160140", "createdAt": "2020-07-19T20:18:09Z", "commit": {"oid": "f37d6afb9cb86b37518e211875298be54466b707"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMTYxMzI5", "url": "https://github.com/FabricMC/fabric-loader/pull/277#pullrequestreview-451161329", "createdAt": "2020-07-19T20:37:41Z", "commit": {"oid": "f37d6afb9cb86b37518e211875298be54466b707"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMzE0NDYz", "url": "https://github.com/FabricMC/fabric-loader/pull/277#pullrequestreview-451314463", "createdAt": "2020-07-20T05:58:02Z", "commit": {"oid": "f37d6afb9cb86b37518e211875298be54466b707"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33f37a725e4321a597f61495d7085c137d28e512", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/33f37a725e4321a597f61495d7085c137d28e512", "committedDate": "2020-07-29T08:04:42Z", "message": "VersionRange: improve toString for SAME_MAJOR and SAME_MAJOR_AND_MINOR types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d23a7be69a4d66335283431a8596c075de3fc56", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/8d23a7be69a4d66335283431a8596c075de3fc56", "committedDate": "2020-07-29T08:21:57Z", "message": "VersionRange: add equals and hashCode because why not"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2962e602ae73bb32b4c16b42d27d4fa15d674f9d", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/2962e602ae73bb32b4c16b42d27d4fa15d674f9d", "committedDate": "2020-08-02T08:43:15Z", "message": "Remove TODO about alternate instructions\n\nVersionRange: cache toString result"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MjEwNjUy", "url": "https://github.com/FabricMC/fabric-loader/pull/277#pullrequestreview-467210652", "createdAt": "2020-08-13T23:53:54Z", "commit": {"oid": "2962e602ae73bb32b4c16b42d27d4fa15d674f9d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMzo1Mzo1NFrOHAhdYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDowMjowMFrOHAhmBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMxMDI0Mw==", "bodyText": "Run ./gradlew licenseFormat", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r470310243", "createdAt": "2020-08-13T23:53:54Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package net.fabricmc.loader.api;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2962e602ae73bb32b4c16b42d27d4fa15d674f9d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMxMTI4Mg==", "bodyText": "Prefer moving this to a method within Type, like String represent(String version).\nPutting things here will make people forget to update if we add new entries to Type, and this forgotten problem is hard to spot as you have a default branch here.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r470311282", "createdAt": "2020-08-13T23:57:45Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package net.fabricmc.loader.api;\n+\n+import java.util.Objects;\n+\n+public class VersionRange {\n+\tpublic enum Type {\n+\t\tINVALID,\n+\t\tANY,\n+\t\tEQUALS,\n+\t\tGREATER_THAN,\n+\t\tLESSER_THAN,\n+\t\tGREATER_THAN_OR_EQUAL,\n+\t\tLESSER_THAN_OR_EQUAL,\n+\t\tSAME_MAJOR,\n+\t\tSAME_MAJOR_AND_MINOR\n+\t}\n+\n+\tprivate final Type type;\n+\tprivate final String version;\n+\tprivate String stringRepr;\n+\n+\tpublic VersionRange(Type type, String version) {\n+\t\tthis.type = type;\n+\t\tthis.version = version;\n+\t}\n+\n+\tpublic Type getType() {\n+\t\treturn type;\n+\t}\n+\n+\tpublic String getVersion() {\n+\t\treturn version;\n+\t}\n+\n+\tprivate String makeStringRepr() {\n+\t\tswitch (type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2962e602ae73bb32b4c16b42d27d4fa15d674f9d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMxMTgzMQ==", "bodyText": "Please run this over fabric checkstyle. This clearly violates fabric checkstyle as fab checkstyle requires blank lines before and after if blocks with {}", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r470311831", "createdAt": "2020-08-13T23:59:47Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package net.fabricmc.loader.api;\n+\n+import java.util.Objects;\n+\n+public class VersionRange {\n+\tpublic enum Type {\n+\t\tINVALID,\n+\t\tANY,\n+\t\tEQUALS,\n+\t\tGREATER_THAN,\n+\t\tLESSER_THAN,\n+\t\tGREATER_THAN_OR_EQUAL,\n+\t\tLESSER_THAN_OR_EQUAL,\n+\t\tSAME_MAJOR,\n+\t\tSAME_MAJOR_AND_MINOR\n+\t}\n+\n+\tprivate final Type type;\n+\tprivate final String version;\n+\tprivate String stringRepr;\n+\n+\tpublic VersionRange(Type type, String version) {\n+\t\tthis.type = type;\n+\t\tthis.version = version;\n+\t}\n+\n+\tpublic Type getType() {\n+\t\treturn type;\n+\t}\n+\n+\tpublic String getVersion() {\n+\t\treturn version;\n+\t}\n+\n+\tprivate String makeStringRepr() {\n+\t\tswitch (type) {\n+\t\t\tdefault:\n+\t\t\tcase INVALID:\n+\t\t\t\treturn \"unknown version\";\n+\t\t\tcase ANY:\n+\t\t\t\treturn \"any version\";\n+\t\t\tcase EQUALS:\n+\t\t\t\treturn \"version \" + version;\n+\t\t\tcase GREATER_THAN:\n+\t\t\t\treturn \"any version after \" + version;\n+\t\t\tcase LESSER_THAN:\n+\t\t\t\treturn \"any version before \" + version;\n+\t\t\tcase GREATER_THAN_OR_EQUAL:\n+\t\t\t\treturn \"version \" + version + \" or later\";\n+\t\t\tcase LESSER_THAN_OR_EQUAL:\n+\t\t\t\treturn \"version \" + version + \" or earlier\";\n+\t\t\tcase SAME_MAJOR:\n+\t\t\tcase SAME_MAJOR_AND_MINOR:\n+\t\t\t\tString[] parts = version.split(\"\\\\.\");\n+\t\t\t\tint start = 1;\n+\t\t\t\tif (type == Type.SAME_MAJOR_AND_MINOR)\n+\t\t\t\t\tstart = 2;\n+\t\t\t\tfor (int i = start; i < parts.length; i++)\n+\t\t\t\t\tparts[i] = \"x\";\n+\t\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tif (stringRepr == null)\n+\t\t\tstringRepr = makeStringRepr();\n+\t\treturn stringRepr;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object o) {\n+\t\tif (this == o) {\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (o == null || getClass() != o.getClass()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2962e602ae73bb32b4c16b42d27d4fa15d674f9d"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMxMjMxNQ==", "bodyText": "Also maintainability concern here. Should add to VersionRange so we have an easier time maintaining this. Leaving this here will most likely make us forget this code and make updates to version range code out of sync.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r470312315", "createdAt": "2020-08-14T00:01:27Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/api/metadata/AbstractModDependency.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package net.fabricmc.loader.api.metadata;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import net.fabricmc.loader.api.VersionRange;\n+\n+public abstract class AbstractModDependency implements ModDependency {\n+\tprotected final String modId;\n+\tprivate Collection<VersionRange> ranges;\n+\n+\tprotected AbstractModDependency(String modId) {\n+\t\tthis.modId = modId;\n+\t}\n+\n+\t@Override\n+\tpublic String getModId() {\n+\t\treturn modId;\n+\t}\n+\n+\tprotected abstract String[] getVersionMatchers();\n+\n+\t@Override\n+\tpublic Collection<VersionRange> getVersionRanges() {\n+\t\tif (ranges == null) {\n+\t\t\tranges = Stream.of(getVersionMatchers()).map(matcher -> {\n+\t\t\t\tchar firstChar = matcher.charAt(0);\n+\t\t\t\tchar secondChar = 0;\n+\t\t\t\tif (matcher.length() > 1)\n+\t\t\t\t\tsecondChar = matcher.charAt(1);\n+\t\t\t\tswitch (firstChar) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2962e602ae73bb32b4c16b42d27d4fa15d674f9d"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMxMjQ1Mw==", "bodyText": "maybe getVersionRequirements, nitpick", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r470312453", "createdAt": "2020-08-14T00:02:00Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/api/metadata/ModDependency.java", "diffHunk": "@@ -33,4 +36,11 @@\n \t * @param version the version to check\n \t */\n \tboolean matches(Version version);\n+\n+\t/**\n+\t * Returns a representation of the dependency's version requirements.\n+\t *\n+\t * @return representation of the dependency's version requirements\n+\t */\n+\tCollection<VersionRange> getVersionRanges();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2962e602ae73bb32b4c16b42d27d4fa15d674f9d"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1279f04555e953d289cf0168fdc42ac82707013", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/c1279f04555e953d289cf0168fdc42ac82707013", "committedDate": "2020-08-14T06:22:44Z", "message": "liach review changes\n\n- license and checkstyle\n- ModDependency: getVersionRanges to getVersionRequirements\n- VersionRange:\n  - add fromVersionMatchers (contents moved from AbstractModDependency.getVersionRequirements)\n  - add Type.represent (contents moved from VersionRange.makeStringRepr, now deleted)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3Njg5MTE1", "url": "https://github.com/FabricMC/fabric-loader/pull/277#pullrequestreview-467689115", "createdAt": "2020-08-14T15:55:32Z", "commit": {"oid": "c1279f04555e953d289cf0168fdc42ac82707013"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNTo1NTozM1rOHA59Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNTo1NTozM1rOHA59Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcxMTYxNA==", "bodyText": "I'd make this throw an exception, or move the branches into the enum values themselves.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r470711614", "createdAt": "2020-08-14T15:55:33Z", "author": {"login": "Juuxel"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class VersionRange {\n+\tpublic enum Type {\n+\t\tINVALID,\n+\t\tANY,\n+\t\tEQUALS,\n+\t\tGREATER_THAN,\n+\t\tLESSER_THAN,\n+\t\tGREATER_THAN_OR_EQUAL,\n+\t\tLESSER_THAN_OR_EQUAL,\n+\t\tSAME_MAJOR,\n+\t\tSAME_MAJOR_AND_MINOR;\n+\n+\t\tpublic String represent(String version) {\n+\t\t\tswitch (this) {\n+\t\t\tcase INVALID:\n+\t\t\t\treturn \"unknown version\";\n+\t\t\tcase ANY:\n+\t\t\t\treturn \"any version\";\n+\t\t\tcase EQUALS:\n+\t\t\t\treturn \"version \" + version;\n+\t\t\tcase GREATER_THAN:\n+\t\t\t\treturn \"any version after \" + version;\n+\t\t\tcase LESSER_THAN:\n+\t\t\t\treturn \"any version before \" + version;\n+\t\t\tcase GREATER_THAN_OR_EQUAL:\n+\t\t\t\treturn \"version \" + version + \" or later\";\n+\t\t\tcase LESSER_THAN_OR_EQUAL:\n+\t\t\t\treturn \"version \" + version + \" or earlier\";\n+\t\t\tcase SAME_MAJOR:\n+\t\t\tcase SAME_MAJOR_AND_MINOR:\n+\t\t\t\tString[] parts = version.split(\"\\\\.\");\n+\t\t\t\tint start = 1;\n+\n+\t\t\t\tif (this == Type.SAME_MAJOR_AND_MINOR) {\n+\t\t\t\t\tstart = 2;\n+\t\t\t\t}\n+\n+\t\t\t\tfor (int i = start; i < parts.length; i++) {\n+\t\t\t\t\tparts[i] = \"x\";\n+\t\t\t\t}\n+\n+\t\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t\tdefault:\n+\t\t\t\treturn \"unhandled version range type \" + this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1279f04555e953d289cf0168fdc42ac82707013"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "542fa57664e489bfb89fa6608e0317374f9dfbc1", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/542fa57664e489bfb89fa6608e0317374f9dfbc1", "committedDate": "2020-08-14T17:31:59Z", "message": "move Type.represent case branches into lambda on each enum value"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df2274d81c9e33633fcb5e320e26adb6ef21e12d", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/df2274d81c9e33633fcb5e320e26adb6ef21e12d", "committedDate": "2020-08-14T18:02:11Z", "message": "Invalid ID error descriptions are now also affected\n\nTheoretically, an error of this type should not reach the user..."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3ODAxMTk0", "url": "https://github.com/FabricMC/fabric-loader/pull/277#pullrequestreview-467801194", "createdAt": "2020-08-14T18:42:59Z", "commit": {"oid": "df2274d81c9e33633fcb5e320e26adb6ef21e12d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4ODcxMDY1", "url": "https://github.com/FabricMC/fabric-loader/pull/277#pullrequestreview-468871065", "createdAt": "2020-08-17T22:22:11Z", "commit": {"oid": "df2274d81c9e33633fcb5e320e26adb6ef21e12d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cc6ed62b4c1f644e9cd6c8d6765e25b2117089e", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/8cc6ed62b4c1f644e9cd6c8d6765e25b2117089e", "committedDate": "2020-08-20T19:07:13Z", "message": "Light cleanup in ModResolver\n\n- Removed the extra \"prefix\" StringBuilder, common prefix is now added directly to destination SB\n- \"Invalid ID\" errors now use the 'mod name' (mod ID) format\n- Removed unused ModDependency parameter from appendConflictError and appendBreakingError (leftover from a scrapped feature)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cca88b89b989ab57acc6c8b57485ee9932179d32", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/cca88b89b989ab57acc6c8b57485ee9932179d32", "committedDate": "2020-08-20T19:11:54Z", "message": "Improve invalid char display"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxOTQxMzk3", "url": "https://github.com/FabricMC/fabric-loader/pull/277#pullrequestreview-471941397", "createdAt": "2020-08-20T19:56:40Z", "commit": {"oid": "cca88b89b989ab57acc6c8b57485ee9932179d32"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NDQwMjQ2", "url": "https://github.com/FabricMC/fabric-loader/pull/277#pullrequestreview-486440246", "createdAt": "2020-09-11T02:56:47Z", "commit": {"oid": "cca88b89b989ab57acc6c8b57485ee9932179d32"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1da19a330478f634beddaf9947110447b514f54", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/a1da19a330478f634beddaf9947110447b514f54", "committedDate": "2020-09-18T17:49:47Z", "message": "Merge remote-tracking branch 'upstream/master' into friendly-errors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MDIyMzc1", "url": "https://github.com/FabricMC/fabric-loader/pull/277#pullrequestreview-499022375", "createdAt": "2020-09-30T01:05:25Z", "commit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMTowNToyNVrOHaJ8IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMTowNToyNVrOHaJ8IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE4Nzg3Mg==", "bodyText": "This shouldn't be in api imo.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497187872", "createdAt": "2020-09-30T01:05:25Z", "author": {"login": "i509VCB"}, "path": "src/main/java/net/fabricmc/loader/api/metadata/AbstractModDependency.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api.metadata;\n+\n+import java.util.Collection;\n+\n+import net.fabricmc.loader.api.VersionRange;\n+\n+public abstract class AbstractModDependency implements ModDependency {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MDIwNjY2", "url": "https://github.com/FabricMC/fabric-loader/pull/277#pullrequestreview-499020666", "createdAt": "2020-09-30T00:59:00Z", "commit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "state": "COMMENTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDo1OTowMVrOHaJ2Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMjoyMDoxMVrOHaLC_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE4NjMyMw==", "bodyText": "I don't think this class needs to be part of the API. From what I can tell this can be a package private class in metadata.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497186323", "createdAt": "2020-09-30T00:59:01Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/api/metadata/AbstractModDependency.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api.metadata;\n+\n+import java.util.Collection;\n+\n+import net.fabricmc.loader.api.VersionRange;\n+\n+public abstract class AbstractModDependency implements ModDependency {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE4Njc5MQ==", "bodyText": "This should return a Set in order to have a useful contract for equals, Collection's is too weak for the desired semantics.\n\"VersionMatchers\" is a somewhat odd term, it'd call it parse.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497186791", "createdAt": "2020-09-30T01:00:57Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+public class VersionRange {\n+\tpublic enum Type {\n+\t\tINVALID(version -> \"unknown version\"),\n+\t\tANY(version -> \"any version\"),\n+\t\tEQUALS(version -> \"version \" + version),\n+\t\tGREATER_THAN(version -> \"any version after \" + version),\n+\t\tLESSER_THAN(version -> \"any version before \" + version),\n+\t\tGREATER_THAN_OR_EQUAL(version -> \"version \" + version + \" or later\"),\n+\t\tLESSER_THAN_OR_EQUAL(version -> \"version \" + version + \" or earlier\"),\n+\t\tSAME_MAJOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 1; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t}),\n+\t\tSAME_MAJOR_AND_MINOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 2; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t});\n+\n+\t\tprivate final UnaryOperator<String> reprOperator;\n+\n+\t\tType(UnaryOperator<String> reprOperator) {\n+\t\t\tthis.reprOperator = reprOperator;\n+\t\t}\n+\n+\t\tpublic String represent(String version) {\n+\t\t\treturn reprOperator.apply(version);\n+\t\t}\n+\t}\n+\n+\tprivate final Type type;\n+\tprivate final String version;\n+\tprivate String stringRepr;\n+\n+\tpublic VersionRange(Type type, String version) {\n+\t\tthis.type = type;\n+\t\tthis.version = version;\n+\t}\n+\n+\tpublic Type getType() {\n+\t\treturn type;\n+\t}\n+\n+\tpublic String getVersion() {\n+\t\treturn version;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tif (stringRepr == null) {\n+\t\t\tstringRepr = type.represent(version);\n+\t\t}\n+\n+\t\treturn stringRepr;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object o) {\n+\t\tif (this == o) {\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tif (o == null || getClass() != o.getClass()) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tVersionRange that = (VersionRange) o;\n+\t\treturn type == that.type && version.equals(that.version);\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\treturn Objects.hash(type, version);\n+\t}\n+\n+\tpublic static Collection<VersionRange> fromVersionMatchers(String... matchers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE4Njg5NQ==", "bodyText": "I don't think this cache is worth it.\nReturning a normalized formal version predicate would fit this better (same format as parse input, e.g. effectively \">=\".concat(version))", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497186895", "createdAt": "2020-09-30T01:01:28Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+public class VersionRange {\n+\tpublic enum Type {\n+\t\tINVALID(version -> \"unknown version\"),\n+\t\tANY(version -> \"any version\"),\n+\t\tEQUALS(version -> \"version \" + version),\n+\t\tGREATER_THAN(version -> \"any version after \" + version),\n+\t\tLESSER_THAN(version -> \"any version before \" + version),\n+\t\tGREATER_THAN_OR_EQUAL(version -> \"version \" + version + \" or later\"),\n+\t\tLESSER_THAN_OR_EQUAL(version -> \"version \" + version + \" or earlier\"),\n+\t\tSAME_MAJOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 1; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t}),\n+\t\tSAME_MAJOR_AND_MINOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 2; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t});\n+\n+\t\tprivate final UnaryOperator<String> reprOperator;\n+\n+\t\tType(UnaryOperator<String> reprOperator) {\n+\t\t\tthis.reprOperator = reprOperator;\n+\t\t}\n+\n+\t\tpublic String represent(String version) {\n+\t\t\treturn reprOperator.apply(version);\n+\t\t}\n+\t}\n+\n+\tprivate final Type type;\n+\tprivate final String version;\n+\tprivate String stringRepr;\n+\n+\tpublic VersionRange(Type type, String version) {\n+\t\tthis.type = type;\n+\t\tthis.version = version;\n+\t}\n+\n+\tpublic Type getType() {\n+\t\treturn type;\n+\t}\n+\n+\tpublic String getVersion() {\n+\t\treturn version;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tif (stringRepr == null) {\n+\t\t\tstringRepr = type.represent(version);\n+\t\t}\n+\n+\t\treturn stringRepr;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE4NzM0OQ==", "bodyText": "I don't think invalid should exist, the existing parser seems to treat weird inputs as an equality requirement.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497187349", "createdAt": "2020-09-30T01:03:24Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+public class VersionRange {\n+\tpublic enum Type {\n+\t\tINVALID(version -> \"unknown version\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE4NzUzNw==", "bodyText": "For-each loop is cleaner IMO, and definitely easier to debug.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497187537", "createdAt": "2020-09-30T01:04:10Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+public class VersionRange {\n+\tpublic enum Type {\n+\t\tINVALID(version -> \"unknown version\"),\n+\t\tANY(version -> \"any version\"),\n+\t\tEQUALS(version -> \"version \" + version),\n+\t\tGREATER_THAN(version -> \"any version after \" + version),\n+\t\tLESSER_THAN(version -> \"any version before \" + version),\n+\t\tGREATER_THAN_OR_EQUAL(version -> \"version \" + version + \" or later\"),\n+\t\tLESSER_THAN_OR_EQUAL(version -> \"version \" + version + \" or earlier\"),\n+\t\tSAME_MAJOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 1; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t}),\n+\t\tSAME_MAJOR_AND_MINOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 2; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t});\n+\n+\t\tprivate final UnaryOperator<String> reprOperator;\n+\n+\t\tType(UnaryOperator<String> reprOperator) {\n+\t\t\tthis.reprOperator = reprOperator;\n+\t\t}\n+\n+\t\tpublic String represent(String version) {\n+\t\t\treturn reprOperator.apply(version);\n+\t\t}\n+\t}\n+\n+\tprivate final Type type;\n+\tprivate final String version;\n+\tprivate String stringRepr;\n+\n+\tpublic VersionRange(Type type, String version) {\n+\t\tthis.type = type;\n+\t\tthis.version = version;\n+\t}\n+\n+\tpublic Type getType() {\n+\t\treturn type;\n+\t}\n+\n+\tpublic String getVersion() {\n+\t\treturn version;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tif (stringRepr == null) {\n+\t\t\tstringRepr = type.represent(version);\n+\t\t}\n+\n+\t\treturn stringRepr;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object o) {\n+\t\tif (this == o) {\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tif (o == null || getClass() != o.getClass()) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tVersionRange that = (VersionRange) o;\n+\t\treturn type == that.type && version.equals(that.version);\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\treturn Objects.hash(type, version);\n+\t}\n+\n+\tpublic static Collection<VersionRange> fromVersionMatchers(String... matchers) {\n+\t\tCollection<VersionRange> ranges = Arrays.stream(matchers).map(matcher -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE4NzcxMA==", "bodyText": "This could be handled in the above analysis inline.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497187710", "createdAt": "2020-09-30T01:04:54Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+public class VersionRange {\n+\tpublic enum Type {\n+\t\tINVALID(version -> \"unknown version\"),\n+\t\tANY(version -> \"any version\"),\n+\t\tEQUALS(version -> \"version \" + version),\n+\t\tGREATER_THAN(version -> \"any version after \" + version),\n+\t\tLESSER_THAN(version -> \"any version before \" + version),\n+\t\tGREATER_THAN_OR_EQUAL(version -> \"version \" + version + \" or later\"),\n+\t\tLESSER_THAN_OR_EQUAL(version -> \"version \" + version + \" or earlier\"),\n+\t\tSAME_MAJOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 1; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t}),\n+\t\tSAME_MAJOR_AND_MINOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 2; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t});\n+\n+\t\tprivate final UnaryOperator<String> reprOperator;\n+\n+\t\tType(UnaryOperator<String> reprOperator) {\n+\t\t\tthis.reprOperator = reprOperator;\n+\t\t}\n+\n+\t\tpublic String represent(String version) {\n+\t\t\treturn reprOperator.apply(version);\n+\t\t}\n+\t}\n+\n+\tprivate final Type type;\n+\tprivate final String version;\n+\tprivate String stringRepr;\n+\n+\tpublic VersionRange(Type type, String version) {\n+\t\tthis.type = type;\n+\t\tthis.version = version;\n+\t}\n+\n+\tpublic Type getType() {\n+\t\treturn type;\n+\t}\n+\n+\tpublic String getVersion() {\n+\t\treturn version;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tif (stringRepr == null) {\n+\t\t\tstringRepr = type.represent(version);\n+\t\t}\n+\n+\t\treturn stringRepr;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object o) {\n+\t\tif (this == o) {\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tif (o == null || getClass() != o.getClass()) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tVersionRange that = (VersionRange) o;\n+\t\treturn type == that.type && version.equals(that.version);\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\treturn Objects.hash(type, version);\n+\t}\n+\n+\tpublic static Collection<VersionRange> fromVersionMatchers(String... matchers) {\n+\t\tCollection<VersionRange> ranges = Arrays.stream(matchers).map(matcher -> {\n+\t\t\tchar firstChar = matcher.charAt(0);\n+\t\t\tchar secondChar = 0;\n+\n+\t\t\tif (matcher.length() > 1) {\n+\t\t\t\tsecondChar = matcher.charAt(1);\n+\t\t\t}\n+\n+\t\t\tswitch (firstChar) {\n+\t\t\tcase '*':\n+\t\t\t\tif (matcher.length() == 1) {\n+\t\t\t\t\treturn new VersionRange(Type.ANY, \"\");\n+\t\t\t\t} else {\n+\t\t\t\t\treturn new VersionRange(Type.INVALID, \"\");\n+\t\t\t\t}\n+\t\t\tcase '>':\n+\t\t\t\tif (secondChar == '=') {\n+\t\t\t\t\treturn new VersionRange(Type.GREATER_THAN_OR_EQUAL, matcher.substring(2));\n+\t\t\t\t} else {\n+\t\t\t\t\treturn new VersionRange(Type.GREATER_THAN, matcher.substring(1));\n+\t\t\t\t}\n+\t\t\tcase '<':\n+\t\t\t\tif (secondChar == '=') {\n+\t\t\t\t\treturn new VersionRange(Type.LESSER_THAN_OR_EQUAL, matcher.substring(2));\n+\t\t\t\t} else {\n+\t\t\t\t\treturn new VersionRange(Type.LESSER_THAN, matcher.substring(1));\n+\t\t\t\t}\n+\t\t\tcase '=':\n+\t\t\t\treturn new VersionRange(Type.EQUALS, matcher.substring(1));\n+\t\t\tcase '^':\n+\t\t\t\treturn new VersionRange(Type.SAME_MAJOR, matcher.substring(1));\n+\t\t\tcase '~':\n+\t\t\t\treturn new VersionRange(Type.SAME_MAJOR_AND_MINOR, matcher.substring(1));\n+\t\t\tdefault: // string version\n+\t\t\t\treturn new VersionRange(Type.EQUALS, matcher);\n+\t\t\t}\n+\t\t}).collect(Collectors.toSet());\n+\n+\t\t// simplify: if one ANY range exists, only use that\n+\t\tif (ranges.stream().anyMatch(range -> range.getType() == Type.ANY)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE4ODgwNQ==", "bodyText": "A lot of the message assembly below could be done with PrintWriter and printf, which should look cleaner and lend itself to localization later on. This change can be done at another time though.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497188805", "createdAt": "2020-09-30T01:09:09Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -314,46 +315,82 @@ private static IVecInt toVecInt(IntStream stream) {\n \tprivate void addErrorToList(ModCandidate candidate, ModDependency dependency, Map<String, ModCandidate> result, StringBuilder errors, String errorType, boolean cond) {\n \t\tString depModId = dependency.getModId();\n \n-\t\tStringBuilder prefix = new StringBuilder(\"\\n - Mod \").append(candidate.getInfo().getId());\n-\t\tprefix.append(\" \").append(errorType).append(\" mod \").append(depModId);\n+\t\terrors.append(\"\\n - Mod \").append(getCandidateName(candidate)).append(\" \").append(errorType).append(\" \");\n \n \t\tList<String> errorList = new ArrayList<>();\n \n \t\tif (!isModIdValid(depModId, errorList)) {\n-\t\t\tif (errorList.size() == 1) {\n-\t\t\t\terrors.append(prefix).append(\" which has an invalid mod id because it \").append(errorList.get(0));\n-\t\t\t} else {\n-\t\t\t\terrors.append(prefix).append(\" which has an invalid mod because:\");\n+\t\t\terrors.append(depModId).append(\", which has an invalid mod ID because:\");\n \n-\t\t\t\tfor (String error : errorList) {\n-\t\t\t\t\terrors.append(\"\\n   - It \").append(error);\n-\t\t\t\t}\n+\t\t\tfor (String error : errorList) {\n+\t\t\t\terrors.append(\"\\n\\t - It \").append(error);\n \t\t\t}\n \n \t\t\treturn;\n \t\t}\n \n \t\tModCandidate depCandidate = result.get(depModId);\n-\t\tboolean isPresent = depCandidate == null ? false : dependency.matches(depCandidate.getInfo().getVersion());\n+\t\tboolean isPresent = depCandidate != null && dependency.matches(depCandidate.getInfo().getVersion());\n \n \t\tif (isPresent != cond) {\n-\t\t\terrors.append(\"\\n - Mod \").append(candidate.getInfo().getId()).append(\" \").append(errorType).append(\" mod \").append(dependency).append(\", \");\n-\n+\t\t\terrors.append(getDependencyVersionRequirements(dependency)).append(\" of mod \")\n+\t\t\t\t\t.append(depCandidate == null ? depModId : getCandidateName(depCandidate)).append(\", \");\n \t\t\tif (depCandidate == null) {\n-\t\t\t\terrors.append(\"which is missing\");\n+\t\t\t\tappendMissingDependencyError(errors, dependency);\n \t\t\t} else if (cond) {\n-\t\t\t\terrors.append(\"but a different version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\tappendUnsatisfiedDependencyError(errors, dependency, depCandidate);\n \t\t\t} else if (errorType.contains(\"conf\")) {\n \t\t\t\t// CONFLICTS WITH\n-\t\t\t\terrors.append(\"but the conflicting version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\tappendConflictError(errors, candidate, depCandidate);\n \t\t\t} else {\n-\t\t\t\terrors.append(\"but the breaking version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\tappendBreakingError(errors, candidate, depCandidate);\n \t\t\t}\n-\n-\t\t\terrors.append(\"!\");\n \t\t}\n \t}\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE4OTMwMw==", "bodyText": "I don't think we need to handle this gracefully?", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497189303", "createdAt": "2020-09-30T01:10:59Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/gui/FabricStatusTree.java", "diffHunk": "@@ -203,10 +203,43 @@ public void setInfo() {\n \t\t\tsetWarningLevel(FabricTreeWarningLevel.INFO);\n \t\t}\n \n+\t\tprivate FabricStatusNode addChild(String string, boolean info) {\n+\t\t\tif (string.startsWith(\"\\t\")) {\n+\t\t\t\tif (children.size() == 0) {\n+\t\t\t\t\tFabricStatusNode rootChild = new FabricStatusNode(this, \"(indented node was added before root node - this is a bug!)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE5MTI0NA==", "bodyText": "API classes should always be final unless extending is explicitly desired.\nTo me a VersionRange is a range with 2 version bounds, we already call these VersionPredicate elsewhere, which should be appropriate here. We'd then implement Predicate<Version> later (see net.fabricmc.loader.util.version.VersionPredicateParser.matches)", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497191244", "createdAt": "2020-09-30T01:19:32Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+public class VersionRange {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE5MTY2MQ==", "bodyText": "I'd null check the args", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497191661", "createdAt": "2020-09-30T01:21:11Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+public class VersionRange {\n+\tpublic enum Type {\n+\t\tINVALID(version -> \"unknown version\"),\n+\t\tANY(version -> \"any version\"),\n+\t\tEQUALS(version -> \"version \" + version),\n+\t\tGREATER_THAN(version -> \"any version after \" + version),\n+\t\tLESSER_THAN(version -> \"any version before \" + version),\n+\t\tGREATER_THAN_OR_EQUAL(version -> \"version \" + version + \" or later\"),\n+\t\tLESSER_THAN_OR_EQUAL(version -> \"version \" + version + \" or earlier\"),\n+\t\tSAME_MAJOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 1; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t}),\n+\t\tSAME_MAJOR_AND_MINOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 2; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t});\n+\n+\t\tprivate final UnaryOperator<String> reprOperator;\n+\n+\t\tType(UnaryOperator<String> reprOperator) {\n+\t\t\tthis.reprOperator = reprOperator;\n+\t\t}\n+\n+\t\tpublic String represent(String version) {\n+\t\t\treturn reprOperator.apply(version);\n+\t\t}\n+\t}\n+\n+\tprivate final Type type;\n+\tprivate final String version;\n+\tprivate String stringRepr;\n+\n+\tpublic VersionRange(Type type, String version) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE5MjE0Mg==", "bodyText": "\"describe\" may be a better name? Not sure.\nThe method signature isn't very suitable to add localization support. I think it may be best to move the description logic to the implementation and not expose it in the API.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497192142", "createdAt": "2020-09-30T01:23:12Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+public class VersionRange {\n+\tpublic enum Type {\n+\t\tINVALID(version -> \"unknown version\"),\n+\t\tANY(version -> \"any version\"),\n+\t\tEQUALS(version -> \"version \" + version),\n+\t\tGREATER_THAN(version -> \"any version after \" + version),\n+\t\tLESSER_THAN(version -> \"any version before \" + version),\n+\t\tGREATER_THAN_OR_EQUAL(version -> \"version \" + version + \" or later\"),\n+\t\tLESSER_THAN_OR_EQUAL(version -> \"version \" + version + \" or earlier\"),\n+\t\tSAME_MAJOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 1; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t}),\n+\t\tSAME_MAJOR_AND_MINOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 2; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t});\n+\n+\t\tprivate final UnaryOperator<String> reprOperator;\n+\n+\t\tType(UnaryOperator<String> reprOperator) {\n+\t\t\tthis.reprOperator = reprOperator;\n+\t\t}\n+\n+\t\tpublic String represent(String version) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIwMjQ2MA==", "bodyText": "existing parser infers equality, similar to your default case", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497202460", "createdAt": "2020-09-30T02:05:31Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+public class VersionRange {\n+\tpublic enum Type {\n+\t\tINVALID(version -> \"unknown version\"),\n+\t\tANY(version -> \"any version\"),\n+\t\tEQUALS(version -> \"version \" + version),\n+\t\tGREATER_THAN(version -> \"any version after \" + version),\n+\t\tLESSER_THAN(version -> \"any version before \" + version),\n+\t\tGREATER_THAN_OR_EQUAL(version -> \"version \" + version + \" or later\"),\n+\t\tLESSER_THAN_OR_EQUAL(version -> \"version \" + version + \" or earlier\"),\n+\t\tSAME_MAJOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 1; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t}),\n+\t\tSAME_MAJOR_AND_MINOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 2; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t});\n+\n+\t\tprivate final UnaryOperator<String> reprOperator;\n+\n+\t\tType(UnaryOperator<String> reprOperator) {\n+\t\t\tthis.reprOperator = reprOperator;\n+\t\t}\n+\n+\t\tpublic String represent(String version) {\n+\t\t\treturn reprOperator.apply(version);\n+\t\t}\n+\t}\n+\n+\tprivate final Type type;\n+\tprivate final String version;\n+\tprivate String stringRepr;\n+\n+\tpublic VersionRange(Type type, String version) {\n+\t\tthis.type = type;\n+\t\tthis.version = version;\n+\t}\n+\n+\tpublic Type getType() {\n+\t\treturn type;\n+\t}\n+\n+\tpublic String getVersion() {\n+\t\treturn version;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tif (stringRepr == null) {\n+\t\t\tstringRepr = type.represent(version);\n+\t\t}\n+\n+\t\treturn stringRepr;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object o) {\n+\t\tif (this == o) {\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tif (o == null || getClass() != o.getClass()) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tVersionRange that = (VersionRange) o;\n+\t\treturn type == that.type && version.equals(that.version);\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\treturn Objects.hash(type, version);\n+\t}\n+\n+\tpublic static Collection<VersionRange> fromVersionMatchers(String... matchers) {\n+\t\tCollection<VersionRange> ranges = Arrays.stream(matchers).map(matcher -> {\n+\t\t\tchar firstChar = matcher.charAt(0);\n+\t\t\tchar secondChar = 0;\n+\n+\t\t\tif (matcher.length() > 1) {\n+\t\t\t\tsecondChar = matcher.charAt(1);\n+\t\t\t}\n+\n+\t\t\tswitch (firstChar) {\n+\t\t\tcase '*':\n+\t\t\t\tif (matcher.length() == 1) {\n+\t\t\t\t\treturn new VersionRange(Type.ANY, \"\");\n+\t\t\t\t} else {\n+\t\t\t\t\treturn new VersionRange(Type.INVALID, \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIwMjg2OA==", "bodyText": "This should return a Set for correct equals semantics.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497202868", "createdAt": "2020-09-30T02:07:23Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/api/metadata/ModDependency.java", "diffHunk": "@@ -33,4 +36,11 @@\n \t * @param version the version to check\n \t */\n \tboolean matches(Version version);\n+\n+\t/**\n+\t * Returns a representation of the dependency's version requirements.\n+\t *\n+\t * @return representation of the dependency's version requirements\n+\t */\n+\tCollection<VersionRange> getVersionRequirements();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIwNTEzOQ==", "bodyText": "The logic here looks a bit weird, the 2nd trim makes no difference outside the 2nd if. Why is it > 1 instead of > 0?", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497205139", "createdAt": "2020-09-30T02:16:38Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/gui/FabricStatusTree.java", "diffHunk": "@@ -203,10 +203,43 @@ public void setInfo() {\n \t\t\tsetWarningLevel(FabricTreeWarningLevel.INFO);\n \t\t}\n \n+\t\tprivate FabricStatusNode addChild(String string, boolean info) {\n+\t\t\tif (string.startsWith(\"\\t\")) {\n+\t\t\t\tif (children.size() == 0) {\n+\t\t\t\t\tFabricStatusNode rootChild = new FabricStatusNode(this, \"(indented node was added before root node - this is a bug!)\");\n+\t\t\t\t\trootChild.warningLevel = FabricTreeWarningLevel.WARN;\n+\t\t\t\t\tchildren.add(rootChild);\n+\t\t\t\t}\n+\t\t\t\tFabricStatusNode lastChild = children.get(children.size() - 1);\n+\t\t\t\tlastChild.addChild(string.substring(1), true);\n+\t\t\t\treturn lastChild;\n+\t\t\t} else {\n+\t\t\t\tFabricStatusNode child = new FabricStatusNode(this, info ? emboldenForNode(string) : cleanForNode(string));\n+\t\t\t\tif (info) {\n+\t\t\t\t\tchild.warningLevel = FabricTreeWarningLevel.INFO;\n+\t\t\t\t\texpandByDefault = true;\n+\t\t\t\t}\n+\t\t\t\tchildren.add(child);\n+\t\t\t\treturn child;\n+\t\t\t}\n+\t\t}\n+\n \t\tpublic FabricStatusNode addChild(String string) {\n-\t\t\tFabricStatusNode child = new FabricStatusNode(this, string);\n-\t\t\tchildren.add(child);\n-\t\t\treturn child;\n+\t\t\treturn addChild(string, false);\n+\t\t}\n+\n+\t\tprivate String cleanForNode(String string) {\n+\t\t\tstring = string.trim();\n+\t\t\tif (string.length() > 1) {\n+\t\t\t\tif (string.startsWith(\"-\"))\n+\t\t\t\t\tstring = string.substring(1);\n+\t\t\t\tstring = string.trim();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIwNjAxNA==", "bodyText": "This makes me suspicious of whether the code deals with string containing characters that are meaningful html.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497206014", "createdAt": "2020-09-30T02:20:11Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/gui/FabricStatusTree.java", "diffHunk": "@@ -203,10 +203,43 @@ public void setInfo() {\n \t\t\tsetWarningLevel(FabricTreeWarningLevel.INFO);\n \t\t}\n \n+\t\tprivate FabricStatusNode addChild(String string, boolean info) {\n+\t\t\tif (string.startsWith(\"\\t\")) {\n+\t\t\t\tif (children.size() == 0) {\n+\t\t\t\t\tFabricStatusNode rootChild = new FabricStatusNode(this, \"(indented node was added before root node - this is a bug!)\");\n+\t\t\t\t\trootChild.warningLevel = FabricTreeWarningLevel.WARN;\n+\t\t\t\t\tchildren.add(rootChild);\n+\t\t\t\t}\n+\t\t\t\tFabricStatusNode lastChild = children.get(children.size() - 1);\n+\t\t\t\tlastChild.addChild(string.substring(1), true);\n+\t\t\t\treturn lastChild;\n+\t\t\t} else {\n+\t\t\t\tFabricStatusNode child = new FabricStatusNode(this, info ? emboldenForNode(string) : cleanForNode(string));\n+\t\t\t\tif (info) {\n+\t\t\t\t\tchild.warningLevel = FabricTreeWarningLevel.INFO;\n+\t\t\t\t\texpandByDefault = true;\n+\t\t\t\t}\n+\t\t\t\tchildren.add(child);\n+\t\t\t\treturn child;\n+\t\t\t}\n+\t\t}\n+\n \t\tpublic FabricStatusNode addChild(String string) {\n-\t\t\tFabricStatusNode child = new FabricStatusNode(this, string);\n-\t\t\tchildren.add(child);\n-\t\t\treturn child;\n+\t\t\treturn addChild(string, false);\n+\t\t}\n+\n+\t\tprivate String cleanForNode(String string) {\n+\t\t\tstring = string.trim();\n+\t\t\tif (string.length() > 1) {\n+\t\t\t\tif (string.startsWith(\"-\"))\n+\t\t\t\t\tstring = string.substring(1);\n+\t\t\t\tstring = string.trim();\n+\t\t\t}\n+\t\t\treturn string;\n+\t\t}\n+\n+\t\tprivate String emboldenForNode(String string) {\n+\t\t\treturn \"<html><b>\" + cleanForNode(string) + \"</b></html>\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7e2f778988e785bb91d4e01f6a23d6726f82bd2", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/a7e2f778988e785bb91d4e01f6a23d6726f82bd2", "committedDate": "2020-09-30T12:33:18Z", "message": "player refactors\n\n- VersionRange -> VersionPredicate\n- Use Set instead of useless Collection\n- VersionPredicate.toString is now less descriptive, descriptions will be generated in ModResolver to allow for better i18n\n- Sub-nodes are no longer in bold and set as info in FabricStatusTree"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d07730695baa172b38c500fa08e7a344b41f1ce", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/2d07730695baa172b38c500fa08e7a344b41f1ce", "committedDate": "2020-09-30T12:47:12Z", "message": "Check for nulls in VersionPredicate constructor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NDQ3NzU1", "url": "https://github.com/FabricMC/fabric-loader/pull/277#pullrequestreview-499447755", "createdAt": "2020-09-30T13:46:32Z", "commit": {"oid": "2d07730695baa172b38c500fa08e7a344b41f1ce"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMzo0NjozMlrOHaeWnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMzo0NjozMlrOHaeWnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUyMjMzMg==", "bodyText": "The caret (^) ranges actually check that the left-most non-zero digit matches, so this would have different behaviour for versions such as 0.a.b and 0.0.c. (This is detailed in the NPM semver docs, which are linked in the fabric.mod.json spec as the definition of the dep strings.)", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497522332", "createdAt": "2020-09-30T13:46:32Z", "author": {"login": "Juuxel"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -314,46 +314,117 @@ private static IVecInt toVecInt(IntStream stream) {\n \tprivate void addErrorToList(ModCandidate candidate, ModDependency dependency, Map<String, ModCandidate> result, StringBuilder errors, String errorType, boolean cond) {\n \t\tString depModId = dependency.getModId();\n \n-\t\tStringBuilder prefix = new StringBuilder(\"\\n - Mod \").append(candidate.getInfo().getId());\n-\t\tprefix.append(\" \").append(errorType).append(\" mod \").append(depModId);\n+\t\terrors.append(\"\\n - Mod \").append(getCandidateName(candidate)).append(\" \").append(errorType).append(\" \");\n \n \t\tList<String> errorList = new ArrayList<>();\n \n \t\tif (!isModIdValid(depModId, errorList)) {\n-\t\t\tif (errorList.size() == 1) {\n-\t\t\t\terrors.append(prefix).append(\" which has an invalid mod id because it \").append(errorList.get(0));\n-\t\t\t} else {\n-\t\t\t\terrors.append(prefix).append(\" which has an invalid mod because:\");\n+\t\t\terrors.append(depModId).append(\", which has an invalid mod ID because:\");\n \n-\t\t\t\tfor (String error : errorList) {\n-\t\t\t\t\terrors.append(\"\\n   - It \").append(error);\n-\t\t\t\t}\n+\t\t\tfor (String error : errorList) {\n+\t\t\t\terrors.append(\"\\n\\t - It \").append(error);\n \t\t\t}\n \n \t\t\treturn;\n \t\t}\n \n \t\tModCandidate depCandidate = result.get(depModId);\n-\t\tboolean isPresent = depCandidate == null ? false : dependency.matches(depCandidate.getInfo().getVersion());\n+\t\tboolean isPresent = depCandidate != null && dependency.matches(depCandidate.getInfo().getVersion());\n \n \t\tif (isPresent != cond) {\n-\t\t\terrors.append(\"\\n - Mod \").append(candidate.getInfo().getId()).append(\" \").append(errorType).append(\" mod \").append(dependency).append(\", \");\n-\n+\t\t\terrors.append(getDependencyVersionRequirements(dependency)).append(\" of mod \")\n+\t\t\t\t\t.append(depCandidate == null ? depModId : getCandidateName(depCandidate)).append(\", \");\n \t\t\tif (depCandidate == null) {\n-\t\t\t\terrors.append(\"which is missing\");\n+\t\t\t\tappendMissingDependencyError(errors, dependency);\n \t\t\t} else if (cond) {\n-\t\t\t\terrors.append(\"but a different version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\tappendUnsatisfiedDependencyError(errors, dependency, depCandidate);\n \t\t\t} else if (errorType.contains(\"conf\")) {\n \t\t\t\t// CONFLICTS WITH\n-\t\t\t\terrors.append(\"but the conflicting version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\tappendConflictError(errors, candidate, depCandidate);\n \t\t\t} else {\n-\t\t\t\terrors.append(\"but the breaking version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\tappendBreakingError(errors, candidate, depCandidate);\n \t\t\t}\n-\n-\t\t\terrors.append(\"!\");\n \t\t}\n \t}\n \n+\tprivate void appendMissingDependencyError(StringBuilder errors, ModDependency dependency) {\n+\t\terrors.append(\"which is missing!\");\n+\t\terrors.append(\"\\n\\t - You must install \").append(getDependencyVersionRequirements(dependency)).append(\" of \")\n+\t\t\t\t.append(dependency.getModId()).append(\".\");\n+\t}\n+\n+\tprivate void appendUnsatisfiedDependencyError(StringBuilder errors, ModDependency dependency, ModCandidate depCandidate) {\n+\t\terrors.append(\"but a non-matching version is present: \").append(getCandidateFriendlyVersion(depCandidate)).append(\"!\");\n+\t\terrors.append(\"\\n\\t - You must install \").append(getDependencyVersionRequirements(dependency)).append(\" of \")\n+\t\t\t\t.append(getCandidateName(depCandidate)).append(\".\");\n+\t}\n+\n+\tprivate void appendConflictError(StringBuilder errors, ModCandidate candidate, ModCandidate depCandidate) {\n+\t\tfinal String depCandidateVer = getCandidateFriendlyVersion(depCandidate);\n+\t\terrors.append(\"but a matching version is present: \").append(depCandidateVer).append(\"!\");\n+\t\terrors.append(\"\\n\\t - While this won't prevent you from starting the game,\");\n+\t\terrors.append(\" the developer(s) of \").append(getCandidateName(candidate));\n+\t\terrors.append(\" have found that version \").append(depCandidateVer).append(\" of \").append(getCandidateName(depCandidate));\n+\t\terrors.append(\" conflicts with their mod.\");\n+\t\terrors.append(\"\\n\\t - It is heavily recommended to remove one of the mods.\");\n+\t}\n+\n+\tprivate void appendBreakingError(StringBuilder errors, ModCandidate candidate, ModCandidate depCandidate) {\n+\t\tfinal String depCandidateVer = getCandidateFriendlyVersion(depCandidate);\n+\t\terrors.append(\"but a matching version is present: \").append(depCandidate.getInfo().getVersion()).append(\"!\");\n+\t\terrors.append(\"\\n\\t - The developer(s) of \").append(getCandidateName(candidate));\n+\t\terrors.append(\" have found that version \").append(depCandidateVer).append(\" of \").append(getCandidateName(depCandidate));\n+\t\terrors.append(\" critically conflicts with their mod.\");\n+\t\terrors.append(\"\\n\\t - You must remove one of the mods.\");\n+\t}\n+\n+\tprivate static String getCandidateName(ModCandidate candidate) {\n+\t\treturn \"'\" + candidate.getInfo().getName() + \"' (\" + candidate.getInfo().getId() + \")\";\n+\t}\n+\n+\tprivate static String getCandidateFriendlyVersion(ModCandidate candidate) {\n+\t\treturn candidate.getInfo().getVersion().getFriendlyString();\n+\t}\n+\n+\tprivate static String getDependencyVersionRequirements(ModDependency dependency) {\n+\t\treturn dependency.getVersionRequirements().stream().map(predicate -> {\n+\t\t\tString version = predicate.getVersion();\n+\t\t\tString[] parts;\n+\t\t\tswitch(predicate.getType()) {\n+\t\t\tcase ANY:\n+\t\t\t\treturn \"any version\";\n+\t\t\tcase EQUALS:\n+\t\t\t\treturn \"version \" + version;\n+\t\t\tcase GREATER_THAN:\n+\t\t\t\treturn \"any version after \" + version;\n+\t\t\tcase LESSER_THAN:\n+\t\t\t\treturn \"any version before \" + version;\n+\t\t\tcase GREATER_THAN_OR_EQUAL:\n+\t\t\t\treturn \"version \" + version + \" or later\";\n+\t\t\tcase LESSER_THAN_OR_EQUAL:\n+\t\t\t\treturn \"version \" + version + \" or earlier\";\n+\t\t\tcase SAME_MAJOR:\n+\t\t\t\tparts = version.split(\"\\\\.\");\n+\n+\t\t\t\tfor (int i = 1; i < parts.length; i++) {\n+\t\t\t\t\tparts[i] = \"x\";\n+\t\t\t\t}\n+\n+\t\t\t\treturn \"version \" + String.join(\".\", parts);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d07730695baa172b38c500fa08e7a344b41f1ce"}, "originalPosition": 136}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MjgyOTk5", "url": "https://github.com/FabricMC/fabric-loader/pull/277#pullrequestreview-505282999", "createdAt": "2020-10-09T00:58:08Z", "commit": {"oid": "2d07730695baa172b38c500fa08e7a344b41f1ce"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMDo1ODowOVrOHe2NGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMDo1ODowOVrOHe2NGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjEwNzQxOA==", "bodyText": "in Java switch-case is fall through, you need to add break; before every case that you don't want to enter form the previous case.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r502107418", "createdAt": "2020-10-09T00:58:09Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/api/VersionPredicate.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+public final class VersionPredicate {\n+\tpublic enum Type {\n+\t\tANY(\"*\"),\n+\t\tEQUALS(\"=\"),\n+\t\tGREATER_THAN(\">\"),\n+\t\tLESSER_THAN(\"<\"),\n+\t\tGREATER_THAN_OR_EQUAL(\">=\"),\n+\t\tLESSER_THAN_OR_EQUAL(\"<=\"),\n+\t\tSAME_MAJOR(\"^\"),\n+\t\tSAME_MAJOR_AND_MINOR(\"~\");\n+\n+\t\tprivate final String prefix;\n+\n+\t\tType(String prefix) {\n+\t\t\tthis.prefix = prefix;\n+\t\t}\n+\n+\t\tpublic String prefix() {\n+\t\t\treturn prefix;\n+\t\t}\n+\n+\t\tpublic String describe(String version) {\n+\t\t\treturn this == ANY ? prefix : prefix + version;\n+\t\t}\n+\t}\n+\n+\tprivate final Type type;\n+\tprivate final String version;\n+\n+\tpublic VersionPredicate(Type type, String version) {\n+\t\tthis.type = Objects.requireNonNull(type, \"type == null!\");\n+\t\tthis.version = Objects.requireNonNull(version, \"version == null!\");\n+\t}\n+\n+\tpublic Type getType() {\n+\t\treturn type;\n+\t}\n+\n+\tpublic String getVersion() {\n+\t\treturn version;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn type.describe(version);\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object o) {\n+\t\tif (this == o) {\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tif (o == null || getClass() != o.getClass()) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tVersionPredicate that = (VersionPredicate) o;\n+\t\treturn type == that.type && version.equals(that.version);\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\treturn Objects.hash(type, version);\n+\t}\n+\n+\tpublic static Set<VersionPredicate> parse(String... matchers) {\n+\t\tSet<VersionPredicate> predicates = new HashSet<>(matchers.length);\n+\n+\t\tfor (String matcher : matchers) {\n+\t\t\tchar firstChar = matcher.charAt(0);\n+\t\t\tchar secondChar = 0;\n+\n+\t\t\tif (matcher.length() > 1) {\n+\t\t\t\tsecondChar = matcher.charAt(1);\n+\t\t\t}\n+\n+\t\t\tswitch (firstChar) {\n+\t\t\tcase '*':\n+\t\t\t\tif (matcher.length() == 1) {\n+\t\t\t\t\tpredicates.clear();\n+\t\t\t\t\tpredicates.add(new VersionPredicate(Type.ANY, \"\"));\n+\t\t\t\t} else {\n+\t\t\t\t\tpredicates.add(new VersionPredicate(Type.EQUALS, matcher));\n+\t\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d07730695baa172b38c500fa08e7a344b41f1ce"}, "originalPosition": 108}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c998b86132a722692727b8084750e54ff3defbc", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/9c998b86132a722692727b8084750e54ff3defbc", "committedDate": "2020-10-09T17:23:33Z", "message": "them's the breaks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3869dc52a133011925c2593505a61bc4e4a4491", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/f3869dc52a133011925c2593505a61bc4e4a4491", "committedDate": "2020-10-10T10:12:28Z", "message": "VersionPredicate.parse: fail-fast on ANY predicate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1f614fc5c0d82bfeac3eb5d9f58444b8a950979", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/d1f614fc5c0d82bfeac3eb5d9f58444b8a950979", "committedDate": "2020-10-18T16:23:02Z", "message": "Merge branch 'master' of https://github.com/FabricMC/fabric-loader into friendly-errors\n\n\u0001 Conflicts:\n\u0001\tsrc/main/java/net/fabricmc/loader/metadata/ModMetadataV0.java\n\u0001\tsrc/main/java/net/fabricmc/loader/metadata/ModMetadataV1.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70a3b31d63df7679a99b327fd4b728b9961b35bf", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/70a3b31d63df7679a99b327fd4b728b9961b35bf", "committedDate": "2020-10-18T16:35:58Z", "message": "post Gson yeetage update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c89ba62541882dbf95622b3420f06dedf2d2636", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/0c89ba62541882dbf95622b3420f06dedf2d2636", "committedDate": "2020-10-19T06:52:59Z", "message": "ModResolver: don't make up errors for god's sake\n\nThis is why you test with a set of mods that *should* work, Leo..."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a762f179441e562f1086a1a2aa262de84752423c", "author": {"user": {"login": "Leo40Git", "name": "ADudeCalledLeo"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/a762f179441e562f1086a1a2aa262de84752423c", "committedDate": "2020-10-19T08:06:43Z", "message": "Add JiJ info to dependency errors\n\nProblem: If JiJs are present, this code never gets run..."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2OTgxMDMz", "url": "https://github.com/FabricMC/fabric-loader/pull/277#pullrequestreview-516981033", "createdAt": "2020-10-26T16:51:02Z", "commit": {"oid": "a762f179441e562f1086a1a2aa262de84752423c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDc4OTk3", "url": "https://github.com/FabricMC/fabric-loader/pull/277#pullrequestreview-517078997", "createdAt": "2020-10-26T18:48:32Z", "commit": {"oid": "a762f179441e562f1086a1a2aa262de84752423c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3457, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}