{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMTU0OTY2", "number": 222, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxOTowMToxM1rODzQIRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxOToxMTowM1rODzQMgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDY4MjI5OnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxOTowMToxM1rOGHtaCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxOTowMjowNlrOGHtabg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczNzE2MQ==", "bodyText": "Should we use fat jd like api here?", "url": "https://github.com/FabricMC/fabric-loader/pull/222#discussion_r410737161", "createdAt": "2020-04-18T19:01:13Z", "author": {"login": "modmuss50"}, "path": "build.gradle", "diffHunk": "@@ -131,6 +131,37 @@ task sourcesJar(type: Jar, dependsOn: classes) {\n \tfrom sourceSets.main.allSource\n }\n \n+javadoc {\n+\toptions {\n+\t\tif (file(\"README.html\").exists()) {\n+\t\t\toverview = \"README.html\"\n+\t\t}\n+\t\tsource = \"8\"\n+\t\tencoding = 'UTF-8'\n+\t\tcharSet = 'UTF-8'\n+\t\tmemberLevel = JavadocMemberLevel.PACKAGE\n+\t\tlinks(\n+\t\t\t\t'https://asm.ow2.io/javadoc/',\n+\t\t\t\t'https://docs.oracle.com/javase/8/docs/api/',\n+\t\t\t\t'https://logging.apache.org/log4j/2.x/log4j-api/apidocs/'\n+\t\t)\n+\t\t// Disable the crazy super-strict doclint tool in Java 8\n+\t\taddStringOption('Xdoclint:none', '-quiet')\n+\t}\n+\tsource sourceSets.main.allJava.srcDirs\n+\tclasspath = sourceSets.main.compileClasspath + sourceSets.main.output // compile impl stuff for dep as well\n+\tinclude(\"**/api/**\")\n+\t// workaround as one of the api stuff use that package\n+\tfailOnError false\n+}\n+\n+task javadocJar(type: Jar) {\n+\tdependsOn javadoc\n+\tfrom javadoc.destinationDir\n+\tclassifier = 'javadoc'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "232c70b731d472ed59f759b4c6ff4d37f3c9fc41"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczNzI2Mg==", "bodyText": "Fat jd for api is because api has individual modules (in those cases, individual modules' docs are preferred). Fabric Loader is single-module, and this javadoc is not across module, so no need for \"fat\".", "url": "https://github.com/FabricMC/fabric-loader/pull/222#discussion_r410737262", "createdAt": "2020-04-18T19:02:06Z", "author": {"login": "liach"}, "path": "build.gradle", "diffHunk": "@@ -131,6 +131,37 @@ task sourcesJar(type: Jar, dependsOn: classes) {\n \tfrom sourceSets.main.allSource\n }\n \n+javadoc {\n+\toptions {\n+\t\tif (file(\"README.html\").exists()) {\n+\t\t\toverview = \"README.html\"\n+\t\t}\n+\t\tsource = \"8\"\n+\t\tencoding = 'UTF-8'\n+\t\tcharSet = 'UTF-8'\n+\t\tmemberLevel = JavadocMemberLevel.PACKAGE\n+\t\tlinks(\n+\t\t\t\t'https://asm.ow2.io/javadoc/',\n+\t\t\t\t'https://docs.oracle.com/javase/8/docs/api/',\n+\t\t\t\t'https://logging.apache.org/log4j/2.x/log4j-api/apidocs/'\n+\t\t)\n+\t\t// Disable the crazy super-strict doclint tool in Java 8\n+\t\taddStringOption('Xdoclint:none', '-quiet')\n+\t}\n+\tsource sourceSets.main.allJava.srcDirs\n+\tclasspath = sourceSets.main.compileClasspath + sourceSets.main.output // compile impl stuff for dep as well\n+\tinclude(\"**/api/**\")\n+\t// workaround as one of the api stuff use that package\n+\tfailOnError false\n+}\n+\n+task javadocJar(type: Jar) {\n+\tdependsOn javadoc\n+\tfrom javadoc.destinationDir\n+\tclassifier = 'javadoc'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczNzE2MQ=="}, "originalCommit": {"oid": "232c70b731d472ed59f759b4c6ff4d37f3c9fc41"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDY4MzAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/api/ClientModInitializer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxOTowMTo0NVrOGHtaUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxOToyMDoxOFrOGHtjdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczNzIzMw==", "bodyText": "This might not be the right place for this, as it can be diffrent for diffrent langs", "url": "https://github.com/FabricMC/fabric-loader/pull/222#discussion_r410737233", "createdAt": "2020-04-18T19:01:45Z", "author": {"login": "modmuss50"}, "path": "src/main/java/net/fabricmc/api/ClientModInitializer.java", "diffHunk": "@@ -16,7 +16,29 @@\n \n package net.fabricmc.api;\n \n+/**\n+ * A mod initializer ran only on {@link EnvType#CLIENT}.\n+ *\n+ * <p>This entrypoint is suitable for setting up client-specific logic, such as rendering\n+ * or integrated server tweaks.</p>\n+ *\n+ * <p>In {@code fabric.mod.json}, the entrypoint is defined as:\n+ * <pre><blockquote>\n+ *     \"entrypoints\": {\n+ *         \"client\": [\n+ *             &lt;a list of string referring to your client mod initializers&gt;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "232c70b731d472ed59f759b4c6ff4d37f3c9fc41"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczNzU5NQ==", "bodyText": "should make it entrypoint list notation instead, I guess?", "url": "https://github.com/FabricMC/fabric-loader/pull/222#discussion_r410737595", "createdAt": "2020-04-18T19:04:14Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/api/ClientModInitializer.java", "diffHunk": "@@ -16,7 +16,29 @@\n \n package net.fabricmc.api;\n \n+/**\n+ * A mod initializer ran only on {@link EnvType#CLIENT}.\n+ *\n+ * <p>This entrypoint is suitable for setting up client-specific logic, such as rendering\n+ * or integrated server tweaks.</p>\n+ *\n+ * <p>In {@code fabric.mod.json}, the entrypoint is defined as:\n+ * <pre><blockquote>\n+ *     \"entrypoints\": {\n+ *         \"client\": [\n+ *             &lt;a list of string referring to your client mod initializers&gt;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczNzIzMw=="}, "originalCommit": {"oid": "232c70b731d472ed59f759b4c6ff4d37f3c9fc41"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczOTU3Mw==", "bodyText": "People can just look at the docs on getEntrypointContainers, I think.", "url": "https://github.com/FabricMC/fabric-loader/pull/222#discussion_r410739573", "createdAt": "2020-04-18T19:20:18Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/api/ClientModInitializer.java", "diffHunk": "@@ -16,7 +16,29 @@\n \n package net.fabricmc.api;\n \n+/**\n+ * A mod initializer ran only on {@link EnvType#CLIENT}.\n+ *\n+ * <p>This entrypoint is suitable for setting up client-specific logic, such as rendering\n+ * or integrated server tweaks.</p>\n+ *\n+ * <p>In {@code fabric.mod.json}, the entrypoint is defined as:\n+ * <pre><blockquote>\n+ *     \"entrypoints\": {\n+ *         \"client\": [\n+ *             &lt;a list of string referring to your client mod initializers&gt;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczNzIzMw=="}, "originalCommit": {"oid": "232c70b731d472ed59f759b4c6ff4d37f3c9fc41"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDY4Mzc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/api/EnvType.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxOTowMjo0MVrOGHtasg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxOTo1Njo1NFrOGHtyew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczNzMzMA==", "bodyText": "this doesnt seem great, no idea why they need the launcher meta json here.", "url": "https://github.com/FabricMC/fabric-loader/pull/222#discussion_r410737330", "createdAt": "2020-04-18T19:02:41Z", "author": {"login": "modmuss50"}, "path": "src/main/java/net/fabricmc/api/EnvType.java", "diffHunk": "@@ -16,7 +16,35 @@\n \n package net.fabricmc.api;\n \n+/**\n+ * Represents a type of environment.\n+ *\n+ * <p>A type of environment is a jar file in a <i>Minecraft</i> version's json file's {@code download}\n+ * subsection, including the {@code client.jar} and the {@code server.jar}.</p>\n+ *\n+ * @see Environment\n+ * @see EnvironmentInterface\n+ * @see <a href=\"https://launchermeta.mojang.com/mc/game/version_manifest.json\">A list of <i>Minecraft</i>\n+ * version's json files</a>\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "232c70b731d472ed59f759b4c6ff4d37f3c9fc41"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczNzUxMw==", "bodyText": "Just a reference for people for json so they can actually see the client/server sections in downloads section.", "url": "https://github.com/FabricMC/fabric-loader/pull/222#discussion_r410737513", "createdAt": "2020-04-18T19:03:41Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/api/EnvType.java", "diffHunk": "@@ -16,7 +16,35 @@\n \n package net.fabricmc.api;\n \n+/**\n+ * Represents a type of environment.\n+ *\n+ * <p>A type of environment is a jar file in a <i>Minecraft</i> version's json file's {@code download}\n+ * subsection, including the {@code client.jar} and the {@code server.jar}.</p>\n+ *\n+ * @see Environment\n+ * @see EnvironmentInterface\n+ * @see <a href=\"https://launchermeta.mojang.com/mc/game/version_manifest.json\">A list of <i>Minecraft</i>\n+ * version's json files</a>\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczNzMzMA=="}, "originalCommit": {"oid": "232c70b731d472ed59f759b4c6ff4d37f3c9fc41"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc0MzQxOQ==", "bodyText": "Removed the launchermeta link.", "url": "https://github.com/FabricMC/fabric-loader/pull/222#discussion_r410743419", "createdAt": "2020-04-18T19:56:54Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/api/EnvType.java", "diffHunk": "@@ -16,7 +16,35 @@\n \n package net.fabricmc.api;\n \n+/**\n+ * Represents a type of environment.\n+ *\n+ * <p>A type of environment is a jar file in a <i>Minecraft</i> version's json file's {@code download}\n+ * subsection, including the {@code client.jar} and the {@code server.jar}.</p>\n+ *\n+ * @see Environment\n+ * @see EnvironmentInterface\n+ * @see <a href=\"https://launchermeta.mojang.com/mc/game/version_manifest.json\">A list of <i>Minecraft</i>\n+ * version's json files</a>\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczNzMzMA=="}, "originalCommit": {"oid": "232c70b731d472ed59f759b4c6ff4d37f3c9fc41"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDY4ODA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/api/LanguageAdapter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxOTowNjoxM1rOGHtctg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxOToxMjozOVrOGHtfpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczNzg0Ng==", "bodyText": "This isnt quite right I dont think, as its based on the implimentation", "url": "https://github.com/FabricMC/fabric-loader/pull/222#discussion_r410737846", "createdAt": "2020-04-18T19:06:13Z", "author": {"login": "modmuss50"}, "path": "src/main/java/net/fabricmc/loader/api/LanguageAdapter.java", "diffHunk": "@@ -16,6 +16,87 @@\n \n package net.fabricmc.loader.api;\n \n+/**\n+ * Creates instances of objects from custom notations.\n+ *\n+ * <p>It enables obtaining of other JVM languages' objects with custom instantiation logic.</p>\n+ *\n+ * <p>A language adapter is defined as so in {@code fabric.mod.json}:\n+ * <pre><blockquote>\n+ *   \"languageAdapter\": {\n+ *     \"&lt;a key&gt;\": \"&lt;the binary name of the language adapter class&gt;\"\n+ *   }\n+ * </blockquote></pre>\n+ * Multiple keys can be present in the {@code languageAdapter} section.</p>\n+ *\n+ * <p>In the declaration, the language adapter is referred by its <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-13.html#jls-13.1\">binary name</a>,\n+ * such as {@code \"mypackage.MyClass$Inner\"}. It must have a no-argument public constructor for the Loader to instantiate.</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "232c70b731d472ed59f759b4c6ff4d37f3c9fc41"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczNzk4MQ==", "bodyText": "\ud83e\udd14 well, this is the technical name of the \"dot format\"", "url": "https://github.com/FabricMC/fabric-loader/pull/222#discussion_r410737981", "createdAt": "2020-04-18T19:07:30Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/api/LanguageAdapter.java", "diffHunk": "@@ -16,6 +16,87 @@\n \n package net.fabricmc.loader.api;\n \n+/**\n+ * Creates instances of objects from custom notations.\n+ *\n+ * <p>It enables obtaining of other JVM languages' objects with custom instantiation logic.</p>\n+ *\n+ * <p>A language adapter is defined as so in {@code fabric.mod.json}:\n+ * <pre><blockquote>\n+ *   \"languageAdapter\": {\n+ *     \"&lt;a key&gt;\": \"&lt;the binary name of the language adapter class&gt;\"\n+ *   }\n+ * </blockquote></pre>\n+ * Multiple keys can be present in the {@code languageAdapter} section.</p>\n+ *\n+ * <p>In the declaration, the language adapter is referred by its <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-13.html#jls-13.1\">binary name</a>,\n+ * such as {@code \"mypackage.MyClass$Inner\"}. It must have a no-argument public constructor for the Loader to instantiate.</p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczNzg0Ng=="}, "originalCommit": {"oid": "232c70b731d472ed59f759b4c6ff4d37f3c9fc41"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczODA0Ng==", "bodyText": "no, the 2nd bit about the constructor", "url": "https://github.com/FabricMC/fabric-loader/pull/222#discussion_r410738046", "createdAt": "2020-04-18T19:07:54Z", "author": {"login": "modmuss50"}, "path": "src/main/java/net/fabricmc/loader/api/LanguageAdapter.java", "diffHunk": "@@ -16,6 +16,87 @@\n \n package net.fabricmc.loader.api;\n \n+/**\n+ * Creates instances of objects from custom notations.\n+ *\n+ * <p>It enables obtaining of other JVM languages' objects with custom instantiation logic.</p>\n+ *\n+ * <p>A language adapter is defined as so in {@code fabric.mod.json}:\n+ * <pre><blockquote>\n+ *   \"languageAdapter\": {\n+ *     \"&lt;a key&gt;\": \"&lt;the binary name of the language adapter class&gt;\"\n+ *   }\n+ * </blockquote></pre>\n+ * Multiple keys can be present in the {@code languageAdapter} section.</p>\n+ *\n+ * <p>In the declaration, the language adapter is referred by its <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-13.html#jls-13.1\">binary name</a>,\n+ * such as {@code \"mypackage.MyClass$Inner\"}. It must have a no-argument public constructor for the Loader to instantiate.</p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczNzg0Ng=="}, "originalCommit": {"oid": "232c70b731d472ed59f759b4c6ff4d37f3c9fc41"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczODU5OA==", "bodyText": "Hmm, no? \n  \n    \n      fabric-loader/src/main/java/net/fabricmc/loader/FabricLoader.java\n    \n    \n         Line 347\n      in\n      9f6b859\n    \n    \n    \n    \n\n        \n          \n           adapterMap.put(laEntry.getKey(), (LanguageAdapter) Class.forName(laEntry.getValue(), true, FabricLauncherBase.getLauncher().getTargetClassLoader()).getDeclaredConstructor().newInstance()); \n        \n    \n  \n\n\nHere loader is explicitly requiring calling the constructor", "url": "https://github.com/FabricMC/fabric-loader/pull/222#discussion_r410738598", "createdAt": "2020-04-18T19:12:39Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/api/LanguageAdapter.java", "diffHunk": "@@ -16,6 +16,87 @@\n \n package net.fabricmc.loader.api;\n \n+/**\n+ * Creates instances of objects from custom notations.\n+ *\n+ * <p>It enables obtaining of other JVM languages' objects with custom instantiation logic.</p>\n+ *\n+ * <p>A language adapter is defined as so in {@code fabric.mod.json}:\n+ * <pre><blockquote>\n+ *   \"languageAdapter\": {\n+ *     \"&lt;a key&gt;\": \"&lt;the binary name of the language adapter class&gt;\"\n+ *   }\n+ * </blockquote></pre>\n+ * Multiple keys can be present in the {@code languageAdapter} section.</p>\n+ *\n+ * <p>In the declaration, the language adapter is referred by its <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-13.html#jls-13.1\">binary name</a>,\n+ * such as {@code \"mypackage.MyClass$Inner\"}. It must have a no-argument public constructor for the Loader to instantiate.</p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczNzg0Ng=="}, "originalCommit": {"oid": "232c70b731d472ed59f759b4c6ff4d37f3c9fc41"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDY4ODY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/api/LanguageAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxOTowNjo1MlrOGHtdBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxOTowNjo1MlrOGHtdBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczNzkyNA==", "bodyText": "I dont get everyone obession with using enums for singletons, lets not use it as an example.", "url": "https://github.com/FabricMC/fabric-loader/pull/222#discussion_r410737924", "createdAt": "2020-04-18T19:06:52Z", "author": {"login": "modmuss50"}, "path": "src/main/java/net/fabricmc/loader/api/LanguageAdapter.java", "diffHunk": "@@ -16,6 +16,87 @@\n \n package net.fabricmc.loader.api;\n \n+/**\n+ * Creates instances of objects from custom notations.\n+ *\n+ * <p>It enables obtaining of other JVM languages' objects with custom instantiation logic.</p>\n+ *\n+ * <p>A language adapter is defined as so in {@code fabric.mod.json}:\n+ * <pre><blockquote>\n+ *   \"languageAdapter\": {\n+ *     \"&lt;a key&gt;\": \"&lt;the binary name of the language adapter class&gt;\"\n+ *   }\n+ * </blockquote></pre>\n+ * Multiple keys can be present in the {@code languageAdapter} section.</p>\n+ *\n+ * <p>In the declaration, the language adapter is referred by its <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-13.html#jls-13.1\">binary name</a>,\n+ * such as {@code \"mypackage.MyClass$Inner\"}. It must have a no-argument public constructor for the Loader to instantiate.</p>\n+ *\n+ * <p>The {@code default} language adapter from Fabric Loader can accepet {@code value} as follows:\n+ * <ul>\n+ *   <li>A fully qualified reference to a class, in <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-13.html#jls-13.1\">\n+ *   binary name</a>, such as {@code package.MyClass$Inner}, where the class has a public no-argument constructor\n+ *   and {@code type} is assignable from the class.\n+ *\n+ *   <p>An example of an entrypoint class\n+ *   <pre><blockquote>\n+ *     package net.fabricmc.example;\n+ *     import net.fabricmc.api.ModInitializer;\n+ *     public class ExampleMod implements ModInitializer {\n+ *       {@literal @}Override\n+ *       public void onInitialize() {}\n+ *     }\n+ *   </blockquote></pre>\n+ *   You would declare {@code \"net.fabricmc.example.ExampleMod\"}.</p>\n+ *\n+ *   <p>For each entrypoint reference, a new instance of the class is created.\n+ * \t If this class implements two separate entrypoints, there will be two distinct\n+ * \t instances of this class in two entrypoint containers.</p>\n+ * \t </li>\n+ *\n+ *   <li>A fully qualified reference to a class in binary name followed by {@code ::} and a\n+ *   field name. The field must be static, and {@code type} must be assignable from\n+ *   the field's class.\n+ *\n+ *   <p>An example of an entrypoint field\n+ *   <pre><blockquote>\n+ *     package net.fabricmc.example;\n+ *     import net.fabricmc.api.ModInitializer;\n+ *     public enum ExampleMod implements ModInitializer {\n+ *       INSTANCE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "232c70b731d472ed59f759b4c6ff4d37f3c9fc41"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDY5MTAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/api/MappingResolver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxOTowODozNVrOGHteFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxOToyNzoyMFrOGHtmhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczODE5Nw==", "bodyText": "are you sure? I have a feeling its /", "url": "https://github.com/FabricMC/fabric-loader/pull/222#discussion_r410738197", "createdAt": "2020-04-18T19:08:35Z", "author": {"login": "modmuss50"}, "path": "src/main/java/net/fabricmc/loader/api/MappingResolver.java", "diffHunk": "@@ -21,63 +21,67 @@\n /**\n  * Helper class for performing mapping resolution.\n  *\n- * Note: The target namespace (the one being mapped to) for mapping (or the\n+ * <p><strong>Note</strong>: The target namespace (the one being mapped to) for mapping (or the\n  * source one for unmapping) is always implied to be the one Loader is\n- * currently operating in.\n+ * currently operating in.</p>\n+ *\n+ * <p>All the {@code className} used in this resolver are in <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-13.html#jls-13.1\">binary names</a>,\n+ * such as {@code \"mypackage.MyClass$Inner\"}.</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "232c70b731d472ed59f759b4c6ff4d37f3c9fc41"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczODczOQ==", "bodyText": "I think it is / as always used in mappings, but the old doc says it is dot format (see changeset below)", "url": "https://github.com/FabricMC/fabric-loader/pull/222#discussion_r410738739", "createdAt": "2020-04-18T19:13:37Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/api/MappingResolver.java", "diffHunk": "@@ -21,63 +21,67 @@\n /**\n  * Helper class for performing mapping resolution.\n  *\n- * Note: The target namespace (the one being mapped to) for mapping (or the\n+ * <p><strong>Note</strong>: The target namespace (the one being mapped to) for mapping (or the\n  * source one for unmapping) is always implied to be the one Loader is\n- * currently operating in.\n+ * currently operating in.</p>\n+ *\n+ * <p>All the {@code className} used in this resolver are in <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-13.html#jls-13.1\">binary names</a>,\n+ * such as {@code \"mypackage.MyClass$Inner\"}.</p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczODE5Nw=="}, "originalCommit": {"oid": "232c70b731d472ed59f759b4c6ff4d37f3c9fc41"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc0MDM1Nw==", "bodyText": "fabric-loader/src/main/java/net/fabricmc/loader/FabricMappingResolver.java\n    \n    \n        Lines 106 to 108\n      in\n      9f6b859\n    \n    \n    \n    \n\n        \n          \n           if (className.indexOf('/') >= 0) { \n        \n\n        \n          \n           \tthrow new IllegalArgumentException(\"Class names must be provided in dot format: \" + className); \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nWell it does take binary/dot format, rip (java's own Class.forName uses binary/dot format)", "url": "https://github.com/FabricMC/fabric-loader/pull/222#discussion_r410740357", "createdAt": "2020-04-18T19:27:20Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/api/MappingResolver.java", "diffHunk": "@@ -21,63 +21,67 @@\n /**\n  * Helper class for performing mapping resolution.\n  *\n- * Note: The target namespace (the one being mapped to) for mapping (or the\n+ * <p><strong>Note</strong>: The target namespace (the one being mapped to) for mapping (or the\n  * source one for unmapping) is always implied to be the one Loader is\n- * currently operating in.\n+ * currently operating in.</p>\n+ *\n+ * <p>All the {@code className} used in this resolver are in <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-13.html#jls-13.1\">binary names</a>,\n+ * such as {@code \"mypackage.MyClass$Inner\"}.</p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczODE5Nw=="}, "originalCommit": {"oid": "232c70b731d472ed59f759b4c6ff4d37f3c9fc41"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDY5MzEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/api/metadata/ModMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxOToxMTowM1rOGHte8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxOToxNDo1M1rOGHtg0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczODQxNw==", "bodyText": "I think this fails to load with theses. Not sure if theses really need to say what loader does?", "url": "https://github.com/FabricMC/fabric-loader/pull/222#discussion_r410738417", "createdAt": "2020-04-18T19:11:03Z", "author": {"login": "modmuss50"}, "path": "src/main/java/net/fabricmc/loader/api/metadata/ModMetadata.java", "diffHunk": "@@ -16,52 +16,129 @@\n \n package net.fabricmc.loader.api.metadata;\n \n-import com.google.gson.JsonElement;\n-import net.fabricmc.loader.api.Version;\n-\n import java.util.Collection;\n import java.util.Optional;\n \n+import com.google.gson.JsonElement;\n+\n+import net.fabricmc.loader.api.Version;\n+\n+/**\n+ * The metadata of a mod.\n+ */\n public interface ModMetadata {\n+\t/**\n+\t * Returns the type of the mod.\n+\t *\n+\t * <p>The types may be {@code fabric} or {@code builtin} by default.</p>\n+\t *\n+\t * @return the type of the mod\n+\t */\n \tString getType();\n \n \t// When adding getters, follow the order as presented on the wiki.\n \t// No defaults.\n \n+\t/**\n+\t * Returns the mod's ID.\n+\t *\n+\t * <p>A mod's id must have only lowercase letters, digits, {@code -}, or {@code _}.</p>\n+\t *\n+\t * @return the mod's ID.\n+\t */\n \tString getId();\n+\n+\t/**\n+\t * Returns the mod's version.\n+\t */\n \tVersion getVersion();\n \n+\t/**\n+\t * Returns the mod's required dependencies, without which the Loader will terminate loading.\n+\t */\n \tCollection<ModDependency> getDepends();\n+\n+\t/**\n+\t * Returns the mod's recommended dependencies, without which the Loader will emit a warning.\n+\t */\n \tCollection<ModDependency> getRecommends();\n+\n+\t/**\n+\t * Returns the mod's suggested dependencies.\n+\t */\n \tCollection<ModDependency> getSuggests();\n+\n+\t/**\n+\t * Returns the mod's conflicts, with which the Loader will terminate loading.\n+\t */\n \tCollection<ModDependency> getConflicts();\n+\n+\t/**\n+\t * Returns the mod's conflicts, with which the Loader will emit a warning.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "232c70b731d472ed59f759b4c6ff4d37f3c9fc41"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczODg5Ng==", "bodyText": "https://fabricmc.net/wiki/documentation:fabric_mod_json?s[]=conflicts\nProbably should say what loader does here.", "url": "https://github.com/FabricMC/fabric-loader/pull/222#discussion_r410738896", "createdAt": "2020-04-18T19:14:53Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/api/metadata/ModMetadata.java", "diffHunk": "@@ -16,52 +16,129 @@\n \n package net.fabricmc.loader.api.metadata;\n \n-import com.google.gson.JsonElement;\n-import net.fabricmc.loader.api.Version;\n-\n import java.util.Collection;\n import java.util.Optional;\n \n+import com.google.gson.JsonElement;\n+\n+import net.fabricmc.loader.api.Version;\n+\n+/**\n+ * The metadata of a mod.\n+ */\n public interface ModMetadata {\n+\t/**\n+\t * Returns the type of the mod.\n+\t *\n+\t * <p>The types may be {@code fabric} or {@code builtin} by default.</p>\n+\t *\n+\t * @return the type of the mod\n+\t */\n \tString getType();\n \n \t// When adding getters, follow the order as presented on the wiki.\n \t// No defaults.\n \n+\t/**\n+\t * Returns the mod's ID.\n+\t *\n+\t * <p>A mod's id must have only lowercase letters, digits, {@code -}, or {@code _}.</p>\n+\t *\n+\t * @return the mod's ID.\n+\t */\n \tString getId();\n+\n+\t/**\n+\t * Returns the mod's version.\n+\t */\n \tVersion getVersion();\n \n+\t/**\n+\t * Returns the mod's required dependencies, without which the Loader will terminate loading.\n+\t */\n \tCollection<ModDependency> getDepends();\n+\n+\t/**\n+\t * Returns the mod's recommended dependencies, without which the Loader will emit a warning.\n+\t */\n \tCollection<ModDependency> getRecommends();\n+\n+\t/**\n+\t * Returns the mod's suggested dependencies.\n+\t */\n \tCollection<ModDependency> getSuggests();\n+\n+\t/**\n+\t * Returns the mod's conflicts, with which the Loader will terminate loading.\n+\t */\n \tCollection<ModDependency> getConflicts();\n+\n+\t/**\n+\t * Returns the mod's conflicts, with which the Loader will emit a warning.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczODQxNw=="}, "originalCommit": {"oid": "232c70b731d472ed59f759b4c6ff4d37f3c9fc41"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3291, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}