{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxMTMxODQx", "number": 333, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwNDoyOToyMFrOE5IFZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwNDoyOTo0N1rOE5IFlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MzM2NzQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/discovery/DirectoryModCandidateFinder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwNDoyOToyMFrOHzceOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwNDozMjoxNVrOHzcfKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwNTkxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\tif (!Files.isHidden(file) && !file.toString().startsWith(\".\") && file.toString().endsWith(\".jar\")) {\n          \n          \n            \n            \t\t\t\t\tString fileName = file.toString();\n          \n          \n            \n            \n          \n          \n            \n            \t\t\t\t\tif (fileName.endsWith(\".jar\") && !fileName.startsWith(\".\") && !Files.isHidden(file)) {\n          \n      \n    \n    \n  \n\nwould be clearer imo.", "url": "https://github.com/FabricMC/fabric-loader/pull/333#discussion_r523705913", "createdAt": "2020-11-15T04:29:20Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/discovery/DirectoryModCandidateFinder.java", "diffHunk": "@@ -51,13 +55,28 @@ public void findCandidates(FabricLoader loader, BiConsumer<URL, Boolean> urlProp\n \t\t}\n \n \t\ttry {\n-\t\t\tFiles.walk(path, 1, FileVisitOption.FOLLOW_LINKS).forEach((modPath) -> {\n-\t\t\t\tif (!Files.isDirectory(modPath) && modPath.toString().endsWith(\".jar\")) {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\turlProposer.accept(UrlUtil.asUrl(modPath), requiresRemap);\n-\t\t\t\t\t} catch (UrlConversionException e) {\n-\t\t\t\t\t\tthrow new RuntimeException(\"Failed to convert URL for mod '\" + modPath + \"'!\", e);\n+\t\t\tFiles.walkFileTree(this.path, EnumSet.of(FileVisitOption.FOLLOW_LINKS), 1, new SimpleFileVisitor<Path>() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n+\t\t\t\t\t/*\n+\t\t\t\t\t * We only propose a file as a possible mod in the following scenarios:\n+\t\t\t\t\t * General: Must be a jar file\n+\t\t\t\t\t *\n+\t\t\t\t\t * Some OSes Generate metadata so consider the following because of OSes:\n+\t\t\t\t\t * UNIX: Exclude if file is hidden; this occurs when starting a file name with `.`\n+\t\t\t\t\t * MacOS: Exclude hidden + startsWith \".\" since Mac OS names their metadata files in the form of `.mod.jar`\n+\t\t\t\t\t */\n+\n+\t\t\t\t\tif (!Files.isHidden(file) && !file.toString().startsWith(\".\") && file.toString().endsWith(\".jar\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04cfa9c1fd7c178b92e4b264bd2fec18b29972b9"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwNjE1NQ==", "bodyText": "Maybe even file.getFileName().toString() to be safe", "url": "https://github.com/FabricMC/fabric-loader/pull/333#discussion_r523706155", "createdAt": "2020-11-15T04:32:15Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/discovery/DirectoryModCandidateFinder.java", "diffHunk": "@@ -51,13 +55,28 @@ public void findCandidates(FabricLoader loader, BiConsumer<URL, Boolean> urlProp\n \t\t}\n \n \t\ttry {\n-\t\t\tFiles.walk(path, 1, FileVisitOption.FOLLOW_LINKS).forEach((modPath) -> {\n-\t\t\t\tif (!Files.isDirectory(modPath) && modPath.toString().endsWith(\".jar\")) {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\turlProposer.accept(UrlUtil.asUrl(modPath), requiresRemap);\n-\t\t\t\t\t} catch (UrlConversionException e) {\n-\t\t\t\t\t\tthrow new RuntimeException(\"Failed to convert URL for mod '\" + modPath + \"'!\", e);\n+\t\t\tFiles.walkFileTree(this.path, EnumSet.of(FileVisitOption.FOLLOW_LINKS), 1, new SimpleFileVisitor<Path>() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n+\t\t\t\t\t/*\n+\t\t\t\t\t * We only propose a file as a possible mod in the following scenarios:\n+\t\t\t\t\t * General: Must be a jar file\n+\t\t\t\t\t *\n+\t\t\t\t\t * Some OSes Generate metadata so consider the following because of OSes:\n+\t\t\t\t\t * UNIX: Exclude if file is hidden; this occurs when starting a file name with `.`\n+\t\t\t\t\t * MacOS: Exclude hidden + startsWith \".\" since Mac OS names their metadata files in the form of `.mod.jar`\n+\t\t\t\t\t */\n+\n+\t\t\t\t\tif (!Files.isHidden(file) && !file.toString().startsWith(\".\") && file.toString().endsWith(\".jar\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwNTkxMw=="}, "originalCommit": {"oid": "04cfa9c1fd7c178b92e4b264bd2fec18b29972b9"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MzM2NzkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/discovery/DirectoryModCandidateFinder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwNDoyOTo0N1rOHzcecw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwNDoyOTo0N1rOHzcecw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwNTk3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\treturn super.visitFile(file, attrs);\n          \n          \n            \n            \t\t\t\t\treturn FileVisitResult.CONTINUE;", "url": "https://github.com/FabricMC/fabric-loader/pull/333#discussion_r523705971", "createdAt": "2020-11-15T04:29:47Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/discovery/DirectoryModCandidateFinder.java", "diffHunk": "@@ -51,13 +55,28 @@ public void findCandidates(FabricLoader loader, BiConsumer<URL, Boolean> urlProp\n \t\t}\n \n \t\ttry {\n-\t\t\tFiles.walk(path, 1, FileVisitOption.FOLLOW_LINKS).forEach((modPath) -> {\n-\t\t\t\tif (!Files.isDirectory(modPath) && modPath.toString().endsWith(\".jar\")) {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\turlProposer.accept(UrlUtil.asUrl(modPath), requiresRemap);\n-\t\t\t\t\t} catch (UrlConversionException e) {\n-\t\t\t\t\t\tthrow new RuntimeException(\"Failed to convert URL for mod '\" + modPath + \"'!\", e);\n+\t\t\tFiles.walkFileTree(this.path, EnumSet.of(FileVisitOption.FOLLOW_LINKS), 1, new SimpleFileVisitor<Path>() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n+\t\t\t\t\t/*\n+\t\t\t\t\t * We only propose a file as a possible mod in the following scenarios:\n+\t\t\t\t\t * General: Must be a jar file\n+\t\t\t\t\t *\n+\t\t\t\t\t * Some OSes Generate metadata so consider the following because of OSes:\n+\t\t\t\t\t * UNIX: Exclude if file is hidden; this occurs when starting a file name with `.`\n+\t\t\t\t\t * MacOS: Exclude hidden + startsWith \".\" since Mac OS names their metadata files in the form of `.mod.jar`\n+\t\t\t\t\t */\n+\n+\t\t\t\t\tif (!Files.isHidden(file) && !file.toString().startsWith(\".\") && file.toString().endsWith(\".jar\")) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\turlProposer.accept(UrlUtil.asUrl(file), requiresRemap);\n+\t\t\t\t\t\t} catch (UrlConversionException e) {\n+\t\t\t\t\t\t\tthrow new RuntimeException(\"Failed to convert URL for mod '\" + file + \"'!\", e);\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n+\n+\t\t\t\t\treturn super.visitFile(file, attrs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04cfa9c1fd7c178b92e4b264bd2fec18b29972b9"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3267, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}