{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MDMwMjYw", "number": 205, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjo0Nzo0NVrODgYMFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjozNToxMlrODgc1Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Mjc3MzM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/game/GameProviders.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjo0Nzo0NVrOFqjQ8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDo1NDo1N1rOFqnNVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MjI4OA==", "bodyText": "Why not use Collections.singletonList ?", "url": "https://github.com/FabricMC/fabric-loader/pull/205#discussion_r380162288", "createdAt": "2020-02-17T12:47:45Z", "author": {"login": "Pyrofab"}, "path": "src/main/java/net/fabricmc/loader/game/GameProviders.java", "diffHunk": "@@ -16,14 +16,13 @@\n \n package net.fabricmc.loader.game;\n \n-import com.google.common.collect.ImmutableList;\n-\n+import java.util.Arrays;\n import java.util.List;\n \n public final class GameProviders {\n \tprivate GameProviders() { }\n \n \tpublic static List<GameProvider> create() {\n-\t\treturn ImmutableList.of(new MinecraftGameProvider());\n+\t\treturn Arrays.asList(new MinecraftGameProvider());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62766aa40c7f7d90539c6e68414c0f4f2127a410"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyNjkwMg==", "bodyText": "Good point, will fix", "url": "https://github.com/FabricMC/fabric-loader/pull/205#discussion_r380226902", "createdAt": "2020-02-17T14:54:57Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/game/GameProviders.java", "diffHunk": "@@ -16,14 +16,13 @@\n \n package net.fabricmc.loader.game;\n \n-import com.google.common.collect.ImmutableList;\n-\n+import java.util.Arrays;\n import java.util.List;\n \n public final class GameProviders {\n \tprivate GameProviders() { }\n \n \tpublic static List<GameProvider> create() {\n-\t\treturn ImmutableList.of(new MinecraftGameProvider());\n+\t\treturn Arrays.asList(new MinecraftGameProvider());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MjI4OA=="}, "originalCommit": {"oid": "62766aa40c7f7d90539c6e68414c0f4f2127a410"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Mjc4MjM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/entrypoint/EntrypointTransformer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjo1MDo0OFrOFqjWSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDo1NzoyNlrOFqnSwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MzY1Nw==", "bodyText": "Could maybe use Collections.unmodifiableList to keep the same guarantees ?", "url": "https://github.com/FabricMC/fabric-loader/pull/205#discussion_r380163657", "createdAt": "2020-02-17T12:50:48Z", "author": {"login": "Pyrofab"}, "path": "src/main/java/net/fabricmc/loader/entrypoint/EntrypointTransformer.java", "diffHunk": "@@ -39,7 +38,7 @@\n \tprivate boolean entrypointsLocated = false;\n \n \tpublic EntrypointTransformer(Function<EntrypointTransformer, List<EntrypointPatch>> patches) {\n-\t\tthis.patches = ImmutableList.copyOf(patches.apply(this));\n+\t\tthis.patches = patches.apply(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62766aa40c7f7d90539c6e68414c0f4f2127a410"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyODI4OQ==", "bodyText": "I don't see a point behind the copy or immutability, this should be all internal without anything encouraging modification.", "url": "https://github.com/FabricMC/fabric-loader/pull/205#discussion_r380228289", "createdAt": "2020-02-17T14:57:26Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/entrypoint/EntrypointTransformer.java", "diffHunk": "@@ -39,7 +38,7 @@\n \tprivate boolean entrypointsLocated = false;\n \n \tpublic EntrypointTransformer(Function<EntrypointTransformer, List<EntrypointPatch>> patches) {\n-\t\tthis.patches = ImmutableList.copyOf(patches.apply(this));\n+\t\tthis.patches = patches.apply(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MzY1Nw=="}, "originalCommit": {"oid": "62766aa40c7f7d90539c6e68414c0f4f2127a410"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzUyNzU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjozMzowM1rOFqqYyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOToyNjo0OFrOFrgqkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI3ODk4NA==", "bodyText": "Why not String.join(\", \", missingMods)", "url": "https://github.com/FabricMC/fabric-loader/pull/205#discussion_r380278984", "createdAt": "2020-02-17T16:33:03Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -253,7 +252,7 @@ private static IVecInt toVecInt(IntStream stream) {\n \t\tStringBuilder errorsSoft = new StringBuilder();\n \n \t\tif (!missingMods.isEmpty()) {\n-\t\t\terrorsHard.append(\"\\n - Missing mods: \").append(Joiner.on(\", \").join(missingMods));\n+\t\t\terrorsHard.append(\"\\n - Missing mods: \").append(missingMods.stream().collect(Collectors.joining(\", \")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfef41d91a71452f0f0f22369b6e3a9792b6c7af"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI4MDQ3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\terrorsHard.append(\"\\n - Missing mods: \").append(missingMods.stream().collect(Collectors.joining(\", \")));\n          \n          \n            \n            \t\t\terrorsHard.append(\"\\n - Missing mods: \").append(String.join(\", \", missingMods));", "url": "https://github.com/FabricMC/fabric-loader/pull/205#discussion_r380280476", "createdAt": "2020-02-17T16:36:18Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -253,7 +252,7 @@ private static IVecInt toVecInt(IntStream stream) {\n \t\tStringBuilder errorsSoft = new StringBuilder();\n \n \t\tif (!missingMods.isEmpty()) {\n-\t\t\terrorsHard.append(\"\\n - Missing mods: \").append(Joiner.on(\", \").join(missingMods));\n+\t\t\terrorsHard.append(\"\\n - Missing mods: \").append(missingMods.stream().collect(Collectors.joining(\", \")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI3ODk4NA=="}, "originalCommit": {"oid": "bfef41d91a71452f0f0f22369b6e3a9792b6c7af"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2ODI3Mw==", "bodyText": "I replaced one with String.join (didn't know about that one yet..) and two that also had [] with Arrays.toString.", "url": "https://github.com/FabricMC/fabric-loader/pull/205#discussion_r381168273", "createdAt": "2020-02-19T09:26:48Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -253,7 +252,7 @@ private static IVecInt toVecInt(IntStream stream) {\n \t\tStringBuilder errorsSoft = new StringBuilder();\n \n \t\tif (!missingMods.isEmpty()) {\n-\t\t\terrorsHard.append(\"\\n - Missing mods: \").append(Joiner.on(\", \").join(missingMods));\n+\t\t\terrorsHard.append(\"\\n - Missing mods: \").append(missingMods.stream().collect(Collectors.joining(\", \")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI3ODk4NA=="}, "originalCommit": {"oid": "bfef41d91a71452f0f0f22369b6e3a9792b6c7af"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzUzMzU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/metadata/ModMetadataV0.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjozNToxMlrOFqqclQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjozNToxMlrOFqqclQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI3OTk1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\t\t\t\treturn getModId() + \" @ [\" + Stream.of(matchers).collect(Collectors.joining(\", \")) + \"]\";\n          \n          \n            \n            \t\t\t\t\t\t\t\treturn getModId() + \" @ [\" + String.join(\", \", matchers) + \"]\";", "url": "https://github.com/FabricMC/fabric-loader/pull/205#discussion_r380279957", "createdAt": "2020-02-17T16:35:12Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/metadata/ModMetadataV0.java", "diffHunk": "@@ -335,7 +335,7 @@ public String toString() {\n \t\t\t\t\t\t\t} else if (matchers.length == 1) {\n \t\t\t\t\t\t\t\treturn getModId() + \" @ \" + matchers[0];\n \t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\treturn getModId() + \" @ [\" + Joiner.on(\", \").join(Arrays.asList(matchers)) + \"]\";\n+\t\t\t\t\t\t\t\treturn getModId() + \" @ [\" + Stream.of(matchers).collect(Collectors.joining(\", \")) + \"]\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfef41d91a71452f0f0f22369b6e3a9792b6c7af"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3279, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}