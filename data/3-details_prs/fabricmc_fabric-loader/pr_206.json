{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3MzYwMTQz", "number": 206, "title": "AccessWidener", "bodyText": "Goes along with this loom PR.\nAccess Widener's\nThere are 3 diffrent access changes that you can apply to methods, fields and classes.\n\n\nAn accessible class is made public\n\n\nAn extendable class is made public and final is removed if present.\n\n\nAn accessible method is made public. The owning class is also made accessible.\n\n\nAn extendable method is made protected and final is removed if present. The owning class is also made extendable.\n\n\nAn accessible field is made public. The owning class is also made accessible.\n\n\nAn mutable field is made public and final is removed.\n\n\nThese access changes are defined in a file similar to the following example:\naccessWidener\tv1\tnamed\n# Comments like this are supported\n\naccessible\tfield\tnet/minecraft/client/MinecraftClient\tbufferBuilders\tLnet/minecraft/client/render/BufferBuilderStorage;\n\naccessible\tmethod\tnet/minecraft/block/Block$Settings lightLevel\t(I)Lnet/minecraft/block/Block$Settings;\nextendable method\tnet/minecraft/block/Block$Settings\t<init>\t(Lnet/minecraft/block/Material;Lnet/minecraft/block/MaterialColor;)V\n\naccessible\tfield\tnet/minecraft/client/render/chunk/ChunkBuilder$BuiltChunk$SortTask\tdata\tLnet/minecraft/client/render/chunk/ChunkBuilder$ChunkData;\nmutable\tfield\tnet/minecraft/client/render/chunk/ChunkBuilder$BuiltChunk$SortTask\tdata\tLnet/minecraft/client/render/chunk/ChunkBuilder$ChunkData;\n\nThe path the file is set using accessWidener in the fabric.mod.json file.\nI suggest this is added as an experimental feature.", "createdAt": "2020-02-19T19:45:30Z", "url": "https://github.com/FabricMC/fabric-loader/pull/206", "merged": true, "mergeCommit": {"oid": "5093f50540e71f9e602a3ec867d2be70f5fa76f5"}, "closed": true, "closedAt": "2020-04-06T14:34:28Z", "author": {"login": "modmuss50"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcF74yoAH2gAyMzc3MzYwMTQzOjZiYjk2ZDhmMjUxNWE5MzMyZjVhYjBmMjcwZjhkNDViYzg4ODVjY2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcU_oGNgH2gAyMzc3MzYwMTQzOjAzYjhlNjg1Y2FiMGZhY2ExYmRiMjM3YWU5MzIyZTZkYzllMTk1NTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6bb96d8f2515a9332f5ab0f270f8d45bc8885ccb", "author": {"user": {"login": "modmuss50", "name": "modmuss50"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/6bb96d8f2515a9332f5ab0f270f8d45bc8885ccb", "committedDate": "2020-02-19T19:42:08Z", "message": "First pass on access changing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7d250be66a123d36a7edfbd75600328fd729a77", "author": {"user": {"login": "modmuss50", "name": "modmuss50"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/b7d250be66a123d36a7edfbd75600328fd729a77", "committedDate": "2020-02-20T18:52:25Z", "message": "Decapsulator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45156350fe51222c5696c0df5dee7eded33fdba2", "author": {"user": {"login": "modmuss50", "name": "modmuss50"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/45156350fe51222c5696c0df5dee7eded33fdba2", "committedDate": "2020-02-20T19:11:06Z", "message": "More cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "281a13e070d7578b94c638f738d2d02aa8c9b56d", "author": {"user": {"login": "modmuss50", "name": "modmuss50"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/281a13e070d7578b94c638f738d2d02aa8c9b56d", "committedDate": "2020-02-20T19:15:29Z", "message": "AccessWidener"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "feef947984a4e84f760d2dd7201bbbcb66e20419", "author": {"user": {"login": "modmuss50", "name": "modmuss50"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/feef947984a4e84f760d2dd7201bbbcb66e20419", "committedDate": "2020-02-21T14:18:08Z", "message": "Add licenses"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d596b183ac570706c2c29aeedd24e2c9facb4ff1", "author": {"user": {"login": "modmuss50", "name": "modmuss50"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/d596b183ac570706c2c29aeedd24e2c9facb4ff1", "committedDate": "2020-02-23T12:29:00Z", "message": "Formatting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MjExNDQx", "url": "https://github.com/FabricMC/fabric-loader/pull/206#pullrequestreview-364211441", "createdAt": "2020-02-25T15:03:14Z", "commit": {"oid": "d596b183ac570706c2c29aeedd24e2c9facb4ff1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNTowMzoxNFrOFuJiTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNTowMzoxNFrOFuJiTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkzNTA1Mw==", "bodyText": "I suggest considering method inheritance here.", "url": "https://github.com/FabricMC/fabric-loader/pull/206#discussion_r383935053", "createdAt": "2020-02-25T15:03:14Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/transformer/accessWidener/AccessWidener.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.transformer.accessWidener;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.LinkedHashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.objectweb.asm.Opcodes;\n+\n+import net.fabricmc.loader.FabricLoader;\n+import net.fabricmc.loader.api.ModContainer;\n+import net.fabricmc.loader.metadata.LoaderModMetadata;\n+import net.fabricmc.mappings.EntryTriple;\n+\n+public class AccessWidener {\n+\tpublic String namespace;\n+\tpublic Map<String, Access> classAccess = new HashMap<>();\n+\tpublic Map<EntryTriple, Access> methodAccess = new HashMap<>();\n+\tpublic Map<EntryTriple, Access> fieldAccess = new HashMap<>();\n+\tprivate Set<String> classes = new LinkedHashSet<>();\n+\n+\tpublic void loadFromMods(FabricLoader fabricLoader) {\n+\t\tfor (ModContainer modContainer : fabricLoader.getAllMods()) {\n+\t\t\tLoaderModMetadata modMetadata = (LoaderModMetadata) modContainer.getMetadata();\n+\t\t\tString accessWidener = modMetadata.getAccessWidener();\n+\n+\t\t\tif (accessWidener != null) {\n+\t\t\t\tPath path = modContainer.getPath(accessWidener);\n+\n+\t\t\t\ttry (BufferedReader reader = Files.newBufferedReader(path)) {\n+\t\t\t\t\tread(reader, fabricLoader.getMappingResolver().getCurrentRuntimeNamespace());\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\tthrow new RuntimeException(\"Failed to read accessWidener file from mod \" + modMetadata.getId(), e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic void read(BufferedReader reader, String currentNamespace) throws IOException {\n+\t\tString[] header = reader.readLine().split(\"\\t\");\n+\n+\t\tif (header.length != 2 || !header[0].equals(\"accessWidener\\\\v1\")) {\n+\t\t\tthrow new UnsupportedOperationException(\"Unsupported or invalid access accessWidener file, expected: accessWidener\\\\v1 <namespace>\");\n+\t\t}\n+\n+\t\tif (!header[1].equals(currentNamespace)) {\n+\t\t\tthrow new RuntimeException(String.format(\"Namespace (%s) does not match current runtime namespace (%s)\", header[1], currentNamespace));\n+\t\t}\n+\n+\t\tif (namespace != null) {\n+\t\t\tif (!namespace.equals(header[1])) {\n+\t\t\t\tthrow new RuntimeException(String.format(\"Namespace mismatch, expected %s got %s\", namespace, header[1]));\n+\t\t\t}\n+\t\t}\n+\n+\t\tnamespace = header[1];\n+\n+\t\tString line;\n+\n+\t\tSet<String> targets = new LinkedHashSet<>();\n+\n+\t\twhile ((line = reader.readLine()) != null) {\n+\t\t\t//Comment handling\n+\t\t\tint commentPos = line.indexOf('#');\n+\n+\t\t\tif (commentPos >= 0) {\n+\t\t\t\tline = line.substring(0, commentPos).trim();\n+\t\t\t}\n+\n+\t\t\tif (line.isEmpty()) continue;\n+\n+\t\t\t//Will be a common issue, make it clear.\n+\t\t\tif (line.contains(\" \")) {\n+\t\t\t\tthrow new RuntimeException(\"AccessWidener contains one or more space character, tabs are required on line: \" + line);\n+\t\t\t}\n+\n+\t\t\tString[] split = line.split(\"\\t\");\n+\n+\t\t\tif (split.length != 3 && split.length != 5) {\n+\t\t\t\tthrow new RuntimeException(String.format(\"Invalid line (%s)\", line));\n+\t\t\t}\n+\n+\t\t\tString access = split[0];\n+\n+\t\t\ttargets.add(split[2].replaceAll(\"/\", \".\"));\n+\n+\t\t\tswitch (split[1]) {\n+\t\t\tcase \"class\":\n+\t\t\t\tif (split.length != 3) {\n+\t\t\t\t\tthrow new RuntimeException(String.format(\"Expected (<access>\\tclass\\t<className>) got (%s)\", line));\n+\t\t\t\t}\n+\n+\t\t\t\tclassAccess.put(split[2], applyAccess(access, classAccess.getOrDefault(split[2], Access.DEFAULT)));\n+\t\t\t\tbreak;\n+\t\t\tcase \"field\":\n+\t\t\t\tif (split.length != 5) {\n+\t\t\t\t\tthrow new RuntimeException(String.format(\"Expected (<access>\\tfield\\t<className>\\t<fieldName>\\t<fieldDesc>) got (%s)\", line));\n+\t\t\t\t}\n+\n+\t\t\t\taddOrMerge(fieldAccess, new EntryTriple(split[2], split[3], split[4]), access);\n+\t\t\t\tbreak;\n+\t\t\tcase \"method\":\n+\t\t\t\tif (split.length != 5) {\n+\t\t\t\t\tthrow new RuntimeException(String.format(\"Expected (<access>\\tmethod\\t<className>\\t<methodName>\\t<methodDesc>) got (%s)\", line));\n+\t\t\t\t}\n+\n+\t\t\t\taddOrMerge(methodAccess, new EntryTriple(split[2], split[3], split[4]), access);\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tthrow new UnsupportedOperationException(\"Unsupported type \" + split[1]);\n+\t\t\t}\n+\t\t}\n+\n+\t\tSet<String> parentClasses = new LinkedHashSet<>();\n+\n+\t\t//Also transform all parent classes\n+\t\tfor (String clazz : targets) {\n+\t\t\twhile (clazz.contains(\"$\")) {\n+\t\t\t\tclazz = clazz.substring(0, clazz.lastIndexOf(\"$\"));\n+\t\t\t\tparentClasses.add(clazz);\n+\t\t\t}\n+\t\t}\n+\n+\t\tclasses.addAll(targets);\n+\t\tclasses.addAll(parentClasses);\n+\t}\n+\n+\tvoid addOrMerge(Map<EntryTriple, Access> map, EntryTriple entry, String access) {\n+\t\tif (entry == null || access == null) {\n+\t\t\tthrow new RuntimeException(\"Input entry or access is null\");\n+\t\t}\n+\n+\t\tmap.put(entry, applyAccess(access, map.getOrDefault(entry, Access.DEFAULT)));\n+\t}\n+\n+\tprivate Access applyAccess(String input, Access access) {\n+\t\tswitch (input.toLowerCase(Locale.ROOT)) {\n+\t\tcase \"public\":\n+\t\t\treturn access.makePublic();\n+\t\tcase \"protected\":\n+\t\t\treturn access.makeProtected();\n+\t\tcase \"stripfinal\":\n+\t\t\treturn access.stripFinal();\n+\t\tdefault:\n+\t\t\tthrow new UnsupportedOperationException(\"Unknown access type:\" + input);\n+\t\t}\n+\t}\n+\n+\tpublic Access getClassAccess(String className) {\n+\t\treturn classAccess.getOrDefault(className, Access.DEFAULT);\n+\t}\n+\n+\tpublic Access getFieldAccess(EntryTriple entryTriple) {\n+\t\treturn fieldAccess.getOrDefault(entryTriple, Access.DEFAULT);\n+\t}\n+\n+\tpublic Access getMethodAccess(EntryTriple entryTriple) {\n+\t\treturn methodAccess.getOrDefault(entryTriple, Access.DEFAULT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d596b183ac570706c2c29aeedd24e2c9facb4ff1"}, "originalPosition": 179}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NjUyNzEy", "url": "https://github.com/FabricMC/fabric-loader/pull/206#pullrequestreview-364652712", "createdAt": "2020-02-26T06:42:40Z", "commit": {"oid": "d596b183ac570706c2c29aeedd24e2c9facb4ff1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNjo0Mjo0MFrOFufxbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNjo0Mjo0MFrOFufxbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI5OTM3Mw==", "bodyText": "extra semicolon", "url": "https://github.com/FabricMC/fabric-loader/pull/206#discussion_r384299373", "createdAt": "2020-02-26T06:42:40Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/transformer/accessWidener/AccessWidener.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.transformer.accessWidener;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.LinkedHashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.objectweb.asm.Opcodes;\n+\n+import net.fabricmc.loader.FabricLoader;\n+import net.fabricmc.loader.api.ModContainer;\n+import net.fabricmc.loader.metadata.LoaderModMetadata;\n+import net.fabricmc.mappings.EntryTriple;\n+\n+public class AccessWidener {\n+\tpublic String namespace;\n+\tpublic Map<String, Access> classAccess = new HashMap<>();\n+\tpublic Map<EntryTriple, Access> methodAccess = new HashMap<>();\n+\tpublic Map<EntryTriple, Access> fieldAccess = new HashMap<>();\n+\tprivate Set<String> classes = new LinkedHashSet<>();\n+\n+\tpublic void loadFromMods(FabricLoader fabricLoader) {\n+\t\tfor (ModContainer modContainer : fabricLoader.getAllMods()) {\n+\t\t\tLoaderModMetadata modMetadata = (LoaderModMetadata) modContainer.getMetadata();\n+\t\t\tString accessWidener = modMetadata.getAccessWidener();\n+\n+\t\t\tif (accessWidener != null) {\n+\t\t\t\tPath path = modContainer.getPath(accessWidener);\n+\n+\t\t\t\ttry (BufferedReader reader = Files.newBufferedReader(path)) {\n+\t\t\t\t\tread(reader, fabricLoader.getMappingResolver().getCurrentRuntimeNamespace());\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\tthrow new RuntimeException(\"Failed to read accessWidener file from mod \" + modMetadata.getId(), e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic void read(BufferedReader reader, String currentNamespace) throws IOException {\n+\t\tString[] header = reader.readLine().split(\"\\t\");\n+\n+\t\tif (header.length != 2 || !header[0].equals(\"accessWidener\\\\v1\")) {\n+\t\t\tthrow new UnsupportedOperationException(\"Unsupported or invalid access accessWidener file, expected: accessWidener\\\\v1 <namespace>\");\n+\t\t}\n+\n+\t\tif (!header[1].equals(currentNamespace)) {\n+\t\t\tthrow new RuntimeException(String.format(\"Namespace (%s) does not match current runtime namespace (%s)\", header[1], currentNamespace));\n+\t\t}\n+\n+\t\tif (namespace != null) {\n+\t\t\tif (!namespace.equals(header[1])) {\n+\t\t\t\tthrow new RuntimeException(String.format(\"Namespace mismatch, expected %s got %s\", namespace, header[1]));\n+\t\t\t}\n+\t\t}\n+\n+\t\tnamespace = header[1];\n+\n+\t\tString line;\n+\n+\t\tSet<String> targets = new LinkedHashSet<>();\n+\n+\t\twhile ((line = reader.readLine()) != null) {\n+\t\t\t//Comment handling\n+\t\t\tint commentPos = line.indexOf('#');\n+\n+\t\t\tif (commentPos >= 0) {\n+\t\t\t\tline = line.substring(0, commentPos).trim();\n+\t\t\t}\n+\n+\t\t\tif (line.isEmpty()) continue;\n+\n+\t\t\t//Will be a common issue, make it clear.\n+\t\t\tif (line.contains(\" \")) {\n+\t\t\t\tthrow new RuntimeException(\"AccessWidener contains one or more space character, tabs are required on line: \" + line);\n+\t\t\t}\n+\n+\t\t\tString[] split = line.split(\"\\t\");\n+\n+\t\t\tif (split.length != 3 && split.length != 5) {\n+\t\t\t\tthrow new RuntimeException(String.format(\"Invalid line (%s)\", line));\n+\t\t\t}\n+\n+\t\t\tString access = split[0];\n+\n+\t\t\ttargets.add(split[2].replaceAll(\"/\", \".\"));\n+\n+\t\t\tswitch (split[1]) {\n+\t\t\tcase \"class\":\n+\t\t\t\tif (split.length != 3) {\n+\t\t\t\t\tthrow new RuntimeException(String.format(\"Expected (<access>\\tclass\\t<className>) got (%s)\", line));\n+\t\t\t\t}\n+\n+\t\t\t\tclassAccess.put(split[2], applyAccess(access, classAccess.getOrDefault(split[2], Access.DEFAULT)));\n+\t\t\t\tbreak;\n+\t\t\tcase \"field\":\n+\t\t\t\tif (split.length != 5) {\n+\t\t\t\t\tthrow new RuntimeException(String.format(\"Expected (<access>\\tfield\\t<className>\\t<fieldName>\\t<fieldDesc>) got (%s)\", line));\n+\t\t\t\t}\n+\n+\t\t\t\taddOrMerge(fieldAccess, new EntryTriple(split[2], split[3], split[4]), access);\n+\t\t\t\tbreak;\n+\t\t\tcase \"method\":\n+\t\t\t\tif (split.length != 5) {\n+\t\t\t\t\tthrow new RuntimeException(String.format(\"Expected (<access>\\tmethod\\t<className>\\t<methodName>\\t<methodDesc>) got (%s)\", line));\n+\t\t\t\t}\n+\n+\t\t\t\taddOrMerge(methodAccess, new EntryTriple(split[2], split[3], split[4]), access);\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tthrow new UnsupportedOperationException(\"Unsupported type \" + split[1]);\n+\t\t\t}\n+\t\t}\n+\n+\t\tSet<String> parentClasses = new LinkedHashSet<>();\n+\n+\t\t//Also transform all parent classes\n+\t\tfor (String clazz : targets) {\n+\t\t\twhile (clazz.contains(\"$\")) {\n+\t\t\t\tclazz = clazz.substring(0, clazz.lastIndexOf(\"$\"));\n+\t\t\t\tparentClasses.add(clazz);\n+\t\t\t}\n+\t\t}\n+\n+\t\tclasses.addAll(targets);\n+\t\tclasses.addAll(parentClasses);\n+\t}\n+\n+\tvoid addOrMerge(Map<EntryTriple, Access> map, EntryTriple entry, String access) {\n+\t\tif (entry == null || access == null) {\n+\t\t\tthrow new RuntimeException(\"Input entry or access is null\");\n+\t\t}\n+\n+\t\tmap.put(entry, applyAccess(access, map.getOrDefault(entry, Access.DEFAULT)));\n+\t}\n+\n+\tprivate Access applyAccess(String input, Access access) {\n+\t\tswitch (input.toLowerCase(Locale.ROOT)) {\n+\t\tcase \"public\":\n+\t\t\treturn access.makePublic();\n+\t\tcase \"protected\":\n+\t\t\treturn access.makeProtected();\n+\t\tcase \"stripfinal\":\n+\t\t\treturn access.stripFinal();\n+\t\tdefault:\n+\t\t\tthrow new UnsupportedOperationException(\"Unknown access type:\" + input);\n+\t\t}\n+\t}\n+\n+\tpublic Access getClassAccess(String className) {\n+\t\treturn classAccess.getOrDefault(className, Access.DEFAULT);\n+\t}\n+\n+\tpublic Access getFieldAccess(EntryTriple entryTriple) {\n+\t\treturn fieldAccess.getOrDefault(entryTriple, Access.DEFAULT);\n+\t}\n+\n+\tpublic Access getMethodAccess(EntryTriple entryTriple) {\n+\t\treturn methodAccess.getOrDefault(entryTriple, Access.DEFAULT);\n+\t}\n+\n+\tpublic Set<String> getTargets() {\n+\t\treturn classes;\n+\t}\n+\n+\tpublic enum Access {\n+\t\tDEFAULT(false, false, false),\n+\t\tPROTECTED(true, false, false),\n+\t\tPROTECTED_STRIP_FINAL(true, false, true),\n+\t\tPUBLIC(false, true, false),\n+\t\tPUBLIC_STRIP_FINAL(false, true, true),\n+\t\tSTRIP_FINAL(false, false, true);\n+\n+\t\tprivate final boolean makeProtected;\n+\t\tprivate final boolean makePublic;\n+\t\tprivate final boolean stripFinal;\n+\n+\t\tAccess(boolean makeProtected, boolean makePublic, boolean stripFinal) {\n+\t\t\tthis.makeProtected = makeProtected;\n+\t\t\tthis.makePublic = makePublic;\n+\t\t\tthis.stripFinal = stripFinal;\n+\t\t}\n+\n+\t\tpublic Access makePublic() {\n+\t\t\treturn stripFinal ? PUBLIC_STRIP_FINAL : PUBLIC;\n+\t\t}\n+\n+\t\tpublic Access makeProtected() {\n+\t\t\tif (makePublic) return this;\n+\t\t\treturn stripFinal ? PROTECTED_STRIP_FINAL : PROTECTED;\n+\t\t}\n+\n+\t\tpublic Access stripFinal() {\n+\t\t\tif (makePublic) {\n+\t\t\t\treturn PUBLIC_STRIP_FINAL;\n+\t\t\t} else if (makeProtected) {\n+\t\t\t\treturn PROTECTED_STRIP_FINAL;\n+\t\t\t}\n+\n+\t\t\treturn STRIP_FINAL;\n+\t\t}\n+\n+\t\tpublic int apply(int access) {\n+\t\t\tif (makePublic) {\n+\t\t\t\taccess = (access & ~7) | Opcodes.ACC_PUBLIC;\n+\t\t\t} else if (makeProtected) {\n+\t\t\t\tif ((access & Opcodes.ACC_PUBLIC) == 0) {\n+\t\t\t\t\t//Only make it protected if not public\n+\t\t\t\t\taccess = (access & ~7) | Opcodes.ACC_PROTECTED;\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tif (stripFinal) {\n+\t\t\t\taccess = access & ~Opcodes.ACC_FINAL;;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d596b183ac570706c2c29aeedd24e2c9facb4ff1"}, "originalPosition": 234}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NjUyOTYz", "url": "https://github.com/FabricMC/fabric-loader/pull/206#pullrequestreview-364652963", "createdAt": "2020-02-26T06:43:24Z", "commit": {"oid": "d596b183ac570706c2c29aeedd24e2c9facb4ff1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MDE1ODk5", "url": "https://github.com/FabricMC/fabric-loader/pull/206#pullrequestreview-365015899", "createdAt": "2020-02-26T15:51:19Z", "commit": {"oid": "d596b183ac570706c2c29aeedd24e2c9facb4ff1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTo1MToxOVrOFuxHkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTo1MToxOVrOFuxHkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4MzU3MA==", "bodyText": "This check may not be reached outside of dev env. Scroll up; you need to change the condition check for transformAccess local var to check for existence in access widener as well!", "url": "https://github.com/FabricMC/fabric-loader/pull/206#discussion_r384583570", "createdAt": "2020-02-26T15:51:19Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/transformer/FabricTransformer.java", "diffHunk": "@@ -56,6 +58,11 @@\n \t\tClassVisitor visitor = classWriter;\n \t\tint visitorCount = 0;\n \n+\t\tif (isMinecraftClass && FabricLoader.INSTANCE.getAccessWidener().getTargets().contains(name)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d596b183ac570706c2c29aeedd24e2c9facb4ff1"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a7cfb6b31727203db010c7e348d3a867964caa5", "author": {"user": {"login": "modmuss50", "name": "modmuss50"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/8a7cfb6b31727203db010c7e348d3a867964caa5", "committedDate": "2020-03-19T16:15:53Z", "message": "Move to a more defined way of changing access, untested."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d06c704b1cf9d09b9f9c689f9a70d33698486ca9", "author": {"user": {"login": "modmuss50", "name": "modmuss50"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/d06c704b1cf9d09b9f9c689f9a70d33698486ca9", "committedDate": "2020-03-19T19:57:37Z", "message": "Some more work"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MDUwNjA2", "url": "https://github.com/FabricMC/fabric-loader/pull/206#pullrequestreview-378050606", "createdAt": "2020-03-19T19:59:58Z", "commit": {"oid": "d06c704b1cf9d09b9f9c689f9a70d33698486ca9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo1OTo1OFrOF4-WAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTo1OTo1OFrOF4-WAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI4NjAxOA==", "bodyText": "The method could still have package visibility.", "url": "https://github.com/FabricMC/fabric-loader/pull/206#discussion_r395286018", "createdAt": "2020-03-19T19:59:58Z", "author": {"login": "kvverti"}, "path": "src/main/java/net/fabricmc/loader/transformer/accessWidener/AccessWidener.java", "diffHunk": "@@ -195,21 +195,46 @@ public Access getMethodAccess(EntryTriple entryTriple) {\n \t\treturn classes;\n \t}\n \n+\tprivate static int makePublic(int i) {\n+\t\treturn (i & ~(Opcodes.ACC_PRIVATE | Opcodes.ACC_PROTECTED)) | Opcodes.ACC_PUBLIC;\n+\t}\n+\n+\tprivate static int makeProtected(int i) {\n+\t\tif ((i & Opcodes.ACC_PRIVATE) != 0) {\n+\t\t\t//Return i if public\n+\t\t\treturn i;\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d06c704b1cf9d09b9f9c689f9a70d33698486ca9"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MDUyNjgz", "url": "https://github.com/FabricMC/fabric-loader/pull/206#pullrequestreview-378052683", "createdAt": "2020-03-19T20:03:10Z", "commit": {"oid": "d06c704b1cf9d09b9f9c689f9a70d33698486ca9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDowMzoxMVrOF4-cig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDowMzoxMVrOF4-cig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI4NzY5MA==", "bodyText": "Classes can only be either public or package private.", "url": "https://github.com/FabricMC/fabric-loader/pull/206#discussion_r395287690", "createdAt": "2020-03-19T20:03:11Z", "author": {"login": "kvverti"}, "path": "src/main/java/net/fabricmc/loader/transformer/accessWidener/AccessWidener.java", "diffHunk": "@@ -195,21 +195,46 @@ public Access getMethodAccess(EntryTriple entryTriple) {\n \t\treturn classes;\n \t}\n \n+\tprivate static int makePublic(int i) {\n+\t\treturn (i & ~(Opcodes.ACC_PRIVATE | Opcodes.ACC_PROTECTED)) | Opcodes.ACC_PUBLIC;\n+\t}\n+\n+\tprivate static int makeProtected(int i) {\n+\t\tif ((i & Opcodes.ACC_PRIVATE) != 0) {\n+\t\t\t//Return i if public\n+\t\t\treturn i;\n+\t\t}\n+\n+\t\treturn (i & ~(Opcodes.ACC_PRIVATE)) | Opcodes.ACC_PROTECTED;\n+\t}\n+\n+\tprivate static int makeFinalIfPrivate(int i) {\n+\t\tif ((i & Opcodes.ACC_PRIVATE) != 0) {\n+\t\t\treturn i | Opcodes.ACC_FINAL;\n+\t\t}\n+\n+\t\treturn i;\n+\t}\n+\n+\tprivate static int removeFinal(int i) {\n+\t\treturn i & ~Opcodes.ACC_FINAL;\n+\t}\n+\n \tpublic interface Access {\n \t\tAccess makeAccessible();\n \n \t\tAccess makeExtendable();\n \n \t\tAccess makeMutable();\n \n-\t\tIntUnaryOperator getOperator();\n+\t\tint apply(int i);\n \t}\n \n \tpublic enum ClassAccess implements Access {\n \t\tDEFAULT(i -> i),\n-\t\tACCESSIBLE(i -> ((i & Opcodes.ACC_PRIVATE) != 0 ? Opcodes.ACC_FINAL : 0) | (i & ~7) | Opcodes.ACC_PUBLIC), //Make public, add final if private\n-\t\tEXTENDABLE(i -> ((i & ~7) | Opcodes.ACC_PUBLIC) & ~Opcodes.ACC_FINAL), //Make public and strip final\n-\t\tACCESSIBLE_EXTENDABLE(i -> ((i & ~7) | Opcodes.ACC_PUBLIC) & ~Opcodes.ACC_FINAL); //Make public and strip final\n+\t\tACCESSIBLE(i -> makePublic(makeFinalIfPrivate(i))),\n+\t\tEXTENDABLE(i -> makeProtected(removeFinal(i))),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d06c704b1cf9d09b9f9c689f9a70d33698486ca9"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc16c9b6011567950f2a1cfcca91e717d6dfacbf", "author": {"user": {"login": "modmuss50", "name": "modmuss50"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/dc16c9b6011567950f2a1cfcca91e717d6dfacbf", "committedDate": "2020-03-19T20:16:22Z", "message": "Fix some minor issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MDYyMzQw", "url": "https://github.com/FabricMC/fabric-loader/pull/206#pullrequestreview-378062340", "createdAt": "2020-03-19T20:17:57Z", "commit": {"oid": "dc16c9b6011567950f2a1cfcca91e717d6dfacbf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxNzo1N1rOF4-6eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxNzo1N1rOF4-6eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5NTM1Mg==", "bodyText": "The method could still be package private...\nYou need if((i & Opcodes.ACC_PUBLIC) != 0)", "url": "https://github.com/FabricMC/fabric-loader/pull/206#discussion_r395295352", "createdAt": "2020-03-19T20:17:57Z", "author": {"login": "kvverti"}, "path": "src/main/java/net/fabricmc/loader/transformer/accessWidener/AccessWidener.java", "diffHunk": "@@ -200,7 +200,7 @@ private static int makePublic(int i) {\n \t}\n \n \tprivate static int makeProtected(int i) {\n-\t\tif ((i & Opcodes.ACC_PRIVATE) != 0) {\n+\t\tif ((i & ~Opcodes.ACC_PUBLIC) == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc16c9b6011567950f2a1cfcca91e717d6dfacbf"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a841824033c4fe296b47675353a5e07706c09a3", "author": {"user": {"login": "modmuss50", "name": "modmuss50"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/1a841824033c4fe296b47675353a5e07706c09a3", "committedDate": "2020-03-19T20:19:19Z", "message": "Fix stupid issue.\n\nBitwise can get confusing lol"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b50cc19e7838f8d1161a5c01fb5bf183575208e4", "author": {"user": {"login": "modmuss50", "name": "modmuss50"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/b50cc19e7838f8d1161a5c01fb5bf183575208e4", "committedDate": "2020-03-19T20:45:09Z", "message": "Fix namespace reading bugs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTEwMTY0", "url": "https://github.com/FabricMC/fabric-loader/pull/206#pullrequestreview-378110164", "createdAt": "2020-03-19T21:34:29Z", "commit": {"oid": "b50cc19e7838f8d1161a5c01fb5bf183575208e4"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTozNDoyOVrOF5BMSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTo0NDozMVrOF5BdgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzMjY4MA==", "bodyText": "https://github.com/FabricMC/fabric-loader/pull/206/files#diff-357f0c28bb837e6ad9c13252885f47bcR52 Still needs to be fixed.", "url": "https://github.com/FabricMC/fabric-loader/pull/206#discussion_r395332680", "createdAt": "2020-03-19T21:34:29Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/transformer/FabricTransformer.java", "diffHunk": "@@ -56,6 +58,11 @@\n \t\tClassVisitor visitor = classWriter;\n \t\tint visitorCount = 0;\n \n+\t\tif (isMinecraftClass && FabricLoader.INSTANCE.getAccessWidener().getTargets().contains(name)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4MzU3MA=="}, "originalCommit": {"oid": "d596b183ac570706c2c29aeedd24e2c9facb4ff1"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzMzI0OA==", "bodyText": "Why no flexible namespace support but rather enforces the current namespace? Seems to me that it won't work in both dev and production", "url": "https://github.com/FabricMC/fabric-loader/pull/206#discussion_r395333248", "createdAt": "2020-03-19T21:35:45Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/transformer/accessWidener/AccessWidener.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.transformer.accessWidener;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.LinkedHashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.IntUnaryOperator;\n+\n+import org.objectweb.asm.Opcodes;\n+\n+import net.fabricmc.loader.FabricLoader;\n+import net.fabricmc.loader.api.ModContainer;\n+import net.fabricmc.loader.metadata.LoaderModMetadata;\n+import net.fabricmc.mappings.EntryTriple;\n+\n+public class AccessWidener {\n+\tpublic String namespace;\n+\tpublic Map<String, Access> classAccess = new HashMap<>();\n+\tpublic Map<EntryTriple, Access> methodAccess = new HashMap<>();\n+\tpublic Map<EntryTriple, Access> fieldAccess = new HashMap<>();\n+\tprivate Set<String> classes = new LinkedHashSet<>();\n+\n+\tpublic void loadFromMods(FabricLoader fabricLoader) {\n+\t\tfor (ModContainer modContainer : fabricLoader.getAllMods()) {\n+\t\t\tLoaderModMetadata modMetadata = (LoaderModMetadata) modContainer.getMetadata();\n+\t\t\tString accessWidener = modMetadata.getAccessWidener();\n+\n+\t\t\tif (accessWidener != null) {\n+\t\t\t\tPath path = modContainer.getPath(accessWidener);\n+\n+\t\t\t\ttry (BufferedReader reader = Files.newBufferedReader(path)) {\n+\t\t\t\t\tread(reader, fabricLoader.getMappingResolver().getCurrentRuntimeNamespace());\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\tthrow new RuntimeException(\"Failed to read accessWidener file from mod \" + modMetadata.getId(), e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic void read(BufferedReader reader, String currentNamespace) throws IOException {\n+\t\tString[] header = reader.readLine().split(\"\\\\s+\");\n+\n+\t\tif (header.length != 3 || !header[0].equals(\"accessWidener\")) {\n+\t\t\tthrow new UnsupportedOperationException(\"Invalid access access widener file\");\n+\t\t}\n+\n+\t\tif (!header[1].equals(\"v1\")) {\n+\t\t\tthrow new RuntimeException(String.format(\"Unsupported access widener format (%s)\", header[1]));\n+\t\t}\n+\n+\t\tif (!header[2].equals(currentNamespace)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b50cc19e7838f8d1161a5c01fb5bf183575208e4"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzNDk1MQ==", "bodyText": "Hmm, a class cannot be private, so makeFinalIfPrivate is pointless\nhttps://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.1-200-E.1\n(private is not an option in this list)", "url": "https://github.com/FabricMC/fabric-loader/pull/206#discussion_r395334951", "createdAt": "2020-03-19T21:39:34Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/transformer/accessWidener/AccessWidener.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.transformer.accessWidener;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.LinkedHashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.IntUnaryOperator;\n+\n+import org.objectweb.asm.Opcodes;\n+\n+import net.fabricmc.loader.FabricLoader;\n+import net.fabricmc.loader.api.ModContainer;\n+import net.fabricmc.loader.metadata.LoaderModMetadata;\n+import net.fabricmc.mappings.EntryTriple;\n+\n+public class AccessWidener {\n+\tpublic String namespace;\n+\tpublic Map<String, Access> classAccess = new HashMap<>();\n+\tpublic Map<EntryTriple, Access> methodAccess = new HashMap<>();\n+\tpublic Map<EntryTriple, Access> fieldAccess = new HashMap<>();\n+\tprivate Set<String> classes = new LinkedHashSet<>();\n+\n+\tpublic void loadFromMods(FabricLoader fabricLoader) {\n+\t\tfor (ModContainer modContainer : fabricLoader.getAllMods()) {\n+\t\t\tLoaderModMetadata modMetadata = (LoaderModMetadata) modContainer.getMetadata();\n+\t\t\tString accessWidener = modMetadata.getAccessWidener();\n+\n+\t\t\tif (accessWidener != null) {\n+\t\t\t\tPath path = modContainer.getPath(accessWidener);\n+\n+\t\t\t\ttry (BufferedReader reader = Files.newBufferedReader(path)) {\n+\t\t\t\t\tread(reader, fabricLoader.getMappingResolver().getCurrentRuntimeNamespace());\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\tthrow new RuntimeException(\"Failed to read accessWidener file from mod \" + modMetadata.getId(), e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic void read(BufferedReader reader, String currentNamespace) throws IOException {\n+\t\tString[] header = reader.readLine().split(\"\\\\s+\");\n+\n+\t\tif (header.length != 3 || !header[0].equals(\"accessWidener\")) {\n+\t\t\tthrow new UnsupportedOperationException(\"Invalid access access widener file\");\n+\t\t}\n+\n+\t\tif (!header[1].equals(\"v1\")) {\n+\t\t\tthrow new RuntimeException(String.format(\"Unsupported access widener format (%s)\", header[1]));\n+\t\t}\n+\n+\t\tif (!header[2].equals(currentNamespace)) {\n+\t\t\tthrow new RuntimeException(String.format(\"Namespace (%s) does not match current runtime namespace (%s)\", header[2], currentNamespace));\n+\t\t}\n+\n+\t\tif (namespace != null) {\n+\t\t\tif (!namespace.equals(header[2])) {\n+\t\t\t\tthrow new RuntimeException(String.format(\"Namespace mismatch, expected %s got %s\", namespace, header[2]));\n+\t\t\t}\n+\t\t}\n+\n+\t\tnamespace = header[2];\n+\n+\t\tString line;\n+\n+\t\tSet<String> targets = new LinkedHashSet<>();\n+\n+\t\twhile ((line = reader.readLine()) != null) {\n+\t\t\t//Comment handling\n+\t\t\tint commentPos = line.indexOf('#');\n+\n+\t\t\tif (commentPos >= 0) {\n+\t\t\t\tline = line.substring(0, commentPos).trim();\n+\t\t\t}\n+\n+\t\t\tif (line.isEmpty()) continue;\n+\n+\t\t\tString[] split = line.split(\"\\\\s+\");\n+\n+\t\t\tif (split.length != 3 && split.length != 5) {\n+\t\t\t\tthrow new RuntimeException(String.format(\"Invalid line (%s)\", line));\n+\t\t\t}\n+\n+\t\t\tString access = split[0];\n+\n+\t\t\ttargets.add(split[2].replaceAll(\"/\", \".\"));\n+\n+\t\t\tswitch (split[1]) {\n+\t\t\tcase \"class\":\n+\t\t\t\tif (split.length != 3) {\n+\t\t\t\t\tthrow new RuntimeException(String.format(\"Expected (<access>\\tclass\\t<className>) got (%s)\", line));\n+\t\t\t\t}\n+\n+\t\t\t\tclassAccess.put(split[2], applyAccess(access, classAccess.getOrDefault(split[2], ClassAccess.DEFAULT), null));\n+\t\t\t\tbreak;\n+\t\t\tcase \"field\":\n+\t\t\t\tif (split.length != 5) {\n+\t\t\t\t\tthrow new RuntimeException(String.format(\"Expected (<access>\\tfield\\t<className>\\t<fieldName>\\t<fieldDesc>) got (%s)\", line));\n+\t\t\t\t}\n+\n+\t\t\t\taddOrMerge(fieldAccess, new EntryTriple(split[2], split[3], split[4]), access, FieldAccess.DEFAULT);\n+\t\t\t\tbreak;\n+\t\t\tcase \"method\":\n+\t\t\t\tif (split.length != 5) {\n+\t\t\t\t\tthrow new RuntimeException(String.format(\"Expected (<access>\\tmethod\\t<className>\\t<methodName>\\t<methodDesc>) got (%s)\", line));\n+\t\t\t\t}\n+\n+\t\t\t\taddOrMerge(methodAccess, new EntryTriple(split[2], split[3], split[4]), access, MethodAccess.DEFAULT);\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tthrow new UnsupportedOperationException(\"Unsupported type \" + split[1]);\n+\t\t\t}\n+\t\t}\n+\n+\t\tSet<String> parentClasses = new LinkedHashSet<>();\n+\n+\t\t//Also transform all parent classes\n+\t\tfor (String clazz : targets) {\n+\t\t\twhile (clazz.contains(\"$\")) {\n+\t\t\t\tclazz = clazz.substring(0, clazz.lastIndexOf(\"$\"));\n+\t\t\t\tparentClasses.add(clazz);\n+\t\t\t}\n+\t\t}\n+\n+\t\tclasses.addAll(targets);\n+\t\tclasses.addAll(parentClasses);\n+\t}\n+\n+\tvoid addOrMerge(Map<EntryTriple, Access> map, EntryTriple entry, String access, Access defaultAccess) {\n+\t\tif (entry == null || access == null) {\n+\t\t\tthrow new RuntimeException(\"Input entry or access is null\");\n+\t\t}\n+\n+\t\tmap.put(entry, applyAccess(access, map.getOrDefault(entry, defaultAccess), entry));\n+\t}\n+\n+\tprivate Access applyAccess(String input, Access access, EntryTriple entryTriple) {\n+\t\tswitch (input.toLowerCase(Locale.ROOT)) {\n+\t\tcase \"accessible\":\n+\t\t\tmakeClassAccessible(entryTriple);\n+\t\t\treturn access.makeAccessible();\n+\t\tcase \"extendable\":\n+\t\t\tmakeClassExtendable(entryTriple);\n+\t\t\treturn access.makeExtendable();\n+\t\tcase \"mutable\":\n+\t\t\treturn access.makeMutable();\n+\t\tdefault:\n+\t\t\tthrow new UnsupportedOperationException(\"Unknown access type:\" + input);\n+\t\t}\n+\t}\n+\n+\tprivate void makeClassAccessible(EntryTriple entryTriple) {\n+\t\tif (entryTriple == null) return;\n+\t\tclassAccess.put(entryTriple.getOwner(), applyAccess(\"accessible\", classAccess.getOrDefault(entryTriple.getOwner(), ClassAccess.DEFAULT), null));\n+\t}\n+\n+\tprivate void makeClassExtendable(EntryTriple entryTriple) {\n+\t\tif (entryTriple == null) return;\n+\t\tclassAccess.put(entryTriple.getOwner(), applyAccess(\"extendable\", classAccess.getOrDefault(entryTriple.getOwner(), ClassAccess.DEFAULT), null));\n+\t}\n+\n+\tpublic Access getClassAccess(String className) {\n+\t\treturn classAccess.getOrDefault(className, ClassAccess.DEFAULT);\n+\t}\n+\n+\tpublic Access getFieldAccess(EntryTriple entryTriple) {\n+\t\treturn fieldAccess.getOrDefault(entryTriple, FieldAccess.DEFAULT);\n+\t}\n+\n+\tpublic Access getMethodAccess(EntryTriple entryTriple) {\n+\t\treturn methodAccess.getOrDefault(entryTriple, MethodAccess.DEFAULT);\n+\t}\n+\n+\tpublic Set<String> getTargets() {\n+\t\treturn classes;\n+\t}\n+\n+\tprivate static int makePublic(int i) {\n+\t\treturn (i & ~(Opcodes.ACC_PRIVATE | Opcodes.ACC_PROTECTED)) | Opcodes.ACC_PUBLIC;\n+\t}\n+\n+\tprivate static int makeProtected(int i) {\n+\t\tif ((i & Opcodes.ACC_PUBLIC) != 0) {\n+\t\t\t//Return i if public\n+\t\t\treturn i;\n+\t\t}\n+\n+\t\treturn (i & ~(Opcodes.ACC_PRIVATE)) | Opcodes.ACC_PROTECTED;\n+\t}\n+\n+\tprivate static int makeFinalIfPrivate(int i) {\n+\t\tif ((i & Opcodes.ACC_PRIVATE) != 0) {\n+\t\t\treturn i | Opcodes.ACC_FINAL;\n+\t\t}\n+\n+\t\treturn i;\n+\t}\n+\n+\tprivate static int removeFinal(int i) {\n+\t\treturn i & ~Opcodes.ACC_FINAL;\n+\t}\n+\n+\tpublic interface Access {\n+\t\tAccess makeAccessible();\n+\n+\t\tAccess makeExtendable();\n+\n+\t\tAccess makeMutable();\n+\n+\t\tint apply(int i);\n+\t}\n+\n+\tpublic enum ClassAccess implements Access {\n+\t\tDEFAULT(i -> i),\n+\t\tACCESSIBLE(i -> makePublic(makeFinalIfPrivate(i))),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b50cc19e7838f8d1161a5c01fb5bf183575208e4"}, "originalPosition": 235}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzNTUyNw==", "bodyText": "guess this interface can extend IntUnaryOperator", "url": "https://github.com/FabricMC/fabric-loader/pull/206#discussion_r395335527", "createdAt": "2020-03-19T21:40:49Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/transformer/accessWidener/AccessWidener.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.transformer.accessWidener;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.LinkedHashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.IntUnaryOperator;\n+\n+import org.objectweb.asm.Opcodes;\n+\n+import net.fabricmc.loader.FabricLoader;\n+import net.fabricmc.loader.api.ModContainer;\n+import net.fabricmc.loader.metadata.LoaderModMetadata;\n+import net.fabricmc.mappings.EntryTriple;\n+\n+public class AccessWidener {\n+\tpublic String namespace;\n+\tpublic Map<String, Access> classAccess = new HashMap<>();\n+\tpublic Map<EntryTriple, Access> methodAccess = new HashMap<>();\n+\tpublic Map<EntryTriple, Access> fieldAccess = new HashMap<>();\n+\tprivate Set<String> classes = new LinkedHashSet<>();\n+\n+\tpublic void loadFromMods(FabricLoader fabricLoader) {\n+\t\tfor (ModContainer modContainer : fabricLoader.getAllMods()) {\n+\t\t\tLoaderModMetadata modMetadata = (LoaderModMetadata) modContainer.getMetadata();\n+\t\t\tString accessWidener = modMetadata.getAccessWidener();\n+\n+\t\t\tif (accessWidener != null) {\n+\t\t\t\tPath path = modContainer.getPath(accessWidener);\n+\n+\t\t\t\ttry (BufferedReader reader = Files.newBufferedReader(path)) {\n+\t\t\t\t\tread(reader, fabricLoader.getMappingResolver().getCurrentRuntimeNamespace());\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\tthrow new RuntimeException(\"Failed to read accessWidener file from mod \" + modMetadata.getId(), e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic void read(BufferedReader reader, String currentNamespace) throws IOException {\n+\t\tString[] header = reader.readLine().split(\"\\\\s+\");\n+\n+\t\tif (header.length != 3 || !header[0].equals(\"accessWidener\")) {\n+\t\t\tthrow new UnsupportedOperationException(\"Invalid access access widener file\");\n+\t\t}\n+\n+\t\tif (!header[1].equals(\"v1\")) {\n+\t\t\tthrow new RuntimeException(String.format(\"Unsupported access widener format (%s)\", header[1]));\n+\t\t}\n+\n+\t\tif (!header[2].equals(currentNamespace)) {\n+\t\t\tthrow new RuntimeException(String.format(\"Namespace (%s) does not match current runtime namespace (%s)\", header[2], currentNamespace));\n+\t\t}\n+\n+\t\tif (namespace != null) {\n+\t\t\tif (!namespace.equals(header[2])) {\n+\t\t\t\tthrow new RuntimeException(String.format(\"Namespace mismatch, expected %s got %s\", namespace, header[2]));\n+\t\t\t}\n+\t\t}\n+\n+\t\tnamespace = header[2];\n+\n+\t\tString line;\n+\n+\t\tSet<String> targets = new LinkedHashSet<>();\n+\n+\t\twhile ((line = reader.readLine()) != null) {\n+\t\t\t//Comment handling\n+\t\t\tint commentPos = line.indexOf('#');\n+\n+\t\t\tif (commentPos >= 0) {\n+\t\t\t\tline = line.substring(0, commentPos).trim();\n+\t\t\t}\n+\n+\t\t\tif (line.isEmpty()) continue;\n+\n+\t\t\tString[] split = line.split(\"\\\\s+\");\n+\n+\t\t\tif (split.length != 3 && split.length != 5) {\n+\t\t\t\tthrow new RuntimeException(String.format(\"Invalid line (%s)\", line));\n+\t\t\t}\n+\n+\t\t\tString access = split[0];\n+\n+\t\t\ttargets.add(split[2].replaceAll(\"/\", \".\"));\n+\n+\t\t\tswitch (split[1]) {\n+\t\t\tcase \"class\":\n+\t\t\t\tif (split.length != 3) {\n+\t\t\t\t\tthrow new RuntimeException(String.format(\"Expected (<access>\\tclass\\t<className>) got (%s)\", line));\n+\t\t\t\t}\n+\n+\t\t\t\tclassAccess.put(split[2], applyAccess(access, classAccess.getOrDefault(split[2], ClassAccess.DEFAULT), null));\n+\t\t\t\tbreak;\n+\t\t\tcase \"field\":\n+\t\t\t\tif (split.length != 5) {\n+\t\t\t\t\tthrow new RuntimeException(String.format(\"Expected (<access>\\tfield\\t<className>\\t<fieldName>\\t<fieldDesc>) got (%s)\", line));\n+\t\t\t\t}\n+\n+\t\t\t\taddOrMerge(fieldAccess, new EntryTriple(split[2], split[3], split[4]), access, FieldAccess.DEFAULT);\n+\t\t\t\tbreak;\n+\t\t\tcase \"method\":\n+\t\t\t\tif (split.length != 5) {\n+\t\t\t\t\tthrow new RuntimeException(String.format(\"Expected (<access>\\tmethod\\t<className>\\t<methodName>\\t<methodDesc>) got (%s)\", line));\n+\t\t\t\t}\n+\n+\t\t\t\taddOrMerge(methodAccess, new EntryTriple(split[2], split[3], split[4]), access, MethodAccess.DEFAULT);\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tthrow new UnsupportedOperationException(\"Unsupported type \" + split[1]);\n+\t\t\t}\n+\t\t}\n+\n+\t\tSet<String> parentClasses = new LinkedHashSet<>();\n+\n+\t\t//Also transform all parent classes\n+\t\tfor (String clazz : targets) {\n+\t\t\twhile (clazz.contains(\"$\")) {\n+\t\t\t\tclazz = clazz.substring(0, clazz.lastIndexOf(\"$\"));\n+\t\t\t\tparentClasses.add(clazz);\n+\t\t\t}\n+\t\t}\n+\n+\t\tclasses.addAll(targets);\n+\t\tclasses.addAll(parentClasses);\n+\t}\n+\n+\tvoid addOrMerge(Map<EntryTriple, Access> map, EntryTriple entry, String access, Access defaultAccess) {\n+\t\tif (entry == null || access == null) {\n+\t\t\tthrow new RuntimeException(\"Input entry or access is null\");\n+\t\t}\n+\n+\t\tmap.put(entry, applyAccess(access, map.getOrDefault(entry, defaultAccess), entry));\n+\t}\n+\n+\tprivate Access applyAccess(String input, Access access, EntryTriple entryTriple) {\n+\t\tswitch (input.toLowerCase(Locale.ROOT)) {\n+\t\tcase \"accessible\":\n+\t\t\tmakeClassAccessible(entryTriple);\n+\t\t\treturn access.makeAccessible();\n+\t\tcase \"extendable\":\n+\t\t\tmakeClassExtendable(entryTriple);\n+\t\t\treturn access.makeExtendable();\n+\t\tcase \"mutable\":\n+\t\t\treturn access.makeMutable();\n+\t\tdefault:\n+\t\t\tthrow new UnsupportedOperationException(\"Unknown access type:\" + input);\n+\t\t}\n+\t}\n+\n+\tprivate void makeClassAccessible(EntryTriple entryTriple) {\n+\t\tif (entryTriple == null) return;\n+\t\tclassAccess.put(entryTriple.getOwner(), applyAccess(\"accessible\", classAccess.getOrDefault(entryTriple.getOwner(), ClassAccess.DEFAULT), null));\n+\t}\n+\n+\tprivate void makeClassExtendable(EntryTriple entryTriple) {\n+\t\tif (entryTriple == null) return;\n+\t\tclassAccess.put(entryTriple.getOwner(), applyAccess(\"extendable\", classAccess.getOrDefault(entryTriple.getOwner(), ClassAccess.DEFAULT), null));\n+\t}\n+\n+\tpublic Access getClassAccess(String className) {\n+\t\treturn classAccess.getOrDefault(className, ClassAccess.DEFAULT);\n+\t}\n+\n+\tpublic Access getFieldAccess(EntryTriple entryTriple) {\n+\t\treturn fieldAccess.getOrDefault(entryTriple, FieldAccess.DEFAULT);\n+\t}\n+\n+\tpublic Access getMethodAccess(EntryTriple entryTriple) {\n+\t\treturn methodAccess.getOrDefault(entryTriple, MethodAccess.DEFAULT);\n+\t}\n+\n+\tpublic Set<String> getTargets() {\n+\t\treturn classes;\n+\t}\n+\n+\tprivate static int makePublic(int i) {\n+\t\treturn (i & ~(Opcodes.ACC_PRIVATE | Opcodes.ACC_PROTECTED)) | Opcodes.ACC_PUBLIC;\n+\t}\n+\n+\tprivate static int makeProtected(int i) {\n+\t\tif ((i & Opcodes.ACC_PUBLIC) != 0) {\n+\t\t\t//Return i if public\n+\t\t\treturn i;\n+\t\t}\n+\n+\t\treturn (i & ~(Opcodes.ACC_PRIVATE)) | Opcodes.ACC_PROTECTED;\n+\t}\n+\n+\tprivate static int makeFinalIfPrivate(int i) {\n+\t\tif ((i & Opcodes.ACC_PRIVATE) != 0) {\n+\t\t\treturn i | Opcodes.ACC_FINAL;\n+\t\t}\n+\n+\t\treturn i;\n+\t}\n+\n+\tprivate static int removeFinal(int i) {\n+\t\treturn i & ~Opcodes.ACC_FINAL;\n+\t}\n+\n+\tpublic interface Access {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b50cc19e7838f8d1161a5c01fb5bf183575208e4"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzNjg5OQ==", "bodyText": "What if I want to make a field accessible as a subclass (protected) but not exposed to other users?", "url": "https://github.com/FabricMC/fabric-loader/pull/206#discussion_r395336899", "createdAt": "2020-03-19T21:44:05Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/transformer/accessWidener/AccessWidener.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.transformer.accessWidener;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.LinkedHashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.IntUnaryOperator;\n+\n+import org.objectweb.asm.Opcodes;\n+\n+import net.fabricmc.loader.FabricLoader;\n+import net.fabricmc.loader.api.ModContainer;\n+import net.fabricmc.loader.metadata.LoaderModMetadata;\n+import net.fabricmc.mappings.EntryTriple;\n+\n+public class AccessWidener {\n+\tpublic String namespace;\n+\tpublic Map<String, Access> classAccess = new HashMap<>();\n+\tpublic Map<EntryTriple, Access> methodAccess = new HashMap<>();\n+\tpublic Map<EntryTriple, Access> fieldAccess = new HashMap<>();\n+\tprivate Set<String> classes = new LinkedHashSet<>();\n+\n+\tpublic void loadFromMods(FabricLoader fabricLoader) {\n+\t\tfor (ModContainer modContainer : fabricLoader.getAllMods()) {\n+\t\t\tLoaderModMetadata modMetadata = (LoaderModMetadata) modContainer.getMetadata();\n+\t\t\tString accessWidener = modMetadata.getAccessWidener();\n+\n+\t\t\tif (accessWidener != null) {\n+\t\t\t\tPath path = modContainer.getPath(accessWidener);\n+\n+\t\t\t\ttry (BufferedReader reader = Files.newBufferedReader(path)) {\n+\t\t\t\t\tread(reader, fabricLoader.getMappingResolver().getCurrentRuntimeNamespace());\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\tthrow new RuntimeException(\"Failed to read accessWidener file from mod \" + modMetadata.getId(), e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic void read(BufferedReader reader, String currentNamespace) throws IOException {\n+\t\tString[] header = reader.readLine().split(\"\\\\s+\");\n+\n+\t\tif (header.length != 3 || !header[0].equals(\"accessWidener\")) {\n+\t\t\tthrow new UnsupportedOperationException(\"Invalid access access widener file\");\n+\t\t}\n+\n+\t\tif (!header[1].equals(\"v1\")) {\n+\t\t\tthrow new RuntimeException(String.format(\"Unsupported access widener format (%s)\", header[1]));\n+\t\t}\n+\n+\t\tif (!header[2].equals(currentNamespace)) {\n+\t\t\tthrow new RuntimeException(String.format(\"Namespace (%s) does not match current runtime namespace (%s)\", header[2], currentNamespace));\n+\t\t}\n+\n+\t\tif (namespace != null) {\n+\t\t\tif (!namespace.equals(header[2])) {\n+\t\t\t\tthrow new RuntimeException(String.format(\"Namespace mismatch, expected %s got %s\", namespace, header[2]));\n+\t\t\t}\n+\t\t}\n+\n+\t\tnamespace = header[2];\n+\n+\t\tString line;\n+\n+\t\tSet<String> targets = new LinkedHashSet<>();\n+\n+\t\twhile ((line = reader.readLine()) != null) {\n+\t\t\t//Comment handling\n+\t\t\tint commentPos = line.indexOf('#');\n+\n+\t\t\tif (commentPos >= 0) {\n+\t\t\t\tline = line.substring(0, commentPos).trim();\n+\t\t\t}\n+\n+\t\t\tif (line.isEmpty()) continue;\n+\n+\t\t\tString[] split = line.split(\"\\\\s+\");\n+\n+\t\t\tif (split.length != 3 && split.length != 5) {\n+\t\t\t\tthrow new RuntimeException(String.format(\"Invalid line (%s)\", line));\n+\t\t\t}\n+\n+\t\t\tString access = split[0];\n+\n+\t\t\ttargets.add(split[2].replaceAll(\"/\", \".\"));\n+\n+\t\t\tswitch (split[1]) {\n+\t\t\tcase \"class\":\n+\t\t\t\tif (split.length != 3) {\n+\t\t\t\t\tthrow new RuntimeException(String.format(\"Expected (<access>\\tclass\\t<className>) got (%s)\", line));\n+\t\t\t\t}\n+\n+\t\t\t\tclassAccess.put(split[2], applyAccess(access, classAccess.getOrDefault(split[2], ClassAccess.DEFAULT), null));\n+\t\t\t\tbreak;\n+\t\t\tcase \"field\":\n+\t\t\t\tif (split.length != 5) {\n+\t\t\t\t\tthrow new RuntimeException(String.format(\"Expected (<access>\\tfield\\t<className>\\t<fieldName>\\t<fieldDesc>) got (%s)\", line));\n+\t\t\t\t}\n+\n+\t\t\t\taddOrMerge(fieldAccess, new EntryTriple(split[2], split[3], split[4]), access, FieldAccess.DEFAULT);\n+\t\t\t\tbreak;\n+\t\t\tcase \"method\":\n+\t\t\t\tif (split.length != 5) {\n+\t\t\t\t\tthrow new RuntimeException(String.format(\"Expected (<access>\\tmethod\\t<className>\\t<methodName>\\t<methodDesc>) got (%s)\", line));\n+\t\t\t\t}\n+\n+\t\t\t\taddOrMerge(methodAccess, new EntryTriple(split[2], split[3], split[4]), access, MethodAccess.DEFAULT);\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tthrow new UnsupportedOperationException(\"Unsupported type \" + split[1]);\n+\t\t\t}\n+\t\t}\n+\n+\t\tSet<String> parentClasses = new LinkedHashSet<>();\n+\n+\t\t//Also transform all parent classes\n+\t\tfor (String clazz : targets) {\n+\t\t\twhile (clazz.contains(\"$\")) {\n+\t\t\t\tclazz = clazz.substring(0, clazz.lastIndexOf(\"$\"));\n+\t\t\t\tparentClasses.add(clazz);\n+\t\t\t}\n+\t\t}\n+\n+\t\tclasses.addAll(targets);\n+\t\tclasses.addAll(parentClasses);\n+\t}\n+\n+\tvoid addOrMerge(Map<EntryTriple, Access> map, EntryTriple entry, String access, Access defaultAccess) {\n+\t\tif (entry == null || access == null) {\n+\t\t\tthrow new RuntimeException(\"Input entry or access is null\");\n+\t\t}\n+\n+\t\tmap.put(entry, applyAccess(access, map.getOrDefault(entry, defaultAccess), entry));\n+\t}\n+\n+\tprivate Access applyAccess(String input, Access access, EntryTriple entryTriple) {\n+\t\tswitch (input.toLowerCase(Locale.ROOT)) {\n+\t\tcase \"accessible\":\n+\t\t\tmakeClassAccessible(entryTriple);\n+\t\t\treturn access.makeAccessible();\n+\t\tcase \"extendable\":\n+\t\t\tmakeClassExtendable(entryTriple);\n+\t\t\treturn access.makeExtendable();\n+\t\tcase \"mutable\":\n+\t\t\treturn access.makeMutable();\n+\t\tdefault:\n+\t\t\tthrow new UnsupportedOperationException(\"Unknown access type:\" + input);\n+\t\t}\n+\t}\n+\n+\tprivate void makeClassAccessible(EntryTriple entryTriple) {\n+\t\tif (entryTriple == null) return;\n+\t\tclassAccess.put(entryTriple.getOwner(), applyAccess(\"accessible\", classAccess.getOrDefault(entryTriple.getOwner(), ClassAccess.DEFAULT), null));\n+\t}\n+\n+\tprivate void makeClassExtendable(EntryTriple entryTriple) {\n+\t\tif (entryTriple == null) return;\n+\t\tclassAccess.put(entryTriple.getOwner(), applyAccess(\"extendable\", classAccess.getOrDefault(entryTriple.getOwner(), ClassAccess.DEFAULT), null));\n+\t}\n+\n+\tpublic Access getClassAccess(String className) {\n+\t\treturn classAccess.getOrDefault(className, ClassAccess.DEFAULT);\n+\t}\n+\n+\tpublic Access getFieldAccess(EntryTriple entryTriple) {\n+\t\treturn fieldAccess.getOrDefault(entryTriple, FieldAccess.DEFAULT);\n+\t}\n+\n+\tpublic Access getMethodAccess(EntryTriple entryTriple) {\n+\t\treturn methodAccess.getOrDefault(entryTriple, MethodAccess.DEFAULT);\n+\t}\n+\n+\tpublic Set<String> getTargets() {\n+\t\treturn classes;\n+\t}\n+\n+\tprivate static int makePublic(int i) {\n+\t\treturn (i & ~(Opcodes.ACC_PRIVATE | Opcodes.ACC_PROTECTED)) | Opcodes.ACC_PUBLIC;\n+\t}\n+\n+\tprivate static int makeProtected(int i) {\n+\t\tif ((i & Opcodes.ACC_PUBLIC) != 0) {\n+\t\t\t//Return i if public\n+\t\t\treturn i;\n+\t\t}\n+\n+\t\treturn (i & ~(Opcodes.ACC_PRIVATE)) | Opcodes.ACC_PROTECTED;\n+\t}\n+\n+\tprivate static int makeFinalIfPrivate(int i) {\n+\t\tif ((i & Opcodes.ACC_PRIVATE) != 0) {\n+\t\t\treturn i | Opcodes.ACC_FINAL;\n+\t\t}\n+\n+\t\treturn i;\n+\t}\n+\n+\tprivate static int removeFinal(int i) {\n+\t\treturn i & ~Opcodes.ACC_FINAL;\n+\t}\n+\n+\tpublic interface Access {\n+\t\tAccess makeAccessible();\n+\n+\t\tAccess makeExtendable();\n+\n+\t\tAccess makeMutable();\n+\n+\t\tint apply(int i);\n+\t}\n+\n+\tpublic enum ClassAccess implements Access {\n+\t\tDEFAULT(i -> i),\n+\t\tACCESSIBLE(i -> makePublic(makeFinalIfPrivate(i))),\n+\t\tEXTENDABLE(i -> makePublic(removeFinal(i))),\n+\t\tACCESSIBLE_EXTENDABLE(i -> makePublic(removeFinal(i)));\n+\n+\t\tprivate final IntUnaryOperator operator;\n+\n+\t\tClassAccess(IntUnaryOperator operator) {\n+\t\t\tthis.operator = operator;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Access makeAccessible() {\n+\t\t\tif (this == EXTENDABLE || this == ACCESSIBLE_EXTENDABLE) {\n+\t\t\t\treturn ACCESSIBLE_EXTENDABLE;\n+\t\t\t}\n+\n+\t\t\treturn ACCESSIBLE;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Access makeExtendable() {\n+\t\t\tif (this == ACCESSIBLE || this == ACCESSIBLE_EXTENDABLE) {\n+\t\t\t\treturn ACCESSIBLE_EXTENDABLE;\n+\t\t\t}\n+\n+\t\t\treturn EXTENDABLE;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Access makeMutable() {\n+\t\t\tthrow new UnsupportedOperationException(\"Classes cannot be made mutable\");\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic int apply(int i) {\n+\t\t\treturn operator.applyAsInt(i);\n+\t\t}\n+\t}\n+\n+\tpublic enum MethodAccess implements Access {\n+\t\tDEFAULT(i -> i),\n+\t\tACCESSIBLE(i -> makePublic(makeFinalIfPrivate(i))), //Make public, add final if private\n+\t\tEXTENDABLE(i -> makeProtected(removeFinal(i))), //Make protected and strip final\n+\t\tACCESSIBLE_EXTENDABLE(i -> makePublic(removeFinal(i))); //Make public and strip final\n+\n+\t\tprivate final IntUnaryOperator operator;\n+\n+\t\tMethodAccess(IntUnaryOperator operator) {\n+\t\t\tthis.operator = operator;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Access makeAccessible() {\n+\t\t\tif (this == EXTENDABLE || this == ACCESSIBLE_EXTENDABLE) {\n+\t\t\t\treturn ACCESSIBLE_EXTENDABLE;\n+\t\t\t}\n+\n+\t\t\treturn ACCESSIBLE;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Access makeExtendable() {\n+\t\t\tif (this == ACCESSIBLE || this == ACCESSIBLE_EXTENDABLE) {\n+\t\t\t\treturn ACCESSIBLE_EXTENDABLE;\n+\t\t\t}\n+\n+\t\t\treturn EXTENDABLE;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Access makeMutable() {\n+\t\t\tthrow new UnsupportedOperationException(\"Methods cannot be made mutable\");\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic int apply(int i) {\n+\t\t\treturn operator.applyAsInt(i);\n+\t\t}\n+\t}\n+\n+\tpublic enum FieldAccess implements Access {\n+\t\tDEFAULT(i -> i),\n+\t\tACCESSIBLE(i -> makePublic(i)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b50cc19e7838f8d1161a5c01fb5bf183575208e4"}, "originalPosition": 317}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzNzA4OA==", "bodyText": "How about method being accessible by subclass but not other outer classes?", "url": "https://github.com/FabricMC/fabric-loader/pull/206#discussion_r395337088", "createdAt": "2020-03-19T21:44:31Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/transformer/accessWidener/AccessWidener.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.transformer.accessWidener;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.LinkedHashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.IntUnaryOperator;\n+\n+import org.objectweb.asm.Opcodes;\n+\n+import net.fabricmc.loader.FabricLoader;\n+import net.fabricmc.loader.api.ModContainer;\n+import net.fabricmc.loader.metadata.LoaderModMetadata;\n+import net.fabricmc.mappings.EntryTriple;\n+\n+public class AccessWidener {\n+\tpublic String namespace;\n+\tpublic Map<String, Access> classAccess = new HashMap<>();\n+\tpublic Map<EntryTriple, Access> methodAccess = new HashMap<>();\n+\tpublic Map<EntryTriple, Access> fieldAccess = new HashMap<>();\n+\tprivate Set<String> classes = new LinkedHashSet<>();\n+\n+\tpublic void loadFromMods(FabricLoader fabricLoader) {\n+\t\tfor (ModContainer modContainer : fabricLoader.getAllMods()) {\n+\t\t\tLoaderModMetadata modMetadata = (LoaderModMetadata) modContainer.getMetadata();\n+\t\t\tString accessWidener = modMetadata.getAccessWidener();\n+\n+\t\t\tif (accessWidener != null) {\n+\t\t\t\tPath path = modContainer.getPath(accessWidener);\n+\n+\t\t\t\ttry (BufferedReader reader = Files.newBufferedReader(path)) {\n+\t\t\t\t\tread(reader, fabricLoader.getMappingResolver().getCurrentRuntimeNamespace());\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\tthrow new RuntimeException(\"Failed to read accessWidener file from mod \" + modMetadata.getId(), e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic void read(BufferedReader reader, String currentNamespace) throws IOException {\n+\t\tString[] header = reader.readLine().split(\"\\\\s+\");\n+\n+\t\tif (header.length != 3 || !header[0].equals(\"accessWidener\")) {\n+\t\t\tthrow new UnsupportedOperationException(\"Invalid access access widener file\");\n+\t\t}\n+\n+\t\tif (!header[1].equals(\"v1\")) {\n+\t\t\tthrow new RuntimeException(String.format(\"Unsupported access widener format (%s)\", header[1]));\n+\t\t}\n+\n+\t\tif (!header[2].equals(currentNamespace)) {\n+\t\t\tthrow new RuntimeException(String.format(\"Namespace (%s) does not match current runtime namespace (%s)\", header[2], currentNamespace));\n+\t\t}\n+\n+\t\tif (namespace != null) {\n+\t\t\tif (!namespace.equals(header[2])) {\n+\t\t\t\tthrow new RuntimeException(String.format(\"Namespace mismatch, expected %s got %s\", namespace, header[2]));\n+\t\t\t}\n+\t\t}\n+\n+\t\tnamespace = header[2];\n+\n+\t\tString line;\n+\n+\t\tSet<String> targets = new LinkedHashSet<>();\n+\n+\t\twhile ((line = reader.readLine()) != null) {\n+\t\t\t//Comment handling\n+\t\t\tint commentPos = line.indexOf('#');\n+\n+\t\t\tif (commentPos >= 0) {\n+\t\t\t\tline = line.substring(0, commentPos).trim();\n+\t\t\t}\n+\n+\t\t\tif (line.isEmpty()) continue;\n+\n+\t\t\tString[] split = line.split(\"\\\\s+\");\n+\n+\t\t\tif (split.length != 3 && split.length != 5) {\n+\t\t\t\tthrow new RuntimeException(String.format(\"Invalid line (%s)\", line));\n+\t\t\t}\n+\n+\t\t\tString access = split[0];\n+\n+\t\t\ttargets.add(split[2].replaceAll(\"/\", \".\"));\n+\n+\t\t\tswitch (split[1]) {\n+\t\t\tcase \"class\":\n+\t\t\t\tif (split.length != 3) {\n+\t\t\t\t\tthrow new RuntimeException(String.format(\"Expected (<access>\\tclass\\t<className>) got (%s)\", line));\n+\t\t\t\t}\n+\n+\t\t\t\tclassAccess.put(split[2], applyAccess(access, classAccess.getOrDefault(split[2], ClassAccess.DEFAULT), null));\n+\t\t\t\tbreak;\n+\t\t\tcase \"field\":\n+\t\t\t\tif (split.length != 5) {\n+\t\t\t\t\tthrow new RuntimeException(String.format(\"Expected (<access>\\tfield\\t<className>\\t<fieldName>\\t<fieldDesc>) got (%s)\", line));\n+\t\t\t\t}\n+\n+\t\t\t\taddOrMerge(fieldAccess, new EntryTriple(split[2], split[3], split[4]), access, FieldAccess.DEFAULT);\n+\t\t\t\tbreak;\n+\t\t\tcase \"method\":\n+\t\t\t\tif (split.length != 5) {\n+\t\t\t\t\tthrow new RuntimeException(String.format(\"Expected (<access>\\tmethod\\t<className>\\t<methodName>\\t<methodDesc>) got (%s)\", line));\n+\t\t\t\t}\n+\n+\t\t\t\taddOrMerge(methodAccess, new EntryTriple(split[2], split[3], split[4]), access, MethodAccess.DEFAULT);\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tthrow new UnsupportedOperationException(\"Unsupported type \" + split[1]);\n+\t\t\t}\n+\t\t}\n+\n+\t\tSet<String> parentClasses = new LinkedHashSet<>();\n+\n+\t\t//Also transform all parent classes\n+\t\tfor (String clazz : targets) {\n+\t\t\twhile (clazz.contains(\"$\")) {\n+\t\t\t\tclazz = clazz.substring(0, clazz.lastIndexOf(\"$\"));\n+\t\t\t\tparentClasses.add(clazz);\n+\t\t\t}\n+\t\t}\n+\n+\t\tclasses.addAll(targets);\n+\t\tclasses.addAll(parentClasses);\n+\t}\n+\n+\tvoid addOrMerge(Map<EntryTriple, Access> map, EntryTriple entry, String access, Access defaultAccess) {\n+\t\tif (entry == null || access == null) {\n+\t\t\tthrow new RuntimeException(\"Input entry or access is null\");\n+\t\t}\n+\n+\t\tmap.put(entry, applyAccess(access, map.getOrDefault(entry, defaultAccess), entry));\n+\t}\n+\n+\tprivate Access applyAccess(String input, Access access, EntryTriple entryTriple) {\n+\t\tswitch (input.toLowerCase(Locale.ROOT)) {\n+\t\tcase \"accessible\":\n+\t\t\tmakeClassAccessible(entryTriple);\n+\t\t\treturn access.makeAccessible();\n+\t\tcase \"extendable\":\n+\t\t\tmakeClassExtendable(entryTriple);\n+\t\t\treturn access.makeExtendable();\n+\t\tcase \"mutable\":\n+\t\t\treturn access.makeMutable();\n+\t\tdefault:\n+\t\t\tthrow new UnsupportedOperationException(\"Unknown access type:\" + input);\n+\t\t}\n+\t}\n+\n+\tprivate void makeClassAccessible(EntryTriple entryTriple) {\n+\t\tif (entryTriple == null) return;\n+\t\tclassAccess.put(entryTriple.getOwner(), applyAccess(\"accessible\", classAccess.getOrDefault(entryTriple.getOwner(), ClassAccess.DEFAULT), null));\n+\t}\n+\n+\tprivate void makeClassExtendable(EntryTriple entryTriple) {\n+\t\tif (entryTriple == null) return;\n+\t\tclassAccess.put(entryTriple.getOwner(), applyAccess(\"extendable\", classAccess.getOrDefault(entryTriple.getOwner(), ClassAccess.DEFAULT), null));\n+\t}\n+\n+\tpublic Access getClassAccess(String className) {\n+\t\treturn classAccess.getOrDefault(className, ClassAccess.DEFAULT);\n+\t}\n+\n+\tpublic Access getFieldAccess(EntryTriple entryTriple) {\n+\t\treturn fieldAccess.getOrDefault(entryTriple, FieldAccess.DEFAULT);\n+\t}\n+\n+\tpublic Access getMethodAccess(EntryTriple entryTriple) {\n+\t\treturn methodAccess.getOrDefault(entryTriple, MethodAccess.DEFAULT);\n+\t}\n+\n+\tpublic Set<String> getTargets() {\n+\t\treturn classes;\n+\t}\n+\n+\tprivate static int makePublic(int i) {\n+\t\treturn (i & ~(Opcodes.ACC_PRIVATE | Opcodes.ACC_PROTECTED)) | Opcodes.ACC_PUBLIC;\n+\t}\n+\n+\tprivate static int makeProtected(int i) {\n+\t\tif ((i & Opcodes.ACC_PUBLIC) != 0) {\n+\t\t\t//Return i if public\n+\t\t\treturn i;\n+\t\t}\n+\n+\t\treturn (i & ~(Opcodes.ACC_PRIVATE)) | Opcodes.ACC_PROTECTED;\n+\t}\n+\n+\tprivate static int makeFinalIfPrivate(int i) {\n+\t\tif ((i & Opcodes.ACC_PRIVATE) != 0) {\n+\t\t\treturn i | Opcodes.ACC_FINAL;\n+\t\t}\n+\n+\t\treturn i;\n+\t}\n+\n+\tprivate static int removeFinal(int i) {\n+\t\treturn i & ~Opcodes.ACC_FINAL;\n+\t}\n+\n+\tpublic interface Access {\n+\t\tAccess makeAccessible();\n+\n+\t\tAccess makeExtendable();\n+\n+\t\tAccess makeMutable();\n+\n+\t\tint apply(int i);\n+\t}\n+\n+\tpublic enum ClassAccess implements Access {\n+\t\tDEFAULT(i -> i),\n+\t\tACCESSIBLE(i -> makePublic(makeFinalIfPrivate(i))),\n+\t\tEXTENDABLE(i -> makePublic(removeFinal(i))),\n+\t\tACCESSIBLE_EXTENDABLE(i -> makePublic(removeFinal(i)));\n+\n+\t\tprivate final IntUnaryOperator operator;\n+\n+\t\tClassAccess(IntUnaryOperator operator) {\n+\t\t\tthis.operator = operator;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Access makeAccessible() {\n+\t\t\tif (this == EXTENDABLE || this == ACCESSIBLE_EXTENDABLE) {\n+\t\t\t\treturn ACCESSIBLE_EXTENDABLE;\n+\t\t\t}\n+\n+\t\t\treturn ACCESSIBLE;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Access makeExtendable() {\n+\t\t\tif (this == ACCESSIBLE || this == ACCESSIBLE_EXTENDABLE) {\n+\t\t\t\treturn ACCESSIBLE_EXTENDABLE;\n+\t\t\t}\n+\n+\t\t\treturn EXTENDABLE;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Access makeMutable() {\n+\t\t\tthrow new UnsupportedOperationException(\"Classes cannot be made mutable\");\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic int apply(int i) {\n+\t\t\treturn operator.applyAsInt(i);\n+\t\t}\n+\t}\n+\n+\tpublic enum MethodAccess implements Access {\n+\t\tDEFAULT(i -> i),\n+\t\tACCESSIBLE(i -> makePublic(makeFinalIfPrivate(i))), //Make public, add final if private", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b50cc19e7838f8d1161a5c01fb5bf183575208e4"}, "originalPosition": 276}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83afd3b2a7d8758604f90160678ead0efe924e81", "author": {"user": {"login": "modmuss50", "name": "modmuss50"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/83afd3b2a7d8758604f90160678ead0efe924e81", "committedDate": "2020-03-19T21:59:02Z", "message": "Fix issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc3e2a6d646dc6ab8d4e4e8efca8c8076b6cc65d", "author": {"user": {"login": "modmuss50", "name": "modmuss50"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/dc3e2a6d646dc6ab8d4e4e8efca8c8076b6cc65d", "committedDate": "2020-03-19T22:12:56Z", "message": "Merge remote-tracking branch 'remotes/upstream/master' into access\n\n# Conflicts:\n#\tsrc/main/java/net/fabricmc/loader/FabricLoader.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f4cfa22623886f931f364c722ed541150e44fc9", "author": {"user": {"login": "modmuss50", "name": "modmuss50"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/5f4cfa22623886f931f364c722ed541150e44fc9", "committedDate": "2020-03-25T18:36:38Z", "message": "Apply some feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e7ff0a6c617be815eb9dc5963f9384e427f2600", "author": {"user": {"login": "modmuss50", "name": "modmuss50"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/2e7ff0a6c617be815eb9dc5963f9384e427f2600", "committedDate": "2020-03-25T18:41:39Z", "message": "Remove un-needed comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "639f5fd767e4f5a7a82ff83c3d28f9bcc79406b9", "author": {"user": {"login": "modmuss50", "name": "modmuss50"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/639f5fd767e4f5a7a82ff83c3d28f9bcc79406b9", "committedDate": "2020-03-26T14:46:46Z", "message": "Add back makeFinalIfPrivate to methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNjY1NzIx", "url": "https://github.com/FabricMC/fabric-loader/pull/206#pullrequestreview-383665721", "createdAt": "2020-03-30T09:12:19Z", "commit": {"oid": "639f5fd767e4f5a7a82ff83c3d28f9bcc79406b9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MDUxMDA3", "url": "https://github.com/FabricMC/fabric-loader/pull/206#pullrequestreview-384051007", "createdAt": "2020-03-30T16:56:56Z", "commit": {"oid": "639f5fd767e4f5a7a82ff83c3d28f9bcc79406b9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjo1Njo1NlrOF9zPGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjo1Njo1NlrOF9zPGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0NjkwNQ==", "bodyText": "The package should have lowercased name", "url": "https://github.com/FabricMC/fabric-loader/pull/206#discussion_r400346905", "createdAt": "2020-03-30T16:56:56Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/transformer/accessWidener/AccessWidener.java", "diffHunk": "@@ -0,0 +1,353 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.transformer.accessWidener;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "639f5fd767e4f5a7a82ff83c3d28f9bcc79406b9"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MDU1MTM5", "url": "https://github.com/FabricMC/fabric-loader/pull/206#pullrequestreview-384055139", "createdAt": "2020-03-30T17:02:03Z", "commit": {"oid": "639f5fd767e4f5a7a82ff83c3d28f9bcc79406b9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzowMjowM1rOF9zcOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzowMjowM1rOF9zcOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1MDI2Nw==", "bodyText": "This seems a bit redundant to me to call a method on the loader's instance, and then require the loader again as a param.\nCouldn't we just make the loader one of the ctor params for the AccessWideners since we won't usually be passing multiple instances of loader into the same game.", "url": "https://github.com/FabricMC/fabric-loader/pull/206#discussion_r400350267", "createdAt": "2020-03-30T17:02:03Z", "author": {"login": "i509VCB"}, "path": "src/main/java/net/fabricmc/loader/launch/FabricTweaker.java", "diffHunk": "@@ -122,6 +122,8 @@ public void injectIntoClassLoader(LaunchClassLoader launchClassLoader) {\n \t\t\t}\n \t\t}\n \n+\t\tFabricLoader.INSTANCE.getAccessWidener().loadFromMods(FabricLoader.INSTANCE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "639f5fd767e4f5a7a82ff83c3d28f9bcc79406b9"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42fd6e06314597009ef0e0c53b653806585b0f58", "author": {"user": {"login": "modmuss50", "name": "modmuss50"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/42fd6e06314597009ef0e0c53b653806585b0f58", "committedDate": "2020-03-30T17:09:51Z", "message": "fix package name."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef5148d9b9b19fbafdfbb0e2068354cbd5cd139e", "author": {"user": {"login": "modmuss50", "name": "modmuss50"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/ef5148d9b9b19fbafdfbb0e2068354cbd5cd139e", "committedDate": "2020-03-30T17:16:30Z", "message": "Pass FabricLoader instance via a constructor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjU4OTA0", "url": "https://github.com/FabricMC/fabric-loader/pull/206#pullrequestreview-387658904", "createdAt": "2020-04-04T02:34:29Z", "commit": {"oid": "ef5148d9b9b19fbafdfbb0e2068354cbd5cd139e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMjozNDoyOVrOGAuV5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMjozNjo0NFrOGAuWgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQxMjQ1Mg==", "bodyText": "Maye something indicating nullability (not required, this is internal impl)", "url": "https://github.com/FabricMC/fabric-loader/pull/206#discussion_r403412452", "createdAt": "2020-04-04T02:34:29Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/metadata/LoaderModMetadata.java", "diffHunk": "@@ -36,6 +36,7 @@ default String getOldStyleLanguageAdapter() {\n \tMap<String, String> getLanguageAdapterDefinitions();\n \tCollection<NestedJarEntry> getJars();\n \tCollection<String> getMixinConfigs(EnvType type);\n+\tString getAccessWidener();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef5148d9b9b19fbafdfbb0e2068354cbd5cd139e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQxMjU1NQ==", "bodyText": "Can we just do dynamic namespace remapping instead, which the mapping parser already allows? We cannot always assume that we run in intermediary.", "url": "https://github.com/FabricMC/fabric-loader/pull/206#discussion_r403412555", "createdAt": "2020-04-04T02:35:53Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/transformer/accesswidener/AccessWidener.java", "diffHunk": "@@ -0,0 +1,359 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.transformer.accesswidener;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.LinkedHashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.IntUnaryOperator;\n+\n+import org.objectweb.asm.Opcodes;\n+\n+import net.fabricmc.loader.FabricLoader;\n+import net.fabricmc.loader.api.ModContainer;\n+import net.fabricmc.loader.metadata.LoaderModMetadata;\n+import net.fabricmc.mappings.EntryTriple;\n+\n+public class AccessWidener {\n+\tpublic String namespace;\n+\tpublic Map<String, Access> classAccess = new HashMap<>();\n+\tpublic Map<EntryTriple, Access> methodAccess = new HashMap<>();\n+\tpublic Map<EntryTriple, Access> fieldAccess = new HashMap<>();\n+\tprivate Set<String> classes = new LinkedHashSet<>();\n+\n+\tprivate final FabricLoader fabricLoader;\n+\n+\tpublic AccessWidener(FabricLoader fabricLoader) {\n+\t\tthis.fabricLoader = fabricLoader;\n+\t}\n+\n+\tpublic void loadFromMods() {\n+\t\tfor (ModContainer modContainer : fabricLoader.getAllMods()) {\n+\t\t\tLoaderModMetadata modMetadata = (LoaderModMetadata) modContainer.getMetadata();\n+\t\t\tString accessWidener = modMetadata.getAccessWidener();\n+\n+\t\t\tif (accessWidener != null) {\n+\t\t\t\tPath path = modContainer.getPath(accessWidener);\n+\n+\t\t\t\ttry (BufferedReader reader = Files.newBufferedReader(path)) {\n+\t\t\t\t\tread(reader, fabricLoader.getMappingResolver().getCurrentRuntimeNamespace());\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\tthrow new RuntimeException(\"Failed to read accessWidener file from mod \" + modMetadata.getId(), e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic void read(BufferedReader reader, String currentNamespace) throws IOException {\n+\t\tString[] header = reader.readLine().split(\"\\\\s+\");\n+\n+\t\tif (header.length != 3 || !header[0].equals(\"accessWidener\")) {\n+\t\t\tthrow new UnsupportedOperationException(\"Invalid access access widener file\");\n+\t\t}\n+\n+\t\tif (!header[1].equals(\"v1\")) {\n+\t\t\tthrow new RuntimeException(String.format(\"Unsupported access widener format (%s)\", header[1]));\n+\t\t}\n+\n+\t\tif (!header[2].equals(currentNamespace)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef5148d9b9b19fbafdfbb0e2068354cbd5cd139e"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQxMjYwOA==", "bodyText": "Remember to bump this to 8 later", "url": "https://github.com/FabricMC/fabric-loader/pull/206#discussion_r403412608", "createdAt": "2020-04-04T02:36:44Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/transformer/accesswidener/AccessWidenerVisitor.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.transformer.accesswidener;\n+\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.FieldVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+\n+import net.fabricmc.mappings.EntryTriple;\n+\n+public class AccessWidenerVisitor extends ClassVisitor {\n+\tprivate final AccessWidener accessWidener;\n+\n+\tprivate String className;\n+\n+\tpublic AccessWidenerVisitor(int api, ClassVisitor classVisitor, AccessWidener accessWidener) {\n+\t\tsuper(api, classVisitor);\n+\t\tthis.accessWidener = accessWidener;\n+\t}\n+\n+\t@Override\n+\tpublic void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {\n+\t\tclassName = name;\n+\t\tsuper.visit(\n+\t\t\t\tversion,\n+\t\t\t\taccessWidener.getClassAccess(name).applyAsInt(access),\n+\t\t\t\tname,\n+\t\t\t\tsignature,\n+\t\t\t\tsuperName,\n+\t\t\t\tinterfaces\n+\t\t);\n+\t}\n+\n+\t@Override\n+\tpublic void visitInnerClass(String name, String outerName, String innerName, int access) {\n+\t\tsuper.visitInnerClass(\n+\t\t\t\tname,\n+\t\t\t\touterName,\n+\t\t\t\tinnerName,\n+\t\t\t\taccessWidener.getClassAccess(name).applyAsInt(access)\n+\t\t);\n+\t}\n+\n+\t@Override\n+\tpublic FieldVisitor visitField(int access, String name, String descriptor, String signature, Object value) {\n+\t\treturn super.visitField(\n+\t\t\t\taccessWidener.getFieldAccess(new EntryTriple(className, name, descriptor)).applyAsInt(access),\n+\t\t\t\tname,\n+\t\t\t\tdescriptor,\n+\t\t\t\tsignature,\n+\t\t\t\tvalue\n+\t\t);\n+\t}\n+\n+\t@Override\n+\tpublic MethodVisitor visitMethod(int access, String name, String descriptor, String signature, String[] exceptions) {\n+\t\treturn new AccessWidenerMethodVisitor(super.visitMethod(\n+\t\t\t\taccessWidener.getMethodAccess(new EntryTriple(className, name, descriptor)).applyAsInt(access),\n+\t\t\t\tname,\n+\t\t\t\tdescriptor,\n+\t\t\t\tsignature,\n+\t\t\t\texceptions\n+\t\t));\n+\t}\n+\n+\tprivate class AccessWidenerMethodVisitor extends MethodVisitor {\n+\t\tAccessWidenerMethodVisitor(MethodVisitor methodVisitor) {\n+\t\t\tsuper(Opcodes.ASM7, methodVisitor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef5148d9b9b19fbafdfbb0e2068354cbd5cd139e"}, "originalPosition": 83}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3541df137dbc0fff51c73337526081dc5d10a989", "author": {"user": {"login": "modmuss50", "name": "modmuss50"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/3541df137dbc0fff51c73337526081dc5d10a989", "committedDate": "2020-04-04T14:03:00Z", "message": "Merge remote-tracking branch 'remotes/upstream/master' into access"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NzA0MDEx", "url": "https://github.com/FabricMC/fabric-loader/pull/206#pullrequestreview-387704011", "createdAt": "2020-04-04T14:27:52Z", "commit": {"oid": "ef5148d9b9b19fbafdfbb0e2068354cbd5cd139e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNDoyNzo1MlrOGAyPIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNDoyNzo1MlrOGAyPIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3NjI1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tvisitor = new AccessWidenerVisitor(Opcodes.ASM7, visitor, FabricLoader.INSTANCE.getAccessWidener());\n          \n          \n            \n            \t\t\tvisitor = new AccessWidenerVisitor(Opcodes.ASM8, visitor, FabricLoader.INSTANCE.getAccessWidener());\n          \n      \n    \n    \n  \n\nThis will need doing when the ASM8 PR is merged.", "url": "https://github.com/FabricMC/fabric-loader/pull/206#discussion_r403476256", "createdAt": "2020-04-04T14:27:52Z", "author": {"login": "modmuss50"}, "path": "src/main/java/net/fabricmc/loader/transformer/FabricTransformer.java", "diffHunk": "@@ -56,6 +59,11 @@\n \t\tClassVisitor visitor = classWriter;\n \t\tint visitorCount = 0;\n \n+\t\tif (applyAccessWidener) {\n+\t\t\tvisitor = new AccessWidenerVisitor(Opcodes.ASM7, visitor, FabricLoader.INSTANCE.getAccessWidener());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef5148d9b9b19fbafdfbb0e2068354cbd5cd139e"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fe9b4c0e7aae1b6ce0aba88d6dbe148dc1dd617", "author": {"user": {"login": "modmuss50", "name": "modmuss50"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/0fe9b4c0e7aae1b6ce0aba88d6dbe148dc1dd617", "committedDate": "2020-04-06T14:31:20Z", "message": "Merge remote-tracking branch 'remotes/upstream/master' into access"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03b8e685cab0faca1bdb237ae9322e6dc9e19552", "author": {"user": {"login": "modmuss50", "name": "modmuss50"}}, "url": "https://github.com/FabricMC/fabric-loader/commit/03b8e685cab0faca1bdb237ae9322e6dc9e19552", "committedDate": "2020-04-06T14:32:23Z", "message": "Update AccessWidenerVisitor to use ASM8"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3426, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}