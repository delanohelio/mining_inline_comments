{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3NjcwMDEx", "number": 241, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODozOToyMVrOElysdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODo1MDoxMlrOEly7HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDYzMzQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/transformer/accesswidener/AccessWidener.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODozOToyMVrOHVdtUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODozOToyMVrOHVdtUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2ODg4Mg==", "bodyText": "I think it might be worth moving access widerners out into their own lib, as all this is copyied right out of loom.", "url": "https://github.com/FabricMC/fabric-loader/pull/241#discussion_r492268882", "createdAt": "2020-09-21T18:39:21Z", "author": {"login": "modmuss50"}, "path": "src/main/java/net/fabricmc/loader/transformer/accesswidener/AccessWidener.java", "diffHunk": "@@ -151,6 +154,100 @@ public void read(BufferedReader reader, String currentNamespace) throws IOExcept\n \t\tclasses.addAll(parentClasses);\n \t}\n \n+\tpublic void write(StringWriter writer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "079f942eb6b16ff8229b6915199f57750379b0d4"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDY3MTAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/discovery/RuntimeModRemapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODo1MDoxMlrOHVeEUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODo1NDozNVrOHVeNhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3NDc2OA==", "bodyText": "Couldn't all the methods in this class effectively be static?", "url": "https://github.com/FabricMC/fabric-loader/pull/241#discussion_r492274768", "createdAt": "2020-09-21T18:50:12Z", "author": {"login": "i509VCB"}, "path": "src/main/java/net/fabricmc/loader/discovery/RuntimeModRemapper.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.discovery;\n+\n+import org.objectweb.asm.commons.Remapper;\n+\n+import net.fabricmc.loader.FabricLoader;\n+import net.fabricmc.loader.launch.common.FabricLauncher;\n+import net.fabricmc.loader.launch.common.FabricLauncherBase;\n+import net.fabricmc.loader.transformer.accesswidener.AccessWidener;\n+import net.fabricmc.loader.transformer.accesswidener.AccessWidenerRemapper;\n+import net.fabricmc.loader.util.FileSystemUtil;\n+import net.fabricmc.loader.util.UrlConversionException;\n+import net.fabricmc.loader.util.UrlUtil;\n+import net.fabricmc.loader.util.mappings.TinyRemapperMappingsHelper;\n+import net.fabricmc.tinyremapper.InputTag;\n+import net.fabricmc.tinyremapper.OutputConsumerPath;\n+import net.fabricmc.tinyremapper.TinyRemapper;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.StringWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.FileSystem;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public class RuntimeModRemapper {\n+\n+\tprivate final FabricLauncher launcher = FabricLauncherBase.getLauncher();\n+\n+\tpublic Collection<ModCandidate> remap(Collection<ModCandidate> modCandidates, FileSystem fileSystem) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "079f942eb6b16ff8229b6915199f57750379b0d4"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3NzEyNA==", "bodyText": "Looks like it. Yes.", "url": "https://github.com/FabricMC/fabric-loader/pull/241#discussion_r492277124", "createdAt": "2020-09-21T18:54:35Z", "author": {"login": "modmuss50"}, "path": "src/main/java/net/fabricmc/loader/discovery/RuntimeModRemapper.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.discovery;\n+\n+import org.objectweb.asm.commons.Remapper;\n+\n+import net.fabricmc.loader.FabricLoader;\n+import net.fabricmc.loader.launch.common.FabricLauncher;\n+import net.fabricmc.loader.launch.common.FabricLauncherBase;\n+import net.fabricmc.loader.transformer.accesswidener.AccessWidener;\n+import net.fabricmc.loader.transformer.accesswidener.AccessWidenerRemapper;\n+import net.fabricmc.loader.util.FileSystemUtil;\n+import net.fabricmc.loader.util.UrlConversionException;\n+import net.fabricmc.loader.util.UrlUtil;\n+import net.fabricmc.loader.util.mappings.TinyRemapperMappingsHelper;\n+import net.fabricmc.tinyremapper.InputTag;\n+import net.fabricmc.tinyremapper.OutputConsumerPath;\n+import net.fabricmc.tinyremapper.TinyRemapper;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.StringWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.FileSystem;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public class RuntimeModRemapper {\n+\n+\tprivate final FabricLauncher launcher = FabricLauncherBase.getLauncher();\n+\n+\tpublic Collection<ModCandidate> remap(Collection<ModCandidate> modCandidates, FileSystem fileSystem) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3NDc2OA=="}, "originalCommit": {"oid": "079f942eb6b16ff8229b6915199f57750379b0d4"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3293, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}