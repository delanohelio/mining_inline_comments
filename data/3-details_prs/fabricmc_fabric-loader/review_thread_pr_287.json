{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NzQyNTE2", "number": 287, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQyMDo0ODoxOFrOESLuRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQyMDo0ODoxOFrOESLuRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTAxODkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/util/version/SemanticVersionImpl.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQyMDo0ODoxOFrOG3PElQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzozMjo1NVrOHrZV5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3MTc5Nw==", "bodyText": "IMO this shouldn't rely on parse exceptions, but check explicitly against the spec with a regex like 0|[1-9]\\d*", "url": "https://github.com/FabricMC/fabric-loader/pull/287#discussion_r460571797", "createdAt": "2020-07-26T20:48:18Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/util/version/SemanticVersionImpl.java", "diffHunk": "@@ -215,4 +216,66 @@ public boolean equalsComponentsExactly(SemanticVersionImpl other) {\n \tboolean isPrerelease() {\n \t\treturn prerelease != null;\n \t}\n+\n+\t@Override\n+\tpublic int compareTo(SemanticVersion o) {\n+\t\tfor (int i = 0; i < Math.max(getVersionComponentCount(), o.getVersionComponentCount()); i++) {\n+\t\t\tint first = getVersionComponent(i);\n+\t\t\tint second = o.getVersionComponent(i);\n+\t\t\tif (first == COMPONENT_WILDCARD || second == COMPONENT_WILDCARD) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\n+\t\t\tint compare = Integer.compare(first, second);\n+\t\t\tif (compare != 0) {\n+\t\t\t\treturn compare;\n+\t\t\t}\n+\t\t}\n+\n+\t\tOptional<String> prereleaseA = getPrereleaseKey();\n+\t\tOptional<String> prereleaseB = o.getPrereleaseKey();\n+\n+\t\tif (prereleaseA.isPresent() || prereleaseB.isPresent()) {\n+\t\t\tif (prereleaseA.isPresent() && prereleaseB.isPresent()) {\n+\t\t\t\tStringTokenizer prereleaseATokenizer = new StringTokenizer(prereleaseA.get(), \".\");\n+\t\t\t\tStringTokenizer prereleaseBTokenizer = new StringTokenizer(prereleaseB.get(), \".\");\n+\n+\t\t\t\twhile (prereleaseATokenizer.hasMoreElements()) {\n+\t\t\t\t\tif (prereleaseBTokenizer.hasMoreElements()) {\n+\t\t\t\t\t\tString partA = prereleaseATokenizer.nextToken();\n+\t\t\t\t\t\tString partB = prereleaseBTokenizer.nextToken();\n+\n+\t\t\t\t\t\tint compare;\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tint numA = Integer.parseUnsignedInt(partA);\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\tint numB = Integer.parseUnsignedInt(partB);\n+\t\t\t\t\t\t\t\tcompare = Integer.compareUnsigned(numA, numB);\n+\t\t\t\t\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\t\t\t\t\tcompare = -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d24d68fb0ac6972417a0ef56f19d1fa994c4a2e"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM0NDI4OQ==", "bodyText": "How would one handle the exceptions then?", "url": "https://github.com/FabricMC/fabric-loader/pull/287#discussion_r466344289", "createdAt": "2020-08-06T11:24:00Z", "author": {"login": "Siphalor"}, "path": "src/main/java/net/fabricmc/loader/util/version/SemanticVersionImpl.java", "diffHunk": "@@ -215,4 +216,66 @@ public boolean equalsComponentsExactly(SemanticVersionImpl other) {\n \tboolean isPrerelease() {\n \t\treturn prerelease != null;\n \t}\n+\n+\t@Override\n+\tpublic int compareTo(SemanticVersion o) {\n+\t\tfor (int i = 0; i < Math.max(getVersionComponentCount(), o.getVersionComponentCount()); i++) {\n+\t\t\tint first = getVersionComponent(i);\n+\t\t\tint second = o.getVersionComponent(i);\n+\t\t\tif (first == COMPONENT_WILDCARD || second == COMPONENT_WILDCARD) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\n+\t\t\tint compare = Integer.compare(first, second);\n+\t\t\tif (compare != 0) {\n+\t\t\t\treturn compare;\n+\t\t\t}\n+\t\t}\n+\n+\t\tOptional<String> prereleaseA = getPrereleaseKey();\n+\t\tOptional<String> prereleaseB = o.getPrereleaseKey();\n+\n+\t\tif (prereleaseA.isPresent() || prereleaseB.isPresent()) {\n+\t\t\tif (prereleaseA.isPresent() && prereleaseB.isPresent()) {\n+\t\t\t\tStringTokenizer prereleaseATokenizer = new StringTokenizer(prereleaseA.get(), \".\");\n+\t\t\t\tStringTokenizer prereleaseBTokenizer = new StringTokenizer(prereleaseB.get(), \".\");\n+\n+\t\t\t\twhile (prereleaseATokenizer.hasMoreElements()) {\n+\t\t\t\t\tif (prereleaseBTokenizer.hasMoreElements()) {\n+\t\t\t\t\t\tString partA = prereleaseATokenizer.nextToken();\n+\t\t\t\t\t\tString partB = prereleaseBTokenizer.nextToken();\n+\n+\t\t\t\t\t\tint compare;\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tint numA = Integer.parseUnsignedInt(partA);\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\tint numB = Integer.parseUnsignedInt(partB);\n+\t\t\t\t\t\t\t\tcompare = Integer.compareUnsigned(numA, numB);\n+\t\t\t\t\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\t\t\t\t\tcompare = -1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3MTc5Nw=="}, "originalCommit": {"oid": "9d24d68fb0ac6972417a0ef56f19d1fa994c4a2e"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU3MTU4MQ==", "bodyText": "Is the updated version better?", "url": "https://github.com/FabricMC/fabric-loader/pull/287#discussion_r495571581", "createdAt": "2020-09-27T13:10:51Z", "author": {"login": "Siphalor"}, "path": "src/main/java/net/fabricmc/loader/util/version/SemanticVersionImpl.java", "diffHunk": "@@ -215,4 +216,66 @@ public boolean equalsComponentsExactly(SemanticVersionImpl other) {\n \tboolean isPrerelease() {\n \t\treturn prerelease != null;\n \t}\n+\n+\t@Override\n+\tpublic int compareTo(SemanticVersion o) {\n+\t\tfor (int i = 0; i < Math.max(getVersionComponentCount(), o.getVersionComponentCount()); i++) {\n+\t\t\tint first = getVersionComponent(i);\n+\t\t\tint second = o.getVersionComponent(i);\n+\t\t\tif (first == COMPONENT_WILDCARD || second == COMPONENT_WILDCARD) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\n+\t\t\tint compare = Integer.compare(first, second);\n+\t\t\tif (compare != 0) {\n+\t\t\t\treturn compare;\n+\t\t\t}\n+\t\t}\n+\n+\t\tOptional<String> prereleaseA = getPrereleaseKey();\n+\t\tOptional<String> prereleaseB = o.getPrereleaseKey();\n+\n+\t\tif (prereleaseA.isPresent() || prereleaseB.isPresent()) {\n+\t\t\tif (prereleaseA.isPresent() && prereleaseB.isPresent()) {\n+\t\t\t\tStringTokenizer prereleaseATokenizer = new StringTokenizer(prereleaseA.get(), \".\");\n+\t\t\t\tStringTokenizer prereleaseBTokenizer = new StringTokenizer(prereleaseB.get(), \".\");\n+\n+\t\t\t\twhile (prereleaseATokenizer.hasMoreElements()) {\n+\t\t\t\t\tif (prereleaseBTokenizer.hasMoreElements()) {\n+\t\t\t\t\t\tString partA = prereleaseATokenizer.nextToken();\n+\t\t\t\t\t\tString partB = prereleaseBTokenizer.nextToken();\n+\n+\t\t\t\t\t\tint compare;\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tint numA = Integer.parseUnsignedInt(partA);\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\tint numB = Integer.parseUnsignedInt(partB);\n+\t\t\t\t\t\t\t\tcompare = Integer.compareUnsigned(numA, numB);\n+\t\t\t\t\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\t\t\t\t\tcompare = -1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3MTc5Nw=="}, "originalCommit": {"oid": "9d24d68fb0ac6972417a0ef56f19d1fa994c4a2e"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI2NjAyMg==", "bodyText": "Yes, thanks. Sorry for the delay, will move this forward soon.", "url": "https://github.com/FabricMC/fabric-loader/pull/287#discussion_r515266022", "createdAt": "2020-10-30T17:32:55Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/util/version/SemanticVersionImpl.java", "diffHunk": "@@ -215,4 +216,66 @@ public boolean equalsComponentsExactly(SemanticVersionImpl other) {\n \tboolean isPrerelease() {\n \t\treturn prerelease != null;\n \t}\n+\n+\t@Override\n+\tpublic int compareTo(SemanticVersion o) {\n+\t\tfor (int i = 0; i < Math.max(getVersionComponentCount(), o.getVersionComponentCount()); i++) {\n+\t\t\tint first = getVersionComponent(i);\n+\t\t\tint second = o.getVersionComponent(i);\n+\t\t\tif (first == COMPONENT_WILDCARD || second == COMPONENT_WILDCARD) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\n+\t\t\tint compare = Integer.compare(first, second);\n+\t\t\tif (compare != 0) {\n+\t\t\t\treturn compare;\n+\t\t\t}\n+\t\t}\n+\n+\t\tOptional<String> prereleaseA = getPrereleaseKey();\n+\t\tOptional<String> prereleaseB = o.getPrereleaseKey();\n+\n+\t\tif (prereleaseA.isPresent() || prereleaseB.isPresent()) {\n+\t\t\tif (prereleaseA.isPresent() && prereleaseB.isPresent()) {\n+\t\t\t\tStringTokenizer prereleaseATokenizer = new StringTokenizer(prereleaseA.get(), \".\");\n+\t\t\t\tStringTokenizer prereleaseBTokenizer = new StringTokenizer(prereleaseB.get(), \".\");\n+\n+\t\t\t\twhile (prereleaseATokenizer.hasMoreElements()) {\n+\t\t\t\t\tif (prereleaseBTokenizer.hasMoreElements()) {\n+\t\t\t\t\t\tString partA = prereleaseATokenizer.nextToken();\n+\t\t\t\t\t\tString partB = prereleaseBTokenizer.nextToken();\n+\n+\t\t\t\t\t\tint compare;\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tint numA = Integer.parseUnsignedInt(partA);\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\tint numB = Integer.parseUnsignedInt(partB);\n+\t\t\t\t\t\t\t\tcompare = Integer.compareUnsigned(numA, numB);\n+\t\t\t\t\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\t\t\t\t\tcompare = -1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3MTc5Nw=="}, "originalCommit": {"oid": "9d24d68fb0ac6972417a0ef56f19d1fa994c4a2e"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3311, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}