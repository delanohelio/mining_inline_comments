{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4Mzk5Mzk5", "number": 277, "reviewThreads": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODo1Mjo1MlrOEN8lqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMDo1ODowOVrOEr2acQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDU5NjI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODo1Mjo1MlrOGw1fuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMTo0ODoyNFrOGxQLgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg2MTMwNw==", "bodyText": "good lord switch block may be least messy", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r453861307", "createdAt": "2020-07-13T18:52:52Z", "author": {"login": "i509VCB"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -340,20 +340,56 @@ private void addErrorToList(ModCandidate candidate, ModDependency dependency, Ma\n \t\t\terrors.append(\"\\n - Mod \").append(candidate.getInfo().getId()).append(\" \").append(errorType).append(\" mod \").append(dependency).append(\", \");\n \n \t\t\tif (depCandidate == null) {\n-\t\t\t\terrors.append(\"which is missing\");\n-\t\t\t} else if (cond) {\n-\t\t\t\terrors.append(\"but a different version is present: \").append(depCandidate.getInfo().getVersion());\n-\t\t\t} else if (errorType.contains(\"conf\")) {\n-\t\t\t\t// CONFLICTS WITH\n-\t\t\t\terrors.append(\"but the conflicting version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\terrors.append(\"which is missing!\");\n+\t\t\t\terrors.append(\"\\n     You must install \").append(horribleModDependencyToStringMethod(dependency)).append(\" of \").append(depModId).append(\".\");\n \t\t\t} else {\n-\t\t\t\terrors.append(\"but the breaking version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\tfinal String depCandidateVer = depCandidate.getInfo().getVersion().getFriendlyString();\n+\t\t\t\tif (cond) {\n+\t\t\t\t\terrors.append(\"but a different version is present: \").append(depCandidateVer).append(\"!\");\n+\t\t\t\t\terrors.append(\"\\n     You must install \").append(horribleModDependencyToStringMethod(dependency)).append(\" of \").append(depModId).append(\".\");\n+\t\t\t\t} else if (errorType.contains(\"conf\")) {\n+\t\t\t\t\t// CONFLICTS WITH\n+\t\t\t\t\terrors.append(\"but the conflicting version is present: \").append(depCandidateVer).append(\"!\");\n+\t\t\t\t\terrors.append(\"\\n     While this won't prevent you from starting the game, the developer(s) of \").append(candidate.getInfo().getId());\n+\t\t\t\t\terrors.append(\"\\n     have found that version \").append(depCandidateVer).append(\" of \").append(depModId);\n+\t\t\t\t\terrors.append(\"\\n     conflicts with their mod. It is heavily recommended to remove one of the mods.\");\n+\t\t\t\t} else {\n+\t\t\t\t\terrors.append(\"but the breaking version is present: \").append(depCandidate.getInfo().getVersion()).append(\"!\");\n+\t\t\t\t\terrors.append(\"\\n     The developer(s) of \").append(candidate.getInfo().getId());\n+\t\t\t\t\terrors.append(\"\\n     have found that version \").append(depCandidateVer).append(\" of \").append(depModId);\n+\t\t\t\t\terrors.append(\"\\n     critically conflicts with their mod. You must remove one of the mods.\");\n+\t\t\t\t}\n \t\t\t}\n \n-\t\t\terrors.append(\"!\");\n+\t\t\t//errors.append(\"!\");\n \t\t}\n \t}\n \n+\t// lord forgive me for what I must do\n+\tprivate static String horribleModDependencyToStringMethod(ModDependency dependency) {\n+\t\tString depStr = dependency.toString();\n+\t\tint verStart = depStr.indexOf('[');\n+\t\tif (verStart < 0)\n+\t\t\treturn \"unknown version\";\n+\t\tint verEnd = depStr.indexOf(']');\n+\t\tif (verEnd < verStart)\n+\t\t\treturn \"unknown version\";\n+\t\tString verStr = depStr.substring(verStart + 1, verEnd);\n+\t\tif (\"*\".equals(verStr))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a66dcb3aa54880846a2e0bc306dc9b74db4623f"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg2Mzk2Nw==", "bodyText": "should probably add a method on ModDependency to do this, really, since toString is implementation-independent\ncase in point: the current mess always returns \"unknown version\" for v0 mods", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r453863967", "createdAt": "2020-07-13T18:57:43Z", "author": {"login": "Leo40Git"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -340,20 +340,56 @@ private void addErrorToList(ModCandidate candidate, ModDependency dependency, Ma\n \t\t\terrors.append(\"\\n - Mod \").append(candidate.getInfo().getId()).append(\" \").append(errorType).append(\" mod \").append(dependency).append(\", \");\n \n \t\t\tif (depCandidate == null) {\n-\t\t\t\terrors.append(\"which is missing\");\n-\t\t\t} else if (cond) {\n-\t\t\t\terrors.append(\"but a different version is present: \").append(depCandidate.getInfo().getVersion());\n-\t\t\t} else if (errorType.contains(\"conf\")) {\n-\t\t\t\t// CONFLICTS WITH\n-\t\t\t\terrors.append(\"but the conflicting version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\terrors.append(\"which is missing!\");\n+\t\t\t\terrors.append(\"\\n     You must install \").append(horribleModDependencyToStringMethod(dependency)).append(\" of \").append(depModId).append(\".\");\n \t\t\t} else {\n-\t\t\t\terrors.append(\"but the breaking version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\tfinal String depCandidateVer = depCandidate.getInfo().getVersion().getFriendlyString();\n+\t\t\t\tif (cond) {\n+\t\t\t\t\terrors.append(\"but a different version is present: \").append(depCandidateVer).append(\"!\");\n+\t\t\t\t\terrors.append(\"\\n     You must install \").append(horribleModDependencyToStringMethod(dependency)).append(\" of \").append(depModId).append(\".\");\n+\t\t\t\t} else if (errorType.contains(\"conf\")) {\n+\t\t\t\t\t// CONFLICTS WITH\n+\t\t\t\t\terrors.append(\"but the conflicting version is present: \").append(depCandidateVer).append(\"!\");\n+\t\t\t\t\terrors.append(\"\\n     While this won't prevent you from starting the game, the developer(s) of \").append(candidate.getInfo().getId());\n+\t\t\t\t\terrors.append(\"\\n     have found that version \").append(depCandidateVer).append(\" of \").append(depModId);\n+\t\t\t\t\terrors.append(\"\\n     conflicts with their mod. It is heavily recommended to remove one of the mods.\");\n+\t\t\t\t} else {\n+\t\t\t\t\terrors.append(\"but the breaking version is present: \").append(depCandidate.getInfo().getVersion()).append(\"!\");\n+\t\t\t\t\terrors.append(\"\\n     The developer(s) of \").append(candidate.getInfo().getId());\n+\t\t\t\t\terrors.append(\"\\n     have found that version \").append(depCandidateVer).append(\" of \").append(depModId);\n+\t\t\t\t\terrors.append(\"\\n     critically conflicts with their mod. You must remove one of the mods.\");\n+\t\t\t\t}\n \t\t\t}\n \n-\t\t\terrors.append(\"!\");\n+\t\t\t//errors.append(\"!\");\n \t\t}\n \t}\n \n+\t// lord forgive me for what I must do\n+\tprivate static String horribleModDependencyToStringMethod(ModDependency dependency) {\n+\t\tString depStr = dependency.toString();\n+\t\tint verStart = depStr.indexOf('[');\n+\t\tif (verStart < 0)\n+\t\t\treturn \"unknown version\";\n+\t\tint verEnd = depStr.indexOf(']');\n+\t\tif (verEnd < verStart)\n+\t\t\treturn \"unknown version\";\n+\t\tString verStr = depStr.substring(verStart + 1, verEnd);\n+\t\tif (\"*\".equals(verStr))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg2MTMwNw=="}, "originalCommit": {"oid": "1a66dcb3aa54880846a2e0bc306dc9b74db4623f"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI5ODQ5OQ==", "bodyText": "I did the thing, also it's a switch block now\nfor v0 mods: https://github.com/FabricMC/fabric-loader/pull/277/files#diff-3239f64a8e4a83838362f26163c22eedR333 (REQUIRES MORE WORK)\nfor v1 mods: https://github.com/FabricMC/fabric-loader/pull/277/files#diff-e7a80560353754b29221f3af67d286fcR303", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r454298499", "createdAt": "2020-07-14T11:48:24Z", "author": {"login": "Leo40Git"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -340,20 +340,56 @@ private void addErrorToList(ModCandidate candidate, ModDependency dependency, Ma\n \t\t\terrors.append(\"\\n - Mod \").append(candidate.getInfo().getId()).append(\" \").append(errorType).append(\" mod \").append(dependency).append(\", \");\n \n \t\t\tif (depCandidate == null) {\n-\t\t\t\terrors.append(\"which is missing\");\n-\t\t\t} else if (cond) {\n-\t\t\t\terrors.append(\"but a different version is present: \").append(depCandidate.getInfo().getVersion());\n-\t\t\t} else if (errorType.contains(\"conf\")) {\n-\t\t\t\t// CONFLICTS WITH\n-\t\t\t\terrors.append(\"but the conflicting version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\terrors.append(\"which is missing!\");\n+\t\t\t\terrors.append(\"\\n     You must install \").append(horribleModDependencyToStringMethod(dependency)).append(\" of \").append(depModId).append(\".\");\n \t\t\t} else {\n-\t\t\t\terrors.append(\"but the breaking version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\tfinal String depCandidateVer = depCandidate.getInfo().getVersion().getFriendlyString();\n+\t\t\t\tif (cond) {\n+\t\t\t\t\terrors.append(\"but a different version is present: \").append(depCandidateVer).append(\"!\");\n+\t\t\t\t\terrors.append(\"\\n     You must install \").append(horribleModDependencyToStringMethod(dependency)).append(\" of \").append(depModId).append(\".\");\n+\t\t\t\t} else if (errorType.contains(\"conf\")) {\n+\t\t\t\t\t// CONFLICTS WITH\n+\t\t\t\t\terrors.append(\"but the conflicting version is present: \").append(depCandidateVer).append(\"!\");\n+\t\t\t\t\terrors.append(\"\\n     While this won't prevent you from starting the game, the developer(s) of \").append(candidate.getInfo().getId());\n+\t\t\t\t\terrors.append(\"\\n     have found that version \").append(depCandidateVer).append(\" of \").append(depModId);\n+\t\t\t\t\terrors.append(\"\\n     conflicts with their mod. It is heavily recommended to remove one of the mods.\");\n+\t\t\t\t} else {\n+\t\t\t\t\terrors.append(\"but the breaking version is present: \").append(depCandidate.getInfo().getVersion()).append(\"!\");\n+\t\t\t\t\terrors.append(\"\\n     The developer(s) of \").append(candidate.getInfo().getId());\n+\t\t\t\t\terrors.append(\"\\n     have found that version \").append(depCandidateVer).append(\" of \").append(depModId);\n+\t\t\t\t\terrors.append(\"\\n     critically conflicts with their mod. You must remove one of the mods.\");\n+\t\t\t\t}\n \t\t\t}\n \n-\t\t\terrors.append(\"!\");\n+\t\t\t//errors.append(\"!\");\n \t\t}\n \t}\n \n+\t// lord forgive me for what I must do\n+\tprivate static String horribleModDependencyToStringMethod(ModDependency dependency) {\n+\t\tString depStr = dependency.toString();\n+\t\tint verStart = depStr.indexOf('[');\n+\t\tif (verStart < 0)\n+\t\t\treturn \"unknown version\";\n+\t\tint verEnd = depStr.indexOf(']');\n+\t\tif (verEnd < verStart)\n+\t\t\treturn \"unknown version\";\n+\t\tString verStr = depStr.substring(verStart + 1, verEnd);\n+\t\tif (\"*\".equals(verStr))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg2MTMwNw=="}, "originalCommit": {"oid": "1a66dcb3aa54880846a2e0bc306dc9b74db4623f"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTE2NjI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/api/metadata/ModDependency.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODozNjoxMFrOGxgVtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDowMTozMlrOGx3KwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2MzI1NA==", "bodyText": "I somewhat feel like exposing this is in api may not be a great idea for future translation support if someone writes that into loader.\nThis makes supporting translations in loader very hard as it does not expose the language aspect of these friendly version strings.\nMaybe until we decide on a translation system, this should be on a sort of AbstractModDependency", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r454563254", "createdAt": "2020-07-14T18:36:10Z", "author": {"login": "i509VCB"}, "path": "src/main/java/net/fabricmc/loader/api/metadata/ModDependency.java", "diffHunk": "@@ -33,4 +33,11 @@\n \t * @param version the version to check\n \t */\n \tboolean matches(Version version);\n+\n+\t/**\n+\t * Converts this dependency's version range to a user-friendly text representation.\n+\t *\n+\t * @return a user-friendly representation of this dependency's version range\n+\t */\n+\tString getFriendlyVersionString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81fed5b4d1e8e2a9635ed275d28acd10bd75a2a6"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3ODc2MA==", "bodyText": "I could possibly return a Pair<VersionComparisonOperationEnum, String> or something like that here. Would also help with future features...", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r454778760", "createdAt": "2020-07-15T04:09:00Z", "author": {"login": "Leo40Git"}, "path": "src/main/java/net/fabricmc/loader/api/metadata/ModDependency.java", "diffHunk": "@@ -33,4 +33,11 @@\n \t * @param version the version to check\n \t */\n \tboolean matches(Version version);\n+\n+\t/**\n+\t * Converts this dependency's version range to a user-friendly text representation.\n+\t *\n+\t * @return a user-friendly representation of this dependency's version range\n+\t */\n+\tString getFriendlyVersionString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2MzI1NA=="}, "originalCommit": {"oid": "81fed5b4d1e8e2a9635ed275d28acd10bd75a2a6"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc4MTIzNQ==", "bodyText": "Yeah maybe a sort of VersionComparisonType.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r454781235", "createdAt": "2020-07-15T04:19:19Z", "author": {"login": "i509VCB"}, "path": "src/main/java/net/fabricmc/loader/api/metadata/ModDependency.java", "diffHunk": "@@ -33,4 +33,11 @@\n \t * @param version the version to check\n \t */\n \tboolean matches(Version version);\n+\n+\t/**\n+\t * Converts this dependency's version range to a user-friendly text representation.\n+\t *\n+\t * @return a user-friendly representation of this dependency's version range\n+\t */\n+\tString getFriendlyVersionString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2MzI1NA=="}, "originalCommit": {"oid": "81fed5b4d1e8e2a9635ed275d28acd10bd75a2a6"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkzNzI4MA==", "bodyText": "AbstractModDependency and VersionRange are now things, please check 252d8f2", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r454937280", "createdAt": "2020-07-15T10:01:32Z", "author": {"login": "Leo40Git"}, "path": "src/main/java/net/fabricmc/loader/api/metadata/ModDependency.java", "diffHunk": "@@ -33,4 +33,11 @@\n \t * @param version the version to check\n \t */\n \tboolean matches(Version version);\n+\n+\t/**\n+\t * Converts this dependency's version range to a user-friendly text representation.\n+\t *\n+\t * @return a user-friendly representation of this dependency's version range\n+\t */\n+\tString getFriendlyVersionString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2MzI1NA=="}, "originalCommit": {"oid": "81fed5b4d1e8e2a9635ed275d28acd10bd75a2a6"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTE3NTA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/metadata/ModMetadataV1.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODozODo0NVrOGxgbNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODozODo0NVrOGxgbNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2NDY2MA==", "bodyText": "This implementation could be dragged to an AbstractModDependency so we don't have two copies.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r454564660", "createdAt": "2020-07-14T18:38:45Z", "author": {"login": "i509VCB"}, "path": "src/main/java/net/fabricmc/loader/metadata/ModMetadataV1.java", "diffHunk": "@@ -300,6 +300,44 @@ public boolean matches(Version version) {\n \t\t\t\t\t\t\treturn false;\n \t\t\t\t\t\t}\n \n+\t\t\t\t\t\t@Override\n+\t\t\t\t\t\tpublic String getFriendlyVersionString() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81fed5b4d1e8e2a9635ed275d28acd10bd75a2a6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjA1MjM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/gui/FabricStatusTree.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzoyNTowMFrOGxoxgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzoyNTowMFrOGxoxgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwMTQ0Mg==", "bodyText": "This shouldn't throw an exception, instead you could log an error and/or add an additional \"error\" node with the problem. (Or you could just ignore the tab, and not append it).", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r454701442", "createdAt": "2020-07-14T23:25:00Z", "author": {"login": "AlexIIL"}, "path": "src/main/java/net/fabricmc/loader/gui/FabricStatusTree.java", "diffHunk": "@@ -204,9 +204,32 @@ public void setInfo() {\n \t\t}\n \n \t\tpublic FabricStatusNode addChild(String string) {\n-\t\t\tFabricStatusNode child = new FabricStatusNode(this, string);\n-\t\t\tchildren.add(child);\n-\t\t\treturn child;\n+\t\t\tif (string.startsWith(\"\\t\")) {\n+\t\t\t\tif (children.size() == 0)\n+\t\t\t\t\tthrow new RuntimeException(\"Tried to add indented node without having a root node\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81fed5b4d1e8e2a9635ed275d28acd10bd75a2a6"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjA1Nzg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/gui/FabricStatusTree.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzoyNzo1MlrOGxo0xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNDowOToyNVrOGxtgBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwMjI3Nw==", "bodyText": "This should probably only remove the dash if the string starts with a dash rather than just finding the first one to remove.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r454702277", "createdAt": "2020-07-14T23:27:52Z", "author": {"login": "AlexIIL"}, "path": "src/main/java/net/fabricmc/loader/gui/FabricStatusTree.java", "diffHunk": "@@ -204,9 +204,32 @@ public void setInfo() {\n \t\t}\n \n \t\tpublic FabricStatusNode addChild(String string) {\n-\t\t\tFabricStatusNode child = new FabricStatusNode(this, string);\n-\t\t\tchildren.add(child);\n-\t\t\treturn child;\n+\t\t\tif (string.startsWith(\"\\t\")) {\n+\t\t\t\tif (children.size() == 0)\n+\t\t\t\t\tthrow new RuntimeException(\"Tried to add indented node without having a root node\");\n+\t\t\t\tFabricStatusNode lastChild = children.get(children.size() - 1);\n+\t\t\t\tFabricStatusNode subChild = new FabricStatusNode(lastChild, emboldenForNode(string.substring(1)));\n+\t\t\t\tsubChild.warningLevel = FabricTreeWarningLevel.INFO;\n+\t\t\t\tlastChild.children.add(subChild);\n+\t\t\t\tlastChild.expandByDefault = true;\n+\t\t\t\treturn lastChild;\n+\t\t\t} else {\n+\t\t\t\tFabricStatusNode child = new FabricStatusNode(this, cleanForNode(string));\n+\t\t\t\tchildren.add(child);\n+\t\t\t\treturn child;\n+\t\t\t}\n+\t\t}\n+\n+\t\tprivate String cleanForNode(String string) {\n+\t\t\tint dashIndex = string.indexOf('-');\n+\t\t\tif (dashIndex > 0)\n+\t\t\t\tstring = string.substring(dashIndex + 1);\n+\t\t\tstring = string.trim();\n+\t\t\treturn string;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81fed5b4d1e8e2a9635ed275d28acd10bd75a2a6"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc3ODg4Ng==", "bodyText": "whoops", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r454778886", "createdAt": "2020-07-15T04:09:25Z", "author": {"login": "Leo40Git"}, "path": "src/main/java/net/fabricmc/loader/gui/FabricStatusTree.java", "diffHunk": "@@ -204,9 +204,32 @@ public void setInfo() {\n \t\t}\n \n \t\tpublic FabricStatusNode addChild(String string) {\n-\t\t\tFabricStatusNode child = new FabricStatusNode(this, string);\n-\t\t\tchildren.add(child);\n-\t\t\treturn child;\n+\t\t\tif (string.startsWith(\"\\t\")) {\n+\t\t\t\tif (children.size() == 0)\n+\t\t\t\t\tthrow new RuntimeException(\"Tried to add indented node without having a root node\");\n+\t\t\t\tFabricStatusNode lastChild = children.get(children.size() - 1);\n+\t\t\t\tFabricStatusNode subChild = new FabricStatusNode(lastChild, emboldenForNode(string.substring(1)));\n+\t\t\t\tsubChild.warningLevel = FabricTreeWarningLevel.INFO;\n+\t\t\t\tlastChild.children.add(subChild);\n+\t\t\t\tlastChild.expandByDefault = true;\n+\t\t\t\treturn lastChild;\n+\t\t\t} else {\n+\t\t\t\tFabricStatusNode child = new FabricStatusNode(this, cleanForNode(string));\n+\t\t\t\tchildren.add(child);\n+\t\t\t\treturn child;\n+\t\t\t}\n+\t\t}\n+\n+\t\tprivate String cleanForNode(String string) {\n+\t\t\tint dashIndex = string.indexOf('-');\n+\t\t\tif (dashIndex > 0)\n+\t\t\t\tstring = string.substring(dashIndex + 1);\n+\t\t\tstring = string.trim();\n+\t\t\treturn string;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwMjI3Nw=="}, "originalCommit": {"oid": "81fed5b4d1e8e2a9635ed275d28acd10bd75a2a6"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODg5NjA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMzo1Mzo1NFrOHAhdYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMzo1Mzo1NFrOHAhdYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMxMDI0Mw==", "bodyText": "Run ./gradlew licenseFormat", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r470310243", "createdAt": "2020-08-13T23:53:54Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package net.fabricmc.loader.api;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2962e602ae73bb32b4c16b42d27d4fa15d674f9d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODkwMzYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMzo1Nzo0NVrOHAhhcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNjoyNzoyOFrOHApBHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMxMTI4Mg==", "bodyText": "Prefer moving this to a method within Type, like String represent(String version).\nPutting things here will make people forget to update if we add new entries to Type, and this forgotten problem is hard to spot as you have a default branch here.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r470311282", "createdAt": "2020-08-13T23:57:45Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package net.fabricmc.loader.api;\n+\n+import java.util.Objects;\n+\n+public class VersionRange {\n+\tpublic enum Type {\n+\t\tINVALID,\n+\t\tANY,\n+\t\tEQUALS,\n+\t\tGREATER_THAN,\n+\t\tLESSER_THAN,\n+\t\tGREATER_THAN_OR_EQUAL,\n+\t\tLESSER_THAN_OR_EQUAL,\n+\t\tSAME_MAJOR,\n+\t\tSAME_MAJOR_AND_MINOR\n+\t}\n+\n+\tprivate final Type type;\n+\tprivate final String version;\n+\tprivate String stringRepr;\n+\n+\tpublic VersionRange(Type type, String version) {\n+\t\tthis.type = type;\n+\t\tthis.version = version;\n+\t}\n+\n+\tpublic Type getType() {\n+\t\treturn type;\n+\t}\n+\n+\tpublic String getVersion() {\n+\t\treturn version;\n+\t}\n+\n+\tprivate String makeStringRepr() {\n+\t\tswitch (type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2962e602ae73bb32b4c16b42d27d4fa15d674f9d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQzNDA3Nw==", "bodyText": "moved.\ni've also changed the default branch to actually say that something is wrong (\"unhandled version range type X\").", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r470434077", "createdAt": "2020-08-14T06:27:28Z", "author": {"login": "Leo40Git"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package net.fabricmc.loader.api;\n+\n+import java.util.Objects;\n+\n+public class VersionRange {\n+\tpublic enum Type {\n+\t\tINVALID,\n+\t\tANY,\n+\t\tEQUALS,\n+\t\tGREATER_THAN,\n+\t\tLESSER_THAN,\n+\t\tGREATER_THAN_OR_EQUAL,\n+\t\tLESSER_THAN_OR_EQUAL,\n+\t\tSAME_MAJOR,\n+\t\tSAME_MAJOR_AND_MINOR\n+\t}\n+\n+\tprivate final Type type;\n+\tprivate final String version;\n+\tprivate String stringRepr;\n+\n+\tpublic VersionRange(Type type, String version) {\n+\t\tthis.type = type;\n+\t\tthis.version = version;\n+\t}\n+\n+\tpublic Type getType() {\n+\t\treturn type;\n+\t}\n+\n+\tpublic String getVersion() {\n+\t\treturn version;\n+\t}\n+\n+\tprivate String makeStringRepr() {\n+\t\tswitch (type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMxMTI4Mg=="}, "originalCommit": {"oid": "2962e602ae73bb32b4c16b42d27d4fa15d674f9d"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODkwNzIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMzo1OTo0N1rOHAhjlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMzo1OTo0N1rOHAhjlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMxMTgzMQ==", "bodyText": "Please run this over fabric checkstyle. This clearly violates fabric checkstyle as fab checkstyle requires blank lines before and after if blocks with {}", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r470311831", "createdAt": "2020-08-13T23:59:47Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package net.fabricmc.loader.api;\n+\n+import java.util.Objects;\n+\n+public class VersionRange {\n+\tpublic enum Type {\n+\t\tINVALID,\n+\t\tANY,\n+\t\tEQUALS,\n+\t\tGREATER_THAN,\n+\t\tLESSER_THAN,\n+\t\tGREATER_THAN_OR_EQUAL,\n+\t\tLESSER_THAN_OR_EQUAL,\n+\t\tSAME_MAJOR,\n+\t\tSAME_MAJOR_AND_MINOR\n+\t}\n+\n+\tprivate final Type type;\n+\tprivate final String version;\n+\tprivate String stringRepr;\n+\n+\tpublic VersionRange(Type type, String version) {\n+\t\tthis.type = type;\n+\t\tthis.version = version;\n+\t}\n+\n+\tpublic Type getType() {\n+\t\treturn type;\n+\t}\n+\n+\tpublic String getVersion() {\n+\t\treturn version;\n+\t}\n+\n+\tprivate String makeStringRepr() {\n+\t\tswitch (type) {\n+\t\t\tdefault:\n+\t\t\tcase INVALID:\n+\t\t\t\treturn \"unknown version\";\n+\t\t\tcase ANY:\n+\t\t\t\treturn \"any version\";\n+\t\t\tcase EQUALS:\n+\t\t\t\treturn \"version \" + version;\n+\t\t\tcase GREATER_THAN:\n+\t\t\t\treturn \"any version after \" + version;\n+\t\t\tcase LESSER_THAN:\n+\t\t\t\treturn \"any version before \" + version;\n+\t\t\tcase GREATER_THAN_OR_EQUAL:\n+\t\t\t\treturn \"version \" + version + \" or later\";\n+\t\t\tcase LESSER_THAN_OR_EQUAL:\n+\t\t\t\treturn \"version \" + version + \" or earlier\";\n+\t\t\tcase SAME_MAJOR:\n+\t\t\tcase SAME_MAJOR_AND_MINOR:\n+\t\t\t\tString[] parts = version.split(\"\\\\.\");\n+\t\t\t\tint start = 1;\n+\t\t\t\tif (type == Type.SAME_MAJOR_AND_MINOR)\n+\t\t\t\t\tstart = 2;\n+\t\t\t\tfor (int i = start; i < parts.length; i++)\n+\t\t\t\t\tparts[i] = \"x\";\n+\t\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tif (stringRepr == null)\n+\t\t\tstringRepr = makeStringRepr();\n+\t\treturn stringRepr;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object o) {\n+\t\tif (this == o) {\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (o == null || getClass() != o.getClass()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2962e602ae73bb32b4c16b42d27d4fa15d674f9d"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODkxMDgxOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/api/metadata/AbstractModDependency.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDowMToyN1rOHAhlew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNjoyODoxOVrOHApCJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMxMjMxNQ==", "bodyText": "Also maintainability concern here. Should add to VersionRange so we have an easier time maintaining this. Leaving this here will most likely make us forget this code and make updates to version range code out of sync.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r470312315", "createdAt": "2020-08-14T00:01:27Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/api/metadata/AbstractModDependency.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package net.fabricmc.loader.api.metadata;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import net.fabricmc.loader.api.VersionRange;\n+\n+public abstract class AbstractModDependency implements ModDependency {\n+\tprotected final String modId;\n+\tprivate Collection<VersionRange> ranges;\n+\n+\tprotected AbstractModDependency(String modId) {\n+\t\tthis.modId = modId;\n+\t}\n+\n+\t@Override\n+\tpublic String getModId() {\n+\t\treturn modId;\n+\t}\n+\n+\tprotected abstract String[] getVersionMatchers();\n+\n+\t@Override\n+\tpublic Collection<VersionRange> getVersionRanges() {\n+\t\tif (ranges == null) {\n+\t\t\tranges = Stream.of(getVersionMatchers()).map(matcher -> {\n+\t\t\t\tchar firstChar = matcher.charAt(0);\n+\t\t\t\tchar secondChar = 0;\n+\t\t\t\tif (matcher.length() > 1)\n+\t\t\t\t\tsecondChar = matcher.charAt(1);\n+\t\t\t\tswitch (firstChar) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2962e602ae73bb32b4c16b42d27d4fa15d674f9d"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQzNDM0MA==", "bodyText": "moved to static Collection<VersionRange> fromVersionMatchers(String... matchers) in VersionRange", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r470434340", "createdAt": "2020-08-14T06:28:19Z", "author": {"login": "Leo40Git"}, "path": "src/main/java/net/fabricmc/loader/api/metadata/AbstractModDependency.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package net.fabricmc.loader.api.metadata;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import net.fabricmc.loader.api.VersionRange;\n+\n+public abstract class AbstractModDependency implements ModDependency {\n+\tprotected final String modId;\n+\tprivate Collection<VersionRange> ranges;\n+\n+\tprotected AbstractModDependency(String modId) {\n+\t\tthis.modId = modId;\n+\t}\n+\n+\t@Override\n+\tpublic String getModId() {\n+\t\treturn modId;\n+\t}\n+\n+\tprotected abstract String[] getVersionMatchers();\n+\n+\t@Override\n+\tpublic Collection<VersionRange> getVersionRanges() {\n+\t\tif (ranges == null) {\n+\t\t\tranges = Stream.of(getVersionMatchers()).map(matcher -> {\n+\t\t\t\tchar firstChar = matcher.charAt(0);\n+\t\t\t\tchar secondChar = 0;\n+\t\t\t\tif (matcher.length() > 1)\n+\t\t\t\t\tsecondChar = matcher.charAt(1);\n+\t\t\t\tswitch (firstChar) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMxMjMxNQ=="}, "originalCommit": {"oid": "2962e602ae73bb32b4c16b42d27d4fa15d674f9d"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODkxMTgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/api/metadata/ModDependency.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDowMjowMFrOHAhmBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDowMjowMFrOHAhmBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMxMjQ1Mw==", "bodyText": "maybe getVersionRequirements, nitpick", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r470312453", "createdAt": "2020-08-14T00:02:00Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/api/metadata/ModDependency.java", "diffHunk": "@@ -33,4 +36,11 @@\n \t * @param version the version to check\n \t */\n \tboolean matches(Version version);\n+\n+\t/**\n+\t * Returns a representation of the dependency's version requirements.\n+\t *\n+\t * @return representation of the dependency's version requirements\n+\t */\n+\tCollection<VersionRange> getVersionRanges();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2962e602ae73bb32b4c16b42d27d4fa15d674f9d"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTUxMjA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNTo1NTozM1rOHA59Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzozMzoyOVrOHA8-WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcxMTYxNA==", "bodyText": "I'd make this throw an exception, or move the branches into the enum values themselves.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r470711614", "createdAt": "2020-08-14T15:55:33Z", "author": {"login": "Juuxel"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class VersionRange {\n+\tpublic enum Type {\n+\t\tINVALID,\n+\t\tANY,\n+\t\tEQUALS,\n+\t\tGREATER_THAN,\n+\t\tLESSER_THAN,\n+\t\tGREATER_THAN_OR_EQUAL,\n+\t\tLESSER_THAN_OR_EQUAL,\n+\t\tSAME_MAJOR,\n+\t\tSAME_MAJOR_AND_MINOR;\n+\n+\t\tpublic String represent(String version) {\n+\t\t\tswitch (this) {\n+\t\t\tcase INVALID:\n+\t\t\t\treturn \"unknown version\";\n+\t\t\tcase ANY:\n+\t\t\t\treturn \"any version\";\n+\t\t\tcase EQUALS:\n+\t\t\t\treturn \"version \" + version;\n+\t\t\tcase GREATER_THAN:\n+\t\t\t\treturn \"any version after \" + version;\n+\t\t\tcase LESSER_THAN:\n+\t\t\t\treturn \"any version before \" + version;\n+\t\t\tcase GREATER_THAN_OR_EQUAL:\n+\t\t\t\treturn \"version \" + version + \" or later\";\n+\t\t\tcase LESSER_THAN_OR_EQUAL:\n+\t\t\t\treturn \"version \" + version + \" or earlier\";\n+\t\t\tcase SAME_MAJOR:\n+\t\t\tcase SAME_MAJOR_AND_MINOR:\n+\t\t\t\tString[] parts = version.split(\"\\\\.\");\n+\t\t\t\tint start = 1;\n+\n+\t\t\t\tif (this == Type.SAME_MAJOR_AND_MINOR) {\n+\t\t\t\t\tstart = 2;\n+\t\t\t\t}\n+\n+\t\t\t\tfor (int i = start; i < parts.length; i++) {\n+\t\t\t\t\tparts[i] = \"x\";\n+\t\t\t\t}\n+\n+\t\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t\tdefault:\n+\t\t\t\treturn \"unhandled version range type \" + this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1279f04555e953d289cf0168fdc42ac82707013"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc2MTA0OQ==", "bodyText": "542fa57: it's a UnaryOperator<String> now i guess", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r470761049", "createdAt": "2020-08-14T17:33:29Z", "author": {"login": "Leo40Git"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class VersionRange {\n+\tpublic enum Type {\n+\t\tINVALID,\n+\t\tANY,\n+\t\tEQUALS,\n+\t\tGREATER_THAN,\n+\t\tLESSER_THAN,\n+\t\tGREATER_THAN_OR_EQUAL,\n+\t\tLESSER_THAN_OR_EQUAL,\n+\t\tSAME_MAJOR,\n+\t\tSAME_MAJOR_AND_MINOR;\n+\n+\t\tpublic String represent(String version) {\n+\t\t\tswitch (this) {\n+\t\t\tcase INVALID:\n+\t\t\t\treturn \"unknown version\";\n+\t\t\tcase ANY:\n+\t\t\t\treturn \"any version\";\n+\t\t\tcase EQUALS:\n+\t\t\t\treturn \"version \" + version;\n+\t\t\tcase GREATER_THAN:\n+\t\t\t\treturn \"any version after \" + version;\n+\t\t\tcase LESSER_THAN:\n+\t\t\t\treturn \"any version before \" + version;\n+\t\t\tcase GREATER_THAN_OR_EQUAL:\n+\t\t\t\treturn \"version \" + version + \" or later\";\n+\t\t\tcase LESSER_THAN_OR_EQUAL:\n+\t\t\t\treturn \"version \" + version + \" or earlier\";\n+\t\t\tcase SAME_MAJOR:\n+\t\t\tcase SAME_MAJOR_AND_MINOR:\n+\t\t\t\tString[] parts = version.split(\"\\\\.\");\n+\t\t\t\tint start = 1;\n+\n+\t\t\t\tif (this == Type.SAME_MAJOR_AND_MINOR) {\n+\t\t\t\t\tstart = 2;\n+\t\t\t\t}\n+\n+\t\t\t\tfor (int i = start; i < parts.length; i++) {\n+\t\t\t\t\tparts[i] = \"x\";\n+\t\t\t\t}\n+\n+\t\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t\tdefault:\n+\t\t\t\treturn \"unhandled version range type \" + this;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcxMTYxNA=="}, "originalCommit": {"oid": "c1279f04555e953d289cf0168fdc42ac82707013"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjUxNTE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/api/metadata/AbstractModDependency.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDo1OTowMVrOHaJ2Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDo1OTowMVrOHaJ2Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE4NjMyMw==", "bodyText": "I don't think this class needs to be part of the API. From what I can tell this can be a package private class in metadata.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497186323", "createdAt": "2020-09-30T00:59:01Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/api/metadata/AbstractModDependency.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api.metadata;\n+\n+import java.util.Collection;\n+\n+import net.fabricmc.loader.api.VersionRange;\n+\n+public abstract class AbstractModDependency implements ModDependency {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjUxODQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMTowMDo1N1rOHaJ35w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjozNjo1OVrOHabZuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE4Njc5MQ==", "bodyText": "This should return a Set in order to have a useful contract for equals, Collection's is too weak for the desired semantics.\n\"VersionMatchers\" is a somewhat odd term, it'd call it parse.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497186791", "createdAt": "2020-09-30T01:00:57Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+public class VersionRange {\n+\tpublic enum Type {\n+\t\tINVALID(version -> \"unknown version\"),\n+\t\tANY(version -> \"any version\"),\n+\t\tEQUALS(version -> \"version \" + version),\n+\t\tGREATER_THAN(version -> \"any version after \" + version),\n+\t\tLESSER_THAN(version -> \"any version before \" + version),\n+\t\tGREATER_THAN_OR_EQUAL(version -> \"version \" + version + \" or later\"),\n+\t\tLESSER_THAN_OR_EQUAL(version -> \"version \" + version + \" or earlier\"),\n+\t\tSAME_MAJOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 1; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t}),\n+\t\tSAME_MAJOR_AND_MINOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 2; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t});\n+\n+\t\tprivate final UnaryOperator<String> reprOperator;\n+\n+\t\tType(UnaryOperator<String> reprOperator) {\n+\t\t\tthis.reprOperator = reprOperator;\n+\t\t}\n+\n+\t\tpublic String represent(String version) {\n+\t\t\treturn reprOperator.apply(version);\n+\t\t}\n+\t}\n+\n+\tprivate final Type type;\n+\tprivate final String version;\n+\tprivate String stringRepr;\n+\n+\tpublic VersionRange(Type type, String version) {\n+\t\tthis.type = type;\n+\t\tthis.version = version;\n+\t}\n+\n+\tpublic Type getType() {\n+\t\treturn type;\n+\t}\n+\n+\tpublic String getVersion() {\n+\t\treturn version;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tif (stringRepr == null) {\n+\t\t\tstringRepr = type.represent(version);\n+\t\t}\n+\n+\t\treturn stringRepr;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object o) {\n+\t\tif (this == o) {\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tif (o == null || getClass() != o.getClass()) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tVersionRange that = (VersionRange) o;\n+\t\treturn type == that.type && version.equals(that.version);\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\treturn Objects.hash(type, version);\n+\t}\n+\n+\tpublic static Collection<VersionRange> fromVersionMatchers(String... matchers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ0Mzg1MA==", "bodyText": "I'm like 90% sure it's already a Set internally so that should be easy\n\"VersionMatchers\" are my unofficial name for the semantic version range strings. I guess parse(String... rangeStrings) makes more sense, though.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497443850", "createdAt": "2020-09-30T11:43:36Z", "author": {"login": "Leo40Git"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+public class VersionRange {\n+\tpublic enum Type {\n+\t\tINVALID(version -> \"unknown version\"),\n+\t\tANY(version -> \"any version\"),\n+\t\tEQUALS(version -> \"version \" + version),\n+\t\tGREATER_THAN(version -> \"any version after \" + version),\n+\t\tLESSER_THAN(version -> \"any version before \" + version),\n+\t\tGREATER_THAN_OR_EQUAL(version -> \"version \" + version + \" or later\"),\n+\t\tLESSER_THAN_OR_EQUAL(version -> \"version \" + version + \" or earlier\"),\n+\t\tSAME_MAJOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 1; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t}),\n+\t\tSAME_MAJOR_AND_MINOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 2; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t});\n+\n+\t\tprivate final UnaryOperator<String> reprOperator;\n+\n+\t\tType(UnaryOperator<String> reprOperator) {\n+\t\t\tthis.reprOperator = reprOperator;\n+\t\t}\n+\n+\t\tpublic String represent(String version) {\n+\t\t\treturn reprOperator.apply(version);\n+\t\t}\n+\t}\n+\n+\tprivate final Type type;\n+\tprivate final String version;\n+\tprivate String stringRepr;\n+\n+\tpublic VersionRange(Type type, String version) {\n+\t\tthis.type = type;\n+\t\tthis.version = version;\n+\t}\n+\n+\tpublic Type getType() {\n+\t\treturn type;\n+\t}\n+\n+\tpublic String getVersion() {\n+\t\treturn version;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tif (stringRepr == null) {\n+\t\t\tstringRepr = type.represent(version);\n+\t\t}\n+\n+\t\treturn stringRepr;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object o) {\n+\t\tif (this == o) {\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tif (o == null || getClass() != o.getClass()) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tVersionRange that = (VersionRange) o;\n+\t\treturn type == that.type && version.equals(that.version);\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\treturn Objects.hash(type, version);\n+\t}\n+\n+\tpublic static Collection<VersionRange> fromVersionMatchers(String... matchers) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE4Njc5MQ=="}, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ3Mzk3OQ==", "bodyText": "This method is now public static Set<VersionPredicate> parse(String... matchers).", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497473979", "createdAt": "2020-09-30T12:36:59Z", "author": {"login": "Leo40Git"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+public class VersionRange {\n+\tpublic enum Type {\n+\t\tINVALID(version -> \"unknown version\"),\n+\t\tANY(version -> \"any version\"),\n+\t\tEQUALS(version -> \"version \" + version),\n+\t\tGREATER_THAN(version -> \"any version after \" + version),\n+\t\tLESSER_THAN(version -> \"any version before \" + version),\n+\t\tGREATER_THAN_OR_EQUAL(version -> \"version \" + version + \" or later\"),\n+\t\tLESSER_THAN_OR_EQUAL(version -> \"version \" + version + \" or earlier\"),\n+\t\tSAME_MAJOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 1; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t}),\n+\t\tSAME_MAJOR_AND_MINOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 2; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t});\n+\n+\t\tprivate final UnaryOperator<String> reprOperator;\n+\n+\t\tType(UnaryOperator<String> reprOperator) {\n+\t\t\tthis.reprOperator = reprOperator;\n+\t\t}\n+\n+\t\tpublic String represent(String version) {\n+\t\t\treturn reprOperator.apply(version);\n+\t\t}\n+\t}\n+\n+\tprivate final Type type;\n+\tprivate final String version;\n+\tprivate String stringRepr;\n+\n+\tpublic VersionRange(Type type, String version) {\n+\t\tthis.type = type;\n+\t\tthis.version = version;\n+\t}\n+\n+\tpublic Type getType() {\n+\t\treturn type;\n+\t}\n+\n+\tpublic String getVersion() {\n+\t\treturn version;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tif (stringRepr == null) {\n+\t\t\tstringRepr = type.represent(version);\n+\t\t}\n+\n+\t\treturn stringRepr;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object o) {\n+\t\tif (this == o) {\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tif (o == null || getClass() != o.getClass()) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tVersionRange that = (VersionRange) o;\n+\t\treturn type == that.type && version.equals(that.version);\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\treturn Objects.hash(type, version);\n+\t}\n+\n+\tpublic static Collection<VersionRange> fromVersionMatchers(String... matchers) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE4Njc5MQ=="}, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjUxOTE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMTowMToyOFrOHaJ4Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjozNzoyMlrOHaba1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE4Njg5NQ==", "bodyText": "I don't think this cache is worth it.\nReturning a normalized formal version predicate would fit this better (same format as parse input, e.g. effectively \">=\".concat(version))", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497186895", "createdAt": "2020-09-30T01:01:28Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+public class VersionRange {\n+\tpublic enum Type {\n+\t\tINVALID(version -> \"unknown version\"),\n+\t\tANY(version -> \"any version\"),\n+\t\tEQUALS(version -> \"version \" + version),\n+\t\tGREATER_THAN(version -> \"any version after \" + version),\n+\t\tLESSER_THAN(version -> \"any version before \" + version),\n+\t\tGREATER_THAN_OR_EQUAL(version -> \"version \" + version + \" or later\"),\n+\t\tLESSER_THAN_OR_EQUAL(version -> \"version \" + version + \" or earlier\"),\n+\t\tSAME_MAJOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 1; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t}),\n+\t\tSAME_MAJOR_AND_MINOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 2; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t});\n+\n+\t\tprivate final UnaryOperator<String> reprOperator;\n+\n+\t\tType(UnaryOperator<String> reprOperator) {\n+\t\t\tthis.reprOperator = reprOperator;\n+\t\t}\n+\n+\t\tpublic String represent(String version) {\n+\t\t\treturn reprOperator.apply(version);\n+\t\t}\n+\t}\n+\n+\tprivate final Type type;\n+\tprivate final String version;\n+\tprivate String stringRepr;\n+\n+\tpublic VersionRange(Type type, String version) {\n+\t\tthis.type = type;\n+\t\tthis.version = version;\n+\t}\n+\n+\tpublic Type getType() {\n+\t\treturn type;\n+\t}\n+\n+\tpublic String getVersion() {\n+\t\treturn version;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tif (stringRepr == null) {\n+\t\t\tstringRepr = type.represent(version);\n+\t\t}\n+\n+\t\treturn stringRepr;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ3NDI2MA==", "bodyText": "Cache has been snatched", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497474260", "createdAt": "2020-09-30T12:37:22Z", "author": {"login": "Leo40Git"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+public class VersionRange {\n+\tpublic enum Type {\n+\t\tINVALID(version -> \"unknown version\"),\n+\t\tANY(version -> \"any version\"),\n+\t\tEQUALS(version -> \"version \" + version),\n+\t\tGREATER_THAN(version -> \"any version after \" + version),\n+\t\tLESSER_THAN(version -> \"any version before \" + version),\n+\t\tGREATER_THAN_OR_EQUAL(version -> \"version \" + version + \" or later\"),\n+\t\tLESSER_THAN_OR_EQUAL(version -> \"version \" + version + \" or earlier\"),\n+\t\tSAME_MAJOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 1; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t}),\n+\t\tSAME_MAJOR_AND_MINOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 2; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t});\n+\n+\t\tprivate final UnaryOperator<String> reprOperator;\n+\n+\t\tType(UnaryOperator<String> reprOperator) {\n+\t\t\tthis.reprOperator = reprOperator;\n+\t\t}\n+\n+\t\tpublic String represent(String version) {\n+\t\t\treturn reprOperator.apply(version);\n+\t\t}\n+\t}\n+\n+\tprivate final Type type;\n+\tprivate final String version;\n+\tprivate String stringRepr;\n+\n+\tpublic VersionRange(Type type, String version) {\n+\t\tthis.type = type;\n+\t\tthis.version = version;\n+\t}\n+\n+\tpublic Type getType() {\n+\t\treturn type;\n+\t}\n+\n+\tpublic String getVersion() {\n+\t\treturn version;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tif (stringRepr == null) {\n+\t\t\tstringRepr = type.represent(version);\n+\t\t}\n+\n+\t\treturn stringRepr;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE4Njg5NQ=="}, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjUyMjI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMTowMzoyNFrOHaJ6FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjozODoyMVrOHabdVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE4NzM0OQ==", "bodyText": "I don't think invalid should exist, the existing parser seems to treat weird inputs as an equality requirement.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497187349", "createdAt": "2020-09-30T01:03:24Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+public class VersionRange {\n+\tpublic enum Type {\n+\t\tINVALID(version -> \"unknown version\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ0NTAxMw==", "bodyText": "I'm pretty sure there's currently no way to get an actual INVALID range without messing with the program itself, since I treat anything that doesn't have a semantic version prefix as string version equality.\nI do think it's a good idea to keep an \"oh god oh fuck\" value that isn't a potentially-crashing null, though.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497445013", "createdAt": "2020-09-30T11:45:43Z", "author": {"login": "Leo40Git"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+public class VersionRange {\n+\tpublic enum Type {\n+\t\tINVALID(version -> \"unknown version\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE4NzM0OQ=="}, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ3NDkwMQ==", "bodyText": "So INVALID was only used for \"*moretext\" type situations. Those now just generate a standard ANY predicate, if they're supposed to be equality shout at me.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497474901", "createdAt": "2020-09-30T12:38:21Z", "author": {"login": "Leo40Git"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+public class VersionRange {\n+\tpublic enum Type {\n+\t\tINVALID(version -> \"unknown version\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE4NzM0OQ=="}, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjUyMzUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMTowNDoxMFrOHaJ60Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMTowNDoxMFrOHaJ60Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE4NzUzNw==", "bodyText": "For-each loop is cleaner IMO, and definitely easier to debug.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497187537", "createdAt": "2020-09-30T01:04:10Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+public class VersionRange {\n+\tpublic enum Type {\n+\t\tINVALID(version -> \"unknown version\"),\n+\t\tANY(version -> \"any version\"),\n+\t\tEQUALS(version -> \"version \" + version),\n+\t\tGREATER_THAN(version -> \"any version after \" + version),\n+\t\tLESSER_THAN(version -> \"any version before \" + version),\n+\t\tGREATER_THAN_OR_EQUAL(version -> \"version \" + version + \" or later\"),\n+\t\tLESSER_THAN_OR_EQUAL(version -> \"version \" + version + \" or earlier\"),\n+\t\tSAME_MAJOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 1; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t}),\n+\t\tSAME_MAJOR_AND_MINOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 2; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t});\n+\n+\t\tprivate final UnaryOperator<String> reprOperator;\n+\n+\t\tType(UnaryOperator<String> reprOperator) {\n+\t\t\tthis.reprOperator = reprOperator;\n+\t\t}\n+\n+\t\tpublic String represent(String version) {\n+\t\t\treturn reprOperator.apply(version);\n+\t\t}\n+\t}\n+\n+\tprivate final Type type;\n+\tprivate final String version;\n+\tprivate String stringRepr;\n+\n+\tpublic VersionRange(Type type, String version) {\n+\t\tthis.type = type;\n+\t\tthis.version = version;\n+\t}\n+\n+\tpublic Type getType() {\n+\t\treturn type;\n+\t}\n+\n+\tpublic String getVersion() {\n+\t\treturn version;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tif (stringRepr == null) {\n+\t\t\tstringRepr = type.represent(version);\n+\t\t}\n+\n+\t\treturn stringRepr;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object o) {\n+\t\tif (this == o) {\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tif (o == null || getClass() != o.getClass()) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tVersionRange that = (VersionRange) o;\n+\t\treturn type == that.type && version.equals(that.version);\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\treturn Objects.hash(type, version);\n+\t}\n+\n+\tpublic static Collection<VersionRange> fromVersionMatchers(String... matchers) {\n+\t\tCollection<VersionRange> ranges = Arrays.stream(matchers).map(matcher -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjUyNDY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMTowNDo1NFrOHaJ7fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMTowNDo1NFrOHaJ7fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE4NzcxMA==", "bodyText": "This could be handled in the above analysis inline.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497187710", "createdAt": "2020-09-30T01:04:54Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+public class VersionRange {\n+\tpublic enum Type {\n+\t\tINVALID(version -> \"unknown version\"),\n+\t\tANY(version -> \"any version\"),\n+\t\tEQUALS(version -> \"version \" + version),\n+\t\tGREATER_THAN(version -> \"any version after \" + version),\n+\t\tLESSER_THAN(version -> \"any version before \" + version),\n+\t\tGREATER_THAN_OR_EQUAL(version -> \"version \" + version + \" or later\"),\n+\t\tLESSER_THAN_OR_EQUAL(version -> \"version \" + version + \" or earlier\"),\n+\t\tSAME_MAJOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 1; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t}),\n+\t\tSAME_MAJOR_AND_MINOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 2; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t});\n+\n+\t\tprivate final UnaryOperator<String> reprOperator;\n+\n+\t\tType(UnaryOperator<String> reprOperator) {\n+\t\t\tthis.reprOperator = reprOperator;\n+\t\t}\n+\n+\t\tpublic String represent(String version) {\n+\t\t\treturn reprOperator.apply(version);\n+\t\t}\n+\t}\n+\n+\tprivate final Type type;\n+\tprivate final String version;\n+\tprivate String stringRepr;\n+\n+\tpublic VersionRange(Type type, String version) {\n+\t\tthis.type = type;\n+\t\tthis.version = version;\n+\t}\n+\n+\tpublic Type getType() {\n+\t\treturn type;\n+\t}\n+\n+\tpublic String getVersion() {\n+\t\treturn version;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tif (stringRepr == null) {\n+\t\t\tstringRepr = type.represent(version);\n+\t\t}\n+\n+\t\treturn stringRepr;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object o) {\n+\t\tif (this == o) {\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tif (o == null || getClass() != o.getClass()) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tVersionRange that = (VersionRange) o;\n+\t\treturn type == that.type && version.equals(that.version);\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\treturn Objects.hash(type, version);\n+\t}\n+\n+\tpublic static Collection<VersionRange> fromVersionMatchers(String... matchers) {\n+\t\tCollection<VersionRange> ranges = Arrays.stream(matchers).map(matcher -> {\n+\t\t\tchar firstChar = matcher.charAt(0);\n+\t\t\tchar secondChar = 0;\n+\n+\t\t\tif (matcher.length() > 1) {\n+\t\t\t\tsecondChar = matcher.charAt(1);\n+\t\t\t}\n+\n+\t\t\tswitch (firstChar) {\n+\t\t\tcase '*':\n+\t\t\t\tif (matcher.length() == 1) {\n+\t\t\t\t\treturn new VersionRange(Type.ANY, \"\");\n+\t\t\t\t} else {\n+\t\t\t\t\treturn new VersionRange(Type.INVALID, \"\");\n+\t\t\t\t}\n+\t\t\tcase '>':\n+\t\t\t\tif (secondChar == '=') {\n+\t\t\t\t\treturn new VersionRange(Type.GREATER_THAN_OR_EQUAL, matcher.substring(2));\n+\t\t\t\t} else {\n+\t\t\t\t\treturn new VersionRange(Type.GREATER_THAN, matcher.substring(1));\n+\t\t\t\t}\n+\t\t\tcase '<':\n+\t\t\t\tif (secondChar == '=') {\n+\t\t\t\t\treturn new VersionRange(Type.LESSER_THAN_OR_EQUAL, matcher.substring(2));\n+\t\t\t\t} else {\n+\t\t\t\t\treturn new VersionRange(Type.LESSER_THAN, matcher.substring(1));\n+\t\t\t\t}\n+\t\t\tcase '=':\n+\t\t\t\treturn new VersionRange(Type.EQUALS, matcher.substring(1));\n+\t\t\tcase '^':\n+\t\t\t\treturn new VersionRange(Type.SAME_MAJOR, matcher.substring(1));\n+\t\t\tcase '~':\n+\t\t\t\treturn new VersionRange(Type.SAME_MAJOR_AND_MINOR, matcher.substring(1));\n+\t\t\tdefault: // string version\n+\t\t\t\treturn new VersionRange(Type.EQUALS, matcher);\n+\t\t\t}\n+\t\t}).collect(Collectors.toSet());\n+\n+\t\t// simplify: if one ANY range exists, only use that\n+\t\tif (ranges.stream().anyMatch(range -> range.getType() == Type.ANY)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjUyNTkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/api/metadata/AbstractModDependency.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMTowNToyNVrOHaJ8IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMTowNToyNVrOHaJ8IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE4Nzg3Mg==", "bodyText": "This shouldn't be in api imo.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497187872", "createdAt": "2020-09-30T01:05:25Z", "author": {"login": "i509VCB"}, "path": "src/main/java/net/fabricmc/loader/api/metadata/AbstractModDependency.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api.metadata;\n+\n+import java.util.Collection;\n+\n+import net.fabricmc.loader.api.VersionRange;\n+\n+public abstract class AbstractModDependency implements ModDependency {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjUzMjQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMTowOTowOVrOHaJ_xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMDo1OTowNFrOHe2PFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE4ODgwNQ==", "bodyText": "A lot of the message assembly below could be done with PrintWriter and printf, which should look cleaner and lend itself to localization later on. This change can be done at another time though.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497188805", "createdAt": "2020-09-30T01:09:09Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -314,46 +315,82 @@ private static IVecInt toVecInt(IntStream stream) {\n \tprivate void addErrorToList(ModCandidate candidate, ModDependency dependency, Map<String, ModCandidate> result, StringBuilder errors, String errorType, boolean cond) {\n \t\tString depModId = dependency.getModId();\n \n-\t\tStringBuilder prefix = new StringBuilder(\"\\n - Mod \").append(candidate.getInfo().getId());\n-\t\tprefix.append(\" \").append(errorType).append(\" mod \").append(depModId);\n+\t\terrors.append(\"\\n - Mod \").append(getCandidateName(candidate)).append(\" \").append(errorType).append(\" \");\n \n \t\tList<String> errorList = new ArrayList<>();\n \n \t\tif (!isModIdValid(depModId, errorList)) {\n-\t\t\tif (errorList.size() == 1) {\n-\t\t\t\terrors.append(prefix).append(\" which has an invalid mod id because it \").append(errorList.get(0));\n-\t\t\t} else {\n-\t\t\t\terrors.append(prefix).append(\" which has an invalid mod because:\");\n+\t\t\terrors.append(depModId).append(\", which has an invalid mod ID because:\");\n \n-\t\t\t\tfor (String error : errorList) {\n-\t\t\t\t\terrors.append(\"\\n   - It \").append(error);\n-\t\t\t\t}\n+\t\t\tfor (String error : errorList) {\n+\t\t\t\terrors.append(\"\\n\\t - It \").append(error);\n \t\t\t}\n \n \t\t\treturn;\n \t\t}\n \n \t\tModCandidate depCandidate = result.get(depModId);\n-\t\tboolean isPresent = depCandidate == null ? false : dependency.matches(depCandidate.getInfo().getVersion());\n+\t\tboolean isPresent = depCandidate != null && dependency.matches(depCandidate.getInfo().getVersion());\n \n \t\tif (isPresent != cond) {\n-\t\t\terrors.append(\"\\n - Mod \").append(candidate.getInfo().getId()).append(\" \").append(errorType).append(\" mod \").append(dependency).append(\", \");\n-\n+\t\t\terrors.append(getDependencyVersionRequirements(dependency)).append(\" of mod \")\n+\t\t\t\t\t.append(depCandidate == null ? depModId : getCandidateName(depCandidate)).append(\", \");\n \t\t\tif (depCandidate == null) {\n-\t\t\t\terrors.append(\"which is missing\");\n+\t\t\t\tappendMissingDependencyError(errors, dependency);\n \t\t\t} else if (cond) {\n-\t\t\t\terrors.append(\"but a different version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\tappendUnsatisfiedDependencyError(errors, dependency, depCandidate);\n \t\t\t} else if (errorType.contains(\"conf\")) {\n \t\t\t\t// CONFLICTS WITH\n-\t\t\t\terrors.append(\"but the conflicting version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\tappendConflictError(errors, candidate, depCandidate);\n \t\t\t} else {\n-\t\t\t\terrors.append(\"but the breaking version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\tappendBreakingError(errors, candidate, depCandidate);\n \t\t\t}\n-\n-\t\t\terrors.append(\"!\");\n \t\t}\n \t}\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ3NTM3Ng==", "bodyText": "Probably on a separate \"ModResolver overhaul\" PR since god is that thing a mess and I've messed it up a lil more", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497475376", "createdAt": "2020-09-30T12:39:04Z", "author": {"login": "Leo40Git"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -314,46 +315,82 @@ private static IVecInt toVecInt(IntStream stream) {\n \tprivate void addErrorToList(ModCandidate candidate, ModDependency dependency, Map<String, ModCandidate> result, StringBuilder errors, String errorType, boolean cond) {\n \t\tString depModId = dependency.getModId();\n \n-\t\tStringBuilder prefix = new StringBuilder(\"\\n - Mod \").append(candidate.getInfo().getId());\n-\t\tprefix.append(\" \").append(errorType).append(\" mod \").append(depModId);\n+\t\terrors.append(\"\\n - Mod \").append(getCandidateName(candidate)).append(\" \").append(errorType).append(\" \");\n \n \t\tList<String> errorList = new ArrayList<>();\n \n \t\tif (!isModIdValid(depModId, errorList)) {\n-\t\t\tif (errorList.size() == 1) {\n-\t\t\t\terrors.append(prefix).append(\" which has an invalid mod id because it \").append(errorList.get(0));\n-\t\t\t} else {\n-\t\t\t\terrors.append(prefix).append(\" which has an invalid mod because:\");\n+\t\t\terrors.append(depModId).append(\", which has an invalid mod ID because:\");\n \n-\t\t\t\tfor (String error : errorList) {\n-\t\t\t\t\terrors.append(\"\\n   - It \").append(error);\n-\t\t\t\t}\n+\t\t\tfor (String error : errorList) {\n+\t\t\t\terrors.append(\"\\n\\t - It \").append(error);\n \t\t\t}\n \n \t\t\treturn;\n \t\t}\n \n \t\tModCandidate depCandidate = result.get(depModId);\n-\t\tboolean isPresent = depCandidate == null ? false : dependency.matches(depCandidate.getInfo().getVersion());\n+\t\tboolean isPresent = depCandidate != null && dependency.matches(depCandidate.getInfo().getVersion());\n \n \t\tif (isPresent != cond) {\n-\t\t\terrors.append(\"\\n - Mod \").append(candidate.getInfo().getId()).append(\" \").append(errorType).append(\" mod \").append(dependency).append(\", \");\n-\n+\t\t\terrors.append(getDependencyVersionRequirements(dependency)).append(\" of mod \")\n+\t\t\t\t\t.append(depCandidate == null ? depModId : getCandidateName(depCandidate)).append(\", \");\n \t\t\tif (depCandidate == null) {\n-\t\t\t\terrors.append(\"which is missing\");\n+\t\t\t\tappendMissingDependencyError(errors, dependency);\n \t\t\t} else if (cond) {\n-\t\t\t\terrors.append(\"but a different version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\tappendUnsatisfiedDependencyError(errors, dependency, depCandidate);\n \t\t\t} else if (errorType.contains(\"conf\")) {\n \t\t\t\t// CONFLICTS WITH\n-\t\t\t\terrors.append(\"but the conflicting version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\tappendConflictError(errors, candidate, depCandidate);\n \t\t\t} else {\n-\t\t\t\terrors.append(\"but the breaking version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\tappendBreakingError(errors, candidate, depCandidate);\n \t\t\t}\n-\n-\t\t\terrors.append(\"!\");\n \t\t}\n \t}\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE4ODgwNQ=="}, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjEwNzkyNQ==", "bodyText": "Fine with me!", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r502107925", "createdAt": "2020-10-09T00:59:04Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -314,46 +315,82 @@ private static IVecInt toVecInt(IntStream stream) {\n \tprivate void addErrorToList(ModCandidate candidate, ModDependency dependency, Map<String, ModCandidate> result, StringBuilder errors, String errorType, boolean cond) {\n \t\tString depModId = dependency.getModId();\n \n-\t\tStringBuilder prefix = new StringBuilder(\"\\n - Mod \").append(candidate.getInfo().getId());\n-\t\tprefix.append(\" \").append(errorType).append(\" mod \").append(depModId);\n+\t\terrors.append(\"\\n - Mod \").append(getCandidateName(candidate)).append(\" \").append(errorType).append(\" \");\n \n \t\tList<String> errorList = new ArrayList<>();\n \n \t\tif (!isModIdValid(depModId, errorList)) {\n-\t\t\tif (errorList.size() == 1) {\n-\t\t\t\terrors.append(prefix).append(\" which has an invalid mod id because it \").append(errorList.get(0));\n-\t\t\t} else {\n-\t\t\t\terrors.append(prefix).append(\" which has an invalid mod because:\");\n+\t\t\terrors.append(depModId).append(\", which has an invalid mod ID because:\");\n \n-\t\t\t\tfor (String error : errorList) {\n-\t\t\t\t\terrors.append(\"\\n   - It \").append(error);\n-\t\t\t\t}\n+\t\t\tfor (String error : errorList) {\n+\t\t\t\terrors.append(\"\\n\\t - It \").append(error);\n \t\t\t}\n \n \t\t\treturn;\n \t\t}\n \n \t\tModCandidate depCandidate = result.get(depModId);\n-\t\tboolean isPresent = depCandidate == null ? false : dependency.matches(depCandidate.getInfo().getVersion());\n+\t\tboolean isPresent = depCandidate != null && dependency.matches(depCandidate.getInfo().getVersion());\n \n \t\tif (isPresent != cond) {\n-\t\t\terrors.append(\"\\n - Mod \").append(candidate.getInfo().getId()).append(\" \").append(errorType).append(\" mod \").append(dependency).append(\", \");\n-\n+\t\t\terrors.append(getDependencyVersionRequirements(dependency)).append(\" of mod \")\n+\t\t\t\t\t.append(depCandidate == null ? depModId : getCandidateName(depCandidate)).append(\", \");\n \t\t\tif (depCandidate == null) {\n-\t\t\t\terrors.append(\"which is missing\");\n+\t\t\t\tappendMissingDependencyError(errors, dependency);\n \t\t\t} else if (cond) {\n-\t\t\t\terrors.append(\"but a different version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\tappendUnsatisfiedDependencyError(errors, dependency, depCandidate);\n \t\t\t} else if (errorType.contains(\"conf\")) {\n \t\t\t\t// CONFLICTS WITH\n-\t\t\t\terrors.append(\"but the conflicting version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\tappendConflictError(errors, candidate, depCandidate);\n \t\t\t} else {\n-\t\t\t\terrors.append(\"but the breaking version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\tappendBreakingError(errors, candidate, depCandidate);\n \t\t\t}\n-\n-\t\t\terrors.append(\"!\");\n \t\t}\n \t}\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE4ODgwNQ=="}, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjUzNjA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/gui/FabricStatusTree.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMToxMDo1OVrOHaKBtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMToxMDo1OVrOHaKBtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE4OTMwMw==", "bodyText": "I don't think we need to handle this gracefully?", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497189303", "createdAt": "2020-09-30T01:10:59Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/gui/FabricStatusTree.java", "diffHunk": "@@ -203,10 +203,43 @@ public void setInfo() {\n \t\t\tsetWarningLevel(FabricTreeWarningLevel.INFO);\n \t\t}\n \n+\t\tprivate FabricStatusNode addChild(String string, boolean info) {\n+\t\t\tif (string.startsWith(\"\\t\")) {\n+\t\t\t\tif (children.size() == 0) {\n+\t\t\t\t\tFabricStatusNode rootChild = new FabricStatusNode(this, \"(indented node was added before root node - this is a bug!)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjU0OTMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMToxOTozMlrOHaKJTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMToxOTozMlrOHaKJTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE5MTI0NA==", "bodyText": "API classes should always be final unless extending is explicitly desired.\nTo me a VersionRange is a range with 2 version bounds, we already call these VersionPredicate elsewhere, which should be appropriate here. We'd then implement Predicate<Version> later (see net.fabricmc.loader.util.version.VersionPredicateParser.matches)", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497191244", "createdAt": "2020-09-30T01:19:32Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+public class VersionRange {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjU1MjMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMToyMToxMVrOHaKK7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMToyMToxMVrOHaKK7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE5MTY2MQ==", "bodyText": "I'd null check the args", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497191661", "createdAt": "2020-09-30T01:21:11Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+public class VersionRange {\n+\tpublic enum Type {\n+\t\tINVALID(version -> \"unknown version\"),\n+\t\tANY(version -> \"any version\"),\n+\t\tEQUALS(version -> \"version \" + version),\n+\t\tGREATER_THAN(version -> \"any version after \" + version),\n+\t\tLESSER_THAN(version -> \"any version before \" + version),\n+\t\tGREATER_THAN_OR_EQUAL(version -> \"version \" + version + \" or later\"),\n+\t\tLESSER_THAN_OR_EQUAL(version -> \"version \" + version + \" or earlier\"),\n+\t\tSAME_MAJOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 1; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t}),\n+\t\tSAME_MAJOR_AND_MINOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 2; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t});\n+\n+\t\tprivate final UnaryOperator<String> reprOperator;\n+\n+\t\tType(UnaryOperator<String> reprOperator) {\n+\t\t\tthis.reprOperator = reprOperator;\n+\t\t}\n+\n+\t\tpublic String represent(String version) {\n+\t\t\treturn reprOperator.apply(version);\n+\t\t}\n+\t}\n+\n+\tprivate final Type type;\n+\tprivate final String version;\n+\tprivate String stringRepr;\n+\n+\tpublic VersionRange(Type type, String version) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjU1NTQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMToyMzoxMlrOHaKMzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMTo1ODowOVrOHaaB7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE5MjE0Mg==", "bodyText": "\"describe\" may be a better name? Not sure.\nThe method signature isn't very suitable to add localization support. I think it may be best to move the description logic to the implementation and not expose it in the API.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497192142", "createdAt": "2020-09-30T01:23:12Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+public class VersionRange {\n+\tpublic enum Type {\n+\t\tINVALID(version -> \"unknown version\"),\n+\t\tANY(version -> \"any version\"),\n+\t\tEQUALS(version -> \"version \" + version),\n+\t\tGREATER_THAN(version -> \"any version after \" + version),\n+\t\tLESSER_THAN(version -> \"any version before \" + version),\n+\t\tGREATER_THAN_OR_EQUAL(version -> \"version \" + version + \" or later\"),\n+\t\tLESSER_THAN_OR_EQUAL(version -> \"version \" + version + \" or earlier\"),\n+\t\tSAME_MAJOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 1; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t}),\n+\t\tSAME_MAJOR_AND_MINOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 2; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t});\n+\n+\t\tprivate final UnaryOperator<String> reprOperator;\n+\n+\t\tType(UnaryOperator<String> reprOperator) {\n+\t\t\tthis.reprOperator = reprOperator;\n+\t\t}\n+\n+\t\tpublic String represent(String version) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ1MTUwMw==", "bodyText": "This'll get changed to \"<predicate type symbol(s)><predicate argument>\" (i.e \"=1.0.2\") or something", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497451503", "createdAt": "2020-09-30T11:58:09Z", "author": {"login": "Leo40Git"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+public class VersionRange {\n+\tpublic enum Type {\n+\t\tINVALID(version -> \"unknown version\"),\n+\t\tANY(version -> \"any version\"),\n+\t\tEQUALS(version -> \"version \" + version),\n+\t\tGREATER_THAN(version -> \"any version after \" + version),\n+\t\tLESSER_THAN(version -> \"any version before \" + version),\n+\t\tGREATER_THAN_OR_EQUAL(version -> \"version \" + version + \" or later\"),\n+\t\tLESSER_THAN_OR_EQUAL(version -> \"version \" + version + \" or earlier\"),\n+\t\tSAME_MAJOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 1; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t}),\n+\t\tSAME_MAJOR_AND_MINOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 2; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t});\n+\n+\t\tprivate final UnaryOperator<String> reprOperator;\n+\n+\t\tType(UnaryOperator<String> reprOperator) {\n+\t\t\tthis.reprOperator = reprOperator;\n+\t\t}\n+\n+\t\tpublic String represent(String version) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE5MjE0Mg=="}, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjYyNjE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMjowNTozMVrOHaK1HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMjowNTozMVrOHaK1HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIwMjQ2MA==", "bodyText": "existing parser infers equality, similar to your default case", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497202460", "createdAt": "2020-09-30T02:05:31Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/api/VersionRange.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+public class VersionRange {\n+\tpublic enum Type {\n+\t\tINVALID(version -> \"unknown version\"),\n+\t\tANY(version -> \"any version\"),\n+\t\tEQUALS(version -> \"version \" + version),\n+\t\tGREATER_THAN(version -> \"any version after \" + version),\n+\t\tLESSER_THAN(version -> \"any version before \" + version),\n+\t\tGREATER_THAN_OR_EQUAL(version -> \"version \" + version + \" or later\"),\n+\t\tLESSER_THAN_OR_EQUAL(version -> \"version \" + version + \" or earlier\"),\n+\t\tSAME_MAJOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 1; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t}),\n+\t\tSAME_MAJOR_AND_MINOR(version -> {\n+\t\t\tString[] parts = version.split(\"\\\\.\");\n+\n+\t\t\tfor (int i = 2; i < parts.length; i++) {\n+\t\t\t\tparts[i] = \"x\";\n+\t\t\t}\n+\n+\t\t\treturn \"version \" + String.join(\".\", parts);\n+\t\t});\n+\n+\t\tprivate final UnaryOperator<String> reprOperator;\n+\n+\t\tType(UnaryOperator<String> reprOperator) {\n+\t\t\tthis.reprOperator = reprOperator;\n+\t\t}\n+\n+\t\tpublic String represent(String version) {\n+\t\t\treturn reprOperator.apply(version);\n+\t\t}\n+\t}\n+\n+\tprivate final Type type;\n+\tprivate final String version;\n+\tprivate String stringRepr;\n+\n+\tpublic VersionRange(Type type, String version) {\n+\t\tthis.type = type;\n+\t\tthis.version = version;\n+\t}\n+\n+\tpublic Type getType() {\n+\t\treturn type;\n+\t}\n+\n+\tpublic String getVersion() {\n+\t\treturn version;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tif (stringRepr == null) {\n+\t\t\tstringRepr = type.represent(version);\n+\t\t}\n+\n+\t\treturn stringRepr;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object o) {\n+\t\tif (this == o) {\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tif (o == null || getClass() != o.getClass()) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tVersionRange that = (VersionRange) o;\n+\t\treturn type == that.type && version.equals(that.version);\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\treturn Objects.hash(type, version);\n+\t}\n+\n+\tpublic static Collection<VersionRange> fromVersionMatchers(String... matchers) {\n+\t\tCollection<VersionRange> ranges = Arrays.stream(matchers).map(matcher -> {\n+\t\t\tchar firstChar = matcher.charAt(0);\n+\t\t\tchar secondChar = 0;\n+\n+\t\t\tif (matcher.length() > 1) {\n+\t\t\t\tsecondChar = matcher.charAt(1);\n+\t\t\t}\n+\n+\t\t\tswitch (firstChar) {\n+\t\t\tcase '*':\n+\t\t\t\tif (matcher.length() == 1) {\n+\t\t\t\t\treturn new VersionRange(Type.ANY, \"\");\n+\t\t\t\t} else {\n+\t\t\t\t\treturn new VersionRange(Type.INVALID, \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjYyODY3OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/api/metadata/ModDependency.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMjowNzoyM1rOHaK2tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMjowNzoyM1rOHaK2tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIwMjg2OA==", "bodyText": "This should return a Set for correct equals semantics.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497202868", "createdAt": "2020-09-30T02:07:23Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/api/metadata/ModDependency.java", "diffHunk": "@@ -33,4 +36,11 @@\n \t * @param version the version to check\n \t */\n \tboolean matches(Version version);\n+\n+\t/**\n+\t * Returns a representation of the dependency's version requirements.\n+\t *\n+\t * @return representation of the dependency's version requirements\n+\t */\n+\tCollection<VersionRange> getVersionRequirements();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjY0NDEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/gui/FabricStatusTree.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMjoxNjozOFrOHaK_kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMjoxNjozOFrOHaK_kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIwNTEzOQ==", "bodyText": "The logic here looks a bit weird, the 2nd trim makes no difference outside the 2nd if. Why is it > 1 instead of > 0?", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497205139", "createdAt": "2020-09-30T02:16:38Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/gui/FabricStatusTree.java", "diffHunk": "@@ -203,10 +203,43 @@ public void setInfo() {\n \t\t\tsetWarningLevel(FabricTreeWarningLevel.INFO);\n \t\t}\n \n+\t\tprivate FabricStatusNode addChild(String string, boolean info) {\n+\t\t\tif (string.startsWith(\"\\t\")) {\n+\t\t\t\tif (children.size() == 0) {\n+\t\t\t\t\tFabricStatusNode rootChild = new FabricStatusNode(this, \"(indented node was added before root node - this is a bug!)\");\n+\t\t\t\t\trootChild.warningLevel = FabricTreeWarningLevel.WARN;\n+\t\t\t\t\tchildren.add(rootChild);\n+\t\t\t\t}\n+\t\t\t\tFabricStatusNode lastChild = children.get(children.size() - 1);\n+\t\t\t\tlastChild.addChild(string.substring(1), true);\n+\t\t\t\treturn lastChild;\n+\t\t\t} else {\n+\t\t\t\tFabricStatusNode child = new FabricStatusNode(this, info ? emboldenForNode(string) : cleanForNode(string));\n+\t\t\t\tif (info) {\n+\t\t\t\t\tchild.warningLevel = FabricTreeWarningLevel.INFO;\n+\t\t\t\t\texpandByDefault = true;\n+\t\t\t\t}\n+\t\t\t\tchildren.add(child);\n+\t\t\t\treturn child;\n+\t\t\t}\n+\t\t}\n+\n \t\tpublic FabricStatusNode addChild(String string) {\n-\t\t\tFabricStatusNode child = new FabricStatusNode(this, string);\n-\t\t\tchildren.add(child);\n-\t\t\treturn child;\n+\t\t\treturn addChild(string, false);\n+\t\t}\n+\n+\t\tprivate String cleanForNode(String string) {\n+\t\t\tstring = string.trim();\n+\t\t\tif (string.length() > 1) {\n+\t\t\t\tif (string.startsWith(\"-\"))\n+\t\t\t\t\tstring = string.substring(1);\n+\t\t\t\tstring = string.trim();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjY1MDA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/gui/FabricStatusTree.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMjoyMDoxMVrOHaLC_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMTo1Mzo0MlrOHaZ48g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIwNjAxNA==", "bodyText": "This makes me suspicious of whether the code deals with string containing characters that are meaningful html.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497206014", "createdAt": "2020-09-30T02:20:11Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/gui/FabricStatusTree.java", "diffHunk": "@@ -203,10 +203,43 @@ public void setInfo() {\n \t\t\tsetWarningLevel(FabricTreeWarningLevel.INFO);\n \t\t}\n \n+\t\tprivate FabricStatusNode addChild(String string, boolean info) {\n+\t\t\tif (string.startsWith(\"\\t\")) {\n+\t\t\t\tif (children.size() == 0) {\n+\t\t\t\t\tFabricStatusNode rootChild = new FabricStatusNode(this, \"(indented node was added before root node - this is a bug!)\");\n+\t\t\t\t\trootChild.warningLevel = FabricTreeWarningLevel.WARN;\n+\t\t\t\t\tchildren.add(rootChild);\n+\t\t\t\t}\n+\t\t\t\tFabricStatusNode lastChild = children.get(children.size() - 1);\n+\t\t\t\tlastChild.addChild(string.substring(1), true);\n+\t\t\t\treturn lastChild;\n+\t\t\t} else {\n+\t\t\t\tFabricStatusNode child = new FabricStatusNode(this, info ? emboldenForNode(string) : cleanForNode(string));\n+\t\t\t\tif (info) {\n+\t\t\t\t\tchild.warningLevel = FabricTreeWarningLevel.INFO;\n+\t\t\t\t\texpandByDefault = true;\n+\t\t\t\t}\n+\t\t\t\tchildren.add(child);\n+\t\t\t\treturn child;\n+\t\t\t}\n+\t\t}\n+\n \t\tpublic FabricStatusNode addChild(String string) {\n-\t\t\tFabricStatusNode child = new FabricStatusNode(this, string);\n-\t\t\tchildren.add(child);\n-\t\t\treturn child;\n+\t\t\treturn addChild(string, false);\n+\t\t}\n+\n+\t\tprivate String cleanForNode(String string) {\n+\t\t\tstring = string.trim();\n+\t\t\tif (string.length() > 1) {\n+\t\t\t\tif (string.startsWith(\"-\"))\n+\t\t\t\t\tstring = string.substring(1);\n+\t\t\t\tstring = string.trim();\n+\t\t\t}\n+\t\t\treturn string;\n+\t\t}\n+\n+\t\tprivate String emboldenForNode(String string) {\n+\t\t\treturn \"<html><b>\" + cleanForNode(string) + \"</b></html>\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ0OTIwMg==", "bodyText": "Probably not. Apache utilities add a method for escaping HTML characters, but I'm honestly considering just removing the bold node stuff since nested nodes are useful for other things as well.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497449202", "createdAt": "2020-09-30T11:53:42Z", "author": {"login": "Leo40Git"}, "path": "src/main/java/net/fabricmc/loader/gui/FabricStatusTree.java", "diffHunk": "@@ -203,10 +203,43 @@ public void setInfo() {\n \t\t\tsetWarningLevel(FabricTreeWarningLevel.INFO);\n \t\t}\n \n+\t\tprivate FabricStatusNode addChild(String string, boolean info) {\n+\t\t\tif (string.startsWith(\"\\t\")) {\n+\t\t\t\tif (children.size() == 0) {\n+\t\t\t\t\tFabricStatusNode rootChild = new FabricStatusNode(this, \"(indented node was added before root node - this is a bug!)\");\n+\t\t\t\t\trootChild.warningLevel = FabricTreeWarningLevel.WARN;\n+\t\t\t\t\tchildren.add(rootChild);\n+\t\t\t\t}\n+\t\t\t\tFabricStatusNode lastChild = children.get(children.size() - 1);\n+\t\t\t\tlastChild.addChild(string.substring(1), true);\n+\t\t\t\treturn lastChild;\n+\t\t\t} else {\n+\t\t\t\tFabricStatusNode child = new FabricStatusNode(this, info ? emboldenForNode(string) : cleanForNode(string));\n+\t\t\t\tif (info) {\n+\t\t\t\t\tchild.warningLevel = FabricTreeWarningLevel.INFO;\n+\t\t\t\t\texpandByDefault = true;\n+\t\t\t\t}\n+\t\t\t\tchildren.add(child);\n+\t\t\t\treturn child;\n+\t\t\t}\n+\t\t}\n+\n \t\tpublic FabricStatusNode addChild(String string) {\n-\t\t\tFabricStatusNode child = new FabricStatusNode(this, string);\n-\t\t\tchildren.add(child);\n-\t\t\treturn child;\n+\t\t\treturn addChild(string, false);\n+\t\t}\n+\n+\t\tprivate String cleanForNode(String string) {\n+\t\t\tstring = string.trim();\n+\t\t\tif (string.length() > 1) {\n+\t\t\t\tif (string.startsWith(\"-\"))\n+\t\t\t\t\tstring = string.substring(1);\n+\t\t\t\tstring = string.trim();\n+\t\t\t}\n+\t\t\treturn string;\n+\t\t}\n+\n+\t\tprivate String emboldenForNode(String string) {\n+\t\t\treturn \"<html><b>\" + cleanForNode(string) + \"</b></html>\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIwNjAxNA=="}, "originalCommit": {"oid": "a1da19a330478f634beddaf9947110447b514f54"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDY3MTc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMzo0NjozMlrOHaeWnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzoxNjowM1rOHfSVRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUyMjMzMg==", "bodyText": "The caret (^) ranges actually check that the left-most non-zero digit matches, so this would have different behaviour for versions such as 0.a.b and 0.0.c. (This is detailed in the NPM semver docs, which are linked in the fabric.mod.json spec as the definition of the dep strings.)", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497522332", "createdAt": "2020-09-30T13:46:32Z", "author": {"login": "Juuxel"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -314,46 +314,117 @@ private static IVecInt toVecInt(IntStream stream) {\n \tprivate void addErrorToList(ModCandidate candidate, ModDependency dependency, Map<String, ModCandidate> result, StringBuilder errors, String errorType, boolean cond) {\n \t\tString depModId = dependency.getModId();\n \n-\t\tStringBuilder prefix = new StringBuilder(\"\\n - Mod \").append(candidate.getInfo().getId());\n-\t\tprefix.append(\" \").append(errorType).append(\" mod \").append(depModId);\n+\t\terrors.append(\"\\n - Mod \").append(getCandidateName(candidate)).append(\" \").append(errorType).append(\" \");\n \n \t\tList<String> errorList = new ArrayList<>();\n \n \t\tif (!isModIdValid(depModId, errorList)) {\n-\t\t\tif (errorList.size() == 1) {\n-\t\t\t\terrors.append(prefix).append(\" which has an invalid mod id because it \").append(errorList.get(0));\n-\t\t\t} else {\n-\t\t\t\terrors.append(prefix).append(\" which has an invalid mod because:\");\n+\t\t\terrors.append(depModId).append(\", which has an invalid mod ID because:\");\n \n-\t\t\t\tfor (String error : errorList) {\n-\t\t\t\t\terrors.append(\"\\n   - It \").append(error);\n-\t\t\t\t}\n+\t\t\tfor (String error : errorList) {\n+\t\t\t\terrors.append(\"\\n\\t - It \").append(error);\n \t\t\t}\n \n \t\t\treturn;\n \t\t}\n \n \t\tModCandidate depCandidate = result.get(depModId);\n-\t\tboolean isPresent = depCandidate == null ? false : dependency.matches(depCandidate.getInfo().getVersion());\n+\t\tboolean isPresent = depCandidate != null && dependency.matches(depCandidate.getInfo().getVersion());\n \n \t\tif (isPresent != cond) {\n-\t\t\terrors.append(\"\\n - Mod \").append(candidate.getInfo().getId()).append(\" \").append(errorType).append(\" mod \").append(dependency).append(\", \");\n-\n+\t\t\terrors.append(getDependencyVersionRequirements(dependency)).append(\" of mod \")\n+\t\t\t\t\t.append(depCandidate == null ? depModId : getCandidateName(depCandidate)).append(\", \");\n \t\t\tif (depCandidate == null) {\n-\t\t\t\terrors.append(\"which is missing\");\n+\t\t\t\tappendMissingDependencyError(errors, dependency);\n \t\t\t} else if (cond) {\n-\t\t\t\terrors.append(\"but a different version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\tappendUnsatisfiedDependencyError(errors, dependency, depCandidate);\n \t\t\t} else if (errorType.contains(\"conf\")) {\n \t\t\t\t// CONFLICTS WITH\n-\t\t\t\terrors.append(\"but the conflicting version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\tappendConflictError(errors, candidate, depCandidate);\n \t\t\t} else {\n-\t\t\t\terrors.append(\"but the breaking version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\tappendBreakingError(errors, candidate, depCandidate);\n \t\t\t}\n-\n-\t\t\terrors.append(\"!\");\n \t\t}\n \t}\n \n+\tprivate void appendMissingDependencyError(StringBuilder errors, ModDependency dependency) {\n+\t\terrors.append(\"which is missing!\");\n+\t\terrors.append(\"\\n\\t - You must install \").append(getDependencyVersionRequirements(dependency)).append(\" of \")\n+\t\t\t\t.append(dependency.getModId()).append(\".\");\n+\t}\n+\n+\tprivate void appendUnsatisfiedDependencyError(StringBuilder errors, ModDependency dependency, ModCandidate depCandidate) {\n+\t\terrors.append(\"but a non-matching version is present: \").append(getCandidateFriendlyVersion(depCandidate)).append(\"!\");\n+\t\terrors.append(\"\\n\\t - You must install \").append(getDependencyVersionRequirements(dependency)).append(\" of \")\n+\t\t\t\t.append(getCandidateName(depCandidate)).append(\".\");\n+\t}\n+\n+\tprivate void appendConflictError(StringBuilder errors, ModCandidate candidate, ModCandidate depCandidate) {\n+\t\tfinal String depCandidateVer = getCandidateFriendlyVersion(depCandidate);\n+\t\terrors.append(\"but a matching version is present: \").append(depCandidateVer).append(\"!\");\n+\t\terrors.append(\"\\n\\t - While this won't prevent you from starting the game,\");\n+\t\terrors.append(\" the developer(s) of \").append(getCandidateName(candidate));\n+\t\terrors.append(\" have found that version \").append(depCandidateVer).append(\" of \").append(getCandidateName(depCandidate));\n+\t\terrors.append(\" conflicts with their mod.\");\n+\t\terrors.append(\"\\n\\t - It is heavily recommended to remove one of the mods.\");\n+\t}\n+\n+\tprivate void appendBreakingError(StringBuilder errors, ModCandidate candidate, ModCandidate depCandidate) {\n+\t\tfinal String depCandidateVer = getCandidateFriendlyVersion(depCandidate);\n+\t\terrors.append(\"but a matching version is present: \").append(depCandidate.getInfo().getVersion()).append(\"!\");\n+\t\terrors.append(\"\\n\\t - The developer(s) of \").append(getCandidateName(candidate));\n+\t\terrors.append(\" have found that version \").append(depCandidateVer).append(\" of \").append(getCandidateName(depCandidate));\n+\t\terrors.append(\" critically conflicts with their mod.\");\n+\t\terrors.append(\"\\n\\t - You must remove one of the mods.\");\n+\t}\n+\n+\tprivate static String getCandidateName(ModCandidate candidate) {\n+\t\treturn \"'\" + candidate.getInfo().getName() + \"' (\" + candidate.getInfo().getId() + \")\";\n+\t}\n+\n+\tprivate static String getCandidateFriendlyVersion(ModCandidate candidate) {\n+\t\treturn candidate.getInfo().getVersion().getFriendlyString();\n+\t}\n+\n+\tprivate static String getDependencyVersionRequirements(ModDependency dependency) {\n+\t\treturn dependency.getVersionRequirements().stream().map(predicate -> {\n+\t\t\tString version = predicate.getVersion();\n+\t\t\tString[] parts;\n+\t\t\tswitch(predicate.getType()) {\n+\t\t\tcase ANY:\n+\t\t\t\treturn \"any version\";\n+\t\t\tcase EQUALS:\n+\t\t\t\treturn \"version \" + version;\n+\t\t\tcase GREATER_THAN:\n+\t\t\t\treturn \"any version after \" + version;\n+\t\t\tcase LESSER_THAN:\n+\t\t\t\treturn \"any version before \" + version;\n+\t\t\tcase GREATER_THAN_OR_EQUAL:\n+\t\t\t\treturn \"version \" + version + \" or later\";\n+\t\t\tcase LESSER_THAN_OR_EQUAL:\n+\t\t\t\treturn \"version \" + version + \" or earlier\";\n+\t\t\tcase SAME_MAJOR:\n+\t\t\t\tparts = version.split(\"\\\\.\");\n+\n+\t\t\t\tfor (int i = 1; i < parts.length; i++) {\n+\t\t\t\t\tparts[i] = \"x\";\n+\t\t\t\t}\n+\n+\t\t\t\treturn \"version \" + String.join(\".\", parts);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d07730695baa172b38c500fa08e7a344b41f1ce"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUyNTIzMw==", "bodyText": "Oops. ~ is probably wrong too, then...", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497525233", "createdAt": "2020-09-30T13:50:01Z", "author": {"login": "Leo40Git"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -314,46 +314,117 @@ private static IVecInt toVecInt(IntStream stream) {\n \tprivate void addErrorToList(ModCandidate candidate, ModDependency dependency, Map<String, ModCandidate> result, StringBuilder errors, String errorType, boolean cond) {\n \t\tString depModId = dependency.getModId();\n \n-\t\tStringBuilder prefix = new StringBuilder(\"\\n - Mod \").append(candidate.getInfo().getId());\n-\t\tprefix.append(\" \").append(errorType).append(\" mod \").append(depModId);\n+\t\terrors.append(\"\\n - Mod \").append(getCandidateName(candidate)).append(\" \").append(errorType).append(\" \");\n \n \t\tList<String> errorList = new ArrayList<>();\n \n \t\tif (!isModIdValid(depModId, errorList)) {\n-\t\t\tif (errorList.size() == 1) {\n-\t\t\t\terrors.append(prefix).append(\" which has an invalid mod id because it \").append(errorList.get(0));\n-\t\t\t} else {\n-\t\t\t\terrors.append(prefix).append(\" which has an invalid mod because:\");\n+\t\t\terrors.append(depModId).append(\", which has an invalid mod ID because:\");\n \n-\t\t\t\tfor (String error : errorList) {\n-\t\t\t\t\terrors.append(\"\\n   - It \").append(error);\n-\t\t\t\t}\n+\t\t\tfor (String error : errorList) {\n+\t\t\t\terrors.append(\"\\n\\t - It \").append(error);\n \t\t\t}\n \n \t\t\treturn;\n \t\t}\n \n \t\tModCandidate depCandidate = result.get(depModId);\n-\t\tboolean isPresent = depCandidate == null ? false : dependency.matches(depCandidate.getInfo().getVersion());\n+\t\tboolean isPresent = depCandidate != null && dependency.matches(depCandidate.getInfo().getVersion());\n \n \t\tif (isPresent != cond) {\n-\t\t\terrors.append(\"\\n - Mod \").append(candidate.getInfo().getId()).append(\" \").append(errorType).append(\" mod \").append(dependency).append(\", \");\n-\n+\t\t\terrors.append(getDependencyVersionRequirements(dependency)).append(\" of mod \")\n+\t\t\t\t\t.append(depCandidate == null ? depModId : getCandidateName(depCandidate)).append(\", \");\n \t\t\tif (depCandidate == null) {\n-\t\t\t\terrors.append(\"which is missing\");\n+\t\t\t\tappendMissingDependencyError(errors, dependency);\n \t\t\t} else if (cond) {\n-\t\t\t\terrors.append(\"but a different version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\tappendUnsatisfiedDependencyError(errors, dependency, depCandidate);\n \t\t\t} else if (errorType.contains(\"conf\")) {\n \t\t\t\t// CONFLICTS WITH\n-\t\t\t\terrors.append(\"but the conflicting version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\tappendConflictError(errors, candidate, depCandidate);\n \t\t\t} else {\n-\t\t\t\terrors.append(\"but the breaking version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\tappendBreakingError(errors, candidate, depCandidate);\n \t\t\t}\n-\n-\t\t\terrors.append(\"!\");\n \t\t}\n \t}\n \n+\tprivate void appendMissingDependencyError(StringBuilder errors, ModDependency dependency) {\n+\t\terrors.append(\"which is missing!\");\n+\t\terrors.append(\"\\n\\t - You must install \").append(getDependencyVersionRequirements(dependency)).append(\" of \")\n+\t\t\t\t.append(dependency.getModId()).append(\".\");\n+\t}\n+\n+\tprivate void appendUnsatisfiedDependencyError(StringBuilder errors, ModDependency dependency, ModCandidate depCandidate) {\n+\t\terrors.append(\"but a non-matching version is present: \").append(getCandidateFriendlyVersion(depCandidate)).append(\"!\");\n+\t\terrors.append(\"\\n\\t - You must install \").append(getDependencyVersionRequirements(dependency)).append(\" of \")\n+\t\t\t\t.append(getCandidateName(depCandidate)).append(\".\");\n+\t}\n+\n+\tprivate void appendConflictError(StringBuilder errors, ModCandidate candidate, ModCandidate depCandidate) {\n+\t\tfinal String depCandidateVer = getCandidateFriendlyVersion(depCandidate);\n+\t\terrors.append(\"but a matching version is present: \").append(depCandidateVer).append(\"!\");\n+\t\terrors.append(\"\\n\\t - While this won't prevent you from starting the game,\");\n+\t\terrors.append(\" the developer(s) of \").append(getCandidateName(candidate));\n+\t\terrors.append(\" have found that version \").append(depCandidateVer).append(\" of \").append(getCandidateName(depCandidate));\n+\t\terrors.append(\" conflicts with their mod.\");\n+\t\terrors.append(\"\\n\\t - It is heavily recommended to remove one of the mods.\");\n+\t}\n+\n+\tprivate void appendBreakingError(StringBuilder errors, ModCandidate candidate, ModCandidate depCandidate) {\n+\t\tfinal String depCandidateVer = getCandidateFriendlyVersion(depCandidate);\n+\t\terrors.append(\"but a matching version is present: \").append(depCandidate.getInfo().getVersion()).append(\"!\");\n+\t\terrors.append(\"\\n\\t - The developer(s) of \").append(getCandidateName(candidate));\n+\t\terrors.append(\" have found that version \").append(depCandidateVer).append(\" of \").append(getCandidateName(depCandidate));\n+\t\terrors.append(\" critically conflicts with their mod.\");\n+\t\terrors.append(\"\\n\\t - You must remove one of the mods.\");\n+\t}\n+\n+\tprivate static String getCandidateName(ModCandidate candidate) {\n+\t\treturn \"'\" + candidate.getInfo().getName() + \"' (\" + candidate.getInfo().getId() + \")\";\n+\t}\n+\n+\tprivate static String getCandidateFriendlyVersion(ModCandidate candidate) {\n+\t\treturn candidate.getInfo().getVersion().getFriendlyString();\n+\t}\n+\n+\tprivate static String getDependencyVersionRequirements(ModDependency dependency) {\n+\t\treturn dependency.getVersionRequirements().stream().map(predicate -> {\n+\t\t\tString version = predicate.getVersion();\n+\t\t\tString[] parts;\n+\t\t\tswitch(predicate.getType()) {\n+\t\t\tcase ANY:\n+\t\t\t\treturn \"any version\";\n+\t\t\tcase EQUALS:\n+\t\t\t\treturn \"version \" + version;\n+\t\t\tcase GREATER_THAN:\n+\t\t\t\treturn \"any version after \" + version;\n+\t\t\tcase LESSER_THAN:\n+\t\t\t\treturn \"any version before \" + version;\n+\t\t\tcase GREATER_THAN_OR_EQUAL:\n+\t\t\t\treturn \"version \" + version + \" or later\";\n+\t\t\tcase LESSER_THAN_OR_EQUAL:\n+\t\t\t\treturn \"version \" + version + \" or earlier\";\n+\t\t\tcase SAME_MAJOR:\n+\t\t\t\tparts = version.split(\"\\\\.\");\n+\n+\t\t\t\tfor (int i = 1; i < parts.length; i++) {\n+\t\t\t\t\tparts[i] = \"x\";\n+\t\t\t\t}\n+\n+\t\t\t\treturn \"version \" + String.join(\".\", parts);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUyMjMzMg=="}, "originalCommit": {"oid": "2d07730695baa172b38c500fa08e7a344b41f1ce"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUyNzkzNg==", "bodyText": "What should the equivalent values in the Type enum be called, then? Just CARET and TILDE?", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r497527936", "createdAt": "2020-09-30T13:53:30Z", "author": {"login": "Leo40Git"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -314,46 +314,117 @@ private static IVecInt toVecInt(IntStream stream) {\n \tprivate void addErrorToList(ModCandidate candidate, ModDependency dependency, Map<String, ModCandidate> result, StringBuilder errors, String errorType, boolean cond) {\n \t\tString depModId = dependency.getModId();\n \n-\t\tStringBuilder prefix = new StringBuilder(\"\\n - Mod \").append(candidate.getInfo().getId());\n-\t\tprefix.append(\" \").append(errorType).append(\" mod \").append(depModId);\n+\t\terrors.append(\"\\n - Mod \").append(getCandidateName(candidate)).append(\" \").append(errorType).append(\" \");\n \n \t\tList<String> errorList = new ArrayList<>();\n \n \t\tif (!isModIdValid(depModId, errorList)) {\n-\t\t\tif (errorList.size() == 1) {\n-\t\t\t\terrors.append(prefix).append(\" which has an invalid mod id because it \").append(errorList.get(0));\n-\t\t\t} else {\n-\t\t\t\terrors.append(prefix).append(\" which has an invalid mod because:\");\n+\t\t\terrors.append(depModId).append(\", which has an invalid mod ID because:\");\n \n-\t\t\t\tfor (String error : errorList) {\n-\t\t\t\t\terrors.append(\"\\n   - It \").append(error);\n-\t\t\t\t}\n+\t\t\tfor (String error : errorList) {\n+\t\t\t\terrors.append(\"\\n\\t - It \").append(error);\n \t\t\t}\n \n \t\t\treturn;\n \t\t}\n \n \t\tModCandidate depCandidate = result.get(depModId);\n-\t\tboolean isPresent = depCandidate == null ? false : dependency.matches(depCandidate.getInfo().getVersion());\n+\t\tboolean isPresent = depCandidate != null && dependency.matches(depCandidate.getInfo().getVersion());\n \n \t\tif (isPresent != cond) {\n-\t\t\terrors.append(\"\\n - Mod \").append(candidate.getInfo().getId()).append(\" \").append(errorType).append(\" mod \").append(dependency).append(\", \");\n-\n+\t\t\terrors.append(getDependencyVersionRequirements(dependency)).append(\" of mod \")\n+\t\t\t\t\t.append(depCandidate == null ? depModId : getCandidateName(depCandidate)).append(\", \");\n \t\t\tif (depCandidate == null) {\n-\t\t\t\terrors.append(\"which is missing\");\n+\t\t\t\tappendMissingDependencyError(errors, dependency);\n \t\t\t} else if (cond) {\n-\t\t\t\terrors.append(\"but a different version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\tappendUnsatisfiedDependencyError(errors, dependency, depCandidate);\n \t\t\t} else if (errorType.contains(\"conf\")) {\n \t\t\t\t// CONFLICTS WITH\n-\t\t\t\terrors.append(\"but the conflicting version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\tappendConflictError(errors, candidate, depCandidate);\n \t\t\t} else {\n-\t\t\t\terrors.append(\"but the breaking version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\tappendBreakingError(errors, candidate, depCandidate);\n \t\t\t}\n-\n-\t\t\terrors.append(\"!\");\n \t\t}\n \t}\n \n+\tprivate void appendMissingDependencyError(StringBuilder errors, ModDependency dependency) {\n+\t\terrors.append(\"which is missing!\");\n+\t\terrors.append(\"\\n\\t - You must install \").append(getDependencyVersionRequirements(dependency)).append(\" of \")\n+\t\t\t\t.append(dependency.getModId()).append(\".\");\n+\t}\n+\n+\tprivate void appendUnsatisfiedDependencyError(StringBuilder errors, ModDependency dependency, ModCandidate depCandidate) {\n+\t\terrors.append(\"but a non-matching version is present: \").append(getCandidateFriendlyVersion(depCandidate)).append(\"!\");\n+\t\terrors.append(\"\\n\\t - You must install \").append(getDependencyVersionRequirements(dependency)).append(\" of \")\n+\t\t\t\t.append(getCandidateName(depCandidate)).append(\".\");\n+\t}\n+\n+\tprivate void appendConflictError(StringBuilder errors, ModCandidate candidate, ModCandidate depCandidate) {\n+\t\tfinal String depCandidateVer = getCandidateFriendlyVersion(depCandidate);\n+\t\terrors.append(\"but a matching version is present: \").append(depCandidateVer).append(\"!\");\n+\t\terrors.append(\"\\n\\t - While this won't prevent you from starting the game,\");\n+\t\terrors.append(\" the developer(s) of \").append(getCandidateName(candidate));\n+\t\terrors.append(\" have found that version \").append(depCandidateVer).append(\" of \").append(getCandidateName(depCandidate));\n+\t\terrors.append(\" conflicts with their mod.\");\n+\t\terrors.append(\"\\n\\t - It is heavily recommended to remove one of the mods.\");\n+\t}\n+\n+\tprivate void appendBreakingError(StringBuilder errors, ModCandidate candidate, ModCandidate depCandidate) {\n+\t\tfinal String depCandidateVer = getCandidateFriendlyVersion(depCandidate);\n+\t\terrors.append(\"but a matching version is present: \").append(depCandidate.getInfo().getVersion()).append(\"!\");\n+\t\terrors.append(\"\\n\\t - The developer(s) of \").append(getCandidateName(candidate));\n+\t\terrors.append(\" have found that version \").append(depCandidateVer).append(\" of \").append(getCandidateName(depCandidate));\n+\t\terrors.append(\" critically conflicts with their mod.\");\n+\t\terrors.append(\"\\n\\t - You must remove one of the mods.\");\n+\t}\n+\n+\tprivate static String getCandidateName(ModCandidate candidate) {\n+\t\treturn \"'\" + candidate.getInfo().getName() + \"' (\" + candidate.getInfo().getId() + \")\";\n+\t}\n+\n+\tprivate static String getCandidateFriendlyVersion(ModCandidate candidate) {\n+\t\treturn candidate.getInfo().getVersion().getFriendlyString();\n+\t}\n+\n+\tprivate static String getDependencyVersionRequirements(ModDependency dependency) {\n+\t\treturn dependency.getVersionRequirements().stream().map(predicate -> {\n+\t\t\tString version = predicate.getVersion();\n+\t\t\tString[] parts;\n+\t\t\tswitch(predicate.getType()) {\n+\t\t\tcase ANY:\n+\t\t\t\treturn \"any version\";\n+\t\t\tcase EQUALS:\n+\t\t\t\treturn \"version \" + version;\n+\t\t\tcase GREATER_THAN:\n+\t\t\t\treturn \"any version after \" + version;\n+\t\t\tcase LESSER_THAN:\n+\t\t\t\treturn \"any version before \" + version;\n+\t\t\tcase GREATER_THAN_OR_EQUAL:\n+\t\t\t\treturn \"version \" + version + \" or later\";\n+\t\t\tcase LESSER_THAN_OR_EQUAL:\n+\t\t\t\treturn \"version \" + version + \" or earlier\";\n+\t\t\tcase SAME_MAJOR:\n+\t\t\t\tparts = version.split(\"\\\\.\");\n+\n+\t\t\t\tfor (int i = 1; i < parts.length; i++) {\n+\t\t\t\t\tparts[i] = \"x\";\n+\t\t\t\t}\n+\n+\t\t\t\treturn \"version \" + String.join(\".\", parts);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUyMjMzMg=="}, "originalCommit": {"oid": "2d07730695baa172b38c500fa08e7a344b41f1ce"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2ODI2Mg==", "bodyText": "According to Player, this special condition doesn't exist here. Marking as resolved.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r502568262", "createdAt": "2020-10-09T17:16:03Z", "author": {"login": "Leo40Git"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -314,46 +314,117 @@ private static IVecInt toVecInt(IntStream stream) {\n \tprivate void addErrorToList(ModCandidate candidate, ModDependency dependency, Map<String, ModCandidate> result, StringBuilder errors, String errorType, boolean cond) {\n \t\tString depModId = dependency.getModId();\n \n-\t\tStringBuilder prefix = new StringBuilder(\"\\n - Mod \").append(candidate.getInfo().getId());\n-\t\tprefix.append(\" \").append(errorType).append(\" mod \").append(depModId);\n+\t\terrors.append(\"\\n - Mod \").append(getCandidateName(candidate)).append(\" \").append(errorType).append(\" \");\n \n \t\tList<String> errorList = new ArrayList<>();\n \n \t\tif (!isModIdValid(depModId, errorList)) {\n-\t\t\tif (errorList.size() == 1) {\n-\t\t\t\terrors.append(prefix).append(\" which has an invalid mod id because it \").append(errorList.get(0));\n-\t\t\t} else {\n-\t\t\t\terrors.append(prefix).append(\" which has an invalid mod because:\");\n+\t\t\terrors.append(depModId).append(\", which has an invalid mod ID because:\");\n \n-\t\t\t\tfor (String error : errorList) {\n-\t\t\t\t\terrors.append(\"\\n   - It \").append(error);\n-\t\t\t\t}\n+\t\t\tfor (String error : errorList) {\n+\t\t\t\terrors.append(\"\\n\\t - It \").append(error);\n \t\t\t}\n \n \t\t\treturn;\n \t\t}\n \n \t\tModCandidate depCandidate = result.get(depModId);\n-\t\tboolean isPresent = depCandidate == null ? false : dependency.matches(depCandidate.getInfo().getVersion());\n+\t\tboolean isPresent = depCandidate != null && dependency.matches(depCandidate.getInfo().getVersion());\n \n \t\tif (isPresent != cond) {\n-\t\t\terrors.append(\"\\n - Mod \").append(candidate.getInfo().getId()).append(\" \").append(errorType).append(\" mod \").append(dependency).append(\", \");\n-\n+\t\t\terrors.append(getDependencyVersionRequirements(dependency)).append(\" of mod \")\n+\t\t\t\t\t.append(depCandidate == null ? depModId : getCandidateName(depCandidate)).append(\", \");\n \t\t\tif (depCandidate == null) {\n-\t\t\t\terrors.append(\"which is missing\");\n+\t\t\t\tappendMissingDependencyError(errors, dependency);\n \t\t\t} else if (cond) {\n-\t\t\t\terrors.append(\"but a different version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\tappendUnsatisfiedDependencyError(errors, dependency, depCandidate);\n \t\t\t} else if (errorType.contains(\"conf\")) {\n \t\t\t\t// CONFLICTS WITH\n-\t\t\t\terrors.append(\"but the conflicting version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\tappendConflictError(errors, candidate, depCandidate);\n \t\t\t} else {\n-\t\t\t\terrors.append(\"but the breaking version is present: \").append(depCandidate.getInfo().getVersion());\n+\t\t\t\tappendBreakingError(errors, candidate, depCandidate);\n \t\t\t}\n-\n-\t\t\terrors.append(\"!\");\n \t\t}\n \t}\n \n+\tprivate void appendMissingDependencyError(StringBuilder errors, ModDependency dependency) {\n+\t\terrors.append(\"which is missing!\");\n+\t\terrors.append(\"\\n\\t - You must install \").append(getDependencyVersionRequirements(dependency)).append(\" of \")\n+\t\t\t\t.append(dependency.getModId()).append(\".\");\n+\t}\n+\n+\tprivate void appendUnsatisfiedDependencyError(StringBuilder errors, ModDependency dependency, ModCandidate depCandidate) {\n+\t\terrors.append(\"but a non-matching version is present: \").append(getCandidateFriendlyVersion(depCandidate)).append(\"!\");\n+\t\terrors.append(\"\\n\\t - You must install \").append(getDependencyVersionRequirements(dependency)).append(\" of \")\n+\t\t\t\t.append(getCandidateName(depCandidate)).append(\".\");\n+\t}\n+\n+\tprivate void appendConflictError(StringBuilder errors, ModCandidate candidate, ModCandidate depCandidate) {\n+\t\tfinal String depCandidateVer = getCandidateFriendlyVersion(depCandidate);\n+\t\terrors.append(\"but a matching version is present: \").append(depCandidateVer).append(\"!\");\n+\t\terrors.append(\"\\n\\t - While this won't prevent you from starting the game,\");\n+\t\terrors.append(\" the developer(s) of \").append(getCandidateName(candidate));\n+\t\terrors.append(\" have found that version \").append(depCandidateVer).append(\" of \").append(getCandidateName(depCandidate));\n+\t\terrors.append(\" conflicts with their mod.\");\n+\t\terrors.append(\"\\n\\t - It is heavily recommended to remove one of the mods.\");\n+\t}\n+\n+\tprivate void appendBreakingError(StringBuilder errors, ModCandidate candidate, ModCandidate depCandidate) {\n+\t\tfinal String depCandidateVer = getCandidateFriendlyVersion(depCandidate);\n+\t\terrors.append(\"but a matching version is present: \").append(depCandidate.getInfo().getVersion()).append(\"!\");\n+\t\terrors.append(\"\\n\\t - The developer(s) of \").append(getCandidateName(candidate));\n+\t\terrors.append(\" have found that version \").append(depCandidateVer).append(\" of \").append(getCandidateName(depCandidate));\n+\t\terrors.append(\" critically conflicts with their mod.\");\n+\t\terrors.append(\"\\n\\t - You must remove one of the mods.\");\n+\t}\n+\n+\tprivate static String getCandidateName(ModCandidate candidate) {\n+\t\treturn \"'\" + candidate.getInfo().getName() + \"' (\" + candidate.getInfo().getId() + \")\";\n+\t}\n+\n+\tprivate static String getCandidateFriendlyVersion(ModCandidate candidate) {\n+\t\treturn candidate.getInfo().getVersion().getFriendlyString();\n+\t}\n+\n+\tprivate static String getDependencyVersionRequirements(ModDependency dependency) {\n+\t\treturn dependency.getVersionRequirements().stream().map(predicate -> {\n+\t\t\tString version = predicate.getVersion();\n+\t\t\tString[] parts;\n+\t\t\tswitch(predicate.getType()) {\n+\t\t\tcase ANY:\n+\t\t\t\treturn \"any version\";\n+\t\t\tcase EQUALS:\n+\t\t\t\treturn \"version \" + version;\n+\t\t\tcase GREATER_THAN:\n+\t\t\t\treturn \"any version after \" + version;\n+\t\t\tcase LESSER_THAN:\n+\t\t\t\treturn \"any version before \" + version;\n+\t\t\tcase GREATER_THAN_OR_EQUAL:\n+\t\t\t\treturn \"version \" + version + \" or later\";\n+\t\t\tcase LESSER_THAN_OR_EQUAL:\n+\t\t\t\treturn \"version \" + version + \" or earlier\";\n+\t\t\tcase SAME_MAJOR:\n+\t\t\t\tparts = version.split(\"\\\\.\");\n+\n+\t\t\t\tfor (int i = 1; i < parts.length; i++) {\n+\t\t\t\t\tparts[i] = \"x\";\n+\t\t\t\t}\n+\n+\t\t\t\treturn \"version \" + String.join(\".\", parts);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUyMjMzMg=="}, "originalCommit": {"oid": "2d07730695baa172b38c500fa08e7a344b41f1ce"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDE1NzI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/api/VersionPredicate.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMDo1ODowOVrOHe2NGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzozNDozOVrOHfS67Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjEwNzQxOA==", "bodyText": "in Java switch-case is fall through, you need to add break; before every case that you don't want to enter form the previous case.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r502107418", "createdAt": "2020-10-09T00:58:09Z", "author": {"login": "sfPlayer1"}, "path": "src/main/java/net/fabricmc/loader/api/VersionPredicate.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+public final class VersionPredicate {\n+\tpublic enum Type {\n+\t\tANY(\"*\"),\n+\t\tEQUALS(\"=\"),\n+\t\tGREATER_THAN(\">\"),\n+\t\tLESSER_THAN(\"<\"),\n+\t\tGREATER_THAN_OR_EQUAL(\">=\"),\n+\t\tLESSER_THAN_OR_EQUAL(\"<=\"),\n+\t\tSAME_MAJOR(\"^\"),\n+\t\tSAME_MAJOR_AND_MINOR(\"~\");\n+\n+\t\tprivate final String prefix;\n+\n+\t\tType(String prefix) {\n+\t\t\tthis.prefix = prefix;\n+\t\t}\n+\n+\t\tpublic String prefix() {\n+\t\t\treturn prefix;\n+\t\t}\n+\n+\t\tpublic String describe(String version) {\n+\t\t\treturn this == ANY ? prefix : prefix + version;\n+\t\t}\n+\t}\n+\n+\tprivate final Type type;\n+\tprivate final String version;\n+\n+\tpublic VersionPredicate(Type type, String version) {\n+\t\tthis.type = Objects.requireNonNull(type, \"type == null!\");\n+\t\tthis.version = Objects.requireNonNull(version, \"version == null!\");\n+\t}\n+\n+\tpublic Type getType() {\n+\t\treturn type;\n+\t}\n+\n+\tpublic String getVersion() {\n+\t\treturn version;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn type.describe(version);\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object o) {\n+\t\tif (this == o) {\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tif (o == null || getClass() != o.getClass()) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tVersionPredicate that = (VersionPredicate) o;\n+\t\treturn type == that.type && version.equals(that.version);\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\treturn Objects.hash(type, version);\n+\t}\n+\n+\tpublic static Set<VersionPredicate> parse(String... matchers) {\n+\t\tSet<VersionPredicate> predicates = new HashSet<>(matchers.length);\n+\n+\t\tfor (String matcher : matchers) {\n+\t\t\tchar firstChar = matcher.charAt(0);\n+\t\t\tchar secondChar = 0;\n+\n+\t\t\tif (matcher.length() > 1) {\n+\t\t\t\tsecondChar = matcher.charAt(1);\n+\t\t\t}\n+\n+\t\t\tswitch (firstChar) {\n+\t\t\tcase '*':\n+\t\t\t\tif (matcher.length() == 1) {\n+\t\t\t\t\tpredicates.clear();\n+\t\t\t\t\tpredicates.add(new VersionPredicate(Type.ANY, \"\"));\n+\t\t\t\t} else {\n+\t\t\t\t\tpredicates.add(new VersionPredicate(Type.EQUALS, matcher));\n+\t\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d07730695baa172b38c500fa08e7a344b41f1ce"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2ODUzMQ==", "bodyText": "...Oops.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r502568531", "createdAt": "2020-10-09T17:16:33Z", "author": {"login": "Leo40Git"}, "path": "src/main/java/net/fabricmc/loader/api/VersionPredicate.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+public final class VersionPredicate {\n+\tpublic enum Type {\n+\t\tANY(\"*\"),\n+\t\tEQUALS(\"=\"),\n+\t\tGREATER_THAN(\">\"),\n+\t\tLESSER_THAN(\"<\"),\n+\t\tGREATER_THAN_OR_EQUAL(\">=\"),\n+\t\tLESSER_THAN_OR_EQUAL(\"<=\"),\n+\t\tSAME_MAJOR(\"^\"),\n+\t\tSAME_MAJOR_AND_MINOR(\"~\");\n+\n+\t\tprivate final String prefix;\n+\n+\t\tType(String prefix) {\n+\t\t\tthis.prefix = prefix;\n+\t\t}\n+\n+\t\tpublic String prefix() {\n+\t\t\treturn prefix;\n+\t\t}\n+\n+\t\tpublic String describe(String version) {\n+\t\t\treturn this == ANY ? prefix : prefix + version;\n+\t\t}\n+\t}\n+\n+\tprivate final Type type;\n+\tprivate final String version;\n+\n+\tpublic VersionPredicate(Type type, String version) {\n+\t\tthis.type = Objects.requireNonNull(type, \"type == null!\");\n+\t\tthis.version = Objects.requireNonNull(version, \"version == null!\");\n+\t}\n+\n+\tpublic Type getType() {\n+\t\treturn type;\n+\t}\n+\n+\tpublic String getVersion() {\n+\t\treturn version;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn type.describe(version);\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object o) {\n+\t\tif (this == o) {\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tif (o == null || getClass() != o.getClass()) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tVersionPredicate that = (VersionPredicate) o;\n+\t\treturn type == that.type && version.equals(that.version);\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\treturn Objects.hash(type, version);\n+\t}\n+\n+\tpublic static Set<VersionPredicate> parse(String... matchers) {\n+\t\tSet<VersionPredicate> predicates = new HashSet<>(matchers.length);\n+\n+\t\tfor (String matcher : matchers) {\n+\t\t\tchar firstChar = matcher.charAt(0);\n+\t\t\tchar secondChar = 0;\n+\n+\t\t\tif (matcher.length() > 1) {\n+\t\t\t\tsecondChar = matcher.charAt(1);\n+\t\t\t}\n+\n+\t\t\tswitch (firstChar) {\n+\t\t\tcase '*':\n+\t\t\t\tif (matcher.length() == 1) {\n+\t\t\t\t\tpredicates.clear();\n+\t\t\t\t\tpredicates.add(new VersionPredicate(Type.ANY, \"\"));\n+\t\t\t\t} else {\n+\t\t\t\t\tpredicates.add(new VersionPredicate(Type.EQUALS, matcher));\n+\t\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjEwNzQxOA=="}, "originalCommit": {"oid": "2d07730695baa172b38c500fa08e7a344b41f1ce"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU3NzkwMQ==", "bodyText": "Missing breaks have been added.", "url": "https://github.com/FabricMC/fabric-loader/pull/277#discussion_r502577901", "createdAt": "2020-10-09T17:34:39Z", "author": {"login": "Leo40Git"}, "path": "src/main/java/net/fabricmc/loader/api/VersionPredicate.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2016 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.loader.api;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+public final class VersionPredicate {\n+\tpublic enum Type {\n+\t\tANY(\"*\"),\n+\t\tEQUALS(\"=\"),\n+\t\tGREATER_THAN(\">\"),\n+\t\tLESSER_THAN(\"<\"),\n+\t\tGREATER_THAN_OR_EQUAL(\">=\"),\n+\t\tLESSER_THAN_OR_EQUAL(\"<=\"),\n+\t\tSAME_MAJOR(\"^\"),\n+\t\tSAME_MAJOR_AND_MINOR(\"~\");\n+\n+\t\tprivate final String prefix;\n+\n+\t\tType(String prefix) {\n+\t\t\tthis.prefix = prefix;\n+\t\t}\n+\n+\t\tpublic String prefix() {\n+\t\t\treturn prefix;\n+\t\t}\n+\n+\t\tpublic String describe(String version) {\n+\t\t\treturn this == ANY ? prefix : prefix + version;\n+\t\t}\n+\t}\n+\n+\tprivate final Type type;\n+\tprivate final String version;\n+\n+\tpublic VersionPredicate(Type type, String version) {\n+\t\tthis.type = Objects.requireNonNull(type, \"type == null!\");\n+\t\tthis.version = Objects.requireNonNull(version, \"version == null!\");\n+\t}\n+\n+\tpublic Type getType() {\n+\t\treturn type;\n+\t}\n+\n+\tpublic String getVersion() {\n+\t\treturn version;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn type.describe(version);\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object o) {\n+\t\tif (this == o) {\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tif (o == null || getClass() != o.getClass()) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tVersionPredicate that = (VersionPredicate) o;\n+\t\treturn type == that.type && version.equals(that.version);\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\treturn Objects.hash(type, version);\n+\t}\n+\n+\tpublic static Set<VersionPredicate> parse(String... matchers) {\n+\t\tSet<VersionPredicate> predicates = new HashSet<>(matchers.length);\n+\n+\t\tfor (String matcher : matchers) {\n+\t\t\tchar firstChar = matcher.charAt(0);\n+\t\t\tchar secondChar = 0;\n+\n+\t\t\tif (matcher.length() > 1) {\n+\t\t\t\tsecondChar = matcher.charAt(1);\n+\t\t\t}\n+\n+\t\t\tswitch (firstChar) {\n+\t\t\tcase '*':\n+\t\t\t\tif (matcher.length() == 1) {\n+\t\t\t\t\tpredicates.clear();\n+\t\t\t\t\tpredicates.add(new VersionPredicate(Type.ANY, \"\"));\n+\t\t\t\t} else {\n+\t\t\t\t\tpredicates.add(new VersionPredicate(Type.EQUALS, matcher));\n+\t\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjEwNzQxOA=="}, "originalCommit": {"oid": "2d07730695baa172b38c500fa08e7a344b41f1ce"}, "originalPosition": 108}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3309, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}