{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMjgxNjg5", "number": 265, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMjoyMDoyM1rOEJR9_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMTowOToxMlrOEJTPBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTY3MDM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMjoyMDoyM1rOGpwOVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMTo1Mjo1OFrOGpyXVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzNDkwMA==", "bodyText": "Imo Errors should not be rethrown as runtime exceptions.", "url": "https://github.com/FabricMC/fabric-loader/pull/265#discussion_r446434900", "createdAt": "2020-06-26T22:20:23Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -462,11 +462,13 @@ protected void compute() {\n \t\t\ttry (InputStream stream = Files.newInputStream(modJson)) {\n \t\t\t\tinfo = ModMetadataParser.getMods(loader, stream);\n \t\t\t} catch (JsonParseException e) {\n-\t\t\t\tthrow new RuntimeException(\"Mod at '\" + path + \"' has an invalid fabric.mod.json file!\", e);\n+\t\t\t\tthrow new RuntimeException(String.format(\"Mod at \\\"%s\\\" has an invalid fabric.mod.json file!\", path), e);\n \t\t\t} catch (NoSuchFileException e) {\n \t\t\t\tinfo = new LoaderModMetadata[0];\n \t\t\t} catch (IOException e) {\n-\t\t\t\tthrow new RuntimeException(\"Failed to open fabric.mod.json for mod at '\" + path + \"'!\", e);\n+\t\t\t\tthrow new RuntimeException(String.format(\"Failed to open fabric.mod.json for mod at \\\"%s\\\"!\", path), e);\n+\t\t\t} catch (Throwable t) {\n+\t\t\t\tthrow new RuntimeException(String.format(\"Failed to parse mod metadata for mod at \\\"%s\\\"\", path), t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "012a6e360a0d3c1bf68ce016d51544a3acffb20a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NTMzMQ==", "bodyText": "All of these exceptions kill the game though (or at least prevent it from being started normally) - would it make much of a difference to handle Errors differently to Exceptions?", "url": "https://github.com/FabricMC/fabric-loader/pull/265#discussion_r446465331", "createdAt": "2020-06-27T01:06:17Z", "author": {"login": "AlexIIL"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -462,11 +462,13 @@ protected void compute() {\n \t\t\ttry (InputStream stream = Files.newInputStream(modJson)) {\n \t\t\t\tinfo = ModMetadataParser.getMods(loader, stream);\n \t\t\t} catch (JsonParseException e) {\n-\t\t\t\tthrow new RuntimeException(\"Mod at '\" + path + \"' has an invalid fabric.mod.json file!\", e);\n+\t\t\t\tthrow new RuntimeException(String.format(\"Mod at \\\"%s\\\" has an invalid fabric.mod.json file!\", path), e);\n \t\t\t} catch (NoSuchFileException e) {\n \t\t\t\tinfo = new LoaderModMetadata[0];\n \t\t\t} catch (IOException e) {\n-\t\t\t\tthrow new RuntimeException(\"Failed to open fabric.mod.json for mod at '\" + path + \"'!\", e);\n+\t\t\t\tthrow new RuntimeException(String.format(\"Failed to open fabric.mod.json for mod at \\\"%s\\\"!\", path), e);\n+\t\t\t} catch (Throwable t) {\n+\t\t\t\tthrow new RuntimeException(String.format(\"Failed to parse mod metadata for mod at \\\"%s\\\"\", path), t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzNDkwMA=="}, "originalCommit": {"oid": "012a6e360a0d3c1bf68ce016d51544a3acffb20a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NTUwMg==", "bodyText": "(Plus any exception thrown here is ultimately wrapped in a ModResolutionException anyway).", "url": "https://github.com/FabricMC/fabric-loader/pull/265#discussion_r446465502", "createdAt": "2020-06-27T01:08:01Z", "author": {"login": "AlexIIL"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -462,11 +462,13 @@ protected void compute() {\n \t\t\ttry (InputStream stream = Files.newInputStream(modJson)) {\n \t\t\t\tinfo = ModMetadataParser.getMods(loader, stream);\n \t\t\t} catch (JsonParseException e) {\n-\t\t\t\tthrow new RuntimeException(\"Mod at '\" + path + \"' has an invalid fabric.mod.json file!\", e);\n+\t\t\t\tthrow new RuntimeException(String.format(\"Mod at \\\"%s\\\" has an invalid fabric.mod.json file!\", path), e);\n \t\t\t} catch (NoSuchFileException e) {\n \t\t\t\tinfo = new LoaderModMetadata[0];\n \t\t\t} catch (IOException e) {\n-\t\t\t\tthrow new RuntimeException(\"Failed to open fabric.mod.json for mod at '\" + path + \"'!\", e);\n+\t\t\t\tthrow new RuntimeException(String.format(\"Failed to open fabric.mod.json for mod at \\\"%s\\\"!\", path), e);\n+\t\t\t} catch (Throwable t) {\n+\t\t\t\tthrow new RuntimeException(String.format(\"Failed to parse mod metadata for mod at \\\"%s\\\"\", path), t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzNDkwMA=="}, "originalCommit": {"oid": "012a6e360a0d3c1bf68ce016d51544a3acffb20a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NjA2Mw==", "bodyText": "Well one of the exceptions just sets the mod metadata array to be empty (NoSuchFileException)", "url": "https://github.com/FabricMC/fabric-loader/pull/265#discussion_r446466063", "createdAt": "2020-06-27T01:13:29Z", "author": {"login": "i509VCB"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -462,11 +462,13 @@ protected void compute() {\n \t\t\ttry (InputStream stream = Files.newInputStream(modJson)) {\n \t\t\t\tinfo = ModMetadataParser.getMods(loader, stream);\n \t\t\t} catch (JsonParseException e) {\n-\t\t\t\tthrow new RuntimeException(\"Mod at '\" + path + \"' has an invalid fabric.mod.json file!\", e);\n+\t\t\t\tthrow new RuntimeException(String.format(\"Mod at \\\"%s\\\" has an invalid fabric.mod.json file!\", path), e);\n \t\t\t} catch (NoSuchFileException e) {\n \t\t\t\tinfo = new LoaderModMetadata[0];\n \t\t\t} catch (IOException e) {\n-\t\t\t\tthrow new RuntimeException(\"Failed to open fabric.mod.json for mod at '\" + path + \"'!\", e);\n+\t\t\t\tthrow new RuntimeException(String.format(\"Failed to open fabric.mod.json for mod at \\\"%s\\\"!\", path), e);\n+\t\t\t} catch (Throwable t) {\n+\t\t\t\tthrow new RuntimeException(String.format(\"Failed to parse mod metadata for mod at \\\"%s\\\"\", path), t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzNDkwMA=="}, "originalCommit": {"oid": "012a6e360a0d3c1bf68ce016d51544a3acffb20a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2OTk3NA==", "bodyText": "Yes, but as that's a checked exception it can only be thrown by Files.newInputStream() so it can't be thrown by this method (which means I think we can ignore it for this).", "url": "https://github.com/FabricMC/fabric-loader/pull/265#discussion_r446469974", "createdAt": "2020-06-27T01:52:58Z", "author": {"login": "AlexIIL"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -462,11 +462,13 @@ protected void compute() {\n \t\t\ttry (InputStream stream = Files.newInputStream(modJson)) {\n \t\t\t\tinfo = ModMetadataParser.getMods(loader, stream);\n \t\t\t} catch (JsonParseException e) {\n-\t\t\t\tthrow new RuntimeException(\"Mod at '\" + path + \"' has an invalid fabric.mod.json file!\", e);\n+\t\t\t\tthrow new RuntimeException(String.format(\"Mod at \\\"%s\\\" has an invalid fabric.mod.json file!\", path), e);\n \t\t\t} catch (NoSuchFileException e) {\n \t\t\t\tinfo = new LoaderModMetadata[0];\n \t\t\t} catch (IOException e) {\n-\t\t\t\tthrow new RuntimeException(\"Failed to open fabric.mod.json for mod at '\" + path + \"'!\", e);\n+\t\t\t\tthrow new RuntimeException(String.format(\"Failed to open fabric.mod.json for mod at \\\"%s\\\"!\", path), e);\n+\t\t\t} catch (Throwable t) {\n+\t\t\t\tthrow new RuntimeException(String.format(\"Failed to parse mod metadata for mod at \\\"%s\\\"\", path), t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzNDkwMA=="}, "originalCommit": {"oid": "012a6e360a0d3c1bf68ce016d51544a3acffb20a"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTg3NzgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/metadata/ModMetadataParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMTowOToxMlrOGpyGPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMTowOToxMlrOGpyGPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NTU5OQ==", "bodyText": "Just FYI you probably don't need to make any changes to this file as it's all caught in ModResolver.", "url": "https://github.com/FabricMC/fabric-loader/pull/265#discussion_r446465599", "createdAt": "2020-06-27T01:09:12Z", "author": {"login": "AlexIIL"}, "path": "src/main/java/net/fabricmc/loader/metadata/ModMetadataParser.java", "diffHunk": "@@ -51,17 +51,22 @@\n \tprivate static final JsonParser JSON_PARSER = new JsonParser();\n \n \tprivate static LoaderModMetadata getMod(FabricLoader loader, JsonObject object) {\n-\t\tif (!object.has(\"schemaVersion\")) {\n-\t\t\treturn GSON_V0.fromJson(object, ModMetadataV0.class);\n-\t\t} else {\n-\t\t\t//noinspection SwitchStatementWithTooFewBranches\n-\t\t\tswitch (object.get(\"schemaVersion\").getAsInt()) {\n-\t\t\t\tcase 1:\n-\t\t\t\t\treturn GSON_V1.fromJson(object, ModMetadataV1.class);\n-\t\t\t\tdefault:\n-\t\t\t\t\tloader.getLogger().warn(\"Mod ID \" + (object.has(\"id\") ? object.get(\"id\").getAsString() : \"<unknown>\") + \" has invalid schema version: \" + object.get(\"schemaVersion\").getAsInt());\n-\t\t\t\t\treturn null;\n+\t\ttry {\n+\t\t\tif (!object.has(\"schemaVersion\")) {\n+\t\t\t\treturn GSON_V0.fromJson(object, ModMetadataV0.class);\n+\t\t\t} else {\n+\t\t\t\t//noinspection SwitchStatementWithTooFewBranches\n+\t\t\t\tswitch (object.get(\"schemaVersion\").getAsInt()) {\n+\t\t\t\t\tcase 1:\n+\t\t\t\t\t\treturn GSON_V1.fromJson(object, ModMetadataV1.class);\n+\t\t\t\t\tdefault:\n+\t\t\t\t\t\tloader.getLogger().warn(\"Mod ID \" + (object.has(\"id\") ? object.get(\"id\").getAsString() : \"<unknown>\") + \" has invalid schema version: \" + object.get(\"schemaVersion\").getAsInt());\n+\t\t\t\t\t\treturn null;\n+\t\t\t\t}\n \t\t\t}\n+\t\t} catch (Throwable t) {\n+\t\t\t// Catch all exceptions that could occur from parsing metadata and rethrow as JsonSyntaxException.\n+\t\t\tthrow new JsonParseException(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "012a6e360a0d3c1bf68ce016d51544a3acffb20a"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3301, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}