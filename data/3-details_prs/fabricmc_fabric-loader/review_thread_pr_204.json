{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0NzE4NDg0", "number": 204, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNzo0ODoyMVrODfciDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNzo0OToxMVrODfciuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Mjk5OTE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNzo0ODoyMVrOFpJzTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDo1MzoyN1rOGQRwgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY5NjUyNw==", "bodyText": "How about printing the problem?", "url": "https://github.com/FabricMC/fabric-loader/pull/204#discussion_r378696527", "createdAt": "2020-02-13T07:48:21Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -220,7 +222,10 @@ private static IVecInt toVecInt(IntStream stream) {\n \t\t\t\t\t}\n \t\t\t\t}\n \n-\t\t\t\t// assume satisfied\n+\t\t\t\t// TODO: better error message, have a way to figure out precisely which mods are causing this\n+\t\t\t\tif (!problem.isSatisfiable(assumptions)) {\n+\t\t\t\t\tthrow new ModResolutionException(\"Could not resolve mod collection due to an unknown error\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66e0f436e350e8806d83ff541a6001109ab8336c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcwMDk2MA==", "bodyText": "Oh yeah, that might be helpful. I'm not sure what form it'd appear in, so we'll have to see.", "url": "https://github.com/FabricMC/fabric-loader/pull/204#discussion_r378700960", "createdAt": "2020-02-13T08:01:13Z", "author": {"login": "LemmaEOF"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -220,7 +222,10 @@ private static IVecInt toVecInt(IntStream stream) {\n \t\t\t\t\t}\n \t\t\t\t}\n \n-\t\t\t\t// assume satisfied\n+\t\t\t\t// TODO: better error message, have a way to figure out precisely which mods are causing this\n+\t\t\t\tif (!problem.isSatisfiable(assumptions)) {\n+\t\t\t\t\tthrow new ModResolutionException(\"Could not resolve mod collection due to an unknown error\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY5NjUyNw=="}, "originalCommit": {"oid": "66e0f436e350e8806d83ff541a6001109ab8336c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcyNzYxOA==", "bodyText": "I dont think this is much better than the real error, fixing the issue will be best", "url": "https://github.com/FabricMC/fabric-loader/pull/204#discussion_r378727618", "createdAt": "2020-02-13T09:02:07Z", "author": {"login": "modmuss50"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -220,7 +222,10 @@ private static IVecInt toVecInt(IntStream stream) {\n \t\t\t\t\t}\n \t\t\t\t}\n \n-\t\t\t\t// assume satisfied\n+\t\t\t\t// TODO: better error message, have a way to figure out precisely which mods are causing this\n+\t\t\t\tif (!problem.isSatisfiable(assumptions)) {\n+\t\t\t\t\tthrow new ModResolutionException(\"Could not resolve mod collection due to an unknown error\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY5NjUyNw=="}, "originalCommit": {"oid": "66e0f436e350e8806d83ff541a6001109ab8336c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcxNDgyNw==", "bodyText": "Hmm, I just want you to print more info on the unsatisfied problem either in log or in exception message..", "url": "https://github.com/FabricMC/fabric-loader/pull/204#discussion_r419714827", "createdAt": "2020-05-04T20:41:05Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -220,7 +222,10 @@ private static IVecInt toVecInt(IntStream stream) {\n \t\t\t\t\t}\n \t\t\t\t}\n \n-\t\t\t\t// assume satisfied\n+\t\t\t\t// TODO: better error message, have a way to figure out precisely which mods are causing this\n+\t\t\t\tif (!problem.isSatisfiable(assumptions)) {\n+\t\t\t\t\tthrow new ModResolutionException(\"Could not resolve mod collection due to an unknown error\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY5NjUyNw=="}, "originalCommit": {"oid": "66e0f436e350e8806d83ff541a6001109ab8336c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcxNjI4OQ==", "bodyText": "I have not been able to confirm that problems have a satisfactory toString implementation.", "url": "https://github.com/FabricMC/fabric-loader/pull/204#discussion_r419716289", "createdAt": "2020-05-04T20:43:53Z", "author": {"login": "LemmaEOF"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -220,7 +222,10 @@ private static IVecInt toVecInt(IntStream stream) {\n \t\t\t\t\t}\n \t\t\t\t}\n \n-\t\t\t\t// assume satisfied\n+\t\t\t\t// TODO: better error message, have a way to figure out precisely which mods are causing this\n+\t\t\t\tif (!problem.isSatisfiable(assumptions)) {\n+\t\t\t\t\tthrow new ModResolutionException(\"Could not resolve mod collection due to an unknown error\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY5NjUyNw=="}, "originalCommit": {"oid": "66e0f436e350e8806d83ff541a6001109ab8336c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcyMTM0Ng==", "bodyText": "Sure, it you don't print the problem guess we can attach a debugger at this throw breakpoint and just look up the problem from the debugger.", "url": "https://github.com/FabricMC/fabric-loader/pull/204#discussion_r419721346", "createdAt": "2020-05-04T20:53:27Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -220,7 +222,10 @@ private static IVecInt toVecInt(IntStream stream) {\n \t\t\t\t\t}\n \t\t\t\t}\n \n-\t\t\t\t// assume satisfied\n+\t\t\t\t// TODO: better error message, have a way to figure out precisely which mods are causing this\n+\t\t\t\tif (!problem.isSatisfiable(assumptions)) {\n+\t\t\t\t\tthrow new ModResolutionException(\"Could not resolve mod collection due to an unknown error\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY5NjUyNw=="}, "originalCommit": {"oid": "66e0f436e350e8806d83ff541a6001109ab8336c"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzAwMDg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNzo0OToxMVrOFpJ0Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODozOTo0MlrOFpfJ7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY5Njc5NA==", "bodyText": "any example of crash of zip error before?", "url": "https://github.com/FabricMC/fabric-loader/pull/204#discussion_r378696794", "createdAt": "2020-02-13T07:49:11Z", "author": {"login": "liach"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -455,6 +460,8 @@ protected void compute() {\n \t\t\t\t\trootDir = jarFs.get().getRootDirectories().iterator().next();\n \t\t\t\t} catch (IOException e) {\n \t\t\t\t\tthrow new RuntimeException(\"Failed to open mod JAR at \" + path + \"!\");\n+\t\t\t\t} catch (ZipError e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66e0f436e350e8806d83ff541a6001109ab8336c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY5NzYxMg==", "bodyText": "here's one, as well as in #185", "url": "https://github.com/FabricMC/fabric-loader/pull/204#discussion_r378697612", "createdAt": "2020-02-13T07:51:40Z", "author": {"login": "LemmaEOF"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -455,6 +460,8 @@ protected void compute() {\n \t\t\t\t\trootDir = jarFs.get().getRootDirectories().iterator().next();\n \t\t\t\t} catch (IOException e) {\n \t\t\t\t\tthrow new RuntimeException(\"Failed to open mod JAR at \" + path + \"!\");\n+\t\t\t\t} catch (ZipError e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY5Njc5NA=="}, "originalCommit": {"oid": "66e0f436e350e8806d83ff541a6001109ab8336c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcyNzM0NA==", "bodyText": "Yes, this is a good idea.", "url": "https://github.com/FabricMC/fabric-loader/pull/204#discussion_r378727344", "createdAt": "2020-02-13T09:01:39Z", "author": {"login": "modmuss50"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -455,6 +460,8 @@ protected void compute() {\n \t\t\t\t\trootDir = jarFs.get().getRootDirectories().iterator().next();\n \t\t\t\t} catch (IOException e) {\n \t\t\t\t\tthrow new RuntimeException(\"Failed to open mod JAR at \" + path + \"!\");\n+\t\t\t\t} catch (ZipError e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY5Njc5NA=="}, "originalCommit": {"oid": "66e0f436e350e8806d83ff541a6001109ab8336c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk0MzU1MQ==", "bodyText": "No option to make this into a multi-cache and treat both the same?", "url": "https://github.com/FabricMC/fabric-loader/pull/204#discussion_r378943551", "createdAt": "2020-02-13T15:44:20Z", "author": {"login": "Sollace"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -455,6 +460,8 @@ protected void compute() {\n \t\t\t\t\trootDir = jarFs.get().getRootDirectories().iterator().next();\n \t\t\t\t} catch (IOException e) {\n \t\t\t\t\tthrow new RuntimeException(\"Failed to open mod JAR at \" + path + \"!\");\n+\t\t\t\t} catch (ZipError e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY5Njc5NA=="}, "originalCommit": {"oid": "66e0f436e350e8806d83ff541a6001109ab8336c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk0Mzc2OA==", "bodyText": "*catch", "url": "https://github.com/FabricMC/fabric-loader/pull/204#discussion_r378943768", "createdAt": "2020-02-13T15:44:42Z", "author": {"login": "Sollace"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -455,6 +460,8 @@ protected void compute() {\n \t\t\t\t\trootDir = jarFs.get().getRootDirectories().iterator().next();\n \t\t\t\t} catch (IOException e) {\n \t\t\t\t\tthrow new RuntimeException(\"Failed to open mod JAR at \" + path + \"!\");\n+\t\t\t\t} catch (ZipError e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY5Njc5NA=="}, "originalCommit": {"oid": "66e0f436e350e8806d83ff541a6001109ab8336c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA0NjM4MA==", "bodyText": "It could be a multi-catch, but I feel like having different messages for different errors is better.", "url": "https://github.com/FabricMC/fabric-loader/pull/204#discussion_r379046380", "createdAt": "2020-02-13T18:39:42Z", "author": {"login": "LemmaEOF"}, "path": "src/main/java/net/fabricmc/loader/discovery/ModResolver.java", "diffHunk": "@@ -455,6 +460,8 @@ protected void compute() {\n \t\t\t\t\trootDir = jarFs.get().getRootDirectories().iterator().next();\n \t\t\t\t} catch (IOException e) {\n \t\t\t\t\tthrow new RuntimeException(\"Failed to open mod JAR at \" + path + \"!\");\n+\t\t\t\t} catch (ZipError e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY5Njc5NA=="}, "originalCommit": {"oid": "66e0f436e350e8806d83ff541a6001109ab8336c"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3277, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}