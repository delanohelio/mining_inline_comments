{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNzMzNDI5", "number": 60, "reviewThreads": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwOToyOTozNFrODv6SzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzo0MzoyNFrODym8WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTY0NzQ4OnYy", "diffSide": "RIGHT", "path": "patchwork-world-types/src/main/java/net/minecraftforge/common/extensions/IForgeWorldType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwOToyOTozNFrOGCm3aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwOToyOTozNFrOGCm3aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM4NzExNQ==", "bodyText": "I've left this line, but commented, as it's the original forge implementation. However the way I'm doing world types separates LevelGeneratorType from IForgeWorldType, so we use the below line I added.\nI can remove this line completely if you want", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r405387115", "createdAt": "2020-04-08T09:29:34Z", "author": {"login": "valoeghese"}, "path": "patchwork-world-types/src/main/java/net/minecraftforge/common/extensions/IForgeWorldType.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.common.extensions;\n+\n+import java.util.function.LongFunction;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.CustomizeBuffetLevelScreen;\n+import net.minecraft.client.gui.screen.CustomizeFlatLevelScreen;\n+import net.minecraft.client.gui.screen.world.CreateWorldScreen;\n+import net.minecraft.world.IWorld;\n+import net.minecraft.world.World;\n+import net.minecraft.world.biome.layer.AddBambooJungleLayer;\n+import net.minecraft.world.biome.layer.EaseBiomeEdgeLayer;\n+import net.minecraft.world.biome.layer.ScaleLayer;\n+import net.minecraft.world.biome.layer.SetBaseBiomesLayer;\n+import net.minecraft.world.biome.layer.util.LayerFactory;\n+import net.minecraft.world.biome.layer.util.LayerSampleContext;\n+import net.minecraft.world.biome.layer.util.LayerSampler;\n+import net.minecraft.world.gen.chunk.ChunkGenerator;\n+import net.minecraft.world.gen.chunk.OverworldChunkGeneratorConfig;\n+import net.minecraft.world.level.LevelGeneratorType;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+import net.patchworkmc.impl.worldtypes.LevelGeneratorTypeFactory;\n+import net.patchworkmc.mixin.worldtypes.AccessorBiomeLayers;\n+\n+public interface IForgeWorldType {\n+\tdefault LevelGeneratorType getWorldType() {\n+\t\t//return (LevelGeneratorType) this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ad70af5a2457fc8c3c817a69d2318585bb91f1"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTY3NjM3OnYy", "diffSide": "RIGHT", "path": "patchwork-world-types/src/main/java/net/minecraftforge/common/extensions/IForgeWorldType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwOTozNzowNVrOGCnJ9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMjo1OToxNFrOGDD3yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM5MTg2MA==", "bodyText": "uSe tHe @lINk siNcE maPPinGs mighT chAnGE", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r405391860", "createdAt": "2020-04-08T09:37:05Z", "author": {"login": "ramidzkh"}, "path": "patchwork-world-types/src/main/java/net/minecraftforge/common/extensions/IForgeWorldType.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.common.extensions;\n+\n+import java.util.function.LongFunction;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.CustomizeBuffetLevelScreen;\n+import net.minecraft.client.gui.screen.CustomizeFlatLevelScreen;\n+import net.minecraft.client.gui.screen.world.CreateWorldScreen;\n+import net.minecraft.world.IWorld;\n+import net.minecraft.world.World;\n+import net.minecraft.world.biome.layer.AddBambooJungleLayer;\n+import net.minecraft.world.biome.layer.EaseBiomeEdgeLayer;\n+import net.minecraft.world.biome.layer.ScaleLayer;\n+import net.minecraft.world.biome.layer.SetBaseBiomesLayer;\n+import net.minecraft.world.biome.layer.util.LayerFactory;\n+import net.minecraft.world.biome.layer.util.LayerSampleContext;\n+import net.minecraft.world.biome.layer.util.LayerSampler;\n+import net.minecraft.world.gen.chunk.ChunkGenerator;\n+import net.minecraft.world.gen.chunk.OverworldChunkGeneratorConfig;\n+import net.minecraft.world.level.LevelGeneratorType;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+import net.patchworkmc.impl.worldtypes.LevelGeneratorTypeFactory;\n+import net.patchworkmc.mixin.worldtypes.AccessorBiomeLayers;\n+\n+public interface IForgeWorldType {\n+\tdefault LevelGeneratorType getWorldType() {\n+\t\t//return (LevelGeneratorType) this;\n+\t\treturn LevelGeneratorTypeFactory.getLevelGeneratorType(this); // Patchwork: separate IForgeWorldType and LevelGeneratorType\n+\t}\n+\n+\t/**\n+\t * Called when 'Create New World' button is pressed before starting game.\n+\t */\n+\tdefault void onGUICreateWorldPress() {\n+\t}\n+\n+\t/**\n+\t * Called when the 'Customize' button is pressed on world creation GUI.\n+\t *\n+\t * @param mc  The Minecraft instance", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ad70af5a2457fc8c3c817a69d2318585bb91f1"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg2MjM0Nw==", "bodyText": "no", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r405862347", "createdAt": "2020-04-08T22:59:14Z", "author": {"login": "valoeghese"}, "path": "patchwork-world-types/src/main/java/net/minecraftforge/common/extensions/IForgeWorldType.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.common.extensions;\n+\n+import java.util.function.LongFunction;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.CustomizeBuffetLevelScreen;\n+import net.minecraft.client.gui.screen.CustomizeFlatLevelScreen;\n+import net.minecraft.client.gui.screen.world.CreateWorldScreen;\n+import net.minecraft.world.IWorld;\n+import net.minecraft.world.World;\n+import net.minecraft.world.biome.layer.AddBambooJungleLayer;\n+import net.minecraft.world.biome.layer.EaseBiomeEdgeLayer;\n+import net.minecraft.world.biome.layer.ScaleLayer;\n+import net.minecraft.world.biome.layer.SetBaseBiomesLayer;\n+import net.minecraft.world.biome.layer.util.LayerFactory;\n+import net.minecraft.world.biome.layer.util.LayerSampleContext;\n+import net.minecraft.world.biome.layer.util.LayerSampler;\n+import net.minecraft.world.gen.chunk.ChunkGenerator;\n+import net.minecraft.world.gen.chunk.OverworldChunkGeneratorConfig;\n+import net.minecraft.world.level.LevelGeneratorType;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+import net.patchworkmc.impl.worldtypes.LevelGeneratorTypeFactory;\n+import net.patchworkmc.mixin.worldtypes.AccessorBiomeLayers;\n+\n+public interface IForgeWorldType {\n+\tdefault LevelGeneratorType getWorldType() {\n+\t\t//return (LevelGeneratorType) this;\n+\t\treturn LevelGeneratorTypeFactory.getLevelGeneratorType(this); // Patchwork: separate IForgeWorldType and LevelGeneratorType\n+\t}\n+\n+\t/**\n+\t * Called when 'Create New World' button is pressed before starting game.\n+\t */\n+\tdefault void onGUICreateWorldPress() {\n+\t}\n+\n+\t/**\n+\t * Called when the 'Customize' button is pressed on world creation GUI.\n+\t *\n+\t * @param mc  The Minecraft instance", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM5MTg2MA=="}, "originalCommit": {"oid": "99ad70af5a2457fc8c3c817a69d2318585bb91f1"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODkzNDY4OnYy", "diffSide": "RIGHT", "path": "patchwork-world-types/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTozOToyNVrOGDGr2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTozOToyNVrOGDGr2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkwODQ0MQ==", "bodyText": "Perhaps since WorldType is just the :voldethonk: name for LevelGeneratorType, perhaps patchwork-level-generators would be better? It's also line with fabric-level-generators from FabricMC/fabric#483.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r405908441", "createdAt": "2020-04-09T01:39:25Z", "author": {"login": "coderbot16"}, "path": "patchwork-world-types/build.gradle", "diffHunk": "@@ -0,0 +1,2 @@\n+archivesBaseName = \"patchwork-world-types\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb5f901292cf410007a0587d645da266cc86af7"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODkzNjAwOnYy", "diffSide": "RIGHT", "path": "patchwork-world-types/src/main/java/net/minecraftforge/common/extensions/IForgeWorldType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTo0MDoyMVrOGDGssA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTo0MDoyMVrOGDGssA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkwODY1Ng==", "bodyText": "these kinds of param comments are useless imo, one of the more annoying parts in forge javadoc", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r405908656", "createdAt": "2020-04-09T01:40:21Z", "author": {"login": "coderbot16"}, "path": "patchwork-world-types/src/main/java/net/minecraftforge/common/extensions/IForgeWorldType.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.common.extensions;\n+\n+import java.util.function.LongFunction;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.CustomizeBuffetLevelScreen;\n+import net.minecraft.client.gui.screen.CustomizeFlatLevelScreen;\n+import net.minecraft.client.gui.screen.world.CreateWorldScreen;\n+import net.minecraft.world.IWorld;\n+import net.minecraft.world.World;\n+import net.minecraft.world.biome.layer.AddBambooJungleLayer;\n+import net.minecraft.world.biome.layer.EaseBiomeEdgeLayer;\n+import net.minecraft.world.biome.layer.ScaleLayer;\n+import net.minecraft.world.biome.layer.SetBaseBiomesLayer;\n+import net.minecraft.world.biome.layer.util.LayerFactory;\n+import net.minecraft.world.biome.layer.util.LayerSampleContext;\n+import net.minecraft.world.biome.layer.util.LayerSampler;\n+import net.minecraft.world.gen.chunk.ChunkGenerator;\n+import net.minecraft.world.gen.chunk.OverworldChunkGeneratorConfig;\n+import net.minecraft.world.level.LevelGeneratorType;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+import net.patchworkmc.mixin.worldtypes.AccessorBiomeLayers;\n+\n+public interface IForgeWorldType {\n+\tdefault LevelGeneratorType getWorldType() {\n+\t\treturn (LevelGeneratorType) this;\n+\t}\n+\n+\t/**\n+\t * Called when 'Create New World' button is pressed before starting game.\n+\t */\n+\tdefault void onGUICreateWorldPress() {\n+\t}\n+\n+\t/**\n+\t * Called when the 'Customize' button is pressed on world creation GUI.\n+\t *\n+\t * @param mc  The Minecraft instance\n+\t * @param gui the createworld GUI", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb5f901292cf410007a0587d645da266cc86af7"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODkzNjY0OnYy", "diffSide": "RIGHT", "path": "patchwork-world-types/src/main/java/net/minecraftforge/common/extensions/IForgeWorldType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTo0MDo1MVrOGDGtFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTo0MDo1MVrOGDGtFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkwODc1Ng==", "bodyText": ":voldethonk:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tdefault void onCustomizeButton(MinecraftClient mc, CreateWorldScreen gui) {\n          \n          \n            \n            \tdefault void onCustomizeButton(MinecraftClient client, CreateWorldScreen screen) {", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r405908756", "createdAt": "2020-04-09T01:40:51Z", "author": {"login": "coderbot16"}, "path": "patchwork-world-types/src/main/java/net/minecraftforge/common/extensions/IForgeWorldType.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.common.extensions;\n+\n+import java.util.function.LongFunction;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.CustomizeBuffetLevelScreen;\n+import net.minecraft.client.gui.screen.CustomizeFlatLevelScreen;\n+import net.minecraft.client.gui.screen.world.CreateWorldScreen;\n+import net.minecraft.world.IWorld;\n+import net.minecraft.world.World;\n+import net.minecraft.world.biome.layer.AddBambooJungleLayer;\n+import net.minecraft.world.biome.layer.EaseBiomeEdgeLayer;\n+import net.minecraft.world.biome.layer.ScaleLayer;\n+import net.minecraft.world.biome.layer.SetBaseBiomesLayer;\n+import net.minecraft.world.biome.layer.util.LayerFactory;\n+import net.minecraft.world.biome.layer.util.LayerSampleContext;\n+import net.minecraft.world.biome.layer.util.LayerSampler;\n+import net.minecraft.world.gen.chunk.ChunkGenerator;\n+import net.minecraft.world.gen.chunk.OverworldChunkGeneratorConfig;\n+import net.minecraft.world.level.LevelGeneratorType;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+import net.patchworkmc.mixin.worldtypes.AccessorBiomeLayers;\n+\n+public interface IForgeWorldType {\n+\tdefault LevelGeneratorType getWorldType() {\n+\t\treturn (LevelGeneratorType) this;\n+\t}\n+\n+\t/**\n+\t * Called when 'Create New World' button is pressed before starting game.\n+\t */\n+\tdefault void onGUICreateWorldPress() {\n+\t}\n+\n+\t/**\n+\t * Called when the 'Customize' button is pressed on world creation GUI.\n+\t *\n+\t * @param mc  The Minecraft instance\n+\t * @param gui the createworld GUI\n+\t */\n+\t@Environment(EnvType.CLIENT)\n+\tdefault void onCustomizeButton(MinecraftClient mc, CreateWorldScreen gui) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb5f901292cf410007a0587d645da266cc86af7"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODkzNzc2OnYy", "diffSide": "RIGHT", "path": "patchwork-world-types/src/main/java/net/minecraftforge/common/extensions/IForgeWorldType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTo0MTo0MVrOGDGt2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTo0MTo0MVrOGDGt2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkwODk1NA==", "bodyText": "No need to fully qualify Random (probably from when it got copied out of the Forge patches anyways). Also, a mixin to SlimeEntity is needed to make this work (https://github.com/PatchworkMC/YarnForge/blob/04d384add800bc395f4934507721f72eb733389f/patches/minecraft/net/minecraft/entity/mob/SlimeEntity.java.patch#L55)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tdefault boolean handleSlimeSpawnReduction(java.util.Random random, IWorld world) {\n          \n          \n            \n            \tdefault boolean handleSlimeSpawnReduction(Random random, IWorld world) {", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r405908954", "createdAt": "2020-04-09T01:41:41Z", "author": {"login": "coderbot16"}, "path": "patchwork-world-types/src/main/java/net/minecraftforge/common/extensions/IForgeWorldType.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.common.extensions;\n+\n+import java.util.function.LongFunction;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.CustomizeBuffetLevelScreen;\n+import net.minecraft.client.gui.screen.CustomizeFlatLevelScreen;\n+import net.minecraft.client.gui.screen.world.CreateWorldScreen;\n+import net.minecraft.world.IWorld;\n+import net.minecraft.world.World;\n+import net.minecraft.world.biome.layer.AddBambooJungleLayer;\n+import net.minecraft.world.biome.layer.EaseBiomeEdgeLayer;\n+import net.minecraft.world.biome.layer.ScaleLayer;\n+import net.minecraft.world.biome.layer.SetBaseBiomesLayer;\n+import net.minecraft.world.biome.layer.util.LayerFactory;\n+import net.minecraft.world.biome.layer.util.LayerSampleContext;\n+import net.minecraft.world.biome.layer.util.LayerSampler;\n+import net.minecraft.world.gen.chunk.ChunkGenerator;\n+import net.minecraft.world.gen.chunk.OverworldChunkGeneratorConfig;\n+import net.minecraft.world.level.LevelGeneratorType;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+import net.patchworkmc.mixin.worldtypes.AccessorBiomeLayers;\n+\n+public interface IForgeWorldType {\n+\tdefault LevelGeneratorType getWorldType() {\n+\t\treturn (LevelGeneratorType) this;\n+\t}\n+\n+\t/**\n+\t * Called when 'Create New World' button is pressed before starting game.\n+\t */\n+\tdefault void onGUICreateWorldPress() {\n+\t}\n+\n+\t/**\n+\t * Called when the 'Customize' button is pressed on world creation GUI.\n+\t *\n+\t * @param mc  The Minecraft instance\n+\t * @param gui the createworld GUI\n+\t */\n+\t@Environment(EnvType.CLIENT)\n+\tdefault void onCustomizeButton(MinecraftClient mc, CreateWorldScreen gui) {\n+\t\tif (this == LevelGeneratorType.FLAT) {\n+\t\t\tmc.openScreen(new CustomizeFlatLevelScreen(gui, gui.generatorOptionsTag));\n+\t\t} else if (this == LevelGeneratorType.BUFFET) {\n+\t\t\tmc.openScreen(new CustomizeBuffetLevelScreen(gui, gui.generatorOptionsTag));\n+\t\t}\n+\t}\n+\n+\tdefault boolean handleSlimeSpawnReduction(java.util.Random random, IWorld world) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb5f901292cf410007a0587d645da266cc86af7"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODk0NzQwOnYy", "diffSide": "RIGHT", "path": "patchwork-world-types/src/main/java/net/minecraftforge/common/extensions/IForgeWorldType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTo0NzoxN1rOGDGzlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTo0NzoxN1rOGDGzlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxMDQyMg==", "bodyText": "make sure to use Yarn names instead of :transformer: names or I:transformer: names", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r405910422", "createdAt": "2020-04-09T01:47:17Z", "author": {"login": "coderbot16"}, "path": "patchwork-world-types/src/main/java/net/minecraftforge/common/extensions/IForgeWorldType.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.common.extensions;\n+\n+import java.util.function.LongFunction;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.CustomizeBuffetLevelScreen;\n+import net.minecraft.client.gui.screen.CustomizeFlatLevelScreen;\n+import net.minecraft.client.gui.screen.world.CreateWorldScreen;\n+import net.minecraft.world.IWorld;\n+import net.minecraft.world.World;\n+import net.minecraft.world.biome.layer.AddBambooJungleLayer;\n+import net.minecraft.world.biome.layer.EaseBiomeEdgeLayer;\n+import net.minecraft.world.biome.layer.ScaleLayer;\n+import net.minecraft.world.biome.layer.SetBaseBiomesLayer;\n+import net.minecraft.world.biome.layer.util.LayerFactory;\n+import net.minecraft.world.biome.layer.util.LayerSampleContext;\n+import net.minecraft.world.biome.layer.util.LayerSampler;\n+import net.minecraft.world.gen.chunk.ChunkGenerator;\n+import net.minecraft.world.gen.chunk.OverworldChunkGeneratorConfig;\n+import net.minecraft.world.level.LevelGeneratorType;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+import net.patchworkmc.mixin.worldtypes.AccessorBiomeLayers;\n+\n+public interface IForgeWorldType {\n+\tdefault LevelGeneratorType getWorldType() {\n+\t\treturn (LevelGeneratorType) this;\n+\t}\n+\n+\t/**\n+\t * Called when 'Create New World' button is pressed before starting game.\n+\t */\n+\tdefault void onGUICreateWorldPress() {\n+\t}\n+\n+\t/**\n+\t * Called when the 'Customize' button is pressed on world creation GUI.\n+\t *\n+\t * @param mc  The Minecraft instance\n+\t * @param gui the createworld GUI\n+\t */\n+\t@Environment(EnvType.CLIENT)\n+\tdefault void onCustomizeButton(MinecraftClient mc, CreateWorldScreen gui) {\n+\t\tif (this == LevelGeneratorType.FLAT) {\n+\t\t\tmc.openScreen(new CustomizeFlatLevelScreen(gui, gui.generatorOptionsTag));\n+\t\t} else if (this == LevelGeneratorType.BUFFET) {\n+\t\t\tmc.openScreen(new CustomizeBuffetLevelScreen(gui, gui.generatorOptionsTag));\n+\t\t}\n+\t}\n+\n+\tdefault boolean handleSlimeSpawnReduction(java.util.Random random, IWorld world) {\n+\t\treturn this == LevelGeneratorType.FLAT && random.nextInt(4) != 1;\n+\t}\n+\n+\tdefault double getHorizon(World world) {\n+\t\treturn this == LevelGeneratorType.FLAT ? 0.0D : 63.0D;\n+\t}\n+\n+\tdefault double voidFadeMagnitude() {\n+\t\treturn this == LevelGeneratorType.FLAT ? 1.0D : 0.03125D;\n+\t}\n+\n+\t/**\n+\t * Get the height to render the clouds for this world type.\n+\t *\n+\t * @return The height to render clouds at\n+\t */\n+\tdefault float getCloudHeight() {\n+\t\treturn 128.0F;\n+\t}\n+\n+\tdefault ChunkGenerator<?> createChunkGenerator(World world) {\n+\t\treturn world.dimension.createChunkGenerator();\n+\t}\n+\n+\t/**\n+\t * Allows modifying the {@link IAreaFactory} used for this type's biome\n+\t * generation.\n+\t *\n+\t * @param <T>            The type of {@link IArea}.\n+\t * @param <C>            The type of {@link IContextExtended}.\n+\t * @param parentLayer    The parent layer to feed into any layer you return\n+\t * @param chunkSettings  The {@link OverworldGenSettings} used to create the\n+\t *                       {@link GenLayerBiome}.\n+\t * @param contextFactory A {@link LongFunction} factory to create contexts of\n+\t *                       the supplied size.\n+\t * @return An {@link IAreaFactory} that representing the Biomes to be generated.\n+\t * @see SetBaseBiomesLayer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb5f901292cf410007a0587d645da266cc86af7"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODk0ODMzOnYy", "diffSide": "RIGHT", "path": "patchwork-world-types/src/main/java/net/patchworkmc/impl/worldtypes/PatchworkLevelGeneratorTypes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTo0Nzo1MVrOGDG0LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTo0Nzo1MVrOGDG0LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxMDU3Mw==", "bodyText": "Please use Mixins if possible", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r405910573", "createdAt": "2020-04-09T01:47:51Z", "author": {"login": "coderbot16"}, "path": "patchwork-world-types/src/main/java/net/patchworkmc/impl/worldtypes/PatchworkLevelGeneratorTypes.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.impl.worldtypes;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+\n+import net.minecraft.world.level.LevelGeneratorType;\n+\n+import net.fabricmc.loader.api.FabricLoader;\n+\n+public class PatchworkLevelGeneratorTypes {\n+\tprivate static final Field TYPES;\n+\n+\tpublic static int getNextID() {\n+\t\tLevelGeneratorType[] types;\n+\n+\t\ttry {\n+\t\t\ttypes = (LevelGeneratorType[]) TYPES.get(null);\n+\n+\t\t\tfor (int x = 0; x < types.length; x++) {\n+\t\t\t\tif (types[x] == null) {\n+\t\t\t\t\treturn x;\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tint old = types.length;\n+\t\t\tTYPES.set(null, Arrays.copyOf(types, old + 16));\n+\t\t\treturn old;\n+\t\t} catch (IllegalArgumentException | IllegalAccessException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tstatic {\n+\t\ttry {\n+\t\t\tTYPES = LevelGeneratorType.class.getDeclaredField(FabricLoader.getInstance().isDevelopmentEnvironment() ? \"TYPES\" : \"field_9279\");\n+\t\t\t// make accessible\n+\t\t\tTYPES.setAccessible(true);\n+\t\t\t// make non final\n+\t\t\tField modifiers = Field.class.getDeclaredField(\"modifiers\");\n+\t\t\tmodifiers.setAccessible(true);\n+\t\t\tmodifiers.setInt(TYPES, TYPES.getModifiers() & ~Modifier.FINAL);\n+\t\t} catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb5f901292cf410007a0587d645da266cc86af7"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODk1MTM5OnYy", "diffSide": "RIGHT", "path": "patchwork-world-types/src/main/java/net/patchworkmc/mixin/worldtypes/MixinDimension.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTo0OTo0MlrOGDG18w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTo0OTo0MlrOGDG18w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxMTAyNw==", "bodyText": "This will always be false since there is no mixin to implement IForgeWorldType on LevelGeneratorType", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r405911027", "createdAt": "2020-04-09T01:49:42Z", "author": {"login": "coderbot16"}, "path": "patchwork-world-types/src/main/java/net/patchworkmc/mixin/worldtypes/MixinDimension.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.worldtypes;\n+\n+import net.minecraftforge.common.extensions.IForgeWorldType;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.world.World;\n+import net.minecraft.world.dimension.Dimension;\n+import net.minecraft.world.level.LevelGeneratorType;\n+\n+@Mixin(Dimension.class)\n+public class MixinDimension {\n+\t@Shadow\n+\t@Final\n+\tprivate World world;\n+\n+\t@Inject(at = @At(\"HEAD\"), method = \"getCloudHeight\", cancellable = true)\n+\tprivate void getCloudHeight(CallbackInfoReturnable<Float> info) {\n+\t\tLevelGeneratorType generatorType = this.world.getLevelProperties().getGeneratorType();\n+\n+\t\tif (generatorType instanceof IForgeWorldType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb5f901292cf410007a0587d645da266cc86af7"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODk1MzIzOnYy", "diffSide": "RIGHT", "path": "patchwork-world-types/src/main/java/net/patchworkmc/mixin/worldtypes/MixinDimension.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTo1MDo0MFrOGDG2_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTo1MDo0MFrOGDG2_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxMTI5Mw==", "bodyText": "Ditto", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r405911293", "createdAt": "2020-04-09T01:50:40Z", "author": {"login": "coderbot16"}, "path": "patchwork-world-types/src/main/java/net/patchworkmc/mixin/worldtypes/MixinDimension.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.worldtypes;\n+\n+import net.minecraftforge.common.extensions.IForgeWorldType;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.world.World;\n+import net.minecraft.world.dimension.Dimension;\n+import net.minecraft.world.level.LevelGeneratorType;\n+\n+@Mixin(Dimension.class)\n+public class MixinDimension {\n+\t@Shadow\n+\t@Final\n+\tprivate World world;\n+\n+\t@Inject(at = @At(\"HEAD\"), method = \"getCloudHeight\", cancellable = true)\n+\tprivate void getCloudHeight(CallbackInfoReturnable<Float> info) {\n+\t\tLevelGeneratorType generatorType = this.world.getLevelProperties().getGeneratorType();\n+\n+\t\tif (generatorType instanceof IForgeWorldType) {\n+\t\t\tinfo.setReturnValue(((IForgeWorldType) generatorType).getCloudHeight());\n+\t\t}\n+\t}\n+\n+\t@Inject(at = @At(\"HEAD\"), method = \"getHorizonShadingRatio\", cancellable = true)\n+\tprivate void getHorizonShadingRatio(CallbackInfoReturnable<Double> info) {\n+\t\tLevelGeneratorType generatorType = this.world.getLevelProperties().getGeneratorType();\n+\n+\t\tif (generatorType instanceof IForgeWorldType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb5f901292cf410007a0587d645da266cc86af7"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODk1NTc3OnYy", "diffSide": "RIGHT", "path": "patchwork-world-types/src/main/java/net/patchworkmc/mixin/worldtypes/AccessorLevelGeneratorType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTo1MjoxMVrOGDG4fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTo1MjoxMVrOGDG4fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxMTY3OQ==", "bodyText": "I think the plan is to use an Access Widener instead so that patcher can patch the mods to call the constructor directly", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r405911679", "createdAt": "2020-04-09T01:52:11Z", "author": {"login": "coderbot16"}, "path": "patchwork-world-types/src/main/java/net/patchworkmc/mixin/worldtypes/AccessorLevelGeneratorType.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.worldtypes;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.gen.Invoker;\n+\n+import net.minecraft.world.level.LevelGeneratorType;\n+\n+@Mixin(LevelGeneratorType.class)\n+public interface AccessorLevelGeneratorType {\n+\t@Invoker(\"<init>\")\n+\tstatic LevelGeneratorType create(int id, String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb5f901292cf410007a0587d645da266cc86af7"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODk3MzcyOnYy", "diffSide": "RIGHT", "path": "patchwork-world-types/src/main/java/net/minecraftforge/common/extensions/IForgeWorldType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMjowMTo1NlrOGDHC5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMjowMTo1NlrOGDHC5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxNDM0Mg==", "bodyText": "This doesn't work without a mixin to CreateWorldScreen (https://github.com/PatchworkMC/YarnForge/blob/04d384add800bc395f4934507721f72eb733389f/patches/minecraft/net/minecraft/client/gui/screen/world/CreateWorldScreen.java.patch#L35)", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r405914342", "createdAt": "2020-04-09T02:01:56Z", "author": {"login": "coderbot16"}, "path": "patchwork-world-types/src/main/java/net/minecraftforge/common/extensions/IForgeWorldType.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.common.extensions;\n+\n+import java.util.function.LongFunction;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.CustomizeBuffetLevelScreen;\n+import net.minecraft.client.gui.screen.CustomizeFlatLevelScreen;\n+import net.minecraft.client.gui.screen.world.CreateWorldScreen;\n+import net.minecraft.world.IWorld;\n+import net.minecraft.world.World;\n+import net.minecraft.world.biome.layer.AddBambooJungleLayer;\n+import net.minecraft.world.biome.layer.EaseBiomeEdgeLayer;\n+import net.minecraft.world.biome.layer.ScaleLayer;\n+import net.minecraft.world.biome.layer.SetBaseBiomesLayer;\n+import net.minecraft.world.biome.layer.util.LayerFactory;\n+import net.minecraft.world.biome.layer.util.LayerSampleContext;\n+import net.minecraft.world.biome.layer.util.LayerSampler;\n+import net.minecraft.world.gen.chunk.ChunkGenerator;\n+import net.minecraft.world.gen.chunk.OverworldChunkGeneratorConfig;\n+import net.minecraft.world.level.LevelGeneratorType;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+import net.patchworkmc.mixin.worldtypes.AccessorBiomeLayers;\n+\n+public interface IForgeWorldType {\n+\tdefault LevelGeneratorType getWorldType() {\n+\t\treturn (LevelGeneratorType) this;\n+\t}\n+\n+\t/**\n+\t * Called when 'Create New World' button is pressed before starting game.\n+\t */\n+\tdefault void onGUICreateWorldPress() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb5f901292cf410007a0587d645da266cc86af7"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODk3NTI4OnYy", "diffSide": "RIGHT", "path": "patchwork-world-types/src/main/java/net/minecraftforge/common/extensions/IForgeWorldType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMjowMjo1N1rOGDHD4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMjowMjo1N1rOGDHD4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxNDU5Mw==", "bodyText": "This also does not work without a mixin to CreateWorldScreen (https://github.com/PatchworkMC/YarnForge/blob/04d384add800bc395f4934507721f72eb733389f/patches/minecraft/net/minecraft/client/gui/screen/world/CreateWorldScreen.java.patch#L27)", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r405914593", "createdAt": "2020-04-09T02:02:57Z", "author": {"login": "coderbot16"}, "path": "patchwork-world-types/src/main/java/net/minecraftforge/common/extensions/IForgeWorldType.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.common.extensions;\n+\n+import java.util.function.LongFunction;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.CustomizeBuffetLevelScreen;\n+import net.minecraft.client.gui.screen.CustomizeFlatLevelScreen;\n+import net.minecraft.client.gui.screen.world.CreateWorldScreen;\n+import net.minecraft.world.IWorld;\n+import net.minecraft.world.World;\n+import net.minecraft.world.biome.layer.AddBambooJungleLayer;\n+import net.minecraft.world.biome.layer.EaseBiomeEdgeLayer;\n+import net.minecraft.world.biome.layer.ScaleLayer;\n+import net.minecraft.world.biome.layer.SetBaseBiomesLayer;\n+import net.minecraft.world.biome.layer.util.LayerFactory;\n+import net.minecraft.world.biome.layer.util.LayerSampleContext;\n+import net.minecraft.world.biome.layer.util.LayerSampler;\n+import net.minecraft.world.gen.chunk.ChunkGenerator;\n+import net.minecraft.world.gen.chunk.OverworldChunkGeneratorConfig;\n+import net.minecraft.world.level.LevelGeneratorType;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+import net.patchworkmc.mixin.worldtypes.AccessorBiomeLayers;\n+\n+public interface IForgeWorldType {\n+\tdefault LevelGeneratorType getWorldType() {\n+\t\treturn (LevelGeneratorType) this;\n+\t}\n+\n+\t/**\n+\t * Called when 'Create New World' button is pressed before starting game.\n+\t */\n+\tdefault void onGUICreateWorldPress() {\n+\t}\n+\n+\t/**\n+\t * Called when the 'Customize' button is pressed on world creation GUI.\n+\t *\n+\t * @param mc  The Minecraft instance\n+\t * @param gui the createworld GUI\n+\t */\n+\t@Environment(EnvType.CLIENT)\n+\tdefault void onCustomizeButton(MinecraftClient mc, CreateWorldScreen gui) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb5f901292cf410007a0587d645da266cc86af7"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODk4NTEyOnYy", "diffSide": "RIGHT", "path": "patchwork-world-types/src/main/java/net/minecraftforge/common/extensions/IForgeWorldType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMjowOTowMFrOGDHJxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMjowOTowMFrOGDHJxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxNjEwMg==", "bodyText": "Need a mixin to World to make this work (https://github.com/PatchworkMC/YarnForge/blob/04d384add800bc395f4934507721f72eb733389f/patches/minecraft/net/minecraft/world/World.java.patch#L550)", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r405916102", "createdAt": "2020-04-09T02:09:00Z", "author": {"login": "coderbot16"}, "path": "patchwork-world-types/src/main/java/net/minecraftforge/common/extensions/IForgeWorldType.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.common.extensions;\n+\n+import java.util.function.LongFunction;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.CustomizeBuffetLevelScreen;\n+import net.minecraft.client.gui.screen.CustomizeFlatLevelScreen;\n+import net.minecraft.client.gui.screen.world.CreateWorldScreen;\n+import net.minecraft.world.IWorld;\n+import net.minecraft.world.World;\n+import net.minecraft.world.biome.layer.AddBambooJungleLayer;\n+import net.minecraft.world.biome.layer.EaseBiomeEdgeLayer;\n+import net.minecraft.world.biome.layer.ScaleLayer;\n+import net.minecraft.world.biome.layer.SetBaseBiomesLayer;\n+import net.minecraft.world.biome.layer.util.LayerFactory;\n+import net.minecraft.world.biome.layer.util.LayerSampleContext;\n+import net.minecraft.world.biome.layer.util.LayerSampler;\n+import net.minecraft.world.gen.chunk.ChunkGenerator;\n+import net.minecraft.world.gen.chunk.OverworldChunkGeneratorConfig;\n+import net.minecraft.world.level.LevelGeneratorType;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+import net.patchworkmc.mixin.worldtypes.AccessorBiomeLayers;\n+\n+public interface IForgeWorldType {\n+\tdefault LevelGeneratorType getWorldType() {\n+\t\treturn (LevelGeneratorType) this;\n+\t}\n+\n+\t/**\n+\t * Called when 'Create New World' button is pressed before starting game.\n+\t */\n+\tdefault void onGUICreateWorldPress() {\n+\t}\n+\n+\t/**\n+\t * Called when the 'Customize' button is pressed on world creation GUI.\n+\t *\n+\t * @param mc  The Minecraft instance\n+\t * @param gui the createworld GUI\n+\t */\n+\t@Environment(EnvType.CLIENT)\n+\tdefault void onCustomizeButton(MinecraftClient mc, CreateWorldScreen gui) {\n+\t\tif (this == LevelGeneratorType.FLAT) {\n+\t\t\tmc.openScreen(new CustomizeFlatLevelScreen(gui, gui.generatorOptionsTag));\n+\t\t} else if (this == LevelGeneratorType.BUFFET) {\n+\t\t\tmc.openScreen(new CustomizeBuffetLevelScreen(gui, gui.generatorOptionsTag));\n+\t\t}\n+\t}\n+\n+\tdefault boolean handleSlimeSpawnReduction(java.util.Random random, IWorld world) {\n+\t\treturn this == LevelGeneratorType.FLAT && random.nextInt(4) != 1;\n+\t}\n+\n+\tdefault double getHorizon(World world) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb5f901292cf410007a0587d645da266cc86af7"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODk4OTQ5OnYy", "diffSide": "RIGHT", "path": "patchwork-world-types/src/main/java/net/minecraftforge/common/extensions/IForgeWorldType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMjoxMTozMVrOGDHMZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMjoxMTozMVrOGDHMZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxNjc3NA==", "bodyText": "Need to mixin to ServerWorld to make this work (https://github.com/PatchworkMC/YarnForge/blob/04d384add800bc395f4934507721f72eb733389f/patches/minecraft/net/minecraft/server/world/ServerWorld.java.patch#L24)", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r405916774", "createdAt": "2020-04-09T02:11:31Z", "author": {"login": "coderbot16"}, "path": "patchwork-world-types/src/main/java/net/minecraftforge/common/extensions/IForgeWorldType.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.common.extensions;\n+\n+import java.util.function.LongFunction;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.CustomizeBuffetLevelScreen;\n+import net.minecraft.client.gui.screen.CustomizeFlatLevelScreen;\n+import net.minecraft.client.gui.screen.world.CreateWorldScreen;\n+import net.minecraft.world.IWorld;\n+import net.minecraft.world.World;\n+import net.minecraft.world.biome.layer.AddBambooJungleLayer;\n+import net.minecraft.world.biome.layer.EaseBiomeEdgeLayer;\n+import net.minecraft.world.biome.layer.ScaleLayer;\n+import net.minecraft.world.biome.layer.SetBaseBiomesLayer;\n+import net.minecraft.world.biome.layer.util.LayerFactory;\n+import net.minecraft.world.biome.layer.util.LayerSampleContext;\n+import net.minecraft.world.biome.layer.util.LayerSampler;\n+import net.minecraft.world.gen.chunk.ChunkGenerator;\n+import net.minecraft.world.gen.chunk.OverworldChunkGeneratorConfig;\n+import net.minecraft.world.level.LevelGeneratorType;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+import net.patchworkmc.mixin.worldtypes.AccessorBiomeLayers;\n+\n+public interface IForgeWorldType {\n+\tdefault LevelGeneratorType getWorldType() {\n+\t\treturn (LevelGeneratorType) this;\n+\t}\n+\n+\t/**\n+\t * Called when 'Create New World' button is pressed before starting game.\n+\t */\n+\tdefault void onGUICreateWorldPress() {\n+\t}\n+\n+\t/**\n+\t * Called when the 'Customize' button is pressed on world creation GUI.\n+\t *\n+\t * @param mc  The Minecraft instance\n+\t * @param gui the createworld GUI\n+\t */\n+\t@Environment(EnvType.CLIENT)\n+\tdefault void onCustomizeButton(MinecraftClient mc, CreateWorldScreen gui) {\n+\t\tif (this == LevelGeneratorType.FLAT) {\n+\t\t\tmc.openScreen(new CustomizeFlatLevelScreen(gui, gui.generatorOptionsTag));\n+\t\t} else if (this == LevelGeneratorType.BUFFET) {\n+\t\t\tmc.openScreen(new CustomizeBuffetLevelScreen(gui, gui.generatorOptionsTag));\n+\t\t}\n+\t}\n+\n+\tdefault boolean handleSlimeSpawnReduction(java.util.Random random, IWorld world) {\n+\t\treturn this == LevelGeneratorType.FLAT && random.nextInt(4) != 1;\n+\t}\n+\n+\tdefault double getHorizon(World world) {\n+\t\treturn this == LevelGeneratorType.FLAT ? 0.0D : 63.0D;\n+\t}\n+\n+\tdefault double voidFadeMagnitude() {\n+\t\treturn this == LevelGeneratorType.FLAT ? 1.0D : 0.03125D;\n+\t}\n+\n+\t/**\n+\t * Get the height to render the clouds for this world type.\n+\t *\n+\t * @return The height to render clouds at\n+\t */\n+\tdefault float getCloudHeight() {\n+\t\treturn 128.0F;\n+\t}\n+\n+\tdefault ChunkGenerator<?> createChunkGenerator(World world) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb5f901292cf410007a0587d645da266cc86af7"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODk5MjUzOnYy", "diffSide": "RIGHT", "path": "patchwork-world-types/src/main/java/net/minecraftforge/common/extensions/IForgeWorldType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMjoxMzowNVrOGDHOHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMjoxMzowNVrOGDHOHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxNzIxNQ==", "bodyText": "Need a mixin to BiomeLayers to make this work (https://github.com/PatchworkMC/YarnForge/blob/04d384add800bc395f4934507721f72eb733389f/patches/minecraft/net/minecraft/world/biome/layer/BiomeLayers.java.patch#L15)", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r405917215", "createdAt": "2020-04-09T02:13:05Z", "author": {"login": "coderbot16"}, "path": "patchwork-world-types/src/main/java/net/minecraftforge/common/extensions/IForgeWorldType.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.common.extensions;\n+\n+import java.util.function.LongFunction;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.CustomizeBuffetLevelScreen;\n+import net.minecraft.client.gui.screen.CustomizeFlatLevelScreen;\n+import net.minecraft.client.gui.screen.world.CreateWorldScreen;\n+import net.minecraft.world.IWorld;\n+import net.minecraft.world.World;\n+import net.minecraft.world.biome.layer.AddBambooJungleLayer;\n+import net.minecraft.world.biome.layer.EaseBiomeEdgeLayer;\n+import net.minecraft.world.biome.layer.ScaleLayer;\n+import net.minecraft.world.biome.layer.SetBaseBiomesLayer;\n+import net.minecraft.world.biome.layer.util.LayerFactory;\n+import net.minecraft.world.biome.layer.util.LayerSampleContext;\n+import net.minecraft.world.biome.layer.util.LayerSampler;\n+import net.minecraft.world.gen.chunk.ChunkGenerator;\n+import net.minecraft.world.gen.chunk.OverworldChunkGeneratorConfig;\n+import net.minecraft.world.level.LevelGeneratorType;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+import net.patchworkmc.mixin.worldtypes.AccessorBiomeLayers;\n+\n+public interface IForgeWorldType {\n+\tdefault LevelGeneratorType getWorldType() {\n+\t\treturn (LevelGeneratorType) this;\n+\t}\n+\n+\t/**\n+\t * Called when 'Create New World' button is pressed before starting game.\n+\t */\n+\tdefault void onGUICreateWorldPress() {\n+\t}\n+\n+\t/**\n+\t * Called when the 'Customize' button is pressed on world creation GUI.\n+\t *\n+\t * @param mc  The Minecraft instance\n+\t * @param gui the createworld GUI\n+\t */\n+\t@Environment(EnvType.CLIENT)\n+\tdefault void onCustomizeButton(MinecraftClient mc, CreateWorldScreen gui) {\n+\t\tif (this == LevelGeneratorType.FLAT) {\n+\t\t\tmc.openScreen(new CustomizeFlatLevelScreen(gui, gui.generatorOptionsTag));\n+\t\t} else if (this == LevelGeneratorType.BUFFET) {\n+\t\t\tmc.openScreen(new CustomizeBuffetLevelScreen(gui, gui.generatorOptionsTag));\n+\t\t}\n+\t}\n+\n+\tdefault boolean handleSlimeSpawnReduction(java.util.Random random, IWorld world) {\n+\t\treturn this == LevelGeneratorType.FLAT && random.nextInt(4) != 1;\n+\t}\n+\n+\tdefault double getHorizon(World world) {\n+\t\treturn this == LevelGeneratorType.FLAT ? 0.0D : 63.0D;\n+\t}\n+\n+\tdefault double voidFadeMagnitude() {\n+\t\treturn this == LevelGeneratorType.FLAT ? 1.0D : 0.03125D;\n+\t}\n+\n+\t/**\n+\t * Get the height to render the clouds for this world type.\n+\t *\n+\t * @return The height to render clouds at\n+\t */\n+\tdefault float getCloudHeight() {\n+\t\treturn 128.0F;\n+\t}\n+\n+\tdefault ChunkGenerator<?> createChunkGenerator(World world) {\n+\t\treturn world.dimension.createChunkGenerator();\n+\t}\n+\n+\t/**\n+\t * Allows modifying the {@link IAreaFactory} used for this type's biome\n+\t * generation.\n+\t *\n+\t * @param <T>            The type of {@link IArea}.\n+\t * @param <C>            The type of {@link IContextExtended}.\n+\t * @param parentLayer    The parent layer to feed into any layer you return\n+\t * @param chunkSettings  The {@link OverworldGenSettings} used to create the\n+\t *                       {@link GenLayerBiome}.\n+\t * @param contextFactory A {@link LongFunction} factory to create contexts of\n+\t *                       the supplied size.\n+\t * @return An {@link IAreaFactory} that representing the Biomes to be generated.\n+\t * @see SetBaseBiomesLayer\n+\t */\n+\tdefault <T extends LayerSampler, C extends LayerSampleContext<T>> LayerFactory<T> getBiomeLayer(LayerFactory<T> parentLayer, OverworldChunkGeneratorConfig chunkSettings, LongFunction<C> contextFactory) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb5f901292cf410007a0587d645da266cc86af7"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzA2MTE4OnYy", "diffSide": "RIGHT", "path": "patchwork-level-generators/src/main/java/net/patchworkmc/impl/levelgenerators/PatchworkGeneratorType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMToyMDoxN1rOGDuWOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMToyMDoxN1rOGDuWOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1ODI2Ng==", "bodyText": "add a javadoc explaining this is a marker interface that is automatically added to mod classes by Patcher", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r406558266", "createdAt": "2020-04-10T01:20:17Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-level-generators/src/main/java/net/patchworkmc/impl/levelgenerators/PatchworkGeneratorType.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.impl.levelgenerators;\n+\n+import net.minecraftforge.common.extensions.IForgeWorldType;\n+\n+public interface PatchworkGeneratorType extends IForgeWorldType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90402ca21988ef1cebde0260283c95c1246d6798"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzA2MjY0OnYy", "diffSide": "RIGHT", "path": "patchwork-level-generators/src/main/java/net/patchworkmc/impl/levelgenerators/PatchworkGeneratorType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMToyMTowOVrOGDuW_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMToyMTowOVrOGDuW_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1ODQ2MQ==", "bodyText": "This should probably be under api (see PatchworkBlockSettings etc.)", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r406558461", "createdAt": "2020-04-10T01:21:09Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-level-generators/src/main/java/net/patchworkmc/impl/levelgenerators/PatchworkGeneratorType.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.impl.levelgenerators;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90402ca21988ef1cebde0260283c95c1246d6798"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzA2NzkxOnYy", "diffSide": "RIGHT", "path": "patchwork-level-generators/src/main/java/net/patchworkmc/mixin/levelgenerators/AccessorBiomeLayers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMToyMzo1MlrOGDuZ1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMjoyNjowNVrOGDvRag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1OTE5MA==", "bodyText": "patchwork$stack -- I'm not even sure if this will apply properly how it is since it directly adds to the target class", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r406559190", "createdAt": "2020-04-10T01:23:52Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-level-generators/src/main/java/net/patchworkmc/mixin/levelgenerators/AccessorBiomeLayers.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.levelgenerators;\n+\n+import java.util.function.LongFunction;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.gen.Invoker;\n+\n+import net.minecraft.world.biome.layer.BiomeLayers;\n+import net.minecraft.world.biome.layer.type.ParentedLayer;\n+import net.minecraft.world.biome.layer.util.LayerFactory;\n+import net.minecraft.world.biome.layer.util.LayerSampleContext;\n+import net.minecraft.world.biome.layer.util.LayerSampler;\n+\n+@Mixin(BiomeLayers.class)\n+public interface AccessorBiomeLayers {\n+\t@Invoker(\"stack\")\n+\tstatic <T extends LayerSampler, C extends LayerSampleContext<T>> LayerFactory<T> stack(long seed, ParentedLayer layer, LayerFactory<T> parent, int count, LongFunction<C> contextProvider) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90402ca21988ef1cebde0260283c95c1246d6798"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU3MzQxOA==", "bodyText": "we need a mod to test this on", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r406573418", "createdAt": "2020-04-10T02:26:05Z", "author": {"login": "valoeghese"}, "path": "patchwork-level-generators/src/main/java/net/patchworkmc/mixin/levelgenerators/AccessorBiomeLayers.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.levelgenerators;\n+\n+import java.util.function.LongFunction;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.gen.Invoker;\n+\n+import net.minecraft.world.biome.layer.BiomeLayers;\n+import net.minecraft.world.biome.layer.type.ParentedLayer;\n+import net.minecraft.world.biome.layer.util.LayerFactory;\n+import net.minecraft.world.biome.layer.util.LayerSampleContext;\n+import net.minecraft.world.biome.layer.util.LayerSampler;\n+\n+@Mixin(BiomeLayers.class)\n+public interface AccessorBiomeLayers {\n+\t@Invoker(\"stack\")\n+\tstatic <T extends LayerSampler, C extends LayerSampleContext<T>> LayerFactory<T> stack(long seed, ParentedLayer layer, LayerFactory<T> parent, int count, LongFunction<C> contextProvider) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1OTE5MA=="}, "originalCommit": {"oid": "90402ca21988ef1cebde0260283c95c1246d6798"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzA3MDQ4OnYy", "diffSide": "RIGHT", "path": "patchwork-level-generators/src/main/java/net/patchworkmc/mixin/levelgenerators/MixinBiomeLayers.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMToyNTozOVrOGDubRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMjoyNjo0MFrOGDvR4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1OTU1Nw==", "bodyText": "Woah, could we get some spacing between blocks here?", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r406559557", "createdAt": "2020-04-10T01:25:39Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-level-generators/src/main/java/net/patchworkmc/mixin/levelgenerators/MixinBiomeLayers.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+ \n+package net.patchworkmc.mixin.levelgenerators;\n+\n+import java.util.function.LongFunction;\n+\n+import com.google.common.collect.ImmutableList;\n+import net.minecraftforge.common.extensions.IForgeWorldType;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.world.biome.layer.AddClimateLayers;\n+import net.minecraft.world.biome.layer.AddColdClimatesLayer;\n+import net.minecraft.world.biome.layer.AddDeepOceanLayer;\n+import net.minecraft.world.biome.layer.AddEdgeBiomesLayer;\n+import net.minecraft.world.biome.layer.AddHillsLayer;\n+import net.minecraft.world.biome.layer.AddIslandLayer;\n+import net.minecraft.world.biome.layer.AddMushroomIslandLayer;\n+import net.minecraft.world.biome.layer.AddRiversLayer;\n+import net.minecraft.world.biome.layer.AddSunflowerPlainsLayer;\n+import net.minecraft.world.biome.layer.ApplyOceanTemperatureLayer;\n+import net.minecraft.world.biome.layer.BiomeLayers;\n+import net.minecraft.world.biome.layer.CellScaleLayer;\n+import net.minecraft.world.biome.layer.ContinentLayer;\n+import net.minecraft.world.biome.layer.IncreaseEdgeCurvatureLayer;\n+import net.minecraft.world.biome.layer.NoiseToRiverLayer;\n+import net.minecraft.world.biome.layer.OceanTemperatureLayer;\n+import net.minecraft.world.biome.layer.ScaleLayer;\n+import net.minecraft.world.biome.layer.SimpleLandNoiseLayer;\n+import net.minecraft.world.biome.layer.SmoothenShorelineLayer;\n+import net.minecraft.world.biome.layer.type.ParentedLayer;\n+import net.minecraft.world.biome.layer.util.LayerFactory;\n+import net.minecraft.world.biome.layer.util.LayerSampleContext;\n+import net.minecraft.world.biome.layer.util.LayerSampler;\n+import net.minecraft.world.gen.chunk.OverworldChunkGeneratorConfig;\n+import net.minecraft.world.level.LevelGeneratorType;\n+\n+import net.patchworkmc.impl.levelgenerators.PatchworkGeneratorType;\n+\n+@Mixin(BiomeLayers.class)\n+public class MixinBiomeLayers {\n+\t@Shadow\n+\tprivate static <T extends LayerSampler, C extends LayerSampleContext<T>> LayerFactory<T> stack(long seed, ParentedLayer layer, LayerFactory<T> parent, int count, LongFunction<C> contextProvider) {\n+\t\tthrow new RuntimeException(\"Failed to shadow BiomeLayers#stack!\");\n+\t}\n+\n+\t@Inject(at = @At(\"HEAD\"), method = \"build\", cancellable = true)\n+\tprivate static <T extends LayerSampler, C extends LayerSampleContext<T>> void build(LevelGeneratorType generatorType, OverworldChunkGeneratorConfig settings, LongFunction<C> contextProvider, CallbackInfoReturnable<ImmutableList<LayerFactory<T>>> info) {\n+\t\tif (generatorType instanceof PatchworkGeneratorType) {\n+\t\t\tLayerFactory<T> continentLayer = ContinentLayer.INSTANCE.create(contextProvider.apply(1L));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90402ca21988ef1cebde0260283c95c1246d6798"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU3MzUwMw==", "bodyText": "checkstyle complains", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r406573503", "createdAt": "2020-04-10T02:26:34Z", "author": {"login": "valoeghese"}, "path": "patchwork-level-generators/src/main/java/net/patchworkmc/mixin/levelgenerators/MixinBiomeLayers.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+ \n+package net.patchworkmc.mixin.levelgenerators;\n+\n+import java.util.function.LongFunction;\n+\n+import com.google.common.collect.ImmutableList;\n+import net.minecraftforge.common.extensions.IForgeWorldType;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.world.biome.layer.AddClimateLayers;\n+import net.minecraft.world.biome.layer.AddColdClimatesLayer;\n+import net.minecraft.world.biome.layer.AddDeepOceanLayer;\n+import net.minecraft.world.biome.layer.AddEdgeBiomesLayer;\n+import net.minecraft.world.biome.layer.AddHillsLayer;\n+import net.minecraft.world.biome.layer.AddIslandLayer;\n+import net.minecraft.world.biome.layer.AddMushroomIslandLayer;\n+import net.minecraft.world.biome.layer.AddRiversLayer;\n+import net.minecraft.world.biome.layer.AddSunflowerPlainsLayer;\n+import net.minecraft.world.biome.layer.ApplyOceanTemperatureLayer;\n+import net.minecraft.world.biome.layer.BiomeLayers;\n+import net.minecraft.world.biome.layer.CellScaleLayer;\n+import net.minecraft.world.biome.layer.ContinentLayer;\n+import net.minecraft.world.biome.layer.IncreaseEdgeCurvatureLayer;\n+import net.minecraft.world.biome.layer.NoiseToRiverLayer;\n+import net.minecraft.world.biome.layer.OceanTemperatureLayer;\n+import net.minecraft.world.biome.layer.ScaleLayer;\n+import net.minecraft.world.biome.layer.SimpleLandNoiseLayer;\n+import net.minecraft.world.biome.layer.SmoothenShorelineLayer;\n+import net.minecraft.world.biome.layer.type.ParentedLayer;\n+import net.minecraft.world.biome.layer.util.LayerFactory;\n+import net.minecraft.world.biome.layer.util.LayerSampleContext;\n+import net.minecraft.world.biome.layer.util.LayerSampler;\n+import net.minecraft.world.gen.chunk.OverworldChunkGeneratorConfig;\n+import net.minecraft.world.level.LevelGeneratorType;\n+\n+import net.patchworkmc.impl.levelgenerators.PatchworkGeneratorType;\n+\n+@Mixin(BiomeLayers.class)\n+public class MixinBiomeLayers {\n+\t@Shadow\n+\tprivate static <T extends LayerSampler, C extends LayerSampleContext<T>> LayerFactory<T> stack(long seed, ParentedLayer layer, LayerFactory<T> parent, int count, LongFunction<C> contextProvider) {\n+\t\tthrow new RuntimeException(\"Failed to shadow BiomeLayers#stack!\");\n+\t}\n+\n+\t@Inject(at = @At(\"HEAD\"), method = \"build\", cancellable = true)\n+\tprivate static <T extends LayerSampler, C extends LayerSampleContext<T>> void build(LevelGeneratorType generatorType, OverworldChunkGeneratorConfig settings, LongFunction<C> contextProvider, CallbackInfoReturnable<ImmutableList<LayerFactory<T>>> info) {\n+\t\tif (generatorType instanceof PatchworkGeneratorType) {\n+\t\t\tLayerFactory<T> continentLayer = ContinentLayer.INSTANCE.create(contextProvider.apply(1L));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1OTU1Nw=="}, "originalCommit": {"oid": "90402ca21988ef1cebde0260283c95c1246d6798"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU3MzUzOA==", "bodyText": "oh wait", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r406573538", "createdAt": "2020-04-10T02:26:40Z", "author": {"login": "valoeghese"}, "path": "patchwork-level-generators/src/main/java/net/patchworkmc/mixin/levelgenerators/MixinBiomeLayers.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+ \n+package net.patchworkmc.mixin.levelgenerators;\n+\n+import java.util.function.LongFunction;\n+\n+import com.google.common.collect.ImmutableList;\n+import net.minecraftforge.common.extensions.IForgeWorldType;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.world.biome.layer.AddClimateLayers;\n+import net.minecraft.world.biome.layer.AddColdClimatesLayer;\n+import net.minecraft.world.biome.layer.AddDeepOceanLayer;\n+import net.minecraft.world.biome.layer.AddEdgeBiomesLayer;\n+import net.minecraft.world.biome.layer.AddHillsLayer;\n+import net.minecraft.world.biome.layer.AddIslandLayer;\n+import net.minecraft.world.biome.layer.AddMushroomIslandLayer;\n+import net.minecraft.world.biome.layer.AddRiversLayer;\n+import net.minecraft.world.biome.layer.AddSunflowerPlainsLayer;\n+import net.minecraft.world.biome.layer.ApplyOceanTemperatureLayer;\n+import net.minecraft.world.biome.layer.BiomeLayers;\n+import net.minecraft.world.biome.layer.CellScaleLayer;\n+import net.minecraft.world.biome.layer.ContinentLayer;\n+import net.minecraft.world.biome.layer.IncreaseEdgeCurvatureLayer;\n+import net.minecraft.world.biome.layer.NoiseToRiverLayer;\n+import net.minecraft.world.biome.layer.OceanTemperatureLayer;\n+import net.minecraft.world.biome.layer.ScaleLayer;\n+import net.minecraft.world.biome.layer.SimpleLandNoiseLayer;\n+import net.minecraft.world.biome.layer.SmoothenShorelineLayer;\n+import net.minecraft.world.biome.layer.type.ParentedLayer;\n+import net.minecraft.world.biome.layer.util.LayerFactory;\n+import net.minecraft.world.biome.layer.util.LayerSampleContext;\n+import net.minecraft.world.biome.layer.util.LayerSampler;\n+import net.minecraft.world.gen.chunk.OverworldChunkGeneratorConfig;\n+import net.minecraft.world.level.LevelGeneratorType;\n+\n+import net.patchworkmc.impl.levelgenerators.PatchworkGeneratorType;\n+\n+@Mixin(BiomeLayers.class)\n+public class MixinBiomeLayers {\n+\t@Shadow\n+\tprivate static <T extends LayerSampler, C extends LayerSampleContext<T>> LayerFactory<T> stack(long seed, ParentedLayer layer, LayerFactory<T> parent, int count, LongFunction<C> contextProvider) {\n+\t\tthrow new RuntimeException(\"Failed to shadow BiomeLayers#stack!\");\n+\t}\n+\n+\t@Inject(at = @At(\"HEAD\"), method = \"build\", cancellable = true)\n+\tprivate static <T extends LayerSampler, C extends LayerSampleContext<T>> void build(LevelGeneratorType generatorType, OverworldChunkGeneratorConfig settings, LongFunction<C> contextProvider, CallbackInfoReturnable<ImmutableList<LayerFactory<T>>> info) {\n+\t\tif (generatorType instanceof PatchworkGeneratorType) {\n+\t\t\tLayerFactory<T> continentLayer = ContinentLayer.INSTANCE.create(contextProvider.apply(1L));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1OTU1Nw=="}, "originalCommit": {"oid": "90402ca21988ef1cebde0260283c95c1246d6798"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzA3MzU4OnYy", "diffSide": "RIGHT", "path": "patchwork-level-generators/src/main/java/net/patchworkmc/mixin/levelgenerators/MixinCreateWorldScreen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMToyNzoyMlrOGDuc7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMjoyODozMlrOGDvTMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1OTk4Mg==", "bodyText": "is this supposed to be shadowed?", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r406559982", "createdAt": "2020-04-10T01:27:22Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-level-generators/src/main/java/net/patchworkmc/mixin/levelgenerators/MixinCreateWorldScreen.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.levelgenerators;\n+\n+import net.minecraftforge.common.extensions.IForgeWorldType;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.screen.world.CreateWorldScreen;\n+import net.minecraft.client.gui.widget.ButtonWidget;\n+import net.minecraft.text.Text;\n+import net.minecraft.world.level.LevelGeneratorType;\n+\n+import net.patchworkmc.impl.levelgenerators.PatchworkGeneratorType;\n+\n+@Mixin(CreateWorldScreen.class)\n+public abstract class MixinCreateWorldScreen extends Screen {\n+\tprotected MixinCreateWorldScreen(Text title) {\n+\t\tsuper(title);\n+\t}\n+\n+\t@Shadow\n+\tprivate int generatorType;\n+\tprivate MinecraftClient minecraft;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90402ca21988ef1cebde0260283c95c1246d6798"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU3Mzg3NQ==", "bodyText": "yeah", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r406573875", "createdAt": "2020-04-10T02:28:32Z", "author": {"login": "valoeghese"}, "path": "patchwork-level-generators/src/main/java/net/patchworkmc/mixin/levelgenerators/MixinCreateWorldScreen.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.levelgenerators;\n+\n+import net.minecraftforge.common.extensions.IForgeWorldType;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.screen.world.CreateWorldScreen;\n+import net.minecraft.client.gui.widget.ButtonWidget;\n+import net.minecraft.text.Text;\n+import net.minecraft.world.level.LevelGeneratorType;\n+\n+import net.patchworkmc.impl.levelgenerators.PatchworkGeneratorType;\n+\n+@Mixin(CreateWorldScreen.class)\n+public abstract class MixinCreateWorldScreen extends Screen {\n+\tprotected MixinCreateWorldScreen(Text title) {\n+\t\tsuper(title);\n+\t}\n+\n+\t@Shadow\n+\tprivate int generatorType;\n+\tprivate MinecraftClient minecraft;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1OTk4Mg=="}, "originalCommit": {"oid": "90402ca21988ef1cebde0260283c95c1246d6798"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzA3NjcyOnYy", "diffSide": "RIGHT", "path": "patchwork-level-generators/src/main/java/net/patchworkmc/mixin/levelgenerators/MixinServerWorld.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMToyOTozMFrOGDuexw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMjoyOTo1NFrOGDvUZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2MDQ1NQ==", "bodyText": "I think this deserves a newline (or four) somewhere in the middle of this statement", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r406560455", "createdAt": "2020-04-10T01:29:30Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-level-generators/src/main/java/net/patchworkmc/mixin/levelgenerators/MixinServerWorld.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.levelgenerators;\n+\n+import net.minecraftforge.common.extensions.IForgeWorldType;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.server.world.ServerChunkManager;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.world.World;\n+import net.minecraft.world.chunk.ChunkManager;\n+import net.minecraft.world.dimension.Dimension;\n+import net.minecraft.world.dimension.DimensionType;\n+import net.minecraft.world.level.LevelGeneratorType;\n+\n+import net.patchworkmc.impl.levelgenerators.ChunkManagerValues;\n+import net.patchworkmc.impl.levelgenerators.PatchworkGeneratorType;\n+\n+@Mixin(ServerWorld.class)\n+public abstract class MixinServerWorld {\n+\t@Inject(method = \"method_14168\", at = @At(\"HEAD\"), cancellable = true)\n+\tprivate static void createChunkGenerator(World world, Dimension dimension, CallbackInfoReturnable<ChunkManager> info) {\n+\t\tLevelGeneratorType generatorType = world.getLevelProperties().getGeneratorType();\n+\n+\t\tif (generatorType instanceof PatchworkGeneratorType) {\n+\t\t\tinfo.setReturnValue(new ServerChunkManager((ServerWorld) world, ChunkManagerValues.file, ChunkManagerValues.dataFixer, ChunkManagerValues.structureManager, ChunkManagerValues.workerExecutor, ((IForgeWorldType) generatorType).createChunkGenerator(world), ChunkManagerValues.viewDistance, ChunkManagerValues.progressListener, () -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90402ca21988ef1cebde0260283c95c1246d6798"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU3NDE4MQ==", "bodyText": "have eight", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r406574181", "createdAt": "2020-04-10T02:29:54Z", "author": {"login": "valoeghese"}, "path": "patchwork-level-generators/src/main/java/net/patchworkmc/mixin/levelgenerators/MixinServerWorld.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.levelgenerators;\n+\n+import net.minecraftforge.common.extensions.IForgeWorldType;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.server.world.ServerChunkManager;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.world.World;\n+import net.minecraft.world.chunk.ChunkManager;\n+import net.minecraft.world.dimension.Dimension;\n+import net.minecraft.world.dimension.DimensionType;\n+import net.minecraft.world.level.LevelGeneratorType;\n+\n+import net.patchworkmc.impl.levelgenerators.ChunkManagerValues;\n+import net.patchworkmc.impl.levelgenerators.PatchworkGeneratorType;\n+\n+@Mixin(ServerWorld.class)\n+public abstract class MixinServerWorld {\n+\t@Inject(method = \"method_14168\", at = @At(\"HEAD\"), cancellable = true)\n+\tprivate static void createChunkGenerator(World world, Dimension dimension, CallbackInfoReturnable<ChunkManager> info) {\n+\t\tLevelGeneratorType generatorType = world.getLevelProperties().getGeneratorType();\n+\n+\t\tif (generatorType instanceof PatchworkGeneratorType) {\n+\t\t\tinfo.setReturnValue(new ServerChunkManager((ServerWorld) world, ChunkManagerValues.file, ChunkManagerValues.dataFixer, ChunkManagerValues.structureManager, ChunkManagerValues.workerExecutor, ((IForgeWorldType) generatorType).createChunkGenerator(world), ChunkManagerValues.viewDistance, ChunkManagerValues.progressListener, () -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2MDQ1NQ=="}, "originalCommit": {"oid": "90402ca21988ef1cebde0260283c95c1246d6798"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzA3ODUwOnYy", "diffSide": "RIGHT", "path": "patchwork-level-generators/src/main/java/net/patchworkmc/mixin/levelgenerators/MixinWorld.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMTozMDo0OVrOGDuf0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMTozMDo0OVrOGDuf0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2MDcyMw==", "bodyText": "Maybe add a README.MD file in the root of the module that notes this?\nWe've done it for a few other modules and it will be helpful so this doesn't get forgotten about.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r406560723", "createdAt": "2020-04-10T01:30:49Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-level-generators/src/main/java/net/patchworkmc/mixin/levelgenerators/MixinWorld.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package net.patchworkmc.mixin.levelgenerators;\n+\n+import net.minecraftforge.common.extensions.IForgeWorldType;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.world.World;\n+import net.minecraft.world.level.LevelGeneratorType;\n+import net.minecraft.world.level.LevelProperties;\n+\n+import net.patchworkmc.impl.levelgenerators.PatchworkGeneratorType;\n+\n+@Mixin(World.class)\n+public class MixinWorld {\n+\t@Shadow\n+\t@Final\n+\tprivate LevelProperties properties;\n+\n+\t@Inject(at = @At(\"HEAD\"), method = \"getHorizonHeight\", cancellable = true)\n+\tprivate void getHorizonHeight(CallbackInfoReturnable<Double> info) { // TODO: use IForgeDimension", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90402ca21988ef1cebde0260283c95c1246d6798"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzA3OTgxOnYy", "diffSide": "RIGHT", "path": "settings.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMTozMjowMFrOGDugqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMTozMjowMFrOGDugqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2MDkzNw==", "bodyText": "Alphabetical order please", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r406560937", "createdAt": "2020-04-10T01:32:00Z", "author": {"login": "TheGlitch76"}, "path": "settings.gradle", "diffHunk": "@@ -30,3 +30,4 @@ include 'patchwork-networking'\n include 'patchwork-networking-messages'\n include 'patchwork-vanilla-patches'\n include 'patchwork-enum-hacks'\n+include 'patchwork-level-generators'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90402ca21988ef1cebde0260283c95c1246d6798"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzA4MTM0OnYy", "diffSide": "RIGHT", "path": "patchwork-level-generators/src/main/java/net/patchworkmc/impl/levelgenerators/PatchworkLevelGeneratorTypes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMTozMjo1MVrOGDuhdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMTozMjo1MVrOGDuhdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2MTE0Mg==", "bodyText": "This should be an accessor mixin", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r406561142", "createdAt": "2020-04-10T01:32:51Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-level-generators/src/main/java/net/patchworkmc/impl/levelgenerators/PatchworkLevelGeneratorTypes.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.impl.levelgenerators;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+\n+import net.minecraft.world.level.LevelGeneratorType;\n+\n+import net.fabricmc.loader.api.FabricLoader;\n+\n+public class PatchworkLevelGeneratorTypes {\n+\tprivate static final Field TYPES;\n+\n+\tpublic static int getNextID() {\n+\t\tLevelGeneratorType[] types = LevelGeneratorType.TYPES;\n+\n+\t\ttry {\n+\t\t\tfor (int x = 0; x < types.length; x++) {\n+\t\t\t\tif (types[x] == null) {\n+\t\t\t\t\treturn x;\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tint old = types.length;\n+\t\t\tTYPES.set(null, Arrays.copyOf(types, old + 16));\n+\t\t\treturn old;\n+\t\t} catch (IllegalArgumentException | IllegalAccessException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tstatic {\n+\t\ttry {\n+\t\t\tTYPES = LevelGeneratorType.class.getDeclaredField(FabricLoader.getInstance().isDevelopmentEnvironment() ? \"TYPES\" : \"field_9279\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90402ca21988ef1cebde0260283c95c1246d6798"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzE2NjQ5OnYy", "diffSide": "RIGHT", "path": "patchwork-level-generators/src/main/java/net/patchworkmc/impl/levelgenerators/PatchworkGeneratorType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMjoyNTozMVrOGDvQ7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMjoyNTozMVrOGDvQ7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU3MzI5NQ==", "bodyText": "This should also probably be called PatchworkLevelGeneratorType.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r406573295", "createdAt": "2020-04-10T02:25:31Z", "author": {"login": "coderbot16"}, "path": "patchwork-level-generators/src/main/java/net/patchworkmc/impl/levelgenerators/PatchworkGeneratorType.java", "diffHunk": "@@ -0,0 +1,6 @@\n+package net.patchworkmc.impl.levelgenerators;\n+\n+import net.minecraftforge.common.extensions.IForgeWorldType;\n+\n+public interface PatchworkGeneratorType extends IForgeWorldType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a05b2f5a808a47577cbe33af6b074026e7ae1bbf"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzE2NzY1OnYy", "diffSide": "RIGHT", "path": "patchwork-level-generators/src/main/java/net/patchworkmc/mixin/levelgenerators/MixinBiomeLayers.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMjoyNjoxOFrOGDvRkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzoyODoyNVrOGGPHNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU3MzQ1Nw==", "bodyText": "There's probably a better way to do this than copying all of the decompiled ARR mojang code...", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r406573457", "createdAt": "2020-04-10T02:26:18Z", "author": {"login": "coderbot16"}, "path": "patchwork-level-generators/src/main/java/net/patchworkmc/mixin/levelgenerators/MixinBiomeLayers.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package net.patchworkmc.mixin.levelgenerators;\n+\n+import java.util.function.LongFunction;\n+\n+import com.google.common.collect.ImmutableList;\n+import net.minecraftforge.common.extensions.IForgeWorldType;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.world.biome.layer.AddClimateLayers;\n+import net.minecraft.world.biome.layer.AddColdClimatesLayer;\n+import net.minecraft.world.biome.layer.AddDeepOceanLayer;\n+import net.minecraft.world.biome.layer.AddEdgeBiomesLayer;\n+import net.minecraft.world.biome.layer.AddHillsLayer;\n+import net.minecraft.world.biome.layer.AddIslandLayer;\n+import net.minecraft.world.biome.layer.AddMushroomIslandLayer;\n+import net.minecraft.world.biome.layer.AddRiversLayer;\n+import net.minecraft.world.biome.layer.AddSunflowerPlainsLayer;\n+import net.minecraft.world.biome.layer.ApplyOceanTemperatureLayer;\n+import net.minecraft.world.biome.layer.BiomeLayers;\n+import net.minecraft.world.biome.layer.CellScaleLayer;\n+import net.minecraft.world.biome.layer.ContinentLayer;\n+import net.minecraft.world.biome.layer.IncreaseEdgeCurvatureLayer;\n+import net.minecraft.world.biome.layer.NoiseToRiverLayer;\n+import net.minecraft.world.biome.layer.OceanTemperatureLayer;\n+import net.minecraft.world.biome.layer.ScaleLayer;\n+import net.minecraft.world.biome.layer.SimpleLandNoiseLayer;\n+import net.minecraft.world.biome.layer.SmoothenShorelineLayer;\n+import net.minecraft.world.biome.layer.type.ParentedLayer;\n+import net.minecraft.world.biome.layer.util.LayerFactory;\n+import net.minecraft.world.biome.layer.util.LayerSampleContext;\n+import net.minecraft.world.biome.layer.util.LayerSampler;\n+import net.minecraft.world.gen.chunk.OverworldChunkGeneratorConfig;\n+import net.minecraft.world.level.LevelGeneratorType;\n+\n+import net.patchworkmc.impl.levelgenerators.PatchworkGeneratorType;\n+\n+@Mixin(BiomeLayers.class)\n+public class MixinBiomeLayers {\n+\t@Shadow\n+\tprivate static <T extends LayerSampler, C extends LayerSampleContext<T>> LayerFactory<T> stack(long seed, ParentedLayer layer, LayerFactory<T> parent, int count, LongFunction<C> contextProvider) {\n+\t\tthrow new RuntimeException(\"Failed to shadow BiomeLayers#stack!\");\n+\t}\n+\n+\t@Inject(at = @At(\"HEAD\"), method = \"build\", cancellable = true)\n+\tprivate static <T extends LayerSampler, C extends LayerSampleContext<T>> void build(LevelGeneratorType generatorType, OverworldChunkGeneratorConfig settings, LongFunction<C> contextProvider, CallbackInfoReturnable<ImmutableList<LayerFactory<T>>> info) {\n+\t\tif (generatorType instanceof PatchworkGeneratorType) {\n+\t\t\tLayerFactory<T> continentLayer = ContinentLayer.INSTANCE.create(contextProvider.apply(1L));\n+\t\t\tcontinentLayer = ScaleLayer.FUZZY.create(contextProvider.apply(2000L), continentLayer);\n+\t\t\tcontinentLayer = IncreaseEdgeCurvatureLayer.INSTANCE.create(contextProvider.apply(1L), continentLayer);\n+\t\t\tcontinentLayer = ScaleLayer.NORMAL.create(contextProvider.apply(2001L), continentLayer);\n+\t\t\tcontinentLayer = IncreaseEdgeCurvatureLayer.INSTANCE.create(contextProvider.apply(2L), continentLayer);\n+\t\t\tcontinentLayer = IncreaseEdgeCurvatureLayer.INSTANCE.create(contextProvider.apply(50L), continentLayer);\n+\t\t\tcontinentLayer = IncreaseEdgeCurvatureLayer.INSTANCE.create(contextProvider.apply(70L), continentLayer);\n+\t\t\tcontinentLayer = AddIslandLayer.INSTANCE.create(contextProvider.apply(2L), continentLayer);\n+\t\t\tLayerFactory<T> layerFactory2 = OceanTemperatureLayer.INSTANCE.create(contextProvider.apply(2L));\n+\t\t\tlayerFactory2 = stack(2001L, ScaleLayer.NORMAL, layerFactory2, 6, contextProvider);\n+\t\t\tcontinentLayer = AddColdClimatesLayer.INSTANCE.create(contextProvider.apply(2L), continentLayer);\n+\t\t\tcontinentLayer = IncreaseEdgeCurvatureLayer.INSTANCE.create(contextProvider.apply(3L), continentLayer);\n+\t\t\tcontinentLayer = AddClimateLayers.AddTemperateBiomesLayer.INSTANCE.create(contextProvider.apply(2L), continentLayer);\n+\t\t\tcontinentLayer = AddClimateLayers.AddCoolBiomesLayer.INSTANCE.create(contextProvider.apply(2L), continentLayer);\n+\t\t\tcontinentLayer = AddClimateLayers.AddSpecialBiomesLayer.INSTANCE.create(contextProvider.apply(3L), continentLayer);\n+\t\t\tcontinentLayer = ScaleLayer.NORMAL.create(contextProvider.apply(2002L), continentLayer);\n+\t\t\tcontinentLayer = ScaleLayer.NORMAL.create(contextProvider.apply(2003L), continentLayer);\n+\t\t\tcontinentLayer = IncreaseEdgeCurvatureLayer.INSTANCE.create(contextProvider.apply(4L), continentLayer);\n+\t\t\tcontinentLayer = AddMushroomIslandLayer.INSTANCE.create(contextProvider.apply(5L), continentLayer);\n+\t\t\tcontinentLayer = AddDeepOceanLayer.INSTANCE.create(contextProvider.apply(4L), continentLayer);\n+\t\t\tcontinentLayer = stack(1000L, ScaleLayer.NORMAL, continentLayer, 0, contextProvider);\n+\t\t\tint biomeSize = 4;\n+\t\t\tint riverSize = biomeSize;\n+\n+\t\t\tif (settings != null) {\n+\t\t\t\tbiomeSize = settings.getBiomeSize();\n+\t\t\t\triverSize = settings.getRiverSize();\n+\t\t\t}\n+\n+\t\t\tif (generatorType == LevelGeneratorType.LARGE_BIOMES) {\n+\t\t\t\tbiomeSize = 6;\n+\t\t\t}\n+\n+\t\t\tLayerFactory<T> riverLayer = stack(1000L, ScaleLayer.NORMAL, continentLayer, 0, contextProvider);\n+\t\t\triverLayer = SimpleLandNoiseLayer.INSTANCE.create(contextProvider.apply(100L), riverLayer);\n+\t\t\tLayerFactory<T> noiseLayer = ((IForgeWorldType) generatorType).getBiomeLayer(continentLayer, settings, contextProvider);\n+\t\t\tLayerFactory<T> layerFactory5 = stack(1000L, ScaleLayer.NORMAL, riverLayer, 2, contextProvider);\n+\t\t\tnoiseLayer = AddHillsLayer.INSTANCE.create(contextProvider.apply(1000L), noiseLayer, layerFactory5);\n+\t\t\triverLayer = stack(1000L, ScaleLayer.NORMAL, riverLayer, 2, contextProvider);\n+\t\t\triverLayer = stack(1000L, ScaleLayer.NORMAL, riverLayer, riverSize, contextProvider);\n+\t\t\triverLayer = NoiseToRiverLayer.INSTANCE.create(contextProvider.apply(1L), riverLayer);\n+\t\t\triverLayer = SmoothenShorelineLayer.INSTANCE.create(contextProvider.apply(1000L), riverLayer);\n+\t\t\tnoiseLayer = AddSunflowerPlainsLayer.INSTANCE.create(contextProvider.apply(1001L), noiseLayer);\n+\n+\t\t\tfor (int k = 0; k < biomeSize; ++k) {\n+\t\t\t\tnoiseLayer = ScaleLayer.NORMAL.create(contextProvider.apply((long) (1000 + k)), noiseLayer);\n+\n+\t\t\t\tif (k == 0) {\n+\t\t\t\t\tnoiseLayer = IncreaseEdgeCurvatureLayer.INSTANCE.create(contextProvider.apply(3L), noiseLayer);\n+\t\t\t\t}\n+\n+\t\t\t\tif (k == 1 || biomeSize == 1) {\n+\t\t\t\t\tnoiseLayer = AddEdgeBiomesLayer.INSTANCE.create(contextProvider.apply(1000L), noiseLayer);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tnoiseLayer = SmoothenShorelineLayer.INSTANCE.create(contextProvider.apply(1000L), noiseLayer);\n+\t\t\tnoiseLayer = AddRiversLayer.INSTANCE.create(contextProvider.apply(100L), noiseLayer, riverLayer);\n+\t\t\tnoiseLayer = ApplyOceanTemperatureLayer.INSTANCE.create(contextProvider.apply(100L), noiseLayer, layerFactory2);\n+\t\t\tLayerFactory<T> biomeLayer = CellScaleLayer.INSTANCE.create(contextProvider.apply(10L), noiseLayer);\n+\t\t\tinfo.setReturnValue(ImmutableList.of(noiseLayer, biomeLayer, noiseLayer));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a05b2f5a808a47577cbe33af6b074026e7ae1bbf"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU3NTU5OA==", "bodyText": "I don't think so. I have to cut out multiple lines and replace them with a single line", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r406575598", "createdAt": "2020-04-10T02:35:53Z", "author": {"login": "valoeghese"}, "path": "patchwork-level-generators/src/main/java/net/patchworkmc/mixin/levelgenerators/MixinBiomeLayers.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package net.patchworkmc.mixin.levelgenerators;\n+\n+import java.util.function.LongFunction;\n+\n+import com.google.common.collect.ImmutableList;\n+import net.minecraftforge.common.extensions.IForgeWorldType;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.world.biome.layer.AddClimateLayers;\n+import net.minecraft.world.biome.layer.AddColdClimatesLayer;\n+import net.minecraft.world.biome.layer.AddDeepOceanLayer;\n+import net.minecraft.world.biome.layer.AddEdgeBiomesLayer;\n+import net.minecraft.world.biome.layer.AddHillsLayer;\n+import net.minecraft.world.biome.layer.AddIslandLayer;\n+import net.minecraft.world.biome.layer.AddMushroomIslandLayer;\n+import net.minecraft.world.biome.layer.AddRiversLayer;\n+import net.minecraft.world.biome.layer.AddSunflowerPlainsLayer;\n+import net.minecraft.world.biome.layer.ApplyOceanTemperatureLayer;\n+import net.minecraft.world.biome.layer.BiomeLayers;\n+import net.minecraft.world.biome.layer.CellScaleLayer;\n+import net.minecraft.world.biome.layer.ContinentLayer;\n+import net.minecraft.world.biome.layer.IncreaseEdgeCurvatureLayer;\n+import net.minecraft.world.biome.layer.NoiseToRiverLayer;\n+import net.minecraft.world.biome.layer.OceanTemperatureLayer;\n+import net.minecraft.world.biome.layer.ScaleLayer;\n+import net.minecraft.world.biome.layer.SimpleLandNoiseLayer;\n+import net.minecraft.world.biome.layer.SmoothenShorelineLayer;\n+import net.minecraft.world.biome.layer.type.ParentedLayer;\n+import net.minecraft.world.biome.layer.util.LayerFactory;\n+import net.minecraft.world.biome.layer.util.LayerSampleContext;\n+import net.minecraft.world.biome.layer.util.LayerSampler;\n+import net.minecraft.world.gen.chunk.OverworldChunkGeneratorConfig;\n+import net.minecraft.world.level.LevelGeneratorType;\n+\n+import net.patchworkmc.impl.levelgenerators.PatchworkGeneratorType;\n+\n+@Mixin(BiomeLayers.class)\n+public class MixinBiomeLayers {\n+\t@Shadow\n+\tprivate static <T extends LayerSampler, C extends LayerSampleContext<T>> LayerFactory<T> stack(long seed, ParentedLayer layer, LayerFactory<T> parent, int count, LongFunction<C> contextProvider) {\n+\t\tthrow new RuntimeException(\"Failed to shadow BiomeLayers#stack!\");\n+\t}\n+\n+\t@Inject(at = @At(\"HEAD\"), method = \"build\", cancellable = true)\n+\tprivate static <T extends LayerSampler, C extends LayerSampleContext<T>> void build(LevelGeneratorType generatorType, OverworldChunkGeneratorConfig settings, LongFunction<C> contextProvider, CallbackInfoReturnable<ImmutableList<LayerFactory<T>>> info) {\n+\t\tif (generatorType instanceof PatchworkGeneratorType) {\n+\t\t\tLayerFactory<T> continentLayer = ContinentLayer.INSTANCE.create(contextProvider.apply(1L));\n+\t\t\tcontinentLayer = ScaleLayer.FUZZY.create(contextProvider.apply(2000L), continentLayer);\n+\t\t\tcontinentLayer = IncreaseEdgeCurvatureLayer.INSTANCE.create(contextProvider.apply(1L), continentLayer);\n+\t\t\tcontinentLayer = ScaleLayer.NORMAL.create(contextProvider.apply(2001L), continentLayer);\n+\t\t\tcontinentLayer = IncreaseEdgeCurvatureLayer.INSTANCE.create(contextProvider.apply(2L), continentLayer);\n+\t\t\tcontinentLayer = IncreaseEdgeCurvatureLayer.INSTANCE.create(contextProvider.apply(50L), continentLayer);\n+\t\t\tcontinentLayer = IncreaseEdgeCurvatureLayer.INSTANCE.create(contextProvider.apply(70L), continentLayer);\n+\t\t\tcontinentLayer = AddIslandLayer.INSTANCE.create(contextProvider.apply(2L), continentLayer);\n+\t\t\tLayerFactory<T> layerFactory2 = OceanTemperatureLayer.INSTANCE.create(contextProvider.apply(2L));\n+\t\t\tlayerFactory2 = stack(2001L, ScaleLayer.NORMAL, layerFactory2, 6, contextProvider);\n+\t\t\tcontinentLayer = AddColdClimatesLayer.INSTANCE.create(contextProvider.apply(2L), continentLayer);\n+\t\t\tcontinentLayer = IncreaseEdgeCurvatureLayer.INSTANCE.create(contextProvider.apply(3L), continentLayer);\n+\t\t\tcontinentLayer = AddClimateLayers.AddTemperateBiomesLayer.INSTANCE.create(contextProvider.apply(2L), continentLayer);\n+\t\t\tcontinentLayer = AddClimateLayers.AddCoolBiomesLayer.INSTANCE.create(contextProvider.apply(2L), continentLayer);\n+\t\t\tcontinentLayer = AddClimateLayers.AddSpecialBiomesLayer.INSTANCE.create(contextProvider.apply(3L), continentLayer);\n+\t\t\tcontinentLayer = ScaleLayer.NORMAL.create(contextProvider.apply(2002L), continentLayer);\n+\t\t\tcontinentLayer = ScaleLayer.NORMAL.create(contextProvider.apply(2003L), continentLayer);\n+\t\t\tcontinentLayer = IncreaseEdgeCurvatureLayer.INSTANCE.create(contextProvider.apply(4L), continentLayer);\n+\t\t\tcontinentLayer = AddMushroomIslandLayer.INSTANCE.create(contextProvider.apply(5L), continentLayer);\n+\t\t\tcontinentLayer = AddDeepOceanLayer.INSTANCE.create(contextProvider.apply(4L), continentLayer);\n+\t\t\tcontinentLayer = stack(1000L, ScaleLayer.NORMAL, continentLayer, 0, contextProvider);\n+\t\t\tint biomeSize = 4;\n+\t\t\tint riverSize = biomeSize;\n+\n+\t\t\tif (settings != null) {\n+\t\t\t\tbiomeSize = settings.getBiomeSize();\n+\t\t\t\triverSize = settings.getRiverSize();\n+\t\t\t}\n+\n+\t\t\tif (generatorType == LevelGeneratorType.LARGE_BIOMES) {\n+\t\t\t\tbiomeSize = 6;\n+\t\t\t}\n+\n+\t\t\tLayerFactory<T> riverLayer = stack(1000L, ScaleLayer.NORMAL, continentLayer, 0, contextProvider);\n+\t\t\triverLayer = SimpleLandNoiseLayer.INSTANCE.create(contextProvider.apply(100L), riverLayer);\n+\t\t\tLayerFactory<T> noiseLayer = ((IForgeWorldType) generatorType).getBiomeLayer(continentLayer, settings, contextProvider);\n+\t\t\tLayerFactory<T> layerFactory5 = stack(1000L, ScaleLayer.NORMAL, riverLayer, 2, contextProvider);\n+\t\t\tnoiseLayer = AddHillsLayer.INSTANCE.create(contextProvider.apply(1000L), noiseLayer, layerFactory5);\n+\t\t\triverLayer = stack(1000L, ScaleLayer.NORMAL, riverLayer, 2, contextProvider);\n+\t\t\triverLayer = stack(1000L, ScaleLayer.NORMAL, riverLayer, riverSize, contextProvider);\n+\t\t\triverLayer = NoiseToRiverLayer.INSTANCE.create(contextProvider.apply(1L), riverLayer);\n+\t\t\triverLayer = SmoothenShorelineLayer.INSTANCE.create(contextProvider.apply(1000L), riverLayer);\n+\t\t\tnoiseLayer = AddSunflowerPlainsLayer.INSTANCE.create(contextProvider.apply(1001L), noiseLayer);\n+\n+\t\t\tfor (int k = 0; k < biomeSize; ++k) {\n+\t\t\t\tnoiseLayer = ScaleLayer.NORMAL.create(contextProvider.apply((long) (1000 + k)), noiseLayer);\n+\n+\t\t\t\tif (k == 0) {\n+\t\t\t\t\tnoiseLayer = IncreaseEdgeCurvatureLayer.INSTANCE.create(contextProvider.apply(3L), noiseLayer);\n+\t\t\t\t}\n+\n+\t\t\t\tif (k == 1 || biomeSize == 1) {\n+\t\t\t\t\tnoiseLayer = AddEdgeBiomesLayer.INSTANCE.create(contextProvider.apply(1000L), noiseLayer);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tnoiseLayer = SmoothenShorelineLayer.INSTANCE.create(contextProvider.apply(1000L), noiseLayer);\n+\t\t\tnoiseLayer = AddRiversLayer.INSTANCE.create(contextProvider.apply(100L), noiseLayer, riverLayer);\n+\t\t\tnoiseLayer = ApplyOceanTemperatureLayer.INSTANCE.create(contextProvider.apply(100L), noiseLayer, layerFactory2);\n+\t\t\tLayerFactory<T> biomeLayer = CellScaleLayer.INSTANCE.create(contextProvider.apply(10L), noiseLayer);\n+\t\t\tinfo.setReturnValue(ImmutableList.of(noiseLayer, biomeLayer, noiseLayer));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU3MzQ1Nw=="}, "originalCommit": {"oid": "a05b2f5a808a47577cbe33af6b074026e7ae1bbf"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MjI0Nw==", "bodyText": "ok I made this four redirects lol", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r409192247", "createdAt": "2020-04-15T23:28:25Z", "author": {"login": "valoeghese"}, "path": "patchwork-level-generators/src/main/java/net/patchworkmc/mixin/levelgenerators/MixinBiomeLayers.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package net.patchworkmc.mixin.levelgenerators;\n+\n+import java.util.function.LongFunction;\n+\n+import com.google.common.collect.ImmutableList;\n+import net.minecraftforge.common.extensions.IForgeWorldType;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.world.biome.layer.AddClimateLayers;\n+import net.minecraft.world.biome.layer.AddColdClimatesLayer;\n+import net.minecraft.world.biome.layer.AddDeepOceanLayer;\n+import net.minecraft.world.biome.layer.AddEdgeBiomesLayer;\n+import net.minecraft.world.biome.layer.AddHillsLayer;\n+import net.minecraft.world.biome.layer.AddIslandLayer;\n+import net.minecraft.world.biome.layer.AddMushroomIslandLayer;\n+import net.minecraft.world.biome.layer.AddRiversLayer;\n+import net.minecraft.world.biome.layer.AddSunflowerPlainsLayer;\n+import net.minecraft.world.biome.layer.ApplyOceanTemperatureLayer;\n+import net.minecraft.world.biome.layer.BiomeLayers;\n+import net.minecraft.world.biome.layer.CellScaleLayer;\n+import net.minecraft.world.biome.layer.ContinentLayer;\n+import net.minecraft.world.biome.layer.IncreaseEdgeCurvatureLayer;\n+import net.minecraft.world.biome.layer.NoiseToRiverLayer;\n+import net.minecraft.world.biome.layer.OceanTemperatureLayer;\n+import net.minecraft.world.biome.layer.ScaleLayer;\n+import net.minecraft.world.biome.layer.SimpleLandNoiseLayer;\n+import net.minecraft.world.biome.layer.SmoothenShorelineLayer;\n+import net.minecraft.world.biome.layer.type.ParentedLayer;\n+import net.minecraft.world.biome.layer.util.LayerFactory;\n+import net.minecraft.world.biome.layer.util.LayerSampleContext;\n+import net.minecraft.world.biome.layer.util.LayerSampler;\n+import net.minecraft.world.gen.chunk.OverworldChunkGeneratorConfig;\n+import net.minecraft.world.level.LevelGeneratorType;\n+\n+import net.patchworkmc.impl.levelgenerators.PatchworkGeneratorType;\n+\n+@Mixin(BiomeLayers.class)\n+public class MixinBiomeLayers {\n+\t@Shadow\n+\tprivate static <T extends LayerSampler, C extends LayerSampleContext<T>> LayerFactory<T> stack(long seed, ParentedLayer layer, LayerFactory<T> parent, int count, LongFunction<C> contextProvider) {\n+\t\tthrow new RuntimeException(\"Failed to shadow BiomeLayers#stack!\");\n+\t}\n+\n+\t@Inject(at = @At(\"HEAD\"), method = \"build\", cancellable = true)\n+\tprivate static <T extends LayerSampler, C extends LayerSampleContext<T>> void build(LevelGeneratorType generatorType, OverworldChunkGeneratorConfig settings, LongFunction<C> contextProvider, CallbackInfoReturnable<ImmutableList<LayerFactory<T>>> info) {\n+\t\tif (generatorType instanceof PatchworkGeneratorType) {\n+\t\t\tLayerFactory<T> continentLayer = ContinentLayer.INSTANCE.create(contextProvider.apply(1L));\n+\t\t\tcontinentLayer = ScaleLayer.FUZZY.create(contextProvider.apply(2000L), continentLayer);\n+\t\t\tcontinentLayer = IncreaseEdgeCurvatureLayer.INSTANCE.create(contextProvider.apply(1L), continentLayer);\n+\t\t\tcontinentLayer = ScaleLayer.NORMAL.create(contextProvider.apply(2001L), continentLayer);\n+\t\t\tcontinentLayer = IncreaseEdgeCurvatureLayer.INSTANCE.create(contextProvider.apply(2L), continentLayer);\n+\t\t\tcontinentLayer = IncreaseEdgeCurvatureLayer.INSTANCE.create(contextProvider.apply(50L), continentLayer);\n+\t\t\tcontinentLayer = IncreaseEdgeCurvatureLayer.INSTANCE.create(contextProvider.apply(70L), continentLayer);\n+\t\t\tcontinentLayer = AddIslandLayer.INSTANCE.create(contextProvider.apply(2L), continentLayer);\n+\t\t\tLayerFactory<T> layerFactory2 = OceanTemperatureLayer.INSTANCE.create(contextProvider.apply(2L));\n+\t\t\tlayerFactory2 = stack(2001L, ScaleLayer.NORMAL, layerFactory2, 6, contextProvider);\n+\t\t\tcontinentLayer = AddColdClimatesLayer.INSTANCE.create(contextProvider.apply(2L), continentLayer);\n+\t\t\tcontinentLayer = IncreaseEdgeCurvatureLayer.INSTANCE.create(contextProvider.apply(3L), continentLayer);\n+\t\t\tcontinentLayer = AddClimateLayers.AddTemperateBiomesLayer.INSTANCE.create(contextProvider.apply(2L), continentLayer);\n+\t\t\tcontinentLayer = AddClimateLayers.AddCoolBiomesLayer.INSTANCE.create(contextProvider.apply(2L), continentLayer);\n+\t\t\tcontinentLayer = AddClimateLayers.AddSpecialBiomesLayer.INSTANCE.create(contextProvider.apply(3L), continentLayer);\n+\t\t\tcontinentLayer = ScaleLayer.NORMAL.create(contextProvider.apply(2002L), continentLayer);\n+\t\t\tcontinentLayer = ScaleLayer.NORMAL.create(contextProvider.apply(2003L), continentLayer);\n+\t\t\tcontinentLayer = IncreaseEdgeCurvatureLayer.INSTANCE.create(contextProvider.apply(4L), continentLayer);\n+\t\t\tcontinentLayer = AddMushroomIslandLayer.INSTANCE.create(contextProvider.apply(5L), continentLayer);\n+\t\t\tcontinentLayer = AddDeepOceanLayer.INSTANCE.create(contextProvider.apply(4L), continentLayer);\n+\t\t\tcontinentLayer = stack(1000L, ScaleLayer.NORMAL, continentLayer, 0, contextProvider);\n+\t\t\tint biomeSize = 4;\n+\t\t\tint riverSize = biomeSize;\n+\n+\t\t\tif (settings != null) {\n+\t\t\t\tbiomeSize = settings.getBiomeSize();\n+\t\t\t\triverSize = settings.getRiverSize();\n+\t\t\t}\n+\n+\t\t\tif (generatorType == LevelGeneratorType.LARGE_BIOMES) {\n+\t\t\t\tbiomeSize = 6;\n+\t\t\t}\n+\n+\t\t\tLayerFactory<T> riverLayer = stack(1000L, ScaleLayer.NORMAL, continentLayer, 0, contextProvider);\n+\t\t\triverLayer = SimpleLandNoiseLayer.INSTANCE.create(contextProvider.apply(100L), riverLayer);\n+\t\t\tLayerFactory<T> noiseLayer = ((IForgeWorldType) generatorType).getBiomeLayer(continentLayer, settings, contextProvider);\n+\t\t\tLayerFactory<T> layerFactory5 = stack(1000L, ScaleLayer.NORMAL, riverLayer, 2, contextProvider);\n+\t\t\tnoiseLayer = AddHillsLayer.INSTANCE.create(contextProvider.apply(1000L), noiseLayer, layerFactory5);\n+\t\t\triverLayer = stack(1000L, ScaleLayer.NORMAL, riverLayer, 2, contextProvider);\n+\t\t\triverLayer = stack(1000L, ScaleLayer.NORMAL, riverLayer, riverSize, contextProvider);\n+\t\t\triverLayer = NoiseToRiverLayer.INSTANCE.create(contextProvider.apply(1L), riverLayer);\n+\t\t\triverLayer = SmoothenShorelineLayer.INSTANCE.create(contextProvider.apply(1000L), riverLayer);\n+\t\t\tnoiseLayer = AddSunflowerPlainsLayer.INSTANCE.create(contextProvider.apply(1001L), noiseLayer);\n+\n+\t\t\tfor (int k = 0; k < biomeSize; ++k) {\n+\t\t\t\tnoiseLayer = ScaleLayer.NORMAL.create(contextProvider.apply((long) (1000 + k)), noiseLayer);\n+\n+\t\t\t\tif (k == 0) {\n+\t\t\t\t\tnoiseLayer = IncreaseEdgeCurvatureLayer.INSTANCE.create(contextProvider.apply(3L), noiseLayer);\n+\t\t\t\t}\n+\n+\t\t\t\tif (k == 1 || biomeSize == 1) {\n+\t\t\t\t\tnoiseLayer = AddEdgeBiomesLayer.INSTANCE.create(contextProvider.apply(1000L), noiseLayer);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tnoiseLayer = SmoothenShorelineLayer.INSTANCE.create(contextProvider.apply(1000L), noiseLayer);\n+\t\t\tnoiseLayer = AddRiversLayer.INSTANCE.create(contextProvider.apply(100L), noiseLayer, riverLayer);\n+\t\t\tnoiseLayer = ApplyOceanTemperatureLayer.INSTANCE.create(contextProvider.apply(100L), noiseLayer, layerFactory2);\n+\t\t\tLayerFactory<T> biomeLayer = CellScaleLayer.INSTANCE.create(contextProvider.apply(10L), noiseLayer);\n+\t\t\tinfo.setReturnValue(ImmutableList.of(noiseLayer, biomeLayer, noiseLayer));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU3MzQ1Nw=="}, "originalCommit": {"oid": "a05b2f5a808a47577cbe33af6b074026e7ae1bbf"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzE3NDA5OnYy", "diffSide": "RIGHT", "path": "patchwork-level-generators/src/main/java/net/patchworkmc/mixin/levelgenerators/MixinServerWorld.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMjozMTowN1rOGDvVPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMjozOTo1M1rOGDvdPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU3NDM5Ng==", "bodyText": "I'd really like to find an alternative to this. Maybe at least it would be possible to only mess with the createChunkGenerator call?", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r406574396", "createdAt": "2020-04-10T02:31:07Z", "author": {"login": "coderbot16"}, "path": "patchwork-level-generators/src/main/java/net/patchworkmc/mixin/levelgenerators/MixinServerWorld.java", "diffHunk": "@@ -17,34 +17,35 @@\n  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n  */\n \n-package net.patchworkmc.mixin.worldtypes;\n+package net.patchworkmc.mixin.levelgenerators;\n \n import net.minecraftforge.common.extensions.IForgeWorldType;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.asm.mixin.injection.At;\n import org.spongepowered.asm.mixin.injection.Inject;\n import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n \n+import net.minecraft.server.world.ServerChunkManager;\n+import net.minecraft.server.world.ServerWorld;\n import net.minecraft.world.World;\n+import net.minecraft.world.chunk.ChunkManager;\n import net.minecraft.world.dimension.Dimension;\n import net.minecraft.world.dimension.DimensionType;\n-import net.minecraft.world.dimension.OverworldDimension;\n-import net.minecraft.world.gen.chunk.ChunkGenerator;\n-import net.minecraft.world.gen.chunk.ChunkGeneratorConfig;\n import net.minecraft.world.level.LevelGeneratorType;\n \n-@Mixin(OverworldDimension.class)\n-public abstract class MixinOverworldDimension extends Dimension {\n-\tpublic MixinOverworldDimension(World world, DimensionType type) {\n-\t\tsuper(world, type);\n-\t}\n+import net.patchworkmc.impl.levelgenerators.ChunkManagerValues;\n+import net.patchworkmc.impl.levelgenerators.PatchworkGeneratorType;\n \n-\t@Inject(method = \"createChunkGenerator\", at = @At(\"RETURN\"), cancellable = true)\n-\tprivate void createChunkGenerator(CallbackInfoReturnable<ChunkGenerator<? extends ChunkGeneratorConfig>> info) {\n-\t\tLevelGeneratorType generatorType = this.world.getLevelProperties().getGeneratorType();\n+@Mixin(ServerWorld.class)\n+public abstract class MixinServerWorld {\n+\t@Inject(method = \"method_14168\", at = @At(\"HEAD\"), cancellable = true)\n+\tprivate static void createChunkGenerator(World world, Dimension dimension, CallbackInfoReturnable<ChunkManager> info) {\n+\t\tLevelGeneratorType generatorType = world.getLevelProperties().getGeneratorType();\n \n-\t\tif (generatorType instanceof IForgeWorldType) {\n-\t\t\tinfo.setReturnValue(((IForgeWorldType) generatorType).createChunkGenerator(this.world));\n+\t\tif (generatorType instanceof PatchworkGeneratorType) {\n+\t\t\tinfo.setReturnValue(new ServerChunkManager((ServerWorld) world, ChunkManagerValues.file, ChunkManagerValues.dataFixer, ChunkManagerValues.structureManager, ChunkManagerValues.workerExecutor, ((IForgeWorldType) generatorType).createChunkGenerator(world), ChunkManagerValues.viewDistance, ChunkManagerValues.progressListener, () -> {\n+\t\t\t\treturn ChunkManagerValues.server.getWorld(DimensionType.OVERWORLD).getPersistentStateManager();\n+\t\t\t}));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a05b2f5a808a47577cbe33af6b074026e7ae1bbf"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU3NTY1OA==", "bodyText": "createChunkGenerator is abstract", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r406575658", "createdAt": "2020-04-10T02:36:10Z", "author": {"login": "valoeghese"}, "path": "patchwork-level-generators/src/main/java/net/patchworkmc/mixin/levelgenerators/MixinServerWorld.java", "diffHunk": "@@ -17,34 +17,35 @@\n  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n  */\n \n-package net.patchworkmc.mixin.worldtypes;\n+package net.patchworkmc.mixin.levelgenerators;\n \n import net.minecraftforge.common.extensions.IForgeWorldType;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.asm.mixin.injection.At;\n import org.spongepowered.asm.mixin.injection.Inject;\n import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n \n+import net.minecraft.server.world.ServerChunkManager;\n+import net.minecraft.server.world.ServerWorld;\n import net.minecraft.world.World;\n+import net.minecraft.world.chunk.ChunkManager;\n import net.minecraft.world.dimension.Dimension;\n import net.minecraft.world.dimension.DimensionType;\n-import net.minecraft.world.dimension.OverworldDimension;\n-import net.minecraft.world.gen.chunk.ChunkGenerator;\n-import net.minecraft.world.gen.chunk.ChunkGeneratorConfig;\n import net.minecraft.world.level.LevelGeneratorType;\n \n-@Mixin(OverworldDimension.class)\n-public abstract class MixinOverworldDimension extends Dimension {\n-\tpublic MixinOverworldDimension(World world, DimensionType type) {\n-\t\tsuper(world, type);\n-\t}\n+import net.patchworkmc.impl.levelgenerators.ChunkManagerValues;\n+import net.patchworkmc.impl.levelgenerators.PatchworkGeneratorType;\n \n-\t@Inject(method = \"createChunkGenerator\", at = @At(\"RETURN\"), cancellable = true)\n-\tprivate void createChunkGenerator(CallbackInfoReturnable<ChunkGenerator<? extends ChunkGeneratorConfig>> info) {\n-\t\tLevelGeneratorType generatorType = this.world.getLevelProperties().getGeneratorType();\n+@Mixin(ServerWorld.class)\n+public abstract class MixinServerWorld {\n+\t@Inject(method = \"method_14168\", at = @At(\"HEAD\"), cancellable = true)\n+\tprivate static void createChunkGenerator(World world, Dimension dimension, CallbackInfoReturnable<ChunkManager> info) {\n+\t\tLevelGeneratorType generatorType = world.getLevelProperties().getGeneratorType();\n \n-\t\tif (generatorType instanceof IForgeWorldType) {\n-\t\t\tinfo.setReturnValue(((IForgeWorldType) generatorType).createChunkGenerator(this.world));\n+\t\tif (generatorType instanceof PatchworkGeneratorType) {\n+\t\t\tinfo.setReturnValue(new ServerChunkManager((ServerWorld) world, ChunkManagerValues.file, ChunkManagerValues.dataFixer, ChunkManagerValues.structureManager, ChunkManagerValues.workerExecutor, ((IForgeWorldType) generatorType).createChunkGenerator(world), ChunkManagerValues.viewDistance, ChunkManagerValues.progressListener, () -> {\n+\t\t\t\treturn ChunkManagerValues.server.getWorld(DimensionType.OVERWORLD).getPersistentStateManager();\n+\t\t\t}));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU3NDM5Ng=="}, "originalCommit": {"oid": "a05b2f5a808a47577cbe33af6b074026e7ae1bbf"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU3NjQ0NA==", "bodyText": "I could probably @reDIrect lol", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r406576444", "createdAt": "2020-04-10T02:39:53Z", "author": {"login": "valoeghese"}, "path": "patchwork-level-generators/src/main/java/net/patchworkmc/mixin/levelgenerators/MixinServerWorld.java", "diffHunk": "@@ -17,34 +17,35 @@\n  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n  */\n \n-package net.patchworkmc.mixin.worldtypes;\n+package net.patchworkmc.mixin.levelgenerators;\n \n import net.minecraftforge.common.extensions.IForgeWorldType;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.asm.mixin.injection.At;\n import org.spongepowered.asm.mixin.injection.Inject;\n import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n \n+import net.minecraft.server.world.ServerChunkManager;\n+import net.minecraft.server.world.ServerWorld;\n import net.minecraft.world.World;\n+import net.minecraft.world.chunk.ChunkManager;\n import net.minecraft.world.dimension.Dimension;\n import net.minecraft.world.dimension.DimensionType;\n-import net.minecraft.world.dimension.OverworldDimension;\n-import net.minecraft.world.gen.chunk.ChunkGenerator;\n-import net.minecraft.world.gen.chunk.ChunkGeneratorConfig;\n import net.minecraft.world.level.LevelGeneratorType;\n \n-@Mixin(OverworldDimension.class)\n-public abstract class MixinOverworldDimension extends Dimension {\n-\tpublic MixinOverworldDimension(World world, DimensionType type) {\n-\t\tsuper(world, type);\n-\t}\n+import net.patchworkmc.impl.levelgenerators.ChunkManagerValues;\n+import net.patchworkmc.impl.levelgenerators.PatchworkGeneratorType;\n \n-\t@Inject(method = \"createChunkGenerator\", at = @At(\"RETURN\"), cancellable = true)\n-\tprivate void createChunkGenerator(CallbackInfoReturnable<ChunkGenerator<? extends ChunkGeneratorConfig>> info) {\n-\t\tLevelGeneratorType generatorType = this.world.getLevelProperties().getGeneratorType();\n+@Mixin(ServerWorld.class)\n+public abstract class MixinServerWorld {\n+\t@Inject(method = \"method_14168\", at = @At(\"HEAD\"), cancellable = true)\n+\tprivate static void createChunkGenerator(World world, Dimension dimension, CallbackInfoReturnable<ChunkManager> info) {\n+\t\tLevelGeneratorType generatorType = world.getLevelProperties().getGeneratorType();\n \n-\t\tif (generatorType instanceof IForgeWorldType) {\n-\t\t\tinfo.setReturnValue(((IForgeWorldType) generatorType).createChunkGenerator(this.world));\n+\t\tif (generatorType instanceof PatchworkGeneratorType) {\n+\t\t\tinfo.setReturnValue(new ServerChunkManager((ServerWorld) world, ChunkManagerValues.file, ChunkManagerValues.dataFixer, ChunkManagerValues.structureManager, ChunkManagerValues.workerExecutor, ((IForgeWorldType) generatorType).createChunkGenerator(world), ChunkManagerValues.viewDistance, ChunkManagerValues.progressListener, () -> {\n+\t\t\t\treturn ChunkManagerValues.server.getWorld(DimensionType.OVERWORLD).getPersistentStateManager();\n+\t\t\t}));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU3NDM5Ng=="}, "originalCommit": {"oid": "a05b2f5a808a47577cbe33af6b074026e7ae1bbf"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjk0ODExOnYy", "diffSide": "RIGHT", "path": "patchwork-level-generators/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMjowOToxMVrOGEQZ3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMDoxNjoyNFrOGGQBnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNjI1Mw==", "bodyText": "Might want to add some detail as to what this module does", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r407116253", "createdAt": "2020-04-11T22:09:11Z", "author": {"login": "coderbot16"}, "path": "patchwork-level-generators/README.md", "diffHunk": "@@ -0,0 +1,2 @@\n+## TODO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb8be5dd46fb3959b41518b5322f1693af875be0"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwNzE5Nw==", "bodyText": "I added more to the file, not sure why it didn't update", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r409207197", "createdAt": "2020-04-16T00:16:24Z", "author": {"login": "valoeghese"}, "path": "patchwork-level-generators/README.md", "diffHunk": "@@ -0,0 +1,2 @@\n+## TODO", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNjI1Mw=="}, "originalCommit": {"oid": "cb8be5dd46fb3959b41518b5322f1693af875be0"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjk1MDYxOnYy", "diffSide": "RIGHT", "path": "patchwork-level-generators/src/main/java/net/patchworkmc/mixin/levelgenerators/MixinBiomeLayers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMjoxMzoxMFrOGEQbEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMjoxMzoxMFrOGEQbEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNjU2Mw==", "bodyText": "This should probably use the redirect strategy discussed on Discord for now", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r407116563", "createdAt": "2020-04-11T22:13:10Z", "author": {"login": "coderbot16"}, "path": "patchwork-level-generators/src/main/java/net/patchworkmc/mixin/levelgenerators/MixinBiomeLayers.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.levelgenerators;\n+\n+import java.util.function.LongFunction;\n+\n+import com.google.common.collect.ImmutableList;\n+import net.minecraftforge.common.extensions.IForgeWorldType;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.world.biome.layer.AddClimateLayers;\n+import net.minecraft.world.biome.layer.AddColdClimatesLayer;\n+import net.minecraft.world.biome.layer.AddDeepOceanLayer;\n+import net.minecraft.world.biome.layer.AddEdgeBiomesLayer;\n+import net.minecraft.world.biome.layer.AddHillsLayer;\n+import net.minecraft.world.biome.layer.AddIslandLayer;\n+import net.minecraft.world.biome.layer.AddMushroomIslandLayer;\n+import net.minecraft.world.biome.layer.AddRiversLayer;\n+import net.minecraft.world.biome.layer.AddSunflowerPlainsLayer;\n+import net.minecraft.world.biome.layer.ApplyOceanTemperatureLayer;\n+import net.minecraft.world.biome.layer.BiomeLayers;\n+import net.minecraft.world.biome.layer.CellScaleLayer;\n+import net.minecraft.world.biome.layer.ContinentLayer;\n+import net.minecraft.world.biome.layer.IncreaseEdgeCurvatureLayer;\n+import net.minecraft.world.biome.layer.NoiseToRiverLayer;\n+import net.minecraft.world.biome.layer.OceanTemperatureLayer;\n+import net.minecraft.world.biome.layer.ScaleLayer;\n+import net.minecraft.world.biome.layer.SimpleLandNoiseLayer;\n+import net.minecraft.world.biome.layer.SmoothenShorelineLayer;\n+import net.minecraft.world.biome.layer.type.ParentedLayer;\n+import net.minecraft.world.biome.layer.util.LayerFactory;\n+import net.minecraft.world.biome.layer.util.LayerSampleContext;\n+import net.minecraft.world.biome.layer.util.LayerSampler;\n+import net.minecraft.world.gen.chunk.OverworldChunkGeneratorConfig;\n+import net.minecraft.world.level.LevelGeneratorType;\n+\n+import net.patchworkmc.api.levelgenerators.PatchworkLevelGeneratorType;\n+\n+@Mixin(BiomeLayers.class)\n+public class MixinBiomeLayers {\n+\t@Shadow\n+\tprivate static <T extends LayerSampler, C extends LayerSampleContext<T>> LayerFactory<T> stack(long seed, ParentedLayer layer, LayerFactory<T> parent, int count, LongFunction<C> contextProvider) {\n+\t\tthrow new RuntimeException(\"Failed to shadow BiomeLayers#stack!\");\n+\t}\n+\n+\t@Inject(at = @At(\"HEAD\"), method = \"build\", cancellable = true)\n+\tprivate static <T extends LayerSampler, C extends LayerSampleContext<T>> void build(LevelGeneratorType generatorType, OverworldChunkGeneratorConfig settings, LongFunction<C> contextProvider, CallbackInfoReturnable<ImmutableList<LayerFactory<T>>> info) {\n+\t\tif (generatorType instanceof PatchworkLevelGeneratorType) {\n+\t\t\tLayerFactory<T> continentLayer = ContinentLayer.INSTANCE.create(contextProvider.apply(1L));\n+\t\t\tcontinentLayer = ScaleLayer.FUZZY.create(contextProvider.apply(2000L), continentLayer);\n+\n+\t\t\tcontinentLayer = IncreaseEdgeCurvatureLayer.INSTANCE.create(contextProvider.apply(1L), continentLayer);\n+\t\t\tcontinentLayer = ScaleLayer.NORMAL.create(contextProvider.apply(2001L), continentLayer);\n+\n+\t\t\tcontinentLayer = IncreaseEdgeCurvatureLayer.INSTANCE.create(contextProvider.apply(2L), continentLayer);\n+\t\t\tcontinentLayer = IncreaseEdgeCurvatureLayer.INSTANCE.create(contextProvider.apply(50L), continentLayer);\n+\t\t\tcontinentLayer = IncreaseEdgeCurvatureLayer.INSTANCE.create(contextProvider.apply(70L), continentLayer);\n+\t\t\tcontinentLayer = AddIslandLayer.INSTANCE.create(contextProvider.apply(2L), continentLayer);\n+\n+\t\t\tLayerFactory<T> layerFactory2 = OceanTemperatureLayer.INSTANCE.create(contextProvider.apply(2L));\n+\t\t\tlayerFactory2 = stack(2001L, ScaleLayer.NORMAL, layerFactory2, 6, contextProvider);\n+\n+\t\t\tcontinentLayer = AddColdClimatesLayer.INSTANCE.create(contextProvider.apply(2L), continentLayer);\n+\t\t\tcontinentLayer = IncreaseEdgeCurvatureLayer.INSTANCE.create(contextProvider.apply(3L), continentLayer);\n+\t\t\tcontinentLayer = AddClimateLayers.AddTemperateBiomesLayer.INSTANCE.create(contextProvider.apply(2L), continentLayer);\n+\t\t\tcontinentLayer = AddClimateLayers.AddCoolBiomesLayer.INSTANCE.create(contextProvider.apply(2L), continentLayer);\n+\t\t\tcontinentLayer = AddClimateLayers.AddSpecialBiomesLayer.INSTANCE.create(contextProvider.apply(3L), continentLayer);\n+\t\t\tcontinentLayer = ScaleLayer.NORMAL.create(contextProvider.apply(2002L), continentLayer);\n+\t\t\tcontinentLayer = ScaleLayer.NORMAL.create(contextProvider.apply(2003L), continentLayer);\n+\n+\t\t\tcontinentLayer = IncreaseEdgeCurvatureLayer.INSTANCE.create(contextProvider.apply(4L), continentLayer);\n+\t\t\tcontinentLayer = AddMushroomIslandLayer.INSTANCE.create(contextProvider.apply(5L), continentLayer);\n+\t\t\tcontinentLayer = AddDeepOceanLayer.INSTANCE.create(contextProvider.apply(4L), continentLayer);\n+\t\t\tcontinentLayer = stack(1000L, ScaleLayer.NORMAL, continentLayer, 0, contextProvider);\n+\n+\t\t\tint biomeSize = 4;\n+\t\t\tint riverSize = biomeSize;\n+\n+\t\t\tif (settings != null) {\n+\t\t\t\tbiomeSize = settings.getBiomeSize();\n+\t\t\t\triverSize = settings.getRiverSize();\n+\t\t\t}\n+\n+\t\t\tif (generatorType == LevelGeneratorType.LARGE_BIOMES) {\n+\t\t\t\tbiomeSize = 6;\n+\t\t\t}\n+\n+\t\t\tLayerFactory<T> riverLayer = stack(1000L, ScaleLayer.NORMAL, continentLayer, 0, contextProvider);\n+\t\t\triverLayer = SimpleLandNoiseLayer.INSTANCE.create(contextProvider.apply(100L), riverLayer);\n+\n+\t\t\tLayerFactory<T> noiseLayer = ((IForgeWorldType) generatorType).getBiomeLayer(continentLayer, settings, contextProvider);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb8be5dd46fb3959b41518b5322f1693af875be0"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzkzNDMzOnYy", "diffSide": "RIGHT", "path": "patchwork-level-generators/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzo0MzoyNFrOGGwWMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzo0MzoyNFrOGGwWMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczNjc1NQ==", "bodyText": "Don't forget a top level header\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ## Reasoning\n          \n          \n            \n            # patchwork-level-generators\n          \n          \n            \n            \n          \n          \n            \n            ## Reasoning", "url": "https://github.com/PatchworkMC/patchwork-api/pull/60#discussion_r409736755", "createdAt": "2020-04-16T17:43:24Z", "author": {"login": "coderbot16"}, "path": "patchwork-level-generators/README.md", "diffHunk": "@@ -0,0 +1,7 @@\n+## Reasoning", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fafd1c9485e1778201b7863a90f02e7a5df957a"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1511, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}