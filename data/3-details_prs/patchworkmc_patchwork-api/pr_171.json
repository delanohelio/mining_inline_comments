{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyOTA4MDc1", "number": 171, "title": "Feature/armor", "bodyText": "Implements callbacks in IForgeItem:\n\nonArmorTick\ngetArmorTexture\ngetArmorModel", "createdAt": "2020-08-04T17:38:57Z", "url": "https://github.com/PatchworkMC/patchwork-api/pull/171", "merged": true, "mergeCommit": {"oid": "ea0ad1b943f83e618ba5dac61fc588085292241a"}, "closed": true, "closedAt": "2020-08-19T01:36:09Z", "author": {"login": "rikka0w0"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7p5RugH2gAyNDYyOTA4MDc1Ojc1ODBmNDg2NjE4OGU4ZTBkODhiMGMzN2Q2NDM2ZjA3YjEyYWE3ZjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdARb0-gFqTQ3MDAxMzYxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7580f4866188e8e0d88b0c37d6436f07b12aa7f3", "author": {"user": {"login": "rikka0w0", "name": "Rikka0_0\u5c0f\u516d\u82b1"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/7580f4866188e8e0d88b0c37d6436f07b12aa7f3", "committedDate": "2020-08-04T17:16:17Z", "message": "Impl IForgeItem.getArmorTexture"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0333347a902af655b5c9ac560b3b769263348048", "author": {"user": {"login": "rikka0w0", "name": "Rikka0_0\u5c0f\u516d\u82b1"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/0333347a902af655b5c9ac560b3b769263348048", "committedDate": "2020-08-04T17:38:09Z", "message": "Impl IForgeItem.onArmorTick"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18159a2d25a7f9a1a28412a7573cb3bd2ef7df4b", "author": {"user": {"login": "rikka0w0", "name": "Rikka0_0\u5c0f\u516d\u82b1"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/18159a2d25a7f9a1a28412a7573cb3bd2ef7df4b", "committedDate": "2020-08-04T19:48:12Z", "message": "Fix getArmorModel not being called properly"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMDMyMzMw", "url": "https://github.com/PatchworkMC/patchwork-api/pull/171#pullrequestreview-461032330", "createdAt": "2020-08-04T17:43:00Z", "commit": {"oid": "0333347a902af655b5c9ac560b3b769263348048"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzo0MzowMFrOG7q2OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzo0MzozMlrOG7q3hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIyMTE3Ng==", "bodyText": "Interface or @unique", "url": "https://github.com/PatchworkMC/patchwork-api/pull/171#discussion_r465221176", "createdAt": "2020-08-04T17:43:00Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-extensions-item/src/main/java/net/patchworkmc/mixin/extensions/item/client/MixinArmorFeatureRenderer.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.extensions.item.client;\n+\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import org.objectweb.asm.Opcodes;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.At.Shift;\n+import org.spongepowered.asm.mixin.injection.Constant;\n+import org.spongepowered.asm.mixin.injection.ModifyConstant;\n+import org.spongepowered.asm.mixin.injection.ModifyVariable;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.Slice;\n+\n+import net.minecraft.client.render.entity.feature.ArmorFeatureRenderer;\n+import net.minecraft.client.render.entity.model.BipedEntityModel;\n+import net.minecraft.entity.Entity;\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.ArmorItem;\n+import net.minecraft.item.DyeableArmorItem;\n+import net.minecraft.item.DyeableItem;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.util.Identifier;\n+\n+import net.patchworkmc.impl.extensions.item.PatchworkArmorItemHandler;\n+\n+/**\n+ * TODO: Check if any Fabric mods calls getArmorTexture and method_4174 directly,\n+ * I don't think so because both are private.\n+ */\n+@Mixin(ArmorFeatureRenderer.class)\n+public abstract class MixinArmorFeatureRenderer {\n+\t@Shadow\n+\t@Final\n+\tprivate static Map<String, Identifier> ARMOR_TEXTURE_CACHE;\n+\n+\t@Shadow\n+\tprivate boolean isLegs(EquipmentSlot equipmentSlot) {\n+\t\treturn false;\n+\t}\n+\n+\t@SuppressWarnings(\"rawtypes\")\n+\t@Redirect(method = \"renderArmor\", at = @At(value = \"INVOKE\", ordinal = 0,\n+\t\t\ttarget = \"net/minecraft/client/render/entity/feature/ArmorFeatureRenderer.getArmor(Lnet/minecraft/entity/EquipmentSlot;)Lnet/minecraft/client/render/entity/model/BipedEntityModel;\"))\n+\tprivate BipedEntityModel getArmorModel(ArmorFeatureRenderer me, EquipmentSlot equipmentSlot,\n+\t\t\tLivingEntity livingEntity, float f, float g, float h, float i, float j, float k, float l, EquipmentSlot equipmentSlot2) {\n+\t\tBipedEntityModel defaultModel = me.getArmor(equipmentSlot);\n+\t\tItemStack itemStack = livingEntity.getEquippedStack(equipmentSlot);\n+\t\treturn this.getArmorModelHook(livingEntity, itemStack, equipmentSlot, defaultModel);\n+\t}\n+\n+\t// In 1.15 and above, getArmorTexture(ArmorItem, boolean) is removed.\n+\t@SuppressWarnings(\"rawtypes\")\n+\t@Redirect(method = \"renderArmor\", at = @At(value = \"INVOKE\", ordinal = 0,\n+\t\t\ttarget = \"net/minecraft/client/render/entity/feature/ArmorFeatureRenderer.getArmorTexture(Lnet/minecraft/item/ArmorItem;Z)Lnet/minecraft/util/Identifier;\"))\n+\tprivate Identifier getArmorTexture(ArmorFeatureRenderer me, ArmorItem armor, boolean bl,\n+\t\t\tLivingEntity livingEntity, float f, float g, float h, float i, float j, float k, float l, EquipmentSlot equipmentSlot) {\n+\t\tItemStack itemStack = livingEntity.getEquippedStack(equipmentSlot);\n+\t\treturn this.getArmorResource(livingEntity, itemStack, equipmentSlot, null);\n+\t}\n+\n+\t// In 1.15 and above, method_4174 is renamed to getArmorTexture.\n+\t@SuppressWarnings(\"rawtypes\")\n+\t@Redirect(method = \"renderArmor\", at = @At(value = \"INVOKE\", ordinal = 0,\n+\t\t\ttarget = \"net/minecraft/client/render/entity/feature/ArmorFeatureRenderer.method_4174(Lnet/minecraft/item/ArmorItem;ZLjava/lang/String;)Lnet/minecraft/util/Identifier;\"))\n+\tprivate Identifier getArmorTexture(ArmorFeatureRenderer me, ArmorItem armor, boolean bl, String overlay,\n+\t\t\tLivingEntity livingEntity, float f, float g, float h, float i, float j, float k, float l, EquipmentSlot equipmentSlot) {\n+\t\tItemStack itemStack = livingEntity.getEquippedStack(equipmentSlot);\n+\t\treturn this.getArmorResource(livingEntity, itemStack, equipmentSlot, overlay);\n+\t}\n+\n+\t/*\n+\t * this.bindTexture(xxxxxxxx);\t// The first bindTexture() within renderArmor().\n+\t * - if (armorItem instanceof DyeableArmorItem) {\n+\t * - int m = ((DyeableArmorItem)armorItem).getColor(itemStack);\n+\t * + if (armorItem instanceof DyeableItem) {\n+\t * + armorItem = hookIfHead(armorItem);\n+\t * + int m = ((DyeableItem) armorItem).hookGetColor(armorItem, itemStack);\n+\t */\n+\t@ModifyConstant(method = \"renderArmor\", constant = @Constant(classValue = DyeableArmorItem.class, ordinal = 0))\n+\tprivate boolean isDyeableItem(Object obj, Class cls) {\n+\t\treturn obj instanceof DyeableItem; // Allow this for anything, not only cloth\n+\t}\n+\n+\t@Unique\n+\tprivate static final String FeatureRenderer_bindTexture = \"net/minecraft/client/render/entity/feature/FeatureRenderer.bindTexture(Lnet/minecraft/util/Identifier;)V\";\n+\t@Unique\n+\tprivate static final String DyeableArmorItem_getColor = \"net/minecraft/item/DyeableArmorItem.getColor(Lnet/minecraft/item/ItemStack;)I\";\n+\n+\t@ModifyVariable(method = \"renderArmor\", ordinal = 0, at = @At(value = \"JUMP\", ordinal = 0, opcode = Opcodes.IFEQ, shift = Shift.AFTER),\n+\t\t\tslice = @Slice(\n+\t\t\t\t\tfrom = @At(value = \"INVOKE\", ordinal = 0, target = FeatureRenderer_bindTexture),\n+\t\t\t\t\tto = @At(value = \"INVOKE\", ordinal = 0, target = DyeableArmorItem_getColor)\n+\t\t\t))\n+\tprivate ArmorItem hookIfHead(ArmorItem armorItem) {\n+\t\treturn (DyeableArmorItem) Items.LEATHER_HELMET;\t// Bypass the checkcast\n+\t}\n+\n+\t@Redirect(method = \"renderArmor\", at = @At(value = \"INVOKE\", ordinal = 0, target = DyeableArmorItem_getColor))\n+\tprivate int hookGetColor(DyeableArmorItem dummy, ItemStack itemStack) {\n+\t\treturn ((DyeableItem) itemStack.getItem()).getColor(itemStack);\n+\t}\n+\n+\t/*=================================== FORGE START =========================================*/\n+\t/**\n+\t * Hook to allow item-sensitive armor model. for LayerBipedArmor.\n+\t */\n+\t@SuppressWarnings(\"rawtypes\")\n+\tprotected BipedEntityModel getArmorModelHook(LivingEntity entity, ItemStack itemStack, EquipmentSlot slot, BipedEntityModel model) {\n+\t\treturn model;\n+\t}\n+\n+\t/**\n+\t * More generic ForgeHook version of the above function, it allows for Items to\n+\t * have more control over what texture they provide.\n+\t *\n+\t * @param entity Entity wearing the armor\n+\t * @param stack  ItemStack for the armor\n+\t * @param slot   Slot ID that the item is in\n+\t * @param type   Subtype, can be null or \"overlay\"\n+\t * @return ResourceLocation pointing at the armor's texture\n+\t */\n+\tpublic Identifier getArmorResource(Entity entity, ItemStack stack, EquipmentSlot slot, @Nullable String type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0333347a902af655b5c9ac560b3b769263348048"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIyMTUxMA==", "bodyText": "remove MCP please", "url": "https://github.com/PatchworkMC/patchwork-api/pull/171#discussion_r465221510", "createdAt": "2020-08-04T17:43:32Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-extensions-item/src/main/java/net/patchworkmc/mixin/extensions/item/client/MixinArmorFeatureRenderer.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.extensions.item.client;\n+\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import org.objectweb.asm.Opcodes;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.At.Shift;\n+import org.spongepowered.asm.mixin.injection.Constant;\n+import org.spongepowered.asm.mixin.injection.ModifyConstant;\n+import org.spongepowered.asm.mixin.injection.ModifyVariable;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.Slice;\n+\n+import net.minecraft.client.render.entity.feature.ArmorFeatureRenderer;\n+import net.minecraft.client.render.entity.model.BipedEntityModel;\n+import net.minecraft.entity.Entity;\n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.ArmorItem;\n+import net.minecraft.item.DyeableArmorItem;\n+import net.minecraft.item.DyeableItem;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.util.Identifier;\n+\n+import net.patchworkmc.impl.extensions.item.PatchworkArmorItemHandler;\n+\n+/**\n+ * TODO: Check if any Fabric mods calls getArmorTexture and method_4174 directly,\n+ * I don't think so because both are private.\n+ */\n+@Mixin(ArmorFeatureRenderer.class)\n+public abstract class MixinArmorFeatureRenderer {\n+\t@Shadow\n+\t@Final\n+\tprivate static Map<String, Identifier> ARMOR_TEXTURE_CACHE;\n+\n+\t@Shadow\n+\tprivate boolean isLegs(EquipmentSlot equipmentSlot) {\n+\t\treturn false;\n+\t}\n+\n+\t@SuppressWarnings(\"rawtypes\")\n+\t@Redirect(method = \"renderArmor\", at = @At(value = \"INVOKE\", ordinal = 0,\n+\t\t\ttarget = \"net/minecraft/client/render/entity/feature/ArmorFeatureRenderer.getArmor(Lnet/minecraft/entity/EquipmentSlot;)Lnet/minecraft/client/render/entity/model/BipedEntityModel;\"))\n+\tprivate BipedEntityModel getArmorModel(ArmorFeatureRenderer me, EquipmentSlot equipmentSlot,\n+\t\t\tLivingEntity livingEntity, float f, float g, float h, float i, float j, float k, float l, EquipmentSlot equipmentSlot2) {\n+\t\tBipedEntityModel defaultModel = me.getArmor(equipmentSlot);\n+\t\tItemStack itemStack = livingEntity.getEquippedStack(equipmentSlot);\n+\t\treturn this.getArmorModelHook(livingEntity, itemStack, equipmentSlot, defaultModel);\n+\t}\n+\n+\t// In 1.15 and above, getArmorTexture(ArmorItem, boolean) is removed.\n+\t@SuppressWarnings(\"rawtypes\")\n+\t@Redirect(method = \"renderArmor\", at = @At(value = \"INVOKE\", ordinal = 0,\n+\t\t\ttarget = \"net/minecraft/client/render/entity/feature/ArmorFeatureRenderer.getArmorTexture(Lnet/minecraft/item/ArmorItem;Z)Lnet/minecraft/util/Identifier;\"))\n+\tprivate Identifier getArmorTexture(ArmorFeatureRenderer me, ArmorItem armor, boolean bl,\n+\t\t\tLivingEntity livingEntity, float f, float g, float h, float i, float j, float k, float l, EquipmentSlot equipmentSlot) {\n+\t\tItemStack itemStack = livingEntity.getEquippedStack(equipmentSlot);\n+\t\treturn this.getArmorResource(livingEntity, itemStack, equipmentSlot, null);\n+\t}\n+\n+\t// In 1.15 and above, method_4174 is renamed to getArmorTexture.\n+\t@SuppressWarnings(\"rawtypes\")\n+\t@Redirect(method = \"renderArmor\", at = @At(value = \"INVOKE\", ordinal = 0,\n+\t\t\ttarget = \"net/minecraft/client/render/entity/feature/ArmorFeatureRenderer.method_4174(Lnet/minecraft/item/ArmorItem;ZLjava/lang/String;)Lnet/minecraft/util/Identifier;\"))\n+\tprivate Identifier getArmorTexture(ArmorFeatureRenderer me, ArmorItem armor, boolean bl, String overlay,\n+\t\t\tLivingEntity livingEntity, float f, float g, float h, float i, float j, float k, float l, EquipmentSlot equipmentSlot) {\n+\t\tItemStack itemStack = livingEntity.getEquippedStack(equipmentSlot);\n+\t\treturn this.getArmorResource(livingEntity, itemStack, equipmentSlot, overlay);\n+\t}\n+\n+\t/*\n+\t * this.bindTexture(xxxxxxxx);\t// The first bindTexture() within renderArmor().\n+\t * - if (armorItem instanceof DyeableArmorItem) {\n+\t * - int m = ((DyeableArmorItem)armorItem).getColor(itemStack);\n+\t * + if (armorItem instanceof DyeableItem) {\n+\t * + armorItem = hookIfHead(armorItem);\n+\t * + int m = ((DyeableItem) armorItem).hookGetColor(armorItem, itemStack);\n+\t */\n+\t@ModifyConstant(method = \"renderArmor\", constant = @Constant(classValue = DyeableArmorItem.class, ordinal = 0))\n+\tprivate boolean isDyeableItem(Object obj, Class cls) {\n+\t\treturn obj instanceof DyeableItem; // Allow this for anything, not only cloth\n+\t}\n+\n+\t@Unique\n+\tprivate static final String FeatureRenderer_bindTexture = \"net/minecraft/client/render/entity/feature/FeatureRenderer.bindTexture(Lnet/minecraft/util/Identifier;)V\";\n+\t@Unique\n+\tprivate static final String DyeableArmorItem_getColor = \"net/minecraft/item/DyeableArmorItem.getColor(Lnet/minecraft/item/ItemStack;)I\";\n+\n+\t@ModifyVariable(method = \"renderArmor\", ordinal = 0, at = @At(value = \"JUMP\", ordinal = 0, opcode = Opcodes.IFEQ, shift = Shift.AFTER),\n+\t\t\tslice = @Slice(\n+\t\t\t\t\tfrom = @At(value = \"INVOKE\", ordinal = 0, target = FeatureRenderer_bindTexture),\n+\t\t\t\t\tto = @At(value = \"INVOKE\", ordinal = 0, target = DyeableArmorItem_getColor)\n+\t\t\t))\n+\tprivate ArmorItem hookIfHead(ArmorItem armorItem) {\n+\t\treturn (DyeableArmorItem) Items.LEATHER_HELMET;\t// Bypass the checkcast\n+\t}\n+\n+\t@Redirect(method = \"renderArmor\", at = @At(value = \"INVOKE\", ordinal = 0, target = DyeableArmorItem_getColor))\n+\tprivate int hookGetColor(DyeableArmorItem dummy, ItemStack itemStack) {\n+\t\treturn ((DyeableItem) itemStack.getItem()).getColor(itemStack);\n+\t}\n+\n+\t/*=================================== FORGE START =========================================*/\n+\t/**\n+\t * Hook to allow item-sensitive armor model. for LayerBipedArmor.\n+\t */\n+\t@SuppressWarnings(\"rawtypes\")\n+\tprotected BipedEntityModel getArmorModelHook(LivingEntity entity, ItemStack itemStack, EquipmentSlot slot, BipedEntityModel model) {\n+\t\treturn model;\n+\t}\n+\n+\t/**\n+\t * More generic ForgeHook version of the above function, it allows for Items to\n+\t * have more control over what texture they provide.\n+\t *\n+\t * @param entity Entity wearing the armor\n+\t * @param stack  ItemStack for the armor\n+\t * @param slot   Slot ID that the item is in\n+\t * @param type   Subtype, can be null or \"overlay\"\n+\t * @return ResourceLocation pointing at the armor's texture\n+\t */\n+\tpublic Identifier getArmorResource(Entity entity, ItemStack stack, EquipmentSlot slot, @Nullable String type) {\n+\t\tArmorItem item = (ArmorItem) stack.getItem();\n+\t\tString texture = item.getMaterial().getName();\n+\t\tString domain = \"minecraft\";\n+\t\tint idx = texture.indexOf(':');\n+\n+\t\tif (idx != -1) {\n+\t\t\tdomain = texture.substring(0, idx);\n+\t\t\ttexture = texture.substring(idx + 1);\n+\t\t}\n+\n+\t\tString s1 = String.format(\"%s:textures/models/armor/%s_layer_%d%s.png\", domain, texture, (isLegs(slot) ? 2 : 1),\n+\t\t\t\ttype == null ? \"\" : String.format(\"_%s\", type));\n+\n+\t\ts1 = PatchworkArmorItemHandler.getArmorTexture(entity, stack, s1, slot, type);\n+\t\tIdentifier resourcelocation = (Identifier) ARMOR_TEXTURE_CACHE.get(s1);\n+\n+\t\tif (resourcelocation == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0333347a902af655b5c9ac560b3b769263348048"}, "originalPosition": 166}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3ddf9a364ec460ed96f6060dfe11b2d45f484bf", "author": {"user": {"login": "rikka0w0", "name": "Rikka0_0\u5c0f\u516d\u82b1"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/e3ddf9a364ec460ed96f6060dfe11b2d45f484bf", "committedDate": "2020-08-05T17:21:29Z", "message": "Apply suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9ab57108cb09e4493cdae23690d2fb5235ad19b", "author": {"user": {"login": "rikka0w0", "name": "Rikka0_0\u5c0f\u516d\u82b1"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/e9ab57108cb09e4493cdae23690d2fb5235ad19b", "committedDate": "2020-08-05T17:22:39Z", "message": "Merge remote-tracking branch 'origin/master' into feature/armor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca24928bf7ddb84e05e0e9788ea987aac90db10e", "author": {"user": {"login": "rikka0w0", "name": "Rikka0_0\u5c0f\u516d\u82b1"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/ca24928bf7ddb84e05e0e9788ea987aac90db10e", "committedDate": "2020-08-09T22:24:09Z", "message": "Merge remote-tracking branch 'origin/master' into feature/armor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71aee5b497efb3d446bc0c48c2100faa9cbd8654", "author": {"user": {"login": "rikka0w0", "name": "Rikka0_0\u5c0f\u516d\u82b1"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/71aee5b497efb3d446bc0c48c2100faa9cbd8654", "committedDate": "2020-08-17T11:06:45Z", "message": "Merge remote-tracking branch 'origin/master' into feature/armor\n\nConflicts:\n\tpatchwork-god-classes/build.gradle\n\tpatchwork-god-classes/src/main/resources/fabric.mod.json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41773a3b9ab4775ed2e4341443b69a526129c3d9", "author": {"user": {"login": "rikka0w0", "name": "Rikka0_0\u5c0f\u516d\u82b1"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/41773a3b9ab4775ed2e4341443b69a526129c3d9", "committedDate": "2020-08-18T16:56:35Z", "message": "Merge remote-tracking branch 'origin/master' into feature/armor\n\nConflicts:\n\tpatchwork-god-classes/build.gradle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwMDEzNjEw", "url": "https://github.com/PatchworkMC/patchwork-api/pull/171#pullrequestreview-470013610", "createdAt": "2020-08-19T01:36:02Z", "commit": {"oid": "41773a3b9ab4775ed2e4341443b69a526129c3d9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 955, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}