{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyODU3Mjk5", "number": 106, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMTowNToxNVrOEKtaAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTowOToxMVrOELz3eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjY1MTUyOnYy", "diffSide": "RIGHT", "path": "patchwork-model-loader/src/main/java/net/minecraftforge/client/model/ModelLoader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMTowNToxNVrOGr6ByQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxOToyNTowN1rOGs2xlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5MjY4MQ==", "bodyText": "PatchworkModelLoader?", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r448692681", "createdAt": "2020-07-02T01:05:15Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-model-loader/src/main/java/net/minecraftforge/client/model/ModelLoader.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.client.model;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.Marker;\n+import org.apache.logging.log4j.MarkerManager;\n+\n+import net.minecraft.client.color.block.BlockColors;\n+import net.minecraft.client.render.model.BakedModel;\n+import net.minecraft.client.texture.SpriteAtlasTexture;\n+import net.minecraft.client.util.ModelIdentifier;\n+import net.minecraft.resource.ResourceManager;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.patchworkmc.impl.modelloader.AbstractModelLoader;\n+\n+public class ModelLoader extends net.minecraft.client.render.model.ModelLoader implements AbstractModelLoader {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23a5c0b78c512ffe5d68929c5cff122fc1ccb112"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2NzU2MA==", "bodyText": "We cannot rename this class, its methods are used by forge mods", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r448867560", "createdAt": "2020-07-02T09:21:08Z", "author": {"login": "rikka0w0"}, "path": "patchwork-model-loader/src/main/java/net/minecraftforge/client/model/ModelLoader.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.client.model;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.Marker;\n+import org.apache.logging.log4j.MarkerManager;\n+\n+import net.minecraft.client.color.block.BlockColors;\n+import net.minecraft.client.render.model.BakedModel;\n+import net.minecraft.client.texture.SpriteAtlasTexture;\n+import net.minecraft.client.util.ModelIdentifier;\n+import net.minecraft.resource.ResourceManager;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.patchworkmc.impl.modelloader.AbstractModelLoader;\n+\n+public class ModelLoader extends net.minecraft.client.render.model.ModelLoader implements AbstractModelLoader {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5MjY4MQ=="}, "originalCommit": {"oid": "23a5c0b78c512ffe5d68929c5cff122fc1ccb112"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4Nzk1Ng==", "bodyText": "oh, I misread the package", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r449687956", "createdAt": "2020-07-03T19:25:07Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-model-loader/src/main/java/net/minecraftforge/client/model/ModelLoader.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.client.model;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.Marker;\n+import org.apache.logging.log4j.MarkerManager;\n+\n+import net.minecraft.client.color.block.BlockColors;\n+import net.minecraft.client.render.model.BakedModel;\n+import net.minecraft.client.texture.SpriteAtlasTexture;\n+import net.minecraft.client.util.ModelIdentifier;\n+import net.minecraft.resource.ResourceManager;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.patchworkmc.impl.modelloader.AbstractModelLoader;\n+\n+public class ModelLoader extends net.minecraft.client.render.model.ModelLoader implements AbstractModelLoader {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5MjY4MQ=="}, "originalCommit": {"oid": "23a5c0b78c512ffe5d68929c5cff122fc1ccb112"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjY1Mjc5OnYy", "diffSide": "RIGHT", "path": "patchwork-model-loader/src/main/java/net/minecraftforge/client/model/ModelLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMTowNjowNFrOGr6Ciw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMTowNjowNFrOGr6Ciw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5Mjg3NQ==", "bodyText": ":voldethonk:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t// ignoring pure ResourceLocation arguments, all things we care about pass\n          \n          \n            \n            \t\t\t// ModelResourceLocation\n          \n          \n            \n            \t\t\t// ignoring pure Identifier arguments, all things we care about pass\n          \n          \n            \n            \t\t\t// ModelIdentifier", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r448692875", "createdAt": "2020-07-02T01:06:04Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-model-loader/src/main/java/net/minecraftforge/client/model/ModelLoader.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.client.model;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.Marker;\n+import org.apache.logging.log4j.MarkerManager;\n+\n+import net.minecraft.client.color.block.BlockColors;\n+import net.minecraft.client.render.model.BakedModel;\n+import net.minecraft.client.texture.SpriteAtlasTexture;\n+import net.minecraft.client.util.ModelIdentifier;\n+import net.minecraft.resource.ResourceManager;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.patchworkmc.impl.modelloader.AbstractModelLoader;\n+\n+public class ModelLoader extends net.minecraft.client.render.model.ModelLoader implements AbstractModelLoader {\n+\tprivate static final Marker MODELLOADING = MarkerManager.getMarker(\"MODELLOADING\");\n+\tprivate static Set<Identifier> specialModels = new HashSet<>();\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\tprivate final Map<Identifier, Exception> loadingExceptions = new HashMap<>();\n+\tprivate boolean isLoading = false;\n+\tprivate static ModelLoader instance;\n+\n+\t@Nullable\n+\tpublic static ModelLoader instance() {\n+\t\treturn instance;\n+\t}\n+\n+\tpublic boolean isLoading() {\n+\t\treturn isLoading;\n+\t}\n+\n+\tpublic ModelLoader(ResourceManager resourceManager, SpriteAtlasTexture spriteAtlas, BlockColors blockColors,\n+\t\t\tProfiler profiler) {\n+\t\tsuper(resourceManager, spriteAtlas, blockColors, profiler);\n+\t}\n+\n+\t/**\n+\t * Indicate to vanilla that it should load and bake the given model, even if no\n+\t * blocks or items use it. This is useful if e.g. you have baked models only for\n+\t * entity renderers. Call during\n+\t * {@link net.minecraftforge.client.event.ModelRegistryEvent}\n+\t *\n+\t * @param rl The model, either {@link ModelResourceLocation} to point to a\n+\t *           blockstate variant, or plain {@link ResourceLocation} to point\n+\t *           directly to a json in the models folder.\n+\t */\n+\tpublic static void addSpecialModel(Identifier rl) {\n+\t\tspecialModels.add(rl);\n+\t}\n+\n+\t@Override\n+\tpublic Set<Identifier> getSpecialModels() {\n+\t\treturn specialModels;\n+\t}\n+\n+\t/**\n+\t * Internal, do not use.\n+\t */\n+\tpublic void onPostBakeEvent(Map<Identifier, BakedModel> modelRegistry) {\n+\t\tBakedModel missingModel = modelRegistry.get(MISSING);\n+\n+\t\tfor (Map.Entry<Identifier, Exception> entry : loadingExceptions.entrySet()) {\n+\t\t\t// ignoring pure ResourceLocation arguments, all things we care about pass\n+\t\t\t// ModelResourceLocation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23a5c0b78c512ffe5d68929c5cff122fc1ccb112"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjY1NTY5OnYy", "diffSide": "RIGHT", "path": "patchwork-model-loader/src/main/java/net/patchworkmc/impl/modelloader/AbstractModelLoader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMTowNzozOFrOGr6EGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNToyNzowNlrOGsR5Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5MzI3NA==", "bodyText": "Abstract implies a class.\nMaybe something like SpecialModelProvider?", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r448693274", "createdAt": "2020-07-02T01:07:38Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-model-loader/src/main/java/net/patchworkmc/impl/modelloader/AbstractModelLoader.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.impl.modelloader;\n+\n+import java.util.Set;\n+\n+import net.minecraft.util.Identifier;\n+\n+public interface AbstractModelLoader {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23a5c0b78c512ffe5d68929c5cff122fc1ccb112"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5NTIzNg==", "bodyText": "An I prefix would be okay if my name doesn't make sense because more code would needed to be added here later.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r448695236", "createdAt": "2020-07-02T01:15:38Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-model-loader/src/main/java/net/patchworkmc/impl/modelloader/AbstractModelLoader.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.impl.modelloader;\n+\n+import java.util.Set;\n+\n+import net.minecraft.util.Identifier;\n+\n+public interface AbstractModelLoader {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5MzI3NA=="}, "originalCommit": {"oid": "23a5c0b78c512ffe5d68929c5cff122fc1ccb112"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA4MzY2Mw==", "bodyText": "fixed in the latest commit", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r449083663", "createdAt": "2020-07-02T15:27:06Z", "author": {"login": "rikka0w0"}, "path": "patchwork-model-loader/src/main/java/net/patchworkmc/impl/modelloader/AbstractModelLoader.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.impl.modelloader;\n+\n+import java.util.Set;\n+\n+import net.minecraft.util.Identifier;\n+\n+public interface AbstractModelLoader {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5MzI3NA=="}, "originalCommit": {"oid": "23a5c0b78c512ffe5d68929c5cff122fc1ccb112"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjY2MDI0OnYy", "diffSide": "RIGHT", "path": "patchwork-model-loader/src/main/resources/patchwork-model-loader.mixins.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMToxMDoxOFrOGr6Grg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMToxMDoxOFrOGr6Grg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5MzkzNA==", "bodyText": "This doesn't seem to be needed.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                \"defaultRequire\": 1,\n          \n          \n            \n                \"maxShiftBy\": 2\n          \n          \n            \n                \"defaultRequire\": 1", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r448693934", "createdAt": "2020-07-02T01:10:18Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-model-loader/src/main/resources/patchwork-model-loader.mixins.json", "diffHunk": "@@ -0,0 +1,13 @@\n+{\n+  \"required\": true,\n+  \"package\": \"net.patchworkmc.mixin.modelloader\",\n+  \"compatibilityLevel\": \"JAVA_8\",\n+  \"client\": [\n+    \"MixinBakedModelManager\",\n+    \"MixinModelLoader\"\n+  ],\n+  \"injectors\": {\n+    \"defaultRequire\": 1,\n+    \"maxShiftBy\": 2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23a5c0b78c512ffe5d68929c5cff122fc1ccb112"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzAyOTQxOnYy", "diffSide": "RIGHT", "path": "patchwork-model-loader/src/main/java/net/patchworkmc/mixin/modelloader/MixinModelLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxOTozMDozNVrOGs21Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxOTozMDozNVrOGs21Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4ODg2Nw==", "bodyText": "This class needs some docs on why you are hijacking the trident, and why it can't be something else.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r449688867", "createdAt": "2020-07-03T19:30:35Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-model-loader/src/main/java/net/patchworkmc/mixin/modelloader/MixinModelLoader.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.modelloader;\n+\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.client.render.model.ModelLoader;\n+import net.minecraft.client.render.model.UnbakedModel;\n+import net.minecraft.client.util.ModelIdentifier;\n+import net.minecraft.util.Identifier;\n+\n+import net.patchworkmc.impl.modelloader.Signatures;\n+import net.patchworkmc.impl.modelloader.SpecialModelProvider;\n+\n+@Mixin(ModelLoader.class)\n+public abstract class MixinModelLoader implements SpecialModelProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb30ed0b272380cf5aaf215f2014c46d5edd593a"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzAyOTY4OnYy", "diffSide": "RIGHT", "path": "patchwork-model-loader/src/main/java/net/patchworkmc/mixin/modelloader/MixinModelLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxOTozMDo1MVrOGs21Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjozMzowNFrOGtVVYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4ODkwNg==", "bodyText": "You can leave these as normal names and use @Unique", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r449688906", "createdAt": "2020-07-03T19:30:51Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-model-loader/src/main/java/net/patchworkmc/mixin/modelloader/MixinModelLoader.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.modelloader;\n+\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.client.render.model.ModelLoader;\n+import net.minecraft.client.render.model.UnbakedModel;\n+import net.minecraft.client.util.ModelIdentifier;\n+import net.minecraft.util.Identifier;\n+\n+import net.patchworkmc.impl.modelloader.Signatures;\n+import net.patchworkmc.impl.modelloader.SpecialModelProvider;\n+\n+@Mixin(ModelLoader.class)\n+public abstract class MixinModelLoader implements SpecialModelProvider {\n+\tprivate static final ModelIdentifier patchwork$trident = new ModelIdentifier(\"minecraft:trident_in_hand#inventory\");\n+\tprivate static final Logger patchwork$logger = LogManager.getLogger(ModelLoader.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb30ed0b272380cf5aaf215f2014c46d5edd593a"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4ODY0Mg==", "bodyText": "fixed", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r450188642", "createdAt": "2020-07-06T12:33:04Z", "author": {"login": "rikka0w0"}, "path": "patchwork-model-loader/src/main/java/net/patchworkmc/mixin/modelloader/MixinModelLoader.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.modelloader;\n+\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.client.render.model.ModelLoader;\n+import net.minecraft.client.render.model.UnbakedModel;\n+import net.minecraft.client.util.ModelIdentifier;\n+import net.minecraft.util.Identifier;\n+\n+import net.patchworkmc.impl.modelloader.Signatures;\n+import net.patchworkmc.impl.modelloader.SpecialModelProvider;\n+\n+@Mixin(ModelLoader.class)\n+public abstract class MixinModelLoader implements SpecialModelProvider {\n+\tprivate static final ModelIdentifier patchwork$trident = new ModelIdentifier(\"minecraft:trident_in_hand#inventory\");\n+\tprivate static final Logger patchwork$logger = LogManager.getLogger(ModelLoader.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4ODkwNg=="}, "originalCommit": {"oid": "eb30ed0b272380cf5aaf215f2014c46d5edd593a"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNDg4NTczOnYy", "diffSide": "RIGHT", "path": "patchwork-model-loader/src/main/java/net/patchworkmc/mixin/modelloader/MixinModelLoader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMDo1Nzo0NVrOGtE0Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjozNDoxNFrOGtVXfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxODAzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate void addModel(ModelIdentifier modelId) { }\n          \n          \n            \n            \tprivate abstract void addModel(ModelIdentifier modelId);", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r449918031", "createdAt": "2020-07-05T20:57:45Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-model-loader/src/main/java/net/patchworkmc/mixin/modelloader/MixinModelLoader.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.modelloader;\n+\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.client.render.model.ModelLoader;\n+import net.minecraft.client.render.model.UnbakedModel;\n+import net.minecraft.client.util.ModelIdentifier;\n+import net.minecraft.util.Identifier;\n+\n+import net.patchworkmc.impl.modelloader.Signatures;\n+import net.patchworkmc.impl.modelloader.SpecialModelProvider;\n+\n+@Mixin(ModelLoader.class)\n+public abstract class MixinModelLoader implements SpecialModelProvider {\n+\t@Unique\n+\tprivate static final ModelIdentifier TRIDENT_INV = new ModelIdentifier(\"minecraft:trident_in_hand#inventory\");\n+\t@Unique\n+\tprivate static final Logger LOGGER = LogManager.getLogger(ModelLoader.class);\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<Identifier, UnbakedModel> modelsToBake;\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<Identifier, UnbakedModel> unbakedModels;\n+\n+\t@Unique\n+\tprivate void patchwork$loadSpecialModel() {\n+\t\tfor (Identifier id : getSpecialModels()) {\n+\t\t\tModelLoader me = (ModelLoader) (Object) this;\n+\t\t\tUnbakedModel iunbakedmodel = me.getOrLoadModel(id);\n+\t\t\tthis.unbakedModels.put(id, iunbakedmodel);\n+\t\t\tthis.modelsToBake.put(id, iunbakedmodel);\n+\t\t}\n+\t}\n+\n+\t@Shadow\n+\tprivate void addModel(ModelIdentifier modelId) { }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6d79253a471d4bab0801f75723dd86fa6f5cc30"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4ODQ2NA==", "bodyText": "We can't have private abstract methods in Java/////", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r450188464", "createdAt": "2020-07-06T12:32:44Z", "author": {"login": "rikka0w0"}, "path": "patchwork-model-loader/src/main/java/net/patchworkmc/mixin/modelloader/MixinModelLoader.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.modelloader;\n+\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.client.render.model.ModelLoader;\n+import net.minecraft.client.render.model.UnbakedModel;\n+import net.minecraft.client.util.ModelIdentifier;\n+import net.minecraft.util.Identifier;\n+\n+import net.patchworkmc.impl.modelloader.Signatures;\n+import net.patchworkmc.impl.modelloader.SpecialModelProvider;\n+\n+@Mixin(ModelLoader.class)\n+public abstract class MixinModelLoader implements SpecialModelProvider {\n+\t@Unique\n+\tprivate static final ModelIdentifier TRIDENT_INV = new ModelIdentifier(\"minecraft:trident_in_hand#inventory\");\n+\t@Unique\n+\tprivate static final Logger LOGGER = LogManager.getLogger(ModelLoader.class);\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<Identifier, UnbakedModel> modelsToBake;\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<Identifier, UnbakedModel> unbakedModels;\n+\n+\t@Unique\n+\tprivate void patchwork$loadSpecialModel() {\n+\t\tfor (Identifier id : getSpecialModels()) {\n+\t\t\tModelLoader me = (ModelLoader) (Object) this;\n+\t\t\tUnbakedModel iunbakedmodel = me.getOrLoadModel(id);\n+\t\t\tthis.unbakedModels.put(id, iunbakedmodel);\n+\t\t\tthis.modelsToBake.put(id, iunbakedmodel);\n+\t\t}\n+\t}\n+\n+\t@Shadow\n+\tprivate void addModel(ModelIdentifier modelId) { }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxODAzMQ=="}, "originalCommit": {"oid": "b6d79253a471d4bab0801f75723dd86fa6f5cc30"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4OTE4MA==", "bodyText": "Here we have to keep the dummy implementation", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r450189180", "createdAt": "2020-07-06T12:34:14Z", "author": {"login": "rikka0w0"}, "path": "patchwork-model-loader/src/main/java/net/patchworkmc/mixin/modelloader/MixinModelLoader.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.modelloader;\n+\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.client.render.model.ModelLoader;\n+import net.minecraft.client.render.model.UnbakedModel;\n+import net.minecraft.client.util.ModelIdentifier;\n+import net.minecraft.util.Identifier;\n+\n+import net.patchworkmc.impl.modelloader.Signatures;\n+import net.patchworkmc.impl.modelloader.SpecialModelProvider;\n+\n+@Mixin(ModelLoader.class)\n+public abstract class MixinModelLoader implements SpecialModelProvider {\n+\t@Unique\n+\tprivate static final ModelIdentifier TRIDENT_INV = new ModelIdentifier(\"minecraft:trident_in_hand#inventory\");\n+\t@Unique\n+\tprivate static final Logger LOGGER = LogManager.getLogger(ModelLoader.class);\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<Identifier, UnbakedModel> modelsToBake;\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<Identifier, UnbakedModel> unbakedModels;\n+\n+\t@Unique\n+\tprivate void patchwork$loadSpecialModel() {\n+\t\tfor (Identifier id : getSpecialModels()) {\n+\t\t\tModelLoader me = (ModelLoader) (Object) this;\n+\t\t\tUnbakedModel iunbakedmodel = me.getOrLoadModel(id);\n+\t\t\tthis.unbakedModels.put(id, iunbakedmodel);\n+\t\t\tthis.modelsToBake.put(id, iunbakedmodel);\n+\t\t}\n+\t}\n+\n+\t@Shadow\n+\tprivate void addModel(ModelIdentifier modelId) { }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxODAzMQ=="}, "originalCommit": {"oid": "b6d79253a471d4bab0801f75723dd86fa6f5cc30"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNDg4NzI3OnYy", "diffSide": "RIGHT", "path": "patchwork-model-loader/src/main/java/net/patchworkmc/mixin/modelloader/MixinBakedModelManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMTowMDowMlrOGtE1AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjo0MzoxN1rOGtVplg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxODIwOA==", "bodyText": "Couldn't forge's MdoelLoader magic be done with a mixin implementing the interface? That would be more compatible with Fabric mods and a trivial redirect (all non-static methods of X class) in Patcher", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r449918208", "createdAt": "2020-07-05T21:00:02Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-model-loader/src/main/java/net/patchworkmc/mixin/modelloader/MixinBakedModelManager.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.modelloader;\n+\n+import java.util.Map;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.At.Shift;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.client.color.block.BlockColors;\n+import net.minecraft.client.render.model.BakedModel;\n+import net.minecraft.client.render.model.BakedModelManager;\n+import net.minecraft.client.render.model.ModelLoader;\n+import net.minecraft.client.texture.SpriteAtlasTexture;\n+import net.minecraft.resource.ResourceManager;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.patchworkmc.impl.modelloader.ModelEventDispatcher;\n+import net.patchworkmc.impl.modelloader.Signatures;\n+\n+@Mixin(BakedModelManager.class)\n+public abstract class MixinBakedModelManager {\n+\t@Shadow\n+\tprivate Map<Identifier, BakedModel> models;\n+\n+\t@Redirect(method = \"prepare\", at = @At(value = \"NEW\", target = Signatures.ModelLoader_new, ordinal = 0))\n+\tprivate ModelLoader patchwork_prepare_new_ModelLoader(ResourceManager resourceManager, SpriteAtlasTexture spriteAtlas, BlockColors blockColors, Profiler profiler) {\n+\t\treturn new net.minecraftforge.client.model.ModelLoader(resourceManager, spriteAtlas, blockColors, profiler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6d79253a471d4bab0801f75723dd86fa6f5cc30"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxOTI1NQ==", "bodyText": "On further consideration I think this approach is fine.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r449919255", "createdAt": "2020-07-05T21:12:14Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-model-loader/src/main/java/net/patchworkmc/mixin/modelloader/MixinBakedModelManager.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.modelloader;\n+\n+import java.util.Map;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.At.Shift;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.client.color.block.BlockColors;\n+import net.minecraft.client.render.model.BakedModel;\n+import net.minecraft.client.render.model.BakedModelManager;\n+import net.minecraft.client.render.model.ModelLoader;\n+import net.minecraft.client.texture.SpriteAtlasTexture;\n+import net.minecraft.resource.ResourceManager;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.patchworkmc.impl.modelloader.ModelEventDispatcher;\n+import net.patchworkmc.impl.modelloader.Signatures;\n+\n+@Mixin(BakedModelManager.class)\n+public abstract class MixinBakedModelManager {\n+\t@Shadow\n+\tprivate Map<Identifier, BakedModel> models;\n+\n+\t@Redirect(method = \"prepare\", at = @At(value = \"NEW\", target = Signatures.ModelLoader_new, ordinal = 0))\n+\tprivate ModelLoader patchwork_prepare_new_ModelLoader(ResourceManager resourceManager, SpriteAtlasTexture spriteAtlas, BlockColors blockColors, Profiler profiler) {\n+\t\treturn new net.minecraftforge.client.model.ModelLoader(resourceManager, spriteAtlas, blockColors, profiler);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxODIwOA=="}, "originalCommit": {"oid": "b6d79253a471d4bab0801f75723dd86fa6f5cc30"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5MzgxNA==", "bodyText": "Forge's ModelLoader is reference by Forge APIs and Mods access it directly. We have to keep the class and method signature to maintain compatibility.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r450193814", "createdAt": "2020-07-06T12:43:17Z", "author": {"login": "rikka0w0"}, "path": "patchwork-model-loader/src/main/java/net/patchworkmc/mixin/modelloader/MixinBakedModelManager.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.modelloader;\n+\n+import java.util.Map;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.At.Shift;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.client.color.block.BlockColors;\n+import net.minecraft.client.render.model.BakedModel;\n+import net.minecraft.client.render.model.BakedModelManager;\n+import net.minecraft.client.render.model.ModelLoader;\n+import net.minecraft.client.texture.SpriteAtlasTexture;\n+import net.minecraft.resource.ResourceManager;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.patchworkmc.impl.modelloader.ModelEventDispatcher;\n+import net.patchworkmc.impl.modelloader.Signatures;\n+\n+@Mixin(BakedModelManager.class)\n+public abstract class MixinBakedModelManager {\n+\t@Shadow\n+\tprivate Map<Identifier, BakedModel> models;\n+\n+\t@Redirect(method = \"prepare\", at = @At(value = \"NEW\", target = Signatures.ModelLoader_new, ordinal = 0))\n+\tprivate ModelLoader patchwork_prepare_new_ModelLoader(ResourceManager resourceManager, SpriteAtlasTexture spriteAtlas, BlockColors blockColors, Profiler profiler) {\n+\t\treturn new net.minecraftforge.client.model.ModelLoader(resourceManager, spriteAtlas, blockColors, profiler);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxODIwOA=="}, "originalCommit": {"oid": "b6d79253a471d4bab0801f75723dd86fa6f5cc30"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNDg4Nzg4OnYy", "diffSide": "RIGHT", "path": "patchwork-model-loader/src/main/java/net/minecraftforge/client/model/ModelLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMTowMDoyMVrOGtE1PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMToxMTo0NVrOGtE43A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxODI2OQ==", "bodyText": "I don't think this needs to be essentially a class overwrite.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r449918269", "createdAt": "2020-07-05T21:00:21Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-model-loader/src/main/java/net/minecraftforge/client/model/ModelLoader.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.client.model;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.Marker;\n+import org.apache.logging.log4j.MarkerManager;\n+\n+import net.minecraft.client.color.block.BlockColors;\n+import net.minecraft.client.render.model.BakedModel;\n+import net.minecraft.client.texture.SpriteAtlasTexture;\n+import net.minecraft.client.util.ModelIdentifier;\n+import net.minecraft.resource.ResourceManager;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.patchworkmc.impl.modelloader.SpecialModelProvider;\n+\n+public class ModelLoader extends net.minecraft.client.render.model.ModelLoader implements SpecialModelProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6d79253a471d4bab0801f75723dd86fa6f5cc30"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxOTE5Ng==", "bodyText": "Actually this is fine how it is.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r449919196", "createdAt": "2020-07-05T21:11:45Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-model-loader/src/main/java/net/minecraftforge/client/model/ModelLoader.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.client.model;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.Marker;\n+import org.apache.logging.log4j.MarkerManager;\n+\n+import net.minecraft.client.color.block.BlockColors;\n+import net.minecraft.client.render.model.BakedModel;\n+import net.minecraft.client.texture.SpriteAtlasTexture;\n+import net.minecraft.client.util.ModelIdentifier;\n+import net.minecraft.resource.ResourceManager;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.patchworkmc.impl.modelloader.SpecialModelProvider;\n+\n+public class ModelLoader extends net.minecraft.client.render.model.ModelLoader implements SpecialModelProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxODI2OQ=="}, "originalCommit": {"oid": "b6d79253a471d4bab0801f75723dd86fa6f5cc30"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODE2NzMzOnYy", "diffSide": "RIGHT", "path": "patchwork-model-loader/src/main/java/net/patchworkmc/mixin/modelloader/MixinModelLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODo1OTozMlrOGtjgNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwMjo0ODozN1rOGttWcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMDc5MA==", "bodyText": "Considering there are multiple occurrences of addModel in the constructor, wouldn't this spam Patchwork was unable to load special models for Forge mods to the console?", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r450420790", "createdAt": "2020-07-06T18:59:32Z", "author": {"login": "famous1622"}, "path": "patchwork-model-loader/src/main/java/net/patchworkmc/mixin/modelloader/MixinModelLoader.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.modelloader;\n+\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.client.render.model.ModelLoader;\n+import net.minecraft.client.render.model.UnbakedModel;\n+import net.minecraft.client.util.ModelIdentifier;\n+import net.minecraft.util.Identifier;\n+\n+import net.patchworkmc.impl.modelloader.Signatures;\n+import net.patchworkmc.impl.modelloader.SpecialModelProvider;\n+\n+@Mixin(ModelLoader.class)\n+public abstract class MixinModelLoader implements SpecialModelProvider {\n+\t@Unique\n+\tprivate static final ModelIdentifier TRIDENT_INV = new ModelIdentifier(\"minecraft:trident_in_hand#inventory\");\n+\t@Unique\n+\tprivate static final Logger LOGGER = LogManager.getLogger(ModelLoader.class);\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<Identifier, UnbakedModel> modelsToBake;\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<Identifier, UnbakedModel> unbakedModels;\n+\n+\t@Unique\n+\tprivate void patchwork$loadSpecialModel() {\n+\t\tfor (Identifier id : getSpecialModels()) {\n+\t\t\tModelLoader me = (ModelLoader) (Object) this;\n+\t\t\tUnbakedModel iunbakedmodel = me.getOrLoadModel(id);\n+\t\t\tthis.unbakedModels.put(id, iunbakedmodel);\n+\t\t\tthis.modelsToBake.put(id, iunbakedmodel);\n+\t\t}\n+\t}\n+\n+\t@Shadow\n+\tprivate void addModel(ModelIdentifier modelId) { }\n+\n+\t/**\n+\t * Due to the limitation of mixin, when targeting a constructor, we cannot use injection points other than \"TAIL\".\n+\t * There are multiple occurrence of addModel in the constructor, Forge inserts the patch after adding model for the trident.\n+\t * Here we just do another check to ensure that the injection point is correct.\n+\t * @param me\n+\t * @param modelId\n+\t */\n+\t@Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = Signatures.ModelLoader_addModel, ordinal = 2))\n+\tprivate void patchwork_addModel_return(ModelLoader me, ModelIdentifier modelId) {\n+\t\taddModel(modelId);\n+\n+\t\tif (modelId.equals(TRIDENT_INV)) {\n+\t\t\tLOGGER.debug(\"Patchwork is loading special models for Forge mods\");\n+\t\t\tpatchwork$loadSpecialModel();\n+\t\t} else {\n+\t\t\tLOGGER.warn(\"Patchwork was unable to load special models for Forge mods\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6d79253a471d4bab0801f75723dd86fa6f5cc30"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU4MjEzMA==", "bodyText": "This specifically targets the third occurence of addModel, so it'll only be called once.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r450582130", "createdAt": "2020-07-07T02:48:37Z", "author": {"login": "kitlith"}, "path": "patchwork-model-loader/src/main/java/net/patchworkmc/mixin/modelloader/MixinModelLoader.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.modelloader;\n+\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.client.render.model.ModelLoader;\n+import net.minecraft.client.render.model.UnbakedModel;\n+import net.minecraft.client.util.ModelIdentifier;\n+import net.minecraft.util.Identifier;\n+\n+import net.patchworkmc.impl.modelloader.Signatures;\n+import net.patchworkmc.impl.modelloader.SpecialModelProvider;\n+\n+@Mixin(ModelLoader.class)\n+public abstract class MixinModelLoader implements SpecialModelProvider {\n+\t@Unique\n+\tprivate static final ModelIdentifier TRIDENT_INV = new ModelIdentifier(\"minecraft:trident_in_hand#inventory\");\n+\t@Unique\n+\tprivate static final Logger LOGGER = LogManager.getLogger(ModelLoader.class);\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<Identifier, UnbakedModel> modelsToBake;\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<Identifier, UnbakedModel> unbakedModels;\n+\n+\t@Unique\n+\tprivate void patchwork$loadSpecialModel() {\n+\t\tfor (Identifier id : getSpecialModels()) {\n+\t\t\tModelLoader me = (ModelLoader) (Object) this;\n+\t\t\tUnbakedModel iunbakedmodel = me.getOrLoadModel(id);\n+\t\t\tthis.unbakedModels.put(id, iunbakedmodel);\n+\t\t\tthis.modelsToBake.put(id, iunbakedmodel);\n+\t\t}\n+\t}\n+\n+\t@Shadow\n+\tprivate void addModel(ModelIdentifier modelId) { }\n+\n+\t/**\n+\t * Due to the limitation of mixin, when targeting a constructor, we cannot use injection points other than \"TAIL\".\n+\t * There are multiple occurrence of addModel in the constructor, Forge inserts the patch after adding model for the trident.\n+\t * Here we just do another check to ensure that the injection point is correct.\n+\t * @param me\n+\t * @param modelId\n+\t */\n+\t@Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = Signatures.ModelLoader_addModel, ordinal = 2))\n+\tprivate void patchwork_addModel_return(ModelLoader me, ModelIdentifier modelId) {\n+\t\taddModel(modelId);\n+\n+\t\tif (modelId.equals(TRIDENT_INV)) {\n+\t\t\tLOGGER.debug(\"Patchwork is loading special models for Forge mods\");\n+\t\t\tpatchwork$loadSpecialModel();\n+\t\t} else {\n+\t\t\tLOGGER.warn(\"Patchwork was unable to load special models for Forge mods\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMDc5MA=="}, "originalCommit": {"oid": "b6d79253a471d4bab0801f75723dd86fa6f5cc30"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODE3NDc4OnYy", "diffSide": "RIGHT", "path": "patchwork-model-loader/src/main/java/net/patchworkmc/mixin/modelloader/MixinModelLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTowMTo1NFrOGtjk0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTowMTo1NFrOGtjk0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMTk3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Due to the limitation of mixin, when targeting a constructor, we cannot use injection points other than \"TAIL\".\n          \n          \n            \n            \t * Due to the limitations of mixin, when targeting a constructor, we cannot use injection points other than \"TAIL\".", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r450421971", "createdAt": "2020-07-06T19:01:54Z", "author": {"login": "famous1622"}, "path": "patchwork-model-loader/src/main/java/net/patchworkmc/mixin/modelloader/MixinModelLoader.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.modelloader;\n+\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.client.render.model.ModelLoader;\n+import net.minecraft.client.render.model.UnbakedModel;\n+import net.minecraft.client.util.ModelIdentifier;\n+import net.minecraft.util.Identifier;\n+\n+import net.patchworkmc.impl.modelloader.Signatures;\n+import net.patchworkmc.impl.modelloader.SpecialModelProvider;\n+\n+@Mixin(ModelLoader.class)\n+public abstract class MixinModelLoader implements SpecialModelProvider {\n+\t@Unique\n+\tprivate static final ModelIdentifier TRIDENT_INV = new ModelIdentifier(\"minecraft:trident_in_hand#inventory\");\n+\t@Unique\n+\tprivate static final Logger LOGGER = LogManager.getLogger(ModelLoader.class);\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<Identifier, UnbakedModel> modelsToBake;\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<Identifier, UnbakedModel> unbakedModels;\n+\n+\t@Unique\n+\tprivate void patchwork$loadSpecialModel() {\n+\t\tfor (Identifier id : getSpecialModels()) {\n+\t\t\tModelLoader me = (ModelLoader) (Object) this;\n+\t\t\tUnbakedModel iunbakedmodel = me.getOrLoadModel(id);\n+\t\t\tthis.unbakedModels.put(id, iunbakedmodel);\n+\t\t\tthis.modelsToBake.put(id, iunbakedmodel);\n+\t\t}\n+\t}\n+\n+\t@Shadow\n+\tprivate void addModel(ModelIdentifier modelId) { }\n+\n+\t/**\n+\t * Due to the limitation of mixin, when targeting a constructor, we cannot use injection points other than \"TAIL\".", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6d79253a471d4bab0801f75723dd86fa6f5cc30"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODE3NTI5OnYy", "diffSide": "RIGHT", "path": "patchwork-model-loader/src/main/java/net/patchworkmc/mixin/modelloader/MixinModelLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTowMjowNlrOGtjlLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTowMzozN1rOGtjoBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMjA2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * There are multiple occurrence of addModel in the constructor, Forge inserts the patch after adding model for the trident.\n          \n          \n            \n            \t * There are multiple occurrences of addModel in the constructor, Forge inserts the patch after adding model for the trident.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r450422060", "createdAt": "2020-07-06T19:02:06Z", "author": {"login": "famous1622"}, "path": "patchwork-model-loader/src/main/java/net/patchworkmc/mixin/modelloader/MixinModelLoader.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.modelloader;\n+\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.client.render.model.ModelLoader;\n+import net.minecraft.client.render.model.UnbakedModel;\n+import net.minecraft.client.util.ModelIdentifier;\n+import net.minecraft.util.Identifier;\n+\n+import net.patchworkmc.impl.modelloader.Signatures;\n+import net.patchworkmc.impl.modelloader.SpecialModelProvider;\n+\n+@Mixin(ModelLoader.class)\n+public abstract class MixinModelLoader implements SpecialModelProvider {\n+\t@Unique\n+\tprivate static final ModelIdentifier TRIDENT_INV = new ModelIdentifier(\"minecraft:trident_in_hand#inventory\");\n+\t@Unique\n+\tprivate static final Logger LOGGER = LogManager.getLogger(ModelLoader.class);\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<Identifier, UnbakedModel> modelsToBake;\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<Identifier, UnbakedModel> unbakedModels;\n+\n+\t@Unique\n+\tprivate void patchwork$loadSpecialModel() {\n+\t\tfor (Identifier id : getSpecialModels()) {\n+\t\t\tModelLoader me = (ModelLoader) (Object) this;\n+\t\t\tUnbakedModel iunbakedmodel = me.getOrLoadModel(id);\n+\t\t\tthis.unbakedModels.put(id, iunbakedmodel);\n+\t\t\tthis.modelsToBake.put(id, iunbakedmodel);\n+\t\t}\n+\t}\n+\n+\t@Shadow\n+\tprivate void addModel(ModelIdentifier modelId) { }\n+\n+\t/**\n+\t * Due to the limitation of mixin, when targeting a constructor, we cannot use injection points other than \"TAIL\".\n+\t * There are multiple occurrence of addModel in the constructor, Forge inserts the patch after adding model for the trident.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6d79253a471d4bab0801f75723dd86fa6f5cc30"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMjc5MQ==", "bodyText": "I'd also consider \"While there are...\" or \"...constructor, but Forge...\", but I don't want to bikeshed too hard over grammar.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r450422791", "createdAt": "2020-07-06T19:03:37Z", "author": {"login": "famous1622"}, "path": "patchwork-model-loader/src/main/java/net/patchworkmc/mixin/modelloader/MixinModelLoader.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.modelloader;\n+\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.client.render.model.ModelLoader;\n+import net.minecraft.client.render.model.UnbakedModel;\n+import net.minecraft.client.util.ModelIdentifier;\n+import net.minecraft.util.Identifier;\n+\n+import net.patchworkmc.impl.modelloader.Signatures;\n+import net.patchworkmc.impl.modelloader.SpecialModelProvider;\n+\n+@Mixin(ModelLoader.class)\n+public abstract class MixinModelLoader implements SpecialModelProvider {\n+\t@Unique\n+\tprivate static final ModelIdentifier TRIDENT_INV = new ModelIdentifier(\"minecraft:trident_in_hand#inventory\");\n+\t@Unique\n+\tprivate static final Logger LOGGER = LogManager.getLogger(ModelLoader.class);\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<Identifier, UnbakedModel> modelsToBake;\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<Identifier, UnbakedModel> unbakedModels;\n+\n+\t@Unique\n+\tprivate void patchwork$loadSpecialModel() {\n+\t\tfor (Identifier id : getSpecialModels()) {\n+\t\t\tModelLoader me = (ModelLoader) (Object) this;\n+\t\t\tUnbakedModel iunbakedmodel = me.getOrLoadModel(id);\n+\t\t\tthis.unbakedModels.put(id, iunbakedmodel);\n+\t\t\tthis.modelsToBake.put(id, iunbakedmodel);\n+\t\t}\n+\t}\n+\n+\t@Shadow\n+\tprivate void addModel(ModelIdentifier modelId) { }\n+\n+\t/**\n+\t * Due to the limitation of mixin, when targeting a constructor, we cannot use injection points other than \"TAIL\".\n+\t * There are multiple occurrence of addModel in the constructor, Forge inserts the patch after adding model for the trident.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMjA2MA=="}, "originalCommit": {"oid": "b6d79253a471d4bab0801f75723dd86fa6f5cc30"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODE5MDYwOnYy", "diffSide": "RIGHT", "path": "patchwork-model-loader/src/main/java/net/patchworkmc/impl/modelloader/ModelEventDispatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTowNzoxMVrOGtjupA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTowNzoxMVrOGtjupA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyNDQ4NA==", "bodyText": "I'd drop the official and make it capital Forge to be consistent.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r450424484", "createdAt": "2020-07-06T19:07:11Z", "author": {"login": "famous1622"}, "path": "patchwork-model-loader/src/main/java/net/patchworkmc/impl/modelloader/ModelEventDispatcher.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.impl.modelloader;\n+\n+import java.util.Map;\n+\n+import net.minecraftforge.client.event.ModelBakeEvent;\n+import net.minecraftforge.client.event.ModelRegistryEvent;\n+import net.minecraftforge.client.model.ModelLoader;\n+import net.minecraftforge.fml.ModLoader;\n+\n+import net.minecraft.client.render.model.BakedModel;\n+import net.minecraft.client.render.model.BakedModelManager;\n+import net.minecraft.util.Identifier;\n+\n+public class ModelEventDispatcher {\n+\t/**\n+\t * In official forge, ModelRegistryEvent is fired in parallel with FMLClientSetupEvent.\n+\t * Here we fire ModelRegistryEvent before FMLClientSetupEvent.\n+\t * The official forge does not set the ModLoadingContext here, so this should be fine.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6d79253a471d4bab0801f75723dd86fa6f5cc30"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODE5NTc2OnYy", "diffSide": "RIGHT", "path": "patchwork-model-loader/src/main/java/net/patchworkmc/mixin/modelloader/MixinModelLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTowOToxMVrOGtjyDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzoxNDozM1rOGuIFXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyNTM1OA==", "bodyText": "Is the prefix here necessary?", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r450425358", "createdAt": "2020-07-06T19:09:11Z", "author": {"login": "famous1622"}, "path": "patchwork-model-loader/src/main/java/net/patchworkmc/mixin/modelloader/MixinModelLoader.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.modelloader;\n+\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.client.render.model.ModelLoader;\n+import net.minecraft.client.render.model.UnbakedModel;\n+import net.minecraft.client.util.ModelIdentifier;\n+import net.minecraft.util.Identifier;\n+\n+import net.patchworkmc.impl.modelloader.Signatures;\n+import net.patchworkmc.impl.modelloader.SpecialModelProvider;\n+\n+@Mixin(ModelLoader.class)\n+public abstract class MixinModelLoader implements SpecialModelProvider {\n+\t@Unique\n+\tprivate static final ModelIdentifier TRIDENT_INV = new ModelIdentifier(\"minecraft:trident_in_hand#inventory\");\n+\t@Unique\n+\tprivate static final Logger LOGGER = LogManager.getLogger(ModelLoader.class);\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<Identifier, UnbakedModel> modelsToBake;\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<Identifier, UnbakedModel> unbakedModels;\n+\n+\t@Unique\n+\tprivate void patchwork$loadSpecialModel() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6d79253a471d4bab0801f75723dd86fa6f5cc30"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyMDEyNQ==", "bodyText": "Not necessary but I would like to keep it /w\\", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r451020125", "createdAt": "2020-07-07T17:14:33Z", "author": {"login": "rikka0w0"}, "path": "patchwork-model-loader/src/main/java/net/patchworkmc/mixin/modelloader/MixinModelLoader.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.modelloader;\n+\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.client.render.model.ModelLoader;\n+import net.minecraft.client.render.model.UnbakedModel;\n+import net.minecraft.client.util.ModelIdentifier;\n+import net.minecraft.util.Identifier;\n+\n+import net.patchworkmc.impl.modelloader.Signatures;\n+import net.patchworkmc.impl.modelloader.SpecialModelProvider;\n+\n+@Mixin(ModelLoader.class)\n+public abstract class MixinModelLoader implements SpecialModelProvider {\n+\t@Unique\n+\tprivate static final ModelIdentifier TRIDENT_INV = new ModelIdentifier(\"minecraft:trident_in_hand#inventory\");\n+\t@Unique\n+\tprivate static final Logger LOGGER = LogManager.getLogger(ModelLoader.class);\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<Identifier, UnbakedModel> modelsToBake;\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<Identifier, UnbakedModel> unbakedModels;\n+\n+\t@Unique\n+\tprivate void patchwork$loadSpecialModel() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyNTM1OA=="}, "originalCommit": {"oid": "b6d79253a471d4bab0801f75723dd86fa6f5cc30"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1596, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}