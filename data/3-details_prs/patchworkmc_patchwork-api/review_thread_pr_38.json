{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3MTg2MzI1", "number": 38, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwNjoyMzozN1rODas-MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwNDoyMzoxN1rODcZvsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzI2Mzg1OnYy", "diffSide": "RIGHT", "path": "patchwork-events-world/src/main/java/com/patchworkmc/impl/event/world/IGetWorldFromChunkGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwNjoyMzozN1rOFhym6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwNjoyMzozN1rOFhym6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk3NjQ5MA==", "bodyText": "Perhaps instead of a seperate interface, this should be an interface mixin + @Accessor? probably definately. (i'm still learning new things about mixins)", "url": "https://github.com/PatchworkMC/patchwork-api/pull/38#discussion_r370976490", "createdAt": "2020-01-26T06:23:37Z", "author": {"login": "kitlith"}, "path": "patchwork-events-world/src/main/java/com/patchworkmc/impl/event/world/IGetWorldFromChunkGenerator.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package com.patchworkmc.impl.event.world;\n+\n+import net.minecraft.world.IWorld;\n+\n+public interface IGetWorldFromChunkGenerator {\n+\tIWorld getWorld();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b23d090c78d333245747845f61b18e2fd5d5ea9a"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzI2NDQzOnYy", "diffSide": "RIGHT", "path": "patchwork-events-world/src/main/java/com/patchworkmc/mixin/event/world/MixinClientWorld.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwNjoyNjoxM1rOFhynNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwNjo0Mzo0MlrOFhyprw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk3NjU2Nw==", "bodyText": "is this <clinit> instead of <init>? probably needs fixing.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/38#discussion_r370976567", "createdAt": "2020-01-26T06:26:13Z", "author": {"login": "kitlith"}, "path": "patchwork-events-world/src/main/java/com/patchworkmc/mixin/event/world/MixinClientWorld.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package com.patchworkmc.mixin.event.world;\n+\n+import java.util.function.BiFunction;\n+\n+import net.minecraftforge.common.MinecraftForge;\n+import net.minecraftforge.event.world.WorldEvent;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.util.profiler.Profiler;\n+import net.minecraft.world.chunk.ChunkManager;\n+import net.minecraft.world.dimension.Dimension;\n+import net.minecraft.world.dimension.DimensionType;\n+import net.minecraft.world.level.LevelProperties;\n+import net.minecraft.world.World;\n+import net.minecraft.client.world.ClientWorld;\n+\n+@Mixin(ClientWorld.class)\n+public abstract class MixinClientWorld extends World {\n+\tprotected MixinClientWorld(LevelProperties levelProperties, DimensionType dimensionType, BiFunction<World, Dimension, ChunkManager> chunkManagerProvider, Profiler profiler, boolean isClient) {\n+\t\tsuper(levelProperties, dimensionType, chunkManagerProvider, profiler, isClient);\n+\t}\n+\n+\t@Inject(method = \"<init>\", at = @At(value = \"TAIL\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b23d090c78d333245747845f61b18e2fd5d5ea9a"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk3NzE5OQ==", "bodyText": "nope,  is for static members and such, i want the instance constructor.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/38#discussion_r370977199", "createdAt": "2020-01-26T06:43:42Z", "author": {"login": "kitlith"}, "path": "patchwork-events-world/src/main/java/com/patchworkmc/mixin/event/world/MixinClientWorld.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package com.patchworkmc.mixin.event.world;\n+\n+import java.util.function.BiFunction;\n+\n+import net.minecraftforge.common.MinecraftForge;\n+import net.minecraftforge.event.world.WorldEvent;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.util.profiler.Profiler;\n+import net.minecraft.world.chunk.ChunkManager;\n+import net.minecraft.world.dimension.Dimension;\n+import net.minecraft.world.dimension.DimensionType;\n+import net.minecraft.world.level.LevelProperties;\n+import net.minecraft.world.World;\n+import net.minecraft.client.world.ClientWorld;\n+\n+@Mixin(ClientWorld.class)\n+public abstract class MixinClientWorld extends World {\n+\tprotected MixinClientWorld(LevelProperties levelProperties, DimensionType dimensionType, BiFunction<World, Dimension, ChunkManager> chunkManagerProvider, Profiler profiler, boolean isClient) {\n+\t\tsuper(levelProperties, dimensionType, chunkManagerProvider, profiler, isClient);\n+\t}\n+\n+\t@Inject(method = \"<init>\", at = @At(value = \"TAIL\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk3NjU2Nw=="}, "originalCommit": {"oid": "b23d090c78d333245747845f61b18e2fd5d5ea9a"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzI2NTQxOnYy", "diffSide": "RIGHT", "path": "patchwork-events-world/src/main/java/com/patchworkmc/mixin/event/world/MixinMinecraftServer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwNjozMDoxMlrOFhynwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNzoyNDozOFrOFkDK2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk3NjcwNA==", "bodyText": "There are two implementations here. I like the latter better since I don't need to specify the types of a lot of stuff, but i'll leave the final decision up to you guys. will remove whichever isn't used before merging.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/38#discussion_r370976704", "createdAt": "2020-01-26T06:30:12Z", "author": {"login": "kitlith"}, "path": "patchwork-events-world/src/main/java/com/patchworkmc/mixin/event/world/MixinMinecraftServer.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package com.patchworkmc.mixin.event.world;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import net.minecraftforge.common.MinecraftForge;\n+import net.minecraftforge.event.world.WorldEvent;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.ServerTask;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.util.NonBlockingThreadExecutor;\n+import net.minecraft.world.dimension.DimensionType;\n+\n+@Mixin(MinecraftServer.class)\n+public abstract class MixinMinecraftServer extends NonBlockingThreadExecutor<ServerTask> {\n+\tpublic MixinMinecraftServer(String name) {\n+\t\tsuper(name);\n+\t}\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<DimensionType, ServerWorld> worlds;\n+\n+\t// Should get called once per loop, regardless of which if branch it takes.\n+\t//\t@Inject(\n+\t//\t\tmethod = \"createWorlds\",\n+\t//\t\tslice = @Slice(\n+\t//\t\t\tfrom = @At(value = \"INVOKE\", target = \"java/util/Iterator.hasNext ()Z\")\n+\t//\t\t),\n+\t//\t\tat = @At(value = \"JUMP\", opcode = Opcodes.GOTO),\n+\t//\t\tlocals = LocalCapture.CAPTURE_FAILHARD\n+\t//\t)\n+\t//\tprivate void hookCreateWorlds(WorldSaveHandler worldSaveHandler, LevelProperties properties, LevelInfo levelInfo, WorldGenerationProgressListener worldGenerationProgressListener, CallbackInfo ci, ServerWorld serverWorld, ServerWorld serverWorld2, Iterator var7, DimensionType dimensionType) {\n+\t//\t\tMinecraftForge.EVENT_BUS.post(new WorldEvent.Load(this.worlds.get(dimensionType)));\n+\t//\t}\n+\n+\t// Alternatively, mixin to the put call, and special case overworld.\n+\t// Perhaps move the special case outside of the loop?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b23d090c78d333245747845f61b18e2fd5d5ea9a"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMxNTYyOQ==", "bodyText": "I trust the Redirects more as far as not breaking with updates, but I trust the Inject more with not breaking with mods. I think we can keep the Inject version commented out with an appropriate comment, and of course using /* instead of a // on each line.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/38#discussion_r373315629", "createdAt": "2020-01-31T04:53:16Z", "author": {"login": "coderbot16"}, "path": "patchwork-events-world/src/main/java/com/patchworkmc/mixin/event/world/MixinMinecraftServer.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package com.patchworkmc.mixin.event.world;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import net.minecraftforge.common.MinecraftForge;\n+import net.minecraftforge.event.world.WorldEvent;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.ServerTask;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.util.NonBlockingThreadExecutor;\n+import net.minecraft.world.dimension.DimensionType;\n+\n+@Mixin(MinecraftServer.class)\n+public abstract class MixinMinecraftServer extends NonBlockingThreadExecutor<ServerTask> {\n+\tpublic MixinMinecraftServer(String name) {\n+\t\tsuper(name);\n+\t}\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<DimensionType, ServerWorld> worlds;\n+\n+\t// Should get called once per loop, regardless of which if branch it takes.\n+\t//\t@Inject(\n+\t//\t\tmethod = \"createWorlds\",\n+\t//\t\tslice = @Slice(\n+\t//\t\t\tfrom = @At(value = \"INVOKE\", target = \"java/util/Iterator.hasNext ()Z\")\n+\t//\t\t),\n+\t//\t\tat = @At(value = \"JUMP\", opcode = Opcodes.GOTO),\n+\t//\t\tlocals = LocalCapture.CAPTURE_FAILHARD\n+\t//\t)\n+\t//\tprivate void hookCreateWorlds(WorldSaveHandler worldSaveHandler, LevelProperties properties, LevelInfo levelInfo, WorldGenerationProgressListener worldGenerationProgressListener, CallbackInfo ci, ServerWorld serverWorld, ServerWorld serverWorld2, Iterator var7, DimensionType dimensionType) {\n+\t//\t\tMinecraftForge.EVENT_BUS.post(new WorldEvent.Load(this.worlds.get(dimensionType)));\n+\t//\t}\n+\n+\t// Alternatively, mixin to the put call, and special case overworld.\n+\t// Perhaps move the special case outside of the loop?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk3NjcwNA=="}, "originalCommit": {"oid": "b23d090c78d333245747845f61b18e2fd5d5ea9a"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM0NDk4Ng==", "bodyText": "if it weren't for having to grab every single local in there, i still think the inject variant is not bad. Ah well...", "url": "https://github.com/PatchworkMC/patchwork-api/pull/38#discussion_r373344986", "createdAt": "2020-01-31T07:24:38Z", "author": {"login": "kitlith"}, "path": "patchwork-events-world/src/main/java/com/patchworkmc/mixin/event/world/MixinMinecraftServer.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package com.patchworkmc.mixin.event.world;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import net.minecraftforge.common.MinecraftForge;\n+import net.minecraftforge.event.world.WorldEvent;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.ServerTask;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.util.NonBlockingThreadExecutor;\n+import net.minecraft.world.dimension.DimensionType;\n+\n+@Mixin(MinecraftServer.class)\n+public abstract class MixinMinecraftServer extends NonBlockingThreadExecutor<ServerTask> {\n+\tpublic MixinMinecraftServer(String name) {\n+\t\tsuper(name);\n+\t}\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<DimensionType, ServerWorld> worlds;\n+\n+\t// Should get called once per loop, regardless of which if branch it takes.\n+\t//\t@Inject(\n+\t//\t\tmethod = \"createWorlds\",\n+\t//\t\tslice = @Slice(\n+\t//\t\t\tfrom = @At(value = \"INVOKE\", target = \"java/util/Iterator.hasNext ()Z\")\n+\t//\t\t),\n+\t//\t\tat = @At(value = \"JUMP\", opcode = Opcodes.GOTO),\n+\t//\t\tlocals = LocalCapture.CAPTURE_FAILHARD\n+\t//\t)\n+\t//\tprivate void hookCreateWorlds(WorldSaveHandler worldSaveHandler, LevelProperties properties, LevelInfo levelInfo, WorldGenerationProgressListener worldGenerationProgressListener, CallbackInfo ci, ServerWorld serverWorld, ServerWorld serverWorld2, Iterator var7, DimensionType dimensionType) {\n+\t//\t\tMinecraftForge.EVENT_BUS.post(new WorldEvent.Load(this.worlds.get(dimensionType)));\n+\t//\t}\n+\n+\t// Alternatively, mixin to the put call, and special case overworld.\n+\t// Perhaps move the special case outside of the loop?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk3NjcwNA=="}, "originalCommit": {"oid": "b23d090c78d333245747845f61b18e2fd5d5ea9a"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzI2NTk1OnYy", "diffSide": "RIGHT", "path": "patchwork-events-world/src/main/java/com/patchworkmc/mixin/event/world/MixinMinecraftServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwNjozMTozN1rOFhyoAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNDo0NDo0NFrOFkBTBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk3Njc3MQ==", "bodyText": "lmk if these mixins should be removed, i figured they'd be useful in the future and i ended up implementing them anyway.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/38#discussion_r370976771", "createdAt": "2020-01-26T06:31:37Z", "author": {"login": "kitlith"}, "path": "patchwork-events-world/src/main/java/com/patchworkmc/mixin/event/world/MixinMinecraftServer.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package com.patchworkmc.mixin.event.world;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import net.minecraftforge.common.MinecraftForge;\n+import net.minecraftforge.event.world.WorldEvent;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.ServerTask;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.util.NonBlockingThreadExecutor;\n+import net.minecraft.world.dimension.DimensionType;\n+\n+@Mixin(MinecraftServer.class)\n+public abstract class MixinMinecraftServer extends NonBlockingThreadExecutor<ServerTask> {\n+\tpublic MixinMinecraftServer(String name) {\n+\t\tsuper(name);\n+\t}\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<DimensionType, ServerWorld> worlds;\n+\n+\t// Should get called once per loop, regardless of which if branch it takes.\n+\t//\t@Inject(\n+\t//\t\tmethod = \"createWorlds\",\n+\t//\t\tslice = @Slice(\n+\t//\t\t\tfrom = @At(value = \"INVOKE\", target = \"java/util/Iterator.hasNext ()Z\")\n+\t//\t\t),\n+\t//\t\tat = @At(value = \"JUMP\", opcode = Opcodes.GOTO),\n+\t//\t\tlocals = LocalCapture.CAPTURE_FAILHARD\n+\t//\t)\n+\t//\tprivate void hookCreateWorlds(WorldSaveHandler worldSaveHandler, LevelProperties properties, LevelInfo levelInfo, WorldGenerationProgressListener worldGenerationProgressListener, CallbackInfo ci, ServerWorld serverWorld, ServerWorld serverWorld2, Iterator var7, DimensionType dimensionType) {\n+\t//\t\tMinecraftForge.EVENT_BUS.post(new WorldEvent.Load(this.worlds.get(dimensionType)));\n+\t//\t}\n+\n+\t// Alternatively, mixin to the put call, and special case overworld.\n+\t// Perhaps move the special case outside of the loop?\n+\t@Redirect(method = \"createWorlds\", at = @At(value = \"INVOKE\", target = \"java/util/Iterator.next ()Ljava/lang/Object;\"))\n+\tprivate Object proxyNextWorldToSpecialCaseOverworld(Iterator iterator) {\n+\t\tDimensionType type = (DimensionType) iterator.next();\n+\n+\t\tif (type == DimensionType.OVERWORLD) {\n+\t\t\tMinecraftForge.EVENT_BUS.post(new WorldEvent.Load(this.worlds.get(type)));\n+\t\t}\n+\n+\t\treturn type;\n+\t}\n+\n+\t@Redirect(method = \"createWorlds\", at = @At(value = \"INVOKE\", target = \"java/util/Map.put (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\", ordinal = 1))\n+\tprivate Object proxyPutWorld(Map worlds, Object type, Object world) {\n+\t\tworlds.put(type, world);\n+\t\tMinecraftForge.EVENT_BUS.post(new WorldEvent.Load((ServerWorld) world));\n+\t\treturn world;\n+\t}\n+\n+\t// TODO: Should we Inject into ServerWorld.close instead? Currently, this follows Forge's patch location.\n+\t@Redirect(method = \"shutdown\", at = @At(value = \"INVOKE\", target = \"net/minecraft/server/world/ServerWorld.close ()V\"))\n+\tprivate void proxyClose(ServerWorld world) throws IOException {\n+\t\tMinecraftForge.EVENT_BUS.post(new WorldEvent.Unload(world));\n+\t\tworld.close();\n+\t}\n+\n+\t@Shadow\n+\tprivate int ticks;\n+\n+\t// TODO: DimensionManager, and move this into a seperate module", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b23d090c78d333245747845f61b18e2fd5d5ea9a"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMxNDMwOA==", "bodyText": "I think these should be wrapped with /* instead of // comments, otherwise I guess they can stay for now.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/38#discussion_r373314308", "createdAt": "2020-01-31T04:44:44Z", "author": {"login": "coderbot16"}, "path": "patchwork-events-world/src/main/java/com/patchworkmc/mixin/event/world/MixinMinecraftServer.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package com.patchworkmc.mixin.event.world;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import net.minecraftforge.common.MinecraftForge;\n+import net.minecraftforge.event.world.WorldEvent;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.ServerTask;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.util.NonBlockingThreadExecutor;\n+import net.minecraft.world.dimension.DimensionType;\n+\n+@Mixin(MinecraftServer.class)\n+public abstract class MixinMinecraftServer extends NonBlockingThreadExecutor<ServerTask> {\n+\tpublic MixinMinecraftServer(String name) {\n+\t\tsuper(name);\n+\t}\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<DimensionType, ServerWorld> worlds;\n+\n+\t// Should get called once per loop, regardless of which if branch it takes.\n+\t//\t@Inject(\n+\t//\t\tmethod = \"createWorlds\",\n+\t//\t\tslice = @Slice(\n+\t//\t\t\tfrom = @At(value = \"INVOKE\", target = \"java/util/Iterator.hasNext ()Z\")\n+\t//\t\t),\n+\t//\t\tat = @At(value = \"JUMP\", opcode = Opcodes.GOTO),\n+\t//\t\tlocals = LocalCapture.CAPTURE_FAILHARD\n+\t//\t)\n+\t//\tprivate void hookCreateWorlds(WorldSaveHandler worldSaveHandler, LevelProperties properties, LevelInfo levelInfo, WorldGenerationProgressListener worldGenerationProgressListener, CallbackInfo ci, ServerWorld serverWorld, ServerWorld serverWorld2, Iterator var7, DimensionType dimensionType) {\n+\t//\t\tMinecraftForge.EVENT_BUS.post(new WorldEvent.Load(this.worlds.get(dimensionType)));\n+\t//\t}\n+\n+\t// Alternatively, mixin to the put call, and special case overworld.\n+\t// Perhaps move the special case outside of the loop?\n+\t@Redirect(method = \"createWorlds\", at = @At(value = \"INVOKE\", target = \"java/util/Iterator.next ()Ljava/lang/Object;\"))\n+\tprivate Object proxyNextWorldToSpecialCaseOverworld(Iterator iterator) {\n+\t\tDimensionType type = (DimensionType) iterator.next();\n+\n+\t\tif (type == DimensionType.OVERWORLD) {\n+\t\t\tMinecraftForge.EVENT_BUS.post(new WorldEvent.Load(this.worlds.get(type)));\n+\t\t}\n+\n+\t\treturn type;\n+\t}\n+\n+\t@Redirect(method = \"createWorlds\", at = @At(value = \"INVOKE\", target = \"java/util/Map.put (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\", ordinal = 1))\n+\tprivate Object proxyPutWorld(Map worlds, Object type, Object world) {\n+\t\tworlds.put(type, world);\n+\t\tMinecraftForge.EVENT_BUS.post(new WorldEvent.Load((ServerWorld) world));\n+\t\treturn world;\n+\t}\n+\n+\t// TODO: Should we Inject into ServerWorld.close instead? Currently, this follows Forge's patch location.\n+\t@Redirect(method = \"shutdown\", at = @At(value = \"INVOKE\", target = \"net/minecraft/server/world/ServerWorld.close ()V\"))\n+\tprivate void proxyClose(ServerWorld world) throws IOException {\n+\t\tMinecraftForge.EVENT_BUS.post(new WorldEvent.Unload(world));\n+\t\tworld.close();\n+\t}\n+\n+\t@Shadow\n+\tprivate int ticks;\n+\n+\t// TODO: DimensionManager, and move this into a seperate module", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk3Njc3MQ=="}, "originalCommit": {"oid": "b23d090c78d333245747845f61b18e2fd5d5ea9a"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODI2MzMwOnYy", "diffSide": "RIGHT", "path": "patchwork-events-world/src/main/java/com/patchworkmc/mixin/event/world/MixinClientWorld.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNDozNzo0OVrOFkBOFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNDozNzo0OVrOFkBOFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMxMzA0NA==", "bodyText": "This may be more descriptive.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate void hookConstructor(CallbackInfo info) {\n          \n          \n            \n            \tprivate void postConstruct(CallbackInfo info) {", "url": "https://github.com/PatchworkMC/patchwork-api/pull/38#discussion_r373313044", "createdAt": "2020-01-31T04:37:49Z", "author": {"login": "coderbot16"}, "path": "patchwork-events-world/src/main/java/com/patchworkmc/mixin/event/world/MixinClientWorld.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package com.patchworkmc.mixin.event.world;\n+\n+import java.util.function.BiFunction;\n+\n+import net.minecraftforge.common.MinecraftForge;\n+import net.minecraftforge.event.world.WorldEvent;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.util.profiler.Profiler;\n+import net.minecraft.world.chunk.ChunkManager;\n+import net.minecraft.world.dimension.Dimension;\n+import net.minecraft.world.dimension.DimensionType;\n+import net.minecraft.world.level.LevelProperties;\n+import net.minecraft.world.World;\n+import net.minecraft.client.world.ClientWorld;\n+\n+@Mixin(ClientWorld.class)\n+public abstract class MixinClientWorld extends World {\n+\tprotected MixinClientWorld(LevelProperties levelProperties, DimensionType dimensionType, BiFunction<World, Dimension, ChunkManager> chunkManagerProvider, Profiler profiler, boolean isClient) {\n+\t\tsuper(levelProperties, dimensionType, chunkManagerProvider, profiler, isClient);\n+\t}\n+\n+\t@Inject(method = \"<init>\", at = @At(value = \"TAIL\"))\n+\tprivate void hookConstructor(CallbackInfo info) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2a5e23f5583be9417d47ab40a6cc792b70b6613"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODI2MzgyOnYy", "diffSide": "RIGHT", "path": "patchwork-events-world/src/main/java/com/patchworkmc/mixin/event/world/MixinClientWorld.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNDozODoxNFrOFkBOZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNzowNToyMFrOFkC5Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMxMzEyNQ==", "bodyText": "Perhaps we should dispatch all of these events within WorldEvents?", "url": "https://github.com/PatchworkMC/patchwork-api/pull/38#discussion_r373313125", "createdAt": "2020-01-31T04:38:14Z", "author": {"login": "coderbot16"}, "path": "patchwork-events-world/src/main/java/com/patchworkmc/mixin/event/world/MixinClientWorld.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package com.patchworkmc.mixin.event.world;\n+\n+import java.util.function.BiFunction;\n+\n+import net.minecraftforge.common.MinecraftForge;\n+import net.minecraftforge.event.world.WorldEvent;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.util.profiler.Profiler;\n+import net.minecraft.world.chunk.ChunkManager;\n+import net.minecraft.world.dimension.Dimension;\n+import net.minecraft.world.dimension.DimensionType;\n+import net.minecraft.world.level.LevelProperties;\n+import net.minecraft.world.World;\n+import net.minecraft.client.world.ClientWorld;\n+\n+@Mixin(ClientWorld.class)\n+public abstract class MixinClientWorld extends World {\n+\tprotected MixinClientWorld(LevelProperties levelProperties, DimensionType dimensionType, BiFunction<World, Dimension, ChunkManager> chunkManagerProvider, Profiler profiler, boolean isClient) {\n+\t\tsuper(levelProperties, dimensionType, chunkManagerProvider, profiler, isClient);\n+\t}\n+\n+\t@Inject(method = \"<init>\", at = @At(value = \"TAIL\"))\n+\tprivate void hookConstructor(CallbackInfo info) {\n+\t\tClientWorld world = (ClientWorld) (Object) this;\n+\t\tMinecraftForge.EVENT_BUS.post(new WorldEvent.Load(world));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2a5e23f5583be9417d47ab40a6cc792b70b6613"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM0MDQ3NQ==", "bodyText": "IIRC I mirrored what forge did here. Can totally do that.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/38#discussion_r373340475", "createdAt": "2020-01-31T07:05:20Z", "author": {"login": "kitlith"}, "path": "patchwork-events-world/src/main/java/com/patchworkmc/mixin/event/world/MixinClientWorld.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package com.patchworkmc.mixin.event.world;\n+\n+import java.util.function.BiFunction;\n+\n+import net.minecraftforge.common.MinecraftForge;\n+import net.minecraftforge.event.world.WorldEvent;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.util.profiler.Profiler;\n+import net.minecraft.world.chunk.ChunkManager;\n+import net.minecraft.world.dimension.Dimension;\n+import net.minecraft.world.dimension.DimensionType;\n+import net.minecraft.world.level.LevelProperties;\n+import net.minecraft.world.World;\n+import net.minecraft.client.world.ClientWorld;\n+\n+@Mixin(ClientWorld.class)\n+public abstract class MixinClientWorld extends World {\n+\tprotected MixinClientWorld(LevelProperties levelProperties, DimensionType dimensionType, BiFunction<World, Dimension, ChunkManager> chunkManagerProvider, Profiler profiler, boolean isClient) {\n+\t\tsuper(levelProperties, dimensionType, chunkManagerProvider, profiler, isClient);\n+\t}\n+\n+\t@Inject(method = \"<init>\", at = @At(value = \"TAIL\"))\n+\tprivate void hookConstructor(CallbackInfo info) {\n+\t\tClientWorld world = (ClientWorld) (Object) this;\n+\t\tMinecraftForge.EVENT_BUS.post(new WorldEvent.Load(world));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMxMzEyNQ=="}, "originalCommit": {"oid": "c2a5e23f5583be9417d47ab40a6cc792b70b6613"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODI2NTIwOnYy", "diffSide": "RIGHT", "path": "patchwork-events-world/src/main/java/net/minecraftforge/event/world/WorldEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNDozOTozNVrOFkBPPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNDozOTozNVrOFkBPPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMxMzM0MA==", "bodyText": "No separation between doc comments and the class.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/PatchworkMC/patchwork-api/pull/38#discussion_r373313340", "createdAt": "2020-01-31T04:39:35Z", "author": {"login": "coderbot16"}, "path": "patchwork-events-world/src/main/java/net/minecraftforge/event/world/WorldEvent.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.event.world;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+\n+import net.minecraftforge.eventbus.api.Event;\n+import net.minecraftforge.common.MinecraftForge;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientPlayNetworkHandler;\n+import net.minecraft.client.render.WorldRenderer;\n+import net.minecraft.client.world.ClientWorld;\n+import net.minecraft.entity.EntityCategory;\n+import net.minecraft.server.WorldGenerationProgressListener;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.util.ProgressListener;\n+import net.minecraft.util.profiler.Profiler;\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.IWorld;\n+import net.minecraft.world.SpawnHelper;\n+import net.minecraft.world.WorldSaveHandler;\n+import net.minecraft.world.gen.chunk.ChunkGenerator;\n+import net.minecraft.world.level.LevelInfo;\n+import net.minecraft.world.biome.Biome.SpawnEntry;\n+import net.minecraft.world.dimension.DimensionType;\n+import net.minecraft.world.level.LevelProperties;\n+\n+/**\n+ * WorldEvent is fired when an event involving the world occurs.\n+ *\n+ * <p>If a method utilizes this {@link Event} as its parameter, the method will\n+ * receive every child event of this class.</p>\n+ *\n+ * <p>{@link #world} contains the World this event is occurring in.</p>\n+ *\n+ * <p>All children of this event are fired on the {@link MinecraftForge#EVENT_BUS}.</p>\n+ */\n+public class WorldEvent extends Event {\n+\tprivate final IWorld world;\n+\n+\t// For EventBus\n+\tpublic WorldEvent() {\n+\t\tthis.world = null;\n+\t}\n+\n+\tpublic WorldEvent(IWorld world) {\n+\t\tthis.world = world;\n+\t}\n+\n+\tpublic IWorld getWorld() {\n+\t\treturn world;\n+\t}\n+\n+\t/**\n+\t * WorldEvent.Load is fired when Minecraft loads a world.\n+\t *\n+\t * <p>This event is fired when a world is loaded in\n+\t * {@link ClientWorld#ClientWorld(ClientPlayNetworkHandler, LevelInfo, DimensionType, int, Profiler, WorldRenderer)},\n+\t * {@link MinecraftServer#createWorlds(WorldSaveHandler, LevelProperties, LevelInfo, WorldGenerationProgressListener)},\n+\t * TODO: {@link DimensionManager#initDimension(int)}</p>\n+\t *\n+\t * <p>This event is not Cancelable.</p>\n+\t *\n+\t * <p>This event does not have a result.</p>\n+\t *\n+\t * <p>This event is fired on the {@link MinecraftForge#EVENT_BUS}.</p>\n+\t */\n+\tpublic static class Load extends WorldEvent {\n+\t\tpublic Load(IWorld world) {\n+\t\t\tsuper(world);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * WorldEvent.Unload is fired when Minecraft unloads a world.\n+\t *\n+\t * <p>This event is fired when a world is unloaded in\n+\t * {@link MinecraftClient#joinWorld(ClientWorld)},\n+\t * {@link MinecraftClient#disconnect()},\n+\t * {@link MinecraftServer#shutdown()},\n+\t * TODO: {@link DimensionManager#unloadWorlds()}</p>\n+\t *\n+\t * <p>This event is not Cancelable.</p>\n+\t *\n+\t * <p>This event does not have a result.</p>\n+\t *\n+\t * <p>This event is fired on the {@link MinecraftForge#EVENT_BUS}.</p>\n+\t */\n+\tpublic static class Unload extends WorldEvent {\n+\t\tpublic Unload(IWorld world) {\n+\t\t\tsuper(world);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * WorldEvent.Save is fired when Minecraft saves a world.\n+\t *\n+\t * <p>This event is fired when a world is saved in\n+\t * {@link ServerWorld#save(ProgressListener, boolean, boolean)}.</p>\n+\t *\n+\t * <p>This event is not Cancelable.</p>\n+\t *\n+\t * <p>This event does not have a result.</p>\n+\t *\n+\t * <p>This event is fired on the {@link MinecraftForge#EVENT_BUS}.</p>\n+\t */\n+\tpublic static class Save extends WorldEvent {\n+\t\tpublic Save(IWorld world) {\n+\t\t\tsuper(world);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Called by ServerWorld to gather a list of all possible entities that can spawn at the specified location.\n+\t * If an entry is added to the list, it needs to be a globally unique instance.\n+\t * The event is called in {@link SpawnHelper#method_8664(ChunkGenerator, EntityCategory, Random, BlockPos)} as well as\n+\t * {@link SpawnHelper#method_8659(ChunkGenerator, EntityCategory, SpawnEntry, BlockPos)}\n+\t * where the latter checks for identity, meaning both events must add the same instance.\n+\t * Canceling the event will result in a empty list, meaning no entity will be spawned.\n+\t */\n+\tpublic static class PotentialSpawns extends WorldEvent {\n+\t\tprivate final EntityCategory type;\n+\t\tprivate final BlockPos pos;\n+\t\tprivate final List<SpawnEntry> list;\n+\n+\t\tpublic PotentialSpawns(IWorld world, EntityCategory type, BlockPos pos, List<SpawnEntry> oldList) {\n+\t\t\tsuper(world);\n+\t\t\tthis.pos = pos;\n+\t\t\tthis.type = type;\n+\n+\t\t\tif (oldList != null) {\n+\t\t\t\tthis.list = new ArrayList<SpawnEntry>(oldList);\n+\t\t\t} else {\n+\t\t\t\tthis.list = new ArrayList<SpawnEntry>();\n+\t\t\t}\n+\t\t}\n+\n+\t\tpublic EntityCategory getType() {\n+\t\t\treturn type;\n+\t\t}\n+\n+\t\tpublic BlockPos getPos() {\n+\t\t\treturn pos;\n+\t\t}\n+\n+\t\tpublic List<SpawnEntry> getList() {\n+\t\t\treturn list;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean isCancelable() {\n+\t\t\treturn true;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Called by ServerWorld when it attempts to create a spawnpoint for a dimension.\n+\t * Canceling the event will prevent the vanilla code from running.\n+\t */\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2a5e23f5583be9417d47ab40a6cc792b70b6613"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODI2NTkxOnYy", "diffSide": "RIGHT", "path": "patchwork-events-world/src/main/java/net/minecraftforge/event/world/WorldEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNDo0MDoyN1rOFkBPqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNDo0MDoyN1rOFkBPqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMxMzQ1MA==", "bodyText": "Same for the other lines\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * <p>This event is not Cancelable.</p>\n          \n          \n            \n            \t * <p>This event is not cancellable.</p>", "url": "https://github.com/PatchworkMC/patchwork-api/pull/38#discussion_r373313450", "createdAt": "2020-01-31T04:40:27Z", "author": {"login": "coderbot16"}, "path": "patchwork-events-world/src/main/java/net/minecraftforge/event/world/WorldEvent.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.event.world;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+\n+import net.minecraftforge.eventbus.api.Event;\n+import net.minecraftforge.common.MinecraftForge;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientPlayNetworkHandler;\n+import net.minecraft.client.render.WorldRenderer;\n+import net.minecraft.client.world.ClientWorld;\n+import net.minecraft.entity.EntityCategory;\n+import net.minecraft.server.WorldGenerationProgressListener;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.util.ProgressListener;\n+import net.minecraft.util.profiler.Profiler;\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.IWorld;\n+import net.minecraft.world.SpawnHelper;\n+import net.minecraft.world.WorldSaveHandler;\n+import net.minecraft.world.gen.chunk.ChunkGenerator;\n+import net.minecraft.world.level.LevelInfo;\n+import net.minecraft.world.biome.Biome.SpawnEntry;\n+import net.minecraft.world.dimension.DimensionType;\n+import net.minecraft.world.level.LevelProperties;\n+\n+/**\n+ * WorldEvent is fired when an event involving the world occurs.\n+ *\n+ * <p>If a method utilizes this {@link Event} as its parameter, the method will\n+ * receive every child event of this class.</p>\n+ *\n+ * <p>{@link #world} contains the World this event is occurring in.</p>\n+ *\n+ * <p>All children of this event are fired on the {@link MinecraftForge#EVENT_BUS}.</p>\n+ */\n+public class WorldEvent extends Event {\n+\tprivate final IWorld world;\n+\n+\t// For EventBus\n+\tpublic WorldEvent() {\n+\t\tthis.world = null;\n+\t}\n+\n+\tpublic WorldEvent(IWorld world) {\n+\t\tthis.world = world;\n+\t}\n+\n+\tpublic IWorld getWorld() {\n+\t\treturn world;\n+\t}\n+\n+\t/**\n+\t * WorldEvent.Load is fired when Minecraft loads a world.\n+\t *\n+\t * <p>This event is fired when a world is loaded in\n+\t * {@link ClientWorld#ClientWorld(ClientPlayNetworkHandler, LevelInfo, DimensionType, int, Profiler, WorldRenderer)},\n+\t * {@link MinecraftServer#createWorlds(WorldSaveHandler, LevelProperties, LevelInfo, WorldGenerationProgressListener)},\n+\t * TODO: {@link DimensionManager#initDimension(int)}</p>\n+\t *\n+\t * <p>This event is not Cancelable.</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2a5e23f5583be9417d47ab40a6cc792b70b6613"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODI2NzY1OnYy", "diffSide": "RIGHT", "path": "patchwork-events-world/src/main/java/net/minecraftforge/event/world/WorldEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNDo0MDo1N1rOFkBQcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNDo0MDo1N1rOFkBQcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMxMzY0OA==", "bodyText": "Should probably have a {@link ServerWorld}", "url": "https://github.com/PatchworkMC/patchwork-api/pull/38#discussion_r373313648", "createdAt": "2020-01-31T04:40:57Z", "author": {"login": "coderbot16"}, "path": "patchwork-events-world/src/main/java/net/minecraftforge/event/world/WorldEvent.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.event.world;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+\n+import net.minecraftforge.eventbus.api.Event;\n+import net.minecraftforge.common.MinecraftForge;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientPlayNetworkHandler;\n+import net.minecraft.client.render.WorldRenderer;\n+import net.minecraft.client.world.ClientWorld;\n+import net.minecraft.entity.EntityCategory;\n+import net.minecraft.server.WorldGenerationProgressListener;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.util.ProgressListener;\n+import net.minecraft.util.profiler.Profiler;\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.IWorld;\n+import net.minecraft.world.SpawnHelper;\n+import net.minecraft.world.WorldSaveHandler;\n+import net.minecraft.world.gen.chunk.ChunkGenerator;\n+import net.minecraft.world.level.LevelInfo;\n+import net.minecraft.world.biome.Biome.SpawnEntry;\n+import net.minecraft.world.dimension.DimensionType;\n+import net.minecraft.world.level.LevelProperties;\n+\n+/**\n+ * WorldEvent is fired when an event involving the world occurs.\n+ *\n+ * <p>If a method utilizes this {@link Event} as its parameter, the method will\n+ * receive every child event of this class.</p>\n+ *\n+ * <p>{@link #world} contains the World this event is occurring in.</p>\n+ *\n+ * <p>All children of this event are fired on the {@link MinecraftForge#EVENT_BUS}.</p>\n+ */\n+public class WorldEvent extends Event {\n+\tprivate final IWorld world;\n+\n+\t// For EventBus\n+\tpublic WorldEvent() {\n+\t\tthis.world = null;\n+\t}\n+\n+\tpublic WorldEvent(IWorld world) {\n+\t\tthis.world = world;\n+\t}\n+\n+\tpublic IWorld getWorld() {\n+\t\treturn world;\n+\t}\n+\n+\t/**\n+\t * WorldEvent.Load is fired when Minecraft loads a world.\n+\t *\n+\t * <p>This event is fired when a world is loaded in\n+\t * {@link ClientWorld#ClientWorld(ClientPlayNetworkHandler, LevelInfo, DimensionType, int, Profiler, WorldRenderer)},\n+\t * {@link MinecraftServer#createWorlds(WorldSaveHandler, LevelProperties, LevelInfo, WorldGenerationProgressListener)},\n+\t * TODO: {@link DimensionManager#initDimension(int)}</p>\n+\t *\n+\t * <p>This event is not Cancelable.</p>\n+\t *\n+\t * <p>This event does not have a result.</p>\n+\t *\n+\t * <p>This event is fired on the {@link MinecraftForge#EVENT_BUS}.</p>\n+\t */\n+\tpublic static class Load extends WorldEvent {\n+\t\tpublic Load(IWorld world) {\n+\t\t\tsuper(world);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * WorldEvent.Unload is fired when Minecraft unloads a world.\n+\t *\n+\t * <p>This event is fired when a world is unloaded in\n+\t * {@link MinecraftClient#joinWorld(ClientWorld)},\n+\t * {@link MinecraftClient#disconnect()},\n+\t * {@link MinecraftServer#shutdown()},\n+\t * TODO: {@link DimensionManager#unloadWorlds()}</p>\n+\t *\n+\t * <p>This event is not Cancelable.</p>\n+\t *\n+\t * <p>This event does not have a result.</p>\n+\t *\n+\t * <p>This event is fired on the {@link MinecraftForge#EVENT_BUS}.</p>\n+\t */\n+\tpublic static class Unload extends WorldEvent {\n+\t\tpublic Unload(IWorld world) {\n+\t\t\tsuper(world);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * WorldEvent.Save is fired when Minecraft saves a world.\n+\t *\n+\t * <p>This event is fired when a world is saved in\n+\t * {@link ServerWorld#save(ProgressListener, boolean, boolean)}.</p>\n+\t *\n+\t * <p>This event is not Cancelable.</p>\n+\t *\n+\t * <p>This event does not have a result.</p>\n+\t *\n+\t * <p>This event is fired on the {@link MinecraftForge#EVENT_BUS}.</p>\n+\t */\n+\tpublic static class Save extends WorldEvent {\n+\t\tpublic Save(IWorld world) {\n+\t\t\tsuper(world);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Called by ServerWorld to gather a list of all possible entities that can spawn at the specified location.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2a5e23f5583be9417d47ab40a6cc792b70b6613"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODI2OTY2OnYy", "diffSide": "RIGHT", "path": "patchwork-events-world/src/main/java/net/minecraftforge/event/world/WorldEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNDo0MTo1NFrOFkBRcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNDo0MTo1NFrOFkBRcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMxMzkwNw==", "bodyText": "All of these subclasses need a // For EventBus constructor, or else there will be a crash when trying to add listeners.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/38#discussion_r373313907", "createdAt": "2020-01-31T04:41:54Z", "author": {"login": "coderbot16"}, "path": "patchwork-events-world/src/main/java/net/minecraftforge/event/world/WorldEvent.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.event.world;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+\n+import net.minecraftforge.eventbus.api.Event;\n+import net.minecraftforge.common.MinecraftForge;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientPlayNetworkHandler;\n+import net.minecraft.client.render.WorldRenderer;\n+import net.minecraft.client.world.ClientWorld;\n+import net.minecraft.entity.EntityCategory;\n+import net.minecraft.server.WorldGenerationProgressListener;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.util.ProgressListener;\n+import net.minecraft.util.profiler.Profiler;\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.IWorld;\n+import net.minecraft.world.SpawnHelper;\n+import net.minecraft.world.WorldSaveHandler;\n+import net.minecraft.world.gen.chunk.ChunkGenerator;\n+import net.minecraft.world.level.LevelInfo;\n+import net.minecraft.world.biome.Biome.SpawnEntry;\n+import net.minecraft.world.dimension.DimensionType;\n+import net.minecraft.world.level.LevelProperties;\n+\n+/**\n+ * WorldEvent is fired when an event involving the world occurs.\n+ *\n+ * <p>If a method utilizes this {@link Event} as its parameter, the method will\n+ * receive every child event of this class.</p>\n+ *\n+ * <p>{@link #world} contains the World this event is occurring in.</p>\n+ *\n+ * <p>All children of this event are fired on the {@link MinecraftForge#EVENT_BUS}.</p>\n+ */\n+public class WorldEvent extends Event {\n+\tprivate final IWorld world;\n+\n+\t// For EventBus\n+\tpublic WorldEvent() {\n+\t\tthis.world = null;\n+\t}\n+\n+\tpublic WorldEvent(IWorld world) {\n+\t\tthis.world = world;\n+\t}\n+\n+\tpublic IWorld getWorld() {\n+\t\treturn world;\n+\t}\n+\n+\t/**\n+\t * WorldEvent.Load is fired when Minecraft loads a world.\n+\t *\n+\t * <p>This event is fired when a world is loaded in\n+\t * {@link ClientWorld#ClientWorld(ClientPlayNetworkHandler, LevelInfo, DimensionType, int, Profiler, WorldRenderer)},\n+\t * {@link MinecraftServer#createWorlds(WorldSaveHandler, LevelProperties, LevelInfo, WorldGenerationProgressListener)},\n+\t * TODO: {@link DimensionManager#initDimension(int)}</p>\n+\t *\n+\t * <p>This event is not Cancelable.</p>\n+\t *\n+\t * <p>This event does not have a result.</p>\n+\t *\n+\t * <p>This event is fired on the {@link MinecraftForge#EVENT_BUS}.</p>\n+\t */\n+\tpublic static class Load extends WorldEvent {\n+\t\tpublic Load(IWorld world) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2a5e23f5583be9417d47ab40a6cc792b70b6613"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODI3MjgzOnYy", "diffSide": "RIGHT", "path": "patchwork-events-world/src/main/java/com/patchworkmc/mixin/event/world/MixinMinecraftServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNDo0NTozMlrOFkBTaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNzowNjowMVrOFkC50A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMxNDQwOQ==", "bodyText": "I think it is good to just keep Forge's behavior here.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/38#discussion_r373314409", "createdAt": "2020-01-31T04:45:32Z", "author": {"login": "coderbot16"}, "path": "patchwork-events-world/src/main/java/com/patchworkmc/mixin/event/world/MixinMinecraftServer.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package com.patchworkmc.mixin.event.world;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import net.minecraftforge.common.MinecraftForge;\n+import net.minecraftforge.event.world.WorldEvent;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.ServerTask;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.util.NonBlockingThreadExecutor;\n+import net.minecraft.world.dimension.DimensionType;\n+\n+@Mixin(MinecraftServer.class)\n+public abstract class MixinMinecraftServer extends NonBlockingThreadExecutor<ServerTask> {\n+\tpublic MixinMinecraftServer(String name) {\n+\t\tsuper(name);\n+\t}\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<DimensionType, ServerWorld> worlds;\n+\n+\t// Should get called once per loop, regardless of which if branch it takes.\n+\t//\t@Inject(\n+\t//\t\tmethod = \"createWorlds\",\n+\t//\t\tslice = @Slice(\n+\t//\t\t\tfrom = @At(value = \"INVOKE\", target = \"java/util/Iterator.hasNext ()Z\")\n+\t//\t\t),\n+\t//\t\tat = @At(value = \"JUMP\", opcode = Opcodes.GOTO),\n+\t//\t\tlocals = LocalCapture.CAPTURE_FAILHARD\n+\t//\t)\n+\t//\tprivate void hookCreateWorlds(WorldSaveHandler worldSaveHandler, LevelProperties properties, LevelInfo levelInfo, WorldGenerationProgressListener worldGenerationProgressListener, CallbackInfo ci, ServerWorld serverWorld, ServerWorld serverWorld2, Iterator var7, DimensionType dimensionType) {\n+\t//\t\tMinecraftForge.EVENT_BUS.post(new WorldEvent.Load(this.worlds.get(dimensionType)));\n+\t//\t}\n+\n+\t// Alternatively, mixin to the put call, and special case overworld.\n+\t// Perhaps move the special case outside of the loop?\n+\t@Redirect(method = \"createWorlds\", at = @At(value = \"INVOKE\", target = \"java/util/Iterator.next ()Ljava/lang/Object;\"))\n+\tprivate Object proxyNextWorldToSpecialCaseOverworld(Iterator iterator) {\n+\t\tDimensionType type = (DimensionType) iterator.next();\n+\n+\t\tif (type == DimensionType.OVERWORLD) {\n+\t\t\tMinecraftForge.EVENT_BUS.post(new WorldEvent.Load(this.worlds.get(type)));\n+\t\t}\n+\n+\t\treturn type;\n+\t}\n+\n+\t@Redirect(method = \"createWorlds\", at = @At(value = \"INVOKE\", target = \"java/util/Map.put (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\", ordinal = 1))\n+\tprivate Object proxyPutWorld(Map worlds, Object type, Object world) {\n+\t\tworlds.put(type, world);\n+\t\tMinecraftForge.EVENT_BUS.post(new WorldEvent.Load((ServerWorld) world));\n+\t\treturn world;\n+\t}\n+\n+\t// TODO: Should we Inject into ServerWorld.close instead? Currently, this follows Forge's patch location.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2a5e23f5583be9417d47ab40a6cc792b70b6613"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM0MDYyNA==", "bodyText": "K, will remove the TODO", "url": "https://github.com/PatchworkMC/patchwork-api/pull/38#discussion_r373340624", "createdAt": "2020-01-31T07:06:01Z", "author": {"login": "kitlith"}, "path": "patchwork-events-world/src/main/java/com/patchworkmc/mixin/event/world/MixinMinecraftServer.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package com.patchworkmc.mixin.event.world;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import net.minecraftforge.common.MinecraftForge;\n+import net.minecraftforge.event.world.WorldEvent;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.ServerTask;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.util.NonBlockingThreadExecutor;\n+import net.minecraft.world.dimension.DimensionType;\n+\n+@Mixin(MinecraftServer.class)\n+public abstract class MixinMinecraftServer extends NonBlockingThreadExecutor<ServerTask> {\n+\tpublic MixinMinecraftServer(String name) {\n+\t\tsuper(name);\n+\t}\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<DimensionType, ServerWorld> worlds;\n+\n+\t// Should get called once per loop, regardless of which if branch it takes.\n+\t//\t@Inject(\n+\t//\t\tmethod = \"createWorlds\",\n+\t//\t\tslice = @Slice(\n+\t//\t\t\tfrom = @At(value = \"INVOKE\", target = \"java/util/Iterator.hasNext ()Z\")\n+\t//\t\t),\n+\t//\t\tat = @At(value = \"JUMP\", opcode = Opcodes.GOTO),\n+\t//\t\tlocals = LocalCapture.CAPTURE_FAILHARD\n+\t//\t)\n+\t//\tprivate void hookCreateWorlds(WorldSaveHandler worldSaveHandler, LevelProperties properties, LevelInfo levelInfo, WorldGenerationProgressListener worldGenerationProgressListener, CallbackInfo ci, ServerWorld serverWorld, ServerWorld serverWorld2, Iterator var7, DimensionType dimensionType) {\n+\t//\t\tMinecraftForge.EVENT_BUS.post(new WorldEvent.Load(this.worlds.get(dimensionType)));\n+\t//\t}\n+\n+\t// Alternatively, mixin to the put call, and special case overworld.\n+\t// Perhaps move the special case outside of the loop?\n+\t@Redirect(method = \"createWorlds\", at = @At(value = \"INVOKE\", target = \"java/util/Iterator.next ()Ljava/lang/Object;\"))\n+\tprivate Object proxyNextWorldToSpecialCaseOverworld(Iterator iterator) {\n+\t\tDimensionType type = (DimensionType) iterator.next();\n+\n+\t\tif (type == DimensionType.OVERWORLD) {\n+\t\t\tMinecraftForge.EVENT_BUS.post(new WorldEvent.Load(this.worlds.get(type)));\n+\t\t}\n+\n+\t\treturn type;\n+\t}\n+\n+\t@Redirect(method = \"createWorlds\", at = @At(value = \"INVOKE\", target = \"java/util/Map.put (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\", ordinal = 1))\n+\tprivate Object proxyPutWorld(Map worlds, Object type, Object world) {\n+\t\tworlds.put(type, world);\n+\t\tMinecraftForge.EVENT_BUS.post(new WorldEvent.Load((ServerWorld) world));\n+\t\treturn world;\n+\t}\n+\n+\t// TODO: Should we Inject into ServerWorld.close instead? Currently, this follows Forge's patch location.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMxNDQwOQ=="}, "originalCommit": {"oid": "c2a5e23f5583be9417d47ab40a6cc792b70b6613"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODI4MzUzOnYy", "diffSide": "RIGHT", "path": "patchwork-events-world/src/main/java/com/patchworkmc/mixin/event/world/MixinServerWorld.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNDo1NjoyOVrOFkBZ9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwODowMjoyNlrOFkDxsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMxNjA4Nw==", "bodyText": "Technically this should be a FIELD injection before the GETFIELD instruction.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/38#discussion_r373316087", "createdAt": "2020-01-31T04:56:29Z", "author": {"login": "coderbot16"}, "path": "patchwork-events-world/src/main/java/com/patchworkmc/mixin/event/world/MixinServerWorld.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package com.patchworkmc.mixin.event.world;\n+\n+import java.util.function.BiFunction;\n+\n+import net.minecraftforge.common.MinecraftForge;\n+import net.minecraftforge.event.world.WorldEvent;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.util.profiler.Profiler;\n+import net.minecraft.world.chunk.ChunkManager;\n+import net.minecraft.world.dimension.Dimension;\n+import net.minecraft.world.dimension.DimensionType;\n+import net.minecraft.world.level.LevelInfo;\n+import net.minecraft.world.level.LevelProperties;\n+import net.minecraft.world.World;\n+import net.minecraft.server.world.ServerWorld;\n+\n+import com.patchworkmc.impl.event.world.WorldEvents;\n+\n+@Mixin(ServerWorld.class)\n+public abstract class MixinServerWorld extends World {\n+\tprotected MixinServerWorld(LevelProperties levelProperties, DimensionType dimensionType, BiFunction<World, Dimension, ChunkManager> chunkManagerProvider, Profiler profiler, boolean isClient) {\n+\t\tsuper(levelProperties, dimensionType, chunkManagerProvider, profiler, isClient);\n+\t}\n+\n+\t@Inject(method = \"save\", at = @At(value = \"INVOKE\", target = \"net/minecraft/server/world/ServerChunkManager.save (Z)V\"))\n+\tprivate void hookSave(CallbackInfo info) {\n+\t\tServerWorld world = (ServerWorld) (Object) this;\n+\t\tMinecraftForge.EVENT_BUS.post(new WorldEvent.Save(world));\n+\t}\n+\n+\t// TODO: consider adding a shift to before obtaining the ChunkManager to match forge more closely\n+\t// I don't think it'll make much of a difference.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2a5e23f5583be9417d47ab40a6cc792b70b6613"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM1NDkyOA==", "bodyText": "Right, really the only reason I didn't do that is because chunkManager is accessed 3 times in the function, while getBiomeSource is only called once. We could setup a slice or an ordinal for that, but if this does the job...", "url": "https://github.com/PatchworkMC/patchwork-api/pull/38#discussion_r373354928", "createdAt": "2020-01-31T08:02:26Z", "author": {"login": "kitlith"}, "path": "patchwork-events-world/src/main/java/com/patchworkmc/mixin/event/world/MixinServerWorld.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package com.patchworkmc.mixin.event.world;\n+\n+import java.util.function.BiFunction;\n+\n+import net.minecraftforge.common.MinecraftForge;\n+import net.minecraftforge.event.world.WorldEvent;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.util.profiler.Profiler;\n+import net.minecraft.world.chunk.ChunkManager;\n+import net.minecraft.world.dimension.Dimension;\n+import net.minecraft.world.dimension.DimensionType;\n+import net.minecraft.world.level.LevelInfo;\n+import net.minecraft.world.level.LevelProperties;\n+import net.minecraft.world.World;\n+import net.minecraft.server.world.ServerWorld;\n+\n+import com.patchworkmc.impl.event.world.WorldEvents;\n+\n+@Mixin(ServerWorld.class)\n+public abstract class MixinServerWorld extends World {\n+\tprotected MixinServerWorld(LevelProperties levelProperties, DimensionType dimensionType, BiFunction<World, Dimension, ChunkManager> chunkManagerProvider, Profiler profiler, boolean isClient) {\n+\t\tsuper(levelProperties, dimensionType, chunkManagerProvider, profiler, isClient);\n+\t}\n+\n+\t@Inject(method = \"save\", at = @At(value = \"INVOKE\", target = \"net/minecraft/server/world/ServerChunkManager.save (Z)V\"))\n+\tprivate void hookSave(CallbackInfo info) {\n+\t\tServerWorld world = (ServerWorld) (Object) this;\n+\t\tMinecraftForge.EVENT_BUS.post(new WorldEvent.Save(world));\n+\t}\n+\n+\t// TODO: consider adding a shift to before obtaining the ChunkManager to match forge more closely\n+\t// I don't think it'll make much of a difference.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMxNjA4Nw=="}, "originalCommit": {"oid": "c2a5e23f5583be9417d47ab40a6cc792b70b6613"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODI4NDE0OnYy", "diffSide": "RIGHT", "path": "patchwork-events-world/src/main/resources/patchwork-events-world.mixins.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNDo1Njo1OVrOFkBaTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNDo1Njo1OVrOFkBaTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMxNjE3Mw==", "bodyText": "Please maintain alphabetical order here", "url": "https://github.com/PatchworkMC/patchwork-api/pull/38#discussion_r373316173", "createdAt": "2020-01-31T04:56:59Z", "author": {"login": "coderbot16"}, "path": "patchwork-events-world/src/main/resources/patchwork-events-world.mixins.json", "diffHunk": "@@ -4,7 +4,13 @@\n   \"compatibilityLevel\": \"JAVA_8\",\n   \"mixins\": [\n     \"MixinServerPlayerInteractionManager\",\n-    \"MixinThreadedAnvilChunkStorage\"\n+    \"MixinThreadedAnvilChunkStorage\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2a5e23f5583be9417d47ab40a6cc792b70b6613"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODI4NDMwOnYy", "diffSide": "RIGHT", "path": "patchwork-events-world/src/main/resources/patchwork-events-world.mixins.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNDo1NzoxNlrOFkBaYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNDo1NzoxNlrOFkBaYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMxNjE5NA==", "bodyText": "Make sure that client-sided mixins go into the client block", "url": "https://github.com/PatchworkMC/patchwork-api/pull/38#discussion_r373316194", "createdAt": "2020-01-31T04:57:16Z", "author": {"login": "coderbot16"}, "path": "patchwork-events-world/src/main/resources/patchwork-events-world.mixins.json", "diffHunk": "@@ -4,7 +4,13 @@\n   \"compatibilityLevel\": \"JAVA_8\",\n   \"mixins\": [\n     \"MixinServerPlayerInteractionManager\",\n-    \"MixinThreadedAnvilChunkStorage\"\n+    \"MixinThreadedAnvilChunkStorage\",\n+    \"MixinClientWorld\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2a5e23f5583be9417d47ab40a6cc792b70b6613"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTA4NTI4OnYy", "diffSide": "RIGHT", "path": "patchwork-events-world/src/main/java/com/patchworkmc/mixin/event/world/MixinMinecraftServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwNDoyMzoxN1rOFkcTqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwNDoyMzoxN1rOFkcTqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1Njg0MA==", "bodyText": "Extra blank line\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/PatchworkMC/patchwork-api/pull/38#discussion_r373756840", "createdAt": "2020-02-01T04:23:17Z", "author": {"login": "coderbot16"}, "path": "patchwork-events-world/src/main/java/com/patchworkmc/mixin/event/world/MixinMinecraftServer.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package com.patchworkmc.mixin.event.world;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.ServerTask;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.util.NonBlockingThreadExecutor;\n+import net.minecraft.world.dimension.DimensionType;\n+\n+import com.patchworkmc.impl.event.world.WorldEvents;\n+\n+@Mixin(MinecraftServer.class)\n+public abstract class MixinMinecraftServer extends NonBlockingThreadExecutor<ServerTask> {\n+\tpublic MixinMinecraftServer(String name) {\n+\t\tsuper(name);\n+\t}\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<DimensionType, ServerWorld> worlds;\n+\n+\t/*\n+\t// This is a varient of the world load hook that is less likely to break mods and more likely to break on updates.\n+\t// Should get called once per loop, regardless of which if branch it takes.\n+\t@Inject(\n+\t\tmethod = \"createWorlds\",\n+\t\tslice = @Slice(\n+\t\t\tfrom = @At(value = \"INVOKE\", target = \"java/util/Iterator.hasNext ()Z\")\n+\t\t),\n+\t\tat = @At(value = \"JUMP\", opcode = Opcodes.GOTO),\n+\t\tlocals = LocalCapture.CAPTURE_FAILHARD\n+\t)\n+\tprivate void hookCreateWorlds(WorldSaveHandler worldSaveHandler, LevelProperties properties, LevelInfo levelInfo, WorldGenerationProgressListener worldGenerationProgressListener, CallbackInfo ci, ServerWorld serverWorld, ServerWorld serverWorld2, Iterator var7, DimensionType dimensionType) {\n+\t\tWorldEvents.onWorldLoad(this.worlds.get(dimensionType));\n+\t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a5eeb7ff8cbb32fe40392d038b19617591839e5"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1497, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}