{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2NTY4NzU3", "number": 113, "title": "Add LootTableLoadEvent, methods on LootPool/LootTable", "bodyText": "The mixin to LootManager is messy, and I'm open to alternative ways to doing it, even if it involves doing it in a completely different way from how forge does it. For now, I'm going to get this up so that bikeshedding can happen.\nI'm using the \"net.patchworkmc.api.*.Forge\" pattern for interfaces that describe public methods added by Forge for use by mods in this commit. This is up for bikeshedding.\nThis is untested other than starting up Minecraft and opening a world. I was originally going to at least use the mod mentioned in #110, but it doesn't appear to have a version for 1.14.4, and I didn't feel like trying to run a 1.15.2 mod through patcher and hoping it worked.\nThe reason why this PR doesn't simply add/dispatch the LootTableLoadEvent is because many consumers of the event (according to github search) call methods on LootPool and/or LootTable.", "createdAt": "2020-07-09T01:47:03Z", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113", "merged": true, "mergeCommit": {"oid": "657afda93555fe80fcf1562309982b06c3b70f25"}, "closed": true, "closedAt": "2020-07-21T23:50:13Z", "author": {"login": "kitlith"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABczuXdygBqjM1MzU4Nzc5Njc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3PIpKAFqTQ1MjkwNDM3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a31cdc950fb1cc64cf144f84da03efe33a893656", "author": {"user": {"login": "kitlith", "name": "Kitlith"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/a31cdc950fb1cc64cf144f84da03efe33a893656", "committedDate": "2020-07-11T01:54:03Z", "message": "Fix LocalCapture.PRINT that I forgot about."}, "afterCommit": {"oid": "ac63d2a591722a6e97a90b6023c7a0003a984d2e", "author": {"user": {"login": "kitlith", "name": "Kitlith"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/ac63d2a591722a6e97a90b6023c7a0003a984d2e", "committedDate": "2020-07-11T01:57:03Z", "message": "Fix LocalCapture.PRINT that I forgot about"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "41f5e78187c1879fa67185415c04df7b510d378e", "author": {"user": {"login": "kitlith", "name": "Kitlith"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/41f5e78187c1879fa67185415c04df7b510d378e", "committedDate": "2020-07-11T02:06:41Z", "message": "Implement FMLServerStoppedEvent"}, "afterCommit": {"oid": "3026e429b1117c8d5fcd7556387db19192620122", "author": {"user": {"login": "kitlith", "name": "Kitlith"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/3026e429b1117c8d5fcd7556387db19192620122", "committedDate": "2020-07-11T02:11:33Z", "message": "Implement FMLServerStoppedEvent"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3026e429b1117c8d5fcd7556387db19192620122", "author": {"user": {"login": "kitlith", "name": "Kitlith"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/3026e429b1117c8d5fcd7556387db19192620122", "committedDate": "2020-07-11T02:11:33Z", "message": "Implement FMLServerStoppedEvent"}, "afterCommit": {"oid": "b3901ad3e84ee88fbae2dbd1473c5bcd1543fbf7", "author": {"user": {"login": "kitlith", "name": "Kitlith"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/b3901ad3e84ee88fbae2dbd1473c5bcd1543fbf7", "committedDate": "2020-07-17T23:45:32Z", "message": "Dispatch from the god classes for the events added in this PR"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMTU2MTk1", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#pullrequestreview-451156195", "createdAt": "2020-07-19T19:16:08Z", "commit": {"oid": "b3901ad3e84ee88fbae2dbd1473c5bcd1543fbf7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxOToxNjowOFrOGzxrcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxOToxNjowOFrOGzxrcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0NDQ5Nw==", "bodyText": "potential memory leak\nNot sure what to do about this, might just need an overwrite", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r456944497", "createdAt": "2020-07-19T19:16:08Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootManager.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.loot;\n+\n+import java.io.IOException;\n+import java.util.Deque;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Queues;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.loot.LootManager;\n+import net.minecraft.resource.Resource;\n+import net.minecraft.resource.ResourceManager;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.patchworkmc.impl.loot.LootHooks;\n+\n+@Mixin(LootManager.class)\n+public abstract class MixinLootManager extends MixinJsonDataLoader {\n+\t// should this also be part of the static threadlocal?\n+\t@Unique\n+\tprivate ResourceManager resourceManager;\n+\n+\t@Unique\n+\tprivate static ThreadLocal<Deque<LootManager>> lootContext = new ThreadLocal<Deque<LootManager>>();\n+\n+\t// TODO: is reentrancy necessary?\n+\t@Inject(method = \"apply\", at = @At(\"HEAD\"))\n+\tprivate void getResourceManager(Map<Identifier, JsonObject> map, ResourceManager resourceManager, Profiler profiler, CallbackInfo info) {\n+\t\tthis.resourceManager = resourceManager;\n+\t\tDeque<LootManager> que = lootContext.get();\n+\n+\t\tif (que == null) {\n+\t\t\tque = Queues.newArrayDeque();\n+\t\t\tlootContext.set(que);\n+\t\t}\n+\n+\t\tque.push((LootManager) (Object) this);\n+\t}\n+\n+\t@Inject(method = \"apply\", at = @At(\"RETURN\"))\n+\tprivate void delResourceManager(CallbackInfo info) {\n+\t\t// TODO: what if an exception is thrown?\n+\t\tresourceManager = null;\n+\t\tlootContext.get().pop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3901ad3e84ee88fbae2dbd1473c5bcd1543fbf7"}, "originalPosition": 74}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "15a35d6bdaf4ed222782fa9efc8e59a0235e3201", "author": {"user": {"login": "kitlith", "name": "Kitlith"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/15a35d6bdaf4ed222782fa9efc8e59a0235e3201", "committedDate": "2020-07-19T22:27:01Z", "message": "prevent memory leak"}, "afterCommit": {"oid": "1422e9d94ea1c990e5f26b155f0f39042269ec22", "author": {"user": {"login": "kitlith", "name": "Kitlith"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/1422e9d94ea1c990e5f26b155f0f39042269ec22", "committedDate": "2020-07-19T23:13:42Z", "message": "prevent memory leak"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyODQzMDkz", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#pullrequestreview-452843093", "createdAt": "2020-07-21T21:29:08Z", "commit": {"oid": "6d3db34e172b14638b390fe56b790df9d6ed7e2c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMToyOTowOFrOG1Kd4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMTozODowMlrOG1Ku5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM5OTIwMA==", "bodyText": "override annotations", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r458399200", "createdAt": "2020-07-21T21:29:08Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootPool.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.loot;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+\n+import net.minecraft.loot.LootPool;\n+import net.minecraft.loot.LootTableRange;\n+import net.minecraft.loot.UniformLootTableRange;\n+\n+import net.patchworkmc.api.loot.ForgeLootPool;\n+import net.patchworkmc.impl.loot.PatchworkLootPool;\n+\n+@Mixin(LootPool.class)\n+public class MixinLootPool implements PatchworkLootPool, ForgeLootPool {\n+\t// Forge has this as final, but I don't have a good way to initialize it if it is final.\n+\t@Unique\n+\tprivate String name;\n+\n+\t@Shadow\n+\tprivate UniformLootTableRange bonusRollsRange;\n+\n+\t@Shadow\n+\tprivate LootTableRange rollsRange;\n+\n+\t// implementation detail\n+\t// TODO: if we could have an inner class that was also a mixin, we could set this as protected?\n+\tpublic void patchwork$setName(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d3db34e172b14638b390fe56b790df9d6ed7e2c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM5OTQ0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            \t\t// is this necessary?\n          \n          \n            \n            \t\tcir.setReturnValue(ret);", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r458399449", "createdAt": "2020-07-21T21:29:42Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootPoolBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.loot;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.loot.LootPool;\n+import net.minecraft.loot.UniformLootTableRange;\n+\n+import net.patchworkmc.api.loot.ForgeLootPool;\n+import net.patchworkmc.impl.loot.PatchworkLootPool;\n+\n+@Mixin(LootPool.Builder.class)\n+public abstract class MixinLootPoolBuilder implements ForgeLootPool.Builder {\n+\t@Unique\n+\tprivate String name;\n+\n+\t@Shadow\n+\tprivate UniformLootTableRange bonusRollsRange;\n+\n+\t@Inject(method = \"build\", at = @At(\"RETURN\"), cancellable = true)\n+\tprivate void addNameToConstructor(CallbackInfoReturnable<LootPool> cir) {\n+\t\tLootPool ret = cir.getReturnValue();\n+\t\t((PatchworkLootPool) ret).patchwork$setName(name);\n+\n+\t\t// is this necessary?\n+\t\tcir.setReturnValue(ret);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d3db34e172b14638b390fe56b790df9d6ed7e2c"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM5OTU4OQ==", "bodyText": "override annotations", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r458399589", "createdAt": "2020-07-21T21:29:58Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootPoolBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.loot;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.loot.LootPool;\n+import net.minecraft.loot.UniformLootTableRange;\n+\n+import net.patchworkmc.api.loot.ForgeLootPool;\n+import net.patchworkmc.impl.loot.PatchworkLootPool;\n+\n+@Mixin(LootPool.Builder.class)\n+public abstract class MixinLootPoolBuilder implements ForgeLootPool.Builder {\n+\t@Unique\n+\tprivate String name;\n+\n+\t@Shadow\n+\tprivate UniformLootTableRange bonusRollsRange;\n+\n+\t@Inject(method = \"build\", at = @At(\"RETURN\"), cancellable = true)\n+\tprivate void addNameToConstructor(CallbackInfoReturnable<LootPool> cir) {\n+\t\tLootPool ret = cir.getReturnValue();\n+\t\t((PatchworkLootPool) ret).patchwork$setName(name);\n+\n+\t\t// is this necessary?\n+\t\tcir.setReturnValue(ret);\n+\t}\n+\n+\tpublic LootPool.Builder name(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d3db34e172b14638b390fe56b790df9d6ed7e2c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM5OTcyOA==", "bodyText": "override annotations", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r458399728", "createdAt": "2020-07-21T21:30:16Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootTable.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.loot;\n+\n+import java.util.Arrays;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+\n+import net.minecraft.loot.LootPool;\n+import net.minecraft.loot.LootTable;\n+\n+import net.fabricmc.fabric.api.loot.v1.FabricLootSupplier;\n+\n+import net.patchworkmc.api.loot.ForgeLootTable;\n+import net.patchworkmc.api.loot.ForgeLootPool;\n+\n+@Mixin(LootTable.class)\n+public class MixinLootTable implements ForgeLootTable {\n+\t@Shadow\n+\tLootPool[] pools;\n+\n+\t// Forge added methods\n+\n+\t// TODO: freezing stuff\n+\n+\tpublic LootPool getPool(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d3db34e172b14638b390fe56b790df9d6ed7e2c"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMDE0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tvoid serverStoppedHook(CallbackInfo ci) {\n          \n          \n            \n            \tprivate void serverStoppedHook(CallbackInfo ci) {", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r458400149", "createdAt": "2020-07-21T21:31:07Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-events-lifecycle/src/main/java/net/patchworkmc/mixin/event/lifecycle/MixinMinecraftServer.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.event.lifecycle;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.server.MinecraftServer;\n+\n+import net.patchworkmc.impl.event.lifecycle.LifecycleEvents;\n+\n+@Mixin(MinecraftServer.class)\n+public class MixinMinecraftServer {\n+\t@Inject(method = \"run\", at = @At(value = \"INVOKE\", target = \"net/minecraft/server/MinecraftServer.exit ()V\"))\n+\tvoid serverStoppedHook(CallbackInfo ci) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d3db34e172b14638b390fe56b790df9d6ed7e2c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMzU1Nw==", "bodyText": "This stack seems to have a max size of one?", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r458403557", "createdAt": "2020-07-21T21:38:02Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-loot/src/main/java/net/patchworkmc/impl/loot/LootHooks.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.impl.loot;\n+\n+import java.util.Deque;\n+import java.util.HashSet;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.Queues;\n+import com.google.common.collect.Sets;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import org.spongepowered.asm.mixin.Unique;\n+\n+import net.minecraft.loot.LootManager;\n+import net.minecraft.loot.LootTable;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.JsonHelper;\n+\n+import net.patchworkmc.impl.event.loot.LootEvents;\n+\n+public class LootHooks {\n+\t@Unique\n+\tprivate static ThreadLocal<Deque<LootTableContext>> lootContext = new ThreadLocal<Deque<LootTableContext>>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d3db34e172b14638b390fe56b790df9d6ed7e2c"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyODk2NTcw", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#pullrequestreview-452896570", "createdAt": "2020-07-21T23:27:09Z", "commit": {"oid": "ae6e9c7c62e1d0351689115fe9f432ab7982d243"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyNzowOVrOG1NURg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyNzowOVrOG1NURg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NTg5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            \t\t// is this necessary?\n          \n          \n            \n            \t\tcir.setReturnValue(ret);", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r458445894", "createdAt": "2020-07-21T23:27:09Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootPoolSerializer.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.loot;\n+\n+import java.lang.reflect.Type;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonElement;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonSerializationContext;\n+\n+import net.minecraft.loot.LootPool;\n+\n+import net.patchworkmc.api.loot.ForgeLootPool;\n+import net.patchworkmc.impl.loot.LootHooks;\n+import net.patchworkmc.impl.loot.PatchworkLootPool;\n+\n+@Mixin(LootPool.Serializer.class)\n+public class MixinLootPoolSerializer {\n+\t@Inject(method = \"deserialize\", at = @At(\"RETURN\"), cancellable = true, locals = LocalCapture.CAPTURE_FAILHARD)\n+\tprivate void addNameToConstructor(JsonElement elem, Type ty, JsonDeserializationContext ctx, CallbackInfoReturnable<LootPool> cir, JsonObject obj) {\n+\t\tLootPool ret = cir.getReturnValue();\n+\t\t((PatchworkLootPool) ret).patchwork$setName(LootHooks.readPoolName(obj));\n+\n+\t\t// is this necessary?\n+\t\tcir.setReturnValue(ret);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae6e9c7c62e1d0351689115fe9f432ab7982d243"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa90e0835062d50fb4c7354eb757e605c097b358", "author": {"user": {"login": "kitlith", "name": "Kitlith"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/fa90e0835062d50fb4c7354eb757e605c097b358", "committedDate": "2020-07-21T23:30:09Z", "message": "Add LootTableLoadEvent, methods on LootPool/LootTable\n\nThe mixin to LootManager is messy, and I'm open to alternative ways to\ndoing it, even if it involves scrapping the 'forge way' of doing it and\ndoing it a different way. For now, I'm going to get this up so that\nbikeshedding can happen.\n\nI'm using the \"net.patchworkmc.api.*.Forge<classname>\" pattern for\ninterfaces that describe public methods added by Forge for use by mods\nin this commit. This is up for bikeshedding.\n\nThis is untested other than starting up Minecraft and opening a world."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8210832823bb4fb9f1b56971be5a32e31b69904d", "author": {"user": {"login": "kitlith", "name": "Kitlith"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/8210832823bb4fb9f1b56971be5a32e31b69904d", "committedDate": "2020-07-21T23:30:09Z", "message": "Fix LocalCapture.PRINT that I forgot about"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7071e4ac8ffa76d98edb341649efc1e7293dda6", "author": {"user": {"login": "kitlith", "name": "Kitlith"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/a7071e4ac8ffa76d98edb341649efc1e7293dda6", "committedDate": "2020-07-21T23:30:09Z", "message": "Implement FMLServerStoppedEvent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd89e3383f45f35c817a4fb056354d5a1c0055bd", "author": {"user": {"login": "kitlith", "name": "Kitlith"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/bd89e3383f45f35c817a4fb056354d5a1c0055bd", "committedDate": "2020-07-21T23:38:08Z", "message": "Dispatch from the god classes for the events added in this PR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f795cb84f19e44b8b23eb9387e8a77a080295a7", "author": {"user": {"login": "kitlith", "name": "Kitlith"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/5f795cb84f19e44b8b23eb9387e8a77a080295a7", "committedDate": "2020-07-21T23:38:10Z", "message": "prevent memory leak"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e2885ad92d61c0c44f8b8bd454ace40d5c4045e", "author": {"user": {"login": "kitlith", "name": "Kitlith"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/1e2885ad92d61c0c44f8b8bd454ace40d5c4045e", "committedDate": "2020-07-21T23:38:10Z", "message": "fixup! checkstype"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b79ec8513714b37772ce76af930dc65bb2f524a", "author": {"user": {"login": "kitlith", "name": "Kitlith"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/4b79ec8513714b37772ce76af930dc65bb2f524a", "committedDate": "2020-07-21T23:38:10Z", "message": "Make slightly less hacky!\n\nThe idea is to add an inject in the same place as the method we would be\nredirecting (but are instead cancelling) so that we can capture locals,\nand grab the builder that we would otherwise be missing.\n\nThe downside is that we are effectively overwriting the lambda that\nvanilla uses in favor of our own."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85cddc7f4472afa0d52a66dfa2de4aecda14c3cf", "author": {"user": {"login": "kitlith", "name": "Kitlith"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/85cddc7f4472afa0d52a66dfa2de4aecda14c3cf", "committedDate": "2020-07-21T23:38:10Z", "message": "Make the implicit \"overwrite\" explicit."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e9326ea50583445a72bf04d081b2acbdc31f340", "author": {"user": {"login": "kitlith", "name": "Kitlith"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/9e9326ea50583445a72bf04d081b2acbdc31f340", "committedDate": "2020-07-21T23:38:10Z", "message": "Make requested changes.\n\nMainly adding Override annotations to methods for interfaces, but a few\nother things as well."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c396a6cf0bd1ae306e9a096a350eaf21342c13f1", "author": {"user": {"login": "TheGlitch76", "name": "Glitch"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/c396a6cf0bd1ae306e9a096a350eaf21342c13f1", "committedDate": "2020-07-21T23:27:41Z", "message": "Remove unneeded setReturnValue"}, "afterCommit": {"oid": "9e9326ea50583445a72bf04d081b2acbdc31f340", "author": {"user": {"login": "kitlith", "name": "Kitlith"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/9e9326ea50583445a72bf04d081b2acbdc31f340", "committedDate": "2020-07-21T23:38:10Z", "message": "Make requested changes.\n\nMainly adding Override annotations to methods for interfaces, but a few\nother things as well."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyOTA0Mzc5", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#pullrequestreview-452904379", "createdAt": "2020-07-21T23:49:56Z", "commit": {"oid": "9e9326ea50583445a72bf04d081b2acbdc31f340"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 896, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}