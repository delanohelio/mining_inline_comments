{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MjA1NjUx", "number": 22, "title": "patchwork-gui module", "bodyText": "also changed your MixinDispenserBehavior because it doesn't work for me.\nMod Used: No Recipe Book\n\n GuiScreenEvent.InitGuiEvent.Pre\n GuiScreenEvent.InitGuiEvent.Post\n GuiScreenEvent.DrawScreenEvent.Pre\n GuiScreenEvent.DrawScreenEvent.Post\n GuiScreenEvent.BackgroundDrawnEvent\n GuiScreenEvent.PotionShiftEvent\n GuiScreenEvent.MouseClickedEvent.Pre\n GuiScreenEvent.MouseClickedEvent.Post\n GuiScreenEvent.MouseReleasedEvent.Pre\n GuiScreenEvent.MouseReleasedEvent.Post\n GuiScreenEvent.MouseDragEvent.Pre\n GuiScreenEvent.MouseDragEvent.Post\n GuiScreenEvent.MouseScrollEvent.Pre\n GuiScreenEvent.MouseScrollEvent.Post\n GuiScreenEvent.KeyboardKeyPressedEvent.Pre\n GuiScreenEvent.KeyboardKeyPressedEvent.Post\n GuiScreenEvent.KeyboardKeyReleasedEvent.Pre\n GuiScreenEvent.KeyboardKeyReleasedEvent.Post\n GuiScreenEvent.KeyboardCharTypedEvent.Pre\n GuiScreenEvent.KeyboardCharTypedEvent.Post\n\nIt is basically impossible to find mods to use these, so we will need a test mod for all of these", "createdAt": "2020-01-04T11:19:16Z", "url": "https://github.com/PatchworkMC/patchwork-api/pull/22", "merged": true, "mergeCommit": {"oid": "63d33f6b79d9a78afd3268e80efb0f84b1e51df6"}, "closed": true, "closedAt": "2020-01-19T15:06:04Z", "author": {"login": "shedaniel"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb3FjlAgFqTMzODM2MDAzMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb75WRzgFqTM0NTAwNzcxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4MzYwMDMx", "url": "https://github.com/PatchworkMC/patchwork-api/pull/22#pullrequestreview-338360031", "createdAt": "2020-01-04T16:29:09Z", "commit": {"oid": "ed8c0ddf977b2846e11ce206b528eb141b0b787a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQxNjoyOTowOVrOFaOaaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQxNjoyOTowOVrOFaOaaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA0MzQzMw==", "bodyText": "I pushed the fix for this, this is no longer needed.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/22#discussion_r363043433", "createdAt": "2020-01-04T16:29:09Z", "author": {"login": "coderbot16"}, "path": "patchwork-extensions-shearing/src/main/java/com/patchworkmc/mixin/extensions/shearing/MixinDispenserBehavior.java", "diffHunk": "@@ -47,7 +47,7 @@\n  */\n @Mixin(targets = \"net/minecraft/block/dispenser/DispenserBehavior$13\")\n public class MixinDispenserBehavior extends FallibleItemDispenserBehavior {\n-\tprivate static final String DISPENSE_SILENTLY = \"net/minecraft/block/dispenser/ItemDispenserBehavior.dispenseSilently(Lnet/minecraft/util/math/BlockPointer;Lnet/minecraft/item/ItemStack;)Lnet/minecraft/item/ItemStack;\";\n+\tprivate static final String DISPENSE_SILENTLY = \"dispenseSilently\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8c0ddf977b2846e11ce206b528eb141b0b787a"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwMjIxMzk3", "url": "https://github.com/PatchworkMC/patchwork-api/pull/22#pullrequestreview-340221397", "createdAt": "2020-01-09T00:01:30Z", "commit": {"oid": "ed8c0ddf977b2846e11ce206b528eb141b0b787a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMDowMTozMFrOFbngtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMDozNDowM1rOFboAJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUwMzIyMw==", "bodyText": "It would probably be a good idea to mark all of your injections as @Unique or add the patchwork$ prefix to help avoid conflicts with other mods hooking these methods.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/22#discussion_r364503223", "createdAt": "2020-01-09T00:01:30Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-rendering/src/main/java/com/patchworkmc/mixin/rendering/MixinScreen.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package com.patchworkmc.mixin.rendering;\n+\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import javax.annotation.Nullable;\n+\n+import net.minecraftforge.client.event.GuiScreenEvent;\n+import net.minecraftforge.common.MinecraftForge;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.Element;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+\n+@Mixin(Screen.class)\n+public abstract class MixinScreen {\n+\t@Shadow\n+\t@Final\n+\tprotected List<AbstractButtonWidget> buttons;\n+\n+\t@Shadow\n+\tprotected abstract <T extends AbstractButtonWidget> T addButton(T button);\n+\n+\t@Shadow\n+\t@Final\n+\tprotected List<Element> children;\n+\n+\t@Shadow\n+\t@Nullable\n+\tprotected MinecraftClient minecraft;\n+\n+\t@Unique\n+\tprivate Consumer<AbstractButtonWidget> remove = (b) -> {\n+\t\tbuttons.remove(b);\n+\t\tchildren.remove(b);\n+\t};\n+\n+\t@Inject(method = \"init(Lnet/minecraft/client/MinecraftClient;II)V\", at = @At(value = \"INVOKE\", target = \"Ljava/util/List;clear()V\", ordinal = 0, remap = false), cancellable = true)\n+\tprivate void preInit(MinecraftClient client, int width, int height, CallbackInfo info) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8c0ddf977b2846e11ce206b528eb141b0b787a"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUwNDc5MA==", "bodyText": "The EventBus constructors should have a comment that says // For EventBus above those constructors, and calling super() is preferred over this(null)", "url": "https://github.com/PatchworkMC/patchwork-api/pull/22#discussion_r364504790", "createdAt": "2020-01-09T00:07:23Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-rendering/src/main/java/net/minecraftforge/client/event/GuiScreenEvent.java", "diffHunk": "@@ -0,0 +1,751 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.client.event;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import net.minecraftforge.eventbus.api.Event;\n+import org.lwjgl.glfw.GLFW;\n+\n+import net.minecraft.client.gui.Element;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.screen.ingame.AbstractInventoryScreen;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+import net.minecraft.client.gui.widget.ButtonWidget;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Event classes for GuiScreen events.\n+ *\n+ * @author bspkrs\n+ */\n+@Environment(EnvType.CLIENT)\n+public class GuiScreenEvent extends Event {\n+\tprivate final Screen gui;\n+\n+\tpublic GuiScreenEvent() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8c0ddf977b2846e11ce206b528eb141b0b787a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUwNTAwMA==", "bodyText": "These classes will need the above as well", "url": "https://github.com/PatchworkMC/patchwork-api/pull/22#discussion_r364505000", "createdAt": "2020-01-09T00:08:16Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-rendering/src/main/java/net/minecraftforge/client/event/GuiScreenEvent.java", "diffHunk": "@@ -0,0 +1,751 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.client.event;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import net.minecraftforge.eventbus.api.Event;\n+import org.lwjgl.glfw.GLFW;\n+\n+import net.minecraft.client.gui.Element;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.screen.ingame.AbstractInventoryScreen;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+import net.minecraft.client.gui.widget.ButtonWidget;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Event classes for GuiScreen events.\n+ *\n+ * @author bspkrs\n+ */\n+@Environment(EnvType.CLIENT)\n+public class GuiScreenEvent extends Event {\n+\tprivate final Screen gui;\n+\n+\tpublic GuiScreenEvent() {\n+\t\tthis(null);\n+\t}\n+\n+\tpublic GuiScreenEvent(Screen gui) {\n+\t\tthis.gui = gui;\n+\t}\n+\n+\t/**\n+\t * The GuiScreen object generating this event.\n+\t */\n+\tpublic Screen getGui() {\n+\t\treturn gui;\n+\t}\n+\n+\tpublic static class InitGuiEvent extends GuiScreenEvent {\n+\t\tprivate Consumer<AbstractButtonWidget> add;\n+\t\tprivate Consumer<AbstractButtonWidget> remove;\n+\n+\t\tprivate List<AbstractButtonWidget> list;\n+\n+\t\tpublic InitGuiEvent() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8c0ddf977b2846e11ce206b528eb141b0b787a"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUxMTEyNg==", "bodyText": "Change the br flags to HTML paragraph p flags", "url": "https://github.com/PatchworkMC/patchwork-api/pull/22#discussion_r364511126", "createdAt": "2020-01-09T00:33:31Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-rendering/src/main/java/net/minecraftforge/client/event/GuiScreenEvent.java", "diffHunk": "@@ -0,0 +1,751 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.client.event;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import net.minecraftforge.eventbus.api.Event;\n+import org.lwjgl.glfw.GLFW;\n+\n+import net.minecraft.client.gui.Element;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.screen.ingame.AbstractInventoryScreen;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+import net.minecraft.client.gui.widget.ButtonWidget;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Event classes for GuiScreen events.\n+ *\n+ * @author bspkrs\n+ */\n+@Environment(EnvType.CLIENT)\n+public class GuiScreenEvent extends Event {\n+\tprivate final Screen gui;\n+\n+\tpublic GuiScreenEvent() {\n+\t\tthis(null);\n+\t}\n+\n+\tpublic GuiScreenEvent(Screen gui) {\n+\t\tthis.gui = gui;\n+\t}\n+\n+\t/**\n+\t * The GuiScreen object generating this event.\n+\t */\n+\tpublic Screen getGui() {\n+\t\treturn gui;\n+\t}\n+\n+\tpublic static class InitGuiEvent extends GuiScreenEvent {\n+\t\tprivate Consumer<AbstractButtonWidget> add;\n+\t\tprivate Consumer<AbstractButtonWidget> remove;\n+\n+\t\tprivate List<AbstractButtonWidget> list;\n+\n+\t\tpublic InitGuiEvent() {\n+\t\t}\n+\n+\t\tpublic InitGuiEvent(Screen gui, List<AbstractButtonWidget> list, Consumer<AbstractButtonWidget> add, Consumer<AbstractButtonWidget> remove) {\n+\t\t\tsuper(gui);\n+\t\t\tthis.list = Collections.unmodifiableList(list);\n+\t\t\tthis.add = add;\n+\t\t\tthis.remove = remove;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Unmodifiable reference to the list of buttons on the {@link #gui}.\n+\t\t */\n+\t\tpublic List<AbstractButtonWidget> getWidgetList() {\n+\t\t\treturn list;\n+\t\t}\n+\n+\t\tpublic void addWidget(AbstractButtonWidget button) {\n+\t\t\tadd.accept(button);\n+\t\t}\n+\n+\t\tpublic void removeWidget(AbstractButtonWidget button) {\n+\t\t\tremove.accept(button);\n+\t\t}\n+\n+\t\t/**\n+\t\t * This event fires just after initializing {@link Screen#minecraft}, {@link Screen#font},\n+\t\t * {@link Screen#width}, and {@link Screen#height}.<br/><br/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8c0ddf977b2846e11ce206b528eb141b0b787a"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUxMTI3MA==", "bodyText": "Make sure you're closing those paragraphs properly as well.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/22#discussion_r364511270", "createdAt": "2020-01-09T00:34:03Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-rendering/src/main/java/net/minecraftforge/client/event/GuiScreenEvent.java", "diffHunk": "@@ -0,0 +1,751 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.client.event;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import net.minecraftforge.eventbus.api.Event;\n+import org.lwjgl.glfw.GLFW;\n+\n+import net.minecraft.client.gui.Element;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.screen.ingame.AbstractInventoryScreen;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+import net.minecraft.client.gui.widget.ButtonWidget;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Event classes for GuiScreen events.\n+ *\n+ * @author bspkrs\n+ */\n+@Environment(EnvType.CLIENT)\n+public class GuiScreenEvent extends Event {\n+\tprivate final Screen gui;\n+\n+\tpublic GuiScreenEvent() {\n+\t\tthis(null);\n+\t}\n+\n+\tpublic GuiScreenEvent(Screen gui) {\n+\t\tthis.gui = gui;\n+\t}\n+\n+\t/**\n+\t * The GuiScreen object generating this event.\n+\t */\n+\tpublic Screen getGui() {\n+\t\treturn gui;\n+\t}\n+\n+\tpublic static class InitGuiEvent extends GuiScreenEvent {\n+\t\tprivate Consumer<AbstractButtonWidget> add;\n+\t\tprivate Consumer<AbstractButtonWidget> remove;\n+\n+\t\tprivate List<AbstractButtonWidget> list;\n+\n+\t\tpublic InitGuiEvent() {\n+\t\t}\n+\n+\t\tpublic InitGuiEvent(Screen gui, List<AbstractButtonWidget> list, Consumer<AbstractButtonWidget> add, Consumer<AbstractButtonWidget> remove) {\n+\t\t\tsuper(gui);\n+\t\t\tthis.list = Collections.unmodifiableList(list);\n+\t\t\tthis.add = add;\n+\t\t\tthis.remove = remove;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Unmodifiable reference to the list of buttons on the {@link #gui}.\n+\t\t */\n+\t\tpublic List<AbstractButtonWidget> getWidgetList() {\n+\t\t\treturn list;\n+\t\t}\n+\n+\t\tpublic void addWidget(AbstractButtonWidget button) {\n+\t\t\tadd.accept(button);\n+\t\t}\n+\n+\t\tpublic void removeWidget(AbstractButtonWidget button) {\n+\t\t\tremove.accept(button);\n+\t\t}\n+\n+\t\t/**\n+\t\t * This event fires just after initializing {@link Screen#minecraft}, {@link Screen#font},\n+\t\t * {@link Screen#width}, and {@link Screen#height}.<br/><br/>\n+\t\t *\n+\t\t * <p>If canceled the following lines are skipped in {@link Screen#init(net.minecraft.client.MinecraftClient, int, int)}:<br/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8c0ddf977b2846e11ce206b528eb141b0b787a"}, "originalPosition": 98}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83b2bdfdf7625a84de1ffb5ba82a359a2eb1c192", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/83b2bdfdf7625a84de1ffb5ba82a359a2eb1c192", "committedDate": "2020-01-17T10:33:00Z", "message": "start of patchwork-rendering\n\n\nlicense bruh\n\n\nRemove unwanted change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1dfd4b0fe92d605d1823bd41fc5927bdbb1dcbf", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/a1dfd4b0fe92d605d1823bd41fc5927bdbb1dcbf", "committedDate": "2020-01-17T10:36:38Z", "message": "add eventbus comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9e740347c5e8d07a4d36a79c5fd40c399729904", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/b9e740347c5e8d07a4d36a79c5fd40c399729904", "committedDate": "2020-01-17T10:38:29Z", "message": "fix docs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ed8c0ddf977b2846e11ce206b528eb141b0b787a", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/ed8c0ddf977b2846e11ce206b528eb141b0b787a", "committedDate": "2020-01-04T11:24:13Z", "message": "license bruh"}, "afterCommit": {"oid": "b9e740347c5e8d07a4d36a79c5fd40c399729904", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/b9e740347c5e8d07a4d36a79c5fd40c399729904", "committedDate": "2020-01-17T10:38:29Z", "message": "fix docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8659f33c90878c4a8beedb65e29e9c90acf5627", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/e8659f33c90878c4a8beedb65e29e9c90acf5627", "committedDate": "2020-01-17T10:48:11Z", "message": "GuiScreenEvent.DrawScreenEvent"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NTY2ODg5", "url": "https://github.com/PatchworkMC/patchwork-api/pull/22#pullrequestreview-344566889", "createdAt": "2020-01-17T13:10:56Z", "commit": {"oid": "e8659f33c90878c4a8beedb65e29e9c90acf5627"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMzoxMDo1NlrOFe4gxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMzoxMDo1NlrOFe4gxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkyNzQ5Mw==", "bodyText": "I assume the numbers 160 and 200 have some meaning?", "url": "https://github.com/PatchworkMC/patchwork-api/pull/22#discussion_r367927493", "createdAt": "2020-01-17T13:10:56Z", "author": {"login": "natanfudge"}, "path": "patchwork-rendering/src/main/java/com/patchworkmc/mixin/rendering/MixinAbstractInventoryScreen.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package com.patchworkmc.mixin.rendering;\n+\n+import net.minecraftforge.client.event.GuiScreenEvent;\n+import net.minecraftforge.common.MinecraftForge;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.client.gui.screen.ingame.AbstractContainerScreen;\n+import net.minecraft.client.gui.screen.ingame.AbstractInventoryScreen;\n+import net.minecraft.container.Container;\n+import net.minecraft.entity.player.PlayerInventory;\n+import net.minecraft.text.Text;\n+\n+@Mixin(AbstractInventoryScreen.class)\n+public abstract class MixinAbstractInventoryScreen extends AbstractContainerScreen {\n+\t@Shadow\n+\tprotected boolean offsetGuiForEffects;\n+\n+\tpublic MixinAbstractInventoryScreen(Container container, PlayerInventory playerInventory, Text name) {\n+\t\tsuper(container, playerInventory, name);\n+\t}\n+\n+\t@Inject(method = \"method_2476\", at = @At(\"RETURN\"))\n+\tprivate void potionShift(CallbackInfo info) {\n+\t\tif (offsetGuiForEffects) {\n+\t\t\tif (MinecraftForge.EVENT_BUS.post(new GuiScreenEvent.PotionShiftEvent())) {\n+\t\t\t\tthis.left = 160 + (this.width - this.containerWidth - 200) / 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8659f33c90878c4a8beedb65e29e9c90acf5627"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3425b2e4ecf9e9e4670ad4e7ceccc9ca3b543ad2", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/3425b2e4ecf9e9e4670ad4e7ceccc9ca3b543ad2", "committedDate": "2020-01-17T14:52:16Z", "message": "mouse clicked and mouse released"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a890816681f34239d27e54de9019f55556701b7", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/9a890816681f34239d27e54de9019f55556701b7", "committedDate": "2020-01-17T15:01:23Z", "message": "mouse drag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "923bee890652beb261551264f53a388cc86c236c", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/923bee890652beb261551264f53a388cc86c236c", "committedDate": "2020-01-17T15:12:07Z", "message": "scrolled and other injection method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be435479dd233934d44ff3eeb3e16f4e9a0f1275", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/be435479dd233934d44ff3eeb3e16f4e9a0f1275", "committedDate": "2020-01-17T15:23:11Z", "message": "key pressed and released"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b479bb98f869965daa5d53c140ce812bfb235c87", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/b479bb98f869965daa5d53c140ce812bfb235c87", "committedDate": "2020-01-17T15:30:53Z", "message": "char typed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28aed112395df60026fd95399d03c7796ce62c6b", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/28aed112395df60026fd95399d03c7796ce62c6b", "committedDate": "2020-01-17T15:33:38Z", "message": "License"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0Njk3NzU2", "url": "https://github.com/PatchworkMC/patchwork-api/pull/22#pullrequestreview-344697756", "createdAt": "2020-01-17T16:32:47Z", "commit": {"oid": "28aed112395df60026fd95399d03c7796ce62c6b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjozMjo0OFrOFe-iNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjo0NzoxOFrOFe--Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNjE2NA==", "bodyText": "should <p> instead of <br/> be used here?", "url": "https://github.com/PatchworkMC/patchwork-api/pull/22#discussion_r368026164", "createdAt": "2020-01-17T16:32:48Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-rendering/src/main/java/net/minecraftforge/client/event/GuiScreenEvent.java", "diffHunk": "@@ -0,0 +1,786 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.client.event;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import net.minecraftforge.eventbus.api.Event;\n+import org.lwjgl.glfw.GLFW;\n+\n+import net.minecraft.client.gui.Element;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.screen.ingame.AbstractInventoryScreen;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+import net.minecraft.client.gui.widget.ButtonWidget;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Event classes for GuiScreen events.\n+ *\n+ * @author bspkrs\n+ */\n+@Environment(EnvType.CLIENT)\n+public class GuiScreenEvent extends Event {\n+\tprivate final Screen gui;\n+\n+\t// For EventBus\n+\tpublic GuiScreenEvent() {\n+\t\tthis(null);\n+\t}\n+\n+\tpublic GuiScreenEvent(Screen gui) {\n+\t\tthis.gui = gui;\n+\t}\n+\n+\t/**\n+\t * The Screen object generating this event.\n+\t */\n+\tpublic Screen getGui() {\n+\t\treturn gui;\n+\t}\n+\n+\tpublic static class InitGuiEvent extends GuiScreenEvent {\n+\t\tprivate Consumer<AbstractButtonWidget> add;\n+\t\tprivate Consumer<AbstractButtonWidget> remove;\n+\n+\t\tprivate List<AbstractButtonWidget> list;\n+\n+\t\t// For EventBus\n+\t\tpublic InitGuiEvent() {\n+\t\t}\n+\n+\t\tpublic InitGuiEvent(Screen gui, List<AbstractButtonWidget> list, Consumer<AbstractButtonWidget> add, Consumer<AbstractButtonWidget> remove) {\n+\t\t\tsuper(gui);\n+\t\t\tthis.list = Collections.unmodifiableList(list);\n+\t\t\tthis.add = add;\n+\t\t\tthis.remove = remove;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Unmodifiable reference to the list of buttons on the {@link #gui}.\n+\t\t */\n+\t\tpublic List<AbstractButtonWidget> getWidgetList() {\n+\t\t\treturn list;\n+\t\t}\n+\n+\t\tpublic void addWidget(AbstractButtonWidget button) {\n+\t\t\tadd.accept(button);\n+\t\t}\n+\n+\t\tpublic void removeWidget(AbstractButtonWidget button) {\n+\t\t\tremove.accept(button);\n+\t\t}\n+\n+\t\t/**\n+\t\t * <p>This event fires just after initializing {@link Screen#minecraft}, {@link Screen#font},\n+\t\t * {@link Screen#width}, and {@link Screen#height}.</p>\n+\t\t *\n+\t\t * <p>If canceled the following lines are skipped in {@link Screen#init(net.minecraft.client.MinecraftClient, int, int)}:</p>\n+\t\t * {@code this.buttons.clear();}<br/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28aed112395df60026fd95399d03c7796ce62c6b"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNzkzNg==", "bodyText": "Could there be some better names for these parameters? (This applies to the whole class)", "url": "https://github.com/PatchworkMC/patchwork-api/pull/22#discussion_r368027936", "createdAt": "2020-01-17T16:36:15Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-rendering/src/main/java/com/patchworkmc/mixin/rendering/MixinKeyboard.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package com.patchworkmc.mixin.rendering;\n+\n+import net.minecraftforge.client.event.GuiScreenEvent;\n+import net.minecraftforge.common.MinecraftForge;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.client.Keyboard;\n+import net.minecraft.client.gui.Element;\n+import net.minecraft.client.gui.ParentElement;\n+import net.minecraft.client.gui.screen.Screen;\n+\n+@Mixin(Keyboard.class)\n+public abstract class MixinKeyboard {\n+\t@Shadow\n+\tprivate boolean repeatEvents;\n+\n+\t@Inject(method = \"method_1454\", at = @At(\"HEAD\"), cancellable = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28aed112395df60026fd95399d03c7796ce62c6b"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyODQzNQ==", "bodyText": "Same as in MixinKeyboard", "url": "https://github.com/PatchworkMC/patchwork-api/pull/22#discussion_r368028435", "createdAt": "2020-01-17T16:37:21Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-rendering/src/main/java/com/patchworkmc/mixin/rendering/MixinMouse.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package com.patchworkmc.mixin.rendering;\n+\n+import net.minecraftforge.client.event.GuiScreenEvent;\n+import net.minecraftforge.common.MinecraftForge;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.Mouse;\n+import net.minecraft.client.gui.Element;\n+\n+@Mixin(Mouse.class)\n+public abstract class MixinMouse {\n+\t@Shadow\n+\t@Final\n+\tprivate MinecraftClient client;\n+\n+\t@Shadow\n+\tprivate int activeButton;\n+\n+\t@Shadow\n+\tprivate boolean middleButtonClicked;\n+\n+\t@Shadow\n+\tprivate double cursorDeltaY;\n+\n+\t@Shadow\n+\tprivate double cursorDeltaX;\n+\n+\t@Inject(method = \"method_1611\", at = @At(\"HEAD\"), locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28aed112395df60026fd95399d03c7796ce62c6b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyODg4Ng==", "bodyText": "Rename ci to info to match names used elsewhere", "url": "https://github.com/PatchworkMC/patchwork-api/pull/22#discussion_r368028886", "createdAt": "2020-01-17T16:38:13Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-rendering/src/main/java/com/patchworkmc/mixin/rendering/MixinMouse.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package com.patchworkmc.mixin.rendering;\n+\n+import net.minecraftforge.client.event.GuiScreenEvent;\n+import net.minecraftforge.common.MinecraftForge;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.Mouse;\n+import net.minecraft.client.gui.Element;\n+\n+@Mixin(Mouse.class)\n+public abstract class MixinMouse {\n+\t@Shadow\n+\t@Final\n+\tprivate MinecraftClient client;\n+\n+\t@Shadow\n+\tprivate int activeButton;\n+\n+\t@Shadow\n+\tprivate boolean middleButtonClicked;\n+\n+\t@Shadow\n+\tprivate double cursorDeltaY;\n+\n+\t@Shadow\n+\tprivate double cursorDeltaX;\n+\n+\t@Inject(method = \"method_1611\", at = @At(\"HEAD\"), locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true)\n+\tpublic void preMouseClicked(boolean[] bls, double d, double e, int button, CallbackInfo info) {\n+\t\tif (MinecraftForge.EVENT_BUS.post(new GuiScreenEvent.MouseClickedEvent.Pre(client.currentScreen, d, e, button))) {\n+\t\t\tbls[0] = true;\n+\t\t\tinfo.cancel();\n+\t\t}\n+\t}\n+\n+\t@Inject(method = \"method_1611\", at = @At(\"RETURN\"), locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true)\n+\tprivate void postMouseClicked(boolean[] bls, double d, double e, int button, CallbackInfo info) {\n+\t\tif (bls[0]) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (MinecraftForge.EVENT_BUS.post(new GuiScreenEvent.MouseClickedEvent.Post(client.currentScreen, d, e, button))) {\n+\t\t\tbls[0] = true;\n+\t\t\tinfo.cancel();\n+\t\t}\n+\t}\n+\n+\t@Inject(method = \"method_1605\", at = @At(\"HEAD\"), locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true)\n+\tprivate void preMouseReleased(boolean[] bls, double d, double e, int button, CallbackInfo info) {\n+\t\tif (MinecraftForge.EVENT_BUS.post(new GuiScreenEvent.MouseReleasedEvent.Pre(client.currentScreen, d, e, button))) {\n+\t\t\tbls[0] = true;\n+\t\t\tinfo.cancel();\n+\t\t}\n+\t}\n+\n+\t@Inject(method = \"method_1605\", at = @At(\"RETURN\"), locals = LocalCapture.CAPTURE_FAILHARD)\n+\tprivate void postMouseReleased(boolean[] bls, double d, double e, int button, CallbackInfo info) {\n+\t\tif (bls[0]) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (MinecraftForge.EVENT_BUS.post(new GuiScreenEvent.MouseReleasedEvent.Post(client.currentScreen, d, e, button))) {\n+\t\t\tbls[0] = true;\n+\t\t\tinfo.cancel();\n+\t\t}\n+\t}\n+\n+\t@Inject(method = \"method_1602\", at = @At(\"HEAD\"), cancellable = true)\n+\tprivate void preMouseDragged(Element element, double d, double e, double f, double g, CallbackInfo info) {\n+\t\tif (MinecraftForge.EVENT_BUS.post(new GuiScreenEvent.MouseDragEvent.Pre(client.currentScreen, d, e, activeButton, f, g))) {\n+\t\t\tinfo.cancel();\n+\t\t}\n+\t}\n+\n+\t@Inject(method = \"method_1602\", at = @At(\"RETURN\"))\n+\tprivate void postMouseDragged(Element element, double d, double e, double f, double g, CallbackInfo info) {\n+\t\tMinecraftForge.EVENT_BUS.post(new GuiScreenEvent.MouseDragEvent.Post(client.currentScreen, d, e, activeButton, f, g));\n+\t}\n+\n+\t@Inject(method = \"onMouseScroll\", at = @At(value = \"INVOKE\",\n+\t\t\t\t\ttarget = \"Lnet/minecraft/client/gui/screen/Screen;mouseScrolled(DDD)Z\",\n+\t\t\t\t\tordinal = 0), locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true)\n+\tprivate void preMouseScrolled(long window, double d, double e, CallbackInfo ci, double f, double g, double h) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28aed112395df60026fd95399d03c7796ce62c6b"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyODk1MA==", "bodyText": "Same thing here", "url": "https://github.com/PatchworkMC/patchwork-api/pull/22#discussion_r368028950", "createdAt": "2020-01-17T16:38:21Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-rendering/src/main/java/com/patchworkmc/mixin/rendering/MixinMouse.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package com.patchworkmc.mixin.rendering;\n+\n+import net.minecraftforge.client.event.GuiScreenEvent;\n+import net.minecraftforge.common.MinecraftForge;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.Mouse;\n+import net.minecraft.client.gui.Element;\n+\n+@Mixin(Mouse.class)\n+public abstract class MixinMouse {\n+\t@Shadow\n+\t@Final\n+\tprivate MinecraftClient client;\n+\n+\t@Shadow\n+\tprivate int activeButton;\n+\n+\t@Shadow\n+\tprivate boolean middleButtonClicked;\n+\n+\t@Shadow\n+\tprivate double cursorDeltaY;\n+\n+\t@Shadow\n+\tprivate double cursorDeltaX;\n+\n+\t@Inject(method = \"method_1611\", at = @At(\"HEAD\"), locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true)\n+\tpublic void preMouseClicked(boolean[] bls, double d, double e, int button, CallbackInfo info) {\n+\t\tif (MinecraftForge.EVENT_BUS.post(new GuiScreenEvent.MouseClickedEvent.Pre(client.currentScreen, d, e, button))) {\n+\t\t\tbls[0] = true;\n+\t\t\tinfo.cancel();\n+\t\t}\n+\t}\n+\n+\t@Inject(method = \"method_1611\", at = @At(\"RETURN\"), locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true)\n+\tprivate void postMouseClicked(boolean[] bls, double d, double e, int button, CallbackInfo info) {\n+\t\tif (bls[0]) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (MinecraftForge.EVENT_BUS.post(new GuiScreenEvent.MouseClickedEvent.Post(client.currentScreen, d, e, button))) {\n+\t\t\tbls[0] = true;\n+\t\t\tinfo.cancel();\n+\t\t}\n+\t}\n+\n+\t@Inject(method = \"method_1605\", at = @At(\"HEAD\"), locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true)\n+\tprivate void preMouseReleased(boolean[] bls, double d, double e, int button, CallbackInfo info) {\n+\t\tif (MinecraftForge.EVENT_BUS.post(new GuiScreenEvent.MouseReleasedEvent.Pre(client.currentScreen, d, e, button))) {\n+\t\t\tbls[0] = true;\n+\t\t\tinfo.cancel();\n+\t\t}\n+\t}\n+\n+\t@Inject(method = \"method_1605\", at = @At(\"RETURN\"), locals = LocalCapture.CAPTURE_FAILHARD)\n+\tprivate void postMouseReleased(boolean[] bls, double d, double e, int button, CallbackInfo info) {\n+\t\tif (bls[0]) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (MinecraftForge.EVENT_BUS.post(new GuiScreenEvent.MouseReleasedEvent.Post(client.currentScreen, d, e, button))) {\n+\t\t\tbls[0] = true;\n+\t\t\tinfo.cancel();\n+\t\t}\n+\t}\n+\n+\t@Inject(method = \"method_1602\", at = @At(\"HEAD\"), cancellable = true)\n+\tprivate void preMouseDragged(Element element, double d, double e, double f, double g, CallbackInfo info) {\n+\t\tif (MinecraftForge.EVENT_BUS.post(new GuiScreenEvent.MouseDragEvent.Pre(client.currentScreen, d, e, activeButton, f, g))) {\n+\t\t\tinfo.cancel();\n+\t\t}\n+\t}\n+\n+\t@Inject(method = \"method_1602\", at = @At(\"RETURN\"))\n+\tprivate void postMouseDragged(Element element, double d, double e, double f, double g, CallbackInfo info) {\n+\t\tMinecraftForge.EVENT_BUS.post(new GuiScreenEvent.MouseDragEvent.Post(client.currentScreen, d, e, activeButton, f, g));\n+\t}\n+\n+\t@Inject(method = \"onMouseScroll\", at = @At(value = \"INVOKE\",\n+\t\t\t\t\ttarget = \"Lnet/minecraft/client/gui/screen/Screen;mouseScrolled(DDD)Z\",\n+\t\t\t\t\tordinal = 0), locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true)\n+\tprivate void preMouseScrolled(long window, double d, double e, CallbackInfo ci, double f, double g, double h) {\n+\t\tif (MinecraftForge.EVENT_BUS.post(new GuiScreenEvent.MouseScrollEvent.Pre(client.currentScreen, g, h, f))) {\n+\t\t\tci.cancel();\n+\t\t}\n+\t}\n+\n+\t@Inject(method = \"onMouseScroll\", at = @At(value = \"INVOKE\",\n+\t\t\t\t\ttarget = \"Lnet/minecraft/client/gui/screen/Screen;mouseScrolled(DDD)Z\",\n+\t\t\t\t\tordinal = 0, shift = At.Shift.BY, by = 2), locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true)\n+\tprivate void postMouseScrolled(long window, double d, double e, CallbackInfo ci, double f, double g, double h) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28aed112395df60026fd95399d03c7796ce62c6b"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyOTM0OQ==", "bodyText": "Rename both CallbackInfo parameters in this class to info to match names used elsewhere", "url": "https://github.com/PatchworkMC/patchwork-api/pull/22#discussion_r368029349", "createdAt": "2020-01-17T16:39:16Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-rendering/src/main/java/com/patchworkmc/mixin/rendering/MixinGameRenderer.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package com.patchworkmc.mixin.rendering;\n+\n+import net.minecraftforge.client.event.GuiScreenEvent;\n+import net.minecraftforge.common.MinecraftForge;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.render.GameRenderer;\n+\n+@Mixin(GameRenderer.class)\n+public abstract class MixinGameRenderer {\n+\t@Shadow\n+\t@Final\n+\tprivate MinecraftClient client;\n+\n+\t@Inject(method = \"render\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/Screen;render(IIF)V\"), locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true)\n+\tprivate void beforeRenderScreen(float tickDelta, long startTime, boolean fullRender, CallbackInfo ci, int i, int j) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28aed112395df60026fd95399d03c7796ce62c6b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzMDI4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t * A COPY of the {@link #buttonList} field from the GuiScreen referenced by {@link #gui}.\n          \n          \n            \n            \t\t * A COPY of the {@link #buttonList} field from the {@link Screen} referenced by {@link #gui}.```", "url": "https://github.com/PatchworkMC/patchwork-api/pull/22#discussion_r368030284", "createdAt": "2020-01-17T16:41:11Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-rendering/src/main/java/net/minecraftforge/client/event/GuiScreenEvent.java", "diffHunk": "@@ -0,0 +1,786 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.client.event;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import net.minecraftforge.eventbus.api.Event;\n+import org.lwjgl.glfw.GLFW;\n+\n+import net.minecraft.client.gui.Element;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.screen.ingame.AbstractInventoryScreen;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+import net.minecraft.client.gui.widget.ButtonWidget;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Event classes for GuiScreen events.\n+ *\n+ * @author bspkrs\n+ */\n+@Environment(EnvType.CLIENT)\n+public class GuiScreenEvent extends Event {\n+\tprivate final Screen gui;\n+\n+\t// For EventBus\n+\tpublic GuiScreenEvent() {\n+\t\tthis(null);\n+\t}\n+\n+\tpublic GuiScreenEvent(Screen gui) {\n+\t\tthis.gui = gui;\n+\t}\n+\n+\t/**\n+\t * The Screen object generating this event.\n+\t */\n+\tpublic Screen getGui() {\n+\t\treturn gui;\n+\t}\n+\n+\tpublic static class InitGuiEvent extends GuiScreenEvent {\n+\t\tprivate Consumer<AbstractButtonWidget> add;\n+\t\tprivate Consumer<AbstractButtonWidget> remove;\n+\n+\t\tprivate List<AbstractButtonWidget> list;\n+\n+\t\t// For EventBus\n+\t\tpublic InitGuiEvent() {\n+\t\t}\n+\n+\t\tpublic InitGuiEvent(Screen gui, List<AbstractButtonWidget> list, Consumer<AbstractButtonWidget> add, Consumer<AbstractButtonWidget> remove) {\n+\t\t\tsuper(gui);\n+\t\t\tthis.list = Collections.unmodifiableList(list);\n+\t\t\tthis.add = add;\n+\t\t\tthis.remove = remove;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Unmodifiable reference to the list of buttons on the {@link #gui}.\n+\t\t */\n+\t\tpublic List<AbstractButtonWidget> getWidgetList() {\n+\t\t\treturn list;\n+\t\t}\n+\n+\t\tpublic void addWidget(AbstractButtonWidget button) {\n+\t\t\tadd.accept(button);\n+\t\t}\n+\n+\t\tpublic void removeWidget(AbstractButtonWidget button) {\n+\t\t\tremove.accept(button);\n+\t\t}\n+\n+\t\t/**\n+\t\t * <p>This event fires just after initializing {@link Screen#minecraft}, {@link Screen#font},\n+\t\t * {@link Screen#width}, and {@link Screen#height}.</p>\n+\t\t *\n+\t\t * <p>If canceled the following lines are skipped in {@link Screen#init(net.minecraft.client.MinecraftClient, int, int)}:</p>\n+\t\t * {@code this.buttons.clear();}<br/>\n+\t\t * {@code this.children.clear();}<br/>\n+\t\t * {@code this.init();}<br/>\n+\t\t */\n+\t\tpublic static class Pre extends InitGuiEvent {\n+\t\t\t// For EventBus\n+\t\t\tpublic Pre() {\n+\t\t\t}\n+\n+\t\t\tpublic Pre(Screen gui, List<AbstractButtonWidget> list, Consumer<AbstractButtonWidget> add, Consumer<AbstractButtonWidget> remove) {\n+\t\t\t\tsuper(gui, list, add, remove);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean isCancelable() {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\n+\t\t/**\n+\t\t * This event fires right after {@link Screen#init()}.\n+\t\t * This is a good place to alter a Screen's component layout if desired.\n+\t\t */\n+\t\tpublic static class Post extends InitGuiEvent {\n+\t\t\t// For EventBus\n+\t\t\tpublic Post() {\n+\t\t\t}\n+\n+\t\t\tpublic Post(Screen gui, List<AbstractButtonWidget> list, Consumer<AbstractButtonWidget> add, Consumer<AbstractButtonWidget> remove) {\n+\t\t\t\tsuper(gui, list, add, remove);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic static class DrawScreenEvent extends GuiScreenEvent {\n+\t\tprivate final int mouseX;\n+\t\tprivate final int mouseY;\n+\t\tprivate final float renderPartialTicks;\n+\n+\t\t// For EventBus\n+\t\tpublic DrawScreenEvent() {\n+\t\t\tthis(null, -1, -1, 0);\n+\t\t}\n+\n+\t\tpublic DrawScreenEvent(Screen gui, int mouseX, int mouseY, float renderPartialTicks) {\n+\t\t\tsuper(gui);\n+\t\t\tthis.mouseX = mouseX;\n+\t\t\tthis.mouseY = mouseY;\n+\t\t\tthis.renderPartialTicks = renderPartialTicks;\n+\t\t}\n+\n+\t\t/**\n+\t\t * The x coordinate of the mouse pointer on the screen.\n+\t\t */\n+\t\tpublic int getMouseX() {\n+\t\t\treturn mouseX;\n+\t\t}\n+\n+\t\t/**\n+\t\t * The y coordinate of the mouse pointer on the screen.\n+\t\t */\n+\t\tpublic int getMouseY() {\n+\t\t\treturn mouseY;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Partial render ticks elapsed.\n+\t\t */\n+\t\tpublic float getRenderPartialTicks() {\n+\t\t\treturn renderPartialTicks;\n+\t\t}\n+\n+\t\t/**\n+\t\t * This event fires just before {@link Screen#render(int, int, float)} is called.\n+\t\t * Cancel this event to skip {@link Screen#render(int, int, float)}.\n+\t\t */\n+\t\tpublic static class Pre extends DrawScreenEvent {\n+\t\t\t// For EventBus\n+\t\t\tpublic Pre() {\n+\t\t\t}\n+\n+\t\t\tpublic Pre(Screen gui, int mouseX, int mouseY, float renderPartialTicks) {\n+\t\t\t\tsuper(gui, mouseX, mouseY, renderPartialTicks);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean isCancelable() {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\n+\t\t/**\n+\t\t * This event fires just after {@link Screen#render(int, int, float)} is called.\n+\t\t */\n+\t\tpublic static class Post extends DrawScreenEvent {\n+\t\t\t// For EventBus\n+\t\t\tpublic Post() {\n+\t\t\t}\n+\n+\t\t\tpublic Post(Screen gui, int mouseX, int mouseY, float renderPartialTicks) {\n+\t\t\t\tsuper(gui, mouseX, mouseY, renderPartialTicks);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * This event fires at the end of {@link Screen#renderBackground(int)} and before the rest of the Gui draws.\n+\t * This allows drawing next to Guis, above the background but below any tooltips.\n+\t */\n+\tpublic static class BackgroundDrawnEvent extends GuiScreenEvent {\n+\t\t// For EventBus\n+\t\tpublic BackgroundDrawnEvent() {\n+\t\t}\n+\n+\t\tpublic BackgroundDrawnEvent(Screen gui) {\n+\t\t\tsuper(gui);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * This event fires in {@link AbstractInventoryScreen#drawPotionEffects()}\n+\t * when potion effects are active and the gui wants to move over.\n+\t * Cancel this event to prevent the Gui from being moved.\n+\t */\n+\tpublic static class PotionShiftEvent extends GuiScreenEvent {\n+\t\t// For EventBus\n+\t\tpublic PotionShiftEvent() {\n+\t\t}\n+\n+\t\tpublic PotionShiftEvent(Screen gui) {\n+\t\t\tsuper(gui);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean isCancelable() {\n+\t\t\treturn true;\n+\t\t}\n+\t}\n+\n+\tpublic static class ActionPerformedEvent extends GuiScreenEvent {\n+\t\tprivate ButtonWidget button;\n+\t\tprivate List<ButtonWidget> buttonList;\n+\n+\t\t// For EventBus\n+\t\tpublic ActionPerformedEvent() {\n+\t\t}\n+\n+\t\tpublic ActionPerformedEvent(Screen gui, ButtonWidget button, List<ButtonWidget> buttonList) {\n+\t\t\tsuper(gui);\n+\t\t\tthis.setButton(button);\n+\t\t\tthis.setButtonList(new ArrayList<>(buttonList));\n+\t\t}\n+\n+\t\t/**\n+\t\t * The button that was clicked.\n+\t\t */\n+\t\tpublic ButtonWidget getButton() {\n+\t\t\treturn button;\n+\t\t}\n+\n+\t\tpublic void setButton(ButtonWidget button) {\n+\t\t\tthis.button = button;\n+\t\t}\n+\n+\t\t/**\n+\t\t * A COPY of the {@link #buttonList} field from the GuiScreen referenced by {@link #gui}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28aed112395df60026fd95399d03c7796ce62c6b"}, "originalPosition": 266}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzMjU1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t * This event fires once it has been determined that a GuiButton object has been clicked.\n          \n          \n            \n            \t\t * This event fires once it has been determined that a {@link ButtonWidget} object has been clicked.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/22#discussion_r368032551", "createdAt": "2020-01-17T16:45:50Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-rendering/src/main/java/net/minecraftforge/client/event/GuiScreenEvent.java", "diffHunk": "@@ -0,0 +1,786 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.client.event;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import net.minecraftforge.eventbus.api.Event;\n+import org.lwjgl.glfw.GLFW;\n+\n+import net.minecraft.client.gui.Element;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.screen.ingame.AbstractInventoryScreen;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+import net.minecraft.client.gui.widget.ButtonWidget;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Event classes for GuiScreen events.\n+ *\n+ * @author bspkrs\n+ */\n+@Environment(EnvType.CLIENT)\n+public class GuiScreenEvent extends Event {\n+\tprivate final Screen gui;\n+\n+\t// For EventBus\n+\tpublic GuiScreenEvent() {\n+\t\tthis(null);\n+\t}\n+\n+\tpublic GuiScreenEvent(Screen gui) {\n+\t\tthis.gui = gui;\n+\t}\n+\n+\t/**\n+\t * The Screen object generating this event.\n+\t */\n+\tpublic Screen getGui() {\n+\t\treturn gui;\n+\t}\n+\n+\tpublic static class InitGuiEvent extends GuiScreenEvent {\n+\t\tprivate Consumer<AbstractButtonWidget> add;\n+\t\tprivate Consumer<AbstractButtonWidget> remove;\n+\n+\t\tprivate List<AbstractButtonWidget> list;\n+\n+\t\t// For EventBus\n+\t\tpublic InitGuiEvent() {\n+\t\t}\n+\n+\t\tpublic InitGuiEvent(Screen gui, List<AbstractButtonWidget> list, Consumer<AbstractButtonWidget> add, Consumer<AbstractButtonWidget> remove) {\n+\t\t\tsuper(gui);\n+\t\t\tthis.list = Collections.unmodifiableList(list);\n+\t\t\tthis.add = add;\n+\t\t\tthis.remove = remove;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Unmodifiable reference to the list of buttons on the {@link #gui}.\n+\t\t */\n+\t\tpublic List<AbstractButtonWidget> getWidgetList() {\n+\t\t\treturn list;\n+\t\t}\n+\n+\t\tpublic void addWidget(AbstractButtonWidget button) {\n+\t\t\tadd.accept(button);\n+\t\t}\n+\n+\t\tpublic void removeWidget(AbstractButtonWidget button) {\n+\t\t\tremove.accept(button);\n+\t\t}\n+\n+\t\t/**\n+\t\t * <p>This event fires just after initializing {@link Screen#minecraft}, {@link Screen#font},\n+\t\t * {@link Screen#width}, and {@link Screen#height}.</p>\n+\t\t *\n+\t\t * <p>If canceled the following lines are skipped in {@link Screen#init(net.minecraft.client.MinecraftClient, int, int)}:</p>\n+\t\t * {@code this.buttons.clear();}<br/>\n+\t\t * {@code this.children.clear();}<br/>\n+\t\t * {@code this.init();}<br/>\n+\t\t */\n+\t\tpublic static class Pre extends InitGuiEvent {\n+\t\t\t// For EventBus\n+\t\t\tpublic Pre() {\n+\t\t\t}\n+\n+\t\t\tpublic Pre(Screen gui, List<AbstractButtonWidget> list, Consumer<AbstractButtonWidget> add, Consumer<AbstractButtonWidget> remove) {\n+\t\t\t\tsuper(gui, list, add, remove);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean isCancelable() {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\n+\t\t/**\n+\t\t * This event fires right after {@link Screen#init()}.\n+\t\t * This is a good place to alter a Screen's component layout if desired.\n+\t\t */\n+\t\tpublic static class Post extends InitGuiEvent {\n+\t\t\t// For EventBus\n+\t\t\tpublic Post() {\n+\t\t\t}\n+\n+\t\t\tpublic Post(Screen gui, List<AbstractButtonWidget> list, Consumer<AbstractButtonWidget> add, Consumer<AbstractButtonWidget> remove) {\n+\t\t\t\tsuper(gui, list, add, remove);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic static class DrawScreenEvent extends GuiScreenEvent {\n+\t\tprivate final int mouseX;\n+\t\tprivate final int mouseY;\n+\t\tprivate final float renderPartialTicks;\n+\n+\t\t// For EventBus\n+\t\tpublic DrawScreenEvent() {\n+\t\t\tthis(null, -1, -1, 0);\n+\t\t}\n+\n+\t\tpublic DrawScreenEvent(Screen gui, int mouseX, int mouseY, float renderPartialTicks) {\n+\t\t\tsuper(gui);\n+\t\t\tthis.mouseX = mouseX;\n+\t\t\tthis.mouseY = mouseY;\n+\t\t\tthis.renderPartialTicks = renderPartialTicks;\n+\t\t}\n+\n+\t\t/**\n+\t\t * The x coordinate of the mouse pointer on the screen.\n+\t\t */\n+\t\tpublic int getMouseX() {\n+\t\t\treturn mouseX;\n+\t\t}\n+\n+\t\t/**\n+\t\t * The y coordinate of the mouse pointer on the screen.\n+\t\t */\n+\t\tpublic int getMouseY() {\n+\t\t\treturn mouseY;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Partial render ticks elapsed.\n+\t\t */\n+\t\tpublic float getRenderPartialTicks() {\n+\t\t\treturn renderPartialTicks;\n+\t\t}\n+\n+\t\t/**\n+\t\t * This event fires just before {@link Screen#render(int, int, float)} is called.\n+\t\t * Cancel this event to skip {@link Screen#render(int, int, float)}.\n+\t\t */\n+\t\tpublic static class Pre extends DrawScreenEvent {\n+\t\t\t// For EventBus\n+\t\t\tpublic Pre() {\n+\t\t\t}\n+\n+\t\t\tpublic Pre(Screen gui, int mouseX, int mouseY, float renderPartialTicks) {\n+\t\t\t\tsuper(gui, mouseX, mouseY, renderPartialTicks);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean isCancelable() {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\n+\t\t/**\n+\t\t * This event fires just after {@link Screen#render(int, int, float)} is called.\n+\t\t */\n+\t\tpublic static class Post extends DrawScreenEvent {\n+\t\t\t// For EventBus\n+\t\t\tpublic Post() {\n+\t\t\t}\n+\n+\t\t\tpublic Post(Screen gui, int mouseX, int mouseY, float renderPartialTicks) {\n+\t\t\t\tsuper(gui, mouseX, mouseY, renderPartialTicks);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * This event fires at the end of {@link Screen#renderBackground(int)} and before the rest of the Gui draws.\n+\t * This allows drawing next to Guis, above the background but below any tooltips.\n+\t */\n+\tpublic static class BackgroundDrawnEvent extends GuiScreenEvent {\n+\t\t// For EventBus\n+\t\tpublic BackgroundDrawnEvent() {\n+\t\t}\n+\n+\t\tpublic BackgroundDrawnEvent(Screen gui) {\n+\t\t\tsuper(gui);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * This event fires in {@link AbstractInventoryScreen#drawPotionEffects()}\n+\t * when potion effects are active and the gui wants to move over.\n+\t * Cancel this event to prevent the Gui from being moved.\n+\t */\n+\tpublic static class PotionShiftEvent extends GuiScreenEvent {\n+\t\t// For EventBus\n+\t\tpublic PotionShiftEvent() {\n+\t\t}\n+\n+\t\tpublic PotionShiftEvent(Screen gui) {\n+\t\t\tsuper(gui);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean isCancelable() {\n+\t\t\treturn true;\n+\t\t}\n+\t}\n+\n+\tpublic static class ActionPerformedEvent extends GuiScreenEvent {\n+\t\tprivate ButtonWidget button;\n+\t\tprivate List<ButtonWidget> buttonList;\n+\n+\t\t// For EventBus\n+\t\tpublic ActionPerformedEvent() {\n+\t\t}\n+\n+\t\tpublic ActionPerformedEvent(Screen gui, ButtonWidget button, List<ButtonWidget> buttonList) {\n+\t\t\tsuper(gui);\n+\t\t\tthis.setButton(button);\n+\t\t\tthis.setButtonList(new ArrayList<>(buttonList));\n+\t\t}\n+\n+\t\t/**\n+\t\t * The button that was clicked.\n+\t\t */\n+\t\tpublic ButtonWidget getButton() {\n+\t\t\treturn button;\n+\t\t}\n+\n+\t\tpublic void setButton(ButtonWidget button) {\n+\t\t\tthis.button = button;\n+\t\t}\n+\n+\t\t/**\n+\t\t * A COPY of the {@link #buttonList} field from the GuiScreen referenced by {@link #gui}.\n+\t\t */\n+\t\tpublic List<ButtonWidget> getButtonList() {\n+\t\t\treturn buttonList;\n+\t\t}\n+\n+\t\tpublic void setButtonList(List<ButtonWidget> buttonList) {\n+\t\t\tthis.buttonList = buttonList;\n+\t\t}\n+\n+\t\t/**\n+\t\t * This event fires once it has been determined that a GuiButton object has been clicked.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28aed112395df60026fd95399d03c7796ce62c6b"}, "originalPosition": 277}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzMzMxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t * This event fires when keyboard character input is detected for a Screen, before it is handled.\n          \n          \n            \n            \t\t * This event fires when keyboard character input is detected for a {@link Screen}, before it is handled.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/22#discussion_r368033311", "createdAt": "2020-01-17T16:47:18Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-rendering/src/main/java/net/minecraftforge/client/event/GuiScreenEvent.java", "diffHunk": "@@ -0,0 +1,786 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.client.event;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import net.minecraftforge.eventbus.api.Event;\n+import org.lwjgl.glfw.GLFW;\n+\n+import net.minecraft.client.gui.Element;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.screen.ingame.AbstractInventoryScreen;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+import net.minecraft.client.gui.widget.ButtonWidget;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Event classes for GuiScreen events.\n+ *\n+ * @author bspkrs\n+ */\n+@Environment(EnvType.CLIENT)\n+public class GuiScreenEvent extends Event {\n+\tprivate final Screen gui;\n+\n+\t// For EventBus\n+\tpublic GuiScreenEvent() {\n+\t\tthis(null);\n+\t}\n+\n+\tpublic GuiScreenEvent(Screen gui) {\n+\t\tthis.gui = gui;\n+\t}\n+\n+\t/**\n+\t * The Screen object generating this event.\n+\t */\n+\tpublic Screen getGui() {\n+\t\treturn gui;\n+\t}\n+\n+\tpublic static class InitGuiEvent extends GuiScreenEvent {\n+\t\tprivate Consumer<AbstractButtonWidget> add;\n+\t\tprivate Consumer<AbstractButtonWidget> remove;\n+\n+\t\tprivate List<AbstractButtonWidget> list;\n+\n+\t\t// For EventBus\n+\t\tpublic InitGuiEvent() {\n+\t\t}\n+\n+\t\tpublic InitGuiEvent(Screen gui, List<AbstractButtonWidget> list, Consumer<AbstractButtonWidget> add, Consumer<AbstractButtonWidget> remove) {\n+\t\t\tsuper(gui);\n+\t\t\tthis.list = Collections.unmodifiableList(list);\n+\t\t\tthis.add = add;\n+\t\t\tthis.remove = remove;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Unmodifiable reference to the list of buttons on the {@link #gui}.\n+\t\t */\n+\t\tpublic List<AbstractButtonWidget> getWidgetList() {\n+\t\t\treturn list;\n+\t\t}\n+\n+\t\tpublic void addWidget(AbstractButtonWidget button) {\n+\t\t\tadd.accept(button);\n+\t\t}\n+\n+\t\tpublic void removeWidget(AbstractButtonWidget button) {\n+\t\t\tremove.accept(button);\n+\t\t}\n+\n+\t\t/**\n+\t\t * <p>This event fires just after initializing {@link Screen#minecraft}, {@link Screen#font},\n+\t\t * {@link Screen#width}, and {@link Screen#height}.</p>\n+\t\t *\n+\t\t * <p>If canceled the following lines are skipped in {@link Screen#init(net.minecraft.client.MinecraftClient, int, int)}:</p>\n+\t\t * {@code this.buttons.clear();}<br/>\n+\t\t * {@code this.children.clear();}<br/>\n+\t\t * {@code this.init();}<br/>\n+\t\t */\n+\t\tpublic static class Pre extends InitGuiEvent {\n+\t\t\t// For EventBus\n+\t\t\tpublic Pre() {\n+\t\t\t}\n+\n+\t\t\tpublic Pre(Screen gui, List<AbstractButtonWidget> list, Consumer<AbstractButtonWidget> add, Consumer<AbstractButtonWidget> remove) {\n+\t\t\t\tsuper(gui, list, add, remove);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean isCancelable() {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\n+\t\t/**\n+\t\t * This event fires right after {@link Screen#init()}.\n+\t\t * This is a good place to alter a Screen's component layout if desired.\n+\t\t */\n+\t\tpublic static class Post extends InitGuiEvent {\n+\t\t\t// For EventBus\n+\t\t\tpublic Post() {\n+\t\t\t}\n+\n+\t\t\tpublic Post(Screen gui, List<AbstractButtonWidget> list, Consumer<AbstractButtonWidget> add, Consumer<AbstractButtonWidget> remove) {\n+\t\t\t\tsuper(gui, list, add, remove);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic static class DrawScreenEvent extends GuiScreenEvent {\n+\t\tprivate final int mouseX;\n+\t\tprivate final int mouseY;\n+\t\tprivate final float renderPartialTicks;\n+\n+\t\t// For EventBus\n+\t\tpublic DrawScreenEvent() {\n+\t\t\tthis(null, -1, -1, 0);\n+\t\t}\n+\n+\t\tpublic DrawScreenEvent(Screen gui, int mouseX, int mouseY, float renderPartialTicks) {\n+\t\t\tsuper(gui);\n+\t\t\tthis.mouseX = mouseX;\n+\t\t\tthis.mouseY = mouseY;\n+\t\t\tthis.renderPartialTicks = renderPartialTicks;\n+\t\t}\n+\n+\t\t/**\n+\t\t * The x coordinate of the mouse pointer on the screen.\n+\t\t */\n+\t\tpublic int getMouseX() {\n+\t\t\treturn mouseX;\n+\t\t}\n+\n+\t\t/**\n+\t\t * The y coordinate of the mouse pointer on the screen.\n+\t\t */\n+\t\tpublic int getMouseY() {\n+\t\t\treturn mouseY;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Partial render ticks elapsed.\n+\t\t */\n+\t\tpublic float getRenderPartialTicks() {\n+\t\t\treturn renderPartialTicks;\n+\t\t}\n+\n+\t\t/**\n+\t\t * This event fires just before {@link Screen#render(int, int, float)} is called.\n+\t\t * Cancel this event to skip {@link Screen#render(int, int, float)}.\n+\t\t */\n+\t\tpublic static class Pre extends DrawScreenEvent {\n+\t\t\t// For EventBus\n+\t\t\tpublic Pre() {\n+\t\t\t}\n+\n+\t\t\tpublic Pre(Screen gui, int mouseX, int mouseY, float renderPartialTicks) {\n+\t\t\t\tsuper(gui, mouseX, mouseY, renderPartialTicks);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean isCancelable() {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\n+\t\t/**\n+\t\t * This event fires just after {@link Screen#render(int, int, float)} is called.\n+\t\t */\n+\t\tpublic static class Post extends DrawScreenEvent {\n+\t\t\t// For EventBus\n+\t\t\tpublic Post() {\n+\t\t\t}\n+\n+\t\t\tpublic Post(Screen gui, int mouseX, int mouseY, float renderPartialTicks) {\n+\t\t\t\tsuper(gui, mouseX, mouseY, renderPartialTicks);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * This event fires at the end of {@link Screen#renderBackground(int)} and before the rest of the Gui draws.\n+\t * This allows drawing next to Guis, above the background but below any tooltips.\n+\t */\n+\tpublic static class BackgroundDrawnEvent extends GuiScreenEvent {\n+\t\t// For EventBus\n+\t\tpublic BackgroundDrawnEvent() {\n+\t\t}\n+\n+\t\tpublic BackgroundDrawnEvent(Screen gui) {\n+\t\t\tsuper(gui);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * This event fires in {@link AbstractInventoryScreen#drawPotionEffects()}\n+\t * when potion effects are active and the gui wants to move over.\n+\t * Cancel this event to prevent the Gui from being moved.\n+\t */\n+\tpublic static class PotionShiftEvent extends GuiScreenEvent {\n+\t\t// For EventBus\n+\t\tpublic PotionShiftEvent() {\n+\t\t}\n+\n+\t\tpublic PotionShiftEvent(Screen gui) {\n+\t\t\tsuper(gui);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean isCancelable() {\n+\t\t\treturn true;\n+\t\t}\n+\t}\n+\n+\tpublic static class ActionPerformedEvent extends GuiScreenEvent {\n+\t\tprivate ButtonWidget button;\n+\t\tprivate List<ButtonWidget> buttonList;\n+\n+\t\t// For EventBus\n+\t\tpublic ActionPerformedEvent() {\n+\t\t}\n+\n+\t\tpublic ActionPerformedEvent(Screen gui, ButtonWidget button, List<ButtonWidget> buttonList) {\n+\t\t\tsuper(gui);\n+\t\t\tthis.setButton(button);\n+\t\t\tthis.setButtonList(new ArrayList<>(buttonList));\n+\t\t}\n+\n+\t\t/**\n+\t\t * The button that was clicked.\n+\t\t */\n+\t\tpublic ButtonWidget getButton() {\n+\t\t\treturn button;\n+\t\t}\n+\n+\t\tpublic void setButton(ButtonWidget button) {\n+\t\t\tthis.button = button;\n+\t\t}\n+\n+\t\t/**\n+\t\t * A COPY of the {@link #buttonList} field from the GuiScreen referenced by {@link #gui}.\n+\t\t */\n+\t\tpublic List<ButtonWidget> getButtonList() {\n+\t\t\treturn buttonList;\n+\t\t}\n+\n+\t\tpublic void setButtonList(List<ButtonWidget> buttonList) {\n+\t\t\tthis.buttonList = buttonList;\n+\t\t}\n+\n+\t\t/**\n+\t\t * This event fires once it has been determined that a GuiButton object has been clicked.\n+\t\t * Replace button with a different button from buttonList to have that button's action executed.\n+\t\t */\n+\t\tpublic static class Pre extends ActionPerformedEvent {\n+\t\t\t// For EventBus\n+\t\t\tpublic Pre() {\n+\t\t\t}\n+\n+\t\t\tpublic Pre(Screen gui, ButtonWidget button, List<ButtonWidget> buttonList) {\n+\t\t\t\tsuper(gui, button, buttonList);\n+\t\t\t}\n+\t\t}\n+\n+\t\t/**\n+\t\t * This event fires after {@link Screen#actionPerformed(GuiButton)} provided that the active\n+\t\t * screen has not been changed as a result of {@link Screen#actionPerformed(GuiButton)}.\n+\t\t */\n+\t\tpublic static class Post extends ActionPerformedEvent {\n+\t\t\t// For EventBus\n+\t\t\tpublic Post() {\n+\t\t\t}\n+\n+\t\t\tpublic Post(Screen gui, ButtonWidget button, List<ButtonWidget> buttonList) {\n+\t\t\t\tsuper(gui, button, buttonList);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic abstract static class MouseInputEvent extends GuiScreenEvent {\n+\t\tprivate final double mouseX;\n+\t\tprivate final double mouseY;\n+\n+\t\t// For EventBus\n+\t\tpublic MouseInputEvent() {\n+\t\t\tthis(null, -1, -1);\n+\t\t}\n+\n+\t\tpublic MouseInputEvent(Screen gui, double mouseX, double mouseY) {\n+\t\t\tsuper(gui);\n+\t\t\tthis.mouseX = mouseX;\n+\t\t\tthis.mouseY = mouseY;\n+\t\t}\n+\n+\t\tpublic double getMouseX() {\n+\t\t\treturn mouseX;\n+\t\t}\n+\n+\t\tpublic double getMouseY() {\n+\t\t\treturn mouseY;\n+\t\t}\n+\t}\n+\n+\tpublic abstract static class MouseClickedEvent extends MouseInputEvent {\n+\t\tprivate final int button;\n+\n+\t\t// For EventBus\n+\t\tpublic MouseClickedEvent() {\n+\t\t\tthis(null, -1, -1, -1);\n+\t\t}\n+\n+\t\tpublic MouseClickedEvent(Screen gui, double mouseX, double mouseY, int button) {\n+\t\t\tsuper(gui, mouseX, mouseY);\n+\t\t\tthis.button = button;\n+\t\t}\n+\n+\t\tpublic int getButton() {\n+\t\t\treturn button;\n+\t\t}\n+\n+\t\t/**\n+\t\t * This event fires when a mouse click is detected for a Screen, before it is handled.\n+\t\t * Cancel this event to bypass {@link Element#mouseClicked(double, double, int)}.\n+\t\t */\n+\t\tpublic static class Pre extends MouseClickedEvent {\n+\t\t\t// For EventBus\n+\t\t\tpublic Pre() {\n+\t\t\t}\n+\n+\t\t\tpublic Pre(Screen gui, double mouseX, double mouseY, int button) {\n+\t\t\t\tsuper(gui, mouseX, mouseY, button);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean isCancelable() {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\n+\t\t/**\n+\t\t * This event fires after {@link Element#mouseClicked(double, double, int)} if the click was not already handled.\n+\t\t * Cancel this event when you successfully use the mouse click, to prevent other handlers from using the same input.\n+\t\t */\n+\t\tpublic static class Post extends MouseClickedEvent {\n+\t\t\t// For EventBus\n+\t\t\tpublic Post() {\n+\t\t\t}\n+\n+\t\t\tpublic Post(Screen gui, double mouseX, double mouseY, int button) {\n+\t\t\t\tsuper(gui, mouseX, mouseY, button);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean isCancelable() {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic abstract static class MouseReleasedEvent extends MouseInputEvent {\n+\t\tprivate final int button;\n+\n+\t\t// For EventBus\n+\t\tpublic MouseReleasedEvent() {\n+\t\t\tthis(null, -1, -1, -1);\n+\t\t}\n+\n+\t\tpublic MouseReleasedEvent(Screen gui, double mouseX, double mouseY, int button) {\n+\t\t\tsuper(gui, mouseX, mouseY);\n+\t\t\tthis.button = button;\n+\t\t}\n+\n+\t\tpublic int getButton() {\n+\t\t\treturn button;\n+\t\t}\n+\n+\t\t/**\n+\t\t * This event fires when a mouse release is detected for a Screen, before it is handled.\n+\t\t * Cancel this event to bypass {@link Element#mouseReleased(double, double, int)}.\n+\t\t */\n+\t\tpublic static class Pre extends MouseReleasedEvent {\n+\t\t\t// For EventBus\n+\t\t\tpublic Pre() {\n+\t\t\t}\n+\n+\t\t\tpublic Pre(Screen gui, double mouseX, double mouseY, int button) {\n+\t\t\t\tsuper(gui, mouseX, mouseY, button);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean isCancelable() {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\n+\t\t/**\n+\t\t * This event fires after {@link Element#mouseReleased(double, double, int)} if the release was not already handled.\n+\t\t * Cancel this event when you successfully use the mouse release, to prevent other handlers from using the same input.\n+\t\t */\n+\t\tpublic static class Post extends MouseReleasedEvent {\n+\t\t\t// For EventBus\n+\t\t\tpublic Post() {\n+\t\t\t}\n+\n+\t\t\tpublic Post(Screen gui, double mouseX, double mouseY, int button) {\n+\t\t\t\tsuper(gui, mouseX, mouseY, button);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean isCancelable() {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic abstract static class MouseDragEvent extends MouseInputEvent {\n+\t\tprivate final int mouseButton;\n+\t\tprivate final double dragX;\n+\t\tprivate final double dragY;\n+\n+\t\t// For EventBus\n+\t\tpublic MouseDragEvent() {\n+\t\t\tthis(null, -1, -1, -1, -1, -1);\n+\t\t}\n+\n+\t\tpublic MouseDragEvent(Screen gui, double mouseX, double mouseY, int mouseButton, double dragX, double dragY) {\n+\t\t\tsuper(gui, mouseX, mouseY);\n+\t\t\tthis.mouseButton = mouseButton;\n+\t\t\tthis.dragX = dragX;\n+\t\t\tthis.dragY = dragY;\n+\t\t}\n+\n+\t\tpublic int getMouseButton() {\n+\t\t\treturn mouseButton;\n+\t\t}\n+\n+\t\tpublic double getDragX() {\n+\t\t\treturn dragX;\n+\t\t}\n+\n+\t\tpublic double getDragY() {\n+\t\t\treturn dragY;\n+\t\t}\n+\n+\t\t/**\n+\t\t * This event fires when a mouse drag is detected for a Screen, before it is handled.\n+\t\t * Cancel this event to bypass {@link Element#mouseDragged(double, double, int, double, double)}.\n+\t\t */\n+\t\tpublic static class Pre extends MouseDragEvent {\n+\t\t\t// For EventBus\n+\t\t\tpublic Pre() {\n+\t\t\t}\n+\n+\t\t\tpublic Pre(Screen gui, double mouseX, double mouseY, int mouseButton, double dragX, double dragY) {\n+\t\t\t\tsuper(gui, mouseX, mouseY, mouseButton, dragX, dragY);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean isCancelable() {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\n+\t\t/**\n+\t\t * This event fires after {@link Element#mouseDragged(double, double, int, double, double)} if the drag was not already handled.\n+\t\t * Cancel this event when you successfully use the mouse drag, to prevent other handlers from using the same input.\n+\t\t */\n+\t\tpublic static class Post extends MouseDragEvent {\n+\t\t\t// For EventBus\n+\t\t\tpublic Post() {\n+\t\t\t}\n+\n+\t\t\tpublic Post(Screen gui, double mouseX, double mouseY, int mouseButton, double dragX, double dragY) {\n+\t\t\t\tsuper(gui, mouseX, mouseY, mouseButton, dragX, dragY);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean isCancelable() {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic abstract static class MouseScrollEvent extends MouseInputEvent {\n+\t\tprivate final double scrollDelta;\n+\n+\t\t// For EventBus\n+\t\tpublic MouseScrollEvent() {\n+\t\t\tthis(null, -1, -1, -1);\n+\t\t}\n+\n+\t\tpublic MouseScrollEvent(Screen gui, double mouseX, double mouseY, double scrollDelta) {\n+\t\t\tsuper(gui, mouseX, mouseY);\n+\t\t\tthis.scrollDelta = scrollDelta;\n+\t\t}\n+\n+\t\tpublic double getScrollDelta() {\n+\t\t\treturn scrollDelta;\n+\t\t}\n+\n+\t\t/**\n+\t\t * This event fires when a mouse scroll is detected for a Screen, before it is handled.\n+\t\t * Cancel this event to bypass {@link Element#mouseScrolled(double)}.\n+\t\t */\n+\t\tpublic static class Pre extends MouseScrollEvent {\n+\t\t\t// For EventBus\n+\t\t\tpublic Pre() {\n+\t\t\t}\n+\n+\t\t\tpublic Pre(Screen gui, double mouseX, double mouseY, double scrollDelta) {\n+\t\t\t\tsuper(gui, mouseX, mouseY, scrollDelta);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean isCancelable() {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\n+\t\t/**\n+\t\t * This event fires after {@link Element#mouseScrolled(double)} if the scroll was not already handled.\n+\t\t * Cancel this event when you successfully use the mouse scroll, to prevent other handlers from using the same input.\n+\t\t */\n+\t\tpublic static class Post extends MouseScrollEvent {\n+\t\t\t// For EventBus\n+\t\t\tpublic Post() {\n+\t\t\t}\n+\n+\t\t\tpublic Post(Screen gui, double mouseX, double mouseY, double scrollDelta) {\n+\t\t\t\tsuper(gui, mouseX, mouseY, scrollDelta);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean isCancelable() {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic abstract static class KeyboardKeyEvent extends GuiScreenEvent {\n+\t\tprivate final int keyCode;\n+\t\tprivate final int scanCode;\n+\t\tprivate final int modifiers;\n+\n+\t\t// For EventBus\n+\t\tpublic KeyboardKeyEvent() {\n+\t\t\tthis(null, -1, -1, -1);\n+\t\t}\n+\n+\t\tpublic KeyboardKeyEvent(Screen gui, int keyCode, int scanCode, int modifiers) {\n+\t\t\tsuper(gui);\n+\t\t\tthis.keyCode = keyCode;\n+\t\t\tthis.scanCode = scanCode;\n+\t\t\tthis.modifiers = modifiers;\n+\t\t}\n+\n+\t\t/**\n+\t\t * The keyboard key that was pressed or released.\n+\t\t * https://www.glfw.org/docs/latest/group__keys.html\n+\t\t *\n+\t\t * @see GLFW key constants starting with \"GLFW_KEY_\"\n+\t\t */\n+\t\tpublic int getKeyCode() {\n+\t\t\treturn keyCode;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Platform-specific scan code.\n+\t\t * Used for {@link net.minecraft.client.util.InputUtil#getKeyCode(int, int)}\n+\t\t *\n+\t\t * <p>The scan code is unique for every key, regardless of whether it has a key code.\n+\t\t * Scan codes are platform-specific but consistent over time, so keys will have different scan codes depending\n+\t\t * on the platform but they are safe to save to disk as custom key bindings.\n+\t\t */\n+\t\tpublic int getScanCode() {\n+\t\t\treturn scanCode;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Bit field representing the modifier keys pressed.\n+\t\t * https://www.glfw.org/docs/latest/group__mods.html\n+\t\t *\n+\t\t * @see GLFW#GLFW_MOD_SHIFT\n+\t\t * @see GLFW#GLFW_MOD_CONTROL\n+\t\t * @see GLFW#GLFW_MOD_ALT\n+\t\t * @see GLFW#GLFW_MOD_SUPER\n+\t\t */\n+\t\tpublic int getModifiers() {\n+\t\t\treturn modifiers;\n+\t\t}\n+\t}\n+\n+\tpublic abstract static class KeyboardKeyPressedEvent extends KeyboardKeyEvent {\n+\t\t// For EventBus\n+\t\tpublic KeyboardKeyPressedEvent() {\n+\t\t}\n+\n+\t\tpublic KeyboardKeyPressedEvent(Screen gui, int keyCode, int scanCode, int modifiers) {\n+\t\t\tsuper(gui, keyCode, scanCode, modifiers);\n+\t\t}\n+\n+\t\t/**\n+\t\t * This event fires when keyboard input is detected for a Screen, before it is handled.\n+\t\t * Cancel this event to bypass {@link Element#keyPressed(int, int, int)}.\n+\t\t */\n+\t\tpublic static class Pre extends KeyboardKeyPressedEvent {\n+\t\t\t// For EventBus\n+\t\t\tpublic Pre() {\n+\t\t\t}\n+\n+\t\t\tpublic Pre(Screen gui, int keyCode, int scanCode, int modifiers) {\n+\t\t\t\tsuper(gui, keyCode, scanCode, modifiers);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean isCancelable() {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\n+\t\t/**\n+\t\t * This event fires after {@link Element#keyPressed(int, int, int)} if the key was not already handled.\n+\t\t * Cancel this event when you successfully use the keyboard input to prevent other handlers from using the same input.\n+\t\t */\n+\t\tpublic static class Post extends KeyboardKeyPressedEvent {\n+\t\t\t// For EventBus\n+\t\t\tpublic Post() {\n+\t\t\t}\n+\n+\t\t\tpublic Post(Screen gui, int keyCode, int scanCode, int modifiers) {\n+\t\t\t\tsuper(gui, keyCode, scanCode, modifiers);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean isCancelable() {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic abstract static class KeyboardKeyReleasedEvent extends KeyboardKeyEvent {\n+\t\t// For EventBus\n+\t\tpublic KeyboardKeyReleasedEvent() {\n+\t\t}\n+\n+\t\tpublic KeyboardKeyReleasedEvent(Screen gui, int keyCode, int scanCode, int modifiers) {\n+\t\t\tsuper(gui, keyCode, scanCode, modifiers);\n+\t\t}\n+\n+\t\t/**\n+\t\t * This event fires when keyboard input is detected for a Screen, before it is handled.\n+\t\t * Cancel this event to bypass {@link Element#keyReleased(int, int, int)}.\n+\t\t */\n+\t\tpublic static class Pre extends KeyboardKeyReleasedEvent {\n+\t\t\t// For EventBus\n+\t\t\tpublic Pre() {\n+\t\t\t}\n+\n+\t\t\tpublic Pre(Screen gui, int keyCode, int scanCode, int modifiers) {\n+\t\t\t\tsuper(gui, keyCode, scanCode, modifiers);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean isCancelable() {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\n+\t\t/**\n+\t\t * This event fires after {@link Element#keyReleased(int, int, int)} if the key was not already handled.\n+\t\t * Cancel this event when you successfully use the keyboard input to prevent other handlers from using the same input.\n+\t\t */\n+\t\tpublic static class Post extends KeyboardKeyReleasedEvent {\n+\t\t\t// For EventBus\n+\t\t\tpublic Post() {\n+\t\t\t}\n+\n+\t\t\tpublic Post(Screen gui, int keyCode, int scanCode, int modifiers) {\n+\t\t\t\tsuper(gui, keyCode, scanCode, modifiers);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean isCancelable() {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic static class KeyboardCharTypedEvent extends GuiScreenEvent {\n+\t\tprivate final char codePoint;\n+\t\tprivate final int modifiers;\n+\n+\t\t// For EventBus\n+\t\tpublic KeyboardCharTypedEvent() {\n+\t\t\tthis(null, (char) -1, -1);\n+\t\t}\n+\n+\t\tpublic KeyboardCharTypedEvent(Screen gui, char codePoint, int modifiers) {\n+\t\t\tsuper(gui);\n+\t\t\tthis.codePoint = codePoint;\n+\t\t\tthis.modifiers = modifiers;\n+\t\t}\n+\n+\t\t/**\n+\t\t * The code point typed, used for text entry.\n+\t\t */\n+\t\tpublic char getCodePoint() {\n+\t\t\treturn codePoint;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Bit field representing the modifier keys pressed.\n+\t\t *\n+\t\t * @see GLFW#GLFW_MOD_SHIFT\n+\t\t * @see GLFW#GLFW_MOD_CONTROL\n+\t\t * @see GLFW#GLFW_MOD_ALT\n+\t\t * @see GLFW#GLFW_MOD_SUPER\n+\t\t */\n+\t\tpublic int getModifiers() {\n+\t\t\treturn modifiers;\n+\t\t}\n+\n+\t\t/**\n+\t\t * This event fires when keyboard character input is detected for a Screen, before it is handled.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28aed112395df60026fd95399d03c7796ce62c6b"}, "originalPosition": 749}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93f1dd8b3a368b540c4074f198bbf8e38b8f2e3b", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/93f1dd8b3a368b540c4074f198bbf8e38b8f2e3b", "committedDate": "2020-01-18T08:26:30Z", "message": "clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7e52eb1c3b27133d7ff38196aa4584c8ae8eb75", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/d7e52eb1c3b27133d7ff38196aa4584c8ae8eb75", "committedDate": "2020-01-18T08:27:45Z", "message": "forgot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b230eb2f4b63cbbcda2c6bc2be34f5b36b7dd2b", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/0b230eb2f4b63cbbcda2c6bc2be34f5b36b7dd2b", "committedDate": "2020-01-18T08:30:49Z", "message": "change modules"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0OTU0MjAx", "url": "https://github.com/PatchworkMC/patchwork-api/pull/22#pullrequestreview-344954201", "createdAt": "2020-01-18T17:44:49Z", "commit": {"oid": "0b230eb2f4b63cbbcda2c6bc2be34f5b36b7dd2b"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxNzo0NDo0OVrOFfLhbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQwMDoyMTowNFrOFfMlSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIzODk1Nw==", "bodyText": "Generally the first line isn't wrapped in  tags, just a convention.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/22#discussion_r368238957", "createdAt": "2020-01-18T17:44:49Z", "author": {"login": "coderbot16"}, "path": "patchwork-gui/src/main/java/net/minecraftforge/client/event/GuiScreenEvent.java", "diffHunk": "@@ -0,0 +1,786 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.client.event;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import net.minecraftforge.eventbus.api.Event;\n+import org.lwjgl.glfw.GLFW;\n+\n+import net.minecraft.client.gui.Element;\n+import net.minecraft.client.gui.screen.Screen;\n+import net.minecraft.client.gui.screen.ingame.AbstractInventoryScreen;\n+import net.minecraft.client.gui.widget.AbstractButtonWidget;\n+import net.minecraft.client.gui.widget.ButtonWidget;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Event classes for GuiScreen events.\n+ *\n+ * @author bspkrs\n+ */\n+@Environment(EnvType.CLIENT)\n+public class GuiScreenEvent extends Event {\n+\tprivate final Screen gui;\n+\n+\t// For EventBus\n+\tpublic GuiScreenEvent() {\n+\t\tthis(null);\n+\t}\n+\n+\tpublic GuiScreenEvent(Screen gui) {\n+\t\tthis.gui = gui;\n+\t}\n+\n+\t/**\n+\t * The {@link Screen} object generating this event.\n+\t */\n+\tpublic Screen getGui() {\n+\t\treturn gui;\n+\t}\n+\n+\tpublic static class InitGuiEvent extends GuiScreenEvent {\n+\t\tprivate Consumer<AbstractButtonWidget> add;\n+\t\tprivate Consumer<AbstractButtonWidget> remove;\n+\n+\t\tprivate List<AbstractButtonWidget> list;\n+\n+\t\t// For EventBus\n+\t\tpublic InitGuiEvent() {\n+\t\t}\n+\n+\t\tpublic InitGuiEvent(Screen gui, List<AbstractButtonWidget> list, Consumer<AbstractButtonWidget> add, Consumer<AbstractButtonWidget> remove) {\n+\t\t\tsuper(gui);\n+\t\t\tthis.list = Collections.unmodifiableList(list);\n+\t\t\tthis.add = add;\n+\t\t\tthis.remove = remove;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Unmodifiable reference to the list of buttons on the {@link #gui}.\n+\t\t */\n+\t\tpublic List<AbstractButtonWidget> getWidgetList() {\n+\t\t\treturn list;\n+\t\t}\n+\n+\t\tpublic void addWidget(AbstractButtonWidget button) {\n+\t\t\tadd.accept(button);\n+\t\t}\n+\n+\t\tpublic void removeWidget(AbstractButtonWidget button) {\n+\t\t\tremove.accept(button);\n+\t\t}\n+\n+\t\t/**\n+\t\t * <p>This event fires just after initializing {@link Screen#minecraft}, {@link Screen#font},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b230eb2f4b63cbbcda2c6bc2be34f5b36b7dd2b"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1NjMyOA==", "bodyText": "Probably should be in client, otherwise this could crash on the server.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/22#discussion_r368256328", "createdAt": "2020-01-19T00:21:04Z", "author": {"login": "coderbot16"}, "path": "patchwork-gui/src/main/resources/patchwork-gui.mixins.json", "diffHunk": "@@ -0,0 +1,15 @@\n+{\n+  \"required\": true,\n+  \"package\": \"com.patchworkmc.mixin.gui\",\n+  \"compatibilityLevel\": \"JAVA_8\",\n+  \"mixins\": [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b230eb2f4b63cbbcda2c6bc2be34f5b36b7dd2b"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2160d2232d838ce6048ff9f99a5d9383d16f661", "author": {"user": {"login": "shedaniel", "name": null}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/b2160d2232d838ce6048ff9f99a5d9383d16f661", "committedDate": "2020-01-19T07:48:41Z", "message": "fix javadoc and mixin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1MDA3NzE5", "url": "https://github.com/PatchworkMC/patchwork-api/pull/22#pullrequestreview-345007719", "createdAt": "2020-01-19T15:05:23Z", "commit": {"oid": "b2160d2232d838ce6048ff9f99a5d9383d16f661"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1010, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}