{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NDkwNjEz", "number": 96, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMzo0Mjo1MlrOEHVQcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxODo0ODo1N1rOEHYXKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTIzNzYxOnYy", "diffSide": "RIGHT", "path": "patchwork-events-entity/src/main/java/net/patchworkmc/mixin/event/entity/MixinLivingEntity.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMzo0Mjo1MlrOGmpdwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMzo0Mjo1MlrOGmpdwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3ODQzMg==", "bodyText": "Thank you for the descriptive javadoc!", "url": "https://github.com/PatchworkMC/patchwork-api/pull/96#discussion_r443178432", "createdAt": "2020-06-21T03:42:52Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-events-entity/src/main/java/net/patchworkmc/mixin/event/entity/MixinLivingEntity.java", "diffHunk": "@@ -101,6 +115,65 @@ private void hookHandleFallDamageCancel(float distance, float damageMultiplier,\n \t\t}\n \t}\n \n+\t/**\n+\t * Carry over the looting level between the two mixins for the drop method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b1385cc35ac79aff56e6770b57e958f69013768"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTc0NDQ3OnYy", "diffSide": "RIGHT", "path": "patchwork-events-entity/src/main/java/net/minecraftforge/event/entity/living/LivingDropsEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxODo0NjoyM1rOGmtlew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxODo0NjoyM1rOGmtlew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0NTk0Nw==", "bodyText": "Forge javadoc once again proves to be awful. A few minor nitpicks and a missed MCP name here:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * {@link #source} contains the DamageSource that caused the drop to occur.<br>\n          \n          \n            \n             * {@link #drops} contains the ArrayList of EntityItems that will be dropped.<br>\n          \n          \n            \n             * {@link #lootingLevel} contains the amount of loot that will be dropped.<br>\n          \n          \n            \n             * {@link #recentlyHit} determines whether the Entity doing the drop has recently been damaged.<br>\n          \n          \n            \n             * {@link #source} contains the {@link DamageSource} that caused the drop to occur.<br>\n          \n          \n            \n             * {@link #drops} contains the Collection of {@link ItemEntity}s that will be dropped.<br>\n          \n          \n            \n             * {@link #lootingLevel} contains the level of Looting used to kill the entity doing the drop.<br>\n          \n          \n            \n             * {@link #recentlyHit} determines whether the entity doing the drop has recently been damaged by a player or tamed wolf.<br>", "url": "https://github.com/PatchworkMC/patchwork-api/pull/96#discussion_r443245947", "createdAt": "2020-06-21T18:46:23Z", "author": {"login": "TwilightFlower"}, "path": "patchwork-events-entity/src/main/java/net/minecraftforge/event/entity/living/LivingDropsEvent.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.event.entity.living;\n+\n+import java.util.Collection;\n+\n+import net.minecraftforge.common.MinecraftForge;\n+\n+import net.minecraft.entity.ItemEntity;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.damage.DamageSource;\n+\n+/**\n+ * LivingDropsEvent is fired when an Entity's death causes dropped items to appear.\n+ *\n+ * <p>This event is fired whenever an Entity dies and drops items in {@link LivingEntity#onDeath(DamageSource)}.</p>\n+ *\n+ * <p>\n+ * {@link #source} contains the DamageSource that caused the drop to occur.<br>\n+ * {@link #drops} contains the ArrayList of EntityItems that will be dropped.<br>\n+ * {@link #lootingLevel} contains the amount of loot that will be dropped.<br>\n+ * {@link #recentlyHit} determines whether the Entity doing the drop has recently been damaged.<br>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b1385cc35ac79aff56e6770b57e958f69013768"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTc0NjM0OnYy", "diffSide": "RIGHT", "path": "patchwork-events-entity/src/main/java/net/patchworkmc/mixin/event/entity/MixinLivingEntity.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxODo0ODo1N1rOGmtmZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxODo0ODo1N1rOGmtmZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0NjE4Mg==", "bodyText": "This is an awful hack -- unless you have a good reason to not, you should just use ThreadLocal.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/96#discussion_r443246182", "createdAt": "2020-06-21T18:48:57Z", "author": {"login": "TwilightFlower"}, "path": "patchwork-events-entity/src/main/java/net/patchworkmc/mixin/event/entity/MixinLivingEntity.java", "diffHunk": "@@ -101,6 +115,65 @@ private void hookHandleFallDamageCancel(float distance, float damageMultiplier,\n \t\t}\n \t}\n \n+\t/**\n+\t * Carry over the looting level between the two mixins for the drop method.\n+\t *\n+\t * <p>\n+\t * The drop method has roughly this effect:\n+\t *\n+\t * <pre>{@code\n+\t * protected void drop(DamageSource source) {\n+\t *     int lootingLevel = ...\n+\t *     // hookDropForCapturePre mixin\n+\t *     this.dropEquipment(source, lootingLevel, bl);\n+\t *     // FRAME CHOP 3\n+\t *     this.dropInventory();\n+\t *\n+\t *     // Added by forge, MUST be called after dropInventory:\n+\t *     sendEvent(lootingLevel);\n+\t * }\n+\t * }</pre>\n+\t *\n+\t * And thus we can't access the looting level from the end since it's local has\n+\t * been discarded. Thus we store it in a field, with an atomic reference to the\n+\t * thread currently using it to prevent silent corruption.\n+\t * </p>\n+\t */\n+\t@Unique\n+\tprivate final AtomicReference<Thread> dropLevelGuard = new AtomicReference<>(null);\n+\t@Unique\n+\tprivate int dropLootingLevel;\n+\n+\t@Inject(method = \"drop\", at = @At(value = \"FIELD\", target = \"Lnet/minecraft/entity/LivingEntity;playerHitTimer : I\"), locals = LocalCapture.CAPTURE_FAILHARD)\n+\tprivate void hookDropForCapturePre(DamageSource src, CallbackInfo info, int lootingLevel) {\n+\t\tIForgeEntity forgeEntity = (IForgeEntity) this;\n+\t\tforgeEntity.captureDrops(new ArrayList<>());\n+\n+\t\t// Make sure no other threads are currently in this method first\n+\t\tif (!dropLevelGuard.compareAndSet(null, Thread.currentThread())) {\n+\t\t\tthrow new ConcurrentModificationException(\"LivingEntity.drop: Single-threaded local hack used by multiple threads\");\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b1385cc35ac79aff56e6770b57e958f69013768"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1585, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}