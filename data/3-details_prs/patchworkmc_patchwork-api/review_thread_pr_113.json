{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2NTY4NzU3", "number": 113, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxOToxNjowOFrOEP4c0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyNzowOVrOEQ1RKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MDg4OTc4OnYy", "diffSide": "RIGHT", "path": "patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootManager.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxOToxNjowOFrOGzxrcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQyMzoxNToyMVrOGzzGTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0NDQ5Nw==", "bodyText": "potential memory leak\nNot sure what to do about this, might just need an overwrite", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r456944497", "createdAt": "2020-07-19T19:16:08Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootManager.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.loot;\n+\n+import java.io.IOException;\n+import java.util.Deque;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Queues;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.loot.LootManager;\n+import net.minecraft.resource.Resource;\n+import net.minecraft.resource.ResourceManager;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.patchworkmc.impl.loot.LootHooks;\n+\n+@Mixin(LootManager.class)\n+public abstract class MixinLootManager extends MixinJsonDataLoader {\n+\t// should this also be part of the static threadlocal?\n+\t@Unique\n+\tprivate ResourceManager resourceManager;\n+\n+\t@Unique\n+\tprivate static ThreadLocal<Deque<LootManager>> lootContext = new ThreadLocal<Deque<LootManager>>();\n+\n+\t// TODO: is reentrancy necessary?\n+\t@Inject(method = \"apply\", at = @At(\"HEAD\"))\n+\tprivate void getResourceManager(Map<Identifier, JsonObject> map, ResourceManager resourceManager, Profiler profiler, CallbackInfo info) {\n+\t\tthis.resourceManager = resourceManager;\n+\t\tDeque<LootManager> que = lootContext.get();\n+\n+\t\tif (que == null) {\n+\t\t\tque = Queues.newArrayDeque();\n+\t\t\tlootContext.set(que);\n+\t\t}\n+\n+\t\tque.push((LootManager) (Object) this);\n+\t}\n+\n+\t@Inject(method = \"apply\", at = @At(\"RETURN\"))\n+\tprivate void delResourceManager(CallbackInfo info) {\n+\t\t// TODO: what if an exception is thrown?\n+\t\tresourceManager = null;\n+\t\tlootContext.get().pop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3901ad3e84ee88fbae2dbd1473c5bcd1543fbf7"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0ODQ3NQ==", "bodyText": "I suppose a better question is \"can an exception be thrown out of apply\"? and for that, i note it doesn't have a throws clause (but i don't know enough about java to say that rules it out)\nI'm pretty sure we can avoid an overwrite by wrapping the function instead, i don't remember what mixin calls that though.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r456948475", "createdAt": "2020-07-19T19:54:51Z", "author": {"login": "kitlith"}, "path": "patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootManager.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.loot;\n+\n+import java.io.IOException;\n+import java.util.Deque;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Queues;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.loot.LootManager;\n+import net.minecraft.resource.Resource;\n+import net.minecraft.resource.ResourceManager;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.patchworkmc.impl.loot.LootHooks;\n+\n+@Mixin(LootManager.class)\n+public abstract class MixinLootManager extends MixinJsonDataLoader {\n+\t// should this also be part of the static threadlocal?\n+\t@Unique\n+\tprivate ResourceManager resourceManager;\n+\n+\t@Unique\n+\tprivate static ThreadLocal<Deque<LootManager>> lootContext = new ThreadLocal<Deque<LootManager>>();\n+\n+\t// TODO: is reentrancy necessary?\n+\t@Inject(method = \"apply\", at = @At(\"HEAD\"))\n+\tprivate void getResourceManager(Map<Identifier, JsonObject> map, ResourceManager resourceManager, Profiler profiler, CallbackInfo info) {\n+\t\tthis.resourceManager = resourceManager;\n+\t\tDeque<LootManager> que = lootContext.get();\n+\n+\t\tif (que == null) {\n+\t\t\tque = Queues.newArrayDeque();\n+\t\t\tlootContext.set(que);\n+\t\t}\n+\n+\t\tque.push((LootManager) (Object) this);\n+\t}\n+\n+\t@Inject(method = \"apply\", at = @At(\"RETURN\"))\n+\tprivate void delResourceManager(CallbackInfo info) {\n+\t\t// TODO: what if an exception is thrown?\n+\t\tresourceManager = null;\n+\t\tlootContext.get().pop();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0NDQ5Nw=="}, "originalCommit": {"oid": "b3901ad3e84ee88fbae2dbd1473c5bcd1543fbf7"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0OTcxNQ==", "bodyText": "@Intrinsic(displace = true) i think", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r456949715", "createdAt": "2020-07-19T20:06:03Z", "author": {"login": "kitlith"}, "path": "patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootManager.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.loot;\n+\n+import java.io.IOException;\n+import java.util.Deque;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Queues;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.loot.LootManager;\n+import net.minecraft.resource.Resource;\n+import net.minecraft.resource.ResourceManager;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.patchworkmc.impl.loot.LootHooks;\n+\n+@Mixin(LootManager.class)\n+public abstract class MixinLootManager extends MixinJsonDataLoader {\n+\t// should this also be part of the static threadlocal?\n+\t@Unique\n+\tprivate ResourceManager resourceManager;\n+\n+\t@Unique\n+\tprivate static ThreadLocal<Deque<LootManager>> lootContext = new ThreadLocal<Deque<LootManager>>();\n+\n+\t// TODO: is reentrancy necessary?\n+\t@Inject(method = \"apply\", at = @At(\"HEAD\"))\n+\tprivate void getResourceManager(Map<Identifier, JsonObject> map, ResourceManager resourceManager, Profiler profiler, CallbackInfo info) {\n+\t\tthis.resourceManager = resourceManager;\n+\t\tDeque<LootManager> que = lootContext.get();\n+\n+\t\tif (que == null) {\n+\t\t\tque = Queues.newArrayDeque();\n+\t\t\tlootContext.set(que);\n+\t\t}\n+\n+\t\tque.push((LootManager) (Object) this);\n+\t}\n+\n+\t@Inject(method = \"apply\", at = @At(\"RETURN\"))\n+\tprivate void delResourceManager(CallbackInfo info) {\n+\t\t// TODO: what if an exception is thrown?\n+\t\tresourceManager = null;\n+\t\tlootContext.get().pop();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0NDQ5Nw=="}, "originalCommit": {"oid": "b3901ad3e84ee88fbae2dbd1473c5bcd1543fbf7"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk2Nzc1OA==", "bodyText": "fixed by more tightly wrapping and using a try {} finally {} block", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r456967758", "createdAt": "2020-07-19T23:15:21Z", "author": {"login": "kitlith"}, "path": "patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootManager.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.loot;\n+\n+import java.io.IOException;\n+import java.util.Deque;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Queues;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.loot.LootManager;\n+import net.minecraft.resource.Resource;\n+import net.minecraft.resource.ResourceManager;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.patchworkmc.impl.loot.LootHooks;\n+\n+@Mixin(LootManager.class)\n+public abstract class MixinLootManager extends MixinJsonDataLoader {\n+\t// should this also be part of the static threadlocal?\n+\t@Unique\n+\tprivate ResourceManager resourceManager;\n+\n+\t@Unique\n+\tprivate static ThreadLocal<Deque<LootManager>> lootContext = new ThreadLocal<Deque<LootManager>>();\n+\n+\t// TODO: is reentrancy necessary?\n+\t@Inject(method = \"apply\", at = @At(\"HEAD\"))\n+\tprivate void getResourceManager(Map<Identifier, JsonObject> map, ResourceManager resourceManager, Profiler profiler, CallbackInfo info) {\n+\t\tthis.resourceManager = resourceManager;\n+\t\tDeque<LootManager> que = lootContext.get();\n+\n+\t\tif (que == null) {\n+\t\t\tque = Queues.newArrayDeque();\n+\t\t\tlootContext.set(que);\n+\t\t}\n+\n+\t\tque.push((LootManager) (Object) this);\n+\t}\n+\n+\t@Inject(method = \"apply\", at = @At(\"RETURN\"))\n+\tprivate void delResourceManager(CallbackInfo info) {\n+\t\t// TODO: what if an exception is thrown?\n+\t\tresourceManager = null;\n+\t\tlootContext.get().pop();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0NDQ5Nw=="}, "originalCommit": {"oid": "b3901ad3e84ee88fbae2dbd1473c5bcd1543fbf7"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDU0NTQ4OnYy", "diffSide": "RIGHT", "path": "patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootPool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMToyOTowOFrOG1Kd4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMToyOTowOFrOG1Kd4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM5OTIwMA==", "bodyText": "override annotations", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r458399200", "createdAt": "2020-07-21T21:29:08Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootPool.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.loot;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+\n+import net.minecraft.loot.LootPool;\n+import net.minecraft.loot.LootTableRange;\n+import net.minecraft.loot.UniformLootTableRange;\n+\n+import net.patchworkmc.api.loot.ForgeLootPool;\n+import net.patchworkmc.impl.loot.PatchworkLootPool;\n+\n+@Mixin(LootPool.class)\n+public class MixinLootPool implements PatchworkLootPool, ForgeLootPool {\n+\t// Forge has this as final, but I don't have a good way to initialize it if it is final.\n+\t@Unique\n+\tprivate String name;\n+\n+\t@Shadow\n+\tprivate UniformLootTableRange bonusRollsRange;\n+\n+\t@Shadow\n+\tprivate LootTableRange rollsRange;\n+\n+\t// implementation detail\n+\t// TODO: if we could have an inner class that was also a mixin, we could set this as protected?\n+\tpublic void patchwork$setName(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d3db34e172b14638b390fe56b790df9d6ed7e2c"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDU0NzE4OnYy", "diffSide": "RIGHT", "path": "patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootPoolBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMToyOTo0MlrOG1Ke2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMToyOTo0MlrOG1Ke2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM5OTQ0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            \t\t// is this necessary?\n          \n          \n            \n            \t\tcir.setReturnValue(ret);", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r458399449", "createdAt": "2020-07-21T21:29:42Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootPoolBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.loot;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.loot.LootPool;\n+import net.minecraft.loot.UniformLootTableRange;\n+\n+import net.patchworkmc.api.loot.ForgeLootPool;\n+import net.patchworkmc.impl.loot.PatchworkLootPool;\n+\n+@Mixin(LootPool.Builder.class)\n+public abstract class MixinLootPoolBuilder implements ForgeLootPool.Builder {\n+\t@Unique\n+\tprivate String name;\n+\n+\t@Shadow\n+\tprivate UniformLootTableRange bonusRollsRange;\n+\n+\t@Inject(method = \"build\", at = @At(\"RETURN\"), cancellable = true)\n+\tprivate void addNameToConstructor(CallbackInfoReturnable<LootPool> cir) {\n+\t\tLootPool ret = cir.getReturnValue();\n+\t\t((PatchworkLootPool) ret).patchwork$setName(name);\n+\n+\t\t// is this necessary?\n+\t\tcir.setReturnValue(ret);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d3db34e172b14638b390fe56b790df9d6ed7e2c"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDU0ODE1OnYy", "diffSide": "RIGHT", "path": "patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootPoolBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMToyOTo1OFrOG1KfZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMToyOTo1OFrOG1KfZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM5OTU4OQ==", "bodyText": "override annotations", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r458399589", "createdAt": "2020-07-21T21:29:58Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootPoolBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.loot;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.loot.LootPool;\n+import net.minecraft.loot.UniformLootTableRange;\n+\n+import net.patchworkmc.api.loot.ForgeLootPool;\n+import net.patchworkmc.impl.loot.PatchworkLootPool;\n+\n+@Mixin(LootPool.Builder.class)\n+public abstract class MixinLootPoolBuilder implements ForgeLootPool.Builder {\n+\t@Unique\n+\tprivate String name;\n+\n+\t@Shadow\n+\tprivate UniformLootTableRange bonusRollsRange;\n+\n+\t@Inject(method = \"build\", at = @At(\"RETURN\"), cancellable = true)\n+\tprivate void addNameToConstructor(CallbackInfoReturnable<LootPool> cir) {\n+\t\tLootPool ret = cir.getReturnValue();\n+\t\t((PatchworkLootPool) ret).patchwork$setName(name);\n+\n+\t\t// is this necessary?\n+\t\tcir.setReturnValue(ret);\n+\t}\n+\n+\tpublic LootPool.Builder name(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d3db34e172b14638b390fe56b790df9d6ed7e2c"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDU0ODk3OnYy", "diffSide": "RIGHT", "path": "patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMTozMDoxNlrOG1Kf8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMTozMDoxNlrOG1Kf8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM5OTcyOA==", "bodyText": "override annotations", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r458399728", "createdAt": "2020-07-21T21:30:16Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootTable.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.loot;\n+\n+import java.util.Arrays;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+\n+import net.minecraft.loot.LootPool;\n+import net.minecraft.loot.LootTable;\n+\n+import net.fabricmc.fabric.api.loot.v1.FabricLootSupplier;\n+\n+import net.patchworkmc.api.loot.ForgeLootTable;\n+import net.patchworkmc.api.loot.ForgeLootPool;\n+\n+@Mixin(LootTable.class)\n+public class MixinLootTable implements ForgeLootTable {\n+\t@Shadow\n+\tLootPool[] pools;\n+\n+\t// Forge added methods\n+\n+\t// TODO: freezing stuff\n+\n+\tpublic LootPool getPool(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d3db34e172b14638b390fe56b790df9d6ed7e2c"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDU1MTczOnYy", "diffSide": "RIGHT", "path": "patchwork-events-lifecycle/src/main/java/net/patchworkmc/mixin/event/lifecycle/MixinMinecraftServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMTozMTowN1rOG1KhlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMTozMTowN1rOG1KhlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMDE0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tvoid serverStoppedHook(CallbackInfo ci) {\n          \n          \n            \n            \tprivate void serverStoppedHook(CallbackInfo ci) {", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r458400149", "createdAt": "2020-07-21T21:31:07Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-events-lifecycle/src/main/java/net/patchworkmc/mixin/event/lifecycle/MixinMinecraftServer.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.event.lifecycle;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.server.MinecraftServer;\n+\n+import net.patchworkmc.impl.event.lifecycle.LifecycleEvents;\n+\n+@Mixin(MinecraftServer.class)\n+public class MixinMinecraftServer {\n+\t@Inject(method = \"run\", at = @At(value = \"INVOKE\", target = \"net/minecraft/server/MinecraftServer.exit ()V\"))\n+\tvoid serverStoppedHook(CallbackInfo ci) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d3db34e172b14638b390fe56b790df9d6ed7e2c"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDU3NDQ2OnYy", "diffSide": "RIGHT", "path": "patchwork-loot/src/main/java/net/patchworkmc/impl/loot/LootHooks.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMTozODowMlrOG1Ku5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjo0ODoyNVrOG1Miow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMzU1Nw==", "bodyText": "This stack seems to have a max size of one?", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r458403557", "createdAt": "2020-07-21T21:38:02Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-loot/src/main/java/net/patchworkmc/impl/loot/LootHooks.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.impl.loot;\n+\n+import java.util.Deque;\n+import java.util.HashSet;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.Queues;\n+import com.google.common.collect.Sets;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import org.spongepowered.asm.mixin.Unique;\n+\n+import net.minecraft.loot.LootManager;\n+import net.minecraft.loot.LootTable;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.JsonHelper;\n+\n+import net.patchworkmc.impl.event.loot.LootEvents;\n+\n+public class LootHooks {\n+\t@Unique\n+\tprivate static ThreadLocal<Deque<LootTableContext>> lootContext = new ThreadLocal<Deque<LootTableContext>>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d3db34e172b14638b390fe56b790df9d6ed7e2c"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzMTcwMA==", "bodyText": "https://github.com/PatchworkMC/YarnForge/blob/04d384add800bc395f4934507721f72eb733389f/src/main/java/net/minecraftforge/common/ForgeHooks.java#L178\nso either it has never recursed in practice or there is a forge bug.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r458431700", "createdAt": "2020-07-21T22:44:22Z", "author": {"login": "kitlith"}, "path": "patchwork-loot/src/main/java/net/patchworkmc/impl/loot/LootHooks.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.impl.loot;\n+\n+import java.util.Deque;\n+import java.util.HashSet;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.Queues;\n+import com.google.common.collect.Sets;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import org.spongepowered.asm.mixin.Unique;\n+\n+import net.minecraft.loot.LootManager;\n+import net.minecraft.loot.LootTable;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.JsonHelper;\n+\n+import net.patchworkmc.impl.event.loot.LootEvents;\n+\n+public class LootHooks {\n+\t@Unique\n+\tprivate static ThreadLocal<Deque<LootTableContext>> lootContext = new ThreadLocal<Deque<LootTableContext>>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMzU1Nw=="}, "originalCommit": {"oid": "6d3db34e172b14638b390fe56b790df9d6ed7e2c"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzMzE4Nw==", "bodyText": "And no, looking at implementation javadocs, the implementation of Deque used is ArrayDeque, which has no size restrictions afaict.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r458433187", "createdAt": "2020-07-21T22:48:25Z", "author": {"login": "kitlith"}, "path": "patchwork-loot/src/main/java/net/patchworkmc/impl/loot/LootHooks.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.impl.loot;\n+\n+import java.util.Deque;\n+import java.util.HashSet;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.Queues;\n+import com.google.common.collect.Sets;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import org.spongepowered.asm.mixin.Unique;\n+\n+import net.minecraft.loot.LootManager;\n+import net.minecraft.loot.LootTable;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.JsonHelper;\n+\n+import net.patchworkmc.impl.event.loot.LootEvents;\n+\n+public class LootHooks {\n+\t@Unique\n+\tprivate static ThreadLocal<Deque<LootTableContext>> lootContext = new ThreadLocal<Deque<LootTableContext>>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMzU1Nw=="}, "originalCommit": {"oid": "6d3db34e172b14638b390fe56b790df9d6ed7e2c"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDg1NDE2OnYy", "diffSide": "RIGHT", "path": "patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootPoolSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyNzowOVrOG1NURg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyNzowOVrOG1NURg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NTg5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            \t\t// is this necessary?\n          \n          \n            \n            \t\tcir.setReturnValue(ret);", "url": "https://github.com/PatchworkMC/patchwork-api/pull/113#discussion_r458445894", "createdAt": "2020-07-21T23:27:09Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-loot/src/main/java/net/patchworkmc/mixin/loot/MixinLootPoolSerializer.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.loot;\n+\n+import java.lang.reflect.Type;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonElement;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonSerializationContext;\n+\n+import net.minecraft.loot.LootPool;\n+\n+import net.patchworkmc.api.loot.ForgeLootPool;\n+import net.patchworkmc.impl.loot.LootHooks;\n+import net.patchworkmc.impl.loot.PatchworkLootPool;\n+\n+@Mixin(LootPool.Serializer.class)\n+public class MixinLootPoolSerializer {\n+\t@Inject(method = \"deserialize\", at = @At(\"RETURN\"), cancellable = true, locals = LocalCapture.CAPTURE_FAILHARD)\n+\tprivate void addNameToConstructor(JsonElement elem, Type ty, JsonDeserializationContext ctx, CallbackInfoReturnable<LootPool> cir, JsonObject obj) {\n+\t\tLootPool ret = cir.getReturnValue();\n+\t\t((PatchworkLootPool) ret).patchwork$setName(LootHooks.readPoolName(obj));\n+\n+\t\t// is this necessary?\n+\t\tcir.setReturnValue(ret);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae6e9c7c62e1d0351689115fe9f432ab7982d243"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1403, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}