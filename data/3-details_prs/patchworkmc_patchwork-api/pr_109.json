{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NDM0OTYz", "number": 109, "title": "Add ExtensionPoint to prevent one-sided mods from crashing", "bodyText": "In 1.14, Forge removed \u201csidedness\u201d attribute from the mods.toml and now one-side mods have to call this in their mod constructor to skip side checking:\n//Make sure the mod being absent on the other network side does not cause the client to display the server as incompatible\nModLoadingContext.get().registerExtensionPoint(ExtensionPoint.DISPLAYTEST, () -> Pair.of(() -> FMLNetworkConstants.IGNORESERVERONLY, (a, b) -> true));\nThis pr adds ExtensionPoint.DISPLAYTEST and relevent ExtensionPoint functions. However, due to a limitation of the Fabric Loader, Patchwork will not check for the presence of the Forge mod on the other side.", "createdAt": "2020-07-05T17:14:04Z", "url": "https://github.com/PatchworkMC/patchwork-api/pull/109", "merged": true, "mergeCommit": {"oid": "de525e1672f5feb63b2f9dc6784e1000e757a96b"}, "closed": true, "closedAt": "2020-07-10T21:50:14Z", "author": {"login": "rikka0w0"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcx_zYpgH2gAyNDQ0NDM0OTYzOjdkMGZjZmEyYjc5YmYxOTg2NTA5ZWRjZDFmODA5Njg5YTZiZDUyODY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcyQjAogH2gAyNDQ0NDM0OTYzOmI3ZjBiZDYyY2M1NDY3ZjZjNzVmYzAwMjNhNGU4OWI2MTQ1Mzg1ODM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7d0fcfa2b79bf1986509edcd1f809689a6bd5286", "author": {"user": {"login": "rikka0w0", "name": "Rikka0_0\u5c0f\u516d\u82b1"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/7d0fcfa2b79bf1986509edcd1f809689a6bd5286", "committedDate": "2020-07-05T17:08:31Z", "message": "Add ExtensionPoint to prevent one-sided mods from crashing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNzA1NDI0", "url": "https://github.com/PatchworkMC/patchwork-api/pull/109#pullrequestreview-442705424", "createdAt": "2020-07-05T20:49:38Z", "commit": {"oid": "7d0fcfa2b79bf1986509edcd1f809689a6bd5286"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMDo0OTozOVrOGtExgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMDo1MjozNlrOGtEysg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNzMxMg==", "bodyText": "getOrDefault(x () -> null)\n\nIsn't that the same thing is get()? Maybe this is some quirk of IdentityHashMap but I don't think so.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/109#discussion_r449917312", "createdAt": "2020-07-05T20:49:39Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-fml/src/main/java/net/minecraftforge/fml/ModContainer.java", "diffHunk": "@@ -46,6 +54,21 @@ public final String getNamespace() {\n \t\treturn namespace;\n \t}\n \n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic <T> Optional<T> getCustomExtension(ExtensionPoint<T> point) {\n+\t\treturn Optional.ofNullable((T) extensionPoints.getOrDefault(point, () -> null).get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d0fcfa2b79bf1986509edcd1f809689a6bd5286"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNzUwMQ==", "bodyText": "There's no way yet--we will eventually have to layer our own networking ontop of what Fabric has, but that's waiting on some work to be done by liach and co.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/109#discussion_r449917501", "createdAt": "2020-07-05T20:51:27Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-fml/src/main/java/net/minecraftforge/fml/ExtensionPoint.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.fml;\n+\n+import java.util.function.BiFunction;\n+import java.util.function.BiPredicate;\n+import java.util.function.Supplier;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+\n+public class ExtensionPoint<T> {\n+\tpublic static final ExtensionPoint<BiFunction<MinecraftClient, Screen, Screen>> CONFIGGUIFACTORY = new ExtensionPoint<>();\n+\t// TODO: Not used by any Forge code, ModFileResourcePack is not implemented in Patchwork API\n+\t// public static final ExtensionPoint<BiFunction<MinecraftClient, ModFileResourcePack, ResourcePack>> RESOURCEPACK = new ExtensionPoint<>();\n+\t/**\n+\t * Compatibility display test for the mod. Used for displaying compatibility\n+\t * with remote servers with the same mod, and on disk saves.\n+\t *\n+\t * <p>The supplier provides my \"local\" version for sending across the network or\n+\t * writing to disk The predicate tests the version from a remote instance or\n+\t * save for acceptability (Boolean is true for network, false for local save)\n+\t *\n+\t * <p>TODO: Fabric servers do not check for client's mod list,\n+\t * there is no way to implement the DISPLAYTEST function in Patchwork.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d0fcfa2b79bf1986509edcd1f809689a6bd5286"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNzYxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * <p>The supplier provides my \"local\" version for sending across the network or\n          \n          \n            \n            \t * writing to disk The predicate tests the version from a remote instance or\n          \n          \n            \n            \t * <p>The supplier provides the \"local\" version for sending across the network or\n          \n          \n            \n            \t * writing to disk. The predicate tests the version from a remote instance or", "url": "https://github.com/PatchworkMC/patchwork-api/pull/109#discussion_r449917618", "createdAt": "2020-07-05T20:52:36Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-fml/src/main/java/net/minecraftforge/fml/ExtensionPoint.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.fml;\n+\n+import java.util.function.BiFunction;\n+import java.util.function.BiPredicate;\n+import java.util.function.Supplier;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+\n+public class ExtensionPoint<T> {\n+\tpublic static final ExtensionPoint<BiFunction<MinecraftClient, Screen, Screen>> CONFIGGUIFACTORY = new ExtensionPoint<>();\n+\t// TODO: Not used by any Forge code, ModFileResourcePack is not implemented in Patchwork API\n+\t// public static final ExtensionPoint<BiFunction<MinecraftClient, ModFileResourcePack, ResourcePack>> RESOURCEPACK = new ExtensionPoint<>();\n+\t/**\n+\t * Compatibility display test for the mod. Used for displaying compatibility\n+\t * with remote servers with the same mod, and on disk saves.\n+\t *\n+\t * <p>The supplier provides my \"local\" version for sending across the network or\n+\t * writing to disk The predicate tests the version from a remote instance or", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d0fcfa2b79bf1986509edcd1f809689a6bd5286"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7f0bd62cc5467f6c75fc0023a4e89b614538583", "author": {"user": {"login": "rikka0w0", "name": "Rikka0_0\u5c0f\u516d\u82b1"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/b7f0bd62cc5467f6c75fc0023a4e89b614538583", "committedDate": "2020-07-06T12:39:01Z", "message": "Update patchwork-fml/src/main/java/net/minecraftforge/fml/ExtensionPoint.java\n\nCo-authored-by: Glitch <glitchieproductionsofficial@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1191, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}