{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NDM0OTYz", "number": 109, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMDo0OTozOVrOELfoHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMDo1MjozNlrOELfpGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNDg3OTY1OnYy", "diffSide": "RIGHT", "path": "patchwork-fml/src/main/java/net/minecraftforge/fml/ModContainer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMDo0OTozOVrOGtExgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMTo0OToyNFrOGwGj8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNzMxMg==", "bodyText": "getOrDefault(x () -> null)\n\nIsn't that the same thing is get()? Maybe this is some quirk of IdentityHashMap but I don't think so.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/109#discussion_r449917312", "createdAt": "2020-07-05T20:49:39Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-fml/src/main/java/net/minecraftforge/fml/ModContainer.java", "diffHunk": "@@ -46,6 +54,21 @@ public final String getNamespace() {\n \t\treturn namespace;\n \t}\n \n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic <T> Optional<T> getCustomExtension(ExtensionPoint<T> point) {\n+\t\treturn Optional.ofNullable((T) extensionPoints.getOrDefault(point, () -> null).get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d0fcfa2b79bf1986509edcd1f809689a6bd5286"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5MjI1Mg==", "bodyText": "Maybe Forge was trying to provide some fallback so they leave () -> null here.\nActually I'm not too sure either, perhaps we can leave it there to keep the behavior consistent with Forge.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/109#discussion_r450192252", "createdAt": "2020-07-06T12:40:13Z", "author": {"login": "rikka0w0"}, "path": "patchwork-fml/src/main/java/net/minecraftforge/fml/ModContainer.java", "diffHunk": "@@ -46,6 +54,21 @@ public final String getNamespace() {\n \t\treturn namespace;\n \t}\n \n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic <T> Optional<T> getCustomExtension(ExtensionPoint<T> point) {\n+\t\treturn Optional.ofNullable((T) extensionPoints.getOrDefault(point, () -> null).get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNzMxMg=="}, "originalCommit": {"oid": "7d0fcfa2b79bf1986509edcd1f809689a6bd5286"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5MjMzOA==", "bodyText": "Hang on, i see what's going on. It's returning some supplier, and this is more concise because it avoids having to check before unboxing.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/109#discussion_r453092338", "createdAt": "2020-07-10T21:49:24Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-fml/src/main/java/net/minecraftforge/fml/ModContainer.java", "diffHunk": "@@ -46,6 +54,21 @@ public final String getNamespace() {\n \t\treturn namespace;\n \t}\n \n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic <T> Optional<T> getCustomExtension(ExtensionPoint<T> point) {\n+\t\treturn Optional.ofNullable((T) extensionPoints.getOrDefault(point, () -> null).get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNzMxMg=="}, "originalCommit": {"oid": "7d0fcfa2b79bf1986509edcd1f809689a6bd5286"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNDg4MTE5OnYy", "diffSide": "RIGHT", "path": "patchwork-fml/src/main/java/net/minecraftforge/fml/ExtensionPoint.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMDo1MToyN1rOGtEyPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjo0MToyM1rOGtVl6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNzUwMQ==", "bodyText": "There's no way yet--we will eventually have to layer our own networking ontop of what Fabric has, but that's waiting on some work to be done by liach and co.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/109#discussion_r449917501", "createdAt": "2020-07-05T20:51:27Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-fml/src/main/java/net/minecraftforge/fml/ExtensionPoint.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.fml;\n+\n+import java.util.function.BiFunction;\n+import java.util.function.BiPredicate;\n+import java.util.function.Supplier;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+\n+public class ExtensionPoint<T> {\n+\tpublic static final ExtensionPoint<BiFunction<MinecraftClient, Screen, Screen>> CONFIGGUIFACTORY = new ExtensionPoint<>();\n+\t// TODO: Not used by any Forge code, ModFileResourcePack is not implemented in Patchwork API\n+\t// public static final ExtensionPoint<BiFunction<MinecraftClient, ModFileResourcePack, ResourcePack>> RESOURCEPACK = new ExtensionPoint<>();\n+\t/**\n+\t * Compatibility display test for the mod. Used for displaying compatibility\n+\t * with remote servers with the same mod, and on disk saves.\n+\t *\n+\t * <p>The supplier provides my \"local\" version for sending across the network or\n+\t * writing to disk The predicate tests the version from a remote instance or\n+\t * save for acceptability (Boolean is true for network, false for local save)\n+\t *\n+\t * <p>TODO: Fabric servers do not check for client's mod list,\n+\t * there is no way to implement the DISPLAYTEST function in Patchwork.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d0fcfa2b79bf1986509edcd1f809689a6bd5286"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5Mjg3NQ==", "bodyText": "I agree, so for now we just keep these dummy extension points to avoid ClassNotFoundException.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/109#discussion_r450192875", "createdAt": "2020-07-06T12:41:23Z", "author": {"login": "rikka0w0"}, "path": "patchwork-fml/src/main/java/net/minecraftforge/fml/ExtensionPoint.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.fml;\n+\n+import java.util.function.BiFunction;\n+import java.util.function.BiPredicate;\n+import java.util.function.Supplier;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+\n+public class ExtensionPoint<T> {\n+\tpublic static final ExtensionPoint<BiFunction<MinecraftClient, Screen, Screen>> CONFIGGUIFACTORY = new ExtensionPoint<>();\n+\t// TODO: Not used by any Forge code, ModFileResourcePack is not implemented in Patchwork API\n+\t// public static final ExtensionPoint<BiFunction<MinecraftClient, ModFileResourcePack, ResourcePack>> RESOURCEPACK = new ExtensionPoint<>();\n+\t/**\n+\t * Compatibility display test for the mod. Used for displaying compatibility\n+\t * with remote servers with the same mod, and on disk saves.\n+\t *\n+\t * <p>The supplier provides my \"local\" version for sending across the network or\n+\t * writing to disk The predicate tests the version from a remote instance or\n+\t * save for acceptability (Boolean is true for network, false for local save)\n+\t *\n+\t * <p>TODO: Fabric servers do not check for client's mod list,\n+\t * there is no way to implement the DISPLAYTEST function in Patchwork.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNzUwMQ=="}, "originalCommit": {"oid": "7d0fcfa2b79bf1986509edcd1f809689a6bd5286"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNDg4MjE4OnYy", "diffSide": "RIGHT", "path": "patchwork-fml/src/main/java/net/minecraftforge/fml/ExtensionPoint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMDo1MjozNlrOGtEysg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMDo1MjozNlrOGtEysg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNzYxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * <p>The supplier provides my \"local\" version for sending across the network or\n          \n          \n            \n            \t * writing to disk The predicate tests the version from a remote instance or\n          \n          \n            \n            \t * <p>The supplier provides the \"local\" version for sending across the network or\n          \n          \n            \n            \t * writing to disk. The predicate tests the version from a remote instance or", "url": "https://github.com/PatchworkMC/patchwork-api/pull/109#discussion_r449917618", "createdAt": "2020-07-05T20:52:36Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-fml/src/main/java/net/minecraftforge/fml/ExtensionPoint.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.fml;\n+\n+import java.util.function.BiFunction;\n+import java.util.function.BiPredicate;\n+import java.util.function.Supplier;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+\n+public class ExtensionPoint<T> {\n+\tpublic static final ExtensionPoint<BiFunction<MinecraftClient, Screen, Screen>> CONFIGGUIFACTORY = new ExtensionPoint<>();\n+\t// TODO: Not used by any Forge code, ModFileResourcePack is not implemented in Patchwork API\n+\t// public static final ExtensionPoint<BiFunction<MinecraftClient, ModFileResourcePack, ResourcePack>> RESOURCEPACK = new ExtensionPoint<>();\n+\t/**\n+\t * Compatibility display test for the mod. Used for displaying compatibility\n+\t * with remote servers with the same mod, and on disk saves.\n+\t *\n+\t * <p>The supplier provides my \"local\" version for sending across the network or\n+\t * writing to disk The predicate tests the version from a remote instance or", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d0fcfa2b79bf1986509edcd1f809689a6bd5286"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1608, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}