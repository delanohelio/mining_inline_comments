{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NTA2NTc3", "number": 162, "title": "Feature/extensions blockentity", "bodyText": "This module implements:\n\nEverything in IForgeTileEntity except those IModelData stuff.\nHooks for BlockEntityRenderer registration. (We cannot reuse Fabric hooks for this, the Fabric registration event is fired much earlier than Forge's)\nFastTESR in 1.14.4, will be removed and replaced with vanilla BlockEntityRenderer in 1.15 and above.\n\nThis pr is not huge, the licence header contributes a lot to the number of addition....", "createdAt": "2020-07-29T15:15:17Z", "url": "https://github.com/PatchworkMC/patchwork-api/pull/162", "merged": true, "mergeCommit": {"oid": "494367dbb33cfa5db1f3e58b5981ed863faf6021"}, "closed": true, "closedAt": "2020-08-17T21:14:38Z", "author": {"login": "rikka0w0"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5mft0AH2gAyNDU4NTA2NTc3OmFjYTU1ODM2NzI2NDVmZTA5ZTUwZDk5NmExZTNjZTliYzk4NDQzZmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc_5F0FgFqTQ2ODgzNzI0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "aca5583672645fe09e50d996a1e3ce9bc98443ff", "author": {"user": {"login": "rikka0w0", "name": "Rikka0_0\u5c0f\u516d\u82b1"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/aca5583672645fe09e50d996a1e3ce9bc98443ff", "committedDate": "2020-07-29T08:10:48Z", "message": "Add extensions-blockentity module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34175c42c6642f0c3c744caf017700ccdb7fd559", "author": {"user": {"login": "rikka0w0", "name": "Rikka0_0\u5c0f\u516d\u82b1"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/34175c42c6642f0c3c744caf017700ccdb7fd559", "committedDate": "2020-07-29T12:43:06Z", "message": "implements IForgeTileEntity.onLoad and onChunkUnloaded"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b0118bbd7382f5e5e228294fec060ef13627169", "author": {"user": {"login": "rikka0w0", "name": "Rikka0_0\u5c0f\u516d\u82b1"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/2b0118bbd7382f5e5e228294fec060ef13627169", "committedDate": "2020-07-29T12:59:10Z", "message": "Impl IForgeTileEntity.getTileData()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be9e4887e7d212d9050547b149d10e8f35ed9168", "author": {"user": {"login": "rikka0w0", "name": "Rikka0_0\u5c0f\u516d\u82b1"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/be9e4887e7d212d9050547b149d10e8f35ed9168", "committedDate": "2020-07-29T14:25:03Z", "message": "Implements IForgeTileEntity.getRenderBoundingBox and canRenderBreaking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a688a7b758ab2e37e257423fe842b43948bd6627", "author": {"user": {"login": "rikka0w0", "name": "Rikka0_0\u5c0f\u516d\u82b1"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/a688a7b758ab2e37e257423fe842b43948bd6627", "committedDate": "2020-07-29T14:58:03Z", "message": "Add FastTESR support and Forge's BER registration method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c69c35b7e49064778cdcc7680b5913390b71ef9", "author": {"user": {"login": "rikka0w0", "name": "Rikka0_0\u5c0f\u516d\u82b1"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/1c69c35b7e49064778cdcc7680b5913390b71ef9", "committedDate": "2020-07-29T15:13:42Z", "message": "Add BlockEntityRender register method to the god class, Add readme"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NjI5Mzkw", "url": "https://github.com/PatchworkMC/patchwork-api/pull/162#pullrequestreview-457629390", "createdAt": "2020-07-29T15:19:06Z", "commit": {"oid": "1c69c35b7e49064778cdcc7680b5913390b71ef9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNToxOTowNlrOG49iWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNToxOTowNlrOG49iWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM4MTY1OQ==", "bodyText": "This dependency is needed because:\npublic interface IForgeTileEntity extends ICapabilitySerializable<CompoundTag>\n\nHowever, it might be possible to remove it by moving some of the default impls from IForgeTileEntity to the capability package. I would like to hear other's suggestion on this.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/162#discussion_r462381659", "createdAt": "2020-07-29T15:19:06Z", "author": {"login": "rikka0w0"}, "path": "patchwork-extensions-blockentity/build.gradle", "diffHunk": "@@ -0,0 +1,6 @@\n+archivesBaseName = \"patchwork-extensions-blockentity\"\n+version = getSubprojectVersion(project, \"0.1.0\")\n+\n+dependencies {\n+\tcompile project(path: ':patchwork-capabilities', configuration: 'dev')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c69c35b7e49064778cdcc7680b5913390b71ef9"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4ec5d04f092338e9a024f8f7b591239edf58e69", "author": {"user": {"login": "rikka0w0", "name": "Rikka0_0\u5c0f\u516d\u82b1"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/b4ec5d04f092338e9a024f8f7b591239edf58e69", "committedDate": "2020-07-30T06:44:07Z", "message": "Fix potential ThreadLocal memory leakage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NTYwNTYy", "url": "https://github.com/PatchworkMC/patchwork-api/pull/162#pullrequestreview-458560562", "createdAt": "2020-07-30T16:22:32Z", "commit": {"oid": "b4ec5d04f092338e9a024f8f7b591239edf58e69"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNjoyMjozMlrOG5qdgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNjoyOTozNVrOG5qvSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzExNzY5OQ==", "bodyText": "why comment this out?", "url": "https://github.com/PatchworkMC/patchwork-api/pull/162#discussion_r463117699", "createdAt": "2020-07-30T16:22:32Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-extensions-blockentity/src/main/java/net/minecraftforge/common/extensions/IForgeTileEntity.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.common.extensions;\n+\n+import net.minecraftforge.common.capabilities.ICapabilitySerializable;\n+\n+import net.minecraft.block.AbstractSignBlock;\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.block.ChestBlock;\n+import net.minecraft.block.EnderChestBlock;\n+import net.minecraft.block.SkullBlock;\n+import net.minecraft.nbt.CompoundTag;\n+import net.minecraft.network.ClientConnection;\n+import net.minecraft.network.packet.s2c.play.BlockEntityUpdateS2CPacket;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.util.math.Box;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+public interface IForgeTileEntity extends ICapabilitySerializable<CompoundTag> {\n+\t/**\n+\t * Sometimes default render bounding box: infinite in scope. Used to control rendering on {@link TileEntitySpecialRenderer}.\n+\t */\n+\tBox INFINITE_EXTENT_AABB = new net.minecraft.util.math.Box(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n+\n+\tdefault BlockEntity getTileEntity() {\n+\t\treturn (BlockEntity) this;\n+\t}\n+\n+\t@Override\n+\tdefault void deserializeNBT(CompoundTag nbt) {\n+\t\tgetTileEntity().fromTag(nbt);\n+\t}\n+\n+\t@Override\n+\tdefault CompoundTag serializeNBT() {\n+\t\tCompoundTag ret = new CompoundTag();\n+\t\tgetTileEntity().toTag(ret);\n+\t\treturn ret;\n+\t}\n+\n+\t/**\n+\t * Called when you receive a TileEntityData packet for the location this\n+\t * TileEntity is currently in. On the client, the NetworkManager will always\n+\t * be the remote server. On the server, it will be whomever is responsible for\n+\t * sending the packet.\n+\t *\n+\t * @param net The NetworkManager the packet originated from\n+\t * @param pkt The data packet\n+\t */\n+\tdefault void onDataPacket(ClientConnection net, BlockEntityUpdateS2CPacket pkt) {\n+\t}\n+\n+\t/**\n+\t * Called when the chunk's TE update tag, gotten from {@link #getUpdateTag()}, is received on the client.\n+\t *\n+\t * <p>Used to handle this tag in a special way. By default this simply calls {@link #readFromNBT(NBTTagCompound)}.\n+\t *\n+\t * @param tag The {@link NBTTagCompound} sent from {@link #getUpdateTag()}\n+\t */\n+\tdefault void handleUpdateTag(CompoundTag tag) {\n+\t\tgetTileEntity().fromTag(tag);\n+\t}\n+\n+\t/**\n+\t * Gets a {@link NBTTagCompound} that can be used to store custom data for this tile entity.\n+\t * It will be written, and read from disc, so it persists over world saves.\n+\t *\n+\t * @return A compound tag for custom data\n+\t */\n+\tCompoundTag getTileData();\n+\n+\tdefault void onChunkUnloaded() {\n+\t}\n+\n+\t/**\n+\t * Called when this is first added to the world (by {@link World#addTileEntity(TileEntity)}).\n+\t * Override instead of adding {@code if (firstTick)} stuff in update.\n+\t */\n+\tdefault void onLoad() {\n+\t\trequestModelDataUpdate();\n+\t}\n+\n+\t/**\n+\t * Return an {@link AxisAlignedBB} that controls the visible scope of a {@link TileEntitySpecialRenderer} associated with this {@link TileEntity}\n+\t * Defaults to the collision bounding box {@link Block#getCollisionBoundingBoxFromPool(World, int, int, int)} associated with the block\n+\t * at this location.\n+\t *\n+\t * @return an appropriately size {@link AxisAlignedBB} for the {@link TileEntity}\n+\t */\n+\t// @OnlyIn(Dist.CLIENT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4ec5d04f092338e9a024f8f7b591239edf58e69"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzExODI0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t// So we can not GARENTEE that the world state is the real state for the block...\n          \n          \n            \n            \t\t\t\t// So we can not GUARANTEE that the world state is the real state for the block...", "url": "https://github.com/PatchworkMC/patchwork-api/pull/162#discussion_r463118245", "createdAt": "2020-07-30T16:23:26Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-extensions-blockentity/src/main/java/net/minecraftforge/common/extensions/IForgeTileEntity.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.common.extensions;\n+\n+import net.minecraftforge.common.capabilities.ICapabilitySerializable;\n+\n+import net.minecraft.block.AbstractSignBlock;\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.block.ChestBlock;\n+import net.minecraft.block.EnderChestBlock;\n+import net.minecraft.block.SkullBlock;\n+import net.minecraft.nbt.CompoundTag;\n+import net.minecraft.network.ClientConnection;\n+import net.minecraft.network.packet.s2c.play.BlockEntityUpdateS2CPacket;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.util.math.Box;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+public interface IForgeTileEntity extends ICapabilitySerializable<CompoundTag> {\n+\t/**\n+\t * Sometimes default render bounding box: infinite in scope. Used to control rendering on {@link TileEntitySpecialRenderer}.\n+\t */\n+\tBox INFINITE_EXTENT_AABB = new net.minecraft.util.math.Box(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n+\n+\tdefault BlockEntity getTileEntity() {\n+\t\treturn (BlockEntity) this;\n+\t}\n+\n+\t@Override\n+\tdefault void deserializeNBT(CompoundTag nbt) {\n+\t\tgetTileEntity().fromTag(nbt);\n+\t}\n+\n+\t@Override\n+\tdefault CompoundTag serializeNBT() {\n+\t\tCompoundTag ret = new CompoundTag();\n+\t\tgetTileEntity().toTag(ret);\n+\t\treturn ret;\n+\t}\n+\n+\t/**\n+\t * Called when you receive a TileEntityData packet for the location this\n+\t * TileEntity is currently in. On the client, the NetworkManager will always\n+\t * be the remote server. On the server, it will be whomever is responsible for\n+\t * sending the packet.\n+\t *\n+\t * @param net The NetworkManager the packet originated from\n+\t * @param pkt The data packet\n+\t */\n+\tdefault void onDataPacket(ClientConnection net, BlockEntityUpdateS2CPacket pkt) {\n+\t}\n+\n+\t/**\n+\t * Called when the chunk's TE update tag, gotten from {@link #getUpdateTag()}, is received on the client.\n+\t *\n+\t * <p>Used to handle this tag in a special way. By default this simply calls {@link #readFromNBT(NBTTagCompound)}.\n+\t *\n+\t * @param tag The {@link NBTTagCompound} sent from {@link #getUpdateTag()}\n+\t */\n+\tdefault void handleUpdateTag(CompoundTag tag) {\n+\t\tgetTileEntity().fromTag(tag);\n+\t}\n+\n+\t/**\n+\t * Gets a {@link NBTTagCompound} that can be used to store custom data for this tile entity.\n+\t * It will be written, and read from disc, so it persists over world saves.\n+\t *\n+\t * @return A compound tag for custom data\n+\t */\n+\tCompoundTag getTileData();\n+\n+\tdefault void onChunkUnloaded() {\n+\t}\n+\n+\t/**\n+\t * Called when this is first added to the world (by {@link World#addTileEntity(TileEntity)}).\n+\t * Override instead of adding {@code if (firstTick)} stuff in update.\n+\t */\n+\tdefault void onLoad() {\n+\t\trequestModelDataUpdate();\n+\t}\n+\n+\t/**\n+\t * Return an {@link AxisAlignedBB} that controls the visible scope of a {@link TileEntitySpecialRenderer} associated with this {@link TileEntity}\n+\t * Defaults to the collision bounding box {@link Block#getCollisionBoundingBoxFromPool(World, int, int, int)} associated with the block\n+\t * at this location.\n+\t *\n+\t * @return an appropriately size {@link AxisAlignedBB} for the {@link TileEntity}\n+\t */\n+\t// @OnlyIn(Dist.CLIENT)\n+\tdefault Box getRenderBoundingBox() {\n+\t\tBox bb = INFINITE_EXTENT_AABB;\n+\t\tBlockState state = getTileEntity().getCachedState();\n+\t\tBlock block = state.getBlock();\n+\t\tBlockPos pos = getTileEntity().getPos();\n+\n+\t\tif (block == Blocks.ENCHANTING_TABLE) {\n+\t\t\tbb = new Box(pos, pos.add(1, 1, 1));\n+\t\t} else if (block == Blocks.CHEST || block == Blocks.TRAPPED_CHEST) {\n+\t\t\tbb = new Box(pos.add(-1, 0, -1), pos.add(2, 2, 2));\n+\t\t} else if (block == Blocks.STRUCTURE_BLOCK) {\n+\t\t\tbb = INFINITE_EXTENT_AABB;\n+\t\t} else if (block != null && block != Blocks.BEACON) {\n+\t\t\tBox cbb = null;\n+\n+\t\t\ttry {\n+\t\t\t\tcbb = state.getCollisionShape(getTileEntity().getWorld(), pos).getBoundingBox().offset(pos);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t// We have to capture any exceptions that may occur here because BUKKIT servers like to send\n+\t\t\t\t// the tile entity data BEFORE the chunk data, you know, the OPPOSITE of what vanilla does!\n+\t\t\t\t// So we can not GARENTEE that the world state is the real state for the block...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4ec5d04f092338e9a024f8f7b591239edf58e69"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzExODM0OQ==", "bodyText": "we're not writing patches", "url": "https://github.com/PatchworkMC/patchwork-api/pull/162#discussion_r463118349", "createdAt": "2020-07-30T16:23:36Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-extensions-blockentity/src/main/java/net/minecraftforge/common/extensions/IForgeTileEntity.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.common.extensions;\n+\n+import net.minecraftforge.common.capabilities.ICapabilitySerializable;\n+\n+import net.minecraft.block.AbstractSignBlock;\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.block.ChestBlock;\n+import net.minecraft.block.EnderChestBlock;\n+import net.minecraft.block.SkullBlock;\n+import net.minecraft.nbt.CompoundTag;\n+import net.minecraft.network.ClientConnection;\n+import net.minecraft.network.packet.s2c.play.BlockEntityUpdateS2CPacket;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.util.math.Box;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+public interface IForgeTileEntity extends ICapabilitySerializable<CompoundTag> {\n+\t/**\n+\t * Sometimes default render bounding box: infinite in scope. Used to control rendering on {@link TileEntitySpecialRenderer}.\n+\t */\n+\tBox INFINITE_EXTENT_AABB = new net.minecraft.util.math.Box(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n+\n+\tdefault BlockEntity getTileEntity() {\n+\t\treturn (BlockEntity) this;\n+\t}\n+\n+\t@Override\n+\tdefault void deserializeNBT(CompoundTag nbt) {\n+\t\tgetTileEntity().fromTag(nbt);\n+\t}\n+\n+\t@Override\n+\tdefault CompoundTag serializeNBT() {\n+\t\tCompoundTag ret = new CompoundTag();\n+\t\tgetTileEntity().toTag(ret);\n+\t\treturn ret;\n+\t}\n+\n+\t/**\n+\t * Called when you receive a TileEntityData packet for the location this\n+\t * TileEntity is currently in. On the client, the NetworkManager will always\n+\t * be the remote server. On the server, it will be whomever is responsible for\n+\t * sending the packet.\n+\t *\n+\t * @param net The NetworkManager the packet originated from\n+\t * @param pkt The data packet\n+\t */\n+\tdefault void onDataPacket(ClientConnection net, BlockEntityUpdateS2CPacket pkt) {\n+\t}\n+\n+\t/**\n+\t * Called when the chunk's TE update tag, gotten from {@link #getUpdateTag()}, is received on the client.\n+\t *\n+\t * <p>Used to handle this tag in a special way. By default this simply calls {@link #readFromNBT(NBTTagCompound)}.\n+\t *\n+\t * @param tag The {@link NBTTagCompound} sent from {@link #getUpdateTag()}\n+\t */\n+\tdefault void handleUpdateTag(CompoundTag tag) {\n+\t\tgetTileEntity().fromTag(tag);\n+\t}\n+\n+\t/**\n+\t * Gets a {@link NBTTagCompound} that can be used to store custom data for this tile entity.\n+\t * It will be written, and read from disc, so it persists over world saves.\n+\t *\n+\t * @return A compound tag for custom data\n+\t */\n+\tCompoundTag getTileData();\n+\n+\tdefault void onChunkUnloaded() {\n+\t}\n+\n+\t/**\n+\t * Called when this is first added to the world (by {@link World#addTileEntity(TileEntity)}).\n+\t * Override instead of adding {@code if (firstTick)} stuff in update.\n+\t */\n+\tdefault void onLoad() {\n+\t\trequestModelDataUpdate();\n+\t}\n+\n+\t/**\n+\t * Return an {@link AxisAlignedBB} that controls the visible scope of a {@link TileEntitySpecialRenderer} associated with this {@link TileEntity}\n+\t * Defaults to the collision bounding box {@link Block#getCollisionBoundingBoxFromPool(World, int, int, int)} associated with the block\n+\t * at this location.\n+\t *\n+\t * @return an appropriately size {@link AxisAlignedBB} for the {@link TileEntity}\n+\t */\n+\t// @OnlyIn(Dist.CLIENT)\n+\tdefault Box getRenderBoundingBox() {\n+\t\tBox bb = INFINITE_EXTENT_AABB;\n+\t\tBlockState state = getTileEntity().getCachedState();\n+\t\tBlock block = state.getBlock();\n+\t\tBlockPos pos = getTileEntity().getPos();\n+\n+\t\tif (block == Blocks.ENCHANTING_TABLE) {\n+\t\t\tbb = new Box(pos, pos.add(1, 1, 1));\n+\t\t} else if (block == Blocks.CHEST || block == Blocks.TRAPPED_CHEST) {\n+\t\t\tbb = new Box(pos.add(-1, 0, -1), pos.add(2, 2, 2));\n+\t\t} else if (block == Blocks.STRUCTURE_BLOCK) {\n+\t\t\tbb = INFINITE_EXTENT_AABB;\n+\t\t} else if (block != null && block != Blocks.BEACON) {\n+\t\t\tBox cbb = null;\n+\n+\t\t\ttry {\n+\t\t\t\tcbb = state.getCollisionShape(getTileEntity().getWorld(), pos).getBoundingBox().offset(pos);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t// We have to capture any exceptions that may occur here because BUKKIT servers like to send\n+\t\t\t\t// the tile entity data BEFORE the chunk data, you know, the OPPOSITE of what vanilla does!\n+\t\t\t\t// So we can not GARENTEE that the world state is the real state for the block...\n+\t\t\t\t// So, once again in the long line of US having to accommodate BUKKIT breaking things,\n+\t\t\t\t// here it is, assume that the TE is only 1 cubic block. Problem with this is that it may\n+\t\t\t\t// cause the TileEntity renderer to error further down the line! But alas, nothing we can do.\n+\t\t\t\tcbb = new net.minecraft.util.math.Box(pos.add(-1, 0, -1), pos.add(1, 1, 1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4ec5d04f092338e9a024f8f7b591239edf58e69"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzExODk1Ng==", "bodyText": "What needs to be done here?\nIf this is being done to work around a FAPI patch, could mixin priorities be used to apply over their patches?", "url": "https://github.com/PatchworkMC/patchwork-api/pull/162#discussion_r463118956", "createdAt": "2020-07-30T16:24:37Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-extensions-blockentity/src/main/java/net/patchworkmc/mixin/extensions/blockentity/MixinClientPlayNetworkHandler.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.extensions.blockentity;\n+\n+import java.util.Iterator;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.At.Shift;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+import net.minecraftforge.common.extensions.IForgeTileEntity;\n+\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.client.network.ClientPlayNetworkHandler;\n+import net.minecraft.client.world.ClientWorld;\n+import net.minecraft.nbt.CompoundTag;\n+import net.minecraft.network.packet.s2c.play.BlockEntityUpdateS2CPacket;\n+import net.minecraft.network.packet.s2c.play.ChunkDataS2CPacket;\n+import net.minecraft.util.math.BlockPos;\n+\n+import net.fabricmc.fabric.api.block.entity.BlockEntityClientSerializable;\n+\n+/**\n+ * TODO: This Mixin can be less hacky if we can talk to the Fabric API team.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4ec5d04f092338e9a024f8f7b591239edf58e69"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEyMTUxNg==", "bodyText": "This looks like a hack. Would a marker interface in Patcher be helpful?", "url": "https://github.com/PatchworkMC/patchwork-api/pull/162#discussion_r463121516", "createdAt": "2020-07-30T16:28:24Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-extensions-blockentity/src/main/java/net/patchworkmc/mixin/extensions/blockentity/MixinClientPlayNetworkHandler.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.extensions.blockentity;\n+\n+import java.util.Iterator;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.At.Shift;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+import net.minecraftforge.common.extensions.IForgeTileEntity;\n+\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.client.network.ClientPlayNetworkHandler;\n+import net.minecraft.client.world.ClientWorld;\n+import net.minecraft.nbt.CompoundTag;\n+import net.minecraft.network.packet.s2c.play.BlockEntityUpdateS2CPacket;\n+import net.minecraft.network.packet.s2c.play.ChunkDataS2CPacket;\n+import net.minecraft.util.math.BlockPos;\n+\n+import net.fabricmc.fabric.api.block.entity.BlockEntityClientSerializable;\n+\n+/**\n+ * TODO: This Mixin can be less hacky if we can talk to the Fabric API team.\n+ *\n+ * <p>This Mixin implements {@link IForgeTileEntity#handleUpdateTag(CompoundTag)}\n+ * and {@link IForgeTileEntity#onDataPacket(net.minecraft.network.ClientConnection, BlockEntityUpdateS2CPacket)}.\n+ */\n+@Mixin(ClientPlayNetworkHandler.class)\n+public abstract class MixinClientPlayNetworkHandler {\n+\t///////////////////////////////////////////////////////////////\n+\t/// onChunkData -> IForgeTileEntity.handleUpdateTag\n+\t///////////////////////////////////////////////////////////////\n+\t@Unique\n+\tprivate static final ThreadLocal<CompoundTag> onChunkData_BETag = ThreadLocal.withInitial(() -> null);\n+\t@Unique\n+\tprivate static final String ClientWorld_getBlockEntity = \"net/minecraft/client/world/ClientWorld.getBlockEntity(Lnet/minecraft/util/math/BlockPos;)Lnet/minecraft/block/entity/BlockEntity;\";\n+\n+\t@Inject(method = \"onChunkData\", locals = LocalCapture.CAPTURE_FAILHARD,\n+\t\t\tat = @At(value = \"INVOKE\", shift = Shift.BEFORE, target = ClientWorld_getBlockEntity))\n+\tprivate void onChunkData_CollectBETag(ChunkDataS2CPacket packet, CallbackInfo ci,\n+\t\t\t@SuppressWarnings(\"rawtypes\") Iterator blockEntityTagListIterator, CompoundTag blockEntityTag, BlockPos blockPos) {\n+\t\tif (onBlockEntityUpdate_BlockEntity.get() != null) {\n+\t\t\tthrow new IllegalStateException(\"State of ClientPlayNetworkHandler.onChunkData() is not clean, incompatible Mixins might be the cause!\");\n+\t\t}\n+\n+\t\tonChunkData_BETag.set(blockEntityTag);\n+\t}\n+\n+\t@Redirect(method = \"onChunkData\", at = @At(value = \"INVOKE\", target = ClientWorld_getBlockEntity))\n+\tprivate BlockEntity onChunkData_world_getBlockEntity(ClientWorld clientWorld, BlockPos blockPos) {\n+\t\tCompoundTag blockEntityTag = onChunkData_BETag.get();\n+\t\tonChunkData_BETag.remove();\n+\n+\t\tClientPlayNetworkHandler me = (ClientPlayNetworkHandler) (Object) this;\n+\t\tBlockEntity blockEntity = me.getWorld().getBlockEntity(blockPos);\n+\n+\t\tif (blockEntity != null && !(blockEntity instanceof BlockEntityClientSerializable)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4ec5d04f092338e9a024f8f7b591239edf58e69"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEyMjI0OA==", "bodyText": "could this cause incompatibilities in fabric mods?", "url": "https://github.com/PatchworkMC/patchwork-api/pull/162#discussion_r463122248", "createdAt": "2020-07-30T16:29:35Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-extensions-blockentity/src/main/java/net/patchworkmc/mixin/extensions/blockentity/MixinWorld.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.extensions.blockentity;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.objectweb.asm.Opcodes;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.At.Shift;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.ModifyVariable;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+import net.minecraftforge.common.extensions.IForgeTileEntity;\n+\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.util.Tickable;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.profiler.Profiler;\n+import net.minecraft.world.World;\n+import net.minecraft.world.chunk.WorldChunk;\n+\n+/**\n+ * This Mixin implements {@link IForgeTileEntity#onLoad()} and {@link IForgeTileEntity#onChunkUnloaded()}.\n+ */\n+@Mixin(World.class)\n+public class MixinWorld {\n+\t/////////////////////////////////////\n+\t/// addBlockEntity()\n+\t/////////////////////////////////////\n+\t@Inject(method = \"addBlockEntity\", at = @At(\"HEAD\"))\n+\tprivate void onAddBlockEntity(BlockEntity blockEntity, CallbackInfoReturnable<Boolean> ci) {\n+\t\tWorld me = (World) (Object) this;\n+\n+\t\tif (blockEntity.getWorld() != me) {\n+\t\t\t// Forge - set the world early as vanilla doesn't set it until next tick\n+\t\t\tblockEntity.setWorld(me);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4ec5d04f092338e9a024f8f7b591239edf58e69"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69c9bc5e90bf3de23471078e19cebfa81ebd763b", "author": {"user": {"login": "rikka0w0", "name": "Rikka0_0\u5c0f\u516d\u82b1"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/69c9bc5e90bf3de23471078e19cebfa81ebd763b", "committedDate": "2020-07-30T19:19:22Z", "message": "Update patchwork-extensions-blockentity/src/main/java/net/minecraftforge/common/extensions/IForgeTileEntity.java\n\nCo-authored-by: Glitch <glitchieproductionsofficial@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51886131bf789f3d37d36c546564dd49f3437440", "author": {"user": {"login": "rikka0w0", "name": "Rikka0_0\u5c0f\u516d\u82b1"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/51886131bf789f3d37d36c546564dd49f3437440", "committedDate": "2020-07-30T19:31:37Z", "message": "Apply suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b49bcaf60a5315dd8e7d3a2f09044275987bbec", "author": {"user": {"login": "rikka0w0", "name": "Rikka0_0\u5c0f\u516d\u82b1"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/1b49bcaf60a5315dd8e7d3a2f09044275987bbec", "committedDate": "2020-07-31T19:36:52Z", "message": "Merge remote-tracking branch 'origin/master' into\nfeature/extensions-blockentity\n\nConflicts:\n\tpatchwork-god-classes/build.gradle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77ea6745a2f858d1709c44a2d51ee7ef0b931765", "author": {"user": {"login": "rikka0w0", "name": "Rikka0_0\u5c0f\u516d\u82b1"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/77ea6745a2f858d1709c44a2d51ee7ef0b931765", "committedDate": "2020-08-04T01:02:04Z", "message": "Revert \"Apply suggestions\"\n\nThis reverts commit 51886131bf789f3d37d36c546564dd49f3437440."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5656424e74bb367cab6a017fd93e48baceff822a", "author": {"user": {"login": "rikka0w0", "name": "Rikka0_0\u5c0f\u516d\u82b1"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/5656424e74bb367cab6a017fd93e48baceff822a", "committedDate": "2020-08-04T01:04:04Z", "message": "Apply suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMjkwNjEz", "url": "https://github.com/PatchworkMC/patchwork-api/pull/162#pullrequestreview-461290613", "createdAt": "2020-08-05T02:05:21Z", "commit": {"oid": "5656424e74bb367cab6a017fd93e48baceff822a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMjowNToyMVrOG73ioA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMjowNToyMVrOG73ioA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyOTE1Mg==", "bodyText": "I don't think this part of World is thread-safe. Maybe implement something like what I do in my BlockSnapshot PR?", "url": "https://github.com/PatchworkMC/patchwork-api/pull/162#discussion_r465429152", "createdAt": "2020-08-05T02:05:21Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-extensions-blockentity/src/main/java/net/patchworkmc/mixin/extensions/blockentity/MixinWorld.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.extensions.blockentity;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.objectweb.asm.Opcodes;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.At.Shift;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.ModifyVariable;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+import net.minecraftforge.common.extensions.IForgeTileEntity;\n+\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.util.Tickable;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.profiler.Profiler;\n+import net.minecraft.world.World;\n+import net.minecraft.world.chunk.WorldChunk;\n+\n+/**\n+ * This Mixin implements {@link IForgeTileEntity#onLoad()} and {@link IForgeTileEntity#onChunkUnloaded()}.\n+ */\n+@Mixin(World.class)\n+public class MixinWorld {\n+\t/////////////////////////////////////\n+\t/// addBlockEntity()\n+\t/////////////////////////////////////\n+\t@Inject(method = \"addBlockEntity\", at = @At(\"HEAD\"))\n+\tprivate void onAddBlockEntity(BlockEntity blockEntity, CallbackInfoReturnable<Boolean> ci) {\n+\t\tWorld me = (World) (Object) this;\n+\n+\t\tif (blockEntity.getWorld() != me) {\n+\t\t\t// Forge - set the world early as vanilla doesn't set it until next tick\n+\t\t\tblockEntity.setWorld(me);\n+\t\t}\n+\t}\n+\n+\t@Shadow\n+\t@Final\n+\tprotected List<BlockEntity> pendingBlockEntities;\n+\n+\t@Inject(method = \"addBlockEntity\", cancellable = true,\n+\t\t\tat = @At(value = \"INVOKE\", ordinal = 0, shift = Shift.AFTER, remap = false,\n+\t\t\ttarget = \"org/apache/logging/log4j/Logger.error(Ljava/lang/String;[Lorg/apache/logging/log4j/util/Supplier;)V\"))\n+\tprivate void onBlockEntityAdding(BlockEntity blockEntity, CallbackInfoReturnable<Boolean> cir) {\n+\t\t// Forge: wait to add new TE if we're currently processing existing ones\n+\t\tcir.setReturnValue(pendingBlockEntities.add(blockEntity));\n+\t}\n+\n+\t@Inject(method = \"addBlockEntity\", at = @At(value = \"FIELD\", ordinal = 0, shift = Shift.BEFORE,\n+\t\t\ttarget = \"net/minecraft/world/World.isClient:Z\", opcode = Opcodes.GETFIELD))\n+\tprivate void onBlockEntityAdded(BlockEntity blockEntity, CallbackInfoReturnable<Boolean> cir) {\n+\t\t// We cannot use Fabric events because Forge's onLoad() is also called on the client side.\n+\t\t((IForgeTileEntity) blockEntity).onLoad();\n+\t}\n+\n+\t/////////////////////////////////////\n+\t/// tickBlockEntities()\n+\t/////////////////////////////////////\n+\t@Shadow\n+\tprotected boolean iteratingTickingBlockEntities;\n+\n+\t@Inject(method = \"tickBlockEntities\", at = @At(value = \"INVOKE\", ordinal = 0, shift = Shift.AFTER,\n+\t\t\ttarget = \"net/minecraft/util/profiler/Profiler.push(Ljava/lang/String;)V\"))\n+\tprivate void onTickBlockEntitiesStart(CallbackInfo ci) {\n+\t\t// Forge: Move above remove to prevent CocurrentModificationException\n+\t\titeratingTickingBlockEntities = true;\n+\t}\n+\n+\t@Shadow\n+\t@Final\n+\tprotected List<BlockEntity> unloadedBlockEntities;\n+\n+\t@Inject(method = \"tickBlockEntities\", at = @At(value = \"INVOKE\", ordinal = 0, shift = Shift.BEFORE,\n+\t\t\ttarget = \"java/util/List.removeAll(Ljava/util/Collection;)Z\"))\n+\tprivate void onBlockEntitiesRemoved(CallbackInfo ci) {\n+\t\tfor (BlockEntity blockEntity: unloadedBlockEntities) {\n+\t\t\t((IForgeTileEntity) blockEntity).onChunkUnloaded();\n+\t\t}\n+\t}\n+\n+\t@Unique\n+\tprivate static final ThreadLocal<BlockEntity> onBlockEntitiesRemoved_BlockEntity = ThreadLocal.withInitial(() -> null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5656424e74bb367cab6a017fd93e48baceff822a"}, "originalPosition": 110}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMjkxMDA3", "url": "https://github.com/PatchworkMC/patchwork-api/pull/162#pullrequestreview-461291007", "createdAt": "2020-08-05T02:06:38Z", "commit": {"oid": "5656424e74bb367cab6a017fd93e48baceff822a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMjowNjozOFrOG73j6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMjowNjozOFrOG73j6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyOTQ4MA==", "bodyText": "again, i'm 90% sure this is not thread safe", "url": "https://github.com/PatchworkMC/patchwork-api/pull/162#discussion_r465429480", "createdAt": "2020-08-05T02:06:38Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-extensions-blockentity/src/main/java/net/patchworkmc/mixin/extensions/blockentity/MixinWorldRenderer.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.extensions.blockentity;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Constant;\n+import org.spongepowered.asm.mixin.injection.ModifyConstant;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import net.minecraftforge.common.extensions.IForgeTileEntity;\n+\n+import net.minecraft.block.ChestBlock;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.client.render.BlockBreakingInfo;\n+import net.minecraft.client.render.Camera;\n+import net.minecraft.client.render.VisibleRegion;\n+import net.minecraft.client.render.WorldRenderer;\n+import net.minecraft.client.render.block.entity.BlockEntityRenderDispatcher;\n+import net.minecraft.client.world.ClientWorld;\n+import net.minecraft.util.math.BlockPos;\n+\n+/**\n+ * Implements {@link IForgeTileEntity#getRenderBoundingBox()} and\n+ * {@link IForgeTileEntity#canRenderBreaking()}.\n+ */\n+@Mixin(WorldRenderer.class)\n+public class MixinWorldRenderer {\n+\t/////////////////////////////////////\n+\t/// renderEntities()\n+\t/////////////////////////////////////\n+\t// Redirect two calls.\n+\t@Redirect(method = \"renderEntities\", at = @At(value = \"INVOKE\",\n+\t\t\ttarget = \"net/minecraft/client/render/block/entity/BlockEntityRenderDispatcher.render(Lnet/minecraft/block/entity/BlockEntity;FI)V\"))\n+\tprivate void renderBlockEntityIfVisible(BlockEntityRenderDispatcher dispatcher, BlockEntity blockEntity, float tickDelta, int blockBreakStage,\n+\t\t\tCamera camera, VisibleRegion visibleRegion, float tickDeltaParam) {\n+\t\tIForgeTileEntity te = (IForgeTileEntity) blockEntity;\n+\n+\t\tif (visibleRegion.intersects(te.getRenderBoundingBox())) {\n+\t\t\tdispatcher.render(blockEntity, tickDeltaParam, blockBreakStage);\n+\t\t}\n+\t}\n+\n+\t/////////////////////////////////////\n+\t/// renderPartiallyBrokenBlocks()\n+\t/////////////////////////////////////\n+\t@Shadow\n+\tprivate ClientWorld world;\n+\t@Unique\n+\tprivate static final ThreadLocal<BlockPos> blockPosParam = ThreadLocal.withInitial(() -> null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5656424e74bb367cab6a017fd93e48baceff822a"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3938c9ba874fba7181b0fd4b5dd04b5ab830aa47", "author": {"user": {"login": "rikka0w0", "name": "Rikka0_0\u5c0f\u516d\u82b1"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/3938c9ba874fba7181b0fd4b5dd04b5ab830aa47", "committedDate": "2020-08-17T11:04:43Z", "message": "Resolve merge conflicts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4ODM3MjQx", "url": "https://github.com/PatchworkMC/patchwork-api/pull/162#pullrequestreview-468837241", "createdAt": "2020-08-17T21:14:15Z", "commit": {"oid": "3938c9ba874fba7181b0fd4b5dd04b5ab830aa47"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 952, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}