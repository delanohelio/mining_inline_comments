{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1MDkzNzQz", "number": 174, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMTowMjoxM1rOEYnbcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMTowOTowM1rOEYnh7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjQ3MjgyOnYy", "diffSide": "RIGHT", "path": "patchwork-extensions-block/src/main/java/net/patchworkmc/mixin/extensions/block/harvest/MixinClientPlayerInteractionManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMTowMjoxM1rOHBDO5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMTowMjoxM1rOHBDO5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg2MzU5MA==", "bodyText": "Go ahead and just remove this.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/174#discussion_r470863590", "createdAt": "2020-08-14T21:02:13Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-extensions-block/src/main/java/net/patchworkmc/mixin/extensions/block/harvest/MixinClientPlayerInteractionManager.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.extensions.block.harvest;\n+\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import net.minecraftforge.common.extensions.IForgeBlockState;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientPlayerInteractionManager;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.fluid.FluidState;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import net.patchworkmc.impl.extensions.block.Signatures;\n+\n+// This is a 1.15+ patch, should not be used in 1.14.4", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf8a880b613b1db0959065b8366ca5810e122b5e"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjQ4OTQzOnYy", "diffSide": "RIGHT", "path": "patchwork-extensions-block/src/main/java/net/patchworkmc/mixin/extensions/block/harvest/MixinServerPlayerInteractionManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMTowOTowM1rOHBDYxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMTowOTowM1rOHBDYxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg2NjExNg==", "bodyText": "I don't think this needs to be a redirect. One option could be to @slice from the isCreative check and inject at RETURN ordinal = 0.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/174#discussion_r470866116", "createdAt": "2020-08-14T21:09:03Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-extensions-block/src/main/java/net/patchworkmc/mixin/extensions/block/harvest/MixinServerPlayerInteractionManager.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.extensions.block.harvest;\n+\n+import javax.annotation.Nullable;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+import net.minecraftforge.common.extensions.IForgeBlockState;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.server.network.ServerPlayerEntity;\n+import net.minecraft.server.network.ServerPlayerInteractionManager;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.GameMode;\n+import net.minecraft.world.IWorld;\n+import net.minecraft.world.World;\n+\n+import net.patchworkmc.impl.extensions.block.BlockContext;\n+import net.patchworkmc.impl.extensions.block.BlockHarvestManager;\n+import net.patchworkmc.impl.extensions.block.Signatures;\n+\n+@Mixin(ServerPlayerInteractionManager.class)\n+public abstract class MixinServerPlayerInteractionManager {\n+\t// removedByPlayer, canHarvestBlock\n+\n+\t@Unique\n+\tprivate boolean patchwork$removeBlock(BlockPos pos, boolean canHarvest) {\n+\t\tServerPlayerInteractionManager me = (ServerPlayerInteractionManager) (Object) this;\n+\t\tBlockState state = me.world.getBlockState(pos);\n+\t\tboolean removed = ((IForgeBlockState) state).removedByPlayer(me.world, pos, me.player, canHarvest, me.world.getFluidState(pos));\n+\n+\t\tif (removed) {\n+\t\t\tstate.getBlock().onBroken(me.world, pos, state);\n+\t\t}\n+\n+\t\treturn removed;\n+\t}\n+\n+\t/////////////////////////////////////\n+\t/// Fire BlockEvent.BreakEvent,\n+\t/// get the amount of exp to drop.\n+\t/////////////////////////////////////\n+\t@Shadow\n+\tpublic ServerWorld world;\n+\t@Shadow\n+\tpublic ServerPlayerEntity player;\n+\t@Shadow\n+\tprivate GameMode gameMode;\n+\n+\t@Inject(method = \"tryBreakBlock\", at = @At(\"HEAD\"), cancellable = true)\n+\tprivate void hookBreakBlock(BlockPos pos, CallbackInfoReturnable<Boolean> callback) {\n+\t\tint exp = BlockHarvestManager.onBlockBreakEvent(world, gameMode, player, pos);\n+\n+\t\tif (exp < 0) {\n+\t\t\tcallback.setReturnValue(false);\n+\t\t} else {\n+\t\t\tBlockHarvestManager.pushExpDropStack(exp);\n+\t\t}\n+\t}\n+\n+\t/////////////////////////////////////\n+\t@Redirect(method = \"tryBreakBlock\", at = @At(value = \"INVOKE\", target = Signatures.Block_onBreak, ordinal = 0))\n+\tprivate void patchwork$tryBreakBlock_onBreak(Block block, World world, BlockPos pos, BlockState state, PlayerEntity player) {\n+\t\t// Suppress this call\n+\t}\n+\n+\t@Redirect(method = \"tryBreakBlock\", at = @At(value = \"INVOKE\", target = Signatures.ServerWorld_removeBlock, ordinal = 0))\n+\tprivate boolean patchwork$tryBreakBlock_removeBlock(ServerWorld world, BlockPos pos, boolean bool) {\n+\t\treturn true; // bypass if (bl && bl2) {\n+\t}\n+\n+\t@Redirect(method = \"tryBreakBlock\", at = @At(value = \"INVOKE\", target = Signatures.Block_onBroken, ordinal = 0))\n+\tprivate void patchwork$tryBreakBlock_onBroken(Block block, IWorld world, BlockPos pos, BlockState state) {\n+\t\t// Suppress this call\n+\t}\n+\n+\t@Redirect(method = \"tryBreakBlock\", at = @At(value = \"INVOKE\", target = Signatures.ServerPlayerInteractionManager_isCreative, ordinal = 0))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf8a880b613b1db0959065b8366ca5810e122b5e"}, "originalPosition": 105}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1444, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}