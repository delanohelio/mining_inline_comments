{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5MTQxOTc1", "number": 105, "title": "Impl IForgeBlockState.hasTileEntity and createTileEntity", "bodyText": "Implemented BlockState sensitive version of IForgeBlockState.hasTileEntity and IForgeBlockState.createTileEntity\nIn vanilla code, they use both Block.hasBlockEntity and instanceof BlockEntityProvider to check the if a block has blockentity, then BlockEntityProvider.createBlockEntity() is called to get the BlockEntity instance.\nIn forge, modders are advised to call IForgeBlockState.hasTileEntity(BlockState) and override IForgeBlockState.createTileEntity(BlockState, BlockView). Vanilla Block.hasBlockEntity is marked as deprecated, and all calls are redirected to IForgeBlockState.hasTileEntity(BlockState).\nIn this pr, all calls to Block.hasBlockEntity are redirected to a helper function, which then set the blockstate to a ThreadLocal and calls the vanilla Block.hasBlockEntity. The vanilla Block.hasBlockEntity are patched so that it first grab the blockstate from the ThreadLocal, if the context is not present (call from unpatched vanilla or fabric mods), the default blockstate of the block will be used. The return value comes from IForgeBlockState.hasTileEntity(BlockState). All instanceof BlockEntityProvider checks are replaced with \"Block.hasBlockEntity\".\nAll calls to BlockEntityProvider.createBlockEntity are redirected to IForgeBlock.createTileEntity, for vanilla and fabric mods, the default impl of \"IForgeBlock.createTileEntity\" calls \"BlockEntityProvider.createBlockEntity\", which should not cause any problem.\nIForgeBlockState.hasTileEntity(BlockState) and Block.hasBlockEntity will work flawlessly for both fabric and forge mods. But forge's blockentity providing blocks does not impl the BlockEntityProvider interface, which could lead to some problem when a fabric mod is attempting to cast a block into a BlockEntityProvider after checking it with Block.hasBlockEntity. But in Minecraft, all blockentity creation are handled by the world or the chunk, so I cannot image the case where a fabric mod directly calls BlockEntityProvider.createBlockEntity on a forge block. This should not be a problem as well.\nI tried to reduce the length of this PR, but this two functions require patches on ~15 vanilla files. This one might be one of the longest patch, the other one is IForgeBlockState.isAir().", "createdAt": "2020-06-24T11:22:54Z", "url": "https://github.com/PatchworkMC/patchwork-api/pull/105", "merged": true, "mergeCommit": {"oid": "83fd2796d04c9bbe0de3a0dd4a66e9a6874277a0"}, "closed": true, "closedAt": "2020-07-11T23:03:58Z", "author": {"login": "rikka0w0"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuX-QegH2gAyNDM5MTQxOTc1OjY3NWUyOWNhZWUwMWI4NTU5MWIwMmFmN2FkYmQ0ODRkOWI5MzJlOTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc0AewIAFqTQ0NjgzNDE1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "675e29caee01b85591b02af7adbd484d9b932e90", "author": {"user": {"login": "rikka0w0", "name": "Rikka0_0\u5c0f\u516d\u82b1"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/675e29caee01b85591b02af7adbd484d9b932e90", "committedDate": "2020-06-24T11:02:25Z", "message": "Impl IForgeBlockState.hasTileEntity and createTileEntity"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MTE5NzI3", "url": "https://github.com/PatchworkMC/patchwork-api/pull/105#pullrequestreview-437119727", "createdAt": "2020-06-25T01:58:24Z", "commit": {"oid": "675e29caee01b85591b02af7adbd484d9b932e90"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMTo1ODoyNFrOGoo4Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMjowODo0M1rOGopCWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2NTk5MQ==", "bodyText": "I don't understand what's going on here?", "url": "https://github.com/PatchworkMC/patchwork-api/pull/105#discussion_r445265991", "createdAt": "2020-06-25T01:58:24Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-extensions-block/README.MD", "diffHunk": "@@ -0,0 +1,31 @@\n+1. `IForgeBlockState.hasTileEntity` and `IForgeBlockState.createTileEntity`\n+\t// TODO Call locations: Patches: Block, Block*, PistonBlock*, RepeaterBlock*, WorldRenderer*, ChunkRenderer*, BlockArgumentParser*, FallingBlockEntity*, ChestBlockEntity*, HopperBlockEntity*, Explosion*, World*, WorldChunk*, ChunkRegion*, ChunkHolder*, Forge classes: ForgeHooks, FluidUtil, ForgeHooks*, VanillaInventoryCodeHooks*\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "675e29caee01b85591b02af7adbd484d9b932e90"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2Njg4Ng==", "bodyText": "use an IllegalStateException or some other RuntimeException subclass", "url": "https://github.com/PatchworkMC/patchwork-api/pull/105#discussion_r445266886", "createdAt": "2020-06-25T02:01:36Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-extensions-block/src/main/java/net/patchworkmc/impl/extensions/block/BlockContext.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.impl.extensions.block;\n+\n+import net.minecraftforge.common.extensions.IForgeBlock;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.Blocks;\n+\n+public class BlockContext {\n+\tprivate static final ThreadLocal<Object> hasBlockEntity_blockState = createContext();\n+\n+\t//////////////////////////////////////////////////////////////\n+\t/// Context helper\n+\t/// Pass parameters without using method args\n+\t/// Thread safe, but DOES NOT support recursive calls\n+\t/// It is the caller's responsibility to maintain the context\n+\t//////////////////////////////////////////////////////////////\n+\tprivate static final Object CLEAN_MARKER = new Object();\n+\n+\tpublic static ThreadLocal<Object> createContext() {\n+\t\treturn ThreadLocal.withInitial(() -> BlockContext.CLEAN_MARKER);\n+\t}\n+\n+\tpublic static void pushContext(ThreadLocal<Object> stack, Object value) {\n+\t\tObject oldValue = stack.get();\n+\n+\t\tif (oldValue != CLEAN_MARKER) {\n+\t\t\tthrow new RuntimeException(\"The context is not clean.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "675e29caee01b85591b02af7adbd484d9b932e90"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2NzQ2NA==", "bodyText": "Calling this a \"stack\" and using related terminology seems like a misnomer as it only can hold one value.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/105#discussion_r445267464", "createdAt": "2020-06-25T02:04:13Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-extensions-block/src/main/java/net/patchworkmc/impl/extensions/block/BlockContext.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.impl.extensions.block;\n+\n+import net.minecraftforge.common.extensions.IForgeBlock;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.Blocks;\n+\n+public class BlockContext {\n+\tprivate static final ThreadLocal<Object> hasBlockEntity_blockState = createContext();\n+\n+\t//////////////////////////////////////////////////////////////\n+\t/// Context helper\n+\t/// Pass parameters without using method args\n+\t/// Thread safe, but DOES NOT support recursive calls\n+\t/// It is the caller's responsibility to maintain the context\n+\t//////////////////////////////////////////////////////////////\n+\tprivate static final Object CLEAN_MARKER = new Object();\n+\n+\tpublic static ThreadLocal<Object> createContext() {\n+\t\treturn ThreadLocal.withInitial(() -> BlockContext.CLEAN_MARKER);\n+\t}\n+\n+\tpublic static void pushContext(ThreadLocal<Object> stack, Object value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "675e29caee01b85591b02af7adbd484d9b932e90"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2NzY5Mw==", "bodyText": "Please don't hijack Blocks.CHEST for this unless it's absolutely needed.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/105#discussion_r445267693", "createdAt": "2020-06-25T02:05:13Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-extensions-block/src/main/java/net/patchworkmc/impl/extensions/block/BlockContext.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.impl.extensions.block;\n+\n+import net.minecraftforge.common.extensions.IForgeBlock;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.Blocks;\n+\n+public class BlockContext {\n+\tprivate static final ThreadLocal<Object> hasBlockEntity_blockState = createContext();\n+\n+\t//////////////////////////////////////////////////////////////\n+\t/// Context helper\n+\t/// Pass parameters without using method args\n+\t/// Thread safe, but DOES NOT support recursive calls\n+\t/// It is the caller's responsibility to maintain the context\n+\t//////////////////////////////////////////////////////////////\n+\tprivate static final Object CLEAN_MARKER = new Object();\n+\n+\tpublic static ThreadLocal<Object> createContext() {\n+\t\treturn ThreadLocal.withInitial(() -> BlockContext.CLEAN_MARKER);\n+\t}\n+\n+\tpublic static void pushContext(ThreadLocal<Object> stack, Object value) {\n+\t\tObject oldValue = stack.get();\n+\n+\t\tif (oldValue != CLEAN_MARKER) {\n+\t\t\tthrow new RuntimeException(\"The context is not clean.\");\n+\t\t}\n+\n+\t\tstack.set(value);\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static <T> T getContext(ThreadLocal<Object> stack) {\n+\t\tObject oldValue = stack.get();\n+\n+\t\tif (oldValue == CLEAN_MARKER) {\n+\t\t\tthrow new RuntimeException(\"The context is not set.\");\n+\t\t}\n+\n+\t\treturn (T) stack.get();\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static <T> T getContextOr(ThreadLocal<Object> stack, T defaultValue) {\n+\t\tObject value = stack.get();\n+\n+\t\tif (value == CLEAN_MARKER) {\n+\t\t\treturn defaultValue;\n+\t\t} else {\n+\t\t\treturn (T) value;\n+\t\t}\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static <T> T popContext(ThreadLocal<Object> stack) {\n+\t\tObject oldValue = stack.get();\n+\n+\t\tif (oldValue == CLEAN_MARKER) {\n+\t\t\tthrow new RuntimeException(\"The context is not set.\");\n+\t\t}\n+\n+\t\tstack.set(CLEAN_MARKER);\n+\n+\t\treturn (T) oldValue;\n+\t}\n+\n+\t///////////////////////////////////////////////////////\n+\t/// Block.hasBlockEntity()\n+\t///////////////////////////////////////////////////////\n+\t/**\n+\t * Called by mixin methods.\n+\t * @param blockState\n+\t * @return\n+\t */\n+\tpublic static boolean hasBlockEntity(BlockState blockState) {\n+\t\tpushContext(hasBlockEntity_blockState, blockState);\n+\t\tBlock block = blockState.getBlock();\n+\t\tboolean ret = block.hasBlockEntity();\n+\t\tpopContext(hasBlockEntity_blockState);\n+\t\treturn ret;\n+\t}\n+\n+\t/**\n+\t * Called by vanilla Block Class, as a wrapper which redirects the call to Forge's BlockState sensitive version.\n+\t * @param forgeBlock\n+\t * @return\n+\t */\n+\tpublic static boolean block_hasBlockEntity(IForgeBlock forgeBlock) {\n+\t\tBlockState blockState = getContextOr(hasBlockEntity_blockState, forgeBlock.getBlock().getDefaultState());\n+\n+\t\treturn forgeBlock.hasTileEntity(blockState);\n+\t}\n+\n+\t/**\n+\t * Called by mixin methods. The return value is used to pass the vanilla Block.hasBlockEntity or block instanceof BlockEntityProvider.\n+\t * @param hasBlockEntity\n+\t * @return Blocks.CHEST (Always have a BlockEntity) if hasBlockEntity is true, otherwise Blocks.AIR (impossible to host BlockEntity)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "675e29caee01b85591b02af7adbd484d9b932e90"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2ODU2OQ==", "bodyText": "this can be @Unique", "url": "https://github.com/PatchworkMC/patchwork-api/pull/105#discussion_r445268569", "createdAt": "2020-06-25T02:08:43Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-extensions-block/src/main/java/net/patchworkmc/mixin/extensions/block/MixinWorldChunk.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.extensions.block;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Constant;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.ModifyConstant;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+import net.minecraftforge.common.extensions.IForgeBlockState;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockEntityProvider;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.BlockView;\n+import net.minecraft.world.chunk.ChunkSection;\n+import net.minecraft.world.chunk.WorldChunk;\n+\n+import net.patchworkmc.impl.extensions.block.BlockContext;\n+import net.patchworkmc.impl.extensions.block.Signatures;\n+\n+@Mixin(WorldChunk.class)\n+public abstract class MixinWorldChunk {\n+\t/**\n+\t * @param blockState\n+\t * @return the blockEntity created by IForgeBlock.createTileEntity(BlockState, World)\n+\t * , null if the block(blockstate) does not have a BlockEntity\n+\t */\n+\tprivate BlockEntity patchwork_createBlockEntity(BlockState blockState) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "675e29caee01b85591b02af7adbd484d9b932e90"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bc6d82f3c31ae9ffd96aded955e4c04b8c8b299", "author": {"user": {"login": "rikka0w0", "name": "Rikka0_0\u5c0f\u516d\u82b1"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/9bc6d82f3c31ae9ffd96aded955e4c04b8c8b299", "committedDate": "2020-07-01T07:29:09Z", "message": "Rename methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "037dfe49f09a2eb1057e2bd02ffd1362633b4e65", "author": {"user": {"login": "rikka0w0", "name": "Rikka0_0\u5c0f\u516d\u82b1"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/037dfe49f09a2eb1057e2bd02ffd1362633b4e65", "committedDate": "2020-07-01T07:33:44Z", "message": "Update README.MD"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86f8ff7c553e6a58dd945171e16e0e25516440d7", "author": {"user": {"login": "rikka0w0", "name": "Rikka0_0\u5c0f\u516d\u82b1"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/86f8ff7c553e6a58dd945171e16e0e25516440d7", "committedDate": "2020-07-02T16:03:10Z", "message": "Move blockentity mixins to a separate package"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNTQzNjIz", "url": "https://github.com/PatchworkMC/patchwork-api/pull/105#pullrequestreview-442543623", "createdAt": "2020-07-03T19:34:30Z", "commit": {"oid": "86f8ff7c553e6a58dd945171e16e0e25516440d7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxOTozNDozMFrOGs23dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxOTozNDo0OFrOGs23oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4OTQ2Mg==", "bodyText": "3 for an ordinal is a bit high. Can you use an @Slice(from=@At(...)) here to bring that down?", "url": "https://github.com/PatchworkMC/patchwork-api/pull/105#discussion_r449689462", "createdAt": "2020-07-03T19:34:30Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-extensions-block/src/main/java/net/patchworkmc/mixin/extensions/block/blockentity/MixinSpongeBlock.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.extensions.block.blockentity;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.SpongeBlock;\n+\n+import net.patchworkmc.impl.extensions.block.BlockContext;\n+import net.patchworkmc.impl.extensions.block.Signatures;\n+\n+@Mixin(SpongeBlock.class)\n+public abstract class MixinSpongeBlock {\n+\t@Redirect(method = \"absorbWater\", at = @At(value = \"INVOKE\", target = Signatures.BlockState_getBlock, ordinal = 3))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86f8ff7c553e6a58dd945171e16e0e25516440d7"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4OTUwNQ==", "bodyText": "@Unique", "url": "https://github.com/PatchworkMC/patchwork-api/pull/105#discussion_r449689505", "createdAt": "2020-07-03T19:34:48Z", "author": {"login": "TheGlitch76"}, "path": "patchwork-extensions-block/src/main/java/net/patchworkmc/mixin/extensions/block/blockentity/MixinWorldChunk.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.extensions.block.blockentity;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Constant;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.ModifyConstant;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+import net.minecraftforge.common.extensions.IForgeBlockState;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockEntityProvider;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.BlockView;\n+import net.minecraft.world.chunk.ChunkSection;\n+import net.minecraft.world.chunk.WorldChunk;\n+\n+import net.patchworkmc.impl.extensions.block.BlockContext;\n+import net.patchworkmc.impl.extensions.block.Signatures;\n+\n+@Mixin(WorldChunk.class)\n+public abstract class MixinWorldChunk {\n+\t/**\n+\t * @param blockState\n+\t * @return the blockEntity created by IForgeBlock.createTileEntity(BlockState, World)\n+\t * , null if the block(blockstate) does not have a BlockEntity\n+\t */\n+\t@Unique\n+\tprivate BlockEntity patchwork_createBlockEntity(BlockState blockState) {\n+\t\tBlockEntity blockEntity = null;\n+\n+\t\tif (BlockContext.hasBlockEntity(blockState)) {\n+\t\t\tWorldChunk me = (WorldChunk) (Object) this;\n+\t\t\tIForgeBlockState forgeBlockState = (IForgeBlockState) blockState;\n+\t\t\treturn forgeBlockState.createTileEntity(me.getWorld());\n+\t\t}\n+\n+\t\treturn blockEntity;\n+\t}\n+\n+\t////////////////////////\n+\t/// createBlockEntity()\n+\t////////////////////////\n+\t@Inject(method = \"createBlockEntity\", locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true, at = @At(value = \"INVOKE\", target = Signatures.BlockState_getBlock))\n+\tprivate void patchwork_createBlockEntity(BlockPos blockPos, CallbackInfoReturnable<BlockEntity> info, BlockState blockState) {\n+\t\tinfo.setReturnValue(patchwork_createBlockEntity(blockState));\n+\t\tinfo.cancel();\n+\t}\n+\n+\t////////////////////////\n+\t/// loadBlockEntity\n+\t////////////////////////\n+\t// Block block = this.getBlockState(pos).getBlock();\n+\t// if (block instanceof BlockEntityProvider) {\n+\t//     blockEntity3 = ((BlockEntityProvider)block).createBlockEntity(this.world);\n+\tprivate static final ThreadLocal<Object> loadBlockEntity_blockEntity = BlockContext.createContext();\n+\t@Redirect(method = \"loadBlockEntity\", at = @At(value = \"INVOKE\", target = Signatures.BlockState_getBlock, ordinal = 0))\n+\tprivate Block patchwork_loadBlockEntity_getBlock(BlockState blockState) {\n+\t\tBlockEntity blockEntity = patchwork_createBlockEntity(blockState);\n+\n+\t\tif (blockEntity != null) {\n+\t\t\tBlockContext.setContext(loadBlockEntity_blockEntity, blockEntity);\n+\t\t}\n+\n+\t\treturn BlockContext.hasBlockEntityBlockMarker(blockEntity != null);\n+\t}\n+\n+\t@Redirect(method = \"loadBlockEntity\", at = @At(value = \"INVOKE\", target = Signatures.BlockEntityProvider_createBlockEntity, ordinal = 0))\n+\tprivate BlockEntity patchwork_loadBlockEntity_createBlockEntity(BlockEntityProvider dummy, BlockView view) {\n+\t\tBlockEntity blockEntity = BlockContext.releaseContext(loadBlockEntity_blockEntity);\n+\t\treturn blockEntity;\n+\t}\n+\n+\t////////////////////////\n+\t/// setBlockState()\n+\t////////////////////////\n+\tprivate static final ThreadLocal<Object> loadBlockEntity_blockState2 = BlockContext.createContext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86f8ff7c553e6a58dd945171e16e0e25516440d7"}, "originalPosition": 101}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b979e6ea7198e0e527ce375427c57feb877142a8", "author": {"user": {"login": "rikka0w0", "name": "Rikka0_0\u5c0f\u516d\u82b1"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/b979e6ea7198e0e527ce375427c57feb877142a8", "committedDate": "2020-07-03T20:54:54Z", "message": "Add missing @Unique"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7eb7e17a9dd1482dcf2455878895088dadf08c8d", "author": {"user": {"login": "rikka0w0", "name": "Rikka0_0\u5c0f\u516d\u82b1"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/7eb7e17a9dd1482dcf2455878895088dadf08c8d", "committedDate": "2020-07-03T21:24:13Z", "message": "Readme.md"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2ODM0MTU1", "url": "https://github.com/PatchworkMC/patchwork-api/pull/105#pullrequestreview-446834155", "createdAt": "2020-07-11T23:03:44Z", "commit": {"oid": "7eb7e17a9dd1482dcf2455878895088dadf08c8d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1176, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}