{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwODIxMjU1", "number": 71, "title": "DataGatherEvent + ExistingFileHelper", "bodyText": "DataGatherEvent in existing module patchwork-events-lifecycle\n\n\nExistingFileHelper in a new module patchwork-model\n\n\nDataGatherEvent#DataGeneratorConfig#runAll is no-op for now.\n\n\nFurther decisions can be made, such as injecting into net.minecraft.data.Main for generating data with patchwork too?\n\n\nCleaned up comments\n\n\nTest mod/mechanism not yet decided.", "createdAt": "2020-05-20T15:18:29Z", "url": "https://github.com/PatchworkMC/patchwork-api/pull/71", "merged": true, "mergeCommit": {"oid": "4f71b11f3acf6162a699be30d6e6d29b8b44504d"}, "closed": true, "closedAt": "2020-05-21T04:50:55Z", "author": {"login": "Rongmario"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjKn8tgH2gAyNDIwODIxMjU1OjI2YWQ3OWE2Yjk5ODMxNWFjYWIxMDlmNDkzMzEyMTYxOWY4Y2FlNDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjWRfjgFqTQxNTg3NjMwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "26ad79a6b998315acab109f4933121619f8cae47", "author": {"user": {"login": "Rongmario", "name": "Rongmario"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/26ad79a6b998315acab109f4933121619f8cae47", "committedDate": "2020-05-20T15:16:07Z", "message": "DataGatherEvent + ExistingFileHelper\n\n- DataGatherEvent in existing module `patchwork-events-lifecycle`\n- ExistingFileHelper in a new module `patchwork-model`\n- DataGatherEvent#DataGeneratorConfig#runAll is no-op for now.\n- Further decisions can be made, such as injecting into `net.minecraft.data.Main` for generating data with patchwork too?\n- Cleaned up comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NDYwMTU2", "url": "https://github.com/PatchworkMC/patchwork-api/pull/71#pullrequestreview-415460156", "createdAt": "2020-05-20T15:32:13Z", "commit": {"oid": "26ad79a6b998315acab109f4933121619f8cae47"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c690287442a36c5a64d16f29304c43f475686057", "author": {"user": {"login": "Rongmario", "name": "Rongmario"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/c690287442a36c5a64d16f29304c43f475686057", "committedDate": "2020-05-20T16:41:00Z", "message": "Cleanup\n\n- In you go - `patchwork-data-generators`\n- Include run calls in runAll"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NTM0NjQ0", "url": "https://github.com/PatchworkMC/patchwork-api/pull/71#pullrequestreview-415534644", "createdAt": "2020-05-20T16:55:19Z", "commit": {"oid": "c690287442a36c5a64d16f29304c43f475686057"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjo1NToyMFrOGYVJag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNzowODo1NVrOGYVp3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE2NTQ4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              \"description\": \"Implementation of the Forge's Data Generators.\",\n          \n          \n            \n              \"description\": \"Implementation of Minecraft Forge's Data Generators.\",", "url": "https://github.com/PatchworkMC/patchwork-api/pull/71#discussion_r428165482", "createdAt": "2020-05-20T16:55:20Z", "author": {"login": "coderbot16"}, "path": "patchwork-data-generators/src/main/resources/fabric.mod.json", "diffHunk": "@@ -0,0 +1,25 @@\n+{\n+  \"schemaVersion\": 1,\n+  \"id\": \"patchwork-data-generators\",\n+  \"name\": \"Patchwork Data Generators\",\n+  \"version\": \"${version}\",\n+  \"license\": \"LGPL-2.1-only\",\n+  \"icon\": \"assets/patchwork-data-generators/icon.png\",\n+  \"contact\": {\n+    \"issues\": \"https://github.com/PatchworkMC/patchwork-api/issues\",\n+    \"sources\": \"https://github.com/PatchworkMC/patchwork-api\"\n+  },\n+  \"authors\": [\n+    \"PatchworkMC\"\n+  ],\n+  \"depends\": {\n+    \"fabricloader\": \">=0.8.4\"\n+  },\n+  \"mixins\": [\n+  ],\n+  \"description\": \"Implementation of the Forge's Data Generators.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c690287442a36c5a64d16f29304c43f475686057"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE2NzYwMg==", "bodyText": "Is this needed?", "url": "https://github.com/PatchworkMC/patchwork-api/pull/71#discussion_r428167602", "createdAt": "2020-05-20T16:58:36Z", "author": {"login": "coderbot16"}, "path": "patchwork-data-generators/build.gradle", "diffHunk": "@@ -0,0 +1,7 @@\n+archivesBaseName = \"patchwork-data-generators\"\n+version = getSubprojectVersion(project, \"0.1.0\")\n+\n+dependencies {\n+\tcompile project(path: ':patchwork-events-lifecycle', configuration: 'dev')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c690287442a36c5a64d16f29304c43f475686057"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE2OTIwNQ==", "bodyText": "This field can be final too\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tprivate List<DataGenerator> generators = new ArrayList<>();\n          \n          \n            \n            \t\tprivate final List<DataGenerator> generators = new ArrayList<>();", "url": "https://github.com/PatchworkMC/patchwork-api/pull/71#discussion_r428169205", "createdAt": "2020-05-20T17:01:08Z", "author": {"login": "coderbot16"}, "path": "patchwork-data-generators/src/main/java/net/minecraftforge/fml/event/lifecycle/GatherDataEvent.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.fml.event.lifecycle;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import net.minecraftforge.client.model.generators.ExistingFileHelper;\n+import net.minecraftforge.fml.ModContainer;\n+\n+import net.minecraft.data.DataGenerator;\n+\n+public class GatherDataEvent extends ModLifecycleEvent {\n+\tprivate final DataGenerator dataGenerator;\n+\tprivate final DataGeneratorConfig config;\n+\tprivate final ExistingFileHelper existingFileHelper;\n+\n+\tpublic GatherDataEvent(final ModContainer modContainer, final DataGenerator dataGenerator, final DataGeneratorConfig dataGeneratorConfig, ExistingFileHelper existingFileHelper) {\n+\t\tsuper(modContainer);\n+\t\tthis.dataGenerator = dataGenerator;\n+\t\tthis.config = dataGeneratorConfig;\n+\t\tthis.existingFileHelper = existingFileHelper;\n+\t}\n+\n+\tpublic DataGenerator getGenerator() {\n+\t\treturn this.dataGenerator;\n+\t}\n+\n+\tpublic ExistingFileHelper getExistingFileHelper() {\n+\t\treturn existingFileHelper;\n+\t}\n+\n+\tpublic boolean includeServer() {\n+\t\treturn this.config.server;\n+\t}\n+\n+\tpublic boolean includeClient() {\n+\t\treturn this.config.client;\n+\t}\n+\n+\tpublic boolean includeDev() {\n+\t\treturn this.config.dev;\n+\t}\n+\n+\tpublic boolean includeReports() {\n+\t\treturn this.config.reports;\n+\t}\n+\n+\tpublic boolean validate() {\n+\t\treturn this.config.validate;\n+\t}\n+\n+\tpublic static class DataGeneratorConfig {\n+\t\tprivate final Set<String> mods;\n+\t\tprivate final Path path;\n+\t\tprivate final Collection<Path> inputs;\n+\t\tprivate final boolean server;\n+\t\tprivate final boolean client;\n+\t\tprivate final boolean dev;\n+\t\tprivate final boolean reports;\n+\t\tprivate final boolean validate;\n+\t\tprivate List<DataGenerator> generators = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c690287442a36c5a64d16f29304c43f475686057"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE3MDE3Mw==", "bodyText": "It appears that the Forge implementation uses a weird trick to throw this IOException in an unchecked manner. The way that it's done is kind of ugly though, I wonder if there's a way around it:\n@SuppressWarnings (\"unchecked\")\nprivate static <E extends Throwable> void throwAsUnchecked(Exception exception) throws E { throw (E)exception; }\nTechnically we can just add a throws IOException on here since mods shouldn't be calling this method directly.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/71#discussion_r428170173", "createdAt": "2020-05-20T17:02:43Z", "author": {"login": "coderbot16"}, "path": "patchwork-data-generators/src/main/java/net/minecraftforge/fml/event/lifecycle/GatherDataEvent.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.fml.event.lifecycle;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import net.minecraftforge.client.model.generators.ExistingFileHelper;\n+import net.minecraftforge.fml.ModContainer;\n+\n+import net.minecraft.data.DataGenerator;\n+\n+public class GatherDataEvent extends ModLifecycleEvent {\n+\tprivate final DataGenerator dataGenerator;\n+\tprivate final DataGeneratorConfig config;\n+\tprivate final ExistingFileHelper existingFileHelper;\n+\n+\tpublic GatherDataEvent(final ModContainer modContainer, final DataGenerator dataGenerator, final DataGeneratorConfig dataGeneratorConfig, ExistingFileHelper existingFileHelper) {\n+\t\tsuper(modContainer);\n+\t\tthis.dataGenerator = dataGenerator;\n+\t\tthis.config = dataGeneratorConfig;\n+\t\tthis.existingFileHelper = existingFileHelper;\n+\t}\n+\n+\tpublic DataGenerator getGenerator() {\n+\t\treturn this.dataGenerator;\n+\t}\n+\n+\tpublic ExistingFileHelper getExistingFileHelper() {\n+\t\treturn existingFileHelper;\n+\t}\n+\n+\tpublic boolean includeServer() {\n+\t\treturn this.config.server;\n+\t}\n+\n+\tpublic boolean includeClient() {\n+\t\treturn this.config.client;\n+\t}\n+\n+\tpublic boolean includeDev() {\n+\t\treturn this.config.dev;\n+\t}\n+\n+\tpublic boolean includeReports() {\n+\t\treturn this.config.reports;\n+\t}\n+\n+\tpublic boolean validate() {\n+\t\treturn this.config.validate;\n+\t}\n+\n+\tpublic static class DataGeneratorConfig {\n+\t\tprivate final Set<String> mods;\n+\t\tprivate final Path path;\n+\t\tprivate final Collection<Path> inputs;\n+\t\tprivate final boolean server;\n+\t\tprivate final boolean client;\n+\t\tprivate final boolean dev;\n+\t\tprivate final boolean reports;\n+\t\tprivate final boolean validate;\n+\t\tprivate List<DataGenerator> generators = new ArrayList<>();\n+\n+\t\tpublic DataGeneratorConfig(final Set<String> mods, final Path path, final Collection<Path> inputs, final boolean server, final boolean client, final boolean dev, final boolean reports, final boolean validate) {\n+\t\t\tthis.mods = mods;\n+\t\t\tthis.path = path;\n+\t\t\tthis.inputs = inputs;\n+\t\t\tthis.server = server;\n+\t\t\tthis.client = client;\n+\t\t\tthis.dev = dev;\n+\t\t\tthis.reports = reports;\n+\t\t\tthis.validate = validate;\n+\t\t}\n+\n+\t\tpublic Set<String> getMods() {\n+\t\t\treturn mods;\n+\t\t}\n+\n+\t\tpublic DataGenerator makeGenerator(final Function<Path, Path> pathEnhancer, final boolean shouldExecute) {\n+\t\t\tfinal DataGenerator generator = new DataGenerator(pathEnhancer.apply(path), inputs);\n+\t\t\tif (shouldExecute) generators.add(generator);\n+\t\t\treturn generator;\n+\t\t}\n+\n+\t\tpublic void runAll() {\n+\t\t\tfor (DataGenerator generator : generators) {\n+\t\t\t\ttry {\n+\t\t\t\t\tgenerator.run();\n+\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\te.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c690287442a36c5a64d16f29304c43f475686057"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE3Mzc5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tif (shouldExecute) generators.add(generator);\n          \n          \n            \n            \n          \n          \n            \n            \t\t\tif (shouldExecute) {\n          \n          \n            \n            \t\t\t\tgenerators.add(generator);\n          \n          \n            \n            \t\t\t}", "url": "https://github.com/PatchworkMC/patchwork-api/pull/71#discussion_r428173790", "createdAt": "2020-05-20T17:08:55Z", "author": {"login": "coderbot16"}, "path": "patchwork-data-generators/src/main/java/net/minecraftforge/fml/event/lifecycle/GatherDataEvent.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.fml.event.lifecycle;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import net.minecraftforge.client.model.generators.ExistingFileHelper;\n+import net.minecraftforge.fml.ModContainer;\n+\n+import net.minecraft.data.DataGenerator;\n+\n+public class GatherDataEvent extends ModLifecycleEvent {\n+\tprivate final DataGenerator dataGenerator;\n+\tprivate final DataGeneratorConfig config;\n+\tprivate final ExistingFileHelper existingFileHelper;\n+\n+\tpublic GatherDataEvent(final ModContainer modContainer, final DataGenerator dataGenerator, final DataGeneratorConfig dataGeneratorConfig, ExistingFileHelper existingFileHelper) {\n+\t\tsuper(modContainer);\n+\t\tthis.dataGenerator = dataGenerator;\n+\t\tthis.config = dataGeneratorConfig;\n+\t\tthis.existingFileHelper = existingFileHelper;\n+\t}\n+\n+\tpublic DataGenerator getGenerator() {\n+\t\treturn this.dataGenerator;\n+\t}\n+\n+\tpublic ExistingFileHelper getExistingFileHelper() {\n+\t\treturn existingFileHelper;\n+\t}\n+\n+\tpublic boolean includeServer() {\n+\t\treturn this.config.server;\n+\t}\n+\n+\tpublic boolean includeClient() {\n+\t\treturn this.config.client;\n+\t}\n+\n+\tpublic boolean includeDev() {\n+\t\treturn this.config.dev;\n+\t}\n+\n+\tpublic boolean includeReports() {\n+\t\treturn this.config.reports;\n+\t}\n+\n+\tpublic boolean validate() {\n+\t\treturn this.config.validate;\n+\t}\n+\n+\tpublic static class DataGeneratorConfig {\n+\t\tprivate final Set<String> mods;\n+\t\tprivate final Path path;\n+\t\tprivate final Collection<Path> inputs;\n+\t\tprivate final boolean server;\n+\t\tprivate final boolean client;\n+\t\tprivate final boolean dev;\n+\t\tprivate final boolean reports;\n+\t\tprivate final boolean validate;\n+\t\tprivate List<DataGenerator> generators = new ArrayList<>();\n+\n+\t\tpublic DataGeneratorConfig(final Set<String> mods, final Path path, final Collection<Path> inputs, final boolean server, final boolean client, final boolean dev, final boolean reports, final boolean validate) {\n+\t\t\tthis.mods = mods;\n+\t\t\tthis.path = path;\n+\t\t\tthis.inputs = inputs;\n+\t\t\tthis.server = server;\n+\t\t\tthis.client = client;\n+\t\t\tthis.dev = dev;\n+\t\t\tthis.reports = reports;\n+\t\t\tthis.validate = validate;\n+\t\t}\n+\n+\t\tpublic Set<String> getMods() {\n+\t\t\treturn mods;\n+\t\t}\n+\n+\t\tpublic DataGenerator makeGenerator(final Function<Path, Path> pathEnhancer, final boolean shouldExecute) {\n+\t\t\tfinal DataGenerator generator = new DataGenerator(pathEnhancer.apply(path), inputs);\n+\t\t\tif (shouldExecute) generators.add(generator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c690287442a36c5a64d16f29304c43f475686057"}, "originalPosition": 103}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be50efd351896e7679d29634f90848199ed10d98", "author": {"user": {"login": "Rongmario", "name": "Rongmario"}}, "url": "https://github.com/PatchworkMC/patchwork-api/commit/be50efd351896e7679d29634f90848199ed10d98", "committedDate": "2020-05-20T17:33:43Z", "message": "Review Changes\n\n- Made it just 'Forge' to fit with other fabric.mod.json descriptions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NjQxMDI3", "url": "https://github.com/PatchworkMC/patchwork-api/pull/71#pullrequestreview-415641027", "createdAt": "2020-05-20T19:15:24Z", "commit": {"oid": "be50efd351896e7679d29634f90848199ed10d98"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1ODc2MzAw", "url": "https://github.com/PatchworkMC/patchwork-api/pull/71#pullrequestreview-415876300", "createdAt": "2020-05-21T04:50:27Z", "commit": {"oid": "be50efd351896e7679d29634f90848199ed10d98"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1109, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}