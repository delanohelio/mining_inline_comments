{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NjU1MzE1", "number": 47, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNToxMToxOFrODiNo-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNjoxNjo1NFrODiOEJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjAxNjU5OnYy", "diffSide": "RIGHT", "path": "patchwork-enum-hacks/src/main/java/net/minecraftforge/common/util/TriPredicate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNToxMToxOFrOFtV1Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNToxMToxOFrOFtV1Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA4Nzk3NA==", "bodyText": "Perhaps this would be more appropriate for another module, not sure though. This is probably fine for now if it's only used for spawn restrictions.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/47#discussion_r383087974", "createdAt": "2020-02-24T05:11:18Z", "author": {"login": "coderbot16"}, "path": "patchwork-enum-hacks/src/main/java/net/minecraftforge/common/util/TriPredicate.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\r\n+ * Minecraft Forge, Patchwork Project\r\n+ * Copyright (c) 2016-2020, 2019-2020\r\n+ *\r\n+ * This library is free software; you can redistribute it and/or\r\n+ * modify it under the terms of the GNU Lesser General Public\r\n+ * License as published by the Free Software Foundation version 2.1\r\n+ * of the License.\r\n+ *\r\n+ * This library is distributed in the hope that it will be useful,\r\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n+ * Lesser General Public License for more details.\r\n+ *\r\n+ * You should have received a copy of the GNU Lesser General Public\r\n+ * License along with this library; if not, write to the Free Software\r\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n+ */\r\n+\r\n+package net.minecraftforge.common.util;\r\n+\r\n+import java.util.Objects;\r\n+\r\n+/**\r\n+ * A predicate that takes three arguments and returns a boolean.\r\n+ */\r\n+@FunctionalInterface\r\n+public interface TriPredicate<T, U, V> {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d368a39c3e96306f9c5e914e27e8da2889ff99ef"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjAyNjk4OnYy", "diffSide": "RIGHT", "path": "patchwork-enum-hacks/src/main/java/com/patchworkmc/api/enumhacks/EnumHacks.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNToyMzoxMVrOFtV7Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMzoyNjozOFrOFtgghQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA4OTQ2Ng==", "bodyText": "We can probably avoid this cast?", "url": "https://github.com/PatchworkMC/patchwork-api/pull/47#discussion_r383089466", "createdAt": "2020-02-24T05:23:11Z", "author": {"login": "coderbot16"}, "path": "patchwork-enum-hacks/src/main/java/com/patchworkmc/api/enumhacks/EnumHacks.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\r\n+ * Minecraft Forge, Patchwork Project\r\n+ * Copyright (c) 2016-2020, 2019-2020\r\n+ *\r\n+ * This library is free software; you can redistribute it and/or\r\n+ * modify it under the terms of the GNU Lesser General Public\r\n+ * License as published by the Free Software Foundation version 2.1\r\n+ * of the License.\r\n+ *\r\n+ * This library is distributed in the hope that it will be useful,\r\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n+ * Lesser General Public License for more details.\r\n+ *\r\n+ * You should have received a copy of the GNU Lesser General Public\r\n+ * License along with this library; if not, write to the Free Software\r\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n+ */\r\n+\r\n+package com.patchworkmc.api.enumhacks;\r\n+\r\n+import java.lang.invoke.CallSite;\r\n+import java.lang.invoke.LambdaMetafactory;\r\n+import java.lang.invoke.MethodHandle;\r\n+import java.lang.invoke.MethodHandles;\r\n+import java.lang.invoke.MethodType;\r\n+import java.lang.reflect.Field;\r\n+import java.util.function.Predicate;\r\n+\r\n+import com.google.common.collect.ImmutableList;\r\n+import org.apache.commons.lang3.ArrayUtils;\r\n+import net.minecraftforge.common.util.TriPredicate;\r\n+\r\n+import net.minecraft.block.BlockState;\r\n+import net.minecraft.block.entity.BannerPattern;\r\n+import net.minecraft.enchantment.EnchantmentTarget;\r\n+import net.minecraft.entity.EntityCategory;\r\n+import net.minecraft.entity.EntityType;\r\n+import net.minecraft.entity.SpawnRestriction;\r\n+import net.minecraft.item.Item;\r\n+import net.minecraft.item.ItemStack;\r\n+import net.minecraft.structure.pool.StructurePool;\r\n+import net.minecraft.structure.processor.StructureProcessor;\r\n+import net.minecraft.util.Formatting;\r\n+import net.minecraft.util.Rarity;\r\n+import net.minecraft.util.math.BlockPos;\r\n+import net.minecraft.world.ViewableWorld;\r\n+import net.minecraft.world.gen.feature.OreFeatureConfig;\r\n+\r\n+import com.patchworkmc.impl.enumhacks.HackableEnum;\r\n+import com.patchworkmc.impl.enumhacks.PatchworkEnchantmentTarget;\r\n+import com.patchworkmc.impl.enumhacks.PatchworkSpawnRestrictionLocation;\r\n+import com.patchworkmc.mixin.enumhacks.BannerPatternAccessor;\r\n+import com.patchworkmc.mixin.enumhacks.EntityCategoryAccessor;\r\n+import com.patchworkmc.mixin.enumhacks.OreFeatureConfigTargetAccessor;\r\n+import com.patchworkmc.mixin.enumhacks.RarityAccessor;\r\n+import com.patchworkmc.mixin.enumhacks.SpawnRestrictionLocationAccessor;\r\n+import com.patchworkmc.mixin.enumhacks.StructurePoolProjectionAccessor;\r\n+\r\n+/**\r\n+ * A bunch of awful, awful hacks to implement IExtensibleEnum.\r\n+ * No, seriously. These are AWFUL hacks. Especially EnchantmentTarget.\r\n+ * @author NuclearFarts\r\n+ */\r\n+public final class EnumHacks {\r\n+\tpublic EnumHacks() { }\r\n+\r\n+\tprivate static final EnchantmentTargetFactory ENCHANTMENT_TARGET_FACTORY;\r\n+\tprivate static final Field ENUM_CACHE;\r\n+\tprivate static final Field ENUM_DIRECTORY_CACHE;\r\n+\r\n+\tstatic {\r\n+\t\t// Enum values are cached on Class objects. Store the Fields to reset the caches.\r\n+\t\tboolean attemptDirectory = true;\r\n+\t\tField enumCache;\r\n+\r\n+\t\ttry {\r\n+\t\t\tenumCache = Class.class.getDeclaredField(\"enumConstants\");\r\n+\t\t} catch (NoSuchFieldException e) {\r\n+\t\t\t// don't blow up quite yet. we might be on openj9.\r\n+\t\t\ttry {\r\n+\t\t\t\tenumCache = Class.class.getDeclaredField(\"enumVars\");\r\n+\t\t\t\tattemptDirectory = false; // if we didn't go into the catch block, we're on openj9, which caches both in one object. don't look for the other one.\r\n+\t\t\t} catch (NoSuchFieldException e2) {\r\n+\t\t\t\t// we aren't on openj9 either. blow up.\r\n+\t\t\t\tthrow new RuntimeException(\"Problem getting enumConstants field\", e);\r\n+\t\t\t}\r\n+\t\t}\r\n+\r\n+\t\tENUM_CACHE = enumCache;\r\n+\t\tENUM_CACHE.setAccessible(true);\r\n+\r\n+\t\tif (attemptDirectory) {\r\n+\t\t\ttry {\r\n+\t\t\t\tENUM_DIRECTORY_CACHE = Class.class.getDeclaredField(\"enumConstantDirectory\");\r\n+\t\t\t\tENUM_DIRECTORY_CACHE.setAccessible(true);\r\n+\t\t\t} catch (NoSuchFieldException | SecurityException e) {\r\n+\t\t\t\tthrow new RuntimeException(\"Problem getting enumConstantDirectory field\", e);\r\n+\t\t\t}\r\n+\t\t} else {\r\n+\t\t\tENUM_DIRECTORY_CACHE = null;\r\n+\t\t}\r\n+\r\n+\t\t// We can't use a constructor accessor because we get around EnchantmentTarget being abstract by using EnchantmentTarget$1.\r\n+\t\t// EnchantmentTarget$1 is a private anonymous internal class and cannot be used as a return type. Mixin doesn't like that so @Coerce won't work for some reason.\r\n+\t\t// get a lookup that has access to EnchantmentTarget's private methods, including constructor.\r\n+\t\tMethodHandles.Lookup lookup = ((PatchworkEnchantmentTarget) EnchantmentTarget.ALL).patchwork_getEnchantmentTargetPrivateLookup();\r\n+\t\tMethodType type = MethodType.methodType(EnchantmentTarget.class, String.class, int.class);\r\n+\r\n+\t\ttry {\r\n+\t\t\tMethodHandle enchTargetCtor = lookup.findConstructor(EnchantmentTarget.ALL.getClass(), type.changeReturnType(void.class)); // ctors have void return internally\r\n+\t\t\t// LambdaMetafactory stuff is technically unnecessary but it means we don't have to catch Throwable every time we instantiate an EnchantmentTarget and I'd rather not do that.\r\n+\t\t\tCallSite site = LambdaMetafactory.metafactory(lookup, \"create\", MethodType.methodType(EnchantmentTargetFactory.class), type, enchTargetCtor, type);\r\n+\t\t\tENCHANTMENT_TARGET_FACTORY = (EnchantmentTargetFactory) site.getTarget().invoke();\r\n+\t\t} catch (Throwable e) {\r\n+\t\t\tthrow new RuntimeException(\"Could not get EnchantmentTarget constructor/set up factory\", e);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\tprivate static <T> void addToValues(T[] origArray, T newValue) {\r\n+\t\t((HackableEnum<T>) newValue).patchwork_setValues(ArrayUtils.add(origArray, newValue));\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d368a39c3e96306f9c5e914e27e8da2889ff99ef"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI2Mjg1Mw==", "bodyText": "I really don't see how this is avoidable? I need to cast to the interface to call the method.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/47#discussion_r383262853", "createdAt": "2020-02-24T13:26:38Z", "author": {"login": "TwilightFlower"}, "path": "patchwork-enum-hacks/src/main/java/com/patchworkmc/api/enumhacks/EnumHacks.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\r\n+ * Minecraft Forge, Patchwork Project\r\n+ * Copyright (c) 2016-2020, 2019-2020\r\n+ *\r\n+ * This library is free software; you can redistribute it and/or\r\n+ * modify it under the terms of the GNU Lesser General Public\r\n+ * License as published by the Free Software Foundation version 2.1\r\n+ * of the License.\r\n+ *\r\n+ * This library is distributed in the hope that it will be useful,\r\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n+ * Lesser General Public License for more details.\r\n+ *\r\n+ * You should have received a copy of the GNU Lesser General Public\r\n+ * License along with this library; if not, write to the Free Software\r\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n+ */\r\n+\r\n+package com.patchworkmc.api.enumhacks;\r\n+\r\n+import java.lang.invoke.CallSite;\r\n+import java.lang.invoke.LambdaMetafactory;\r\n+import java.lang.invoke.MethodHandle;\r\n+import java.lang.invoke.MethodHandles;\r\n+import java.lang.invoke.MethodType;\r\n+import java.lang.reflect.Field;\r\n+import java.util.function.Predicate;\r\n+\r\n+import com.google.common.collect.ImmutableList;\r\n+import org.apache.commons.lang3.ArrayUtils;\r\n+import net.minecraftforge.common.util.TriPredicate;\r\n+\r\n+import net.minecraft.block.BlockState;\r\n+import net.minecraft.block.entity.BannerPattern;\r\n+import net.minecraft.enchantment.EnchantmentTarget;\r\n+import net.minecraft.entity.EntityCategory;\r\n+import net.minecraft.entity.EntityType;\r\n+import net.minecraft.entity.SpawnRestriction;\r\n+import net.minecraft.item.Item;\r\n+import net.minecraft.item.ItemStack;\r\n+import net.minecraft.structure.pool.StructurePool;\r\n+import net.minecraft.structure.processor.StructureProcessor;\r\n+import net.minecraft.util.Formatting;\r\n+import net.minecraft.util.Rarity;\r\n+import net.minecraft.util.math.BlockPos;\r\n+import net.minecraft.world.ViewableWorld;\r\n+import net.minecraft.world.gen.feature.OreFeatureConfig;\r\n+\r\n+import com.patchworkmc.impl.enumhacks.HackableEnum;\r\n+import com.patchworkmc.impl.enumhacks.PatchworkEnchantmentTarget;\r\n+import com.patchworkmc.impl.enumhacks.PatchworkSpawnRestrictionLocation;\r\n+import com.patchworkmc.mixin.enumhacks.BannerPatternAccessor;\r\n+import com.patchworkmc.mixin.enumhacks.EntityCategoryAccessor;\r\n+import com.patchworkmc.mixin.enumhacks.OreFeatureConfigTargetAccessor;\r\n+import com.patchworkmc.mixin.enumhacks.RarityAccessor;\r\n+import com.patchworkmc.mixin.enumhacks.SpawnRestrictionLocationAccessor;\r\n+import com.patchworkmc.mixin.enumhacks.StructurePoolProjectionAccessor;\r\n+\r\n+/**\r\n+ * A bunch of awful, awful hacks to implement IExtensibleEnum.\r\n+ * No, seriously. These are AWFUL hacks. Especially EnchantmentTarget.\r\n+ * @author NuclearFarts\r\n+ */\r\n+public final class EnumHacks {\r\n+\tpublic EnumHacks() { }\r\n+\r\n+\tprivate static final EnchantmentTargetFactory ENCHANTMENT_TARGET_FACTORY;\r\n+\tprivate static final Field ENUM_CACHE;\r\n+\tprivate static final Field ENUM_DIRECTORY_CACHE;\r\n+\r\n+\tstatic {\r\n+\t\t// Enum values are cached on Class objects. Store the Fields to reset the caches.\r\n+\t\tboolean attemptDirectory = true;\r\n+\t\tField enumCache;\r\n+\r\n+\t\ttry {\r\n+\t\t\tenumCache = Class.class.getDeclaredField(\"enumConstants\");\r\n+\t\t} catch (NoSuchFieldException e) {\r\n+\t\t\t// don't blow up quite yet. we might be on openj9.\r\n+\t\t\ttry {\r\n+\t\t\t\tenumCache = Class.class.getDeclaredField(\"enumVars\");\r\n+\t\t\t\tattemptDirectory = false; // if we didn't go into the catch block, we're on openj9, which caches both in one object. don't look for the other one.\r\n+\t\t\t} catch (NoSuchFieldException e2) {\r\n+\t\t\t\t// we aren't on openj9 either. blow up.\r\n+\t\t\t\tthrow new RuntimeException(\"Problem getting enumConstants field\", e);\r\n+\t\t\t}\r\n+\t\t}\r\n+\r\n+\t\tENUM_CACHE = enumCache;\r\n+\t\tENUM_CACHE.setAccessible(true);\r\n+\r\n+\t\tif (attemptDirectory) {\r\n+\t\t\ttry {\r\n+\t\t\t\tENUM_DIRECTORY_CACHE = Class.class.getDeclaredField(\"enumConstantDirectory\");\r\n+\t\t\t\tENUM_DIRECTORY_CACHE.setAccessible(true);\r\n+\t\t\t} catch (NoSuchFieldException | SecurityException e) {\r\n+\t\t\t\tthrow new RuntimeException(\"Problem getting enumConstantDirectory field\", e);\r\n+\t\t\t}\r\n+\t\t} else {\r\n+\t\t\tENUM_DIRECTORY_CACHE = null;\r\n+\t\t}\r\n+\r\n+\t\t// We can't use a constructor accessor because we get around EnchantmentTarget being abstract by using EnchantmentTarget$1.\r\n+\t\t// EnchantmentTarget$1 is a private anonymous internal class and cannot be used as a return type. Mixin doesn't like that so @Coerce won't work for some reason.\r\n+\t\t// get a lookup that has access to EnchantmentTarget's private methods, including constructor.\r\n+\t\tMethodHandles.Lookup lookup = ((PatchworkEnchantmentTarget) EnchantmentTarget.ALL).patchwork_getEnchantmentTargetPrivateLookup();\r\n+\t\tMethodType type = MethodType.methodType(EnchantmentTarget.class, String.class, int.class);\r\n+\r\n+\t\ttry {\r\n+\t\t\tMethodHandle enchTargetCtor = lookup.findConstructor(EnchantmentTarget.ALL.getClass(), type.changeReturnType(void.class)); // ctors have void return internally\r\n+\t\t\t// LambdaMetafactory stuff is technically unnecessary but it means we don't have to catch Throwable every time we instantiate an EnchantmentTarget and I'd rather not do that.\r\n+\t\t\tCallSite site = LambdaMetafactory.metafactory(lookup, \"create\", MethodType.methodType(EnchantmentTargetFactory.class), type, enchTargetCtor, type);\r\n+\t\t\tENCHANTMENT_TARGET_FACTORY = (EnchantmentTargetFactory) site.getTarget().invoke();\r\n+\t\t} catch (Throwable e) {\r\n+\t\t\tthrow new RuntimeException(\"Could not get EnchantmentTarget constructor/set up factory\", e);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\tprivate static <T> void addToValues(T[] origArray, T newValue) {\r\n+\t\t((HackableEnum<T>) newValue).patchwork_setValues(ArrayUtils.add(origArray, newValue));\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA4OTQ2Ng=="}, "originalCommit": {"oid": "d368a39c3e96306f9c5e914e27e8da2889ff99ef"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjA2NDUwOnYy", "diffSide": "RIGHT", "path": "patchwork-enum-hacks/src/main/java/com/patchworkmc/api/enumhacks/EnumHacks.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNTo1NjowNFrOFtWPxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNTo1NjowNFrOFtWPxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA5NDcyNw==", "bodyText": "Most of this pattern is repeated a few times, is there a way to avoid the duplication?", "url": "https://github.com/PatchworkMC/patchwork-api/pull/47#discussion_r383094727", "createdAt": "2020-02-24T05:56:04Z", "author": {"login": "coderbot16"}, "path": "patchwork-enum-hacks/src/main/java/com/patchworkmc/api/enumhacks/EnumHacks.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\r\n+ * Minecraft Forge, Patchwork Project\r\n+ * Copyright (c) 2016-2020, 2019-2020\r\n+ *\r\n+ * This library is free software; you can redistribute it and/or\r\n+ * modify it under the terms of the GNU Lesser General Public\r\n+ * License as published by the Free Software Foundation version 2.1\r\n+ * of the License.\r\n+ *\r\n+ * This library is distributed in the hope that it will be useful,\r\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n+ * Lesser General Public License for more details.\r\n+ *\r\n+ * You should have received a copy of the GNU Lesser General Public\r\n+ * License along with this library; if not, write to the Free Software\r\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n+ */\r\n+\r\n+package com.patchworkmc.api.enumhacks;\r\n+\r\n+import java.lang.invoke.CallSite;\r\n+import java.lang.invoke.LambdaMetafactory;\r\n+import java.lang.invoke.MethodHandle;\r\n+import java.lang.invoke.MethodHandles;\r\n+import java.lang.invoke.MethodType;\r\n+import java.lang.reflect.Field;\r\n+import java.util.function.Predicate;\r\n+\r\n+import com.google.common.collect.ImmutableList;\r\n+import org.apache.commons.lang3.ArrayUtils;\r\n+import net.minecraftforge.common.util.TriPredicate;\r\n+\r\n+import net.minecraft.block.BlockState;\r\n+import net.minecraft.block.entity.BannerPattern;\r\n+import net.minecraft.enchantment.EnchantmentTarget;\r\n+import net.minecraft.entity.EntityCategory;\r\n+import net.minecraft.entity.EntityType;\r\n+import net.minecraft.entity.SpawnRestriction;\r\n+import net.minecraft.item.Item;\r\n+import net.minecraft.item.ItemStack;\r\n+import net.minecraft.structure.pool.StructurePool;\r\n+import net.minecraft.structure.processor.StructureProcessor;\r\n+import net.minecraft.util.Formatting;\r\n+import net.minecraft.util.Rarity;\r\n+import net.minecraft.util.math.BlockPos;\r\n+import net.minecraft.world.ViewableWorld;\r\n+import net.minecraft.world.gen.feature.OreFeatureConfig;\r\n+\r\n+import com.patchworkmc.impl.enumhacks.HackableEnum;\r\n+import com.patchworkmc.impl.enumhacks.PatchworkEnchantmentTarget;\r\n+import com.patchworkmc.impl.enumhacks.PatchworkSpawnRestrictionLocation;\r\n+import com.patchworkmc.mixin.enumhacks.BannerPatternAccessor;\r\n+import com.patchworkmc.mixin.enumhacks.EntityCategoryAccessor;\r\n+import com.patchworkmc.mixin.enumhacks.OreFeatureConfigTargetAccessor;\r\n+import com.patchworkmc.mixin.enumhacks.RarityAccessor;\r\n+import com.patchworkmc.mixin.enumhacks.SpawnRestrictionLocationAccessor;\r\n+import com.patchworkmc.mixin.enumhacks.StructurePoolProjectionAccessor;\r\n+\r\n+/**\r\n+ * A bunch of awful, awful hacks to implement IExtensibleEnum.\r\n+ * No, seriously. These are AWFUL hacks. Especially EnchantmentTarget.\r\n+ * @author NuclearFarts\r\n+ */\r\n+public final class EnumHacks {\r\n+\tpublic EnumHacks() { }\r\n+\r\n+\tprivate static final EnchantmentTargetFactory ENCHANTMENT_TARGET_FACTORY;\r\n+\tprivate static final Field ENUM_CACHE;\r\n+\tprivate static final Field ENUM_DIRECTORY_CACHE;\r\n+\r\n+\tstatic {\r\n+\t\t// Enum values are cached on Class objects. Store the Fields to reset the caches.\r\n+\t\tboolean attemptDirectory = true;\r\n+\t\tField enumCache;\r\n+\r\n+\t\ttry {\r\n+\t\t\tenumCache = Class.class.getDeclaredField(\"enumConstants\");\r\n+\t\t} catch (NoSuchFieldException e) {\r\n+\t\t\t// don't blow up quite yet. we might be on openj9.\r\n+\t\t\ttry {\r\n+\t\t\t\tenumCache = Class.class.getDeclaredField(\"enumVars\");\r\n+\t\t\t\tattemptDirectory = false; // if we didn't go into the catch block, we're on openj9, which caches both in one object. don't look for the other one.\r\n+\t\t\t} catch (NoSuchFieldException e2) {\r\n+\t\t\t\t// we aren't on openj9 either. blow up.\r\n+\t\t\t\tthrow new RuntimeException(\"Problem getting enumConstants field\", e);\r\n+\t\t\t}\r\n+\t\t}\r\n+\r\n+\t\tENUM_CACHE = enumCache;\r\n+\t\tENUM_CACHE.setAccessible(true);\r\n+\r\n+\t\tif (attemptDirectory) {\r\n+\t\t\ttry {\r\n+\t\t\t\tENUM_DIRECTORY_CACHE = Class.class.getDeclaredField(\"enumConstantDirectory\");\r\n+\t\t\t\tENUM_DIRECTORY_CACHE.setAccessible(true);\r\n+\t\t\t} catch (NoSuchFieldException | SecurityException e) {\r\n+\t\t\t\tthrow new RuntimeException(\"Problem getting enumConstantDirectory field\", e);\r\n+\t\t\t}\r\n+\t\t} else {\r\n+\t\t\tENUM_DIRECTORY_CACHE = null;\r\n+\t\t}\r\n+\r\n+\t\t// We can't use a constructor accessor because we get around EnchantmentTarget being abstract by using EnchantmentTarget$1.\r\n+\t\t// EnchantmentTarget$1 is a private anonymous internal class and cannot be used as a return type. Mixin doesn't like that so @Coerce won't work for some reason.\r\n+\t\t// get a lookup that has access to EnchantmentTarget's private methods, including constructor.\r\n+\t\tMethodHandles.Lookup lookup = ((PatchworkEnchantmentTarget) EnchantmentTarget.ALL).patchwork_getEnchantmentTargetPrivateLookup();\r\n+\t\tMethodType type = MethodType.methodType(EnchantmentTarget.class, String.class, int.class);\r\n+\r\n+\t\ttry {\r\n+\t\t\tMethodHandle enchTargetCtor = lookup.findConstructor(EnchantmentTarget.ALL.getClass(), type.changeReturnType(void.class)); // ctors have void return internally\r\n+\t\t\t// LambdaMetafactory stuff is technically unnecessary but it means we don't have to catch Throwable every time we instantiate an EnchantmentTarget and I'd rather not do that.\r\n+\t\t\tCallSite site = LambdaMetafactory.metafactory(lookup, \"create\", MethodType.methodType(EnchantmentTargetFactory.class), type, enchTargetCtor, type);\r\n+\t\t\tENCHANTMENT_TARGET_FACTORY = (EnchantmentTargetFactory) site.getTarget().invoke();\r\n+\t\t} catch (Throwable e) {\r\n+\t\t\tthrow new RuntimeException(\"Could not get EnchantmentTarget constructor/set up factory\", e);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\tprivate static <T> void addToValues(T[] origArray, T newValue) {\r\n+\t\t((HackableEnum<T>) newValue).patchwork_setValues(ArrayUtils.add(origArray, newValue));\r\n+\t}\r\n+\r\n+\tprivate static void clearCachedValues(Class<? extends Enum<?>> clazz) {\r\n+\t\ttry {\r\n+\t\t\tENUM_CACHE.set(clazz, null);\r\n+\r\n+\t\t\tif (ENUM_DIRECTORY_CACHE != null) {\r\n+\t\t\t\tENUM_DIRECTORY_CACHE.set(clazz, null);\r\n+\t\t\t}\r\n+\t\t} catch (IllegalArgumentException | IllegalAccessException e) {\r\n+\t\t\tthrow new RuntimeException(\"Exception clearing enum cache for class \" + clazz.getSimpleName(), e);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tpublic static Rarity createRarity(String name, Formatting formatting) {\r\n+\t\tRarity[] values = Rarity.values(); //each values call creates a copy of the array. avoid them.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d368a39c3e96306f9c5e914e27e8da2889ff99ef"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjA2NjY5OnYy", "diffSide": "RIGHT", "path": "patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/BannerPatternMixin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNTo1ODoyM1rOFtWRDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMzozNTo0OFrOFtgySA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA5NTA1Mw==", "bodyText": "This looks a bit better imo, same goes for other classes.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate static @Shadow @Final @Mutable BannerPattern[] field_11833;\n          \n          \n            \n            \t@Shadow @Final @Mutable \n          \n          \n            \n            \tprivate static BannerPattern[] field_11833;", "url": "https://github.com/PatchworkMC/patchwork-api/pull/47#discussion_r383095053", "createdAt": "2020-02-24T05:58:23Z", "author": {"login": "coderbot16"}, "path": "patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/BannerPatternMixin.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\r\n+ * Minecraft Forge, Patchwork Project\r\n+ * Copyright (c) 2016-2020, 2019-2020\r\n+ *\r\n+ * This library is free software; you can redistribute it and/or\r\n+ * modify it under the terms of the GNU Lesser General Public\r\n+ * License as published by the Free Software Foundation version 2.1\r\n+ * of the License.\r\n+ *\r\n+ * This library is distributed in the hope that it will be useful,\r\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n+ * Lesser General Public License for more details.\r\n+ *\r\n+ * You should have received a copy of the GNU Lesser General Public\r\n+ * License along with this library; if not, write to the Free Software\r\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n+ */\r\n+\r\n+package com.patchworkmc.mixin.enumhacks;\r\n+\r\n+import org.spongepowered.asm.mixin.Final;\r\n+import org.spongepowered.asm.mixin.Mixin;\r\n+import org.spongepowered.asm.mixin.Mutable;\r\n+import org.spongepowered.asm.mixin.Shadow;\r\n+\r\n+import net.minecraft.block.entity.BannerPattern;\r\n+\r\n+import com.patchworkmc.impl.enumhacks.HackableEnum;\r\n+\r\n+@Mixin(BannerPattern.class)\r\n+public class BannerPatternMixin implements HackableEnum<BannerPattern> {\r\n+\tprivate static @Shadow @Final @Mutable BannerPattern[] field_11833;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d368a39c3e96306f9c5e914e27e8da2889ff99ef"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI2NzQwMA==", "bodyText": "If I do that, checkstyle complains and wants each annotation on its own line. Not sure what to do there.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/47#discussion_r383267400", "createdAt": "2020-02-24T13:35:48Z", "author": {"login": "TwilightFlower"}, "path": "patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/BannerPatternMixin.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\r\n+ * Minecraft Forge, Patchwork Project\r\n+ * Copyright (c) 2016-2020, 2019-2020\r\n+ *\r\n+ * This library is free software; you can redistribute it and/or\r\n+ * modify it under the terms of the GNU Lesser General Public\r\n+ * License as published by the Free Software Foundation version 2.1\r\n+ * of the License.\r\n+ *\r\n+ * This library is distributed in the hope that it will be useful,\r\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n+ * Lesser General Public License for more details.\r\n+ *\r\n+ * You should have received a copy of the GNU Lesser General Public\r\n+ * License along with this library; if not, write to the Free Software\r\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n+ */\r\n+\r\n+package com.patchworkmc.mixin.enumhacks;\r\n+\r\n+import org.spongepowered.asm.mixin.Final;\r\n+import org.spongepowered.asm.mixin.Mixin;\r\n+import org.spongepowered.asm.mixin.Mutable;\r\n+import org.spongepowered.asm.mixin.Shadow;\r\n+\r\n+import net.minecraft.block.entity.BannerPattern;\r\n+\r\n+import com.patchworkmc.impl.enumhacks.HackableEnum;\r\n+\r\n+@Mixin(BannerPattern.class)\r\n+public class BannerPatternMixin implements HackableEnum<BannerPattern> {\r\n+\tprivate static @Shadow @Final @Mutable BannerPattern[] field_11833;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA5NTA1Mw=="}, "originalCommit": {"oid": "d368a39c3e96306f9c5e914e27e8da2889ff99ef"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjA2NzYzOnYy", "diffSide": "RIGHT", "path": "patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/EnchantmentTargetInnerMixin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNTo1OTozM1rOFtWRqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNTo1OTozM1rOFtWRqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA5NTIxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate void checkItem(Item item, CallbackInfoReturnable<Boolean> cir) {\n          \n          \n            \n            \tprivate void checkItem(Item item, CallbackInfoReturnable<Boolean> callback) {", "url": "https://github.com/PatchworkMC/patchwork-api/pull/47#discussion_r383095210", "createdAt": "2020-02-24T05:59:33Z", "author": {"login": "coderbot16"}, "path": "patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/EnchantmentTargetInnerMixin.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\r\n+ * Minecraft Forge, Patchwork Project\r\n+ * Copyright (c) 2016-2020, 2019-2020\r\n+ *\r\n+ * This library is free software; you can redistribute it and/or\r\n+ * modify it under the terms of the GNU Lesser General Public\r\n+ * License as published by the Free Software Foundation version 2.1\r\n+ * of the License.\r\n+ *\r\n+ * This library is distributed in the hope that it will be useful,\r\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n+ * Lesser General Public License for more details.\r\n+ *\r\n+ * You should have received a copy of the GNU Lesser General Public\r\n+ * License along with this library; if not, write to the Free Software\r\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n+ */\r\n+\r\n+package com.patchworkmc.mixin.enumhacks;\r\n+\r\n+import java.lang.invoke.MethodHandles;\r\n+import java.lang.invoke.MethodHandles.Lookup;\r\n+import java.util.function.Predicate;\r\n+\r\n+import org.spongepowered.asm.mixin.Mixin;\r\n+import org.spongepowered.asm.mixin.Unique;\r\n+import org.spongepowered.asm.mixin.injection.At;\r\n+import org.spongepowered.asm.mixin.injection.Inject;\r\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\r\n+\r\n+import net.minecraft.item.Item;\r\n+\r\n+import com.patchworkmc.impl.enumhacks.PatchworkEnchantmentTarget;\r\n+\r\n+@Mixin(targets = \"net.minecraft.enchantment.EnchantmentTarget$1\")\r\n+public class EnchantmentTargetInnerMixin implements PatchworkEnchantmentTarget {\r\n+\t@Unique\r\n+\tprivate boolean isPatchwork = false;\r\n+\r\n+\t@Unique\r\n+\tprivate Predicate<Item> predicate;\r\n+\r\n+\t// Have to use full signature or the annotation processor complains\r\n+\t@Inject(method = \"isAcceptableItem(Lnet/minecraft/item/Item;)Z\", at = @At(\"HEAD\"), cancellable = true)\r\n+\tprivate void checkItem(Item item, CallbackInfoReturnable<Boolean> cir) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d368a39c3e96306f9c5e914e27e8da2889ff99ef"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjA2ODA2OnYy", "diffSide": "RIGHT", "path": "patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/EnchantmentTargetInnerMixin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNjowMDowOFrOFtWR8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNjowMDowOFrOFtWR8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA5NTI4MQ==", "bodyText": "Generally we should be using the full signature for all mixin method targets, unfortunately we haven't really done that a lot of the time. Perhaps all the methods in this PR could use it as a start...", "url": "https://github.com/PatchworkMC/patchwork-api/pull/47#discussion_r383095281", "createdAt": "2020-02-24T06:00:08Z", "author": {"login": "coderbot16"}, "path": "patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/EnchantmentTargetInnerMixin.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\r\n+ * Minecraft Forge, Patchwork Project\r\n+ * Copyright (c) 2016-2020, 2019-2020\r\n+ *\r\n+ * This library is free software; you can redistribute it and/or\r\n+ * modify it under the terms of the GNU Lesser General Public\r\n+ * License as published by the Free Software Foundation version 2.1\r\n+ * of the License.\r\n+ *\r\n+ * This library is distributed in the hope that it will be useful,\r\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n+ * Lesser General Public License for more details.\r\n+ *\r\n+ * You should have received a copy of the GNU Lesser General Public\r\n+ * License along with this library; if not, write to the Free Software\r\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n+ */\r\n+\r\n+package com.patchworkmc.mixin.enumhacks;\r\n+\r\n+import java.lang.invoke.MethodHandles;\r\n+import java.lang.invoke.MethodHandles.Lookup;\r\n+import java.util.function.Predicate;\r\n+\r\n+import org.spongepowered.asm.mixin.Mixin;\r\n+import org.spongepowered.asm.mixin.Unique;\r\n+import org.spongepowered.asm.mixin.injection.At;\r\n+import org.spongepowered.asm.mixin.injection.Inject;\r\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\r\n+\r\n+import net.minecraft.item.Item;\r\n+\r\n+import com.patchworkmc.impl.enumhacks.PatchworkEnchantmentTarget;\r\n+\r\n+@Mixin(targets = \"net.minecraft.enchantment.EnchantmentTarget$1\")\r\n+public class EnchantmentTargetInnerMixin implements PatchworkEnchantmentTarget {\r\n+\t@Unique\r\n+\tprivate boolean isPatchwork = false;\r\n+\r\n+\t@Unique\r\n+\tprivate Predicate<Item> predicate;\r\n+\r\n+\t// Have to use full signature or the annotation processor complains\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d368a39c3e96306f9c5e914e27e8da2889ff99ef"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjA3NDk1OnYy", "diffSide": "RIGHT", "path": "patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/SpawnHelperMixin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNjowNjo0MFrOFtWWFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNjowNjo0MFrOFtWWFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA5NjM0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate static void handleCustomSpawnRestrictionLocation(SpawnRestriction.Location location, ViewableWorld viewableWorld, BlockPos blockPos, EntityType<?> entityType, CallbackInfoReturnable<Boolean> cir) {\n          \n          \n            \n            \tprivate static void handleCustomSpawnRestrictionLocation(SpawnRestriction.Location location, ViewableWorld world, BlockPos pos, EntityType<?> type, CallbackInfoReturnable<Boolean> callback) {", "url": "https://github.com/PatchworkMC/patchwork-api/pull/47#discussion_r383096340", "createdAt": "2020-02-24T06:06:40Z", "author": {"login": "coderbot16"}, "path": "patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/SpawnHelperMixin.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\r\n+ * Minecraft Forge, Patchwork Project\r\n+ * Copyright (c) 2016-2020, 2019-2020\r\n+ *\r\n+ * This library is free software; you can redistribute it and/or\r\n+ * modify it under the terms of the GNU Lesser General Public\r\n+ * License as published by the Free Software Foundation version 2.1\r\n+ * of the License.\r\n+ *\r\n+ * This library is distributed in the hope that it will be useful,\r\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n+ * Lesser General Public License for more details.\r\n+ *\r\n+ * You should have received a copy of the GNU Lesser General Public\r\n+ * License along with this library; if not, write to the Free Software\r\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n+ */\r\n+\r\n+package com.patchworkmc.mixin.enumhacks;\r\n+\r\n+import org.spongepowered.asm.mixin.Mixin;\r\n+import org.spongepowered.asm.mixin.injection.At;\r\n+import org.spongepowered.asm.mixin.injection.Inject;\r\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\r\n+\r\n+import net.minecraft.entity.EntityType;\r\n+import net.minecraft.entity.SpawnRestriction;\r\n+import net.minecraft.util.math.BlockPos;\r\n+import net.minecraft.world.SpawnHelper;\r\n+import net.minecraft.world.ViewableWorld;\r\n+\r\n+import com.patchworkmc.impl.enumhacks.PatchworkSpawnRestrictionLocation;\r\n+\r\n+@Mixin(SpawnHelper.class)\r\n+public class SpawnHelperMixin {\r\n+\t@Inject(method = \"canSpawn\",\r\n+\t\t\tat = @At(value = \"INVOKE\", target = \"net/minecraft/world/ViewableWorld.getBlockState(Lnet/minecraft/util/math/BlockPos;)Lnet/minecraft/block/BlockState;\"),\r\n+\t\t\tcancellable = true)\r\n+\tprivate static void handleCustomSpawnRestrictionLocation(SpawnRestriction.Location location, ViewableWorld viewableWorld, BlockPos blockPos, EntityType<?> entityType, CallbackInfoReturnable<Boolean> cir) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d368a39c3e96306f9c5e914e27e8da2889ff99ef"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjA3NTM0OnYy", "diffSide": "RIGHT", "path": "patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/SpawnHelperMixin.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNjowNzowN1rOFtWWTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMzo1NjoxM1rOFt37KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA5NjM5OA==", "bodyText": "AFAIK you do not need to cast to an object first when casting to an interface.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/47#discussion_r383096398", "createdAt": "2020-02-24T06:07:07Z", "author": {"login": "coderbot16"}, "path": "patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/SpawnHelperMixin.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\r\n+ * Minecraft Forge, Patchwork Project\r\n+ * Copyright (c) 2016-2020, 2019-2020\r\n+ *\r\n+ * This library is free software; you can redistribute it and/or\r\n+ * modify it under the terms of the GNU Lesser General Public\r\n+ * License as published by the Free Software Foundation version 2.1\r\n+ * of the License.\r\n+ *\r\n+ * This library is distributed in the hope that it will be useful,\r\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n+ * Lesser General Public License for more details.\r\n+ *\r\n+ * You should have received a copy of the GNU Lesser General Public\r\n+ * License along with this library; if not, write to the Free Software\r\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n+ */\r\n+\r\n+package com.patchworkmc.mixin.enumhacks;\r\n+\r\n+import org.spongepowered.asm.mixin.Mixin;\r\n+import org.spongepowered.asm.mixin.injection.At;\r\n+import org.spongepowered.asm.mixin.injection.Inject;\r\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\r\n+\r\n+import net.minecraft.entity.EntityType;\r\n+import net.minecraft.entity.SpawnRestriction;\r\n+import net.minecraft.util.math.BlockPos;\r\n+import net.minecraft.world.SpawnHelper;\r\n+import net.minecraft.world.ViewableWorld;\r\n+\r\n+import com.patchworkmc.impl.enumhacks.PatchworkSpawnRestrictionLocation;\r\n+\r\n+@Mixin(SpawnHelper.class)\r\n+public class SpawnHelperMixin {\r\n+\t@Inject(method = \"canSpawn\",\r\n+\t\t\tat = @At(value = \"INVOKE\", target = \"net/minecraft/world/ViewableWorld.getBlockState(Lnet/minecraft/util/math/BlockPos;)Lnet/minecraft/block/BlockState;\"),\r\n+\t\t\tcancellable = true)\r\n+\tprivate static void handleCustomSpawnRestrictionLocation(SpawnRestriction.Location location, ViewableWorld viewableWorld, BlockPos blockPos, EntityType<?> entityType, CallbackInfoReturnable<Boolean> cir) {\r\n+\t\tPatchworkSpawnRestrictionLocation patchworkLocation = (PatchworkSpawnRestrictionLocation) (Object) location;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d368a39c3e96306f9c5e914e27e8da2889ff99ef"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI2NDQyMQ==", "bodyText": "In this case we do, since the class is an enum and therefore final. javac is surprisingly smart about that. (Note that I don't do this for EnchantmentTarget, since it's an abstract enum and therefore technically non-final, so javac lets me cast normally.)", "url": "https://github.com/PatchworkMC/patchwork-api/pull/47#discussion_r383264421", "createdAt": "2020-02-24T13:29:43Z", "author": {"login": "TwilightFlower"}, "path": "patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/SpawnHelperMixin.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\r\n+ * Minecraft Forge, Patchwork Project\r\n+ * Copyright (c) 2016-2020, 2019-2020\r\n+ *\r\n+ * This library is free software; you can redistribute it and/or\r\n+ * modify it under the terms of the GNU Lesser General Public\r\n+ * License as published by the Free Software Foundation version 2.1\r\n+ * of the License.\r\n+ *\r\n+ * This library is distributed in the hope that it will be useful,\r\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n+ * Lesser General Public License for more details.\r\n+ *\r\n+ * You should have received a copy of the GNU Lesser General Public\r\n+ * License along with this library; if not, write to the Free Software\r\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n+ */\r\n+\r\n+package com.patchworkmc.mixin.enumhacks;\r\n+\r\n+import org.spongepowered.asm.mixin.Mixin;\r\n+import org.spongepowered.asm.mixin.injection.At;\r\n+import org.spongepowered.asm.mixin.injection.Inject;\r\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\r\n+\r\n+import net.minecraft.entity.EntityType;\r\n+import net.minecraft.entity.SpawnRestriction;\r\n+import net.minecraft.util.math.BlockPos;\r\n+import net.minecraft.world.SpawnHelper;\r\n+import net.minecraft.world.ViewableWorld;\r\n+\r\n+import com.patchworkmc.impl.enumhacks.PatchworkSpawnRestrictionLocation;\r\n+\r\n+@Mixin(SpawnHelper.class)\r\n+public class SpawnHelperMixin {\r\n+\t@Inject(method = \"canSpawn\",\r\n+\t\t\tat = @At(value = \"INVOKE\", target = \"net/minecraft/world/ViewableWorld.getBlockState(Lnet/minecraft/util/math/BlockPos;)Lnet/minecraft/block/BlockState;\"),\r\n+\t\t\tcancellable = true)\r\n+\tprivate static void handleCustomSpawnRestrictionLocation(SpawnRestriction.Location location, ViewableWorld viewableWorld, BlockPos blockPos, EntityType<?> entityType, CallbackInfoReturnable<Boolean> cir) {\r\n+\t\tPatchworkSpawnRestrictionLocation patchworkLocation = (PatchworkSpawnRestrictionLocation) (Object) location;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA5NjM5OA=="}, "originalCommit": {"oid": "d368a39c3e96306f9c5e914e27e8da2889ff99ef"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0NjUwNA==", "bodyText": "thanks javac, very cool", "url": "https://github.com/PatchworkMC/patchwork-api/pull/47#discussion_r383646504", "createdAt": "2020-02-25T03:56:13Z", "author": {"login": "coderbot16"}, "path": "patchwork-enum-hacks/src/main/java/com/patchworkmc/mixin/enumhacks/SpawnHelperMixin.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\r\n+ * Minecraft Forge, Patchwork Project\r\n+ * Copyright (c) 2016-2020, 2019-2020\r\n+ *\r\n+ * This library is free software; you can redistribute it and/or\r\n+ * modify it under the terms of the GNU Lesser General Public\r\n+ * License as published by the Free Software Foundation version 2.1\r\n+ * of the License.\r\n+ *\r\n+ * This library is distributed in the hope that it will be useful,\r\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n+ * Lesser General Public License for more details.\r\n+ *\r\n+ * You should have received a copy of the GNU Lesser General Public\r\n+ * License along with this library; if not, write to the Free Software\r\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n+ */\r\n+\r\n+package com.patchworkmc.mixin.enumhacks;\r\n+\r\n+import org.spongepowered.asm.mixin.Mixin;\r\n+import org.spongepowered.asm.mixin.injection.At;\r\n+import org.spongepowered.asm.mixin.injection.Inject;\r\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\r\n+\r\n+import net.minecraft.entity.EntityType;\r\n+import net.minecraft.entity.SpawnRestriction;\r\n+import net.minecraft.util.math.BlockPos;\r\n+import net.minecraft.world.SpawnHelper;\r\n+import net.minecraft.world.ViewableWorld;\r\n+\r\n+import com.patchworkmc.impl.enumhacks.PatchworkSpawnRestrictionLocation;\r\n+\r\n+@Mixin(SpawnHelper.class)\r\n+public class SpawnHelperMixin {\r\n+\t@Inject(method = \"canSpawn\",\r\n+\t\t\tat = @At(value = \"INVOKE\", target = \"net/minecraft/world/ViewableWorld.getBlockState(Lnet/minecraft/util/math/BlockPos;)Lnet/minecraft/block/BlockState;\"),\r\n+\t\t\tcancellable = true)\r\n+\tprivate static void handleCustomSpawnRestrictionLocation(SpawnRestriction.Location location, ViewableWorld viewableWorld, BlockPos blockPos, EntityType<?> entityType, CallbackInfoReturnable<Boolean> cir) {\r\n+\t\tPatchworkSpawnRestrictionLocation patchworkLocation = (PatchworkSpawnRestrictionLocation) (Object) location;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA5NjM5OA=="}, "originalCommit": {"oid": "d368a39c3e96306f9c5e914e27e8da2889ff99ef"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjA3ODYzOnYy", "diffSide": "RIGHT", "path": "patchwork-enum-hacks/src/main/java/com/patchworkmc/impl/enumhacks/PatchworkSpawnRestrictionLocation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNjoxMDozOFrOFtWYbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNjoxMDozOFrOFtWYbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA5Njk0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t//Forge method, so no prefix\n          \n          \n            \n            \t// Forge method, so no prefix", "url": "https://github.com/PatchworkMC/patchwork-api/pull/47#discussion_r383096940", "createdAt": "2020-02-24T06:10:38Z", "author": {"login": "coderbot16"}, "path": "patchwork-enum-hacks/src/main/java/com/patchworkmc/impl/enumhacks/PatchworkSpawnRestrictionLocation.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\r\n+ * Minecraft Forge, Patchwork Project\r\n+ * Copyright (c) 2016-2020, 2019-2020\r\n+ *\r\n+ * This library is free software; you can redistribute it and/or\r\n+ * modify it under the terms of the GNU Lesser General Public\r\n+ * License as published by the Free Software Foundation version 2.1\r\n+ * of the License.\r\n+ *\r\n+ * This library is distributed in the hope that it will be useful,\r\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n+ * Lesser General Public License for more details.\r\n+ *\r\n+ * You should have received a copy of the GNU Lesser General Public\r\n+ * License along with this library; if not, write to the Free Software\r\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n+ */\r\n+\r\n+package com.patchworkmc.impl.enumhacks;\r\n+\r\n+import net.minecraftforge.common.util.TriPredicate;\r\n+\r\n+import net.minecraft.entity.EntityType;\r\n+import net.minecraft.entity.SpawnRestriction;\r\n+import net.minecraft.util.math.BlockPos;\r\n+import net.minecraft.world.ViewableWorld;\r\n+\r\n+public interface PatchworkSpawnRestrictionLocation extends HackableEnum<SpawnRestriction.Location> {\r\n+\tboolean patchwork_useVanillaBehavior();\r\n+\r\n+\tvoid patchwork_setPredicate(TriPredicate<ViewableWorld, BlockPos, EntityType<?>> predicate);\r\n+\r\n+\t//Forge method, so no prefix\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d368a39c3e96306f9c5e914e27e8da2889ff99ef"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjA4MDI3OnYy", "diffSide": "RIGHT", "path": "patchwork-enum-hacks/src/main/java/com/patchworkmc/impl/enumhacks/PatchworkSpawnRestrictionLocation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNjoxMTo1NlrOFtWZUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNjoxMTo1NlrOFtWZUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA5NzE2OA==", "bodyText": "IMO the HackableEnum part should just be in the mixin, unless our code relies on this interface implementing hackableenum.", "url": "https://github.com/PatchworkMC/patchwork-api/pull/47#discussion_r383097168", "createdAt": "2020-02-24T06:11:56Z", "author": {"login": "coderbot16"}, "path": "patchwork-enum-hacks/src/main/java/com/patchworkmc/impl/enumhacks/PatchworkSpawnRestrictionLocation.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\r\n+ * Minecraft Forge, Patchwork Project\r\n+ * Copyright (c) 2016-2020, 2019-2020\r\n+ *\r\n+ * This library is free software; you can redistribute it and/or\r\n+ * modify it under the terms of the GNU Lesser General Public\r\n+ * License as published by the Free Software Foundation version 2.1\r\n+ * of the License.\r\n+ *\r\n+ * This library is distributed in the hope that it will be useful,\r\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n+ * Lesser General Public License for more details.\r\n+ *\r\n+ * You should have received a copy of the GNU Lesser General Public\r\n+ * License along with this library; if not, write to the Free Software\r\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n+ */\r\n+\r\n+package com.patchworkmc.impl.enumhacks;\r\n+\r\n+import net.minecraftforge.common.util.TriPredicate;\r\n+\r\n+import net.minecraft.entity.EntityType;\r\n+import net.minecraft.entity.SpawnRestriction;\r\n+import net.minecraft.util.math.BlockPos;\r\n+import net.minecraft.world.ViewableWorld;\r\n+\r\n+public interface PatchworkSpawnRestrictionLocation extends HackableEnum<SpawnRestriction.Location> {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d368a39c3e96306f9c5e914e27e8da2889ff99ef"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjA4NjE0OnYy", "diffSide": "RIGHT", "path": "patchwork-enum-hacks/src/main/resources/patchwork-enum-hacks.mixins.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNjoxNjo1NFrOFtWcpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNjoxNjo1NFrOFtWcpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA5ODAyMg==", "bodyText": "Tabs and spaces are mixed here", "url": "https://github.com/PatchworkMC/patchwork-api/pull/47#discussion_r383098022", "createdAt": "2020-02-24T06:16:54Z", "author": {"login": "coderbot16"}, "path": "patchwork-enum-hacks/src/main/resources/patchwork-enum-hacks.mixins.json", "diffHunk": "@@ -0,0 +1,25 @@\n+{\r\n+  \"required\": true,\r\n+  \"package\": \"com.patchworkmc.mixin.enumhacks\",\r\n+  \"compatibilityLevel\": \"JAVA_8\",\r\n+  \"mixins\": [\r\n+  \t\"BannerPatternAccessor\",\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d368a39c3e96306f9c5e914e27e8da2889ff99ef"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1507, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}