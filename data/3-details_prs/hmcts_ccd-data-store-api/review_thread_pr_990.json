{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NTE5OTc2", "number": 990, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDozNjozM1rOEIT9Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowOTozMlrOEKHY3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTUxMDU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDozNjozM1rOGoMlUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDozNjozM1rOGoMlUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgwMjM4NA==", "bodyText": "This method is a bit complex (Sonar also mentions this) - adding some comments in the method itself with suggestions.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r444802384", "createdAt": "2020-06-24T10:36:33Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -70,16 +75,86 @@ private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerG\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n         // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n+            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition));\n+        });\n         return items;\n     }\n \n-    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId,\n-                                                           String useCase,\n-                                                           CaseSearchResult caseSearchResult,\n-                                                           List<String> requestedFields) {\n+    private CaseDetails filterResultsByAuthorisationAndUserRole(String useCase, CaseDetails caseDetails, String caseTypeId, List<String> requestedFields) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba5c0368ca73de7ca7ec77bd1f8b63998e7f3da2"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTUyNzcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDo0MjoxOVrOGoMv8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDo0MjoxOVrOGoMv8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgwNTEwNw==", "bodyText": "This could be simplified by replacing the while loop with a Stream e.g.\ncaseDetails.getData().entrySet().stream()\n    .filter(entry -> newMethodThatDealsWithThisCodeBlock(....))\n    ...", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r444805107", "createdAt": "2020-06-24T10:42:19Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -70,16 +75,86 @@ private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerG\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n         // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n+            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition));\n+        });\n         return items;\n     }\n \n-    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId,\n-                                                           String useCase,\n-                                                           CaseSearchResult caseSearchResult,\n-                                                           List<String> requestedFields) {\n+    private CaseDetails filterResultsByAuthorisationAndUserRole(String useCase, CaseDetails caseDetails, String caseTypeId, List<String> requestedFields) {\n+        Set<String> roles = userRepository.getUserRoles();\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n+        HashMap<String, String> searchFields = getSearchResultDefinitionFieldUserRoleAndField(searchResultDefinition);\n+\n+        Iterator<String> caseFieldsUseCase = caseDetails.getData().keySet().iterator();\n+        while (caseFieldsUseCase.hasNext()) {\n+            Object caseField = caseFieldsUseCase.next();\n+            if (useCase != null) {\n+                if (!searchFields.containsKey(caseField)) {\n+                    caseFieldsUseCase.remove();\n+                    caseField = null;\n+                }\n+                String role = searchFields.get(caseField);\n+                if (role != null && !roles.contains(role)) {\n+                    caseFieldsUseCase.remove();\n+                    caseField = null;\n+\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba5c0368ca73de7ca7ec77bd1f8b63998e7f3da2"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTUyODQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDo0MjozNlrOGoMwcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDo0MjozNlrOGoMwcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgwNTIzNA==", "bodyText": "This could be a second .filter()", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r444805234", "createdAt": "2020-06-24T10:42:36Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -70,16 +75,86 @@ private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerG\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n         // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n+            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition));\n+        });\n         return items;\n     }\n \n-    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId,\n-                                                           String useCase,\n-                                                           CaseSearchResult caseSearchResult,\n-                                                           List<String> requestedFields) {\n+    private CaseDetails filterResultsByAuthorisationAndUserRole(String useCase, CaseDetails caseDetails, String caseTypeId, List<String> requestedFields) {\n+        Set<String> roles = userRepository.getUserRoles();\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n+        HashMap<String, String> searchFields = getSearchResultDefinitionFieldUserRoleAndField(searchResultDefinition);\n+\n+        Iterator<String> caseFieldsUseCase = caseDetails.getData().keySet().iterator();\n+        while (caseFieldsUseCase.hasNext()) {\n+            Object caseField = caseFieldsUseCase.next();\n+            if (useCase != null) {\n+                if (!searchFields.containsKey(caseField)) {\n+                    caseFieldsUseCase.remove();\n+                    caseField = null;\n+                }\n+                String role = searchFields.get(caseField);\n+                if (role != null && !roles.contains(role)) {\n+                    caseFieldsUseCase.remove();\n+                    caseField = null;\n+\n+                }\n+            }\n+            if (caseField != null) {\n+                Optional<CaseFieldDefinition> caseFieldDefinition = caseTypeDefinition.getCaseField(caseField.toString());\n+                if (caseFieldDefinition.isPresent() && caseFieldDefinition.get().isComplexFieldType()) {\n+                    if (!filterResultsByAuthorisationAccess(caseFieldDefinition)) {\n+                        caseFieldsUseCase.remove();\n+                    }\n+                } else {\n+                    if (!accessControlService.canAccessCaseFieldsWithCriteria(\n+                        JacksonUtils.convertValueJsonNode(caseField),\n+                        caseTypeDefinition.getCaseFieldDefinitions(),\n+                        roles,\n+                        CAN_READ)) {\n+                        caseFieldsUseCase.remove();\n+                    }\n+                }\n+\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba5c0368ca73de7ca7ec77bd1f8b63998e7f3da2"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTU0MzIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDo0Nzo1NVrOGoM6Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDo0Nzo1NVrOGoM6Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgwNzcxNQ==", "bodyText": "isPresent() has been checked so we can pass in the value to the method and its argument no longer needs to be Optional (removing one of the Sonar complaints).\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (!filterResultsByAuthorisationAccess(caseFieldDefinition)) {\n          \n          \n            \n                                if (!filterResultsByAuthorisationAccess(caseFieldDefinition.get())) {", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r444807715", "createdAt": "2020-06-24T10:47:55Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -70,16 +75,86 @@ private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerG\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n         // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n+            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition));\n+        });\n         return items;\n     }\n \n-    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId,\n-                                                           String useCase,\n-                                                           CaseSearchResult caseSearchResult,\n-                                                           List<String> requestedFields) {\n+    private CaseDetails filterResultsByAuthorisationAndUserRole(String useCase, CaseDetails caseDetails, String caseTypeId, List<String> requestedFields) {\n+        Set<String> roles = userRepository.getUserRoles();\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n+        HashMap<String, String> searchFields = getSearchResultDefinitionFieldUserRoleAndField(searchResultDefinition);\n+\n+        Iterator<String> caseFieldsUseCase = caseDetails.getData().keySet().iterator();\n+        while (caseFieldsUseCase.hasNext()) {\n+            Object caseField = caseFieldsUseCase.next();\n+            if (useCase != null) {\n+                if (!searchFields.containsKey(caseField)) {\n+                    caseFieldsUseCase.remove();\n+                    caseField = null;\n+                }\n+                String role = searchFields.get(caseField);\n+                if (role != null && !roles.contains(role)) {\n+                    caseFieldsUseCase.remove();\n+                    caseField = null;\n+\n+                }\n+            }\n+            if (caseField != null) {\n+                Optional<CaseFieldDefinition> caseFieldDefinition = caseTypeDefinition.getCaseField(caseField.toString());\n+                if (caseFieldDefinition.isPresent() && caseFieldDefinition.get().isComplexFieldType()) {\n+                    if (!filterResultsByAuthorisationAccess(caseFieldDefinition)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba5c0368ca73de7ca7ec77bd1f8b63998e7f3da2"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTU0OTAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDo0OTo1NlrOGoM9yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDo0OTo1NlrOGoM9yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgwODY1MA==", "bodyText": "Does this work for all scenarios? Since caseField is an Object but getCaseField() expects the field ID.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r444808650", "createdAt": "2020-06-24T10:49:56Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -70,16 +75,86 @@ private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerG\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n         // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n+            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition));\n+        });\n         return items;\n     }\n \n-    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId,\n-                                                           String useCase,\n-                                                           CaseSearchResult caseSearchResult,\n-                                                           List<String> requestedFields) {\n+    private CaseDetails filterResultsByAuthorisationAndUserRole(String useCase, CaseDetails caseDetails, String caseTypeId, List<String> requestedFields) {\n+        Set<String> roles = userRepository.getUserRoles();\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n+        HashMap<String, String> searchFields = getSearchResultDefinitionFieldUserRoleAndField(searchResultDefinition);\n+\n+        Iterator<String> caseFieldsUseCase = caseDetails.getData().keySet().iterator();\n+        while (caseFieldsUseCase.hasNext()) {\n+            Object caseField = caseFieldsUseCase.next();\n+            if (useCase != null) {\n+                if (!searchFields.containsKey(caseField)) {\n+                    caseFieldsUseCase.remove();\n+                    caseField = null;\n+                }\n+                String role = searchFields.get(caseField);\n+                if (role != null && !roles.contains(role)) {\n+                    caseFieldsUseCase.remove();\n+                    caseField = null;\n+\n+                }\n+            }\n+            if (caseField != null) {\n+                Optional<CaseFieldDefinition> caseFieldDefinition = caseTypeDefinition.getCaseField(caseField.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba5c0368ca73de7ca7ec77bd1f8b63998e7f3da2"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTU2ODE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDo1NjoxNFrOGoNJ5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDo1NjoxNFrOGoNJ5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgxMTc1MQ==", "bodyText": "Could consider making use of the existing method CaseFieldDefinition.getAccessControlListByRole() in here (would need to be made public, and think then looping through roles could be simpler.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r444811751", "createdAt": "2020-06-24T10:56:14Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -70,16 +75,86 @@ private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerG\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n         // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n+            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition));\n+        });\n         return items;\n     }\n \n-    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId,\n-                                                           String useCase,\n-                                                           CaseSearchResult caseSearchResult,\n-                                                           List<String> requestedFields) {\n+    private CaseDetails filterResultsByAuthorisationAndUserRole(String useCase, CaseDetails caseDetails, String caseTypeId, List<String> requestedFields) {\n+        Set<String> roles = userRepository.getUserRoles();\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n+        HashMap<String, String> searchFields = getSearchResultDefinitionFieldUserRoleAndField(searchResultDefinition);\n+\n+        Iterator<String> caseFieldsUseCase = caseDetails.getData().keySet().iterator();\n+        while (caseFieldsUseCase.hasNext()) {\n+            Object caseField = caseFieldsUseCase.next();\n+            if (useCase != null) {\n+                if (!searchFields.containsKey(caseField)) {\n+                    caseFieldsUseCase.remove();\n+                    caseField = null;\n+                }\n+                String role = searchFields.get(caseField);\n+                if (role != null && !roles.contains(role)) {\n+                    caseFieldsUseCase.remove();\n+                    caseField = null;\n+\n+                }\n+            }\n+            if (caseField != null) {\n+                Optional<CaseFieldDefinition> caseFieldDefinition = caseTypeDefinition.getCaseField(caseField.toString());\n+                if (caseFieldDefinition.isPresent() && caseFieldDefinition.get().isComplexFieldType()) {\n+                    if (!filterResultsByAuthorisationAccess(caseFieldDefinition)) {\n+                        caseFieldsUseCase.remove();\n+                    }\n+                } else {\n+                    if (!accessControlService.canAccessCaseFieldsWithCriteria(\n+                        JacksonUtils.convertValueJsonNode(caseField),\n+                        caseTypeDefinition.getCaseFieldDefinitions(),\n+                        roles,\n+                        CAN_READ)) {\n+                        caseFieldsUseCase.remove();\n+                    }\n+                }\n+\n+            }\n+\n+        }\n+        return caseDetails;\n+    }\n+\n+    private Boolean filterResultsByAuthorisationAccess(Optional<CaseFieldDefinition> caseFieldDefinition) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba5c0368ca73de7ca7ec77bd1f8b63998e7f3da2"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTYxOTQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMToxMjoxM1rOGoNobQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMToxMjoxM1rOGoNobQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgxOTU2NQ==", "bodyText": "Requires testing but I think can be simplified to something like this?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (caseFieldDefinition.isPresent()) {\n          \n          \n            \n                        List<AccessControlList> accessControlLists = caseFieldDefinition.get().getAccessControlLists();\n          \n          \n            \n                        Set<String> roles = userRepository.getUserRoles();\n          \n          \n            \n                        if (!caseFieldDefinition.get().isMetadata()) {\n          \n          \n            \n                            for (AccessControlList accessControlList : accessControlLists) {\n          \n          \n            \n                                for (String role : roles) {\n          \n          \n            \n                                    if (accessControlList.getRole().equals(role)) {\n          \n          \n            \n                                        return accessControlList.isRead();\n          \n          \n            \n                                    }\n          \n          \n            \n                                }\n          \n          \n            \n                            }\n          \n          \n            \n                            return false;\n          \n          \n            \n                        }\n          \n          \n            \n                        return true;\n          \n          \n            \n                    }\n          \n          \n            \n                    return false;\n          \n          \n            \n                    if (!caseFieldDefinition.isMetadata()) {\n          \n          \n            \n                        return userRepository.getUserRoles().stream()\n          \n          \n            \n                            .anyMatch(role -> caseFieldDefinition.getAccessControlListByRole(role).map(AccessControlList::isRead).orElse(false));\n          \n          \n            \n                    }\n          \n          \n            \n                    return true;", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r444819565", "createdAt": "2020-06-24T11:12:13Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -70,16 +75,86 @@ private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerG\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n         // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n+            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition));\n+        });\n         return items;\n     }\n \n-    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId,\n-                                                           String useCase,\n-                                                           CaseSearchResult caseSearchResult,\n-                                                           List<String> requestedFields) {\n+    private CaseDetails filterResultsByAuthorisationAndUserRole(String useCase, CaseDetails caseDetails, String caseTypeId, List<String> requestedFields) {\n+        Set<String> roles = userRepository.getUserRoles();\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n+        HashMap<String, String> searchFields = getSearchResultDefinitionFieldUserRoleAndField(searchResultDefinition);\n+\n+        Iterator<String> caseFieldsUseCase = caseDetails.getData().keySet().iterator();\n+        while (caseFieldsUseCase.hasNext()) {\n+            Object caseField = caseFieldsUseCase.next();\n+            if (useCase != null) {\n+                if (!searchFields.containsKey(caseField)) {\n+                    caseFieldsUseCase.remove();\n+                    caseField = null;\n+                }\n+                String role = searchFields.get(caseField);\n+                if (role != null && !roles.contains(role)) {\n+                    caseFieldsUseCase.remove();\n+                    caseField = null;\n+\n+                }\n+            }\n+            if (caseField != null) {\n+                Optional<CaseFieldDefinition> caseFieldDefinition = caseTypeDefinition.getCaseField(caseField.toString());\n+                if (caseFieldDefinition.isPresent() && caseFieldDefinition.get().isComplexFieldType()) {\n+                    if (!filterResultsByAuthorisationAccess(caseFieldDefinition)) {\n+                        caseFieldsUseCase.remove();\n+                    }\n+                } else {\n+                    if (!accessControlService.canAccessCaseFieldsWithCriteria(\n+                        JacksonUtils.convertValueJsonNode(caseField),\n+                        caseTypeDefinition.getCaseFieldDefinitions(),\n+                        roles,\n+                        CAN_READ)) {\n+                        caseFieldsUseCase.remove();\n+                    }\n+                }\n+\n+            }\n+\n+        }\n+        return caseDetails;\n+    }\n+\n+    private Boolean filterResultsByAuthorisationAccess(Optional<CaseFieldDefinition> caseFieldDefinition) {\n+        if (caseFieldDefinition.isPresent()) {\n+            List<AccessControlList> accessControlLists = caseFieldDefinition.get().getAccessControlLists();\n+            Set<String> roles = userRepository.getUserRoles();\n+            if (!caseFieldDefinition.get().isMetadata()) {\n+                for (AccessControlList accessControlList : accessControlLists) {\n+                    for (String role : roles) {\n+                        if (accessControlList.getRole().equals(role)) {\n+                            return accessControlList.isRead();\n+                        }\n+                    }\n+                }\n+                return false;\n+            }\n+            return true;\n+        }\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba5c0368ca73de7ca7ec77bd1f8b63998e7f3da2"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTYzNDk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMToxNzoxOVrOGoNx6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMToxNzoxOVrOGoNx6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyMTk5Mw==", "bodyText": "Can delete this method by refactoring the earlier one?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r444821993", "createdAt": "2020-06-24T11:17:19Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -112,15 +188,33 @@ private SearchResultViewHeaderGroup buildHeader(String useCase,\n                                                                       SearchResult searchResult) {\n         HashSet<String> addedFields = new HashSet<>();\n \n+        // Only one case type is currently supported so we can reuse the same definitions for building all items\n         return Arrays.stream(searchResult.getFields())\n             .flatMap(searchResultField -> caseTypeDefinition.getCaseFieldDefinitions().stream()\n                 .filter(caseField -> caseField.getId().equals(searchResultField.getCaseFieldId()))\n                 .filter(caseField -> filterDistinctFieldsByRole(addedFields, searchResultField))\n+                .filter(caseField -> filterResultsByAuthorisation(caseField))\n                 .map(caseField -> buildSearchResultViewColumn(searchResultField, caseField))\n             )\n             .collect(Collectors.toList());\n     }\n \n+    private Boolean filterResultsByAuthorisation(CaseFieldDefinition caseFieldDefinition) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba5c0368ca73de7ca7ec77bd1f8b63998e7f3da2"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTY0NDMyOnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/v2/internal/controller/UICaseSearchControllerIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMToyMDoyNVrOGoN3jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMToyMDoyNVrOGoN3jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyMzQzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import org.junit.*;", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r444823438", "createdAt": "2020-06-24T11:20:25Z", "author": {"login": "danlysiak"}, "path": "src/test/java/uk/gov/hmcts/ccd/v2/internal/controller/UICaseSearchControllerIT.java", "diffHunk": "@@ -2,14 +2,15 @@\n \n import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.JsonNode;\n-import org.junit.jupiter.api.BeforeEach;\n+import org.junit.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba5c0368ca73de7ca7ec77bd1f8b63998e7f3da2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDQ4NzA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToxMTozM1rOGpkkuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzowNTozM1rOGq7WuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0NDAyNw==", "bodyText": "I know it's not part of your code changes but can we please rename SearchResult to SearchResultDefinition? We are trying to have all definition objects classes in DataStore end with Definition suffix", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r446244027", "createdAt": "2020-06-26T15:11:33Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -61,25 +64,78 @@ public CaseSearchResultView execute(String caseTypeId,\n \n     private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerGroups) {\n         return headerGroups.size() == 1\n-               && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n+            && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n     }\n \n     private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult, String caseTypeId, List<String> requestedFields) {\n         CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n         SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NTg0OA==", "bodyText": "Done \ud83d\udc4d", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r447665848", "createdAt": "2020-06-30T13:05:33Z", "author": {"login": "RebeccaBaker"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -61,25 +64,78 @@ public CaseSearchResultView execute(String caseTypeId,\n \n     private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerGroups) {\n         return headerGroups.size() == 1\n-               && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n+            && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n     }\n \n     private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult, String caseTypeId, List<String> requestedFields) {\n         CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n         SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0NDAyNw=="}, "originalCommit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDUwMTI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToxNToyNFrOGpkt2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzowNTo0NlrOGq7XLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0NjM2MQ==", "bodyText": "I'd suggest we introduce a new dedicated class called CaseSearchesViewAccessControl or similar, and move all the access control code added to this class in there. This will help reduce the complexity of this class which is otherwise growing too much. It would also be better in terms of separation of concerns", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r446246361", "createdAt": "2020-06-26T15:15:24Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -61,25 +64,78 @@ public CaseSearchResultView execute(String caseTypeId,\n \n     private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerGroups) {\n         return headerGroups.size() == 1\n-               && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n+            && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n     }\n \n     private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult, String caseTypeId, List<String> requestedFields) {\n         CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n         SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n-        // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NTk2Ng==", "bodyText": "Added the new class as requested", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r447665966", "createdAt": "2020-06-30T13:05:46Z", "author": {"login": "RebeccaBaker"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -61,25 +64,78 @@ public CaseSearchResultView execute(String caseTypeId,\n \n     private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerGroups) {\n         return headerGroups.size() == 1\n-               && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n+            && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n     }\n \n     private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult, String caseTypeId, List<String> requestedFields) {\n         CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n         SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n-        // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0NjM2MQ=="}, "originalCommit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDUxODU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToyMDo0NFrOGpk5Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzowNTo1NVrOGq7Xgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0OTMwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n          \n          \n            \n                        filterUnauthorisedFieldsByUseCaseAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r446249303", "createdAt": "2020-06-26T15:20:44Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -61,25 +64,78 @@ public CaseSearchResultView execute(String caseTypeId,\n \n     private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerGroups) {\n         return headerGroups.size() == 1\n-               && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n+            && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n     }\n \n     private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult, String caseTypeId, List<String> requestedFields) {\n         CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n         SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n-        // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NjA1MQ==", "bodyText": "renamed \ud83d\udc4d", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r447666051", "createdAt": "2020-06-30T13:05:55Z", "author": {"login": "RebeccaBaker"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -61,25 +64,78 @@ public CaseSearchResultView execute(String caseTypeId,\n \n     private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerGroups) {\n         return headerGroups.size() == 1\n-               && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n+            && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n     }\n \n     private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult, String caseTypeId, List<String> requestedFields) {\n         CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n         SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n-        // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0OTMwMw=="}, "originalCommit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDgwMzI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODowMjoyMVrOGqJGpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzowNjoxOFrOGq7YkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0MjUzMg==", "bodyText": "here we are applying access control based on the CRUD coming from the AuthorizationCaseField definition tab right? if yes, then this should be done in the external search API, not the internal", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r446842532", "createdAt": "2020-06-29T08:02:21Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -61,25 +64,78 @@ public CaseSearchResultView execute(String caseTypeId,\n \n     private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerGroups) {\n         return headerGroups.size() == 1\n-               && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n+            && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n     }\n \n     private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult, String caseTypeId, List<String> requestedFields) {\n         CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n         SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n-        // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n+            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition));\n+        });\n         return items;\n     }\n \n-    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId,\n-                                                           String useCase,\n-                                                           CaseSearchResult caseSearchResult,\n-                                                           List<String> requestedFields) {\n+    private CaseDetails filterResultsByAuthorisationAndUserRole(String useCase, CaseDetails caseDetails, String caseTypeId, List<String> requestedFields) {\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        caseDetails.getData().entrySet().removeIf(\n+            caseField -> {\n+                Optional<CaseFieldDefinition> caseFieldDefinition = caseTypeDefinition.getCaseField(caseField.getKey());\n+                return !filterResultsBySearchResultsDefinition(useCase, caseTypeId, requestedFields, caseField.getKey())\n+                    || !filterResultsByAuthorisationAccessOnField(caseFieldDefinition.get());\n+            });\n+        return caseDetails;\n+    }\n+\n+\n+    private Boolean filterResultsBySearchResultsDefinition(String useCase, String caseTypeId, List<String> requestedFields, String caseFieldId) {\n+        Set<String> roles = userRepository.getUserRoles();\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n+        HashMap<String, String> searchFields = getSearchResultDefinitionFieldUserRoleAndField(searchResultDefinition);\n+\n+        if (useCase != null) {\n+            if (!searchFields.containsKey(caseFieldId)) {\n+                return false;\n+            }\n+            String role = searchFields.get(caseFieldId);\n+            if (role != null && !roles.contains(role)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private Boolean filterResultsByAuthorisationAccessOnField(CaseFieldDefinition caseFieldDefinition) {\n+        if (!caseFieldDefinition.isMetadata()) {\n+            return userRepository.getUserRoles().stream()\n+                .anyMatch(role -> caseFieldDefinition.getAccessControlListByRole(role).map(AccessControlList::isRead).orElse(false));\n+        }\n+        return true;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0NDE4OQ==", "bodyText": "Also, is there any method in AccessControlService that we could reuse?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r446844189", "createdAt": "2020-06-29T08:05:35Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -61,25 +64,78 @@ public CaseSearchResultView execute(String caseTypeId,\n \n     private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerGroups) {\n         return headerGroups.size() == 1\n-               && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n+            && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n     }\n \n     private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult, String caseTypeId, List<String> requestedFields) {\n         CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n         SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n-        // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n+            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition));\n+        });\n         return items;\n     }\n \n-    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId,\n-                                                           String useCase,\n-                                                           CaseSearchResult caseSearchResult,\n-                                                           List<String> requestedFields) {\n+    private CaseDetails filterResultsByAuthorisationAndUserRole(String useCase, CaseDetails caseDetails, String caseTypeId, List<String> requestedFields) {\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        caseDetails.getData().entrySet().removeIf(\n+            caseField -> {\n+                Optional<CaseFieldDefinition> caseFieldDefinition = caseTypeDefinition.getCaseField(caseField.getKey());\n+                return !filterResultsBySearchResultsDefinition(useCase, caseTypeId, requestedFields, caseField.getKey())\n+                    || !filterResultsByAuthorisationAccessOnField(caseFieldDefinition.get());\n+            });\n+        return caseDetails;\n+    }\n+\n+\n+    private Boolean filterResultsBySearchResultsDefinition(String useCase, String caseTypeId, List<String> requestedFields, String caseFieldId) {\n+        Set<String> roles = userRepository.getUserRoles();\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n+        HashMap<String, String> searchFields = getSearchResultDefinitionFieldUserRoleAndField(searchResultDefinition);\n+\n+        if (useCase != null) {\n+            if (!searchFields.containsKey(caseFieldId)) {\n+                return false;\n+            }\n+            String role = searchFields.get(caseFieldId);\n+            if (role != null && !roles.contains(role)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private Boolean filterResultsByAuthorisationAccessOnField(CaseFieldDefinition caseFieldDefinition) {\n+        if (!caseFieldDefinition.isMetadata()) {\n+            return userRepository.getUserRoles().stream()\n+                .anyMatch(role -> caseFieldDefinition.getAccessControlListByRole(role).map(AccessControlList::isRead).orElse(false));\n+        }\n+        return true;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0MjUzMg=="}, "originalCommit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NjMyMQ==", "bodyText": "External search completed this work therefore removed the logic code here", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r447666321", "createdAt": "2020-06-30T13:06:18Z", "author": {"login": "RebeccaBaker"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -61,25 +64,78 @@ public CaseSearchResultView execute(String caseTypeId,\n \n     private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerGroups) {\n         return headerGroups.size() == 1\n-               && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n+            && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n     }\n \n     private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult, String caseTypeId, List<String> requestedFields) {\n         CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n         SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n-        // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n+            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition));\n+        });\n         return items;\n     }\n \n-    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId,\n-                                                           String useCase,\n-                                                           CaseSearchResult caseSearchResult,\n-                                                           List<String> requestedFields) {\n+    private CaseDetails filterResultsByAuthorisationAndUserRole(String useCase, CaseDetails caseDetails, String caseTypeId, List<String> requestedFields) {\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        caseDetails.getData().entrySet().removeIf(\n+            caseField -> {\n+                Optional<CaseFieldDefinition> caseFieldDefinition = caseTypeDefinition.getCaseField(caseField.getKey());\n+                return !filterResultsBySearchResultsDefinition(useCase, caseTypeId, requestedFields, caseField.getKey())\n+                    || !filterResultsByAuthorisationAccessOnField(caseFieldDefinition.get());\n+            });\n+        return caseDetails;\n+    }\n+\n+\n+    private Boolean filterResultsBySearchResultsDefinition(String useCase, String caseTypeId, List<String> requestedFields, String caseFieldId) {\n+        Set<String> roles = userRepository.getUserRoles();\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n+        HashMap<String, String> searchFields = getSearchResultDefinitionFieldUserRoleAndField(searchResultDefinition);\n+\n+        if (useCase != null) {\n+            if (!searchFields.containsKey(caseFieldId)) {\n+                return false;\n+            }\n+            String role = searchFields.get(caseFieldId);\n+            if (role != null && !roles.contains(role)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private Boolean filterResultsByAuthorisationAccessOnField(CaseFieldDefinition caseFieldDefinition) {\n+        if (!caseFieldDefinition.isMetadata()) {\n+            return userRepository.getUserRoles().stream()\n+                .anyMatch(role -> caseFieldDefinition.getAccessControlListByRole(role).map(AccessControlList::isRead).orElse(false));\n+        }\n+        return true;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0MjUzMg=="}, "originalCommit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDgyMzI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODowODoxNlrOGqJS8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzowNjoyNlrOGq7Y_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0NTY4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                || !filterResultsByAuthorisationAccessOnField(caseFieldDefinition.get());\n          \n          \n            \n                                || !filterFieldByAuthorisationAccessOnField(caseFieldDefinition.get());", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r446845682", "createdAt": "2020-06-29T08:08:16Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -61,25 +64,78 @@ public CaseSearchResultView execute(String caseTypeId,\n \n     private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerGroups) {\n         return headerGroups.size() == 1\n-               && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n+            && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n     }\n \n     private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult, String caseTypeId, List<String> requestedFields) {\n         CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n         SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n-        // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n+            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition));\n+        });\n         return items;\n     }\n \n-    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId,\n-                                                           String useCase,\n-                                                           CaseSearchResult caseSearchResult,\n-                                                           List<String> requestedFields) {\n+    private CaseDetails filterResultsByAuthorisationAndUserRole(String useCase, CaseDetails caseDetails, String caseTypeId, List<String> requestedFields) {\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        caseDetails.getData().entrySet().removeIf(\n+            caseField -> {\n+                Optional<CaseFieldDefinition> caseFieldDefinition = caseTypeDefinition.getCaseField(caseField.getKey());\n+                return !filterResultsBySearchResultsDefinition(useCase, caseTypeId, requestedFields, caseField.getKey())\n+                    || !filterResultsByAuthorisationAccessOnField(caseFieldDefinition.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NjQzMA==", "bodyText": "renamed \ud83d\udc4d", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r447666430", "createdAt": "2020-06-30T13:06:26Z", "author": {"login": "RebeccaBaker"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -61,25 +64,78 @@ public CaseSearchResultView execute(String caseTypeId,\n \n     private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerGroups) {\n         return headerGroups.size() == 1\n-               && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n+            && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n     }\n \n     private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult, String caseTypeId, List<String> requestedFields) {\n         CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n         SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n-        // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n+            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition));\n+        });\n         return items;\n     }\n \n-    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId,\n-                                                           String useCase,\n-                                                           CaseSearchResult caseSearchResult,\n-                                                           List<String> requestedFields) {\n+    private CaseDetails filterResultsByAuthorisationAndUserRole(String useCase, CaseDetails caseDetails, String caseTypeId, List<String> requestedFields) {\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        caseDetails.getData().entrySet().removeIf(\n+            caseField -> {\n+                Optional<CaseFieldDefinition> caseFieldDefinition = caseTypeDefinition.getCaseField(caseField.getKey());\n+                return !filterResultsBySearchResultsDefinition(useCase, caseTypeId, requestedFields, caseField.getKey())\n+                    || !filterResultsByAuthorisationAccessOnField(caseFieldDefinition.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0NTY4Mg=="}, "originalCommit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDg0NjI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODoxNDo0OFrOGqJgsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzowNjozNFrOGq7ZVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0OTIwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    HashMap<String, String> fields = new HashMap<>();\n          \n          \n            \n                    Map<String, String> fields = new HashMap<>();", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r446849201", "createdAt": "2020-06-29T08:14:48Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -61,25 +64,78 @@ public CaseSearchResultView execute(String caseTypeId,\n \n     private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerGroups) {\n         return headerGroups.size() == 1\n-               && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n+            && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n     }\n \n     private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult, String caseTypeId, List<String> requestedFields) {\n         CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n         SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n-        // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n+            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition));\n+        });\n         return items;\n     }\n \n-    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId,\n-                                                           String useCase,\n-                                                           CaseSearchResult caseSearchResult,\n-                                                           List<String> requestedFields) {\n+    private CaseDetails filterResultsByAuthorisationAndUserRole(String useCase, CaseDetails caseDetails, String caseTypeId, List<String> requestedFields) {\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        caseDetails.getData().entrySet().removeIf(\n+            caseField -> {\n+                Optional<CaseFieldDefinition> caseFieldDefinition = caseTypeDefinition.getCaseField(caseField.getKey());\n+                return !filterResultsBySearchResultsDefinition(useCase, caseTypeId, requestedFields, caseField.getKey())\n+                    || !filterResultsByAuthorisationAccessOnField(caseFieldDefinition.get());\n+            });\n+        return caseDetails;\n+    }\n+\n+\n+    private Boolean filterResultsBySearchResultsDefinition(String useCase, String caseTypeId, List<String> requestedFields, String caseFieldId) {\n+        Set<String> roles = userRepository.getUserRoles();\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n+        HashMap<String, String> searchFields = getSearchResultDefinitionFieldUserRoleAndField(searchResultDefinition);\n+\n+        if (useCase != null) {\n+            if (!searchFields.containsKey(caseFieldId)) {\n+                return false;\n+            }\n+            String role = searchFields.get(caseFieldId);\n+            if (role != null && !roles.contains(role)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private Boolean filterResultsByAuthorisationAccessOnField(CaseFieldDefinition caseFieldDefinition) {\n+        if (!caseFieldDefinition.isMetadata()) {\n+            return userRepository.getUserRoles().stream()\n+                .anyMatch(role -> caseFieldDefinition.getAccessControlListByRole(role).map(AccessControlList::isRead).orElse(false));\n+        }\n+        return true;\n+    }\n+\n+    private Boolean filterResultsBySecurityClassification(CaseFieldDefinition caseFieldDefinition,\n+                                                          CaseTypeDefinition caseTypeDefinition) {\n+        return securityClassificationService.userHasEnoughSecurityClassificationForField(caseTypeDefinition.getJurisdictionId(),\n+            caseTypeDefinition,\n+            caseFieldDefinition.getId());\n+\n+    }\n+\n+    private HashMap<String, String> getSearchResultDefinitionFieldUserRoleAndField(SearchResult searchResultDefinition) {\n+        HashMap<String, String> fields = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NjUxNw==", "bodyText": "done \ud83d\udc4d", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r447666517", "createdAt": "2020-06-30T13:06:34Z", "author": {"login": "RebeccaBaker"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -61,25 +64,78 @@ public CaseSearchResultView execute(String caseTypeId,\n \n     private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerGroups) {\n         return headerGroups.size() == 1\n-               && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n+            && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n     }\n \n     private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult, String caseTypeId, List<String> requestedFields) {\n         CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n         SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n-        // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n+            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition));\n+        });\n         return items;\n     }\n \n-    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId,\n-                                                           String useCase,\n-                                                           CaseSearchResult caseSearchResult,\n-                                                           List<String> requestedFields) {\n+    private CaseDetails filterResultsByAuthorisationAndUserRole(String useCase, CaseDetails caseDetails, String caseTypeId, List<String> requestedFields) {\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        caseDetails.getData().entrySet().removeIf(\n+            caseField -> {\n+                Optional<CaseFieldDefinition> caseFieldDefinition = caseTypeDefinition.getCaseField(caseField.getKey());\n+                return !filterResultsBySearchResultsDefinition(useCase, caseTypeId, requestedFields, caseField.getKey())\n+                    || !filterResultsByAuthorisationAccessOnField(caseFieldDefinition.get());\n+            });\n+        return caseDetails;\n+    }\n+\n+\n+    private Boolean filterResultsBySearchResultsDefinition(String useCase, String caseTypeId, List<String> requestedFields, String caseFieldId) {\n+        Set<String> roles = userRepository.getUserRoles();\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n+        HashMap<String, String> searchFields = getSearchResultDefinitionFieldUserRoleAndField(searchResultDefinition);\n+\n+        if (useCase != null) {\n+            if (!searchFields.containsKey(caseFieldId)) {\n+                return false;\n+            }\n+            String role = searchFields.get(caseFieldId);\n+            if (role != null && !roles.contains(role)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private Boolean filterResultsByAuthorisationAccessOnField(CaseFieldDefinition caseFieldDefinition) {\n+        if (!caseFieldDefinition.isMetadata()) {\n+            return userRepository.getUserRoles().stream()\n+                .anyMatch(role -> caseFieldDefinition.getAccessControlListByRole(role).map(AccessControlList::isRead).orElse(false));\n+        }\n+        return true;\n+    }\n+\n+    private Boolean filterResultsBySecurityClassification(CaseFieldDefinition caseFieldDefinition,\n+                                                          CaseTypeDefinition caseTypeDefinition) {\n+        return securityClassificationService.userHasEnoughSecurityClassificationForField(caseTypeDefinition.getJurisdictionId(),\n+            caseTypeDefinition,\n+            caseFieldDefinition.getId());\n+\n+    }\n+\n+    private HashMap<String, String> getSearchResultDefinitionFieldUserRoleAndField(SearchResult searchResultDefinition) {\n+        HashMap<String, String> fields = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0OTIwMQ=="}, "originalCommit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDg1Mzk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODoxNjo1NVrOGqJlcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzowNjo0OFrOGq7Z8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1MDQxNw==", "bodyText": "can we move this method to SearchResult itself please. We could also rename it to getFieldsUserRoles or sim", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r446850417", "createdAt": "2020-06-29T08:16:55Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -61,25 +64,78 @@ public CaseSearchResultView execute(String caseTypeId,\n \n     private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerGroups) {\n         return headerGroups.size() == 1\n-               && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n+            && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n     }\n \n     private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult, String caseTypeId, List<String> requestedFields) {\n         CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n         SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n-        // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n+            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition));\n+        });\n         return items;\n     }\n \n-    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId,\n-                                                           String useCase,\n-                                                           CaseSearchResult caseSearchResult,\n-                                                           List<String> requestedFields) {\n+    private CaseDetails filterResultsByAuthorisationAndUserRole(String useCase, CaseDetails caseDetails, String caseTypeId, List<String> requestedFields) {\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        caseDetails.getData().entrySet().removeIf(\n+            caseField -> {\n+                Optional<CaseFieldDefinition> caseFieldDefinition = caseTypeDefinition.getCaseField(caseField.getKey());\n+                return !filterResultsBySearchResultsDefinition(useCase, caseTypeId, requestedFields, caseField.getKey())\n+                    || !filterResultsByAuthorisationAccessOnField(caseFieldDefinition.get());\n+            });\n+        return caseDetails;\n+    }\n+\n+\n+    private Boolean filterResultsBySearchResultsDefinition(String useCase, String caseTypeId, List<String> requestedFields, String caseFieldId) {\n+        Set<String> roles = userRepository.getUserRoles();\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n+        HashMap<String, String> searchFields = getSearchResultDefinitionFieldUserRoleAndField(searchResultDefinition);\n+\n+        if (useCase != null) {\n+            if (!searchFields.containsKey(caseFieldId)) {\n+                return false;\n+            }\n+            String role = searchFields.get(caseFieldId);\n+            if (role != null && !roles.contains(role)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private Boolean filterResultsByAuthorisationAccessOnField(CaseFieldDefinition caseFieldDefinition) {\n+        if (!caseFieldDefinition.isMetadata()) {\n+            return userRepository.getUserRoles().stream()\n+                .anyMatch(role -> caseFieldDefinition.getAccessControlListByRole(role).map(AccessControlList::isRead).orElse(false));\n+        }\n+        return true;\n+    }\n+\n+    private Boolean filterResultsBySecurityClassification(CaseFieldDefinition caseFieldDefinition,\n+                                                          CaseTypeDefinition caseTypeDefinition) {\n+        return securityClassificationService.userHasEnoughSecurityClassificationForField(caseTypeDefinition.getJurisdictionId(),\n+            caseTypeDefinition,\n+            caseFieldDefinition.getId());\n+\n+    }\n+\n+    private HashMap<String, String> getSearchResultDefinitionFieldUserRoleAndField(SearchResult searchResultDefinition) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NjY3NA==", "bodyText": "added method to the class as requested", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r447666674", "createdAt": "2020-06-30T13:06:48Z", "author": {"login": "RebeccaBaker"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -61,25 +64,78 @@ public CaseSearchResultView execute(String caseTypeId,\n \n     private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerGroups) {\n         return headerGroups.size() == 1\n-               && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n+            && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n     }\n \n     private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult, String caseTypeId, List<String> requestedFields) {\n         CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n         SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n-        // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n+            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition));\n+        });\n         return items;\n     }\n \n-    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId,\n-                                                           String useCase,\n-                                                           CaseSearchResult caseSearchResult,\n-                                                           List<String> requestedFields) {\n+    private CaseDetails filterResultsByAuthorisationAndUserRole(String useCase, CaseDetails caseDetails, String caseTypeId, List<String> requestedFields) {\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        caseDetails.getData().entrySet().removeIf(\n+            caseField -> {\n+                Optional<CaseFieldDefinition> caseFieldDefinition = caseTypeDefinition.getCaseField(caseField.getKey());\n+                return !filterResultsBySearchResultsDefinition(useCase, caseTypeId, requestedFields, caseField.getKey())\n+                    || !filterResultsByAuthorisationAccessOnField(caseFieldDefinition.get());\n+            });\n+        return caseDetails;\n+    }\n+\n+\n+    private Boolean filterResultsBySearchResultsDefinition(String useCase, String caseTypeId, List<String> requestedFields, String caseFieldId) {\n+        Set<String> roles = userRepository.getUserRoles();\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n+        HashMap<String, String> searchFields = getSearchResultDefinitionFieldUserRoleAndField(searchResultDefinition);\n+\n+        if (useCase != null) {\n+            if (!searchFields.containsKey(caseFieldId)) {\n+                return false;\n+            }\n+            String role = searchFields.get(caseFieldId);\n+            if (role != null && !roles.contains(role)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private Boolean filterResultsByAuthorisationAccessOnField(CaseFieldDefinition caseFieldDefinition) {\n+        if (!caseFieldDefinition.isMetadata()) {\n+            return userRepository.getUserRoles().stream()\n+                .anyMatch(role -> caseFieldDefinition.getAccessControlListByRole(role).map(AccessControlList::isRead).orElse(false));\n+        }\n+        return true;\n+    }\n+\n+    private Boolean filterResultsBySecurityClassification(CaseFieldDefinition caseFieldDefinition,\n+                                                          CaseTypeDefinition caseTypeDefinition) {\n+        return securityClassificationService.userHasEnoughSecurityClassificationForField(caseTypeDefinition.getJurisdictionId(),\n+            caseTypeDefinition,\n+            caseFieldDefinition.getId());\n+\n+    }\n+\n+    private HashMap<String, String> getSearchResultDefinitionFieldUserRoleAndField(SearchResult searchResultDefinition) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1MDQxNw=="}, "originalCommit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDg3NDk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODoyMjo0MFrOGqJxzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODoyMjo0MFrOGqJxzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1MzU4Mg==", "bodyText": "just to double check, do we have a test verifying this works for nested fields specified with a path?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r446853582", "createdAt": "2020-06-29T08:22:40Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -61,25 +64,78 @@ public CaseSearchResultView execute(String caseTypeId,\n \n     private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerGroups) {\n         return headerGroups.size() == 1\n-               && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n+            && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n     }\n \n     private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult, String caseTypeId, List<String> requestedFields) {\n         CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n         SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n-        // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n+            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition));\n+        });\n         return items;\n     }\n \n-    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId,\n-                                                           String useCase,\n-                                                           CaseSearchResult caseSearchResult,\n-                                                           List<String> requestedFields) {\n+    private CaseDetails filterResultsByAuthorisationAndUserRole(String useCase, CaseDetails caseDetails, String caseTypeId, List<String> requestedFields) {\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        caseDetails.getData().entrySet().removeIf(\n+            caseField -> {\n+                Optional<CaseFieldDefinition> caseFieldDefinition = caseTypeDefinition.getCaseField(caseField.getKey());\n+                return !filterResultsBySearchResultsDefinition(useCase, caseTypeId, requestedFields, caseField.getKey())\n+                    || !filterResultsByAuthorisationAccessOnField(caseFieldDefinition.get());\n+            });\n+        return caseDetails;\n+    }\n+\n+\n+    private Boolean filterResultsBySearchResultsDefinition(String useCase, String caseTypeId, List<String> requestedFields, String caseFieldId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDg4NjMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODoyNTozNFrOGqJ4mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzowNzowMVrOGq7akQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1NTMyMg==", "bodyText": "minor, as an alternative we could add 2 methods to SearchResult itself, fieldExists(...) and fieldHasRole(...) or similar.\nOr, another approach as well, see comment further down", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r446855322", "createdAt": "2020-06-29T08:25:34Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -61,25 +64,78 @@ public CaseSearchResultView execute(String caseTypeId,\n \n     private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerGroups) {\n         return headerGroups.size() == 1\n-               && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n+            && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n     }\n \n     private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult, String caseTypeId, List<String> requestedFields) {\n         CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n         SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n-        // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n+            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition));\n+        });\n         return items;\n     }\n \n-    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId,\n-                                                           String useCase,\n-                                                           CaseSearchResult caseSearchResult,\n-                                                           List<String> requestedFields) {\n+    private CaseDetails filterResultsByAuthorisationAndUserRole(String useCase, CaseDetails caseDetails, String caseTypeId, List<String> requestedFields) {\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        caseDetails.getData().entrySet().removeIf(\n+            caseField -> {\n+                Optional<CaseFieldDefinition> caseFieldDefinition = caseTypeDefinition.getCaseField(caseField.getKey());\n+                return !filterResultsBySearchResultsDefinition(useCase, caseTypeId, requestedFields, caseField.getKey())\n+                    || !filterResultsByAuthorisationAccessOnField(caseFieldDefinition.get());\n+            });\n+        return caseDetails;\n+    }\n+\n+\n+    private Boolean filterResultsBySearchResultsDefinition(String useCase, String caseTypeId, List<String> requestedFields, String caseFieldId) {\n+        Set<String> roles = userRepository.getUserRoles();\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n+        HashMap<String, String> searchFields = getSearchResultDefinitionFieldUserRoleAndField(searchResultDefinition);\n+\n+        if (useCase != null) {\n+            if (!searchFields.containsKey(caseFieldId)) {\n+                return false;\n+            }\n+            String role = searchFields.get(caseFieldId);\n+            if (role != null && !roles.contains(role)) {\n+                return false;\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NjgzMw==", "bodyText": "added methods to the class as requested", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r447666833", "createdAt": "2020-06-30T13:07:01Z", "author": {"login": "RebeccaBaker"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -61,25 +64,78 @@ public CaseSearchResultView execute(String caseTypeId,\n \n     private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerGroups) {\n         return headerGroups.size() == 1\n-               && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n+            && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n     }\n \n     private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult, String caseTypeId, List<String> requestedFields) {\n         CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n         SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n-        // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n+            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition));\n+        });\n         return items;\n     }\n \n-    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId,\n-                                                           String useCase,\n-                                                           CaseSearchResult caseSearchResult,\n-                                                           List<String> requestedFields) {\n+    private CaseDetails filterResultsByAuthorisationAndUserRole(String useCase, CaseDetails caseDetails, String caseTypeId, List<String> requestedFields) {\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        caseDetails.getData().entrySet().removeIf(\n+            caseField -> {\n+                Optional<CaseFieldDefinition> caseFieldDefinition = caseTypeDefinition.getCaseField(caseField.getKey());\n+                return !filterResultsBySearchResultsDefinition(useCase, caseTypeId, requestedFields, caseField.getKey())\n+                    || !filterResultsByAuthorisationAccessOnField(caseFieldDefinition.get());\n+            });\n+        return caseDetails;\n+    }\n+\n+\n+    private Boolean filterResultsBySearchResultsDefinition(String useCase, String caseTypeId, List<String> requestedFields, String caseFieldId) {\n+        Set<String> roles = userRepository.getUserRoles();\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n+        HashMap<String, String> searchFields = getSearchResultDefinitionFieldUserRoleAndField(searchResultDefinition);\n+\n+        if (useCase != null) {\n+            if (!searchFields.containsKey(caseFieldId)) {\n+                return false;\n+            }\n+            String role = searchFields.get(caseFieldId);\n+            if (role != null && !roles.contains(role)) {\n+                return false;\n+            }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1NTMyMg=="}, "originalCommit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDMzODY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/SearchResultDefinition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzo1MTo1M1rOGq9ZGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzo1NzoxM1rOGq9pEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5OTIyNg==", "bodyText": "why you need to pass SearchResultDefinition? you are inside SearchResultDefinition here. Same for the other APIs", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r447699226", "createdAt": "2020-06-30T13:51:53Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/SearchResultDefinition.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package uk.gov.hmcts.ccd.domain.model.definition;\n+\n+import java.io.Serializable;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class SearchResultDefinition implements Serializable {\n+    private SearchResultField[] fields;\n+\n+    public SearchResultField[] getFields() {\n+        return fields;\n+    }\n+\n+    public void setFields(SearchResultField[] fields) {\n+        this.fields = fields;\n+    }\n+\n+    public List<SearchResultField> getFieldsWithPaths() {\n+        return Arrays.stream(fields)\n+            .filter(f -> StringUtils.isNotBlank(f.getCaseFieldPath()))\n+            .collect(Collectors.toList());\n+    }\n+\n+    public Map<String, String> getFieldsUserRoles(SearchResultDefinition searchResultDefinition) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "111496fd68a128bbbec8415ed2d0de8cc7496962"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwMzMxMw==", "bodyText": "good spot- agreed I have removed", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r447703313", "createdAt": "2020-06-30T13:57:13Z", "author": {"login": "RebeccaBaker"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/SearchResultDefinition.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package uk.gov.hmcts.ccd.domain.model.definition;\n+\n+import java.io.Serializable;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class SearchResultDefinition implements Serializable {\n+    private SearchResultField[] fields;\n+\n+    public SearchResultField[] getFields() {\n+        return fields;\n+    }\n+\n+    public void setFields(SearchResultField[] fields) {\n+        this.fields = fields;\n+    }\n+\n+    public List<SearchResultField> getFieldsWithPaths() {\n+        return Arrays.stream(fields)\n+            .filter(f -> StringUtils.isNotBlank(f.getCaseFieldPath()))\n+            .collect(Collectors.toList());\n+    }\n+\n+    public Map<String, String> getFieldsUserRoles(SearchResultDefinition searchResultDefinition) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5OTIyNg=="}, "originalCommit": {"oid": "111496fd68a128bbbec8415ed2d0de8cc7496962"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDQxNTkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/SearchResultDefinition.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowODowM1rOGq-JiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowODowM1rOGq-JiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcxMTYyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!fields.containsKey(caseFieldId)) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    return true;\n          \n          \n            \n                    return !fields.containsKey(caseFieldId);", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r447711625", "createdAt": "2020-06-30T14:08:03Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/SearchResultDefinition.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package uk.gov.hmcts.ccd.domain.model.definition;\n+\n+import java.io.Serializable;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class SearchResultDefinition implements Serializable {\n+    private SearchResultField[] fields;\n+\n+    public SearchResultField[] getFields() {\n+        return fields;\n+    }\n+\n+    public void setFields(SearchResultField[] fields) {\n+        this.fields = fields;\n+    }\n+\n+    public List<SearchResultField> getFieldsWithPaths() {\n+        return Arrays.stream(fields)\n+            .filter(f -> StringUtils.isNotBlank(f.getCaseFieldPath()))\n+            .collect(Collectors.toList());\n+    }\n+\n+    public Map<String, String> getFieldsUserRoles() {\n+        Map<String, String> fields = new HashMap<>();\n+        for (SearchResultField srf : getFields()) {\n+            fields.put(srf.getCaseFieldId(), srf.getRole());\n+        }\n+        return fields;\n+    }\n+\n+    public boolean fieldExists(String caseFieldId) {\n+        Map<String, String> fields = getFieldsUserRoles();\n+        if (!fields.containsKey(caseFieldId)) {\n+            return false;\n+        }\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39e67fe22c686191d2dc7ea057d96a677824192f"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDQyMjY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/SearchResultDefinition.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowOTozMlrOGq-N2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowOTozMlrOGq-N2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcxMjczMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (role != null && !roles.contains(role)) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    return true;\n          \n          \n            \n                    return (role != null && !roles.contains(role));", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r447712731", "createdAt": "2020-06-30T14:09:32Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/SearchResultDefinition.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package uk.gov.hmcts.ccd.domain.model.definition;\n+\n+import java.io.Serializable;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class SearchResultDefinition implements Serializable {\n+    private SearchResultField[] fields;\n+\n+    public SearchResultField[] getFields() {\n+        return fields;\n+    }\n+\n+    public void setFields(SearchResultField[] fields) {\n+        this.fields = fields;\n+    }\n+\n+    public List<SearchResultField> getFieldsWithPaths() {\n+        return Arrays.stream(fields)\n+            .filter(f -> StringUtils.isNotBlank(f.getCaseFieldPath()))\n+            .collect(Collectors.toList());\n+    }\n+\n+    public Map<String, String> getFieldsUserRoles() {\n+        Map<String, String> fields = new HashMap<>();\n+        for (SearchResultField srf : getFields()) {\n+            fields.put(srf.getCaseFieldId(), srf.getRole());\n+        }\n+        return fields;\n+    }\n+\n+    public boolean fieldExists(String caseFieldId) {\n+        Map<String, String> fields = getFieldsUserRoles();\n+        if (!fields.containsKey(caseFieldId)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    public boolean fieldHasRole(String caseFieldId, Set<String> roles) {\n+        Map<String, String> fields = getFieldsUserRoles();\n+        String role = fields.get(caseFieldId);\n+        if (role != null && !roles.contains(role)) {\n+            return false;\n+        }\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39e67fe22c686191d2dc7ea057d96a677824192f"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3737, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}