{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0MjEyNjQx", "number": 1193, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMjo0NToyN1rOE2EomQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMToyMDoyOVrOE2t9pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTM0NDg5OnYy", "diffSide": "RIGHT", "path": "charts/ccd-data-store-api/values.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMjo0NToyN1rOHusrLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjo1NjoyMFrOHu16sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcyODQ5NQ==", "bodyText": "shall we add a quick comment that explain what this does? with an example?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r518728495", "createdAt": "2020-11-06T12:45:27Z", "author": {"login": "mario-paniccia"}, "path": "charts/ccd-data-store-api/values.yaml", "diffHunk": "@@ -25,7 +25,7 @@ java:\n     DATA_STORE_DB_USERNAME: ccd@ccd-data-store-api-postgres-db-{{ .Values.global.environment }}\n     DATA_STORE_DB_OPTIONS: \"?stringtype=unspecified&sslmode=require\"\n     DATA_STORE_DB_MAX_POOL_SIZE: 48\n-\n+    LOG_CALLBACK_DETAILS:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e52c0d58a4f31bf268ce1cee0553931f2c9e7634"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg3OTkyMQ==", "bodyText": "added explanation", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r518879921", "createdAt": "2020-11-06T16:56:20Z", "author": {"login": "henrykcgi"}, "path": "charts/ccd-data-store-api/values.yaml", "diffHunk": "@@ -25,7 +25,7 @@ java:\n     DATA_STORE_DB_USERNAME: ccd@ccd-data-store-api-postgres-db-{{ .Values.global.environment }}\n     DATA_STORE_DB_OPTIONS: \"?stringtype=unspecified&sslmode=require\"\n     DATA_STORE_DB_MAX_POOL_SIZE: 48\n-\n+    LOG_CALLBACK_DETAILS:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcyODQ5NQ=="}, "originalCommit": {"oid": "e52c0d58a4f31bf268ce1cee0553931f2c9e7634"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTM5Mzc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMzowMTowMlrOHutI-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjo1NjozNFrOHu17Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODczNjEyMw==", "bodyText": "this should be a private static final, all upper case. I'd also remove the comment", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r518736123", "createdAt": "2020-11-06T13:01:02Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -118,18 +123,31 @@ public CallbackService(final SecurityUtils securityUtils,\n         HttpHeaders securityHeaders = securityUtils.authorizationHeaders();\n \n         CallbackTelemetryThreadContext.setTelemetryContext(new CallbackTelemetryContext(callbackType));\n+        List<String> ccdCallbackLogControl = applicationParams.getCcdCallbackLogControl();\n+        boolean match = false;\n+        String starStr = \"*\";//to match any call back", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e52c0d58a4f31bf268ce1cee0553931f2c9e7634"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4MDA0Nw==", "bodyText": "refactored", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r518880047", "createdAt": "2020-11-06T16:56:34Z", "author": {"login": "henrykcgi"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -118,18 +123,31 @@ public CallbackService(final SecurityUtils securityUtils,\n         HttpHeaders securityHeaders = securityUtils.authorizationHeaders();\n \n         CallbackTelemetryThreadContext.setTelemetryContext(new CallbackTelemetryContext(callbackType));\n+        List<String> ccdCallbackLogControl = applicationParams.getCcdCallbackLogControl();\n+        boolean match = false;\n+        String starStr = \"*\";//to match any call back", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODczNjEyMw=="}, "originalCommit": {"oid": "e52c0d58a4f31bf268ce1cee0553931f2c9e7634"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTQwOTUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMzowNTo1NFrOHutSQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMzowNTo1NFrOHutSQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODczODQ5Ng==", "bodyText": "I would log also the url to make it simpler to correlate the response to the callback. Otherwise it can be difficult when plenty of callbacks happen at the same time\nAlso remove initial space please", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r518738496", "createdAt": "2020-11-06T13:05:54Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -118,18 +123,31 @@ public CallbackService(final SecurityUtils securityUtils,\n         HttpHeaders securityHeaders = securityUtils.authorizationHeaders();\n \n         CallbackTelemetryThreadContext.setTelemetryContext(new CallbackTelemetryContext(callbackType));\n+        List<String> ccdCallbackLogControl = applicationParams.getCcdCallbackLogControl();\n+        boolean match = false;\n+        String starStr = \"*\";//to match any call back\n+        if (ccdCallbackLogControl.size() > 0 && (starStr.equals(ccdCallbackLogControl.get(0))\n+            || ccdCallbackLogControl.stream().anyMatch(url::contains))) {\n+            match = true;\n+        }\n         int httpStatus = 0;\n         Instant startTime = Instant.now();\n \n         try {\n-            LOG.debug(\"Invoking callback {}\", url);\n             final HttpHeaders httpHeaders = new HttpHeaders();\n             httpHeaders.add(\"Content-Type\", \"application/json\");\n             if (null != securityHeaders) {\n                 securityHeaders.forEach((key, values) -> httpHeaders.put(key, values));\n             }\n             final HttpEntity requestEntity = new HttpEntity(callbackRequest, httpHeaders);\n+            if (match) {\n+                LOG.info(\"Invoking callback {} of CallbackType {} at {} with Request {}\",\n+                    url, callbackType, startTime, requestEntity);\n+            }\n             ResponseEntity<T> responseEntity = restTemplate.exchange(url, HttpMethod.POST, requestEntity, clazz);\n+            if (match) {\n+                LOG.info(\" Received callback Response {}\", responseEntity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e52c0d58a4f31bf268ce1cee0553931f2c9e7634"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTQxNDIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMzowNzoxOVrOHutVIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMzowNzoxOVrOHutVIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODczOTIzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LOG.info(\"Invoking callback {} of CallbackType {} at {} with Request {}\",\n          \n          \n            \n                            LOG.info(\"Invoking callback {} of type {} with request: {}\",\n          \n      \n    \n    \n  \n\nwe could avoid logging the start time since it's logged by default by the logging framework?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r518739232", "createdAt": "2020-11-06T13:07:19Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -118,18 +123,31 @@ public CallbackService(final SecurityUtils securityUtils,\n         HttpHeaders securityHeaders = securityUtils.authorizationHeaders();\n \n         CallbackTelemetryThreadContext.setTelemetryContext(new CallbackTelemetryContext(callbackType));\n+        List<String> ccdCallbackLogControl = applicationParams.getCcdCallbackLogControl();\n+        boolean match = false;\n+        String starStr = \"*\";//to match any call back\n+        if (ccdCallbackLogControl.size() > 0 && (starStr.equals(ccdCallbackLogControl.get(0))\n+            || ccdCallbackLogControl.stream().anyMatch(url::contains))) {\n+            match = true;\n+        }\n         int httpStatus = 0;\n         Instant startTime = Instant.now();\n \n         try {\n-            LOG.debug(\"Invoking callback {}\", url);\n             final HttpHeaders httpHeaders = new HttpHeaders();\n             httpHeaders.add(\"Content-Type\", \"application/json\");\n             if (null != securityHeaders) {\n                 securityHeaders.forEach((key, values) -> httpHeaders.put(key, values));\n             }\n             final HttpEntity requestEntity = new HttpEntity(callbackRequest, httpHeaders);\n+            if (match) {\n+                LOG.info(\"Invoking callback {} of CallbackType {} at {} with Request {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e52c0d58a4f31bf268ce1cee0553931f2c9e7634"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTQyMTE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMzowOToyNVrOHutZWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMzowOToyNVrOHutZWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc0MDMxNA==", "bodyText": "we could do an extract method here to simplify the code.\nAll this could go into a private method\nboolean logCallbackDetails(....)\nand then it can be directly called on line 143 and 148: e.g.\nif(logCallbackDetails(...) {\n     ....", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r518740314", "createdAt": "2020-11-06T13:09:25Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -118,18 +123,31 @@ public CallbackService(final SecurityUtils securityUtils,\n         HttpHeaders securityHeaders = securityUtils.authorizationHeaders();\n \n         CallbackTelemetryThreadContext.setTelemetryContext(new CallbackTelemetryContext(callbackType));\n+        List<String> ccdCallbackLogControl = applicationParams.getCcdCallbackLogControl();\n+        boolean match = false;\n+        String starStr = \"*\";//to match any call back\n+        if (ccdCallbackLogControl.size() > 0 && (starStr.equals(ccdCallbackLogControl.get(0))\n+            || ccdCallbackLogControl.stream().anyMatch(url::contains))) {\n+            match = true;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e52c0d58a4f31bf268ce1cee0553931f2c9e7634"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTQ0NzM2OnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMzoxNzoxOVrOHutpPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNjo1ODoxNVrOHu1_FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc0NDM4MA==", "bodyText": "not sure I understand what we are verifying here", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r518744380", "createdAt": "2020-11-06T13:17:19Z", "author": {"login": "mario-paniccia"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +144,43 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"*\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+\n+        verify(appinsights).trackCallbackEvent(eq(CALLBACK_TYPE), eq(URL), eq(\"200\"), any(Duration.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e52c0d58a4f31bf268ce1cee0553931f2c9e7634"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4MTA0NA==", "bodyText": "updated the tests", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r518881044", "createdAt": "2020-11-06T16:58:15Z", "author": {"login": "henrykcgi"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +144,43 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"*\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+\n+        verify(appinsights).trackCallbackEvent(eq(CALLBACK_TYPE), eq(URL), eq(\"200\"), any(Duration.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc0NDM4MA=="}, "originalCommit": {"oid": "e52c0d58a4f31bf268ce1cee0553931f2c9e7634"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTQ0Nzc3OnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMzoxNzoyOFrOHutpfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMzoxNzoyOFrOHutpfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc0NDQ0NA==", "bodyText": "not sure I understand what we are verifying here", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r518744444", "createdAt": "2020-11-06T13:17:28Z", "author": {"login": "mario-paniccia"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +144,43 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"*\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+\n+        verify(appinsights).trackCallbackEvent(eq(CALLBACK_TYPE), eq(URL), eq(\"200\"), any(Duration.class));\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback event\")\n+    public void shouldLogCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"test-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+\n+        verify(appinsights).trackCallbackEvent(eq(CALLBACK_TYPE), eq(URL), eq(\"200\"), any(Duration.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e52c0d58a4f31bf268ce1cee0553931f2c9e7634"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTQ0OTE5OnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMzoxNzo1NVrOHutqXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMzoxNzo1NVrOHutqXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc0NDY3MQ==", "bodyText": "not sure I understand what we are verifying here", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r518744671", "createdAt": "2020-11-06T13:17:55Z", "author": {"login": "mario-paniccia"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +144,43 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"*\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+\n+        verify(appinsights).trackCallbackEvent(eq(CALLBACK_TYPE), eq(URL), eq(\"200\"), any(Duration.class));\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback event\")\n+    public void shouldLogCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"test-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+\n+        verify(appinsights).trackCallbackEvent(eq(CALLBACK_TYPE), eq(URL), eq(\"200\"), any(Duration.class));\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback event\")\n+    public void shouldNotLogCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"Notest-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+\n+        verify(appinsights).trackCallbackEvent(eq(CALLBACK_TYPE), eq(URL), eq(\"200\"), any(Duration.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e52c0d58a4f31bf268ce1cee0553931f2c9e7634"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTQ1ODQ1OnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMzoyMDozMVrOHutv9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOTo1MTowNFrOHvmrYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc0NjEwMQ==", "bodyText": "perhaps a test where we test the comma separated config?\ne.g.\nccdCallbackLogControl.add(\"callback1, callback2, callback3\");", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r518746101", "createdAt": "2020-11-06T13:20:31Z", "author": {"login": "mario-paniccia"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +144,43 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"*\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+\n+        verify(appinsights).trackCallbackEvent(eq(CALLBACK_TYPE), eq(URL), eq(\"200\"), any(Duration.class));\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback event\")\n+    public void shouldLogCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"test-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+\n+        verify(appinsights).trackCallbackEvent(eq(CALLBACK_TYPE), eq(URL), eq(\"200\"), any(Duration.class));\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback event\")\n+    public void shouldNotLogCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"Notest-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+\n+        verify(appinsights).trackCallbackEvent(eq(CALLBACK_TYPE), eq(URL), eq(\"200\"), any(Duration.class));\n+    }\n+\n     private void initSecurityContext() {\n         doReturn(principal).when(authentication).getPrincipal();\n         doReturn(authentication).when(securityContext).getAuthentication();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e52c0d58a4f31bf268ce1cee0553931f2c9e7634"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4MzU5Mg==", "bodyText": "Not really, Spring will split the comma separated values..\ni believe you mean ccdCallbackLogControl.add(callback1).add(callback2) etc\ndone.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r518883592", "createdAt": "2020-11-06T17:02:44Z", "author": {"login": "henrykcgi"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +144,43 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"*\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+\n+        verify(appinsights).trackCallbackEvent(eq(CALLBACK_TYPE), eq(URL), eq(\"200\"), any(Duration.class));\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback event\")\n+    public void shouldLogCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"test-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+\n+        verify(appinsights).trackCallbackEvent(eq(CALLBACK_TYPE), eq(URL), eq(\"200\"), any(Duration.class));\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback event\")\n+    public void shouldNotLogCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"Notest-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+\n+        verify(appinsights).trackCallbackEvent(eq(CALLBACK_TYPE), eq(URL), eq(\"200\"), any(Duration.class));\n+    }\n+\n     private void initSecurityContext() {\n         doReturn(principal).when(authentication).getPrincipal();\n         doReturn(authentication).when(securityContext).getAuthentication();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc0NjEwMQ=="}, "originalCommit": {"oid": "e52c0d58a4f31bf268ce1cee0553931f2c9e7634"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY3ODgxNg==", "bodyText": "I meant testing logging of multiple callbacks. That's done now in shouldLogCallbackEventMultiple()", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519678816", "createdAt": "2020-11-09T09:51:04Z", "author": {"login": "mario-paniccia"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +144,43 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"*\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+\n+        verify(appinsights).trackCallbackEvent(eq(CALLBACK_TYPE), eq(URL), eq(\"200\"), any(Duration.class));\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback event\")\n+    public void shouldLogCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"test-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+\n+        verify(appinsights).trackCallbackEvent(eq(CALLBACK_TYPE), eq(URL), eq(\"200\"), any(Duration.class));\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback event\")\n+    public void shouldNotLogCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"Notest-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+\n+        verify(appinsights).trackCallbackEvent(eq(CALLBACK_TYPE), eq(URL), eq(\"200\"), any(Duration.class));\n+    }\n+\n     private void initSecurityContext() {\n         doReturn(principal).when(authentication).getPrincipal();\n         doReturn(authentication).when(securityContext).getAuthentication();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc0NjEwMQ=="}, "originalCommit": {"oid": "e52c0d58a4f31bf268ce1cee0553931f2c9e7634"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzYyNDY3OnYy", "diffSide": "RIGHT", "path": "charts/ccd-data-store-api/values.preview.template.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOToxODoyOVrOHvlY0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMjowNjowMVrOHvrkdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1NzY4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                LOG_CALLBACK_DETAILS: \"*\"\n          \n          \n            \n                LOG_CALLBACK_DETAILS:", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519657682", "createdAt": "2020-11-09T09:18:29Z", "author": {"login": "mario-paniccia"}, "path": "charts/ccd-data-store-api/values.preview.template.yaml", "diffHunk": "@@ -24,6 +24,7 @@ java:\n     ELASTIC_SEARCH_NODES_DISCOVERY_ENABLED: false\n     ELASTIC_SEARCH_HOSTS: \"{{ .Release.Name }}-es-master:9200\"\n     ELASTIC_SEARCH_DATA_NODES_HOSTS: \"http://{{ .Release.Name }}-es-master:9200\"\n+    LOG_CALLBACK_DETAILS: \"*\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc1ODk2NQ==", "bodyText": "done", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519758965", "createdAt": "2020-11-09T12:06:01Z", "author": {"login": "henrykcgi"}, "path": "charts/ccd-data-store-api/values.preview.template.yaml", "diffHunk": "@@ -24,6 +24,7 @@ java:\n     ELASTIC_SEARCH_NODES_DISCOVERY_ENABLED: false\n     ELASTIC_SEARCH_HOSTS: \"{{ .Release.Name }}-es-master:9200\"\n     ELASTIC_SEARCH_DATA_NODES_HOSTS: \"http://{{ .Release.Name }}-es-master:9200\"\n+    LOG_CALLBACK_DETAILS: \"*\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1NzY4Mg=="}, "originalCommit": {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzYzNjkyOnYy", "diffSide": "RIGHT", "path": "charts/ccd-data-store-api/values.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOToyMTozMFrOHvlgQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMTo0MzozN1rOHvq0yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1OTU4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # this variable takes comma separated values, To log All '*' is used\n          \n          \n            \n            # this variable takes a comma separated list of callback urls for which details needs to be logged, or '*' for all", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519659585", "createdAt": "2020-11-09T09:21:30Z", "author": {"login": "mario-paniccia"}, "path": "charts/ccd-data-store-api/values.yaml", "diffHunk": "@@ -25,7 +25,9 @@ java:\n     DATA_STORE_DB_USERNAME: ccd@ccd-data-store-api-postgres-db-{{ .Values.global.environment }}\n     DATA_STORE_DB_OPTIONS: \"?stringtype=unspecified&sslmode=require\"\n     DATA_STORE_DB_MAX_POOL_SIZE: 48\n-\n+# this config variable is used to log callback requests and responses,\n+# this variable takes comma separated values, To log All '*' is used", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc0Njc2MQ==", "bodyText": "done", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519746761", "createdAt": "2020-11-09T11:43:37Z", "author": {"login": "henrykcgi"}, "path": "charts/ccd-data-store-api/values.yaml", "diffHunk": "@@ -25,7 +25,9 @@ java:\n     DATA_STORE_DB_USERNAME: ccd@ccd-data-store-api-postgres-db-{{ .Values.global.environment }}\n     DATA_STORE_DB_OPTIONS: \"?stringtype=unspecified&sslmode=require\"\n     DATA_STORE_DB_MAX_POOL_SIZE: 48\n-\n+# this config variable is used to log callback requests and responses,\n+# this variable takes comma separated values, To log All '*' is used", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1OTU4NQ=="}, "originalCommit": {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzY0MzkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOToyMzoyMFrOHvlkmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMjowNzoyM1rOHvrnXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2MDY5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LOG.info(\"The callback {} response received: {}\", url, responseEntity);\n          \n          \n            \n                            LOG.info(\"Callback {} - response received: {}\", url, responseEntity);", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519660697", "createdAt": "2020-11-09T09:23:20Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -122,14 +128,19 @@ public CallbackService(final SecurityUtils securityUtils,\n         Instant startTime = Instant.now();\n \n         try {\n-            LOG.debug(\"Invoking callback {}\", url);\n             final HttpHeaders httpHeaders = new HttpHeaders();\n             httpHeaders.add(\"Content-Type\", \"application/json\");\n             if (null != securityHeaders) {\n                 securityHeaders.forEach((key, values) -> httpHeaders.put(key, values));\n             }\n             final HttpEntity requestEntity = new HttpEntity(callbackRequest, httpHeaders);\n+            if (logCallbackDetails(url)) {\n+                LOG.info(\"Invoking callback {} of type {} with request: {}\", url, callbackType, requestEntity);\n+            }\n             ResponseEntity<T> responseEntity = restTemplate.exchange(url, HttpMethod.POST, requestEntity, clazz);\n+            if (logCallbackDetails(url)) {\n+                LOG.info(\"The callback {} response received: {}\", url, responseEntity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc1OTcxMA==", "bodyText": "done", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519759710", "createdAt": "2020-11-09T12:07:23Z", "author": {"login": "henrykcgi"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -122,14 +128,19 @@ public CallbackService(final SecurityUtils securityUtils,\n         Instant startTime = Instant.now();\n \n         try {\n-            LOG.debug(\"Invoking callback {}\", url);\n             final HttpHeaders httpHeaders = new HttpHeaders();\n             httpHeaders.add(\"Content-Type\", \"application/json\");\n             if (null != securityHeaders) {\n                 securityHeaders.forEach((key, values) -> httpHeaders.put(key, values));\n             }\n             final HttpEntity requestEntity = new HttpEntity(callbackRequest, httpHeaders);\n+            if (logCallbackDetails(url)) {\n+                LOG.info(\"Invoking callback {} of type {} with request: {}\", url, callbackType, requestEntity);\n+            }\n             ResponseEntity<T> responseEntity = restTemplate.exchange(url, HttpMethod.POST, requestEntity, clazz);\n+            if (logCallbackDetails(url)) {\n+                LOG.info(\"The callback {} response received: {}\", url, responseEntity);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2MDY5Nw=="}, "originalCommit": {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzcwMTMxOnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOTozNjo0MVrOHvmG8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMTo0NzozNlrOHvq9Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2OTQ4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> ccdCallbackLogControl = new ArrayList<String>();\n          \n          \n            \n                    List<String> ccdCallbackLogControl = new ArrayList();", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519669489", "createdAt": "2020-11-09T09:36:41Z", "author": {"login": "mario-paniccia"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +161,71 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc0ODk1NQ==", "bodyText": "done", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519748955", "createdAt": "2020-11-09T11:47:36Z", "author": {"login": "henrykcgi"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +161,71 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2OTQ4OQ=="}, "originalCommit": {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzcwMjI1OnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOTozNjo1NFrOHvmHgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOToxMDoyOFrOHxEf_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2OTYzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> ccdCallbackLogControl = new ArrayList<String>();\n          \n          \n            \n                    List<String> ccdCallbackLogControl = new ArrayList();", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519669632", "createdAt": "2020-11-09T09:36:54Z", "author": {"login": "mario-paniccia"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +161,71 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"*\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"Invoking callback {} of type {} with request: {}\", logsList.get(0)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback test multiple event\")\n+    public void shouldLogCallbackEventMultiple() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc1OTg5Mw==", "bodyText": "done", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519759893", "createdAt": "2020-11-09T12:07:46Z", "author": {"login": "henrykcgi"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +161,71 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"*\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"Invoking callback {} of type {} with request: {}\", logsList.get(0)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback test multiple event\")\n+    public void shouldLogCallbackEventMultiple() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2OTYzMg=="}, "originalCommit": {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIxNTk5Nw==", "bodyText": "it doesn't look like @henrykcgi", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r521215997", "createdAt": "2020-11-11T09:10:28Z", "author": {"login": "mario-paniccia"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +161,71 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"*\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"Invoking callback {} of type {} with request: {}\", logsList.get(0)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback test multiple event\")\n+    public void shouldLogCallbackEventMultiple() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2OTYzMg=="}, "originalCommit": {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzcwMjk4OnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOTozNzowNFrOHvmH9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMjoxNzozNlrOHvr77g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2OTc1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> ccdCallbackLogControl = new ArrayList<String>();\n          \n          \n            \n                    List<String> ccdCallbackLogControl = new ArrayList();", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519669750", "createdAt": "2020-11-09T09:37:04Z", "author": {"login": "mario-paniccia"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +161,71 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"*\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"Invoking callback {} of type {} with request: {}\", logsList.get(0)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback test multiple event\")\n+    public void shouldLogCallbackEventMultiple() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"abc-callback\");\n+        ccdCallbackLogControl.add(\"xyz-callback\");\n+        ccdCallbackLogControl.add(\"test-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"The callback {} response received: {}\", logsList.get(1)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback test event\")\n+    public void shouldLogCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc2NDk3NA==", "bodyText": "done", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519764974", "createdAt": "2020-11-09T12:17:36Z", "author": {"login": "henrykcgi"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +161,71 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"*\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"Invoking callback {} of type {} with request: {}\", logsList.get(0)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback test multiple event\")\n+    public void shouldLogCallbackEventMultiple() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"abc-callback\");\n+        ccdCallbackLogControl.add(\"xyz-callback\");\n+        ccdCallbackLogControl.add(\"test-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"The callback {} response received: {}\", logsList.get(1)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback test event\")\n+    public void shouldLogCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2OTc1MA=="}, "originalCommit": {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzcwMzk4OnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOTozNzoxNVrOHvmIjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMjowMjoxOFrOHvrc5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2OTkwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> ccdCallbackLogControl = new ArrayList<String>();\n          \n          \n            \n                    List<String> ccdCallbackLogControl = new ArrayList();", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519669900", "createdAt": "2020-11-09T09:37:15Z", "author": {"login": "mario-paniccia"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +161,71 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"*\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"Invoking callback {} of type {} with request: {}\", logsList.get(0)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback test multiple event\")\n+    public void shouldLogCallbackEventMultiple() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"abc-callback\");\n+        ccdCallbackLogControl.add(\"xyz-callback\");\n+        ccdCallbackLogControl.add(\"test-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"The callback {} response received: {}\", logsList.get(1)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback test event\")\n+    public void shouldLogCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"test-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"Invoking callback {} of type {} with request: {}\", logsList.get(0)\n+            .getMessage());\n+        assertEquals(\"The callback {} response received: {}\", logsList.get(1)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Not Log callback event\")\n+    public void shouldNotLogCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc1NzAyOQ==", "bodyText": "done", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519757029", "createdAt": "2020-11-09T12:02:18Z", "author": {"login": "henrykcgi"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +161,71 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"*\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"Invoking callback {} of type {} with request: {}\", logsList.get(0)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback test multiple event\")\n+    public void shouldLogCallbackEventMultiple() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"abc-callback\");\n+        ccdCallbackLogControl.add(\"xyz-callback\");\n+        ccdCallbackLogControl.add(\"test-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"The callback {} response received: {}\", logsList.get(1)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback test event\")\n+    public void shouldLogCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"test-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"Invoking callback {} of type {} with request: {}\", logsList.get(0)\n+            .getMessage());\n+        assertEquals(\"The callback {} response received: {}\", logsList.get(1)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Not Log callback event\")\n+    public void shouldNotLogCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2OTkwMA=="}, "originalCommit": {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzcwNDcxOnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOTozNzoyNVrOHvmI-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOToxMTo0MlrOHxEipQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY3MDAxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> ccdCallbackLogControl = new ArrayList<String>();\n          \n          \n            \n                    List<String> ccdCallbackLogControl = new ArrayList();", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519670010", "createdAt": "2020-11-09T09:37:25Z", "author": {"login": "mario-paniccia"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +161,71 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"*\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"Invoking callback {} of type {} with request: {}\", logsList.get(0)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback test multiple event\")\n+    public void shouldLogCallbackEventMultiple() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"abc-callback\");\n+        ccdCallbackLogControl.add(\"xyz-callback\");\n+        ccdCallbackLogControl.add(\"test-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"The callback {} response received: {}\", logsList.get(1)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback test event\")\n+    public void shouldLogCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"test-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"Invoking callback {} of type {} with request: {}\", logsList.get(0)\n+            .getMessage());\n+        assertEquals(\"The callback {} response received: {}\", logsList.get(1)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Not Log callback event\")\n+    public void shouldNotLogCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"Notest-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(0,logsList.size());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Not Log callback event when empty\")\n+    public void shouldNotLogCallbackEventEmpty() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIxNjY3Nw==", "bodyText": "how come this is resolved @henrykcgi but the change hasn't been done?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r521216677", "createdAt": "2020-11-11T09:11:42Z", "author": {"login": "mario-paniccia"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +161,71 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"*\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"Invoking callback {} of type {} with request: {}\", logsList.get(0)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback test multiple event\")\n+    public void shouldLogCallbackEventMultiple() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"abc-callback\");\n+        ccdCallbackLogControl.add(\"xyz-callback\");\n+        ccdCallbackLogControl.add(\"test-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"The callback {} response received: {}\", logsList.get(1)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback test event\")\n+    public void shouldLogCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"test-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"Invoking callback {} of type {} with request: {}\", logsList.get(0)\n+            .getMessage());\n+        assertEquals(\"The callback {} response received: {}\", logsList.get(1)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Not Log callback event\")\n+    public void shouldNotLogCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"Notest-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(0,logsList.size());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Not Log callback event when empty\")\n+    public void shouldNotLogCallbackEventEmpty() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY3MDAxMA=="}, "originalCommit": {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzcyNzIyOnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOTo0MzowMFrOHvmW0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMjowODoxMFrOHvro2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY3MzU1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @DisplayName(\"Should Log callback test multiple event\")\n          \n          \n            \n                @DisplayName(\"Should Log callback test multiple callbacks\")", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519673554", "createdAt": "2020-11-09T09:43:00Z", "author": {"login": "mario-paniccia"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +161,71 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"*\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"Invoking callback {} of type {} with request: {}\", logsList.get(0)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback test multiple event\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc2MDA5MA==", "bodyText": "done", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519760090", "createdAt": "2020-11-09T12:08:10Z", "author": {"login": "henrykcgi"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +161,71 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"*\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"Invoking callback {} of type {} with request: {}\", logsList.get(0)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback test multiple event\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY3MzU1NA=="}, "originalCommit": {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzczMDcwOnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOTo0Mzo1OFrOHvmY7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMjowNToyM1rOHvrjNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY3NDA5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @DisplayName(\"Should Log callback test event\")\n          \n          \n            \n                @DisplayName(\"Should Log callback test single callback\")", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519674092", "createdAt": "2020-11-09T09:43:58Z", "author": {"login": "mario-paniccia"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +161,71 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"*\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"Invoking callback {} of type {} with request: {}\", logsList.get(0)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback test multiple event\")\n+    public void shouldLogCallbackEventMultiple() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"abc-callback\");\n+        ccdCallbackLogControl.add(\"xyz-callback\");\n+        ccdCallbackLogControl.add(\"test-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"The callback {} response received: {}\", logsList.get(1)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback test event\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc1ODY0NA==", "bodyText": "done", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519758644", "createdAt": "2020-11-09T12:05:23Z", "author": {"login": "henrykcgi"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceTest.java", "diffHunk": "@@ -139,10 +161,71 @@ public void shouldTrackCallbackEventOnException() throws Exception {\n \n     }\n \n+    @Test\n+    @DisplayName(\"Should LogAll callback event\")\n+    public void shouldLogAllCallbackEvent() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"*\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"Invoking callback {} of type {} with request: {}\", logsList.get(0)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback test multiple event\")\n+    public void shouldLogCallbackEventMultiple() throws Exception {\n+        List<String> ccdCallbackLogControl = new ArrayList<String>();\n+        ccdCallbackLogControl.add(\"abc-callback\");\n+        ccdCallbackLogControl.add(\"xyz-callback\");\n+        ccdCallbackLogControl.add(\"test-callback\");\n+        doReturn(ccdCallbackLogControl).when(applicationParams).getCcdCallbackLogControl();\n+        callbackService.send(URL, CALLBACK_TYPE, caseEventDefinition, null, caseDetails, (Boolean)null);\n+        List<ILoggingEvent> logsList = listAppender.list;\n+        assertEquals(\"The callback {} response received: {}\", logsList.get(1)\n+            .getMessage());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Should Log callback test event\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY3NDA5Mg=="}, "originalCommit": {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Nzg3MjMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMDoxNzozNFrOHvnvlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMjoxMDoxMVrOHvrs_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY5NjI3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String STAR_STR = \"*\";\n          \n          \n            \n                private static final String WILDCARD = \"*\";", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519696276", "createdAt": "2020-11-09T10:17:34Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -37,17 +39,21 @@\n @Service\n public class CallbackService {\n     private static final Logger LOG = LoggerFactory.getLogger(CallbackService.class);\n+    private static final String STAR_STR = \"*\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc2MTE0OQ==", "bodyText": "Done", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519761149", "createdAt": "2020-11-09T12:10:11Z", "author": {"login": "henrykcgi"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -37,17 +39,21 @@\n @Service\n public class CallbackService {\n     private static final Logger LOG = LoggerFactory.getLogger(CallbackService.class);\n+    private static final String STAR_STR = \"*\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY5NjI3Ng=="}, "originalCommit": {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Nzg5ODY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMDoyMzo1NlrOHvn_xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMjoxMjoxOFrOHvrxUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcwMDQyMQ==", "bodyText": "Query: Just checking - does logging requestEntity itself actually log what we need? (Sorry I can't tell from tests, assume it's OK?)", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519700421", "createdAt": "2020-11-09T10:23:56Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -122,14 +128,19 @@ public CallbackService(final SecurityUtils securityUtils,\n         Instant startTime = Instant.now();\n \n         try {\n-            LOG.debug(\"Invoking callback {}\", url);\n             final HttpHeaders httpHeaders = new HttpHeaders();\n             httpHeaders.add(\"Content-Type\", \"application/json\");\n             if (null != securityHeaders) {\n                 securityHeaders.forEach((key, values) -> httpHeaders.put(key, values));\n             }\n             final HttpEntity requestEntity = new HttpEntity(callbackRequest, httpHeaders);\n+            if (logCallbackDetails(url)) {\n+                LOG.info(\"Invoking callback {} of type {} with request: {}\", url, callbackType, requestEntity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc2MjI1Nw==", "bodyText": "Yes of course. the code has been modified for that effect.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519762257", "createdAt": "2020-11-09T12:12:18Z", "author": {"login": "henrykcgi"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -122,14 +128,19 @@ public CallbackService(final SecurityUtils securityUtils,\n         Instant startTime = Instant.now();\n \n         try {\n-            LOG.debug(\"Invoking callback {}\", url);\n             final HttpHeaders httpHeaders = new HttpHeaders();\n             httpHeaders.add(\"Content-Type\", \"application/json\");\n             if (null != securityHeaders) {\n                 securityHeaders.forEach((key, values) -> httpHeaders.put(key, values));\n             }\n             final HttpEntity requestEntity = new HttpEntity(callbackRequest, httpHeaders);\n+            if (logCallbackDetails(url)) {\n+                LOG.info(\"Invoking callback {} of type {} with request: {}\", url, callbackType, requestEntity);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcwMDQyMQ=="}, "originalCommit": {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzkwMDI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMDoyNDoyMFrOHvoAyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMjoxODoxMlrOHvr9Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcwMDY4Mw==", "bodyText": "Same query as above - does logging responseEntity itself actually log what we need?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519700683", "createdAt": "2020-11-09T10:24:20Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -122,14 +128,19 @@ public CallbackService(final SecurityUtils securityUtils,\n         Instant startTime = Instant.now();\n \n         try {\n-            LOG.debug(\"Invoking callback {}\", url);\n             final HttpHeaders httpHeaders = new HttpHeaders();\n             httpHeaders.add(\"Content-Type\", \"application/json\");\n             if (null != securityHeaders) {\n                 securityHeaders.forEach((key, values) -> httpHeaders.put(key, values));\n             }\n             final HttpEntity requestEntity = new HttpEntity(callbackRequest, httpHeaders);\n+            if (logCallbackDetails(url)) {\n+                LOG.info(\"Invoking callback {} of type {} with request: {}\", url, callbackType, requestEntity);\n+            }\n             ResponseEntity<T> responseEntity = restTemplate.exchange(url, HttpMethod.POST, requestEntity, clazz);\n+            if (logCallbackDetails(url)) {\n+                LOG.info(\"The callback {} response received: {}\", url, responseEntity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc2NTI4Mw==", "bodyText": "yes it does", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519765283", "createdAt": "2020-11-09T12:18:12Z", "author": {"login": "henrykcgi"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -122,14 +128,19 @@ public CallbackService(final SecurityUtils securityUtils,\n         Instant startTime = Instant.now();\n \n         try {\n-            LOG.debug(\"Invoking callback {}\", url);\n             final HttpHeaders httpHeaders = new HttpHeaders();\n             httpHeaders.add(\"Content-Type\", \"application/json\");\n             if (null != securityHeaders) {\n                 securityHeaders.forEach((key, values) -> httpHeaders.put(key, values));\n             }\n             final HttpEntity requestEntity = new HttpEntity(callbackRequest, httpHeaders);\n+            if (logCallbackDetails(url)) {\n+                LOG.info(\"Invoking callback {} of type {} with request: {}\", url, callbackType, requestEntity);\n+            }\n             ResponseEntity<T> responseEntity = restTemplate.exchange(url, HttpMethod.POST, requestEntity, clazz);\n+            if (logCallbackDetails(url)) {\n+                LOG.info(\"The callback {} response received: {}\", url, responseEntity);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcwMDY4Mw=="}, "originalCommit": {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzkyMjA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMDoyOTo0NVrOHvoNpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMjoxNDowM1rOHvr0qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcwMzk3Mg==", "bodyText": "Just return this instead of initialising the boolean, setting in here and then returning..", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519703972", "createdAt": "2020-11-09T10:29:45Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -155,4 +166,14 @@ public void validateCallbackErrorsAndWarnings(final CallbackResponse callbackRes\n                 .withWarnings(callbackResponse.getWarnings());\n         }\n     }\n+\n+    private boolean logCallbackDetails(final String url) {\n+        boolean logCallBack = false;\n+        List<String> ccdCallbackLogControl = applicationParams.getCcdCallbackLogControl();\n+        if (ccdCallbackLogControl.size() > 0 && (STAR_STR.equals(ccdCallbackLogControl.get(0))\n+            || ccdCallbackLogControl.stream().anyMatch(url::contains))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcwOTQwMw==", "bodyText": "Could maybe be simplified slightly too?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (ccdCallbackLogControl.size() > 0 && (STAR_STR.equals(ccdCallbackLogControl.get(0))\n          \n          \n            \n                        || ccdCallbackLogControl.stream().anyMatch(url::contains))) {\n          \n          \n            \n                    return ccdCallbackLogControl.contains(WILDCARD) || ccdCallbackLogControl.stream().anyMatch(url::contains);", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519709403", "createdAt": "2020-11-09T10:38:30Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -155,4 +166,14 @@ public void validateCallbackErrorsAndWarnings(final CallbackResponse callbackRes\n                 .withWarnings(callbackResponse.getWarnings());\n         }\n     }\n+\n+    private boolean logCallbackDetails(final String url) {\n+        boolean logCallBack = false;\n+        List<String> ccdCallbackLogControl = applicationParams.getCcdCallbackLogControl();\n+        if (ccdCallbackLogControl.size() > 0 && (STAR_STR.equals(ccdCallbackLogControl.get(0))\n+            || ccdCallbackLogControl.stream().anyMatch(url::contains))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcwMzk3Mg=="}, "originalCommit": {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc2MzExNA==", "bodyText": "No. Not really. We would like to have the strict control definition of the wild card.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519763114", "createdAt": "2020-11-09T12:14:03Z", "author": {"login": "henrykcgi"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -155,4 +166,14 @@ public void validateCallbackErrorsAndWarnings(final CallbackResponse callbackRes\n                 .withWarnings(callbackResponse.getWarnings());\n         }\n     }\n+\n+    private boolean logCallbackDetails(final String url) {\n+        boolean logCallBack = false;\n+        List<String> ccdCallbackLogControl = applicationParams.getCcdCallbackLogControl();\n+        if (ccdCallbackLogControl.size() > 0 && (STAR_STR.equals(ccdCallbackLogControl.get(0))\n+            || ccdCallbackLogControl.stream().anyMatch(url::contains))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcwMzk3Mg=="}, "originalCommit": {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODExNjIxOnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceWireMockTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMToyMDoyOVrOHvqDSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMjoxNjo0OFrOHvr6Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTczNDA4OQ==", "bodyText": "is this now still needed? maybe a leftover?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519734089", "createdAt": "2020-11-09T11:20:29Z", "author": {"login": "mario-paniccia"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceWireMockTest.java", "diffHunk": "@@ -290,7 +290,7 @@ public void shouldThrowCallbackException_whenSendInvalidUrlGetGenericBody() {\n \n         // Builds a new callback service to avoid wiremock exception to get in the way\n         final CallbackService underTest = new CallbackService(Mockito.mock(SecurityUtils.class), restTemplate,\n-            Mockito.mock(AppInsights.class));\n+            Mockito.mock(ApplicationParams.class), Mockito.mock(AppInsights.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc2NDU0Nw==", "bodyText": "It is needed.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1193#discussion_r519764547", "createdAt": "2020-11-09T12:16:48Z", "author": {"login": "henrykcgi"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackServiceWireMockTest.java", "diffHunk": "@@ -290,7 +290,7 @@ public void shouldThrowCallbackException_whenSendInvalidUrlGetGenericBody() {\n \n         // Builds a new callback service to avoid wiremock exception to get in the way\n         final CallbackService underTest = new CallbackService(Mockito.mock(SecurityUtils.class), restTemplate,\n-            Mockito.mock(AppInsights.class));\n+            Mockito.mock(ApplicationParams.class), Mockito.mock(AppInsights.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTczNDA4OQ=="}, "originalCommit": {"oid": "b63179f6a045ac742050f33f42cf46786acc88e5"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3629, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}