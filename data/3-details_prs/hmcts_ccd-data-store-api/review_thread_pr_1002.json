{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0MDY2OTM2", "number": 1002, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMzo1MTozMlrOELQcsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzoxMTowNVrOEMW_zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjM5MjgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/search/SearchQueryFactoryOperation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMzo1MTozMlrOGsxC4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMzo1MTozMlrOGsxC4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU5NDA4MA==", "bodyText": "Implementation change that will require reviewing. With Java 11-compatible version of Hibernate we can no longer use the old approach of mixing named and positional parameters in the same query. (Note there are a number of tests, especially integration tests, that test this new implementation didn't affect the ultimate behaviour).", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1002#discussion_r449594080", "createdAt": "2020-07-03T13:51:32Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/search/SearchQueryFactoryOperation.java", "diffHunk": "@@ -99,16 +98,13 @@ private String addUserCaseStateAccessClause(MetaData metadata, Map<String, Objec\n     }\n \n     private void addParameters(final Query query, List<Criterion> criterion) {\n-\n-        IntStream.range(0, criterion.size())\n-                .forEach(position -> query.setParameter(position, criterion.get(position).getSoughtValue()));\n+        criterion.forEach(criteria -> query.setParameter(criteria.buildParameterId(), criteria.getSoughtValue()));\n     }\n \n     private String toClauses(final List<Criterion> criterion) {\n-        return IntStream.range(0, criterion.size())\n-                .mapToObj(Integer::new)\n-                .map(position -> criterion.get(position).buildClauseString(position, getOperation()))\n-                .collect(Collectors.joining(AND));\n+        return criterion.stream()\n+            .map(criteria -> criteria.buildClauseString(getOperation()))\n+            .collect(Collectors.joining(AND));\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a84093c7e90075fb8a1c7674a34c6517030de71"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjM5OTQ4OnYy", "diffSide": "LEFT", "path": "Dockerfile", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMzo1Mzo0NVrOGsxG3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMzo1Mzo0NVrOGsxG3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU5NTEwMA==", "bodyText": "TODO in higher env: Check that App Insights still works on latest version, and relying on the HMCTS-provided implementation rather than the jar that was in the repo.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1002#discussion_r449595100", "createdAt": "2020-07-03T13:53:45Z", "author": {"login": "danlysiak"}, "path": "Dockerfile", "diffHunk": "@@ -1,12 +1,11 @@\n-# Keep hub.Dockerfile aligned to this file as far as possible\n ARG JAVA_OPTS=\"-Djava.security.egd=file:/dev/./urandom\"\n-ARG APP_INSIGHTS_AGENT_VERSION=2.4.1\n+ARG APP_INSIGHTS_AGENT_VERSION=2.5.0\n \n-FROM hmctspublic.azurecr.io/base/java:openjdk-8-distroless-1.0\n+FROM hmctspublic.azurecr.io/base/java:openjdk-11-distroless-1.4\n LABEL maintainer=\"https://github.com/hmcts/ccd-data-store-api\"\n \n COPY build/libs/core-case-data.jar /opt/app/\n-COPY lib/applicationinsights-agent-2.4.1.jar lib/AI-Agent.xml /opt/app/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a84093c7e90075fb8a1c7674a34c6517030de71"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzk0OTA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/search/SearchQueryFactoryOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzoxMDoyMVrOGua6hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzoxMDoyMVrOGua6hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMyODY0Ng==", "bodyText": "List<Criterion> criterion --> List<Criterion> criteria\ncriterion.forEach(criteria --> criteria.forEach(criterion", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1002#discussion_r451328646", "createdAt": "2020-07-08T07:10:21Z", "author": {"login": "MSancaktutar"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/search/SearchQueryFactoryOperation.java", "diffHunk": "@@ -99,16 +98,13 @@ private String addUserCaseStateAccessClause(MetaData metadata, Map<String, Objec\n     }\n \n     private void addParameters(final Query query, List<Criterion> criterion) {\n-\n-        IntStream.range(0, criterion.size())\n-                .forEach(position -> query.setParameter(position, criterion.get(position).getSoughtValue()));\n+        criterion.forEach(criteria -> query.setParameter(criteria.buildParameterId(), criteria.getSoughtValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e682fc6874e0564c7dbb3bd7da02e3998073ab"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzk1MTUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/search/SearchQueryFactoryOperation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzoxMTowNVrOGua77A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwODowMzo0OVrOGucsxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMyOTAwNA==", "bodyText": "swap use of plural and singular of identifiers.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1002#discussion_r451329004", "createdAt": "2020-07-08T07:11:05Z", "author": {"login": "MSancaktutar"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/search/SearchQueryFactoryOperation.java", "diffHunk": "@@ -99,16 +98,13 @@ private String addUserCaseStateAccessClause(MetaData metadata, Map<String, Objec\n     }\n \n     private void addParameters(final Query query, List<Criterion> criterion) {\n-\n-        IntStream.range(0, criterion.size())\n-                .forEach(position -> query.setParameter(position, criterion.get(position).getSoughtValue()));\n+        criterion.forEach(criteria -> query.setParameter(criteria.buildParameterId(), criteria.getSoughtValue()));\n     }\n \n     private String toClauses(final List<Criterion> criterion) {\n-        return IntStream.range(0, criterion.size())\n-                .mapToObj(Integer::new)\n-                .map(position -> criterion.get(position).buildClauseString(position, getOperation()))\n-                .collect(Collectors.joining(AND));\n+        return criterion.stream()\n+            .map(criteria -> criteria.buildClauseString(getOperation()))\n+            .collect(Collectors.joining(AND));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e682fc6874e0564c7dbb3bd7da02e3998073ab"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM1Nzg5Mw==", "bodyText": "Oh yes, good spot!", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1002#discussion_r451357893", "createdAt": "2020-07-08T08:03:49Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/search/SearchQueryFactoryOperation.java", "diffHunk": "@@ -99,16 +98,13 @@ private String addUserCaseStateAccessClause(MetaData metadata, Map<String, Objec\n     }\n \n     private void addParameters(final Query query, List<Criterion> criterion) {\n-\n-        IntStream.range(0, criterion.size())\n-                .forEach(position -> query.setParameter(position, criterion.get(position).getSoughtValue()));\n+        criterion.forEach(criteria -> query.setParameter(criteria.buildParameterId(), criteria.getSoughtValue()));\n     }\n \n     private String toClauses(final List<Criterion> criterion) {\n-        return IntStream.range(0, criterion.size())\n-                .mapToObj(Integer::new)\n-                .map(position -> criterion.get(position).buildClauseString(position, getOperation()))\n-                .collect(Collectors.joining(AND));\n+        return criterion.stream()\n+            .map(criteria -> criteria.buildClauseString(getOperation()))\n+            .collect(Collectors.joining(AND));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMyOTAwNA=="}, "originalCommit": {"oid": "e6e682fc6874e0564c7dbb3bd7da02e3998073ab"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3751, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}