{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNjg4MTIz", "number": 997, "reviewThreads": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzoyOToyM1rOEJ9-oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMTozNzoyOFrOELpksQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODg4MDk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/config/JacksonUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzoyOToyM1rOGqvW3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzoyOToyM1rOGqvW3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ2OTI3Nw==", "bodyText": "There is a JacksonUtils which helps to reduce code duplication.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r447469277", "createdAt": "2020-06-30T07:29:23Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/config/JacksonUtils.java", "diffHunk": "@@ -42,4 +42,9 @@ public static JsonNode convertValueJsonNode(Object from) {\n         return new TypeReference<HashMap<String, JsonNode>>() {\n         };\n     }\n+\n+    public static HashMap<String, Object> convertJsonNode(Object from) {\n+        return MAPPER.convertValue(from, new TypeReference<HashMap<String, Object>>() {\n+        });\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b1f491e76722711ddeb36e1ad0674b554d69d78"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODk4MDE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/DefaultSupplementaryDataRepository.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzo1NToyMFrOGqwTlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODoyMzoyOVrOGqxYtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4NDgyMA==", "bodyText": "Can queryList.size be 0 ?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r447484820", "createdAt": "2020-06-30T07:55:20Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/DefaultSupplementaryDataRepository.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package uk.gov.hmcts.ccd.data.casedetails.supplementarydata;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Singleton;\n+import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.Query;\n+import javax.transaction.Transactional;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.config.JacksonUtils;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryData;\n+\n+@Service\n+@Qualifier(\"default\")\n+@Singleton\n+@Transactional\n+public class DefaultSupplementaryDataRepository implements SupplementaryDataRepository {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultSupplementaryDataRepository.class);\n+\n+    @PersistenceContext\n+    private EntityManager em;\n+\n+    private List<SupplementaryDataQueryBuilder> queryBuilders;\n+\n+    @Autowired\n+    public DefaultSupplementaryDataRepository(final List<SupplementaryDataQueryBuilder> queryBuilders) {\n+        this.queryBuilders = queryBuilders;\n+    }\n+\n+    @Override\n+    public void setSupplementaryData(final String caseReference, final Map<String, Object> supplementaryData) {\n+        LOG.debug(\"Set supplementary data\");\n+        List<Query> queryList = getQueryBuilder(Operation.SET).buildQueries(em, caseReference, supplementaryData);\n+        queryList.stream().forEach(query -> query.executeUpdate());\n+    }\n+\n+    @Override\n+    public void incrementSupplementaryData(final String caseReference, final Map<String, Object> supplementaryData) {\n+        LOG.debug(\"Insert supplementary data\");\n+        List<Query> queryList = getQueryBuilder(Operation.INC).buildQueries(em, caseReference, supplementaryData);\n+        queryList.stream().forEach(query -> query.executeUpdate());\n+    }\n+\n+    @Override\n+    public SupplementaryData findSupplementaryData(final String caseReference) {\n+        LOG.debug(\"Find supplementary data\");\n+        List<Query> queryList = getQueryBuilder(Operation.FIND).buildQueries(em, caseReference, null);\n+        JsonNode result = (JsonNode) queryList.get(0).getSingleResult();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b1f491e76722711ddeb36e1ad0674b554d69d78"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwMjUxOQ==", "bodyText": "No, It will return at least one query", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r447502519", "createdAt": "2020-06-30T08:23:29Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/DefaultSupplementaryDataRepository.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package uk.gov.hmcts.ccd.data.casedetails.supplementarydata;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Singleton;\n+import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.Query;\n+import javax.transaction.Transactional;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.config.JacksonUtils;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryData;\n+\n+@Service\n+@Qualifier(\"default\")\n+@Singleton\n+@Transactional\n+public class DefaultSupplementaryDataRepository implements SupplementaryDataRepository {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultSupplementaryDataRepository.class);\n+\n+    @PersistenceContext\n+    private EntityManager em;\n+\n+    private List<SupplementaryDataQueryBuilder> queryBuilders;\n+\n+    @Autowired\n+    public DefaultSupplementaryDataRepository(final List<SupplementaryDataQueryBuilder> queryBuilders) {\n+        this.queryBuilders = queryBuilders;\n+    }\n+\n+    @Override\n+    public void setSupplementaryData(final String caseReference, final Map<String, Object> supplementaryData) {\n+        LOG.debug(\"Set supplementary data\");\n+        List<Query> queryList = getQueryBuilder(Operation.SET).buildQueries(em, caseReference, supplementaryData);\n+        queryList.stream().forEach(query -> query.executeUpdate());\n+    }\n+\n+    @Override\n+    public void incrementSupplementaryData(final String caseReference, final Map<String, Object> supplementaryData) {\n+        LOG.debug(\"Insert supplementary data\");\n+        List<Query> queryList = getQueryBuilder(Operation.INC).buildQueries(em, caseReference, supplementaryData);\n+        queryList.stream().forEach(query -> query.executeUpdate());\n+    }\n+\n+    @Override\n+    public SupplementaryData findSupplementaryData(final String caseReference) {\n+        LOG.debug(\"Find supplementary data\");\n+        List<Query> queryList = getQueryBuilder(Operation.FIND).buildQueries(em, caseReference, null);\n+        JsonNode result = (JsonNode) queryList.get(0).getSingleResult();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4NDgyMA=="}, "originalCommit": {"oid": "4b1f491e76722711ddeb36e1ad0674b554d69d78"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODk5MTUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/SupplementaryDataQueryBuilder.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzo1ODoxMlrOGqwaZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMzo1NTo0OFrOGr48IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4NjU2Nw==", "bodyText": "Can we LOG the error ? It will be easier for tracking.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r447486567", "createdAt": "2020-06-30T07:58:12Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/SupplementaryDataQueryBuilder.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package uk.gov.hmcts.ccd.data.casedetails.supplementarydata;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.vladmihalcea.hibernate.type.json.JsonNodeBinaryType;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+import java.util.Map;\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+import org.hibernate.query.NativeQuery;\n+\n+public interface SupplementaryDataQueryBuilder {\n+\n+    ObjectMapper mapper = new ObjectMapper();\n+\n+    SupplementaryDataProcessor dataProcessor = new SupplementaryDataProcessor();\n+\n+    List<Query> buildQueries(EntityManager entityManager, String caseReference, Map<String, Object> requestData);\n+\n+    Operation operationType();\n+\n+    default String requestJson(Object supplementaryData) {\n+        try {\n+            return mapper.writeValueAsString(supplementaryData);\n+        } catch (JsonProcessingException e) {\n+            return \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b1f491e76722711ddeb36e1ad0674b554d69d78"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3OTY5NQ==", "bodyText": "or throw a RuntimeException. The request will fail later on anyway right? So better fail fast here with a nice descriptive error message. Or even better,\nfail even before at the level of the Controller, as soon as the request comes we verify is a valid JSON otherwise throw back a BadRequest exception", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r448279695", "createdAt": "2020-07-01T10:48:52Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/SupplementaryDataQueryBuilder.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package uk.gov.hmcts.ccd.data.casedetails.supplementarydata;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.vladmihalcea.hibernate.type.json.JsonNodeBinaryType;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+import java.util.Map;\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+import org.hibernate.query.NativeQuery;\n+\n+public interface SupplementaryDataQueryBuilder {\n+\n+    ObjectMapper mapper = new ObjectMapper();\n+\n+    SupplementaryDataProcessor dataProcessor = new SupplementaryDataProcessor();\n+\n+    List<Query> buildQueries(EntityManager entityManager, String caseReference, Map<String, Object> requestData);\n+\n+    Operation operationType();\n+\n+    default String requestJson(Object supplementaryData) {\n+        try {\n+            return mapper.writeValueAsString(supplementaryData);\n+        } catch (JsonProcessingException e) {\n+            return \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4NjU2Nw=="}, "originalCommit": {"oid": "4b1f491e76722711ddeb36e1ad0674b554d69d78"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3NDg0OQ==", "bodyText": "Used DefaultObjectMapperService instead of toJson(..) method", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r448674849", "createdAt": "2020-07-01T23:55:48Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/SupplementaryDataQueryBuilder.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package uk.gov.hmcts.ccd.data.casedetails.supplementarydata;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.vladmihalcea.hibernate.type.json.JsonNodeBinaryType;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+import java.util.Map;\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+import org.hibernate.query.NativeQuery;\n+\n+public interface SupplementaryDataQueryBuilder {\n+\n+    ObjectMapper mapper = new ObjectMapper();\n+\n+    SupplementaryDataProcessor dataProcessor = new SupplementaryDataProcessor();\n+\n+    List<Query> buildQueries(EntityManager entityManager, String caseReference, Map<String, Object> requestData);\n+\n+    Operation operationType();\n+\n+    default String requestJson(Object supplementaryData) {\n+        try {\n+            return mapper.writeValueAsString(supplementaryData);\n+        } catch (JsonProcessingException e) {\n+            return \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4NjU2Nw=="}, "originalCommit": {"oid": "4b1f491e76722711ddeb36e1ad0674b554d69d78"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODk5OTUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/SupplementaryDataProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODowMDowNFrOGqwfVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODowMDowNFrOGqwfVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4NzgzMQ==", "bodyText": "No required ., but may be we can use Optinal to be null safe .", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r447487831", "createdAt": "2020-06-30T08:00:04Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/SupplementaryDataProcessor.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package uk.gov.hmcts.ccd.data.casedetails.supplementarydata;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+public class SupplementaryDataProcessor {\n+\n+    private final ObjectMapper objectMapper = new ObjectMapper();\n+\n+    public Map<String, Object> accessLeafNodes(Map<String, Object> supplementaryData) {\n+        Map<String, Object> leafNodePathsAndValues = new HashMap<>();\n+        if (supplementaryData != null && supplementaryData.size() > 0) {\n+            JsonNode root = objectMapper.valueToTree(supplementaryData);\n+            processNode(root, new StringBuilder(\"\"), leafNodePathsAndValues);\n+        }\n+        return leafNodePathsAndValues;\n+    }\n+\n+    private Object getValue(JsonNode jsonNode) {\n+        if (jsonNode.isValueNode()) {\n+            if (jsonNode.isInt()) {\n+                return jsonNode.intValue();\n+            } else if (jsonNode.isBoolean()) {\n+                return jsonNode.booleanValue();\n+            } else {\n+                return jsonNode.textValue();\n+            }\n+        }\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b1f491e76722711ddeb36e1ad0674b554d69d78"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDUwNzM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/std/SupplementaryDataRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDoyNjo0NFrOGq_COg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo1NjoxNVrOGrDOpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcyNjEzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class SupplementaryDataRequest {\n          \n          \n            \n            public class SupplementaryDataUpdateRequest {", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r447726138", "createdAt": "2020-06-30T14:26:44Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/std/SupplementaryDataRequest.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package uk.gov.hmcts.ccd.domain.model.std;\n+\n+import java.util.Map;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.ToString;\n+\n+@ToString\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@Getter\n+public class SupplementaryDataRequest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a0bb8806f8c7211a95686337db6844bb466fea0"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc5NDg1Mg==", "bodyText": "Renamed", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r447794852", "createdAt": "2020-06-30T15:56:15Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/std/SupplementaryDataRequest.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package uk.gov.hmcts.ccd.domain.model.std;\n+\n+import java.util.Map;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.ToString;\n+\n+@ToString\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@Getter\n+public class SupplementaryDataRequest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcyNjEzOA=="}, "originalCommit": {"oid": "4a0bb8806f8c7211a95686337db6844bb466fea0"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDUxNTYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/v2/external/resource/SupplementaryDataResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDoyODozMFrOGq_HeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo1NjowOVrOGrDOVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcyNzQ4MQ==", "bodyText": "we no longer need to do HATEOAS so in theory we could remove this", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r447727481", "createdAt": "2020-06-30T14:28:30Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/v2/external/resource/SupplementaryDataResource.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package uk.gov.hmcts.ccd.v2.external.resource;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.NoArgsConstructor;\n+import org.springframework.hateoas.RepresentationModel;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryData;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryDataRequest;\n+import uk.gov.hmcts.ccd.v2.external.controller.CaseController;\n+\n+import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;\n+import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;\n+\n+@Data\n+@EqualsAndHashCode(callSuper = true)\n+@NoArgsConstructor\n+public class SupplementaryDataResource extends RepresentationModel<RepresentationModel<?>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a0bb8806f8c7211a95686337db6844bb466fea0"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc5NDc3Mg==", "bodyText": "Done", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r447794772", "createdAt": "2020-06-30T15:56:09Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/v2/external/resource/SupplementaryDataResource.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package uk.gov.hmcts.ccd.v2.external.resource;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.NoArgsConstructor;\n+import org.springframework.hateoas.RepresentationModel;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryData;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryDataRequest;\n+import uk.gov.hmcts.ccd.v2.external.controller.CaseController;\n+\n+import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;\n+import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;\n+\n+@Data\n+@EqualsAndHashCode(callSuper = true)\n+@NoArgsConstructor\n+public class SupplementaryDataResource extends RepresentationModel<RepresentationModel<?>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcyNzQ4MQ=="}, "originalCommit": {"oid": "4a0bb8806f8c7211a95686337db6844bb466fea0"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDUzOTMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/supplementarydata/AuthorisedSupplementaryDataOperation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDozMjo1NlrOGq_Vww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDozMjo1NlrOGq_Vww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczMTEzOQ==", "bodyText": "for performance reasons it would be better to check first if user has explicit access, and only if yes retrieve the case", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r447731139", "createdAt": "2020-06-30T14:32:56Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/supplementarydata/AuthorisedSupplementaryDataOperation.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package uk.gov.hmcts.ccd.domain.service.supplementarydata;\n+\n+import java.util.Optional;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.CachedCaseDetailsRepository;\n+import uk.gov.hmcts.ccd.data.casedetails.CaseDetailsRepository;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryData;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryDataRequest;\n+import uk.gov.hmcts.ccd.domain.service.getcase.CaseNotFoundException;\n+import uk.gov.hmcts.ccd.domain.service.supplementarydata.rolevalidator.UserRoleValidator;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.CaseRoleAccessException;\n+import uk.gov.hmcts.ccd.v2.V2;\n+\n+@Service\n+@Qualifier(\"authorised\")\n+public class AuthorisedSupplementaryDataOperation implements SupplementaryDataOperation {\n+\n+    private SupplementaryDataOperation supplementaryDataOperation;\n+\n+    private UserRoleValidator roleValidator;\n+\n+    private final CaseDetailsRepository caseDetailsRepository;\n+\n+    @Autowired\n+    public AuthorisedSupplementaryDataOperation(final @Qualifier(\"default\") SupplementaryDataOperation supplementaryDataOperation,\n+                                                final @Qualifier(CachedCaseDetailsRepository.QUALIFIER) CaseDetailsRepository caseDetailsRepository,\n+                                                final @Qualifier(\"default\") UserRoleValidator roleValidator) {\n+        this.supplementaryDataOperation = supplementaryDataOperation;\n+        this.roleValidator = roleValidator;\n+        this.caseDetailsRepository = caseDetailsRepository;\n+    }\n+\n+    @Override\n+    public SupplementaryData updateSupplementaryData(String caseReference, SupplementaryDataRequest supplementaryData) {\n+        Optional<CaseDetails> caseDetails = this.caseDetailsRepository.findByReference(caseReference);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a0bb8806f8c7211a95686337db6844bb466fea0"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDYwNzIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/supplementarydata/rolevalidator/DefaultUserRoleValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo0NjozM1rOGq__Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjowNjowNVrOGrDoyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0MTc5OA==", "bodyText": "for future reusability, I think it's better if we delegate this check to the CaseAccessService by introducing a dedicated method isJurisdictionAccessAllowed that can be reused by future endpoints with the same requirement. Therefore:\nreturn canAccess || this.caseAccessService.isJurisdictionAccessAllowed()", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r447741798", "createdAt": "2020-06-30T14:46:33Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/supplementarydata/rolevalidator/DefaultUserRoleValidator.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package uk.gov.hmcts.ccd.domain.service.supplementarydata.rolevalidator;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.IdamJurisdictionsResolver;\n+import uk.gov.hmcts.ccd.data.user.JurisdictionsResolver;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.service.common.CaseAccessService;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class DefaultUserRoleValidator implements UserRoleValidator {\n+\n+    private static final String ROLE_CASE_WORKER_CAA = \"caseworker-caa\";\n+\n+    private final UserRepository userRepository;\n+    private final JurisdictionsResolver jurisdictionsResolver;\n+    private final CaseAccessService caseAccessService;\n+\n+    @Autowired\n+    public DefaultUserRoleValidator(final @Qualifier(CachedUserRepository.QUALIFIER) UserRepository userRepository,\n+                                    final @Qualifier(IdamJurisdictionsResolver.QUALIFIER) JurisdictionsResolver jurisdictionsResolver,\n+                                    final CaseAccessService caseAccessService) {\n+        this.userRepository = userRepository;\n+        this.jurisdictionsResolver = jurisdictionsResolver;\n+        this.caseAccessService = caseAccessService;\n+    }\n+\n+    @Override\n+    public boolean canUpdateSupplementaryData(CaseDetails caseDetails) {\n+        boolean canAccess = this.userRepository.getUserRoles().contains(ROLE_CASE_WORKER_CAA);\n+\n+        canAccess = canAccess || this.caseAccessService.canUserAccess(caseDetails);\n+\n+        return canAccess || this.jurisdictionsResolver\n+            .getJurisdictions()\n+            .stream()\n+            .anyMatch(caseDetails.getJurisdiction()::equalsIgnoreCase);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a0bb8806f8c7211a95686337db6844bb466fea0"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwMTU0Nw==", "bodyText": "moved to caseAccessService", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r447801547", "createdAt": "2020-06-30T16:06:05Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/supplementarydata/rolevalidator/DefaultUserRoleValidator.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package uk.gov.hmcts.ccd.domain.service.supplementarydata.rolevalidator;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.IdamJurisdictionsResolver;\n+import uk.gov.hmcts.ccd.data.user.JurisdictionsResolver;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.service.common.CaseAccessService;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class DefaultUserRoleValidator implements UserRoleValidator {\n+\n+    private static final String ROLE_CASE_WORKER_CAA = \"caseworker-caa\";\n+\n+    private final UserRepository userRepository;\n+    private final JurisdictionsResolver jurisdictionsResolver;\n+    private final CaseAccessService caseAccessService;\n+\n+    @Autowired\n+    public DefaultUserRoleValidator(final @Qualifier(CachedUserRepository.QUALIFIER) UserRepository userRepository,\n+                                    final @Qualifier(IdamJurisdictionsResolver.QUALIFIER) JurisdictionsResolver jurisdictionsResolver,\n+                                    final CaseAccessService caseAccessService) {\n+        this.userRepository = userRepository;\n+        this.jurisdictionsResolver = jurisdictionsResolver;\n+        this.caseAccessService = caseAccessService;\n+    }\n+\n+    @Override\n+    public boolean canUpdateSupplementaryData(CaseDetails caseDetails) {\n+        boolean canAccess = this.userRepository.getUserRoles().contains(ROLE_CASE_WORKER_CAA);\n+\n+        canAccess = canAccess || this.caseAccessService.canUserAccess(caseDetails);\n+\n+        return canAccess || this.jurisdictionsResolver\n+            .getJurisdictions()\n+            .stream()\n+            .anyMatch(caseDetails.getJurisdiction()::equalsIgnoreCase);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0MTc5OA=="}, "originalCommit": {"oid": "4a0bb8806f8c7211a95686337db6844bb466fea0"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDYxOTk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/supplementarydata/rolevalidator/DefaultUserRoleValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo0OToxOFrOGrAHjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo0MTozOVrOGrNrKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0Mzg4NQ==", "bodyText": "minor: I'd suggest using a more standard if else if construct. A bit simpler to follow", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r447743885", "createdAt": "2020-06-30T14:49:18Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/supplementarydata/rolevalidator/DefaultUserRoleValidator.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package uk.gov.hmcts.ccd.domain.service.supplementarydata.rolevalidator;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.IdamJurisdictionsResolver;\n+import uk.gov.hmcts.ccd.data.user.JurisdictionsResolver;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.service.common.CaseAccessService;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class DefaultUserRoleValidator implements UserRoleValidator {\n+\n+    private static final String ROLE_CASE_WORKER_CAA = \"caseworker-caa\";\n+\n+    private final UserRepository userRepository;\n+    private final JurisdictionsResolver jurisdictionsResolver;\n+    private final CaseAccessService caseAccessService;\n+\n+    @Autowired\n+    public DefaultUserRoleValidator(final @Qualifier(CachedUserRepository.QUALIFIER) UserRepository userRepository,\n+                                    final @Qualifier(IdamJurisdictionsResolver.QUALIFIER) JurisdictionsResolver jurisdictionsResolver,\n+                                    final CaseAccessService caseAccessService) {\n+        this.userRepository = userRepository;\n+        this.jurisdictionsResolver = jurisdictionsResolver;\n+        this.caseAccessService = caseAccessService;\n+    }\n+\n+    @Override\n+    public boolean canUpdateSupplementaryData(CaseDetails caseDetails) {\n+        boolean canAccess = this.userRepository.getUserRoles().contains(ROLE_CASE_WORKER_CAA);\n+\n+        canAccess = canAccess || this.caseAccessService.canUserAccess(caseDetails);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a0bb8806f8c7211a95686337db6844bb466fea0"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NTk5Mw==", "bodyText": "Changed to if and else please check the logic again", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r447965993", "createdAt": "2020-06-30T20:41:39Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/supplementarydata/rolevalidator/DefaultUserRoleValidator.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package uk.gov.hmcts.ccd.domain.service.supplementarydata.rolevalidator;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.IdamJurisdictionsResolver;\n+import uk.gov.hmcts.ccd.data.user.JurisdictionsResolver;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.service.common.CaseAccessService;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class DefaultUserRoleValidator implements UserRoleValidator {\n+\n+    private static final String ROLE_CASE_WORKER_CAA = \"caseworker-caa\";\n+\n+    private final UserRepository userRepository;\n+    private final JurisdictionsResolver jurisdictionsResolver;\n+    private final CaseAccessService caseAccessService;\n+\n+    @Autowired\n+    public DefaultUserRoleValidator(final @Qualifier(CachedUserRepository.QUALIFIER) UserRepository userRepository,\n+                                    final @Qualifier(IdamJurisdictionsResolver.QUALIFIER) JurisdictionsResolver jurisdictionsResolver,\n+                                    final CaseAccessService caseAccessService) {\n+        this.userRepository = userRepository;\n+        this.jurisdictionsResolver = jurisdictionsResolver;\n+        this.caseAccessService = caseAccessService;\n+    }\n+\n+    @Override\n+    public boolean canUpdateSupplementaryData(CaseDetails caseDetails) {\n+        boolean canAccess = this.userRepository.getUserRoles().contains(ROLE_CASE_WORKER_CAA);\n+\n+        canAccess = canAccess || this.caseAccessService.canUserAccess(caseDetails);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0Mzg4NQ=="}, "originalCommit": {"oid": "4a0bb8806f8c7211a95686337db6844bb466fea0"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzU0MTg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/supplementarydata/rolevalidator/DefaultUserRoleValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODoyMToyNFrOGrb27Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo1NDoxNVrOGrdCMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5ODM4MQ==", "bodyText": "this class could be renamed to be more generic so we can reuse it for other endpoints with similar access requirements. We could call it for example EndpointAuthorisationService with a method isAccessAllowed. Or something similar", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r448198381", "createdAt": "2020-07-01T08:21:24Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/supplementarydata/rolevalidator/DefaultUserRoleValidator.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package uk.gov.hmcts.ccd.domain.service.supplementarydata.rolevalidator;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.service.common.CaseAccessService;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class DefaultUserRoleValidator implements UserRoleValidator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22590b9d89b98f10f63f1662f913e125c61e19f4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNzY0OQ==", "bodyText": "Renamed", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r448217649", "createdAt": "2020-07-01T08:54:15Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/supplementarydata/rolevalidator/DefaultUserRoleValidator.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package uk.gov.hmcts.ccd.domain.service.supplementarydata.rolevalidator;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.service.common.CaseAccessService;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class DefaultUserRoleValidator implements UserRoleValidator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5ODM4MQ=="}, "originalCommit": {"oid": "22590b9d89b98f10f63f1662f913e125c61e19f4"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzU0NTAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/supplementarydata/rolevalidator/DefaultUserRoleValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODoyMjoxN1rOGrb4-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo1NDozM1rOGrdC5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5ODkwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public boolean canUpdateSupplementaryData(CaseDetails caseDetails) {\n          \n          \n            \n                public boolean isAccessAllowed(CaseDetails caseDetails) {", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r448198904", "createdAt": "2020-07-01T08:22:17Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/supplementarydata/rolevalidator/DefaultUserRoleValidator.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package uk.gov.hmcts.ccd.domain.service.supplementarydata.rolevalidator;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.service.common.CaseAccessService;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class DefaultUserRoleValidator implements UserRoleValidator {\n+\n+    private static final String ROLE_CASE_WORKER_CAA = \"caseworker-caa\";\n+\n+    private final UserRepository userRepository;\n+    private final CaseAccessService caseAccessService;\n+\n+    @Autowired\n+    public DefaultUserRoleValidator(final @Qualifier(CachedUserRepository.QUALIFIER) UserRepository userRepository,\n+                                    final CaseAccessService caseAccessService) {\n+        this.userRepository = userRepository;\n+        this.caseAccessService = caseAccessService;\n+    }\n+\n+    @Override\n+    public boolean canUpdateSupplementaryData(CaseDetails caseDetails) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22590b9d89b98f10f63f1662f913e125c61e19f4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNzgyOA==", "bodyText": "Renamed", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r448217828", "createdAt": "2020-07-01T08:54:33Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/supplementarydata/rolevalidator/DefaultUserRoleValidator.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package uk.gov.hmcts.ccd.domain.service.supplementarydata.rolevalidator;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.service.common.CaseAccessService;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class DefaultUserRoleValidator implements UserRoleValidator {\n+\n+    private static final String ROLE_CASE_WORKER_CAA = \"caseworker-caa\";\n+\n+    private final UserRepository userRepository;\n+    private final CaseAccessService caseAccessService;\n+\n+    @Autowired\n+    public DefaultUserRoleValidator(final @Qualifier(CachedUserRepository.QUALIFIER) UserRepository userRepository,\n+                                    final CaseAccessService caseAccessService) {\n+        this.userRepository = userRepository;\n+        this.caseAccessService = caseAccessService;\n+    }\n+\n+    @Override\n+    public boolean canUpdateSupplementaryData(CaseDetails caseDetails) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5ODkwNA=="}, "originalCommit": {"oid": "22590b9d89b98f10f63f1662f913e125c61e19f4"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzU2NTU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/supplementarydata/DefaultSupplementaryDataOperation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODoyNzoyOVrOGrcFzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMTozNjozM1rOGriOiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIwMjE5MQ==", "bodyText": "we could make things a bit more flexible by having this class store a map of functions, with the map key being the operation identifier, e.g. $inc.\nWe could then loop through the supplementaryData keys and get and execute the corresponding function", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r448202191", "createdAt": "2020-07-01T08:27:29Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/supplementarydata/DefaultSupplementaryDataOperation.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package uk.gov.hmcts.ccd.domain.service.supplementarydata;\n+\n+import java.util.Map;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.supplementarydata.Operation;\n+import uk.gov.hmcts.ccd.data.casedetails.supplementarydata.SupplementaryDataRepository;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryData;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryDataUpdateRequest;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class DefaultSupplementaryDataOperation implements SupplementaryDataOperation {\n+\n+    private final SupplementaryDataRepository supplementaryDataRepository;\n+\n+    @Autowired\n+    public DefaultSupplementaryDataOperation(final @Qualifier(\"default\") SupplementaryDataRepository supplementaryDataRepository) {\n+        this.supplementaryDataRepository = supplementaryDataRepository;\n+    }\n+\n+    @Override\n+    public SupplementaryData updateSupplementaryData(String caseReference, SupplementaryDataUpdateRequest supplementaryData) {\n+        incrementData(caseReference, supplementaryData);\n+        setData(caseReference, supplementaryData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22590b9d89b98f10f63f1662f913e125c61e19f4"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwMjcyOQ==", "bodyText": "created map with functions!!", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r448302729", "createdAt": "2020-07-01T11:36:33Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/supplementarydata/DefaultSupplementaryDataOperation.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package uk.gov.hmcts.ccd.domain.service.supplementarydata;\n+\n+import java.util.Map;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.supplementarydata.Operation;\n+import uk.gov.hmcts.ccd.data.casedetails.supplementarydata.SupplementaryDataRepository;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryData;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryDataUpdateRequest;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class DefaultSupplementaryDataOperation implements SupplementaryDataOperation {\n+\n+    private final SupplementaryDataRepository supplementaryDataRepository;\n+\n+    @Autowired\n+    public DefaultSupplementaryDataOperation(final @Qualifier(\"default\") SupplementaryDataRepository supplementaryDataRepository) {\n+        this.supplementaryDataRepository = supplementaryDataRepository;\n+    }\n+\n+    @Override\n+    public SupplementaryData updateSupplementaryData(String caseReference, SupplementaryDataUpdateRequest supplementaryData) {\n+        incrementData(caseReference, supplementaryData);\n+        setData(caseReference, supplementaryData);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIwMjE5MQ=="}, "originalCommit": {"oid": "22590b9d89b98f10f63f1662f913e125c61e19f4"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzU5Mjg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/supplementarydata/DefaultSupplementaryDataOperation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODozNDo0N1rOGrcXBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOToxMDo0MlrOGrdnGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIwNjU5Ng==", "bodyText": "supplementaryData.getRequestData().get --> can we provide on supplementaryData itself a method like Optional<> getOperation(Operation.INC) and move this logic there? it would reduce duplication", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r448206596", "createdAt": "2020-07-01T08:34:47Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/supplementarydata/DefaultSupplementaryDataOperation.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package uk.gov.hmcts.ccd.domain.service.supplementarydata;\n+\n+import java.util.Map;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.supplementarydata.Operation;\n+import uk.gov.hmcts.ccd.data.casedetails.supplementarydata.SupplementaryDataRepository;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryData;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryDataUpdateRequest;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class DefaultSupplementaryDataOperation implements SupplementaryDataOperation {\n+\n+    private final SupplementaryDataRepository supplementaryDataRepository;\n+\n+    @Autowired\n+    public DefaultSupplementaryDataOperation(final @Qualifier(\"default\") SupplementaryDataRepository supplementaryDataRepository) {\n+        this.supplementaryDataRepository = supplementaryDataRepository;\n+    }\n+\n+    @Override\n+    public SupplementaryData updateSupplementaryData(String caseReference, SupplementaryDataUpdateRequest supplementaryData) {\n+        incrementData(caseReference, supplementaryData);\n+        setData(caseReference, supplementaryData);\n+        return this.supplementaryDataRepository.findSupplementaryData(caseReference);\n+    }\n+\n+    private void incrementData(String caseReference, SupplementaryDataUpdateRequest supplementaryData) {\n+        Map<String, Object> incrementRequest = supplementaryData.getRequestData().get(Operation.INC.getOperationName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22590b9d89b98f10f63f1662f913e125c61e19f4"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyNzA5OQ==", "bodyText": "Moved to SupplementaryDataRequest", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r448227099", "createdAt": "2020-07-01T09:10:42Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/supplementarydata/DefaultSupplementaryDataOperation.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package uk.gov.hmcts.ccd.domain.service.supplementarydata;\n+\n+import java.util.Map;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.supplementarydata.Operation;\n+import uk.gov.hmcts.ccd.data.casedetails.supplementarydata.SupplementaryDataRepository;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryData;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryDataUpdateRequest;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class DefaultSupplementaryDataOperation implements SupplementaryDataOperation {\n+\n+    private final SupplementaryDataRepository supplementaryDataRepository;\n+\n+    @Autowired\n+    public DefaultSupplementaryDataOperation(final @Qualifier(\"default\") SupplementaryDataRepository supplementaryDataRepository) {\n+        this.supplementaryDataRepository = supplementaryDataRepository;\n+    }\n+\n+    @Override\n+    public SupplementaryData updateSupplementaryData(String caseReference, SupplementaryDataUpdateRequest supplementaryData) {\n+        incrementData(caseReference, supplementaryData);\n+        setData(caseReference, supplementaryData);\n+        return this.supplementaryDataRepository.findSupplementaryData(caseReference);\n+    }\n+\n+    private void incrementData(String caseReference, SupplementaryDataUpdateRequest supplementaryData) {\n+        Map<String, Object> incrementRequest = supplementaryData.getRequestData().get(Operation.INC.getOperationName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIwNjU5Ng=="}, "originalCommit": {"oid": "22590b9d89b98f10f63f1662f913e125c61e19f4"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzYyNjE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/supplementarydata/DefaultSupplementaryDataOperation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo0NDoyN1rOGrcr6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMTozNjoxOFrOGriN8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxMTk0Nw==", "bodyText": "are we returning the whole supplementary data here? we should return only the updated properties", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r448211947", "createdAt": "2020-07-01T08:44:27Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/supplementarydata/DefaultSupplementaryDataOperation.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package uk.gov.hmcts.ccd.domain.service.supplementarydata;\n+\n+import java.util.Map;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.supplementarydata.Operation;\n+import uk.gov.hmcts.ccd.data.casedetails.supplementarydata.SupplementaryDataRepository;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryData;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryDataUpdateRequest;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class DefaultSupplementaryDataOperation implements SupplementaryDataOperation {\n+\n+    private final SupplementaryDataRepository supplementaryDataRepository;\n+\n+    @Autowired\n+    public DefaultSupplementaryDataOperation(final @Qualifier(\"default\") SupplementaryDataRepository supplementaryDataRepository) {\n+        this.supplementaryDataRepository = supplementaryDataRepository;\n+    }\n+\n+    @Override\n+    public SupplementaryData updateSupplementaryData(String caseReference, SupplementaryDataUpdateRequest supplementaryData) {\n+        incrementData(caseReference, supplementaryData);\n+        setData(caseReference, supplementaryData);\n+        return this.supplementaryDataRepository.findSupplementaryData(caseReference);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22590b9d89b98f10f63f1662f913e125c61e19f4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwMjU3Ng==", "bodyText": "Yes, we are returning whole supplementary data.. just had a chat with Dil on this.. he said whole supplementary data", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r448302576", "createdAt": "2020-07-01T11:36:18Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/supplementarydata/DefaultSupplementaryDataOperation.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package uk.gov.hmcts.ccd.domain.service.supplementarydata;\n+\n+import java.util.Map;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.supplementarydata.Operation;\n+import uk.gov.hmcts.ccd.data.casedetails.supplementarydata.SupplementaryDataRepository;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryData;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryDataUpdateRequest;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class DefaultSupplementaryDataOperation implements SupplementaryDataOperation {\n+\n+    private final SupplementaryDataRepository supplementaryDataRepository;\n+\n+    @Autowired\n+    public DefaultSupplementaryDataOperation(final @Qualifier(\"default\") SupplementaryDataRepository supplementaryDataRepository) {\n+        this.supplementaryDataRepository = supplementaryDataRepository;\n+    }\n+\n+    @Override\n+    public SupplementaryData updateSupplementaryData(String caseReference, SupplementaryDataUpdateRequest supplementaryData) {\n+        incrementData(caseReference, supplementaryData);\n+        setData(caseReference, supplementaryData);\n+        return this.supplementaryDataRepository.findSupplementaryData(caseReference);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxMTk0Nw=="}, "originalCommit": {"oid": "22590b9d89b98f10f63f1662f913e125c61e19f4"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Mzc5OTQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/DefaultSupplementaryDataRepository.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTozNDowNFrOGrealw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTozNDowNFrOGrealw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI0MDI3OQ==", "bodyText": "mmm we use a query builder in setSupplementaryData and incrementSupplementaryData. Are increment and set operations a query? strictly speaking they are updates so I find it slightly confusing. I would leave the query builder only for the find operations.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r448240279", "createdAt": "2020-07-01T09:34:04Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/DefaultSupplementaryDataRepository.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package uk.gov.hmcts.ccd.data.casedetails.supplementarydata;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Singleton;\n+import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.Query;\n+import javax.transaction.Transactional;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.config.JacksonUtils;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryData;\n+\n+@Service\n+@Qualifier(\"default\")\n+@Singleton\n+@Transactional\n+public class DefaultSupplementaryDataRepository implements SupplementaryDataRepository {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultSupplementaryDataRepository.class);\n+\n+    @PersistenceContext\n+    private EntityManager em;\n+\n+    private List<SupplementaryDataQueryBuilder> queryBuilders;\n+\n+    @Autowired\n+    public DefaultSupplementaryDataRepository(final List<SupplementaryDataQueryBuilder> queryBuilders) {\n+        this.queryBuilders = queryBuilders;\n+    }\n+\n+    @Override\n+    public void setSupplementaryData(final String caseReference, final Map<String, Object> supplementaryData) {\n+        LOG.debug(\"Set supplementary data\");\n+        List<Query> queryList = getQueryBuilder(Operation.SET).buildQueries(em, caseReference, supplementaryData);\n+        queryList.stream().forEach(query -> query.executeUpdate());\n+    }\n+\n+    @Override\n+    public void incrementSupplementaryData(final String caseReference, final Map<String, Object> supplementaryData) {\n+        LOG.debug(\"Insert supplementary data\");\n+        List<Query> queryList = getQueryBuilder(Operation.INC).buildQueries(em, caseReference, supplementaryData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22590b9d89b98f10f63f1662f913e125c61e19f4"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Mzk3MjE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/IncrementSupplementaryDataQueryBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDoyNTo0MFrOGrgIHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDoyNTo0MFrOGrgIHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI2ODMxOQ==", "bodyText": "what if we moved this method inside the SupplementaryDataRequest itself? the idea being the SupplementaryDataRequest encapsulates the requested data, and provides utility methods to access it. For example to retrieve the leaf node and much more. And we pass the request down rather than a simple Map", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r448268319", "createdAt": "2020-07-01T10:25:40Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/IncrementSupplementaryDataQueryBuilder.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package uk.gov.hmcts.ccd.data.casedetails.supplementarydata;\n+\n+import java.util.Arrays;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Qualifier(\"increment\")\n+public class IncrementSupplementaryDataQueryBuilder implements SupplementaryDataQueryBuilder {\n+\n+    private static final String INC_UPDATE_QUERY = \"UPDATE case_data SET \"\n+        + \"supplementary_data= (CASE\"\n+        + \"        WHEN COALESCE(supplementary_data, '{}') = '{}' \"\n+        + \"        THEN COALESCE(supplementary_data, '{}') || :json_value\\\\:\\\\:jsonb\"\n+        + \"        WHEN jsonb_extract_path_text(COALESCE(supplementary_data, '{}'), :node_path) IS NULL \"\n+        + \"        THEN jsonb_set(COALESCE(supplementary_data, '{}'), :leaf_node_key, :value\\\\:\\\\:TEXT\\\\:\\\\:jsonb)\"\n+        + \"        WHEN jsonb_extract_path_text(COALESCE(supplementary_data, '{}'), :node_path) IS NOT NULL\"\n+        + \"        THEN jsonb_set(COALESCE(supplementary_data, '{}'), :leaf_node_key,\"\n+        + \"             GREATEST((jsonb_extract_path_text(supplementary_data, :node_path)\\\\:\\\\:INT + :value), 0) \\\\:\\\\:TEXT\\\\:\\\\:jsonb, false)\"\n+        + \"    END), \"\n+        + \"supplementary_data_last_modified = :current_time \"\n+        + \"WHERE reference = :reference\";\n+\n+    @Override\n+    public List<Query> buildQueries(EntityManager entityManager, String caseReference, Map<String, Object> requestData) {\n+        Map<String, Object> leafNodes = dataProcessor.accessLeafNodes(requestData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22590b9d89b98f10f63f1662f913e125c61e19f4"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDAyNDUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/DefaultSupplementaryDataRepository.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDo0MjozOFrOGrgobQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMTo0NDo1NlrOGrid3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3NjU4OQ==", "bodyText": "we could add a constructor in SupplementaryData that gets a JsonNode and does the conversion", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r448276589", "createdAt": "2020-07-01T10:42:38Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/DefaultSupplementaryDataRepository.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package uk.gov.hmcts.ccd.data.casedetails.supplementarydata;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Singleton;\n+import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.Query;\n+import javax.transaction.Transactional;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.config.JacksonUtils;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryData;\n+\n+@Service\n+@Qualifier(\"default\")\n+@Singleton\n+@Transactional\n+public class DefaultSupplementaryDataRepository implements SupplementaryDataRepository {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultSupplementaryDataRepository.class);\n+\n+    @PersistenceContext\n+    private EntityManager em;\n+\n+    private List<SupplementaryDataQueryBuilder> queryBuilders;\n+\n+    @Autowired\n+    public DefaultSupplementaryDataRepository(final List<SupplementaryDataQueryBuilder> queryBuilders) {\n+        this.queryBuilders = queryBuilders;\n+    }\n+\n+    @Override\n+    public void setSupplementaryData(final String caseReference, final Map<String, Object> supplementaryData) {\n+        LOG.debug(\"Set supplementary data\");\n+        List<Query> queryList = getQueryBuilder(Operation.SET).buildQueries(em, caseReference, supplementaryData);\n+        queryList.stream().forEach(query -> query.executeUpdate());\n+    }\n+\n+    @Override\n+    public void incrementSupplementaryData(final String caseReference, final Map<String, Object> supplementaryData) {\n+        LOG.debug(\"Insert supplementary data\");\n+        List<Query> queryList = getQueryBuilder(Operation.INC).buildQueries(em, caseReference, supplementaryData);\n+        queryList.stream().forEach(query -> query.executeUpdate());\n+    }\n+\n+    @Override\n+    public SupplementaryData findSupplementaryData(final String caseReference) {\n+        LOG.debug(\"Find supplementary data\");\n+        List<Query> queryList = getQueryBuilder(Operation.FIND).buildQueries(em, caseReference, null);\n+        JsonNode result = (JsonNode) queryList.get(0).getSingleResult();\n+        return new SupplementaryData(JacksonUtils.convertJsonNode(result));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22590b9d89b98f10f63f1662f913e125c61e19f4"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwNjY1Mg==", "bodyText": "Done", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r448306652", "createdAt": "2020-07-01T11:44:56Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/DefaultSupplementaryDataRepository.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package uk.gov.hmcts.ccd.data.casedetails.supplementarydata;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Singleton;\n+import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.Query;\n+import javax.transaction.Transactional;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.config.JacksonUtils;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryData;\n+\n+@Service\n+@Qualifier(\"default\")\n+@Singleton\n+@Transactional\n+public class DefaultSupplementaryDataRepository implements SupplementaryDataRepository {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultSupplementaryDataRepository.class);\n+\n+    @PersistenceContext\n+    private EntityManager em;\n+\n+    private List<SupplementaryDataQueryBuilder> queryBuilders;\n+\n+    @Autowired\n+    public DefaultSupplementaryDataRepository(final List<SupplementaryDataQueryBuilder> queryBuilders) {\n+        this.queryBuilders = queryBuilders;\n+    }\n+\n+    @Override\n+    public void setSupplementaryData(final String caseReference, final Map<String, Object> supplementaryData) {\n+        LOG.debug(\"Set supplementary data\");\n+        List<Query> queryList = getQueryBuilder(Operation.SET).buildQueries(em, caseReference, supplementaryData);\n+        queryList.stream().forEach(query -> query.executeUpdate());\n+    }\n+\n+    @Override\n+    public void incrementSupplementaryData(final String caseReference, final Map<String, Object> supplementaryData) {\n+        LOG.debug(\"Insert supplementary data\");\n+        List<Query> queryList = getQueryBuilder(Operation.INC).buildQueries(em, caseReference, supplementaryData);\n+        queryList.stream().forEach(query -> query.executeUpdate());\n+    }\n+\n+    @Override\n+    public SupplementaryData findSupplementaryData(final String caseReference) {\n+        LOG.debug(\"Find supplementary data\");\n+        List<Query> queryList = getQueryBuilder(Operation.FIND).buildQueries(em, caseReference, null);\n+        JsonNode result = (JsonNode) queryList.get(0).getSingleResult();\n+        return new SupplementaryData(JacksonUtils.convertJsonNode(result));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3NjU4OQ=="}, "originalCommit": {"oid": "22590b9d89b98f10f63f1662f913e125c61e19f4"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDAyOTUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/DefaultSupplementaryDataRepository.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDo0NDowM1rOGrgrUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMTo0MToyNFrOGriXbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3NzMyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<Query> queryList = getQueryBuilder(Operation.SET).buildQueries(em, caseReference, supplementaryData);\n          \n          \n            \n                    List<Query> queryList = getQueryBuilder(Operation.SET).buildQueryForEachSupplementaryDataProperty(em, caseReference, supplementaryData);", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r448277329", "createdAt": "2020-07-01T10:44:03Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/DefaultSupplementaryDataRepository.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package uk.gov.hmcts.ccd.data.casedetails.supplementarydata;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Singleton;\n+import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.Query;\n+import javax.transaction.Transactional;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.config.JacksonUtils;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryData;\n+\n+@Service\n+@Qualifier(\"default\")\n+@Singleton\n+@Transactional\n+public class DefaultSupplementaryDataRepository implements SupplementaryDataRepository {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultSupplementaryDataRepository.class);\n+\n+    @PersistenceContext\n+    private EntityManager em;\n+\n+    private List<SupplementaryDataQueryBuilder> queryBuilders;\n+\n+    @Autowired\n+    public DefaultSupplementaryDataRepository(final List<SupplementaryDataQueryBuilder> queryBuilders) {\n+        this.queryBuilders = queryBuilders;\n+    }\n+\n+    @Override\n+    public void setSupplementaryData(final String caseReference, final Map<String, Object> supplementaryData) {\n+        LOG.debug(\"Set supplementary data\");\n+        List<Query> queryList = getQueryBuilder(Operation.SET).buildQueries(em, caseReference, supplementaryData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22590b9d89b98f10f63f1662f913e125c61e19f4"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwNTAwNw==", "bodyText": "renamed", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r448305007", "createdAt": "2020-07-01T11:41:24Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/DefaultSupplementaryDataRepository.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package uk.gov.hmcts.ccd.data.casedetails.supplementarydata;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Singleton;\n+import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.Query;\n+import javax.transaction.Transactional;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.config.JacksonUtils;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryData;\n+\n+@Service\n+@Qualifier(\"default\")\n+@Singleton\n+@Transactional\n+public class DefaultSupplementaryDataRepository implements SupplementaryDataRepository {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultSupplementaryDataRepository.class);\n+\n+    @PersistenceContext\n+    private EntityManager em;\n+\n+    private List<SupplementaryDataQueryBuilder> queryBuilders;\n+\n+    @Autowired\n+    public DefaultSupplementaryDataRepository(final List<SupplementaryDataQueryBuilder> queryBuilders) {\n+        this.queryBuilders = queryBuilders;\n+    }\n+\n+    @Override\n+    public void setSupplementaryData(final String caseReference, final Map<String, Object> supplementaryData) {\n+        LOG.debug(\"Set supplementary data\");\n+        List<Query> queryList = getQueryBuilder(Operation.SET).buildQueries(em, caseReference, supplementaryData);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3NzMyOQ=="}, "originalCommit": {"oid": "22590b9d89b98f10f63f1662f913e125c61e19f4"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDAzODY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/SupplementaryDataQueryBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDo0Njo1N1rOGrgw0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMTo0NDozMlrOGridMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3ODczNg==", "bodyText": "I think this could be a .toJson() method on the SupplementaryDataRequest", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r448278736", "createdAt": "2020-07-01T10:46:57Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/SupplementaryDataQueryBuilder.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package uk.gov.hmcts.ccd.data.casedetails.supplementarydata;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.vladmihalcea.hibernate.type.json.JsonNodeBinaryType;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+import java.util.Map;\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+import org.hibernate.query.NativeQuery;\n+\n+public interface SupplementaryDataQueryBuilder {\n+\n+    ObjectMapper mapper = new ObjectMapper();\n+\n+    SupplementaryDataProcessor dataProcessor = new SupplementaryDataProcessor();\n+\n+    List<Query> buildQueries(EntityManager entityManager, String caseReference, Map<String, Object> requestData);\n+\n+    Operation operationType();\n+\n+    default String requestJson(Object supplementaryData) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22590b9d89b98f10f63f1662f913e125c61e19f4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwNjQ4MA==", "bodyText": "renamed", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r448306480", "createdAt": "2020-07-01T11:44:32Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/SupplementaryDataQueryBuilder.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package uk.gov.hmcts.ccd.data.casedetails.supplementarydata;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.vladmihalcea.hibernate.type.json.JsonNodeBinaryType;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+import java.util.Map;\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+import org.hibernate.query.NativeQuery;\n+\n+public interface SupplementaryDataQueryBuilder {\n+\n+    ObjectMapper mapper = new ObjectMapper();\n+\n+    SupplementaryDataProcessor dataProcessor = new SupplementaryDataProcessor();\n+\n+    List<Query> buildQueries(EntityManager entityManager, String caseReference, Map<String, Object> requestData);\n+\n+    Operation operationType();\n+\n+    default String requestJson(Object supplementaryData) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3ODczNg=="}, "originalCommit": {"oid": "22590b9d89b98f10f63f1662f913e125c61e19f4"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDA2Mjc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/Operation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDo1NDo1MFrOGrg_4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMTo0NDo0MFrOGridaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI4MjU5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public enum Operation {\n          \n          \n            \n            public enum SupplementaryDataOperation {", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r448282595", "createdAt": "2020-07-01T10:54:50Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/Operation.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package uk.gov.hmcts.ccd.data.casedetails.supplementarydata;\n+\n+public enum Operation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22590b9d89b98f10f63f1662f913e125c61e19f4"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwNjUzNw==", "bodyText": "renamed", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r448306537", "createdAt": "2020-07-01T11:44:40Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/Operation.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package uk.gov.hmcts.ccd.data.casedetails.supplementarydata;\n+\n+public enum Operation {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI4MjU5NQ=="}, "originalCommit": {"oid": "22590b9d89b98f10f63f1662f913e125c61e19f4"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDIyMzY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/SupplementaryDataProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMTo0NzoxMVrOGriiTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMTo0NzoxMVrOGriiTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwNzc4OQ==", "bodyText": "suggestion: can we use a less generic name? like getProperties or sim?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r448307789", "createdAt": "2020-07-01T11:47:11Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/SupplementaryDataProcessor.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package uk.gov.hmcts.ccd.data.casedetails.supplementarydata;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+public class SupplementaryDataProcessor {\n+\n+    private final ObjectMapper objectMapper = new ObjectMapper();\n+\n+    public Map<String, Object> accessLeafNodes(Map<String, Object> supplementaryData) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22590b9d89b98f10f63f1662f913e125c61e19f4"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODA1NzYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/v2/external/controller/CaseController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDo0MzowNlrOGsHdTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDo0MzowNlrOGsHdTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkxMjcxOA==", "bodyText": "is it possible to provide an example of the request in Swagger?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r448912718", "createdAt": "2020-07-02T10:43:06Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/v2/external/controller/CaseController.java", "diffHunk": "@@ -267,4 +281,54 @@ public CaseController(\n \n         return ResponseEntity.ok(new CaseEventsResource(caseId, auditEvents));\n     }\n+\n+\n+    @Transactional\n+    @PostMapping(\n+        path = \"/cases/{caseId}/supplementary-data\"\n+    )\n+    @ApiOperation(\n+        value = \"Update Case Supplementary Data\"\n+    )\n+    @ApiResponses({\n+        @ApiResponse(\n+            code = 200,\n+            message = \"Updated\",\n+            response = SupplementaryDataResource.class\n+        ),\n+        @ApiResponse(\n+            code = 400,\n+            message = V2.Error.CASE_ID_INVALID\n+        ),\n+        @ApiResponse(\n+            code = 400,\n+            message = V2.Error.SUPPLEMENTARY_DATA_INVALID\n+        ),\n+        @ApiResponse(\n+            code = 404,\n+            message = V2.Error.CASE_NOT_FOUND\n+        ),\n+        @ApiResponse(\n+            code = 403,\n+            message = V2.Error.NOT_AUTHORISED_UPDATE_SUPPLEMENTARY_DATA\n+        )\n+    })\n+    public ResponseEntity<SupplementaryDataResource> updateCaseSupplementaryData(@PathVariable(\"caseId\") String caseId,\n+                                                                                 @RequestBody final SupplementaryDataUpdateRequest supplementaryData) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3babc91ce8da0849f3346653646e457adff5e4e9"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjI2NzE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/DefaultSupplementaryDataRepository.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDoxNTo0OFrOGtRZTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDoxNTo0OFrOGtRZTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEyNDEwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Query query = queryBuilder(SupplementaryDataOperation.SET).buildQueryForEachSupplementaryDataProperty(em,\n          \n          \n            \n                    Query query = queryBuilder(SupplementaryDataOperation.SET).build(em,", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r450124108", "createdAt": "2020-07-06T10:15:48Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/DefaultSupplementaryDataRepository.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package uk.gov.hmcts.ccd.data.casedetails.supplementarydata;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.List;\n+import java.util.Set;\n+import javax.inject.Singleton;\n+import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.Query;\n+import javax.transaction.Transactional;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryData;\n+\n+@Service\n+@Qualifier(\"default\")\n+@Singleton\n+@Transactional\n+public class DefaultSupplementaryDataRepository implements SupplementaryDataRepository {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultSupplementaryDataRepository.class);\n+\n+    @PersistenceContext\n+    private EntityManager em;\n+\n+    private List<SupplementaryDataQueryBuilder> queryBuilders;\n+\n+\n+    @Autowired\n+    public DefaultSupplementaryDataRepository(final List<SupplementaryDataQueryBuilder> queryBuilders) {\n+        this.queryBuilders = queryBuilders;\n+    }\n+\n+    @Override\n+    public void setSupplementaryData(final String caseReference,\n+                                     String fieldPath,\n+                                     Object fieldValue) {\n+        LOG.debug(\"Set supplementary data\");\n+        Query query = queryBuilder(SupplementaryDataOperation.SET).buildQueryForEachSupplementaryDataProperty(em,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "342f1d30039a1e8676a7e96edca5707135484226"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjI4MjQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/v2/V2.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDoyMDo0NFrOGtRi8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDoyMDo0NFrOGtRi8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEyNjU3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public static final String MORE_THAN_ONE_NESTED_LEVEL = \"More than one nested level is not allowed\";\n          \n          \n            \n                    public static final String MORE_THAN_ONE_NESTED_LEVEL = \"Supplementary data properties with more than one nested level are currently not supported\";", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r450126576", "createdAt": "2020-07-06T10:20:44Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/v2/V2.java", "diffHunk": "@@ -75,6 +75,9 @@ private Error() {}\n         public static final String USER_ID_INVALID = \"User ID is not valid\";\n         public static final String EMPTY_CASE_USER_ROLE_LIST = \"Case user roles list is empty\";\n         public static final String OTHER_USER_CASE_ROLE_ACCESS_NOT_GRANTED = \"Access to other user's case role assignments not granted\";\n+        public static final String NOT_AUTHORISED_UPDATE_SUPPLEMENTARY_DATA = \"Not authorised to update case supplementary data\";\n         public static final String CLIENT_SERVICE_NOT_AUTHORISED_FOR_OPERATION = \"Client service not authorised to perform operation\";\n+        public static final String SUPPLEMENTARY_DATA_INVALID = \"Supplementary Data Invalid\";\n+        public static final String MORE_THAN_ONE_NESTED_LEVEL = \"More than one nested level is not allowed\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "342f1d30039a1e8676a7e96edca5707135484226"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjI4NTc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/std/validator/SupplementaryDataUpdateRequestValidator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDoyMTo0OVrOGtRk9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDoyMTo0OVrOGtRk9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEyNzA5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    allowedNestedLevels(supplementaryData);\n          \n          \n            \n                    validateAtMostOneLevelOfNesting(supplementaryData);", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r450127093", "createdAt": "2020-07-06T10:21:49Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/std/validator/SupplementaryDataUpdateRequestValidator.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package uk.gov.hmcts.ccd.domain.model.std.validator;\n+\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+import javax.inject.Named;\n+import javax.inject.Singleton;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryDataUpdateRequest;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadRequestException;\n+\n+import static uk.gov.hmcts.ccd.v2.V2.Error.MORE_THAN_ONE_NESTED_LEVEL;\n+import static uk.gov.hmcts.ccd.v2.V2.Error.SUPPLEMENTARY_DATA_INVALID;\n+\n+@Named\n+@Singleton\n+public class SupplementaryDataUpdateRequestValidator {\n+\n+    public void validate(SupplementaryDataUpdateRequest supplementaryData) {\n+        if (supplementaryData == null\n+            || supplementaryData.getRequestData() == null\n+            || supplementaryData.getRequestData().size() == 0) {\n+            throw new BadRequestException(SUPPLEMENTARY_DATA_INVALID);\n+        }\n+        allowedNestedLevels(supplementaryData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "342f1d30039a1e8676a7e96edca5707135484226"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjI5OTg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/std/SupplementaryDataUpdateRequest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDoyNjowNFrOGtRtPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDoyNjowNFrOGtRtPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEyOTIxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public Set<String> getRequestDataKeys() {\n          \n          \n            \n                public Set<String> getPropertiesNames() {", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r450129214", "createdAt": "2020-07-06T10:26:04Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/std/SupplementaryDataUpdateRequest.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package uk.gov.hmcts.ccd.domain.model.std;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.ToString;\n+import uk.gov.hmcts.ccd.data.casedetails.supplementarydata.SupplementaryDataOperation;\n+\n+@ToString\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@Getter\n+public class SupplementaryDataUpdateRequest {\n+\n+    private Map<String, Map<String, Object>> requestData;\n+\n+    @JsonIgnore\n+    public Map<String, Object> getOperationProperties(SupplementaryDataOperation operation) {\n+        return this.requestData.getOrDefault(operation.getOperationName(), new HashMap<>());\n+    }\n+\n+    @JsonIgnore\n+    public Set<String> getRequestDataKeys() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "342f1d30039a1e8676a7e96edca5707135484226"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjQ1NDU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/supplementarydata/DefaultSupplementaryDataUpdateOperation.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMToxODo0OFrOGtTMMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMToyMjozNlrOGtTSVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1MzUyMw==", "bodyText": "Is it possible we have a race condition here when there are many concurrent updates?\nImagine update 1 updates propertyA: 5, then the thread stops just before line 60. At the same time update 2 updates propertyA: 10 and completes. Then update1 resumes and does the find, which will return propertyA: 10 rather than propertyA: 5.\nI think you mentioned the operations are transactional, but I can see those are transactional at the level of the Repository. Not at the level of the controller. So it's possible that update1 sees the changes introduced by update2 transaction here and returns a wrong response?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r450153523", "createdAt": "2020-07-06T11:18:48Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/supplementarydata/DefaultSupplementaryDataUpdateOperation.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package uk.gov.hmcts.ccd.domain.service.supplementarydata;\n+\n+import java.util.EnumMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.supplementarydata.SupplementaryDataOperation;\n+import uk.gov.hmcts.ccd.data.casedetails.supplementarydata.SupplementaryDataRepository;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryData;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryDataUpdateRequest;\n+\n+import static uk.gov.hmcts.ccd.data.casedetails.supplementarydata.SupplementaryDataOperation.INC;\n+import static uk.gov.hmcts.ccd.data.casedetails.supplementarydata.SupplementaryDataOperation.SET;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class DefaultSupplementaryDataUpdateOperation implements SupplementaryDataUpdateOperation {\n+\n+    private final SupplementaryDataRepository supplementaryDataRepository;\n+\n+    private EnumMap<SupplementaryDataOperation, BiConsumer<String, SupplementaryDataUpdateRequest>> supplementaryFunctions =\n+        new EnumMap<>(SupplementaryDataOperation.class);\n+\n+    @Autowired\n+    public DefaultSupplementaryDataUpdateOperation(final @Qualifier(\"default\") SupplementaryDataRepository supplementaryDataRepository) {\n+        this.supplementaryDataRepository = supplementaryDataRepository;\n+        supplementaryFunctions.put(SET, (caseReference, updateRequest) -> {\n+            Map<String, Object> requestedData = updateRequest.getOperationProperties(SET);\n+            requestedData\n+                .entrySet()\n+                .stream()\n+                .forEach(entry -> this.supplementaryDataRepository.setSupplementaryData(caseReference,\n+                    entry.getKey(),\n+                    entry.getValue()));\n+        });\n+        supplementaryFunctions.put(INC, (caseReference, updateRequest) -> {\n+            Map<String, Object> requestedData = updateRequest.getOperationProperties(INC);\n+            requestedData\n+                .entrySet()\n+                .stream()\n+                .forEach(entry -> this.supplementaryDataRepository.incrementSupplementaryData(caseReference,\n+                    entry.getKey(),\n+                    entry.getValue()));\n+        });\n+    }\n+\n+    @Override\n+    public SupplementaryData updateSupplementaryData(String caseReference, SupplementaryDataUpdateRequest supplementaryData) {\n+        supplementaryData.getRequestData().keySet().forEach(key -> {\n+            Optional<SupplementaryDataOperation> operation = SupplementaryDataOperation.getOperation(key);\n+            if (operation.isPresent()) {\n+                supplementaryFunctions\n+                    .get(operation.get())\n+                    .accept(caseReference, supplementaryData);\n+            }\n+        });\n+        return this.supplementaryDataRepository.findSupplementaryData(caseReference, supplementaryData.getRequestDataKeys());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "342f1d30039a1e8676a7e96edca5707135484226"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1NDQyMA==", "bodyText": "probably better to have the repository method itself, the set, increment etch... do a find and return the updated property value. Rather than the operation.\nOr move the transactionality at the level of the controller?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r450154420", "createdAt": "2020-07-06T11:21:02Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/supplementarydata/DefaultSupplementaryDataUpdateOperation.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package uk.gov.hmcts.ccd.domain.service.supplementarydata;\n+\n+import java.util.EnumMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.supplementarydata.SupplementaryDataOperation;\n+import uk.gov.hmcts.ccd.data.casedetails.supplementarydata.SupplementaryDataRepository;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryData;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryDataUpdateRequest;\n+\n+import static uk.gov.hmcts.ccd.data.casedetails.supplementarydata.SupplementaryDataOperation.INC;\n+import static uk.gov.hmcts.ccd.data.casedetails.supplementarydata.SupplementaryDataOperation.SET;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class DefaultSupplementaryDataUpdateOperation implements SupplementaryDataUpdateOperation {\n+\n+    private final SupplementaryDataRepository supplementaryDataRepository;\n+\n+    private EnumMap<SupplementaryDataOperation, BiConsumer<String, SupplementaryDataUpdateRequest>> supplementaryFunctions =\n+        new EnumMap<>(SupplementaryDataOperation.class);\n+\n+    @Autowired\n+    public DefaultSupplementaryDataUpdateOperation(final @Qualifier(\"default\") SupplementaryDataRepository supplementaryDataRepository) {\n+        this.supplementaryDataRepository = supplementaryDataRepository;\n+        supplementaryFunctions.put(SET, (caseReference, updateRequest) -> {\n+            Map<String, Object> requestedData = updateRequest.getOperationProperties(SET);\n+            requestedData\n+                .entrySet()\n+                .stream()\n+                .forEach(entry -> this.supplementaryDataRepository.setSupplementaryData(caseReference,\n+                    entry.getKey(),\n+                    entry.getValue()));\n+        });\n+        supplementaryFunctions.put(INC, (caseReference, updateRequest) -> {\n+            Map<String, Object> requestedData = updateRequest.getOperationProperties(INC);\n+            requestedData\n+                .entrySet()\n+                .stream()\n+                .forEach(entry -> this.supplementaryDataRepository.incrementSupplementaryData(caseReference,\n+                    entry.getKey(),\n+                    entry.getValue()));\n+        });\n+    }\n+\n+    @Override\n+    public SupplementaryData updateSupplementaryData(String caseReference, SupplementaryDataUpdateRequest supplementaryData) {\n+        supplementaryData.getRequestData().keySet().forEach(key -> {\n+            Optional<SupplementaryDataOperation> operation = SupplementaryDataOperation.getOperation(key);\n+            if (operation.isPresent()) {\n+                supplementaryFunctions\n+                    .get(operation.get())\n+                    .accept(caseReference, supplementaryData);\n+            }\n+        });\n+        return this.supplementaryDataRepository.findSupplementaryData(caseReference, supplementaryData.getRequestDataKeys());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1MzUyMw=="}, "originalCommit": {"oid": "342f1d30039a1e8676a7e96edca5707135484226"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1NTA5NA==", "bodyText": "@transactional is at the controller as well!!!", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r450155094", "createdAt": "2020-07-06T11:22:36Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/supplementarydata/DefaultSupplementaryDataUpdateOperation.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package uk.gov.hmcts.ccd.domain.service.supplementarydata;\n+\n+import java.util.EnumMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.supplementarydata.SupplementaryDataOperation;\n+import uk.gov.hmcts.ccd.data.casedetails.supplementarydata.SupplementaryDataRepository;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryData;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryDataUpdateRequest;\n+\n+import static uk.gov.hmcts.ccd.data.casedetails.supplementarydata.SupplementaryDataOperation.INC;\n+import static uk.gov.hmcts.ccd.data.casedetails.supplementarydata.SupplementaryDataOperation.SET;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class DefaultSupplementaryDataUpdateOperation implements SupplementaryDataUpdateOperation {\n+\n+    private final SupplementaryDataRepository supplementaryDataRepository;\n+\n+    private EnumMap<SupplementaryDataOperation, BiConsumer<String, SupplementaryDataUpdateRequest>> supplementaryFunctions =\n+        new EnumMap<>(SupplementaryDataOperation.class);\n+\n+    @Autowired\n+    public DefaultSupplementaryDataUpdateOperation(final @Qualifier(\"default\") SupplementaryDataRepository supplementaryDataRepository) {\n+        this.supplementaryDataRepository = supplementaryDataRepository;\n+        supplementaryFunctions.put(SET, (caseReference, updateRequest) -> {\n+            Map<String, Object> requestedData = updateRequest.getOperationProperties(SET);\n+            requestedData\n+                .entrySet()\n+                .stream()\n+                .forEach(entry -> this.supplementaryDataRepository.setSupplementaryData(caseReference,\n+                    entry.getKey(),\n+                    entry.getValue()));\n+        });\n+        supplementaryFunctions.put(INC, (caseReference, updateRequest) -> {\n+            Map<String, Object> requestedData = updateRequest.getOperationProperties(INC);\n+            requestedData\n+                .entrySet()\n+                .stream()\n+                .forEach(entry -> this.supplementaryDataRepository.incrementSupplementaryData(caseReference,\n+                    entry.getKey(),\n+                    entry.getValue()));\n+        });\n+    }\n+\n+    @Override\n+    public SupplementaryData updateSupplementaryData(String caseReference, SupplementaryDataUpdateRequest supplementaryData) {\n+        supplementaryData.getRequestData().keySet().forEach(key -> {\n+            Optional<SupplementaryDataOperation> operation = SupplementaryDataOperation.getOperation(key);\n+            if (operation.isPresent()) {\n+                supplementaryFunctions\n+                    .get(operation.get())\n+                    .accept(caseReference, supplementaryData);\n+            }\n+        });\n+        return this.supplementaryDataRepository.findSupplementaryData(caseReference, supplementaryData.getRequestDataKeys());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1MzUyMw=="}, "originalCommit": {"oid": "342f1d30039a1e8676a7e96edca5707135484226"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjQ3MzM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/SupplementaryDataRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMToyNToyN1rOGtTXmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMTozMDozM1rOGtTgaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1NjQ0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                SupplementaryData findSupplementaryData(String caseReference, Set<String> filterFieldPaths);\n          \n          \n            \n                SupplementaryData findSupplementaryData(String caseReference, Set<String> requestedProperties);", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r450156440", "createdAt": "2020-07-06T11:25:27Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/SupplementaryDataRepository.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package uk.gov.hmcts.ccd.data.casedetails.supplementarydata;\n+\n+import java.util.Set;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryData;\n+\n+public interface SupplementaryDataRepository {\n+\n+    void setSupplementaryData(String caseReference, String fieldPath, Object fieldValue);\n+\n+    void incrementSupplementaryData(String caseReference, String fieldPath, Object fieldValue);\n+\n+    SupplementaryData findSupplementaryData(String caseReference, Set<String> filterFieldPaths);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "342f1d30039a1e8676a7e96edca5707135484226"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1ODY5Nw==", "bodyText": "Done", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r450158697", "createdAt": "2020-07-06T11:30:33Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/SupplementaryDataRepository.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package uk.gov.hmcts.ccd.data.casedetails.supplementarydata;\n+\n+import java.util.Set;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryData;\n+\n+public interface SupplementaryDataRepository {\n+\n+    void setSupplementaryData(String caseReference, String fieldPath, Object fieldValue);\n+\n+    void incrementSupplementaryData(String caseReference, String fieldPath, Object fieldValue);\n+\n+    SupplementaryData findSupplementaryData(String caseReference, Set<String> filterFieldPaths);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1NjQ0MA=="}, "originalCommit": {"oid": "342f1d30039a1e8676a7e96edca5707135484226"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjQ3NDAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/DefaultSupplementaryDataRepository.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMToyNTo0M1rOGtTYCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMToyNTo0M1rOGtTYCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1NjU1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public SupplementaryData findSupplementaryData(final String caseReference, Set<String> filterFieldPaths) {\n          \n          \n            \n                public SupplementaryData findSupplementaryData(final String caseReference, Set<String> requestedProperties) {", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r450156555", "createdAt": "2020-07-06T11:25:43Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/supplementarydata/DefaultSupplementaryDataRepository.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package uk.gov.hmcts.ccd.data.casedetails.supplementarydata;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.List;\n+import java.util.Set;\n+import javax.inject.Singleton;\n+import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.Query;\n+import javax.transaction.Transactional;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryData;\n+\n+@Service\n+@Qualifier(\"default\")\n+@Singleton\n+@Transactional\n+public class DefaultSupplementaryDataRepository implements SupplementaryDataRepository {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultSupplementaryDataRepository.class);\n+\n+    @PersistenceContext\n+    private EntityManager em;\n+\n+    private List<SupplementaryDataQueryBuilder> queryBuilders;\n+\n+\n+    @Autowired\n+    public DefaultSupplementaryDataRepository(final List<SupplementaryDataQueryBuilder> queryBuilders) {\n+        this.queryBuilders = queryBuilders;\n+    }\n+\n+    @Override\n+    public void setSupplementaryData(final String caseReference,\n+                                     String fieldPath,\n+                                     Object fieldValue) {\n+        LOG.debug(\"Set supplementary data\");\n+        Query query = queryBuilder(SupplementaryDataOperation.SET).buildQueryForEachSupplementaryDataProperty(em,\n+            caseReference,\n+            fieldPath,\n+            fieldValue);\n+        query.executeUpdate();\n+    }\n+\n+    @Override\n+    public void incrementSupplementaryData(final String caseReference,\n+                                           String fieldPath,\n+                                           Object fieldValue) {\n+        LOG.debug(\"Insert supplementary data\");\n+        Query query = queryBuilder(SupplementaryDataOperation.INC).buildQueryForEachSupplementaryDataProperty(em,\n+            caseReference,\n+            fieldPath,\n+            fieldValue);\n+        query.executeUpdate();\n+    }\n+\n+    @Override\n+    public SupplementaryData findSupplementaryData(final String caseReference, Set<String> filterFieldPaths) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "342f1d30039a1e8676a7e96edca5707135484226"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjQ3ODYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/supplementarydata/DefaultSupplementaryDataUpdateOperation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMToyNzoyMVrOGtTa0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMTozMDozOVrOGtTgnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1NzI2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private EnumMap<SupplementaryDataOperation, BiConsumer<String, SupplementaryDataUpdateRequest>> supplementaryFunctions =\n          \n          \n            \n                private EnumMap<SupplementaryDataOperation, BiConsumer<String, SupplementaryDataUpdateRequest>> supplementaryDataFunctions =", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r450157265", "createdAt": "2020-07-06T11:27:21Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/supplementarydata/DefaultSupplementaryDataUpdateOperation.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package uk.gov.hmcts.ccd.domain.service.supplementarydata;\n+\n+import java.util.EnumMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.supplementarydata.SupplementaryDataOperation;\n+import uk.gov.hmcts.ccd.data.casedetails.supplementarydata.SupplementaryDataRepository;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryData;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryDataUpdateRequest;\n+\n+import static uk.gov.hmcts.ccd.data.casedetails.supplementarydata.SupplementaryDataOperation.INC;\n+import static uk.gov.hmcts.ccd.data.casedetails.supplementarydata.SupplementaryDataOperation.SET;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class DefaultSupplementaryDataUpdateOperation implements SupplementaryDataUpdateOperation {\n+\n+    private final SupplementaryDataRepository supplementaryDataRepository;\n+\n+    private EnumMap<SupplementaryDataOperation, BiConsumer<String, SupplementaryDataUpdateRequest>> supplementaryFunctions =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "342f1d30039a1e8676a7e96edca5707135484226"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1ODc1MQ==", "bodyText": "done", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r450158751", "createdAt": "2020-07-06T11:30:39Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/supplementarydata/DefaultSupplementaryDataUpdateOperation.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package uk.gov.hmcts.ccd.domain.service.supplementarydata;\n+\n+import java.util.EnumMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.supplementarydata.SupplementaryDataOperation;\n+import uk.gov.hmcts.ccd.data.casedetails.supplementarydata.SupplementaryDataRepository;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryData;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryDataUpdateRequest;\n+\n+import static uk.gov.hmcts.ccd.data.casedetails.supplementarydata.SupplementaryDataOperation.INC;\n+import static uk.gov.hmcts.ccd.data.casedetails.supplementarydata.SupplementaryDataOperation.SET;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class DefaultSupplementaryDataUpdateOperation implements SupplementaryDataUpdateOperation {\n+\n+    private final SupplementaryDataRepository supplementaryDataRepository;\n+\n+    private EnumMap<SupplementaryDataOperation, BiConsumer<String, SupplementaryDataUpdateRequest>> supplementaryFunctions =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1NzI2NQ=="}, "originalCommit": {"oid": "342f1d30039a1e8676a7e96edca5707135484226"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjUwOTI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/supplementarydata/DefaultSupplementaryDataUpdateOperation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMTozNzoyOFrOGtTspw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMTozNzoyOFrOGtTspw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE2MTgzMQ==", "bodyText": "I would remove direct access in supplementary data to the request data, to avoid boilerplate code like:\ngetRequestData().keySet().forEach\nBetter introduce proper utility methods with self explanatory names to SupplementaryDataUpdateRequest instead.\nIn this case:\ngetSupplementaryDataOperations, which will pair nicely with the already introduced getSupplementaryDataProperties", "url": "https://github.com/hmcts/ccd-data-store-api/pull/997#discussion_r450161831", "createdAt": "2020-07-06T11:37:28Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/supplementarydata/DefaultSupplementaryDataUpdateOperation.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package uk.gov.hmcts.ccd.domain.service.supplementarydata;\n+\n+import java.util.EnumMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.supplementarydata.SupplementaryDataOperation;\n+import uk.gov.hmcts.ccd.data.casedetails.supplementarydata.SupplementaryDataRepository;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryData;\n+import uk.gov.hmcts.ccd.domain.model.std.SupplementaryDataUpdateRequest;\n+\n+import static uk.gov.hmcts.ccd.data.casedetails.supplementarydata.SupplementaryDataOperation.INC;\n+import static uk.gov.hmcts.ccd.data.casedetails.supplementarydata.SupplementaryDataOperation.SET;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class DefaultSupplementaryDataUpdateOperation implements SupplementaryDataUpdateOperation {\n+\n+    private final SupplementaryDataRepository supplementaryDataRepository;\n+\n+    private EnumMap<SupplementaryDataOperation, BiConsumer<String, SupplementaryDataUpdateRequest>> supplementaryFunctions =\n+        new EnumMap<>(SupplementaryDataOperation.class);\n+\n+    @Autowired\n+    public DefaultSupplementaryDataUpdateOperation(final @Qualifier(\"default\") SupplementaryDataRepository supplementaryDataRepository) {\n+        this.supplementaryDataRepository = supplementaryDataRepository;\n+        supplementaryFunctions.put(SET, (caseReference, updateRequest) -> {\n+            Map<String, Object> requestedData = updateRequest.getOperationProperties(SET);\n+            requestedData\n+                .entrySet()\n+                .stream()\n+                .forEach(entry -> this.supplementaryDataRepository.setSupplementaryData(caseReference,\n+                    entry.getKey(),\n+                    entry.getValue()));\n+        });\n+        supplementaryFunctions.put(INC, (caseReference, updateRequest) -> {\n+            Map<String, Object> requestedData = updateRequest.getOperationProperties(INC);\n+            requestedData\n+                .entrySet()\n+                .stream()\n+                .forEach(entry -> this.supplementaryDataRepository.incrementSupplementaryData(caseReference,\n+                    entry.getKey(),\n+                    entry.getValue()));\n+        });\n+    }\n+\n+    @Override\n+    public SupplementaryData updateSupplementaryData(String caseReference, SupplementaryDataUpdateRequest supplementaryData) {\n+        supplementaryData.getRequestData().keySet().forEach(key -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "342f1d30039a1e8676a7e96edca5707135484226"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3748, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}