{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzNzI4MDkx", "number": 1267, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjoxNjo0OFrOFCcbZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMDoyMjo0MFrOFE6L0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTA3MjM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/data/message/MessageCandidateRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjoxNjo0OVrOIBmvIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTo0MDo1MVrOICQV_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU1NDE0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Logger LOG = LoggerFactory.getLogger(MessageCandidateRepository.class);", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r538554145", "createdAt": "2020-12-08T16:16:49Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/message/MessageCandidateRepository.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package uk.gov.hmcts.ccd.data.message;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageQueueCandidate;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import javax.inject.Singleton;\n+import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceContext;\n+\n+@Named\n+@Singleton\n+public class MessageCandidateRepository {\n+    private static final Logger LOG = LoggerFactory.getLogger(MessageCandidateRepository.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d800d74b7a37dda3fd8396c010ff60cf46bd2677"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIzNTgzOA==", "bodyText": "done \ud83d\udc4d", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r539235838", "createdAt": "2020-12-09T11:40:51Z", "author": {"login": "RebeccaBaker"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/message/MessageCandidateRepository.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package uk.gov.hmcts.ccd.data.message;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageQueueCandidate;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import javax.inject.Singleton;\n+import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceContext;\n+\n+@Named\n+@Singleton\n+public class MessageCandidateRepository {\n+    private static final Logger LOG = LoggerFactory.getLogger(MessageCandidateRepository.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU1NDE0NQ=="}, "originalCommit": {"oid": "d800d74b7a37dda3fd8396c010ff60cf46bd2677"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTI4MDkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/CaseEventMessageService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjo0Njo1MlrOIBozjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMjo0NTo1NFrOICS2LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU4ODA0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (Boolean.TRUE.equals(caseEventDefinition.getPublish())) {\n          \n          \n            \n                    if (caseEventDefinition.getPublish()) {", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r538588044", "createdAt": "2020-12-08T16:46:52Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/CaseEventMessageService.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package uk.gov.hmcts.ccd.domain.service.message;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.CaseAuditEventRepository;\n+import uk.gov.hmcts.ccd.data.message.MessageCandidateRepository;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.IdamUser;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventDefinition;\n+import uk.gov.hmcts.ccd.domain.model.std.AuditEvent;\n+import uk.gov.hmcts.ccd.domain.model.std.Event;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageInformation;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageQueueCandidate;\n+\n+import javax.inject.Inject;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class CaseEventMessageService implements MessageService {\n+\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+    private final UserRepository userRepository;\n+    private final MessageCandidateRepository messageCandidateRepository;\n+    private final CaseAuditEventRepository caseAuditEventRepository;\n+    private static String CASE_EVENT_MESSAGE_TYPE = \"CASE_EVENT\";\n+\n+    @Inject\n+    public CaseEventMessageService(@Qualifier(CachedUserRepository.QUALIFIER) final UserRepository userRepository,\n+                                   final MessageCandidateRepository messageCandidateRepository,\n+                                   CaseAuditEventRepository caseAuditEventRepository) {\n+        this.userRepository = userRepository;\n+        this.messageCandidateRepository = messageCandidateRepository;\n+        this.caseAuditEventRepository = caseAuditEventRepository;\n+    }\n+\n+    @Override\n+    public void handleMessage(Event event,\n+                              CaseEventDefinition caseEventDefinition,\n+                              CaseDetails caseDetails) {\n+        final MessageQueueCandidate messageQueueCandidate = new MessageQueueCandidate();\n+        if (Boolean.TRUE.equals(caseEventDefinition.getPublish())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d800d74b7a37dda3fd8396c010ff60cf46bd2677"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI3Njg0NQ==", "bodyText": "As caseEventDefinition.getPublish() can be null your suggestion would provide a null pointer error", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r539276845", "createdAt": "2020-12-09T12:45:54Z", "author": {"login": "RebeccaBaker"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/CaseEventMessageService.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package uk.gov.hmcts.ccd.domain.service.message;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.CaseAuditEventRepository;\n+import uk.gov.hmcts.ccd.data.message.MessageCandidateRepository;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.IdamUser;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventDefinition;\n+import uk.gov.hmcts.ccd.domain.model.std.AuditEvent;\n+import uk.gov.hmcts.ccd.domain.model.std.Event;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageInformation;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageQueueCandidate;\n+\n+import javax.inject.Inject;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class CaseEventMessageService implements MessageService {\n+\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+    private final UserRepository userRepository;\n+    private final MessageCandidateRepository messageCandidateRepository;\n+    private final CaseAuditEventRepository caseAuditEventRepository;\n+    private static String CASE_EVENT_MESSAGE_TYPE = \"CASE_EVENT\";\n+\n+    @Inject\n+    public CaseEventMessageService(@Qualifier(CachedUserRepository.QUALIFIER) final UserRepository userRepository,\n+                                   final MessageCandidateRepository messageCandidateRepository,\n+                                   CaseAuditEventRepository caseAuditEventRepository) {\n+        this.userRepository = userRepository;\n+        this.messageCandidateRepository = messageCandidateRepository;\n+        this.caseAuditEventRepository = caseAuditEventRepository;\n+    }\n+\n+    @Override\n+    public void handleMessage(Event event,\n+                              CaseEventDefinition caseEventDefinition,\n+                              CaseDetails caseDetails) {\n+        final MessageQueueCandidate messageQueueCandidate = new MessageQueueCandidate();\n+        if (Boolean.TRUE.equals(caseEventDefinition.getPublish())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU4ODA0NA=="}, "originalCommit": {"oid": "d800d74b7a37dda3fd8396c010ff60cf46bd2677"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTI5NTM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/CaseEventMessageService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjo0OTowMlrOIBo84Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTo0MTowMFrOICQWPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU5MDQzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static String CASE_EVENT_MESSAGE_TYPE = \"CASE_EVENT\";\n          \n          \n            \n                private static final String CASE_EVENT_MESSAGE_TYPE = \"CASE_EVENT\";", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r538590433", "createdAt": "2020-12-08T16:49:02Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/CaseEventMessageService.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package uk.gov.hmcts.ccd.domain.service.message;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.CaseAuditEventRepository;\n+import uk.gov.hmcts.ccd.data.message.MessageCandidateRepository;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.IdamUser;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventDefinition;\n+import uk.gov.hmcts.ccd.domain.model.std.AuditEvent;\n+import uk.gov.hmcts.ccd.domain.model.std.Event;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageInformation;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageQueueCandidate;\n+\n+import javax.inject.Inject;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class CaseEventMessageService implements MessageService {\n+\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+    private final UserRepository userRepository;\n+    private final MessageCandidateRepository messageCandidateRepository;\n+    private final CaseAuditEventRepository caseAuditEventRepository;\n+    private static String CASE_EVENT_MESSAGE_TYPE = \"CASE_EVENT\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d800d74b7a37dda3fd8396c010ff60cf46bd2677"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIzNTkwMg==", "bodyText": "done", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r539235902", "createdAt": "2020-12-09T11:41:00Z", "author": {"login": "RebeccaBaker"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/CaseEventMessageService.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package uk.gov.hmcts.ccd.domain.service.message;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.CaseAuditEventRepository;\n+import uk.gov.hmcts.ccd.data.message.MessageCandidateRepository;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.IdamUser;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventDefinition;\n+import uk.gov.hmcts.ccd.domain.model.std.AuditEvent;\n+import uk.gov.hmcts.ccd.domain.model.std.Event;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageInformation;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageQueueCandidate;\n+\n+import javax.inject.Inject;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class CaseEventMessageService implements MessageService {\n+\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+    private final UserRepository userRepository;\n+    private final MessageCandidateRepository messageCandidateRepository;\n+    private final CaseAuditEventRepository caseAuditEventRepository;\n+    private static String CASE_EVENT_MESSAGE_TYPE = \"CASE_EVENT\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU5MDQzMw=="}, "originalCommit": {"oid": "d800d74b7a37dda3fd8396c010ff60cf46bd2677"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTMzMjQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/CaseEventMessageService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjo1NDoxOFrOIBpUwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTo0MToxOVrOICQW7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU5NjU0Ng==", "bodyText": "Can't see the definition of the PreviousStateId in the scope doc, but I assumed it's meant to be the state of the case prior to this event rather than one of the pre-condition states (which I think is what that is currently)?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r538596546", "createdAt": "2020-12-08T16:54:18Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/CaseEventMessageService.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package uk.gov.hmcts.ccd.domain.service.message;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.CaseAuditEventRepository;\n+import uk.gov.hmcts.ccd.data.message.MessageCandidateRepository;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.IdamUser;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventDefinition;\n+import uk.gov.hmcts.ccd.domain.model.std.AuditEvent;\n+import uk.gov.hmcts.ccd.domain.model.std.Event;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageInformation;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageQueueCandidate;\n+\n+import javax.inject.Inject;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class CaseEventMessageService implements MessageService {\n+\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+    private final UserRepository userRepository;\n+    private final MessageCandidateRepository messageCandidateRepository;\n+    private final CaseAuditEventRepository caseAuditEventRepository;\n+    private static String CASE_EVENT_MESSAGE_TYPE = \"CASE_EVENT\";\n+\n+    @Inject\n+    public CaseEventMessageService(@Qualifier(CachedUserRepository.QUALIFIER) final UserRepository userRepository,\n+                                   final MessageCandidateRepository messageCandidateRepository,\n+                                   CaseAuditEventRepository caseAuditEventRepository) {\n+        this.userRepository = userRepository;\n+        this.messageCandidateRepository = messageCandidateRepository;\n+        this.caseAuditEventRepository = caseAuditEventRepository;\n+    }\n+\n+    @Override\n+    public void handleMessage(Event event,\n+                              CaseEventDefinition caseEventDefinition,\n+                              CaseDetails caseDetails) {\n+        final MessageQueueCandidate messageQueueCandidate = new MessageQueueCandidate();\n+        if (Boolean.TRUE.equals(caseEventDefinition.getPublish())) {\n+\n+            MessageInformation messageInformation = populateMessageInformation(event, caseEventDefinition, caseDetails);\n+            JsonNode node = mapper.convertValue(messageInformation, JsonNode.class);\n+\n+            messageQueueCandidate.setMessageInformation(node);\n+            messageQueueCandidate.setMessageType(CASE_EVENT_MESSAGE_TYPE);\n+            messageQueueCandidate.setTimeStamp(LocalDateTime.now(ZoneOffset.UTC));\n+            messageCandidateRepository.set(messageQueueCandidate);\n+        }\n+    }\n+\n+    private MessageInformation populateMessageInformation(Event event,\n+                                                          CaseEventDefinition caseEventDefinition,\n+                                                          CaseDetails caseDetails) {\n+\n+        final MessageInformation messageInformation = new MessageInformation();\n+        final IdamUser user = userRepository.getUser();\n+        List<AuditEvent> auditEvent = caseAuditEventRepository.findByCase(caseDetails);\n+\n+        messageInformation.setCaseId(caseDetails.getReference().toString());\n+        messageInformation.setJurisdictionId(caseDetails.getJurisdiction());\n+        messageInformation.setCaseTypeId(caseDetails.getCaseTypeId());\n+        messageInformation.setEventInstanceId(auditEvent.get(0).getId().toString());\n+        messageInformation.setEventTimestamp(caseDetails.getLastStateModifiedDate());\n+        messageInformation.setEventId(event.getEventId());\n+        messageInformation.setUserId(user.getId());\n+        messageInformation.setPreviousStateId(getPreState(caseEventDefinition.getPreStates()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d800d74b7a37dda3fd8396c010ff60cf46bd2677"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIzNjA3Ng==", "bodyText": "sorted, good spot \ud83d\udc4d", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r539236076", "createdAt": "2020-12-09T11:41:19Z", "author": {"login": "RebeccaBaker"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/CaseEventMessageService.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package uk.gov.hmcts.ccd.domain.service.message;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.CaseAuditEventRepository;\n+import uk.gov.hmcts.ccd.data.message.MessageCandidateRepository;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.IdamUser;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventDefinition;\n+import uk.gov.hmcts.ccd.domain.model.std.AuditEvent;\n+import uk.gov.hmcts.ccd.domain.model.std.Event;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageInformation;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageQueueCandidate;\n+\n+import javax.inject.Inject;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class CaseEventMessageService implements MessageService {\n+\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+    private final UserRepository userRepository;\n+    private final MessageCandidateRepository messageCandidateRepository;\n+    private final CaseAuditEventRepository caseAuditEventRepository;\n+    private static String CASE_EVENT_MESSAGE_TYPE = \"CASE_EVENT\";\n+\n+    @Inject\n+    public CaseEventMessageService(@Qualifier(CachedUserRepository.QUALIFIER) final UserRepository userRepository,\n+                                   final MessageCandidateRepository messageCandidateRepository,\n+                                   CaseAuditEventRepository caseAuditEventRepository) {\n+        this.userRepository = userRepository;\n+        this.messageCandidateRepository = messageCandidateRepository;\n+        this.caseAuditEventRepository = caseAuditEventRepository;\n+    }\n+\n+    @Override\n+    public void handleMessage(Event event,\n+                              CaseEventDefinition caseEventDefinition,\n+                              CaseDetails caseDetails) {\n+        final MessageQueueCandidate messageQueueCandidate = new MessageQueueCandidate();\n+        if (Boolean.TRUE.equals(caseEventDefinition.getPublish())) {\n+\n+            MessageInformation messageInformation = populateMessageInformation(event, caseEventDefinition, caseDetails);\n+            JsonNode node = mapper.convertValue(messageInformation, JsonNode.class);\n+\n+            messageQueueCandidate.setMessageInformation(node);\n+            messageQueueCandidate.setMessageType(CASE_EVENT_MESSAGE_TYPE);\n+            messageQueueCandidate.setTimeStamp(LocalDateTime.now(ZoneOffset.UTC));\n+            messageCandidateRepository.set(messageQueueCandidate);\n+        }\n+    }\n+\n+    private MessageInformation populateMessageInformation(Event event,\n+                                                          CaseEventDefinition caseEventDefinition,\n+                                                          CaseDetails caseDetails) {\n+\n+        final MessageInformation messageInformation = new MessageInformation();\n+        final IdamUser user = userRepository.getUser();\n+        List<AuditEvent> auditEvent = caseAuditEventRepository.findByCase(caseDetails);\n+\n+        messageInformation.setCaseId(caseDetails.getReference().toString());\n+        messageInformation.setJurisdictionId(caseDetails.getJurisdiction());\n+        messageInformation.setCaseTypeId(caseDetails.getCaseTypeId());\n+        messageInformation.setEventInstanceId(auditEvent.get(0).getId().toString());\n+        messageInformation.setEventTimestamp(caseDetails.getLastStateModifiedDate());\n+        messageInformation.setEventId(event.getEventId());\n+        messageInformation.setUserId(user.getId());\n+        messageInformation.setPreviousStateId(getPreState(caseEventDefinition.getPreStates()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU5NjU0Ng=="}, "originalCommit": {"oid": "d800d74b7a37dda3fd8396c010ff60cf46bd2677"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTMzODUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/CaseEventMessageService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjo1NToxMVrOIBpYlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTo0MToyOVrOICQXQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU5NzUyNQ==", "bodyText": "I don't think LastStateModifiedDate is necessarily the same as EventTimestamp (e.g. if an event doesn't change the state)", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r538597525", "createdAt": "2020-12-08T16:55:11Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/CaseEventMessageService.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package uk.gov.hmcts.ccd.domain.service.message;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.CaseAuditEventRepository;\n+import uk.gov.hmcts.ccd.data.message.MessageCandidateRepository;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.IdamUser;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventDefinition;\n+import uk.gov.hmcts.ccd.domain.model.std.AuditEvent;\n+import uk.gov.hmcts.ccd.domain.model.std.Event;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageInformation;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageQueueCandidate;\n+\n+import javax.inject.Inject;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class CaseEventMessageService implements MessageService {\n+\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+    private final UserRepository userRepository;\n+    private final MessageCandidateRepository messageCandidateRepository;\n+    private final CaseAuditEventRepository caseAuditEventRepository;\n+    private static String CASE_EVENT_MESSAGE_TYPE = \"CASE_EVENT\";\n+\n+    @Inject\n+    public CaseEventMessageService(@Qualifier(CachedUserRepository.QUALIFIER) final UserRepository userRepository,\n+                                   final MessageCandidateRepository messageCandidateRepository,\n+                                   CaseAuditEventRepository caseAuditEventRepository) {\n+        this.userRepository = userRepository;\n+        this.messageCandidateRepository = messageCandidateRepository;\n+        this.caseAuditEventRepository = caseAuditEventRepository;\n+    }\n+\n+    @Override\n+    public void handleMessage(Event event,\n+                              CaseEventDefinition caseEventDefinition,\n+                              CaseDetails caseDetails) {\n+        final MessageQueueCandidate messageQueueCandidate = new MessageQueueCandidate();\n+        if (Boolean.TRUE.equals(caseEventDefinition.getPublish())) {\n+\n+            MessageInformation messageInformation = populateMessageInformation(event, caseEventDefinition, caseDetails);\n+            JsonNode node = mapper.convertValue(messageInformation, JsonNode.class);\n+\n+            messageQueueCandidate.setMessageInformation(node);\n+            messageQueueCandidate.setMessageType(CASE_EVENT_MESSAGE_TYPE);\n+            messageQueueCandidate.setTimeStamp(LocalDateTime.now(ZoneOffset.UTC));\n+            messageCandidateRepository.set(messageQueueCandidate);\n+        }\n+    }\n+\n+    private MessageInformation populateMessageInformation(Event event,\n+                                                          CaseEventDefinition caseEventDefinition,\n+                                                          CaseDetails caseDetails) {\n+\n+        final MessageInformation messageInformation = new MessageInformation();\n+        final IdamUser user = userRepository.getUser();\n+        List<AuditEvent> auditEvent = caseAuditEventRepository.findByCase(caseDetails);\n+\n+        messageInformation.setCaseId(caseDetails.getReference().toString());\n+        messageInformation.setJurisdictionId(caseDetails.getJurisdiction());\n+        messageInformation.setCaseTypeId(caseDetails.getCaseTypeId());\n+        messageInformation.setEventInstanceId(auditEvent.get(0).getId().toString());\n+        messageInformation.setEventTimestamp(caseDetails.getLastStateModifiedDate());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d800d74b7a37dda3fd8396c010ff60cf46bd2677"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIzNjE2MQ==", "bodyText": "done \ud83d\udc4d", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r539236161", "createdAt": "2020-12-09T11:41:29Z", "author": {"login": "RebeccaBaker"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/CaseEventMessageService.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package uk.gov.hmcts.ccd.domain.service.message;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.CaseAuditEventRepository;\n+import uk.gov.hmcts.ccd.data.message.MessageCandidateRepository;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.IdamUser;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventDefinition;\n+import uk.gov.hmcts.ccd.domain.model.std.AuditEvent;\n+import uk.gov.hmcts.ccd.domain.model.std.Event;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageInformation;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageQueueCandidate;\n+\n+import javax.inject.Inject;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class CaseEventMessageService implements MessageService {\n+\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+    private final UserRepository userRepository;\n+    private final MessageCandidateRepository messageCandidateRepository;\n+    private final CaseAuditEventRepository caseAuditEventRepository;\n+    private static String CASE_EVENT_MESSAGE_TYPE = \"CASE_EVENT\";\n+\n+    @Inject\n+    public CaseEventMessageService(@Qualifier(CachedUserRepository.QUALIFIER) final UserRepository userRepository,\n+                                   final MessageCandidateRepository messageCandidateRepository,\n+                                   CaseAuditEventRepository caseAuditEventRepository) {\n+        this.userRepository = userRepository;\n+        this.messageCandidateRepository = messageCandidateRepository;\n+        this.caseAuditEventRepository = caseAuditEventRepository;\n+    }\n+\n+    @Override\n+    public void handleMessage(Event event,\n+                              CaseEventDefinition caseEventDefinition,\n+                              CaseDetails caseDetails) {\n+        final MessageQueueCandidate messageQueueCandidate = new MessageQueueCandidate();\n+        if (Boolean.TRUE.equals(caseEventDefinition.getPublish())) {\n+\n+            MessageInformation messageInformation = populateMessageInformation(event, caseEventDefinition, caseDetails);\n+            JsonNode node = mapper.convertValue(messageInformation, JsonNode.class);\n+\n+            messageQueueCandidate.setMessageInformation(node);\n+            messageQueueCandidate.setMessageType(CASE_EVENT_MESSAGE_TYPE);\n+            messageQueueCandidate.setTimeStamp(LocalDateTime.now(ZoneOffset.UTC));\n+            messageCandidateRepository.set(messageQueueCandidate);\n+        }\n+    }\n+\n+    private MessageInformation populateMessageInformation(Event event,\n+                                                          CaseEventDefinition caseEventDefinition,\n+                                                          CaseDetails caseDetails) {\n+\n+        final MessageInformation messageInformation = new MessageInformation();\n+        final IdamUser user = userRepository.getUser();\n+        List<AuditEvent> auditEvent = caseAuditEventRepository.findByCase(caseDetails);\n+\n+        messageInformation.setCaseId(caseDetails.getReference().toString());\n+        messageInformation.setJurisdictionId(caseDetails.getJurisdiction());\n+        messageInformation.setCaseTypeId(caseDetails.getCaseTypeId());\n+        messageInformation.setEventInstanceId(auditEvent.get(0).getId().toString());\n+        messageInformation.setEventTimestamp(caseDetails.getLastStateModifiedDate());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU5NzUyNQ=="}, "originalCommit": {"oid": "d800d74b7a37dda3fd8396c010ff60cf46bd2677"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTM4NzQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/std/MessageInformation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzowMTo1MVrOIBp4gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTo0MTozOVrOICQXqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYwNTY5Ng==", "bodyText": "Could make this a Long to avoid needing to convert between String/Long whenever creating the object.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private String eventInstanceId;\n          \n          \n            \n                private Long eventInstanceId;", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r538605696", "createdAt": "2020-12-08T17:01:51Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/std/MessageInformation.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package uk.gov.hmcts.ccd.domain.model.std;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+import java.time.LocalDateTime;\n+import java.util.Map;\n+\n+@SuppressWarnings(\"checkstyle:SummaryJavadoc\") // Javadoc predates checkstyle implementation in module\n+public class MessageInformation {\n+    @JsonIgnore\n+    private Long id;\n+    @JsonProperty(\"user_id\")\n+    private String userId;\n+    @JsonProperty(\"jurisdiction_id\")\n+    private String jurisdictionId;\n+    @JsonProperty(\"case_type_id\")\n+    private String caseTypeId;\n+    @JsonProperty(\"case_id\")\n+    private String caseId;\n+    @JsonProperty(\"event_timestamp\")\n+    private LocalDateTime eventTimestamp;\n+    @JsonProperty(\"event_instance_id\")\n+    private String eventInstanceId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d800d74b7a37dda3fd8396c010ff60cf46bd2677"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIzNjI2Nw==", "bodyText": "done \ud83d\udc4d", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r539236267", "createdAt": "2020-12-09T11:41:39Z", "author": {"login": "RebeccaBaker"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/std/MessageInformation.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package uk.gov.hmcts.ccd.domain.model.std;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+import java.time.LocalDateTime;\n+import java.util.Map;\n+\n+@SuppressWarnings(\"checkstyle:SummaryJavadoc\") // Javadoc predates checkstyle implementation in module\n+public class MessageInformation {\n+    @JsonIgnore\n+    private Long id;\n+    @JsonProperty(\"user_id\")\n+    private String userId;\n+    @JsonProperty(\"jurisdiction_id\")\n+    private String jurisdictionId;\n+    @JsonProperty(\"case_type_id\")\n+    private String caseTypeId;\n+    @JsonProperty(\"case_id\")\n+    private String caseId;\n+    @JsonProperty(\"event_timestamp\")\n+    private LocalDateTime eventTimestamp;\n+    @JsonProperty(\"event_instance_id\")\n+    private String eventInstanceId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYwNTY5Ng=="}, "originalCommit": {"oid": "d800d74b7a37dda3fd8396c010ff60cf46bd2677"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTQyOTkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/CaseEventMessageService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzowODoxNVrOIBqTvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTo0MzoyMVrOICQbxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYxMjY3MQ==", "bodyText": "Can EventId be obtained from CaseEventDefinition, then we can remove Event from the method signature completely?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r538612671", "createdAt": "2020-12-08T17:08:15Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/CaseEventMessageService.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package uk.gov.hmcts.ccd.domain.service.message;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.CaseAuditEventRepository;\n+import uk.gov.hmcts.ccd.data.message.MessageCandidateRepository;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.IdamUser;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventDefinition;\n+import uk.gov.hmcts.ccd.domain.model.std.AuditEvent;\n+import uk.gov.hmcts.ccd.domain.model.std.Event;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageInformation;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageQueueCandidate;\n+\n+import javax.inject.Inject;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class CaseEventMessageService implements MessageService {\n+\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+    private final UserRepository userRepository;\n+    private final MessageCandidateRepository messageCandidateRepository;\n+    private final CaseAuditEventRepository caseAuditEventRepository;\n+    private static String CASE_EVENT_MESSAGE_TYPE = \"CASE_EVENT\";\n+\n+    @Inject\n+    public CaseEventMessageService(@Qualifier(CachedUserRepository.QUALIFIER) final UserRepository userRepository,\n+                                   final MessageCandidateRepository messageCandidateRepository,\n+                                   CaseAuditEventRepository caseAuditEventRepository) {\n+        this.userRepository = userRepository;\n+        this.messageCandidateRepository = messageCandidateRepository;\n+        this.caseAuditEventRepository = caseAuditEventRepository;\n+    }\n+\n+    @Override\n+    public void handleMessage(Event event,\n+                              CaseEventDefinition caseEventDefinition,\n+                              CaseDetails caseDetails) {\n+        final MessageQueueCandidate messageQueueCandidate = new MessageQueueCandidate();\n+        if (Boolean.TRUE.equals(caseEventDefinition.getPublish())) {\n+\n+            MessageInformation messageInformation = populateMessageInformation(event, caseEventDefinition, caseDetails);\n+            JsonNode node = mapper.convertValue(messageInformation, JsonNode.class);\n+\n+            messageQueueCandidate.setMessageInformation(node);\n+            messageQueueCandidate.setMessageType(CASE_EVENT_MESSAGE_TYPE);\n+            messageQueueCandidate.setTimeStamp(LocalDateTime.now(ZoneOffset.UTC));\n+            messageCandidateRepository.set(messageQueueCandidate);\n+        }\n+    }\n+\n+    private MessageInformation populateMessageInformation(Event event,\n+                                                          CaseEventDefinition caseEventDefinition,\n+                                                          CaseDetails caseDetails) {\n+\n+        final MessageInformation messageInformation = new MessageInformation();\n+        final IdamUser user = userRepository.getUser();\n+        List<AuditEvent> auditEvent = caseAuditEventRepository.findByCase(caseDetails);\n+\n+        messageInformation.setCaseId(caseDetails.getReference().toString());\n+        messageInformation.setJurisdictionId(caseDetails.getJurisdiction());\n+        messageInformation.setCaseTypeId(caseDetails.getCaseTypeId());\n+        messageInformation.setEventInstanceId(auditEvent.get(0).getId().toString());\n+        messageInformation.setEventTimestamp(caseDetails.getLastStateModifiedDate());\n+        messageInformation.setEventId(event.getEventId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d800d74b7a37dda3fd8396c010ff60cf46bd2677"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIzNzMxOA==", "bodyText": "done \ud83d\udc4d", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r539237318", "createdAt": "2020-12-09T11:43:21Z", "author": {"login": "RebeccaBaker"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/CaseEventMessageService.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package uk.gov.hmcts.ccd.domain.service.message;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.CaseAuditEventRepository;\n+import uk.gov.hmcts.ccd.data.message.MessageCandidateRepository;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.IdamUser;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventDefinition;\n+import uk.gov.hmcts.ccd.domain.model.std.AuditEvent;\n+import uk.gov.hmcts.ccd.domain.model.std.Event;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageInformation;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageQueueCandidate;\n+\n+import javax.inject.Inject;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class CaseEventMessageService implements MessageService {\n+\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+    private final UserRepository userRepository;\n+    private final MessageCandidateRepository messageCandidateRepository;\n+    private final CaseAuditEventRepository caseAuditEventRepository;\n+    private static String CASE_EVENT_MESSAGE_TYPE = \"CASE_EVENT\";\n+\n+    @Inject\n+    public CaseEventMessageService(@Qualifier(CachedUserRepository.QUALIFIER) final UserRepository userRepository,\n+                                   final MessageCandidateRepository messageCandidateRepository,\n+                                   CaseAuditEventRepository caseAuditEventRepository) {\n+        this.userRepository = userRepository;\n+        this.messageCandidateRepository = messageCandidateRepository;\n+        this.caseAuditEventRepository = caseAuditEventRepository;\n+    }\n+\n+    @Override\n+    public void handleMessage(Event event,\n+                              CaseEventDefinition caseEventDefinition,\n+                              CaseDetails caseDetails) {\n+        final MessageQueueCandidate messageQueueCandidate = new MessageQueueCandidate();\n+        if (Boolean.TRUE.equals(caseEventDefinition.getPublish())) {\n+\n+            MessageInformation messageInformation = populateMessageInformation(event, caseEventDefinition, caseDetails);\n+            JsonNode node = mapper.convertValue(messageInformation, JsonNode.class);\n+\n+            messageQueueCandidate.setMessageInformation(node);\n+            messageQueueCandidate.setMessageType(CASE_EVENT_MESSAGE_TYPE);\n+            messageQueueCandidate.setTimeStamp(LocalDateTime.now(ZoneOffset.UTC));\n+            messageCandidateRepository.set(messageQueueCandidate);\n+        }\n+    }\n+\n+    private MessageInformation populateMessageInformation(Event event,\n+                                                          CaseEventDefinition caseEventDefinition,\n+                                                          CaseDetails caseDetails) {\n+\n+        final MessageInformation messageInformation = new MessageInformation();\n+        final IdamUser user = userRepository.getUser();\n+        List<AuditEvent> auditEvent = caseAuditEventRepository.findByCase(caseDetails);\n+\n+        messageInformation.setCaseId(caseDetails.getReference().toString());\n+        messageInformation.setJurisdictionId(caseDetails.getJurisdiction());\n+        messageInformation.setCaseTypeId(caseDetails.getCaseTypeId());\n+        messageInformation.setEventInstanceId(auditEvent.get(0).getId().toString());\n+        messageInformation.setEventTimestamp(caseDetails.getLastStateModifiedDate());\n+        messageInformation.setEventId(event.getEventId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYxMjY3MQ=="}, "originalCommit": {"oid": "d800d74b7a37dda3fd8396c010ff60cf46bd2677"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NTQ3NDMxOnYy", "diffSide": "RIGHT", "path": "src/main/resources/db/changelog/db.changelog-master.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTowMjo1OFrOICO3nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTowMjo1OFrOICO3nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIxMTY3OQ==", "bodyText": "Temporarily added until RDM-10167 is merged to master", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r539211679", "createdAt": "2020-12-09T11:02:58Z", "author": {"login": "RebeccaBaker"}, "path": "src/main/resources/db/changelog/db.changelog-master.xml", "diffHunk": "@@ -43,4 +43,5 @@\n     <include file=\"db/changelog/db.changelog-RDM-10141-2.xml\"/>\n     <include file=\"db/changelog/db.changelog-RDM-10141-3.xml\"/>\n     <include file=\"db/changelog/db.changelog-RDM-10340.xml\"/>\n+    <include file=\"db/changelog/db.changelog-RDM-10167.xml\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d800d74b7a37dda3fd8396c010ff60cf46bd2677"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NTQ3NDcxOnYy", "diffSide": "RIGHT", "path": "src/main/resources/db/changelog/db.changelog-RDM-10167.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTowMzowNlrOICO37w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTowMzowNlrOICO37w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIxMTc1OQ==", "bodyText": "Temporarily added until RDM-10167 is merged to master", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r539211759", "createdAt": "2020-12-09T11:03:06Z", "author": {"login": "RebeccaBaker"}, "path": "src/main/resources/db/changelog/db.changelog-RDM-10167.xml", "diffHunk": "@@ -0,0 +1,35 @@\n+<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d800d74b7a37dda3fd8396c010ff60cf46bd2677"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzA3MDQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/data/message/MessageCandidateRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjoyODoyM1rOICdrhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjoyODoyM1rOICdrhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ1NDM0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public MessageQueueCandidate set(final MessageQueueCandidate messageQueueCandidate) {\n          \n          \n            \n                public MessageQueueCandidate save(final MessageQueueCandidate messageQueueCandidate) {", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r539454342", "createdAt": "2020-12-09T16:28:23Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/message/MessageCandidateRepository.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package uk.gov.hmcts.ccd.data.message;\n+\n+import uk.gov.hmcts.ccd.domain.model.std.MessageQueueCandidate;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import javax.inject.Singleton;\n+import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceContext;\n+\n+@Named\n+@Singleton\n+public class MessageCandidateRepository {\n+    private final MessageCandidateMapper messageCandidateMapper;\n+\n+    @PersistenceContext\n+    private EntityManager em;\n+\n+    @Inject\n+    public MessageCandidateRepository(final MessageCandidateMapper messageCandidateMapper) {\n+        this.messageCandidateMapper = messageCandidateMapper;\n+    }\n+\n+    public MessageQueueCandidate set(final MessageQueueCandidate messageQueueCandidate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "553f9719d2381bb31e4b8c96b8d08f02c1e287cf"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzA4OTA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/std/MessageInformation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjozMTo0NVrOICd22g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjoyNjoyMlrOIDR3DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ1NzI0Mg==", "bodyText": "FYI for the upcoming phase 2 the additionalData field will be changed to contain 2 fields: data and definition. See: https://tools.hmcts.net/confluence/pages/viewpage.action?pageId=1460561625#WorkAllocationPhase2ScopeofDelivery-NewMessageQueueCandidatesDatabaseStructure\nMentioning this in case you prefer to update to the new structure as part of the PR or later on phase 2. As you prefer", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r539457242", "createdAt": "2020-12-09T16:31:45Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/std/MessageInformation.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package uk.gov.hmcts.ccd.domain.model.std;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+import java.time.LocalDateTime;\n+import java.util.Map;\n+\n+@SuppressWarnings(\"checkstyle:SummaryJavadoc\") // Javadoc predates checkstyle implementation in module\n+public class MessageInformation {\n+    @JsonIgnore\n+    private Long id;\n+    @JsonProperty(\"user_id\")\n+    private String userId;\n+    @JsonProperty(\"jurisdiction_id\")\n+    private String jurisdictionId;\n+    @JsonProperty(\"case_type_id\")\n+    private String caseTypeId;\n+    @JsonProperty(\"case_id\")\n+    private String caseId;\n+    @JsonProperty(\"event_timestamp\")\n+    private LocalDateTime eventTimestamp;\n+    @JsonProperty(\"event_instance_id\")\n+    private Long eventInstanceId;\n+    @JsonProperty(\"event_id\")\n+    private String eventId;\n+    @JsonProperty(\"previous_state_id\")\n+    private String previousStateId;\n+    @JsonProperty(\"new_state_id\")\n+    private String newStateId;\n+    @JsonProperty(\"additional_data\")\n+    @ApiModelProperty(\"A JSON object (for future use) that contains additional case fields that have been configured \"\n+        + \"to be included in the event information that is published.\")\n+    private Map<String, JsonNode> data;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "553f9719d2381bb31e4b8c96b8d08f02c1e287cf"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMwOTI2MQ==", "bodyText": "done \ud83d\udc4d", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r540309261", "createdAt": "2020-12-10T16:26:22Z", "author": {"login": "RebeccaBaker"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/std/MessageInformation.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package uk.gov.hmcts.ccd.domain.model.std;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+import java.time.LocalDateTime;\n+import java.util.Map;\n+\n+@SuppressWarnings(\"checkstyle:SummaryJavadoc\") // Javadoc predates checkstyle implementation in module\n+public class MessageInformation {\n+    @JsonIgnore\n+    private Long id;\n+    @JsonProperty(\"user_id\")\n+    private String userId;\n+    @JsonProperty(\"jurisdiction_id\")\n+    private String jurisdictionId;\n+    @JsonProperty(\"case_type_id\")\n+    private String caseTypeId;\n+    @JsonProperty(\"case_id\")\n+    private String caseId;\n+    @JsonProperty(\"event_timestamp\")\n+    private LocalDateTime eventTimestamp;\n+    @JsonProperty(\"event_instance_id\")\n+    private Long eventInstanceId;\n+    @JsonProperty(\"event_id\")\n+    private String eventId;\n+    @JsonProperty(\"previous_state_id\")\n+    private String previousStateId;\n+    @JsonProperty(\"new_state_id\")\n+    private String newStateId;\n+    @JsonProperty(\"additional_data\")\n+    @ApiModelProperty(\"A JSON object (for future use) that contains additional case fields that have been configured \"\n+        + \"to be included in the event information that is published.\")\n+    private Map<String, JsonNode> data;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ1NzI0Mg=="}, "originalCommit": {"oid": "553f9719d2381bb31e4b8c96b8d08f02c1e287cf"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzEwMDQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/CaseEventMessageService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjozMzo1MVrOICd9uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjozMzo1MVrOICd9uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ1OTAwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Qualifier(\"default\")\n          \n          \n            \n            @Qualifier(\"caseEventMessageService\")", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r539459003", "createdAt": "2020-12-09T16:33:51Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/CaseEventMessageService.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package uk.gov.hmcts.ccd.domain.service.message;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.CaseAuditEventRepository;\n+import uk.gov.hmcts.ccd.data.message.MessageCandidateRepository;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.IdamUser;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventDefinition;\n+import uk.gov.hmcts.ccd.domain.model.std.AuditEvent;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageInformation;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageQueueCandidate;\n+\n+import javax.inject.Inject;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+\n+@Service\n+@Qualifier(\"default\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "553f9719d2381bb31e4b8c96b8d08f02c1e287cf"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzEwODY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/createcase/SubmitCaseTransaction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjozNToyMVrOICeCfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjozNToyMVrOICeCfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ2MDIyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                             final MessageService messageService\n          \n          \n            \n                        final  @Qualifier(\"caseEventMessageService\") MessageService messageService", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r539460221", "createdAt": "2020-12-09T16:35:21Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/createcase/SubmitCaseTransaction.java", "diffHunk": "@@ -55,7 +57,8 @@ public SubmitCaseTransaction(@Qualifier(CachedCaseDetailsRepository.QUALIFIER)\n                                  final SecurityClassificationService securityClassificationService,\n                                  final @Qualifier(CachedCaseUserRepository.QUALIFIER)\n                                          CaseUserRepository caseUserRepository,\n-                                 final UserAuthorisation userAuthorisation\n+                                 final UserAuthorisation userAuthorisation,\n+                                 final MessageService messageService", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "553f9719d2381bb31e4b8c96b8d08f02c1e287cf"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzExODQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/MessageService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjozNzowMlrOICeIEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjoyNTo1NFrOIDR1CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ2MTY1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void handleMessage(CaseEventDefinition caseEventDefinition,\n          \n          \n            \n                void handleMessage(MessageContext messageContext)\n          \n      \n    \n    \n  \n\nso that in the future we can extend the API by just adding more required fields to the MessageContext", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r539461650", "createdAt": "2020-12-09T16:37:02Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/MessageService.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package uk.gov.hmcts.ccd.domain.service.message;\n+\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventDefinition;\n+\n+public interface MessageService {\n+\n+    void handleMessage(CaseEventDefinition caseEventDefinition,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "553f9719d2381bb31e4b8c96b8d08f02c1e287cf"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMwODc0NA==", "bodyText": "done \ud83d\udc4d", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r540308744", "createdAt": "2020-12-10T16:25:54Z", "author": {"login": "RebeccaBaker"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/MessageService.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package uk.gov.hmcts.ccd.domain.service.message;\n+\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventDefinition;\n+\n+public interface MessageService {\n+\n+    void handleMessage(CaseEventDefinition caseEventDefinition,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ2MTY1MA=="}, "originalCommit": {"oid": "553f9719d2381bb31e4b8c96b8d08f02c1e287cf"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzEyOTQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/createevent/CreateCaseEventService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjozODo1NlrOICeOig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjozODo1NlrOICeOig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ2MzMwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                              final MessageService messageService) {\n          \n          \n            \n            final  @Qualifier(\"caseEventMessageService\") MessageService messageService", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r539463306", "createdAt": "2020-12-09T16:38:56Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/createevent/CreateCaseEventService.java", "diffHunk": "@@ -92,7 +95,8 @@ public CreateCaseEventService(@Qualifier(CachedUserRepository.QUALIFIER) final U\n                                   final UserAuthorisation userAuthorisation,\n                                   final FieldProcessorService fieldProcessorService,\n                                   final CasePostStateService casePostStateService,\n-                                  @Qualifier(\"utcClock\") final Clock clock) {\n+                                  @Qualifier(\"utcClock\") final Clock clock,\n+                                  final MessageService messageService) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "553f9719d2381bb31e4b8c96b8d08f02c1e287cf"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzE0MzAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/CaseEventMessageService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo0MToyMFrOICeWtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjoyNjoxNFrOIDR2iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ2NTM5Ng==", "bodyText": "enum?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r539465396", "createdAt": "2020-12-09T16:41:20Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/CaseEventMessageService.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package uk.gov.hmcts.ccd.domain.service.message;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.CaseAuditEventRepository;\n+import uk.gov.hmcts.ccd.data.message.MessageCandidateRepository;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.IdamUser;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventDefinition;\n+import uk.gov.hmcts.ccd.domain.model.std.AuditEvent;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageInformation;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageQueueCandidate;\n+\n+import javax.inject.Inject;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class CaseEventMessageService implements MessageService {\n+\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+    private final UserRepository userRepository;\n+    private final MessageCandidateRepository messageCandidateRepository;\n+    private final CaseAuditEventRepository caseAuditEventRepository;\n+    private static final String CASE_EVENT_MESSAGE_TYPE = \"CASE_EVENT\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "553f9719d2381bb31e4b8c96b8d08f02c1e287cf"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMwOTEzMQ==", "bodyText": "done \ud83d\udc4d", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r540309131", "createdAt": "2020-12-10T16:26:14Z", "author": {"login": "RebeccaBaker"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/CaseEventMessageService.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package uk.gov.hmcts.ccd.domain.service.message;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.CaseAuditEventRepository;\n+import uk.gov.hmcts.ccd.data.message.MessageCandidateRepository;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.IdamUser;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventDefinition;\n+import uk.gov.hmcts.ccd.domain.model.std.AuditEvent;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageInformation;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageQueueCandidate;\n+\n+import javax.inject.Inject;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class CaseEventMessageService implements MessageService {\n+\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+    private final UserRepository userRepository;\n+    private final MessageCandidateRepository messageCandidateRepository;\n+    private final CaseAuditEventRepository caseAuditEventRepository;\n+    private static final String CASE_EVENT_MESSAGE_TYPE = \"CASE_EVENT\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ2NTM5Ng=="}, "originalCommit": {"oid": "553f9719d2381bb31e4b8c96b8d08f02c1e287cf"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzE2MjQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/CaseEventMessageService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo0NDo0MlrOICeiTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjoyNjowMFrOIDR1dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ2ODM2Ng==", "bodyText": "can you inject a Clock : \n  \n    \n      ccd-data-store-api/src/main/java/uk/gov/hmcts/ccd/CoreCaseDataApplication.java\n    \n    \n         Line 43\n      in\n      6ae7c52\n    \n    \n    \n    \n\n        \n          \n           public Clock utcClock() { \n        \n    \n  \n\n\ncheck usages for examples", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r539468366", "createdAt": "2020-12-09T16:44:42Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/CaseEventMessageService.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package uk.gov.hmcts.ccd.domain.service.message;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.CaseAuditEventRepository;\n+import uk.gov.hmcts.ccd.data.message.MessageCandidateRepository;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.IdamUser;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventDefinition;\n+import uk.gov.hmcts.ccd.domain.model.std.AuditEvent;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageInformation;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageQueueCandidate;\n+\n+import javax.inject.Inject;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class CaseEventMessageService implements MessageService {\n+\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+    private final UserRepository userRepository;\n+    private final MessageCandidateRepository messageCandidateRepository;\n+    private final CaseAuditEventRepository caseAuditEventRepository;\n+    private static final String CASE_EVENT_MESSAGE_TYPE = \"CASE_EVENT\";\n+\n+    @Inject\n+    public CaseEventMessageService(@Qualifier(CachedUserRepository.QUALIFIER) final UserRepository userRepository,\n+                                   final MessageCandidateRepository messageCandidateRepository,\n+                                   CaseAuditEventRepository caseAuditEventRepository) {\n+        this.userRepository = userRepository;\n+        this.messageCandidateRepository = messageCandidateRepository;\n+        this.caseAuditEventRepository = caseAuditEventRepository;\n+    }\n+\n+    @Override\n+    public void handleMessage(CaseEventDefinition caseEventDefinition,\n+                              CaseDetails caseDetails, String oldState) {\n+        final MessageQueueCandidate messageQueueCandidate = new MessageQueueCandidate();\n+        if (Boolean.TRUE.equals(caseEventDefinition.getPublish())) {\n+\n+            MessageInformation messageInformation = populateMessageInformation(caseEventDefinition,\n+                caseDetails, oldState);\n+            JsonNode node = mapper.convertValue(messageInformation, JsonNode.class);\n+\n+            messageQueueCandidate.setMessageInformation(node);\n+            messageQueueCandidate.setMessageType(CASE_EVENT_MESSAGE_TYPE);\n+            messageQueueCandidate.setTimeStamp(LocalDateTime.now(ZoneOffset.UTC));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "553f9719d2381bb31e4b8c96b8d08f02c1e287cf"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMwODg1NA==", "bodyText": "done \ud83d\udc4d", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r540308854", "createdAt": "2020-12-10T16:26:00Z", "author": {"login": "RebeccaBaker"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/CaseEventMessageService.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package uk.gov.hmcts.ccd.domain.service.message;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.CaseAuditEventRepository;\n+import uk.gov.hmcts.ccd.data.message.MessageCandidateRepository;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.IdamUser;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventDefinition;\n+import uk.gov.hmcts.ccd.domain.model.std.AuditEvent;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageInformation;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageQueueCandidate;\n+\n+import javax.inject.Inject;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class CaseEventMessageService implements MessageService {\n+\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+    private final UserRepository userRepository;\n+    private final MessageCandidateRepository messageCandidateRepository;\n+    private final CaseAuditEventRepository caseAuditEventRepository;\n+    private static final String CASE_EVENT_MESSAGE_TYPE = \"CASE_EVENT\";\n+\n+    @Inject\n+    public CaseEventMessageService(@Qualifier(CachedUserRepository.QUALIFIER) final UserRepository userRepository,\n+                                   final MessageCandidateRepository messageCandidateRepository,\n+                                   CaseAuditEventRepository caseAuditEventRepository) {\n+        this.userRepository = userRepository;\n+        this.messageCandidateRepository = messageCandidateRepository;\n+        this.caseAuditEventRepository = caseAuditEventRepository;\n+    }\n+\n+    @Override\n+    public void handleMessage(CaseEventDefinition caseEventDefinition,\n+                              CaseDetails caseDetails, String oldState) {\n+        final MessageQueueCandidate messageQueueCandidate = new MessageQueueCandidate();\n+        if (Boolean.TRUE.equals(caseEventDefinition.getPublish())) {\n+\n+            MessageInformation messageInformation = populateMessageInformation(caseEventDefinition,\n+                caseDetails, oldState);\n+            JsonNode node = mapper.convertValue(messageInformation, JsonNode.class);\n+\n+            messageQueueCandidate.setMessageInformation(node);\n+            messageQueueCandidate.setMessageType(CASE_EVENT_MESSAGE_TYPE);\n+            messageQueueCandidate.setTimeStamp(LocalDateTime.now(ZoneOffset.UTC));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ2ODM2Ng=="}, "originalCommit": {"oid": "553f9719d2381bb31e4b8c96b8d08f02c1e287cf"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzE3Njg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/CaseEventMessageService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo0NzoyMFrOICeqvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjoyNjowN1rOIDR2CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3MDUyNA==", "bodyText": "considering in the future we might have more classes like this one, we could consider something like this also:\npublic class CaseEventMessageService extends AbstractMessageService\npublic abstract class AbstractMessageService implements MessageService {\nso that we have a place (AbstractMessageService) where to put common code among all subclasses", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r539470524", "createdAt": "2020-12-09T16:47:20Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/CaseEventMessageService.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package uk.gov.hmcts.ccd.domain.service.message;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.CaseAuditEventRepository;\n+import uk.gov.hmcts.ccd.data.message.MessageCandidateRepository;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.IdamUser;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventDefinition;\n+import uk.gov.hmcts.ccd.domain.model.std.AuditEvent;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageInformation;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageQueueCandidate;\n+\n+import javax.inject.Inject;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class CaseEventMessageService implements MessageService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "553f9719d2381bb31e4b8c96b8d08f02c1e287cf"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMwOTAwMA==", "bodyText": "done \ud83d\udc4d", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r540309000", "createdAt": "2020-12-10T16:26:07Z", "author": {"login": "RebeccaBaker"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/CaseEventMessageService.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package uk.gov.hmcts.ccd.domain.service.message;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.CaseAuditEventRepository;\n+import uk.gov.hmcts.ccd.data.message.MessageCandidateRepository;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.IdamUser;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventDefinition;\n+import uk.gov.hmcts.ccd.domain.model.std.AuditEvent;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageInformation;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageQueueCandidate;\n+\n+import javax.inject.Inject;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+\n+@Service\n+@Qualifier(\"default\")\n+public class CaseEventMessageService implements MessageService {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3MDUyNA=="}, "originalCommit": {"oid": "553f9719d2381bb31e4b8c96b8d08f02c1e287cf"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjg5MzMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/CaseEventMessageService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMDoxNzowM1rOIFJW3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMToyNToyMFrOIHAmyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI2NzEwMw==", "bodyText": "Minor, only if it's not a time consuming change (considering having to refactor tests):\ncan you inject the mapper picking one already configured in JacksonObjectMapperConfig?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r542267103", "createdAt": "2020-12-14T10:17:03Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/CaseEventMessageService.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package uk.gov.hmcts.ccd.domain.service.message;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.CaseAuditEventRepository;\n+import uk.gov.hmcts.ccd.data.message.MessageCandidateRepository;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageInformation;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageQueueCandidate;\n+\n+import javax.inject.Inject;\n+import java.time.Clock;\n+\n+@Service\n+@Qualifier(\"caseEventMessageService\")\n+public class CaseEventMessageService extends AbstractMessageService {\n+\n+    private static final ObjectMapper mapper = new ObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05f6a1d193125382a1eac32a6b6440b71111b791"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIyMDg3Mw==", "bodyText": "done \ud83d\udc4d", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r544220873", "createdAt": "2020-12-16T11:25:20Z", "author": {"login": "RebeccaBaker"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/CaseEventMessageService.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package uk.gov.hmcts.ccd.domain.service.message;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.CaseAuditEventRepository;\n+import uk.gov.hmcts.ccd.data.message.MessageCandidateRepository;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageInformation;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageQueueCandidate;\n+\n+import javax.inject.Inject;\n+import java.time.Clock;\n+\n+@Service\n+@Qualifier(\"caseEventMessageService\")\n+public class CaseEventMessageService extends AbstractMessageService {\n+\n+    private static final ObjectMapper mapper = new ObjectMapper();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI2NzEwMw=="}, "originalCommit": {"oid": "05f6a1d193125382a1eac32a6b6440b71111b791"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjkxMjUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/CaseEventMessageService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMDoyMToxNVrOIFJiEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMzowNjowMFrOIFPgPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI2OTk2OQ==", "bodyText": "\u26a0\ufe0f wondering whether to avoid race conditions we should let the DB set this value when the row is inserted in the table (I think the column is already configured to have a default).\nWith this implementation what can happen is that the Java code sets a certain value for the timestamp. But the thread can be put to sleep and resume only after some time later. Therefore the timestamp does not correctly reflect the message creation time and this could cause problems to the message publisher process", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r542269969", "createdAt": "2020-12-14T10:21:15Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/CaseEventMessageService.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package uk.gov.hmcts.ccd.domain.service.message;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.CaseAuditEventRepository;\n+import uk.gov.hmcts.ccd.data.message.MessageCandidateRepository;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageInformation;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageQueueCandidate;\n+\n+import javax.inject.Inject;\n+import java.time.Clock;\n+\n+@Service\n+@Qualifier(\"caseEventMessageService\")\n+public class CaseEventMessageService extends AbstractMessageService {\n+\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+    private final MessageCandidateRepository messageCandidateRepository;\n+\n+    @Inject\n+    public CaseEventMessageService(@Qualifier(CachedUserRepository.QUALIFIER) final UserRepository userRepository,\n+                                   final MessageCandidateRepository messageCandidateRepository,\n+                                   CaseAuditEventRepository caseAuditEventRepository,\n+                                   @Qualifier(\"utcClock\") final Clock clock) {\n+        super(userRepository, caseAuditEventRepository, clock);\n+        this.messageCandidateRepository = messageCandidateRepository;\n+    }\n+\n+    @Override\n+    public void handleMessage(MessageContext messageContext) {\n+        final MessageQueueCandidate messageQueueCandidate = new MessageQueueCandidate();\n+        if (Boolean.TRUE.equals(messageContext.getCaseEventDefinition().getPublish())) {\n+\n+            MessageInformation messageInformation = populateMessageInformation(messageContext);\n+            JsonNode node = mapper.convertValue(messageInformation, JsonNode.class);\n+\n+            messageQueueCandidate.setMessageInformation(node);\n+            messageQueueCandidate.setMessageType(MessageType.CASE_EVENT.name());\n+            messageQueueCandidate.setTimeStamp(now());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05f6a1d193125382a1eac32a6b6440b71111b791"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM2NzgwNQ==", "bodyText": "\ud83d\udc4d  done", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r542367805", "createdAt": "2020-12-14T13:06:00Z", "author": {"login": "RebeccaBaker"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/message/CaseEventMessageService.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package uk.gov.hmcts.ccd.domain.service.message;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.casedetails.CaseAuditEventRepository;\n+import uk.gov.hmcts.ccd.data.message.MessageCandidateRepository;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageInformation;\n+import uk.gov.hmcts.ccd.domain.model.std.MessageQueueCandidate;\n+\n+import javax.inject.Inject;\n+import java.time.Clock;\n+\n+@Service\n+@Qualifier(\"caseEventMessageService\")\n+public class CaseEventMessageService extends AbstractMessageService {\n+\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+    private final MessageCandidateRepository messageCandidateRepository;\n+\n+    @Inject\n+    public CaseEventMessageService(@Qualifier(CachedUserRepository.QUALIFIER) final UserRepository userRepository,\n+                                   final MessageCandidateRepository messageCandidateRepository,\n+                                   CaseAuditEventRepository caseAuditEventRepository,\n+                                   @Qualifier(\"utcClock\") final Clock clock) {\n+        super(userRepository, caseAuditEventRepository, clock);\n+        this.messageCandidateRepository = messageCandidateRepository;\n+    }\n+\n+    @Override\n+    public void handleMessage(MessageContext messageContext) {\n+        final MessageQueueCandidate messageQueueCandidate = new MessageQueueCandidate();\n+        if (Boolean.TRUE.equals(messageContext.getCaseEventDefinition().getPublish())) {\n+\n+            MessageInformation messageInformation = populateMessageInformation(messageContext);\n+            JsonNode node = mapper.convertValue(messageInformation, JsonNode.class);\n+\n+            messageQueueCandidate.setMessageInformation(node);\n+            messageQueueCandidate.setMessageType(MessageType.CASE_EVENT.name());\n+            messageQueueCandidate.setTimeStamp(now());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI2OTk2OQ=="}, "originalCommit": {"oid": "05f6a1d193125382a1eac32a6b6440b71111b791"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjkxOTIzOnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/createcase/SubmitCaseTransactionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMDoyMjo0MFrOIFJlzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNDo0NDo1M1rOIQUfug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI3MDkyNg==", "bodyText": "wonder whether we should have some integration tests to verify that the writing to the 2 tables case_event and the new table is atomic. i.e. if one fails the other is rolledback", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r542270926", "createdAt": "2020-12-14T10:22:40Z", "author": {"login": "mario-paniccia"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/createcase/SubmitCaseTransactionTest.java", "diffHunk": "@@ -1,7 +1,5 @@\n package uk.gov.hmcts.ccd.domain.service.createcase;\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05f6a1d193125382a1eac32a6b6440b71111b791"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk4MzkzMA==", "bodyText": "done", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1267#discussion_r553983930", "createdAt": "2021-01-08T14:44:53Z", "author": {"login": "RebeccaBaker"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/createcase/SubmitCaseTransactionTest.java", "diffHunk": "@@ -1,7 +1,5 @@\n package uk.gov.hmcts.ccd.domain.service.createcase;\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI3MDkyNg=="}, "originalCommit": {"oid": "05f6a1d193125382a1eac32a6b6440b71111b791"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3670, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}