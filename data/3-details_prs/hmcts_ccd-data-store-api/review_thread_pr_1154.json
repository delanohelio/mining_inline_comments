{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4Nzk3MDM0", "number": 1154, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwOToxODo1MlrOErFtYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMDoyOTo1NlrOErjLSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNjE3NzYzOnYy", "diffSide": "RIGHT", "path": "charts/ccd-data-store-api/values.preview.template.yaml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwOToxODo1MlrOHdqP8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMzoyMDozMlrOHdy-PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg2Mjk2Mg==", "bodyText": "Testing purpose only (new test app-insights key). Will remove later.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1154#discussion_r500862962", "createdAt": "2020-10-07T09:18:52Z", "author": {"login": "smathangi"}, "path": "charts/ccd-data-store-api/values.preview.template.yaml", "diffHunk": "@@ -9,6 +9,7 @@ java:\n         - data-store-api-draft-key\n         - ccd-data-s2s-secret\n   environment:\n+    AZURE_APPLICATIONINSIGHTS_INSTRUMENTATIONKEY: \"2dcb834e-768e-4429-9050-ab15af959995\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b729396c4b66ac326d0418b08d9c6b8c5e2bb6b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAwNTg4NA==", "bodyText": "confirmed this is that of a new, temporary ai resource.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1154#discussion_r501005884", "createdAt": "2020-10-07T13:20:32Z", "author": {"login": "MSancaktutar"}, "path": "charts/ccd-data-store-api/values.preview.template.yaml", "diffHunk": "@@ -9,6 +9,7 @@ java:\n         - data-store-api-draft-key\n         - ccd-data-s2s-secret\n   environment:\n+    AZURE_APPLICATIONINSIGHTS_INSTRUMENTATIONKEY: \"2dcb834e-768e-4429-9050-ab15af959995\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg2Mjk2Mg=="}, "originalCommit": {"oid": "3b729396c4b66ac326d0418b08d9c6b8c5e2bb6b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzEyNjU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMzoyOToxM1rOHdzXyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwODoxMjozNlrOHeS6Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAxMjQyNw==", "bodyText": "shouldn't this be initialized at L 117?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1154#discussion_r501012427", "createdAt": "2020-10-07T13:29:13Z", "author": {"login": "MSancaktutar"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -97,23 +110,42 @@ public CallbackService(final SecurityUtils securityUtils,\n     }\n \n     private <T> Optional<ResponseEntity<T>> sendRequest(final String url,\n+                                                        final String callbackType,\n                                                         final Class<T> clazz,\n+\n                                                         final CallbackRequest callbackRequest) {\n+        Instant startTime = null;\n+        int httpStatus = 0;\n         try {\n             LOG.debug(\"Invoking callback {}\", url);\n             final HttpHeaders httpHeaders = new HttpHeaders();\n             httpHeaders.add(\"Content-Type\", \"application/json\");\n+\n             final HttpHeaders securityHeaders = securityUtils.authorizationHeaders();\n             if (null != securityHeaders) {\n                 securityHeaders.forEach((key, values) -> httpHeaders.put(key, values));\n             }\n             final HttpEntity requestEntity = new HttpEntity(callbackRequest, httpHeaders);\n-            return Optional.ofNullable(restTemplate.exchange(url, HttpMethod.POST, requestEntity, clazz));\n+\n+            startTime = Instant.now();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7adbf361205d29cd4079520afb7a99884a5d720"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA1MDgyOA==", "bodyText": "i think just before http call is better otherwise it counts s2s token time as well. (L124)", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1154#discussion_r501050828", "createdAt": "2020-10-07T14:18:39Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -97,23 +110,42 @@ public CallbackService(final SecurityUtils securityUtils,\n     }\n \n     private <T> Optional<ResponseEntity<T>> sendRequest(final String url,\n+                                                        final String callbackType,\n                                                         final Class<T> clazz,\n+\n                                                         final CallbackRequest callbackRequest) {\n+        Instant startTime = null;\n+        int httpStatus = 0;\n         try {\n             LOG.debug(\"Invoking callback {}\", url);\n             final HttpHeaders httpHeaders = new HttpHeaders();\n             httpHeaders.add(\"Content-Type\", \"application/json\");\n+\n             final HttpHeaders securityHeaders = securityUtils.authorizationHeaders();\n             if (null != securityHeaders) {\n                 securityHeaders.forEach((key, values) -> httpHeaders.put(key, values));\n             }\n             final HttpEntity requestEntity = new HttpEntity(callbackRequest, httpHeaders);\n-            return Optional.ofNullable(restTemplate.exchange(url, HttpMethod.POST, requestEntity, clazz));\n+\n+            startTime = Instant.now();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAxMjQyNw=="}, "originalCommit": {"oid": "a7adbf361205d29cd4079520afb7a99884a5d720"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI4NDM5OA==", "bodyText": "What if S2S token generation itself fails? finally block will use a null startTime.\nHow about doing all time consuming activity on top of the method and after that initialising the startTime?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1154#discussion_r501284398", "createdAt": "2020-10-07T20:18:40Z", "author": {"login": "MSancaktutar"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -97,23 +110,42 @@ public CallbackService(final SecurityUtils securityUtils,\n     }\n \n     private <T> Optional<ResponseEntity<T>> sendRequest(final String url,\n+                                                        final String callbackType,\n                                                         final Class<T> clazz,\n+\n                                                         final CallbackRequest callbackRequest) {\n+        Instant startTime = null;\n+        int httpStatus = 0;\n         try {\n             LOG.debug(\"Invoking callback {}\", url);\n             final HttpHeaders httpHeaders = new HttpHeaders();\n             httpHeaders.add(\"Content-Type\", \"application/json\");\n+\n             final HttpHeaders securityHeaders = securityUtils.authorizationHeaders();\n             if (null != securityHeaders) {\n                 securityHeaders.forEach((key, values) -> httpHeaders.put(key, values));\n             }\n             final HttpEntity requestEntity = new HttpEntity(callbackRequest, httpHeaders);\n-            return Optional.ofNullable(restTemplate.exchange(url, HttpMethod.POST, requestEntity, clazz));\n+\n+            startTime = Instant.now();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAxMjQyNw=="}, "originalCommit": {"oid": "a7adbf361205d29cd4079520afb7a99884a5d720"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyOTExMA==", "bodyText": "Yeah.. good point. Lets move s2s bit on top of the method.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1154#discussion_r501529110", "createdAt": "2020-10-08T08:12:36Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -97,23 +110,42 @@ public CallbackService(final SecurityUtils securityUtils,\n     }\n \n     private <T> Optional<ResponseEntity<T>> sendRequest(final String url,\n+                                                        final String callbackType,\n                                                         final Class<T> clazz,\n+\n                                                         final CallbackRequest callbackRequest) {\n+        Instant startTime = null;\n+        int httpStatus = 0;\n         try {\n             LOG.debug(\"Invoking callback {}\", url);\n             final HttpHeaders httpHeaders = new HttpHeaders();\n             httpHeaders.add(\"Content-Type\", \"application/json\");\n+\n             final HttpHeaders securityHeaders = securityUtils.authorizationHeaders();\n             if (null != securityHeaders) {\n                 securityHeaders.forEach((key, values) -> httpHeaders.put(key, values));\n             }\n             final HttpEntity requestEntity = new HttpEntity(callbackRequest, httpHeaders);\n-            return Optional.ofNullable(restTemplate.exchange(url, HttpMethod.POST, requestEntity, clazz));\n+\n+            startTime = Instant.now();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAxMjQyNw=="}, "originalCommit": {"oid": "a7adbf361205d29cd4079520afb7a99884a5d720"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzE1Mzg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/stdapi/CallbackInvoker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMzozNToxMFrOHdzo9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMToxOTo1OVrOHeZzeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAxNjgyMA==", "bodyText": "better use an enumeration?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1154#discussion_r501016820", "createdAt": "2020-10-07T13:35:10Z", "author": {"login": "MSancaktutar"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/stdapi/CallbackInvoker.java", "diffHunk": "@@ -30,6 +30,11 @@\n public class CallbackInvoker {\n \n     private static final HashMap<String, JsonNode> EMPTY_DATA_CLASSIFICATION = Maps.newHashMap();\n+    public static final String ABOUT_TO_START = \"AboutToStart\";\n+    public static final String ABOUT_TO_SUBMIT = \"AboutToSubmit\";\n+    public static final String SUBMITTED = \"Submitted\";\n+    public static final String MID_EVENT = \"MidEvent\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7adbf361205d29cd4079520afb7a99884a5d720"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY0MjEwNQ==", "bodyText": "done", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1154#discussion_r501642105", "createdAt": "2020-10-08T11:19:59Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/stdapi/CallbackInvoker.java", "diffHunk": "@@ -30,6 +30,11 @@\n public class CallbackInvoker {\n \n     private static final HashMap<String, JsonNode> EMPTY_DATA_CLASSIFICATION = Maps.newHashMap();\n+    public static final String ABOUT_TO_START = \"AboutToStart\";\n+    public static final String ABOUT_TO_SUBMIT = \"AboutToSubmit\";\n+    public static final String SUBMITTED = \"Submitted\";\n+    public static final String MID_EVENT = \"MidEvent\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAxNjgyMA=="}, "originalCommit": {"oid": "a7adbf361205d29cd4079520afb7a99884a5d720"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzE1OTMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/stdapi/CallbackInvoker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMzozNjoyM1rOHdzscg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMzozNjoyM1rOHdzscg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAxNzcxNA==", "bodyText": "eol at eof", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1154#discussion_r501017714", "createdAt": "2020-10-07T13:36:23Z", "author": {"login": "MSancaktutar"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/stdapi/CallbackInvoker.java", "diffHunk": "@@ -218,10 +225,10 @@ private void validateAndSetData(final CaseTypeDefinition caseTypeDefinition,\n \n     private void deduceDataClassificationForNewFields(CaseTypeDefinition caseTypeDefinition, CaseDetails caseDetails) {\n         Map<String, JsonNode> defaultSecurityClassifications = caseDataService.getDefaultSecurityClassifications(\n-                caseTypeDefinition,\n+            caseTypeDefinition,\n             caseDetails.getData(),\n             ofNullable(caseDetails.getDataClassification()).orElse(\n                 newHashMap()));\n         caseDetails.setDataClassification(defaultSecurityClassifications);\n     }\n-}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7adbf361205d29cd4079520afb7a99884a5d720"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzE2OTQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/config/TracingConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMzozODozNlrOHdzy2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMzozODozNlrOHdzy2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAxOTM1NA==", "bodyText": "eol", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1154#discussion_r501019354", "createdAt": "2020-10-07T13:38:36Z", "author": {"login": "MSancaktutar"}, "path": "src/main/java/uk/gov/hmcts/ccd/config/TracingConfiguration.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package uk.gov.hmcts.ccd.config;\n+\n+import com.microsoft.applicationinsights.extensibility.TelemetryProcessor;\n+import com.microsoft.applicationinsights.telemetry.RemoteDependencyTelemetry;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import uk.gov.hmcts.ccd.appinsights.CallbackTelemetryContext;\n+import uk.gov.hmcts.ccd.appinsights.CallbackTelemetryThreadContext;\n+\n+@Configuration\n+public class TracingConfiguration {\n+\n+    @Bean\n+    // Custom TelemetryProcessor which tags the type of {@link RemoteDependencyTelemetry} as callback before publishing.\n+    public TelemetryProcessor callbackRecognitionProcessor() {\n+        return telemetry -> {\n+            if (telemetry instanceof RemoteDependencyTelemetry) {\n+                RemoteDependencyTelemetry dependency = (RemoteDependencyTelemetry) telemetry;\n+                if (dependency.getType().startsWith(\"Http\")\n+                    && CallbackTelemetryThreadContext.getTelemetryContext() != null) {\n+\n+                    CallbackTelemetryContext telemetryContext = CallbackTelemetryThreadContext.getTelemetryContext();\n+                    dependency.getProperties().put(\"callback\", \"true\");\n+                    dependency.getProperties().put(\"callbackType\", telemetryContext.getCallbackType());\n+\n+                    // clean up after retrieval\n+                    CallbackTelemetryThreadContext.remove();\n+                }\n+            }\n+            return true;\n+        };\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7adbf361205d29cd4079520afb7a99884a5d720"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzE4NjA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMzo0MjowOFrOHdz9HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwODoxMzowNVrOHeS7Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAyMTk4MQ==", "bodyText": "better putting this on top of the method.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1154#discussion_r501021981", "createdAt": "2020-10-07T13:42:08Z", "author": {"login": "MSancaktutar"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -97,23 +110,42 @@ public CallbackService(final SecurityUtils securityUtils,\n     }\n \n     private <T> Optional<ResponseEntity<T>> sendRequest(final String url,\n+                                                        final String callbackType,\n                                                         final Class<T> clazz,\n+\n                                                         final CallbackRequest callbackRequest) {\n+        Instant startTime = null;\n+        int httpStatus = 0;\n         try {\n             LOG.debug(\"Invoking callback {}\", url);\n             final HttpHeaders httpHeaders = new HttpHeaders();\n             httpHeaders.add(\"Content-Type\", \"application/json\");\n+\n             final HttpHeaders securityHeaders = securityUtils.authorizationHeaders();\n             if (null != securityHeaders) {\n                 securityHeaders.forEach((key, values) -> httpHeaders.put(key, values));\n             }\n             final HttpEntity requestEntity = new HttpEntity(callbackRequest, httpHeaders);\n-            return Optional.ofNullable(restTemplate.exchange(url, HttpMethod.POST, requestEntity, clazz));\n+\n+            startTime = Instant.now();\n+\n+            CallbackTelemetryThreadContext.setTelemetryContext(new CallbackTelemetryContext(callbackType));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7adbf361205d29cd4079520afb7a99884a5d720"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA2MTU3OQ==", "bodyText": "i guess just before callback http call is better. I don't want to populate context if s2s call is failed.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1154#discussion_r501061579", "createdAt": "2020-10-07T14:31:58Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -97,23 +110,42 @@ public CallbackService(final SecurityUtils securityUtils,\n     }\n \n     private <T> Optional<ResponseEntity<T>> sendRequest(final String url,\n+                                                        final String callbackType,\n                                                         final Class<T> clazz,\n+\n                                                         final CallbackRequest callbackRequest) {\n+        Instant startTime = null;\n+        int httpStatus = 0;\n         try {\n             LOG.debug(\"Invoking callback {}\", url);\n             final HttpHeaders httpHeaders = new HttpHeaders();\n             httpHeaders.add(\"Content-Type\", \"application/json\");\n+\n             final HttpHeaders securityHeaders = securityUtils.authorizationHeaders();\n             if (null != securityHeaders) {\n                 securityHeaders.forEach((key, values) -> httpHeaders.put(key, values));\n             }\n             final HttpEntity requestEntity = new HttpEntity(callbackRequest, httpHeaders);\n-            return Optional.ofNullable(restTemplate.exchange(url, HttpMethod.POST, requestEntity, clazz));\n+\n+            startTime = Instant.now();\n+\n+            CallbackTelemetryThreadContext.setTelemetryContext(new CallbackTelemetryContext(callbackType));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAyMTk4MQ=="}, "originalCommit": {"oid": "a7adbf361205d29cd4079520afb7a99884a5d720"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI4NTg5MA==", "bodyText": "moving to the top of the method all computation that takes time and has potential to fail seems to be the best approach, then, doesn't it?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1154#discussion_r501285890", "createdAt": "2020-10-07T20:21:16Z", "author": {"login": "MSancaktutar"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -97,23 +110,42 @@ public CallbackService(final SecurityUtils securityUtils,\n     }\n \n     private <T> Optional<ResponseEntity<T>> sendRequest(final String url,\n+                                                        final String callbackType,\n                                                         final Class<T> clazz,\n+\n                                                         final CallbackRequest callbackRequest) {\n+        Instant startTime = null;\n+        int httpStatus = 0;\n         try {\n             LOG.debug(\"Invoking callback {}\", url);\n             final HttpHeaders httpHeaders = new HttpHeaders();\n             httpHeaders.add(\"Content-Type\", \"application/json\");\n+\n             final HttpHeaders securityHeaders = securityUtils.authorizationHeaders();\n             if (null != securityHeaders) {\n                 securityHeaders.forEach((key, values) -> httpHeaders.put(key, values));\n             }\n             final HttpEntity requestEntity = new HttpEntity(callbackRequest, httpHeaders);\n-            return Optional.ofNullable(restTemplate.exchange(url, HttpMethod.POST, requestEntity, clazz));\n+\n+            startTime = Instant.now();\n+\n+            CallbackTelemetryThreadContext.setTelemetryContext(new CallbackTelemetryContext(callbackType));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAyMTk4MQ=="}, "originalCommit": {"oid": "a7adbf361205d29cd4079520afb7a99884a5d720"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyOTM5NQ==", "bodyText": "done", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1154#discussion_r501529395", "createdAt": "2020-10-08T08:13:05Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/callbacks/CallbackService.java", "diffHunk": "@@ -97,23 +110,42 @@ public CallbackService(final SecurityUtils securityUtils,\n     }\n \n     private <T> Optional<ResponseEntity<T>> sendRequest(final String url,\n+                                                        final String callbackType,\n                                                         final Class<T> clazz,\n+\n                                                         final CallbackRequest callbackRequest) {\n+        Instant startTime = null;\n+        int httpStatus = 0;\n         try {\n             LOG.debug(\"Invoking callback {}\", url);\n             final HttpHeaders httpHeaders = new HttpHeaders();\n             httpHeaders.add(\"Content-Type\", \"application/json\");\n+\n             final HttpHeaders securityHeaders = securityUtils.authorizationHeaders();\n             if (null != securityHeaders) {\n                 securityHeaders.forEach((key, values) -> httpHeaders.put(key, values));\n             }\n             final HttpEntity requestEntity = new HttpEntity(callbackRequest, httpHeaders);\n-            return Optional.ofNullable(restTemplate.exchange(url, HttpMethod.POST, requestEntity, clazz));\n+\n+            startTime = Instant.now();\n+\n+            CallbackTelemetryThreadContext.setTelemetryContext(new CallbackTelemetryContext(callbackType));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAyMTk4MQ=="}, "originalCommit": {"oid": "a7adbf361205d29cd4079520afb7a99884a5d720"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MDk0NTQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/appinsights/CallbackTelemetryContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMDoxNDoyMVrOHeXl5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMDoxNDoyMVrOHeXl5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYwNTg2Mw==", "bodyText": "can we add a Javadoc explaining the usage of this class", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1154#discussion_r501605863", "createdAt": "2020-10-08T10:14:21Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/appinsights/CallbackTelemetryContext.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package uk.gov.hmcts.ccd.appinsights;\n+\n+public class CallbackTelemetryContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38a4833bb1e8925fe38a95992864e946364d1120"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MDk0NTgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/appinsights/CallbackTelemetryThreadContext.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMDoxNDoyNVrOHeXmKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMDo0MzoyNFrOHeYnOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYwNTkzMA==", "bodyText": "can we add a Javadoc explaining the usage of this class", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1154#discussion_r501605930", "createdAt": "2020-10-08T10:14:25Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/appinsights/CallbackTelemetryThreadContext.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package uk.gov.hmcts.ccd.appinsights;\n+\n+public class CallbackTelemetryThreadContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38a4833bb1e8925fe38a95992864e946364d1120"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYwNzcxMA==", "bodyText": "Maybe let's call it CallbackTelemetryThreadContext so that in the future we can use it for other type of Azure dependency calls as well?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1154#discussion_r501607710", "createdAt": "2020-10-08T10:17:04Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/appinsights/CallbackTelemetryThreadContext.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package uk.gov.hmcts.ccd.appinsights;\n+\n+public class CallbackTelemetryThreadContext {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYwNTkzMA=="}, "originalCommit": {"oid": "38a4833bb1e8925fe38a95992864e946364d1120"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYyMjU4Ng==", "bodyText": "sorry didn't get that", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1154#discussion_r501622586", "createdAt": "2020-10-08T10:43:24Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/appinsights/CallbackTelemetryThreadContext.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package uk.gov.hmcts.ccd.appinsights;\n+\n+public class CallbackTelemetryThreadContext {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYwNTkzMA=="}, "originalCommit": {"oid": "38a4833bb1e8925fe38a95992864e946364d1120"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MDk1MzUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/appinsights/CallbackTelemetryContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMDoxNjoxMVrOHeXqxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMDo0NTo1MlrOHeYshA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYwNzEwOA==", "bodyText": "Maybe let's call it TelemetryContext so that in the future we can use it for other types of Azure dependency calls as well?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1154#discussion_r501607108", "createdAt": "2020-10-08T10:16:11Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/appinsights/CallbackTelemetryContext.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package uk.gov.hmcts.ccd.appinsights;\n+\n+public class CallbackTelemetryContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38a4833bb1e8925fe38a95992864e946364d1120"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYyMzk0MA==", "bodyText": "I would prefer separate object for each specific purpose. We can always revisit structure/relationship when more use cases come in..", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1154#discussion_r501623940", "createdAt": "2020-10-08T10:45:52Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/appinsights/CallbackTelemetryContext.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package uk.gov.hmcts.ccd.appinsights;\n+\n+public class CallbackTelemetryContext {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYwNzEwOA=="}, "originalCommit": {"oid": "38a4833bb1e8925fe38a95992864e946364d1120"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MDk5MjQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/config/TracingConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMDoyNjowNlrOHeYCBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMDoyNjowNlrOHeYCBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYxMzA2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class TracingConfiguration {\n          \n          \n            \n            public class AppInsightsTracingConfiguration {", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1154#discussion_r501613063", "createdAt": "2020-10-08T10:26:06Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/config/TracingConfiguration.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package uk.gov.hmcts.ccd.config;\n+\n+import com.microsoft.applicationinsights.extensibility.TelemetryProcessor;\n+import com.microsoft.applicationinsights.telemetry.RemoteDependencyTelemetry;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import uk.gov.hmcts.ccd.appinsights.CallbackTelemetryContext;\n+import uk.gov.hmcts.ccd.appinsights.CallbackTelemetryThreadContext;\n+\n+@Configuration\n+public class TracingConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38a4833bb1e8925fe38a95992864e946364d1120"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MTAwNTUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/config/TracingConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMDoyOTo1NlrOHeYKdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMDoyOTo1NlrOHeYKdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYxNTIyMg==", "bodyText": "with this solution we assume if a telemetry context exists then the dependency is a callback. We could make this a bit more generic and reusable for non-callback dependencies by marking as callback if getCallbackType() is not blank?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1154#discussion_r501615222", "createdAt": "2020-10-08T10:29:56Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/config/TracingConfiguration.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package uk.gov.hmcts.ccd.config;\n+\n+import com.microsoft.applicationinsights.extensibility.TelemetryProcessor;\n+import com.microsoft.applicationinsights.telemetry.RemoteDependencyTelemetry;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import uk.gov.hmcts.ccd.appinsights.CallbackTelemetryContext;\n+import uk.gov.hmcts.ccd.appinsights.CallbackTelemetryThreadContext;\n+\n+@Configuration\n+public class TracingConfiguration {\n+\n+    @Bean\n+    // Custom TelemetryProcessor which tags the type of {@link RemoteDependencyTelemetry} as callback before publishing.\n+    public TelemetryProcessor callbackRecognitionProcessor() {\n+        return telemetry -> {\n+            if (telemetry instanceof RemoteDependencyTelemetry) {\n+                RemoteDependencyTelemetry dependency = (RemoteDependencyTelemetry) telemetry;\n+                if (dependency.getType().startsWith(\"Http\")\n+                    && CallbackTelemetryThreadContext.getTelemetryContext() != null) {\n+\n+                    CallbackTelemetryContext telemetryContext = CallbackTelemetryThreadContext.getTelemetryContext();\n+                    dependency.getProperties().put(\"callback\", \"true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38a4833bb1e8925fe38a95992864e946364d1120"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3705, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}