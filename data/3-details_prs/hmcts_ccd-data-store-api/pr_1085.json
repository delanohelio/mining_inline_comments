{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczODgwNjAy", "number": 1085, "title": "RDM-9266: Introduce ChangeOrganisationRequest Complex Field Standard Base Type", "bodyText": "JIRA link (if applicable)\nhttps://tools.hmcts.net/jira/browse/RDM-9266\nChange description\nIntroduce ChangeOrganisationRequest base type validation for ApprovalStatus field\nDoes this PR introduce a breaking change? (check one with \"x\")\n[ ] Yes\n[ X] No", "createdAt": "2020-08-26T12:43:49Z", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1085", "merged": true, "mergeCommit": {"oid": "165084760b0df4db25bed49f4002e918a44b6556"}, "closed": true, "closedAt": "2020-09-07T15:03:26Z", "author": {"login": "kiran-yenigala-hmcts"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCrKWBAH2gAyNDczODgwNjAyOjQ4MDhlMDY2MTFhMzExMjYwMWI0Yzg5NDVlYWM0Y2ZkNzFkZmYwNmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdGkPO0AFqTQ4MzYxMjkwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4808e06611a3112601b4c8945eac4cfd71dff06c", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/4808e06611a3112601b4c8945eac4cfd71dff06c", "committedDate": "2020-08-26T12:42:18Z", "message": "RDM-9266: Introduce ChangeOrganisationRequest Complex Field Standard Base Type (DATASTORE)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8528ffa70cfb3a60a3cc62ac8e7c01f6e3a618f8", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/8528ffa70cfb3a60a3cc62ac8e7c01f6e3a618f8", "committedDate": "2020-09-02T13:26:22Z", "message": "RDM-9266: Checkstyle issues fixed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwODYyNjUz", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1085#pullrequestreview-480862653", "createdAt": "2020-09-02T14:13:15Z", "commit": {"oid": "8528ffa70cfb3a60a3cc62ac8e7c01f6e3a618f8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoxMzoxNVrOHLxJoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoxNDoxM1rOHLxMbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwMTY2NA==", "bodyText": "Should be ApprovalStatus. Otherwise I think the data check will not happen.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1085#discussion_r482101664", "createdAt": "2020-09-02T14:13:15Z", "author": {"login": "rafalkalita"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/types/ApprovalStatusValidatorTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package uk.gov.hmcts.ccd.domain.types;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.util.Collections;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import uk.gov.hmcts.ccd.data.definition.CaseDefinitionRepository;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseFieldDefinition;\n+import uk.gov.hmcts.ccd.test.CaseFieldDefinitionBuilder;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.Mockito.when;\n+import static uk.gov.hmcts.ccd.domain.types.BaseTypeValidator.REGEX_GUIDANCE;\n+\n+class ApprovalStatusValidatorTest {\n+\n+    private static final JsonNodeFactory NODE_FACTORY = JsonNodeFactory.instance;\n+    private static final String FIELD_ID = \"ApprovalStatus\";\n+    private static final String ORGANISATION_TO_ADD = \"OrganisationToAdd\";\n+\n+    @Mock\n+    private BaseType numberBaseType;\n+\n+    @Mock\n+    private CaseDefinitionRepository definitionRepository;\n+\n+    private ApprovalStatusValidator validator;\n+    private CaseFieldDefinition caseFieldDefinition;\n+\n+    @BeforeEach\n+    void setup() {\n+        MockitoAnnotations.initMocks(this);\n+\n+        when(definitionRepository.getBaseTypes()).thenReturn(Collections.emptyList());\n+        BaseType.setCaseDefinitionRepository(definitionRepository);\n+        BaseType.initialise();\n+\n+        when(numberBaseType.getType()).thenReturn(NumberValidator.TYPE_ID);\n+        BaseType.register(numberBaseType);\n+\n+        validator = new ApprovalStatusValidator();\n+\n+        caseFieldDefinition = caseField(FIELD_ID).build();\n+    }\n+\n+    private CaseFieldDefinitionBuilder caseField(String fieldId) {\n+        return new CaseFieldDefinitionBuilder(fieldId).withType(ApprovalStatusValidator.TYPE_ID);\n+    }\n+\n+    @Test\n+    void shouldFailOnInvalidApprovalStatus() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"5\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"ApprovalStatus\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(1, validationResults.size());\n+        assertEquals(\"Invalid Approval Status Value, Valid values are 0,1 and 2. \"\n+                + \"0 = \u2018Not considered\u2019, 1 = \u2018Approved\u2019, 2 = \u2018Rejected\u2019\",\n+            validationResults.get(0).getErrorMessage());\n+    }\n+\n+    @Test\n+    void shouldValidateOnValidApprovalStatus() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"0\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"ApprovalStatus\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForOtherFieldId() {\n+        caseFieldDefinition = caseField(ORGANISATION_TO_ADD).build();\n+        final JsonNode data = NODE_FACTORY.textNode(\"0\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForEmptyData() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8528ffa70cfb3a60a3cc62ac8e7c01f6e3a618f8"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwMjM4Mg==", "bodyText": "Same like above. Should be ApprovalStatus.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1085#discussion_r482102382", "createdAt": "2020-09-02T14:14:13Z", "author": {"login": "rafalkalita"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/types/ApprovalStatusValidatorTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package uk.gov.hmcts.ccd.domain.types;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.util.Collections;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import uk.gov.hmcts.ccd.data.definition.CaseDefinitionRepository;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseFieldDefinition;\n+import uk.gov.hmcts.ccd.test.CaseFieldDefinitionBuilder;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.Mockito.when;\n+import static uk.gov.hmcts.ccd.domain.types.BaseTypeValidator.REGEX_GUIDANCE;\n+\n+class ApprovalStatusValidatorTest {\n+\n+    private static final JsonNodeFactory NODE_FACTORY = JsonNodeFactory.instance;\n+    private static final String FIELD_ID = \"ApprovalStatus\";\n+    private static final String ORGANISATION_TO_ADD = \"OrganisationToAdd\";\n+\n+    @Mock\n+    private BaseType numberBaseType;\n+\n+    @Mock\n+    private CaseDefinitionRepository definitionRepository;\n+\n+    private ApprovalStatusValidator validator;\n+    private CaseFieldDefinition caseFieldDefinition;\n+\n+    @BeforeEach\n+    void setup() {\n+        MockitoAnnotations.initMocks(this);\n+\n+        when(definitionRepository.getBaseTypes()).thenReturn(Collections.emptyList());\n+        BaseType.setCaseDefinitionRepository(definitionRepository);\n+        BaseType.initialise();\n+\n+        when(numberBaseType.getType()).thenReturn(NumberValidator.TYPE_ID);\n+        BaseType.register(numberBaseType);\n+\n+        validator = new ApprovalStatusValidator();\n+\n+        caseFieldDefinition = caseField(FIELD_ID).build();\n+    }\n+\n+    private CaseFieldDefinitionBuilder caseField(String fieldId) {\n+        return new CaseFieldDefinitionBuilder(fieldId).withType(ApprovalStatusValidator.TYPE_ID);\n+    }\n+\n+    @Test\n+    void shouldFailOnInvalidApprovalStatus() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"5\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"ApprovalStatus\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(1, validationResults.size());\n+        assertEquals(\"Invalid Approval Status Value, Valid values are 0,1 and 2. \"\n+                + \"0 = \u2018Not considered\u2019, 1 = \u2018Approved\u2019, 2 = \u2018Rejected\u2019\",\n+            validationResults.get(0).getErrorMessage());\n+    }\n+\n+    @Test\n+    void shouldValidateOnValidApprovalStatus() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"0\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"ApprovalStatus\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForOtherFieldId() {\n+        caseFieldDefinition = caseField(ORGANISATION_TO_ADD).build();\n+        final JsonNode data = NODE_FACTORY.textNode(\"0\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForEmptyData() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForNullData() {\n+        final JsonNode data = null;\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8528ffa70cfb3a60a3cc62ac8e7c01f6e3a618f8"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwODc1NzM1", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1085#pullrequestreview-480875735", "createdAt": "2020-09-02T14:26:02Z", "commit": {"oid": "8528ffa70cfb3a60a3cc62ac8e7c01f6e3a618f8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoyNjowMlrOHLxvjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoyNjowMlrOHLxvjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjExMTM3NA==", "bodyText": "There is a class that test all validations together based on definitions.  CaseDataValidatorTest . May be you can add your new Type and its validator there.  It is just a recommendation . Not mandatory.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1085#discussion_r482111374", "createdAt": "2020-09-02T14:26:02Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/types/ApprovalStatusValidatorTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package uk.gov.hmcts.ccd.domain.types;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.util.Collections;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import uk.gov.hmcts.ccd.data.definition.CaseDefinitionRepository;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseFieldDefinition;\n+import uk.gov.hmcts.ccd.test.CaseFieldDefinitionBuilder;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.Mockito.when;\n+import static uk.gov.hmcts.ccd.domain.types.BaseTypeValidator.REGEX_GUIDANCE;\n+\n+class ApprovalStatusValidatorTest {\n+\n+    private static final JsonNodeFactory NODE_FACTORY = JsonNodeFactory.instance;\n+    private static final String FIELD_ID = \"ApprovalStatus\";\n+    private static final String ORGANISATION_TO_ADD = \"OrganisationToAdd\";\n+\n+    @Mock\n+    private BaseType numberBaseType;\n+\n+    @Mock\n+    private CaseDefinitionRepository definitionRepository;\n+\n+    private ApprovalStatusValidator validator;\n+    private CaseFieldDefinition caseFieldDefinition;\n+\n+    @BeforeEach\n+    void setup() {\n+        MockitoAnnotations.initMocks(this);\n+\n+        when(definitionRepository.getBaseTypes()).thenReturn(Collections.emptyList());\n+        BaseType.setCaseDefinitionRepository(definitionRepository);\n+        BaseType.initialise();\n+\n+        when(numberBaseType.getType()).thenReturn(NumberValidator.TYPE_ID);\n+        BaseType.register(numberBaseType);\n+\n+        validator = new ApprovalStatusValidator();\n+\n+        caseFieldDefinition = caseField(FIELD_ID).build();\n+    }\n+\n+    private CaseFieldDefinitionBuilder caseField(String fieldId) {\n+        return new CaseFieldDefinitionBuilder(fieldId).withType(ApprovalStatusValidator.TYPE_ID);\n+    }\n+\n+    @Test\n+    void shouldFailOnInvalidApprovalStatus() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"5\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"ApprovalStatus\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(1, validationResults.size());\n+        assertEquals(\"Invalid Approval Status Value, Valid values are 0,1 and 2. \"\n+                + \"0 = \u2018Not considered\u2019, 1 = \u2018Approved\u2019, 2 = \u2018Rejected\u2019\",\n+            validationResults.get(0).getErrorMessage());\n+    }\n+\n+    @Test\n+    void shouldValidateOnValidApprovalStatus() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"0\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"ApprovalStatus\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForOtherFieldId() {\n+        caseFieldDefinition = caseField(ORGANISATION_TO_ADD).build();\n+        final JsonNode data = NODE_FACTORY.textNode(\"0\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForEmptyData() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForNullData() {\n+        final JsonNode data = null;\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void getType() {\n+        assertEquals(validator.getType(), BaseType.get(\"Number\"), \"Type is incorrect\");\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8528ffa70cfb3a60a3cc62ac8e7c01f6e3a618f8"}, "originalPosition": 107}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3eb78605b6855d959907620343a15330c7e061b3", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/3eb78605b6855d959907620343a15330c7e061b3", "committedDate": "2020-09-03T15:40:39Z", "message": "RDM-9266: Code review comments addressed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMDYzODA1", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1085#pullrequestreview-482063805", "createdAt": "2020-09-03T17:40:42Z", "commit": {"oid": "3eb78605b6855d959907620343a15330c7e061b3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f9e9519ffe5f86f6a9d42edd2ba35cb97843cd1", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/7f9e9519ffe5f86f6a9d42edd2ba35cb97843cd1", "committedDate": "2020-09-04T08:29:50Z", "message": "RDM-9266: CVE issues CVE-2020-10517, CVE-2020-10518 fixed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84e882237b0b3dbe56b2af2ef701b19777240e79", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/84e882237b0b3dbe56b2af2ef701b19777240e79", "committedDate": "2020-09-04T08:45:48Z", "message": "RDM-9266: checkstyle issues addressed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNjEyOTA2", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1085#pullrequestreview-483612906", "createdAt": "2020-09-07T14:54:00Z", "commit": {"oid": "84e882237b0b3dbe56b2af2ef701b19777240e79"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2717, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}