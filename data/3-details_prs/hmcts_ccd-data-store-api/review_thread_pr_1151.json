{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3OTYzODI2", "number": 1151, "reviewThreads": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDoxMToyOFrOEqqKcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTozMTowN1rOErPIdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTY2NDQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/EnablingConditionSorter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDoxMToyOFrOHc_WAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTo0NTo1MlrOHdCZAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2MDAwMQ==", "bodyText": "Not covered by tests. 'return 0' as well.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500160001", "createdAt": "2020-10-06T10:11:28Z", "author": {"login": "rafalkalita"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/EnablingConditionSorter.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package uk.gov.hmcts.ccd.domain.casestate;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+@Component\n+public class EnablingConditionSorter {\n+\n+    public void sortEventPostStates(List<EventPostStateDefinition> eventPostStates) {\n+        if (eventPostStates != null) {\n+            eventPostStates.sort(new PostStateComparator());\n+        }\n+    }\n+\n+    private class PostStateComparator implements Comparator<EventPostStateDefinition> {\n+\n+        @Override\n+        public int compare(EventPostStateDefinition first, EventPostStateDefinition second) {\n+            if (first.getPriority() != null) {\n+                return first.getPriority().compareTo(second.getPriority());\n+            } else if (second.getPriority() != null) {\n+                return second.getPriority().compareTo(first.getPriority());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8517bea5262948f518e3dc945fdb6d9b8f3d558f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwOTkyMg==", "bodyText": "Added tests for '0'", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500209922", "createdAt": "2020-10-06T11:45:52Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/EnablingConditionSorter.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package uk.gov.hmcts.ccd.domain.casestate;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+@Component\n+public class EnablingConditionSorter {\n+\n+    public void sortEventPostStates(List<EventPostStateDefinition> eventPostStates) {\n+        if (eventPostStates != null) {\n+            eventPostStates.sort(new PostStateComparator());\n+        }\n+    }\n+\n+    private class PostStateComparator implements Comparator<EventPostStateDefinition> {\n+\n+        @Override\n+        public int compare(EventPostStateDefinition first, EventPostStateDefinition second) {\n+            if (first.getPriority() != null) {\n+                return first.getPriority().compareTo(second.getPriority());\n+            } else if (second.getPriority() != null) {\n+                return second.getPriority().compareTo(first.getPriority());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2MDAwMQ=="}, "originalCommit": {"oid": "8517bea5262948f518e3dc945fdb6d9b8f3d558f"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTY5MTA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/createevent/CreateCaseEventService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDoxOToxOVrOHc_m3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTo0Njo0MFrOHdCalA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2NDMxNg==", "bodyText": "'this' word not needed", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500164316", "createdAt": "2020-10-06T10:19:19Z", "author": {"login": "rafalkalita"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/createevent/CreateCaseEventService.java", "diffHunk": "@@ -222,8 +230,13 @@ private void mergeUpdatedFieldsToCaseDetails(final Map<String, JsonNode> data,\n                 caseDetails.getDataClassification()));\n         }\n         caseDetails.setLastModified(now());\n-        if (!StringUtils.equalsAnyIgnoreCase(CaseStateDefinition.ANY, caseEventDefinition.getPostState())) {\n-            caseDetails.setState(caseEventDefinition.getPostState());\n+        updateCaseState(caseDetails, caseEventDefinition);\n+    }\n+\n+    private void updateCaseState(CaseDetails caseDetails, CaseEventDefinition caseEventDefinition) {\n+        Optional<String> postState = this.caseStateUpdateService.retrieveCaseState(caseEventDefinition, caseDetails);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8517bea5262948f518e3dc945fdb6d9b8f3d558f"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIxMDMyNA==", "bodyText": "removed 'this' word", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500210324", "createdAt": "2020-10-06T11:46:40Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/createevent/CreateCaseEventService.java", "diffHunk": "@@ -222,8 +230,13 @@ private void mergeUpdatedFieldsToCaseDetails(final Map<String, JsonNode> data,\n                 caseDetails.getDataClassification()));\n         }\n         caseDetails.setLastModified(now());\n-        if (!StringUtils.equalsAnyIgnoreCase(CaseStateDefinition.ANY, caseEventDefinition.getPostState())) {\n-            caseDetails.setState(caseEventDefinition.getPostState());\n+        updateCaseState(caseDetails, caseEventDefinition);\n+    }\n+\n+    private void updateCaseState(CaseDetails caseDetails, CaseEventDefinition caseEventDefinition) {\n+        Optional<String> postState = this.caseStateUpdateService.retrieveCaseState(caseEventDefinition, caseDetails);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2NDMxNg=="}, "originalCommit": {"oid": "8517bea5262948f518e3dc945fdb6d9b8f3d558f"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTY5NDM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/createevent/CreateCaseEventService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDoyMDoxOVrOHc_o9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTo0NzowMFrOHdCbQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2NDg1Mg==", "bodyText": "'this' word not needed", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500164852", "createdAt": "2020-10-06T10:20:19Z", "author": {"login": "rafalkalita"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/createevent/CreateCaseEventService.java", "diffHunk": "@@ -194,8 +201,9 @@ private CaseDetails getCaseDetails(final String caseReference) {\n     private CaseDetails saveCaseDetails(CaseDetails caseDetailsBefore, final CaseDetails caseDetails,\n                                         final CaseEventDefinition caseEventDefinition,\n                                         final Optional<String> state, LocalDateTime timeNow) {\n-        if (!state.isPresent() && !equalsIgnoreCase(CaseStateDefinition.ANY, caseEventDefinition.getPostState())) {\n-            caseDetails.setState(caseEventDefinition.getPostState());\n+\n+        if (!state.isPresent()) {\n+            this.updateCaseState(caseDetails, caseEventDefinition);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8517bea5262948f518e3dc945fdb6d9b8f3d558f"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIxMDQ5OA==", "bodyText": "removed 'this' word", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500210498", "createdAt": "2020-10-06T11:47:00Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/createevent/CreateCaseEventService.java", "diffHunk": "@@ -194,8 +201,9 @@ private CaseDetails getCaseDetails(final String caseReference) {\n     private CaseDetails saveCaseDetails(CaseDetails caseDetailsBefore, final CaseDetails caseDetails,\n                                         final CaseEventDefinition caseEventDefinition,\n                                         final Optional<String> state, LocalDateTime timeNow) {\n-        if (!state.isPresent() && !equalsIgnoreCase(CaseStateDefinition.ANY, caseEventDefinition.getPostState())) {\n-            caseDetails.setState(caseEventDefinition.getPostState());\n+\n+        if (!state.isPresent()) {\n+            this.updateCaseState(caseDetails, caseEventDefinition);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2NDg1Mg=="}, "originalCommit": {"oid": "8517bea5262948f518e3dc945fdb6d9b8f3d558f"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTc0NjIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/jexl/JexlEnablingConditionParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDozNTo0OFrOHdAI6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTo0ODo0NFrOHdCevA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE3MzAzNQ==", "bodyText": "IDE tell me it can be simplified to: .map(list -> String.join(\".\", list))", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500173035", "createdAt": "2020-10-06T10:35:48Z", "author": {"login": "rafalkalita"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/jexl/JexlEnablingConditionParser.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package uk.gov.hmcts.ccd.domain.casestate.jexl;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.jayway.jsonpath.DocumentContext;\n+import com.jayway.jsonpath.JsonPath;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import org.apache.commons.jexl3.JexlBuilder;\n+import org.apache.commons.jexl3.JexlEngine;\n+import org.apache.commons.jexl3.JexlScript;\n+import org.apache.commons.jexl3.MapContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionFormatter;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionParser;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.ServiceException;\n+\n+@Component\n+@Qualifier(\"jexl\")\n+public class JexlEnablingConditionParser implements EnablingConditionParser {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(JexlEnablingConditionParser.class);\n+\n+    private final JexlEngine engine;\n+\n+    private final ObjectMapper objectMapper;\n+\n+    private EnablingConditionFormatter enablingConditionFormatter;\n+\n+    @Inject\n+    public JexlEnablingConditionParser(EnablingConditionFormatter enablingConditionFormatter) {\n+        this.enablingConditionFormatter = enablingConditionFormatter;\n+        this.engine = new JexlBuilder().create();\n+        this.objectMapper = new ObjectMapper();\n+    }\n+\n+    @Override\n+    public Boolean evaluate(String enablingCondition, Map<String, JsonNode> caseEventData) {\n+        try {\n+            String expression = this.enablingConditionFormatter.format(enablingCondition);\n+            if (expression != null) {\n+                JexlScript expressionScript = engine.createScript(expression);\n+                Map<String, Object> data = retrieveContextData(caseEventData, expressionScript.getVariables());\n+                return (Boolean) expressionScript.execute(new MapContext(data));\n+            }\n+        } catch (Exception e) {\n+            LOG.error(e.getMessage(), e);\n+        }\n+        return false;\n+    }\n+\n+    private Map<String, Object> retrieveContextData(Map<String, JsonNode> caseEventData,\n+                                                    Set<List<String>> variableLists) {\n+        Set<String> variables = getVariableNames(variableLists);\n+        Map<String, Object> contextData = new HashMap<>();\n+        DocumentContext context = JsonPath.parse(caseDataToJsonString(caseEventData));\n+        for (String variable : variables) {\n+            Optional<Object> value = getValueFromContext(context, variable);\n+            if (value.isPresent()) {\n+                contextData.put(variable, value.get());\n+            }\n+        }\n+        return contextData;\n+    }\n+\n+    private Set<String> getVariableNames(Set<List<String>> variableLists) {\n+        return variableLists\n+            .stream()\n+            .map(list -> list", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8517bea5262948f518e3dc945fdb6d9b8f3d558f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIxMTM4OA==", "bodyText": "changed to String.join(\".\", list)", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500211388", "createdAt": "2020-10-06T11:48:44Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/jexl/JexlEnablingConditionParser.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package uk.gov.hmcts.ccd.domain.casestate.jexl;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.jayway.jsonpath.DocumentContext;\n+import com.jayway.jsonpath.JsonPath;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import org.apache.commons.jexl3.JexlBuilder;\n+import org.apache.commons.jexl3.JexlEngine;\n+import org.apache.commons.jexl3.JexlScript;\n+import org.apache.commons.jexl3.MapContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionFormatter;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionParser;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.ServiceException;\n+\n+@Component\n+@Qualifier(\"jexl\")\n+public class JexlEnablingConditionParser implements EnablingConditionParser {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(JexlEnablingConditionParser.class);\n+\n+    private final JexlEngine engine;\n+\n+    private final ObjectMapper objectMapper;\n+\n+    private EnablingConditionFormatter enablingConditionFormatter;\n+\n+    @Inject\n+    public JexlEnablingConditionParser(EnablingConditionFormatter enablingConditionFormatter) {\n+        this.enablingConditionFormatter = enablingConditionFormatter;\n+        this.engine = new JexlBuilder().create();\n+        this.objectMapper = new ObjectMapper();\n+    }\n+\n+    @Override\n+    public Boolean evaluate(String enablingCondition, Map<String, JsonNode> caseEventData) {\n+        try {\n+            String expression = this.enablingConditionFormatter.format(enablingCondition);\n+            if (expression != null) {\n+                JexlScript expressionScript = engine.createScript(expression);\n+                Map<String, Object> data = retrieveContextData(caseEventData, expressionScript.getVariables());\n+                return (Boolean) expressionScript.execute(new MapContext(data));\n+            }\n+        } catch (Exception e) {\n+            LOG.error(e.getMessage(), e);\n+        }\n+        return false;\n+    }\n+\n+    private Map<String, Object> retrieveContextData(Map<String, JsonNode> caseEventData,\n+                                                    Set<List<String>> variableLists) {\n+        Set<String> variables = getVariableNames(variableLists);\n+        Map<String, Object> contextData = new HashMap<>();\n+        DocumentContext context = JsonPath.parse(caseDataToJsonString(caseEventData));\n+        for (String variable : variables) {\n+            Optional<Object> value = getValueFromContext(context, variable);\n+            if (value.isPresent()) {\n+                contextData.put(variable, value.get());\n+            }\n+        }\n+        return contextData;\n+    }\n+\n+    private Set<String> getVariableNames(Set<List<String>> variableLists) {\n+        return variableLists\n+            .stream()\n+            .map(list -> list", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE3MzAzNQ=="}, "originalCommit": {"oid": "8517bea5262948f518e3dc945fdb6d9b8f3d558f"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTc0NzE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/jexl/JexlEnablingConditionParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDozNjowN1rOHdAJkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMjoyMToyN1rOHdDovQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE3MzIwMw==", "bodyText": "Not covered by a test", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500173203", "createdAt": "2020-10-06T10:36:07Z", "author": {"login": "rafalkalita"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/jexl/JexlEnablingConditionParser.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package uk.gov.hmcts.ccd.domain.casestate.jexl;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.jayway.jsonpath.DocumentContext;\n+import com.jayway.jsonpath.JsonPath;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import org.apache.commons.jexl3.JexlBuilder;\n+import org.apache.commons.jexl3.JexlEngine;\n+import org.apache.commons.jexl3.JexlScript;\n+import org.apache.commons.jexl3.MapContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionFormatter;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionParser;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.ServiceException;\n+\n+@Component\n+@Qualifier(\"jexl\")\n+public class JexlEnablingConditionParser implements EnablingConditionParser {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(JexlEnablingConditionParser.class);\n+\n+    private final JexlEngine engine;\n+\n+    private final ObjectMapper objectMapper;\n+\n+    private EnablingConditionFormatter enablingConditionFormatter;\n+\n+    @Inject\n+    public JexlEnablingConditionParser(EnablingConditionFormatter enablingConditionFormatter) {\n+        this.enablingConditionFormatter = enablingConditionFormatter;\n+        this.engine = new JexlBuilder().create();\n+        this.objectMapper = new ObjectMapper();\n+    }\n+\n+    @Override\n+    public Boolean evaluate(String enablingCondition, Map<String, JsonNode> caseEventData) {\n+        try {\n+            String expression = this.enablingConditionFormatter.format(enablingCondition);\n+            if (expression != null) {\n+                JexlScript expressionScript = engine.createScript(expression);\n+                Map<String, Object> data = retrieveContextData(caseEventData, expressionScript.getVariables());\n+                return (Boolean) expressionScript.execute(new MapContext(data));\n+            }\n+        } catch (Exception e) {\n+            LOG.error(e.getMessage(), e);\n+        }\n+        return false;\n+    }\n+\n+    private Map<String, Object> retrieveContextData(Map<String, JsonNode> caseEventData,\n+                                                    Set<List<String>> variableLists) {\n+        Set<String> variables = getVariableNames(variableLists);\n+        Map<String, Object> contextData = new HashMap<>();\n+        DocumentContext context = JsonPath.parse(caseDataToJsonString(caseEventData));\n+        for (String variable : variables) {\n+            Optional<Object> value = getValueFromContext(context, variable);\n+            if (value.isPresent()) {\n+                contextData.put(variable, value.get());\n+            }\n+        }\n+        return contextData;\n+    }\n+\n+    private Set<String> getVariableNames(Set<List<String>> variableLists) {\n+        return variableLists\n+            .stream()\n+            .map(list -> list\n+                .stream()\n+                .collect(Collectors.joining(\".\")))\n+            .collect(Collectors.toSet());\n+    }\n+\n+    private String caseDataToJsonString(Map<String, JsonNode> caseData) {\n+        try {\n+            return this.objectMapper.writeValueAsString(caseData);\n+        } catch (JsonProcessingException e) {\n+            throw new ServiceException(\"Unable to convert case data to JSON string\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8517bea5262948f518e3dc945fdb6d9b8f3d558f"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIzMDMzMw==", "bodyText": "added test for this", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500230333", "createdAt": "2020-10-06T12:21:27Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/jexl/JexlEnablingConditionParser.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package uk.gov.hmcts.ccd.domain.casestate.jexl;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.jayway.jsonpath.DocumentContext;\n+import com.jayway.jsonpath.JsonPath;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import org.apache.commons.jexl3.JexlBuilder;\n+import org.apache.commons.jexl3.JexlEngine;\n+import org.apache.commons.jexl3.JexlScript;\n+import org.apache.commons.jexl3.MapContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionFormatter;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionParser;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.ServiceException;\n+\n+@Component\n+@Qualifier(\"jexl\")\n+public class JexlEnablingConditionParser implements EnablingConditionParser {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(JexlEnablingConditionParser.class);\n+\n+    private final JexlEngine engine;\n+\n+    private final ObjectMapper objectMapper;\n+\n+    private EnablingConditionFormatter enablingConditionFormatter;\n+\n+    @Inject\n+    public JexlEnablingConditionParser(EnablingConditionFormatter enablingConditionFormatter) {\n+        this.enablingConditionFormatter = enablingConditionFormatter;\n+        this.engine = new JexlBuilder().create();\n+        this.objectMapper = new ObjectMapper();\n+    }\n+\n+    @Override\n+    public Boolean evaluate(String enablingCondition, Map<String, JsonNode> caseEventData) {\n+        try {\n+            String expression = this.enablingConditionFormatter.format(enablingCondition);\n+            if (expression != null) {\n+                JexlScript expressionScript = engine.createScript(expression);\n+                Map<String, Object> data = retrieveContextData(caseEventData, expressionScript.getVariables());\n+                return (Boolean) expressionScript.execute(new MapContext(data));\n+            }\n+        } catch (Exception e) {\n+            LOG.error(e.getMessage(), e);\n+        }\n+        return false;\n+    }\n+\n+    private Map<String, Object> retrieveContextData(Map<String, JsonNode> caseEventData,\n+                                                    Set<List<String>> variableLists) {\n+        Set<String> variables = getVariableNames(variableLists);\n+        Map<String, Object> contextData = new HashMap<>();\n+        DocumentContext context = JsonPath.parse(caseDataToJsonString(caseEventData));\n+        for (String variable : variables) {\n+            Optional<Object> value = getValueFromContext(context, variable);\n+            if (value.isPresent()) {\n+                contextData.put(variable, value.get());\n+            }\n+        }\n+        return contextData;\n+    }\n+\n+    private Set<String> getVariableNames(Set<List<String>> variableLists) {\n+        return variableLists\n+            .stream()\n+            .map(list -> list\n+                .stream()\n+                .collect(Collectors.joining(\".\")))\n+            .collect(Collectors.toSet());\n+    }\n+\n+    private String caseDataToJsonString(Map<String, JsonNode> caseData) {\n+        try {\n+            return this.objectMapper.writeValueAsString(caseData);\n+        } catch (JsonProcessingException e) {\n+            throw new ServiceException(\"Unable to convert case data to JSON string\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE3MzIwMw=="}, "originalCommit": {"oid": "8517bea5262948f518e3dc945fdb6d9b8f3d558f"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTc0ODAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/jexl/JexlEnablingConditionParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDozNjoyM1rOHdAKEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDozNjoyM1rOHdAKEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE3MzMyOQ==", "bodyText": "Could be final", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500173329", "createdAt": "2020-10-06T10:36:23Z", "author": {"login": "rafalkalita"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/jexl/JexlEnablingConditionParser.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package uk.gov.hmcts.ccd.domain.casestate.jexl;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.jayway.jsonpath.DocumentContext;\n+import com.jayway.jsonpath.JsonPath;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import org.apache.commons.jexl3.JexlBuilder;\n+import org.apache.commons.jexl3.JexlEngine;\n+import org.apache.commons.jexl3.JexlScript;\n+import org.apache.commons.jexl3.MapContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionFormatter;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionParser;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.ServiceException;\n+\n+@Component\n+@Qualifier(\"jexl\")\n+public class JexlEnablingConditionParser implements EnablingConditionParser {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(JexlEnablingConditionParser.class);\n+\n+    private final JexlEngine engine;\n+\n+    private final ObjectMapper objectMapper;\n+\n+    private EnablingConditionFormatter enablingConditionFormatter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8517bea5262948f518e3dc945fdb6d9b8f3d558f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTc4MDA4OnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/domain/casestate/jexl/JexlEnablingConditionParserTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDo0NjoyN1rOHdAdxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDo0NjoyN1rOHdAdxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE3ODM3Mg==", "bodyText": "Trailing ')' not relevant. No starting '(' present.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500178372", "createdAt": "2020-10-06T10:46:27Z", "author": {"login": "rafalkalita"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/casestate/jexl/JexlEnablingConditionParserTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package uk.gov.hmcts.ccd.domain.casestate.jexl;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+class JexlEnablingConditionParserTest {\n+\n+    private static final JsonNodeFactory JSON_NODE_FACTORY = new JsonNodeFactory(false);\n+\n+    private JexlEnablingConditionParser enablingConditionParser;\n+\n+    @BeforeEach\n+    void setUp() {\n+        this.enablingConditionParser = new JexlEnablingConditionParser(new JexlEnablingConditionFormatter());\n+    }\n+\n+    @Test\n+    void evaluateEnablingConditionWhenValidDataPresent() {\n+        String enablingCondition = \"FieldA!=\\\"\\\" AND FieldB=\\\"I'm innocent\\\")\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8517bea5262948f518e3dc945fdb6d9b8f3d558f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTc4MTAzOnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/domain/casestate/jexl/JexlEnablingConditionParserTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDo0Njo0NVrOHdAeZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDo0Njo0NVrOHdAeZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE3ODUzNQ==", "bodyText": "Trailing ')' not relevant. No starting '(' present. Same below.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500178535", "createdAt": "2020-10-06T10:46:45Z", "author": {"login": "rafalkalita"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/casestate/jexl/JexlEnablingConditionParserTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package uk.gov.hmcts.ccd.domain.casestate.jexl;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+class JexlEnablingConditionParserTest {\n+\n+    private static final JsonNodeFactory JSON_NODE_FACTORY = new JsonNodeFactory(false);\n+\n+    private JexlEnablingConditionParser enablingConditionParser;\n+\n+    @BeforeEach\n+    void setUp() {\n+        this.enablingConditionParser = new JexlEnablingConditionParser(new JexlEnablingConditionFormatter());\n+    }\n+\n+    @Test\n+    void evaluateEnablingConditionWhenValidDataPresent() {\n+        String enablingCondition = \"FieldA!=\\\"\\\" AND FieldB=\\\"I'm innocent\\\")\";\n+        Boolean isValid = this.enablingConditionParser.evaluate(enablingCondition, createCaseData(\n+            \"Test\",\n+            \"I'm innocent\"\n+        ));\n+\n+        assertNotNull(isValid);\n+        assertEquals(true, isValid);\n+    }\n+\n+    @Test\n+    void evaluateEnablingConditionWhenValidDataNotPresent() {\n+        String enablingCondition = \"FieldA!=\\\"\\\" AND FieldB=\\\"I'm innocent\\\")\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8517bea5262948f518e3dc945fdb6d9b8f3d558f"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTc4Njg4OnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/domain/casestate/jexl/JexlEnablingConditionParserTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDo0ODoyOFrOHdAiCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTo1ODo0OVrOHdC1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE3OTQ2Ng==", "bodyText": "Is there any use case for FieldA!=\"*\" ? Always resolves to false, for any string, empty string and null.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500179466", "createdAt": "2020-10-06T10:48:28Z", "author": {"login": "rafalkalita"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/casestate/jexl/JexlEnablingConditionParserTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package uk.gov.hmcts.ccd.domain.casestate.jexl;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+class JexlEnablingConditionParserTest {\n+\n+    private static final JsonNodeFactory JSON_NODE_FACTORY = new JsonNodeFactory(false);\n+\n+    private JexlEnablingConditionParser enablingConditionParser;\n+\n+    @BeforeEach\n+    void setUp() {\n+        this.enablingConditionParser = new JexlEnablingConditionParser(new JexlEnablingConditionFormatter());\n+    }\n+\n+    @Test\n+    void evaluateEnablingConditionWhenValidDataPresent() {\n+        String enablingCondition = \"FieldA!=\\\"\\\" AND FieldB=\\\"I'm innocent\\\")\";\n+        Boolean isValid = this.enablingConditionParser.evaluate(enablingCondition, createCaseData(\n+            \"Test\",\n+            \"I'm innocent\"\n+        ));\n+\n+        assertNotNull(isValid);\n+        assertEquals(true, isValid);\n+    }\n+\n+    @Test\n+    void evaluateEnablingConditionWhenValidDataNotPresent() {\n+        String enablingCondition = \"FieldA!=\\\"\\\" AND FieldB=\\\"I'm innocent\\\")\";\n+        Boolean isValid = this.enablingConditionParser.evaluate(enablingCondition, createCaseData(\n+            \"\",\n+            \"I'm innocent\"\n+        ));\n+\n+        assertNotNull(isValid);\n+        assertEquals(false, isValid);\n+    }\n+\n+    @Test\n+    void evaluateEnablingConditionWhenConditionContainsRegularExpression() {\n+        String enablingCondition = \"FieldA=\\\"*\\\" AND FieldB=\\\"I'm innocent\\\")\";\n+        Boolean isValid = this.enablingConditionParser.evaluate(enablingCondition, createCaseData(\n+            \"Test\",\n+            \"I'm innocent\"\n+        ));\n+\n+        assertNotNull(isValid);\n+        assertEquals(true, isValid);\n+    }\n+\n+    @Test\n+    void evaluateEnablingConditionWhenConditionContainsNotEqualityRegularExpression() {\n+        String enablingCondition = \"FieldA!=\\\"*\\\" AND FieldB=\\\"I'm innocent\\\")\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8517bea5262948f518e3dc945fdb6d9b8f3d558f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIxNzEzOA==", "bodyText": "done this to cover the opposite of FieldA=\"*\"", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500217138", "createdAt": "2020-10-06T11:58:49Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/casestate/jexl/JexlEnablingConditionParserTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package uk.gov.hmcts.ccd.domain.casestate.jexl;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+class JexlEnablingConditionParserTest {\n+\n+    private static final JsonNodeFactory JSON_NODE_FACTORY = new JsonNodeFactory(false);\n+\n+    private JexlEnablingConditionParser enablingConditionParser;\n+\n+    @BeforeEach\n+    void setUp() {\n+        this.enablingConditionParser = new JexlEnablingConditionParser(new JexlEnablingConditionFormatter());\n+    }\n+\n+    @Test\n+    void evaluateEnablingConditionWhenValidDataPresent() {\n+        String enablingCondition = \"FieldA!=\\\"\\\" AND FieldB=\\\"I'm innocent\\\")\";\n+        Boolean isValid = this.enablingConditionParser.evaluate(enablingCondition, createCaseData(\n+            \"Test\",\n+            \"I'm innocent\"\n+        ));\n+\n+        assertNotNull(isValid);\n+        assertEquals(true, isValid);\n+    }\n+\n+    @Test\n+    void evaluateEnablingConditionWhenValidDataNotPresent() {\n+        String enablingCondition = \"FieldA!=\\\"\\\" AND FieldB=\\\"I'm innocent\\\")\";\n+        Boolean isValid = this.enablingConditionParser.evaluate(enablingCondition, createCaseData(\n+            \"\",\n+            \"I'm innocent\"\n+        ));\n+\n+        assertNotNull(isValid);\n+        assertEquals(false, isValid);\n+    }\n+\n+    @Test\n+    void evaluateEnablingConditionWhenConditionContainsRegularExpression() {\n+        String enablingCondition = \"FieldA=\\\"*\\\" AND FieldB=\\\"I'm innocent\\\")\";\n+        Boolean isValid = this.enablingConditionParser.evaluate(enablingCondition, createCaseData(\n+            \"Test\",\n+            \"I'm innocent\"\n+        ));\n+\n+        assertNotNull(isValid);\n+        assertEquals(true, isValid);\n+    }\n+\n+    @Test\n+    void evaluateEnablingConditionWhenConditionContainsNotEqualityRegularExpression() {\n+        String enablingCondition = \"FieldA!=\\\"*\\\" AND FieldB=\\\"I'm innocent\\\")\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE3OTQ2Ng=="}, "originalCommit": {"oid": "8517bea5262948f518e3dc945fdb6d9b8f3d558f"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTc5NTIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/CaseStateUpdateService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDo1MDo1MFrOHdAnMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTo1OTozNlrOHdC3JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE4MDc4NA==", "bodyText": "This line not needed. List implements Iterable", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500180784", "createdAt": "2020-10-06T10:50:50Z", "author": {"login": "rafalkalita"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/CaseStateUpdateService.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package uk.gov.hmcts.ccd.domain.service.common;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import javax.inject.Inject;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionSorter;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventDefinition;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+@Service\n+public class CaseStateUpdateService {\n+\n+    private final EnablingConditionSorter enablingConditionSorter;\n+    private StateReferenceService stateReferenceService;\n+\n+    @Inject\n+    public CaseStateUpdateService(EnablingConditionSorter enablingConditionSorter,\n+                                  StateReferenceService stateReferenceService) {\n+        this.enablingConditionSorter = enablingConditionSorter;\n+        this.stateReferenceService = stateReferenceService;\n+    }\n+\n+    public Optional<String> retrieveCaseState(CaseEventDefinition caseEventDefinition, CaseDetails caseDetails) {\n+        List<EventPostStateDefinition> eventPostStateDefinitions = caseEventDefinition.getPostStates();\n+        this.enablingConditionSorter.sortEventPostStates(eventPostStateDefinitions);\n+        Map<String, JsonNode> caseEventData = caseEventData(caseEventDefinition, caseDetails.getData());\n+        Optional<String> postStateReference = this.stateReferenceService\n+            .evaluatePostStateCondition(eventPostStateDefinitions, caseEventData);\n+        return postStateReference;\n+    }\n+\n+    private Map<String, JsonNode> caseEventData(CaseEventDefinition caseEventDefinition,\n+                                                Map<String, JsonNode> caseData) {\n+        Map<String, JsonNode> caseEventData = new HashMap<>();\n+        if (caseData != null) {\n+            caseEventDefinition\n+                .getCaseFields()\n+                .stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8517bea5262948f518e3dc945fdb6d9b8f3d558f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIxNzYzNw==", "bodyText": "agree, removed", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500217637", "createdAt": "2020-10-06T11:59:36Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/CaseStateUpdateService.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package uk.gov.hmcts.ccd.domain.service.common;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import javax.inject.Inject;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionSorter;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventDefinition;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+@Service\n+public class CaseStateUpdateService {\n+\n+    private final EnablingConditionSorter enablingConditionSorter;\n+    private StateReferenceService stateReferenceService;\n+\n+    @Inject\n+    public CaseStateUpdateService(EnablingConditionSorter enablingConditionSorter,\n+                                  StateReferenceService stateReferenceService) {\n+        this.enablingConditionSorter = enablingConditionSorter;\n+        this.stateReferenceService = stateReferenceService;\n+    }\n+\n+    public Optional<String> retrieveCaseState(CaseEventDefinition caseEventDefinition, CaseDetails caseDetails) {\n+        List<EventPostStateDefinition> eventPostStateDefinitions = caseEventDefinition.getPostStates();\n+        this.enablingConditionSorter.sortEventPostStates(eventPostStateDefinitions);\n+        Map<String, JsonNode> caseEventData = caseEventData(caseEventDefinition, caseDetails.getData());\n+        Optional<String> postStateReference = this.stateReferenceService\n+            .evaluatePostStateCondition(eventPostStateDefinitions, caseEventData);\n+        return postStateReference;\n+    }\n+\n+    private Map<String, JsonNode> caseEventData(CaseEventDefinition caseEventDefinition,\n+                                                Map<String, JsonNode> caseData) {\n+        Map<String, JsonNode> caseEventData = new HashMap<>();\n+        if (caseData != null) {\n+            caseEventDefinition\n+                .getCaseFields()\n+                .stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE4MDc4NA=="}, "originalCommit": {"oid": "8517bea5262948f518e3dc945fdb6d9b8f3d558f"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTgwNDc4OnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/common/CaseStateUpdateServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDo1MzoyMFrOHdAs0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMjowMDozOFrOHdC5jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE4MjIyNA==", "bodyText": "Could be inlined in the setUp method", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500182224", "createdAt": "2020-10-06T10:53:20Z", "author": {"login": "rafalkalita"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/common/CaseStateUpdateServiceTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package uk.gov.hmcts.ccd.domain.service.common;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionSorter;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventDefinition;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyMap;\n+import static org.mockito.Mockito.doReturn;\n+\n+class CaseStateUpdateServiceTest extends BaseStateReferenceTest {\n+\n+    private EnablingConditionSorter enablingConditionSorter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8517bea5262948f518e3dc945fdb6d9b8f3d558f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIxODI1Mw==", "bodyText": "yes, changed it", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500218253", "createdAt": "2020-10-06T12:00:38Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/common/CaseStateUpdateServiceTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package uk.gov.hmcts.ccd.domain.service.common;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionSorter;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventDefinition;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyMap;\n+import static org.mockito.Mockito.doReturn;\n+\n+class CaseStateUpdateServiceTest extends BaseStateReferenceTest {\n+\n+    private EnablingConditionSorter enablingConditionSorter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE4MjIyNA=="}, "originalCommit": {"oid": "8517bea5262948f518e3dc945fdb6d9b8f3d558f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTgwODEwOnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/common/CaseStateUpdateServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDo1NDoxMlrOHdAu4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMjowMDo0N1rOHdC52A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE4Mjc1NA==", "bodyText": "'this' not needed line 35, 37 and 38", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500182754", "createdAt": "2020-10-06T10:54:12Z", "author": {"login": "rafalkalita"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/common/CaseStateUpdateServiceTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package uk.gov.hmcts.ccd.domain.service.common;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionSorter;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventDefinition;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyMap;\n+import static org.mockito.Mockito.doReturn;\n+\n+class CaseStateUpdateServiceTest extends BaseStateReferenceTest {\n+\n+    private EnablingConditionSorter enablingConditionSorter;\n+\n+    @Mock\n+    private StateReferenceService stateReferenceService;\n+\n+    private CaseStateUpdateService caseStateUpdateService;\n+\n+    @BeforeEach\n+    void setUp() {\n+        MockitoAnnotations.initMocks(this);\n+        this.enablingConditionSorter = new EnablingConditionSorter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8517bea5262948f518e3dc945fdb6d9b8f3d558f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIxODMyOA==", "bodyText": "removed 'this' word", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500218328", "createdAt": "2020-10-06T12:00:47Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/common/CaseStateUpdateServiceTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package uk.gov.hmcts.ccd.domain.service.common;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionSorter;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventDefinition;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyMap;\n+import static org.mockito.Mockito.doReturn;\n+\n+class CaseStateUpdateServiceTest extends BaseStateReferenceTest {\n+\n+    private EnablingConditionSorter enablingConditionSorter;\n+\n+    @Mock\n+    private StateReferenceService stateReferenceService;\n+\n+    private CaseStateUpdateService caseStateUpdateService;\n+\n+    @BeforeEach\n+    void setUp() {\n+        MockitoAnnotations.initMocks(this);\n+        this.enablingConditionSorter = new EnablingConditionSorter();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE4Mjc1NA=="}, "originalCommit": {"oid": "8517bea5262948f518e3dc945fdb6d9b8f3d558f"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTg4NjM1OnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/endpoint/std/CaseDetailsEndpointPostStateIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMToxNzoyMVrOHdBerQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMjowMTo1OFrOHdC8Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE5NDk4OQ==", "bodyText": "No need to store the result. mvcResult not used later in the code.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500194989", "createdAt": "2020-10-06T11:17:21Z", "author": {"login": "rafalkalita"}, "path": "src/test/java/uk/gov/hmcts/ccd/endpoint/std/CaseDetailsEndpointPostStateIT.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package uk.gov.hmcts.ccd.endpoint.std;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.List;\n+import javax.inject.Inject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.test.context.jdbc.Sql;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+import org.springframework.web.context.WebApplicationContext;\n+import uk.gov.hmcts.ccd.MockUtils;\n+import uk.gov.hmcts.ccd.WireMockBaseTest;\n+import uk.gov.hmcts.ccd.config.JacksonUtils;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.std.CaseDataContent;\n+import uk.gov.hmcts.ccd.domain.model.std.Event;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static uk.gov.hmcts.ccd.domain.model.std.EventBuilder.anEvent;\n+import static uk.gov.hmcts.ccd.domain.service.common.TestBuildersUtil.CaseDataContentBuilder.newCaseDataContent;\n+\n+public class CaseDetailsEndpointPostStateIT extends WireMockBaseTest {\n+    private static final String JURISDICTION = \"PROBATE\";\n+    private static final String TEST_EVENT_ID = \"TEST_EVENT\";\n+    private static final String NO_PRE_STATES_EVENT = \"NO_PRE_STATES_EVENT\";\n+    private static final String HAS_PRE_STATES_EVENT = \"HAS_PRE_STATES_EVENT\";\n+    private static final String UID = \"123\";\n+    private static final String CASE_TYPE_POST_STATE = \"TestAddressBookPostState\";\n+\n+    @Inject\n+    private WebApplicationContext wac;\n+    private MockMvc mockMvc;\n+    private JdbcTemplate template;\n+\n+    @Before\n+    public void setUp() {\n+        MockUtils.setSecurityAuthorities(authentication, MockUtils.ROLE_CASEWORKER_PUBLIC);\n+        mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();\n+        template = new JdbcTemplate(db);\n+    }\n+\n+    @Test\n+    @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n+        scripts = {\"classpath:sql/insert_cases.sql\"})\n+    public void shouldChangeCaseStateWhenPostStateConditionMatches() throws Exception {\n+        final JsonNode data = createData();\n+        performRequestAndValidate(data, TEST_EVENT_ID, \"state4\");\n+    }\n+\n+    @Test\n+    @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n+        scripts = {\"classpath:sql/insert_cases.sql\"})\n+    public void shouldChangeCaseStateBasedOnPriorityWhenPostStateConditionMatches() throws Exception {\n+        final JsonNode data = createData();\n+        performRequestAndValidate(data, NO_PRE_STATES_EVENT, \"CaseEnteredIntoLegacy\");\n+    }\n+\n+    @Test\n+    @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n+        scripts = {\"classpath:sql/insert_cases.sql\"})\n+    public void shouldChangeToDefaultWhenPostStateConditionNotMatches() throws Exception {\n+        final JsonNode data = mapper.readTree(\"{\"\n+            + \"\\\"PersonLastName\\\":\\\"Test Last1\\\",\"\n+            + \"\\\"PersonFirstName\\\":\\\"Test First\\\"}\");\n+        performRequestAndValidate(data, NO_PRE_STATES_EVENT, \"state4\");\n+    }\n+\n+    @Test\n+    @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n+        scripts = {\"classpath:sql/insert_cases.sql\"})\n+    public void shouldStayInThePreviousStateWhenWildcardUsedInPostConditionState() throws Exception {\n+        final JsonNode data = createData();\n+        performRequestAndValidate(data, HAS_PRE_STATES_EVENT, \"CaseCreated\");\n+    }\n+\n+    @Test\n+    @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n+        scripts = {\"classpath:sql/insert_cases.sql\"})\n+    public void shouldIgnorePostStateConditionWhenFieldNotAssignedToEvent() throws Exception {\n+        final JsonNode data = createData();\n+        performRequestAndValidate(data, \"Goodness\", \"CaseEnteredIntoLegacy\");\n+    }\n+\n+    private JsonNode createData() throws com.fasterxml.jackson.core.JsonProcessingException {\n+        return mapper.readTree(\"{\"\n+            + \"\\\"PersonLastName\\\":\\\"Test Last\\\",\"\n+            + \"\\\"PersonFirstName\\\":\\\"Test First\\\"}\");\n+    }\n+\n+    private void performRequestAndValidate(JsonNode data, String eventId, String expectedCaseState) throws Exception {\n+        final String caseReference = \"1601933818308168\";\n+        final String URL = \"/citizens/\" + UID + \"/jurisdictions/\" + JURISDICTION + \"/case-types/\"\n+            + CASE_TYPE_POST_STATE + \"/cases/\" + caseReference + \"/events\";\n+\n+        final CaseDataContent caseDetailsToSave = newCaseDataContent().build();\n+        final Event triggeringEvent = anEvent().build();\n+        triggeringEvent.setEventId(eventId);\n+        caseDetailsToSave.setEvent(triggeringEvent);\n+        final String token = generateEventTokenNewCase(UID, JURISDICTION, CASE_TYPE_POST_STATE, eventId);\n+        caseDetailsToSave.setToken(token);\n+        caseDetailsToSave.setData(JacksonUtils.convertValue(data));\n+\n+        final MvcResult mvcResult = mockMvc.perform(post(URL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8517bea5262948f518e3dc945fdb6d9b8f3d558f"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIxODk4Mg==", "bodyText": "removed..", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500218982", "createdAt": "2020-10-06T12:01:58Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/test/java/uk/gov/hmcts/ccd/endpoint/std/CaseDetailsEndpointPostStateIT.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package uk.gov.hmcts.ccd.endpoint.std;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.List;\n+import javax.inject.Inject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.test.context.jdbc.Sql;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+import org.springframework.web.context.WebApplicationContext;\n+import uk.gov.hmcts.ccd.MockUtils;\n+import uk.gov.hmcts.ccd.WireMockBaseTest;\n+import uk.gov.hmcts.ccd.config.JacksonUtils;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.std.CaseDataContent;\n+import uk.gov.hmcts.ccd.domain.model.std.Event;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static uk.gov.hmcts.ccd.domain.model.std.EventBuilder.anEvent;\n+import static uk.gov.hmcts.ccd.domain.service.common.TestBuildersUtil.CaseDataContentBuilder.newCaseDataContent;\n+\n+public class CaseDetailsEndpointPostStateIT extends WireMockBaseTest {\n+    private static final String JURISDICTION = \"PROBATE\";\n+    private static final String TEST_EVENT_ID = \"TEST_EVENT\";\n+    private static final String NO_PRE_STATES_EVENT = \"NO_PRE_STATES_EVENT\";\n+    private static final String HAS_PRE_STATES_EVENT = \"HAS_PRE_STATES_EVENT\";\n+    private static final String UID = \"123\";\n+    private static final String CASE_TYPE_POST_STATE = \"TestAddressBookPostState\";\n+\n+    @Inject\n+    private WebApplicationContext wac;\n+    private MockMvc mockMvc;\n+    private JdbcTemplate template;\n+\n+    @Before\n+    public void setUp() {\n+        MockUtils.setSecurityAuthorities(authentication, MockUtils.ROLE_CASEWORKER_PUBLIC);\n+        mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();\n+        template = new JdbcTemplate(db);\n+    }\n+\n+    @Test\n+    @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n+        scripts = {\"classpath:sql/insert_cases.sql\"})\n+    public void shouldChangeCaseStateWhenPostStateConditionMatches() throws Exception {\n+        final JsonNode data = createData();\n+        performRequestAndValidate(data, TEST_EVENT_ID, \"state4\");\n+    }\n+\n+    @Test\n+    @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n+        scripts = {\"classpath:sql/insert_cases.sql\"})\n+    public void shouldChangeCaseStateBasedOnPriorityWhenPostStateConditionMatches() throws Exception {\n+        final JsonNode data = createData();\n+        performRequestAndValidate(data, NO_PRE_STATES_EVENT, \"CaseEnteredIntoLegacy\");\n+    }\n+\n+    @Test\n+    @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n+        scripts = {\"classpath:sql/insert_cases.sql\"})\n+    public void shouldChangeToDefaultWhenPostStateConditionNotMatches() throws Exception {\n+        final JsonNode data = mapper.readTree(\"{\"\n+            + \"\\\"PersonLastName\\\":\\\"Test Last1\\\",\"\n+            + \"\\\"PersonFirstName\\\":\\\"Test First\\\"}\");\n+        performRequestAndValidate(data, NO_PRE_STATES_EVENT, \"state4\");\n+    }\n+\n+    @Test\n+    @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n+        scripts = {\"classpath:sql/insert_cases.sql\"})\n+    public void shouldStayInThePreviousStateWhenWildcardUsedInPostConditionState() throws Exception {\n+        final JsonNode data = createData();\n+        performRequestAndValidate(data, HAS_PRE_STATES_EVENT, \"CaseCreated\");\n+    }\n+\n+    @Test\n+    @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n+        scripts = {\"classpath:sql/insert_cases.sql\"})\n+    public void shouldIgnorePostStateConditionWhenFieldNotAssignedToEvent() throws Exception {\n+        final JsonNode data = createData();\n+        performRequestAndValidate(data, \"Goodness\", \"CaseEnteredIntoLegacy\");\n+    }\n+\n+    private JsonNode createData() throws com.fasterxml.jackson.core.JsonProcessingException {\n+        return mapper.readTree(\"{\"\n+            + \"\\\"PersonLastName\\\":\\\"Test Last\\\",\"\n+            + \"\\\"PersonFirstName\\\":\\\"Test First\\\"}\");\n+    }\n+\n+    private void performRequestAndValidate(JsonNode data, String eventId, String expectedCaseState) throws Exception {\n+        final String caseReference = \"1601933818308168\";\n+        final String URL = \"/citizens/\" + UID + \"/jurisdictions/\" + JURISDICTION + \"/case-types/\"\n+            + CASE_TYPE_POST_STATE + \"/cases/\" + caseReference + \"/events\";\n+\n+        final CaseDataContent caseDetailsToSave = newCaseDataContent().build();\n+        final Event triggeringEvent = anEvent().build();\n+        triggeringEvent.setEventId(eventId);\n+        caseDetailsToSave.setEvent(triggeringEvent);\n+        final String token = generateEventTokenNewCase(UID, JURISDICTION, CASE_TYPE_POST_STATE, eventId);\n+        caseDetailsToSave.setToken(token);\n+        caseDetailsToSave.setData(JacksonUtils.convertValue(data));\n+\n+        final MvcResult mvcResult = mockMvc.perform(post(URL)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE5NDk4OQ=="}, "originalCommit": {"oid": "8517bea5262948f518e3dc945fdb6d9b8f3d558f"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjQ3MDY5OnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/domain/casestate/jexl/JexlEnablingConditionParserTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzo0MDozN1rOHdHElA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzo0MzoxM1rOHdHOVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI4NjYxMg==", "bodyText": "Maybe we could we change it to FieldC=\"\" ? The opposite always resolves to false and how do we know test targets FieldC or !=\"\"", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500286612", "createdAt": "2020-10-06T13:40:37Z", "author": {"login": "rafalkalita"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/casestate/jexl/JexlEnablingConditionParserTest.java", "diffHunk": "@@ -71,7 +76,35 @@ void evaluateEnablingConditionWhenConditionContainsNotEqualityRegularExpression(\n \n     @Test\n     void evaluateEnablingConditionWhenConditionIsNull() {\n-        Boolean isValid = this.enablingConditionParser.evaluate(null, createCaseData(\n+        Boolean isValid = enablingConditionParser.evaluate(null, createCaseData(\n+            \"Test\",\n+            \"I'm innocent\"\n+        ));\n+\n+        assertNotNull(isValid);\n+        assertEquals(false, isValid);\n+    }\n+\n+    @Test\n+    void shouldReturnFalseWhenConditionHasUnKnownField() {\n+        String enablingCondition = \"FieldC!=\\\"*\\\" AND FieldB=\\\"I'm innocent\\\")\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e230618cab98321bb1a9a43a769a418ed513771"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI4OTExMA==", "bodyText": "addressed", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500289110", "createdAt": "2020-10-06T13:43:13Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/casestate/jexl/JexlEnablingConditionParserTest.java", "diffHunk": "@@ -71,7 +76,35 @@ void evaluateEnablingConditionWhenConditionContainsNotEqualityRegularExpression(\n \n     @Test\n     void evaluateEnablingConditionWhenConditionIsNull() {\n-        Boolean isValid = this.enablingConditionParser.evaluate(null, createCaseData(\n+        Boolean isValid = enablingConditionParser.evaluate(null, createCaseData(\n+            \"Test\",\n+            \"I'm innocent\"\n+        ));\n+\n+        assertNotNull(isValid);\n+        assertEquals(false, isValid);\n+    }\n+\n+    @Test\n+    void shouldReturnFalseWhenConditionHasUnKnownField() {\n+        String enablingCondition = \"FieldC!=\\\"*\\\" AND FieldB=\\\"I'm innocent\\\")\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI4NjYxMg=="}, "originalCommit": {"oid": "7e230618cab98321bb1a9a43a769a418ed513771"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjc4NDAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/CaseStateUpdateService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDozMTozNVrOHdKGQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDo0NjoyOVrOHdK-iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzNjE5NQ==", "bodyText": "I think we could replace this method with a new method in CaseDetails that returns the data for a list of provided field ids", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500336195", "createdAt": "2020-10-06T14:31:35Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/CaseStateUpdateService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package uk.gov.hmcts.ccd.domain.service.common;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import javax.inject.Inject;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionSorter;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventDefinition;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+@Service\n+public class CaseStateUpdateService {\n+\n+    private final EnablingConditionSorter enablingConditionSorter;\n+    private StateReferenceService stateReferenceService;\n+\n+    @Inject\n+    public CaseStateUpdateService(EnablingConditionSorter enablingConditionSorter,\n+                                  StateReferenceService stateReferenceService) {\n+        this.enablingConditionSorter = enablingConditionSorter;\n+        this.stateReferenceService = stateReferenceService;\n+    }\n+\n+    public Optional<String> retrieveCaseState(CaseEventDefinition caseEventDefinition, CaseDetails caseDetails) {\n+        List<EventPostStateDefinition> eventPostStateDefinitions = caseEventDefinition.getPostStates();\n+        this.enablingConditionSorter.sortEventPostStates(eventPostStateDefinitions);\n+        Map<String, JsonNode> caseEventData = caseEventData(caseEventDefinition, caseDetails.getData());\n+        Optional<String> postStateReference = this.stateReferenceService\n+            .evaluatePostStateCondition(eventPostStateDefinitions, caseEventData);\n+        return postStateReference;\n+    }\n+\n+    private Map<String, JsonNode> caseEventData(CaseEventDefinition caseEventDefinition,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1834e5438ba7e66c5e351f9d2e9ca5391a36bf1d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM1MDYwMw==", "bodyText": "moved to CaseDetails", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500350603", "createdAt": "2020-10-06T14:46:29Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/CaseStateUpdateService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package uk.gov.hmcts.ccd.domain.service.common;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import javax.inject.Inject;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionSorter;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventDefinition;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+@Service\n+public class CaseStateUpdateService {\n+\n+    private final EnablingConditionSorter enablingConditionSorter;\n+    private StateReferenceService stateReferenceService;\n+\n+    @Inject\n+    public CaseStateUpdateService(EnablingConditionSorter enablingConditionSorter,\n+                                  StateReferenceService stateReferenceService) {\n+        this.enablingConditionSorter = enablingConditionSorter;\n+        this.stateReferenceService = stateReferenceService;\n+    }\n+\n+    public Optional<String> retrieveCaseState(CaseEventDefinition caseEventDefinition, CaseDetails caseDetails) {\n+        List<EventPostStateDefinition> eventPostStateDefinitions = caseEventDefinition.getPostStates();\n+        this.enablingConditionSorter.sortEventPostStates(eventPostStateDefinitions);\n+        Map<String, JsonNode> caseEventData = caseEventData(caseEventDefinition, caseDetails.getData());\n+        Optional<String> postStateReference = this.stateReferenceService\n+            .evaluatePostStateCondition(eventPostStateDefinitions, caseEventData);\n+        return postStateReference;\n+    }\n+\n+    private Map<String, JsonNode> caseEventData(CaseEventDefinition caseEventDefinition,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzNjE5NQ=="}, "originalCommit": {"oid": "1834e5438ba7e66c5e351f9d2e9ca5391a36bf1d"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjc4NjIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/CaseStateUpdateService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDozMjowMFrOHdKHoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDo0MToyMlrOHdKrPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzNjU0NQ==", "bodyText": "why we need to wrap in an Optional here? I'd just go for a simpler null check", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500336545", "createdAt": "2020-10-06T14:32:00Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/CaseStateUpdateService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package uk.gov.hmcts.ccd.domain.service.common;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import javax.inject.Inject;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionSorter;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventDefinition;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+@Service\n+public class CaseStateUpdateService {\n+\n+    private final EnablingConditionSorter enablingConditionSorter;\n+    private StateReferenceService stateReferenceService;\n+\n+    @Inject\n+    public CaseStateUpdateService(EnablingConditionSorter enablingConditionSorter,\n+                                  StateReferenceService stateReferenceService) {\n+        this.enablingConditionSorter = enablingConditionSorter;\n+        this.stateReferenceService = stateReferenceService;\n+    }\n+\n+    public Optional<String> retrieveCaseState(CaseEventDefinition caseEventDefinition, CaseDetails caseDetails) {\n+        List<EventPostStateDefinition> eventPostStateDefinitions = caseEventDefinition.getPostStates();\n+        this.enablingConditionSorter.sortEventPostStates(eventPostStateDefinitions);\n+        Map<String, JsonNode> caseEventData = caseEventData(caseEventDefinition, caseDetails.getData());\n+        Optional<String> postStateReference = this.stateReferenceService\n+            .evaluatePostStateCondition(eventPostStateDefinitions, caseEventData);\n+        return postStateReference;\n+    }\n+\n+    private Map<String, JsonNode> caseEventData(CaseEventDefinition caseEventDefinition,\n+                                                Map<String, JsonNode> caseData) {\n+        Map<String, JsonNode> caseEventData = new HashMap<>();\n+        if (caseData != null) {\n+            caseEventDefinition\n+                .getCaseFields()\n+                .forEach(caseEventFieldDefinition -> {\n+                    String key = caseEventFieldDefinition.getCaseFieldId();\n+                    Optional<JsonNode> value = Optional.ofNullable(caseData.get(key));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1834e5438ba7e66c5e351f9d2e9ca5391a36bf1d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM0NTY2MA==", "bodyText": "removed Optional", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500345660", "createdAt": "2020-10-06T14:41:22Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/CaseStateUpdateService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package uk.gov.hmcts.ccd.domain.service.common;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import javax.inject.Inject;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionSorter;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventDefinition;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+@Service\n+public class CaseStateUpdateService {\n+\n+    private final EnablingConditionSorter enablingConditionSorter;\n+    private StateReferenceService stateReferenceService;\n+\n+    @Inject\n+    public CaseStateUpdateService(EnablingConditionSorter enablingConditionSorter,\n+                                  StateReferenceService stateReferenceService) {\n+        this.enablingConditionSorter = enablingConditionSorter;\n+        this.stateReferenceService = stateReferenceService;\n+    }\n+\n+    public Optional<String> retrieveCaseState(CaseEventDefinition caseEventDefinition, CaseDetails caseDetails) {\n+        List<EventPostStateDefinition> eventPostStateDefinitions = caseEventDefinition.getPostStates();\n+        this.enablingConditionSorter.sortEventPostStates(eventPostStateDefinitions);\n+        Map<String, JsonNode> caseEventData = caseEventData(caseEventDefinition, caseDetails.getData());\n+        Optional<String> postStateReference = this.stateReferenceService\n+            .evaluatePostStateCondition(eventPostStateDefinitions, caseEventData);\n+        return postStateReference;\n+    }\n+\n+    private Map<String, JsonNode> caseEventData(CaseEventDefinition caseEventDefinition,\n+                                                Map<String, JsonNode> caseData) {\n+        Map<String, JsonNode> caseEventData = new HashMap<>();\n+        if (caseData != null) {\n+            caseEventDefinition\n+                .getCaseFields()\n+                .forEach(caseEventFieldDefinition -> {\n+                    String key = caseEventFieldDefinition.getCaseFieldId();\n+                    Optional<JsonNode> value = Optional.ofNullable(caseData.get(key));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzNjU0NQ=="}, "originalCommit": {"oid": "1834e5438ba7e66c5e351f9d2e9ca5391a36bf1d"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjc4Nzc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/jexl/JexlEnablingConditionParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDozMjoxOFrOHdKImQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDo0MTowNlrOHdKqHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzNjc5Mw==", "bodyText": "let's make sure we thoroughly unit test this class", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500336793", "createdAt": "2020-10-06T14:32:18Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/jexl/JexlEnablingConditionParser.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package uk.gov.hmcts.ccd.domain.casestate.jexl;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.jayway.jsonpath.DocumentContext;\n+import com.jayway.jsonpath.JsonPath;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import org.apache.commons.jexl3.JexlBuilder;\n+import org.apache.commons.jexl3.JexlEngine;\n+import org.apache.commons.jexl3.JexlScript;\n+import org.apache.commons.jexl3.MapContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionFormatter;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionParser;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.ServiceException;\n+\n+@Component\n+@Qualifier(\"jexl\")\n+public class JexlEnablingConditionParser implements EnablingConditionParser {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1834e5438ba7e66c5e351f9d2e9ca5391a36bf1d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM0NTM3Mg==", "bodyText": "we have unit tests to cover this class", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500345372", "createdAt": "2020-10-06T14:41:06Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/jexl/JexlEnablingConditionParser.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package uk.gov.hmcts.ccd.domain.casestate.jexl;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.jayway.jsonpath.DocumentContext;\n+import com.jayway.jsonpath.JsonPath;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import org.apache.commons.jexl3.JexlBuilder;\n+import org.apache.commons.jexl3.JexlEngine;\n+import org.apache.commons.jexl3.JexlScript;\n+import org.apache.commons.jexl3.MapContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionFormatter;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionParser;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.ServiceException;\n+\n+@Component\n+@Qualifier(\"jexl\")\n+public class JexlEnablingConditionParser implements EnablingConditionParser {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzNjc5Mw=="}, "originalCommit": {"oid": "1834e5438ba7e66c5e351f9d2e9ca5391a36bf1d"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjc5MTE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/jexl/JexlEnablingConditionFormatter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDozMjo1MlrOHdKKqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDo0MToxMlrOHdKqfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzNzMyMw==", "bodyText": "let's make sure we thoroughly unit test this class", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500337323", "createdAt": "2020-10-06T14:32:52Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/jexl/JexlEnablingConditionFormatter.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package uk.gov.hmcts.ccd.domain.casestate.jexl;\n+\n+import java.util.LinkedList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1834e5438ba7e66c5e351f9d2e9ca5391a36bf1d"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM0NTQ3MQ==", "bodyText": "we have unit tests to cover this class", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r500345471", "createdAt": "2020-10-06T14:41:12Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/jexl/JexlEnablingConditionFormatter.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package uk.gov.hmcts.ccd.domain.casestate.jexl;\n+\n+import java.util.LinkedList;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzNzMyMw=="}, "originalCommit": {"oid": "1834e5438ba7e66c5e351f9d2e9ca5391a36bf1d"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzE4NTgxOnYy", "diffSide": "RIGHT", "path": "src/aat/resources/features/F-051/S-109.td.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMzo0MjowNVrOHdz88g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDo1NjoyN1rOHd3kaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAyMTkzOA==", "bodyText": "the endpoint /caseworkers/{uid}/profile is used by the UI. Will this change break the UI? Or more in general, do we have verified this feature does not break the UI? (I'm sure we have just to double check)", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r501021938", "createdAt": "2020-10-07T13:42:05Z", "author": {"login": "mario-paniccia"}, "path": "src/aat/resources/features/F-051/S-109.td.json", "diffHunk": "@@ -79,7 +79,7 @@\n \t\t\t\t\t\t\t\t\t\"pre_states\": [\n \t\t\t\t\t\t\t\t\t\t\"*\"\n \t\t\t\t\t\t\t\t\t],\n-\t\t\t\t\t\t\t\t\t\"post_state\": null,\n+\t\t\t\t\t\t\t\t\t\"post_states\": [],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1547cdaaae80f6c3cd6e5982baa720f59a4312bb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA4MTE5Mw==", "bodyText": "I have tested this.. nothing is broken.. I will keep an eye on this", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r501081193", "createdAt": "2020-10-07T14:56:27Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/aat/resources/features/F-051/S-109.td.json", "diffHunk": "@@ -79,7 +79,7 @@\n \t\t\t\t\t\t\t\t\t\"pre_states\": [\n \t\t\t\t\t\t\t\t\t\t\"*\"\n \t\t\t\t\t\t\t\t\t],\n-\t\t\t\t\t\t\t\t\t\"post_state\": null,\n+\t\t\t\t\t\t\t\t\t\"post_states\": [],", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAyMTkzOA=="}, "originalCommit": {"oid": "1547cdaaae80f6c3cd6e5982baa720f59a4312bb"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzIzOTY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/EnablingConditionParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMzo1Mjo1N1rOHd0evQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDo1NTozM1rOHd3hnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAzMDU4OQ==", "bodyText": "shouldn't we pass the whole case data here? In theory an enabling condition can refer to fields on the whole case right?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r501030589", "createdAt": "2020-10-07T13:52:57Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/EnablingConditionParser.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package uk.gov.hmcts.ccd.domain.casestate;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.Map;\n+\n+public interface EnablingConditionParser {\n+    Boolean evaluate(String enablingCondition, Map<String, JsonNode> caseEventData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1547cdaaae80f6c3cd6e5982baa720f59a4312bb"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA4MDQ3OQ==", "bodyText": "Enabling condition is on the case event data only, not on the whole case data for now...", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r501080479", "createdAt": "2020-10-07T14:55:33Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/EnablingConditionParser.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package uk.gov.hmcts.ccd.domain.casestate;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.Map;\n+\n+public interface EnablingConditionParser {\n+    Boolean evaluate(String enablingCondition, Map<String, JsonNode> caseEventData);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAzMDU4OQ=="}, "originalCommit": {"oid": "1547cdaaae80f6c3cd6e5982baa720f59a4312bb"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzI5NDQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/EnablingConditionFormatter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDowMzo1MFrOHd1Aew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDo1NDo0M1rOHd3evA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAzOTIyNw==", "bodyText": "if these new classes are meant to be generic, i.e. for working with enabling conditions on state, or in the future on events (we have a ticket for this feature proposal already) then better moving them outside the casestate package?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r501039227", "createdAt": "2020-10-07T14:03:50Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/EnablingConditionFormatter.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package uk.gov.hmcts.ccd.domain.casestate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1547cdaaae80f6c3cd6e5982baa720f59a4312bb"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA3OTc0MA==", "bodyText": "this is new package anyway... we can rename the package if needed", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r501079740", "createdAt": "2020-10-07T14:54:43Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/EnablingConditionFormatter.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package uk.gov.hmcts.ccd.domain.casestate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAzOTIyNw=="}, "originalCommit": {"oid": "1547cdaaae80f6c3cd6e5982baa720f59a4312bb"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzMwNjI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/EnablingConditionSorter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDowNjoxM1rOHd1H4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTozNTowMVrOHd5YCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA0MTEyMg==", "bodyText": "for my knowledge do we have validation rules on the definition import mandating the priority to be mandatory for a condition? or it can be not specified?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r501041122", "createdAt": "2020-10-07T14:06:13Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/EnablingConditionSorter.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package uk.gov.hmcts.ccd.domain.casestate;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+@Component\n+public class EnablingConditionSorter {\n+\n+    public void sortEventPostStates(List<EventPostStateDefinition> eventPostStates) {\n+        if (eventPostStates != null) {\n+            eventPostStates.sort(new PostStateComparator());\n+        }\n+    }\n+\n+    private class PostStateComparator implements Comparator<EventPostStateDefinition> {\n+\n+        @Override\n+        public int compare(EventPostStateDefinition first, EventPostStateDefinition second) {\n+            if (first.getPriority() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1547cdaaae80f6c3cd6e5982baa720f59a4312bb"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTExMDc5NA==", "bodyText": "Yes, Priority is going to be mandator.. I have removed these checks now", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r501110794", "createdAt": "2020-10-07T15:35:01Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/EnablingConditionSorter.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package uk.gov.hmcts.ccd.domain.casestate;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+@Component\n+public class EnablingConditionSorter {\n+\n+    public void sortEventPostStates(List<EventPostStateDefinition> eventPostStates) {\n+        if (eventPostStates != null) {\n+            eventPostStates.sort(new PostStateComparator());\n+        }\n+    }\n+\n+    private class PostStateComparator implements Comparator<EventPostStateDefinition> {\n+\n+        @Override\n+        public int compare(EventPostStateDefinition first, EventPostStateDefinition second) {\n+            if (first.getPriority() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA0MTEyMg=="}, "originalCommit": {"oid": "1547cdaaae80f6c3cd6e5982baa720f59a4312bb"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzMxNDI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/EnablingConditionSorter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDowNzo1OFrOHd1NFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTozNjoyMFrOHd5b4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA0MjQ1Mg==", "bodyText": "do we really need to add this null check here? is there any real chance eventPostStates can be null?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r501042452", "createdAt": "2020-10-07T14:07:58Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/EnablingConditionSorter.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package uk.gov.hmcts.ccd.domain.casestate;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+@Component\n+public class EnablingConditionSorter {\n+\n+    public void sortEventPostStates(List<EventPostStateDefinition> eventPostStates) {\n+        if (eventPostStates != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1547cdaaae80f6c3cd6e5982baa720f59a4312bb"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTExMTc3OA==", "bodyText": "Each event will have atleast one post state... I have removed this null check", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r501111778", "createdAt": "2020-10-07T15:36:20Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/EnablingConditionSorter.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package uk.gov.hmcts.ccd.domain.casestate;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+@Component\n+public class EnablingConditionSorter {\n+\n+    public void sortEventPostStates(List<EventPostStateDefinition> eventPostStates) {\n+        if (eventPostStates != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA0MjQ1Mg=="}, "originalCommit": {"oid": "1547cdaaae80f6c3cd6e5982baa720f59a4312bb"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzQwMDA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/CaseDetails.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDoyNToxOFrOHd2ClA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTozNjozN1rOHd5crw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA1NjE0OA==", "bodyText": "if you notice the previous version of CaseDetails it knows nothing about event, event definition, event field definitions, it is not tied to event classes like CaseEventDefinition. I think it would be better that way and make this method more generic, reusable and easily testable in isolation, e.g.\npublic Map<String, JsonNode> getFields(String... ids) {}\nThis way we can use to get field values even when the fields do not come from an event...", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r501056148", "createdAt": "2020-10-07T14:25:18Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/CaseDetails.java", "diffHunk": "@@ -356,4 +355,21 @@ public boolean hasCaseReference() {\n         return getReference() != null;\n     }\n \n+    @JsonIgnore\n+    public Map<String, JsonNode> getCaseEventData(CaseEventDefinition caseEventDefinition) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1547cdaaae80f6c3cd6e5982baa720f59a4312bb"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA3ODEyNw==", "bodyText": "Makes sense.. Will change this", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r501078127", "createdAt": "2020-10-07T14:52:46Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/CaseDetails.java", "diffHunk": "@@ -356,4 +355,21 @@ public boolean hasCaseReference() {\n         return getReference() != null;\n     }\n \n+    @JsonIgnore\n+    public Map<String, JsonNode> getCaseEventData(CaseEventDefinition caseEventDefinition) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA1NjE0OA=="}, "originalCommit": {"oid": "1547cdaaae80f6c3cd6e5982baa720f59a4312bb"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTExMTk4Mw==", "bodyText": "changed this to string array", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r501111983", "createdAt": "2020-10-07T15:36:37Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/CaseDetails.java", "diffHunk": "@@ -356,4 +355,21 @@ public boolean hasCaseReference() {\n         return getReference() != null;\n     }\n \n+    @JsonIgnore\n+    public Map<String, JsonNode> getCaseEventData(CaseEventDefinition caseEventDefinition) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA1NjE0OA=="}, "originalCommit": {"oid": "1547cdaaae80f6c3cd6e5982baa720f59a4312bb"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzYwODQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/EnablingConditionSorter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTowNzozM1rOHd4GHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTo0MToyMVrOHd5qLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA4OTgyMQ==", "bodyText": "EnablingConditionPrioritiser?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r501089821", "createdAt": "2020-10-07T15:07:33Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/EnablingConditionSorter.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package uk.gov.hmcts.ccd.domain.casestate;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+@Component\n+public class EnablingConditionSorter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1547cdaaae80f6c3cd6e5982baa720f59a4312bb"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTExNTQzNg==", "bodyText": "Changed to PrioritiseEnablingCondition", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r501115436", "createdAt": "2020-10-07T15:41:21Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/EnablingConditionSorter.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package uk.gov.hmcts.ccd.domain.casestate;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+@Component\n+public class EnablingConditionSorter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA4OTgyMQ=="}, "originalCommit": {"oid": "1547cdaaae80f6c3cd6e5982baa720f59a4312bb"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzYxMDA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/EnablingConditionSorter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTowNzo1NVrOHd4HLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTowNzo1NVrOHd4HLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA5MDA5NQ==", "bodyText": "prioritiseEventPostStates?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r501090095", "createdAt": "2020-10-07T15:07:55Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/EnablingConditionSorter.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package uk.gov.hmcts.ccd.domain.casestate;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+@Component\n+public class EnablingConditionSorter {\n+\n+    public void sortEventPostStates(List<EventPostStateDefinition> eventPostStates) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1547cdaaae80f6c3cd6e5982baa720f59a4312bb"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzYyNTI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/EnablingConditionSorter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNToxMToxNVrOHd4Q4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTo0Njo0NFrOHd56Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA5MjU3Ng==", "bodyText": "beware here you are sorting the list you are receiving in input as parameter rather than creating and returning a copy.\nLooking at the method invocation, this means you are changing the original list stored in the CaseEventDefinition object?\nSometimes these type of in place modifications can cause nasty bugs... always safer to create and return difensive copies", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r501092576", "createdAt": "2020-10-07T15:11:15Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/EnablingConditionSorter.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package uk.gov.hmcts.ccd.domain.casestate;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+@Component\n+public class EnablingConditionSorter {\n+\n+    public void sortEventPostStates(List<EventPostStateDefinition> eventPostStates) {\n+        if (eventPostStates != null) {\n+            eventPostStates.sort(new PostStateComparator());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1547cdaaae80f6c3cd6e5982baa720f59a4312bb"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTExOTUwMg==", "bodyText": "created the copy before sortiing", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r501119502", "createdAt": "2020-10-07T15:46:44Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/casestate/EnablingConditionSorter.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package uk.gov.hmcts.ccd.domain.casestate;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+@Component\n+public class EnablingConditionSorter {\n+\n+    public void sortEventPostStates(List<EventPostStateDefinition> eventPostStates) {\n+        if (eventPostStates != null) {\n+            eventPostStates.sort(new PostStateComparator());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA5MjU3Ng=="}, "originalCommit": {"oid": "1547cdaaae80f6c3cd6e5982baa720f59a4312bb"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzYzOTQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/StateReferenceService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNToxNDoxOFrOHd4aKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTo0Njo1NlrOHd560Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA5NDk1Mw==", "bodyText": "CasePostStateEvaluationService?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r501094953", "createdAt": "2020-10-07T15:14:18Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/StateReferenceService.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package uk.gov.hmcts.ccd.domain.service.common;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import javax.inject.Inject;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionParser;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+@Service\n+public class StateReferenceService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1547cdaaae80f6c3cd6e5982baa720f59a4312bb"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTExOTY5Nw==", "bodyText": "done", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r501119697", "createdAt": "2020-10-07T15:46:56Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/StateReferenceService.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package uk.gov.hmcts.ccd.domain.service.common;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import javax.inject.Inject;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionParser;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+@Service\n+public class StateReferenceService {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA5NDk1Mw=="}, "originalCommit": {"oid": "1547cdaaae80f6c3cd6e5982baa720f59a4312bb"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzY0NTI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/StateReferenceService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNToxNTozMlrOHd4dyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTo0NzozOVrOHd58oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA5NTg4MA==", "bodyText": "should get the whole case data in input since enabling conditions can use any case field", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r501095880", "createdAt": "2020-10-07T15:15:32Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/StateReferenceService.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package uk.gov.hmcts.ccd.domain.service.common;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import javax.inject.Inject;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionParser;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+@Service\n+public class StateReferenceService {\n+\n+    private final EnablingConditionParser enablingConditionParser;\n+\n+    @Inject\n+    public StateReferenceService(EnablingConditionParser enablingConditionParser) {\n+        this.enablingConditionParser = enablingConditionParser;\n+    }\n+\n+    public Optional<String> evaluatePostStateCondition(List<EventPostStateDefinition> eventPostStateDefinitions,\n+                                                       Map<String, JsonNode> caseEventData) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1547cdaaae80f6c3cd6e5982baa720f59a4312bb"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEyMDE2MQ==", "bodyText": "for now only on case event fields defined, not on any case field", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r501120161", "createdAt": "2020-10-07T15:47:39Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/StateReferenceService.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package uk.gov.hmcts.ccd.domain.service.common;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import javax.inject.Inject;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionParser;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+@Service\n+public class StateReferenceService {\n+\n+    private final EnablingConditionParser enablingConditionParser;\n+\n+    @Inject\n+    public StateReferenceService(EnablingConditionParser enablingConditionParser) {\n+        this.enablingConditionParser = enablingConditionParser;\n+    }\n+\n+    public Optional<String> evaluatePostStateCondition(List<EventPostStateDefinition> eventPostStateDefinitions,\n+                                                       Map<String, JsonNode> caseEventData) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA5NTg4MA=="}, "originalCommit": {"oid": "1547cdaaae80f6c3cd6e5982baa720f59a4312bb"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzY1NjY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/StateReferenceService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNToxODowMlrOHd4lAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNToyMzo1OVrOHd43WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA5NzczMA==", "bodyText": "don't think it's possible in CCD to not have a post state right? maybe we can get rid of this? seems unnecessary boilerplate code", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r501097730", "createdAt": "2020-10-07T15:18:02Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/StateReferenceService.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package uk.gov.hmcts.ccd.domain.service.common;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import javax.inject.Inject;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionParser;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+@Service\n+public class StateReferenceService {\n+\n+    private final EnablingConditionParser enablingConditionParser;\n+\n+    @Inject\n+    public StateReferenceService(EnablingConditionParser enablingConditionParser) {\n+        this.enablingConditionParser = enablingConditionParser;\n+    }\n+\n+    public Optional<String> evaluatePostStateCondition(List<EventPostStateDefinition> eventPostStateDefinitions,\n+                                                       Map<String, JsonNode> caseEventData) {\n+        List<EventPostStateDefinition> postStateDefinitions = Optional\n+            .ofNullable(eventPostStateDefinitions)\n+            .orElse(new ArrayList<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1547cdaaae80f6c3cd6e5982baa720f59a4312bb"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEwMjQyNA==", "bodyText": "removed this check now", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r501102424", "createdAt": "2020-10-07T15:23:59Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/StateReferenceService.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package uk.gov.hmcts.ccd.domain.service.common;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import javax.inject.Inject;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionParser;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+@Service\n+public class StateReferenceService {\n+\n+    private final EnablingConditionParser enablingConditionParser;\n+\n+    @Inject\n+    public StateReferenceService(EnablingConditionParser enablingConditionParser) {\n+        this.enablingConditionParser = enablingConditionParser;\n+    }\n+\n+    public Optional<String> evaluatePostStateCondition(List<EventPostStateDefinition> eventPostStateDefinitions,\n+                                                       Map<String, JsonNode> caseEventData) {\n+        List<EventPostStateDefinition> postStateDefinitions = Optional\n+            .ofNullable(eventPostStateDefinitions)\n+            .orElse(new ArrayList<>());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA5NzczMA=="}, "originalCommit": {"oid": "1547cdaaae80f6c3cd6e5982baa720f59a4312bb"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzY4MDM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/StateReferenceService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNToyMjo0OFrOHd4zrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNToyMjo0OFrOHd4zrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEwMTQ4Ng==", "bodyText": "you can use the variable enablingCondition", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r501101486", "createdAt": "2020-10-07T15:22:48Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/StateReferenceService.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package uk.gov.hmcts.ccd.domain.service.common;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import javax.inject.Inject;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionParser;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+@Service\n+public class StateReferenceService {\n+\n+    private final EnablingConditionParser enablingConditionParser;\n+\n+    @Inject\n+    public StateReferenceService(EnablingConditionParser enablingConditionParser) {\n+        this.enablingConditionParser = enablingConditionParser;\n+    }\n+\n+    public Optional<String> evaluatePostStateCondition(List<EventPostStateDefinition> eventPostStateDefinitions,\n+                                                       Map<String, JsonNode> caseEventData) {\n+        List<EventPostStateDefinition> postStateDefinitions = Optional\n+            .ofNullable(eventPostStateDefinitions)\n+            .orElse(new ArrayList<>());\n+\n+        for (EventPostStateDefinition eventPostStateDefinition : postStateDefinitions) {\n+            String enablingCondition = eventPostStateDefinition.getEnablingCondition();\n+            if (enablingCondition != null) {\n+                Boolean conditionMatched = this.enablingConditionParser.evaluate(\n+                    eventPostStateDefinition.getEnablingCondition(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1547cdaaae80f6c3cd6e5982baa720f59a4312bb"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzcwNTE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/StateReferenceService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNToyNzo0NFrOHd5DDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTo0OTo0OFrOHd6CaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEwNTQyMQ==", "bodyText": "mmm why Optional? There must always be a post state for a case, from a business point of view is not optional. So modelling this in the API as Optional it feels to me a bit confusing. I'd just define this as String, also considering that we already have import validation that mandates specifying a default case right?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r501105421", "createdAt": "2020-10-07T15:27:44Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/StateReferenceService.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package uk.gov.hmcts.ccd.domain.service.common;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import javax.inject.Inject;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionParser;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+@Service\n+public class StateReferenceService {\n+\n+    private final EnablingConditionParser enablingConditionParser;\n+\n+    @Inject\n+    public StateReferenceService(EnablingConditionParser enablingConditionParser) {\n+        this.enablingConditionParser = enablingConditionParser;\n+    }\n+\n+    public Optional<String> evaluatePostStateCondition(List<EventPostStateDefinition> eventPostStateDefinitions,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1547cdaaae80f6c3cd6e5982baa720f59a4312bb"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEwNzA2Nw==", "bodyText": "Yes.. I will change this", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r501107067", "createdAt": "2020-10-07T15:29:52Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/StateReferenceService.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package uk.gov.hmcts.ccd.domain.service.common;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import javax.inject.Inject;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionParser;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+@Service\n+public class StateReferenceService {\n+\n+    private final EnablingConditionParser enablingConditionParser;\n+\n+    @Inject\n+    public StateReferenceService(EnablingConditionParser enablingConditionParser) {\n+        this.enablingConditionParser = enablingConditionParser;\n+    }\n+\n+    public Optional<String> evaluatePostStateCondition(List<EventPostStateDefinition> eventPostStateDefinitions,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEwNTQyMQ=="}, "originalCommit": {"oid": "1547cdaaae80f6c3cd6e5982baa720f59a4312bb"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEyMTY0MA==", "bodyText": "changed, now returning String", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r501121640", "createdAt": "2020-10-07T15:49:48Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/StateReferenceService.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package uk.gov.hmcts.ccd.domain.service.common;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import javax.inject.Inject;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionParser;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+@Service\n+public class StateReferenceService {\n+\n+    private final EnablingConditionParser enablingConditionParser;\n+\n+    @Inject\n+    public StateReferenceService(EnablingConditionParser enablingConditionParser) {\n+        this.enablingConditionParser = enablingConditionParser;\n+    }\n+\n+    public Optional<String> evaluatePostStateCondition(List<EventPostStateDefinition> eventPostStateDefinitions,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEwNTQyMQ=="}, "originalCommit": {"oid": "1547cdaaae80f6c3cd6e5982baa720f59a4312bb"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzcxMDc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/StateReferenceService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNToyODo1OFrOHd5Ghg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTo1MDowMlrOHd6DMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEwNjMxMA==", "bodyText": "I'd change this to String, and throw exception if we can't resolve a state since this is really something that should never happen and be prevented via config. It's not something we can recover from", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r501106310", "createdAt": "2020-10-07T15:28:58Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/StateReferenceService.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package uk.gov.hmcts.ccd.domain.service.common;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import javax.inject.Inject;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionParser;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+@Service\n+public class StateReferenceService {\n+\n+    private final EnablingConditionParser enablingConditionParser;\n+\n+    @Inject\n+    public StateReferenceService(EnablingConditionParser enablingConditionParser) {\n+        this.enablingConditionParser = enablingConditionParser;\n+    }\n+\n+    public Optional<String> evaluatePostStateCondition(List<EventPostStateDefinition> eventPostStateDefinitions,\n+                                                       Map<String, JsonNode> caseEventData) {\n+        List<EventPostStateDefinition> postStateDefinitions = Optional\n+            .ofNullable(eventPostStateDefinitions)\n+            .orElse(new ArrayList<>());\n+\n+        for (EventPostStateDefinition eventPostStateDefinition : postStateDefinitions) {\n+            String enablingCondition = eventPostStateDefinition.getEnablingCondition();\n+            if (enablingCondition != null) {\n+                Boolean conditionMatched = this.enablingConditionParser.evaluate(\n+                    eventPostStateDefinition.getEnablingCondition(),\n+                    caseEventData);\n+                if (conditionMatched) {\n+                    return Optional.of(eventPostStateDefinition.getPostStateReference());\n+                }\n+            }\n+        }\n+        return getDefaultPostStateReference(postStateDefinitions);\n+    }\n+\n+    private Optional<String> getDefaultPostStateReference(List<EventPostStateDefinition> eventPostStateDefinitions) {\n+        return eventPostStateDefinitions\n+            .stream()\n+            .filter(postState -> postState.getEnablingCondition() == null)\n+            .map(postState -> postState.getPostStateReference())\n+            .findAny();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1547cdaaae80f6c3cd6e5982baa720f59a4312bb"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEyMTg0Mg==", "bodyText": "Changed, returning String", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r501121842", "createdAt": "2020-10-07T15:50:02Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/StateReferenceService.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package uk.gov.hmcts.ccd.domain.service.common;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import javax.inject.Inject;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionParser;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+@Service\n+public class StateReferenceService {\n+\n+    private final EnablingConditionParser enablingConditionParser;\n+\n+    @Inject\n+    public StateReferenceService(EnablingConditionParser enablingConditionParser) {\n+        this.enablingConditionParser = enablingConditionParser;\n+    }\n+\n+    public Optional<String> evaluatePostStateCondition(List<EventPostStateDefinition> eventPostStateDefinitions,\n+                                                       Map<String, JsonNode> caseEventData) {\n+        List<EventPostStateDefinition> postStateDefinitions = Optional\n+            .ofNullable(eventPostStateDefinitions)\n+            .orElse(new ArrayList<>());\n+\n+        for (EventPostStateDefinition eventPostStateDefinition : postStateDefinitions) {\n+            String enablingCondition = eventPostStateDefinition.getEnablingCondition();\n+            if (enablingCondition != null) {\n+                Boolean conditionMatched = this.enablingConditionParser.evaluate(\n+                    eventPostStateDefinition.getEnablingCondition(),\n+                    caseEventData);\n+                if (conditionMatched) {\n+                    return Optional.of(eventPostStateDefinition.getPostStateReference());\n+                }\n+            }\n+        }\n+        return getDefaultPostStateReference(postStateDefinitions);\n+    }\n+\n+    private Optional<String> getDefaultPostStateReference(List<EventPostStateDefinition> eventPostStateDefinitions) {\n+        return eventPostStateDefinitions\n+            .stream()\n+            .filter(postState -> postState.getEnablingCondition() == null)\n+            .map(postState -> postState.getPostStateReference())\n+            .findAny();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEwNjMxMA=="}, "originalCommit": {"oid": "1547cdaaae80f6c3cd6e5982baa720f59a4312bb"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzcyMTQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/StateReferenceService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTozMTowN1rOHd5NJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjowMDozNFrOHd6hhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEwODAwNg==", "bodyText": "I would add a method isDefault() to EventPostStateDefinition which itself checks whether enablingCondition == null. This way the rule about when a condition is a default condition is encapsulated in one place rather than scattered around and potentially duplicated all over the places.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r501108006", "createdAt": "2020-10-07T15:31:07Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/StateReferenceService.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package uk.gov.hmcts.ccd.domain.service.common;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import javax.inject.Inject;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionParser;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+@Service\n+public class StateReferenceService {\n+\n+    private final EnablingConditionParser enablingConditionParser;\n+\n+    @Inject\n+    public StateReferenceService(EnablingConditionParser enablingConditionParser) {\n+        this.enablingConditionParser = enablingConditionParser;\n+    }\n+\n+    public Optional<String> evaluatePostStateCondition(List<EventPostStateDefinition> eventPostStateDefinitions,\n+                                                       Map<String, JsonNode> caseEventData) {\n+        List<EventPostStateDefinition> postStateDefinitions = Optional\n+            .ofNullable(eventPostStateDefinitions)\n+            .orElse(new ArrayList<>());\n+\n+        for (EventPostStateDefinition eventPostStateDefinition : postStateDefinitions) {\n+            String enablingCondition = eventPostStateDefinition.getEnablingCondition();\n+            if (enablingCondition != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1547cdaaae80f6c3cd6e5982baa720f59a4312bb"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEyOTYwNA==", "bodyText": "isDefault() method added to EventPostStateDefinition", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1151#discussion_r501129604", "createdAt": "2020-10-07T16:00:34Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/StateReferenceService.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package uk.gov.hmcts.ccd.domain.service.common;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import javax.inject.Inject;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.domain.casestate.EnablingConditionParser;\n+import uk.gov.hmcts.ccd.domain.model.definition.EventPostStateDefinition;\n+\n+@Service\n+public class StateReferenceService {\n+\n+    private final EnablingConditionParser enablingConditionParser;\n+\n+    @Inject\n+    public StateReferenceService(EnablingConditionParser enablingConditionParser) {\n+        this.enablingConditionParser = enablingConditionParser;\n+    }\n+\n+    public Optional<String> evaluatePostStateCondition(List<EventPostStateDefinition> eventPostStateDefinitions,\n+                                                       Map<String, JsonNode> caseEventData) {\n+        List<EventPostStateDefinition> postStateDefinitions = Optional\n+            .ofNullable(eventPostStateDefinitions)\n+            .orElse(new ArrayList<>());\n+\n+        for (EventPostStateDefinition eventPostStateDefinition : postStateDefinitions) {\n+            String enablingCondition = eventPostStateDefinition.getEnablingCondition();\n+            if (enablingCondition != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEwODAwNg=="}, "originalCommit": {"oid": "1547cdaaae80f6c3cd6e5982baa720f59a4312bb"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3701, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}