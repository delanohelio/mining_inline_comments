{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMjM5NjA3", "number": 855, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjozNDoxMFrODq376A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo1NTowN1rODvdtbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjgzMjQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchResultProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjozNDoxMFrOF649QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjozNDoxMFrOF649QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI5NDkxMw==", "bodyText": "same consideration added to the other tickets. Better to have SearchResultViewColumn have getDisplayContextParameter not as a String but as a DisplayContextParameter object, which then has the method itself to check the type", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r397294913", "createdAt": "2020-03-24T16:34:10Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchResultProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.SearchResultView;\n+import uk.gov.hmcts.ccd.domain.model.search.SearchResultViewColumn;\n+import uk.gov.hmcts.ccd.domain.model.search.SearchResultViewItem;\n+import uk.gov.hmcts.ccd.domain.types.CollectionValidator;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Component\n+public class SearchResultProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private final DateTimeFormatParser dateTimeFormatParser;\n+\n+    @Autowired\n+    public SearchResultProcessor(final DateTimeFormatParser dateTimeFormatParser) {\n+        this.dateTimeFormatParser = dateTimeFormatParser;\n+    }\n+\n+    public SearchResultView execute(List<SearchResultViewColumn> viewColumns,\n+                                    List<SearchResultViewItem> viewItems,\n+                                    String resultError) {\n+        for (SearchResultViewColumn viewColumn : viewColumns) {\n+            if (DisplayContextParameter\n+                .hasDisplayContextParameterType(viewColumn.getDisplayContextParameter(), DisplayContextParameterType.DATETIMEDISPLAY)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjgzNjAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchResultProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjozNTowMVrOF64_hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjozNTowMVrOF64_hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI5NTQ5Mw==", "bodyText": "same as above", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r397295493", "createdAt": "2020-03-24T16:35:01Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchResultProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.SearchResultView;\n+import uk.gov.hmcts.ccd.domain.model.search.SearchResultViewColumn;\n+import uk.gov.hmcts.ccd.domain.model.search.SearchResultViewItem;\n+import uk.gov.hmcts.ccd.domain.types.CollectionValidator;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Component\n+public class SearchResultProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private final DateTimeFormatParser dateTimeFormatParser;\n+\n+    @Autowired\n+    public SearchResultProcessor(final DateTimeFormatParser dateTimeFormatParser) {\n+        this.dateTimeFormatParser = dateTimeFormatParser;\n+    }\n+\n+    public SearchResultView execute(List<SearchResultViewColumn> viewColumns,\n+                                    List<SearchResultViewItem> viewItems,\n+                                    String resultError) {\n+        for (SearchResultViewColumn viewColumn : viewColumns) {\n+            if (DisplayContextParameter\n+                .hasDisplayContextParameterType(viewColumn.getDisplayContextParameter(), DisplayContextParameterType.DATETIMEDISPLAY)) {\n+                viewItems = viewItems.stream()\n+                    .map(viewItem -> processSearchResultViewItem(viewItem, viewColumn))\n+                    .collect(Collectors.toList());\n+            }\n+        }\n+\n+        return new SearchResultView(viewColumns, viewItems, resultError);\n+    }\n+\n+    private SearchResultViewItem processSearchResultViewItem(SearchResultViewItem viewItem, SearchResultViewColumn viewColumn) {\n+        return DisplayContextParameter.getDisplayContextParameterOfType(viewColumn.getDisplayContextParameter(), DisplayContextParameterType.DATETIMEDISPLAY)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mjg0NzQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchResultProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjozNzoyNFrOF65Gvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjozNzoyNFrOF65Gvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI5NzM0Mw==", "bodyText": "strictly speaking this is not generic. It's tied to date time processing. So better rename it to DateFormattingSearchResultProcessor?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r397297343", "createdAt": "2020-03-24T16:37:24Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchResultProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.SearchResultView;\n+import uk.gov.hmcts.ccd.domain.model.search.SearchResultViewColumn;\n+import uk.gov.hmcts.ccd.domain.model.search.SearchResultViewItem;\n+import uk.gov.hmcts.ccd.domain.types.CollectionValidator;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Component\n+public class SearchResultProcessor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mjg2MzA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchResultProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjo0MDo0OFrOF65Qzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjo0MDo0OFrOF65Qzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI5OTkxOQ==", "bodyText": "this logic is duplicated with another date store PR. We could remove this duplication by moving this logic inside the dateTimeFormatParser itself", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r397299919", "createdAt": "2020-03-24T16:40:48Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchResultProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.SearchResultView;\n+import uk.gov.hmcts.ccd.domain.model.search.SearchResultViewColumn;\n+import uk.gov.hmcts.ccd.domain.model.search.SearchResultViewItem;\n+import uk.gov.hmcts.ccd.domain.types.CollectionValidator;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Component\n+public class SearchResultProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private final DateTimeFormatParser dateTimeFormatParser;\n+\n+    @Autowired\n+    public SearchResultProcessor(final DateTimeFormatParser dateTimeFormatParser) {\n+        this.dateTimeFormatParser = dateTimeFormatParser;\n+    }\n+\n+    public SearchResultView execute(List<SearchResultViewColumn> viewColumns,\n+                                    List<SearchResultViewItem> viewItems,\n+                                    String resultError) {\n+        for (SearchResultViewColumn viewColumn : viewColumns) {\n+            if (DisplayContextParameter\n+                .hasDisplayContextParameterType(viewColumn.getDisplayContextParameter(), DisplayContextParameterType.DATETIMEDISPLAY)) {\n+                viewItems = viewItems.stream()\n+                    .map(viewItem -> processSearchResultViewItem(viewItem, viewColumn))\n+                    .collect(Collectors.toList());\n+            }\n+        }\n+\n+        return new SearchResultView(viewColumns, viewItems, resultError);\n+    }\n+\n+    private SearchResultViewItem processSearchResultViewItem(SearchResultViewItem viewItem, SearchResultViewColumn viewColumn) {\n+        return DisplayContextParameter.getDisplayContextParameterOfType(viewColumn.getDisplayContextParameter(), DisplayContextParameterType.DATETIMEDISPLAY)\n+            .map(dcp ->  {\n+                viewItem.getCaseFields().replace(viewColumn.getCaseFieldId(),\n+                    processNode(viewItem.getCaseFields().get(viewColumn.getCaseFieldId()), dcp.getValue(), viewColumn.getCaseFieldType()));\n+                return viewItem;\n+            })\n+            .orElse(viewItem);\n+    }\n+\n+    private Object processNode(final Object object,\n+                               final String dateFormat,\n+                               final FieldType fieldType) {\n+        if (object instanceof TextNode && !FieldProcessor.isNullOrEmpty((TextNode) object)) {\n+            return createTextNodeFrom((TextNode) object, dateFormat, fieldType);\n+        } else if (object instanceof ArrayNode && !FieldProcessor.isNullOrEmpty((ArrayNode) object)) {\n+            return createArrayNodeFrom((ArrayNode) object, dateFormat, fieldType);\n+        }\n+\n+        return object;\n+    }\n+\n+    private JsonNode createTextNodeFrom(final TextNode originalNode, final String dateFormat, final FieldType fieldType) {\n+        if (fieldType.getType().equals(FieldType.DATE)) {\n+            return new TextNode(dateTimeFormatParser.convertIso8601ToDate(dateFormat, originalNode.asText()));\n+        } else {\n+            return new TextNode(dateTimeFormatParser.convertIso8601ToDateTime(dateFormat, originalNode.asText()));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mjg3NjMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchResultProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjo0MzozNFrOF65ZEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjo0MzozNFrOF65ZEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMwMjAzMg==", "bodyText": "does the processing work also for complex fields with nested date fields?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r397302032", "createdAt": "2020-03-24T16:43:34Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchResultProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.SearchResultView;\n+import uk.gov.hmcts.ccd.domain.model.search.SearchResultViewColumn;\n+import uk.gov.hmcts.ccd.domain.model.search.SearchResultViewItem;\n+import uk.gov.hmcts.ccd.domain.types.CollectionValidator;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Component\n+public class SearchResultProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private final DateTimeFormatParser dateTimeFormatParser;\n+\n+    @Autowired\n+    public SearchResultProcessor(final DateTimeFormatParser dateTimeFormatParser) {\n+        this.dateTimeFormatParser = dateTimeFormatParser;\n+    }\n+\n+    public SearchResultView execute(List<SearchResultViewColumn> viewColumns,\n+                                    List<SearchResultViewItem> viewItems,\n+                                    String resultError) {\n+        for (SearchResultViewColumn viewColumn : viewColumns) {\n+            if (DisplayContextParameter\n+                .hasDisplayContextParameterType(viewColumn.getDisplayContextParameter(), DisplayContextParameterType.DATETIMEDISPLAY)) {\n+                viewItems = viewItems.stream()\n+                    .map(viewItem -> processSearchResultViewItem(viewItem, viewColumn))\n+                    .collect(Collectors.toList());\n+            }\n+        }\n+\n+        return new SearchResultView(viewColumns, viewItems, resultError);\n+    }\n+\n+    private SearchResultViewItem processSearchResultViewItem(SearchResultViewItem viewItem, SearchResultViewColumn viewColumn) {\n+        return DisplayContextParameter.getDisplayContextParameterOfType(viewColumn.getDisplayContextParameter(), DisplayContextParameterType.DATETIMEDISPLAY)\n+            .map(dcp ->  {\n+                viewItem.getCaseFields().replace(viewColumn.getCaseFieldId(),\n+                    processNode(viewItem.getCaseFields().get(viewColumn.getCaseFieldId()), dcp.getValue(), viewColumn.getCaseFieldType()));\n+                return viewItem;\n+            })\n+            .orElse(viewItem);\n+    }\n+\n+    private Object processNode(final Object object,\n+                               final String dateFormat,\n+                               final FieldType fieldType) {\n+        if (object instanceof TextNode && !FieldProcessor.isNullOrEmpty((TextNode) object)) {\n+            return createTextNodeFrom((TextNode) object, dateFormat, fieldType);\n+        } else if (object instanceof ArrayNode && !FieldProcessor.isNullOrEmpty((ArrayNode) object)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mjg4Mzc1OnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/aggregated/MergeDataToSearchResultOperationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjo0NToxNFrOF65d2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjo0NToxNFrOF65d2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMwMzI1Nw==", "bodyText": "we forgot to add a good bunch of integration test which for a complex feature like this are fundamental", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r397303257", "createdAt": "2020-03-24T16:45:14Z", "author": {"login": "mario-paniccia"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/aggregated/MergeDataToSearchResultOperationTest.java", "diffHunk": "@@ -11,6 +11,7 @@\n import org.junit.jupiter.api.DisplayName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mjk0NDcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjo1ODoxNVrOF66FBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjo1ODoxNVrOF66FBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxMzI4Ng==", "bodyText": "extract a method please", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r397313286", "createdAt": "2020-03-24T16:58:15Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaInput;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaType;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.DefaultGetCriteriaOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCriteriaOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DataProcessingException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+@Component\n+public class SearchInputProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private final DateTimeFormatParser dateTimeFormatParser;\n+    private final GetCriteriaOperation getCriteriaOperation;\n+\n+    @Autowired\n+    public SearchInputProcessor(final DateTimeFormatParser dateTimeFormatParser,\n+                                @Qualifier(DefaultGetCriteriaOperation.QUALIFIER) final GetCriteriaOperation getCriteriaOperation) {\n+        this.dateTimeFormatParser = dateTimeFormatParser;\n+        this.getCriteriaOperation = getCriteriaOperation;\n+    }\n+\n+    public Map<String, String> execute(String view, MetaData metadata, Map<String, String> queryParameters) {\n+        List<? extends CriteriaInput> criteriaInputs =\n+            getCriteriaOperation.execute(metadata.getCaseTypeId(), null,\n+                view == null ? CriteriaType.SEARCH : CriteriaType.valueOf(view));\n+\n+        Map<String, String> newParams = new HashMap<>();\n+        queryParameters.entrySet().stream().forEach(entry -> {\n+            Optional<? extends CriteriaInput> input = criteriaInputs.stream()\n+                .filter(i -> i.getField().getId().equals(entry.getKey()))\n+                .findAny();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mjk0NzIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjo1ODo1MlrOF66Gww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjo1ODo1MlrOF66Gww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxMzczMQ==", "bodyText": "extract  a method please", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r397313731", "createdAt": "2020-03-24T16:58:52Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaInput;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaType;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.DefaultGetCriteriaOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCriteriaOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DataProcessingException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+@Component\n+public class SearchInputProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private final DateTimeFormatParser dateTimeFormatParser;\n+    private final GetCriteriaOperation getCriteriaOperation;\n+\n+    @Autowired\n+    public SearchInputProcessor(final DateTimeFormatParser dateTimeFormatParser,\n+                                @Qualifier(DefaultGetCriteriaOperation.QUALIFIER) final GetCriteriaOperation getCriteriaOperation) {\n+        this.dateTimeFormatParser = dateTimeFormatParser;\n+        this.getCriteriaOperation = getCriteriaOperation;\n+    }\n+\n+    public Map<String, String> execute(String view, MetaData metadata, Map<String, String> queryParameters) {\n+        List<? extends CriteriaInput> criteriaInputs =\n+            getCriteriaOperation.execute(metadata.getCaseTypeId(), null,\n+                view == null ? CriteriaType.SEARCH : CriteriaType.valueOf(view));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mjk1MjI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzowMDowN1rOF66J9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDo1ODoyM1rOF7Vybw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxNDU0OQ==", "bodyText": "same comment as above", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r397314549", "createdAt": "2020-03-24T17:00:07Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaInput;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaType;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.DefaultGetCriteriaOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCriteriaOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DataProcessingException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+@Component\n+public class SearchInputProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private final DateTimeFormatParser dateTimeFormatParser;\n+    private final GetCriteriaOperation getCriteriaOperation;\n+\n+    @Autowired\n+    public SearchInputProcessor(final DateTimeFormatParser dateTimeFormatParser,\n+                                @Qualifier(DefaultGetCriteriaOperation.QUALIFIER) final GetCriteriaOperation getCriteriaOperation) {\n+        this.dateTimeFormatParser = dateTimeFormatParser;\n+        this.getCriteriaOperation = getCriteriaOperation;\n+    }\n+\n+    public Map<String, String> execute(String view, MetaData metadata, Map<String, String> queryParameters) {\n+        List<? extends CriteriaInput> criteriaInputs =\n+            getCriteriaOperation.execute(metadata.getCaseTypeId(), null,\n+                view == null ? CriteriaType.SEARCH : CriteriaType.valueOf(view));\n+\n+        Map<String, String> newParams = new HashMap<>();\n+        queryParameters.entrySet().stream().forEach(entry -> {\n+            Optional<? extends CriteriaInput> input = criteriaInputs.stream()\n+                .filter(i -> i.getField().getId().equals(entry.getKey()))\n+                .findAny();\n+\n+            if (input.isPresent() &&\n+                DisplayContextParameter\n+                    .hasDisplayContextParameterType(input.get().getDisplayContextParameter(), DisplayContextParameterType.DATETIMEENTRY)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc2NzI3OQ==", "bodyText": "Better to create a method to check the condition", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r397767279", "createdAt": "2020-03-25T10:58:23Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaInput;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaType;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.DefaultGetCriteriaOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCriteriaOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DataProcessingException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+@Component\n+public class SearchInputProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private final DateTimeFormatParser dateTimeFormatParser;\n+    private final GetCriteriaOperation getCriteriaOperation;\n+\n+    @Autowired\n+    public SearchInputProcessor(final DateTimeFormatParser dateTimeFormatParser,\n+                                @Qualifier(DefaultGetCriteriaOperation.QUALIFIER) final GetCriteriaOperation getCriteriaOperation) {\n+        this.dateTimeFormatParser = dateTimeFormatParser;\n+        this.getCriteriaOperation = getCriteriaOperation;\n+    }\n+\n+    public Map<String, String> execute(String view, MetaData metadata, Map<String, String> queryParameters) {\n+        List<? extends CriteriaInput> criteriaInputs =\n+            getCriteriaOperation.execute(metadata.getCaseTypeId(), null,\n+                view == null ? CriteriaType.SEARCH : CriteriaType.valueOf(view));\n+\n+        Map<String, String> newParams = new HashMap<>();\n+        queryParameters.entrySet().stream().forEach(entry -> {\n+            Optional<? extends CriteriaInput> input = criteriaInputs.stream()\n+                .filter(i -> i.getField().getId().equals(entry.getKey()))\n+                .findAny();\n+\n+            if (input.isPresent() &&\n+                DisplayContextParameter\n+                    .hasDisplayContextParameterType(input.get().getDisplayContextParameter(), DisplayContextParameterType.DATETIMEENTRY)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxNDU0OQ=="}, "originalCommit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mjk1NTQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzowMDo0NlrOF66L-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzowMDo0NlrOF66L-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxNTA2NQ==", "bodyText": "extract a method please", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r397315065", "createdAt": "2020-03-24T17:00:46Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaInput;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaType;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.DefaultGetCriteriaOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCriteriaOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DataProcessingException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+@Component\n+public class SearchInputProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private final DateTimeFormatParser dateTimeFormatParser;\n+    private final GetCriteriaOperation getCriteriaOperation;\n+\n+    @Autowired\n+    public SearchInputProcessor(final DateTimeFormatParser dateTimeFormatParser,\n+                                @Qualifier(DefaultGetCriteriaOperation.QUALIFIER) final GetCriteriaOperation getCriteriaOperation) {\n+        this.dateTimeFormatParser = dateTimeFormatParser;\n+        this.getCriteriaOperation = getCriteriaOperation;\n+    }\n+\n+    public Map<String, String> execute(String view, MetaData metadata, Map<String, String> queryParameters) {\n+        List<? extends CriteriaInput> criteriaInputs =\n+            getCriteriaOperation.execute(metadata.getCaseTypeId(), null,\n+                view == null ? CriteriaType.SEARCH : CriteriaType.valueOf(view));\n+\n+        Map<String, String> newParams = new HashMap<>();\n+        queryParameters.entrySet().stream().forEach(entry -> {\n+            Optional<? extends CriteriaInput> input = criteriaInputs.stream()\n+                .filter(i -> i.getField().getId().equals(entry.getKey()))\n+                .findAny();\n+\n+            if (input.isPresent() &&\n+                DisplayContextParameter\n+                    .hasDisplayContextParameterType(input.get().getDisplayContextParameter(), DisplayContextParameterType.DATETIMEENTRY)) {\n+                newParams.put(entry.getKey(),\n+                    processValue(entry.getKey(), input.get().getDisplayContextParameter(),\n+                        entry.getValue(), input.get().getField().getType()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mjk1OTYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzowMTo1MFrOF66O5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzowMTo1MFrOF66O5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxNTgxMw==", "bodyText": "this is not a generic processor, it's tied to doing date transformation so we should rename it to DateSearchInputProcessor or sim", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r397315813", "createdAt": "2020-03-24T17:01:50Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaInput;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaType;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.DefaultGetCriteriaOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCriteriaOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DataProcessingException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+@Component\n+public class SearchInputProcessor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mjk2Mzk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzowMjo1NFrOF66Ryw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzowMjo1NFrOF66Ryw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxNjU1NQ==", "bodyText": "duplicated", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r397316555", "createdAt": "2020-03-24T17:02:54Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaInput;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaType;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.DefaultGetCriteriaOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCriteriaOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DataProcessingException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+@Component\n+public class SearchInputProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private final DateTimeFormatParser dateTimeFormatParser;\n+    private final GetCriteriaOperation getCriteriaOperation;\n+\n+    @Autowired\n+    public SearchInputProcessor(final DateTimeFormatParser dateTimeFormatParser,\n+                                @Qualifier(DefaultGetCriteriaOperation.QUALIFIER) final GetCriteriaOperation getCriteriaOperation) {\n+        this.dateTimeFormatParser = dateTimeFormatParser;\n+        this.getCriteriaOperation = getCriteriaOperation;\n+    }\n+\n+    public Map<String, String> execute(String view, MetaData metadata, Map<String, String> queryParameters) {\n+        List<? extends CriteriaInput> criteriaInputs =\n+            getCriteriaOperation.execute(metadata.getCaseTypeId(), null,\n+                view == null ? CriteriaType.SEARCH : CriteriaType.valueOf(view));\n+\n+        Map<String, String> newParams = new HashMap<>();\n+        queryParameters.entrySet().stream().forEach(entry -> {\n+            Optional<? extends CriteriaInput> input = criteriaInputs.stream()\n+                .filter(i -> i.getField().getId().equals(entry.getKey()))\n+                .findAny();\n+\n+            if (input.isPresent() &&\n+                DisplayContextParameter\n+                    .hasDisplayContextParameterType(input.get().getDisplayContextParameter(), DisplayContextParameterType.DATETIMEENTRY)) {\n+                newParams.put(entry.getKey(),\n+                    processValue(entry.getKey(), input.get().getDisplayContextParameter(),\n+                        entry.getValue(), input.get().getField().getType()));\n+            } else {\n+                newParams.put(entry.getKey(), entry.getValue());\n+            }\n+        });\n+\n+        return newParams;\n+    }\n+\n+    private String processValue(String id, String displayContextParameter, String value, FieldType fieldType) {\n+        try {\n+            if (fieldType.getType().equals(FieldType.DATE)) {\n+                return dateTimeFormatParser.convertDateToIso8601(format(displayContextParameter, fieldType), value);\n+            } else if (fieldType.getType().equals(FieldType.DATETIME)) {\n+                return dateTimeFormatParser.convertDateTimeToIso8601(format(displayContextParameter, fieldType), value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mjk2OTkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzowNDoyMFrOF66Vrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzowNDoyMFrOF66Vrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxNzU1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            String.format(\"Unable to process input %s with value %s. Expected format: %s\",\n          \n          \n            \n                            String.format(\"Unable to process search input %s with value %s. Expected format: %s\",", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r397317550", "createdAt": "2020-03-24T17:04:20Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaInput;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaType;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.DefaultGetCriteriaOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCriteriaOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DataProcessingException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+@Component\n+public class SearchInputProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private final DateTimeFormatParser dateTimeFormatParser;\n+    private final GetCriteriaOperation getCriteriaOperation;\n+\n+    @Autowired\n+    public SearchInputProcessor(final DateTimeFormatParser dateTimeFormatParser,\n+                                @Qualifier(DefaultGetCriteriaOperation.QUALIFIER) final GetCriteriaOperation getCriteriaOperation) {\n+        this.dateTimeFormatParser = dateTimeFormatParser;\n+        this.getCriteriaOperation = getCriteriaOperation;\n+    }\n+\n+    public Map<String, String> execute(String view, MetaData metadata, Map<String, String> queryParameters) {\n+        List<? extends CriteriaInput> criteriaInputs =\n+            getCriteriaOperation.execute(metadata.getCaseTypeId(), null,\n+                view == null ? CriteriaType.SEARCH : CriteriaType.valueOf(view));\n+\n+        Map<String, String> newParams = new HashMap<>();\n+        queryParameters.entrySet().stream().forEach(entry -> {\n+            Optional<? extends CriteriaInput> input = criteriaInputs.stream()\n+                .filter(i -> i.getField().getId().equals(entry.getKey()))\n+                .findAny();\n+\n+            if (input.isPresent() &&\n+                DisplayContextParameter\n+                    .hasDisplayContextParameterType(input.get().getDisplayContextParameter(), DisplayContextParameterType.DATETIMEENTRY)) {\n+                newParams.put(entry.getKey(),\n+                    processValue(entry.getKey(), input.get().getDisplayContextParameter(),\n+                        entry.getValue(), input.get().getField().getType()));\n+            } else {\n+                newParams.put(entry.getKey(), entry.getValue());\n+            }\n+        });\n+\n+        return newParams;\n+    }\n+\n+    private String processValue(String id, String displayContextParameter, String value, FieldType fieldType) {\n+        try {\n+            if (fieldType.getType().equals(FieldType.DATE)) {\n+                return dateTimeFormatParser.convertDateToIso8601(format(displayContextParameter, fieldType), value);\n+            } else if (fieldType.getType().equals(FieldType.DATETIME)) {\n+                return dateTimeFormatParser.convertDateTimeToIso8601(format(displayContextParameter, fieldType), value);\n+            } else {\n+                return value;\n+            }\n+        } catch (Exception e) {\n+            throw new DataProcessingException().withDetails(\n+                String.format(\"Unable to process input %s with value %s. Expected format: %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mjk4OTIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzowODo1NVrOF66idw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzowODo1NVrOF66idw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMyMDgyMw==", "bodyText": "duplicated. This should be moved into the domain class", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r397320823", "createdAt": "2020-03-24T17:08:55Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaInput;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaType;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.DefaultGetCriteriaOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCriteriaOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DataProcessingException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+@Component\n+public class SearchInputProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private final DateTimeFormatParser dateTimeFormatParser;\n+    private final GetCriteriaOperation getCriteriaOperation;\n+\n+    @Autowired\n+    public SearchInputProcessor(final DateTimeFormatParser dateTimeFormatParser,\n+                                @Qualifier(DefaultGetCriteriaOperation.QUALIFIER) final GetCriteriaOperation getCriteriaOperation) {\n+        this.dateTimeFormatParser = dateTimeFormatParser;\n+        this.getCriteriaOperation = getCriteriaOperation;\n+    }\n+\n+    public Map<String, String> execute(String view, MetaData metadata, Map<String, String> queryParameters) {\n+        List<? extends CriteriaInput> criteriaInputs =\n+            getCriteriaOperation.execute(metadata.getCaseTypeId(), null,\n+                view == null ? CriteriaType.SEARCH : CriteriaType.valueOf(view));\n+\n+        Map<String, String> newParams = new HashMap<>();\n+        queryParameters.entrySet().stream().forEach(entry -> {\n+            Optional<? extends CriteriaInput> input = criteriaInputs.stream()\n+                .filter(i -> i.getField().getId().equals(entry.getKey()))\n+                .findAny();\n+\n+            if (input.isPresent() &&\n+                DisplayContextParameter\n+                    .hasDisplayContextParameterType(input.get().getDisplayContextParameter(), DisplayContextParameterType.DATETIMEENTRY)) {\n+                newParams.put(entry.getKey(),\n+                    processValue(entry.getKey(), input.get().getDisplayContextParameter(),\n+                        entry.getValue(), input.get().getField().getType()));\n+            } else {\n+                newParams.put(entry.getKey(), entry.getValue());\n+            }\n+        });\n+\n+        return newParams;\n+    }\n+\n+    private String processValue(String id, String displayContextParameter, String value, FieldType fieldType) {\n+        try {\n+            if (fieldType.getType().equals(FieldType.DATE)) {\n+                return dateTimeFormatParser.convertDateToIso8601(format(displayContextParameter, fieldType), value);\n+            } else if (fieldType.getType().equals(FieldType.DATETIME)) {\n+                return dateTimeFormatParser.convertDateTimeToIso8601(format(displayContextParameter, fieldType), value);\n+            } else {\n+                return value;\n+            }\n+        } catch (Exception e) {\n+            throw new DataProcessingException().withDetails(\n+                String.format(\"Unable to process input %s with value %s. Expected format: %s\",\n+                    id,\n+                    value,\n+                    format(displayContextParameter, fieldType))\n+            );\n+        }\n+    }\n+\n+    private String format(String displayContextParameter, FieldType fieldType) {\n+        return DisplayContextParameter\n+            .getDisplayContextParameterOfType(displayContextParameter, DisplayContextParameterType.DATETIMEENTRY)\n+            .map(DisplayContextParameter::getValue)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzAwMjUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzoxMjoyMFrOF66rVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzoxMjoyMFrOF66rVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMyMzA5NQ==", "bodyText": "is this needed? if there's no datetimeentry specified then the date must already be in iso format right?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r397323095", "createdAt": "2020-03-24T17:12:20Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaInput;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaType;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.DefaultGetCriteriaOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCriteriaOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DataProcessingException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+@Component\n+public class SearchInputProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private final DateTimeFormatParser dateTimeFormatParser;\n+    private final GetCriteriaOperation getCriteriaOperation;\n+\n+    @Autowired\n+    public SearchInputProcessor(final DateTimeFormatParser dateTimeFormatParser,\n+                                @Qualifier(DefaultGetCriteriaOperation.QUALIFIER) final GetCriteriaOperation getCriteriaOperation) {\n+        this.dateTimeFormatParser = dateTimeFormatParser;\n+        this.getCriteriaOperation = getCriteriaOperation;\n+    }\n+\n+    public Map<String, String> execute(String view, MetaData metadata, Map<String, String> queryParameters) {\n+        List<? extends CriteriaInput> criteriaInputs =\n+            getCriteriaOperation.execute(metadata.getCaseTypeId(), null,\n+                view == null ? CriteriaType.SEARCH : CriteriaType.valueOf(view));\n+\n+        Map<String, String> newParams = new HashMap<>();\n+        queryParameters.entrySet().stream().forEach(entry -> {\n+            Optional<? extends CriteriaInput> input = criteriaInputs.stream()\n+                .filter(i -> i.getField().getId().equals(entry.getKey()))\n+                .findAny();\n+\n+            if (input.isPresent() &&\n+                DisplayContextParameter\n+                    .hasDisplayContextParameterType(input.get().getDisplayContextParameter(), DisplayContextParameterType.DATETIMEENTRY)) {\n+                newParams.put(entry.getKey(),\n+                    processValue(entry.getKey(), input.get().getDisplayContextParameter(),\n+                        entry.getValue(), input.get().getField().getType()));\n+            } else {\n+                newParams.put(entry.getKey(), entry.getValue());\n+            }\n+        });\n+\n+        return newParams;\n+    }\n+\n+    private String processValue(String id, String displayContextParameter, String value, FieldType fieldType) {\n+        try {\n+            if (fieldType.getType().equals(FieldType.DATE)) {\n+                return dateTimeFormatParser.convertDateToIso8601(format(displayContextParameter, fieldType), value);\n+            } else if (fieldType.getType().equals(FieldType.DATETIME)) {\n+                return dateTimeFormatParser.convertDateTimeToIso8601(format(displayContextParameter, fieldType), value);\n+            } else {\n+                return value;\n+            }\n+        } catch (Exception e) {\n+            throw new DataProcessingException().withDetails(\n+                String.format(\"Unable to process input %s with value %s. Expected format: %s\",\n+                    id,\n+                    value,\n+                    format(displayContextParameter, fieldType))\n+            );\n+        }\n+    }\n+\n+    private String format(String displayContextParameter, FieldType fieldType) {\n+        return DisplayContextParameter\n+            .getDisplayContextParameterOfType(displayContextParameter, DisplayContextParameterType.DATETIMEENTRY)\n+            .map(DisplayContextParameter::getValue)\n+            .orElseGet(() -> fieldType.getType().equals(FieldType.DATE) ?\n+                DateTimeFormatParser.DATE_FORMAT.toString() :\n+                DateTimeFormatParser.DATE_TIME_FORMAT.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODE3NTE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjowMzo1M1rOGBe8CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjowMzo1M1rOGBe8CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIwODY0OQ==", "bodyText": "you can inject this", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r404208649", "createdAt": "2020-04-06T16:03:53Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaInput;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaType;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.DefaultGetCriteriaOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCriteriaOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DataProcessingException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+@Component\n+public class SearchInputProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "792401bf6505699b6e711c72b1563975bb834e52"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODIwNzA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/search/SearchResultViewColumn.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjoxMDo1M1rOGBfPuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjoxMDo1M1rOGBfPuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIxMzY4OQ==", "bodyText": "looks like this method has significant logic. Can you add few unit tests to domain class please.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r404213689", "createdAt": "2020-04-06T16:10:53Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/search/SearchResultViewColumn.java", "diffHunk": "@@ -48,4 +63,42 @@ public Integer getOrder() {\n     public boolean isMetadata() {\n         return metadata;\n     }\n+\n+    public String getDisplayContextParameter() {\n+        return displayContextParameter;\n+    }\n+\n+    public Optional<DisplayContextParameter> getDisplayContextParameterOfType(DisplayContextParameterType displayContextParameterType) {\n+        return DisplayContextParameter.getDisplayContextParameterOfType(getDisplayContextParameter(), displayContextParameterType);\n+    }\n+\n+    public Optional<CommonField> getNestedField(String path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "792401bf6505699b6e711c72b1563975bb834e52"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDkzOTIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/aggregated/MergeDataToSearchResultOperation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo0OTowMVrOGB5cIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo0OTowMVrOGB5cIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0Mjg1MQ==", "bodyText": "newHashMap really required? if so may be Collections.unmodifiableMap ?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r404642851", "createdAt": "2020-04-07T08:49:01Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/aggregated/MergeDataToSearchResultOperation.java", "diffHunk": "@@ -109,7 +119,7 @@ private SearchResultViewItem buildSearchResultViewItem(final CaseDetails caseDet\n         Map<String, Object> caseFields = prepareData(searchResult, caseData, caseMetadata, labels);\n \n         String caseId = caseDetails.hasCaseReference() ? caseDetails.getReferenceAsString() : caseDetails.getId();\n-        return new SearchResultViewItem(caseId, caseFields);\n+        return new SearchResultViewItem(caseId, caseFields, new HashMap<>(caseFields));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7f8784041eea43e1bea615e061fe72ea2bddb45"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDk2NDI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo1NTowN1rOGB5r1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo1NTowN1rOGB5r1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0Njg2OQ==", "bodyText": "specific exceptions rather than catching very generic Exception?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r404646869", "createdAt": "2020-04-07T08:55:07Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaInput;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaType;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.DefaultGetCriteriaOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCriteriaOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DataProcessingException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+@Component\n+public class SearchInputProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private final DateTimeFormatParser dateTimeFormatParser;\n+    private final GetCriteriaOperation getCriteriaOperation;\n+\n+    @Autowired\n+    public SearchInputProcessor(final DateTimeFormatParser dateTimeFormatParser,\n+                                @Qualifier(DefaultGetCriteriaOperation.QUALIFIER) final GetCriteriaOperation getCriteriaOperation) {\n+        this.dateTimeFormatParser = dateTimeFormatParser;\n+        this.getCriteriaOperation = getCriteriaOperation;\n+    }\n+\n+    public Map<String, String> execute(String view, MetaData metadata, Map<String, String> queryParameters) {\n+        List<? extends CriteriaInput> criteriaInputs =\n+            getCriteriaOperation.execute(metadata.getCaseTypeId(), null,\n+                view == null ? CriteriaType.SEARCH : CriteriaType.valueOf(view));\n+\n+        Map<String, String> newParams = new HashMap<>();\n+        queryParameters.entrySet().stream().forEach(entry -> {\n+            Optional<? extends CriteriaInput> input = criteriaInputs.stream()\n+                .filter(i -> i.getField().getId().equals(entry.getKey()))\n+                .findAny();\n+\n+            if (input.isPresent() &&\n+                DisplayContextParameter\n+                    .hasDisplayContextParameterType(input.get().getDisplayContextParameter(), DisplayContextParameterType.DATETIMEENTRY)) {\n+                newParams.put(entry.getKey(),\n+                    processValue(entry.getKey(), input.get().getDisplayContextParameter(),\n+                        entry.getValue(), input.get().getField().getType()));\n+            } else {\n+                newParams.put(entry.getKey(), entry.getValue());\n+            }\n+        });\n+\n+        return newParams;\n+    }\n+\n+    private String processValue(String id, String displayContextParameter, String value, FieldType fieldType) {\n+        try {\n+            if (fieldType.getType().equals(FieldType.DATE)) {\n+                return dateTimeFormatParser.convertDateToIso8601(format(displayContextParameter, fieldType), value);\n+            } else if (fieldType.getType().equals(FieldType.DATETIME)) {\n+                return dateTimeFormatParser.convertDateTimeToIso8601(format(displayContextParameter, fieldType), value);\n+            } else {\n+                return value;\n+            }\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7f8784041eea43e1bea615e061fe72ea2bddb45"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3919, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}