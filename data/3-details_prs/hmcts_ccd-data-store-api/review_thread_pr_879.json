{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2MTQzMjk2", "number": 879, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzoxNzoxOFrODyEQ5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo1NzoyNFrODyHHZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODI1MjU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DateTimeValueFormatter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzoxNzoxOFrOGF5MBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzoxNzoxOFrOGF5MBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgzMzAzMA==", "bodyText": "baseType == BaseType.get(DATETIME) is used in multiple places in this method.. so please create a variable", "url": "https://github.com/hmcts/ccd-data-store-api/pull/879#discussion_r408833030", "createdAt": "2020-04-15T13:17:18Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DateTimeValueFormatter.java", "diffHunk": "@@ -113,10 +113,11 @@ private TextNode createNode(String displayContextParameter, String valueToConver\n                 }\n             } catch (Exception e) {\n                 throw new DataProcessingException().withDetails(\n-                    String.format(\"Unable to process field %s with value %s. Expected format: %s\",\n+                    String.format(\"Unable to process field %s with value %s. Expected format to be either %s or %s\",\n                         fieldPath,\n                         valueToConvert,\n-                        format)\n+                        format,\n+                        baseType == BaseType.get(DATETIME) ? DateTimeFormatParser.DATE_TIME_FORMAT : DateTimeFormatParser.DATE_FORMAT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44a57c0ab26b2752c450ea171ca185a6f3608691"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODI3NDcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DateTimeFormatParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzoyMjo0NlrOGF5aWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzoyMjo0NlrOGF5aWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgzNjY5Nw==", "bodyText": "better to check parsePosition.getErrorIndex() == -1 as well", "url": "https://github.com/hmcts/ccd-data-store-api/pull/879#discussion_r408836697", "createdAt": "2020-04-15T13:22:46Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DateTimeFormatParser.java", "diffHunk": "@@ -62,16 +79,11 @@ private DateTimeFormatter getDateTimeFormatter(String dateTimeFormat) {\n             .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n             .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n             .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n-            .parseDefaulting(ChronoField.MILLI_OF_SECOND, 0)\n+            .parseDefaulting(ChronoField.NANO_OF_SECOND, 0)\n             .toFormatter();\n     }\n \n-    private DateTimeFormatter getDateFormatter(String dateFormat) {\n-        return new DateTimeFormatterBuilder()\n-            .appendPattern(dateFormat)\n-            .parseDefaulting(ChronoField.YEAR_OF_ERA, DEFAULT_YEAR)\n-            .parseDefaulting(ChronoField.MONTH_OF_YEAR, 1)\n-            .parseDefaulting(ChronoField.DAY_OF_MONTH, 1)\n-            .toFormatter();\n+    private boolean isValidParseResult(String value, ParsePosition parsePosition) {\n+        return parsePosition.getIndex() == value.length();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44a57c0ab26b2752c450ea171ca185a6f3608691"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODY5MzA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DateTimeEntryProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo1MTo1N1rOGF9jjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo1MTo1N1rOGF9jjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkwNDU5MQ==", "bodyText": "baseType == BaseType.get(DATETIME) is used in multiple places in this method.. so please create a variable", "url": "https://github.com/hmcts/ccd-data-store-api/pull/879#discussion_r408904591", "createdAt": "2020-04-15T14:51:57Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DateTimeEntryProcessor.java", "diffHunk": "@@ -85,10 +85,11 @@ private TextNode createNode(String displayContextParameter, String valueToConver\n             }\n         } catch (Exception e) {\n             throw new DataProcessingException().withDetails(\n-                String.format(\"Unable to process field %s with value %s. Expected format: %s\",\n+                String.format(\"Unable to process field %s with value %s. Expected format to be either %s or %s\",\n                     fieldPath,\n                     valueToConvert,\n-                    format)\n+                    format,\n+                    baseType == BaseType.get(DATETIME) ? DateTimeFormatParser.DATE_TIME_FORMAT : DateTimeFormatParser.DATE_FORMAT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44a57c0ab26b2752c450ea171ca185a6f3608691"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODcwMTY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DateTimeFormatParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo1MzozN1rOGF9o1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo1MzozN1rOGF9o1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkwNTk0Mg==", "bodyText": "Better to use this method instead of List.. as we have only two formats for now\nprivate String convert(String inputFormat, String defaultInputFormats, String outputFormat, String value) {\nif you are sure we can get more formats in the future, then better to use the Set instead", "url": "https://github.com/hmcts/ccd-data-store-api/pull/879#discussion_r408905942", "createdAt": "2020-04-15T14:53:37Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DateTimeFormatParser.java", "diffHunk": "@@ -49,11 +39,38 @@ public String convertIso8601ToDateTime(String dateTimeFormat, String value) {\n     }\n \n     public String convertIso8601ToDate(String dateFormat, String value) {\n-        LocalDate date = LocalDate.parse(value, DATE_FORMAT);\n+        LocalDate date = LocalDate.parse(value, DateTimeFormatter.ofPattern(DATE_FORMAT));\n         return date.format(DateTimeFormatter.ofPattern(dateFormat));\n     }\n \n-    private DateTimeFormatter getDateTimeFormatter(String dateTimeFormat) {\n+    private String convert(List<String> permittedInputFormats, String outputFormat, String value) {\n+        List<DateTimeFormatter> inputFormatters = permittedInputFormats.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44a57c0ab26b2752c450ea171ca185a6f3608691"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODcwNTAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DateTimeFormatParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo1NDoxOVrOGF9rBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo1NDoxOVrOGF9rBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkwNjUwMQ==", "bodyText": "parsed != null is not needed here, instead use parsePosition.getErrorIndex() == -1 in isValidParseResult method.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/879#discussion_r408906501", "createdAt": "2020-04-15T14:54:19Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DateTimeFormatParser.java", "diffHunk": "@@ -49,11 +39,38 @@ public String convertIso8601ToDateTime(String dateTimeFormat, String value) {\n     }\n \n     public String convertIso8601ToDate(String dateFormat, String value) {\n-        LocalDate date = LocalDate.parse(value, DATE_FORMAT);\n+        LocalDate date = LocalDate.parse(value, DateTimeFormatter.ofPattern(DATE_FORMAT));\n         return date.format(DateTimeFormatter.ofPattern(dateFormat));\n     }\n \n-    private DateTimeFormatter getDateTimeFormatter(String dateTimeFormat) {\n+    private String convert(List<String> permittedInputFormats, String outputFormat, String value) {\n+        List<DateTimeFormatter> inputFormatters = permittedInputFormats.stream()\n+            .filter(Objects::nonNull)\n+            .map(this::getFormatter)\n+            .collect(Collectors.toList());\n+        DateTimeFormatter outputFormatter = getFormatter(outputFormat);\n+        TemporalAccessor parsed = null;\n+\n+        Iterator<DateTimeFormatter> iterator = inputFormatters.iterator();\n+        while (iterator.hasNext()) {\n+            DateTimeFormatter inputFormatter = iterator.next();\n+\n+            ParsePosition parsePosition = new ParsePosition(0);\n+            parsed = inputFormatter.parseUnresolved(value, parsePosition);\n+\n+            if (parsed != null && isValidParseResult(value, parsePosition)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44a57c0ab26b2752c450ea171ca185a6f3608691"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODcwODYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DateTimeFormatParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo1NTowNVrOGF9tTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo1NTowNVrOGF9tTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkwNzA4NA==", "bodyText": "This will add null as well into the exception message as permittedInputFormats may contain null values", "url": "https://github.com/hmcts/ccd-data-store-api/pull/879#discussion_r408907084", "createdAt": "2020-04-15T14:55:05Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DateTimeFormatParser.java", "diffHunk": "@@ -49,11 +39,38 @@ public String convertIso8601ToDateTime(String dateTimeFormat, String value) {\n     }\n \n     public String convertIso8601ToDate(String dateFormat, String value) {\n-        LocalDate date = LocalDate.parse(value, DATE_FORMAT);\n+        LocalDate date = LocalDate.parse(value, DateTimeFormatter.ofPattern(DATE_FORMAT));\n         return date.format(DateTimeFormatter.ofPattern(dateFormat));\n     }\n \n-    private DateTimeFormatter getDateTimeFormatter(String dateTimeFormat) {\n+    private String convert(List<String> permittedInputFormats, String outputFormat, String value) {\n+        List<DateTimeFormatter> inputFormatters = permittedInputFormats.stream()\n+            .filter(Objects::nonNull)\n+            .map(this::getFormatter)\n+            .collect(Collectors.toList());\n+        DateTimeFormatter outputFormatter = getFormatter(outputFormat);\n+        TemporalAccessor parsed = null;\n+\n+        Iterator<DateTimeFormatter> iterator = inputFormatters.iterator();\n+        while (iterator.hasNext()) {\n+            DateTimeFormatter inputFormatter = iterator.next();\n+\n+            ParsePosition parsePosition = new ParsePosition(0);\n+            parsed = inputFormatter.parseUnresolved(value, parsePosition);\n+\n+            if (parsed != null && isValidParseResult(value, parsePosition)) {\n+                break;\n+            } else if (!iterator.hasNext()) {\n+                throw new DateTimeParseException(\n+                    String.format(\"Failed to parse value '%s' against formats: %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44a57c0ab26b2752c450ea171ca185a6f3608691"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODcxNjg3OnYy", "diffSide": "LEFT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DateTimeFormatParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo1Njo0OFrOGF9ylQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo1Njo0OFrOGF9ylQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkwODQzNw==", "bodyText": "Don't expose these methods convertDateTimeToIso8601, convertDateToIso8601, instead create a common convert method which accepts baseType (FieldType.DATE, FieldType.DATETIME) and then do the logic based on that.\nand Move FieldType.DATE, FieldType.DATETIME to common class", "url": "https://github.com/hmcts/ccd-data-store-api/pull/879#discussion_r408908437", "createdAt": "2020-04-15T14:56:48Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DateTimeFormatParser.java", "diffHunk": "@@ -1,46 +1,36 @@\n package uk.gov.hmcts.ccd.domain.service.processor;\n \n+import java.text.ParsePosition;\n import java.time.LocalDate;\n import java.time.LocalDateTime;\n import java.time.format.DateTimeFormatter;\n import java.time.format.DateTimeFormatterBuilder;\n-import java.time.temporal.*;\n+import java.time.format.DateTimeParseException;\n+import java.time.temporal.ChronoField;\n+import java.time.temporal.TemporalAccessor;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n \n import lombok.extern.slf4j.Slf4j;\n-import org.joda.time.format.*;\n import org.springframework.stereotype.Component;\n \n @Component\n @Slf4j\n public class DateTimeFormatParser {\n \n-    static final DateTimeFormatter DATE_TIME_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS\");\n-    static final DateTimeFormatter DATE_TIME_FORMAT_MILLISECOND = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SS\");\n-    static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n+    static final String DATE_TIME_FORMAT = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";\n+    static final String DATE_FORMAT = \"yyyy-MM-dd\";\n     private static final int DEFAULT_YEAR = 1970;\n \n     public String convertDateTimeToIso8601(String dateTimeFormat, String value) {\n-        LocalDateTime dateTime;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44a57c0ab26b2752c450ea171ca185a6f3608691"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODcxOTc0OnYy", "diffSide": "LEFT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DateTimeFormatParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo1NzoyNFrOGF90ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo1NzoyNFrOGF90ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkwODkwMA==", "bodyText": "Please add check for null value parameter as well and add test cases accordingly", "url": "https://github.com/hmcts/ccd-data-store-api/pull/879#discussion_r408908900", "createdAt": "2020-04-15T14:57:24Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DateTimeFormatParser.java", "diffHunk": "@@ -1,46 +1,36 @@\n package uk.gov.hmcts.ccd.domain.service.processor;\n \n+import java.text.ParsePosition;\n import java.time.LocalDate;\n import java.time.LocalDateTime;\n import java.time.format.DateTimeFormatter;\n import java.time.format.DateTimeFormatterBuilder;\n-import java.time.temporal.*;\n+import java.time.format.DateTimeParseException;\n+import java.time.temporal.ChronoField;\n+import java.time.temporal.TemporalAccessor;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n \n import lombok.extern.slf4j.Slf4j;\n-import org.joda.time.format.*;\n import org.springframework.stereotype.Component;\n \n @Component\n @Slf4j\n public class DateTimeFormatParser {\n \n-    static final DateTimeFormatter DATE_TIME_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS\");\n-    static final DateTimeFormatter DATE_TIME_FORMAT_MILLISECOND = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SS\");\n-    static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n+    static final String DATE_TIME_FORMAT = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";\n+    static final String DATE_FORMAT = \"yyyy-MM-dd\";\n     private static final int DEFAULT_YEAR = 1970;\n \n     public String convertDateTimeToIso8601(String dateTimeFormat, String value) {\n-        LocalDateTime dateTime;\n-        try {\n-            DateTimeFormatter inputFormat = (dateTimeFormat == null) ? DATE_TIME_FORMAT : getDateTimeFormatter(dateTimeFormat);\n-            dateTime = LocalDateTime.parse(value, inputFormat);\n-        } catch (Exception e) {\n-            log.warn(\"Failed to parse following dateTime value {} with format {} attempting to parse with {}\", value, dateTimeFormat, DATE_TIME_FORMAT);\n-            dateTime = LocalDateTime.parse(value, DATE_TIME_FORMAT);\n-        }\n-        return dateTime.format(DATE_TIME_FORMAT);\n+        return convert(Arrays.asList(dateTimeFormat, DATE_TIME_FORMAT), DATE_TIME_FORMAT, value);\n     }\n \n     public String convertDateToIso8601(String dateFormat, String value) {\n-        LocalDate date;\n-        try {\n-            DateTimeFormatter inputFormat = (dateFormat == null) ? DATE_FORMAT : getDateFormatter(dateFormat);\n-            date = LocalDate.parse(value, inputFormat);\n-        } catch (Exception e) {\n-            log.warn(\"Failed to parse following date value {} with format {} attempting to parse with {}\", value, dateFormat, DATE_FORMAT);\n-            date = LocalDate.parse(value, DATE_FORMAT);\n-        }\n-        return date.format(DATE_FORMAT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44a57c0ab26b2752c450ea171ca185a6f3608691"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3800, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}