{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0Njk2MDQx", "number": 960, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzoyNToxM1rOEF76Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDo1NDozMlrOEGTLcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjU5ODc1OnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzoyNToxM1rOGkbJGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzoyNToxM1rOGkbJGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg0NjYxOA==", "bodyText": "Not sure how good that embedded one. Test containers are simple in general https://www.testcontainers.org/modules/elasticsearch/", "url": "https://github.com/hmcts/ccd-data-store-api/pull/960#discussion_r440846618", "createdAt": "2020-06-16T13:25:13Z", "author": {"login": "smathangi"}, "path": "build.gradle", "diffHunk": "@@ -256,6 +256,7 @@ dependencies {\n     testCompile group: 'io.rest-assured', name: 'rest-assured', version: '3.1.0'\n     testCompile group: 'com.xebialabs.restito', name: 'restito', version: '0.9.3'\n     testCompile 'io.github.openfeign:feign-jackson:9.7.0'\n+    testCompile 'pl.allegro.tech:embedded-elasticsearch:2.7.0'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d6542e45239051714bbd621ac866207e595fcd5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDM4MDAzOnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpointESIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDo0NDoyN1rOGlAOUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDo0NDoyN1rOGlAOUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ1NDE2MA==", "bodyText": "Is this test working as expected? - when trying this locally I get a 500 response with Problem getting case type version for 'casetypeA,casetypeB'.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/960#discussion_r441454160", "createdAt": "2020-06-17T10:44:27Z", "author": {"login": "noronhaa"}, "path": "src/test/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpointESIT.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package uk.gov.hmcts.ccd.endpoint.std;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.springframework.http.MediaType;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContext;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+import org.springframework.web.context.WebApplicationContext;\n+import uk.gov.hmcts.ccd.ElasticsearchBaseTest;\n+import uk.gov.hmcts.ccd.MockUtils;\n+import uk.gov.hmcts.ccd.data.casedetails.SecurityClassification;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.search.CaseSearchResult;\n+\n+import javax.inject.Inject;\n+import java.util.Map;\n+\n+import static org.elasticsearch.index.query.QueryBuilders.*;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.startsWith;\n+import static org.junit.jupiter.api.Assertions.assertAll;\n+import static org.mockito.Mockito.doReturn;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static uk.gov.hmcts.ccd.test.ElasticsearchTestHelper.*;\n+\n+class CaseSearchEndpointESIT extends ElasticsearchBaseTest {\n+\n+    private static final String POST_SEARCH_CASES = \"/searchCases\";\n+    private static final String CASE_TYPE_ID_PARAM = \"ctid\";\n+\n+    @Inject\n+    private WebApplicationContext wac;\n+    private MockMvc mockMvc;\n+\n+    @Mock\n+    private Authentication authentication;\n+\n+    @Mock\n+    private SecurityContext securityContext;\n+\n+    @BeforeEach\n+    void setUp() {\n+        MockitoAnnotations.initMocks(this);\n+\n+        doReturn(authentication).when(securityContext).getAuthentication();\n+        SecurityContextHolder.setContext(securityContext);\n+\n+        MockUtils.setSecurityAuthorities(authentication, AUTOTEST1_PUBLIC, AUTOTEST2_PUBLIC);\n+\n+        mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();\n+    }\n+\n+    @Nested\n+    class CrossCaseTypeSearch {\n+\n+        @Test // Note that cross case type searches do NOT return case data\n+        void shouldReturnAllCasesForAllSpecifiedCaseTypes() throws Exception {\n+            String searchRequest = ElasticsearchTestRequest.builder()\n+                .query(matchAllQuery())\n+                .build().toJsonString();\n+\n+            MvcResult result = mockMvc.perform(post(POST_SEARCH_CASES)\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .param(CASE_TYPE_ID_PARAM, caseTypesParam(CASE_TYPE_A, CASE_TYPE_B))\n+                .content(searchRequest))\n+                .andExpect(status().is(200))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d6542e45239051714bbd621ac866207e595fcd5"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDQxMTM4OnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpointESIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDo1NDozMlrOGlAiKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMToyOTo0NVrOGlBjeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ1OTI0MA==", "bodyText": "This should be available now so we should uncomment this line", "url": "https://github.com/hmcts/ccd-data-store-api/pull/960#discussion_r441459240", "createdAt": "2020-06-17T10:54:32Z", "author": {"login": "noronhaa"}, "path": "src/test/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpointESIT.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package uk.gov.hmcts.ccd.endpoint.std;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.springframework.http.MediaType;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContext;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+import org.springframework.web.context.WebApplicationContext;\n+import uk.gov.hmcts.ccd.ElasticsearchBaseTest;\n+import uk.gov.hmcts.ccd.MockUtils;\n+import uk.gov.hmcts.ccd.data.casedetails.SecurityClassification;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.search.CaseSearchResult;\n+\n+import javax.inject.Inject;\n+import java.util.Map;\n+\n+import static org.elasticsearch.index.query.QueryBuilders.*;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.startsWith;\n+import static org.junit.jupiter.api.Assertions.assertAll;\n+import static org.mockito.Mockito.doReturn;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static uk.gov.hmcts.ccd.test.ElasticsearchTestHelper.*;\n+\n+class CaseSearchEndpointESIT extends ElasticsearchBaseTest {\n+\n+    private static final String POST_SEARCH_CASES = \"/searchCases\";\n+    private static final String CASE_TYPE_ID_PARAM = \"ctid\";\n+\n+    @Inject\n+    private WebApplicationContext wac;\n+    private MockMvc mockMvc;\n+\n+    @Mock\n+    private Authentication authentication;\n+\n+    @Mock\n+    private SecurityContext securityContext;\n+\n+    @BeforeEach\n+    void setUp() {\n+        MockitoAnnotations.initMocks(this);\n+\n+        doReturn(authentication).when(securityContext).getAuthentication();\n+        SecurityContextHolder.setContext(securityContext);\n+\n+        MockUtils.setSecurityAuthorities(authentication, AUTOTEST1_PUBLIC, AUTOTEST2_PUBLIC);\n+\n+        mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();\n+    }\n+\n+    @Nested\n+    class CrossCaseTypeSearch {\n+\n+        @Test // Note that cross case type searches do NOT return case data\n+        void shouldReturnAllCasesForAllSpecifiedCaseTypes() throws Exception {\n+            String searchRequest = ElasticsearchTestRequest.builder()\n+                .query(matchAllQuery())\n+                .build().toJsonString();\n+\n+            MvcResult result = mockMvc.perform(post(POST_SEARCH_CASES)\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .param(CASE_TYPE_ID_PARAM, caseTypesParam(CASE_TYPE_A, CASE_TYPE_B))\n+                .content(searchRequest))\n+                .andExpect(status().is(200))\n+                .andReturn();\n+\n+            String responseAsString = result.getResponse().getContentAsString();\n+            CaseSearchResult caseSearchResult = mapper.readValue(responseAsString, CaseSearchResult.class);\n+\n+            assertAll(\n+                () -> assertThat(caseSearchResult.getTotal(), is(3L)),\n+                () -> assertThat(caseSearchResult.getCaseReferences(CASE_TYPE_A).size(), is(2)),\n+                () -> assertThat(caseSearchResult.getCaseReferences(CASE_TYPE_B).size(), is(1)),\n+                () -> assertThat(caseSearchResult.getCases().get(0).getData().size(), is(0)),\n+                () -> assertThat(caseSearchResult.getCases().get(1).getData().size(), is(0)),\n+                () -> assertThat(caseSearchResult.getCases().get(2).getData().size(), is(0))\n+            );\n+        }\n+\n+        @Test\n+        void shouldReturnRequestedAliasSource() throws Exception {\n+            String searchRequest = ElasticsearchTestRequest.builder()\n+                .query(matchAllQuery())\n+                .source(alias(TEXT_ALIAS))\n+                .sort(CREATED_DATE)\n+                .build().toJsonString();\n+\n+            MvcResult result = mockMvc.perform(post(POST_SEARCH_CASES)\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .param(CASE_TYPE_ID_PARAM, caseTypesParam(CASE_TYPE_A, CASE_TYPE_B))\n+                .content(searchRequest))\n+                .andExpect(status().is(200))\n+                .andReturn();\n+\n+            String responseAsString = result.getResponse().getContentAsString();\n+            CaseSearchResult caseSearchResult = mapper.readValue(responseAsString, CaseSearchResult.class);\n+\n+            assertAll(\n+                () -> assertThat(caseSearchResult.getTotal(), is(3L)),\n+                () -> assertThat(caseSearchResult.getCases().get(0).getData().get(TEXT_ALIAS).asText(), is(TEXT_VALUE)),\n+                () -> assertThat(caseSearchResult.getCases().get(1).getData().get(TEXT_ALIAS).asText(), is(\"CCC TextValue\")),\n+                () -> assertThat(caseSearchResult.getCases().get(2).getData().get(TEXT_ALIAS).asText(), is(\"BBB TextValue\")),\n+                () -> assertThat(caseSearchResult.getCases().get(0).getData().size(), is(1)),\n+                () -> assertThat(caseSearchResult.getCases().get(1).getData().size(), is(1)),\n+                () -> assertThat(caseSearchResult.getCases().get(2).getData().size(), is(1))\n+            );\n+        }\n+\n+        @Test // Note that the size and sort is applied to each separate case type then results combined\n+        void shouldReturnPaginatedResults() throws Exception {\n+            String searchRequest = ElasticsearchTestRequest.builder()\n+                .query(matchAllQuery())\n+                .sort(CREATED_DATE)\n+                .size(1)\n+                .build().toJsonString();\n+\n+            MvcResult result = mockMvc.perform(post(POST_SEARCH_CASES)\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .param(CASE_TYPE_ID_PARAM, caseTypesParam(CASE_TYPE_A, CASE_TYPE_B))\n+                .content(searchRequest))\n+                .andExpect(status().is(200))\n+                .andReturn();\n+\n+            String responseAsString = result.getResponse().getContentAsString();\n+            CaseSearchResult caseSearchResult = mapper.readValue(responseAsString, CaseSearchResult.class);\n+\n+            assertAll(\n+                () -> assertThat(caseSearchResult.getTotal(), is(3L)),\n+                () -> assertThat(caseSearchResult.getCases().size(), is(2)) // = Size * Number of case types\n+            );\n+        }\n+\n+        @Test\n+        void shouldQueryOnAliasField() throws Exception {\n+            String searchRequest = ElasticsearchTestRequest.builder()\n+                .query(matchQuery(alias(FIXED_LIST_ALIAS), FIXED_LIST_VALUE))\n+                .build().toJsonString();\n+\n+            MvcResult result = mockMvc.perform(post(POST_SEARCH_CASES)\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .param(CASE_TYPE_ID_PARAM, caseTypesParam(CASE_TYPE_A, CASE_TYPE_B))\n+                .content(searchRequest))\n+                .andExpect(status().is(200))\n+                .andReturn();\n+\n+            String responseAsString = result.getResponse().getContentAsString();\n+            CaseSearchResult caseSearchResult = mapper.readValue(responseAsString, CaseSearchResult.class);\n+\n+            assertAll(\n+                () -> assertThat(caseSearchResult.getTotal(), is(2L)),\n+                () -> assertThat(caseSearchResult.getCases().get(0).getReference(), is(1588866820969121L)),\n+                () -> assertThat(caseSearchResult.getCases().get(1).getReference(), is(1588870615652827L))\n+            );\n+        }\n+    }\n+\n+    @Nested\n+    class SingleCaseTypeSearch {\n+\n+        @Test\n+        void shouldReturnAllCaseDetails() throws Exception {\n+            String searchRequest = ElasticsearchTestRequest.builder()\n+                .query(boolQuery()\n+                    .must(matchQuery(caseData(NUMBER_FIELD), NUMBER_VALUE)) // ES Double\n+                    .must(matchQuery(caseData(YES_OR_NO_FIELD), YES_OR_NO_VALUE)) // ES Keyword\n+                    .must(matchQuery(caseData(TEXT_FIELD), TEXT_VALUE)) // ES Text\n+                    .must(matchQuery(caseData(DATE_FIELD), DATE_VALUE)) // ES Date\n+                    .must(matchQuery(caseData(PHONE_FIELD), PHONE_VALUE)) // ES Phone\n+                    .must(matchQuery(caseData(COUNTRY_FIELD), COUNTRY_VALUE)) // Complex\n+                    .must(matchQuery(caseData(COLLECTION_FIELD) + VALUE_SUFFIX, COLLECTION_VALUE)) // Collection\n+                    .must(matchQuery(STATE, STATE_VALUE)))\n+                .build().toJsonString();\n+\n+            MvcResult result = mockMvc.perform(post(POST_SEARCH_CASES)\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .param(CASE_TYPE_ID_PARAM, CASE_TYPE_A)\n+                .content(searchRequest))\n+                .andExpect(status().is(200))\n+                .andReturn();\n+\n+            String responseAsString = result.getResponse().getContentAsString();\n+            CaseSearchResult caseSearchResult = mapper.readValue(responseAsString, CaseSearchResult.class);\n+\n+            CaseDetails caseDetails = caseSearchResult.getCases().get(0);\n+            assertAll(\n+                () -> assertThat(caseSearchResult.getTotal(), is(1L)),\n+                () -> assertExampleCaseMetadata(caseDetails),\n+                () -> assertExampleCaseData(caseDetails)\n+            );\n+        }\n+\n+        @Test\n+        void shouldErrorWhenInvalidCaseTypeIsProvided() throws Exception {\n+            String searchRequest = ElasticsearchTestRequest.builder()\n+                .query(matchAllQuery())\n+                .build().toJsonString();\n+\n+            MvcResult result = mockMvc.perform(post(POST_SEARCH_CASES)\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .param(CASE_TYPE_ID_PARAM, \"INVALID\")\n+                .content(searchRequest))\n+                .andExpect(status().is(404))\n+                .andReturn();\n+\n+            String responseAsString = result.getResponse().getContentAsString();\n+            JsonNode exceptionNode = mapper.readTree(responseAsString);\n+\n+            assertAll(\n+                () -> assertThat(exceptionNode.get(\"message\").asText(),\n+                    startsWith(\"Resource not found when getting case type definition for INVALID\"))\n+            );\n+        }\n+\n+        public void assertExampleCaseMetadata(CaseDetails caseDetails) {\n+            assertAll(\n+                () -> assertThat(caseDetails.getJurisdiction(), is(\"AUTOTEST1\")),\n+                () -> assertThat(caseDetails.getCaseTypeId(), is(CASE_TYPE_A)),\n+                () -> assertThat(caseDetails.getCreatedDate().toString(), is(\"2020-05-07T15:53:40.974\")),\n+                () -> assertThat(caseDetails.getLastModified().toString(), is(\"2020-06-09T13:17:06.542\")),\n+                // () -> assertThat(caseDetails.getLastStateModifiedDate().toString(), is(\"TBC\")), // TODO: After RDM-8552 available", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d6542e45239051714bbd621ac866207e595fcd5"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ3NTk2MQ==", "bodyText": "Merged in latest and uncommented.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/960#discussion_r441475961", "createdAt": "2020-06-17T11:29:45Z", "author": {"login": "danlysiak"}, "path": "src/test/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpointESIT.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package uk.gov.hmcts.ccd.endpoint.std;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.springframework.http.MediaType;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContext;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+import org.springframework.web.context.WebApplicationContext;\n+import uk.gov.hmcts.ccd.ElasticsearchBaseTest;\n+import uk.gov.hmcts.ccd.MockUtils;\n+import uk.gov.hmcts.ccd.data.casedetails.SecurityClassification;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.search.CaseSearchResult;\n+\n+import javax.inject.Inject;\n+import java.util.Map;\n+\n+import static org.elasticsearch.index.query.QueryBuilders.*;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.startsWith;\n+import static org.junit.jupiter.api.Assertions.assertAll;\n+import static org.mockito.Mockito.doReturn;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static uk.gov.hmcts.ccd.test.ElasticsearchTestHelper.*;\n+\n+class CaseSearchEndpointESIT extends ElasticsearchBaseTest {\n+\n+    private static final String POST_SEARCH_CASES = \"/searchCases\";\n+    private static final String CASE_TYPE_ID_PARAM = \"ctid\";\n+\n+    @Inject\n+    private WebApplicationContext wac;\n+    private MockMvc mockMvc;\n+\n+    @Mock\n+    private Authentication authentication;\n+\n+    @Mock\n+    private SecurityContext securityContext;\n+\n+    @BeforeEach\n+    void setUp() {\n+        MockitoAnnotations.initMocks(this);\n+\n+        doReturn(authentication).when(securityContext).getAuthentication();\n+        SecurityContextHolder.setContext(securityContext);\n+\n+        MockUtils.setSecurityAuthorities(authentication, AUTOTEST1_PUBLIC, AUTOTEST2_PUBLIC);\n+\n+        mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();\n+    }\n+\n+    @Nested\n+    class CrossCaseTypeSearch {\n+\n+        @Test // Note that cross case type searches do NOT return case data\n+        void shouldReturnAllCasesForAllSpecifiedCaseTypes() throws Exception {\n+            String searchRequest = ElasticsearchTestRequest.builder()\n+                .query(matchAllQuery())\n+                .build().toJsonString();\n+\n+            MvcResult result = mockMvc.perform(post(POST_SEARCH_CASES)\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .param(CASE_TYPE_ID_PARAM, caseTypesParam(CASE_TYPE_A, CASE_TYPE_B))\n+                .content(searchRequest))\n+                .andExpect(status().is(200))\n+                .andReturn();\n+\n+            String responseAsString = result.getResponse().getContentAsString();\n+            CaseSearchResult caseSearchResult = mapper.readValue(responseAsString, CaseSearchResult.class);\n+\n+            assertAll(\n+                () -> assertThat(caseSearchResult.getTotal(), is(3L)),\n+                () -> assertThat(caseSearchResult.getCaseReferences(CASE_TYPE_A).size(), is(2)),\n+                () -> assertThat(caseSearchResult.getCaseReferences(CASE_TYPE_B).size(), is(1)),\n+                () -> assertThat(caseSearchResult.getCases().get(0).getData().size(), is(0)),\n+                () -> assertThat(caseSearchResult.getCases().get(1).getData().size(), is(0)),\n+                () -> assertThat(caseSearchResult.getCases().get(2).getData().size(), is(0))\n+            );\n+        }\n+\n+        @Test\n+        void shouldReturnRequestedAliasSource() throws Exception {\n+            String searchRequest = ElasticsearchTestRequest.builder()\n+                .query(matchAllQuery())\n+                .source(alias(TEXT_ALIAS))\n+                .sort(CREATED_DATE)\n+                .build().toJsonString();\n+\n+            MvcResult result = mockMvc.perform(post(POST_SEARCH_CASES)\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .param(CASE_TYPE_ID_PARAM, caseTypesParam(CASE_TYPE_A, CASE_TYPE_B))\n+                .content(searchRequest))\n+                .andExpect(status().is(200))\n+                .andReturn();\n+\n+            String responseAsString = result.getResponse().getContentAsString();\n+            CaseSearchResult caseSearchResult = mapper.readValue(responseAsString, CaseSearchResult.class);\n+\n+            assertAll(\n+                () -> assertThat(caseSearchResult.getTotal(), is(3L)),\n+                () -> assertThat(caseSearchResult.getCases().get(0).getData().get(TEXT_ALIAS).asText(), is(TEXT_VALUE)),\n+                () -> assertThat(caseSearchResult.getCases().get(1).getData().get(TEXT_ALIAS).asText(), is(\"CCC TextValue\")),\n+                () -> assertThat(caseSearchResult.getCases().get(2).getData().get(TEXT_ALIAS).asText(), is(\"BBB TextValue\")),\n+                () -> assertThat(caseSearchResult.getCases().get(0).getData().size(), is(1)),\n+                () -> assertThat(caseSearchResult.getCases().get(1).getData().size(), is(1)),\n+                () -> assertThat(caseSearchResult.getCases().get(2).getData().size(), is(1))\n+            );\n+        }\n+\n+        @Test // Note that the size and sort is applied to each separate case type then results combined\n+        void shouldReturnPaginatedResults() throws Exception {\n+            String searchRequest = ElasticsearchTestRequest.builder()\n+                .query(matchAllQuery())\n+                .sort(CREATED_DATE)\n+                .size(1)\n+                .build().toJsonString();\n+\n+            MvcResult result = mockMvc.perform(post(POST_SEARCH_CASES)\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .param(CASE_TYPE_ID_PARAM, caseTypesParam(CASE_TYPE_A, CASE_TYPE_B))\n+                .content(searchRequest))\n+                .andExpect(status().is(200))\n+                .andReturn();\n+\n+            String responseAsString = result.getResponse().getContentAsString();\n+            CaseSearchResult caseSearchResult = mapper.readValue(responseAsString, CaseSearchResult.class);\n+\n+            assertAll(\n+                () -> assertThat(caseSearchResult.getTotal(), is(3L)),\n+                () -> assertThat(caseSearchResult.getCases().size(), is(2)) // = Size * Number of case types\n+            );\n+        }\n+\n+        @Test\n+        void shouldQueryOnAliasField() throws Exception {\n+            String searchRequest = ElasticsearchTestRequest.builder()\n+                .query(matchQuery(alias(FIXED_LIST_ALIAS), FIXED_LIST_VALUE))\n+                .build().toJsonString();\n+\n+            MvcResult result = mockMvc.perform(post(POST_SEARCH_CASES)\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .param(CASE_TYPE_ID_PARAM, caseTypesParam(CASE_TYPE_A, CASE_TYPE_B))\n+                .content(searchRequest))\n+                .andExpect(status().is(200))\n+                .andReturn();\n+\n+            String responseAsString = result.getResponse().getContentAsString();\n+            CaseSearchResult caseSearchResult = mapper.readValue(responseAsString, CaseSearchResult.class);\n+\n+            assertAll(\n+                () -> assertThat(caseSearchResult.getTotal(), is(2L)),\n+                () -> assertThat(caseSearchResult.getCases().get(0).getReference(), is(1588866820969121L)),\n+                () -> assertThat(caseSearchResult.getCases().get(1).getReference(), is(1588870615652827L))\n+            );\n+        }\n+    }\n+\n+    @Nested\n+    class SingleCaseTypeSearch {\n+\n+        @Test\n+        void shouldReturnAllCaseDetails() throws Exception {\n+            String searchRequest = ElasticsearchTestRequest.builder()\n+                .query(boolQuery()\n+                    .must(matchQuery(caseData(NUMBER_FIELD), NUMBER_VALUE)) // ES Double\n+                    .must(matchQuery(caseData(YES_OR_NO_FIELD), YES_OR_NO_VALUE)) // ES Keyword\n+                    .must(matchQuery(caseData(TEXT_FIELD), TEXT_VALUE)) // ES Text\n+                    .must(matchQuery(caseData(DATE_FIELD), DATE_VALUE)) // ES Date\n+                    .must(matchQuery(caseData(PHONE_FIELD), PHONE_VALUE)) // ES Phone\n+                    .must(matchQuery(caseData(COUNTRY_FIELD), COUNTRY_VALUE)) // Complex\n+                    .must(matchQuery(caseData(COLLECTION_FIELD) + VALUE_SUFFIX, COLLECTION_VALUE)) // Collection\n+                    .must(matchQuery(STATE, STATE_VALUE)))\n+                .build().toJsonString();\n+\n+            MvcResult result = mockMvc.perform(post(POST_SEARCH_CASES)\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .param(CASE_TYPE_ID_PARAM, CASE_TYPE_A)\n+                .content(searchRequest))\n+                .andExpect(status().is(200))\n+                .andReturn();\n+\n+            String responseAsString = result.getResponse().getContentAsString();\n+            CaseSearchResult caseSearchResult = mapper.readValue(responseAsString, CaseSearchResult.class);\n+\n+            CaseDetails caseDetails = caseSearchResult.getCases().get(0);\n+            assertAll(\n+                () -> assertThat(caseSearchResult.getTotal(), is(1L)),\n+                () -> assertExampleCaseMetadata(caseDetails),\n+                () -> assertExampleCaseData(caseDetails)\n+            );\n+        }\n+\n+        @Test\n+        void shouldErrorWhenInvalidCaseTypeIsProvided() throws Exception {\n+            String searchRequest = ElasticsearchTestRequest.builder()\n+                .query(matchAllQuery())\n+                .build().toJsonString();\n+\n+            MvcResult result = mockMvc.perform(post(POST_SEARCH_CASES)\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .param(CASE_TYPE_ID_PARAM, \"INVALID\")\n+                .content(searchRequest))\n+                .andExpect(status().is(404))\n+                .andReturn();\n+\n+            String responseAsString = result.getResponse().getContentAsString();\n+            JsonNode exceptionNode = mapper.readTree(responseAsString);\n+\n+            assertAll(\n+                () -> assertThat(exceptionNode.get(\"message\").asText(),\n+                    startsWith(\"Resource not found when getting case type definition for INVALID\"))\n+            );\n+        }\n+\n+        public void assertExampleCaseMetadata(CaseDetails caseDetails) {\n+            assertAll(\n+                () -> assertThat(caseDetails.getJurisdiction(), is(\"AUTOTEST1\")),\n+                () -> assertThat(caseDetails.getCaseTypeId(), is(CASE_TYPE_A)),\n+                () -> assertThat(caseDetails.getCreatedDate().toString(), is(\"2020-05-07T15:53:40.974\")),\n+                () -> assertThat(caseDetails.getLastModified().toString(), is(\"2020-06-09T13:17:06.542\")),\n+                // () -> assertThat(caseDetails.getLastStateModifiedDate().toString(), is(\"TBC\")), // TODO: After RDM-8552 available", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ1OTI0MA=="}, "originalCommit": {"oid": "5d6542e45239051714bbd621ac866207e595fcd5"}, "originalPosition": 232}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3851, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}