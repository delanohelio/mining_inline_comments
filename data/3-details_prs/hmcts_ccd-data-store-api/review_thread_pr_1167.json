{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzOTI2Mjg2", "number": 1167, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODoyNDo0NlrOEuXSTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNDo0ODozNFrOEujgJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDUxNDcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/config/JacksonUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODoyNDo0NlrOHit0fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODoyNDo0NlrOHit0fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE2NDM0OQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1167#discussion_r506164349", "createdAt": "2020-10-16T08:24:46Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/config/JacksonUtils.java", "diffHunk": "@@ -29,7 +36,7 @@ private JacksonUtils(){\n         .build();\n \n \n-    public static HashMap<String, JsonNode> convertValue(Object from) {\n+    public static Map<String, JsonNode> convertValue(Object from) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "751e7f3eaecb19c5f6417443a9ee03483b447a67"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDc2NzUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/CaseEventDefinition.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOToxMzo0MlrOHiwYUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTowNDoyNFrOHi1_Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIwNjI4OA==", "bodyText": "mmm not sure whether it's the best thing in terms of separation of concerns having a definition object having logic to build/manipulate case JSON data. I would have thought this is more responsibility of a CaseService class", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1167#discussion_r506206288", "createdAt": "2020-10-16T09:13:42Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/CaseEventDefinition.java", "diffHunk": "@@ -205,4 +214,29 @@ public void setCanSaveDraft(Boolean canSaveDraft) {\n             .filter(f -> f.getCaseFieldId().equals(caseFieldId))\n             .findFirst();\n     }\n+\n+    public Map<String, JsonNode> buildJsonNodeFromCaseFieldsWithDefaultValue() {\n+        Map<String, JsonNode> data = new HashMap<>();\n+\n+        getCaseFields().forEach(\n+            caseField -> {\n+\n+                List<JsonNode> collect = caseField.getCaseEventFieldComplexDefinitions().stream()\n+                    .filter(e -> e.getDefaultValue() != null)\n+                    .filter(e -> !e.getReference().isBlank())\n+                    .map(caseEventFieldComplex -> JacksonUtils.buildFromDottedPath(caseEventFieldComplex.getReference(),\n+                                                                                   caseEventFieldComplex.getDefaultValue())).collect(toList());\n+\n+                ObjectNode objectNode = MAPPER.getNodeFactory().objectNode();\n+                collect.forEach(e -> {\n+                    String next = e.fieldNames().next();\n+                    objectNode.set(next, e.findValue(next));\n+                });\n+                if (!collect.isEmpty()) { // to prevent construct like \"FieldA\": {}\n+                    data.put(caseField.getCaseFieldId(), objectNode);\n+                }\n+            });\n+\n+        return data;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "751e7f3eaecb19c5f6417443a9ee03483b447a67"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI5MTY1Mg==", "bodyText": "Not a problem. Can move it to the Service layer. Was just thinking of 'anemic domain model'", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1167#discussion_r506291652", "createdAt": "2020-10-16T10:56:04Z", "author": {"login": "rafalkalita"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/CaseEventDefinition.java", "diffHunk": "@@ -205,4 +214,29 @@ public void setCanSaveDraft(Boolean canSaveDraft) {\n             .filter(f -> f.getCaseFieldId().equals(caseFieldId))\n             .findFirst();\n     }\n+\n+    public Map<String, JsonNode> buildJsonNodeFromCaseFieldsWithDefaultValue() {\n+        Map<String, JsonNode> data = new HashMap<>();\n+\n+        getCaseFields().forEach(\n+            caseField -> {\n+\n+                List<JsonNode> collect = caseField.getCaseEventFieldComplexDefinitions().stream()\n+                    .filter(e -> e.getDefaultValue() != null)\n+                    .filter(e -> !e.getReference().isBlank())\n+                    .map(caseEventFieldComplex -> JacksonUtils.buildFromDottedPath(caseEventFieldComplex.getReference(),\n+                                                                                   caseEventFieldComplex.getDefaultValue())).collect(toList());\n+\n+                ObjectNode objectNode = MAPPER.getNodeFactory().objectNode();\n+                collect.forEach(e -> {\n+                    String next = e.fieldNames().next();\n+                    objectNode.set(next, e.findValue(next));\n+                });\n+                if (!collect.isEmpty()) { // to prevent construct like \"FieldA\": {}\n+                    data.put(caseField.getCaseFieldId(), objectNode);\n+                }\n+            });\n+\n+        return data;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIwNjI4OA=="}, "originalCommit": {"oid": "751e7f3eaecb19c5f6417443a9ee03483b447a67"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI5ODE0Ng==", "bodyText": "Yes, Good to move this logic to service class", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1167#discussion_r506298146", "createdAt": "2020-10-16T11:04:24Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/CaseEventDefinition.java", "diffHunk": "@@ -205,4 +214,29 @@ public void setCanSaveDraft(Boolean canSaveDraft) {\n             .filter(f -> f.getCaseFieldId().equals(caseFieldId))\n             .findFirst();\n     }\n+\n+    public Map<String, JsonNode> buildJsonNodeFromCaseFieldsWithDefaultValue() {\n+        Map<String, JsonNode> data = new HashMap<>();\n+\n+        getCaseFields().forEach(\n+            caseField -> {\n+\n+                List<JsonNode> collect = caseField.getCaseEventFieldComplexDefinitions().stream()\n+                    .filter(e -> e.getDefaultValue() != null)\n+                    .filter(e -> !e.getReference().isBlank())\n+                    .map(caseEventFieldComplex -> JacksonUtils.buildFromDottedPath(caseEventFieldComplex.getReference(),\n+                                                                                   caseEventFieldComplex.getDefaultValue())).collect(toList());\n+\n+                ObjectNode objectNode = MAPPER.getNodeFactory().objectNode();\n+                collect.forEach(e -> {\n+                    String next = e.fieldNames().next();\n+                    objectNode.set(next, e.findValue(next));\n+                });\n+                if (!collect.isEmpty()) { // to prevent construct like \"FieldA\": {}\n+                    data.put(caseField.getCaseFieldId(), objectNode);\n+                }\n+            });\n+\n+        return data;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIwNjI4OA=="}, "originalCommit": {"oid": "751e7f3eaecb19c5f6417443a9ee03483b447a67"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDk0MjE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/startevent/DefaultStartEventOperation.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTo1MDo0NFrOHiyIHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzo0MDoxOVrOHi-SIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIzNDkxMA==", "bodyText": "mmm isn't it a bit too late to set the default values in the operation classes? For example, when invoking a MidEvent callback CCD sends to the midevent callback the case data, here:\n\n  \n    \n      ccd-data-store-api/src/main/java/uk/gov/hmcts/ccd/domain/service/createevent/MidEventCallback.java\n    \n    \n         Line 69\n      in\n      80adc76\n    \n    \n    \n    \n\n        \n          \n           CaseDetails caseDetailsBefore = null; \n        \n    \n  \n\n\nWith this implementation the callback is not receiving the default value right?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1167#discussion_r506234910", "createdAt": "2020-10-16T09:50:44Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/startevent/DefaultStartEventOperation.java", "diffHunk": "@@ -1,10 +1,11 @@\n package uk.gov.hmcts.ccd.domain.service.startevent;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import com.google.common.collect.Maps;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "751e7f3eaecb19c5f6417443a9ee03483b447a67"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMwNDgyOQ==", "bodyText": "@mario-paniccia\nDo we need to worry about the mid event callback, as we default values will be populated in the about to start event callback already....", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1167#discussion_r506304829", "createdAt": "2020-10-16T11:12:18Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/startevent/DefaultStartEventOperation.java", "diffHunk": "@@ -1,10 +1,11 @@\n package uk.gov.hmcts.ccd.domain.service.startevent;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import com.google.common.collect.Maps;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIzNDkxMA=="}, "originalCommit": {"oid": "751e7f3eaecb19c5f6417443a9ee03483b447a67"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMzNDk3Mg==", "bodyText": "This thing is that the MidEven also sends the caseDetailsBefore fields, which should contain the case data before the modifications done in the event. Now, should that case data contain default values? In my opinion yes. If we say this fields is defaulted to a value, then in CCD that field has got that initial value.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1167#discussion_r506334972", "createdAt": "2020-10-16T11:50:38Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/startevent/DefaultStartEventOperation.java", "diffHunk": "@@ -1,10 +1,11 @@\n package uk.gov.hmcts.ccd.domain.service.startevent;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import com.google.common.collect.Maps;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIzNDkxMA=="}, "originalCommit": {"oid": "751e7f3eaecb19c5f6417443a9ee03483b447a67"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM1NzI1NQ==", "bodyText": "@rafalkalita let's ask Nigel please. It would also be ok for now to ignore this comment.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1167#discussion_r506357255", "createdAt": "2020-10-16T12:20:18Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/startevent/DefaultStartEventOperation.java", "diffHunk": "@@ -1,10 +1,11 @@\n package uk.gov.hmcts.ccd.domain.service.startevent;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import com.google.common.collect.Maps;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIzNDkxMA=="}, "originalCommit": {"oid": "751e7f3eaecb19c5f6417443a9ee03483b447a67"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQzNDA4MA==", "bodyText": "Nigel confirmed we do not need this: \"Defaults only work for start event so not for midevent\"", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1167#discussion_r506434080", "createdAt": "2020-10-16T13:40:19Z", "author": {"login": "rafalkalita"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/startevent/DefaultStartEventOperation.java", "diffHunk": "@@ -1,10 +1,11 @@\n package uk.gov.hmcts.ccd.domain.service.startevent;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import com.google.common.collect.Maps;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIzNDkxMA=="}, "originalCommit": {"oid": "751e7f3eaecb19c5f6417443a9ee03483b447a67"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDk5NDI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/startevent/DefaultStartEventOperation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTo1ODozNlrOHiyrUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMjoyNjowM1rOHi527g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI0MzkyMg==", "bodyText": "probably better having the CaseService create methods and get case methods setting the defaults? we could pass the whole caseTypeDefinition.\nThe idea is that all the operations use the CaseService class, and it's the service class the only one responsible for setting the defaults, rather than the various operations. This would eliminate potential bugs where we get the case from the service but forget to set the defaults. And would also reduce duplication", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1167#discussion_r506243922", "createdAt": "2020-10-16T09:58:36Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/startevent/DefaultStartEventOperation.java", "diffHunk": "@@ -76,12 +80,15 @@ public StartEventResult triggerStartForCaseType(final String caseTypeId,\n \n         final CaseTypeDefinition caseTypeDefinition = getCaseType(caseTypeId);\n \n+        final Map<String, JsonNode> data = Maps.newHashMap();\n+\n+        CaseDetails newCaseDetails = caseService\n+            .createNewCaseDetails(caseTypeId, caseTypeDefinition.getJurisdictionId(), data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "751e7f3eaecb19c5f6417443a9ee03483b447a67"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM2MTU4Mg==", "bodyText": "We can ignore this comment.\nRafal correctly pointed out that since we consider the defaulting a concept only related to events, it's ok to leave to the Operation the responsibility to do the defaulting, rather than the create methods and get case methods of the CaseService class. Because we don't want defaulting to apply every time a case is retrieved.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1167#discussion_r506361582", "createdAt": "2020-10-16T12:26:03Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/startevent/DefaultStartEventOperation.java", "diffHunk": "@@ -76,12 +80,15 @@ public StartEventResult triggerStartForCaseType(final String caseTypeId,\n \n         final CaseTypeDefinition caseTypeDefinition = getCaseType(caseTypeId);\n \n+        final Map<String, JsonNode> data = Maps.newHashMap();\n+\n+        CaseDetails newCaseDetails = caseService\n+            .createNewCaseDetails(caseTypeId, caseTypeDefinition.getJurisdictionId(), data);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI0MzkyMg=="}, "originalCommit": {"oid": "751e7f3eaecb19c5f6417443a9ee03483b447a67"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTAyODAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/startevent/DefaultStartEventOperation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDowMzozM1rOHizCHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMjoyNjoyOVrOHi54Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI0OTc1Nw==", "bodyText": "mmm perhaps line 99\nfinal CaseDetails caseDetails = getCaseDetails(caseReference);\nshould already return the case with the default values? We should change getCaseDetails to use the Service rather than the Repository directly, and have the CaseService dealing with defaulting", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1167#discussion_r506249757", "createdAt": "2020-10-16T10:03:33Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/startevent/DefaultStartEventOperation.java", "diffHunk": "@@ -99,6 +106,9 @@ public StartEventResult triggerStartForCase(final String caseReference,\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "751e7f3eaecb19c5f6417443a9ee03483b447a67"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM2MTg5OA==", "bodyText": "we can ignore this", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1167#discussion_r506361898", "createdAt": "2020-10-16T12:26:29Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/startevent/DefaultStartEventOperation.java", "diffHunk": "@@ -99,6 +106,9 @@ public StartEventResult triggerStartForCase(final String caseReference,\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI0OTc1Nw=="}, "originalCommit": {"oid": "751e7f3eaecb19c5f6417443a9ee03483b447a67"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTM3MDc1OnYy", "diffSide": "LEFT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMToxNjowN1rOHi2lYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTozODo1NFrOHjFqEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMwNzkzNw==", "bodyText": "We are just validating null value, what if user changes the OrgPolicyRole, that means if user enters any other value in this field, we need to check whether that case-role exists or not", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1167#discussion_r506307937", "createdAt": "2020-10-16T11:16:07Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "diffHunk": "@@ -98,12 +96,10 @@ private void validateContent(final CaseDataContent content,\n             int length = referenceArray.length;\n             String nodeReference = length > 1 ? referenceArray[length - 2] : referenceArray[length - 1];\n             List<JsonNode> parentNodes = caseFieldNode.findParents(nodeReference);\n-            parentNodes.stream().forEach(parentNode -> {\n+            parentNodes.forEach(parentNode -> {\n                 JsonNode orgPolicyNode = findOrgPolicyNode(nodeReference, parentNode, length);\n                 if (orgPolicyNode.isNull()) {\n                     errorList.add(caseFieldId + \" cannot have an empty value.\");\n-                } else if (!defaultValue.equalsIgnoreCase(orgPolicyNode.textValue())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "751e7f3eaecb19c5f6417443a9ee03483b447a67"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQzNDg4MA==", "bodyText": "Confirmed with Nigel we need it. Implementing.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1167#discussion_r506434880", "createdAt": "2020-10-16T13:41:03Z", "author": {"login": "rafalkalita"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "diffHunk": "@@ -98,12 +96,10 @@ private void validateContent(final CaseDataContent content,\n             int length = referenceArray.length;\n             String nodeReference = length > 1 ? referenceArray[length - 2] : referenceArray[length - 1];\n             List<JsonNode> parentNodes = caseFieldNode.findParents(nodeReference);\n-            parentNodes.stream().forEach(parentNode -> {\n+            parentNodes.forEach(parentNode -> {\n                 JsonNode orgPolicyNode = findOrgPolicyNode(nodeReference, parentNode, length);\n                 if (orgPolicyNode.isNull()) {\n                     errorList.add(caseFieldId + \" cannot have an empty value.\");\n-                } else if (!defaultValue.equalsIgnoreCase(orgPolicyNode.textValue())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMwNzkzNw=="}, "originalCommit": {"oid": "751e7f3eaecb19c5f6417443a9ee03483b447a67"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU1NDg5Ng==", "bodyText": "Done", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1167#discussion_r506554896", "createdAt": "2020-10-16T15:38:54Z", "author": {"login": "rafalkalita"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "diffHunk": "@@ -98,12 +96,10 @@ private void validateContent(final CaseDataContent content,\n             int length = referenceArray.length;\n             String nodeReference = length > 1 ? referenceArray[length - 2] : referenceArray[length - 1];\n             List<JsonNode> parentNodes = caseFieldNode.findParents(nodeReference);\n-            parentNodes.stream().forEach(parentNode -> {\n+            parentNodes.forEach(parentNode -> {\n                 JsonNode orgPolicyNode = findOrgPolicyNode(nodeReference, parentNode, length);\n                 if (orgPolicyNode.isNull()) {\n                     errorList.add(caseFieldId + \" cannot have an empty value.\");\n-                } else if (!defaultValue.equalsIgnoreCase(orgPolicyNode.textValue())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMwNzkzNw=="}, "originalCommit": {"oid": "751e7f3eaecb19c5f6417443a9ee03483b447a67"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTQ4MDQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/CaseEventDefinition.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTo0MDoxM1rOHi3u4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTozODo0MlrOHjFpNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMyNjc1NA==", "bodyText": "can we do this check before line 230", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1167#discussion_r506326754", "createdAt": "2020-10-16T11:40:13Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/CaseEventDefinition.java", "diffHunk": "@@ -205,4 +214,29 @@ public void setCanSaveDraft(Boolean canSaveDraft) {\n             .filter(f -> f.getCaseFieldId().equals(caseFieldId))\n             .findFirst();\n     }\n+\n+    public Map<String, JsonNode> buildJsonNodeFromCaseFieldsWithDefaultValue() {\n+        Map<String, JsonNode> data = new HashMap<>();\n+\n+        getCaseFields().forEach(\n+            caseField -> {\n+\n+                List<JsonNode> collect = caseField.getCaseEventFieldComplexDefinitions().stream()\n+                    .filter(e -> e.getDefaultValue() != null)\n+                    .filter(e -> !e.getReference().isBlank())\n+                    .map(caseEventFieldComplex -> JacksonUtils.buildFromDottedPath(caseEventFieldComplex.getReference(),\n+                                                                                   caseEventFieldComplex.getDefaultValue())).collect(toList());\n+\n+                ObjectNode objectNode = MAPPER.getNodeFactory().objectNode();\n+                collect.forEach(e -> {\n+                    String next = e.fieldNames().next();\n+                    objectNode.set(next, e.findValue(next));\n+                });\n+                if (!collect.isEmpty()) { // to prevent construct like \"FieldA\": {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "751e7f3eaecb19c5f6417443a9ee03483b447a67"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU1NDY3OA==", "bodyText": "done", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1167#discussion_r506554678", "createdAt": "2020-10-16T15:38:42Z", "author": {"login": "rafalkalita"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/CaseEventDefinition.java", "diffHunk": "@@ -205,4 +214,29 @@ public void setCanSaveDraft(Boolean canSaveDraft) {\n             .filter(f -> f.getCaseFieldId().equals(caseFieldId))\n             .findFirst();\n     }\n+\n+    public Map<String, JsonNode> buildJsonNodeFromCaseFieldsWithDefaultValue() {\n+        Map<String, JsonNode> data = new HashMap<>();\n+\n+        getCaseFields().forEach(\n+            caseField -> {\n+\n+                List<JsonNode> collect = caseField.getCaseEventFieldComplexDefinitions().stream()\n+                    .filter(e -> e.getDefaultValue() != null)\n+                    .filter(e -> !e.getReference().isBlank())\n+                    .map(caseEventFieldComplex -> JacksonUtils.buildFromDottedPath(caseEventFieldComplex.getReference(),\n+                                                                                   caseEventFieldComplex.getDefaultValue())).collect(toList());\n+\n+                ObjectNode objectNode = MAPPER.getNodeFactory().objectNode();\n+                collect.forEach(e -> {\n+                    String next = e.fieldNames().next();\n+                    objectNode.set(next, e.findValue(next));\n+                });\n+                if (!collect.isEmpty()) { // to prevent construct like \"FieldA\": {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMyNjc1NA=="}, "originalCommit": {"oid": "751e7f3eaecb19c5f6417443a9ee03483b447a67"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MjQ2NTE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNDozOTowNFrOHjCCSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNDozOTowNFrOHjCCSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ5NTU2MQ==", "bodyText": "Probably nothing to do with your PR @rafalkalita, but I just noticed that we are adding custom validation rules (for the organisation) in this class. But this class is a generic one! Why is a method like:\nprivate void validateOrganisationPolicy(String caseTypeId, CaseDataContent content) {\nhere?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1167#discussion_r506495561", "createdAt": "2020-10-16T14:39:04Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "diffHunk": "@@ -62,15 +69,15 @@ private void validateOrganisationPolicy(String caseTypeId, CaseDataContent conte\n         caseDefinitionRepository.getCaseType(caseTypeId)\n             .findCaseEvent(content.getEventId())\n             .ifPresent(caseEventDefinition -> caseEventDefinition.getCaseFields()\n-                .stream()\n                 .forEach(eventFieldDefinition -> eventFieldDefinition.getCaseEventFieldComplexDefinitions().stream()\n                     .filter(cefcDefinition -> isOrgPolicyCaseAssignedRole(cefcDefinition.getReference()))\n                     .forEach(cefcDefinition -> {\n                         String reference = cefcDefinition.getReference();\n-                        validateContent(content, eventFieldDefinition.getCaseFieldId(),\n-                            reference,\n-                            cefcDefinition.getDefaultValue(),\n-                            errorList);\n+                        validateContent(content,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74a519562bf74a3a20efe4866a5b5bd4516ebd28"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MjUxNjIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNDo0ODozNFrOHjCj-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNDo0ODozNFrOHjCj-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUwNDE4Nw==", "bodyText": "this is getting very complex....", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1167#discussion_r506504187", "createdAt": "2020-10-16T14:48:34Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "diffHunk": "@@ -62,15 +69,15 @@ private void validateOrganisationPolicy(String caseTypeId, CaseDataContent conte\n         caseDefinitionRepository.getCaseType(caseTypeId)\n             .findCaseEvent(content.getEventId())\n             .ifPresent(caseEventDefinition -> caseEventDefinition.getCaseFields()\n-                .stream()\n                 .forEach(eventFieldDefinition -> eventFieldDefinition.getCaseEventFieldComplexDefinitions().stream()\n                     .filter(cefcDefinition -> isOrgPolicyCaseAssignedRole(cefcDefinition.getReference()))\n                     .forEach(cefcDefinition -> {\n                         String reference = cefcDefinition.getReference();\n-                        validateContent(content, eventFieldDefinition.getCaseFieldId(),\n-                            reference,\n-                            cefcDefinition.getDefaultValue(),\n-                            errorList);\n+                        validateContent(content,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74a519562bf74a3a20efe4866a5b5bd4516ebd28"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3720, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}