{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NTE5OTc2", "number": 990, "title": "RDM-8782 Authorisation on fields", "bodyText": "JIRA link (if applicable)\nhttps://tools.hmcts.net/jira/browse/RDM-8782\nChange description\nfilter out results fields where there is insufficient access to the field\nDoes this PR introduce a breaking change? (check one with \"x\")\n[ ] Yes\n[X] No", "createdAt": "2020-06-23T11:54:18Z", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990", "merged": true, "mergeCommit": {"oid": "6dedaa368aa9d4597d711d2a25ff5fc7dc56edcd"}, "closed": true, "closedAt": "2020-07-01T14:20:09Z", "author": {"login": "RebeccaBaker"}, "timelineItems": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsvHv0gH2gAyNDM4NTE5OTc2OjllYzMyNzk2MGVkNDAwOTQ2ZjVhM2NmODJjNTFiZGE1OWE0MjZjMzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwXTv3AH2gAyNDM4NTE5OTc2OjI4N2Y5ZjVjNmQ3NTBkY2ZiMmZkMGI1NWZiMmM3NTBkMWMzNjQ1ODA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9ec327960ed400946f5a3cf82c51bda59a426c30", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/9ec327960ed400946f5a3cf82c51bda59a426c30", "committedDate": "2020-06-19T08:52:45Z", "message": "RDM-8782 Initial commit for filtering by authorisation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79ff8032dfdae64ef0816aca6552ed69c2aac7bc", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/79ff8032dfdae64ef0816aca6552ed69c2aac7bc", "committedDate": "2020-06-22T11:02:19Z", "message": "RDM-8782 updated logic and added test scenarios to be modified in the future"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99b726dca3d19afcff3cff62c3de79a73066838f", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/99b726dca3d19afcff3cff62c3de79a73066838f", "committedDate": "2020-06-22T11:06:22Z", "message": "Merge branch 'RDM-8325' into RDM-8782\n\n# Conflicts:\n#\tsrc/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java\n#\tsrc/test/java/uk/gov/hmcts/ccd/domain/service/aggregated/CaseSearchResultViewGeneratorTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d777df0cf3a97d5dd4bb38d3ae09940daf5e0f24", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/d777df0cf3a97d5dd4bb38d3ae09940daf5e0f24", "committedDate": "2020-06-23T11:52:52Z", "message": "RDM-8782 added integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8756a2275746d70d6354b47cbc5a7bec0478b983", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/8756a2275746d70d6354b47cbc5a7bec0478b983", "committedDate": "2020-06-23T12:07:28Z", "message": "RDM-8782 fixed unit tests and logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0069446eb4fe9ebad1c4f66bd407d84975e09fd", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/f0069446eb4fe9ebad1c4f66bd407d84975e09fd", "committedDate": "2020-06-23T12:09:23Z", "message": "RDM-8782 fixed checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddaad7d576a18aff3af06deb4d74c9a246e8db7d", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/ddaad7d576a18aff3af06deb4d74c9a246e8db7d", "committedDate": "2020-06-23T12:19:30Z", "message": "RDM-8782 fixed checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6dc761da3f5effd87b036510d2cff55713bc460c", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/6dc761da3f5effd87b036510d2cff55713bc460c", "committedDate": "2020-06-23T13:08:50Z", "message": "RDM-8782 disabled two tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6123d9ef931cb34cddf15d94e792add328489083", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/6123d9ef931cb34cddf15d94e792add328489083", "committedDate": "2020-06-23T13:22:13Z", "message": "RDM-8782 fixed test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4265aa09731463568f85d01e2f5db4fa3020480f", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/4265aa09731463568f85d01e2f5db4fa3020480f", "committedDate": "2020-06-23T13:55:46Z", "message": "RDM-8782 fixed tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c0414647b894b128cc7f1d7d7b6b38f8d152daa", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/0c0414647b894b128cc7f1d7d7b6b38f8d152daa", "committedDate": "2020-06-23T22:04:27Z", "message": "RDM-8782 fixed integration tests and refactored unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a58b78aab0ae8240ed2484adcdb4252bf9b45b8", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/1a58b78aab0ae8240ed2484adcdb4252bf9b45b8", "committedDate": "2020-06-23T22:11:25Z", "message": "RDM-8782 fixed checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4c56471921e44f95adaf2b101f179c1b5f4eed9", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/b4c56471921e44f95adaf2b101f179c1b5f4eed9", "committedDate": "2020-06-24T06:37:43Z", "message": "RDM-8782 fixed checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aba7e9f7e57c442e7e1353cef0380647c4509792", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/aba7e9f7e57c442e7e1353cef0380647c4509792", "committedDate": "2020-06-24T07:46:05Z", "message": "RDM-8782 fixed remaining tests and updated logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02fd8e76d54c498c018da8f109d2ea96cd565780", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/02fd8e76d54c498c018da8f109d2ea96cd565780", "committedDate": "2020-06-24T08:08:38Z", "message": "RDM-8782 fixed remaining tests and updated logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba5c0368ca73de7ca7ec77bd1f8b63998e7f3da2", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/ba5c0368ca73de7ca7ec77bd1f8b63998e7f3da2", "committedDate": "2020-06-24T08:31:03Z", "message": "RDM-8782 fixed sonar issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NTI2MDIz", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#pullrequestreview-436526023", "createdAt": "2020-06-24T10:36:33Z", "commit": {"oid": "ba5c0368ca73de7ca7ec77bd1f8b63998e7f3da2"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDozNjozM1rOGoMlUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMToyMDoyNVrOGoN3jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgwMjM4NA==", "bodyText": "This method is a bit complex (Sonar also mentions this) - adding some comments in the method itself with suggestions.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r444802384", "createdAt": "2020-06-24T10:36:33Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -70,16 +75,86 @@ private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerG\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n         // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n+            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition));\n+        });\n         return items;\n     }\n \n-    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId,\n-                                                           String useCase,\n-                                                           CaseSearchResult caseSearchResult,\n-                                                           List<String> requestedFields) {\n+    private CaseDetails filterResultsByAuthorisationAndUserRole(String useCase, CaseDetails caseDetails, String caseTypeId, List<String> requestedFields) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba5c0368ca73de7ca7ec77bd1f8b63998e7f3da2"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgwNTEwNw==", "bodyText": "This could be simplified by replacing the while loop with a Stream e.g.\ncaseDetails.getData().entrySet().stream()\n    .filter(entry -> newMethodThatDealsWithThisCodeBlock(....))\n    ...", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r444805107", "createdAt": "2020-06-24T10:42:19Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -70,16 +75,86 @@ private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerG\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n         // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n+            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition));\n+        });\n         return items;\n     }\n \n-    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId,\n-                                                           String useCase,\n-                                                           CaseSearchResult caseSearchResult,\n-                                                           List<String> requestedFields) {\n+    private CaseDetails filterResultsByAuthorisationAndUserRole(String useCase, CaseDetails caseDetails, String caseTypeId, List<String> requestedFields) {\n+        Set<String> roles = userRepository.getUserRoles();\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n+        HashMap<String, String> searchFields = getSearchResultDefinitionFieldUserRoleAndField(searchResultDefinition);\n+\n+        Iterator<String> caseFieldsUseCase = caseDetails.getData().keySet().iterator();\n+        while (caseFieldsUseCase.hasNext()) {\n+            Object caseField = caseFieldsUseCase.next();\n+            if (useCase != null) {\n+                if (!searchFields.containsKey(caseField)) {\n+                    caseFieldsUseCase.remove();\n+                    caseField = null;\n+                }\n+                String role = searchFields.get(caseField);\n+                if (role != null && !roles.contains(role)) {\n+                    caseFieldsUseCase.remove();\n+                    caseField = null;\n+\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba5c0368ca73de7ca7ec77bd1f8b63998e7f3da2"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgwNTIzNA==", "bodyText": "This could be a second .filter()", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r444805234", "createdAt": "2020-06-24T10:42:36Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -70,16 +75,86 @@ private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerG\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n         // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n+            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition));\n+        });\n         return items;\n     }\n \n-    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId,\n-                                                           String useCase,\n-                                                           CaseSearchResult caseSearchResult,\n-                                                           List<String> requestedFields) {\n+    private CaseDetails filterResultsByAuthorisationAndUserRole(String useCase, CaseDetails caseDetails, String caseTypeId, List<String> requestedFields) {\n+        Set<String> roles = userRepository.getUserRoles();\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n+        HashMap<String, String> searchFields = getSearchResultDefinitionFieldUserRoleAndField(searchResultDefinition);\n+\n+        Iterator<String> caseFieldsUseCase = caseDetails.getData().keySet().iterator();\n+        while (caseFieldsUseCase.hasNext()) {\n+            Object caseField = caseFieldsUseCase.next();\n+            if (useCase != null) {\n+                if (!searchFields.containsKey(caseField)) {\n+                    caseFieldsUseCase.remove();\n+                    caseField = null;\n+                }\n+                String role = searchFields.get(caseField);\n+                if (role != null && !roles.contains(role)) {\n+                    caseFieldsUseCase.remove();\n+                    caseField = null;\n+\n+                }\n+            }\n+            if (caseField != null) {\n+                Optional<CaseFieldDefinition> caseFieldDefinition = caseTypeDefinition.getCaseField(caseField.toString());\n+                if (caseFieldDefinition.isPresent() && caseFieldDefinition.get().isComplexFieldType()) {\n+                    if (!filterResultsByAuthorisationAccess(caseFieldDefinition)) {\n+                        caseFieldsUseCase.remove();\n+                    }\n+                } else {\n+                    if (!accessControlService.canAccessCaseFieldsWithCriteria(\n+                        JacksonUtils.convertValueJsonNode(caseField),\n+                        caseTypeDefinition.getCaseFieldDefinitions(),\n+                        roles,\n+                        CAN_READ)) {\n+                        caseFieldsUseCase.remove();\n+                    }\n+                }\n+\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba5c0368ca73de7ca7ec77bd1f8b63998e7f3da2"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgwNzcxNQ==", "bodyText": "isPresent() has been checked so we can pass in the value to the method and its argument no longer needs to be Optional (removing one of the Sonar complaints).\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (!filterResultsByAuthorisationAccess(caseFieldDefinition)) {\n          \n          \n            \n                                if (!filterResultsByAuthorisationAccess(caseFieldDefinition.get())) {", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r444807715", "createdAt": "2020-06-24T10:47:55Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -70,16 +75,86 @@ private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerG\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n         // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n+            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition));\n+        });\n         return items;\n     }\n \n-    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId,\n-                                                           String useCase,\n-                                                           CaseSearchResult caseSearchResult,\n-                                                           List<String> requestedFields) {\n+    private CaseDetails filterResultsByAuthorisationAndUserRole(String useCase, CaseDetails caseDetails, String caseTypeId, List<String> requestedFields) {\n+        Set<String> roles = userRepository.getUserRoles();\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n+        HashMap<String, String> searchFields = getSearchResultDefinitionFieldUserRoleAndField(searchResultDefinition);\n+\n+        Iterator<String> caseFieldsUseCase = caseDetails.getData().keySet().iterator();\n+        while (caseFieldsUseCase.hasNext()) {\n+            Object caseField = caseFieldsUseCase.next();\n+            if (useCase != null) {\n+                if (!searchFields.containsKey(caseField)) {\n+                    caseFieldsUseCase.remove();\n+                    caseField = null;\n+                }\n+                String role = searchFields.get(caseField);\n+                if (role != null && !roles.contains(role)) {\n+                    caseFieldsUseCase.remove();\n+                    caseField = null;\n+\n+                }\n+            }\n+            if (caseField != null) {\n+                Optional<CaseFieldDefinition> caseFieldDefinition = caseTypeDefinition.getCaseField(caseField.toString());\n+                if (caseFieldDefinition.isPresent() && caseFieldDefinition.get().isComplexFieldType()) {\n+                    if (!filterResultsByAuthorisationAccess(caseFieldDefinition)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba5c0368ca73de7ca7ec77bd1f8b63998e7f3da2"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgwODY1MA==", "bodyText": "Does this work for all scenarios? Since caseField is an Object but getCaseField() expects the field ID.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r444808650", "createdAt": "2020-06-24T10:49:56Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -70,16 +75,86 @@ private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerG\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n         // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n+            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition));\n+        });\n         return items;\n     }\n \n-    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId,\n-                                                           String useCase,\n-                                                           CaseSearchResult caseSearchResult,\n-                                                           List<String> requestedFields) {\n+    private CaseDetails filterResultsByAuthorisationAndUserRole(String useCase, CaseDetails caseDetails, String caseTypeId, List<String> requestedFields) {\n+        Set<String> roles = userRepository.getUserRoles();\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n+        HashMap<String, String> searchFields = getSearchResultDefinitionFieldUserRoleAndField(searchResultDefinition);\n+\n+        Iterator<String> caseFieldsUseCase = caseDetails.getData().keySet().iterator();\n+        while (caseFieldsUseCase.hasNext()) {\n+            Object caseField = caseFieldsUseCase.next();\n+            if (useCase != null) {\n+                if (!searchFields.containsKey(caseField)) {\n+                    caseFieldsUseCase.remove();\n+                    caseField = null;\n+                }\n+                String role = searchFields.get(caseField);\n+                if (role != null && !roles.contains(role)) {\n+                    caseFieldsUseCase.remove();\n+                    caseField = null;\n+\n+                }\n+            }\n+            if (caseField != null) {\n+                Optional<CaseFieldDefinition> caseFieldDefinition = caseTypeDefinition.getCaseField(caseField.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba5c0368ca73de7ca7ec77bd1f8b63998e7f3da2"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgxMTc1MQ==", "bodyText": "Could consider making use of the existing method CaseFieldDefinition.getAccessControlListByRole() in here (would need to be made public, and think then looping through roles could be simpler.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r444811751", "createdAt": "2020-06-24T10:56:14Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -70,16 +75,86 @@ private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerG\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n         // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n+            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition));\n+        });\n         return items;\n     }\n \n-    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId,\n-                                                           String useCase,\n-                                                           CaseSearchResult caseSearchResult,\n-                                                           List<String> requestedFields) {\n+    private CaseDetails filterResultsByAuthorisationAndUserRole(String useCase, CaseDetails caseDetails, String caseTypeId, List<String> requestedFields) {\n+        Set<String> roles = userRepository.getUserRoles();\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n+        HashMap<String, String> searchFields = getSearchResultDefinitionFieldUserRoleAndField(searchResultDefinition);\n+\n+        Iterator<String> caseFieldsUseCase = caseDetails.getData().keySet().iterator();\n+        while (caseFieldsUseCase.hasNext()) {\n+            Object caseField = caseFieldsUseCase.next();\n+            if (useCase != null) {\n+                if (!searchFields.containsKey(caseField)) {\n+                    caseFieldsUseCase.remove();\n+                    caseField = null;\n+                }\n+                String role = searchFields.get(caseField);\n+                if (role != null && !roles.contains(role)) {\n+                    caseFieldsUseCase.remove();\n+                    caseField = null;\n+\n+                }\n+            }\n+            if (caseField != null) {\n+                Optional<CaseFieldDefinition> caseFieldDefinition = caseTypeDefinition.getCaseField(caseField.toString());\n+                if (caseFieldDefinition.isPresent() && caseFieldDefinition.get().isComplexFieldType()) {\n+                    if (!filterResultsByAuthorisationAccess(caseFieldDefinition)) {\n+                        caseFieldsUseCase.remove();\n+                    }\n+                } else {\n+                    if (!accessControlService.canAccessCaseFieldsWithCriteria(\n+                        JacksonUtils.convertValueJsonNode(caseField),\n+                        caseTypeDefinition.getCaseFieldDefinitions(),\n+                        roles,\n+                        CAN_READ)) {\n+                        caseFieldsUseCase.remove();\n+                    }\n+                }\n+\n+            }\n+\n+        }\n+        return caseDetails;\n+    }\n+\n+    private Boolean filterResultsByAuthorisationAccess(Optional<CaseFieldDefinition> caseFieldDefinition) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba5c0368ca73de7ca7ec77bd1f8b63998e7f3da2"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgxOTU2NQ==", "bodyText": "Requires testing but I think can be simplified to something like this?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (caseFieldDefinition.isPresent()) {\n          \n          \n            \n                        List<AccessControlList> accessControlLists = caseFieldDefinition.get().getAccessControlLists();\n          \n          \n            \n                        Set<String> roles = userRepository.getUserRoles();\n          \n          \n            \n                        if (!caseFieldDefinition.get().isMetadata()) {\n          \n          \n            \n                            for (AccessControlList accessControlList : accessControlLists) {\n          \n          \n            \n                                for (String role : roles) {\n          \n          \n            \n                                    if (accessControlList.getRole().equals(role)) {\n          \n          \n            \n                                        return accessControlList.isRead();\n          \n          \n            \n                                    }\n          \n          \n            \n                                }\n          \n          \n            \n                            }\n          \n          \n            \n                            return false;\n          \n          \n            \n                        }\n          \n          \n            \n                        return true;\n          \n          \n            \n                    }\n          \n          \n            \n                    return false;\n          \n          \n            \n                    if (!caseFieldDefinition.isMetadata()) {\n          \n          \n            \n                        return userRepository.getUserRoles().stream()\n          \n          \n            \n                            .anyMatch(role -> caseFieldDefinition.getAccessControlListByRole(role).map(AccessControlList::isRead).orElse(false));\n          \n          \n            \n                    }\n          \n          \n            \n                    return true;", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r444819565", "createdAt": "2020-06-24T11:12:13Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -70,16 +75,86 @@ private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerG\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n         // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n+            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition));\n+        });\n         return items;\n     }\n \n-    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId,\n-                                                           String useCase,\n-                                                           CaseSearchResult caseSearchResult,\n-                                                           List<String> requestedFields) {\n+    private CaseDetails filterResultsByAuthorisationAndUserRole(String useCase, CaseDetails caseDetails, String caseTypeId, List<String> requestedFields) {\n+        Set<String> roles = userRepository.getUserRoles();\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n+        HashMap<String, String> searchFields = getSearchResultDefinitionFieldUserRoleAndField(searchResultDefinition);\n+\n+        Iterator<String> caseFieldsUseCase = caseDetails.getData().keySet().iterator();\n+        while (caseFieldsUseCase.hasNext()) {\n+            Object caseField = caseFieldsUseCase.next();\n+            if (useCase != null) {\n+                if (!searchFields.containsKey(caseField)) {\n+                    caseFieldsUseCase.remove();\n+                    caseField = null;\n+                }\n+                String role = searchFields.get(caseField);\n+                if (role != null && !roles.contains(role)) {\n+                    caseFieldsUseCase.remove();\n+                    caseField = null;\n+\n+                }\n+            }\n+            if (caseField != null) {\n+                Optional<CaseFieldDefinition> caseFieldDefinition = caseTypeDefinition.getCaseField(caseField.toString());\n+                if (caseFieldDefinition.isPresent() && caseFieldDefinition.get().isComplexFieldType()) {\n+                    if (!filterResultsByAuthorisationAccess(caseFieldDefinition)) {\n+                        caseFieldsUseCase.remove();\n+                    }\n+                } else {\n+                    if (!accessControlService.canAccessCaseFieldsWithCriteria(\n+                        JacksonUtils.convertValueJsonNode(caseField),\n+                        caseTypeDefinition.getCaseFieldDefinitions(),\n+                        roles,\n+                        CAN_READ)) {\n+                        caseFieldsUseCase.remove();\n+                    }\n+                }\n+\n+            }\n+\n+        }\n+        return caseDetails;\n+    }\n+\n+    private Boolean filterResultsByAuthorisationAccess(Optional<CaseFieldDefinition> caseFieldDefinition) {\n+        if (caseFieldDefinition.isPresent()) {\n+            List<AccessControlList> accessControlLists = caseFieldDefinition.get().getAccessControlLists();\n+            Set<String> roles = userRepository.getUserRoles();\n+            if (!caseFieldDefinition.get().isMetadata()) {\n+                for (AccessControlList accessControlList : accessControlLists) {\n+                    for (String role : roles) {\n+                        if (accessControlList.getRole().equals(role)) {\n+                            return accessControlList.isRead();\n+                        }\n+                    }\n+                }\n+                return false;\n+            }\n+            return true;\n+        }\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba5c0368ca73de7ca7ec77bd1f8b63998e7f3da2"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyMTk5Mw==", "bodyText": "Can delete this method by refactoring the earlier one?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r444821993", "createdAt": "2020-06-24T11:17:19Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -112,15 +188,33 @@ private SearchResultViewHeaderGroup buildHeader(String useCase,\n                                                                       SearchResult searchResult) {\n         HashSet<String> addedFields = new HashSet<>();\n \n+        // Only one case type is currently supported so we can reuse the same definitions for building all items\n         return Arrays.stream(searchResult.getFields())\n             .flatMap(searchResultField -> caseTypeDefinition.getCaseFieldDefinitions().stream()\n                 .filter(caseField -> caseField.getId().equals(searchResultField.getCaseFieldId()))\n                 .filter(caseField -> filterDistinctFieldsByRole(addedFields, searchResultField))\n+                .filter(caseField -> filterResultsByAuthorisation(caseField))\n                 .map(caseField -> buildSearchResultViewColumn(searchResultField, caseField))\n             )\n             .collect(Collectors.toList());\n     }\n \n+    private Boolean filterResultsByAuthorisation(CaseFieldDefinition caseFieldDefinition) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba5c0368ca73de7ca7ec77bd1f8b63998e7f3da2"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyMzQzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import org.junit.*;", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r444823438", "createdAt": "2020-06-24T11:20:25Z", "author": {"login": "danlysiak"}, "path": "src/test/java/uk/gov/hmcts/ccd/v2/internal/controller/UICaseSearchControllerIT.java", "diffHunk": "@@ -2,14 +2,15 @@\n \n import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.JsonNode;\n-import org.junit.jupiter.api.BeforeEach;\n+import org.junit.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba5c0368ca73de7ca7ec77bd1f8b63998e7f3da2"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a49140aba2035d10a6bc4479c021e702d79aa3c", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/5a49140aba2035d10a6bc4479c021e702d79aa3c", "committedDate": "2020-06-25T14:10:26Z", "message": "RDM-8782 fixed issues on checking security classification and added role testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "493e5b516806c041e2cdd23111b1368bfe2896aa", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/493e5b516806c041e2cdd23111b1368bfe2896aa", "committedDate": "2020-06-26T11:52:25Z", "message": "RDM-8782 actioned review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4b80c5f5778b9d9f11197e735c8db530bc0e14d", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/b4b80c5f5778b9d9f11197e735c8db530bc0e14d", "committedDate": "2020-06-26T11:56:20Z", "message": "RDM-8782 added assert on field size to ensure only meta data is returned"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c2a4a75ab1f557bf77be37050c9be85f1ec3a0d", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/7c2a4a75ab1f557bf77be37050c9be85f1ec3a0d", "committedDate": "2020-06-26T11:59:13Z", "message": "RDM-8782 fixed checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/8cb22f8cef6938147363854b0e4e7d4b870bc8c8", "committedDate": "2020-06-26T12:03:06Z", "message": "RDM-8782 removed unused class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MjM5NzQw", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#pullrequestreview-438239740", "createdAt": "2020-06-26T12:05:05Z", "commit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4Mzc3MTcx", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#pullrequestreview-438377171", "createdAt": "2020-06-26T15:11:33Z", "commit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToxMTozM1rOGpkkuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToxMTozM1rOGpkkuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0NDAyNw==", "bodyText": "I know it's not part of your code changes but can we please rename SearchResult to SearchResultDefinition? We are trying to have all definition objects classes in DataStore end with Definition suffix", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r446244027", "createdAt": "2020-06-26T15:11:33Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -61,25 +64,78 @@ public CaseSearchResultView execute(String caseTypeId,\n \n     private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerGroups) {\n         return headerGroups.size() == 1\n-               && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n+            && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n     }\n \n     private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult, String caseTypeId, List<String> requestedFields) {\n         CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n         SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MzgwMjk1", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#pullrequestreview-438380295", "createdAt": "2020-06-26T15:15:24Z", "commit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToxNToyNFrOGpkt2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToxNToyNFrOGpkt2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0NjM2MQ==", "bodyText": "I'd suggest we introduce a new dedicated class called CaseSearchesViewAccessControl or similar, and move all the access control code added to this class in there. This will help reduce the complexity of this class which is otherwise growing too much. It would also be better in terms of separation of concerns", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r446246361", "createdAt": "2020-06-26T15:15:24Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -61,25 +64,78 @@ public CaseSearchResultView execute(String caseTypeId,\n \n     private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerGroups) {\n         return headerGroups.size() == 1\n-               && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n+            && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n     }\n \n     private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult, String caseTypeId, List<String> requestedFields) {\n         CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n         SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n-        // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4Mzg0NDI5", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#pullrequestreview-438384429", "createdAt": "2020-06-26T15:20:44Z", "commit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToyMDo0NFrOGpk5Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToyMDo0NFrOGpk5Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0OTMwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n          \n          \n            \n                        filterUnauthorisedFieldsByUseCaseAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r446249303", "createdAt": "2020-06-26T15:20:44Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -61,25 +64,78 @@ public CaseSearchResultView execute(String caseTypeId,\n \n     private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerGroups) {\n         return headerGroups.size() == 1\n-               && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n+            && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n     }\n \n     private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult, String caseTypeId, List<String> requestedFields) {\n         CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n         SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n-        // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4OTcwNzE4", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#pullrequestreview-438970718", "createdAt": "2020-06-29T08:02:21Z", "commit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODowMjoyMVrOGqJGpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODowMjoyMVrOGqJGpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0MjUzMg==", "bodyText": "here we are applying access control based on the CRUD coming from the AuthorizationCaseField definition tab right? if yes, then this should be done in the external search API, not the internal", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r446842532", "createdAt": "2020-06-29T08:02:21Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -61,25 +64,78 @@ public CaseSearchResultView execute(String caseTypeId,\n \n     private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerGroups) {\n         return headerGroups.size() == 1\n-               && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n+            && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n     }\n \n     private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult, String caseTypeId, List<String> requestedFields) {\n         CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n         SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n-        // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n+            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition));\n+        });\n         return items;\n     }\n \n-    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId,\n-                                                           String useCase,\n-                                                           CaseSearchResult caseSearchResult,\n-                                                           List<String> requestedFields) {\n+    private CaseDetails filterResultsByAuthorisationAndUserRole(String useCase, CaseDetails caseDetails, String caseTypeId, List<String> requestedFields) {\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        caseDetails.getData().entrySet().removeIf(\n+            caseField -> {\n+                Optional<CaseFieldDefinition> caseFieldDefinition = caseTypeDefinition.getCaseField(caseField.getKey());\n+                return !filterResultsBySearchResultsDefinition(useCase, caseTypeId, requestedFields, caseField.getKey())\n+                    || !filterResultsByAuthorisationAccessOnField(caseFieldDefinition.get());\n+            });\n+        return caseDetails;\n+    }\n+\n+\n+    private Boolean filterResultsBySearchResultsDefinition(String useCase, String caseTypeId, List<String> requestedFields, String caseFieldId) {\n+        Set<String> roles = userRepository.getUserRoles();\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n+        HashMap<String, String> searchFields = getSearchResultDefinitionFieldUserRoleAndField(searchResultDefinition);\n+\n+        if (useCase != null) {\n+            if (!searchFields.containsKey(caseFieldId)) {\n+                return false;\n+            }\n+            String role = searchFields.get(caseFieldId);\n+            if (role != null && !roles.contains(role)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private Boolean filterResultsByAuthorisationAccessOnField(CaseFieldDefinition caseFieldDefinition) {\n+        if (!caseFieldDefinition.isMetadata()) {\n+            return userRepository.getUserRoles().stream()\n+                .anyMatch(role -> caseFieldDefinition.getAccessControlListByRole(role).map(AccessControlList::isRead).orElse(false));\n+        }\n+        return true;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "originalPosition": 123}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4OTc0NzQw", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#pullrequestreview-438974740", "createdAt": "2020-06-29T08:08:16Z", "commit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODowODoxNlrOGqJS8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODowODoxNlrOGqJS8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0NTY4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                || !filterResultsByAuthorisationAccessOnField(caseFieldDefinition.get());\n          \n          \n            \n                                || !filterFieldByAuthorisationAccessOnField(caseFieldDefinition.get());", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r446845682", "createdAt": "2020-06-29T08:08:16Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -61,25 +64,78 @@ public CaseSearchResultView execute(String caseTypeId,\n \n     private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerGroups) {\n         return headerGroups.size() == 1\n-               && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n+            && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n     }\n \n     private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult, String caseTypeId, List<String> requestedFields) {\n         CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n         SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n-        // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n+            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition));\n+        });\n         return items;\n     }\n \n-    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId,\n-                                                           String useCase,\n-                                                           CaseSearchResult caseSearchResult,\n-                                                           List<String> requestedFields) {\n+    private CaseDetails filterResultsByAuthorisationAndUserRole(String useCase, CaseDetails caseDetails, String caseTypeId, List<String> requestedFields) {\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        caseDetails.getData().entrySet().removeIf(\n+            caseField -> {\n+                Optional<CaseFieldDefinition> caseFieldDefinition = caseTypeDefinition.getCaseField(caseField.getKey());\n+                return !filterResultsBySearchResultsDefinition(useCase, caseTypeId, requestedFields, caseField.getKey())\n+                    || !filterResultsByAuthorisationAccessOnField(caseFieldDefinition.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4OTc5MjA5", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#pullrequestreview-438979209", "createdAt": "2020-06-29T08:14:48Z", "commit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODoxNDo0OFrOGqJgsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODoxNDo0OFrOGqJgsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0OTIwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    HashMap<String, String> fields = new HashMap<>();\n          \n          \n            \n                    Map<String, String> fields = new HashMap<>();", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r446849201", "createdAt": "2020-06-29T08:14:48Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -61,25 +64,78 @@ public CaseSearchResultView execute(String caseTypeId,\n \n     private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerGroups) {\n         return headerGroups.size() == 1\n-               && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n+            && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n     }\n \n     private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult, String caseTypeId, List<String> requestedFields) {\n         CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n         SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n-        // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n+            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition));\n+        });\n         return items;\n     }\n \n-    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId,\n-                                                           String useCase,\n-                                                           CaseSearchResult caseSearchResult,\n-                                                           List<String> requestedFields) {\n+    private CaseDetails filterResultsByAuthorisationAndUserRole(String useCase, CaseDetails caseDetails, String caseTypeId, List<String> requestedFields) {\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        caseDetails.getData().entrySet().removeIf(\n+            caseField -> {\n+                Optional<CaseFieldDefinition> caseFieldDefinition = caseTypeDefinition.getCaseField(caseField.getKey());\n+                return !filterResultsBySearchResultsDefinition(useCase, caseTypeId, requestedFields, caseField.getKey())\n+                    || !filterResultsByAuthorisationAccessOnField(caseFieldDefinition.get());\n+            });\n+        return caseDetails;\n+    }\n+\n+\n+    private Boolean filterResultsBySearchResultsDefinition(String useCase, String caseTypeId, List<String> requestedFields, String caseFieldId) {\n+        Set<String> roles = userRepository.getUserRoles();\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n+        HashMap<String, String> searchFields = getSearchResultDefinitionFieldUserRoleAndField(searchResultDefinition);\n+\n+        if (useCase != null) {\n+            if (!searchFields.containsKey(caseFieldId)) {\n+                return false;\n+            }\n+            String role = searchFields.get(caseFieldId);\n+            if (role != null && !roles.contains(role)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private Boolean filterResultsByAuthorisationAccessOnField(CaseFieldDefinition caseFieldDefinition) {\n+        if (!caseFieldDefinition.isMetadata()) {\n+            return userRepository.getUserRoles().stream()\n+                .anyMatch(role -> caseFieldDefinition.getAccessControlListByRole(role).map(AccessControlList::isRead).orElse(false));\n+        }\n+        return true;\n+    }\n+\n+    private Boolean filterResultsBySecurityClassification(CaseFieldDefinition caseFieldDefinition,\n+                                                          CaseTypeDefinition caseTypeDefinition) {\n+        return securityClassificationService.userHasEnoughSecurityClassificationForField(caseTypeDefinition.getJurisdictionId(),\n+            caseTypeDefinition,\n+            caseFieldDefinition.getId());\n+\n+    }\n+\n+    private HashMap<String, String> getSearchResultDefinitionFieldUserRoleAndField(SearchResult searchResultDefinition) {\n+        HashMap<String, String> fields = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "originalPosition": 134}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4OTgwNzA1", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#pullrequestreview-438980705", "createdAt": "2020-06-29T08:16:55Z", "commit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODoxNjo1NVrOGqJlcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODoxNjo1NVrOGqJlcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1MDQxNw==", "bodyText": "can we move this method to SearchResult itself please. We could also rename it to getFieldsUserRoles or sim", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r446850417", "createdAt": "2020-06-29T08:16:55Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -61,25 +64,78 @@ public CaseSearchResultView execute(String caseTypeId,\n \n     private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerGroups) {\n         return headerGroups.size() == 1\n-               && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n+            && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n     }\n \n     private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult, String caseTypeId, List<String> requestedFields) {\n         CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n         SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n-        // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n+            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition));\n+        });\n         return items;\n     }\n \n-    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId,\n-                                                           String useCase,\n-                                                           CaseSearchResult caseSearchResult,\n-                                                           List<String> requestedFields) {\n+    private CaseDetails filterResultsByAuthorisationAndUserRole(String useCase, CaseDetails caseDetails, String caseTypeId, List<String> requestedFields) {\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        caseDetails.getData().entrySet().removeIf(\n+            caseField -> {\n+                Optional<CaseFieldDefinition> caseFieldDefinition = caseTypeDefinition.getCaseField(caseField.getKey());\n+                return !filterResultsBySearchResultsDefinition(useCase, caseTypeId, requestedFields, caseField.getKey())\n+                    || !filterResultsByAuthorisationAccessOnField(caseFieldDefinition.get());\n+            });\n+        return caseDetails;\n+    }\n+\n+\n+    private Boolean filterResultsBySearchResultsDefinition(String useCase, String caseTypeId, List<String> requestedFields, String caseFieldId) {\n+        Set<String> roles = userRepository.getUserRoles();\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n+        HashMap<String, String> searchFields = getSearchResultDefinitionFieldUserRoleAndField(searchResultDefinition);\n+\n+        if (useCase != null) {\n+            if (!searchFields.containsKey(caseFieldId)) {\n+                return false;\n+            }\n+            String role = searchFields.get(caseFieldId);\n+            if (role != null && !roles.contains(role)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private Boolean filterResultsByAuthorisationAccessOnField(CaseFieldDefinition caseFieldDefinition) {\n+        if (!caseFieldDefinition.isMetadata()) {\n+            return userRepository.getUserRoles().stream()\n+                .anyMatch(role -> caseFieldDefinition.getAccessControlListByRole(role).map(AccessControlList::isRead).orElse(false));\n+        }\n+        return true;\n+    }\n+\n+    private Boolean filterResultsBySecurityClassification(CaseFieldDefinition caseFieldDefinition,\n+                                                          CaseTypeDefinition caseTypeDefinition) {\n+        return securityClassificationService.userHasEnoughSecurityClassificationForField(caseTypeDefinition.getJurisdictionId(),\n+            caseTypeDefinition,\n+            caseFieldDefinition.getId());\n+\n+    }\n+\n+    private HashMap<String, String> getSearchResultDefinitionFieldUserRoleAndField(SearchResult searchResultDefinition) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "originalPosition": 133}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4OTg0Nzc3", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#pullrequestreview-438984777", "createdAt": "2020-06-29T08:22:40Z", "commit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODoyMjo0MFrOGqJxzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODoyMjo0MFrOGqJxzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1MzU4Mg==", "bodyText": "just to double check, do we have a test verifying this works for nested fields specified with a path?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r446853582", "createdAt": "2020-06-29T08:22:40Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -61,25 +64,78 @@ public CaseSearchResultView execute(String caseTypeId,\n \n     private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerGroups) {\n         return headerGroups.size() == 1\n-               && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n+            && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n     }\n \n     private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult, String caseTypeId, List<String> requestedFields) {\n         CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n         SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n-        // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n+            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition));\n+        });\n         return items;\n     }\n \n-    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId,\n-                                                           String useCase,\n-                                                           CaseSearchResult caseSearchResult,\n-                                                           List<String> requestedFields) {\n+    private CaseDetails filterResultsByAuthorisationAndUserRole(String useCase, CaseDetails caseDetails, String caseTypeId, List<String> requestedFields) {\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        caseDetails.getData().entrySet().removeIf(\n+            caseField -> {\n+                Optional<CaseFieldDefinition> caseFieldDefinition = caseTypeDefinition.getCaseField(caseField.getKey());\n+                return !filterResultsBySearchResultsDefinition(useCase, caseTypeId, requestedFields, caseField.getKey())\n+                    || !filterResultsByAuthorisationAccessOnField(caseFieldDefinition.get());\n+            });\n+        return caseDetails;\n+    }\n+\n+\n+    private Boolean filterResultsBySearchResultsDefinition(String useCase, String caseTypeId, List<String> requestedFields, String caseFieldId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4OTg2OTIw", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#pullrequestreview-438986920", "createdAt": "2020-06-29T08:25:34Z", "commit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODoyNTozNFrOGqJ4mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODoyNTozNFrOGqJ4mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1NTMyMg==", "bodyText": "minor, as an alternative we could add 2 methods to SearchResult itself, fieldExists(...) and fieldHasRole(...) or similar.\nOr, another approach as well, see comment further down", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r446855322", "createdAt": "2020-06-29T08:25:34Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultViewGenerator.java", "diffHunk": "@@ -61,25 +64,78 @@ public CaseSearchResultView execute(String caseTypeId,\n \n     private boolean itemsRequireFormatting(List<SearchResultViewHeaderGroup> headerGroups) {\n         return headerGroups.size() == 1\n-               && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n+            && headerGroups.get(0).getFields().stream().anyMatch(field -> field.getDisplayContextParameter() != null);\n     }\n \n     private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult, String caseTypeId, List<String> requestedFields) {\n         CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n         SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n \n         List<SearchResultViewItem> items = new ArrayList<>();\n-        // Only one case type is currently supported so we can reuse the same definitions for building all items\n-        caseSearchResult.getCases().forEach(caseDetails ->\n-            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition)));\n-\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            filterResultsByAuthorisationAndUserRole(useCase, caseDetails, caseTypeId, requestedFields);\n+            items.add(buildSearchResultViewItem(caseDetails, caseTypeDefinition, searchResultDefinition));\n+        });\n         return items;\n     }\n \n-    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId,\n-                                                           String useCase,\n-                                                           CaseSearchResult caseSearchResult,\n-                                                           List<String> requestedFields) {\n+    private CaseDetails filterResultsByAuthorisationAndUserRole(String useCase, CaseDetails caseDetails, String caseTypeId, List<String> requestedFields) {\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        caseDetails.getData().entrySet().removeIf(\n+            caseField -> {\n+                Optional<CaseFieldDefinition> caseFieldDefinition = caseTypeDefinition.getCaseField(caseField.getKey());\n+                return !filterResultsBySearchResultsDefinition(useCase, caseTypeId, requestedFields, caseField.getKey())\n+                    || !filterResultsByAuthorisationAccessOnField(caseFieldDefinition.get());\n+            });\n+        return caseDetails;\n+    }\n+\n+\n+    private Boolean filterResultsBySearchResultsDefinition(String useCase, String caseTypeId, List<String> requestedFields, String caseFieldId) {\n+        Set<String> roles = userRepository.getUserRoles();\n+        CaseTypeDefinition caseTypeDefinition = getCaseTypeDefinition(caseTypeId);\n+        SearchResult searchResultDefinition = searchResultDefinitionService.getSearchResultDefinition(caseTypeDefinition, useCase, requestedFields);\n+        HashMap<String, String> searchFields = getSearchResultDefinitionFieldUserRoleAndField(searchResultDefinition);\n+\n+        if (useCase != null) {\n+            if (!searchFields.containsKey(caseFieldId)) {\n+                return false;\n+            }\n+            String role = searchFields.get(caseFieldId);\n+            if (role != null && !roles.contains(role)) {\n+                return false;\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "originalPosition": 113}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4OTkwNzEz", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#pullrequestreview-438990713", "createdAt": "2020-06-29T08:30:32Z", "commit": {"oid": "8cb22f8cef6938147363854b0e4e7d4b870bc8c8"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da9cc91a36347825389534ab85022eeeee5db474", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/da9cc91a36347825389534ab85022eeeee5db474", "committedDate": "2020-06-29T14:41:09Z", "message": "RDM-8782 actioned review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "111496fd68a128bbbec8415ed2d0de8cc7496962", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/111496fd68a128bbbec8415ed2d0de8cc7496962", "committedDate": "2020-06-30T11:11:57Z", "message": "RDM-8782 actioned review comments removed check on Read privilege as this is handled by external search endpoint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMDM2MjUx", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#pullrequestreview-440036251", "createdAt": "2020-06-30T13:51:53Z", "commit": {"oid": "111496fd68a128bbbec8415ed2d0de8cc7496962"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzo1MTo1M1rOGq9ZGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzo1MTo1M1rOGq9ZGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5OTIyNg==", "bodyText": "why you need to pass SearchResultDefinition? you are inside SearchResultDefinition here. Same for the other APIs", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r447699226", "createdAt": "2020-06-30T13:51:53Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/SearchResultDefinition.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package uk.gov.hmcts.ccd.domain.model.definition;\n+\n+import java.io.Serializable;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class SearchResultDefinition implements Serializable {\n+    private SearchResultField[] fields;\n+\n+    public SearchResultField[] getFields() {\n+        return fields;\n+    }\n+\n+    public void setFields(SearchResultField[] fields) {\n+        this.fields = fields;\n+    }\n+\n+    public List<SearchResultField> getFieldsWithPaths() {\n+        return Arrays.stream(fields)\n+            .filter(f -> StringUtils.isNotBlank(f.getCaseFieldPath()))\n+            .collect(Collectors.toList());\n+    }\n+\n+    public Map<String, String> getFieldsUserRoles(SearchResultDefinition searchResultDefinition) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "111496fd68a128bbbec8415ed2d0de8cc7496962"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39e67fe22c686191d2dc7ea057d96a677824192f", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/39e67fe22c686191d2dc7ea057d96a677824192f", "committedDate": "2020-06-30T13:56:40Z", "message": "RDM-8782 removed parameter searchResultDefinition as it was un-needed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMDUyNTQw", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#pullrequestreview-440052540", "createdAt": "2020-06-30T14:08:03Z", "commit": {"oid": "39e67fe22c686191d2dc7ea057d96a677824192f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowODowM1rOGq-JiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowODowM1rOGq-JiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcxMTYyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!fields.containsKey(caseFieldId)) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    return true;\n          \n          \n            \n                    return !fields.containsKey(caseFieldId);", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r447711625", "createdAt": "2020-06-30T14:08:03Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/SearchResultDefinition.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package uk.gov.hmcts.ccd.domain.model.definition;\n+\n+import java.io.Serializable;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class SearchResultDefinition implements Serializable {\n+    private SearchResultField[] fields;\n+\n+    public SearchResultField[] getFields() {\n+        return fields;\n+    }\n+\n+    public void setFields(SearchResultField[] fields) {\n+        this.fields = fields;\n+    }\n+\n+    public List<SearchResultField> getFieldsWithPaths() {\n+        return Arrays.stream(fields)\n+            .filter(f -> StringUtils.isNotBlank(f.getCaseFieldPath()))\n+            .collect(Collectors.toList());\n+    }\n+\n+    public Map<String, String> getFieldsUserRoles() {\n+        Map<String, String> fields = new HashMap<>();\n+        for (SearchResultField srf : getFields()) {\n+            fields.put(srf.getCaseFieldId(), srf.getRole());\n+        }\n+        return fields;\n+    }\n+\n+    public boolean fieldExists(String caseFieldId) {\n+        Map<String, String> fields = getFieldsUserRoles();\n+        if (!fields.containsKey(caseFieldId)) {\n+            return false;\n+        }\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39e67fe22c686191d2dc7ea057d96a677824192f"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMDU0MDcy", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#pullrequestreview-440054072", "createdAt": "2020-06-30T14:09:32Z", "commit": {"oid": "39e67fe22c686191d2dc7ea057d96a677824192f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowOTozMlrOGq-N2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowOTozMlrOGq-N2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcxMjczMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (role != null && !roles.contains(role)) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    return true;\n          \n          \n            \n                    return (role != null && !roles.contains(role));", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#discussion_r447712731", "createdAt": "2020-06-30T14:09:32Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/SearchResultDefinition.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package uk.gov.hmcts.ccd.domain.model.definition;\n+\n+import java.io.Serializable;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class SearchResultDefinition implements Serializable {\n+    private SearchResultField[] fields;\n+\n+    public SearchResultField[] getFields() {\n+        return fields;\n+    }\n+\n+    public void setFields(SearchResultField[] fields) {\n+        this.fields = fields;\n+    }\n+\n+    public List<SearchResultField> getFieldsWithPaths() {\n+        return Arrays.stream(fields)\n+            .filter(f -> StringUtils.isNotBlank(f.getCaseFieldPath()))\n+            .collect(Collectors.toList());\n+    }\n+\n+    public Map<String, String> getFieldsUserRoles() {\n+        Map<String, String> fields = new HashMap<>();\n+        for (SearchResultField srf : getFields()) {\n+            fields.put(srf.getCaseFieldId(), srf.getRole());\n+        }\n+        return fields;\n+    }\n+\n+    public boolean fieldExists(String caseFieldId) {\n+        Map<String, String> fields = getFieldsUserRoles();\n+        if (!fields.containsKey(caseFieldId)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    public boolean fieldHasRole(String caseFieldId, Set<String> roles) {\n+        Map<String, String> fields = getFieldsUserRoles();\n+        String role = fields.get(caseFieldId);\n+        if (role != null && !roles.contains(role)) {\n+            return false;\n+        }\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39e67fe22c686191d2dc7ea057d96a677824192f"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMDY0MDU5", "url": "https://github.com/hmcts/ccd-data-store-api/pull/990#pullrequestreview-440064059", "createdAt": "2020-06-30T14:19:15Z", "commit": {"oid": "39e67fe22c686191d2dc7ea057d96a677824192f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fd990f16831c52eb6456b32b57e45a1c1d59da4", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/8fd990f16831c52eb6456b32b57e45a1c1d59da4", "committedDate": "2020-06-30T14:22:00Z", "message": "Update src/main/java/uk/gov/hmcts/ccd/domain/model/definition/SearchResultDefinition.java\n\nCo-authored-by: Mario Paniccia <mario.paniccia@hmcts.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc04a256c5b9d58dea21c40702a9d95271483220", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/bc04a256c5b9d58dea21c40702a9d95271483220", "committedDate": "2020-06-30T14:22:16Z", "message": "Update src/main/java/uk/gov/hmcts/ccd/domain/model/definition/SearchResultDefinition.java\n\nCo-authored-by: Mario Paniccia <mario.paniccia@hmcts.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "287f9f5c6d750dcfb2fd0b55fb2c750d1c364580", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/287f9f5c6d750dcfb2fd0b55fb2c750d1c364580", "committedDate": "2020-06-30T15:23:50Z", "message": "RDM-8782 fixed logic"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2800, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}