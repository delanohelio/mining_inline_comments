{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNzM1NTAz", "number": 745, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMDoxNjowMFrODa0ulg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMjo1NDo1M1rODbNY0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDUzNDYyOnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMDoxNjowMFrOFh9jhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMTozNDowMlrOFihzhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE1NTg0Ng==", "bodyText": "can you add a scenario:\n#COLLECTION(\"other\")\", COLLECTION, asList(\"allowInsert\")\nand verify that the end result is\n#COLLECTION(\"other, allowInsert\" )\nwe don't want \"other\" to be wiped out, because it could be some other display option for collections we introduce in the future", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371155846", "createdAt": "2020-01-27T10:16:00Z", "author": {"login": "mario-paniccia"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package uk.gov.hmcts.ccd.domain.model.common;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertAll;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.Parameter.COLLECTION;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.Parameter.TABLE;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.updateDisplayContextParameter;\n+\n+class DisplayContextParameterUtilTest {\n+\n+    @Test\n+    @DisplayName(\"should create parameter)\")\n+    void shouldCreateParameter() {\n+        assertAll(\n+            () -> assertThat(updateDisplayContextParameter(\"\", COLLECTION, asList(\"allowInsert\", \"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete,allowInsert)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"\", COLLECTION, asList(\"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"\", TABLE, asList(\"postcode\")),\n+                is(\"#TABLE(postcode)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"\", TABLE, asList(\"AddressLine1\", \"postcode\")),\n+                is(\"#TABLE(AddressLine1,postcode)\"))\n+                 );\n+    }\n+\n+    @Test\n+    @DisplayName(\"should update parameter)\")\n+    void shouldUpdateParameter() {\n+        assertAll(\n+            () -> assertThat(updateDisplayContextParameter(\"#COLLECTION(allowInsert,allowDelete)\", COLLECTION, asList(\"allowInsert\", \"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete,allowInsert)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"#COLLECTION(allowInsert,allowDelete)\", COLLECTION, asList(\"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"#COLLECTION()\", COLLECTION, asList(\"allowInsert\")),\n+                is(\"#COLLECTION(allowInsert)\")),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a461c7b5920b0cf61c58786cd4ab40260ade7db3"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE1NjUzOA==", "bodyText": "can you add a scenario for:\n\"#COLLECTION(allowInsert,allowDelete)\", COLLECTION, asList(\"allowDelete\", \"allowInsert\")", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371156538", "createdAt": "2020-01-27T10:17:31Z", "author": {"login": "mario-paniccia"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package uk.gov.hmcts.ccd.domain.model.common;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertAll;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.Parameter.COLLECTION;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.Parameter.TABLE;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.updateDisplayContextParameter;\n+\n+class DisplayContextParameterUtilTest {\n+\n+    @Test\n+    @DisplayName(\"should create parameter)\")\n+    void shouldCreateParameter() {\n+        assertAll(\n+            () -> assertThat(updateDisplayContextParameter(\"\", COLLECTION, asList(\"allowInsert\", \"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete,allowInsert)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"\", COLLECTION, asList(\"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"\", TABLE, asList(\"postcode\")),\n+                is(\"#TABLE(postcode)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"\", TABLE, asList(\"AddressLine1\", \"postcode\")),\n+                is(\"#TABLE(AddressLine1,postcode)\"))\n+                 );\n+    }\n+\n+    @Test\n+    @DisplayName(\"should update parameter)\")\n+    void shouldUpdateParameter() {\n+        assertAll(\n+            () -> assertThat(updateDisplayContextParameter(\"#COLLECTION(allowInsert,allowDelete)\", COLLECTION, asList(\"allowInsert\", \"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete,allowInsert)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"#COLLECTION(allowInsert,allowDelete)\", COLLECTION, asList(\"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"#COLLECTION()\", COLLECTION, asList(\"allowInsert\")),\n+                is(\"#COLLECTION(allowInsert)\")),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE1NTg0Ng=="}, "originalCommit": {"oid": "a461c7b5920b0cf61c58786cd4ab40260ade7db3"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM2MDM3Mg==", "bodyText": "ok, changing the behaviour to preserve other properties", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371360372", "createdAt": "2020-01-27T16:55:22Z", "author": {"login": "rafalkalita"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package uk.gov.hmcts.ccd.domain.model.common;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertAll;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.Parameter.COLLECTION;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.Parameter.TABLE;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.updateDisplayContextParameter;\n+\n+class DisplayContextParameterUtilTest {\n+\n+    @Test\n+    @DisplayName(\"should create parameter)\")\n+    void shouldCreateParameter() {\n+        assertAll(\n+            () -> assertThat(updateDisplayContextParameter(\"\", COLLECTION, asList(\"allowInsert\", \"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete,allowInsert)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"\", COLLECTION, asList(\"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"\", TABLE, asList(\"postcode\")),\n+                is(\"#TABLE(postcode)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"\", TABLE, asList(\"AddressLine1\", \"postcode\")),\n+                is(\"#TABLE(AddressLine1,postcode)\"))\n+                 );\n+    }\n+\n+    @Test\n+    @DisplayName(\"should update parameter)\")\n+    void shouldUpdateParameter() {\n+        assertAll(\n+            () -> assertThat(updateDisplayContextParameter(\"#COLLECTION(allowInsert,allowDelete)\", COLLECTION, asList(\"allowInsert\", \"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete,allowInsert)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"#COLLECTION(allowInsert,allowDelete)\", COLLECTION, asList(\"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"#COLLECTION()\", COLLECTION, asList(\"allowInsert\")),\n+                is(\"#COLLECTION(allowInsert)\")),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE1NTg0Ng=="}, "originalCommit": {"oid": "a461c7b5920b0cf61c58786cd4ab40260ade7db3"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc0OTc2NQ==", "bodyText": "both done \ud83d\udc4d", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371749765", "createdAt": "2020-01-28T11:34:02Z", "author": {"login": "rafalkalita"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package uk.gov.hmcts.ccd.domain.model.common;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertAll;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.Parameter.COLLECTION;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.Parameter.TABLE;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.updateDisplayContextParameter;\n+\n+class DisplayContextParameterUtilTest {\n+\n+    @Test\n+    @DisplayName(\"should create parameter)\")\n+    void shouldCreateParameter() {\n+        assertAll(\n+            () -> assertThat(updateDisplayContextParameter(\"\", COLLECTION, asList(\"allowInsert\", \"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete,allowInsert)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"\", COLLECTION, asList(\"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"\", TABLE, asList(\"postcode\")),\n+                is(\"#TABLE(postcode)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"\", TABLE, asList(\"AddressLine1\", \"postcode\")),\n+                is(\"#TABLE(AddressLine1,postcode)\"))\n+                 );\n+    }\n+\n+    @Test\n+    @DisplayName(\"should update parameter)\")\n+    void shouldUpdateParameter() {\n+        assertAll(\n+            () -> assertThat(updateDisplayContextParameter(\"#COLLECTION(allowInsert,allowDelete)\", COLLECTION, asList(\"allowInsert\", \"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete,allowInsert)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"#COLLECTION(allowInsert,allowDelete)\", COLLECTION, asList(\"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"#COLLECTION()\", COLLECTION, asList(\"allowInsert\")),\n+                is(\"#COLLECTION(allowInsert)\")),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE1NTg0Ng=="}, "originalCommit": {"oid": "a461c7b5920b0cf61c58786cd4ab40260ade7db3"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDU4ODg0OnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMDozMjoxM1rOFh-DJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMDozMjoxM1rOFh-DJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2Mzk0MQ==", "bodyText": "not sure this is correct. Data store should not interfere or override any TABLE option set on the definition. There's no reason to do that. I think we should restrict Data Store action only on the COLLECTION option and ignore all the rest", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371163941", "createdAt": "2020-01-27T10:32:13Z", "author": {"login": "mario-paniccia"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package uk.gov.hmcts.ccd.domain.model.common;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertAll;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.Parameter.COLLECTION;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.Parameter.TABLE;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.updateDisplayContextParameter;\n+\n+class DisplayContextParameterUtilTest {\n+\n+    @Test\n+    @DisplayName(\"should create parameter)\")\n+    void shouldCreateParameter() {\n+        assertAll(\n+            () -> assertThat(updateDisplayContextParameter(\"\", COLLECTION, asList(\"allowInsert\", \"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete,allowInsert)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"\", COLLECTION, asList(\"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"\", TABLE, asList(\"postcode\")),\n+                is(\"#TABLE(postcode)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"\", TABLE, asList(\"AddressLine1\", \"postcode\")),\n+                is(\"#TABLE(AddressLine1,postcode)\"))\n+                 );\n+    }\n+\n+    @Test\n+    @DisplayName(\"should update parameter)\")\n+    void shouldUpdateParameter() {\n+        assertAll(\n+            () -> assertThat(updateDisplayContextParameter(\"#COLLECTION(allowInsert,allowDelete)\", COLLECTION, asList(\"allowInsert\", \"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete,allowInsert)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"#COLLECTION(allowInsert,allowDelete)\", COLLECTION, asList(\"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"#COLLECTION()\", COLLECTION, asList(\"allowInsert\")),\n+                is(\"#COLLECTION(allowInsert)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"#TABLE(param1,param2)\", TABLE, asList(\"postcode\")),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a461c7b5920b0cf61c58786cd4ab40260ade7db3"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDYyMDYzOnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMDo0MzoyNVrOFh-WQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMDo0MzoyNVrOFh-WQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2ODgzNA==", "bodyText": "mmm not sure about this but it seems to me these tests are describing a feature we don't provide. We only allow overriding of \"allowDelete, allowInsert\" of COLLECTION, so adding tests for all the rest seems a bit misleading to me. But we can leave them", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371168834", "createdAt": "2020-01-27T10:43:25Z", "author": {"login": "mario-paniccia"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package uk.gov.hmcts.ccd.domain.model.common;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertAll;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.Parameter.COLLECTION;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.Parameter.TABLE;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.updateDisplayContextParameter;\n+\n+class DisplayContextParameterUtilTest {\n+\n+    @Test\n+    @DisplayName(\"should create parameter)\")\n+    void shouldCreateParameter() {\n+        assertAll(\n+            () -> assertThat(updateDisplayContextParameter(\"\", COLLECTION, asList(\"allowInsert\", \"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete,allowInsert)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"\", COLLECTION, asList(\"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"\", TABLE, asList(\"postcode\")),\n+                is(\"#TABLE(postcode)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"\", TABLE, asList(\"AddressLine1\", \"postcode\")),\n+                is(\"#TABLE(AddressLine1,postcode)\"))\n+                 );\n+    }\n+\n+    @Test\n+    @DisplayName(\"should update parameter)\")\n+    void shouldUpdateParameter() {\n+        assertAll(\n+            () -> assertThat(updateDisplayContextParameter(\"#COLLECTION(allowInsert,allowDelete)\", COLLECTION, asList(\"allowInsert\", \"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete,allowInsert)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"#COLLECTION(allowInsert,allowDelete)\", COLLECTION, asList(\"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"#COLLECTION()\", COLLECTION, asList(\"allowInsert\")),\n+                is(\"#COLLECTION(allowInsert)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"#TABLE(param1,param2)\", TABLE, asList(\"postcode\")),\n+                is(\"#TABLE(postcode)\"))\n+                 );\n+    }\n+\n+    @Test\n+    @DisplayName(\"should update parameter and produce multiple result)\")\n+    void shouldUpdateParameterMultiple() {\n+        assertAll(\n+            () -> assertThat(updateDisplayContextParameter(\"#TABLE()\", COLLECTION, asList(\"allowInsert\", \"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete,allowInsert),#TABLE()\")),\n+            () -> assertThat(updateDisplayContextParameter(\"#TABLE(),#COLLECTION(allowInsert,allowDelete)\", COLLECTION, asList(\"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete),#TABLE()\")),\n+            () -> assertThat(updateDisplayContextParameter(\"#TABLE(),#COLLECTION(allowInsert,allowDelete)\", TABLE, asList(\"postcode\")),\n+                is(\"#COLLECTION(allowDelete,allowInsert),#TABLE(postcode)\")),\n+            () -> assertThat(updateDisplayContextParameter(\"#TABLE(postcode),#COLLECTION(allowInsert,allowDelete)\", COLLECTION, asList(\"other\")),\n+                is(\"#COLLECTION(other),#TABLE(postcode)\"))\n+                 );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a461c7b5920b0cf61c58786cd4ab40260ade7db3"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDYyNTIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMDo0NTowN1rOFh-ZDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMTozMzozNVrOFihy2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2OTU0OA==", "bodyText": "don't think we need to define anything else other than COLLECTION. That's all Data Store should concern with for now", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371169548", "createdAt": "2020-01-27T10:45:07Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtil.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package uk.gov.hmcts.ccd.domain.model.common;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+public class DisplayContextParameterUtil {\n+    public enum Parameter {\n+        COLLECTION(\"#COLLECTION\"),\n+        TABLE(\"#TABLE\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a461c7b5920b0cf61c58786cd4ab40260ade7db3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc0OTU5Mg==", "bodyText": "done \ud83d\udc4d", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371749592", "createdAt": "2020-01-28T11:33:35Z", "author": {"login": "rafalkalita"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtil.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package uk.gov.hmcts.ccd.domain.model.common;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+public class DisplayContextParameterUtil {\n+    public enum Parameter {\n+        COLLECTION(\"#COLLECTION\"),\n+        TABLE(\"#TABLE\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2OTU0OA=="}, "originalCommit": {"oid": "a461c7b5920b0cf61c58786cd4ab40260ade7db3"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDYzMjU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMDo0NzozNVrOFh-dcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMTozMzoxMlrOFihyTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE3MDY3Mg==", "bodyText": "consider one of these alternative options:\n\nintroduce a method on CaseEventTrigger called getCollectionFields   (preferred)\ncaseEventTrigger.getCaseFields().stream().filter(caseViewField.isCollectionFieldType())....", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371170672", "createdAt": "2020-01-27T10:47:35Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlService.java", "diffHunk": "@@ -239,6 +252,46 @@ public CaseEventTrigger setReadOnlyOnCaseViewFieldsIfNoAccess(final CaseEventTri\n         return caseEventTrigger;\n     }\n \n+    public CaseEventTrigger updateCollectionDisplayContextParameterByAccess(final CaseEventTrigger caseEventTrigger,\n+                                                                            final Set<String> userRoles) {\n+        caseEventTrigger.getCaseFields()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a461c7b5920b0cf61c58786cd4ab40260ade7db3"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc0OTQ1Mg==", "bodyText": "Going for option 2, because introducing getCollectionFields is tricky. We have two methods, one with List and one with List. It is easier to do the filter manually.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371749452", "createdAt": "2020-01-28T11:33:12Z", "author": {"login": "rafalkalita"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlService.java", "diffHunk": "@@ -239,6 +252,46 @@ public CaseEventTrigger setReadOnlyOnCaseViewFieldsIfNoAccess(final CaseEventTri\n         return caseEventTrigger;\n     }\n \n+    public CaseEventTrigger updateCollectionDisplayContextParameterByAccess(final CaseEventTrigger caseEventTrigger,\n+                                                                            final Set<String> userRoles) {\n+        caseEventTrigger.getCaseFields()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE3MDY3Mg=="}, "originalCommit": {"oid": "a461c7b5920b0cf61c58786cd4ab40260ade7db3"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDY0NDIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMDo1MToyN1rOFh-kGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMDo1MToyN1rOFh-kGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE3MjM3OA==", "bodyText": "I would change this method to add to collectionAccess CAN_CREATE and CAN_DELETE rather than \"allowInsert\" and \"allowDelete\". It's then DisplayContextParameterUtil that converts  CAN_CREATE to \"allowInsert\"  and CAN_DELETE to \"allowDelete\". This way  \"allowInsert\"  and \"allowDelete\"  are nicely encapsulated inside DisplayContextParameterUtil", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371172378", "createdAt": "2020-01-27T10:51:27Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlService.java", "diffHunk": "@@ -239,6 +252,46 @@ public CaseEventTrigger setReadOnlyOnCaseViewFieldsIfNoAccess(final CaseEventTri\n         return caseEventTrigger;\n     }\n \n+    public CaseEventTrigger updateCollectionDisplayContextParameterByAccess(final CaseEventTrigger caseEventTrigger,\n+                                                                            final Set<String> userRoles) {\n+        caseEventTrigger.getCaseFields()\n+            .forEach(caseViewField -> {\n+                if (caseViewField.isCollectionFieldType()) {\n+                    caseViewField.setDisplayContextParameter(getCollectionAccess(userRoles, caseViewField));\n+                }\n+\n+                setChildrenCollectionDisplayContextParameter(caseViewField.getFieldType().getChildren(), userRoles);\n+            });\n+        return caseEventTrigger;\n+    }\n+\n+    private void setChildrenCollectionDisplayContextParameter(final List<CaseField> caseFields,\n+                                                              final Set<String> userRoles) {\n+        caseFields.forEach(childField -> {\n+            if (childField.isCollectionFieldType()) {\n+                childField.setDisplayContextParameter(getCollectionAccess(userRoles, childField));\n+            }\n+\n+            setChildrenCollectionDisplayContextParameter(childField.getFieldType().getChildren(), userRoles);\n+        });\n+    }\n+\n+    private String getCollectionAccess(Set<String> userRoles, CommonField field) {\n+        List<String> collectionAccess = new ArrayList<>();\n+        if (hasAccessControlList(userRoles, CAN_CREATE, field.getAccessControlLists())) {\n+            collectionAccess.add(\"allowInsert\");\n+        }\n+        if (hasAccessControlList(userRoles, CAN_DELETE, field.getAccessControlLists())) {\n+            collectionAccess.add(\"allowDelete\");\n+        }\n+        if (hasAccessControlList(userRoles, CAN_UPDATE, field.getAccessControlLists())) {\n+            collectionAccess.add(\"allowInsert\");\n+            collectionAccess.add(\"allowDelete\");\n+        }\n+        return DisplayContextParameterUtil.updateDisplayContextParameter(field.getDisplayContextParameter(),\n+            DisplayContextParameterUtil.Parameter.COLLECTION, collectionAccess);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a461c7b5920b0cf61c58786cd4ab40260ade7db3"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDY2MDY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMDo1NzoxN1rOFh-t2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMDo1NzoxN1rOFh-t2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE3NDg3NQ==", "bodyText": "I would rename getCollectionAccess to generateDisplayContextParamer or similar because we are recalculating the whole displayContextParameter", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371174875", "createdAt": "2020-01-27T10:57:17Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlService.java", "diffHunk": "@@ -239,6 +252,46 @@ public CaseEventTrigger setReadOnlyOnCaseViewFieldsIfNoAccess(final CaseEventTri\n         return caseEventTrigger;\n     }\n \n+    public CaseEventTrigger updateCollectionDisplayContextParameterByAccess(final CaseEventTrigger caseEventTrigger,\n+                                                                            final Set<String> userRoles) {\n+        caseEventTrigger.getCaseFields()\n+            .forEach(caseViewField -> {\n+                if (caseViewField.isCollectionFieldType()) {\n+                    caseViewField.setDisplayContextParameter(getCollectionAccess(userRoles, caseViewField));\n+                }\n+\n+                setChildrenCollectionDisplayContextParameter(caseViewField.getFieldType().getChildren(), userRoles);\n+            });\n+        return caseEventTrigger;\n+    }\n+\n+    private void setChildrenCollectionDisplayContextParameter(final List<CaseField> caseFields,\n+                                                              final Set<String> userRoles) {\n+        caseFields.forEach(childField -> {\n+            if (childField.isCollectionFieldType()) {\n+                childField.setDisplayContextParameter(getCollectionAccess(userRoles, childField));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a461c7b5920b0cf61c58786cd4ab40260ade7db3"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDY3Njc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMTowMzowOVrOFh-3lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMTozNDo1M1rOFih0yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE3NzM2Ng==", "bodyText": "we need to be careful here. Strictly speaking this ticket should only have effect for case roles. But because userRoles also contains idam roles, when EUI implements the UI part of this ticket, it's possible the UI behaviour will change also for permissions set on Idam roles...\nso if we wanted to implement the ticket strictly, you should only consider the case roles, not the whole userRoles", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371177366", "createdAt": "2020-01-27T11:03:09Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlService.java", "diffHunk": "@@ -239,6 +252,46 @@ public CaseEventTrigger setReadOnlyOnCaseViewFieldsIfNoAccess(final CaseEventTri\n         return caseEventTrigger;\n     }\n \n+    public CaseEventTrigger updateCollectionDisplayContextParameterByAccess(final CaseEventTrigger caseEventTrigger,\n+                                                                            final Set<String> userRoles) {\n+        caseEventTrigger.getCaseFields()\n+            .forEach(caseViewField -> {\n+                if (caseViewField.isCollectionFieldType()) {\n+                    caseViewField.setDisplayContextParameter(getCollectionAccess(userRoles, caseViewField));\n+                }\n+\n+                setChildrenCollectionDisplayContextParameter(caseViewField.getFieldType().getChildren(), userRoles);\n+            });\n+        return caseEventTrigger;\n+    }\n+\n+    private void setChildrenCollectionDisplayContextParameter(final List<CaseField> caseFields,\n+                                                              final Set<String> userRoles) {\n+        caseFields.forEach(childField -> {\n+            if (childField.isCollectionFieldType()) {\n+                childField.setDisplayContextParameter(getCollectionAccess(userRoles, childField));\n+            }\n+\n+            setChildrenCollectionDisplayContextParameter(childField.getFieldType().getChildren(), userRoles);\n+        });\n+    }\n+\n+    private String getCollectionAccess(Set<String> userRoles, CommonField field) {\n+        List<String> collectionAccess = new ArrayList<>();\n+        if (hasAccessControlList(userRoles, CAN_CREATE, field.getAccessControlLists())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a461c7b5920b0cf61c58786cd4ab40260ade7db3"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE4MDE4Mw==", "bodyText": "what I mean is this code adds COLLECTION(allowInsert) if there is an idam role with C permission, even if there's no case roles. We need to discuss about this being correct", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371180183", "createdAt": "2020-01-27T11:09:54Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlService.java", "diffHunk": "@@ -239,6 +252,46 @@ public CaseEventTrigger setReadOnlyOnCaseViewFieldsIfNoAccess(final CaseEventTri\n         return caseEventTrigger;\n     }\n \n+    public CaseEventTrigger updateCollectionDisplayContextParameterByAccess(final CaseEventTrigger caseEventTrigger,\n+                                                                            final Set<String> userRoles) {\n+        caseEventTrigger.getCaseFields()\n+            .forEach(caseViewField -> {\n+                if (caseViewField.isCollectionFieldType()) {\n+                    caseViewField.setDisplayContextParameter(getCollectionAccess(userRoles, caseViewField));\n+                }\n+\n+                setChildrenCollectionDisplayContextParameter(caseViewField.getFieldType().getChildren(), userRoles);\n+            });\n+        return caseEventTrigger;\n+    }\n+\n+    private void setChildrenCollectionDisplayContextParameter(final List<CaseField> caseFields,\n+                                                              final Set<String> userRoles) {\n+        caseFields.forEach(childField -> {\n+            if (childField.isCollectionFieldType()) {\n+                childField.setDisplayContextParameter(getCollectionAccess(userRoles, childField));\n+            }\n+\n+            setChildrenCollectionDisplayContextParameter(childField.getFieldType().getChildren(), userRoles);\n+        });\n+    }\n+\n+    private String getCollectionAccess(Set<String> userRoles, CommonField field) {\n+        List<String> collectionAccess = new ArrayList<>();\n+        if (hasAccessControlList(userRoles, CAN_CREATE, field.getAccessControlLists())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE3NzM2Ng=="}, "originalCommit": {"oid": "a461c7b5920b0cf61c58786cd4ab40260ade7db3"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc1MDA5MQ==", "bodyText": "As discussed I will put a comment for ExUI this is for both Case and Idam roles", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371750091", "createdAt": "2020-01-28T11:34:53Z", "author": {"login": "rafalkalita"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlService.java", "diffHunk": "@@ -239,6 +252,46 @@ public CaseEventTrigger setReadOnlyOnCaseViewFieldsIfNoAccess(final CaseEventTri\n         return caseEventTrigger;\n     }\n \n+    public CaseEventTrigger updateCollectionDisplayContextParameterByAccess(final CaseEventTrigger caseEventTrigger,\n+                                                                            final Set<String> userRoles) {\n+        caseEventTrigger.getCaseFields()\n+            .forEach(caseViewField -> {\n+                if (caseViewField.isCollectionFieldType()) {\n+                    caseViewField.setDisplayContextParameter(getCollectionAccess(userRoles, caseViewField));\n+                }\n+\n+                setChildrenCollectionDisplayContextParameter(caseViewField.getFieldType().getChildren(), userRoles);\n+            });\n+        return caseEventTrigger;\n+    }\n+\n+    private void setChildrenCollectionDisplayContextParameter(final List<CaseField> caseFields,\n+                                                              final Set<String> userRoles) {\n+        caseFields.forEach(childField -> {\n+            if (childField.isCollectionFieldType()) {\n+                childField.setDisplayContextParameter(getCollectionAccess(userRoles, childField));\n+            }\n+\n+            setChildrenCollectionDisplayContextParameter(childField.getFieldType().getChildren(), userRoles);\n+        });\n+    }\n+\n+    private String getCollectionAccess(Set<String> userRoles, CommonField field) {\n+        List<String> collectionAccess = new ArrayList<>();\n+        if (hasAccessControlList(userRoles, CAN_CREATE, field.getAccessControlLists())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE3NzM2Ng=="}, "originalCommit": {"oid": "a461c7b5920b0cf61c58786cd4ab40260ade7db3"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODU1MjE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMjo0NzoxMVrOFijsqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMjo1ODo1NVrOFikBug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4MDc3OA==", "bodyText": "this code could seems a bit too complex would be good if we could further simplify by breaking it down into more private method with self explanatory names", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371780778", "createdAt": "2020-01-28T12:47:11Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtil.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package uk.gov.hmcts.ccd.domain.model.common;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.apache.commons.lang3.StringUtils.isBlank;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterCollectionOptions.ALLOW_DELETE;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterCollectionOptions.ALLOW_INSERT;\n+\n+public class DisplayContextParameterUtil {\n+\n+    public static String COLLECTION = \"COLLECTION\";\n+\n+    public static String updateCollectionDisplayContextParameter(final String currentDisplayContextParameter,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6554dedec447b6d58ed494269e99a9ac039f9a38"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4NjE3MA==", "bodyText": "Will try to make it more clear.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371786170", "createdAt": "2020-01-28T12:58:55Z", "author": {"login": "rafalkalita"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtil.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package uk.gov.hmcts.ccd.domain.model.common;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.apache.commons.lang3.StringUtils.isBlank;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterCollectionOptions.ALLOW_DELETE;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterCollectionOptions.ALLOW_INSERT;\n+\n+public class DisplayContextParameterUtil {\n+\n+    public static String COLLECTION = \"COLLECTION\";\n+\n+    public static String updateCollectionDisplayContextParameter(final String currentDisplayContextParameter,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4MDc3OA=="}, "originalCommit": {"oid": "6554dedec447b6d58ed494269e99a9ac039f9a38"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODU2MTg5OnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMjo1MDoyNVrOFijycA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToyOTozOVrOFkFr7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4MjI1Ng==", "bodyText": "this one is funny, how come the result has the order inverted?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371782256", "createdAt": "2020-01-28T12:50:25Z", "author": {"login": "mario-paniccia"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package uk.gov.hmcts.ccd.domain.model.common;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertAll;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.updateCollectionDisplayContextParameter;\n+\n+class DisplayContextParameterUtilTest {\n+\n+    @Test\n+    @DisplayName(\"should create collection parameter)\")\n+    void shouldCreateCollectionParameter() {\n+        assertAll(\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"\", asList(\"allowInsert\", \"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete,allowInsert)\")),\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"\", asList(\"allowInsert\")),\n+                is(\"#COLLECTION(allowInsert)\")),\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"\", asList(\"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete)\")),\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"\", asList(\"\")),\n+                is(\"#COLLECTION()\"))\n+                 );\n+    }\n+\n+    @Test\n+    @DisplayName(\"should update parameter)\")\n+    void shouldUpdateParameter() {\n+        assertAll(\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"#COLLECTION(allowInsert,allowDelete)\", asList(\"allowInsert\", \"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete,allowInsert)\")),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6554dedec447b6d58ed494269e99a9ac039f9a38"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4NTQ3Mg==", "bodyText": "Because we always order the results.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371785472", "createdAt": "2020-01-28T12:57:22Z", "author": {"login": "rafalkalita"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package uk.gov.hmcts.ccd.domain.model.common;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertAll;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.updateCollectionDisplayContextParameter;\n+\n+class DisplayContextParameterUtilTest {\n+\n+    @Test\n+    @DisplayName(\"should create collection parameter)\")\n+    void shouldCreateCollectionParameter() {\n+        assertAll(\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"\", asList(\"allowInsert\", \"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete,allowInsert)\")),\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"\", asList(\"allowInsert\")),\n+                is(\"#COLLECTION(allowInsert)\")),\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"\", asList(\"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete)\")),\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"\", asList(\"\")),\n+                is(\"#COLLECTION()\"))\n+                 );\n+    }\n+\n+    @Test\n+    @DisplayName(\"should update parameter)\")\n+    void shouldUpdateParameter() {\n+        assertAll(\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"#COLLECTION(allowInsert,allowDelete)\", asList(\"allowInsert\", \"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete,allowInsert)\")),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4MjI1Ng=="}, "originalCommit": {"oid": "6554dedec447b6d58ed494269e99a9ac039f9a38"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4NjIyMw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r373386223", "createdAt": "2020-01-31T09:29:39Z", "author": {"login": "mario-paniccia"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/model/common/DisplayContextParameterUtilTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package uk.gov.hmcts.ccd.domain.model.common;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertAll;\n+import static uk.gov.hmcts.ccd.domain.model.common.DisplayContextParameterUtil.updateCollectionDisplayContextParameter;\n+\n+class DisplayContextParameterUtilTest {\n+\n+    @Test\n+    @DisplayName(\"should create collection parameter)\")\n+    void shouldCreateCollectionParameter() {\n+        assertAll(\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"\", asList(\"allowInsert\", \"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete,allowInsert)\")),\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"\", asList(\"allowInsert\")),\n+                is(\"#COLLECTION(allowInsert)\")),\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"\", asList(\"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete)\")),\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"\", asList(\"\")),\n+                is(\"#COLLECTION()\"))\n+                 );\n+    }\n+\n+    @Test\n+    @DisplayName(\"should update parameter)\")\n+    void shouldUpdateParameter() {\n+        assertAll(\n+            () -> assertThat(updateCollectionDisplayContextParameter(\"#COLLECTION(allowInsert,allowDelete)\", asList(\"allowInsert\", \"allowDelete\")),\n+                is(\"#COLLECTION(allowDelete,allowInsert)\")),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4MjI1Ng=="}, "originalCommit": {"oid": "6554dedec447b6d58ed494269e99a9ac039f9a38"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODU3NDg5OnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlServiceFilterTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMjo1NDo1M1rOFij6mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMjo1Nzo0NVrOFij_mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4NDM0Nw==", "bodyText": "We should add few integration tests as well, especially one testing collection of complex of collection...", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371784347", "createdAt": "2020-01-28T12:54:53Z", "author": {"login": "mario-paniccia"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlServiceFilterTest.java", "diffHunk": "@@ -1152,6 +1154,162 @@ void filterComplexCaseFieldChildrenByUpdateAccessWhenAllAccessIsOnCreate() {\n         }\n     }\n \n+    @Nested\n+    @DisplayName(\"updateCollectionDisplayContextParameter for Event Triggers Tests\")\n+    class UpdateCollectionDisplayContextParameterByAccessTests {\n+\n+        @Test\n+        @DisplayName(\"Should set #COLLECTION(allowInsert,allowDelete) in DisplayContextParameter of a collection \" +\n+            \"caseField when create and delete ACLs are set\")\n+        void updateCollectionDisplayContextParameterWhenFieldHasCreateDeleteRoles() {\n+\n+            final CaseViewField caseViewField1 = aViewField()\n+                .withId(\"People\")\n+                .withFieldType(aFieldType()\n+                    .withId(\"G339483948\")\n+                    .withType(COLLECTION)\n+                    .build())\n+                .withACL(anAcl()\n+                    .withRole(ROLE_IN_USER_ROLES)\n+                    .withCreate(true)\n+                    .withDelete(true)\n+                    .withUpdate(false)\n+                    .build())\n+                .build();\n+            caseViewField1.getFieldType().setCollectionFieldType(getPersonFieldType());\n+            caseViewField1.getFieldType().getChildren().stream()\n+                .filter(e -> e.getId().equals(\"Addresses\")).findFirst()\n+                .get().setAccessControlLists(asList(anAcl()\n+                .withRole(ROLE_IN_USER_ROLES)\n+                .withCreate(true)\n+                .withDelete(true)\n+                .withUpdate(false)\n+                .build()));\n+\n+            CaseEventTrigger caseEventTrigger = newCaseEventTrigger()\n+                .withField(caseViewField1)\n+                .withWizardPage(newWizardPage()\n+                        .withId(\"Page One\")\n+                        .withField(caseViewField1)\n+                        .build()\n+                               )\n+                .build();\n+\n+            CaseEventTrigger eventTrigger = accessControlService.updateCollectionDisplayContextParameterByAccess(\n+                caseEventTrigger,\n+                USER_ROLES);\n+\n+            assertThat(\"There should be only one caseField\", eventTrigger.getCaseFields(), hasSize(1));\n+\n+            CaseViewField people = eventTrigger.getCaseFields().stream()\n+                .filter(e -> e.getId().equals(\"People\")).findFirst().get();\n+\n+            assertAll(\n+                () -> assertNotNull(people),\n+                () -> assertTrue(people.getDisplayContextParameter().contains(\"#COLLECTION(\")),\n+                () -> assertTrue(people.getDisplayContextParameter().contains(\"allowInsert\")),\n+                () -> assertTrue(people.getDisplayContextParameter().contains(\"allowDelete\"))\n+                     );\n+\n+            CaseField addresses = people.getFieldType().getChildren().stream()\n+                .filter(e -> e.getId().equals(\"Addresses\")).findFirst()\n+                .get();\n+\n+            assertAll(\n+                () -> assertTrue(addresses.getDisplayContextParameter().contains(\"#COLLECTION(\")),\n+                () -> assertTrue(addresses.getDisplayContextParameter().contains(\"allowInsert\")),\n+                () -> assertTrue(addresses.getDisplayContextParameter().contains(\"allowDelete\"))\n+                     );\n+        }\n+\n+        @Test\n+        @DisplayName(\"Should set #COLLECTION(allowInsert,allowDelete) in DisplayContextParameter of a collection \" +\n+            \"caseField when an update ACL is set\")\n+        void updateCollectionDisplayContextParameterWhenFieldHasUpdateRole() {\n+\n+            final CaseViewField caseViewField1 = aViewField()\n+                .withId(\"People\")\n+                .withFieldType(aFieldType()\n+                    .withId(\"G339483948\")\n+                    .withType(COLLECTION)\n+                    .build())\n+                .withACL(anAcl()\n+                    .withRole(ROLE_IN_USER_ROLES)\n+                    .withCreate(false)\n+                    .withDelete(false)\n+                    .withUpdate(true)\n+                    .build())\n+                .build();\n+            caseViewField1.getFieldType().setCollectionFieldType(getPersonFieldType());\n+\n+            CaseEventTrigger caseEventTrigger = newCaseEventTrigger()\n+                .withField(caseViewField1)\n+                .withWizardPage(newWizardPage()\n+                        .withId(\"Page One\")\n+                        .withField(caseViewField1)\n+                        .build()\n+                               )\n+                .build();\n+\n+            CaseEventTrigger eventTrigger = accessControlService.updateCollectionDisplayContextParameterByAccess(\n+                caseEventTrigger,\n+                USER_ROLES);\n+\n+            CaseViewField people = eventTrigger.getCaseFields().stream()\n+                .filter(e -> e.getId().equals(\"People\")).findFirst().get();\n+\n+            assertAll(\n+                () -> assertNotNull(people),\n+                () -> assertTrue(people.getDisplayContextParameter().contains(\"#COLLECTION(\")),\n+                () -> assertTrue(people.getDisplayContextParameter().contains(\"allowInsert\")),\n+                () -> assertTrue(people.getDisplayContextParameter().contains(\"allowDelete\"))\n+                     );\n+        }\n+\n+        @Test\n+        @DisplayName(\"Should set #COLLECTION() in DisplayContextParameter of a collection caseField when no ACL set\")\n+        void updateCollectionDisplayContextParameterWhenFieldHasNoCreateDeleteUpdateRoles() {\n+\n+            final CaseViewField caseViewField1 = aViewField()\n+                .withId(\"People\")\n+                .withFieldType(aFieldType()\n+                    .withId(\"G339483948\")\n+                    .withType(COLLECTION)\n+                    .build())\n+                .withACL(anAcl()\n+                    .withRole(ROLE_IN_USER_ROLES)\n+                    .withCreate(false)\n+                    .withDelete(false)\n+                    .withUpdate(false)\n+                    .build())\n+                .build();\n+            caseViewField1.getFieldType().setCollectionFieldType(getPersonFieldType());\n+\n+            CaseEventTrigger caseEventTrigger = newCaseEventTrigger()\n+                .withField(caseViewField1)\n+                .withWizardPage(newWizardPage()\n+                        .withId(\"Page One\")\n+                        .withField(caseViewField1)\n+                        .build()\n+                               )\n+                .build();\n+\n+            CaseEventTrigger eventTrigger = accessControlService.updateCollectionDisplayContextParameterByAccess(\n+                caseEventTrigger,\n+                USER_ROLES);\n+\n+            CaseViewField people = eventTrigger.getCaseFields().stream()\n+                .filter(e -> e.getId().equals(\"People\")).findFirst().get();\n+\n+            assertAll(\n+                () -> assertNotNull(people),\n+                () -> assertTrue(people.getDisplayContextParameter().contains(\"#COLLECTION(\")),\n+                () -> assertFalse(people.getDisplayContextParameter().contains(\"allowInsert\")),\n+                () -> assertFalse(people.getDisplayContextParameter().contains(\"allowDelete\"))\n+                     );\n+        }\n+    }\n+\n     @Nested", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6554dedec447b6d58ed494269e99a9ac039f9a38"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4NTYyNw==", "bodyText": "Yes, can add few.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/745#discussion_r371785627", "createdAt": "2020-01-28T12:57:45Z", "author": {"login": "rafalkalita"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/common/AccessControlServiceFilterTest.java", "diffHunk": "@@ -1152,6 +1154,162 @@ void filterComplexCaseFieldChildrenByUpdateAccessWhenAllAccessIsOnCreate() {\n         }\n     }\n \n+    @Nested\n+    @DisplayName(\"updateCollectionDisplayContextParameter for Event Triggers Tests\")\n+    class UpdateCollectionDisplayContextParameterByAccessTests {\n+\n+        @Test\n+        @DisplayName(\"Should set #COLLECTION(allowInsert,allowDelete) in DisplayContextParameter of a collection \" +\n+            \"caseField when create and delete ACLs are set\")\n+        void updateCollectionDisplayContextParameterWhenFieldHasCreateDeleteRoles() {\n+\n+            final CaseViewField caseViewField1 = aViewField()\n+                .withId(\"People\")\n+                .withFieldType(aFieldType()\n+                    .withId(\"G339483948\")\n+                    .withType(COLLECTION)\n+                    .build())\n+                .withACL(anAcl()\n+                    .withRole(ROLE_IN_USER_ROLES)\n+                    .withCreate(true)\n+                    .withDelete(true)\n+                    .withUpdate(false)\n+                    .build())\n+                .build();\n+            caseViewField1.getFieldType().setCollectionFieldType(getPersonFieldType());\n+            caseViewField1.getFieldType().getChildren().stream()\n+                .filter(e -> e.getId().equals(\"Addresses\")).findFirst()\n+                .get().setAccessControlLists(asList(anAcl()\n+                .withRole(ROLE_IN_USER_ROLES)\n+                .withCreate(true)\n+                .withDelete(true)\n+                .withUpdate(false)\n+                .build()));\n+\n+            CaseEventTrigger caseEventTrigger = newCaseEventTrigger()\n+                .withField(caseViewField1)\n+                .withWizardPage(newWizardPage()\n+                        .withId(\"Page One\")\n+                        .withField(caseViewField1)\n+                        .build()\n+                               )\n+                .build();\n+\n+            CaseEventTrigger eventTrigger = accessControlService.updateCollectionDisplayContextParameterByAccess(\n+                caseEventTrigger,\n+                USER_ROLES);\n+\n+            assertThat(\"There should be only one caseField\", eventTrigger.getCaseFields(), hasSize(1));\n+\n+            CaseViewField people = eventTrigger.getCaseFields().stream()\n+                .filter(e -> e.getId().equals(\"People\")).findFirst().get();\n+\n+            assertAll(\n+                () -> assertNotNull(people),\n+                () -> assertTrue(people.getDisplayContextParameter().contains(\"#COLLECTION(\")),\n+                () -> assertTrue(people.getDisplayContextParameter().contains(\"allowInsert\")),\n+                () -> assertTrue(people.getDisplayContextParameter().contains(\"allowDelete\"))\n+                     );\n+\n+            CaseField addresses = people.getFieldType().getChildren().stream()\n+                .filter(e -> e.getId().equals(\"Addresses\")).findFirst()\n+                .get();\n+\n+            assertAll(\n+                () -> assertTrue(addresses.getDisplayContextParameter().contains(\"#COLLECTION(\")),\n+                () -> assertTrue(addresses.getDisplayContextParameter().contains(\"allowInsert\")),\n+                () -> assertTrue(addresses.getDisplayContextParameter().contains(\"allowDelete\"))\n+                     );\n+        }\n+\n+        @Test\n+        @DisplayName(\"Should set #COLLECTION(allowInsert,allowDelete) in DisplayContextParameter of a collection \" +\n+            \"caseField when an update ACL is set\")\n+        void updateCollectionDisplayContextParameterWhenFieldHasUpdateRole() {\n+\n+            final CaseViewField caseViewField1 = aViewField()\n+                .withId(\"People\")\n+                .withFieldType(aFieldType()\n+                    .withId(\"G339483948\")\n+                    .withType(COLLECTION)\n+                    .build())\n+                .withACL(anAcl()\n+                    .withRole(ROLE_IN_USER_ROLES)\n+                    .withCreate(false)\n+                    .withDelete(false)\n+                    .withUpdate(true)\n+                    .build())\n+                .build();\n+            caseViewField1.getFieldType().setCollectionFieldType(getPersonFieldType());\n+\n+            CaseEventTrigger caseEventTrigger = newCaseEventTrigger()\n+                .withField(caseViewField1)\n+                .withWizardPage(newWizardPage()\n+                        .withId(\"Page One\")\n+                        .withField(caseViewField1)\n+                        .build()\n+                               )\n+                .build();\n+\n+            CaseEventTrigger eventTrigger = accessControlService.updateCollectionDisplayContextParameterByAccess(\n+                caseEventTrigger,\n+                USER_ROLES);\n+\n+            CaseViewField people = eventTrigger.getCaseFields().stream()\n+                .filter(e -> e.getId().equals(\"People\")).findFirst().get();\n+\n+            assertAll(\n+                () -> assertNotNull(people),\n+                () -> assertTrue(people.getDisplayContextParameter().contains(\"#COLLECTION(\")),\n+                () -> assertTrue(people.getDisplayContextParameter().contains(\"allowInsert\")),\n+                () -> assertTrue(people.getDisplayContextParameter().contains(\"allowDelete\"))\n+                     );\n+        }\n+\n+        @Test\n+        @DisplayName(\"Should set #COLLECTION() in DisplayContextParameter of a collection caseField when no ACL set\")\n+        void updateCollectionDisplayContextParameterWhenFieldHasNoCreateDeleteUpdateRoles() {\n+\n+            final CaseViewField caseViewField1 = aViewField()\n+                .withId(\"People\")\n+                .withFieldType(aFieldType()\n+                    .withId(\"G339483948\")\n+                    .withType(COLLECTION)\n+                    .build())\n+                .withACL(anAcl()\n+                    .withRole(ROLE_IN_USER_ROLES)\n+                    .withCreate(false)\n+                    .withDelete(false)\n+                    .withUpdate(false)\n+                    .build())\n+                .build();\n+            caseViewField1.getFieldType().setCollectionFieldType(getPersonFieldType());\n+\n+            CaseEventTrigger caseEventTrigger = newCaseEventTrigger()\n+                .withField(caseViewField1)\n+                .withWizardPage(newWizardPage()\n+                        .withId(\"Page One\")\n+                        .withField(caseViewField1)\n+                        .build()\n+                               )\n+                .build();\n+\n+            CaseEventTrigger eventTrigger = accessControlService.updateCollectionDisplayContextParameterByAccess(\n+                caseEventTrigger,\n+                USER_ROLES);\n+\n+            CaseViewField people = eventTrigger.getCaseFields().stream()\n+                .filter(e -> e.getId().equals(\"People\")).findFirst().get();\n+\n+            assertAll(\n+                () -> assertNotNull(people),\n+                () -> assertTrue(people.getDisplayContextParameter().contains(\"#COLLECTION(\")),\n+                () -> assertFalse(people.getDisplayContextParameter().contains(\"allowInsert\")),\n+                () -> assertFalse(people.getDisplayContextParameter().contains(\"allowDelete\"))\n+                     );\n+        }\n+    }\n+\n     @Nested", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4NDM0Nw=="}, "originalCommit": {"oid": "6554dedec447b6d58ed494269e99a9ac039f9a38"}, "originalPosition": 213}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3955, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}