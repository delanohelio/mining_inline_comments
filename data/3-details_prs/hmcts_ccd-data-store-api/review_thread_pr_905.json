{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MjMxMTU5", "number": 905, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwODoxMDo0N1rOD4474w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMTowMjoxN1rOD48NXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTc5NjgzOnYy", "diffSide": "RIGHT", "path": "charts/ccd-data-store-api/values.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwODoxMDo0N1rOGP2aWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwODoxMDo0N1rOGP2aWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI3MzMwNg==", "bodyText": "this should be the url in the matching env, like others.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/905#discussion_r419273306", "createdAt": "2020-05-04T08:10:47Z", "author": {"login": "MSancaktutar"}, "path": "charts/ccd-data-store-api/values.yaml", "diffHunk": "@@ -52,6 +52,7 @@ java:\n     IDAM_USER_URL: https://idam-api.{{ .Values.global.environment }}.platform.hmcts.net\n     CCD_DRAFT_STORE_URL: http://draft-store-service-{{ .Values.global.environment }}.service.core-compute-{{ .Values.global.environment }}.internal\n     CCD_DEFAULTPRINTURL: https://return-case-doc-ccd.nonprod.platform.hmcts.net/jurisdictions/:jid/case-types/:ctid/cases/:cid\n+    CASE_DOCUMENT_AM_URL: http://ccd-case-document-am-api-pr-190.service.core-compute-preview.internal", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89048235dad8be5e75e5c72ecaf08ae61b7ca8fc"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTgwNDc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/getcasedocument/CaseDocumentAttacher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwODoxMzoxMFrOGP2e_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwODoxMzoxMFrOGP2e_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI3NDQ5NQ==", "bodyText": "static final's on top of the class pls", "url": "https://github.com/hmcts/ccd-data-store-api/pull/905#discussion_r419274495", "createdAt": "2020-05-04T08:13:10Z", "author": {"login": "MSancaktutar"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/getcasedocument/CaseDocumentAttacher.java", "diffHunk": "@@ -0,0 +1,427 @@\n+package uk.gov.hmcts.ccd.domain.service.getcasedocument;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import liquibase.util.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.RestTemplate;\n+import uk.gov.hmcts.ccd.ApplicationParams;\n+import uk.gov.hmcts.ccd.data.SecurityUtils;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.search.CaseDocumentsMetadata;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadRequestException;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadSearchRequest;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DocumentTokenException;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.ResourceNotFoundException;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.ServiceException;\n+import uk.gov.hmcts.ccd.v2.external.domain.DocumentHashToken;\n+\n+\n+public class CaseDocumentAttacher {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CaseDocumentAttacher.class);\n+\n+    Map<String, String> documentsBeforeCallback = new HashMap<>();\n+    Map<String, String> documentsAfterCallback = null;\n+    Map<String, String> documentAfterCallbackOriginalCopy = new HashMap<>();\n+    Map<String, JsonNode> recursiveMapForCaseDetailsBefore = new HashMap<>();\n+    CaseDocumentsMetadata caseDocumentsMetadata = null;\n+    Set<String> existingDocumentsInCase = new HashSet();\n+\n+    public static final String COMPLEX = \"Complex\";\n+    public static final String COLLECTION = \"Collection\";\n+    public static final String DOCUMENT = \"Document\";\n+    public static final String DOCUMENT_URL = \"document_url\";\n+    public static final String DOCUMENT_BINARY_URL = \"document_binary_url\";\n+    public static final String HASH_TOKEN_STRING = \"hashToken\";\n+    public static final String BINARY = \"/binary\";\n+    public static final String EVENT_UPDATE = \"UPDATE\";\n+    public static final String CMC_EVENT_UPDATE = \"ReviewedPaperResponse\";\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89048235dad8be5e75e5c72ecaf08ae61b7ca8fc"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTgxMTIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/getcasedocument/CaseDocumentAttacher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwODoxNToyN1rOGP2jAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwODoxNToyN1rOGP2jAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI3NTUyMw==", "bodyText": "what is inside the body here? just a document Id?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/905#discussion_r419275523", "createdAt": "2020-05-04T08:15:27Z", "author": {"login": "MSancaktutar"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/getcasedocument/CaseDocumentAttacher.java", "diffHunk": "@@ -0,0 +1,427 @@\n+package uk.gov.hmcts.ccd.domain.service.getcasedocument;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import liquibase.util.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.RestTemplate;\n+import uk.gov.hmcts.ccd.ApplicationParams;\n+import uk.gov.hmcts.ccd.data.SecurityUtils;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.search.CaseDocumentsMetadata;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadRequestException;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadSearchRequest;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DocumentTokenException;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.ResourceNotFoundException;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.ServiceException;\n+import uk.gov.hmcts.ccd.v2.external.domain.DocumentHashToken;\n+\n+\n+public class CaseDocumentAttacher {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CaseDocumentAttacher.class);\n+\n+    Map<String, String> documentsBeforeCallback = new HashMap<>();\n+    Map<String, String> documentsAfterCallback = null;\n+    Map<String, String> documentAfterCallbackOriginalCopy = new HashMap<>();\n+    Map<String, JsonNode> recursiveMapForCaseDetailsBefore = new HashMap<>();\n+    CaseDocumentsMetadata caseDocumentsMetadata = null;\n+    Set<String> existingDocumentsInCase = new HashSet();\n+\n+    public static final String COMPLEX = \"Complex\";\n+    public static final String COLLECTION = \"Collection\";\n+    public static final String DOCUMENT = \"Document\";\n+    public static final String DOCUMENT_URL = \"document_url\";\n+    public static final String DOCUMENT_BINARY_URL = \"document_binary_url\";\n+    public static final String HASH_TOKEN_STRING = \"hashToken\";\n+    public static final String BINARY = \"/binary\";\n+    public static final String EVENT_UPDATE = \"UPDATE\";\n+    public static final String CMC_EVENT_UPDATE = \"ReviewedPaperResponse\";\n+\n+    private final RestTemplate restTemplate;\n+    private final ApplicationParams applicationParams;\n+    private final SecurityUtils securityUtils;\n+    JsonNode caseBeforeNode;\n+\n+    public CaseDocumentAttacher(RestTemplate restTemplate,\n+                                ApplicationParams applicationParams,\n+                                SecurityUtils securityUtils) {\n+        this.restTemplate = restTemplate;\n+        this.applicationParams = applicationParams;\n+        this.securityUtils = securityUtils;\n+    }\n+\n+\n+    public void extractDocumentsWithHashTokenBeforeCallbackForCreateCase(Map<String, JsonNode> data) {\n+        data.forEach((field, jsonNode) -> {\n+            if (!jsonNode.isNull() && isDocumentField(jsonNode)) {\n+                String documentId = extractDocumentId(jsonNode);\n+                if (jsonNode.get(HASH_TOKEN_STRING) == null) {\n+                    throw new BadRequestException(String.format(\"The document %s does not has the hashToken\", documentId));\n+                }\n+                documentsBeforeCallback.put(documentId, jsonNode.get(HASH_TOKEN_STRING).asText());\n+                ((ObjectNode) jsonNode).remove(HASH_TOKEN_STRING);\n+            } else {\n+                if (jsonNode instanceof ArrayNode) {\n+                    Iterator<JsonNode> arrayNode = ((ArrayNode) jsonNode).elements();\n+                    while (arrayNode.hasNext()) {\n+                        JsonNode arrayNodeElement = arrayNode.next();\n+                        arrayNodeElement.fields().forEachRemaining(node -> extractDocumentsWithHashTokenBeforeCallbackForCreateCase(\n+                            Collections.singletonMap(node.getKey(), node.getValue())));\n+\n+                    }\n+\n+                } else {\n+                    jsonNode.fields().forEachRemaining(node -> extractDocumentsWithHashTokenBeforeCallbackForCreateCase(\n+                        Collections.singletonMap(node.getKey(), node.getValue())));\n+                }\n+            }\n+        });\n+    }\n+\n+    public void extractDocumentsWithHashTokenBeforeCallbackForUpdate(Map<String, JsonNode> data, CaseDetails caseDetailsBefore) {\n+        data.forEach((field, jsonNode) -> {\n+            if (!jsonNode.isNull() && isDocumentField(jsonNode)) {\n+                String documentId = extractDocumentId(jsonNode);\n+                if (jsonNode.get(HASH_TOKEN_STRING) != null) {\n+                    documentsBeforeCallback.put(documentId, jsonNode.get(HASH_TOKEN_STRING).asText());\n+                    ((ObjectNode) jsonNode).remove(HASH_TOKEN_STRING);\n+                } else if (caseDetailsBefore != null) {\n+                    existingDocument(caseDetailsBefore.getData(), documentId);\n+                    if (existingDocumentsInCase.size() == 0) {\n+                        throw new BadRequestException(String.format(\"The document %s does not has the hashToken\", documentId));\n+                    } else {\n+                        existingDocumentsInCase.clear();\n+                    }\n+                }\n+\n+\n+            } else {\n+                if (jsonNode instanceof ArrayNode) {\n+                    Iterator<JsonNode> arrayNode = ((ArrayNode) jsonNode).elements();\n+                    while (arrayNode.hasNext()) {\n+                        JsonNode arrayNodeElement = arrayNode.next();\n+                        arrayNodeElement.fields().forEachRemaining(node -> extractDocumentsWithHashTokenBeforeCallbackForUpdate(\n+                            Collections.singletonMap(node.getKey(), node.getValue()), caseDetailsBefore));\n+\n+                    }\n+\n+                } else {\n+                    jsonNode.fields().forEachRemaining(node -> extractDocumentsWithHashTokenBeforeCallbackForUpdate(\n+                        Collections.singletonMap(node.getKey(), node.getValue()), caseDetailsBefore));\n+                }\n+            }\n+        });\n+    }\n+\n+    public void extractDocumentsAfterCallBack(CaseDetails caseDetails, boolean callBackWasCalled) {\n+\n+        documentsAfterCallback = new HashMap<>();\n+        caseDocumentsMetadata = CaseDocumentsMetadata.builder()\n+            .caseId(caseDetails.getReference().toString())\n+            .caseTypeId(caseDetails.getCaseTypeId())\n+            .jurisdictionId(caseDetails.getJurisdiction())\n+            .documentHashToken(new ArrayList<>())\n+            .build();\n+\n+        if (callBackWasCalled) {\n+            // to remove hashcode before compute delta\n+            extractDocumentIdsAfterCallback(caseDetails.getData(), documentsAfterCallback);\n+        }\n+    }\n+\n+    private void extractDocumentIdsAfterCallback(Map<String, JsonNode> data, Map<String, String> documentMap) {\n+        data.forEach((field, jsonNode) -> {\n+            if (!jsonNode.isNull() && isDocumentField(jsonNode)) {\n+                String documentId = extractDocumentId(jsonNode);\n+                if (jsonNode.get(HASH_TOKEN_STRING) != null) {\n+                    documentMap.put(documentId, jsonNode.get(HASH_TOKEN_STRING).asText());\n+                } else {\n+                    documentMap.put(documentId, null);\n+                }\n+                ((ObjectNode) jsonNode).remove(HASH_TOKEN_STRING);\n+            } else {\n+                jsonNode.fields().forEachRemaining(node -> extractDocumentIdsAfterCallback(\n+                    Collections.singletonMap(node.getKey(), node.getValue()), documentMap));\n+            }\n+        });\n+    }\n+\n+    public void restCallToAttachCaseDocuments() {\n+        if (!caseDocumentsMetadata.getDocumentHashToken().isEmpty()) {\n+            HttpHeaders headers = securityUtils.authorizationHeaders();\n+            headers.add(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE);\n+            HttpEntity<CaseDocumentsMetadata> requestEntity = new HttpEntity<>(caseDocumentsMetadata, headers);\n+            restTemplate.setRequestFactory(new HttpComponentsClientHttpRequestFactory());\n+\n+            try {\n+                restTemplate.exchange(applicationParams.getCaseDocumentAmApiHost().concat(applicationParams.getAttachDocumentPath()),\n+                    HttpMethod.PATCH, requestEntity, Void.class);\n+\n+            } catch (HttpClientErrorException restClientException) {\n+                if (restClientException.getStatusCode() != HttpStatus.FORBIDDEN) {\n+                    exceptionScenarios(restClientException);\n+                }\n+                String badDocument = restClientException.getResponseBodyAsString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89048235dad8be5e75e5c72ecaf08ae61b7ca8fc"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTgxMjQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/getcasedocument/CaseDocumentAttacher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwODoxNTo1NFrOGP2jxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwODoxNTo1NFrOGP2jxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI3NTcxNw==", "bodyText": "pls name the method better", "url": "https://github.com/hmcts/ccd-data-store-api/pull/905#discussion_r419275717", "createdAt": "2020-05-04T08:15:54Z", "author": {"login": "MSancaktutar"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/getcasedocument/CaseDocumentAttacher.java", "diffHunk": "@@ -0,0 +1,427 @@\n+package uk.gov.hmcts.ccd.domain.service.getcasedocument;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import liquibase.util.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.RestTemplate;\n+import uk.gov.hmcts.ccd.ApplicationParams;\n+import uk.gov.hmcts.ccd.data.SecurityUtils;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n+import uk.gov.hmcts.ccd.domain.model.search.CaseDocumentsMetadata;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadRequestException;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadSearchRequest;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DocumentTokenException;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.ResourceNotFoundException;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.ServiceException;\n+import uk.gov.hmcts.ccd.v2.external.domain.DocumentHashToken;\n+\n+\n+public class CaseDocumentAttacher {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CaseDocumentAttacher.class);\n+\n+    Map<String, String> documentsBeforeCallback = new HashMap<>();\n+    Map<String, String> documentsAfterCallback = null;\n+    Map<String, String> documentAfterCallbackOriginalCopy = new HashMap<>();\n+    Map<String, JsonNode> recursiveMapForCaseDetailsBefore = new HashMap<>();\n+    CaseDocumentsMetadata caseDocumentsMetadata = null;\n+    Set<String> existingDocumentsInCase = new HashSet();\n+\n+    public static final String COMPLEX = \"Complex\";\n+    public static final String COLLECTION = \"Collection\";\n+    public static final String DOCUMENT = \"Document\";\n+    public static final String DOCUMENT_URL = \"document_url\";\n+    public static final String DOCUMENT_BINARY_URL = \"document_binary_url\";\n+    public static final String HASH_TOKEN_STRING = \"hashToken\";\n+    public static final String BINARY = \"/binary\";\n+    public static final String EVENT_UPDATE = \"UPDATE\";\n+    public static final String CMC_EVENT_UPDATE = \"ReviewedPaperResponse\";\n+\n+    private final RestTemplate restTemplate;\n+    private final ApplicationParams applicationParams;\n+    private final SecurityUtils securityUtils;\n+    JsonNode caseBeforeNode;\n+\n+    public CaseDocumentAttacher(RestTemplate restTemplate,\n+                                ApplicationParams applicationParams,\n+                                SecurityUtils securityUtils) {\n+        this.restTemplate = restTemplate;\n+        this.applicationParams = applicationParams;\n+        this.securityUtils = securityUtils;\n+    }\n+\n+\n+    public void extractDocumentsWithHashTokenBeforeCallbackForCreateCase(Map<String, JsonNode> data) {\n+        data.forEach((field, jsonNode) -> {\n+            if (!jsonNode.isNull() && isDocumentField(jsonNode)) {\n+                String documentId = extractDocumentId(jsonNode);\n+                if (jsonNode.get(HASH_TOKEN_STRING) == null) {\n+                    throw new BadRequestException(String.format(\"The document %s does not has the hashToken\", documentId));\n+                }\n+                documentsBeforeCallback.put(documentId, jsonNode.get(HASH_TOKEN_STRING).asText());\n+                ((ObjectNode) jsonNode).remove(HASH_TOKEN_STRING);\n+            } else {\n+                if (jsonNode instanceof ArrayNode) {\n+                    Iterator<JsonNode> arrayNode = ((ArrayNode) jsonNode).elements();\n+                    while (arrayNode.hasNext()) {\n+                        JsonNode arrayNodeElement = arrayNode.next();\n+                        arrayNodeElement.fields().forEachRemaining(node -> extractDocumentsWithHashTokenBeforeCallbackForCreateCase(\n+                            Collections.singletonMap(node.getKey(), node.getValue())));\n+\n+                    }\n+\n+                } else {\n+                    jsonNode.fields().forEachRemaining(node -> extractDocumentsWithHashTokenBeforeCallbackForCreateCase(\n+                        Collections.singletonMap(node.getKey(), node.getValue())));\n+                }\n+            }\n+        });\n+    }\n+\n+    public void extractDocumentsWithHashTokenBeforeCallbackForUpdate(Map<String, JsonNode> data, CaseDetails caseDetailsBefore) {\n+        data.forEach((field, jsonNode) -> {\n+            if (!jsonNode.isNull() && isDocumentField(jsonNode)) {\n+                String documentId = extractDocumentId(jsonNode);\n+                if (jsonNode.get(HASH_TOKEN_STRING) != null) {\n+                    documentsBeforeCallback.put(documentId, jsonNode.get(HASH_TOKEN_STRING).asText());\n+                    ((ObjectNode) jsonNode).remove(HASH_TOKEN_STRING);\n+                } else if (caseDetailsBefore != null) {\n+                    existingDocument(caseDetailsBefore.getData(), documentId);\n+                    if (existingDocumentsInCase.size() == 0) {\n+                        throw new BadRequestException(String.format(\"The document %s does not has the hashToken\", documentId));\n+                    } else {\n+                        existingDocumentsInCase.clear();\n+                    }\n+                }\n+\n+\n+            } else {\n+                if (jsonNode instanceof ArrayNode) {\n+                    Iterator<JsonNode> arrayNode = ((ArrayNode) jsonNode).elements();\n+                    while (arrayNode.hasNext()) {\n+                        JsonNode arrayNodeElement = arrayNode.next();\n+                        arrayNodeElement.fields().forEachRemaining(node -> extractDocumentsWithHashTokenBeforeCallbackForUpdate(\n+                            Collections.singletonMap(node.getKey(), node.getValue()), caseDetailsBefore));\n+\n+                    }\n+\n+                } else {\n+                    jsonNode.fields().forEachRemaining(node -> extractDocumentsWithHashTokenBeforeCallbackForUpdate(\n+                        Collections.singletonMap(node.getKey(), node.getValue()), caseDetailsBefore));\n+                }\n+            }\n+        });\n+    }\n+\n+    public void extractDocumentsAfterCallBack(CaseDetails caseDetails, boolean callBackWasCalled) {\n+\n+        documentsAfterCallback = new HashMap<>();\n+        caseDocumentsMetadata = CaseDocumentsMetadata.builder()\n+            .caseId(caseDetails.getReference().toString())\n+            .caseTypeId(caseDetails.getCaseTypeId())\n+            .jurisdictionId(caseDetails.getJurisdiction())\n+            .documentHashToken(new ArrayList<>())\n+            .build();\n+\n+        if (callBackWasCalled) {\n+            // to remove hashcode before compute delta\n+            extractDocumentIdsAfterCallback(caseDetails.getData(), documentsAfterCallback);\n+        }\n+    }\n+\n+    private void extractDocumentIdsAfterCallback(Map<String, JsonNode> data, Map<String, String> documentMap) {\n+        data.forEach((field, jsonNode) -> {\n+            if (!jsonNode.isNull() && isDocumentField(jsonNode)) {\n+                String documentId = extractDocumentId(jsonNode);\n+                if (jsonNode.get(HASH_TOKEN_STRING) != null) {\n+                    documentMap.put(documentId, jsonNode.get(HASH_TOKEN_STRING).asText());\n+                } else {\n+                    documentMap.put(documentId, null);\n+                }\n+                ((ObjectNode) jsonNode).remove(HASH_TOKEN_STRING);\n+            } else {\n+                jsonNode.fields().forEachRemaining(node -> extractDocumentIdsAfterCallback(\n+                    Collections.singletonMap(node.getKey(), node.getValue()), documentMap));\n+            }\n+        });\n+    }\n+\n+    public void restCallToAttachCaseDocuments() {\n+        if (!caseDocumentsMetadata.getDocumentHashToken().isEmpty()) {\n+            HttpHeaders headers = securityUtils.authorizationHeaders();\n+            headers.add(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE);\n+            HttpEntity<CaseDocumentsMetadata> requestEntity = new HttpEntity<>(caseDocumentsMetadata, headers);\n+            restTemplate.setRequestFactory(new HttpComponentsClientHttpRequestFactory());\n+\n+            try {\n+                restTemplate.exchange(applicationParams.getCaseDocumentAmApiHost().concat(applicationParams.getAttachDocumentPath()),\n+                    HttpMethod.PATCH, requestEntity, Void.class);\n+\n+            } catch (HttpClientErrorException restClientException) {\n+                if (restClientException.getStatusCode() != HttpStatus.FORBIDDEN) {\n+                    exceptionScenarios(restClientException);\n+                }\n+                String badDocument = restClientException.getResponseBodyAsString();\n+\n+                if (documentAfterCallbackOriginalCopy.size() > 0 && documentAfterCallbackOriginalCopy.get(badDocument) != null) {\n+                    throw new ServiceException(String.format(\"The document %s introduced by Services has invalid hashToken\", badDocument));\n+                } else {\n+                    throw new DocumentTokenException(String.format(\"The user has provided an invalid hashToken for document %s\", badDocument));\n+                }\n+            }\n+        }\n+    }\n+\n+    private void exceptionScenarios(HttpClientErrorException restClientException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89048235dad8be5e75e5c72ecaf08ae61b7ca8fc"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDMyMzY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/v2/V2.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMDo1ODo1N1rOGP7gOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMDo1ODo1N1rOGP7gOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM1NjcyOA==", "bodyText": "please let's change this to: \"application/vnd.uk.gov.hmcts.ccd-data-store-api.case-document.v1+json;charset=UTF-8\";", "url": "https://github.com/hmcts/ccd-data-store-api/pull/905#discussion_r419356728", "createdAt": "2020-05-04T10:58:57Z", "author": {"login": "MSancaktutar"}, "path": "src/main/java/uk/gov/hmcts/ccd/v2/V2.java", "diffHunk": "@@ -12,6 +12,7 @@ private MediaType() {}\n         // External API\n         public static final String CASE = \"application/vnd.uk.gov.hmcts.ccd-data-store-api.case.v2+json;charset=UTF-8\";\n         public static final String CASE_DOCUMENTS = \"application/vnd.uk.gov.hmcts.ccd-data-store-api.case-documents.v2+json;charset=UTF-8\";\n+        public static final String CASE_DOCUMENT = \"application/vnd.uk.gov.hmcts.ccd-data-store-api.case-document+json;charset=UTF-8;version=1.0\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c010258d813c318e988c71cf7c638d61ddffd346"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDMyODMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/v2/external/controller/CaseController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMTowMDozMVrOGP7jIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMTowMDozMVrOGP7jIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM1NzQ3Mw==", "bodyText": "case type now found - 422?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/905#discussion_r419357473", "createdAt": "2020-05-04T11:00:31Z", "author": {"login": "MSancaktutar"}, "path": "src/main/java/uk/gov/hmcts/ccd/v2/external/controller/CaseController.java", "diffHunk": "@@ -213,11 +207,86 @@ public CaseController(\n     public ResponseEntity<CaseResource> createCase(@PathVariable(\"caseTypeId\") String caseTypeId,\n                                                    @RequestBody final CaseDataContent content,\n                                                    @RequestParam(value = \"ignore-warning\", required = false) final Boolean ignoreWarning) {\n-        final CaseDetails caseDetails = createCaseOperation.createCaseDetails(caseTypeId, content, ignoreWarning);\n-\n-        return status(HttpStatus.CREATED).body(new CaseResource(caseDetails, content, ignoreWarning));\n+        return getCaseResourceResponseEntity(caseTypeId, content, ignoreWarning);\n     }\n \n+    @Transactional\n+    @PostMapping(\n+        path = \"/case-types/{caseTypeId}/cases\",\n+        headers = {\n+            V3.EXPERIMENTAL_HEADER\n+        },\n+        produces = {\n+            V3.MediaType.CREATE_CASE\n+        },\n+        consumes = {\n+            V3.MediaType.CREATE_CASE\n+        }\n+    )\n+    @ApiOperation(\n+        value = \"Submit case creation V3\",\n+        notes = V3.EXPERIMENTAL_WARNING\n+    )\n+    @ApiResponses({\n+          @ApiResponse(\n+              code = 201,\n+              message = \"Created\",\n+              response = CaseResource.class\n+          ),\n+          @ApiResponse(\n+              code = 400,\n+              message = V3.Error.MISSING_EVENT_TOKEN\n+          ),\n+          @ApiResponse(\n+              code = 404,\n+              message = V3.Error.EVENT_TRIGGER_NOT_FOUND\n+          ),\n+          @ApiResponse(\n+              code = 404,\n+              message = V3.Error.NO_MATCHING_EVENT_TRIGGER\n+          ),\n+          @ApiResponse(\n+              code = 409,\n+              message = V3.Error.CASE_ALTERED\n+          ),\n+          @ApiResponse(\n+              code = 422,\n+              message = V3.Error.CASE_DATA_NOT_FOUND\n+          ),\n+          @ApiResponse(\n+              code = 422,\n+              message = V3.Error.CASE_TYPE_NOT_FOUND", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c010258d813c318e988c71cf7c638d61ddffd346"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDMyODkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/v2/external/controller/CaseController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMTowMDo0NFrOGP7jig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMTowMDo0NFrOGP7jig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM1NzU3OA==", "bodyText": "422?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/905#discussion_r419357578", "createdAt": "2020-05-04T11:00:44Z", "author": {"login": "MSancaktutar"}, "path": "src/main/java/uk/gov/hmcts/ccd/v2/external/controller/CaseController.java", "diffHunk": "@@ -213,11 +207,86 @@ public CaseController(\n     public ResponseEntity<CaseResource> createCase(@PathVariable(\"caseTypeId\") String caseTypeId,\n                                                    @RequestBody final CaseDataContent content,\n                                                    @RequestParam(value = \"ignore-warning\", required = false) final Boolean ignoreWarning) {\n-        final CaseDetails caseDetails = createCaseOperation.createCaseDetails(caseTypeId, content, ignoreWarning);\n-\n-        return status(HttpStatus.CREATED).body(new CaseResource(caseDetails, content, ignoreWarning));\n+        return getCaseResourceResponseEntity(caseTypeId, content, ignoreWarning);\n     }\n \n+    @Transactional\n+    @PostMapping(\n+        path = \"/case-types/{caseTypeId}/cases\",\n+        headers = {\n+            V3.EXPERIMENTAL_HEADER\n+        },\n+        produces = {\n+            V3.MediaType.CREATE_CASE\n+        },\n+        consumes = {\n+            V3.MediaType.CREATE_CASE\n+        }\n+    )\n+    @ApiOperation(\n+        value = \"Submit case creation V3\",\n+        notes = V3.EXPERIMENTAL_WARNING\n+    )\n+    @ApiResponses({\n+          @ApiResponse(\n+              code = 201,\n+              message = \"Created\",\n+              response = CaseResource.class\n+          ),\n+          @ApiResponse(\n+              code = 400,\n+              message = V3.Error.MISSING_EVENT_TOKEN\n+          ),\n+          @ApiResponse(\n+              code = 404,\n+              message = V3.Error.EVENT_TRIGGER_NOT_FOUND\n+          ),\n+          @ApiResponse(\n+              code = 404,\n+              message = V3.Error.NO_MATCHING_EVENT_TRIGGER\n+          ),\n+          @ApiResponse(\n+              code = 409,\n+              message = V3.Error.CASE_ALTERED\n+          ),\n+          @ApiResponse(\n+              code = 422,\n+              message = V3.Error.CASE_DATA_NOT_FOUND", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c010258d813c318e988c71cf7c638d61ddffd346"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDMzMDc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/v2/external/controller/CaseController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMTowMToyN1rOGP7kug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMTowMToyN1rOGP7kug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM1Nzg4Mg==", "bodyText": "422?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/905#discussion_r419357882", "createdAt": "2020-05-04T11:01:27Z", "author": {"login": "MSancaktutar"}, "path": "src/main/java/uk/gov/hmcts/ccd/v2/external/controller/CaseController.java", "diffHunk": "@@ -213,11 +207,86 @@ public CaseController(\n     public ResponseEntity<CaseResource> createCase(@PathVariable(\"caseTypeId\") String caseTypeId,\n                                                    @RequestBody final CaseDataContent content,\n                                                    @RequestParam(value = \"ignore-warning\", required = false) final Boolean ignoreWarning) {\n-        final CaseDetails caseDetails = createCaseOperation.createCaseDetails(caseTypeId, content, ignoreWarning);\n-\n-        return status(HttpStatus.CREATED).body(new CaseResource(caseDetails, content, ignoreWarning));\n+        return getCaseResourceResponseEntity(caseTypeId, content, ignoreWarning);\n     }\n \n+    @Transactional\n+    @PostMapping(\n+        path = \"/case-types/{caseTypeId}/cases\",\n+        headers = {\n+            V3.EXPERIMENTAL_HEADER\n+        },\n+        produces = {\n+            V3.MediaType.CREATE_CASE\n+        },\n+        consumes = {\n+            V3.MediaType.CREATE_CASE\n+        }\n+    )\n+    @ApiOperation(\n+        value = \"Submit case creation V3\",\n+        notes = V3.EXPERIMENTAL_WARNING\n+    )\n+    @ApiResponses({\n+          @ApiResponse(\n+              code = 201,\n+              message = \"Created\",\n+              response = CaseResource.class\n+          ),\n+          @ApiResponse(\n+              code = 400,\n+              message = V3.Error.MISSING_EVENT_TOKEN\n+          ),\n+          @ApiResponse(\n+              code = 404,\n+              message = V3.Error.EVENT_TRIGGER_NOT_FOUND\n+          ),\n+          @ApiResponse(\n+              code = 404,\n+              message = V3.Error.NO_MATCHING_EVENT_TRIGGER\n+          ),\n+          @ApiResponse(\n+              code = 409,\n+              message = V3.Error.CASE_ALTERED\n+          ),\n+          @ApiResponse(\n+              code = 422,\n+              message = V3.Error.CASE_DATA_NOT_FOUND\n+          ),\n+          @ApiResponse(\n+              code = 422,\n+              message = V3.Error.CASE_TYPE_NOT_FOUND\n+          ),\n+          @ApiResponse(\n+              code = 422,\n+              message = V3.Error.USER_ROLE_NOT_FOUND\n+          ),\n+          @ApiResponse(\n+              code = 422,\n+              message = V3.Error.EVENT_TRIGGER_NOT_SPECIFIED\n+          ),\n+          @ApiResponse(\n+              code = 422,\n+              message = V3.Error.EVENT_TRIGGER_NOT_KNOWN_FOR_CASE_TYPE\n+          ),\n+          @ApiResponse(\n+              code = 422,\n+              message = V3.Error.EVENT_TRIGGER_HAS_PRE_STATE\n+          ),\n+          @ApiResponse(\n+              code = 422,\n+              message = V3.Error.CASE_FIELD_INVALID\n+          ),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c010258d813c318e988c71cf7c638d61ddffd346"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDMzMzExOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/v2/external/controller/CaseController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMTowMjoxN1rOGP7mIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMTowMjoxN1rOGP7mIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM1ODI0MA==", "bodyText": "422?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/905#discussion_r419358240", "createdAt": "2020-05-04T11:02:17Z", "author": {"login": "MSancaktutar"}, "path": "src/main/java/uk/gov/hmcts/ccd/v2/external/controller/CaseController.java", "diffHunk": "@@ -213,11 +207,86 @@ public CaseController(\n     public ResponseEntity<CaseResource> createCase(@PathVariable(\"caseTypeId\") String caseTypeId,\n                                                    @RequestBody final CaseDataContent content,\n                                                    @RequestParam(value = \"ignore-warning\", required = false) final Boolean ignoreWarning) {\n-        final CaseDetails caseDetails = createCaseOperation.createCaseDetails(caseTypeId, content, ignoreWarning);\n-\n-        return status(HttpStatus.CREATED).body(new CaseResource(caseDetails, content, ignoreWarning));\n+        return getCaseResourceResponseEntity(caseTypeId, content, ignoreWarning);\n     }\n \n+    @Transactional\n+    @PostMapping(\n+        path = \"/case-types/{caseTypeId}/cases\",\n+        headers = {\n+            V3.EXPERIMENTAL_HEADER\n+        },\n+        produces = {\n+            V3.MediaType.CREATE_CASE\n+        },\n+        consumes = {\n+            V3.MediaType.CREATE_CASE\n+        }\n+    )\n+    @ApiOperation(\n+        value = \"Submit case creation V3\",\n+        notes = V3.EXPERIMENTAL_WARNING\n+    )\n+    @ApiResponses({\n+          @ApiResponse(\n+              code = 201,\n+              message = \"Created\",\n+              response = CaseResource.class\n+          ),\n+          @ApiResponse(\n+              code = 400,\n+              message = V3.Error.MISSING_EVENT_TOKEN\n+          ),\n+          @ApiResponse(\n+              code = 404,\n+              message = V3.Error.EVENT_TRIGGER_NOT_FOUND\n+          ),\n+          @ApiResponse(\n+              code = 404,\n+              message = V3.Error.NO_MATCHING_EVENT_TRIGGER\n+          ),\n+          @ApiResponse(\n+              code = 409,\n+              message = V3.Error.CASE_ALTERED\n+          ),\n+          @ApiResponse(\n+              code = 422,\n+              message = V3.Error.CASE_DATA_NOT_FOUND\n+          ),\n+          @ApiResponse(\n+              code = 422,\n+              message = V3.Error.CASE_TYPE_NOT_FOUND\n+          ),\n+          @ApiResponse(\n+              code = 422,\n+              message = V3.Error.USER_ROLE_NOT_FOUND\n+          ),\n+          @ApiResponse(\n+              code = 422,\n+              message = V3.Error.EVENT_TRIGGER_NOT_SPECIFIED", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c010258d813c318e988c71cf7c638d61ddffd346"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3813, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}