{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzMTg4MDQ3", "number": 1018, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwODoyMzoyMVrOEQCeeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzo0NTowM1rOEQMGtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjUzMjQyOnYy", "diffSide": "RIGHT", "path": "charts/ccd-data-store-api/values.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwODoyMzoyMVrOGz_U-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwODoyMzoyMVrOGz_U-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE2ODEyMw==", "bodyText": "These can be overridden in Flux config when role logging is required.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1018#discussion_r457168123", "createdAt": "2020-07-20T08:23:21Z", "author": {"login": "danlysiak"}, "path": "charts/ccd-data-store-api/values.yaml", "diffHunk": "@@ -60,3 +60,6 @@ java:\n     HTTP_CLIENT_SECONDS_IDLE_CONNECTION: '120'\n     HTTP_CLIENT_MAX_CLIENT_PER_ROUTE: '20'\n     HTTP_CLIENT_VALIDATE_AFTER_INACTIVITY: '2000'\n+\n+    DATA_STORE_ROLE_LOGGING_ENABLED: 'false'\n+    DATA_STORE_ROLE_LOGGING_PATH_REGEX: '.*'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64c7a669a14ff5e152e76e18b3c5bb68c1263584"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjUzNDEwOnYy", "diffSide": "RIGHT", "path": "src/main/resources/application.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwODoyMzo0MlrOGz_V-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwODoyMzo0MlrOGz_V-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE2ODM3Nw==", "bodyText": "Can be uncommented if desired for local dev.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1018#discussion_r457168377", "createdAt": "2020-07-20T08:23:42Z", "author": {"login": "danlysiak"}, "path": "src/main/resources/application.properties", "diffHunk": "@@ -116,6 +116,7 @@ logging.level.uk.gov.hmcts.ccd=${DATA_STORE_DEFAULT_LOG_LEVEL:INFO}\n # logging.level.org.springframework.web=DEBUG\n #logging.level.org.hibernate=INFO\n #logging.level.org.hibernate.type.descriptor.sql=trace\n+#logging.level.uk.gov.hmcts.ccd.security.filters.RoleLoggingFilter=DEBUG", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64c7a669a14ff5e152e76e18b3c5bb68c1263584"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjU5MjA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/security/filters/RoleLoggingFilter.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwODozMzo1MFrOGz_2ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTowMzo1MFrOG0BPzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE3NjcxNA==", "bodyText": "i guess it won't log in case of auth failures. Is that OK?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1018#discussion_r457176714", "createdAt": "2020-07-20T08:33:50Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/security/filters/RoleLoggingFilter.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package uk.gov.hmcts.ccd.security.filters;\n+\n+import com.microsoft.applicationinsights.telemetry.SeverityLevel;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import uk.gov.hmcts.ccd.AppInsights;\n+import uk.gov.hmcts.ccd.data.SecurityUtils;\n+import uk.gov.hmcts.reform.idam.client.models.UserInfo;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.regex.Pattern;\n+\n+@Component\n+@ConditionalOnProperty(value = \"role.logging.enabled\", havingValue = \"true\")\n+@Slf4j\n+public class RoleLoggingFilter extends OncePerRequestFilter {\n+\n+    private static final String LOG_MESSAGE_TEMPLATE = \"[ROLE LOG] Attempting to serve request %s %s for user with IDAM roles %s\";\n+\n+    private final AppInsights appInsights;\n+    private final SecurityUtils securityUtils;\n+    private final Pattern pathPattern;\n+\n+    @Autowired\n+    public RoleLoggingFilter(AppInsights appInsights, SecurityUtils securityUtils, @Value(\"${role.logging.path.regex}\") String pathRegex) {\n+        this.appInsights = appInsights;\n+        this.securityUtils = securityUtils;\n+        this.pathPattern = Pattern.compile(pathRegex);\n+    }\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n+        throws ServletException, IOException {\n+        String message = buildLogMessage(request, securityUtils.getUserInfo());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64c7a669a14ff5e152e76e18b3c5bb68c1263584"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE3NzY2NA==", "bodyText": "That's right, on the 3A was decided we only want it for authenticated requests \ud83d\udc4d", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1018#discussion_r457177664", "createdAt": "2020-07-20T08:34:55Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/security/filters/RoleLoggingFilter.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package uk.gov.hmcts.ccd.security.filters;\n+\n+import com.microsoft.applicationinsights.telemetry.SeverityLevel;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import uk.gov.hmcts.ccd.AppInsights;\n+import uk.gov.hmcts.ccd.data.SecurityUtils;\n+import uk.gov.hmcts.reform.idam.client.models.UserInfo;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.regex.Pattern;\n+\n+@Component\n+@ConditionalOnProperty(value = \"role.logging.enabled\", havingValue = \"true\")\n+@Slf4j\n+public class RoleLoggingFilter extends OncePerRequestFilter {\n+\n+    private static final String LOG_MESSAGE_TEMPLATE = \"[ROLE LOG] Attempting to serve request %s %s for user with IDAM roles %s\";\n+\n+    private final AppInsights appInsights;\n+    private final SecurityUtils securityUtils;\n+    private final Pattern pathPattern;\n+\n+    @Autowired\n+    public RoleLoggingFilter(AppInsights appInsights, SecurityUtils securityUtils, @Value(\"${role.logging.path.regex}\") String pathRegex) {\n+        this.appInsights = appInsights;\n+        this.securityUtils = securityUtils;\n+        this.pathPattern = Pattern.compile(pathRegex);\n+    }\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n+        throws ServletException, IOException {\n+        String message = buildLogMessage(request, securityUtils.getUserInfo());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE3NjcxNA=="}, "originalCommit": {"oid": "64c7a669a14ff5e152e76e18b3c5bb68c1263584"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE4NTQxMw==", "bodyText": "Well, I would suggest to log all requests no matter authorisation passes or not. We had some cases to diagnose with role-based authorisation failures and we may have more.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1018#discussion_r457185413", "createdAt": "2020-07-20T08:45:08Z", "author": {"login": "MSancaktutar"}, "path": "src/main/java/uk/gov/hmcts/ccd/security/filters/RoleLoggingFilter.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package uk.gov.hmcts.ccd.security.filters;\n+\n+import com.microsoft.applicationinsights.telemetry.SeverityLevel;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import uk.gov.hmcts.ccd.AppInsights;\n+import uk.gov.hmcts.ccd.data.SecurityUtils;\n+import uk.gov.hmcts.reform.idam.client.models.UserInfo;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.regex.Pattern;\n+\n+@Component\n+@ConditionalOnProperty(value = \"role.logging.enabled\", havingValue = \"true\")\n+@Slf4j\n+public class RoleLoggingFilter extends OncePerRequestFilter {\n+\n+    private static final String LOG_MESSAGE_TEMPLATE = \"[ROLE LOG] Attempting to serve request %s %s for user with IDAM roles %s\";\n+\n+    private final AppInsights appInsights;\n+    private final SecurityUtils securityUtils;\n+    private final Pattern pathPattern;\n+\n+    @Autowired\n+    public RoleLoggingFilter(AppInsights appInsights, SecurityUtils securityUtils, @Value(\"${role.logging.path.regex}\") String pathRegex) {\n+        this.appInsights = appInsights;\n+        this.securityUtils = securityUtils;\n+        this.pathPattern = Pattern.compile(pathRegex);\n+    }\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n+        throws ServletException, IOException {\n+        String message = buildLogMessage(request, securityUtils.getUserInfo());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE3NjcxNA=="}, "originalCommit": {"oid": "64c7a669a14ff5e152e76e18b3c5bb68c1263584"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE5NjM0Nw==", "bodyText": "Apologies @MSancaktutar, in my haste I put authorised when I meant authenticated.. If a request is unauthorised (e.g. user requests case they don't have access to) it DOES still log!", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1018#discussion_r457196347", "createdAt": "2020-07-20T08:59:32Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/security/filters/RoleLoggingFilter.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package uk.gov.hmcts.ccd.security.filters;\n+\n+import com.microsoft.applicationinsights.telemetry.SeverityLevel;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import uk.gov.hmcts.ccd.AppInsights;\n+import uk.gov.hmcts.ccd.data.SecurityUtils;\n+import uk.gov.hmcts.reform.idam.client.models.UserInfo;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.regex.Pattern;\n+\n+@Component\n+@ConditionalOnProperty(value = \"role.logging.enabled\", havingValue = \"true\")\n+@Slf4j\n+public class RoleLoggingFilter extends OncePerRequestFilter {\n+\n+    private static final String LOG_MESSAGE_TEMPLATE = \"[ROLE LOG] Attempting to serve request %s %s for user with IDAM roles %s\";\n+\n+    private final AppInsights appInsights;\n+    private final SecurityUtils securityUtils;\n+    private final Pattern pathPattern;\n+\n+    @Autowired\n+    public RoleLoggingFilter(AppInsights appInsights, SecurityUtils securityUtils, @Value(\"${role.logging.path.regex}\") String pathRegex) {\n+        this.appInsights = appInsights;\n+        this.securityUtils = securityUtils;\n+        this.pathPattern = Pattern.compile(pathRegex);\n+    }\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n+        throws ServletException, IOException {\n+        String message = buildLogMessage(request, securityUtils.getUserInfo());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE3NjcxNA=="}, "originalCommit": {"oid": "64c7a669a14ff5e152e76e18b3c5bb68c1263584"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE5OTU2NQ==", "bodyText": "Well, in fact, what I meant was... A user's roles not being sufficient to access and operation would be an authorisation failure. And even in that case, we should log the roles.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1018#discussion_r457199565", "createdAt": "2020-07-20T09:03:50Z", "author": {"login": "MSancaktutar"}, "path": "src/main/java/uk/gov/hmcts/ccd/security/filters/RoleLoggingFilter.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package uk.gov.hmcts.ccd.security.filters;\n+\n+import com.microsoft.applicationinsights.telemetry.SeverityLevel;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import uk.gov.hmcts.ccd.AppInsights;\n+import uk.gov.hmcts.ccd.data.SecurityUtils;\n+import uk.gov.hmcts.reform.idam.client.models.UserInfo;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.regex.Pattern;\n+\n+@Component\n+@ConditionalOnProperty(value = \"role.logging.enabled\", havingValue = \"true\")\n+@Slf4j\n+public class RoleLoggingFilter extends OncePerRequestFilter {\n+\n+    private static final String LOG_MESSAGE_TEMPLATE = \"[ROLE LOG] Attempting to serve request %s %s for user with IDAM roles %s\";\n+\n+    private final AppInsights appInsights;\n+    private final SecurityUtils securityUtils;\n+    private final Pattern pathPattern;\n+\n+    @Autowired\n+    public RoleLoggingFilter(AppInsights appInsights, SecurityUtils securityUtils, @Value(\"${role.logging.path.regex}\") String pathRegex) {\n+        this.appInsights = appInsights;\n+        this.securityUtils = securityUtils;\n+        this.pathPattern = Pattern.compile(pathRegex);\n+    }\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n+        throws ServletException, IOException {\n+        String message = buildLogMessage(request, securityUtils.getUserInfo());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE3NjcxNA=="}, "originalCommit": {"oid": "64c7a669a14ff5e152e76e18b3c5bb68c1263584"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjY0MDc2OnYy", "diffSide": "RIGHT", "path": "charts/ccd-data-store-api/values.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwODo0Mjo1NlrOG0ASVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwODo0Mjo1NlrOG0ASVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE4MzgyOQ==", "bodyText": "I think instead of switching the logging on and off, we should just change the logging level per package/class.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1018#discussion_r457183829", "createdAt": "2020-07-20T08:42:56Z", "author": {"login": "MSancaktutar"}, "path": "charts/ccd-data-store-api/values.yaml", "diffHunk": "@@ -60,3 +60,6 @@ java:\n     HTTP_CLIENT_SECONDS_IDLE_CONNECTION: '120'\n     HTTP_CLIENT_MAX_CLIENT_PER_ROUTE: '20'\n     HTTP_CLIENT_VALIDATE_AFTER_INACTIVITY: '2000'\n+\n+    DATA_STORE_ROLE_LOGGING_ENABLED: 'false'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64c7a669a14ff5e152e76e18b3c5bb68c1263584"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjY1OTMwOnYy", "diffSide": "RIGHT", "path": "src/main/resources/application.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwODo0Njo0MFrOG0Ac_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwODo0Njo0MFrOG0Ac_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE4NjU1OQ==", "bodyText": "I was thinking to have only a log-level alignment, rather than a logical switch to enable/disable the related logging at all.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1018#discussion_r457186559", "createdAt": "2020-07-20T08:46:40Z", "author": {"login": "MSancaktutar"}, "path": "src/main/resources/application.properties", "diffHunk": "@@ -162,3 +163,7 @@ ccd.am.read.from_am=${CCD_AM_READ_FROM_AM:}\n # http statuses with comma separated to ignore audit logs\n audit.log.ignore.statues=404\n audit.log.enabled=true\n+\n+# Role logging\n+role.logging.enabled=${DATA_STORE_ROLE_LOGGING_ENABLED:false}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64c7a669a14ff5e152e76e18b3c5bb68c1263584"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MzkzNzQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/security/filters/LoggingFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzoxNjo1N1rOG0L0TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzoxNjo1N1rOG0L0TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3Mjc0OQ==", "bodyText": "I think this name is a bit too generic. We can't log everything with this filter. Maybe a bit more specific name would help", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1018#discussion_r457372749", "createdAt": "2020-07-20T13:16:57Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/security/filters/LoggingFilter.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package uk.gov.hmcts.ccd.security.filters;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import uk.gov.hmcts.ccd.data.SecurityUtils;\n+import uk.gov.hmcts.reform.idam.client.models.UserInfo;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.regex.Pattern;\n+\n+@Slf4j\n+public class LoggingFilter extends OncePerRequestFilter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23ccbaeb5bb8c24ced929d3ec34c249937adf095"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MzkzOTI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/security/filters/LoggingFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzoxNzoyMlrOG0L1YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzoxNzoyMlrOG0L1YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3MzAyNA==", "bodyText": "can you add a short Javadoc description please", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1018#discussion_r457373024", "createdAt": "2020-07-20T13:17:22Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/security/filters/LoggingFilter.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package uk.gov.hmcts.ccd.security.filters;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import uk.gov.hmcts.ccd.data.SecurityUtils;\n+import uk.gov.hmcts.reform.idam.client.models.UserInfo;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.regex.Pattern;\n+\n+@Slf4j", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23ccbaeb5bb8c24ced929d3ec34c249937adf095"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Mzk0OTY1OnYy", "diffSide": "RIGHT", "path": "charts/ccd-data-store-api/values.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzoxOToyMlrOG0L7Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzoxOToyMlrOG0L7Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3NDU1OQ==", "bodyText": "this name is a bit too generic. Maybe a more specific name would help. Or you can add a small description", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1018#discussion_r457374559", "createdAt": "2020-07-20T13:19:22Z", "author": {"login": "mario-paniccia"}, "path": "charts/ccd-data-store-api/values.yaml", "diffHunk": "@@ -60,3 +60,5 @@ java:\n     HTTP_CLIENT_SECONDS_IDLE_CONNECTION: '120'\n     HTTP_CLIENT_MAX_CLIENT_PER_ROUTE: '20'\n     HTTP_CLIENT_VALIDATE_AFTER_INACTIVITY: '2000'\n+\n+    DATA_STORE_LOGGING_FILTER_PATH_REGEX: '.*'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23ccbaeb5bb8c24ced929d3ec34c249937adf095"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Mzk3MDczOnYy", "diffSide": "RIGHT", "path": "lib/AI-Agent.xml", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzoyMjo1MlrOG0MHng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo1MjozN1rOG0RMQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3NzY5NA==", "bodyText": "can we check with Platform Engineering to see that they are ok with this? not sure if there are any guidelines in place that would discourage not to send debug logs on app insights.\nAlso, keep in mind that in the past we always double checked that no sensible data is logged in INFO or above. Because we knew that would be visible in AppInsights to any user. But we never checked something similar for debug logs. Wonder whether there are existing debug log that would log sensible data\nWe need to be careful with sending DEBUG logs to AppInsights because it's more likely that a Dev can expose sensible data accidentally in a DEBUG log", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1018#discussion_r457377694", "createdAt": "2020-07-20T13:22:52Z", "author": {"login": "mario-paniccia"}, "path": "lib/AI-Agent.xml", "diffHunk": "@@ -1,6 +1,6 @@\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n <ApplicationInsightsAgent>\n-    <AgentLogger>INFO</AgentLogger>\n+    <AgentLogger>DEBUG</AgentLogger>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23ccbaeb5bb8c24ced929d3ec34c249937adf095"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0Mzg0NQ==", "bodyText": "In fact, by having the root level logging at INFO level, we are writing no debug logs at all, by default.\nBy configuring only a specific class to log at DEBUG level, we are writing logs in debug level only in that class, if it contains some.\nThe AI agent is sending anything it receives at or above DEBUG, but the resultant data pushed to Azure is only INFO Logs + any specific debug log. This is actually a nicer way of using the log levels, as you'd also appreciate.\nRe sensitive info exposures, you're right. But that concern already applies to all logs.\nOne can write sensitive data in a log relying on that it's not visible anywhere, but then later config changes may expose such data. So, we are already assuring no logging of any sensitive data at all.\nIf we use only Info Logs, it also prevents us from use of debug logs in many many libraries that come with built-in logging at debug level. In the case of a need for, let's say, a debugging with help of a  Spring library logs, we will have to set the log level for a specific Spring class or package, but the current config will not allow the specific Spring debug log to appear on AI Resources.\nObviously, pushing to Azure debug logs is not something we can do arbitrarily, as it does come with its costs, but when we enable a debug log, we do so by expressly knowing and managing the fact that this is a temporary and very limited scope of debug logging for a good reason - which happens very rarely, like in this situation where we need some genuinely 'debug' logs.\nWell, in short,\nThe idea is, actually, to be able to preserve the debug logging capability in the full stack of the app at a class-level granularity if and only when needed - and disabled by default by having root log level at INFO.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1018#discussion_r457443845", "createdAt": "2020-07-20T14:34:40Z", "author": {"login": "MSancaktutar"}, "path": "lib/AI-Agent.xml", "diffHunk": "@@ -1,6 +1,6 @@\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n <ApplicationInsightsAgent>\n-    <AgentLogger>INFO</AgentLogger>\n+    <AgentLogger>DEBUG</AgentLogger>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3NzY5NA=="}, "originalCommit": {"oid": "23ccbaeb5bb8c24ced929d3ec34c249937adf095"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0NzU5Mw==", "bodyText": "this is just the agent logger, unless you are debugging something in the app insights agent I would be very surprised that you would need to change this.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1018#discussion_r457447593", "createdAt": "2020-07-20T14:38:31Z", "author": {"login": "timja"}, "path": "lib/AI-Agent.xml", "diffHunk": "@@ -1,6 +1,6 @@\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n <ApplicationInsightsAgent>\n-    <AgentLogger>INFO</AgentLogger>\n+    <AgentLogger>DEBUG</AgentLogger>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3NzY5NA=="}, "originalCommit": {"oid": "23ccbaeb5bb8c24ced929d3ec34c249937adf095"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ1MDM5Mw==", "bodyText": "That's even better. So, it means the actual log level pushed to Azure is defined solely at application properties - nothing managed at AI Agent?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1018#discussion_r457450393", "createdAt": "2020-07-20T14:41:20Z", "author": {"login": "MSancaktutar"}, "path": "lib/AI-Agent.xml", "diffHunk": "@@ -1,6 +1,6 @@\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n <ApplicationInsightsAgent>\n-    <AgentLogger>INFO</AgentLogger>\n+    <AgentLogger>DEBUG</AgentLogger>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3NzY5NA=="}, "originalCommit": {"oid": "23ccbaeb5bb8c24ced929d3ec34c249937adf095"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2MDgwMQ==", "bodyText": "Its configured here:\nhttps://github.com/hmcts/java-logging/blob/master/src/main/resources/logback.xml#L5", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1018#discussion_r457460801", "createdAt": "2020-07-20T14:52:37Z", "author": {"login": "timja"}, "path": "lib/AI-Agent.xml", "diffHunk": "@@ -1,6 +1,6 @@\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n <ApplicationInsightsAgent>\n-    <AgentLogger>INFO</AgentLogger>\n+    <AgentLogger>DEBUG</AgentLogger>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3NzY5NA=="}, "originalCommit": {"oid": "23ccbaeb5bb8c24ced929d3ec34c249937adf095"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDA0MDc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/security/filters/LoggingFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzozNDoxOVrOG0Mveg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzozNDoxOVrOG0Mveg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM4Nzg5OA==", "bodyText": "isn't it simpler to just log on INFO? it's definitely an important type of information that can be logged as INFO.\nThis would be a safer approach as we wouldn't need to change the AppInsights log level", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1018#discussion_r457387898", "createdAt": "2020-07-20T13:34:19Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/security/filters/LoggingFilter.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package uk.gov.hmcts.ccd.security.filters;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import uk.gov.hmcts.ccd.data.SecurityUtils;\n+import uk.gov.hmcts.reform.idam.client.models.UserInfo;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.regex.Pattern;\n+\n+@Slf4j\n+public class LoggingFilter extends OncePerRequestFilter {\n+\n+    private static final String LOG_MESSAGE_TEMPLATE = \"[LOG FILTER] Attempting to serve request %s %s for user with IDAM roles %s\";\n+\n+    private final SecurityUtils securityUtils;\n+    private final Pattern pathPattern;\n+\n+    public LoggingFilter(SecurityUtils securityUtils, String pathRegex) {\n+        this.securityUtils = securityUtils;\n+        this.pathPattern = Pattern.compile(pathRegex);\n+    }\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n+        throws ServletException, IOException {\n+        log.debug(buildLogMessage(request, securityUtils.getUserInfo()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23ccbaeb5bb8c24ced929d3ec34c249937adf095"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDA1NTg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/security/filters/LoggingFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzozNjozNVrOG0M3yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzo1NDoyMFrOG0N2zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM5MDAyNA==", "bodyText": "doesn't LOG4J add the class name ([LOG FILTER]) already by default?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1018#discussion_r457390024", "createdAt": "2020-07-20T13:36:35Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/security/filters/LoggingFilter.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package uk.gov.hmcts.ccd.security.filters;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import uk.gov.hmcts.ccd.data.SecurityUtils;\n+import uk.gov.hmcts.reform.idam.client.models.UserInfo;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.regex.Pattern;\n+\n+@Slf4j\n+public class LoggingFilter extends OncePerRequestFilter {\n+\n+    private static final String LOG_MESSAGE_TEMPLATE = \"[LOG FILTER] Attempting to serve request %s %s for user with IDAM roles %s\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23ccbaeb5bb8c24ced929d3ec34c249937adf095"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQwNjE1OQ==", "bodyText": "Initially added to enable easier searching by a consistent term on AI (as L&A does), but good point, probably not much point as can still search by logger name. Removing.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1018#discussion_r457406159", "createdAt": "2020-07-20T13:54:20Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/security/filters/LoggingFilter.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package uk.gov.hmcts.ccd.security.filters;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import uk.gov.hmcts.ccd.data.SecurityUtils;\n+import uk.gov.hmcts.reform.idam.client.models.UserInfo;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.regex.Pattern;\n+\n+@Slf4j\n+public class LoggingFilter extends OncePerRequestFilter {\n+\n+    private static final String LOG_MESSAGE_TEMPLATE = \"[LOG FILTER] Attempting to serve request %s %s for user with IDAM roles %s\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM5MDAyNA=="}, "originalCommit": {"oid": "23ccbaeb5bb8c24ced929d3ec34c249937adf095"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDA5NTg3OnYy", "diffSide": "LEFT", "path": "lib/AI-Agent.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzo0Mjo1MFrOG0NOeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzo0Mjo1MFrOG0NOeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM5NTgzMw==", "bodyText": "I know the AppInsights client library is async and performant but that would be much more logging we are sending so maybe we should verify the impact on DataStore performance?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1018#discussion_r457395833", "createdAt": "2020-07-20T13:42:50Z", "author": {"login": "mario-paniccia"}, "path": "lib/AI-Agent.xml", "diffHunk": "@@ -1,6 +1,6 @@\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n <ApplicationInsightsAgent>\n-    <AgentLogger>INFO</AgentLogger>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23ccbaeb5bb8c24ced929d3ec34c249937adf095"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDEwOTk5OnYy", "diffSide": "RIGHT", "path": "lib/AI-Agent.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzo0NTowM1rOG0NWNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzo0NTowM1rOG0NWNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM5NzgxNA==", "bodyText": "was just wondering if it's simpler to just log the user info at INFO level. Less changes would be required.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1018#discussion_r457397814", "createdAt": "2020-07-20T13:45:03Z", "author": {"login": "mario-paniccia"}, "path": "lib/AI-Agent.xml", "diffHunk": "@@ -1,6 +1,6 @@\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n <ApplicationInsightsAgent>\n-    <AgentLogger>INFO</AgentLogger>\n+    <AgentLogger>DEBUG</AgentLogger>\n     <Instrumentation>\n         <BuiltIn enabled=\"true\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23ccbaeb5bb8c24ced929d3ec34c249937adf095"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3766, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}