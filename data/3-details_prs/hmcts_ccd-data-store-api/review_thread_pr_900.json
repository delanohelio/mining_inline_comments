{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNDE0Nzc0", "number": 900, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDo1MToyMlrODwcIPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNTozNTo0MFrODwdSJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTE5MTAxOnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/domain/model/definition/FieldTypeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDo1MToyMlrOGDcR-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDo1MToyMlrOGDcR-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI2MjI2Nw==", "bodyText": "this field type has children (nestedField). This test is not able to find any CaseField that is matching the test path \"Field.ID\"", "url": "https://github.com/hmcts/ccd-data-store-api/pull/900#discussion_r406262267", "createdAt": "2020-04-09T14:51:22Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/model/definition/FieldTypeTest.java", "diffHunk": "@@ -75,4 +80,137 @@ public void getChildrenOfComplexType() {\n             assertTrue(children.stream().anyMatch(e -> e.getId().equals(caseField2.getId())));\n         }\n     }\n+\n+    @Nested\n+    @DisplayName(\"getNestedField test\")\n+    class FieldTypeGetNestedFieldTest {\n+\n+        private final String COMPLEX_FIELD_TYPE = \"Complex\";\n+        private final String COLLECTION_FIELD_TYPE = \"Collection\";\n+\n+        @Test\n+        void shouldFindBasicNestedField() {\n+            String testPath = \"NestedField\";\n+            CaseField nestedField = newCaseField()\n+                .withId(\"NestedField\")\n+                .withFieldType(aFieldType().withType(\"Text\").build())\n+                .build();\n+            FieldType fieldType = aFieldType().withType(COMPLEX_FIELD_TYPE).withComplexField(nestedField).build();\n+\n+            final Optional<CommonField> result = fieldType.getNestedField(testPath);\n+\n+            assertAll(\n+                () -> assertThat(result.isPresent(), is(true)),\n+                () -> assertThat(result.get(), is(nestedField))\n+            );\n+        }\n+\n+        @Test\n+        void shouldFindDeepNestedField() {\n+            String testPath = \"NestedField.DeepNestedField\";\n+            CaseField deepNestedField = newCaseField().withId(\"DeepNestedField\").build();\n+            CaseField nestedField = newCaseField()\n+                .withId(\"NestedField\")\n+                .withFieldType(aFieldType().withType(COMPLEX_FIELD_TYPE)\n+                    .withComplexField(newCaseField().withId(\"SomeOtherField\").build())\n+                    .withComplexField(deepNestedField)\n+                    .build()\n+                ).build();\n+            FieldType fieldType = aFieldType().withType(COMPLEX_FIELD_TYPE).withComplexField(nestedField).build();\n+\n+            final Optional<CommonField> result = fieldType.getNestedField(testPath);\n+\n+            assertAll(\n+                () -> assertThat(result.isPresent(), is(true)),\n+                () -> assertThat(result.get(), is(deepNestedField))\n+            );\n+        }\n+\n+        @Test\n+        void shouldFindNestedCollectionField() {\n+            String testPath = \"NestedCollectionField\";\n+            CaseField collectionField = newCaseField()\n+                .withId(\"NestedCollectionField\")\n+                .withFieldType(aFieldType().withType(COLLECTION_FIELD_TYPE)\n+                    .withCollectionField(newCaseField().withId(\"SomeOtherField\").build())\n+                    .build()\n+                ).build();\n+            FieldType fieldType = aFieldType().withType(COLLECTION_FIELD_TYPE).withCollectionField(collectionField).build();\n+\n+            final Optional<CommonField> result = fieldType.getNestedField(testPath);\n+\n+            assertAll(\n+                () -> assertThat(result.isPresent(), is(true)),\n+                () -> assertThat(result.get(), is(collectionField))\n+            );\n+        }\n+\n+        @Test\n+        void shouldNotReturnResultForNonExistentNestedField() {\n+            String testPath = \"NestedField.NonExistentDeepNestedField\";\n+            CaseField deepNestedField = newCaseField().withId(\"DeepNestedField\").build();\n+            CaseField nestedField = newCaseField()\n+                .withId(\"NestedField\")\n+                .withFieldType(aFieldType().withType(\"Complex\")\n+                    .withComplexField(newCaseField().withId(\"SomeOtherField\").build())\n+                    .withComplexField(deepNestedField)\n+                    .build()\n+                ).build();\n+            FieldType fieldType = aFieldType().withType(COMPLEX_FIELD_TYPE).withComplexField(nestedField).build();\n+\n+            final Optional<CommonField> result = fieldType.getNestedField(testPath);\n+\n+            assertAll(\n+                () -> assertThat(result.isPresent(), is(false))\n+            );\n+        }\n+\n+        @Test\n+        void shouldNotReturnResultForBlankPath() {\n+            String testPath = \"\";\n+            CaseField nestedField = newCaseField()\n+                .withId(\"NestedField\")\n+                .withFieldType(aFieldType().withType(\"Text\").build())\n+                .build();\n+            FieldType fieldType = aFieldType().withType(COMPLEX_FIELD_TYPE).withComplexField(nestedField).build();\n+\n+            final Optional<CommonField> result = fieldType.getNestedField(testPath);\n+\n+            assertAll(() -> {\n+                assertThat(result.isPresent(), is(false));\n+            });\n+        }\n+\n+        @Test\n+        void shouldNotReturnResultForPathWithNoNesting() {\n+            String testPath = \"NonNestedPath\";\n+            CaseField nestedField = newCaseField()\n+                .withId(\"NestedField\")\n+                .withFieldType(aFieldType().withType(\"Text\").build())\n+                .build();\n+            FieldType fieldType = aFieldType().withType(COMPLEX_FIELD_TYPE).withComplexField(nestedField).build();\n+\n+            final Optional<CommonField> result = fieldType.getNestedField(testPath);\n+\n+            assertAll(() -> {\n+                assertThat(result.isPresent(), is(false));\n+            });\n+        }\n+\n+        @Test\n+        void shouldNotReturnResultForFieldTypeWithNoChildren() {\n+            String testPath = \"Field.ID\";\n+            CaseField nestedField = newCaseField()\n+                .withId(\"NestedField\")\n+                .withFieldType(aFieldType().withType(\"Text\").build())\n+                .build();\n+            FieldType fieldType = aFieldType().withType(COMPLEX_FIELD_TYPE).withComplexField(nestedField).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "389fe72956031606dce7ba158a7cb0972c654a9e"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTMwNzQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/search/Field.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNToxODozNVrOGDdc9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNToxODozNVrOGDdc9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI4MTQ2MA==", "bodyText": "if we can move this to FieldType that will be keep this class simple", "url": "https://github.com/hmcts/ccd-data-store-api/pull/900#discussion_r406281460", "createdAt": "2020-04-09T15:18:35Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/search/Field.java", "diffHunk": "@@ -41,4 +47,13 @@ public boolean isMetadata() {\n     public void setMetadata(boolean metadata) {\n         this.metadata = metadata;\n     }\n+\n+    public Optional<CommonField> getNestedField(String path) {\n+        final List<String> pathElements = Arrays.asList(path.trim().split(\"\\\\.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "389fe72956031606dce7ba158a7cb0972c654a9e"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTM0Njc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/search/SearchResultViewColumn.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNToyNzozOVrOGDd2LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNToyNzozOVrOGDd2LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI4NzkxNg==", "bodyText": "Move this method to FieldType class", "url": "https://github.com/hmcts/ccd-data-store-api/pull/900#discussion_r406287916", "createdAt": "2020-04-09T15:27:39Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/search/SearchResultViewColumn.java", "diffHunk": "@@ -73,32 +70,11 @@ public String getDisplayContextParameter() {\n     }\n \n     public Optional<CommonField> getNestedField(String path) {\n-        if (StringUtils.isBlank(path) || path.trim().split(\"\\\\.\").length == 1 || this.getCaseFieldType().getChildren().isEmpty()) {\n+        final List<String> pathElements = Arrays.asList(path.trim().split(\"\\\\.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "389fe72956031606dce7ba158a7cb0972c654a9e"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTM4MDIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/FieldType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNTozNTo0MFrOGDeLgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODo0Njo0OFrOGDlEqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI5MzM3Ng==", "bodyText": "instead of subList() better to use index like below then it will give some performance benefit as well.\nreduce(List caseFields, List pathElements, int startIndex)\n........\nreturn reduce(newCaseFields, pathElements, startIndex + 1);", "url": "https://github.com/hmcts/ccd-data-store-api/pull/900#discussion_r406293376", "createdAt": "2020-04-09T15:35:40Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/FieldType.java", "diffHunk": "@@ -129,6 +134,34 @@ public void setCollectionFieldType(FieldType collectionFieldType) {\n         this.collectionFieldType = collectionFieldType;\n     }\n \n+    public Optional<CommonField> getNestedField(String path) {\n+        if (StringUtils.isBlank(path) || this.getChildren().isEmpty()) {\n+            return Optional.empty();\n+        }\n+        List<String> pathElements = Arrays.stream(path.trim().split(\"\\\\.\")).collect(toList());\n+\n+        return reduce(this.getChildren(), pathElements);\n+    }\n+\n+    private Optional<CommonField> reduce(List<CaseField> caseFields, List<String> pathElements) {\n+        String firstPathElement = pathElements.get(0);\n+        Optional<CaseField> optionalCaseField = caseFields.stream().filter(e -> e.getId().equals(firstPathElement)).findFirst();\n+        if (optionalCaseField.isPresent()) {\n+            CommonField caseField = optionalCaseField.get();\n+\n+            if (pathElements.size() == 1) {\n+                return Optional.of(caseField);\n+            } else {\n+                List<CaseField> newCaseFields = caseField.getFieldType().getChildren();\n+                List<String> tail = pathElements.subList(1, pathElements.size());\n+\n+                return reduce(newCaseFields, tail);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "389fe72956031606dce7ba158a7cb0972c654a9e"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNjMxNQ==", "bodyText": "Won't action this as part of this ticket as is part of an existing implementation that was copied over from CommonField. In latest commit I've updated CommonField to now use this one as well so it's not all duplicated.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/900#discussion_r406406315", "createdAt": "2020-04-09T18:46:48Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/FieldType.java", "diffHunk": "@@ -129,6 +134,34 @@ public void setCollectionFieldType(FieldType collectionFieldType) {\n         this.collectionFieldType = collectionFieldType;\n     }\n \n+    public Optional<CommonField> getNestedField(String path) {\n+        if (StringUtils.isBlank(path) || this.getChildren().isEmpty()) {\n+            return Optional.empty();\n+        }\n+        List<String> pathElements = Arrays.stream(path.trim().split(\"\\\\.\")).collect(toList());\n+\n+        return reduce(this.getChildren(), pathElements);\n+    }\n+\n+    private Optional<CommonField> reduce(List<CaseField> caseFields, List<String> pathElements) {\n+        String firstPathElement = pathElements.get(0);\n+        Optional<CaseField> optionalCaseField = caseFields.stream().filter(e -> e.getId().equals(firstPathElement)).findFirst();\n+        if (optionalCaseField.isPresent()) {\n+            CommonField caseField = optionalCaseField.get();\n+\n+            if (pathElements.size() == 1) {\n+                return Optional.of(caseField);\n+            } else {\n+                List<CaseField> newCaseFields = caseField.getFieldType().getChildren();\n+                List<String> tail = pathElements.subList(1, pathElements.size());\n+\n+                return reduce(newCaseFields, tail);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI5MzM3Ng=="}, "originalCommit": {"oid": "389fe72956031606dce7ba158a7cb0972c654a9e"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3807, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}