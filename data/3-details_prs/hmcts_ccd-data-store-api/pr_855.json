{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMjM5NjA3", "number": 855, "title": "RDM-7694 - DCP for workbasket and search input/results", "bodyText": "JIRA link (if applicable)\nhttps://tools.hmcts.net/jira/browse/RDM-7694\nChange description\nDateTime Entry & Display for Workbasket & Search Input & Results\nDoes this PR introduce a breaking change? (check one with \"x\")\n[] Yes\n[x] No", "createdAt": "2020-03-23T08:44:48Z", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855", "merged": true, "mergeCommit": {"oid": "a8ee11163138570d3e8a528bcb5d270f583b17a4"}, "closed": true, "closedAt": "2020-04-15T12:57:26Z", "author": {"login": "danlysiak"}, "timelineItems": {"totalCount": 48, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQaN1ngH2gAyMzkyMjM5NjA3OjE3NWE2NjIxMTJiMmNkY2M1YmE5OTQzNWRmMGU5YTg5NTI1MzBiNDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcX0CtnAH2gAyMzkyMjM5NjA3OmU4MjIwNDkwYzVjZTAyMTUxZjM0OTA4MDc5NDE4YTVmYmIzOGE5NWY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/175a662112b2cdcc5ba99435df0e9a8952530b46", "committedDate": "2020-03-23T08:41:31Z", "message": "RDM-7694 - DCP for workbasket and search input/results"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNDkwMzA1", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#pullrequestreview-380490305", "createdAt": "2020-03-24T16:34:09Z", "commit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjozNDoxMFrOF649QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjozNDoxMFrOF649QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI5NDkxMw==", "bodyText": "same consideration added to the other tickets. Better to have SearchResultViewColumn have getDisplayContextParameter not as a String but as a DisplayContextParameter object, which then has the method itself to check the type", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r397294913", "createdAt": "2020-03-24T16:34:10Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchResultProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.SearchResultView;\n+import uk.gov.hmcts.ccd.domain.model.search.SearchResultViewColumn;\n+import uk.gov.hmcts.ccd.domain.model.search.SearchResultViewItem;\n+import uk.gov.hmcts.ccd.domain.types.CollectionValidator;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Component\n+public class SearchResultProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private final DateTimeFormatParser dateTimeFormatParser;\n+\n+    @Autowired\n+    public SearchResultProcessor(final DateTimeFormatParser dateTimeFormatParser) {\n+        this.dateTimeFormatParser = dateTimeFormatParser;\n+    }\n+\n+    public SearchResultView execute(List<SearchResultViewColumn> viewColumns,\n+                                    List<SearchResultViewItem> viewItems,\n+                                    String resultError) {\n+        for (SearchResultViewColumn viewColumn : viewColumns) {\n+            if (DisplayContextParameter\n+                .hasDisplayContextParameterType(viewColumn.getDisplayContextParameter(), DisplayContextParameterType.DATETIMEDISPLAY)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNDkxMDg0", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#pullrequestreview-380491084", "createdAt": "2020-03-24T16:35:00Z", "commit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjozNTowMVrOF64_hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjozNTowMVrOF64_hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI5NTQ5Mw==", "bodyText": "same as above", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r397295493", "createdAt": "2020-03-24T16:35:01Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchResultProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.SearchResultView;\n+import uk.gov.hmcts.ccd.domain.model.search.SearchResultViewColumn;\n+import uk.gov.hmcts.ccd.domain.model.search.SearchResultViewItem;\n+import uk.gov.hmcts.ccd.domain.types.CollectionValidator;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Component\n+public class SearchResultProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private final DateTimeFormatParser dateTimeFormatParser;\n+\n+    @Autowired\n+    public SearchResultProcessor(final DateTimeFormatParser dateTimeFormatParser) {\n+        this.dateTimeFormatParser = dateTimeFormatParser;\n+    }\n+\n+    public SearchResultView execute(List<SearchResultViewColumn> viewColumns,\n+                                    List<SearchResultViewItem> viewItems,\n+                                    String resultError) {\n+        for (SearchResultViewColumn viewColumn : viewColumns) {\n+            if (DisplayContextParameter\n+                .hasDisplayContextParameterType(viewColumn.getDisplayContextParameter(), DisplayContextParameterType.DATETIMEDISPLAY)) {\n+                viewItems = viewItems.stream()\n+                    .map(viewItem -> processSearchResultViewItem(viewItem, viewColumn))\n+                    .collect(Collectors.toList());\n+            }\n+        }\n+\n+        return new SearchResultView(viewColumns, viewItems, resultError);\n+    }\n+\n+    private SearchResultViewItem processSearchResultViewItem(SearchResultViewItem viewItem, SearchResultViewColumn viewColumn) {\n+        return DisplayContextParameter.getDisplayContextParameterOfType(viewColumn.getDisplayContextParameter(), DisplayContextParameterType.DATETIMEDISPLAY)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNDkzMzA2", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#pullrequestreview-380493306", "createdAt": "2020-03-24T16:37:24Z", "commit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjozNzoyNFrOF65Gvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjozNzoyNFrOF65Gvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI5NzM0Mw==", "bodyText": "strictly speaking this is not generic. It's tied to date time processing. So better rename it to DateFormattingSearchResultProcessor?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r397297343", "createdAt": "2020-03-24T16:37:24Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchResultProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.SearchResultView;\n+import uk.gov.hmcts.ccd.domain.model.search.SearchResultViewColumn;\n+import uk.gov.hmcts.ccd.domain.model.search.SearchResultViewItem;\n+import uk.gov.hmcts.ccd.domain.types.CollectionValidator;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Component\n+public class SearchResultProcessor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNDk2NDk5", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#pullrequestreview-380496499", "createdAt": "2020-03-24T16:40:48Z", "commit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjo0MDo0OFrOF65Qzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjo0MDo0OFrOF65Qzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI5OTkxOQ==", "bodyText": "this logic is duplicated with another date store PR. We could remove this duplication by moving this logic inside the dateTimeFormatParser itself", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r397299919", "createdAt": "2020-03-24T16:40:48Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchResultProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.SearchResultView;\n+import uk.gov.hmcts.ccd.domain.model.search.SearchResultViewColumn;\n+import uk.gov.hmcts.ccd.domain.model.search.SearchResultViewItem;\n+import uk.gov.hmcts.ccd.domain.types.CollectionValidator;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Component\n+public class SearchResultProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private final DateTimeFormatParser dateTimeFormatParser;\n+\n+    @Autowired\n+    public SearchResultProcessor(final DateTimeFormatParser dateTimeFormatParser) {\n+        this.dateTimeFormatParser = dateTimeFormatParser;\n+    }\n+\n+    public SearchResultView execute(List<SearchResultViewColumn> viewColumns,\n+                                    List<SearchResultViewItem> viewItems,\n+                                    String resultError) {\n+        for (SearchResultViewColumn viewColumn : viewColumns) {\n+            if (DisplayContextParameter\n+                .hasDisplayContextParameterType(viewColumn.getDisplayContextParameter(), DisplayContextParameterType.DATETIMEDISPLAY)) {\n+                viewItems = viewItems.stream()\n+                    .map(viewItem -> processSearchResultViewItem(viewItem, viewColumn))\n+                    .collect(Collectors.toList());\n+            }\n+        }\n+\n+        return new SearchResultView(viewColumns, viewItems, resultError);\n+    }\n+\n+    private SearchResultViewItem processSearchResultViewItem(SearchResultViewItem viewItem, SearchResultViewColumn viewColumn) {\n+        return DisplayContextParameter.getDisplayContextParameterOfType(viewColumn.getDisplayContextParameter(), DisplayContextParameterType.DATETIMEDISPLAY)\n+            .map(dcp ->  {\n+                viewItem.getCaseFields().replace(viewColumn.getCaseFieldId(),\n+                    processNode(viewItem.getCaseFields().get(viewColumn.getCaseFieldId()), dcp.getValue(), viewColumn.getCaseFieldType()));\n+                return viewItem;\n+            })\n+            .orElse(viewItem);\n+    }\n+\n+    private Object processNode(final Object object,\n+                               final String dateFormat,\n+                               final FieldType fieldType) {\n+        if (object instanceof TextNode && !FieldProcessor.isNullOrEmpty((TextNode) object)) {\n+            return createTextNodeFrom((TextNode) object, dateFormat, fieldType);\n+        } else if (object instanceof ArrayNode && !FieldProcessor.isNullOrEmpty((ArrayNode) object)) {\n+            return createArrayNodeFrom((ArrayNode) object, dateFormat, fieldType);\n+        }\n+\n+        return object;\n+    }\n+\n+    private JsonNode createTextNodeFrom(final TextNode originalNode, final String dateFormat, final FieldType fieldType) {\n+        if (fieldType.getType().equals(FieldType.DATE)) {\n+            return new TextNode(dateTimeFormatParser.convertIso8601ToDate(dateFormat, originalNode.asText()));\n+        } else {\n+            return new TextNode(dateTimeFormatParser.convertIso8601ToDateTime(dateFormat, originalNode.asText()));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNDk5MTQx", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#pullrequestreview-380499141", "createdAt": "2020-03-24T16:43:33Z", "commit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjo0MzozNFrOF65ZEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjo0MzozNFrOF65ZEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMwMjAzMg==", "bodyText": "does the processing work also for complex fields with nested date fields?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r397302032", "createdAt": "2020-03-24T16:43:34Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchResultProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.SearchResultView;\n+import uk.gov.hmcts.ccd.domain.model.search.SearchResultViewColumn;\n+import uk.gov.hmcts.ccd.domain.model.search.SearchResultViewItem;\n+import uk.gov.hmcts.ccd.domain.types.CollectionValidator;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Component\n+public class SearchResultProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private final DateTimeFormatParser dateTimeFormatParser;\n+\n+    @Autowired\n+    public SearchResultProcessor(final DateTimeFormatParser dateTimeFormatParser) {\n+        this.dateTimeFormatParser = dateTimeFormatParser;\n+    }\n+\n+    public SearchResultView execute(List<SearchResultViewColumn> viewColumns,\n+                                    List<SearchResultViewItem> viewItems,\n+                                    String resultError) {\n+        for (SearchResultViewColumn viewColumn : viewColumns) {\n+            if (DisplayContextParameter\n+                .hasDisplayContextParameterType(viewColumn.getDisplayContextParameter(), DisplayContextParameterType.DATETIMEDISPLAY)) {\n+                viewItems = viewItems.stream()\n+                    .map(viewItem -> processSearchResultViewItem(viewItem, viewColumn))\n+                    .collect(Collectors.toList());\n+            }\n+        }\n+\n+        return new SearchResultView(viewColumns, viewItems, resultError);\n+    }\n+\n+    private SearchResultViewItem processSearchResultViewItem(SearchResultViewItem viewItem, SearchResultViewColumn viewColumn) {\n+        return DisplayContextParameter.getDisplayContextParameterOfType(viewColumn.getDisplayContextParameter(), DisplayContextParameterType.DATETIMEDISPLAY)\n+            .map(dcp ->  {\n+                viewItem.getCaseFields().replace(viewColumn.getCaseFieldId(),\n+                    processNode(viewItem.getCaseFields().get(viewColumn.getCaseFieldId()), dcp.getValue(), viewColumn.getCaseFieldType()));\n+                return viewItem;\n+            })\n+            .orElse(viewItem);\n+    }\n+\n+    private Object processNode(final Object object,\n+                               final String dateFormat,\n+                               final FieldType fieldType) {\n+        if (object instanceof TextNode && !FieldProcessor.isNullOrEmpty((TextNode) object)) {\n+            return createTextNodeFrom((TextNode) object, dateFormat, fieldType);\n+        } else if (object instanceof ArrayNode && !FieldProcessor.isNullOrEmpty((ArrayNode) object)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNTAwNjg3", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#pullrequestreview-380500687", "createdAt": "2020-03-24T16:45:14Z", "commit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjo0NToxNFrOF65d2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjo0NToxNFrOF65d2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMwMzI1Nw==", "bodyText": "we forgot to add a good bunch of integration test which for a complex feature like this are fundamental", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r397303257", "createdAt": "2020-03-24T16:45:14Z", "author": {"login": "mario-paniccia"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/aggregated/MergeDataToSearchResultOperationTest.java", "diffHunk": "@@ -11,6 +11,7 @@\n import org.junit.jupiter.api.DisplayName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNTEzMTU2", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#pullrequestreview-380513156", "createdAt": "2020-03-24T16:58:15Z", "commit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjo1ODoxNVrOF66FBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjo1ODoxNVrOF66FBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxMzI4Ng==", "bodyText": "extract a method please", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r397313286", "createdAt": "2020-03-24T16:58:15Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaInput;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaType;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.DefaultGetCriteriaOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCriteriaOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DataProcessingException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+@Component\n+public class SearchInputProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private final DateTimeFormatParser dateTimeFormatParser;\n+    private final GetCriteriaOperation getCriteriaOperation;\n+\n+    @Autowired\n+    public SearchInputProcessor(final DateTimeFormatParser dateTimeFormatParser,\n+                                @Qualifier(DefaultGetCriteriaOperation.QUALIFIER) final GetCriteriaOperation getCriteriaOperation) {\n+        this.dateTimeFormatParser = dateTimeFormatParser;\n+        this.getCriteriaOperation = getCriteriaOperation;\n+    }\n+\n+    public Map<String, String> execute(String view, MetaData metadata, Map<String, String> queryParameters) {\n+        List<? extends CriteriaInput> criteriaInputs =\n+            getCriteriaOperation.execute(metadata.getCaseTypeId(), null,\n+                view == null ? CriteriaType.SEARCH : CriteriaType.valueOf(view));\n+\n+        Map<String, String> newParams = new HashMap<>();\n+        queryParameters.entrySet().stream().forEach(entry -> {\n+            Optional<? extends CriteriaInput> input = criteriaInputs.stream()\n+                .filter(i -> i.getField().getId().equals(entry.getKey()))\n+                .findAny();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNTEzNzIy", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#pullrequestreview-380513722", "createdAt": "2020-03-24T16:58:52Z", "commit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjo1ODo1MlrOF66Gww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjo1ODo1MlrOF66Gww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxMzczMQ==", "bodyText": "extract  a method please", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r397313731", "createdAt": "2020-03-24T16:58:52Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaInput;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaType;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.DefaultGetCriteriaOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCriteriaOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DataProcessingException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+@Component\n+public class SearchInputProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private final DateTimeFormatParser dateTimeFormatParser;\n+    private final GetCriteriaOperation getCriteriaOperation;\n+\n+    @Autowired\n+    public SearchInputProcessor(final DateTimeFormatParser dateTimeFormatParser,\n+                                @Qualifier(DefaultGetCriteriaOperation.QUALIFIER) final GetCriteriaOperation getCriteriaOperation) {\n+        this.dateTimeFormatParser = dateTimeFormatParser;\n+        this.getCriteriaOperation = getCriteriaOperation;\n+    }\n+\n+    public Map<String, String> execute(String view, MetaData metadata, Map<String, String> queryParameters) {\n+        List<? extends CriteriaInput> criteriaInputs =\n+            getCriteriaOperation.execute(metadata.getCaseTypeId(), null,\n+                view == null ? CriteriaType.SEARCH : CriteriaType.valueOf(view));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNTE0ODI0", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#pullrequestreview-380514824", "createdAt": "2020-03-24T17:00:07Z", "commit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzowMDowN1rOF66J9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzowMDowN1rOF66J9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxNDU0OQ==", "bodyText": "same comment as above", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r397314549", "createdAt": "2020-03-24T17:00:07Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaInput;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaType;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.DefaultGetCriteriaOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCriteriaOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DataProcessingException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+@Component\n+public class SearchInputProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private final DateTimeFormatParser dateTimeFormatParser;\n+    private final GetCriteriaOperation getCriteriaOperation;\n+\n+    @Autowired\n+    public SearchInputProcessor(final DateTimeFormatParser dateTimeFormatParser,\n+                                @Qualifier(DefaultGetCriteriaOperation.QUALIFIER) final GetCriteriaOperation getCriteriaOperation) {\n+        this.dateTimeFormatParser = dateTimeFormatParser;\n+        this.getCriteriaOperation = getCriteriaOperation;\n+    }\n+\n+    public Map<String, String> execute(String view, MetaData metadata, Map<String, String> queryParameters) {\n+        List<? extends CriteriaInput> criteriaInputs =\n+            getCriteriaOperation.execute(metadata.getCaseTypeId(), null,\n+                view == null ? CriteriaType.SEARCH : CriteriaType.valueOf(view));\n+\n+        Map<String, String> newParams = new HashMap<>();\n+        queryParameters.entrySet().stream().forEach(entry -> {\n+            Optional<? extends CriteriaInput> input = criteriaInputs.stream()\n+                .filter(i -> i.getField().getId().equals(entry.getKey()))\n+                .findAny();\n+\n+            if (input.isPresent() &&\n+                DisplayContextParameter\n+                    .hasDisplayContextParameterType(input.get().getDisplayContextParameter(), DisplayContextParameterType.DATETIMEENTRY)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNTE1NDU4", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#pullrequestreview-380515458", "createdAt": "2020-03-24T17:00:46Z", "commit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzowMDo0NlrOF66L-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzowMDo0NlrOF66L-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxNTA2NQ==", "bodyText": "extract a method please", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r397315065", "createdAt": "2020-03-24T17:00:46Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaInput;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaType;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.DefaultGetCriteriaOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCriteriaOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DataProcessingException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+@Component\n+public class SearchInputProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private final DateTimeFormatParser dateTimeFormatParser;\n+    private final GetCriteriaOperation getCriteriaOperation;\n+\n+    @Autowired\n+    public SearchInputProcessor(final DateTimeFormatParser dateTimeFormatParser,\n+                                @Qualifier(DefaultGetCriteriaOperation.QUALIFIER) final GetCriteriaOperation getCriteriaOperation) {\n+        this.dateTimeFormatParser = dateTimeFormatParser;\n+        this.getCriteriaOperation = getCriteriaOperation;\n+    }\n+\n+    public Map<String, String> execute(String view, MetaData metadata, Map<String, String> queryParameters) {\n+        List<? extends CriteriaInput> criteriaInputs =\n+            getCriteriaOperation.execute(metadata.getCaseTypeId(), null,\n+                view == null ? CriteriaType.SEARCH : CriteriaType.valueOf(view));\n+\n+        Map<String, String> newParams = new HashMap<>();\n+        queryParameters.entrySet().stream().forEach(entry -> {\n+            Optional<? extends CriteriaInput> input = criteriaInputs.stream()\n+                .filter(i -> i.getField().getId().equals(entry.getKey()))\n+                .findAny();\n+\n+            if (input.isPresent() &&\n+                DisplayContextParameter\n+                    .hasDisplayContextParameterType(input.get().getDisplayContextParameter(), DisplayContextParameterType.DATETIMEENTRY)) {\n+                newParams.put(entry.getKey(),\n+                    processValue(entry.getKey(), input.get().getDisplayContextParameter(),\n+                        entry.getValue(), input.get().getField().getType()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNTE2NDE0", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#pullrequestreview-380516414", "createdAt": "2020-03-24T17:01:50Z", "commit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzowMTo1MFrOF66O5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzowMTo1MFrOF66O5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxNTgxMw==", "bodyText": "this is not a generic processor, it's tied to doing date transformation so we should rename it to DateSearchInputProcessor or sim", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r397315813", "createdAt": "2020-03-24T17:01:50Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaInput;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaType;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.DefaultGetCriteriaOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCriteriaOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DataProcessingException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+@Component\n+public class SearchInputProcessor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNTE3NDE1", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#pullrequestreview-380517415", "createdAt": "2020-03-24T17:02:54Z", "commit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzowMjo1NFrOF66Ryw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzowMjo1NFrOF66Ryw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxNjU1NQ==", "bodyText": "duplicated", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r397316555", "createdAt": "2020-03-24T17:02:54Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaInput;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaType;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.DefaultGetCriteriaOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCriteriaOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DataProcessingException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+@Component\n+public class SearchInputProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private final DateTimeFormatParser dateTimeFormatParser;\n+    private final GetCriteriaOperation getCriteriaOperation;\n+\n+    @Autowired\n+    public SearchInputProcessor(final DateTimeFormatParser dateTimeFormatParser,\n+                                @Qualifier(DefaultGetCriteriaOperation.QUALIFIER) final GetCriteriaOperation getCriteriaOperation) {\n+        this.dateTimeFormatParser = dateTimeFormatParser;\n+        this.getCriteriaOperation = getCriteriaOperation;\n+    }\n+\n+    public Map<String, String> execute(String view, MetaData metadata, Map<String, String> queryParameters) {\n+        List<? extends CriteriaInput> criteriaInputs =\n+            getCriteriaOperation.execute(metadata.getCaseTypeId(), null,\n+                view == null ? CriteriaType.SEARCH : CriteriaType.valueOf(view));\n+\n+        Map<String, String> newParams = new HashMap<>();\n+        queryParameters.entrySet().stream().forEach(entry -> {\n+            Optional<? extends CriteriaInput> input = criteriaInputs.stream()\n+                .filter(i -> i.getField().getId().equals(entry.getKey()))\n+                .findAny();\n+\n+            if (input.isPresent() &&\n+                DisplayContextParameter\n+                    .hasDisplayContextParameterType(input.get().getDisplayContextParameter(), DisplayContextParameterType.DATETIMEENTRY)) {\n+                newParams.put(entry.getKey(),\n+                    processValue(entry.getKey(), input.get().getDisplayContextParameter(),\n+                        entry.getValue(), input.get().getField().getType()));\n+            } else {\n+                newParams.put(entry.getKey(), entry.getValue());\n+            }\n+        });\n+\n+        return newParams;\n+    }\n+\n+    private String processValue(String id, String displayContextParameter, String value, FieldType fieldType) {\n+        try {\n+            if (fieldType.getType().equals(FieldType.DATE)) {\n+                return dateTimeFormatParser.convertDateToIso8601(format(displayContextParameter, fieldType), value);\n+            } else if (fieldType.getType().equals(FieldType.DATETIME)) {\n+                return dateTimeFormatParser.convertDateTimeToIso8601(format(displayContextParameter, fieldType), value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNTE4Njc0", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#pullrequestreview-380518674", "createdAt": "2020-03-24T17:04:19Z", "commit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzowNDoyMFrOF66Vrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzowNDoyMFrOF66Vrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxNzU1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            String.format(\"Unable to process input %s with value %s. Expected format: %s\",\n          \n          \n            \n                            String.format(\"Unable to process search input %s with value %s. Expected format: %s\",", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r397317550", "createdAt": "2020-03-24T17:04:20Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaInput;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaType;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.DefaultGetCriteriaOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCriteriaOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DataProcessingException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+@Component\n+public class SearchInputProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private final DateTimeFormatParser dateTimeFormatParser;\n+    private final GetCriteriaOperation getCriteriaOperation;\n+\n+    @Autowired\n+    public SearchInputProcessor(final DateTimeFormatParser dateTimeFormatParser,\n+                                @Qualifier(DefaultGetCriteriaOperation.QUALIFIER) final GetCriteriaOperation getCriteriaOperation) {\n+        this.dateTimeFormatParser = dateTimeFormatParser;\n+        this.getCriteriaOperation = getCriteriaOperation;\n+    }\n+\n+    public Map<String, String> execute(String view, MetaData metadata, Map<String, String> queryParameters) {\n+        List<? extends CriteriaInput> criteriaInputs =\n+            getCriteriaOperation.execute(metadata.getCaseTypeId(), null,\n+                view == null ? CriteriaType.SEARCH : CriteriaType.valueOf(view));\n+\n+        Map<String, String> newParams = new HashMap<>();\n+        queryParameters.entrySet().stream().forEach(entry -> {\n+            Optional<? extends CriteriaInput> input = criteriaInputs.stream()\n+                .filter(i -> i.getField().getId().equals(entry.getKey()))\n+                .findAny();\n+\n+            if (input.isPresent() &&\n+                DisplayContextParameter\n+                    .hasDisplayContextParameterType(input.get().getDisplayContextParameter(), DisplayContextParameterType.DATETIMEENTRY)) {\n+                newParams.put(entry.getKey(),\n+                    processValue(entry.getKey(), input.get().getDisplayContextParameter(),\n+                        entry.getValue(), input.get().getField().getType()));\n+            } else {\n+                newParams.put(entry.getKey(), entry.getValue());\n+            }\n+        });\n+\n+        return newParams;\n+    }\n+\n+    private String processValue(String id, String displayContextParameter, String value, FieldType fieldType) {\n+        try {\n+            if (fieldType.getType().equals(FieldType.DATE)) {\n+                return dateTimeFormatParser.convertDateToIso8601(format(displayContextParameter, fieldType), value);\n+            } else if (fieldType.getType().equals(FieldType.DATETIME)) {\n+                return dateTimeFormatParser.convertDateTimeToIso8601(format(displayContextParameter, fieldType), value);\n+            } else {\n+                return value;\n+            }\n+        } catch (Exception e) {\n+            throw new DataProcessingException().withDetails(\n+                String.format(\"Unable to process input %s with value %s. Expected format: %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNTIyNjMy", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#pullrequestreview-380522632", "createdAt": "2020-03-24T17:08:55Z", "commit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzowODo1NVrOF66idw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzowODo1NVrOF66idw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMyMDgyMw==", "bodyText": "duplicated. This should be moved into the domain class", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r397320823", "createdAt": "2020-03-24T17:08:55Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaInput;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaType;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.DefaultGetCriteriaOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCriteriaOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DataProcessingException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+@Component\n+public class SearchInputProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private final DateTimeFormatParser dateTimeFormatParser;\n+    private final GetCriteriaOperation getCriteriaOperation;\n+\n+    @Autowired\n+    public SearchInputProcessor(final DateTimeFormatParser dateTimeFormatParser,\n+                                @Qualifier(DefaultGetCriteriaOperation.QUALIFIER) final GetCriteriaOperation getCriteriaOperation) {\n+        this.dateTimeFormatParser = dateTimeFormatParser;\n+        this.getCriteriaOperation = getCriteriaOperation;\n+    }\n+\n+    public Map<String, String> execute(String view, MetaData metadata, Map<String, String> queryParameters) {\n+        List<? extends CriteriaInput> criteriaInputs =\n+            getCriteriaOperation.execute(metadata.getCaseTypeId(), null,\n+                view == null ? CriteriaType.SEARCH : CriteriaType.valueOf(view));\n+\n+        Map<String, String> newParams = new HashMap<>();\n+        queryParameters.entrySet().stream().forEach(entry -> {\n+            Optional<? extends CriteriaInput> input = criteriaInputs.stream()\n+                .filter(i -> i.getField().getId().equals(entry.getKey()))\n+                .findAny();\n+\n+            if (input.isPresent() &&\n+                DisplayContextParameter\n+                    .hasDisplayContextParameterType(input.get().getDisplayContextParameter(), DisplayContextParameterType.DATETIMEENTRY)) {\n+                newParams.put(entry.getKey(),\n+                    processValue(entry.getKey(), input.get().getDisplayContextParameter(),\n+                        entry.getValue(), input.get().getField().getType()));\n+            } else {\n+                newParams.put(entry.getKey(), entry.getValue());\n+            }\n+        });\n+\n+        return newParams;\n+    }\n+\n+    private String processValue(String id, String displayContextParameter, String value, FieldType fieldType) {\n+        try {\n+            if (fieldType.getType().equals(FieldType.DATE)) {\n+                return dateTimeFormatParser.convertDateToIso8601(format(displayContextParameter, fieldType), value);\n+            } else if (fieldType.getType().equals(FieldType.DATETIME)) {\n+                return dateTimeFormatParser.convertDateTimeToIso8601(format(displayContextParameter, fieldType), value);\n+            } else {\n+                return value;\n+            }\n+        } catch (Exception e) {\n+            throw new DataProcessingException().withDetails(\n+                String.format(\"Unable to process input %s with value %s. Expected format: %s\",\n+                    id,\n+                    value,\n+                    format(displayContextParameter, fieldType))\n+            );\n+        }\n+    }\n+\n+    private String format(String displayContextParameter, FieldType fieldType) {\n+        return DisplayContextParameter\n+            .getDisplayContextParameterOfType(displayContextParameter, DisplayContextParameterType.DATETIMEENTRY)\n+            .map(DisplayContextParameter::getValue)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNTI1NjA2", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#pullrequestreview-380525606", "createdAt": "2020-03-24T17:12:20Z", "commit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzoxMjoyMFrOF66rVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzoxMjoyMFrOF66rVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMyMzA5NQ==", "bodyText": "is this needed? if there's no datetimeentry specified then the date must already be in iso format right?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r397323095", "createdAt": "2020-03-24T17:12:20Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaInput;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaType;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.DefaultGetCriteriaOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCriteriaOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DataProcessingException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+@Component\n+public class SearchInputProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private final DateTimeFormatParser dateTimeFormatParser;\n+    private final GetCriteriaOperation getCriteriaOperation;\n+\n+    @Autowired\n+    public SearchInputProcessor(final DateTimeFormatParser dateTimeFormatParser,\n+                                @Qualifier(DefaultGetCriteriaOperation.QUALIFIER) final GetCriteriaOperation getCriteriaOperation) {\n+        this.dateTimeFormatParser = dateTimeFormatParser;\n+        this.getCriteriaOperation = getCriteriaOperation;\n+    }\n+\n+    public Map<String, String> execute(String view, MetaData metadata, Map<String, String> queryParameters) {\n+        List<? extends CriteriaInput> criteriaInputs =\n+            getCriteriaOperation.execute(metadata.getCaseTypeId(), null,\n+                view == null ? CriteriaType.SEARCH : CriteriaType.valueOf(view));\n+\n+        Map<String, String> newParams = new HashMap<>();\n+        queryParameters.entrySet().stream().forEach(entry -> {\n+            Optional<? extends CriteriaInput> input = criteriaInputs.stream()\n+                .filter(i -> i.getField().getId().equals(entry.getKey()))\n+                .findAny();\n+\n+            if (input.isPresent() &&\n+                DisplayContextParameter\n+                    .hasDisplayContextParameterType(input.get().getDisplayContextParameter(), DisplayContextParameterType.DATETIMEENTRY)) {\n+                newParams.put(entry.getKey(),\n+                    processValue(entry.getKey(), input.get().getDisplayContextParameter(),\n+                        entry.getValue(), input.get().getField().getType()));\n+            } else {\n+                newParams.put(entry.getKey(), entry.getValue());\n+            }\n+        });\n+\n+        return newParams;\n+    }\n+\n+    private String processValue(String id, String displayContextParameter, String value, FieldType fieldType) {\n+        try {\n+            if (fieldType.getType().equals(FieldType.DATE)) {\n+                return dateTimeFormatParser.convertDateToIso8601(format(displayContextParameter, fieldType), value);\n+            } else if (fieldType.getType().equals(FieldType.DATETIME)) {\n+                return dateTimeFormatParser.convertDateTimeToIso8601(format(displayContextParameter, fieldType), value);\n+            } else {\n+                return value;\n+            }\n+        } catch (Exception e) {\n+            throw new DataProcessingException().withDetails(\n+                String.format(\"Unable to process input %s with value %s. Expected format: %s\",\n+                    id,\n+                    value,\n+                    format(displayContextParameter, fieldType))\n+            );\n+        }\n+    }\n+\n+    private String format(String displayContextParameter, FieldType fieldType) {\n+        return DisplayContextParameter\n+            .getDisplayContextParameterOfType(displayContextParameter, DisplayContextParameterType.DATETIMEENTRY)\n+            .map(DisplayContextParameter::getValue)\n+            .orElseGet(() -> fieldType.getType().equals(FieldType.DATE) ?\n+                DateTimeFormatParser.DATE_FORMAT.toString() :\n+                DateTimeFormatParser.DATE_TIME_FORMAT.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNTI5NDU2", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#pullrequestreview-380529456", "createdAt": "2020-03-24T17:16:37Z", "commit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d608e2c450bd04b5b02e6b7f9cef771fdae8fa51", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/d608e2c450bd04b5b02e6b7f9cef771fdae8fa51", "committedDate": "2020-03-25T09:54:21Z", "message": "Merge branch 'RDM-7692' into RDM-7694\n\n# Conflicts:\n#\tsrc/main/java/uk/gov/hmcts/ccd/domain/model/search/CriteriaInput.java\n#\tsrc/test/java/uk/gov/hmcts/ccd/domain/service/common/TestBuildersUtil.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMDQyNjQz", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#pullrequestreview-381042643", "createdAt": "2020-03-25T10:58:23Z", "commit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDo1ODoyM1rOF7Vybw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDo1ODoyM1rOF7Vybw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc2NzI3OQ==", "bodyText": "Better to create a method to check the condition", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r397767279", "createdAt": "2020-03-25T10:58:23Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaInput;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaType;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.DefaultGetCriteriaOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCriteriaOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DataProcessingException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+@Component\n+public class SearchInputProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private final DateTimeFormatParser dateTimeFormatParser;\n+    private final GetCriteriaOperation getCriteriaOperation;\n+\n+    @Autowired\n+    public SearchInputProcessor(final DateTimeFormatParser dateTimeFormatParser,\n+                                @Qualifier(DefaultGetCriteriaOperation.QUALIFIER) final GetCriteriaOperation getCriteriaOperation) {\n+        this.dateTimeFormatParser = dateTimeFormatParser;\n+        this.getCriteriaOperation = getCriteriaOperation;\n+    }\n+\n+    public Map<String, String> execute(String view, MetaData metadata, Map<String, String> queryParameters) {\n+        List<? extends CriteriaInput> criteriaInputs =\n+            getCriteriaOperation.execute(metadata.getCaseTypeId(), null,\n+                view == null ? CriteriaType.SEARCH : CriteriaType.valueOf(view));\n+\n+        Map<String, String> newParams = new HashMap<>();\n+        queryParameters.entrySet().stream().forEach(entry -> {\n+            Optional<? extends CriteriaInput> input = criteriaInputs.stream()\n+                .filter(i -> i.getField().getId().equals(entry.getKey()))\n+                .findAny();\n+\n+            if (input.isPresent() &&\n+                DisplayContextParameter\n+                    .hasDisplayContextParameterType(input.get().getDisplayContextParameter(), DisplayContextParameterType.DATETIMEENTRY)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxNDU0OQ=="}, "originalCommit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNzM0NTA4", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#pullrequestreview-382734508", "createdAt": "2020-03-27T10:22:52Z", "commit": {"oid": "d608e2c450bd04b5b02e6b7f9cef771fdae8fa51"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "296066aee5343e4502982736c1195e03a2b35710", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/296066aee5343e4502982736c1195e03a2b35710", "committedDate": "2020-03-27T10:34:41Z", "message": "Merge branch 'RDM-7692' into RDM-7694"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8015087b60db2208d545e2d8024ffe94fcb18a1e", "author": {"user": {"login": "smathangi", "name": "Sateesh Mathangi"}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/8015087b60db2208d545e2d8024ffe94fcb18a1e", "committedDate": "2020-03-30T08:48:55Z", "message": "Merge branch 'RDM-7692' into RDM-7694"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9e5d2a15e73fc7852bd66338ed2ed76c5b6f00e", "author": {"user": {"login": "smathangi", "name": "Sateesh Mathangi"}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/b9e5d2a15e73fc7852bd66338ed2ed76c5b6f00e", "committedDate": "2020-03-30T09:25:36Z", "message": "Merge branch 'RDM-7692' into RDM-7694"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a58ca28950c5b1acb38f6a201bee26357dec6f5", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/5a58ca28950c5b1acb38f6a201bee26357dec6f5", "committedDate": "2020-03-30T12:06:17Z", "message": "Merge branch 'RDM-7692' into RDM-7694"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ed8f3aa934a5df994e9d444f052ff02e62f2c1e", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/9ed8f3aa934a5df994e9d444f052ff02e62f2c1e", "committedDate": "2020-03-30T14:02:41Z", "message": "Add formatted values to search/workbasket results"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NTIwMTI1", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#pullrequestreview-384520125", "createdAt": "2020-03-31T08:42:13Z", "commit": {"oid": "9ed8f3aa934a5df994e9d444f052ff02e62f2c1e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a4ae4951803d3b2b1b3d3bb68464a41f777eed1", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/8a4ae4951803d3b2b1b3d3bb68464a41f777eed1", "committedDate": "2020-03-31T12:02:55Z", "message": "Merge branch 'RDM-7692' into RDM-7694"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7256532c9bdaa1b400f8bfa8a216fe9d9d75394", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/f7256532c9bdaa1b400f8bfa8a216fe9d9d75394", "committedDate": "2020-04-01T12:00:05Z", "message": "Merge branch 'RDM-7692' into RDM-7694"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bd8276e4b9ab23deffd5b39346509c03eb4e4ca", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/1bd8276e4b9ab23deffd5b39346509c03eb4e4ca", "committedDate": "2020-04-01T12:16:47Z", "message": "Handle TextNodes with empty strings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92906be40e2b64f6e386a76c01f89928c6cb2a42", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/92906be40e2b64f6e386a76c01f89928c6cb2a42", "committedDate": "2020-04-06T08:28:27Z", "message": "Support complex fields in search/workbasket results"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f28e7a93e315c4d6886aba0e2aa201bf331a308", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/5f28e7a93e315c4d6886aba0e2aa201bf331a308", "committedDate": "2020-04-06T10:30:23Z", "message": "Update mappings for failing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "524c8a0a24e93365c03f3d7ad3c139e5f2653745", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/524c8a0a24e93365c03f3d7ad3c139e5f2653745", "committedDate": "2020-04-06T11:26:31Z", "message": "Merge branch 'RDM-7692' into RDM-7694"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17dc665970fdec9df13dfe3762bf296399cf8f63", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/17dc665970fdec9df13dfe3762bf296399cf8f63", "committedDate": "2020-04-06T13:53:20Z", "message": "Handle metadata data fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35a9dfaf6e2ece49ca31dd880aef3966459de0a9", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/35a9dfaf6e2ece49ca31dd880aef3966459de0a9", "committedDate": "2020-04-06T14:11:57Z", "message": "Minor checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "792401bf6505699b6e711c72b1563975bb834e52", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/792401bf6505699b6e711c72b1563975bb834e52", "committedDate": "2020-04-06T14:59:24Z", "message": "Add DCP to FT data"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4Mzk3NDk4", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#pullrequestreview-388397498", "createdAt": "2020-04-06T16:03:53Z", "commit": {"oid": "792401bf6505699b6e711c72b1563975bb834e52"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjowMzo1M1rOGBe8CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjowMzo1M1rOGBe8CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIwODY0OQ==", "bodyText": "you can inject this", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r404208649", "createdAt": "2020-04-06T16:03:53Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaInput;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaType;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.DefaultGetCriteriaOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCriteriaOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DataProcessingException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+@Component\n+public class SearchInputProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "792401bf6505699b6e711c72b1563975bb834e52"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NDAzNjAx", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#pullrequestreview-388403601", "createdAt": "2020-04-06T16:10:52Z", "commit": {"oid": "792401bf6505699b6e711c72b1563975bb834e52"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjoxMDo1M1rOGBfPuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjoxMDo1M1rOGBfPuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIxMzY4OQ==", "bodyText": "looks like this method has significant logic. Can you add few unit tests to domain class please.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r404213689", "createdAt": "2020-04-06T16:10:53Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/search/SearchResultViewColumn.java", "diffHunk": "@@ -48,4 +63,42 @@ public Integer getOrder() {\n     public boolean isMetadata() {\n         return metadata;\n     }\n+\n+    public String getDisplayContextParameter() {\n+        return displayContextParameter;\n+    }\n+\n+    public Optional<DisplayContextParameter> getDisplayContextParameterOfType(DisplayContextParameterType displayContextParameterType) {\n+        return DisplayContextParameter.getDisplayContextParameterOfType(getDisplayContextParameter(), displayContextParameterType);\n+    }\n+\n+    public Optional<CommonField> getNestedField(String path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "792401bf6505699b6e711c72b1563975bb834e52"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7f8784041eea43e1bea615e061fe72ea2bddb45", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/e7f8784041eea43e1bea615e061fe72ea2bddb45", "committedDate": "2020-04-06T17:47:58Z", "message": "Unit tests for nested field logic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4OTExNDk2", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#pullrequestreview-388911496", "createdAt": "2020-04-07T08:49:01Z", "commit": {"oid": "e7f8784041eea43e1bea615e061fe72ea2bddb45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo0OTowMVrOGB5cIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo0OTowMVrOGB5cIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0Mjg1MQ==", "bodyText": "newHashMap really required? if so may be Collections.unmodifiableMap ?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r404642851", "createdAt": "2020-04-07T08:49:01Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/aggregated/MergeDataToSearchResultOperation.java", "diffHunk": "@@ -109,7 +119,7 @@ private SearchResultViewItem buildSearchResultViewItem(final CaseDetails caseDet\n         Map<String, Object> caseFields = prepareData(searchResult, caseData, caseMetadata, labels);\n \n         String caseId = caseDetails.hasCaseReference() ? caseDetails.getReferenceAsString() : caseDetails.getId();\n-        return new SearchResultViewItem(caseId, caseFields);\n+        return new SearchResultViewItem(caseId, caseFields, new HashMap<>(caseFields));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7f8784041eea43e1bea615e061fe72ea2bddb45"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4OTE2NTE4", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#pullrequestreview-388916518", "createdAt": "2020-04-07T08:55:06Z", "commit": {"oid": "e7f8784041eea43e1bea615e061fe72ea2bddb45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo1NTowN1rOGB5r1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo1NTowN1rOGB5r1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0Njg2OQ==", "bodyText": "specific exceptions rather than catching very generic Exception?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#discussion_r404646869", "createdAt": "2020-04-07T08:55:07Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/SearchInputProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldType;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaInput;\n+import uk.gov.hmcts.ccd.domain.model.search.CriteriaType;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.DefaultGetCriteriaOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCriteriaOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DataProcessingException;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+@Component\n+public class SearchInputProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private final DateTimeFormatParser dateTimeFormatParser;\n+    private final GetCriteriaOperation getCriteriaOperation;\n+\n+    @Autowired\n+    public SearchInputProcessor(final DateTimeFormatParser dateTimeFormatParser,\n+                                @Qualifier(DefaultGetCriteriaOperation.QUALIFIER) final GetCriteriaOperation getCriteriaOperation) {\n+        this.dateTimeFormatParser = dateTimeFormatParser;\n+        this.getCriteriaOperation = getCriteriaOperation;\n+    }\n+\n+    public Map<String, String> execute(String view, MetaData metadata, Map<String, String> queryParameters) {\n+        List<? extends CriteriaInput> criteriaInputs =\n+            getCriteriaOperation.execute(metadata.getCaseTypeId(), null,\n+                view == null ? CriteriaType.SEARCH : CriteriaType.valueOf(view));\n+\n+        Map<String, String> newParams = new HashMap<>();\n+        queryParameters.entrySet().stream().forEach(entry -> {\n+            Optional<? extends CriteriaInput> input = criteriaInputs.stream()\n+                .filter(i -> i.getField().getId().equals(entry.getKey()))\n+                .findAny();\n+\n+            if (input.isPresent() &&\n+                DisplayContextParameter\n+                    .hasDisplayContextParameterType(input.get().getDisplayContextParameter(), DisplayContextParameterType.DATETIMEENTRY)) {\n+                newParams.put(entry.getKey(),\n+                    processValue(entry.getKey(), input.get().getDisplayContextParameter(),\n+                        entry.getValue(), input.get().getField().getType()));\n+            } else {\n+                newParams.put(entry.getKey(), entry.getValue());\n+            }\n+        });\n+\n+        return newParams;\n+    }\n+\n+    private String processValue(String id, String displayContextParameter, String value, FieldType fieldType) {\n+        try {\n+            if (fieldType.getType().equals(FieldType.DATE)) {\n+                return dateTimeFormatParser.convertDateToIso8601(format(displayContextParameter, fieldType), value);\n+            } else if (fieldType.getType().equals(FieldType.DATETIME)) {\n+                return dateTimeFormatParser.convertDateTimeToIso8601(format(displayContextParameter, fieldType), value);\n+            } else {\n+                return value;\n+            }\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7f8784041eea43e1bea615e061fe72ea2bddb45"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4OTE5NDc3", "url": "https://github.com/hmcts/ccd-data-store-api/pull/855#pullrequestreview-388919477", "createdAt": "2020-04-07T08:58:47Z", "commit": {"oid": "e7f8784041eea43e1bea615e061fe72ea2bddb45"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e48623b6665c787599aa70f1a4139ca1b2a74d95", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/e48623b6665c787599aa70f1a4139ca1b2a74d95", "committedDate": "2020-04-07T11:57:23Z", "message": "Merge branch 'RDM-7692' into RDM-7694"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61be3bdf38361f6631f7ea3bb27a81a8a95539ea", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/61be3bdf38361f6631f7ea3bb27a81a8a95539ea", "committedDate": "2020-04-09T12:21:01Z", "message": "RDM-8113 handle display without seconds or milliseconds\nRDM-8057 split DCP correctly when there is multiple params"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "622181fc4cb20ff67c626dd5a860a6f97189da10", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/622181fc4cb20ff67c626dd5a860a6f97189da10", "committedDate": "2020-04-09T12:53:42Z", "message": "RDM-8113 updated functional response"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b02cbadefeece8e4fab9f120e48db5d0c5bb3cdc", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/b02cbadefeece8e4fab9f120e48db5d0c5bb3cdc", "committedDate": "2020-04-09T14:19:05Z", "message": "RDM-8113 added unit tests for partial milliseconds"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19101d5fc91a714a1f84b5e67facf5c7da82d919", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/19101d5fc91a714a1f84b5e67facf5c7da82d919", "committedDate": "2020-04-10T06:29:56Z", "message": "RDM-8113 updated functional test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6bcba95f56c01f40df1f522ac4eaebc0d63c172", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/a6bcba95f56c01f40df1f522ac4eaebc0d63c172", "committedDate": "2020-04-10T06:54:11Z", "message": "RDM-8113 updated functional test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8220490c5ce02151f34908079418a5fbb38a95f", "author": {"user": {"login": "Olawale", "name": "Olawale Olanrewaju"}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/e8220490c5ce02151f34908079418a5fbb38a95f", "committedDate": "2020-04-15T08:44:22Z", "message": "Merge pull request #899 from hmcts/RDM-8113\n\nRDM-8113 handle display without seconds or milliseconds"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2638, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}