{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MTkxOTk0", "number": 978, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDoxMjoxNVrOEHgrJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToyNToxNFrOEHiBsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzEwODIwOnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperationTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDoxMjoxNVrOGm6ZOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDo1MDozMlrOGm7jLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ1NTgwMQ==", "bodyText": "may be it would be better adding other cases complex to complex 3 levels aa.aaa.aaa  and see how the  componet .  componet . componet works", "url": "https://github.com/hmcts/ccd-data-store-api/pull/978#discussion_r443455801", "createdAt": "2020-06-22T10:12:15Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperationTest.java", "diffHunk": "@@ -107,6 +110,37 @@ void shouldValidate_when_organisation_has_correct_roles() throws Exception {\n         );\n     }\n \n+    @Test\n+    void shouldValidate_when_organisation_has_correct_roles_complex() throws Exception {\n+\n+        String orgPolicyReference1 = ORGANISATIONPOLICYFIELD_1 + \".\" + ORGANISATION_POLICY_ROLE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fdeb79c224de07646d18fc7525f680f88b0736c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ2NjcxNg==", "bodyText": "this logic we have tested from UI, it is fine!!", "url": "https://github.com/hmcts/ccd-data-store-api/pull/978#discussion_r443466716", "createdAt": "2020-06-22T10:33:42Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperationTest.java", "diffHunk": "@@ -107,6 +110,37 @@ void shouldValidate_when_organisation_has_correct_roles() throws Exception {\n         );\n     }\n \n+    @Test\n+    void shouldValidate_when_organisation_has_correct_roles_complex() throws Exception {\n+\n+        String orgPolicyReference1 = ORGANISATIONPOLICYFIELD_1 + \".\" + ORGANISATION_POLICY_ROLE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ1NTgwMQ=="}, "originalCommit": {"oid": "3fdeb79c224de07646d18fc7525f680f88b0736c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ3NDczNA==", "bodyText": "cut and paste , change values of the test . ok,  \ud83d\udc4d   For me is the same . small comments :)", "url": "https://github.com/hmcts/ccd-data-store-api/pull/978#discussion_r443474734", "createdAt": "2020-06-22T10:50:32Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperationTest.java", "diffHunk": "@@ -107,6 +110,37 @@ void shouldValidate_when_organisation_has_correct_roles() throws Exception {\n         );\n     }\n \n+    @Test\n+    void shouldValidate_when_organisation_has_correct_roles_complex() throws Exception {\n+\n+        String orgPolicyReference1 = ORGANISATIONPOLICYFIELD_1 + \".\" + ORGANISATION_POLICY_ROLE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ1NTgwMQ=="}, "originalCommit": {"oid": "3fdeb79c224de07646d18fc7525f680f88b0736c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzEyNjE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDoxNzo0NVrOGm6kFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDo1MTo1OFrOGm7mWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ1ODU4MA==", "bodyText": "Do we always execute ORGANISATION_POLICY_ROLE validations. There could be submit cases  where there is  ORGANISATION_POLICY_ROLE logic is not present .  It is easier just return it .", "url": "https://github.com/hmcts/ccd-data-store-api/pull/978#discussion_r443458580", "createdAt": "2020-06-22T10:17:45Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "diffHunk": "@@ -61,68 +59,64 @@\n \n     private void validateOrganisationPolicy(String caseTypeId, CaseDataContent content) {\n         final List<String> errorList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fdeb79c224de07646d18fc7525f680f88b0736c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ2OTM2MA==", "bodyText": "we are checking in isOrgPolicyCaseAssignedRole(...)", "url": "https://github.com/hmcts/ccd-data-store-api/pull/978#discussion_r443469360", "createdAt": "2020-06-22T10:39:09Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "diffHunk": "@@ -61,68 +59,64 @@\n \n     private void validateOrganisationPolicy(String caseTypeId, CaseDataContent content) {\n         final List<String> errorList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ1ODU4MA=="}, "originalCommit": {"oid": "3fdeb79c224de07646d18fc7525f680f88b0736c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ3NTU0Nw==", "bodyText": "but it is always checking for ORGANISATION_POLICY when we could do it before executing all logic if needed . one if statement.   For me is the same just and small comment .", "url": "https://github.com/hmcts/ccd-data-store-api/pull/978#discussion_r443475547", "createdAt": "2020-06-22T10:51:58Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "diffHunk": "@@ -61,68 +59,64 @@\n \n     private void validateOrganisationPolicy(String caseTypeId, CaseDataContent content) {\n         final List<String> errorList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ1ODU4MA=="}, "originalCommit": {"oid": "3fdeb79c224de07646d18fc7525f680f88b0736c"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzI5MTgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToxMjowMVrOGm8MSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjoyOToxMFrOGm-edw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ4NTI1Nw==", "bodyText": "CaseTypeDefinition has a findCaseEvent() method returning Optional<CaseEventDefinition>.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    caseDefinitionRepository.getCaseType(caseTypeId).getEvents().stream()\n          \n          \n            \n                        .filter(event -> event.getId().equals(content.getEventId()))\n          \n          \n            \n                        .forEach(caseEventDefinition -> caseEventDefinition.getCaseFields()\n          \n          \n            \n                    caseDefinitionRepository.getCaseType(caseTypeId).findCaseEvent(content.getEventId())\n          \n          \n            \n                        .ifPresent(caseEventDefinition -> caseEventDefinition.getCaseFields()", "url": "https://github.com/hmcts/ccd-data-store-api/pull/978#discussion_r443485257", "createdAt": "2020-06-22T11:12:01Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "diffHunk": "@@ -61,68 +59,64 @@\n \n     private void validateOrganisationPolicy(String caseTypeId, CaseDataContent content) {\n         final List<String> errorList = new ArrayList<>();\n-        // if there is not a default value. it means that there will not be organisation policy validation.\n-        // hence if there is at least one ORGANISATION_POLICY_ROLE all default value logic will be executed.\n-        if (!isOrganisationPolicyLogicInTheContent(content)) {\n-            return;\n-        }\n-        caseDefinitionRepository.getCaseType(caseTypeId).getEvents().stream().filter(\n-            event -> event.getId().equals(content.getEventId())\n-        ).forEach(\n-            caseEventDefinition -> caseEventDefinition.getCaseFields().stream().forEach(\n-                caseField -> caseField.getCaseEventFieldComplexDefinitions().stream().filter(\n-                    caseEventFieldComplexDefinition -> {\n-                        if (caseEventFieldComplexDefinition.getReference().equals(ORGANISATION_POLICY_ROLE)) {\n-                            //get extract the default value  from the content for the current caseField\n-                            final Optional<String> caseFieldDefaultValue = getDefaultValueFromContentByCaseFieldID(content, caseField.getCaseFieldId());\n-                            validateOrgPolicyCaseAssignedRole(\n-                                caseEventFieldComplexDefinition,\n-                                caseFieldDefaultValue,\n-                                caseField.getCaseFieldId(),\n-                                errorList);\n-                            return true;\n-                        } else {\n-                            return false;\n-                        }\n-                    }\n-                ).collect(Collectors.toList()))\n-        );\n+        caseDefinitionRepository.getCaseType(caseTypeId).getEvents().stream()\n+            .filter(event -> event.getId().equals(content.getEventId()))\n+            .forEach(caseEventDefinition -> caseEventDefinition.getCaseFields()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fdeb79c224de07646d18fc7525f680f88b0736c"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUyMjY3OQ==", "bodyText": "changed to the suggested", "url": "https://github.com/hmcts/ccd-data-store-api/pull/978#discussion_r443522679", "createdAt": "2020-06-22T12:29:10Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "diffHunk": "@@ -61,68 +59,64 @@\n \n     private void validateOrganisationPolicy(String caseTypeId, CaseDataContent content) {\n         final List<String> errorList = new ArrayList<>();\n-        // if there is not a default value. it means that there will not be organisation policy validation.\n-        // hence if there is at least one ORGANISATION_POLICY_ROLE all default value logic will be executed.\n-        if (!isOrganisationPolicyLogicInTheContent(content)) {\n-            return;\n-        }\n-        caseDefinitionRepository.getCaseType(caseTypeId).getEvents().stream().filter(\n-            event -> event.getId().equals(content.getEventId())\n-        ).forEach(\n-            caseEventDefinition -> caseEventDefinition.getCaseFields().stream().forEach(\n-                caseField -> caseField.getCaseEventFieldComplexDefinitions().stream().filter(\n-                    caseEventFieldComplexDefinition -> {\n-                        if (caseEventFieldComplexDefinition.getReference().equals(ORGANISATION_POLICY_ROLE)) {\n-                            //get extract the default value  from the content for the current caseField\n-                            final Optional<String> caseFieldDefaultValue = getDefaultValueFromContentByCaseFieldID(content, caseField.getCaseFieldId());\n-                            validateOrgPolicyCaseAssignedRole(\n-                                caseEventFieldComplexDefinition,\n-                                caseFieldDefaultValue,\n-                                caseField.getCaseFieldId(),\n-                                errorList);\n-                            return true;\n-                        } else {\n-                            return false;\n-                        }\n-                    }\n-                ).collect(Collectors.toList()))\n-        );\n+        caseDefinitionRepository.getCaseType(caseTypeId).getEvents().stream()\n+            .filter(event -> event.getId().equals(content.getEventId()))\n+            .forEach(caseEventDefinition -> caseEventDefinition.getCaseFields()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ4NTI1Nw=="}, "originalCommit": {"oid": "3fdeb79c224de07646d18fc7525f680f88b0736c"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzMxMDIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToxODoxNFrOGm8XgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjoyODo1NVrOGm-d4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ4ODEyOQ==", "bodyText": "This comment doesn't seem to match with what is happening next? validateContent", "url": "https://github.com/hmcts/ccd-data-store-api/pull/978#discussion_r443488129", "createdAt": "2020-06-22T11:18:14Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "diffHunk": "@@ -61,68 +59,64 @@\n \n     private void validateOrganisationPolicy(String caseTypeId, CaseDataContent content) {\n         final List<String> errorList = new ArrayList<>();\n-        // if there is not a default value. it means that there will not be organisation policy validation.\n-        // hence if there is at least one ORGANISATION_POLICY_ROLE all default value logic will be executed.\n-        if (!isOrganisationPolicyLogicInTheContent(content)) {\n-            return;\n-        }\n-        caseDefinitionRepository.getCaseType(caseTypeId).getEvents().stream().filter(\n-            event -> event.getId().equals(content.getEventId())\n-        ).forEach(\n-            caseEventDefinition -> caseEventDefinition.getCaseFields().stream().forEach(\n-                caseField -> caseField.getCaseEventFieldComplexDefinitions().stream().filter(\n-                    caseEventFieldComplexDefinition -> {\n-                        if (caseEventFieldComplexDefinition.getReference().equals(ORGANISATION_POLICY_ROLE)) {\n-                            //get extract the default value  from the content for the current caseField\n-                            final Optional<String> caseFieldDefaultValue = getDefaultValueFromContentByCaseFieldID(content, caseField.getCaseFieldId());\n-                            validateOrgPolicyCaseAssignedRole(\n-                                caseEventFieldComplexDefinition,\n-                                caseFieldDefaultValue,\n-                                caseField.getCaseFieldId(),\n-                                errorList);\n-                            return true;\n-                        } else {\n-                            return false;\n-                        }\n-                    }\n-                ).collect(Collectors.toList()))\n-        );\n+        caseDefinitionRepository.getCaseType(caseTypeId).getEvents().stream()\n+            .filter(event -> event.getId().equals(content.getEventId()))\n+            .forEach(caseEventDefinition -> caseEventDefinition.getCaseFields()\n+                .stream()\n+                .forEach(eventFieldDefinition -> eventFieldDefinition.getCaseEventFieldComplexDefinitions().stream()\n+                    .filter(cefcDefinition -> isOrgPolicyCaseAssignedRole(cefcDefinition.getReference()))\n+                    .forEach(cefcDefinition -> {\n+                        //get extract the default value  from the content for the current eventFieldDefinition", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fdeb79c224de07646d18fc7525f680f88b0736c"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUyMjUyOA==", "bodyText": "removed comment", "url": "https://github.com/hmcts/ccd-data-store-api/pull/978#discussion_r443522528", "createdAt": "2020-06-22T12:28:55Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "diffHunk": "@@ -61,68 +59,64 @@\n \n     private void validateOrganisationPolicy(String caseTypeId, CaseDataContent content) {\n         final List<String> errorList = new ArrayList<>();\n-        // if there is not a default value. it means that there will not be organisation policy validation.\n-        // hence if there is at least one ORGANISATION_POLICY_ROLE all default value logic will be executed.\n-        if (!isOrganisationPolicyLogicInTheContent(content)) {\n-            return;\n-        }\n-        caseDefinitionRepository.getCaseType(caseTypeId).getEvents().stream().filter(\n-            event -> event.getId().equals(content.getEventId())\n-        ).forEach(\n-            caseEventDefinition -> caseEventDefinition.getCaseFields().stream().forEach(\n-                caseField -> caseField.getCaseEventFieldComplexDefinitions().stream().filter(\n-                    caseEventFieldComplexDefinition -> {\n-                        if (caseEventFieldComplexDefinition.getReference().equals(ORGANISATION_POLICY_ROLE)) {\n-                            //get extract the default value  from the content for the current caseField\n-                            final Optional<String> caseFieldDefaultValue = getDefaultValueFromContentByCaseFieldID(content, caseField.getCaseFieldId());\n-                            validateOrgPolicyCaseAssignedRole(\n-                                caseEventFieldComplexDefinition,\n-                                caseFieldDefaultValue,\n-                                caseField.getCaseFieldId(),\n-                                errorList);\n-                            return true;\n-                        } else {\n-                            return false;\n-                        }\n-                    }\n-                ).collect(Collectors.toList()))\n-        );\n+        caseDefinitionRepository.getCaseType(caseTypeId).getEvents().stream()\n+            .filter(event -> event.getId().equals(content.getEventId()))\n+            .forEach(caseEventDefinition -> caseEventDefinition.getCaseFields()\n+                .stream()\n+                .forEach(eventFieldDefinition -> eventFieldDefinition.getCaseEventFieldComplexDefinitions().stream()\n+                    .filter(cefcDefinition -> isOrgPolicyCaseAssignedRole(cefcDefinition.getReference()))\n+                    .forEach(cefcDefinition -> {\n+                        //get extract the default value  from the content for the current eventFieldDefinition", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ4ODEyOQ=="}, "originalCommit": {"oid": "3fdeb79c224de07646d18fc7525f680f88b0736c"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzMyMTg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToyMjoyMFrOGm8e5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjoyODo0NFrOGm-dgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5MDAyMQ==", "bodyText": "Overcomplicating by wrapping in an Optional rather than just checking not null?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/978#discussion_r443490021", "createdAt": "2020-06-22T11:22:20Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "diffHunk": "@@ -61,68 +59,64 @@\n \n     private void validateOrganisationPolicy(String caseTypeId, CaseDataContent content) {\n         final List<String> errorList = new ArrayList<>();\n-        // if there is not a default value. it means that there will not be organisation policy validation.\n-        // hence if there is at least one ORGANISATION_POLICY_ROLE all default value logic will be executed.\n-        if (!isOrganisationPolicyLogicInTheContent(content)) {\n-            return;\n-        }\n-        caseDefinitionRepository.getCaseType(caseTypeId).getEvents().stream().filter(\n-            event -> event.getId().equals(content.getEventId())\n-        ).forEach(\n-            caseEventDefinition -> caseEventDefinition.getCaseFields().stream().forEach(\n-                caseField -> caseField.getCaseEventFieldComplexDefinitions().stream().filter(\n-                    caseEventFieldComplexDefinition -> {\n-                        if (caseEventFieldComplexDefinition.getReference().equals(ORGANISATION_POLICY_ROLE)) {\n-                            //get extract the default value  from the content for the current caseField\n-                            final Optional<String> caseFieldDefaultValue = getDefaultValueFromContentByCaseFieldID(content, caseField.getCaseFieldId());\n-                            validateOrgPolicyCaseAssignedRole(\n-                                caseEventFieldComplexDefinition,\n-                                caseFieldDefaultValue,\n-                                caseField.getCaseFieldId(),\n-                                errorList);\n-                            return true;\n-                        } else {\n-                            return false;\n-                        }\n-                    }\n-                ).collect(Collectors.toList()))\n-        );\n+        caseDefinitionRepository.getCaseType(caseTypeId).getEvents().stream()\n+            .filter(event -> event.getId().equals(content.getEventId()))\n+            .forEach(caseEventDefinition -> caseEventDefinition.getCaseFields()\n+                .stream()\n+                .forEach(eventFieldDefinition -> eventFieldDefinition.getCaseEventFieldComplexDefinitions().stream()\n+                    .filter(cefcDefinition -> isOrgPolicyCaseAssignedRole(cefcDefinition.getReference()))\n+                    .forEach(cefcDefinition -> {\n+                        //get extract the default value  from the content for the current eventFieldDefinition\n+                        String reference = cefcDefinition.getReference();\n+                        validateContent(content, eventFieldDefinition.getCaseFieldId(),\n+                            reference,\n+                            cefcDefinition.getDefaultValue(),\n+                            errorList);\n+                    })));\n         if (errorList.size() != 0) {\n             throw new ValidationException(\"Roles validation error: \" + String.join(\", \", errorList));\n         }\n     }\n \n-    private boolean isOrganisationPolicyLogicInTheContent(final CaseDataContent content) {\n-        final JsonNode existingData = new ObjectMapper().convertValue(content.getData(), JsonNode.class);\n-        final List<JsonNode> jsonNode = existingData.findParents(ORGANISATION_POLICY_ROLE);\n-        final Optional<JsonNode> node = jsonNode.stream().findFirst();\n-        return  node.isPresent();\n+    private boolean isOrgPolicyCaseAssignedRole(String reference) {\n+        String[] referenceArray = reference.split(Pattern.quote(\".\"));\n+        return ORGANISATION_POLICY_ROLE.equals(referenceArray[referenceArray.length - 1]);\n     }\n \n-    private Optional<String> getDefaultValueFromContentByCaseFieldID(final CaseDataContent content, final String caseFiledID) {\n+    private void validateContent(final CaseDataContent content,\n+                                 final String caseFiledID,\n+                                 final String reference,\n+                                 final String defaultValue,\n+                                 final List<String> errorList) {\n         final JsonNode existingData = new ObjectMapper().convertValue(content.getData(), JsonNode.class);\n-        final Optional<JsonNode> caseFieldNode = Optional.ofNullable(existingData.get(caseFiledID));\n-\n+        Optional<JsonNode> caseFieldNode = Optional.of(existingData.findPath(caseFiledID));\n         if (caseFieldNode.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fdeb79c224de07646d18fc7525f680f88b0736c"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUyMjQzNA==", "bodyText": "removed optional", "url": "https://github.com/hmcts/ccd-data-store-api/pull/978#discussion_r443522434", "createdAt": "2020-06-22T12:28:44Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "diffHunk": "@@ -61,68 +59,64 @@\n \n     private void validateOrganisationPolicy(String caseTypeId, CaseDataContent content) {\n         final List<String> errorList = new ArrayList<>();\n-        // if there is not a default value. it means that there will not be organisation policy validation.\n-        // hence if there is at least one ORGANISATION_POLICY_ROLE all default value logic will be executed.\n-        if (!isOrganisationPolicyLogicInTheContent(content)) {\n-            return;\n-        }\n-        caseDefinitionRepository.getCaseType(caseTypeId).getEvents().stream().filter(\n-            event -> event.getId().equals(content.getEventId())\n-        ).forEach(\n-            caseEventDefinition -> caseEventDefinition.getCaseFields().stream().forEach(\n-                caseField -> caseField.getCaseEventFieldComplexDefinitions().stream().filter(\n-                    caseEventFieldComplexDefinition -> {\n-                        if (caseEventFieldComplexDefinition.getReference().equals(ORGANISATION_POLICY_ROLE)) {\n-                            //get extract the default value  from the content for the current caseField\n-                            final Optional<String> caseFieldDefaultValue = getDefaultValueFromContentByCaseFieldID(content, caseField.getCaseFieldId());\n-                            validateOrgPolicyCaseAssignedRole(\n-                                caseEventFieldComplexDefinition,\n-                                caseFieldDefaultValue,\n-                                caseField.getCaseFieldId(),\n-                                errorList);\n-                            return true;\n-                        } else {\n-                            return false;\n-                        }\n-                    }\n-                ).collect(Collectors.toList()))\n-        );\n+        caseDefinitionRepository.getCaseType(caseTypeId).getEvents().stream()\n+            .filter(event -> event.getId().equals(content.getEventId()))\n+            .forEach(caseEventDefinition -> caseEventDefinition.getCaseFields()\n+                .stream()\n+                .forEach(eventFieldDefinition -> eventFieldDefinition.getCaseEventFieldComplexDefinitions().stream()\n+                    .filter(cefcDefinition -> isOrgPolicyCaseAssignedRole(cefcDefinition.getReference()))\n+                    .forEach(cefcDefinition -> {\n+                        //get extract the default value  from the content for the current eventFieldDefinition\n+                        String reference = cefcDefinition.getReference();\n+                        validateContent(content, eventFieldDefinition.getCaseFieldId(),\n+                            reference,\n+                            cefcDefinition.getDefaultValue(),\n+                            errorList);\n+                    })));\n         if (errorList.size() != 0) {\n             throw new ValidationException(\"Roles validation error: \" + String.join(\", \", errorList));\n         }\n     }\n \n-    private boolean isOrganisationPolicyLogicInTheContent(final CaseDataContent content) {\n-        final JsonNode existingData = new ObjectMapper().convertValue(content.getData(), JsonNode.class);\n-        final List<JsonNode> jsonNode = existingData.findParents(ORGANISATION_POLICY_ROLE);\n-        final Optional<JsonNode> node = jsonNode.stream().findFirst();\n-        return  node.isPresent();\n+    private boolean isOrgPolicyCaseAssignedRole(String reference) {\n+        String[] referenceArray = reference.split(Pattern.quote(\".\"));\n+        return ORGANISATION_POLICY_ROLE.equals(referenceArray[referenceArray.length - 1]);\n     }\n \n-    private Optional<String> getDefaultValueFromContentByCaseFieldID(final CaseDataContent content, final String caseFiledID) {\n+    private void validateContent(final CaseDataContent content,\n+                                 final String caseFiledID,\n+                                 final String reference,\n+                                 final String defaultValue,\n+                                 final List<String> errorList) {\n         final JsonNode existingData = new ObjectMapper().convertValue(content.getData(), JsonNode.class);\n-        final Optional<JsonNode> caseFieldNode = Optional.ofNullable(existingData.get(caseFiledID));\n-\n+        Optional<JsonNode> caseFieldNode = Optional.of(existingData.findPath(caseFiledID));\n         if (caseFieldNode.isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5MDAyMQ=="}, "originalCommit": {"oid": "3fdeb79c224de07646d18fc7525f680f88b0736c"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzMyNjYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToyNDowNVrOGm8h8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjoyODozMlrOGm-dHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5MDgwMA==", "bodyText": "Could extract since used elsewhere (e.g. L#82).", "url": "https://github.com/hmcts/ccd-data-store-api/pull/978#discussion_r443490800", "createdAt": "2020-06-22T11:24:05Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "diffHunk": "@@ -61,68 +59,64 @@\n \n     private void validateOrganisationPolicy(String caseTypeId, CaseDataContent content) {\n         final List<String> errorList = new ArrayList<>();\n-        // if there is not a default value. it means that there will not be organisation policy validation.\n-        // hence if there is at least one ORGANISATION_POLICY_ROLE all default value logic will be executed.\n-        if (!isOrganisationPolicyLogicInTheContent(content)) {\n-            return;\n-        }\n-        caseDefinitionRepository.getCaseType(caseTypeId).getEvents().stream().filter(\n-            event -> event.getId().equals(content.getEventId())\n-        ).forEach(\n-            caseEventDefinition -> caseEventDefinition.getCaseFields().stream().forEach(\n-                caseField -> caseField.getCaseEventFieldComplexDefinitions().stream().filter(\n-                    caseEventFieldComplexDefinition -> {\n-                        if (caseEventFieldComplexDefinition.getReference().equals(ORGANISATION_POLICY_ROLE)) {\n-                            //get extract the default value  from the content for the current caseField\n-                            final Optional<String> caseFieldDefaultValue = getDefaultValueFromContentByCaseFieldID(content, caseField.getCaseFieldId());\n-                            validateOrgPolicyCaseAssignedRole(\n-                                caseEventFieldComplexDefinition,\n-                                caseFieldDefaultValue,\n-                                caseField.getCaseFieldId(),\n-                                errorList);\n-                            return true;\n-                        } else {\n-                            return false;\n-                        }\n-                    }\n-                ).collect(Collectors.toList()))\n-        );\n+        caseDefinitionRepository.getCaseType(caseTypeId).getEvents().stream()\n+            .filter(event -> event.getId().equals(content.getEventId()))\n+            .forEach(caseEventDefinition -> caseEventDefinition.getCaseFields()\n+                .stream()\n+                .forEach(eventFieldDefinition -> eventFieldDefinition.getCaseEventFieldComplexDefinitions().stream()\n+                    .filter(cefcDefinition -> isOrgPolicyCaseAssignedRole(cefcDefinition.getReference()))\n+                    .forEach(cefcDefinition -> {\n+                        //get extract the default value  from the content for the current eventFieldDefinition\n+                        String reference = cefcDefinition.getReference();\n+                        validateContent(content, eventFieldDefinition.getCaseFieldId(),\n+                            reference,\n+                            cefcDefinition.getDefaultValue(),\n+                            errorList);\n+                    })));\n         if (errorList.size() != 0) {\n             throw new ValidationException(\"Roles validation error: \" + String.join(\", \", errorList));\n         }\n     }\n \n-    private boolean isOrganisationPolicyLogicInTheContent(final CaseDataContent content) {\n-        final JsonNode existingData = new ObjectMapper().convertValue(content.getData(), JsonNode.class);\n-        final List<JsonNode> jsonNode = existingData.findParents(ORGANISATION_POLICY_ROLE);\n-        final Optional<JsonNode> node = jsonNode.stream().findFirst();\n-        return  node.isPresent();\n+    private boolean isOrgPolicyCaseAssignedRole(String reference) {\n+        String[] referenceArray = reference.split(Pattern.quote(\".\"));\n+        return ORGANISATION_POLICY_ROLE.equals(referenceArray[referenceArray.length - 1]);\n     }\n \n-    private Optional<String> getDefaultValueFromContentByCaseFieldID(final CaseDataContent content, final String caseFiledID) {\n+    private void validateContent(final CaseDataContent content,\n+                                 final String caseFiledID,\n+                                 final String reference,\n+                                 final String defaultValue,\n+                                 final List<String> errorList) {\n         final JsonNode existingData = new ObjectMapper().convertValue(content.getData(), JsonNode.class);\n-        final Optional<JsonNode> caseFieldNode = Optional.ofNullable(existingData.get(caseFiledID));\n-\n+        Optional<JsonNode> caseFieldNode = Optional.of(existingData.findPath(caseFiledID));\n         if (caseFieldNode.isPresent()) {\n-            if (caseFieldNode.get().get(ORGANISATION_POLICY_ROLE).isNull()) {\n-                return Optional.ofNullable(null);\n-            }\n-            return Optional.of(caseFieldNode.get().get(ORGANISATION_POLICY_ROLE).textValue());\n+            String[] referenceArray = reference.split(Pattern.quote(\".\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fdeb79c224de07646d18fc7525f680f88b0736c"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUyMjMzNA==", "bodyText": "extracted to a method", "url": "https://github.com/hmcts/ccd-data-store-api/pull/978#discussion_r443522334", "createdAt": "2020-06-22T12:28:32Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "diffHunk": "@@ -61,68 +59,64 @@\n \n     private void validateOrganisationPolicy(String caseTypeId, CaseDataContent content) {\n         final List<String> errorList = new ArrayList<>();\n-        // if there is not a default value. it means that there will not be organisation policy validation.\n-        // hence if there is at least one ORGANISATION_POLICY_ROLE all default value logic will be executed.\n-        if (!isOrganisationPolicyLogicInTheContent(content)) {\n-            return;\n-        }\n-        caseDefinitionRepository.getCaseType(caseTypeId).getEvents().stream().filter(\n-            event -> event.getId().equals(content.getEventId())\n-        ).forEach(\n-            caseEventDefinition -> caseEventDefinition.getCaseFields().stream().forEach(\n-                caseField -> caseField.getCaseEventFieldComplexDefinitions().stream().filter(\n-                    caseEventFieldComplexDefinition -> {\n-                        if (caseEventFieldComplexDefinition.getReference().equals(ORGANISATION_POLICY_ROLE)) {\n-                            //get extract the default value  from the content for the current caseField\n-                            final Optional<String> caseFieldDefaultValue = getDefaultValueFromContentByCaseFieldID(content, caseField.getCaseFieldId());\n-                            validateOrgPolicyCaseAssignedRole(\n-                                caseEventFieldComplexDefinition,\n-                                caseFieldDefaultValue,\n-                                caseField.getCaseFieldId(),\n-                                errorList);\n-                            return true;\n-                        } else {\n-                            return false;\n-                        }\n-                    }\n-                ).collect(Collectors.toList()))\n-        );\n+        caseDefinitionRepository.getCaseType(caseTypeId).getEvents().stream()\n+            .filter(event -> event.getId().equals(content.getEventId()))\n+            .forEach(caseEventDefinition -> caseEventDefinition.getCaseFields()\n+                .stream()\n+                .forEach(eventFieldDefinition -> eventFieldDefinition.getCaseEventFieldComplexDefinitions().stream()\n+                    .filter(cefcDefinition -> isOrgPolicyCaseAssignedRole(cefcDefinition.getReference()))\n+                    .forEach(cefcDefinition -> {\n+                        //get extract the default value  from the content for the current eventFieldDefinition\n+                        String reference = cefcDefinition.getReference();\n+                        validateContent(content, eventFieldDefinition.getCaseFieldId(),\n+                            reference,\n+                            cefcDefinition.getDefaultValue(),\n+                            errorList);\n+                    })));\n         if (errorList.size() != 0) {\n             throw new ValidationException(\"Roles validation error: \" + String.join(\", \", errorList));\n         }\n     }\n \n-    private boolean isOrganisationPolicyLogicInTheContent(final CaseDataContent content) {\n-        final JsonNode existingData = new ObjectMapper().convertValue(content.getData(), JsonNode.class);\n-        final List<JsonNode> jsonNode = existingData.findParents(ORGANISATION_POLICY_ROLE);\n-        final Optional<JsonNode> node = jsonNode.stream().findFirst();\n-        return  node.isPresent();\n+    private boolean isOrgPolicyCaseAssignedRole(String reference) {\n+        String[] referenceArray = reference.split(Pattern.quote(\".\"));\n+        return ORGANISATION_POLICY_ROLE.equals(referenceArray[referenceArray.length - 1]);\n     }\n \n-    private Optional<String> getDefaultValueFromContentByCaseFieldID(final CaseDataContent content, final String caseFiledID) {\n+    private void validateContent(final CaseDataContent content,\n+                                 final String caseFiledID,\n+                                 final String reference,\n+                                 final String defaultValue,\n+                                 final List<String> errorList) {\n         final JsonNode existingData = new ObjectMapper().convertValue(content.getData(), JsonNode.class);\n-        final Optional<JsonNode> caseFieldNode = Optional.ofNullable(existingData.get(caseFiledID));\n-\n+        Optional<JsonNode> caseFieldNode = Optional.of(existingData.findPath(caseFiledID));\n         if (caseFieldNode.isPresent()) {\n-            if (caseFieldNode.get().get(ORGANISATION_POLICY_ROLE).isNull()) {\n-                return Optional.ofNullable(null);\n-            }\n-            return Optional.of(caseFieldNode.get().get(ORGANISATION_POLICY_ROLE).textValue());\n+            String[] referenceArray = reference.split(Pattern.quote(\".\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5MDgwMA=="}, "originalCommit": {"oid": "3fdeb79c224de07646d18fc7525f680f88b0736c"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzMyOTc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToyNToxNFrOGm8kAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjoyODoyM1rOGm-c0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5MTMyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                             final String caseFiledID,\n          \n          \n            \n                                             final String caseFieldId,", "url": "https://github.com/hmcts/ccd-data-store-api/pull/978#discussion_r443491328", "createdAt": "2020-06-22T11:25:14Z", "author": {"login": "danlysiak"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "diffHunk": "@@ -61,68 +59,64 @@\n \n     private void validateOrganisationPolicy(String caseTypeId, CaseDataContent content) {\n         final List<String> errorList = new ArrayList<>();\n-        // if there is not a default value. it means that there will not be organisation policy validation.\n-        // hence if there is at least one ORGANISATION_POLICY_ROLE all default value logic will be executed.\n-        if (!isOrganisationPolicyLogicInTheContent(content)) {\n-            return;\n-        }\n-        caseDefinitionRepository.getCaseType(caseTypeId).getEvents().stream().filter(\n-            event -> event.getId().equals(content.getEventId())\n-        ).forEach(\n-            caseEventDefinition -> caseEventDefinition.getCaseFields().stream().forEach(\n-                caseField -> caseField.getCaseEventFieldComplexDefinitions().stream().filter(\n-                    caseEventFieldComplexDefinition -> {\n-                        if (caseEventFieldComplexDefinition.getReference().equals(ORGANISATION_POLICY_ROLE)) {\n-                            //get extract the default value  from the content for the current caseField\n-                            final Optional<String> caseFieldDefaultValue = getDefaultValueFromContentByCaseFieldID(content, caseField.getCaseFieldId());\n-                            validateOrgPolicyCaseAssignedRole(\n-                                caseEventFieldComplexDefinition,\n-                                caseFieldDefaultValue,\n-                                caseField.getCaseFieldId(),\n-                                errorList);\n-                            return true;\n-                        } else {\n-                            return false;\n-                        }\n-                    }\n-                ).collect(Collectors.toList()))\n-        );\n+        caseDefinitionRepository.getCaseType(caseTypeId).getEvents().stream()\n+            .filter(event -> event.getId().equals(content.getEventId()))\n+            .forEach(caseEventDefinition -> caseEventDefinition.getCaseFields()\n+                .stream()\n+                .forEach(eventFieldDefinition -> eventFieldDefinition.getCaseEventFieldComplexDefinitions().stream()\n+                    .filter(cefcDefinition -> isOrgPolicyCaseAssignedRole(cefcDefinition.getReference()))\n+                    .forEach(cefcDefinition -> {\n+                        //get extract the default value  from the content for the current eventFieldDefinition\n+                        String reference = cefcDefinition.getReference();\n+                        validateContent(content, eventFieldDefinition.getCaseFieldId(),\n+                            reference,\n+                            cefcDefinition.getDefaultValue(),\n+                            errorList);\n+                    })));\n         if (errorList.size() != 0) {\n             throw new ValidationException(\"Roles validation error: \" + String.join(\", \", errorList));\n         }\n     }\n \n-    private boolean isOrganisationPolicyLogicInTheContent(final CaseDataContent content) {\n-        final JsonNode existingData = new ObjectMapper().convertValue(content.getData(), JsonNode.class);\n-        final List<JsonNode> jsonNode = existingData.findParents(ORGANISATION_POLICY_ROLE);\n-        final Optional<JsonNode> node = jsonNode.stream().findFirst();\n-        return  node.isPresent();\n+    private boolean isOrgPolicyCaseAssignedRole(String reference) {\n+        String[] referenceArray = reference.split(Pattern.quote(\".\"));\n+        return ORGANISATION_POLICY_ROLE.equals(referenceArray[referenceArray.length - 1]);\n     }\n \n-    private Optional<String> getDefaultValueFromContentByCaseFieldID(final CaseDataContent content, final String caseFiledID) {\n+    private void validateContent(final CaseDataContent content,\n+                                 final String caseFiledID,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fdeb79c224de07646d18fc7525f680f88b0736c"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUyMjI1Nw==", "bodyText": "Done", "url": "https://github.com/hmcts/ccd-data-store-api/pull/978#discussion_r443522257", "createdAt": "2020-06-22T12:28:23Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "diffHunk": "@@ -61,68 +59,64 @@\n \n     private void validateOrganisationPolicy(String caseTypeId, CaseDataContent content) {\n         final List<String> errorList = new ArrayList<>();\n-        // if there is not a default value. it means that there will not be organisation policy validation.\n-        // hence if there is at least one ORGANISATION_POLICY_ROLE all default value logic will be executed.\n-        if (!isOrganisationPolicyLogicInTheContent(content)) {\n-            return;\n-        }\n-        caseDefinitionRepository.getCaseType(caseTypeId).getEvents().stream().filter(\n-            event -> event.getId().equals(content.getEventId())\n-        ).forEach(\n-            caseEventDefinition -> caseEventDefinition.getCaseFields().stream().forEach(\n-                caseField -> caseField.getCaseEventFieldComplexDefinitions().stream().filter(\n-                    caseEventFieldComplexDefinition -> {\n-                        if (caseEventFieldComplexDefinition.getReference().equals(ORGANISATION_POLICY_ROLE)) {\n-                            //get extract the default value  from the content for the current caseField\n-                            final Optional<String> caseFieldDefaultValue = getDefaultValueFromContentByCaseFieldID(content, caseField.getCaseFieldId());\n-                            validateOrgPolicyCaseAssignedRole(\n-                                caseEventFieldComplexDefinition,\n-                                caseFieldDefaultValue,\n-                                caseField.getCaseFieldId(),\n-                                errorList);\n-                            return true;\n-                        } else {\n-                            return false;\n-                        }\n-                    }\n-                ).collect(Collectors.toList()))\n-        );\n+        caseDefinitionRepository.getCaseType(caseTypeId).getEvents().stream()\n+            .filter(event -> event.getId().equals(content.getEventId()))\n+            .forEach(caseEventDefinition -> caseEventDefinition.getCaseFields()\n+                .stream()\n+                .forEach(eventFieldDefinition -> eventFieldDefinition.getCaseEventFieldComplexDefinitions().stream()\n+                    .filter(cefcDefinition -> isOrgPolicyCaseAssignedRole(cefcDefinition.getReference()))\n+                    .forEach(cefcDefinition -> {\n+                        //get extract the default value  from the content for the current eventFieldDefinition\n+                        String reference = cefcDefinition.getReference();\n+                        validateContent(content, eventFieldDefinition.getCaseFieldId(),\n+                            reference,\n+                            cefcDefinition.getDefaultValue(),\n+                            errorList);\n+                    })));\n         if (errorList.size() != 0) {\n             throw new ValidationException(\"Roles validation error: \" + String.join(\", \", errorList));\n         }\n     }\n \n-    private boolean isOrganisationPolicyLogicInTheContent(final CaseDataContent content) {\n-        final JsonNode existingData = new ObjectMapper().convertValue(content.getData(), JsonNode.class);\n-        final List<JsonNode> jsonNode = existingData.findParents(ORGANISATION_POLICY_ROLE);\n-        final Optional<JsonNode> node = jsonNode.stream().findFirst();\n-        return  node.isPresent();\n+    private boolean isOrgPolicyCaseAssignedRole(String reference) {\n+        String[] referenceArray = reference.split(Pattern.quote(\".\"));\n+        return ORGANISATION_POLICY_ROLE.equals(referenceArray[referenceArray.length - 1]);\n     }\n \n-    private Optional<String> getDefaultValueFromContentByCaseFieldID(final CaseDataContent content, final String caseFiledID) {\n+    private void validateContent(final CaseDataContent content,\n+                                 final String caseFiledID,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5MTMyOA=="}, "originalCommit": {"oid": "3fdeb79c224de07646d18fc7525f680f88b0736c"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3863, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}