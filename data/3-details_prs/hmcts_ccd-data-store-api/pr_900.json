{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNDE0Nzc0", "number": 900, "title": "RDM-8166 - Using Formatted Date(Time) Fields on Workbasket & Search Input Screens", "bodyText": "JIRA link (if applicable)\nhttps://tools.hmcts.net/jira/browse/RDM-8166\nChange description\nUsing Formatted Date(Time) Fields on Workbasket & Search Input Screens\nDoes this PR introduce a breaking change? (check one with \"x\")\n[ ] Yes\n[x] No", "createdAt": "2020-04-09T13:10:46Z", "url": "https://github.com/hmcts/ccd-data-store-api/pull/900", "merged": true, "mergeCommit": {"oid": "897d000542a2721b1b2bdc60d133b4e05983f757"}, "closed": true, "closedAt": "2020-04-16T09:33:45Z", "author": {"login": "danlysiak"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcV8N-yAH2gAyNDAxNDE0Nzc0OjM4OWZlNzI5NTYwMzE2MDZkY2U3YmExNThhN2NiMDk3MmM2NTRhOWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcX7imgAH2gAyNDAxNDE0Nzc0OmU3ZGViYTBjMzkwM2IwOTNlMDkyYjQ1ZTA1MjFjN2RkZTg5NjJhNjY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "389fe72956031606dce7ba158a7cb0972c654a9e", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/389fe72956031606dce7ba158a7cb0972c654a9e", "committedDate": "2020-04-09T13:08:04Z", "message": "RDM-8166 - Extend search input to complex types"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwODY1ODYz", "url": "https://github.com/hmcts/ccd-data-store-api/pull/900#pullrequestreview-390865863", "createdAt": "2020-04-09T14:51:22Z", "commit": {"oid": "389fe72956031606dce7ba158a7cb0972c654a9e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDo1MToyMlrOGDcR-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNToxODozNVrOGDdc9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI2MjI2Nw==", "bodyText": "this field type has children (nestedField). This test is not able to find any CaseField that is matching the test path \"Field.ID\"", "url": "https://github.com/hmcts/ccd-data-store-api/pull/900#discussion_r406262267", "createdAt": "2020-04-09T14:51:22Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/model/definition/FieldTypeTest.java", "diffHunk": "@@ -75,4 +80,137 @@ public void getChildrenOfComplexType() {\n             assertTrue(children.stream().anyMatch(e -> e.getId().equals(caseField2.getId())));\n         }\n     }\n+\n+    @Nested\n+    @DisplayName(\"getNestedField test\")\n+    class FieldTypeGetNestedFieldTest {\n+\n+        private final String COMPLEX_FIELD_TYPE = \"Complex\";\n+        private final String COLLECTION_FIELD_TYPE = \"Collection\";\n+\n+        @Test\n+        void shouldFindBasicNestedField() {\n+            String testPath = \"NestedField\";\n+            CaseField nestedField = newCaseField()\n+                .withId(\"NestedField\")\n+                .withFieldType(aFieldType().withType(\"Text\").build())\n+                .build();\n+            FieldType fieldType = aFieldType().withType(COMPLEX_FIELD_TYPE).withComplexField(nestedField).build();\n+\n+            final Optional<CommonField> result = fieldType.getNestedField(testPath);\n+\n+            assertAll(\n+                () -> assertThat(result.isPresent(), is(true)),\n+                () -> assertThat(result.get(), is(nestedField))\n+            );\n+        }\n+\n+        @Test\n+        void shouldFindDeepNestedField() {\n+            String testPath = \"NestedField.DeepNestedField\";\n+            CaseField deepNestedField = newCaseField().withId(\"DeepNestedField\").build();\n+            CaseField nestedField = newCaseField()\n+                .withId(\"NestedField\")\n+                .withFieldType(aFieldType().withType(COMPLEX_FIELD_TYPE)\n+                    .withComplexField(newCaseField().withId(\"SomeOtherField\").build())\n+                    .withComplexField(deepNestedField)\n+                    .build()\n+                ).build();\n+            FieldType fieldType = aFieldType().withType(COMPLEX_FIELD_TYPE).withComplexField(nestedField).build();\n+\n+            final Optional<CommonField> result = fieldType.getNestedField(testPath);\n+\n+            assertAll(\n+                () -> assertThat(result.isPresent(), is(true)),\n+                () -> assertThat(result.get(), is(deepNestedField))\n+            );\n+        }\n+\n+        @Test\n+        void shouldFindNestedCollectionField() {\n+            String testPath = \"NestedCollectionField\";\n+            CaseField collectionField = newCaseField()\n+                .withId(\"NestedCollectionField\")\n+                .withFieldType(aFieldType().withType(COLLECTION_FIELD_TYPE)\n+                    .withCollectionField(newCaseField().withId(\"SomeOtherField\").build())\n+                    .build()\n+                ).build();\n+            FieldType fieldType = aFieldType().withType(COLLECTION_FIELD_TYPE).withCollectionField(collectionField).build();\n+\n+            final Optional<CommonField> result = fieldType.getNestedField(testPath);\n+\n+            assertAll(\n+                () -> assertThat(result.isPresent(), is(true)),\n+                () -> assertThat(result.get(), is(collectionField))\n+            );\n+        }\n+\n+        @Test\n+        void shouldNotReturnResultForNonExistentNestedField() {\n+            String testPath = \"NestedField.NonExistentDeepNestedField\";\n+            CaseField deepNestedField = newCaseField().withId(\"DeepNestedField\").build();\n+            CaseField nestedField = newCaseField()\n+                .withId(\"NestedField\")\n+                .withFieldType(aFieldType().withType(\"Complex\")\n+                    .withComplexField(newCaseField().withId(\"SomeOtherField\").build())\n+                    .withComplexField(deepNestedField)\n+                    .build()\n+                ).build();\n+            FieldType fieldType = aFieldType().withType(COMPLEX_FIELD_TYPE).withComplexField(nestedField).build();\n+\n+            final Optional<CommonField> result = fieldType.getNestedField(testPath);\n+\n+            assertAll(\n+                () -> assertThat(result.isPresent(), is(false))\n+            );\n+        }\n+\n+        @Test\n+        void shouldNotReturnResultForBlankPath() {\n+            String testPath = \"\";\n+            CaseField nestedField = newCaseField()\n+                .withId(\"NestedField\")\n+                .withFieldType(aFieldType().withType(\"Text\").build())\n+                .build();\n+            FieldType fieldType = aFieldType().withType(COMPLEX_FIELD_TYPE).withComplexField(nestedField).build();\n+\n+            final Optional<CommonField> result = fieldType.getNestedField(testPath);\n+\n+            assertAll(() -> {\n+                assertThat(result.isPresent(), is(false));\n+            });\n+        }\n+\n+        @Test\n+        void shouldNotReturnResultForPathWithNoNesting() {\n+            String testPath = \"NonNestedPath\";\n+            CaseField nestedField = newCaseField()\n+                .withId(\"NestedField\")\n+                .withFieldType(aFieldType().withType(\"Text\").build())\n+                .build();\n+            FieldType fieldType = aFieldType().withType(COMPLEX_FIELD_TYPE).withComplexField(nestedField).build();\n+\n+            final Optional<CommonField> result = fieldType.getNestedField(testPath);\n+\n+            assertAll(() -> {\n+                assertThat(result.isPresent(), is(false));\n+            });\n+        }\n+\n+        @Test\n+        void shouldNotReturnResultForFieldTypeWithNoChildren() {\n+            String testPath = \"Field.ID\";\n+            CaseField nestedField = newCaseField()\n+                .withId(\"NestedField\")\n+                .withFieldType(aFieldType().withType(\"Text\").build())\n+                .build();\n+            FieldType fieldType = aFieldType().withType(COMPLEX_FIELD_TYPE).withComplexField(nestedField).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "389fe72956031606dce7ba158a7cb0972c654a9e"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI4MTQ2MA==", "bodyText": "if we can move this to FieldType that will be keep this class simple", "url": "https://github.com/hmcts/ccd-data-store-api/pull/900#discussion_r406281460", "createdAt": "2020-04-09T15:18:35Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/search/Field.java", "diffHunk": "@@ -41,4 +47,13 @@ public boolean isMetadata() {\n     public void setMetadata(boolean metadata) {\n         this.metadata = metadata;\n     }\n+\n+    public Optional<CommonField> getNestedField(String path) {\n+        final List<String> pathElements = Arrays.asList(path.trim().split(\"\\\\.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "389fe72956031606dce7ba158a7cb0972c654a9e"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwODk4NDM3", "url": "https://github.com/hmcts/ccd-data-store-api/pull/900#pullrequestreview-390898437", "createdAt": "2020-04-09T15:27:39Z", "commit": {"oid": "389fe72956031606dce7ba158a7cb0972c654a9e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNToyNzozOVrOGDd2LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNTozNTo0MFrOGDeLgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI4NzkxNg==", "bodyText": "Move this method to FieldType class", "url": "https://github.com/hmcts/ccd-data-store-api/pull/900#discussion_r406287916", "createdAt": "2020-04-09T15:27:39Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/search/SearchResultViewColumn.java", "diffHunk": "@@ -73,32 +70,11 @@ public String getDisplayContextParameter() {\n     }\n \n     public Optional<CommonField> getNestedField(String path) {\n-        if (StringUtils.isBlank(path) || path.trim().split(\"\\\\.\").length == 1 || this.getCaseFieldType().getChildren().isEmpty()) {\n+        final List<String> pathElements = Arrays.asList(path.trim().split(\"\\\\.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "389fe72956031606dce7ba158a7cb0972c654a9e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI5MzM3Ng==", "bodyText": "instead of subList() better to use index like below then it will give some performance benefit as well.\nreduce(List caseFields, List pathElements, int startIndex)\n........\nreturn reduce(newCaseFields, pathElements, startIndex + 1);", "url": "https://github.com/hmcts/ccd-data-store-api/pull/900#discussion_r406293376", "createdAt": "2020-04-09T15:35:40Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/FieldType.java", "diffHunk": "@@ -129,6 +134,34 @@ public void setCollectionFieldType(FieldType collectionFieldType) {\n         this.collectionFieldType = collectionFieldType;\n     }\n \n+    public Optional<CommonField> getNestedField(String path) {\n+        if (StringUtils.isBlank(path) || this.getChildren().isEmpty()) {\n+            return Optional.empty();\n+        }\n+        List<String> pathElements = Arrays.stream(path.trim().split(\"\\\\.\")).collect(toList());\n+\n+        return reduce(this.getChildren(), pathElements);\n+    }\n+\n+    private Optional<CommonField> reduce(List<CaseField> caseFields, List<String> pathElements) {\n+        String firstPathElement = pathElements.get(0);\n+        Optional<CaseField> optionalCaseField = caseFields.stream().filter(e -> e.getId().equals(firstPathElement)).findFirst();\n+        if (optionalCaseField.isPresent()) {\n+            CommonField caseField = optionalCaseField.get();\n+\n+            if (pathElements.size() == 1) {\n+                return Optional.of(caseField);\n+            } else {\n+                List<CaseField> newCaseFields = caseField.getFieldType().getChildren();\n+                List<String> tail = pathElements.subList(1, pathElements.size());\n+\n+                return reduce(newCaseFields, tail);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "389fe72956031606dce7ba158a7cb0972c654a9e"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e3c321e64a250adeaf7b7bc536515597239a247", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/3e3c321e64a250adeaf7b7bc536515597239a247", "committedDate": "2020-04-09T18:44:39Z", "message": "Review comments/refactoring"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNzE4MDIy", "url": "https://github.com/hmcts/ccd-data-store-api/pull/900#pullrequestreview-392718022", "createdAt": "2020-04-14T08:38:50Z", "commit": {"oid": "3e3c321e64a250adeaf7b7bc536515597239a247"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25b7097f500a0342629ddb81727516d7e3e7ddd6", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/25b7097f500a0342629ddb81727516d7e3e7ddd6", "committedDate": "2020-04-15T10:49:12Z", "message": "Merge branch 'RDM-7694' into RDM-8166"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fce702611c91eb4d0feb4bb8feadce701621e0eb", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/fce702611c91eb4d0feb4bb8feadce701621e0eb", "committedDate": "2020-04-15T14:20:43Z", "message": "Typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7deba0c3903b093e092b45e0521c7dde8962a66", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/e7deba0c3903b093e092b45e0521c7dde8962a66", "committedDate": "2020-04-15T17:28:32Z", "message": "Merge branch 'RDM-7575-DateTime-Formatting' into RDM-8166"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2909, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}