{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MDk4NzU1", "number": 909, "reviewThreads": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMDo0NDoyNFrOD0LQNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDo1NjozMVrOD1OTnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDM2OTE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditEntry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMDo0NDoyNFrOGI_G7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMDo0NDoyNFrOGI_G7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA3NTc1OA==", "bodyText": "Remove the commented lines .", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412075758", "createdAt": "2020-04-21T10:44:24Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditEntry.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+import static org.apache.commons.lang3.builder.ToStringStyle.JSON_STYLE;\n+\n+public class AuditEntry {\n+\n+    private static final String TAG = \"CLA-CCD\";\n+\n+    private String dateTime;\n+    private int httpStatus;\n+    private String httpMethod;\n+    private String path;\n+    private String idamId;\n+    private String caseId;\n+    private String caseType;\n+    private String jurisdiction;\n+    private String eventSelected;\n+    private String invokingService;\n+    private String operationType;\n+    private String requestId;\n+    private String targetIdamId;\n+    private List<String> targetCaseRoles;\n+\n+    public void setDateTime(String time) {\n+        this.dateTime = time;\n+    }\n+\n+    public String getDateTime() {\n+        return dateTime;\n+    }\n+\n+    public int getHttpStatus() {\n+        return httpStatus;\n+    }\n+\n+    public void setHttpStatus(int httpStatus) {\n+        this.httpStatus = httpStatus;\n+    }\n+\n+    public String getHttpMethod() {\n+        return httpMethod;\n+    }\n+\n+    public void setHttpMethod(String httpMethod) {\n+        this.httpMethod = httpMethod;\n+    }\n+\n+    public String getPath() {\n+        return path;\n+    }\n+\n+    public void setPath(String path) {\n+        this.path = path;\n+    }\n+\n+    public String getOperationType() {\n+        return operationType;\n+    }\n+\n+    public void setOperationType(String operationType) {\n+        this.operationType = operationType;\n+    }\n+\n+    public String getIdamId() {\n+        return idamId;\n+    }\n+\n+    public void setIdamId(String idamId) {\n+        this.idamId = idamId;\n+    }\n+\n+    public String getInvokingService() {\n+        return invokingService;\n+    }\n+\n+    public void setInvokingService(String invokingService) {\n+        this.invokingService = invokingService;\n+    }\n+\n+    public static String getTAG() {\n+        return TAG;\n+    }\n+\n+    public String getCaseId() {\n+        return caseId;\n+    }\n+\n+    public void setCaseId(String caseId) {\n+        this.caseId = caseId;\n+    }\n+\n+    public String getJurisdiction() {\n+        return jurisdiction;\n+    }\n+\n+    public void setJurisdiction(String jurisdiction) {\n+        this.jurisdiction = jurisdiction;\n+    }\n+\n+    public String getCaseType() {\n+        return caseType;\n+    }\n+\n+    public void setCaseType(String caseType) {\n+        this.caseType = caseType;\n+    }\n+\n+    public String getEventSelected() {\n+        return eventSelected;\n+    }\n+\n+    public void setEventSelected(String eventSelected) {\n+        this.eventSelected = eventSelected;\n+    }\n+\n+    public String getRequestId() {\n+        return requestId;\n+    }\n+\n+    public void setRequestId(String requestId) {\n+        this.requestId = requestId;\n+    }\n+\n+    public String getTargetIdamId() {\n+        return targetIdamId;\n+    }\n+\n+    public void setTargetIdamId(String targetIdamId) {\n+        this.targetIdamId = targetIdamId;\n+    }\n+\n+    public List<String> getTargetCaseRoles() {\n+        return targetCaseRoles;\n+    }\n+\n+    public void setTargetCaseRoles(List<String> targetCaseRoles) {\n+        this.targetCaseRoles = targetCaseRoles;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return TAG + \" \" + dateTime + \" operationType:\" + operationType +\n+            (isNotBlank(caseId) ? \", caseId:\" + caseId : \"\") +\n+            (isNotBlank(idamId) ? \", idamId:\" + idamId : \"\") +\n+            (isNotBlank(invokingService) ? \", invokingService:\" + invokingService : \"\") +\n+            (isNotBlank(path) ? \", endpointCalled:\" + httpMethod + \" \" + path : \"\") +\n+            \", operationOutcome:\" + httpStatus +\n+            (isNotBlank(caseType) ? \", caseType:\" + caseType : \"\") +\n+            (isNotBlank(jurisdiction) ? \", jurisdiction:\" + jurisdiction : \"\") +\n+            (isNotBlank(eventSelected) ? \", eventSelected:\" + eventSelected : \"\") +\n+           (isNotBlank(targetIdamId) ? \", idamIdOfTarget:\" + targetIdamId : \"\") +\n+//            (isNotBlank(listOfCaseTypes) ? \", listOfCaseTypes:\" + listOfCaseTypes : \"\") +\n+            (targetCaseRoles != null && !targetCaseRoles.isEmpty() ? \", targetCaseRoles:\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDM2OTU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMDo0NDozMFrOGI_HJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzoyODoxOVrOGJ2beA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA3NTgxNQ==", "bodyText": "Any particular reason why @lazy final SecurityUtils securityUtils is lazy. Because it seems that this securityUtils attribute is important for the AuditService functionality.   without securityUtils AuditService will not work.   Maybe it is good if it always present.   If securityUtils were inside an if statement yes .", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412075815", "createdAt": "2020-04-21T10:44:30Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditService.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.auditlog.aop.AuditContext;\n+import uk.gov.hmcts.ccd.data.SecurityUtils;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.time.Clock;\n+import java.time.LocalDateTime;\n+\n+import static java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;\n+\n+@Service\n+public class AuditService {\n+\n+    private final Clock clock;\n+    private final SecurityUtils securityUtils;\n+    private final UserRepository userRepository;\n+    private final AuditRepository auditRepository;\n+\n+    public AuditService(@Qualifier(\"utcClock\") final Clock clock,\n+                        @Qualifier(CachedUserRepository.QUALIFIER) final UserRepository userRepository,\n+                        @Lazy final SecurityUtils securityUtils, final AuditRepository auditRepository) {\n+        this.clock = clock;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0NTE1Mg==", "bodyText": "Can't work without that - it's not optional.\nSecurityUtils referring AuthTokenGenerator which is loading lazily at the moment.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412745152", "createdAt": "2020-04-22T07:38:22Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditService.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.auditlog.aop.AuditContext;\n+import uk.gov.hmcts.ccd.data.SecurityUtils;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.time.Clock;\n+import java.time.LocalDateTime;\n+\n+import static java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;\n+\n+@Service\n+public class AuditService {\n+\n+    private final Clock clock;\n+    private final SecurityUtils securityUtils;\n+    private final UserRepository userRepository;\n+    private final AuditRepository auditRepository;\n+\n+    public AuditService(@Qualifier(\"utcClock\") final Clock clock,\n+                        @Qualifier(CachedUserRepository.QUALIFIER) final UserRepository userRepository,\n+                        @Lazy final SecurityUtils securityUtils, final AuditRepository auditRepository) {\n+        this.clock = clock;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA3NTgxNQ=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk4MjEzNg==", "bodyText": "Fair enough . It means that SecurityUtils is liked to Lazy initialization due to it is using AuthTokenGenerator with lazy loading.  Perfect : \ud83d\udc4c", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412982136", "createdAt": "2020-04-22T13:28:19Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditService.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.auditlog.aop.AuditContext;\n+import uk.gov.hmcts.ccd.data.SecurityUtils;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.time.Clock;\n+import java.time.LocalDateTime;\n+\n+import static java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;\n+\n+@Service\n+public class AuditService {\n+\n+    private final Clock clock;\n+    private final SecurityUtils securityUtils;\n+    private final UserRepository userRepository;\n+    private final AuditRepository auditRepository;\n+\n+    public AuditService(@Qualifier(\"utcClock\") final Clock clock,\n+                        @Qualifier(CachedUserRepository.QUALIFIER) final UserRepository userRepository,\n+                        @Lazy final SecurityUtils securityUtils, final AuditRepository auditRepository) {\n+        this.clock = clock;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA3NTgxNQ=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDM3MDMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMDo0NDozOVrOGI_Hjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzozOTowNVrOGJn_hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA3NTkxOA==", "bodyText": "I think that there is a constant ion the model for \"request-id\" value .  If not maybe we can create one . Only if there is a shared common area for test modules and business modules.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412075918", "createdAt": "2020-04-21T10:44:39Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditService.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.auditlog.aop.AuditContext;\n+import uk.gov.hmcts.ccd.data.SecurityUtils;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.time.Clock;\n+import java.time.LocalDateTime;\n+\n+import static java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;\n+\n+@Service\n+public class AuditService {\n+\n+    private final Clock clock;\n+    private final SecurityUtils securityUtils;\n+    private final UserRepository userRepository;\n+    private final AuditRepository auditRepository;\n+\n+    public AuditService(@Qualifier(\"utcClock\") final Clock clock,\n+                        @Qualifier(CachedUserRepository.QUALIFIER) final UserRepository userRepository,\n+                        @Lazy final SecurityUtils securityUtils, final AuditRepository auditRepository) {\n+        this.clock = clock;\n+        this.userRepository = userRepository;\n+        this.securityUtils = securityUtils;\n+        this.auditRepository = auditRepository;\n+    }\n+\n+    public void audit(HttpServletRequest request, int httpResponseStatus, AuditContext auditContext) {\n+        AuditEntry entry = new AuditEntry();\n+\n+        String formattedDate = LocalDateTime.now(clock).format(ISO_LOCAL_DATE_TIME);\n+\n+        entry.setDateTime(formattedDate);\n+        entry.setHttpStatus(httpResponseStatus);\n+        entry.setHttpMethod(request.getMethod());\n+        entry.setPath(request.getRequestURI());\n+        entry.setIdamId(userRepository.getUser().getEmail());\n+        entry.setInvokingService(securityUtils.getServiceName());\n+\n+        if (auditContext != null) {\n+            entry.setOperationType(auditContext.getOperationType().getLabel());\n+            entry.setJurisdiction(auditContext.getJurisdiction());\n+            entry.setCaseId(auditContext.getCaseId());\n+            entry.setCaseType(auditContext.getCaseType());\n+            entry.setEventSelected(auditContext.getEventName());\n+            entry.setTargetIdamId(auditContext.getTargetIdamId());\n+            entry.setTargetCaseRoles(auditContext.getTargetCaseRoles());\n+        }\n+\n+        entry.setRequestId(request.getHeader(\"request-id\"));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0NTYwNw==", "bodyText": "moved this to interceptor and extracted to a constant now.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412745607", "createdAt": "2020-04-22T07:39:05Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditService.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.auditlog.aop.AuditContext;\n+import uk.gov.hmcts.ccd.data.SecurityUtils;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.time.Clock;\n+import java.time.LocalDateTime;\n+\n+import static java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;\n+\n+@Service\n+public class AuditService {\n+\n+    private final Clock clock;\n+    private final SecurityUtils securityUtils;\n+    private final UserRepository userRepository;\n+    private final AuditRepository auditRepository;\n+\n+    public AuditService(@Qualifier(\"utcClock\") final Clock clock,\n+                        @Qualifier(CachedUserRepository.QUALIFIER) final UserRepository userRepository,\n+                        @Lazy final SecurityUtils securityUtils, final AuditRepository auditRepository) {\n+        this.clock = clock;\n+        this.userRepository = userRepository;\n+        this.securityUtils = securityUtils;\n+        this.auditRepository = auditRepository;\n+    }\n+\n+    public void audit(HttpServletRequest request, int httpResponseStatus, AuditContext auditContext) {\n+        AuditEntry entry = new AuditEntry();\n+\n+        String formattedDate = LocalDateTime.now(clock).format(ISO_LOCAL_DATE_TIME);\n+\n+        entry.setDateTime(formattedDate);\n+        entry.setHttpStatus(httpResponseStatus);\n+        entry.setHttpMethod(request.getMethod());\n+        entry.setPath(request.getRequestURI());\n+        entry.setIdamId(userRepository.getUser().getEmail());\n+        entry.setInvokingService(securityUtils.getServiceName());\n+\n+        if (auditContext != null) {\n+            entry.setOperationType(auditContext.getOperationType().getLabel());\n+            entry.setJurisdiction(auditContext.getJurisdiction());\n+            entry.setCaseId(auditContext.getCaseId());\n+            entry.setCaseType(auditContext.getCaseType());\n+            entry.setEventSelected(auditContext.getEventName());\n+            entry.setTargetIdamId(auditContext.getTargetIdamId());\n+            entry.setTargetCaseRoles(auditContext.getTargetCaseRoles());\n+        }\n+\n+        entry.setRequestId(request.getHeader(\"request-id\"));\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA3NTkxOA=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDM3MTAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/aop/AuditAspect.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMDo0NDo1MFrOGI_IBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzo0MDozNFrOGJoDPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA3NjAzNg==", "bodyText": "there is a logger \"LOG\" it would be good if we log the trace and a message.  We know where it is coming from", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412076036", "createdAt": "2020-04-21T10:44:50Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/aop/AuditAspect.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package uk.gov.hmcts.ccd.auditlog.aop;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.aspectj.lang.JoinPoint;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.expression.AnnotatedElementKey;\n+import org.springframework.expression.EvaluationContext;\n+import org.springframework.expression.spel.SpelEvaluationException;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.auditlog.LogAudit;\n+\n+import java.lang.reflect.Method;\n+import java.util.List;\n+\n+@Aspect\n+@Component\n+public class AuditAspect {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AuditAspect.class);\n+\n+    private static final String RESULT_VARIABLE = \"result\";\n+\n+    private ExpressionEvaluator evaluator = new ExpressionEvaluator();\n+\n+    @Around(\"@annotation(logAudit)\")\n+    public Object audit(ProceedingJoinPoint joinPoint, LogAudit logAudit) throws Throwable {\n+        Object result = null;\n+        try {\n+            result = joinPoint.proceed();\n+            return result;\n+        } catch (Exception ex) {\n+            throw ex;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0NjU1OQ==", "bodyText": "Controller advice logs the same. Actually no need to catch and throw here.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412746559", "createdAt": "2020-04-22T07:40:34Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/aop/AuditAspect.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package uk.gov.hmcts.ccd.auditlog.aop;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.aspectj.lang.JoinPoint;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.expression.AnnotatedElementKey;\n+import org.springframework.expression.EvaluationContext;\n+import org.springframework.expression.spel.SpelEvaluationException;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.auditlog.LogAudit;\n+\n+import java.lang.reflect.Method;\n+import java.util.List;\n+\n+@Aspect\n+@Component\n+public class AuditAspect {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AuditAspect.class);\n+\n+    private static final String RESULT_VARIABLE = \"result\";\n+\n+    private ExpressionEvaluator evaluator = new ExpressionEvaluator();\n+\n+    @Around(\"@annotation(logAudit)\")\n+    public Object audit(ProceedingJoinPoint joinPoint, LogAudit logAudit) throws Throwable {\n+        Object result = null;\n+        try {\n+            result = joinPoint.proceed();\n+            return result;\n+        } catch (Exception ex) {\n+            throw ex;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA3NjAzNg=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDM4MDg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/aop/ExpressionEvaluator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMDo0NzowOVrOGI_NhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDoxMzoyNVrOGJ4tcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA3NzQ0NQ==", "bodyText": "public Object[] getArgs() {. }.  It is not used anywhere and it is not overwriting .", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412077445", "createdAt": "2020-04-21T10:47:09Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/aop/ExpressionEvaluator.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package uk.gov.hmcts.ccd.auditlog.aop;\n+\n+import org.springframework.aop.support.AopUtils;\n+import org.springframework.context.expression.AnnotatedElementKey;\n+import org.springframework.context.expression.CachedExpressionEvaluator;\n+import org.springframework.context.expression.MethodBasedEvaluationContext;\n+import org.springframework.core.DefaultParameterNameDiscoverer;\n+import org.springframework.core.ParameterNameDiscoverer;\n+import org.springframework.expression.EvaluationContext;\n+import org.springframework.expression.Expression;\n+\n+import java.lang.reflect.Method;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ *  Utility class handling the SpEL expression parsing\n+ *\n+ */\n+public class ExpressionEvaluator extends CachedExpressionEvaluator {\n+\n+    // shared param discoverer since it caches data internally\n+    private final ParameterNameDiscoverer paramNameDiscoverer = new DefaultParameterNameDiscoverer();\n+\n+    private final Map<ExpressionKey, Expression> conditionCache = new ConcurrentHashMap<>(64);\n+\n+    private final Map<AnnotatedElementKey, Method> targetMethodCache = new ConcurrentHashMap<>(64);\n+\n+    public EvaluationContext createEvaluationContext(Object object, Class<?> targetClass, Method method, Object[] args) {\n+        Method targetMethod = getTargetMethod(targetClass, method);\n+        ExpressionRootObject root = new ExpressionRootObject(object, args);\n+        return new MethodBasedEvaluationContext(root, targetMethod, args, this.paramNameDiscoverer);\n+    }\n+\n+    public <T> T condition(String conditionExpression, AnnotatedElementKey elementKey, EvaluationContext evalContext, Class<T> clazz) {\n+        return getExpression(this.conditionCache, elementKey, conditionExpression).getValue(evalContext, clazz);\n+    }\n+\n+    private Method getTargetMethod(Class<?> targetClass, Method method) {\n+        AnnotatedElementKey methodKey = new AnnotatedElementKey(method, targetClass);\n+        Method targetMethod = this.targetMethodCache.get(methodKey);\n+        if (targetMethod == null) {\n+            targetMethod = AopUtils.getMostSpecificMethod(method, targetClass);\n+            this.targetMethodCache.put(methodKey, targetMethod);\n+        }\n+        return targetMethod;\n+    }\n+\n+    private static class ExpressionRootObject {\n+        private final Object object;\n+        private final Object[] args;\n+\n+        public ExpressionRootObject(Object object, Object[] args) {\n+            this.object = object;\n+            this.args = args;\n+        }\n+\n+        public Object getObject() {\n+            return object;\n+        }\n+\n+        public Object[] getArgs() {\n+            return args;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0ODExMA==", "bodyText": "That class similar to VO/DTO.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412748110", "createdAt": "2020-04-22T07:42:54Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/aop/ExpressionEvaluator.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package uk.gov.hmcts.ccd.auditlog.aop;\n+\n+import org.springframework.aop.support.AopUtils;\n+import org.springframework.context.expression.AnnotatedElementKey;\n+import org.springframework.context.expression.CachedExpressionEvaluator;\n+import org.springframework.context.expression.MethodBasedEvaluationContext;\n+import org.springframework.core.DefaultParameterNameDiscoverer;\n+import org.springframework.core.ParameterNameDiscoverer;\n+import org.springframework.expression.EvaluationContext;\n+import org.springframework.expression.Expression;\n+\n+import java.lang.reflect.Method;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ *  Utility class handling the SpEL expression parsing\n+ *\n+ */\n+public class ExpressionEvaluator extends CachedExpressionEvaluator {\n+\n+    // shared param discoverer since it caches data internally\n+    private final ParameterNameDiscoverer paramNameDiscoverer = new DefaultParameterNameDiscoverer();\n+\n+    private final Map<ExpressionKey, Expression> conditionCache = new ConcurrentHashMap<>(64);\n+\n+    private final Map<AnnotatedElementKey, Method> targetMethodCache = new ConcurrentHashMap<>(64);\n+\n+    public EvaluationContext createEvaluationContext(Object object, Class<?> targetClass, Method method, Object[] args) {\n+        Method targetMethod = getTargetMethod(targetClass, method);\n+        ExpressionRootObject root = new ExpressionRootObject(object, args);\n+        return new MethodBasedEvaluationContext(root, targetMethod, args, this.paramNameDiscoverer);\n+    }\n+\n+    public <T> T condition(String conditionExpression, AnnotatedElementKey elementKey, EvaluationContext evalContext, Class<T> clazz) {\n+        return getExpression(this.conditionCache, elementKey, conditionExpression).getValue(evalContext, clazz);\n+    }\n+\n+    private Method getTargetMethod(Class<?> targetClass, Method method) {\n+        AnnotatedElementKey methodKey = new AnnotatedElementKey(method, targetClass);\n+        Method targetMethod = this.targetMethodCache.get(methodKey);\n+        if (targetMethod == null) {\n+            targetMethod = AopUtils.getMostSpecificMethod(method, targetClass);\n+            this.targetMethodCache.put(methodKey, targetMethod);\n+        }\n+        return targetMethod;\n+    }\n+\n+    private static class ExpressionRootObject {\n+        private final Object object;\n+        private final Object[] args;\n+\n+        public ExpressionRootObject(Object object, Object[] args) {\n+            this.object = object;\n+            this.args = args;\n+        }\n+\n+        public Object getObject() {\n+            return object;\n+        }\n+\n+        public Object[] getArgs() {\n+            return args;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA3NzQ0NQ=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAxOTUwNA==", "bodyText": "It is ok . there has to be a getter.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r413019504", "createdAt": "2020-04-22T14:13:25Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/aop/ExpressionEvaluator.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package uk.gov.hmcts.ccd.auditlog.aop;\n+\n+import org.springframework.aop.support.AopUtils;\n+import org.springframework.context.expression.AnnotatedElementKey;\n+import org.springframework.context.expression.CachedExpressionEvaluator;\n+import org.springframework.context.expression.MethodBasedEvaluationContext;\n+import org.springframework.core.DefaultParameterNameDiscoverer;\n+import org.springframework.core.ParameterNameDiscoverer;\n+import org.springframework.expression.EvaluationContext;\n+import org.springframework.expression.Expression;\n+\n+import java.lang.reflect.Method;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ *  Utility class handling the SpEL expression parsing\n+ *\n+ */\n+public class ExpressionEvaluator extends CachedExpressionEvaluator {\n+\n+    // shared param discoverer since it caches data internally\n+    private final ParameterNameDiscoverer paramNameDiscoverer = new DefaultParameterNameDiscoverer();\n+\n+    private final Map<ExpressionKey, Expression> conditionCache = new ConcurrentHashMap<>(64);\n+\n+    private final Map<AnnotatedElementKey, Method> targetMethodCache = new ConcurrentHashMap<>(64);\n+\n+    public EvaluationContext createEvaluationContext(Object object, Class<?> targetClass, Method method, Object[] args) {\n+        Method targetMethod = getTargetMethod(targetClass, method);\n+        ExpressionRootObject root = new ExpressionRootObject(object, args);\n+        return new MethodBasedEvaluationContext(root, targetMethod, args, this.paramNameDiscoverer);\n+    }\n+\n+    public <T> T condition(String conditionExpression, AnnotatedElementKey elementKey, EvaluationContext evalContext, Class<T> clazz) {\n+        return getExpression(this.conditionCache, elementKey, conditionExpression).getValue(evalContext, clazz);\n+    }\n+\n+    private Method getTargetMethod(Class<?> targetClass, Method method) {\n+        AnnotatedElementKey methodKey = new AnnotatedElementKey(method, targetClass);\n+        Method targetMethod = this.targetMethodCache.get(methodKey);\n+        if (targetMethod == null) {\n+            targetMethod = AopUtils.getMostSpecificMethod(method, targetClass);\n+            this.targetMethodCache.put(methodKey, targetMethod);\n+        }\n+        return targetMethod;\n+    }\n+\n+    private static class ExpressionRootObject {\n+        private final Object object;\n+        private final Object[] args;\n+\n+        public ExpressionRootObject(Object object, Object[] args) {\n+            this.object = object;\n+            this.args = args;\n+        }\n+\n+        public Object getObject() {\n+            return object;\n+        }\n+\n+        public Object[] getArgs() {\n+            return args;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA3NzQ0NQ=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDM4OTIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/v2/external/controller/CaseController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMDo0OTowNFrOGI_SIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMDo0OTowNFrOGI_SIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA3ODYyNw==", "bodyText": "if we can avoid using. .*; checkstyle will complaint.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412078627", "createdAt": "2020-04-21T10:49:04Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/v2/external/controller/CaseController.java", "diffHunk": "@@ -31,7 +24,11 @@\n import uk.gov.hmcts.ccd.v2.external.resource.CaseEventsResource;\n import uk.gov.hmcts.ccd.v2.external.resource.CaseResource;\n \n+import javax.transaction.Transactional;\n+import java.util.List;\n+\n import static org.springframework.http.ResponseEntity.status;\n+import static uk.gov.hmcts.ccd.auditlog.OperationType.*;\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDQ0ODE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/OperationType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMTowMzozMlrOGI_0lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzo0ODoxNFrOGJoXHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA4NzQ0NA==", "bodyText": "private constructor for enum is redundant.  I think intellij can mark that", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412087444", "createdAt": "2020-04-21T11:03:32Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/OperationType.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+public enum OperationType {\n+    CREATE_CASE(\"Create case\"),\n+    UPDATE_CASE(\"Update case\"),\n+    VIEW_CASE(\"View case\"),\n+    SEARCH_CASE(\"Search case\"),\n+    UPDATE_CASE_ACCESS(\"Update case access\");\n+\n+    private final String label;\n+\n+    private OperationType(String label) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc1MTY0NA==", "bodyText": "removed", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412751644", "createdAt": "2020-04-22T07:48:14Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/OperationType.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+public enum OperationType {\n+    CREATE_CASE(\"Create case\"),\n+    UPDATE_CASE(\"Update case\"),\n+    VIEW_CASE(\"View case\"),\n+    SEARCH_CASE(\"Search case\"),\n+    UPDATE_CASE_ACCESS(\"Update case access\");\n+\n+    private final String label;\n+\n+    private OperationType(String label) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA4NzQ0NA=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDc5NDg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditRepository.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjoyNzoyM1rOGJDASQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjoyMjoxN1rOGKmccA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzOTU5Mw==", "bodyText": "better to have an AuditRepository interface with at the moment one implementation LoggerAuditRepository.\nThis will allow in the future to easily change the destination of the log files if needed. For example they might want to ask to store on DB rather than on std out", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412139593", "createdAt": "2020-04-21T12:27:23Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditRepository.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class AuditRepository {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc1MTQ2NQ==", "bodyText": "at any point of time we've one implementation only right? Also this is not a library class. https://martinfowler.com/bliki/InterfaceImplementationPair.html", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412751465", "createdAt": "2020-04-22T07:47:59Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditRepository.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class AuditRepository {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzOTU5Mw=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzcxMjU4Mg==", "bodyText": "The benefit of introducing an interface is not so that we can support more than one destination at a single time. That is not what I meant. The benefit is that it make the code more extensible by allowing us to change the destination if we need and limiting the amount of changes we need to do. We just inject a different implementation class without having to change the client classes using the AuditRepository. Because the client classes use an interface.\nIf you look at any implementation of the repository design pattern on internet it's always defined as an interface, also when there is only 1 implementation class:\nhttps://thoughts-on-java.org/implementing-the-repository-pattern-with-jpa-and-hibernate/\nhttps://medium.com/@krzychukosobudzki/repository-design-pattern-bc490b256006\nAnother point is that without an interface you can't use dependency injection on that component, which is an established good practice.\nThis is a specific application of the more generic Object Oriented Design Principle to code to an interface: https://medium.com/javarevisited/oop-good-practices-coding-to-the-interface-baea84fd60d3\nFurthermore all the Repository classes in DataStore are interfaces, which for example allowed us to easily introduce caching by replacing the original implementation with one that introduced caching by limiting the amount of code changes required", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r413712582", "createdAt": "2020-04-23T10:48:14Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditRepository.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class AuditRepository {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzOTU5Mw=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc2ODgxNg==", "bodyText": "haha.. we can't generalise every single principle to each scenario. This particular one has just one line of code (log statement), surely there won't be any caching required, dependency injection still possible.  I've seen many well known libraries including Spring has single implementation class without interface.\nPersonally I disagree in this particular scenario but pushed as requested.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r413768816", "createdAt": "2020-04-23T12:22:17Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditRepository.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class AuditRepository {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzOTU5Mw=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTAzMDc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditEntry.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzoxNzoxMFrOGJFMMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNToxNjowOFrOGJLVeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE3NTQwOA==", "bodyText": "I'm thinking that maybe for consistency we should have a field id for the datetime, like datetime:\nThis will also simplify the processing of the records.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412175408", "createdAt": "2020-04-21T13:17:10Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditEntry.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+import static org.apache.commons.lang3.builder.ToStringStyle.JSON_STYLE;\n+\n+public class AuditEntry {\n+\n+    private static final String TAG = \"CLA-CCD\";\n+\n+    private String dateTime;\n+    private int httpStatus;\n+    private String httpMethod;\n+    private String path;\n+    private String idamId;\n+    private String caseId;\n+    private String caseType;\n+    private String jurisdiction;\n+    private String eventSelected;\n+    private String invokingService;\n+    private String operationType;\n+    private String requestId;\n+    private String targetIdamId;\n+    private List<String> targetCaseRoles;\n+\n+    public void setDateTime(String time) {\n+        this.dateTime = time;\n+    }\n+\n+    public String getDateTime() {\n+        return dateTime;\n+    }\n+\n+    public int getHttpStatus() {\n+        return httpStatus;\n+    }\n+\n+    public void setHttpStatus(int httpStatus) {\n+        this.httpStatus = httpStatus;\n+    }\n+\n+    public String getHttpMethod() {\n+        return httpMethod;\n+    }\n+\n+    public void setHttpMethod(String httpMethod) {\n+        this.httpMethod = httpMethod;\n+    }\n+\n+    public String getPath() {\n+        return path;\n+    }\n+\n+    public void setPath(String path) {\n+        this.path = path;\n+    }\n+\n+    public String getOperationType() {\n+        return operationType;\n+    }\n+\n+    public void setOperationType(String operationType) {\n+        this.operationType = operationType;\n+    }\n+\n+    public String getIdamId() {\n+        return idamId;\n+    }\n+\n+    public void setIdamId(String idamId) {\n+        this.idamId = idamId;\n+    }\n+\n+    public String getInvokingService() {\n+        return invokingService;\n+    }\n+\n+    public void setInvokingService(String invokingService) {\n+        this.invokingService = invokingService;\n+    }\n+\n+    public static String getTAG() {\n+        return TAG;\n+    }\n+\n+    public String getCaseId() {\n+        return caseId;\n+    }\n+\n+    public void setCaseId(String caseId) {\n+        this.caseId = caseId;\n+    }\n+\n+    public String getJurisdiction() {\n+        return jurisdiction;\n+    }\n+\n+    public void setJurisdiction(String jurisdiction) {\n+        this.jurisdiction = jurisdiction;\n+    }\n+\n+    public String getCaseType() {\n+        return caseType;\n+    }\n+\n+    public void setCaseType(String caseType) {\n+        this.caseType = caseType;\n+    }\n+\n+    public String getEventSelected() {\n+        return eventSelected;\n+    }\n+\n+    public void setEventSelected(String eventSelected) {\n+        this.eventSelected = eventSelected;\n+    }\n+\n+    public String getRequestId() {\n+        return requestId;\n+    }\n+\n+    public void setRequestId(String requestId) {\n+        this.requestId = requestId;\n+    }\n+\n+    public String getTargetIdamId() {\n+        return targetIdamId;\n+    }\n+\n+    public void setTargetIdamId(String targetIdamId) {\n+        this.targetIdamId = targetIdamId;\n+    }\n+\n+    public List<String> getTargetCaseRoles() {\n+        return targetCaseRoles;\n+    }\n+\n+    public void setTargetCaseRoles(List<String> targetCaseRoles) {\n+        this.targetCaseRoles = targetCaseRoles;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return TAG + \" \" + dateTime + \" operationType:\" + operationType +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI3NjA5MA==", "bodyText": "need to reflect in the jira/confluence first.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412276090", "createdAt": "2020-04-21T15:16:08Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditEntry.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+import static org.apache.commons.lang3.builder.ToStringStyle.JSON_STYLE;\n+\n+public class AuditEntry {\n+\n+    private static final String TAG = \"CLA-CCD\";\n+\n+    private String dateTime;\n+    private int httpStatus;\n+    private String httpMethod;\n+    private String path;\n+    private String idamId;\n+    private String caseId;\n+    private String caseType;\n+    private String jurisdiction;\n+    private String eventSelected;\n+    private String invokingService;\n+    private String operationType;\n+    private String requestId;\n+    private String targetIdamId;\n+    private List<String> targetCaseRoles;\n+\n+    public void setDateTime(String time) {\n+        this.dateTime = time;\n+    }\n+\n+    public String getDateTime() {\n+        return dateTime;\n+    }\n+\n+    public int getHttpStatus() {\n+        return httpStatus;\n+    }\n+\n+    public void setHttpStatus(int httpStatus) {\n+        this.httpStatus = httpStatus;\n+    }\n+\n+    public String getHttpMethod() {\n+        return httpMethod;\n+    }\n+\n+    public void setHttpMethod(String httpMethod) {\n+        this.httpMethod = httpMethod;\n+    }\n+\n+    public String getPath() {\n+        return path;\n+    }\n+\n+    public void setPath(String path) {\n+        this.path = path;\n+    }\n+\n+    public String getOperationType() {\n+        return operationType;\n+    }\n+\n+    public void setOperationType(String operationType) {\n+        this.operationType = operationType;\n+    }\n+\n+    public String getIdamId() {\n+        return idamId;\n+    }\n+\n+    public void setIdamId(String idamId) {\n+        this.idamId = idamId;\n+    }\n+\n+    public String getInvokingService() {\n+        return invokingService;\n+    }\n+\n+    public void setInvokingService(String invokingService) {\n+        this.invokingService = invokingService;\n+    }\n+\n+    public static String getTAG() {\n+        return TAG;\n+    }\n+\n+    public String getCaseId() {\n+        return caseId;\n+    }\n+\n+    public void setCaseId(String caseId) {\n+        this.caseId = caseId;\n+    }\n+\n+    public String getJurisdiction() {\n+        return jurisdiction;\n+    }\n+\n+    public void setJurisdiction(String jurisdiction) {\n+        this.jurisdiction = jurisdiction;\n+    }\n+\n+    public String getCaseType() {\n+        return caseType;\n+    }\n+\n+    public void setCaseType(String caseType) {\n+        this.caseType = caseType;\n+    }\n+\n+    public String getEventSelected() {\n+        return eventSelected;\n+    }\n+\n+    public void setEventSelected(String eventSelected) {\n+        this.eventSelected = eventSelected;\n+    }\n+\n+    public String getRequestId() {\n+        return requestId;\n+    }\n+\n+    public void setRequestId(String requestId) {\n+        this.requestId = requestId;\n+    }\n+\n+    public String getTargetIdamId() {\n+        return targetIdamId;\n+    }\n+\n+    public void setTargetIdamId(String targetIdamId) {\n+        this.targetIdamId = targetIdamId;\n+    }\n+\n+    public List<String> getTargetCaseRoles() {\n+        return targetCaseRoles;\n+    }\n+\n+    public void setTargetCaseRoles(List<String> targetCaseRoles) {\n+        this.targetCaseRoles = targetCaseRoles;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return TAG + \" \" + dateTime + \" operationType:\" + operationType +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE3NTQwOA=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTA0MDA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditInterceptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzoxOTowNlrOGJFR9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDo0Mzo1MVrOGJJnqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE3Njg4Nw==", "bodyText": "// FIXME : suppress 404 and 403/401 requests. is this going to be done in this implementation ?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412176887", "createdAt": "2020-04-21T13:19:06Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditInterceptor.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+import org.springframework.lang.Nullable;\n+import org.springframework.web.method.HandlerMethod;\n+import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;\n+import uk.gov.hmcts.ccd.auditlog.aop.AuditContext;\n+import uk.gov.hmcts.ccd.auditlog.aop.AuditContextHolder;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+public class AuditInterceptor extends HandlerInterceptorAdapter {\n+\n+    private final AuditService auditService;\n+\n+    public AuditInterceptor(AuditService auditService) {\n+        this.auditService = auditService;\n+    }\n+\n+    @Override\n+    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler,\n+                           @Nullable Exception ex) {\n+        if (handler instanceof HandlerMethod && ((HandlerMethod) handler).hasMethodAnnotation(LogAudit.class)) {\n+            AuditContext auditContext = AuditContextHolder.getAuditContext();\n+            // FIXME : suppress 404 and 403/401 requests\n+            auditService.audit(request, response.getStatus(), auditContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI0Nzk3OA==", "bodyText": "done. removed", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412247978", "createdAt": "2020-04-21T14:43:51Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditInterceptor.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+import org.springframework.lang.Nullable;\n+import org.springframework.web.method.HandlerMethod;\n+import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;\n+import uk.gov.hmcts.ccd.auditlog.aop.AuditContext;\n+import uk.gov.hmcts.ccd.auditlog.aop.AuditContextHolder;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+public class AuditInterceptor extends HandlerInterceptorAdapter {\n+\n+    private final AuditService auditService;\n+\n+    public AuditInterceptor(AuditService auditService) {\n+        this.auditService = auditService;\n+    }\n+\n+    @Override\n+    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler,\n+                           @Nullable Exception ex) {\n+        if (handler instanceof HandlerMethod && ((HandlerMethod) handler).hasMethodAnnotation(LogAudit.class)) {\n+            AuditContext auditContext = AuditContextHolder.getAuditContext();\n+            // FIXME : suppress 404 and 403/401 requests\n+            auditService.audit(request, response.getStatus(), auditContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE3Njg4Nw=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTA0NTE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditEntry.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzoyMDoxMFrOGJFVLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzo0OToxMFrOGJoZhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE3NzcwOQ==", "bodyText": "I would move this logic into a separate AuditEntryFormatter class for better separation of concerns. We could also more easily change the formatting", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412177709", "createdAt": "2020-04-21T13:20:10Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditEntry.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+import static org.apache.commons.lang3.builder.ToStringStyle.JSON_STYLE;\n+\n+public class AuditEntry {\n+\n+    private static final String TAG = \"CLA-CCD\";\n+\n+    private String dateTime;\n+    private int httpStatus;\n+    private String httpMethod;\n+    private String path;\n+    private String idamId;\n+    private String caseId;\n+    private String caseType;\n+    private String jurisdiction;\n+    private String eventSelected;\n+    private String invokingService;\n+    private String operationType;\n+    private String requestId;\n+    private String targetIdamId;\n+    private List<String> targetCaseRoles;\n+\n+    public void setDateTime(String time) {\n+        this.dateTime = time;\n+    }\n+\n+    public String getDateTime() {\n+        return dateTime;\n+    }\n+\n+    public int getHttpStatus() {\n+        return httpStatus;\n+    }\n+\n+    public void setHttpStatus(int httpStatus) {\n+        this.httpStatus = httpStatus;\n+    }\n+\n+    public String getHttpMethod() {\n+        return httpMethod;\n+    }\n+\n+    public void setHttpMethod(String httpMethod) {\n+        this.httpMethod = httpMethod;\n+    }\n+\n+    public String getPath() {\n+        return path;\n+    }\n+\n+    public void setPath(String path) {\n+        this.path = path;\n+    }\n+\n+    public String getOperationType() {\n+        return operationType;\n+    }\n+\n+    public void setOperationType(String operationType) {\n+        this.operationType = operationType;\n+    }\n+\n+    public String getIdamId() {\n+        return idamId;\n+    }\n+\n+    public void setIdamId(String idamId) {\n+        this.idamId = idamId;\n+    }\n+\n+    public String getInvokingService() {\n+        return invokingService;\n+    }\n+\n+    public void setInvokingService(String invokingService) {\n+        this.invokingService = invokingService;\n+    }\n+\n+    public static String getTAG() {\n+        return TAG;\n+    }\n+\n+    public String getCaseId() {\n+        return caseId;\n+    }\n+\n+    public void setCaseId(String caseId) {\n+        this.caseId = caseId;\n+    }\n+\n+    public String getJurisdiction() {\n+        return jurisdiction;\n+    }\n+\n+    public void setJurisdiction(String jurisdiction) {\n+        this.jurisdiction = jurisdiction;\n+    }\n+\n+    public String getCaseType() {\n+        return caseType;\n+    }\n+\n+    public void setCaseType(String caseType) {\n+        this.caseType = caseType;\n+    }\n+\n+    public String getEventSelected() {\n+        return eventSelected;\n+    }\n+\n+    public void setEventSelected(String eventSelected) {\n+        this.eventSelected = eventSelected;\n+    }\n+\n+    public String getRequestId() {\n+        return requestId;\n+    }\n+\n+    public void setRequestId(String requestId) {\n+        this.requestId = requestId;\n+    }\n+\n+    public String getTargetIdamId() {\n+        return targetIdamId;\n+    }\n+\n+    public void setTargetIdamId(String targetIdamId) {\n+        this.targetIdamId = targetIdamId;\n+    }\n+\n+    public List<String> getTargetCaseRoles() {\n+        return targetCaseRoles;\n+    }\n+\n+    public void setTargetCaseRoles(List<String> targetCaseRoles) {\n+        this.targetCaseRoles = targetCaseRoles;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return TAG + \" \" + dateTime + \" operationType:\" + operationType +\n+            (isNotBlank(caseId) ? \", caseId:\" + caseId : \"\") +\n+            (isNotBlank(idamId) ? \", idamId:\" + idamId : \"\") +\n+            (isNotBlank(invokingService) ? \", invokingService:\" + invokingService : \"\") +\n+            (isNotBlank(path) ? \", endpointCalled:\" + httpMethod + \" \" + path : \"\") +\n+            \", operationOutcome:\" + httpStatus +\n+            (isNotBlank(caseType) ? \", caseType:\" + caseType : \"\") +\n+            (isNotBlank(jurisdiction) ? \", jurisdiction:\" + jurisdiction : \"\") +\n+            (isNotBlank(eventSelected) ? \", eventSelected:\" + eventSelected : \"\") +\n+           (isNotBlank(targetIdamId) ? \", idamIdOfTarget:\" + targetIdamId : \"\") +\n+//            (isNotBlank(listOfCaseTypes) ? \", listOfCaseTypes:\" + listOfCaseTypes : \"\") +\n+            (targetCaseRoles != null && !targetCaseRoles.isEmpty() ? \", targetCaseRoles:\" +\n+                targetCaseRoles.stream().map(String::toString).collect(Collectors.joining(\",\")) : \"\") +\n+            (isNotBlank(requestId) ? \", X-Request-ID:\" + requestId : \"\") +\n+            '}';\n+    }\n+\n+    public String formattedAuditData() {\n+        return  ReflectionToStringBuilder.toString(this, JSON_STYLE, false, false,\n+            true, null).toString();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc1MjI2MA==", "bodyText": "done", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412752260", "createdAt": "2020-04-22T07:49:10Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditEntry.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+import static org.apache.commons.lang3.builder.ToStringStyle.JSON_STYLE;\n+\n+public class AuditEntry {\n+\n+    private static final String TAG = \"CLA-CCD\";\n+\n+    private String dateTime;\n+    private int httpStatus;\n+    private String httpMethod;\n+    private String path;\n+    private String idamId;\n+    private String caseId;\n+    private String caseType;\n+    private String jurisdiction;\n+    private String eventSelected;\n+    private String invokingService;\n+    private String operationType;\n+    private String requestId;\n+    private String targetIdamId;\n+    private List<String> targetCaseRoles;\n+\n+    public void setDateTime(String time) {\n+        this.dateTime = time;\n+    }\n+\n+    public String getDateTime() {\n+        return dateTime;\n+    }\n+\n+    public int getHttpStatus() {\n+        return httpStatus;\n+    }\n+\n+    public void setHttpStatus(int httpStatus) {\n+        this.httpStatus = httpStatus;\n+    }\n+\n+    public String getHttpMethod() {\n+        return httpMethod;\n+    }\n+\n+    public void setHttpMethod(String httpMethod) {\n+        this.httpMethod = httpMethod;\n+    }\n+\n+    public String getPath() {\n+        return path;\n+    }\n+\n+    public void setPath(String path) {\n+        this.path = path;\n+    }\n+\n+    public String getOperationType() {\n+        return operationType;\n+    }\n+\n+    public void setOperationType(String operationType) {\n+        this.operationType = operationType;\n+    }\n+\n+    public String getIdamId() {\n+        return idamId;\n+    }\n+\n+    public void setIdamId(String idamId) {\n+        this.idamId = idamId;\n+    }\n+\n+    public String getInvokingService() {\n+        return invokingService;\n+    }\n+\n+    public void setInvokingService(String invokingService) {\n+        this.invokingService = invokingService;\n+    }\n+\n+    public static String getTAG() {\n+        return TAG;\n+    }\n+\n+    public String getCaseId() {\n+        return caseId;\n+    }\n+\n+    public void setCaseId(String caseId) {\n+        this.caseId = caseId;\n+    }\n+\n+    public String getJurisdiction() {\n+        return jurisdiction;\n+    }\n+\n+    public void setJurisdiction(String jurisdiction) {\n+        this.jurisdiction = jurisdiction;\n+    }\n+\n+    public String getCaseType() {\n+        return caseType;\n+    }\n+\n+    public void setCaseType(String caseType) {\n+        this.caseType = caseType;\n+    }\n+\n+    public String getEventSelected() {\n+        return eventSelected;\n+    }\n+\n+    public void setEventSelected(String eventSelected) {\n+        this.eventSelected = eventSelected;\n+    }\n+\n+    public String getRequestId() {\n+        return requestId;\n+    }\n+\n+    public void setRequestId(String requestId) {\n+        this.requestId = requestId;\n+    }\n+\n+    public String getTargetIdamId() {\n+        return targetIdamId;\n+    }\n+\n+    public void setTargetIdamId(String targetIdamId) {\n+        this.targetIdamId = targetIdamId;\n+    }\n+\n+    public List<String> getTargetCaseRoles() {\n+        return targetCaseRoles;\n+    }\n+\n+    public void setTargetCaseRoles(List<String> targetCaseRoles) {\n+        this.targetCaseRoles = targetCaseRoles;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return TAG + \" \" + dateTime + \" operationType:\" + operationType +\n+            (isNotBlank(caseId) ? \", caseId:\" + caseId : \"\") +\n+            (isNotBlank(idamId) ? \", idamId:\" + idamId : \"\") +\n+            (isNotBlank(invokingService) ? \", invokingService:\" + invokingService : \"\") +\n+            (isNotBlank(path) ? \", endpointCalled:\" + httpMethod + \" \" + path : \"\") +\n+            \", operationOutcome:\" + httpStatus +\n+            (isNotBlank(caseType) ? \", caseType:\" + caseType : \"\") +\n+            (isNotBlank(jurisdiction) ? \", jurisdiction:\" + jurisdiction : \"\") +\n+            (isNotBlank(eventSelected) ? \", eventSelected:\" + eventSelected : \"\") +\n+           (isNotBlank(targetIdamId) ? \", idamIdOfTarget:\" + targetIdamId : \"\") +\n+//            (isNotBlank(listOfCaseTypes) ? \", listOfCaseTypes:\" + listOfCaseTypes : \"\") +\n+            (targetCaseRoles != null && !targetCaseRoles.isEmpty() ? \", targetCaseRoles:\" +\n+                targetCaseRoles.stream().map(String::toString).collect(Collectors.joining(\",\")) : \"\") +\n+            (isNotBlank(requestId) ? \", X-Request-ID:\" + requestId : \"\") +\n+            '}';\n+    }\n+\n+    public String formattedAuditData() {\n+        return  ReflectionToStringBuilder.toString(this, JSON_STYLE, false, false,\n+            true, null).toString();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE3NzcwOQ=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTA0OTg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditEntry.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzoyMTowNVrOGJFX9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNToxNDozMFrOGJLQTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE3ODQyMg==", "bodyText": "we'd need to evaluate impact of performance if using reflection", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412178422", "createdAt": "2020-04-21T13:21:05Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditEntry.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+import static org.apache.commons.lang3.builder.ToStringStyle.JSON_STYLE;\n+\n+public class AuditEntry {\n+\n+    private static final String TAG = \"CLA-CCD\";\n+\n+    private String dateTime;\n+    private int httpStatus;\n+    private String httpMethod;\n+    private String path;\n+    private String idamId;\n+    private String caseId;\n+    private String caseType;\n+    private String jurisdiction;\n+    private String eventSelected;\n+    private String invokingService;\n+    private String operationType;\n+    private String requestId;\n+    private String targetIdamId;\n+    private List<String> targetCaseRoles;\n+\n+    public void setDateTime(String time) {\n+        this.dateTime = time;\n+    }\n+\n+    public String getDateTime() {\n+        return dateTime;\n+    }\n+\n+    public int getHttpStatus() {\n+        return httpStatus;\n+    }\n+\n+    public void setHttpStatus(int httpStatus) {\n+        this.httpStatus = httpStatus;\n+    }\n+\n+    public String getHttpMethod() {\n+        return httpMethod;\n+    }\n+\n+    public void setHttpMethod(String httpMethod) {\n+        this.httpMethod = httpMethod;\n+    }\n+\n+    public String getPath() {\n+        return path;\n+    }\n+\n+    public void setPath(String path) {\n+        this.path = path;\n+    }\n+\n+    public String getOperationType() {\n+        return operationType;\n+    }\n+\n+    public void setOperationType(String operationType) {\n+        this.operationType = operationType;\n+    }\n+\n+    public String getIdamId() {\n+        return idamId;\n+    }\n+\n+    public void setIdamId(String idamId) {\n+        this.idamId = idamId;\n+    }\n+\n+    public String getInvokingService() {\n+        return invokingService;\n+    }\n+\n+    public void setInvokingService(String invokingService) {\n+        this.invokingService = invokingService;\n+    }\n+\n+    public static String getTAG() {\n+        return TAG;\n+    }\n+\n+    public String getCaseId() {\n+        return caseId;\n+    }\n+\n+    public void setCaseId(String caseId) {\n+        this.caseId = caseId;\n+    }\n+\n+    public String getJurisdiction() {\n+        return jurisdiction;\n+    }\n+\n+    public void setJurisdiction(String jurisdiction) {\n+        this.jurisdiction = jurisdiction;\n+    }\n+\n+    public String getCaseType() {\n+        return caseType;\n+    }\n+\n+    public void setCaseType(String caseType) {\n+        this.caseType = caseType;\n+    }\n+\n+    public String getEventSelected() {\n+        return eventSelected;\n+    }\n+\n+    public void setEventSelected(String eventSelected) {\n+        this.eventSelected = eventSelected;\n+    }\n+\n+    public String getRequestId() {\n+        return requestId;\n+    }\n+\n+    public void setRequestId(String requestId) {\n+        this.requestId = requestId;\n+    }\n+\n+    public String getTargetIdamId() {\n+        return targetIdamId;\n+    }\n+\n+    public void setTargetIdamId(String targetIdamId) {\n+        this.targetIdamId = targetIdamId;\n+    }\n+\n+    public List<String> getTargetCaseRoles() {\n+        return targetCaseRoles;\n+    }\n+\n+    public void setTargetCaseRoles(List<String> targetCaseRoles) {\n+        this.targetCaseRoles = targetCaseRoles;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return TAG + \" \" + dateTime + \" operationType:\" + operationType +\n+            (isNotBlank(caseId) ? \", caseId:\" + caseId : \"\") +\n+            (isNotBlank(idamId) ? \", idamId:\" + idamId : \"\") +\n+            (isNotBlank(invokingService) ? \", invokingService:\" + invokingService : \"\") +\n+            (isNotBlank(path) ? \", endpointCalled:\" + httpMethod + \" \" + path : \"\") +\n+            \", operationOutcome:\" + httpStatus +\n+            (isNotBlank(caseType) ? \", caseType:\" + caseType : \"\") +\n+            (isNotBlank(jurisdiction) ? \", jurisdiction:\" + jurisdiction : \"\") +\n+            (isNotBlank(eventSelected) ? \", eventSelected:\" + eventSelected : \"\") +\n+           (isNotBlank(targetIdamId) ? \", idamIdOfTarget:\" + targetIdamId : \"\") +\n+//            (isNotBlank(listOfCaseTypes) ? \", listOfCaseTypes:\" + listOfCaseTypes : \"\") +\n+            (targetCaseRoles != null && !targetCaseRoles.isEmpty() ? \", targetCaseRoles:\" +\n+                targetCaseRoles.stream().map(String::toString).collect(Collectors.joining(\",\")) : \"\") +\n+            (isNotBlank(requestId) ? \", X-Request-ID:\" + requestId : \"\") +\n+            '}';\n+    }\n+\n+    public String formattedAuditData() {\n+        return  ReflectionToStringBuilder.toString(this, JSON_STYLE, false, false,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI0NzQ3OA==", "bodyText": "That's a placeholder method if we want json format . But requirements want planing text.. so will delete the method.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412247478", "createdAt": "2020-04-21T14:43:14Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditEntry.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+import static org.apache.commons.lang3.builder.ToStringStyle.JSON_STYLE;\n+\n+public class AuditEntry {\n+\n+    private static final String TAG = \"CLA-CCD\";\n+\n+    private String dateTime;\n+    private int httpStatus;\n+    private String httpMethod;\n+    private String path;\n+    private String idamId;\n+    private String caseId;\n+    private String caseType;\n+    private String jurisdiction;\n+    private String eventSelected;\n+    private String invokingService;\n+    private String operationType;\n+    private String requestId;\n+    private String targetIdamId;\n+    private List<String> targetCaseRoles;\n+\n+    public void setDateTime(String time) {\n+        this.dateTime = time;\n+    }\n+\n+    public String getDateTime() {\n+        return dateTime;\n+    }\n+\n+    public int getHttpStatus() {\n+        return httpStatus;\n+    }\n+\n+    public void setHttpStatus(int httpStatus) {\n+        this.httpStatus = httpStatus;\n+    }\n+\n+    public String getHttpMethod() {\n+        return httpMethod;\n+    }\n+\n+    public void setHttpMethod(String httpMethod) {\n+        this.httpMethod = httpMethod;\n+    }\n+\n+    public String getPath() {\n+        return path;\n+    }\n+\n+    public void setPath(String path) {\n+        this.path = path;\n+    }\n+\n+    public String getOperationType() {\n+        return operationType;\n+    }\n+\n+    public void setOperationType(String operationType) {\n+        this.operationType = operationType;\n+    }\n+\n+    public String getIdamId() {\n+        return idamId;\n+    }\n+\n+    public void setIdamId(String idamId) {\n+        this.idamId = idamId;\n+    }\n+\n+    public String getInvokingService() {\n+        return invokingService;\n+    }\n+\n+    public void setInvokingService(String invokingService) {\n+        this.invokingService = invokingService;\n+    }\n+\n+    public static String getTAG() {\n+        return TAG;\n+    }\n+\n+    public String getCaseId() {\n+        return caseId;\n+    }\n+\n+    public void setCaseId(String caseId) {\n+        this.caseId = caseId;\n+    }\n+\n+    public String getJurisdiction() {\n+        return jurisdiction;\n+    }\n+\n+    public void setJurisdiction(String jurisdiction) {\n+        this.jurisdiction = jurisdiction;\n+    }\n+\n+    public String getCaseType() {\n+        return caseType;\n+    }\n+\n+    public void setCaseType(String caseType) {\n+        this.caseType = caseType;\n+    }\n+\n+    public String getEventSelected() {\n+        return eventSelected;\n+    }\n+\n+    public void setEventSelected(String eventSelected) {\n+        this.eventSelected = eventSelected;\n+    }\n+\n+    public String getRequestId() {\n+        return requestId;\n+    }\n+\n+    public void setRequestId(String requestId) {\n+        this.requestId = requestId;\n+    }\n+\n+    public String getTargetIdamId() {\n+        return targetIdamId;\n+    }\n+\n+    public void setTargetIdamId(String targetIdamId) {\n+        this.targetIdamId = targetIdamId;\n+    }\n+\n+    public List<String> getTargetCaseRoles() {\n+        return targetCaseRoles;\n+    }\n+\n+    public void setTargetCaseRoles(List<String> targetCaseRoles) {\n+        this.targetCaseRoles = targetCaseRoles;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return TAG + \" \" + dateTime + \" operationType:\" + operationType +\n+            (isNotBlank(caseId) ? \", caseId:\" + caseId : \"\") +\n+            (isNotBlank(idamId) ? \", idamId:\" + idamId : \"\") +\n+            (isNotBlank(invokingService) ? \", invokingService:\" + invokingService : \"\") +\n+            (isNotBlank(path) ? \", endpointCalled:\" + httpMethod + \" \" + path : \"\") +\n+            \", operationOutcome:\" + httpStatus +\n+            (isNotBlank(caseType) ? \", caseType:\" + caseType : \"\") +\n+            (isNotBlank(jurisdiction) ? \", jurisdiction:\" + jurisdiction : \"\") +\n+            (isNotBlank(eventSelected) ? \", eventSelected:\" + eventSelected : \"\") +\n+           (isNotBlank(targetIdamId) ? \", idamIdOfTarget:\" + targetIdamId : \"\") +\n+//            (isNotBlank(listOfCaseTypes) ? \", listOfCaseTypes:\" + listOfCaseTypes : \"\") +\n+            (targetCaseRoles != null && !targetCaseRoles.isEmpty() ? \", targetCaseRoles:\" +\n+                targetCaseRoles.stream().map(String::toString).collect(Collectors.joining(\",\")) : \"\") +\n+            (isNotBlank(requestId) ? \", X-Request-ID:\" + requestId : \"\") +\n+            '}';\n+    }\n+\n+    public String formattedAuditData() {\n+        return  ReflectionToStringBuilder.toString(this, JSON_STYLE, false, false,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE3ODQyMg=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI3NDc2NQ==", "bodyText": "removed.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412274765", "createdAt": "2020-04-21T15:14:30Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditEntry.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+import static org.apache.commons.lang3.builder.ToStringStyle.JSON_STYLE;\n+\n+public class AuditEntry {\n+\n+    private static final String TAG = \"CLA-CCD\";\n+\n+    private String dateTime;\n+    private int httpStatus;\n+    private String httpMethod;\n+    private String path;\n+    private String idamId;\n+    private String caseId;\n+    private String caseType;\n+    private String jurisdiction;\n+    private String eventSelected;\n+    private String invokingService;\n+    private String operationType;\n+    private String requestId;\n+    private String targetIdamId;\n+    private List<String> targetCaseRoles;\n+\n+    public void setDateTime(String time) {\n+        this.dateTime = time;\n+    }\n+\n+    public String getDateTime() {\n+        return dateTime;\n+    }\n+\n+    public int getHttpStatus() {\n+        return httpStatus;\n+    }\n+\n+    public void setHttpStatus(int httpStatus) {\n+        this.httpStatus = httpStatus;\n+    }\n+\n+    public String getHttpMethod() {\n+        return httpMethod;\n+    }\n+\n+    public void setHttpMethod(String httpMethod) {\n+        this.httpMethod = httpMethod;\n+    }\n+\n+    public String getPath() {\n+        return path;\n+    }\n+\n+    public void setPath(String path) {\n+        this.path = path;\n+    }\n+\n+    public String getOperationType() {\n+        return operationType;\n+    }\n+\n+    public void setOperationType(String operationType) {\n+        this.operationType = operationType;\n+    }\n+\n+    public String getIdamId() {\n+        return idamId;\n+    }\n+\n+    public void setIdamId(String idamId) {\n+        this.idamId = idamId;\n+    }\n+\n+    public String getInvokingService() {\n+        return invokingService;\n+    }\n+\n+    public void setInvokingService(String invokingService) {\n+        this.invokingService = invokingService;\n+    }\n+\n+    public static String getTAG() {\n+        return TAG;\n+    }\n+\n+    public String getCaseId() {\n+        return caseId;\n+    }\n+\n+    public void setCaseId(String caseId) {\n+        this.caseId = caseId;\n+    }\n+\n+    public String getJurisdiction() {\n+        return jurisdiction;\n+    }\n+\n+    public void setJurisdiction(String jurisdiction) {\n+        this.jurisdiction = jurisdiction;\n+    }\n+\n+    public String getCaseType() {\n+        return caseType;\n+    }\n+\n+    public void setCaseType(String caseType) {\n+        this.caseType = caseType;\n+    }\n+\n+    public String getEventSelected() {\n+        return eventSelected;\n+    }\n+\n+    public void setEventSelected(String eventSelected) {\n+        this.eventSelected = eventSelected;\n+    }\n+\n+    public String getRequestId() {\n+        return requestId;\n+    }\n+\n+    public void setRequestId(String requestId) {\n+        this.requestId = requestId;\n+    }\n+\n+    public String getTargetIdamId() {\n+        return targetIdamId;\n+    }\n+\n+    public void setTargetIdamId(String targetIdamId) {\n+        this.targetIdamId = targetIdamId;\n+    }\n+\n+    public List<String> getTargetCaseRoles() {\n+        return targetCaseRoles;\n+    }\n+\n+    public void setTargetCaseRoles(List<String> targetCaseRoles) {\n+        this.targetCaseRoles = targetCaseRoles;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return TAG + \" \" + dateTime + \" operationType:\" + operationType +\n+            (isNotBlank(caseId) ? \", caseId:\" + caseId : \"\") +\n+            (isNotBlank(idamId) ? \", idamId:\" + idamId : \"\") +\n+            (isNotBlank(invokingService) ? \", invokingService:\" + invokingService : \"\") +\n+            (isNotBlank(path) ? \", endpointCalled:\" + httpMethod + \" \" + path : \"\") +\n+            \", operationOutcome:\" + httpStatus +\n+            (isNotBlank(caseType) ? \", caseType:\" + caseType : \"\") +\n+            (isNotBlank(jurisdiction) ? \", jurisdiction:\" + jurisdiction : \"\") +\n+            (isNotBlank(eventSelected) ? \", eventSelected:\" + eventSelected : \"\") +\n+           (isNotBlank(targetIdamId) ? \", idamIdOfTarget:\" + targetIdamId : \"\") +\n+//            (isNotBlank(listOfCaseTypes) ? \", listOfCaseTypes:\" + listOfCaseTypes : \"\") +\n+            (targetCaseRoles != null && !targetCaseRoles.isEmpty() ? \", targetCaseRoles:\" +\n+                targetCaseRoles.stream().map(String::toString).collect(Collectors.joining(\",\")) : \"\") +\n+            (isNotBlank(requestId) ? \", X-Request-ID:\" + requestId : \"\") +\n+            '}';\n+    }\n+\n+    public String formattedAuditData() {\n+        return  ReflectionToStringBuilder.toString(this, JSON_STYLE, false, false,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE3ODQyMg=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTA2ODE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditInterceptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzoyNDo0OVrOGJFjQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNToyMDo0OVrOGJLlYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE4MTMxNA==", "bodyText": "in terms of design I wouldn't pass down web level classes like HttpServletRequest to the AuditService. Ideally AuditService should not be tied to any web class.\nSame way as you don't pass down HttpServletRequest objects to other type of Services classes or *Operation classes\nWe could have the interceptor parsing the request, adding all that info to the context, and invoking the AuditService with the context only so the AuditService knows nothing about HttpServletRequest  and HttpServletResponse", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412181314", "createdAt": "2020-04-21T13:24:49Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditInterceptor.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+import org.springframework.lang.Nullable;\n+import org.springframework.web.method.HandlerMethod;\n+import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;\n+import uk.gov.hmcts.ccd.auditlog.aop.AuditContext;\n+import uk.gov.hmcts.ccd.auditlog.aop.AuditContextHolder;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+public class AuditInterceptor extends HandlerInterceptorAdapter {\n+\n+    private final AuditService auditService;\n+\n+    public AuditInterceptor(AuditService auditService) {\n+        this.auditService = auditService;\n+    }\n+\n+    @Override\n+    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler,\n+                           @Nullable Exception ex) {\n+        if (handler instanceof HandlerMethod && ((HandlerMethod) handler).hasMethodAnnotation(LogAudit.class)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI4MDE2Mw==", "bodyText": "agree.. don't like passing http semantics", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412280163", "createdAt": "2020-04-21T15:20:49Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditInterceptor.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+import org.springframework.lang.Nullable;\n+import org.springframework.web.method.HandlerMethod;\n+import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;\n+import uk.gov.hmcts.ccd.auditlog.aop.AuditContext;\n+import uk.gov.hmcts.ccd.auditlog.aop.AuditContextHolder;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+public class AuditInterceptor extends HandlerInterceptorAdapter {\n+\n+    private final AuditService auditService;\n+\n+    public AuditInterceptor(AuditService auditService) {\n+        this.auditService = auditService;\n+    }\n+\n+    @Override\n+    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler,\n+                           @Nullable Exception ex) {\n+        if (handler instanceof HandlerMethod && ((HandlerMethod) handler).hasMethodAnnotation(LogAudit.class)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE4MTMxNA=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTEwNTkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzozMjowNVrOGJF6NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDo0Njo0MVrOGJJx3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE4NzE4OA==", "bodyText": "out of coursiosity when is it that auditContext can be null?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412187188", "createdAt": "2020-04-21T13:32:05Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditService.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.auditlog.aop.AuditContext;\n+import uk.gov.hmcts.ccd.data.SecurityUtils;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.time.Clock;\n+import java.time.LocalDateTime;\n+\n+import static java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;\n+\n+@Service\n+public class AuditService {\n+\n+    private final Clock clock;\n+    private final SecurityUtils securityUtils;\n+    private final UserRepository userRepository;\n+    private final AuditRepository auditRepository;\n+\n+    public AuditService(@Qualifier(\"utcClock\") final Clock clock,\n+                        @Qualifier(CachedUserRepository.QUALIFIER) final UserRepository userRepository,\n+                        @Lazy final SecurityUtils securityUtils, final AuditRepository auditRepository) {\n+        this.clock = clock;\n+        this.userRepository = userRepository;\n+        this.securityUtils = securityUtils;\n+        this.auditRepository = auditRepository;\n+    }\n+\n+    public void audit(HttpServletRequest request, int httpResponseStatus, AuditContext auditContext) {\n+        AuditEntry entry = new AuditEntry();\n+\n+        String formattedDate = LocalDateTime.now(clock).format(ISO_LOCAL_DATE_TIME);\n+\n+        entry.setDateTime(formattedDate);\n+        entry.setHttpStatus(httpResponseStatus);\n+        entry.setHttpMethod(request.getMethod());\n+        entry.setPath(request.getRequestURI());\n+        entry.setIdamId(userRepository.getUser().getEmail());\n+        entry.setInvokingService(securityUtils.getServiceName());\n+\n+        if (auditContext != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI1MDU4OQ==", "bodyText": "Eg: 400 bad request when Spring fails (serialisation) to bind data to controller methods. Also, 403/401.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412250589", "createdAt": "2020-04-21T14:46:41Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditService.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.auditlog.aop.AuditContext;\n+import uk.gov.hmcts.ccd.data.SecurityUtils;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.time.Clock;\n+import java.time.LocalDateTime;\n+\n+import static java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;\n+\n+@Service\n+public class AuditService {\n+\n+    private final Clock clock;\n+    private final SecurityUtils securityUtils;\n+    private final UserRepository userRepository;\n+    private final AuditRepository auditRepository;\n+\n+    public AuditService(@Qualifier(\"utcClock\") final Clock clock,\n+                        @Qualifier(CachedUserRepository.QUALIFIER) final UserRepository userRepository,\n+                        @Lazy final SecurityUtils securityUtils, final AuditRepository auditRepository) {\n+        this.clock = clock;\n+        this.userRepository = userRepository;\n+        this.securityUtils = securityUtils;\n+        this.auditRepository = auditRepository;\n+    }\n+\n+    public void audit(HttpServletRequest request, int httpResponseStatus, AuditContext auditContext) {\n+        AuditEntry entry = new AuditEntry();\n+\n+        String formattedDate = LocalDateTime.now(clock).format(ISO_LOCAL_DATE_TIME);\n+\n+        entry.setDateTime(formattedDate);\n+        entry.setHttpStatus(httpResponseStatus);\n+        entry.setHttpMethod(request.getMethod());\n+        entry.setPath(request.getRequestURI());\n+        entry.setIdamId(userRepository.getUser().getEmail());\n+        entry.setInvokingService(securityUtils.getServiceName());\n+\n+        if (auditContext != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE4NzE4OA=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTEzNDA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditEntry.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzozNzo0OFrOGJGLaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNToxOTo1MVrOGJLiQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE5MTU5NQ==", "bodyText": "with this design it's not possible from the code to distinguish what properties we are logging for each operation type. I think this is not ideal.\nI wonder whether it's possible to have an AuditEntry superclass with one implementation for each operation type that contains properties only relevant to that operation. So for example CaseSearchAudit, CaseUpdateAudit....", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412191595", "createdAt": "2020-04-21T13:37:48Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditEntry.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+import static org.apache.commons.lang3.builder.ToStringStyle.JSON_STYLE;\n+\n+public class AuditEntry {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI3OTM2MA==", "bodyText": "you get that from LogAudit() annotation on the controller method.  I feel defining another class hierarchy complicates aspect design.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412279360", "createdAt": "2020-04-21T15:19:51Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditEntry.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+import static org.apache.commons.lang3.builder.ToStringStyle.JSON_STYLE;\n+\n+public class AuditEntry {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE5MTU5NQ=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTE1MzY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditRepository.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzo0MTozMVrOGJGXFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDo0OToyNVrOGJJ7Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE5NDU4MA==", "bodyText": "I think the AuditService could be injected with a AuditLogFormatter which is responsible for formatting the audit string. Then the Repository just logs the formatted entry", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412194580", "createdAt": "2020-04-21T13:41:31Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditRepository.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class AuditRepository {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AuditRepository.class);\n+\n+    public void save(final AuditEntry auditEntry) {\n+        LOG.info(auditEntry.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI1MzAxOQ==", "bodyText": "if you introduce formatter class then it should inject here rather than AuditServcie.  I like passing domain entity to repository", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412253019", "createdAt": "2020-04-21T14:49:25Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditRepository.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class AuditRepository {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AuditRepository.class);\n+\n+    public void save(final AuditEntry auditEntry) {\n+        LOG.info(auditEntry.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE5NDU4MA=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTE4Mzc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/aop/AuditAspect.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzo0NzoxNFrOGJGpRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMTowMzoyNFrOGKjkhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE5OTIzOA==", "bodyText": "since we're using AOP I'll request some thorough performance testing on this ticket to evaluate the impact on the CCD performance. Will add a comment on the ticket", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412199238", "createdAt": "2020-04-21T13:47:14Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/aop/AuditAspect.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package uk.gov.hmcts.ccd.auditlog.aop;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.aspectj.lang.JoinPoint;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.expression.AnnotatedElementKey;\n+import org.springframework.expression.EvaluationContext;\n+import org.springframework.expression.spel.SpelEvaluationException;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.auditlog.LogAudit;\n+\n+import java.lang.reflect.Method;\n+import java.util.List;\n+\n+@Aspect\n+@Component\n+public class AuditAspect {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI1NDE2Mg==", "bodyText": "sure, but that's the cleanest option we came across inspired from Spring caching. Otherwise you've to parse request/response jsons again and structure varies from one endpoint to another endpoint.\nAny other design suggestions always welcome.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412254162", "createdAt": "2020-04-21T14:50:49Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/aop/AuditAspect.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package uk.gov.hmcts.ccd.auditlog.aop;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.aspectj.lang.JoinPoint;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.expression.AnnotatedElementKey;\n+import org.springframework.expression.EvaluationContext;\n+import org.springframework.expression.spel.SpelEvaluationException;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.auditlog.LogAudit;\n+\n+import java.lang.reflect.Method;\n+import java.util.List;\n+\n+@Aspect\n+@Component\n+public class AuditAspect {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE5OTIzOA=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzcyMTczNA==", "bodyText": "I think AOP is a good choice. We just need to evaluate the performance of the solution.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r413721734", "createdAt": "2020-04-23T11:03:24Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/aop/AuditAspect.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package uk.gov.hmcts.ccd.auditlog.aop;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.aspectj.lang.JoinPoint;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.expression.AnnotatedElementKey;\n+import org.springframework.expression.EvaluationContext;\n+import org.springframework.expression.spel.SpelEvaluationException;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.auditlog.LogAudit;\n+\n+import java.lang.reflect.Method;\n+import java.util.List;\n+\n+@Aspect\n+@Component\n+public class AuditAspect {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE5OTIzOA=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTIxOTQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/aop/AuditContextHolder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzo1Mzo0OVrOGJG-uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDo1MjoxM1rOGJKEmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwNDczMQ==", "bodyText": "ThreadLocal are a bit tricky and could cause mem leaks. For my knowledge, why we need to use it here? what problem is this addressing?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412204731", "createdAt": "2020-04-21T13:53:49Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/aop/AuditContextHolder.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package uk.gov.hmcts.ccd.auditlog.aop;\n+\n+public class AuditContextHolder {\n+\n+    private AuditContextHolder() {}\n+\n+    private static final InheritableThreadLocal<AuditContext> threadLocal = new InheritableThreadLocal<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI1NTM4NQ==", "bodyText": "it depends on how you use it. how do you pass to Interceptor then..?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412255385", "createdAt": "2020-04-21T14:52:13Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/aop/AuditContextHolder.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package uk.gov.hmcts.ccd.auditlog.aop;\n+\n+public class AuditContextHolder {\n+\n+    private AuditContextHolder() {}\n+\n+    private static final InheritableThreadLocal<AuditContext> threadLocal = new InheritableThreadLocal<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwNDczMQ=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTIzNjIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CallbackEndpoint.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzo1Njo1MVrOGJHI_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDoxMDoxMFrOGJH1lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwNzM1Ng==", "bodyText": "mmm don't understand why this operation is being logged as a search", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412207356", "createdAt": "2020-04-21T13:56:51Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CallbackEndpoint.java", "diffHunk": "@@ -30,6 +32,7 @@ public CallbackEndpoint(final PrintableDocumentListOperation printableDocumentLi\n     @ApiResponses(value = {\n         @ApiResponse(code = 200, message = \"Printable documents list retrieved\")\n     })\n+    @LogAudit(operationType = OperationType.SEARCH_CASE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwNzgxMw==", "bodyText": "We could probably ignore this endpoint", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412207813", "createdAt": "2020-04-21T13:57:24Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CallbackEndpoint.java", "diffHunk": "@@ -30,6 +32,7 @@ public CallbackEndpoint(final PrintableDocumentListOperation printableDocumentLi\n     @ApiResponses(value = {\n         @ApiResponse(code = 200, message = \"Printable documents list retrieved\")\n     })\n+    @LogAudit(operationType = OperationType.SEARCH_CASE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwNzM1Ng=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIxODc3Mg==", "bodyText": "This is a mistake. Will remove and in another PR with v1 will go as\n@LogAudit(operationType = OperationType.VIEW_CASE, caseId = \"#caseDetails.reference\", caseType = \"#caseTypeId\",\njurisdiction = \"#jurisdictionId\")", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412218772", "createdAt": "2020-04-21T14:10:10Z", "author": {"login": "rafalkalita"}, "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CallbackEndpoint.java", "diffHunk": "@@ -30,6 +32,7 @@ public CallbackEndpoint(final PrintableDocumentListOperation printableDocumentLi\n     @ApiResponses(value = {\n         @ApiResponse(code = 200, message = \"Printable documents list retrieved\")\n     })\n+    @LogAudit(operationType = OperationType.SEARCH_CASE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwNzM1Ng=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTI0NTYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseAccessEndpoint.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzo1ODozNVrOGJHOtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDoxMTozN1rOGJH6gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwODgyMA==", "bodyText": "we said to ignore this endpoint. If we want to log it I don't think we should log it as a search. Search case should be only for the search api I'd say", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412208820", "createdAt": "2020-04-21T13:58:35Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseAccessEndpoint.java", "diffHunk": "@@ -33,6 +35,7 @@ public CaseAccessEndpoint(CaseAccessOperation caseAccessOperation) {\n         @ApiResponse(code = 200, message = \"List of cases ids found\"),\n         @ApiResponse(code = 400, message = \"Invalid case ID\")\n     })\n+    @LogAudit(operationType = OperationType.SEARCH_CASE)\n     public List<String> findCaseIdsGivenUserIdHasAccessTo(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIyMDAzMg==", "bodyText": "It is a mistake. V1 will be in another PR. Will remove from this PR.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412220032", "createdAt": "2020-04-21T14:11:37Z", "author": {"login": "rafalkalita"}, "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseAccessEndpoint.java", "diffHunk": "@@ -33,6 +35,7 @@ public CaseAccessEndpoint(CaseAccessOperation caseAccessOperation) {\n         @ApiResponse(code = 200, message = \"List of cases ids found\"),\n         @ApiResponse(code = 400, message = \"Invalid case ID\")\n     })\n+    @LogAudit(operationType = OperationType.SEARCH_CASE)\n     public List<String> findCaseIdsGivenUserIdHasAccessTo(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwODgyMA=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTI1Mjg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseAccessEndpoint.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDowMDowMlrOGJHTQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDoxMjozNVrOGJH9hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwOTk4Nw==", "bodyText": "I think we agreed to have GRANT_CASE_ACCESS, REVOKE_CASE_ACCESS for these 2 v1 endpoints, and UDPATE_CASE_ACCESS for the v2 endpoint.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412209987", "createdAt": "2020-04-21T14:00:02Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseAccessEndpoint.java", "diffHunk": "@@ -58,6 +61,7 @@ public CaseAccessEndpoint(CaseAccessOperation caseAccessOperation) {\n         @ApiResponse(code = 400, message = \"Invalid case ID\")\n     })\n     @ResponseStatus(value = HttpStatus.CREATED)\n+    @LogAudit(operationType = OperationType.UPDATE_CASE_ACCESS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIyMDgwNQ==", "bodyText": "It is a mistake. V1 will be in another PR. Will remove from this PR.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412220805", "createdAt": "2020-04-21T14:12:35Z", "author": {"login": "rafalkalita"}, "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseAccessEndpoint.java", "diffHunk": "@@ -58,6 +61,7 @@ public CaseAccessEndpoint(CaseAccessOperation caseAccessOperation) {\n         @ApiResponse(code = 400, message = \"Invalid case ID\")\n     })\n     @ResponseStatus(value = HttpStatus.CREATED)\n+    @LogAudit(operationType = OperationType.UPDATE_CASE_ACCESS)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwOTk4Nw=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTI2MzYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseDetailsEndpoint.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDowMTo1M1rOGJHZng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDoxNzoxMFrOGJINMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIxMTYxNA==", "bodyText": "this endpoint is not used by the UI when the user is viewing a case. So the name of the operation might be a bit misleading. I wonder whether we want to introduce a separate operation name for when the case is being accessed programmatically like in this case. Rather than by the UI. I'll ask the Lee and the BAs", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412211614", "createdAt": "2020-04-21T14:01:53Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseDetailsEndpoint.java", "diffHunk": "@@ -112,6 +114,7 @@ public CaseDetailsEndpoint(@Qualifier(CreatorGetCaseOperation.QUALIFIER) final G\n         @ApiResponse(code = 400, message = \"Invalid case ID\"),\n         @ApiResponse(code = 404, message = \"No case found for the given ID\")\n     })\n+    @LogAudit(operationType = OperationType.VIEW_CASE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIyNDgxNw==", "bodyText": "Please check and let us know. Same as other comments. Will clean up and will be in v1 PR.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412224817", "createdAt": "2020-04-21T14:17:10Z", "author": {"login": "rafalkalita"}, "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseDetailsEndpoint.java", "diffHunk": "@@ -112,6 +114,7 @@ public CaseDetailsEndpoint(@Qualifier(CreatorGetCaseOperation.QUALIFIER) final G\n         @ApiResponse(code = 400, message = \"Invalid case ID\"),\n         @ApiResponse(code = 404, message = \"No case found for the given ID\")\n     })\n+    @LogAudit(operationType = OperationType.VIEW_CASE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIxMTYxNA=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTI5NTk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseDetailsEndpoint.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDowNzozNlrOGJHs-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDoxODo1OFrOGJITbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIxNjU3MA==", "bodyText": "I think we agreed we wouldn't log these start event operations:\nHi @Mario We have few questions for Log and Audit\n1.) Do we need to log this one: Case access API - GET /caseworkers/{uid}/jurisdictions/{jid}/case-types/{ctid}/cases/ids\n2.) Do we need to log middle case creation steps, like Standard case API - GET /caseworkers/{uid}/jurisdictions/{jid}/case-types/{ctid}/event-triggers/{etid}/token  Those are trigerred on starting a new event (for Update or Create case), but not when we persist the case on the Submit.\n\nHi @Rafal Kalita 1) no 2) no \n\nIt's been implemented as yes and yes lol", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412216570", "createdAt": "2020-04-21T14:07:36Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseDetailsEndpoint.java", "diffHunk": "@@ -160,6 +164,7 @@ public CaseDetails findCaseDetailsForCitizen(\n         @ApiResponse(code = 404, message = \"No case found for the given ID\"),\n         @ApiResponse(code = 422, message = \"Process could not be started\")\n     })\n+    @LogAudit(operationType = OperationType.CREATE_CASE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIyMjI3MQ==", "bodyText": "Same as other comments. Will clean up and will be in v1 PR.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412222271", "createdAt": "2020-04-21T14:14:16Z", "author": {"login": "rafalkalita"}, "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseDetailsEndpoint.java", "diffHunk": "@@ -160,6 +164,7 @@ public CaseDetails findCaseDetailsForCitizen(\n         @ApiResponse(code = 404, message = \"No case found for the given ID\"),\n         @ApiResponse(code = 422, message = \"Process could not be started\")\n     })\n+    @LogAudit(operationType = OperationType.CREATE_CASE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIxNjU3MA=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIyNjQxNA==", "bodyText": "the reason I think it's best not to log the start of a case update it that it's better to have 1 log audit for each user operation. Because to update a case in CCD you need to call 2 endpoint, each user update would be result with 2 audit logs. Which is not nice", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412226414", "createdAt": "2020-04-21T14:18:58Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseDetailsEndpoint.java", "diffHunk": "@@ -160,6 +164,7 @@ public CaseDetails findCaseDetailsForCitizen(\n         @ApiResponse(code = 404, message = \"No case found for the given ID\"),\n         @ApiResponse(code = 422, message = \"Process could not be started\")\n     })\n+    @LogAudit(operationType = OperationType.CREATE_CASE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIxNjU3MA=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTMxNDM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseDetailsEndpoint.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDoxMDo1M1rOGJH3yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDoxMzozNlrOGJIA_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIxOTMzNw==", "bodyText": "we agreed not to log this. mmm how come we have done all the opposite of what we agreed? lol", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412219337", "createdAt": "2020-04-21T14:10:53Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseDetailsEndpoint.java", "diffHunk": "@@ -308,6 +318,7 @@ public CaseDetails saveCaseDetailsForCitizen(\n         @ApiResponse(code = 422, message = \"Field validation failed\"),\n         @ApiResponse(code = 409, message = \"Case reference not unique\")\n     })\n+    @LogAudit(operationType = OperationType.CREATE_CASE)\n     public JsonNode validateCaseDetails(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIyMTY5Mw==", "bodyText": "We have initially committed this on v1 as well, and then asked questions. Will go to another PR.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412221693", "createdAt": "2020-04-21T14:13:36Z", "author": {"login": "rafalkalita"}, "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseDetailsEndpoint.java", "diffHunk": "@@ -308,6 +318,7 @@ public CaseDetails saveCaseDetailsForCitizen(\n         @ApiResponse(code = 422, message = \"Field validation failed\"),\n         @ApiResponse(code = 409, message = \"Case reference not unique\")\n     })\n+    @LogAudit(operationType = OperationType.CREATE_CASE)\n     public JsonNode validateCaseDetails(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIxOTMzNw=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTMzOTM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseDetailsEndpoint.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDoxNToxNFrOGJIGmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDoxNToxNFrOGJIGmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIyMzEyOA==", "bodyText": "don't think it's correct to classify this as a search. There is not requirement to log this in the design. We could ignore or if we want to log it then we need  a more suitable operation name, like CASE_DOCUMENTS_ACCESS?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412223128", "createdAt": "2020-04-21T14:15:14Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseDetailsEndpoint.java", "diffHunk": "@@ -385,6 +398,7 @@ public CaseDetails createCaseEventForCitizen(\n     @ApiResponses(value = {\n         @ApiResponse(code = 200, message = \"Documents list for the given case id\")\n     })\n+    @LogAudit(operationType = OperationType.SEARCH_CASE)\n     public List<Document> getDocumentsForCase(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTM1MDQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseDetailsEndpoint.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDoxNzoxMFrOGJINPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDoxNzoxMFrOGJINPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIyNDgzMQ==", "bodyText": "I thing we can ignore this. We are already logging the search operation in searchCasesForCaseWorkers and searchCasesForCitizens. If we log here as well every user search would be logged twice which would be misleading. For one use operation I think it's better to have 1 log audit only.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412224831", "createdAt": "2020-04-21T14:17:10Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseDetailsEndpoint.java", "diffHunk": "@@ -437,6 +453,7 @@ public CaseDetails createCaseEventForCitizen(\n     @ApiOperation(value = \"Get the pagination metadata for a case data search\")\n     @ApiResponses(value = {\n         @ApiResponse(code = 200, message = \"Pagination metadata for the given search criteria\")})\n+    @LogAudit(operationType = OperationType.SEARCH_CASE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTM2MjkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseDetailsEndpoint.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDoxOToxOVrOGJIUpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDoxOToxOVrOGJIUpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIyNjcyNQ==", "bodyText": "ignore please", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412226725", "createdAt": "2020-04-21T14:19:19Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseDetailsEndpoint.java", "diffHunk": "@@ -449,6 +466,7 @@ public PaginatedSearchMetadata searchCasesMetadataForCaseworkers(@PathVariable(\"\n     @ApiOperation(value = \"Get the pagination metadata for a case data search\")\n     @ApiResponses(value = {\n         @ApiResponse(code = 200, message = \"Pagination metadata for the given search criteria\")})\n+    @LogAudit(operationType = OperationType.SEARCH_CASE)\n     public PaginatedSearchMetadata searchCasesMetadataForCitizens(@PathVariable(\"uid\") final String uid,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTM2NjQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/DraftsEndpoint.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDoxOTo1OFrOGJIW0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDo1MzoxOFrOGJKIQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIyNzI4Mw==", "bodyText": "UPDATE_CASE?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412227283", "createdAt": "2020-04-21T14:19:58Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/DraftsEndpoint.java", "diffHunk": "@@ -113,6 +117,7 @@ public DraftResponse updateDraftForCaseWorker(\n     @ApiResponses(value = {\n         @ApiResponse(code = 200, message = \"A displayable draft\")\n     })\n+    @LogAudit(operationType = OperationType.CREATE_CASE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI1NjMyMg==", "bodyText": "We will ignore drafts totally. We use UPDATE_CASE when we already have the case created (it has a caseId/reference)", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412256322", "createdAt": "2020-04-21T14:53:18Z", "author": {"login": "rafalkalita"}, "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/DraftsEndpoint.java", "diffHunk": "@@ -113,6 +117,7 @@ public DraftResponse updateDraftForCaseWorker(\n     @ApiResponses(value = {\n         @ApiResponse(code = 200, message = \"A displayable draft\")\n     })\n+    @LogAudit(operationType = OperationType.CREATE_CASE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIyNzI4Mw=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTM3MDMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/OperationType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDoyMDo0MVrOGJIZKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDoyMDo0MVrOGJIZKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIyNzg4Mw==", "bodyText": "rename to AuditOperationType please", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412227883", "createdAt": "2020-04-21T14:20:41Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/OperationType.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+public enum OperationType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTM3NjI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/ui/QueryEndpoint.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDoyMTozNlrOGJIcmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDoyMTozNlrOGJIcmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIyODc2Mg==", "bodyText": "this is not a search, it's  a  case view. VIEW_CASE?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412228762", "createdAt": "2020-04-21T14:21:36Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/ui/QueryEndpoint.java", "diffHunk": "@@ -218,6 +193,7 @@ public SearchResultView searchNew(@PathVariable(\"jid\") final String jurisdiction\n     @ApiResponses(value = {\n         @ApiResponse(code = 200, message = \"A displayable case\")\n     })\n+    @LogAudit(operationType = OperationType.SEARCH_CASE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTM4NTE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/ui/QueryEndpoint.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDoyMzoyMVrOGJIiUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDo0MzoxOVrOGJJl6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIzMDIyNA==", "bodyText": "better to introduce a VIEW_CASE_HISTORY operation", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412230224", "createdAt": "2020-04-21T14:23:21Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/ui/QueryEndpoint.java", "diffHunk": "@@ -290,6 +269,7 @@ public CaseEventTrigger getEventTriggerForDraft(@PathVariable(\"uid\") String user\n         @ApiResponse(code = 200, message = \"Displayable case data\"),\n         @ApiResponse(code = 404, message = \"Invalid jurisdiction/case type/case reference or event id\")\n     })\n+    @LogAudit(operationType = OperationType.VIEW_CASE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI0NzUzMQ==", "bodyText": "We will ignore this one.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412247531", "createdAt": "2020-04-21T14:43:19Z", "author": {"login": "rafalkalita"}, "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/ui/QueryEndpoint.java", "diffHunk": "@@ -290,6 +269,7 @@ public CaseEventTrigger getEventTriggerForDraft(@PathVariable(\"uid\") String user\n         @ApiResponse(code = 200, message = \"Displayable case data\"),\n         @ApiResponse(code = 404, message = \"Invalid jurisdiction/case type/case reference or event id\")\n     })\n+    @LogAudit(operationType = OperationType.VIEW_CASE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIzMDIyNA=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTM5NTIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/v2/external/controller/DocumentController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDoyNToxNVrOGJIokw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDoyNToxNVrOGJIokw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIzMTgyNw==", "bodyText": "either we ignore, or we create a better operation name I'd suggest", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412231827", "createdAt": "2020-04-21T14:25:15Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/v2/external/controller/DocumentController.java", "diffHunk": "@@ -66,6 +68,7 @@ public DocumentController(\n             message = V2.Error.PRINTABLE_DOCUMENTS_ENDPOINT_DOWN\n         )\n     })\n+    @LogAudit(operationType = OperationType.VIEW_CASE, caseId = \"#caseId\")\n     public ResponseEntity<DocumentsResource> getDocuments(@PathVariable(\"caseId\") String caseId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTM5NzMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/v2/external/controller/StartTriggerController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDoyNTo0MFrOGJIp9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDoyNTo0MFrOGJIp9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIzMjE4MA==", "bodyText": "better to ignore as we agreed", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412232180", "createdAt": "2020-04-21T14:25:40Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/v2/external/controller/StartTriggerController.java", "diffHunk": "@@ -61,6 +63,8 @@ public StartTriggerController(\n             message = EVENT_TRIGGER_NOT_FOUND\n         )\n     })\n+    @LogAudit(operationType = OperationType.CREATE_CASE, jurisdiction = \"#result.body.caseDetails.jurisdiction\",\n+        caseType = \"#caseTypeId\", eventName = \"#triggerId\")\n     public ResponseEntity<StartTriggerResource> getStartCaseTrigger(@PathVariable(\"caseTypeId\") String caseTypeId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTM5ODMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/v2/external/controller/StartTriggerController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDoyNTo1M1rOGJIqhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDoyNTo1M1rOGJIqhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIzMjMyNg==", "bodyText": "we can ignore as we agreed", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412232326", "createdAt": "2020-04-21T14:25:53Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/v2/external/controller/StartTriggerController.java", "diffHunk": "@@ -104,6 +108,8 @@ public StartTriggerController(\n             message = EVENT_TRIGGER_NOT_FOUND\n         )\n     })\n+    @LogAudit(operationType = OperationType.UPDATE_CASE, jurisdiction = \"#result.body.caseDetails.jurisdiction\",\n+        caseType = \"#result.body.caseDetails.caseTypeId\", eventName = \"#triggerId\", caseId = \"#caseId\")\n     public ResponseEntity<StartTriggerResource> getStartEventTrigger(@PathVariable(\"caseId\") String caseId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTQwOTI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/v2/internal/controller/UICaseController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDoyNzo0NlrOGJIxFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDoxMjo0NFrOGJulnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIzNDAwNg==", "bodyText": "I'd suggest VIEW_CASE_HISTORY", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412234006", "createdAt": "2020-04-21T14:27:46Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/v2/internal/controller/UICaseController.java", "diffHunk": "@@ -108,6 +113,8 @@ public UICaseController(\n             message = \"Case event not found\"\n         )\n     })\n+    @LogAudit(operationType = VIEW_CASE, caseId = \"#caseId\", eventName = \"#result.body.event.eventId\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg1MzY2MQ==", "bodyText": "done", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r412853661", "createdAt": "2020-04-22T10:12:44Z", "author": {"login": "rafalkalita"}, "path": "src/main/java/uk/gov/hmcts/ccd/v2/internal/controller/UICaseController.java", "diffHunk": "@@ -108,6 +113,8 @@ public UICaseController(\n             message = \"Case event not found\"\n         )\n     })\n+    @LogAudit(operationType = VIEW_CASE, caseId = \"#caseId\", eventName = \"#result.body.event.eventId\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIzNDAwNg=="}, "originalCommit": {"oid": "23349ce04bb8b4cffe870dec50d0a476eb73a086"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTIxODQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditInterceptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDoyMjo1OVrOGKiDRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjo1MDozM1rOGKnnbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY5NjgzNg==", "bodyText": "this should be a config property rather than hardcoded?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r413696836", "createdAt": "2020-04-23T10:22:59Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditInterceptor.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+import com.google.common.collect.Lists;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.lang.Nullable;\n+import org.springframework.web.method.HandlerMethod;\n+import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;\n+import uk.gov.hmcts.ccd.auditlog.aop.AuditAspect;\n+import uk.gov.hmcts.ccd.auditlog.aop.AuditContext;\n+import uk.gov.hmcts.ccd.auditlog.aop.AuditContextHolder;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.util.List;\n+\n+import static org.springframework.http.HttpStatus.NOT_FOUND;\n+\n+public class AuditInterceptor extends HandlerInterceptorAdapter {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AuditAspect.class);\n+\n+    public static final String REQUEST_ID = \"request-id\";\n+\n+    private final AuditService auditService;\n+\n+    private static final List<HttpStatus> IGNORED_STATUSES = Lists.newArrayList(NOT_FOUND);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0a1c87aa94d93650c2bb2820ac8ad65f0a4b318"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc4ODAxMg==", "bodyText": "done", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r413788012", "createdAt": "2020-04-23T12:50:33Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditInterceptor.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+import com.google.common.collect.Lists;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.lang.Nullable;\n+import org.springframework.web.method.HandlerMethod;\n+import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;\n+import uk.gov.hmcts.ccd.auditlog.aop.AuditAspect;\n+import uk.gov.hmcts.ccd.auditlog.aop.AuditContext;\n+import uk.gov.hmcts.ccd.auditlog.aop.AuditContextHolder;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.util.List;\n+\n+import static org.springframework.http.HttpStatus.NOT_FOUND;\n+\n+public class AuditInterceptor extends HandlerInterceptorAdapter {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AuditAspect.class);\n+\n+    public static final String REQUEST_ID = \"request-id\";\n+\n+    private final AuditService auditService;\n+\n+    private static final List<HttpStatus> IGNORED_STATUSES = Lists.newArrayList(NOT_FOUND);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY5NjgzNg=="}, "originalCommit": {"oid": "e0a1c87aa94d93650c2bb2820ac8ad65f0a4b318"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTI0MzQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditOperationType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDoyOTowOFrOGKiSRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjo1Nzo0MFrOGKn7uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzcwMDY3Ng==", "bodyText": "mmm did we say to call this \"Update case access permissions\"?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r413700676", "createdAt": "2020-04-23T10:29:08Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditOperationType.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+public enum AuditOperationType {\n+    CREATE_CASE(\"Create case\"),\n+    UPDATE_CASE(\"Update case\"),\n+    CASE_ACCESSED(\"Case Accessed\"),\n+    SEARCH_CASE(\"Search case\"),\n+    UPDATE_CASE_ACCESS(\"Update case access\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0a1c87aa94d93650c2bb2820ac8ad65f0a4b318"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc5MzIwOQ==", "bodyText": "done", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r413793209", "createdAt": "2020-04-23T12:57:40Z", "author": {"login": "rafalkalita"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditOperationType.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+public enum AuditOperationType {\n+    CREATE_CASE(\"Create case\"),\n+    UPDATE_CASE(\"Update case\"),\n+    CASE_ACCESSED(\"Case Accessed\"),\n+    SEARCH_CASE(\"Search case\"),\n+    UPDATE_CASE_ACCESS(\"Update case access\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzcwMDY3Ng=="}, "originalCommit": {"oid": "e0a1c87aa94d93650c2bb2820ac8ad65f0a4b318"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTM1NTE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDo1NjozMVrOGKjUBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjoyNzoyMFrOGKmpmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzcxNzUxMA==", "bodyText": "we should use dependency injection for AuditRepository", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r413717510", "createdAt": "2020-04-23T10:56:31Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditService.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.auditlog.aop.AuditContext;\n+import uk.gov.hmcts.ccd.data.SecurityUtils;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+\n+import java.time.Clock;\n+import java.time.LocalDateTime;\n+\n+import static java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;\n+\n+@Service\n+public class AuditService {\n+\n+    private final Clock clock;\n+    private final SecurityUtils securityUtils;\n+    private final UserRepository userRepository;\n+    private final AuditRepository auditRepository;\n+\n+    public AuditService(@Qualifier(\"utcClock\") final Clock clock,\n+                        @Qualifier(CachedUserRepository.QUALIFIER) final UserRepository userRepository,\n+                        @Lazy final SecurityUtils securityUtils, final AuditRepository auditRepository) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0a1c87aa94d93650c2bb2820ac8ad65f0a4b318"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc3MjE4Nw==", "bodyText": "it does", "url": "https://github.com/hmcts/ccd-data-store-api/pull/909#discussion_r413772187", "createdAt": "2020-04-23T12:27:20Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/auditlog/AuditService.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package uk.gov.hmcts.ccd.auditlog;\n+\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.auditlog.aop.AuditContext;\n+import uk.gov.hmcts.ccd.data.SecurityUtils;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+\n+import java.time.Clock;\n+import java.time.LocalDateTime;\n+\n+import static java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;\n+\n+@Service\n+public class AuditService {\n+\n+    private final Clock clock;\n+    private final SecurityUtils securityUtils;\n+    private final UserRepository userRepository;\n+    private final AuditRepository auditRepository;\n+\n+    public AuditService(@Qualifier(\"utcClock\") final Clock clock,\n+                        @Qualifier(CachedUserRepository.QUALIFIER) final UserRepository userRepository,\n+                        @Lazy final SecurityUtils securityUtils, final AuditRepository auditRepository) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzcxNzUxMA=="}, "originalCommit": {"oid": "e0a1c87aa94d93650c2bb2820ac8ad65f0a4b318"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3825, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}