{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3Mjk5NTA5", "number": 846, "title": "RDM-7630", "bodyText": "JIRA link (if applicable)\nhttps://tools.hmcts.net/jira/browse/RDM-7630\nChange description\nDoes this PR introduce a breaking change? (check one with \"x\")\n[ ] Yes\n[x] No", "createdAt": "2020-03-12T15:08:45Z", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846", "merged": true, "mergeCommit": {"oid": "c745309d1d8e51e9721ed197c200db6dc1d4033b"}, "closed": true, "closedAt": "2020-04-15T14:52:24Z", "author": {"login": "danlysiak"}, "timelineItems": {"totalCount": 105, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcWLH1qAH2gAyMzg3Mjk5NTA5OjE5MTAxZDVmYzkxYTcxNGExZjg0YjVlNjdmYWNmNWM3ZGE4MmQ5MTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcX45yygH2gAyMzg3Mjk5NTA5OmI0ZjQ5YWM1YmJhZTViY2E3ZTlmNzEzNDg5NDk0ODMwZWRmMzQyMDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "19101d5fc91a714a1f84b5e67facf5c7da82d919", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/19101d5fc91a714a1f84b5e67facf5c7da82d919", "committedDate": "2020-04-10T06:29:56Z", "message": "RDM-8113 updated functional test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6bcba95f56c01f40df1f522ac4eaebc0d63c172", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/a6bcba95f56c01f40df1f522ac4eaebc0d63c172", "committedDate": "2020-04-10T06:54:11Z", "message": "RDM-8113 updated functional test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8220490c5ce02151f34908079418a5fbb38a95f", "author": {"user": {"login": "Olawale", "name": "Olawale Olanrewaju"}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/e8220490c5ce02151f34908079418a5fbb38a95f", "committedDate": "2020-04-15T08:44:22Z", "message": "Merge pull request #899 from hmcts/RDM-8113\n\nRDM-8113 handle display without seconds or milliseconds"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8ee11163138570d3e8a528bcb5d270f583b17a4", "author": {"user": {"login": "veeresha-hmcts", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/a8ee11163138570d3e8a528bcb5d270f583b17a4", "committedDate": "2020-04-15T12:57:25Z", "message": "Merge pull request #855 from hmcts/RDM-7694\n\nRDM-7694 - DCP for workbasket and search input/results"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4f49ac5bbae5bca7e9f713489494830edf34205", "author": {"user": {"login": "veeresha-hmcts", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/b4f49ac5bbae5bca7e9f713489494830edf34205", "committedDate": "2020-04-15T14:24:09Z", "message": "Merge pull request #851 from hmcts/RDM-7692\n\nRDM-7692 - DateTime Display Formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c74b3c983243259d93650bb9e87b3e523f0d7967", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/c74b3c983243259d93650bb9e87b3e523f0d7967", "committedDate": "2020-02-27T10:17:16Z", "message": "RDM-7630 - WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05f6febcb2bf3c73284fd3f9b710aa5572e922e3", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/05f6febcb2bf3c73284fd3f9b710aa5572e922e3", "committedDate": "2020-02-28T08:46:32Z", "message": "RDM-7630 - WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4ccdb0a8f35d08be153c281d5f1c78b19b21709", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/a4ccdb0a8f35d08be153c281d5f1c78b19b21709", "committedDate": "2020-03-09T11:51:06Z", "message": "Update simple DateTime fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12bac4712dbf4300cdf52d3782da3ffde1cdb70c", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/12bac4712dbf4300cdf52d3782da3ffde1cdb70c", "committedDate": "2020-03-10T12:22:49Z", "message": "Abstract processor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95426ea27e7b09d42f32cdf9c21029a4cced8217", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/95426ea27e7b09d42f32cdf9c21029a4cced8217", "committedDate": "2020-03-10T12:23:50Z", "message": "Missing commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9de6bab069e53e8b605e7b69166534f3846139d", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/e9de6bab069e53e8b605e7b69166534f3846139d", "committedDate": "2020-03-10T15:40:48Z", "message": "Fix build issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cde8b3ec563635ff0ead76ca53d47ab0e8fa50b2", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/cde8b3ec563635ff0ead76ca53d47ab0e8fa50b2", "committedDate": "2020-03-11T11:12:12Z", "message": "Move processor prior to commonly used validate operation; further complex type handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94dd9b0d8b16f0513f02d0cd41ffef7009c1f937", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/94dd9b0d8b16f0513f02d0cd41ffef7009c1f937", "committedDate": "2020-03-11T11:45:34Z", "message": "Merge branch 'develop' into RDM-7630"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abd0b19eedfbbb62c263b9e26fc22b7ec4118a2c", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/abd0b19eedfbbb62c263b9e26fc22b7ec4118a2c", "committedDate": "2020-03-12T15:06:03Z", "message": "Update DCP with def store equivalent; minor cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec186789cd4600d9ac965f6f1dd8b5711d6b5bee", "author": {"user": {"login": "danlysiak", "name": "Dan Lysiak"}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/ec186789cd4600d9ac965f6f1dd8b5711d6b5bee", "committedDate": "2020-03-12T15:09:03Z", "message": "Merge branch 'develop' into RDM-7630"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77086d938fd3d08cc67bddd0aa827d3f75958ccf", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/77086d938fd3d08cc67bddd0aa827d3f75958ccf", "committedDate": "2020-03-13T08:24:38Z", "message": "RDM-7630 Added unit tests for DefaultValidateCaseFieldsOperation.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2f2c451a0db6698fa9e3d506c1c3f3d653eb024", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/a2f2c451a0db6698fa9e3d506c1c3f3d653eb024", "committedDate": "2020-03-13T08:24:56Z", "message": "Merge remote-tracking branch 'origin/RDM-7630' into RDM-7630"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d3e7745e16156810a7b0ad9fb9ff1407dbe6312", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/0d3e7745e16156810a7b0ad9fb9ff1407dbe6312", "committedDate": "2020-03-13T12:24:14Z", "message": "RDM-7630 Added missing unit test scenario for DefaultCreateCaseOperationTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7df5c010bf56cef7044e9557eb6bdcdd8badcb68", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/7df5c010bf56cef7044e9557eb6bdcdd8badcb68", "committedDate": "2020-03-13T12:33:08Z", "message": "Move common functionality to abstract; handle processing errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a326a1e137393e00b257ae5b62a61be2e1d51c5c", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/a326a1e137393e00b257ae5b62a61be2e1d51c5c", "committedDate": "2020-03-13T12:33:11Z", "message": "Merge branch 'RDM-7630' of github.com:hmcts/ccd-data-store-api into RDM-7630"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d68b183daf51e9415b2840c74670f5d9e9577a3", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/8d68b183daf51e9415b2840c74670f5d9e9577a3", "committedDate": "2020-03-13T13:08:04Z", "message": "Fix some tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b397e54f9983237c31166aee24527b8658808eb", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/7b397e54f9983237c31166aee24527b8658808eb", "committedDate": "2020-03-13T13:25:59Z", "message": "Sonar fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8dcf4eb161c2eb82c65187f962f5a0fc8ce35a6f", "author": {"user": {"login": "simchandramouly-hmcts", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/8dcf4eb161c2eb82c65187f962f5a0fc8ce35a6f", "committedDate": "2020-03-16T14:38:49Z", "message": "update to DateTimeFormatParser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d732878f90c961c933e76a7e90dcd3459c206d1e", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/d732878f90c961c933e76a7e90dcd3459c206d1e", "committedDate": "2020-03-16T15:03:13Z", "message": "RDM-7630 added more unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48b540373383c4a4c36f5157b603a9bfaab0767e", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/48b540373383c4a4c36f5157b603a9bfaab0767e", "committedDate": "2020-03-17T14:31:07Z", "message": "Rename and refactor for further reuse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e351903417675640ade4355586cf05528ac7ebbc", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/e351903417675640ade4355586cf05528ac7ebbc", "committedDate": "2020-03-17T14:31:42Z", "message": "Merge branch 'RDM-7630' of github.com:hmcts/ccd-data-store-api into RDM-7630"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b534a43d4ced94ee73c81ac43095ee79c83a118", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/1b534a43d4ced94ee73c81ac43095ee79c83a118", "committedDate": "2020-03-17T14:32:42Z", "message": "Merge branch 'RDM-7630' into RDM-7692"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a544a963bc276e99cfd9e119bd8d7d56808bb4fb", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/a544a963bc276e99cfd9e119bd8d7d56808bb4fb", "committedDate": "2020-03-17T17:31:01Z", "message": "RDM-7692 - Initial functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "522955b5157bec8047e6292513c2baa7c261e58a", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/522955b5157bec8047e6292513c2baa7c261e58a", "committedDate": "2020-03-18T08:30:01Z", "message": "Add null check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebe73497b6823407f43364cb11421980d2d306cf", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/ebe73497b6823407f43364cb11421980d2d306cf", "committedDate": "2020-03-18T09:02:51Z", "message": "Move null logic for FT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f6395a3d45687530f40410c9c0c11700e339b3d", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/2f6395a3d45687530f40410c9c0c11700e339b3d", "committedDate": "2020-03-18T09:47:08Z", "message": "FT testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c44b5a00163ff993914fc3ad0299d1260e41c399", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/c44b5a00163ff993914fc3ad0299d1260e41c399", "committedDate": "2020-03-18T10:45:50Z", "message": "FT testing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NzM5MjQz", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#pullrequestreview-376739243", "createdAt": "2020-03-18T10:33:42Z", "commit": {"oid": "2f6395a3d45687530f40410c9c0c11700e339b3d"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMDozMzo0M1rOF3-97Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMDo1MzoyMlrOF3_p_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI0NzY2MQ==", "bodyText": "Cosmetic: Given that a new constructor was added we can make all attribute immutable and remove setters.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r394247661", "createdAt": "2020-03-18T10:33:43Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/CaseEventFieldComplex.java", "diffHunk": "@@ -11,15 +11,25 @@\n \n     private Integer order;\n \n+    private String displayContextParameter;\n+\n     public CaseEventFieldComplex() {\n     }\n \n     public CaseEventFieldComplex(String reference,\n-                                 Integer order) {\n+                                  Integer order) {\n         this.reference = reference;\n         this.order = order;\n     }\n \n+    public CaseEventFieldComplex(String reference,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6395a3d45687530f40410c9c0c11700e339b3d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI0ODAzOA==", "bodyText": "Not sure if checkstyle likes .*  organise imports", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r394248038", "createdAt": "2020-03-18T10:34:28Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/CaseTypeTab.java", "diffHunk": "@@ -1,7 +1,7 @@\n package uk.gov.hmcts.ccd.domain.model.definition;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n-import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.*;\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6395a3d45687530f40410c9c0c11700e339b3d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI0ODQ5Mg==", "bodyText": "Do we need the  @ApiModelProperty(value = \"\") ?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r394248492", "createdAt": "2020-03-18T10:35:18Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/CriteriaField.java", "diffHunk": "@@ -69,4 +70,14 @@ public String getRole() {\n     public void setRole(final String role) {\n         this.role = role;\n     }\n+\n+    @ApiModelProperty(value = \"\")\n+    @JsonProperty(\"display_context_parameter\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6395a3d45687530f40410c9c0c11700e339b3d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI0OTQ5OQ==", "bodyText": "Not sure if checkstyle likes .*  organise imports", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r394249499", "createdAt": "2020-03-18T10:37:03Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/createcase/DefaultCreateCaseOperation.java", "diffHunk": "@@ -14,9 +14,7 @@\n import uk.gov.hmcts.ccd.data.user.UserRepository;\n import uk.gov.hmcts.ccd.domain.model.aggregated.IdamUser;\n import uk.gov.hmcts.ccd.domain.model.callbacks.AfterSubmitCallbackResponse;\n-import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n-import uk.gov.hmcts.ccd.domain.model.definition.CaseEvent;\n-import uk.gov.hmcts.ccd.domain.model.definition.CaseType;\n+import uk.gov.hmcts.ccd.domain.model.definition.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6395a3d45687530f40410c9c0c11700e339b3d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1MjE0Nw==", "bodyText": "Do we need the @ApiModelProperty(value = \"\") as value=\"\" ?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r394252147", "createdAt": "2020-03-18T10:41:29Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/WorkbasketInputDefinition.java", "diffHunk": "@@ -37,4 +38,16 @@ public void setCaseTypeId(String caseTypeId) {\n     public void setFields(List<WorkbasketInputField> fields) {\n         this.fields = fields;\n     }\n+\n+    /**\n+     **/\n+    @ApiModelProperty(value = \"\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6395a3d45687530f40410c9c0c11700e339b3d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1MjQ1OA==", "bodyText": "@ApiModelProperty(value = \"\")  do we need the value=\"\" ?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r394252458", "createdAt": "2020-03-18T10:42:03Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/SearchInputDefinition.java", "diffHunk": "@@ -40,4 +41,16 @@ public void setFields(List<SearchInputField> fields) {\n         this.fields = fields;\n     }\n \n+    /**\n+     **/\n+    @ApiModelProperty(value = \"\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6395a3d45687530f40410c9c0c11700e339b3d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1NjUyNQ==", "bodyText": "I am not sure about the  requirements . Can we create a \"\" format ?  Would that be default ? or it will lead directly in exception.   If we know before it we can treat it  as  throw new DataProcessingException() . in Common  error handling place.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r394256525", "createdAt": "2020-03-18T10:49:13Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DateTimeEntryProcessor.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CaseViewFieldBuilder;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.types.BaseType;\n+import uk.gov.hmcts.ccd.domain.types.CollectionValidator;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DataProcessingException;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static uk.gov.hmcts.ccd.domain.model.definition.FieldType.*;\n+import static uk.gov.hmcts.ccd.domain.service.processor.DisplayContextParameter.*;\n+\n+@Component\n+public class DateTimeEntryProcessor extends CaseDataFieldProcessor {\n+\n+    private static final List<String> SUPPORTED_TYPES = Arrays.asList(DATETIME, DATE);\n+\n+    private final DateTimeFormatParser dateTimeFormatParser;\n+\n+    @Autowired\n+    public DateTimeEntryProcessor(CaseViewFieldBuilder caseViewFieldBuilder,\n+                                  DateTimeFormatParser dateTimeFormatParser) {\n+        super(caseViewFieldBuilder);\n+        this.dateTimeFormatParser = dateTimeFormatParser;\n+    }\n+\n+    @Override\n+    protected JsonNode executeSimple(JsonNode node, CommonField field, BaseType baseType, String fieldPath) {\n+        return !isNullOrEmpty(node)\n+            && hasDisplayContextParameterType(field.getDisplayContextParameter(), DisplayContextParameterType.DATETIMEENTRY)\n+            && isSupportedBaseType(baseType, SUPPORTED_TYPES) ?\n+            createNode(field.getDisplayContextParameter(), node.asText(), baseType, fieldPath) :\n+            node;\n+    }\n+\n+    @Override\n+    protected JsonNode executeCollection(JsonNode collectionNode, CommonField caseViewField, String fieldPath) {\n+        final BaseType collectionFieldType = BaseType.get(caseViewField.getFieldType().getCollectionFieldType().getType());\n+\n+        if (hasDisplayContextParameterType(caseViewField.getDisplayContextParameter(), DisplayContextParameterType.DATETIMEENTRY)\n+            && isSupportedBaseType(collectionFieldType, SUPPORTED_TYPES)) {\n+            ArrayNode newNode = MAPPER.createArrayNode();\n+            collectionNode.forEach(item -> {\n+                JsonNode newItem = item.deepCopy();\n+                ((ObjectNode)newItem).replace(CollectionValidator.VALUE,\n+                    createNode(caseViewField.getDisplayContextParameter(), item.get(CollectionValidator.VALUE).asText(), collectionFieldType, fieldPath));\n+                newNode.add(newItem);\n+            });\n+\n+            return newNode;\n+        }\n+\n+        return collectionNode;\n+    }\n+\n+    private TextNode createNode(String displayContextParameter, String valueToConvert, BaseType baseType, String fieldPath) {\n+        String format = getDisplayContextParameterOfType(displayContextParameter, DisplayContextParameterType.DATETIMEENTRY)\n+            .map(DisplayContextParameter::getValue)\n+            .orElse(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6395a3d45687530f40410c9c0c11700e339b3d"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1Nzc5OA==", "bodyText": "The same .* .", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r394257798", "createdAt": "2020-03-18T10:51:27Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DateTimeEntryProcessor.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CaseViewFieldBuilder;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.types.BaseType;\n+import uk.gov.hmcts.ccd.domain.types.CollectionValidator;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DataProcessingException;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static uk.gov.hmcts.ccd.domain.model.definition.FieldType.*;\n+import static uk.gov.hmcts.ccd.domain.service.processor.DisplayContextParameter.*;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6395a3d45687530f40410c9c0c11700e339b3d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1ODk0MA==", "bodyText": "you can organise imports in inteliJ and add the option to  implicit add each import . It is very cosmetic but sometimes checkstyle tends to complaint about \" .* \" .", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r394258940", "createdAt": "2020-03-18T10:53:22Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DisplayContextParameterType.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.google.common.base.Strings;\n+\n+import java.util.*;\n+import java.util.regex.Matcher;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6395a3d45687530f40410c9c0c11700e339b3d"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a775e2360f6dd74746700acb4662434a36836557", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/a775e2360f6dd74746700acb4662434a36836557", "committedDate": "2020-03-18T12:16:07Z", "message": "Use Optional"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81dab26d46c14ae631706fa8ee83b5d711dacc68", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/81dab26d46c14ae631706fa8ee83b5d711dacc68", "committedDate": "2020-03-18T12:16:22Z", "message": "Merge branch 'RDM-7630' into RDM-7692"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2OTUyNDA0", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#pullrequestreview-376952404", "createdAt": "2020-03-18T15:03:58Z", "commit": {"oid": "a775e2360f6dd74746700acb4662434a36836557"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTowMzo1OVrOF4JN4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTowMzo1OVrOF4JN4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQxNTU4NA==", "bodyText": "protected boolean isNullOrEmpty(final JsonNode node)  is quite duplicated any. any places . We could create a util class .", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r394415584", "createdAt": "2020-03-18T15:03:59Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/FieldProcessor.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CaseViewField;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CaseViewFieldBuilder;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventField;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseField;\n+import uk.gov.hmcts.ccd.domain.model.definition.WizardPageField;\n+import uk.gov.hmcts.ccd.domain.types.BaseType;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static uk.gov.hmcts.ccd.domain.model.definition.FieldType.*;\n+\n+public abstract class FieldProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+    protected static final String FIELD_SEPARATOR = \".\";\n+\n+    private final CaseViewFieldBuilder caseViewFieldBuilder;\n+\n+    public FieldProcessor(CaseViewFieldBuilder caseViewFieldBuilder) {\n+        this.caseViewFieldBuilder = caseViewFieldBuilder;\n+    }\n+\n+    public JsonNode execute(JsonNode node, CaseField caseField, CaseEventField caseEventField, WizardPageField wizardPageField) {\n+        CaseViewField caseViewField = caseViewFieldBuilder.build(caseField, caseEventField);\n+\n+        if (!BaseType.contains(caseViewField.getFieldType().getType())) {\n+            return node;\n+        }\n+\n+        final BaseType fieldType = BaseType.get(caseViewField.getFieldType().getType());\n+\n+        if (BaseType.get(COMPLEX) == fieldType) {\n+            return executeComplex(node, caseField.getFieldType().getComplexFields(), caseEventField, wizardPageField, caseField.getId());\n+        } else if (BaseType.get(COLLECTION) == fieldType) {\n+            return executeCollection(node, caseViewField, caseField.getId());\n+        } else {\n+            return executeSimple(node, caseViewField, fieldType, caseField.getId());\n+        }\n+    }\n+\n+    protected JsonNode executeComplex(JsonNode complexNode,\n+                                      List<CaseField> complexCaseFields,\n+                                      CaseEventField caseEventField,\n+                                      WizardPageField wizardPageField,\n+                                      String fieldPrefix) {\n+        if (complexNode == null) {\n+            return null;\n+        }\n+        ObjectNode newNode = MAPPER.createObjectNode();\n+        complexCaseFields.stream().forEach(complexCaseField -> {\n+            final BaseType complexFieldType = BaseType.get(complexCaseField.getFieldType().getType());\n+            final String fieldId = complexCaseField.getId();\n+            final JsonNode caseFieldNode = complexNode.get(fieldId);\n+            final String fieldPath = fieldPrefix + FIELD_SEPARATOR + fieldId;\n+\n+            if (complexFieldType == BaseType.get(COLLECTION)) {\n+                newNode.set(fieldId, executeCollection(caseFieldNode, complexCaseField, fieldPath));\n+            } else if (complexFieldType == BaseType.get(COMPLEX)) {\n+                Optional.ofNullable(\n+                    executeComplex(caseFieldNode, complexCaseField.getFieldType().getComplexFields(), caseEventField, wizardPageField, fieldPath))\n+                    .ifPresent(result -> newNode.set(fieldId, result));\n+            } else {\n+                newNode.set(fieldId, executeSimple(caseFieldNode, complexCaseField, complexFieldType, fieldPath));\n+            }\n+        });\n+\n+        return newNode;\n+    }\n+\n+    protected abstract JsonNode executeSimple(JsonNode node, CommonField field, BaseType baseType, String fieldPath);\n+\n+    protected abstract JsonNode executeCollection(JsonNode collectionNode, CommonField field, String fieldPath);\n+\n+    protected boolean isNullOrEmpty(final JsonNode node) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a775e2360f6dd74746700acb4662434a36836557"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjgwNTU3", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#pullrequestreview-377280557", "createdAt": "2020-03-18T22:27:20Z", "commit": {"oid": "a775e2360f6dd74746700acb4662434a36836557"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjozMzoxMVrOF4ZN-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMjowMDozOFrOF4rWYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3Nzc1NQ==", "bodyText": "Better to create one code template file so that every one can use the same template file in their IDE. So all these import specific warnings/error messages will be handled properly", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r394677755", "createdAt": "2020-03-18T22:33:11Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/createcase/DefaultCreateCaseOperation.java", "diffHunk": "@@ -14,9 +14,7 @@\n import uk.gov.hmcts.ccd.data.user.UserRepository;\n import uk.gov.hmcts.ccd.domain.model.aggregated.IdamUser;\n import uk.gov.hmcts.ccd.domain.model.callbacks.AfterSubmitCallbackResponse;\n-import uk.gov.hmcts.ccd.domain.model.definition.CaseDetails;\n-import uk.gov.hmcts.ccd.domain.model.definition.CaseEvent;\n-import uk.gov.hmcts.ccd.domain.model.definition.CaseType;\n+import uk.gov.hmcts.ccd.domain.model.definition.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI0OTQ5OQ=="}, "originalCommit": {"oid": "2f6395a3d45687530f40410c9c0c11700e339b3d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4MDU3Nw==", "bodyText": "Better to throw the exception from this method. Rather than catching global Exception from the calling method.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r394680577", "createdAt": "2020-03-18T22:41:17Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DateTimeFormatParser.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.format.DateTimeParseException;\n+import java.time.temporal.ChronoField;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class DateTimeFormatParser {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DateTimeFormatParser.class);\n+\n+    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";\n+    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n+\n+    public void parseDateTimeFormat(String dateTimeFormat, String value) throws Exception {\n+        try {\n+            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(dateTimeFormat);\n+            formatter.parse(value);\n+        } catch (IllegalArgumentException | DateTimeParseException e) {\n+            LOG.error(\"Error occurred while parsing date time format \" + dateTimeFormat, e);\n+            throw new Exception(dateTimeFormat);\n+        }\n+    }\n+\n+    public String convertDateTimeToIso8601(String dateTimeFormat, String value) {\n+        DateTimeFormatter inputFormat = new DateTimeFormatterBuilder()\n+            .appendPattern(dateTimeFormat)\n+            .parseDefaulting(ChronoField.YEAR_OF_ERA, LocalDate.now().getYear())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a775e2360f6dd74746700acb4662434a36836557"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4MDYzMg==", "bodyText": "Better to throw the exception from this method. Rather than catching global Exception from the calling method.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r394680632", "createdAt": "2020-03-18T22:41:28Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DateTimeFormatParser.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.format.DateTimeParseException;\n+import java.time.temporal.ChronoField;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class DateTimeFormatParser {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DateTimeFormatParser.class);\n+\n+    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";\n+    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n+\n+    public void parseDateTimeFormat(String dateTimeFormat, String value) throws Exception {\n+        try {\n+            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(dateTimeFormat);\n+            formatter.parse(value);\n+        } catch (IllegalArgumentException | DateTimeParseException e) {\n+            LOG.error(\"Error occurred while parsing date time format \" + dateTimeFormat, e);\n+            throw new Exception(dateTimeFormat);\n+        }\n+    }\n+\n+    public String convertDateTimeToIso8601(String dateTimeFormat, String value) {\n+        DateTimeFormatter inputFormat = new DateTimeFormatterBuilder()\n+            .appendPattern(dateTimeFormat)\n+            .parseDefaulting(ChronoField.YEAR_OF_ERA, LocalDate.now().getYear())\n+            .parseDefaulting(ChronoField.MONTH_OF_YEAR, LocalDate.now().getMonthValue())\n+            .parseDefaulting(ChronoField.DAY_OF_MONTH, LocalDate.now().getDayOfMonth())\n+            .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)\n+            .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)\n+            .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)\n+            .parseDefaulting(ChronoField.MILLI_OF_SECOND, 0)\n+            .toFormatter();\n+\n+        LocalDateTime dateTime = LocalDateTime.parse(value, inputFormat);\n+        return dateTime.format(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT));\n+    }\n+\n+    public String convertDateToIso8601(String dateFormat, String value) {\n+        DateTimeFormatter inputFormat = new DateTimeFormatterBuilder()\n+            .appendPattern(dateFormat)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a775e2360f6dd74746700acb4662434a36836557"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4MjIwOQ==", "bodyText": "Do we really need to throw IllegalArgumentException here? as it is RuntimeException, if you want to customise the behaviour on exception. Handle that here itself", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r394682209", "createdAt": "2020-03-18T22:46:16Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DisplayContextParameterType.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.google.common.base.Strings;\n+\n+import java.util.*;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public enum DisplayContextParameterType {\n+    DATETIMEENTRY,\n+    DATETIMEDISPLAY,\n+    TABLE,\n+    LIST;\n+\n+    private static final Pattern PATTERN = Pattern.compile(\"#(.+)\\\\((.+)\\\\)\");\n+    private static final int TYPE_GROUP = 1;\n+    private static final int VALUE_GROUP = 2;\n+\n+    public static Optional<DisplayContextParameterType> getParameterTypeFor(String displayContextParameter) {\n+        Matcher m = PATTERN.matcher(displayContextParameter);\n+        if (m.matches()) {\n+            try {\n+                return Optional.of(valueOf(m.group(TYPE_GROUP)));\n+            } catch (IllegalArgumentException e) {\n+                return Optional.empty();\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    public static Optional<String> getParameterValueFor(String displayContextParameter) throws IllegalArgumentException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a775e2360f6dd74746700acb4662434a36836557"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4NjU3MA==", "bodyText": "Can we use this option to rename this class to something meaningful. Better to move all constants to enum.\nName is misleading.. This class has more functionality than simple Type class.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r394686570", "createdAt": "2020-03-18T22:58:49Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/FieldType.java", "diffHunk": "@@ -26,6 +26,8 @@\n     public static final String PREDEFINED_COMPLEX_ADDRESS_UK = \"AddressUK\";\n     public static final String PREDEFINED_COMPLEX_ORDER_SUMMARY = \"OrderSummary\";\n     public static final String PREDEFINED_COMPLEX_CASELINK = \"CaseLink\";\n+    public static final String DATETIME = \"DateTime\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a775e2360f6dd74746700acb4662434a36836557"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4Nzc3Mw==", "bodyText": "instead of defining the displayContextParameter in each class, Can we create an AbstractDisplayContextParamterField and extend that class?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r394687773", "createdAt": "2020-03-18T23:02:24Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/SearchResultField.java", "diffHunk": "@@ -98,4 +100,12 @@ public String buildCaseFieldId() {\n         }\n         return getCaseFieldId();\n     }\n+\n+    public String getDisplayContextParameter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a775e2360f6dd74746700acb4662434a36836557"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4OTE0Ng==", "bodyText": "Do we need CaseDataFieldProcessor class? instead we can extend directly from FieldProcessor class.\nCaseDataFieldProcessor has no specific logic implemented...", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r394689146", "createdAt": "2020-03-18T23:06:33Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DateTimeEntryProcessor.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CaseViewFieldBuilder;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.types.BaseType;\n+import uk.gov.hmcts.ccd.domain.types.CollectionValidator;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DataProcessingException;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static uk.gov.hmcts.ccd.domain.model.definition.FieldType.*;\n+import static uk.gov.hmcts.ccd.domain.service.processor.DisplayContextParameter.*;\n+\n+@Component\n+public class DateTimeEntryProcessor extends CaseDataFieldProcessor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a775e2360f6dd74746700acb4662434a36836557"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk1MTU2OQ==", "bodyText": "isNullOrEmpty check is already done in getDisplayContextParameterOfType. No need to call this again here.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r394951569", "createdAt": "2020-03-19T11:14:53Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DisplayContextParameter.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.google.common.base.Strings;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static uk.gov.hmcts.ccd.domain.service.processor.DisplayContextParameterType.getParameterTypeFor;\n+import static uk.gov.hmcts.ccd.domain.service.processor.DisplayContextParameterType.getParameterValueFor;\n+\n+public class DisplayContextParameter {\n+\n+    private DisplayContextParameterType type;\n+\n+    private String value;\n+\n+    public DisplayContextParameter(DisplayContextParameterType type, String value) {\n+        this.type = type;\n+        this.value = value;\n+    }\n+\n+    public DisplayContextParameterType getType() {\n+        return type;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public static List<DisplayContextParameter> getDisplayContextParameterFor(String displayContextParameter) {\n+        List<DisplayContextParameter> displayContextParameterTypeList = new ArrayList<>();\n+\n+        String[] displayContextParameters = displayContextParameter.split(\",\");\n+        for (String s : displayContextParameters) {\n+            Optional<DisplayContextParameterType> type = getParameterTypeFor(s);\n+            Optional<String> value = getParameterValueFor(s);\n+\n+            if (!type.isPresent() || !value.isPresent()) {\n+                displayContextParameterTypeList.add(new DisplayContextParameter(null, null));\n+            } else {\n+                displayContextParameterTypeList.add(new DisplayContextParameter(type.get(), value.get()));\n+            }\n+\n+        }\n+        return displayContextParameterTypeList;\n+    }\n+\n+    public static Optional<DisplayContextParameter> getDisplayContextParameterOfType(String displayContextParameter,\n+                                                                                     DisplayContextParameterType type) {\n+        return Strings.isNullOrEmpty(displayContextParameter) ?\n+            Optional.empty() :\n+            getDisplayContextParameterFor(displayContextParameter).stream()\n+                .filter(param -> param.getType() == type)\n+                .findAny();\n+    }\n+\n+    public static boolean hasDisplayContextParameterType(String displayContextParameter, DisplayContextParameterType type) {\n+        return !Strings.isNullOrEmpty(displayContextParameter) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a775e2360f6dd74746700acb4662434a36836557"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk2NjE1NA==", "bodyText": "we can make this method private. as this call either executeCollection or executeSimple only.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r394966154", "createdAt": "2020-03-19T11:43:02Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/FieldProcessor.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CaseViewField;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CaseViewFieldBuilder;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventField;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseField;\n+import uk.gov.hmcts.ccd.domain.model.definition.WizardPageField;\n+import uk.gov.hmcts.ccd.domain.types.BaseType;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static uk.gov.hmcts.ccd.domain.model.definition.FieldType.*;\n+\n+public abstract class FieldProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+    protected static final String FIELD_SEPARATOR = \".\";\n+\n+    private final CaseViewFieldBuilder caseViewFieldBuilder;\n+\n+    public FieldProcessor(CaseViewFieldBuilder caseViewFieldBuilder) {\n+        this.caseViewFieldBuilder = caseViewFieldBuilder;\n+    }\n+\n+    public JsonNode execute(JsonNode node, CaseField caseField, CaseEventField caseEventField, WizardPageField wizardPageField) {\n+        CaseViewField caseViewField = caseViewFieldBuilder.build(caseField, caseEventField);\n+\n+        if (!BaseType.contains(caseViewField.getFieldType().getType())) {\n+            return node;\n+        }\n+\n+        final BaseType fieldType = BaseType.get(caseViewField.getFieldType().getType());\n+\n+        if (BaseType.get(COMPLEX) == fieldType) {\n+            return executeComplex(node, caseField.getFieldType().getComplexFields(), caseEventField, wizardPageField, caseField.getId());\n+        } else if (BaseType.get(COLLECTION) == fieldType) {\n+            return executeCollection(node, caseViewField, caseField.getId());\n+        } else {\n+            return executeSimple(node, caseViewField, fieldType, caseField.getId());\n+        }\n+    }\n+\n+    protected JsonNode executeComplex(JsonNode complexNode,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a775e2360f6dd74746700acb4662434a36836557"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk2OTQ4MQ==", "bodyText": "Why we need to call with 'null'. Default value is 'null. anyway.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r394969481", "createdAt": "2020-03-19T11:49:38Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/aggregated/DefaultGetCaseViewOperationTest.java", "diffHunk": "@@ -161,6 +161,7 @@ void shouldHydrateCaseHistoryViewerIfFieldPresentInTabs() {\n                                                                                                                            .withType(\n                                                                                                                                CASE_HISTORY_VIEWER)\n                                                                                                                            .build())\n+                                                                                                        .withDisplayContextParameter(null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a775e2360f6dd74746700acb4662434a36836557"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk2OTUxOA==", "bodyText": "Why we need to call with 'null'. Default value is 'null. anyway.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r394969518", "createdAt": "2020-03-19T11:49:43Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/aggregated/DefaultGetCaseViewOperationTest.java", "diffHunk": "@@ -194,6 +195,7 @@ void shouldNotHydrateCaseHistoryViewerIfFieldIsNotPresentInTabs() {\n                                                                                                                            .withType(\n                                                                                                                                \"NotACaseHistoryViewer\")\n                                                                                                                            .build())\n+                                                                                                        .withDisplayContextParameter(null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a775e2360f6dd74746700acb4662434a36836557"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk3MDQ1NQ==", "bodyText": "Why we need to call with 'null'. Default value is 'null. anyway.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r394970455", "createdAt": "2020-03-19T11:51:44Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/common/TestBuildersUtil.java", "diffHunk": "@@ -1432,6 +1442,7 @@ private CaseTypeTabBuilder() {\n             this.caseTypeTabFields = newArrayList();\n             this.caseTypeTab = new CaseTypeTab();\n             this.caseTypeTab.setTabFields(caseTypeTabFields);\n+            this.caseTypeTab.setDisplayContextParameter(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a775e2360f6dd74746700acb4662434a36836557"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk3NDgxOA==", "bodyText": "Please add test cases for convertDateToIso8601 and some failure cases as well for the below exceptions\nIllegalArgumentException and DateTimeParseException", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r394974818", "createdAt": "2020-03-19T12:00:38Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/processor/DateTimeFormatParserTest.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.*;\n+import static org.junit.jupiter.api.Assertions.assertAll;\n+\n+class DateTimeFormatParserTest {\n+\n+    private DateTimeFormatParser dateTimeFormatParser;\n+\n+    @BeforeEach\n+    void setUp() {\n+        dateTimeFormatParser = new DateTimeFormatParser();\n+    }\n+\n+    @Test\n+    void shouldConvertDateTimeToIso8601() {\n+        final String dateTimeFormat = \"HHmmssSSS dd/MM/yyyy\";\n+        final String value = \"123059000 20/10/2000\";\n+\n+        final String result = dateTimeFormatParser.convertDateTimeToIso8601(dateTimeFormat, value);\n+\n+        assertAll(\n+            () -> assertThat(result, is(\"2000-10-20T12:30:59.000\"))\n+        );\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a775e2360f6dd74746700acb4662434a36836557"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c36866b5b2485925b25e2d9b50e18c6a116d7fe7", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/c36866b5b2485925b25e2d9b50e18c6a116d7fe7", "committedDate": "2020-03-20T09:33:45Z", "message": "Support for complex type overrides; rename to formatted_value"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5400186a1b506d62dd02859850cf063ac53cf350", "author": {"user": {"login": "simchandramouly-hmcts", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/5400186a1b506d62dd02859850cf063ac53cf350", "committedDate": "2020-03-20T17:54:23Z", "message": "DateTimeFormatParserTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74d37003a74c8d8b6ad6063688b8d2255047f707", "author": {"user": {"login": "simchandramouly-hmcts", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/74d37003a74c8d8b6ad6063688b8d2255047f707", "committedDate": "2020-03-20T17:54:45Z", "message": "Merge remote-tracking branch 'origin/RDM-7692' into RDM-7692"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c92dacfea4f55e13046b21504c32073fbda136a", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/6c92dacfea4f55e13046b21504c32073fbda136a", "committedDate": "2020-03-22T15:14:27Z", "message": "Merge branch 'RDM-7575-DateTime-Formatting' into RDM-7630"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/ed5bc5d03506d66331469da5ac87a9928cd38036", "committedDate": "2020-03-22T15:27:05Z", "message": "Some review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a821060c503e267e4e136e933a3dd7990b75e76c", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/a821060c503e267e4e136e933a3dd7990b75e76c", "committedDate": "2020-03-22T15:36:21Z", "message": "Merge branch 'RDM-7630' into RDM-7692"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0612b3e41728e1b153e3641026b44854b1e96a5", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/c0612b3e41728e1b153e3641026b44854b1e96a5", "committedDate": "2020-03-22T22:31:21Z", "message": "Unit tests and minor refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e8f6cb84763a0137ddc1f67375f925406b31646", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/8e8f6cb84763a0137ddc1f67375f925406b31646", "committedDate": "2020-03-22T23:39:10Z", "message": "Update FT data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "175a662112b2cdcc5ba99435df0e9a8952530b46", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/175a662112b2cdcc5ba99435df0e9a8952530b46", "committedDate": "2020-03-23T08:41:31Z", "message": "RDM-7694 - DCP for workbasket and search input/results"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MjMwMzgw", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#pullrequestreview-379230380", "createdAt": "2020-03-23T08:53:40Z", "commit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwODo1Mzo0MFrOF57xPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwODo1Mzo0MFrOF57xPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI5MjQxNA==", "bodyText": "minor:\nconsider introducing a builder for CaseEventFieldComplex rather than telescoping constructors:\nhttps://www.vojtechruzicka.com/avoid-telescoping-constructor-pattern/", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r396292414", "createdAt": "2020-03-23T08:53:40Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/CaseEventFieldComplex.java", "diffHunk": "@@ -11,15 +11,25 @@\n \n     private Integer order;\n \n+    private String displayContextParameter;\n+\n     public CaseEventFieldComplex() {\n     }\n \n     public CaseEventFieldComplex(String reference,\n-                                 Integer order) {\n+                                  Integer order) {\n         this.reference = reference;\n         this.order = order;\n     }\n \n+    public CaseEventFieldComplex(String reference,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MzI5Mzc3", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#pullrequestreview-379329377", "createdAt": "2020-03-23T11:09:07Z", "commit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMTowOTowN1rOF6AoAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMTowOTowN1rOF6AoAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM3MTk2OA==", "bodyText": "can we use\ncaseField.isCollectionFieldType()\ncaseField.isComplexFieldType()\n?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r396371968", "createdAt": "2020-03-23T11:09:07Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/FieldProcessor.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CaseViewField;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CaseViewFieldBuilder;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventField;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseField;\n+import uk.gov.hmcts.ccd.domain.model.definition.WizardPageField;\n+import uk.gov.hmcts.ccd.domain.types.BaseType;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static uk.gov.hmcts.ccd.domain.model.definition.FieldType.*;\n+\n+public abstract class FieldProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+    protected static final String FIELD_SEPARATOR = \".\";\n+\n+    private final CaseViewFieldBuilder caseViewFieldBuilder;\n+\n+    public FieldProcessor(CaseViewFieldBuilder caseViewFieldBuilder) {\n+        this.caseViewFieldBuilder = caseViewFieldBuilder;\n+    }\n+\n+    public JsonNode execute(JsonNode node, CaseField caseField, CaseEventField caseEventField, WizardPageField wizardPageField) {\n+        CaseViewField caseViewField = caseViewFieldBuilder.build(caseField, caseEventField);\n+\n+        if (!BaseType.contains(caseViewField.getFieldType().getType())) {\n+            return node;\n+        }\n+\n+        final BaseType fieldType = BaseType.get(caseViewField.getFieldType().getType());\n+\n+        if (BaseType.get(COMPLEX) == fieldType) {\n+            return executeComplex(node, caseField.getFieldType().getComplexFields(), caseEventField, wizardPageField, caseField.getId());\n+        } else if (BaseType.get(COLLECTION) == fieldType) {\n+            return executeCollection(node, caseViewField, caseField.getId());\n+        } else {\n+            return executeSimple(node, caseViewField, fieldType, caseField.getId());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MzU2NjU3", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#pullrequestreview-379356657", "createdAt": "2020-03-23T11:50:42Z", "commit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMTo1MDo0MlrOF6B-Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMTo1MDo0MlrOF6B-Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM5NDA0Mw==", "bodyText": "To improve code readability it is essential to introduce utility methods to the domain classes whenever possible.\nhasDisplayContextParameterType could be removed. We could introduce a method in DisplayContextParameter class that allows to check the type of a DCP. For example:\ndisplayContextParameter.hasType(DisplayContextParameterType.DATETIMEENTRY)\nThen we could add a method to CommonField that returns the display context parameter as an instance of DisplayContextParameter other than a String.\nIf we do that this will simplify in:\nfield.getDisplayContextParameter.hasType(DisplayContextParameterType.DATETIMEENTRY)\nThis is much more reusable and readable", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r396394043", "createdAt": "2020-03-23T11:50:42Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DateTimeEntryProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CaseViewFieldBuilder;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.types.BaseType;\n+import uk.gov.hmcts.ccd.domain.types.CollectionValidator;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DataProcessingException;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static uk.gov.hmcts.ccd.domain.model.definition.FieldType.*;\n+import static uk.gov.hmcts.ccd.domain.service.processor.DisplayContextParameter.*;\n+\n+@Component\n+public class DateTimeEntryProcessor extends CaseDataFieldProcessor {\n+\n+    private static final List<String> SUPPORTED_TYPES = Arrays.asList(DATETIME, DATE);\n+\n+    private final DateTimeFormatParser dateTimeFormatParser;\n+\n+    @Autowired\n+    public DateTimeEntryProcessor(CaseViewFieldBuilder caseViewFieldBuilder,\n+                                  DateTimeFormatParser dateTimeFormatParser) {\n+        super(caseViewFieldBuilder);\n+        this.dateTimeFormatParser = dateTimeFormatParser;\n+    }\n+\n+    @Override\n+    protected JsonNode executeSimple(JsonNode node, CommonField field, BaseType baseType, String fieldPath) {\n+        return !isNullOrEmpty(node)\n+            && hasDisplayContextParameterType(field.getDisplayContextParameter(), DisplayContextParameterType.DATETIMEENTRY)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NDAyOTU5", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#pullrequestreview-379402959", "createdAt": "2020-03-23T12:58:26Z", "commit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMjo1ODoyNlrOF6ENXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMjo1ODoyNlrOF6ENXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQzMDY4NA==", "bodyText": "getDisplayContextParameterOfType(displayContextParameter, DisplayContextParameterType.DATETIMEENTRY)\nI think the code would be simpler if CommonField had the diplay context parameter already converted into a list of DisplayContextParameter rather than a raw String. Same as it has a List<AccessControlList>.\nIf that was the case, then CommonField could have a method getDisplayContextParameterOfType(DisplayContextParameterType.DATETIMEENTRY)", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r396430684", "createdAt": "2020-03-23T12:58:26Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DateTimeEntryProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CaseViewFieldBuilder;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.types.BaseType;\n+import uk.gov.hmcts.ccd.domain.types.CollectionValidator;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DataProcessingException;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static uk.gov.hmcts.ccd.domain.model.definition.FieldType.*;\n+import static uk.gov.hmcts.ccd.domain.service.processor.DisplayContextParameter.*;\n+\n+@Component\n+public class DateTimeEntryProcessor extends CaseDataFieldProcessor {\n+\n+    private static final List<String> SUPPORTED_TYPES = Arrays.asList(DATETIME, DATE);\n+\n+    private final DateTimeFormatParser dateTimeFormatParser;\n+\n+    @Autowired\n+    public DateTimeEntryProcessor(CaseViewFieldBuilder caseViewFieldBuilder,\n+                                  DateTimeFormatParser dateTimeFormatParser) {\n+        super(caseViewFieldBuilder);\n+        this.dateTimeFormatParser = dateTimeFormatParser;\n+    }\n+\n+    @Override\n+    protected JsonNode executeSimple(JsonNode node, CommonField field, BaseType baseType, String fieldPath) {\n+        return !isNullOrEmpty(node)\n+            && hasDisplayContextParameterType(field.getDisplayContextParameter(), DisplayContextParameterType.DATETIMEENTRY)\n+            && isSupportedBaseType(baseType, SUPPORTED_TYPES) ?\n+            createNode(field.getDisplayContextParameter(), node.asText(), baseType, fieldPath) :\n+            node;\n+    }\n+\n+    @Override\n+    protected JsonNode executeCollection(JsonNode collectionNode, CommonField caseViewField, String fieldPath) {\n+        final BaseType collectionFieldType = BaseType.get(caseViewField.getFieldType().getCollectionFieldType().getType());\n+\n+        if (hasDisplayContextParameterType(caseViewField.getDisplayContextParameter(), DisplayContextParameterType.DATETIMEENTRY)\n+            && isSupportedBaseType(collectionFieldType, SUPPORTED_TYPES)) {\n+            ArrayNode newNode = MAPPER.createArrayNode();\n+            collectionNode.forEach(item -> {\n+                JsonNode newItem = item.deepCopy();\n+                ((ObjectNode)newItem).replace(CollectionValidator.VALUE,\n+                    createNode(caseViewField.getDisplayContextParameter(), item.get(CollectionValidator.VALUE).asText(), collectionFieldType, fieldPath));\n+                newNode.add(newItem);\n+            });\n+\n+            return newNode;\n+        }\n+\n+        return collectionNode;\n+    }\n+\n+    private TextNode createNode(String displayContextParameter, String valueToConvert, BaseType baseType, String fieldPath) {\n+        String format = getDisplayContextParameterOfType(displayContextParameter, DisplayContextParameterType.DATETIMEENTRY)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NDE1NzUy", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#pullrequestreview-379415752", "createdAt": "2020-03-23T13:15:07Z", "commit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMzoxNTowN1rOF6E0Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMzoxNTowN1rOF6E0Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ0MDY2Mg==", "bodyText": "If I'm not wrong here we are failing the case update operation if the date field is not in the format specified in the DisplayContextParameter. This won't be an issue with the UI because it's going to send us the date fields in the correct format.\nBut what about Services that are invoking the update event programmatically? They will still be passing unformatted date fields probably (in ISO8601 format)? will those calls throw exception?\nIn case the date is already in ISO8601 format, does the dateTimeFormatParser.convertDateTimeToIso8601 throws exception?\nWe should allow date fields that are already in ISO8601 format rather than throwing exception. Can you make sure we have an integration test for this please.\nWe need to speak with BAs to understand the behaviour in this situation and state it clearly in the ticket for future reference", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r396440662", "createdAt": "2020-03-23T13:15:07Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DateTimeEntryProcessor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CaseViewFieldBuilder;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.types.BaseType;\n+import uk.gov.hmcts.ccd.domain.types.CollectionValidator;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.DataProcessingException;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static uk.gov.hmcts.ccd.domain.model.definition.FieldType.*;\n+import static uk.gov.hmcts.ccd.domain.service.processor.DisplayContextParameter.*;\n+\n+@Component\n+public class DateTimeEntryProcessor extends CaseDataFieldProcessor {\n+\n+    private static final List<String> SUPPORTED_TYPES = Arrays.asList(DATETIME, DATE);\n+\n+    private final DateTimeFormatParser dateTimeFormatParser;\n+\n+    @Autowired\n+    public DateTimeEntryProcessor(CaseViewFieldBuilder caseViewFieldBuilder,\n+                                  DateTimeFormatParser dateTimeFormatParser) {\n+        super(caseViewFieldBuilder);\n+        this.dateTimeFormatParser = dateTimeFormatParser;\n+    }\n+\n+    @Override\n+    protected JsonNode executeSimple(JsonNode node, CommonField field, BaseType baseType, String fieldPath) {\n+        return !isNullOrEmpty(node)\n+            && hasDisplayContextParameterType(field.getDisplayContextParameter(), DisplayContextParameterType.DATETIMEENTRY)\n+            && isSupportedBaseType(baseType, SUPPORTED_TYPES) ?\n+            createNode(field.getDisplayContextParameter(), node.asText(), baseType, fieldPath) :\n+            node;\n+    }\n+\n+    @Override\n+    protected JsonNode executeCollection(JsonNode collectionNode, CommonField caseViewField, String fieldPath) {\n+        final BaseType collectionFieldType = BaseType.get(caseViewField.getFieldType().getCollectionFieldType().getType());\n+\n+        if (hasDisplayContextParameterType(caseViewField.getDisplayContextParameter(), DisplayContextParameterType.DATETIMEENTRY)\n+            && isSupportedBaseType(collectionFieldType, SUPPORTED_TYPES)) {\n+            ArrayNode newNode = MAPPER.createArrayNode();\n+            collectionNode.forEach(item -> {\n+                JsonNode newItem = item.deepCopy();\n+                ((ObjectNode)newItem).replace(CollectionValidator.VALUE,\n+                    createNode(caseViewField.getDisplayContextParameter(), item.get(CollectionValidator.VALUE).asText(), collectionFieldType, fieldPath));\n+                newNode.add(newItem);\n+            });\n+\n+            return newNode;\n+        }\n+\n+        return collectionNode;\n+    }\n+\n+    private TextNode createNode(String displayContextParameter, String valueToConvert, BaseType baseType, String fieldPath) {\n+        String format = getDisplayContextParameterOfType(displayContextParameter, DisplayContextParameterType.DATETIMEENTRY)\n+            .map(DisplayContextParameter::getValue)\n+            .orElseThrow(() -> new DataProcessingException().withDetails(\n+                String.format(\"Unable to obtain datetime format for field %s with display context parameter %s\",\n+                    fieldPath,\n+                    displayContextParameter)\n+            ));\n+        try {\n+            if (baseType == BaseType.get(DATETIME)) {\n+                return new TextNode(dateTimeFormatParser.convertDateTimeToIso8601(format, valueToConvert));\n+            } else {\n+                return new TextNode(dateTimeFormatParser.convertDateToIso8601(format, valueToConvert));\n+            }\n+        } catch (Exception e) {\n+            throw new DataProcessingException().withDetails(\n+                String.format(\"Unable to process field %s with value %s. Expected format: %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMDk0NjY4", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#pullrequestreview-380094668", "createdAt": "2020-03-24T08:39:05Z", "commit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODozOTowNVrOF6lxxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODozOTowNVrOF6lxxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4MDY3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (complexFieldType == BaseType.get(COLLECTION)) {\n          \n          \n            \n                       complexCaseField.isCollectionFieldType()", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r396980676", "createdAt": "2020-03-24T08:39:05Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/FieldProcessor.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CaseViewField;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CaseViewFieldBuilder;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventField;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseField;\n+import uk.gov.hmcts.ccd.domain.model.definition.WizardPageField;\n+import uk.gov.hmcts.ccd.domain.types.BaseType;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static uk.gov.hmcts.ccd.domain.model.definition.FieldType.*;\n+\n+public abstract class FieldProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+    protected static final String FIELD_SEPARATOR = \".\";\n+\n+    private final CaseViewFieldBuilder caseViewFieldBuilder;\n+\n+    public FieldProcessor(CaseViewFieldBuilder caseViewFieldBuilder) {\n+        this.caseViewFieldBuilder = caseViewFieldBuilder;\n+    }\n+\n+    public JsonNode execute(JsonNode node, CaseField caseField, CaseEventField caseEventField, WizardPageField wizardPageField) {\n+        CaseViewField caseViewField = caseViewFieldBuilder.build(caseField, caseEventField);\n+\n+        if (!BaseType.contains(caseViewField.getFieldType().getType())) {\n+            return node;\n+        }\n+\n+        final BaseType fieldType = BaseType.get(caseViewField.getFieldType().getType());\n+\n+        if (BaseType.get(COMPLEX) == fieldType) {\n+            return executeComplex(node, caseField.getFieldType().getComplexFields(), caseEventField, wizardPageField, caseField.getId());\n+        } else if (BaseType.get(COLLECTION) == fieldType) {\n+            return executeCollection(node, caseViewField, caseField.getId());\n+        } else {\n+            return executeSimple(node, caseViewField, fieldType, caseField.getId());\n+        }\n+    }\n+\n+    private JsonNode executeComplex(JsonNode complexNode,\n+                                      List<CaseField> complexCaseFields,\n+                                      CaseEventField caseEventField,\n+                                      WizardPageField wizardPageField,\n+                                      String fieldPrefix) {\n+        if (complexNode == null) {\n+            return null;\n+        }\n+        ObjectNode newNode = MAPPER.createObjectNode();\n+        complexCaseFields.stream().forEach(complexCaseField -> {\n+            final BaseType complexFieldType = BaseType.get(complexCaseField.getFieldType().getType());\n+            final String fieldId = complexCaseField.getId();\n+            final JsonNode caseFieldNode = complexNode.get(fieldId);\n+            final String fieldPath = fieldPrefix + FIELD_SEPARATOR + fieldId;\n+\n+            if (complexFieldType == BaseType.get(COLLECTION)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMDk1MzEy", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#pullrequestreview-380095312", "createdAt": "2020-03-24T08:40:02Z", "commit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODo0MDowM1rOF6lztA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODo0MDowM1rOF6lztA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4MTE3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        } else if (complexFieldType == BaseType.get(COMPLEX)) {\n          \n          \n            \n                        } else if (complexCaseField.isComplexFieldType()) {", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r396981172", "createdAt": "2020-03-24T08:40:03Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/FieldProcessor.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CaseViewField;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CaseViewFieldBuilder;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventField;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseField;\n+import uk.gov.hmcts.ccd.domain.model.definition.WizardPageField;\n+import uk.gov.hmcts.ccd.domain.types.BaseType;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static uk.gov.hmcts.ccd.domain.model.definition.FieldType.*;\n+\n+public abstract class FieldProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+    protected static final String FIELD_SEPARATOR = \".\";\n+\n+    private final CaseViewFieldBuilder caseViewFieldBuilder;\n+\n+    public FieldProcessor(CaseViewFieldBuilder caseViewFieldBuilder) {\n+        this.caseViewFieldBuilder = caseViewFieldBuilder;\n+    }\n+\n+    public JsonNode execute(JsonNode node, CaseField caseField, CaseEventField caseEventField, WizardPageField wizardPageField) {\n+        CaseViewField caseViewField = caseViewFieldBuilder.build(caseField, caseEventField);\n+\n+        if (!BaseType.contains(caseViewField.getFieldType().getType())) {\n+            return node;\n+        }\n+\n+        final BaseType fieldType = BaseType.get(caseViewField.getFieldType().getType());\n+\n+        if (BaseType.get(COMPLEX) == fieldType) {\n+            return executeComplex(node, caseField.getFieldType().getComplexFields(), caseEventField, wizardPageField, caseField.getId());\n+        } else if (BaseType.get(COLLECTION) == fieldType) {\n+            return executeCollection(node, caseViewField, caseField.getId());\n+        } else {\n+            return executeSimple(node, caseViewField, fieldType, caseField.getId());\n+        }\n+    }\n+\n+    private JsonNode executeComplex(JsonNode complexNode,\n+                                      List<CaseField> complexCaseFields,\n+                                      CaseEventField caseEventField,\n+                                      WizardPageField wizardPageField,\n+                                      String fieldPrefix) {\n+        if (complexNode == null) {\n+            return null;\n+        }\n+        ObjectNode newNode = MAPPER.createObjectNode();\n+        complexCaseFields.stream().forEach(complexCaseField -> {\n+            final BaseType complexFieldType = BaseType.get(complexCaseField.getFieldType().getType());\n+            final String fieldId = complexCaseField.getId();\n+            final JsonNode caseFieldNode = complexNode.get(fieldId);\n+            final String fieldPath = fieldPrefix + FIELD_SEPARATOR + fieldId;\n+\n+            if (complexFieldType == BaseType.get(COLLECTION)) {\n+                newNode.set(fieldId, executeCollection(caseFieldNode, complexCaseField, fieldPath));\n+            } else if (complexFieldType == BaseType.get(COMPLEX)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMDk4OTI4", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#pullrequestreview-380098928", "createdAt": "2020-03-24T08:45:21Z", "commit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODo0NToyMVrOF6l-_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODo0NToyMVrOF6l-_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4NDA2Mg==", "bodyText": "minor: building a field's path it's common logic that could be encapsulated in a common class or utility method. If we don't have something we can reuse already", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r396984062", "createdAt": "2020-03-24T08:45:21Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/FieldProcessor.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CaseViewField;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CaseViewFieldBuilder;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventField;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseField;\n+import uk.gov.hmcts.ccd.domain.model.definition.WizardPageField;\n+import uk.gov.hmcts.ccd.domain.types.BaseType;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static uk.gov.hmcts.ccd.domain.model.definition.FieldType.*;\n+\n+public abstract class FieldProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+    protected static final String FIELD_SEPARATOR = \".\";\n+\n+    private final CaseViewFieldBuilder caseViewFieldBuilder;\n+\n+    public FieldProcessor(CaseViewFieldBuilder caseViewFieldBuilder) {\n+        this.caseViewFieldBuilder = caseViewFieldBuilder;\n+    }\n+\n+    public JsonNode execute(JsonNode node, CaseField caseField, CaseEventField caseEventField, WizardPageField wizardPageField) {\n+        CaseViewField caseViewField = caseViewFieldBuilder.build(caseField, caseEventField);\n+\n+        if (!BaseType.contains(caseViewField.getFieldType().getType())) {\n+            return node;\n+        }\n+\n+        final BaseType fieldType = BaseType.get(caseViewField.getFieldType().getType());\n+\n+        if (BaseType.get(COMPLEX) == fieldType) {\n+            return executeComplex(node, caseField.getFieldType().getComplexFields(), caseEventField, wizardPageField, caseField.getId());\n+        } else if (BaseType.get(COLLECTION) == fieldType) {\n+            return executeCollection(node, caseViewField, caseField.getId());\n+        } else {\n+            return executeSimple(node, caseViewField, fieldType, caseField.getId());\n+        }\n+    }\n+\n+    private JsonNode executeComplex(JsonNode complexNode,\n+                                      List<CaseField> complexCaseFields,\n+                                      CaseEventField caseEventField,\n+                                      WizardPageField wizardPageField,\n+                                      String fieldPrefix) {\n+        if (complexNode == null) {\n+            return null;\n+        }\n+        ObjectNode newNode = MAPPER.createObjectNode();\n+        complexCaseFields.stream().forEach(complexCaseField -> {\n+            final BaseType complexFieldType = BaseType.get(complexCaseField.getFieldType().getType());\n+            final String fieldId = complexCaseField.getId();\n+            final JsonNode caseFieldNode = complexNode.get(fieldId);\n+            final String fieldPath = fieldPrefix + FIELD_SEPARATOR + fieldId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMTA1OTA3", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#pullrequestreview-380105907", "createdAt": "2020-03-24T08:54:56Z", "commit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODo1NDo1N1rOF6mVGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODo1NDo1N1rOF6mVGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4OTcyMg==", "bodyText": "I wouldn't bother wrapping a null with an optional just so I can call ifPresent. Either you have the method you are calling return itself an Optional, or just do a null check:\nJsonNode jsonNode = executeComplex(.....);\n if (jsonNode != null) {\n       newNode.set(fieldId, jsonNode);\n}\n\nPlease see: https://stackoverflow.com/questions/53197393/wrap-object-in-optional-to-use-ifpresent-method\nCan you correct this everywhere it has been introduced please?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r396989722", "createdAt": "2020-03-24T08:54:57Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/FieldProcessor.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CaseViewField;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CaseViewFieldBuilder;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseEventField;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseField;\n+import uk.gov.hmcts.ccd.domain.model.definition.WizardPageField;\n+import uk.gov.hmcts.ccd.domain.types.BaseType;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static uk.gov.hmcts.ccd.domain.model.definition.FieldType.*;\n+\n+public abstract class FieldProcessor {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+    protected static final String FIELD_SEPARATOR = \".\";\n+\n+    private final CaseViewFieldBuilder caseViewFieldBuilder;\n+\n+    public FieldProcessor(CaseViewFieldBuilder caseViewFieldBuilder) {\n+        this.caseViewFieldBuilder = caseViewFieldBuilder;\n+    }\n+\n+    public JsonNode execute(JsonNode node, CaseField caseField, CaseEventField caseEventField, WizardPageField wizardPageField) {\n+        CaseViewField caseViewField = caseViewFieldBuilder.build(caseField, caseEventField);\n+\n+        if (!BaseType.contains(caseViewField.getFieldType().getType())) {\n+            return node;\n+        }\n+\n+        final BaseType fieldType = BaseType.get(caseViewField.getFieldType().getType());\n+\n+        if (BaseType.get(COMPLEX) == fieldType) {\n+            return executeComplex(node, caseField.getFieldType().getComplexFields(), caseEventField, wizardPageField, caseField.getId());\n+        } else if (BaseType.get(COLLECTION) == fieldType) {\n+            return executeCollection(node, caseViewField, caseField.getId());\n+        } else {\n+            return executeSimple(node, caseViewField, fieldType, caseField.getId());\n+        }\n+    }\n+\n+    private JsonNode executeComplex(JsonNode complexNode,\n+                                      List<CaseField> complexCaseFields,\n+                                      CaseEventField caseEventField,\n+                                      WizardPageField wizardPageField,\n+                                      String fieldPrefix) {\n+        if (complexNode == null) {\n+            return null;\n+        }\n+        ObjectNode newNode = MAPPER.createObjectNode();\n+        complexCaseFields.stream().forEach(complexCaseField -> {\n+            final BaseType complexFieldType = BaseType.get(complexCaseField.getFieldType().getType());\n+            final String fieldId = complexCaseField.getId();\n+            final JsonNode caseFieldNode = complexNode.get(fieldId);\n+            final String fieldPath = fieldPrefix + FIELD_SEPARATOR + fieldId;\n+\n+            if (complexFieldType == BaseType.get(COLLECTION)) {\n+                newNode.set(fieldId, executeCollection(caseFieldNode, complexCaseField, fieldPath));\n+            } else if (complexFieldType == BaseType.get(COMPLEX)) {\n+                Optional.ofNullable(\n+                    executeComplex(caseFieldNode, complexCaseField.getFieldType().getComplexFields(), caseEventField, wizardPageField, fieldPath))\n+                    .ifPresent(result -> newNode.set(fieldId, result));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMTUzNjEw", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#pullrequestreview-380153610", "createdAt": "2020-03-24T09:57:00Z", "commit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTo1NzowMVrOF6otOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTo1NzowMVrOF6otOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAyODY2Nw==", "bodyText": "maybe better move this into a processor.date package?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r397028667", "createdAt": "2020-03-24T09:57:01Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DateTimeFormatParser.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMTcyOTE3", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#pullrequestreview-380172917", "createdAt": "2020-03-24T10:22:59Z", "commit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDoyMjo1OVrOF6pq4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDoyMjo1OVrOF6pq4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0NDQ1MA==", "bodyText": "DisplayContextParameter it's a core domain concept that should be outside the processor package", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r397044450", "createdAt": "2020-03-24T10:22:59Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DisplayContextParameter.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMTg2ODUw", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#pullrequestreview-380186850", "createdAt": "2020-03-24T10:41:22Z", "commit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDo0MToyMlrOF6qWAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDo0MToyMlrOF6qWAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1NTQ5MQ==", "bodyText": "Optional.empty should be used to model missing values, not incorrect or unknown values as we are doing here", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r397055491", "createdAt": "2020-03-24T10:41:22Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DisplayContextParameterType.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.google.common.base.Strings;\n+\n+import java.util.*;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public enum DisplayContextParameterType {\n+    DATETIMEENTRY,\n+    DATETIMEDISPLAY,\n+    TABLE,\n+    LIST;\n+\n+    private static final Pattern PATTERN = Pattern.compile(\"#(.+)\\\\((.+)\\\\)\");\n+    private static final int TYPE_GROUP = 1;\n+    private static final int VALUE_GROUP = 2;\n+\n+    public static Optional<DisplayContextParameterType> getParameterTypeFor(String displayContextParameter) {\n+        Matcher m = PATTERN.matcher(displayContextParameter);\n+        if (m.matches()) {\n+            try {\n+                return Optional.of(valueOf(m.group(TYPE_GROUP)));\n+            } catch (IllegalArgumentException e) {\n+                return Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMTg3MDMz", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#pullrequestreview-380187033", "createdAt": "2020-03-24T10:41:36Z", "commit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDo0MTozNlrOF6qWiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDo0MTozNlrOF6qWiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1NTYyNA==", "bodyText": "Optional.empty should be used to model missing values, not incorrect or unknown values as we are doing here", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r397055624", "createdAt": "2020-03-24T10:41:36Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DisplayContextParameterType.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.google.common.base.Strings;\n+\n+import java.util.*;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public enum DisplayContextParameterType {\n+    DATETIMEENTRY,\n+    DATETIMEDISPLAY,\n+    TABLE,\n+    LIST;\n+\n+    private static final Pattern PATTERN = Pattern.compile(\"#(.+)\\\\((.+)\\\\)\");\n+    private static final int TYPE_GROUP = 1;\n+    private static final int VALUE_GROUP = 2;\n+\n+    public static Optional<DisplayContextParameterType> getParameterTypeFor(String displayContextParameter) {\n+        Matcher m = PATTERN.matcher(displayContextParameter);\n+        if (m.matches()) {\n+            try {\n+                return Optional.of(valueOf(m.group(TYPE_GROUP)));\n+            } catch (IllegalArgumentException e) {\n+                return Optional.empty();\n+            }\n+        }\n+        return Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMTg3OTM2", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#pullrequestreview-380187936", "createdAt": "2020-03-24T10:42:50Z", "commit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDo0Mjo1MFrOF6qZHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDo0Mjo1MFrOF6qZHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1NjI4Ng==", "bodyText": "Optional.empty should be used to model missing values, not incorrect or unknown values as we are doing here", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r397056286", "createdAt": "2020-03-24T10:42:50Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DisplayContextParameterType.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.google.common.base.Strings;\n+\n+import java.util.*;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public enum DisplayContextParameterType {\n+    DATETIMEENTRY,\n+    DATETIMEDISPLAY,\n+    TABLE,\n+    LIST;\n+\n+    private static final Pattern PATTERN = Pattern.compile(\"#(.+)\\\\((.+)\\\\)\");\n+    private static final int TYPE_GROUP = 1;\n+    private static final int VALUE_GROUP = 2;\n+\n+    public static Optional<DisplayContextParameterType> getParameterTypeFor(String displayContextParameter) {\n+        Matcher m = PATTERN.matcher(displayContextParameter);\n+        if (m.matches()) {\n+            try {\n+                return Optional.of(valueOf(m.group(TYPE_GROUP)));\n+            } catch (IllegalArgumentException e) {\n+                return Optional.empty();\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    public static Optional<String> getParameterValueFor(String displayContextParameter) {\n+        Matcher m = PATTERN.matcher(displayContextParameter);\n+        if (m.matches() && !Strings.isNullOrEmpty(m.group(VALUE_GROUP))) {\n+            return Optional.of(m.group(VALUE_GROUP));\n+        }\n+        return Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMTg5MTU3", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#pullrequestreview-380189157", "createdAt": "2020-03-24T10:44:30Z", "commit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDo0NDozMFrOF6qdEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDo0NDozMFrOF6qdEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1NzI5Ng==", "bodyText": "is the null check required here? if value group of the pattern (.+) is matching that means there is at least on char right?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r397057296", "createdAt": "2020-03-24T10:44:30Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/processor/DisplayContextParameterType.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package uk.gov.hmcts.ccd.domain.service.processor;\n+\n+import com.google.common.base.Strings;\n+\n+import java.util.*;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public enum DisplayContextParameterType {\n+    DATETIMEENTRY,\n+    DATETIMEDISPLAY,\n+    TABLE,\n+    LIST;\n+\n+    private static final Pattern PATTERN = Pattern.compile(\"#(.+)\\\\((.+)\\\\)\");\n+    private static final int TYPE_GROUP = 1;\n+    private static final int VALUE_GROUP = 2;\n+\n+    public static Optional<DisplayContextParameterType> getParameterTypeFor(String displayContextParameter) {\n+        Matcher m = PATTERN.matcher(displayContextParameter);\n+        if (m.matches()) {\n+            try {\n+                return Optional.of(valueOf(m.group(TYPE_GROUP)));\n+            } catch (IllegalArgumentException e) {\n+                return Optional.empty();\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    public static Optional<String> getParameterValueFor(String displayContextParameter) {\n+        Matcher m = PATTERN.matcher(displayContextParameter);\n+        if (m.matches() && !Strings.isNullOrEmpty(m.group(VALUE_GROUP))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMjQ1NDcw", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#pullrequestreview-380245470", "createdAt": "2020-03-24T12:06:58Z", "commit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjowNjo1OVrOF6tN_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjowNjo1OVrOF6tN_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEwMjU4OA==", "bodyText": "I'm a bit puzzled by this choice. Wouldn't it be more consistent with the current design if we had enhanced the DateTimeValidator and DateValidator to do the validation of the formatted date. And if successful then do the conversion?\nInstead we are converting to the internal unformatted date before doing the validation", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r397102588", "createdAt": "2020-03-24T12:06:59Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "diffHunk": "@@ -11,33 +11,38 @@\n import uk.gov.hmcts.ccd.domain.model.definition.CaseType;\n import uk.gov.hmcts.ccd.domain.model.std.CaseDataContent;\n import uk.gov.hmcts.ccd.domain.service.common.CaseTypeService;\n+import uk.gov.hmcts.ccd.domain.service.processor.FieldProcessorService;\n import uk.gov.hmcts.ccd.endpoint.exceptions.ValidationException;\n \n @Service\n public class DefaultValidateCaseFieldsOperation implements ValidateCaseFieldsOperation {\n \n     private final CaseDefinitionRepository caseDefinitionRepository;\n     private final CaseTypeService caseTypeService;\n+    private final FieldProcessorService fieldProcessorService;\n \n     @Inject DefaultValidateCaseFieldsOperation(\n         @Qualifier(CachedCaseDefinitionRepository.QUALIFIER) final CaseDefinitionRepository caseDefinitionRepository,\n-        final CaseTypeService caseTypeService) {\n+        final CaseTypeService caseTypeService,\n+        final FieldProcessorService fieldProcessorService) {\n         this.caseDefinitionRepository = caseDefinitionRepository;\n         this.caseTypeService = caseTypeService;\n+        this.fieldProcessorService = fieldProcessorService;\n     }\n \n     @Override\n     public final Map<String, JsonNode> validateCaseDetails(String caseTypeId, CaseDataContent content) {\n-        if (content == null || content.getEvent().getEventId() == null) {\n+        if (content == null || content.getEvent() == null || content.getEventId() == null) {\n             throw new ValidationException(\"Cannot validate case field because of event is not specified\");\n         }\n         final CaseType caseType = caseDefinitionRepository.getCaseType(caseTypeId);\n         if (caseType == null) {\n-            throw new ValidationException(\"Cannot find case type definition for  \" + caseTypeId);\n+            throw new ValidationException(\"Cannot find case type definition for \" + caseTypeId);\n         }\n         if (!hasEventId(caseType, content.getEventId())) {\n-            throw new ValidationException(\"Cannot validate case field because of event\" + content.getEventId() + \" is not found in case type definition\");\n+            throw new ValidationException(\"Cannot validate case field because of event \" + content.getEventId() + \" is not found in case type definition\");\n         }\n+        content.setData(fieldProcessorService.processData(content.getData(), caseType, content.getEventId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMjQ5NjY3", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#pullrequestreview-380249667", "createdAt": "2020-03-24T12:13:01Z", "commit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjoxMzowMVrOF6tbGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjoxMzowMVrOF6tbGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEwNTk0Ng==", "bodyText": "why DataProcessing exception should be a subclass of ValidationException? in theory we could have processing errors that have nothing to do with validation", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r397105946", "createdAt": "2020-03-24T12:13:01Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/exceptions/DataProcessingException.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package uk.gov.hmcts.ccd.endpoint.exceptions;\n+\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+\n+@ResponseStatus(code = HttpStatus.UNPROCESSABLE_ENTITY)\n+public class DataProcessingException extends ValidationException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMjUwMDI0", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#pullrequestreview-380250024", "createdAt": "2020-03-24T12:13:33Z", "commit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNTI3ODg2", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#pullrequestreview-380527886", "createdAt": "2020-03-24T17:14:49Z", "commit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzoxNDo0OVrOF66x5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzoxNDo0OVrOF66x5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMyNDc3Mg==", "bodyText": "not enough unit testing probably", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#discussion_r397324772", "createdAt": "2020-03-24T17:14:49Z", "author": {"login": "mario-paniccia"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/service/createcase/DefaultCreateCaseOperationTest.java", "diffHunk": "@@ -169,6 +169,33 @@ void shouldThrowValidationException_whenCaseTypeIsNotDefinedForJurisdiction() {\n                      \"Cannot create case because of cti is not defined as case type for jid\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed5bc5d03506d66331469da5ac87a9928cd38036"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4116431b907ea5a6bc469d65874babfb78b1e6da", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/4116431b907ea5a6bc469d65874babfb78b1e6da", "committedDate": "2020-03-25T09:51:14Z", "message": "Merge branch 'RDM-7575-DateTime-Formatting' into RDM-7630"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a621679cbe24209b65bcfa1e1b33acad841a31cd", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/a621679cbe24209b65bcfa1e1b33acad841a31cd", "committedDate": "2020-03-25T09:52:28Z", "message": "Merge branch 'RDM-7630' into RDM-7692"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d608e2c450bd04b5b02e6b7f9cef771fdae8fa51", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/d608e2c450bd04b5b02e6b7f9cef771fdae8fa51", "committedDate": "2020-03-25T09:54:21Z", "message": "Merge branch 'RDM-7692' into RDM-7694\n\n# Conflicts:\n#\tsrc/main/java/uk/gov/hmcts/ccd/domain/model/search/CriteriaInput.java\n#\tsrc/test/java/uk/gov/hmcts/ccd/domain/service/common/TestBuildersUtil.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8f2348681d20619700e0cc5b29c86ff4f3b616e", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/e8f2348681d20619700e0cc5b29c86ff4f3b616e", "committedDate": "2020-03-25T11:20:17Z", "message": "RDM-7630 fixed build issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0bb310ea0dca398727db3cb9c78d581cada711e", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/b0bb310ea0dca398727db3cb9c78d581cada711e", "committedDate": "2020-03-27T08:30:59Z", "message": "RDM-7630 extended logic to be more robust"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2521b22a66a6b810a0af89dc333c3df8013d22bf", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/2521b22a66a6b810a0af89dc333c3df8013d22bf", "committedDate": "2020-03-27T10:21:00Z", "message": "Merge branch 'RDM-7575-DateTime-Formatting' into RDM-7630"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNzM0Njg1", "url": "https://github.com/hmcts/ccd-data-store-api/pull/846#pullrequestreview-382734685", "createdAt": "2020-03-27T10:23:11Z", "commit": {"oid": "2521b22a66a6b810a0af89dc333c3df8013d22bf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bfa1ca7ad351423338a2a0ccf5bdb9f650fb170", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/4bfa1ca7ad351423338a2a0ccf5bdb9f650fb170", "committedDate": "2020-03-27T10:34:10Z", "message": "Merge branch 'RDM-7630' into RDM-7692\n\n# Conflicts:\n#\tsrc/main/java/uk/gov/hmcts/ccd/domain/model/definition/WizardPageComplexFieldOverride.java\n#\tsrc/main/java/uk/gov/hmcts/ccd/domain/service/processor/DateTimeFormatParser.java\n#\tsrc/test/java/uk/gov/hmcts/ccd/domain/service/processor/DateTimeFormatParserTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "296066aee5343e4502982736c1195e03a2b35710", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/296066aee5343e4502982736c1195e03a2b35710", "committedDate": "2020-03-27T10:34:41Z", "message": "Merge branch 'RDM-7692' into RDM-7694"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b505896b8a3bff0756fd6cb31a59aa0a7e379d9e", "author": {"user": {"login": "smathangi", "name": "Sateesh Mathangi"}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/b505896b8a3bff0756fd6cb31a59aa0a7e379d9e", "committedDate": "2020-03-30T08:39:32Z", "message": "Merge branch 'RDM-7575-DateTime-Formatting' into RDM-7630"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd6d583cf1aedcbc3d2e5d50db9f861f26bec3e7", "author": {"user": {"login": "smathangi", "name": "Sateesh Mathangi"}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/dd6d583cf1aedcbc3d2e5d50db9f861f26bec3e7", "committedDate": "2020-03-30T08:41:28Z", "message": "Merge branch 'RDM-7630' into RDM-7692"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11bf69bb49fb30da55064b802d60b99ca2cbe472", "author": {"user": {"login": "smathangi", "name": "Sateesh Mathangi"}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/11bf69bb49fb30da55064b802d60b99ca2cbe472", "committedDate": "2020-03-30T08:48:07Z", "message": "RDM-7692 - fixed compilation issue."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8015087b60db2208d545e2d8024ffe94fcb18a1e", "author": {"user": {"login": "smathangi", "name": "Sateesh Mathangi"}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/8015087b60db2208d545e2d8024ffe94fcb18a1e", "committedDate": "2020-03-30T08:48:55Z", "message": "Merge branch 'RDM-7692' into RDM-7694"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8141b8143b6065498a75f8b8054dfc170481cdc", "author": {"user": {"login": "smathangi", "name": "Sateesh Mathangi"}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/c8141b8143b6065498a75f8b8054dfc170481cdc", "committedDate": "2020-03-30T09:24:27Z", "message": "Merge branch 'RDM-7575-DateTime-Formatting' into RDM-7630"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e29ddd3fd024c34d3bc3a63a9a1e00715fe4ff1a", "author": {"user": {"login": "smathangi", "name": "Sateesh Mathangi"}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/e29ddd3fd024c34d3bc3a63a9a1e00715fe4ff1a", "committedDate": "2020-03-30T09:25:12Z", "message": "Merge branch 'RDM-7630' into RDM-7692"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9e5d2a15e73fc7852bd66338ed2ed76c5b6f00e", "author": {"user": {"login": "smathangi", "name": "Sateesh Mathangi"}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/b9e5d2a15e73fc7852bd66338ed2ed76c5b6f00e", "committedDate": "2020-03-30T09:25:36Z", "message": "Merge branch 'RDM-7692' into RDM-7694"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cb425bf27e04ecc38930d3ca6c5e68392dc7f11", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/2cb425bf27e04ecc38930d3ca6c5e68392dc7f11", "committedDate": "2020-03-30T12:01:18Z", "message": "DateTimeFormatParser updates to support other branches"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b1be4e3352ec7bcb5b84df82e11d6d6d99a0fc7", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/0b1be4e3352ec7bcb5b84df82e11d6d6d99a0fc7", "committedDate": "2020-03-30T12:05:56Z", "message": "Merge branch 'RDM-7630' into RDM-7692"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a58ca28950c5b1acb38f6a201bee26357dec6f5", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/5a58ca28950c5b1acb38f6a201bee26357dec6f5", "committedDate": "2020-03-30T12:06:17Z", "message": "Merge branch 'RDM-7692' into RDM-7694"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ed8f3aa934a5df994e9d444f052ff02e62f2c1e", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/9ed8f3aa934a5df994e9d444f052ff02e62f2c1e", "committedDate": "2020-03-30T14:02:41Z", "message": "Add formatted values to search/workbasket results"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "195894c5f200cbf218d4af3109236131fa1cfadf", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/195894c5f200cbf218d4af3109236131fa1cfadf", "committedDate": "2020-03-31T12:01:35Z", "message": "RDM-8079 - Default day/month to 1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc9c17ab6fcfe36563a1b1fd4282026b1a032edf", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/cc9c17ab6fcfe36563a1b1fd4282026b1a032edf", "committedDate": "2020-03-31T12:02:44Z", "message": "Merge branch 'RDM-7630' into RDM-7692"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a4ae4951803d3b2b1b3d3bb68464a41f777eed1", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/8a4ae4951803d3b2b1b3d3bb68464a41f777eed1", "committedDate": "2020-03-31T12:02:55Z", "message": "Merge branch 'RDM-7692' into RDM-7694"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fa20156ff4df437cb78330d256bd3bf9573083b", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/7fa20156ff4df437cb78330d256bd3bf9573083b", "committedDate": "2020-04-01T10:57:25Z", "message": "RDM-8071 - Enable processors on collections of complex"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7256532c9bdaa1b400f8bfa8a216fe9d9d75394", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/f7256532c9bdaa1b400f8bfa8a216fe9d9d75394", "committedDate": "2020-04-01T12:00:05Z", "message": "Merge branch 'RDM-7692' into RDM-7694"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bd8276e4b9ab23deffd5b39346509c03eb4e4ca", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/1bd8276e4b9ab23deffd5b39346509c03eb4e4ca", "committedDate": "2020-04-01T12:16:47Z", "message": "Handle TextNodes with empty strings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92906be40e2b64f6e386a76c01f89928c6cb2a42", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/92906be40e2b64f6e386a76c01f89928c6cb2a42", "committedDate": "2020-04-06T08:28:27Z", "message": "Support complex fields in search/workbasket results"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f28e7a93e315c4d6886aba0e2aa201bf331a308", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/5f28e7a93e315c4d6886aba0e2aa201bf331a308", "committedDate": "2020-04-06T10:30:23Z", "message": "Update mappings for failing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92d070641693b8f9d6c2242bd2e5958d9f3cd52f", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/92d070641693b8f9d6c2242bd2e5958d9f3cd52f", "committedDate": "2020-04-06T11:25:46Z", "message": "Merge branch 'RDM-7575-DateTime-Formatting' into RDM-7630"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4389b3046b64724519a18bc3a2d431b0ffec987e", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/4389b3046b64724519a18bc3a2d431b0ffec987e", "committedDate": "2020-04-06T11:26:17Z", "message": "Merge branch 'RDM-7630' into RDM-7692"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "524c8a0a24e93365c03f3d7ad3c139e5f2653745", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/524c8a0a24e93365c03f3d7ad3c139e5f2653745", "committedDate": "2020-04-06T11:26:31Z", "message": "Merge branch 'RDM-7692' into RDM-7694"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17dc665970fdec9df13dfe3762bf296399cf8f63", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/17dc665970fdec9df13dfe3762bf296399cf8f63", "committedDate": "2020-04-06T13:53:20Z", "message": "Handle metadata data fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35a9dfaf6e2ece49ca31dd880aef3966459de0a9", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/35a9dfaf6e2ece49ca31dd880aef3966459de0a9", "committedDate": "2020-04-06T14:11:57Z", "message": "Minor checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "792401bf6505699b6e711c72b1563975bb834e52", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/792401bf6505699b6e711c72b1563975bb834e52", "committedDate": "2020-04-06T14:59:24Z", "message": "Add DCP to FT data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7f8784041eea43e1bea615e061fe72ea2bddb45", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/e7f8784041eea43e1bea615e061fe72ea2bddb45", "committedDate": "2020-04-06T17:47:58Z", "message": "Unit tests for nested field logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11e1c6c0167f431eb493543ee428b13a2ccf5b0b", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/11e1c6c0167f431eb493543ee428b13a2ccf5b0b", "committedDate": "2020-04-07T11:56:40Z", "message": "RDM-8070 - Default year to 1970"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e48623b6665c787599aa70f1a4139ca1b2a74d95", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/e48623b6665c787599aa70f1a4139ca1b2a74d95", "committedDate": "2020-04-07T11:57:23Z", "message": "Merge branch 'RDM-7692' into RDM-7694"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61be3bdf38361f6631f7ea3bb27a81a8a95539ea", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/61be3bdf38361f6631f7ea3bb27a81a8a95539ea", "committedDate": "2020-04-09T12:21:01Z", "message": "RDM-8113 handle display without seconds or milliseconds\nRDM-8057 split DCP correctly when there is multiple params"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "622181fc4cb20ff67c626dd5a860a6f97189da10", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/622181fc4cb20ff67c626dd5a860a6f97189da10", "committedDate": "2020-04-09T12:53:42Z", "message": "RDM-8113 updated functional response"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b02cbadefeece8e4fab9f120e48db5d0c5bb3cdc", "author": {"user": {"login": "RebeccaBaker", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/b02cbadefeece8e4fab9f120e48db5d0c5bb3cdc", "committedDate": "2020-04-09T14:19:05Z", "message": "RDM-8113 added unit tests for partial milliseconds"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2618, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}