{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NTI4OTQ0", "number": 946, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTozNTowNFrOECE73g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTozNzoxNFrOECE_Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjEzNDcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTozNTowNFrOGeT8Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTozNTowNFrOGeT8Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzNzE4Mw==", "bodyText": "better use the standard object mapper in the related utils class", "url": "https://github.com/hmcts/ccd-data-store-api/pull/946#discussion_r434437183", "createdAt": "2020-06-03T09:35:04Z", "author": {"login": "MSancaktutar"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "diffHunk": "@@ -43,9 +53,54 @@\n         }\n         content.setData(fieldProcessorService.processData(content.getData(), caseTypeDefinition, content.getEventId()));\n         caseTypeService.validateData(content.getData(), caseTypeDefinition);\n+\n+        validateOrganisationPolicy(caseTypeId, content);\n         return content.getData();\n     }\n \n+    private void validateOrganisationPolicy(String caseTypeId, CaseDataContent content) {\n+        final Optional<String> defaultValue = getOrganisationPolicyDefaultRoleValue(content);\n+        // if there is not a default value. it means that there will not be organisation policy validation.\n+        if (!defaultValue.isPresent()) {\n+            return;\n+        }\n+\n+        caseDefinitionRepository.getCaseType(caseTypeId).getEvents().stream().filter(\n+            event -> event.getId().equals(content.getEventId())\n+        ).forEach(\n+            caseEventDefinition ->  caseEventDefinition.getCaseFields().stream().forEach(\n+                caseField -> caseField.getCaseEventFieldComplexDefinitions().stream().filter(\n+                    caseEventFieldComplexDefinition -> {\n+                        if (caseEventFieldComplexDefinition.getReference().equals(ORGANISATION_POLICY_ROLE)) {\n+                            return validateOrgPolicyCaseAssignedRole(caseEventFieldComplexDefinition, defaultValue.get());\n+                        } else {\n+                            return false;\n+                        }\n+                    }\n+                ).collect(Collectors.toList()))\n+        );\n+    }\n+\n+    private Optional<String> getOrganisationPolicyDefaultRoleValue(final CaseDataContent content) {\n+\n+        final JsonNode existingDat  = new ObjectMapper().convertValue(content.getData(), JsonNode.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b2c21b6669f71719425886743de481960857054"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjE0MDg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTozNjozN1rOGeUACg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzozNTozM1rOGfuvdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzODE1NA==", "bodyText": "there may be many default values!", "url": "https://github.com/hmcts/ccd-data-store-api/pull/946#discussion_r434438154", "createdAt": "2020-06-03T09:36:37Z", "author": {"login": "MSancaktutar"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "diffHunk": "@@ -43,9 +53,54 @@\n         }\n         content.setData(fieldProcessorService.processData(content.getData(), caseTypeDefinition, content.getEventId()));\n         caseTypeService.validateData(content.getData(), caseTypeDefinition);\n+\n+        validateOrganisationPolicy(caseTypeId, content);\n         return content.getData();\n     }\n \n+    private void validateOrganisationPolicy(String caseTypeId, CaseDataContent content) {\n+        final Optional<String> defaultValue = getOrganisationPolicyDefaultRoleValue(content);\n+        // if there is not a default value. it means that there will not be organisation policy validation.\n+        if (!defaultValue.isPresent()) {\n+            return;\n+        }\n+\n+        caseDefinitionRepository.getCaseType(caseTypeId).getEvents().stream().filter(\n+            event -> event.getId().equals(content.getEventId())\n+        ).forEach(\n+            caseEventDefinition ->  caseEventDefinition.getCaseFields().stream().forEach(\n+                caseField -> caseField.getCaseEventFieldComplexDefinitions().stream().filter(\n+                    caseEventFieldComplexDefinition -> {\n+                        if (caseEventFieldComplexDefinition.getReference().equals(ORGANISATION_POLICY_ROLE)) {\n+                            return validateOrgPolicyCaseAssignedRole(caseEventFieldComplexDefinition, defaultValue.get());\n+                        } else {\n+                            return false;\n+                        }\n+                    }\n+                ).collect(Collectors.toList()))\n+        );\n+    }\n+\n+    private Optional<String> getOrganisationPolicyDefaultRoleValue(final CaseDataContent content) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b2c21b6669f71719425886743de481960857054"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyNDg1NA==", "bodyText": "DONE", "url": "https://github.com/hmcts/ccd-data-store-api/pull/946#discussion_r435924854", "createdAt": "2020-06-05T13:35:33Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "diffHunk": "@@ -43,9 +53,54 @@\n         }\n         content.setData(fieldProcessorService.processData(content.getData(), caseTypeDefinition, content.getEventId()));\n         caseTypeService.validateData(content.getData(), caseTypeDefinition);\n+\n+        validateOrganisationPolicy(caseTypeId, content);\n         return content.getData();\n     }\n \n+    private void validateOrganisationPolicy(String caseTypeId, CaseDataContent content) {\n+        final Optional<String> defaultValue = getOrganisationPolicyDefaultRoleValue(content);\n+        // if there is not a default value. it means that there will not be organisation policy validation.\n+        if (!defaultValue.isPresent()) {\n+            return;\n+        }\n+\n+        caseDefinitionRepository.getCaseType(caseTypeId).getEvents().stream().filter(\n+            event -> event.getId().equals(content.getEventId())\n+        ).forEach(\n+            caseEventDefinition ->  caseEventDefinition.getCaseFields().stream().forEach(\n+                caseField -> caseField.getCaseEventFieldComplexDefinitions().stream().filter(\n+                    caseEventFieldComplexDefinition -> {\n+                        if (caseEventFieldComplexDefinition.getReference().equals(ORGANISATION_POLICY_ROLE)) {\n+                            return validateOrgPolicyCaseAssignedRole(caseEventFieldComplexDefinition, defaultValue.get());\n+                        } else {\n+                            return false;\n+                        }\n+                    }\n+                ).collect(Collectors.toList()))\n+        );\n+    }\n+\n+    private Optional<String> getOrganisationPolicyDefaultRoleValue(final CaseDataContent content) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzODE1NA=="}, "originalCommit": {"oid": "9b2c21b6669f71719425886743de481960857054"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjE0MzMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTozNzoxNFrOGeUBlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzozNToyNlrOGfuvLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzODU0OQ==", "bodyText": "what is multiple node are there?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/946#discussion_r434438549", "createdAt": "2020-06-03T09:37:14Z", "author": {"login": "MSancaktutar"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "diffHunk": "@@ -43,9 +53,54 @@\n         }\n         content.setData(fieldProcessorService.processData(content.getData(), caseTypeDefinition, content.getEventId()));\n         caseTypeService.validateData(content.getData(), caseTypeDefinition);\n+\n+        validateOrganisationPolicy(caseTypeId, content);\n         return content.getData();\n     }\n \n+    private void validateOrganisationPolicy(String caseTypeId, CaseDataContent content) {\n+        final Optional<String> defaultValue = getOrganisationPolicyDefaultRoleValue(content);\n+        // if there is not a default value. it means that there will not be organisation policy validation.\n+        if (!defaultValue.isPresent()) {\n+            return;\n+        }\n+\n+        caseDefinitionRepository.getCaseType(caseTypeId).getEvents().stream().filter(\n+            event -> event.getId().equals(content.getEventId())\n+        ).forEach(\n+            caseEventDefinition ->  caseEventDefinition.getCaseFields().stream().forEach(\n+                caseField -> caseField.getCaseEventFieldComplexDefinitions().stream().filter(\n+                    caseEventFieldComplexDefinition -> {\n+                        if (caseEventFieldComplexDefinition.getReference().equals(ORGANISATION_POLICY_ROLE)) {\n+                            return validateOrgPolicyCaseAssignedRole(caseEventFieldComplexDefinition, defaultValue.get());\n+                        } else {\n+                            return false;\n+                        }\n+                    }\n+                ).collect(Collectors.toList()))\n+        );\n+    }\n+\n+    private Optional<String> getOrganisationPolicyDefaultRoleValue(final CaseDataContent content) {\n+\n+        final JsonNode existingDat  = new ObjectMapper().convertValue(content.getData(), JsonNode.class);\n+        final List<JsonNode> jsonNode = existingDat.findParents(ORGANISATION_POLICY_ROLE);\n+        final  Optional<JsonNode> node = jsonNode.stream().findFirst();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b2c21b6669f71719425886743de481960857054"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyNDc4MA==", "bodyText": "DONE", "url": "https://github.com/hmcts/ccd-data-store-api/pull/946#discussion_r435924780", "createdAt": "2020-06-05T13:35:26Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/validate/DefaultValidateCaseFieldsOperation.java", "diffHunk": "@@ -43,9 +53,54 @@\n         }\n         content.setData(fieldProcessorService.processData(content.getData(), caseTypeDefinition, content.getEventId()));\n         caseTypeService.validateData(content.getData(), caseTypeDefinition);\n+\n+        validateOrganisationPolicy(caseTypeId, content);\n         return content.getData();\n     }\n \n+    private void validateOrganisationPolicy(String caseTypeId, CaseDataContent content) {\n+        final Optional<String> defaultValue = getOrganisationPolicyDefaultRoleValue(content);\n+        // if there is not a default value. it means that there will not be organisation policy validation.\n+        if (!defaultValue.isPresent()) {\n+            return;\n+        }\n+\n+        caseDefinitionRepository.getCaseType(caseTypeId).getEvents().stream().filter(\n+            event -> event.getId().equals(content.getEventId())\n+        ).forEach(\n+            caseEventDefinition ->  caseEventDefinition.getCaseFields().stream().forEach(\n+                caseField -> caseField.getCaseEventFieldComplexDefinitions().stream().filter(\n+                    caseEventFieldComplexDefinition -> {\n+                        if (caseEventFieldComplexDefinition.getReference().equals(ORGANISATION_POLICY_ROLE)) {\n+                            return validateOrgPolicyCaseAssignedRole(caseEventFieldComplexDefinition, defaultValue.get());\n+                        } else {\n+                            return false;\n+                        }\n+                    }\n+                ).collect(Collectors.toList()))\n+        );\n+    }\n+\n+    private Optional<String> getOrganisationPolicyDefaultRoleValue(final CaseDataContent content) {\n+\n+        final JsonNode existingDat  = new ObjectMapper().convertValue(content.getData(), JsonNode.class);\n+        final List<JsonNode> jsonNode = existingDat.findParents(ORGANISATION_POLICY_ROLE);\n+        final  Optional<JsonNode> node = jsonNode.stream().findFirst();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzODU0OQ=="}, "originalCommit": {"oid": "9b2c21b6669f71719425886743de481960857054"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3836, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}