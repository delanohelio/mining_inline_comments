{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NzgzMjYw", "number": 769, "title": "Rdm 6240", "bodyText": "JIRA link (if applicable)\nhttps://tools.hmcts.net/jira/browse/RDM-6240\nChange description\nSanitise inputs in SortOrderQueryBuilder. Replace SortOrderQueryBuilderTest with integration tests in DefaultCaseDetailsRepositoryTest.\nSortOrderQueryBuilder generates SQL queries. To verify that the generated SQL is correct, it needs to be tested by executing it against the Hibernate/Postgres stack and validating the results. Unit testing this means testing implementation rather than behaviour, leading to brittle tests that are tightly coupled to the implementation. I have ensured coverage for the deleted tests by expanding DefaultCaseDetailsRepositoryTest, adding new tests where necessary.\nDoes this PR introduce a breaking change? (check one with \"x\")\n[ ] Yes\n[x] No", "createdAt": "2020-01-22T10:41:52Z", "url": "https://github.com/hmcts/ccd-data-store-api/pull/769", "merged": true, "mergeCommit": {"oid": "8e64cd7ef9a17ae83560ff22fadf16a056864ea5"}, "closed": true, "closedAt": "2020-01-29T14:36:40Z", "author": {"login": "andrewfolga"}, "timelineItems": {"totalCount": 41, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb8PaQBAH2gAyMzY1NzgzMjYwOjgwOGM0NDg5ZGZiYTY0NWQyYzRkZmM3MmUxMzU5ZWI5YWQ1OTk0YmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_FkQUgH2gAyMzY1NzgzMjYwOmM5MjVkMGYyODkwOWM4NjhiZTQxMjQ5YTJiMmQxOTFiMjM4NGM5NGE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "808c4489dfba645d2c4dfc72e1359eb9ad5994be", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/808c4489dfba645d2c4dfc72e1359eb9ad5994be", "committedDate": "2020-01-20T16:47:38Z", "message": "RDM-6240 Sanitise inputs in SortOrderQueryBuilder. Replace SortOrderQueryBuilderTest with integration tests in DefaultCaseDetailsRepositoryTest.\nSortOrderQueryBuilder generates SQL queries. To verify that the generated SQL is correct, it needs to be tested by executing it against the Hibernate/Postgres stack and validating the results. Unit testing this means testing implementation rather than behaviour, leading to brittle tests that are tightly coupled to the implementation. I have ensured coverage for the deleted tests by expanding DefaultCaseDetailsRepositoryTest, adding new tests where necessary."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bde396fe6c71ead75cf699ab473d8522773c0dc9", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/bde396fe6c71ead75cf699ab473d8522773c0dc9", "committedDate": "2020-01-22T10:39:54Z", "message": "RDM-6240 Validate column names if metadata field for ordering or validate based on valid field name if it is a dynamic field ordering within ccd data. Clean up criterion factory."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NTAzOTY1", "url": "https://github.com/hmcts/ccd-data-store-api/pull/769#pullrequestreview-346503965", "createdAt": "2020-01-22T11:02:07Z", "commit": {"oid": "bde396fe6c71ead75cf699ab473d8522773c0dc9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMTowMjowOFrOFgYOIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMTowMjowOFrOFgYOIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ5NTU4Nw==", "bodyText": "this validation already occurs in definition-store. If we re-force it here then we should throw an error immediately rather than fallback to JSONB group.\nAlso VALID_FIELD_NAME_REGEX should in sync with fieldNames pattern of definition.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/769#discussion_r369495587", "createdAt": "2020-01-22T11:02:08Z", "author": {"login": "smathangi"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/search/SortOrderQueryBuilder.java", "diffHunk": "@@ -12,23 +21,39 @@\n     private static final String SPACE = \" \";\n     private static final String COMMA = \",\";\n \n+    private static final Set<String> VALID_COLUMNS_FOR_ORDER_BY\n+        = Collections.unmodifiableSet((Set<? extends String>) Stream\n+                                          .of(CaseDetailsEntity.CREATED_DATE_FIELD_COL,\n+                                              CaseDetailsEntity.LAST_MODIFIED_FIELD_COL,\n+                                              CaseDetailsEntity.JURISDICTION_FIELD_COL,\n+                                              CaseDetailsEntity.CASE_TYPE_ID_FIELD_COL,\n+                                              CaseDetailsEntity.STATE_FIELD_COL,\n+                                              CaseDetailsEntity.REFERENCE_FIELD_COL,\n+                                              CaseDetailsEntity.SECURITY_CLASSIFICATION_FIELD_COL)\n+                                          .collect(Collectors.toCollection(HashSet::new)));\n+\n     public String buildSortOrderClause(MetaData metaData) {\n         StringBuilder sb = new StringBuilder();\n         metaData.getSortOrderFields().forEach(sortOrderField -> {\n-            if (sortOrderField.isMetadata()) {\n+            if (sortOrderField.isMetadata() && VALID_COLUMNS_FOR_ORDER_BY.contains(getMataFieldName(sortOrderField.getCaseFieldId()))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bde396fe6c71ead75cf699ab473d8522773c0dc9"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NTA2NTU2", "url": "https://github.com/hmcts/ccd-data-store-api/pull/769#pullrequestreview-346506556", "createdAt": "2020-01-22T11:06:49Z", "commit": {"oid": "bde396fe6c71ead75cf699ab473d8522773c0dc9"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NTE3NTE0", "url": "https://github.com/hmcts/ccd-data-store-api/pull/769#pullrequestreview-346517514", "createdAt": "2020-01-22T11:27:43Z", "commit": {"oid": "bde396fe6c71ead75cf699ab473d8522773c0dc9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMToyNzo0M1rOFgY3Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMToyNzo0M1rOFgY3Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUwNjE0Ng==", "bodyText": "Looks good overall, but couldn't grasp the reason to remove this test class at first sight.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/769#discussion_r369506146", "createdAt": "2020-01-22T11:27:43Z", "author": {"login": "MSancaktutar"}, "path": "src/test/java/uk/gov/hmcts/ccd/data/casedetails/search/SortOrderQueryBuilderTest.java", "diffHunk": "@@ -1,80 +0,0 @@\n-package uk.gov.hmcts.ccd.data.casedetails.search;\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bde396fe6c71ead75cf699ab473d8522773c0dc9"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NTIzMDM4", "url": "https://github.com/hmcts/ccd-data-store-api/pull/769#pullrequestreview-346523038", "createdAt": "2020-01-22T11:38:20Z", "commit": {"oid": "bde396fe6c71ead75cf699ab473d8522773c0dc9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMTozODoyMVrOFgZIPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMTozODoyMVrOFgZIPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUxMDQ2Mg==", "bodyText": "I would put the validation here, at the exact point where the data is being converted to SQL, and throw an exception if the sort order is invalid. Otherwise I have to look around a bunch of different places to figure out if the validation always happens.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/769#discussion_r369510462", "createdAt": "2020-01-22T11:38:21Z", "author": {"login": "banderous"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/search/SortOrderQueryBuilder.java", "diffHunk": "@@ -12,23 +21,39 @@\n     private static final String SPACE = \" \";\n     private static final String COMMA = \",\";\n \n+    private static final Set<String> VALID_COLUMNS_FOR_ORDER_BY\n+        = Collections.unmodifiableSet((Set<? extends String>) Stream\n+                                          .of(CaseDetailsEntity.CREATED_DATE_FIELD_COL,\n+                                              CaseDetailsEntity.LAST_MODIFIED_FIELD_COL,\n+                                              CaseDetailsEntity.JURISDICTION_FIELD_COL,\n+                                              CaseDetailsEntity.CASE_TYPE_ID_FIELD_COL,\n+                                              CaseDetailsEntity.STATE_FIELD_COL,\n+                                              CaseDetailsEntity.REFERENCE_FIELD_COL,\n+                                              CaseDetailsEntity.SECURITY_CLASSIFICATION_FIELD_COL)\n+                                          .collect(Collectors.toCollection(HashSet::new)));\n+\n     public String buildSortOrderClause(MetaData metaData) {\n         StringBuilder sb = new StringBuilder();\n         metaData.getSortOrderFields().forEach(sortOrderField -> {\n-            if (sortOrderField.isMetadata()) {\n+            if (sortOrderField.isMetadata() && VALID_COLUMNS_FOR_ORDER_BY.contains(getMataFieldName(sortOrderField.getCaseFieldId()))) {\n                 sb.append(getMataFieldName(sortOrderField.getCaseFieldId()));\n-            } else {\n+                appendOrder(sb, sortOrderField);\n+            } else if (sortOrderField.getCaseFieldId().matches(VALID_FIELD_NAME_REGEX)) {\n                 sb.append(convertFieldNameToJSONBsqlFormat(sortOrderField.getCaseFieldId()));\n+                appendOrder(sb, sortOrderField);\n             }\n-            sb.append(SPACE);\n-            sb.append(sortOrderField.getDirection());\n-            sb.append(COMMA);\n-            sb.append(SPACE);\n         });\n         // always sort with creation_date as a last order so that it supports cases where no values at all for the configured fields and also default fallback.\n         return sb.append(CREATED_DATE + SPACE + SortDirection.fromOptionalString(metaData.getSortDirection())).toString();\n     }\n \n+    private void appendOrder(final StringBuilder sb, final SortOrderField sortOrderField) {\n+        sb.append(SPACE);\n+        sb.append(sortOrderField.getDirection());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bde396fe6c71ead75cf699ab473d8522773c0dc9"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c2bbddbbc01039830a0e55b75a1e50064cc1a29", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/3c2bbddbbc01039830a0e55b75a1e50064cc1a29", "committedDate": "2020-01-22T11:45:30Z", "message": "Merge branch 'develop' into RDM-6240"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NTQxODk5", "url": "https://github.com/hmcts/ccd-data-store-api/pull/769#pullrequestreview-346541899", "createdAt": "2020-01-22T12:13:01Z", "commit": {"oid": "3c2bbddbbc01039830a0e55b75a1e50064cc1a29"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMjoxMzowMlrOFgaBgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMjoxMzowMlrOFgaBgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyNTEyMA==", "bodyText": "Based on the latest discussions around logic duplication between def store and data store, I think we can indeed remove this allowed-list approach as well. We can stay within the purpose of just SQL-i prevention by just rejecting a few special chars in case field ids, and indeed, case field IDs can reasonably be assumed to not contain such chars, no matter how their validity conventions change in the foreseeable future.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/769#discussion_r369525120", "createdAt": "2020-01-22T12:13:02Z", "author": {"login": "MSancaktutar"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/search/SortOrderQueryBuilder.java", "diffHunk": "@@ -12,23 +21,39 @@\n     private static final String SPACE = \" \";\n     private static final String COMMA = \",\";\n \n+    private static final Set<String> VALID_COLUMNS_FOR_ORDER_BY\n+        = Collections.unmodifiableSet((Set<? extends String>) Stream\n+                                          .of(CaseDetailsEntity.CREATED_DATE_FIELD_COL,\n+                                              CaseDetailsEntity.LAST_MODIFIED_FIELD_COL,\n+                                              CaseDetailsEntity.JURISDICTION_FIELD_COL,\n+                                              CaseDetailsEntity.CASE_TYPE_ID_FIELD_COL,\n+                                              CaseDetailsEntity.STATE_FIELD_COL,\n+                                              CaseDetailsEntity.REFERENCE_FIELD_COL,\n+                                              CaseDetailsEntity.SECURITY_CLASSIFICATION_FIELD_COL)\n+                                          .collect(Collectors.toCollection(HashSet::new)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c2bbddbbc01039830a0e55b75a1e50064cc1a29"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd305eb50524ffd110107277196776331bb1af2a", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/fd305eb50524ffd110107277196776331bb1af2a", "committedDate": "2020-01-22T12:40:03Z", "message": "RDM-6240 Remove validation of table columns. Add top level validation against special characters."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f58695df913712272e3827bc9dc3b9675d63b9a", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/8f58695df913712272e3827bc9dc3b9675d63b9a", "committedDate": "2020-01-22T12:40:14Z", "message": "Merge remote-tracking branch 'origin/RDM-6240' into RDM-6240"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1691108a5883fb01c4d55033a7e111e8c1bd4d3e", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/1691108a5883fb01c4d55033a7e111e8c1bd4d3e", "committedDate": "2020-01-22T12:40:35Z", "message": "Merge branch 'develop' into RDM-6240"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d10f643f58c1d42635e283aaad313eab24ad4c5", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/1d10f643f58c1d42635e283aaad313eab24ad4c5", "committedDate": "2020-01-22T12:41:52Z", "message": "RDM-6240 Revert access modifier change."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da4b9205af4f2277506fb8e6dd45160addc3a856", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/da4b9205af4f2277506fb8e6dd45160addc3a856", "committedDate": "2020-01-22T12:42:09Z", "message": "Merge remote-tracking branch 'origin/RDM-6240' into RDM-6240"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NjA5NzE3", "url": "https://github.com/hmcts/ccd-data-store-api/pull/769#pullrequestreview-346609717", "createdAt": "2020-01-22T14:05:03Z", "commit": {"oid": "da4b9205af4f2277506fb8e6dd45160addc3a856"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75fbac732d9e24f220afa20f4f56f487f5c5a03c", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/75fbac732d9e24f220afa20f4f56f487f5c5a03c", "committedDate": "2020-01-22T14:08:53Z", "message": "Merge branch 'develop' into RDM-6240"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NzMyNTQx", "url": "https://github.com/hmcts/ccd-data-store-api/pull/769#pullrequestreview-346732541", "createdAt": "2020-01-22T16:37:20Z", "commit": {"oid": "75fbac732d9e24f220afa20f4f56f487f5c5a03c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MTY5MTY4", "url": "https://github.com/hmcts/ccd-data-store-api/pull/769#pullrequestreview-347169168", "createdAt": "2020-01-23T09:49:05Z", "commit": {"oid": "75fbac732d9e24f220afa20f4f56f487f5c5a03c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwOTo0OTowNVrOFg4MJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwOTo0OTowNVrOFg4MJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAxOTM2NQ==", "bodyText": "double check comment", "url": "https://github.com/hmcts/ccd-data-store-api/pull/769#discussion_r370019365", "createdAt": "2020-01-23T09:49:05Z", "author": {"login": "andrewfolga"}, "path": "src/test/java/uk/gov/hmcts/ccd/data/casedetails/DefaultCaseDetailsRepositoryTest.java", "diffHunk": "@@ -201,6 +222,35 @@ public void getFindByMetadataAndFieldDataSortDesc() {\n         assertThat(byMetaDataAndFieldData.get(1).getId(), is(\"1\"));\n     }\n \n+    @Test\n+    @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD, scripts = { \"classpath:sql/insert_cases.sql\" })\n+    public void getFindByMetadataAndFieldDataSortByBothCaseAndMetadataFields() {\n+        assumeDataInitialised();\n+\n+        MetaData metadata = new MetaData(\"TestAddressBookCase\", \"PROBATE\");\n+        metadata.setSortDirection(Optional.of(\"Asc\"));\n+        metadata.addSortOrderField(SortOrderField.sortOrderWith()\n+                                       .caseFieldId(\"[LAST_MODIFIED_DATE]\")\n+                                       .metadata(true)\n+                                       .direction(\"ASC\")\n+                                       .build());\n+        metadata.addSortOrderField(SortOrderField.sortOrderWith()\n+                                       .caseFieldId(\"PersonLastName\")\n+                                       .metadata(false)\n+                                       .direction(\"DESC\")\n+                                       .build());\n+\n+        HashMap<String, String> searchParams = new HashMap<>();\n+        searchParams.put(\"PersonFirstName\", \"Janet\");\n+        final List<CaseDetails> byMetaDataAndFieldData = caseDetailsRepository.findByMetaDataAndFieldData(metadata,\n+            searchParams);\n+\n+        // See the timestamps in insert_cases.sql.\n+        // Should be ordered by person last name, last modified desc, creation date asc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75fbac732d9e24f220afa20f4f56f487f5c5a03c"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e7a20cd927c8c6059af749b8247540ec14619a9", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/6e7a20cd927c8c6059af749b8247540ec14619a9", "committedDate": "2020-01-23T10:03:50Z", "message": "Merge branch 'develop' into RDM-6240"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05211ff68646c2fd7ee57265eeda6d2ef190302d", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/05211ff68646c2fd7ee57265eeda6d2ef190302d", "committedDate": "2020-01-23T10:34:53Z", "message": "RDM-6240 If malicious content skip the building of query and log exception."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8dfcc8c016155377b26b05cf44088a96fa19079", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/a8dfcc8c016155377b26b05cf44088a96fa19079", "committedDate": "2020-01-23T10:35:00Z", "message": "Merge remote-tracking branch 'origin/RDM-6240' into RDM-6240"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MTk2Mjk3", "url": "https://github.com/hmcts/ccd-data-store-api/pull/769#pullrequestreview-347196297", "createdAt": "2020-01-23T10:32:04Z", "commit": {"oid": "6e7a20cd927c8c6059af749b8247540ec14619a9"}, "state": "DISMISSED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMDozMjowNVrOFg5gFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMDo0MDoxNlrOFg5u_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA0MDg1Mw==", "bodyText": "We are appending an arbitrary String here - this should be an Enum, or it looks like you could use SortDirection.fromOptionalString", "url": "https://github.com/hmcts/ccd-data-store-api/pull/769#discussion_r370040853", "createdAt": "2020-01-23T10:32:05Z", "author": {"login": "banderous"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/search/SortOrderQueryBuilder.java", "diffHunk": "@@ -4,26 +4,34 @@\n import org.springframework.stereotype.Component;\n import uk.gov.hmcts.ccd.data.casedetails.search.MetaData.CaseField;\n \n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n @Component\n public class SortOrderQueryBuilder {\n \n     private static final String DATA_FIELD = \"data\";\n     private static final String CREATED_DATE = \"created_date\";\n     private static final String SPACE = \" \";\n     private static final String COMMA = \",\";\n+    private static final String SPECIAL_CHARS_REGEXP = \"[\\\\s\\\\\\\\\\\\/,;\\\\)\\\\('\\\"`]\";\n+    private static final Pattern SPECIAL_CHARS_PATTERN = Pattern.compile(SPECIAL_CHARS_REGEXP);\n \n     public String buildSortOrderClause(MetaData metaData) {\n         StringBuilder sb = new StringBuilder();\n         metaData.getSortOrderFields().forEach(sortOrderField -> {\n-            if (sortOrderField.isMetadata()) {\n-                sb.append(getMataFieldName(sortOrderField.getCaseFieldId()));\n-            } else {\n-                sb.append(convertFieldNameToJSONBsqlFormat(sortOrderField.getCaseFieldId()));\n+            Matcher matcher = SPECIAL_CHARS_PATTERN.matcher(sortOrderField.getCaseFieldId());\n+            if (!matcher.find()) {\n+                if (sortOrderField.isMetadata()) {\n+                    sb.append(getMataFieldName(sortOrderField.getCaseFieldId()));\n+                } else {\n+                    sb.append(convertFieldNameToJSONBsqlFormat(sortOrderField.getCaseFieldId()));\n+                }\n+                sb.append(SPACE);\n+                sb.append(sortOrderField.getDirection());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e7a20cd927c8c6059af749b8247540ec14619a9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA0MzQ2Ng==", "bodyText": "convertFieldNameToJSONBsqlFormat is also vulnerable since it just passes through the input with some substitutions - can we apply a whitelist of known allowed characters to it?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/769#discussion_r370043466", "createdAt": "2020-01-23T10:37:44Z", "author": {"login": "banderous"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/search/SortOrderQueryBuilder.java", "diffHunk": "@@ -4,26 +4,34 @@\n import org.springframework.stereotype.Component;\n import uk.gov.hmcts.ccd.data.casedetails.search.MetaData.CaseField;\n \n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n @Component\n public class SortOrderQueryBuilder {\n \n     private static final String DATA_FIELD = \"data\";\n     private static final String CREATED_DATE = \"created_date\";\n     private static final String SPACE = \" \";\n     private static final String COMMA = \",\";\n+    private static final String SPECIAL_CHARS_REGEXP = \"[\\\\s\\\\\\\\\\\\/,;\\\\)\\\\('\\\"`]\";\n+    private static final Pattern SPECIAL_CHARS_PATTERN = Pattern.compile(SPECIAL_CHARS_REGEXP);\n \n     public String buildSortOrderClause(MetaData metaData) {\n         StringBuilder sb = new StringBuilder();\n         metaData.getSortOrderFields().forEach(sortOrderField -> {\n-            if (sortOrderField.isMetadata()) {\n-                sb.append(getMataFieldName(sortOrderField.getCaseFieldId()));\n-            } else {\n-                sb.append(convertFieldNameToJSONBsqlFormat(sortOrderField.getCaseFieldId()));\n+            Matcher matcher = SPECIAL_CHARS_PATTERN.matcher(sortOrderField.getCaseFieldId());\n+            if (!matcher.find()) {\n+                if (sortOrderField.isMetadata()) {\n+                    sb.append(getMataFieldName(sortOrderField.getCaseFieldId()));\n+                } else {\n+                    sb.append(convertFieldNameToJSONBsqlFormat(sortOrderField.getCaseFieldId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e7a20cd927c8c6059af749b8247540ec14619a9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA0NDI4NA==", "bodyText": "You could let the exception propagate and not catch it, or rethrow it. Returning a null values will result in a more cryptic error later on.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/769#discussion_r370044284", "createdAt": "2020-01-23T10:39:27Z", "author": {"login": "banderous"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/search/SortOrderQueryBuilder.java", "diffHunk": "@@ -1,37 +1,55 @@\n package uk.gov.hmcts.ccd.data.casedetails.search;\n \n import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n import uk.gov.hmcts.ccd.data.casedetails.search.MetaData.CaseField;\n \n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n @Component\n public class SortOrderQueryBuilder {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(SortOrderQueryBuilder.class);\n+\n     private static final String DATA_FIELD = \"data\";\n     private static final String CREATED_DATE = \"created_date\";\n     private static final String SPACE = \" \";\n     private static final String COMMA = \",\";\n+    private static final String SPECIAL_CHARS_REGEXP = \"[\\\\s\\\\\\\\\\\\/,;\\\\)\\\\('\\\"`]\";\n+    private static final Pattern SPECIAL_CHARS_PATTERN = Pattern.compile(SPECIAL_CHARS_REGEXP);\n \n     public String buildSortOrderClause(MetaData metaData) {\n         StringBuilder sb = new StringBuilder();\n         metaData.getSortOrderFields().forEach(sortOrderField -> {\n-            if (sortOrderField.isMetadata()) {\n-                sb.append(getMataFieldName(sortOrderField.getCaseFieldId()));\n-            } else {\n-                sb.append(convertFieldNameToJSONBsqlFormat(sortOrderField.getCaseFieldId()));\n+            Matcher matcher = SPECIAL_CHARS_PATTERN.matcher(sortOrderField.getCaseFieldId());\n+            if (!matcher.find()) {\n+                if (sortOrderField.isMetadata()) {\n+                    sb.append(getMataFieldName(sortOrderField.getCaseFieldId()));\n+                } else {\n+                    sb.append(convertFieldNameToJSONBsqlFormat(sortOrderField.getCaseFieldId()));\n+                }\n+                sb.append(SPACE);\n+                sb.append(sortOrderField.getDirection());\n+                sb.append(COMMA);\n+                sb.append(SPACE);\n             }\n-            sb.append(SPACE);\n-            sb.append(sortOrderField.getDirection());\n-            sb.append(COMMA);\n-            sb.append(SPACE);\n         });\n         // always sort with creation_date as a last order so that it supports cases where no values at all for the configured fields and also default fallback.\n         return sb.append(CREATED_DATE + SPACE + SortDirection.fromOptionalString(metaData.getSortDirection())).toString();\n     }\n \n     private String getMataFieldName(String fieldName) {\n         String metaFieldName = fieldName.startsWith(\"[\") ? StringUtils.substringBetween(fieldName, \"[\", \"]\") : fieldName;\n-        return CaseField.valueOf(metaFieldName).getDbColumnName();\n+        String dbColumnName = null;\n+        try {\n+            dbColumnName = CaseField.valueOf(metaFieldName).getDbColumnName();\n+        } catch (IllegalArgumentException iae) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8dfcc8c016155377b26b05cf44088a96fa19079"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA0NDY2OA==", "bodyText": "Test passing evil in to the direction too", "url": "https://github.com/hmcts/ccd-data-store-api/pull/769#discussion_r370044668", "createdAt": "2020-01-23T10:40:16Z", "author": {"login": "banderous"}, "path": "src/test/java/uk/gov/hmcts/ccd/data/casedetails/DefaultCaseDetailsRepositoryTest.java", "diffHunk": "@@ -153,6 +153,27 @@ public void sanitisesInputs() {\n         assertThat(byMetaData.getTotalResultsCount(), is(0));\n     }\n \n+    @Test\n+    public void sanitisesInputsMainQuery() {\n+        String evil = \"foo');insert into case users values(1,2,3);--\";\n+        when(authorisedCaseDefinitionDataService.getUserAuthorisedCaseStateIds(\"PROBATE\", \"TestAddressBookCase\", CAN_READ))\n+            .thenReturn(asList(evil));\n+\n+        when(userAuthorisation.getAccessLevel()).thenReturn(AccessLevel.GRANTED);\n+        when(userAuthorisation.getUserId()).thenReturn(evil);\n+\n+        MetaData metadata = new MetaData(\"TestAddressBookCase\", \"PROBATE\");\n+        metadata.addSortOrderField(SortOrderField.sortOrderWith()\n+                                       .caseFieldId(evil)\n+                                       .metadata(false)\n+                                       .direction(\"DESC\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8dfcc8c016155377b26b05cf44088a96fa19079"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d53f6cca0e056c2f9cf4cad46bba2ceacfa6d9e6", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/d53f6cca0e056c2f9cf4cad46bba2ceacfa6d9e6", "committedDate": "2020-01-23T15:05:55Z", "message": "Merge branch 'develop' into RDM-6240"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85e5199a9d6a0866811fdae6824dd70fababc487", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/85e5199a9d6a0866811fdae6824dd70fababc487", "committedDate": "2020-01-23T15:14:40Z", "message": "RDM-6240 Address latest comments. Use whitelisting on sorting direction. Add relevant test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd87be182763f844d7503dcf641503c51fc21075", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/bd87be182763f844d7503dcf641503c51fc21075", "committedDate": "2020-01-23T15:14:47Z", "message": "Merge remote-tracking branch 'origin/RDM-6240' into RDM-6240"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NDI1MTkz", "url": "https://github.com/hmcts/ccd-data-store-api/pull/769#pullrequestreview-347425193", "createdAt": "2020-01-23T16:15:16Z", "commit": {"oid": "bd87be182763f844d7503dcf641503c51fc21075"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNjoxNToxNlrOFhEHqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNjoxNToxNlrOFhEHqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIxNDgyNA==", "bodyText": "If we made SortDirection.fromOptionalString throw an exception could this cause an issue in production? Where does metaData.getSortDirection() come from? Could it contain null or some other value that would currently just result in an ASC sort order?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/769#discussion_r370214824", "createdAt": "2020-01-23T16:15:16Z", "author": {"login": "banderous"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/search/SortOrderQueryBuilder.java", "diffHunk": "@@ -1,37 +1,55 @@\n package uk.gov.hmcts.ccd.data.casedetails.search;\n \n import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n import uk.gov.hmcts.ccd.data.casedetails.search.MetaData.CaseField;\n \n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static java.util.Optional.ofNullable;\n+\n @Component\n public class SortOrderQueryBuilder {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(SortOrderQueryBuilder.class);\n+\n     private static final String DATA_FIELD = \"data\";\n     private static final String CREATED_DATE = \"created_date\";\n     private static final String SPACE = \" \";\n-    private static final String COMMA = \",\";\n+    private static final String SPECIAL_CHARS_REGEXP = \"[\\\\s\\\\\\\\\\\\/,;\\\\)\\\\('\\\"`]\";\n+    private static final Pattern SPECIAL_CHARS_PATTERN = Pattern.compile(SPECIAL_CHARS_REGEXP);\n \n     public String buildSortOrderClause(MetaData metaData) {\n         StringBuilder sb = new StringBuilder();\n         metaData.getSortOrderFields().forEach(sortOrderField -> {\n-            if (sortOrderField.isMetadata()) {\n-                sb.append(getMataFieldName(sortOrderField.getCaseFieldId()));\n-            } else {\n-                sb.append(convertFieldNameToJSONBsqlFormat(sortOrderField.getCaseFieldId()));\n+            Matcher matcher = SPECIAL_CHARS_PATTERN.matcher(sortOrderField.getCaseFieldId());\n+            if (!matcher.find()) {\n+                if (sortOrderField.isMetadata()) {\n+                    sb.append(getMataFieldName(sortOrderField.getCaseFieldId()));\n+                } else {\n+                    sb.append(convertFieldNameToJSONBsqlFormat(sortOrderField.getCaseFieldId()));\n+                }\n+                sb.append(SPACE);\n+                sb.append(SortDirection.fromOptionalString(ofNullable(sortOrderField.getDirection())));\n+                sb.append(SPACE);\n             }\n-            sb.append(SPACE);\n-            sb.append(sortOrderField.getDirection());\n-            sb.append(COMMA);\n-            sb.append(SPACE);\n         });\n         // always sort with creation_date as a last order so that it supports cases where no values at all for the configured fields and also default fallback.\n         return sb.append(CREATED_DATE + SPACE + SortDirection.fromOptionalString(metaData.getSortDirection())).toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd87be182763f844d7503dcf641503c51fc21075"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "673cc7a9919d2461a79a379ebb760d8c87d2e2ea", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/673cc7a9919d2461a79a379ebb760d8c87d2e2ea", "committedDate": "2020-01-23T17:31:51Z", "message": "RDM-6240 Address latest comments. Throw exception on matching special characters on failed blacklisting validation. Add removed COMMA. Remove swallowing exception on CaseField enum unwrapping as it should serve as proper validation and throw exception as well."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "274d66139e8c8f53bb80223fcd4d47295bd3529c", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/274d66139e8c8f53bb80223fcd4d47295bd3529c", "committedDate": "2020-01-24T08:55:51Z", "message": "Merge branch 'develop' into RDM-6240"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODIxNDM1", "url": "https://github.com/hmcts/ccd-data-store-api/pull/769#pullrequestreview-347821435", "createdAt": "2020-01-24T09:08:28Z", "commit": {"oid": "274d66139e8c8f53bb80223fcd4d47295bd3529c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwOTowODoyOFrOFhXcQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwOTowODoyOFrOFhXcQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzMTM5NQ==", "bodyText": "you could get rid of this else now that we're throwing an exception", "url": "https://github.com/hmcts/ccd-data-store-api/pull/769#discussion_r370531395", "createdAt": "2020-01-24T09:08:28Z", "author": {"login": "banderous"}, "path": "src/main/java/uk/gov/hmcts/ccd/data/casedetails/search/SortOrderQueryBuilder.java", "diffHunk": "@@ -1,32 +1,50 @@\n package uk.gov.hmcts.ccd.data.casedetails.search;\n \n import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n import uk.gov.hmcts.ccd.data.casedetails.search.MetaData.CaseField;\n \n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static java.util.Optional.ofNullable;\n+import static uk.gov.hmcts.ccd.data.casedetails.search.SortDirection.fromOptionalString;\n+\n @Component\n public class SortOrderQueryBuilder {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(SortOrderQueryBuilder.class);\n+\n     private static final String DATA_FIELD = \"data\";\n     private static final String CREATED_DATE = \"created_date\";\n     private static final String SPACE = \" \";\n+    private static final String SPECIAL_CHARS_REGEXP = \"[\\\\s\\\\\\\\\\\\/,;\\\\)\\\\('\\\"`]\";\n+    private static final Pattern SPECIAL_CHARS_PATTERN = Pattern.compile(SPECIAL_CHARS_REGEXP);\n     private static final String COMMA = \",\";\n \n     public String buildSortOrderClause(MetaData metaData) {\n         StringBuilder sb = new StringBuilder();\n         metaData.getSortOrderFields().forEach(sortOrderField -> {\n-            if (sortOrderField.isMetadata()) {\n-                sb.append(getMataFieldName(sortOrderField.getCaseFieldId()));\n+            Matcher matcher = SPECIAL_CHARS_PATTERN.matcher(sortOrderField.getCaseFieldId());\n+            if (matcher.find()) {\n+                LOG.error(\"Illegal sort order field id: {}\", sortOrderField.getCaseFieldId());\n+                throw new IllegalArgumentException(\"Illegal sortOrderField.caseFieldId=\" + sortOrderField.getCaseFieldId());\n             } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "274d66139e8c8f53bb80223fcd4d47295bd3529c"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa55fe4389f2396887ffeb8e92fb2a52f76de38d", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/aa55fe4389f2396887ffeb8e92fb2a52f76de38d", "committedDate": "2020-01-24T09:10:21Z", "message": "RDM-6240 Remove else condition."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0acf5f6f8e7d0fd30d794bac1f8a84db12c5f431", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/0acf5f6f8e7d0fd30d794bac1f8a84db12c5f431", "committedDate": "2020-01-24T09:10:52Z", "message": "Merge remote-tracking branch 'origin/RDM-6240' into RDM-6240"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3a1820fb8025cb779447fc5096f202bce6658ea", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/f3a1820fb8025cb779447fc5096f202bce6658ea", "committedDate": "2020-01-24T09:50:35Z", "message": "RDM-6240 Remove blacklisting and add whitelisting back for the metadata column names."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e7adcd3e04fed655c21326a48c248027c91d571", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/8e7adcd3e04fed655c21326a48c248027c91d571", "committedDate": "2020-01-24T16:25:40Z", "message": "Merge branch 'develop' into RDM-6240"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd1ef0709129913ecb8b7ff67c7097603d974718", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/bd1ef0709129913ecb8b7ff67c7097603d974718", "committedDate": "2020-01-27T10:09:08Z", "message": "RDM-6240 Remove explicit whitelisting as already done implicitly with enum conversion."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78adf746a996ba2db78e73fb4722c181797bd987", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/78adf746a996ba2db78e73fb4722c181797bd987", "committedDate": "2020-01-27T10:09:17Z", "message": "Merge remote-tracking branch 'origin/RDM-6240' into RDM-6240"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4NTUzNDQ0", "url": "https://github.com/hmcts/ccd-data-store-api/pull/769#pullrequestreview-348553444", "createdAt": "2020-01-27T10:15:10Z", "commit": {"oid": "78adf746a996ba2db78e73fb4722c181797bd987"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34c2f259ed25d05a337d0553705ddfb86c0a1fe2", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/34c2f259ed25d05a337d0553705ddfb86c0a1fe2", "committedDate": "2020-01-27T10:17:09Z", "message": "RDM-6240 Remove unused Logger."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4defdf6e1b9d143a4c2b5c4ce5a6587a86c803dd", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/4defdf6e1b9d143a4c2b5c4ce5a6587a86c803dd", "committedDate": "2020-01-27T10:22:44Z", "message": "RDM-6240 Pull in appendColumnOrDataFieldForOrderBy into buildSortOrderClause."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f19c5d671e6d54eebeb25e50fadb0d284569ca2a", "author": {"user": null}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/f19c5d671e6d54eebeb25e50fadb0d284569ca2a", "committedDate": "2020-01-27T12:04:28Z", "message": "RDM-6240 Pull in appendColumnOrDataFieldForOrderBy into buildSortOrderClause."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34a37218d0a6cb7a4a71871153bcd07c170e18d8", "author": {"user": {"login": "veeresha-hmcts", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/34a37218d0a6cb7a4a71871153bcd07c170e18d8", "committedDate": "2020-01-28T10:06:45Z", "message": "Merge branch 'develop' into RDM-6240"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "237257ca5236e724b9483fefd36fa5296f92713a", "author": {"user": {"login": "veeresha-hmcts", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/237257ca5236e724b9483fefd36fa5296f92713a", "committedDate": "2020-01-28T17:23:02Z", "message": "Merge branch 'develop' into RDM-6240"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c925d0f28909c868be41249a2b2d191b2384c94a", "author": {"user": {"login": "veeresha-hmcts", "name": null}}, "url": "https://github.com/hmcts/ccd-data-store-api/commit/c925d0f28909c868be41249a2b2d191b2384c94a", "committedDate": "2020-01-29T13:01:17Z", "message": "Merge branch 'develop' into RDM-6240"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2700, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}