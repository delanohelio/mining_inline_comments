{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczODgwNjAy", "number": 1085, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoxMzoxNVrOEfeYIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoyNjowMlrOEfewNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDM5MDA4OnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/domain/types/ApprovalStatusValidatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoxMzoxNVrOHLxJoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTozNzowMFrOHMsaJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwMTY2NA==", "bodyText": "Should be ApprovalStatus. Otherwise I think the data check will not happen.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1085#discussion_r482101664", "createdAt": "2020-09-02T14:13:15Z", "author": {"login": "rafalkalita"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/types/ApprovalStatusValidatorTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package uk.gov.hmcts.ccd.domain.types;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.util.Collections;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import uk.gov.hmcts.ccd.data.definition.CaseDefinitionRepository;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseFieldDefinition;\n+import uk.gov.hmcts.ccd.test.CaseFieldDefinitionBuilder;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.Mockito.when;\n+import static uk.gov.hmcts.ccd.domain.types.BaseTypeValidator.REGEX_GUIDANCE;\n+\n+class ApprovalStatusValidatorTest {\n+\n+    private static final JsonNodeFactory NODE_FACTORY = JsonNodeFactory.instance;\n+    private static final String FIELD_ID = \"ApprovalStatus\";\n+    private static final String ORGANISATION_TO_ADD = \"OrganisationToAdd\";\n+\n+    @Mock\n+    private BaseType numberBaseType;\n+\n+    @Mock\n+    private CaseDefinitionRepository definitionRepository;\n+\n+    private ApprovalStatusValidator validator;\n+    private CaseFieldDefinition caseFieldDefinition;\n+\n+    @BeforeEach\n+    void setup() {\n+        MockitoAnnotations.initMocks(this);\n+\n+        when(definitionRepository.getBaseTypes()).thenReturn(Collections.emptyList());\n+        BaseType.setCaseDefinitionRepository(definitionRepository);\n+        BaseType.initialise();\n+\n+        when(numberBaseType.getType()).thenReturn(NumberValidator.TYPE_ID);\n+        BaseType.register(numberBaseType);\n+\n+        validator = new ApprovalStatusValidator();\n+\n+        caseFieldDefinition = caseField(FIELD_ID).build();\n+    }\n+\n+    private CaseFieldDefinitionBuilder caseField(String fieldId) {\n+        return new CaseFieldDefinitionBuilder(fieldId).withType(ApprovalStatusValidator.TYPE_ID);\n+    }\n+\n+    @Test\n+    void shouldFailOnInvalidApprovalStatus() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"5\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"ApprovalStatus\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(1, validationResults.size());\n+        assertEquals(\"Invalid Approval Status Value, Valid values are 0,1 and 2. \"\n+                + \"0 = \u2018Not considered\u2019, 1 = \u2018Approved\u2019, 2 = \u2018Rejected\u2019\",\n+            validationResults.get(0).getErrorMessage());\n+    }\n+\n+    @Test\n+    void shouldValidateOnValidApprovalStatus() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"0\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"ApprovalStatus\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForOtherFieldId() {\n+        caseFieldDefinition = caseField(ORGANISATION_TO_ADD).build();\n+        final JsonNode data = NODE_FACTORY.textNode(\"0\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForEmptyData() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8528ffa70cfb3a60a3cc62ac8e7c01f6e3a618f8"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3MjU1MA==", "bodyText": "this is intended to check other fields not for \"ApprovalStatus\", changed the method name to include ForOtherFieldId", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1085#discussion_r483072550", "createdAt": "2020-09-03T15:37:00Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/types/ApprovalStatusValidatorTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package uk.gov.hmcts.ccd.domain.types;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.util.Collections;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import uk.gov.hmcts.ccd.data.definition.CaseDefinitionRepository;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseFieldDefinition;\n+import uk.gov.hmcts.ccd.test.CaseFieldDefinitionBuilder;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.Mockito.when;\n+import static uk.gov.hmcts.ccd.domain.types.BaseTypeValidator.REGEX_GUIDANCE;\n+\n+class ApprovalStatusValidatorTest {\n+\n+    private static final JsonNodeFactory NODE_FACTORY = JsonNodeFactory.instance;\n+    private static final String FIELD_ID = \"ApprovalStatus\";\n+    private static final String ORGANISATION_TO_ADD = \"OrganisationToAdd\";\n+\n+    @Mock\n+    private BaseType numberBaseType;\n+\n+    @Mock\n+    private CaseDefinitionRepository definitionRepository;\n+\n+    private ApprovalStatusValidator validator;\n+    private CaseFieldDefinition caseFieldDefinition;\n+\n+    @BeforeEach\n+    void setup() {\n+        MockitoAnnotations.initMocks(this);\n+\n+        when(definitionRepository.getBaseTypes()).thenReturn(Collections.emptyList());\n+        BaseType.setCaseDefinitionRepository(definitionRepository);\n+        BaseType.initialise();\n+\n+        when(numberBaseType.getType()).thenReturn(NumberValidator.TYPE_ID);\n+        BaseType.register(numberBaseType);\n+\n+        validator = new ApprovalStatusValidator();\n+\n+        caseFieldDefinition = caseField(FIELD_ID).build();\n+    }\n+\n+    private CaseFieldDefinitionBuilder caseField(String fieldId) {\n+        return new CaseFieldDefinitionBuilder(fieldId).withType(ApprovalStatusValidator.TYPE_ID);\n+    }\n+\n+    @Test\n+    void shouldFailOnInvalidApprovalStatus() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"5\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"ApprovalStatus\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(1, validationResults.size());\n+        assertEquals(\"Invalid Approval Status Value, Valid values are 0,1 and 2. \"\n+                + \"0 = \u2018Not considered\u2019, 1 = \u2018Approved\u2019, 2 = \u2018Rejected\u2019\",\n+            validationResults.get(0).getErrorMessage());\n+    }\n+\n+    @Test\n+    void shouldValidateOnValidApprovalStatus() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"0\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"ApprovalStatus\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForOtherFieldId() {\n+        caseFieldDefinition = caseField(ORGANISATION_TO_ADD).build();\n+        final JsonNode data = NODE_FACTORY.textNode(\"0\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForEmptyData() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwMTY2NA=="}, "originalCommit": {"oid": "8528ffa70cfb3a60a3cc62ac8e7c01f6e3a618f8"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDM5NDkzOnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/domain/types/ApprovalStatusValidatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoxNDoxM1rOHLxMbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTozNzowOVrOHMsajQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwMjM4Mg==", "bodyText": "Same like above. Should be ApprovalStatus.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1085#discussion_r482102382", "createdAt": "2020-09-02T14:14:13Z", "author": {"login": "rafalkalita"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/types/ApprovalStatusValidatorTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package uk.gov.hmcts.ccd.domain.types;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.util.Collections;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import uk.gov.hmcts.ccd.data.definition.CaseDefinitionRepository;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseFieldDefinition;\n+import uk.gov.hmcts.ccd.test.CaseFieldDefinitionBuilder;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.Mockito.when;\n+import static uk.gov.hmcts.ccd.domain.types.BaseTypeValidator.REGEX_GUIDANCE;\n+\n+class ApprovalStatusValidatorTest {\n+\n+    private static final JsonNodeFactory NODE_FACTORY = JsonNodeFactory.instance;\n+    private static final String FIELD_ID = \"ApprovalStatus\";\n+    private static final String ORGANISATION_TO_ADD = \"OrganisationToAdd\";\n+\n+    @Mock\n+    private BaseType numberBaseType;\n+\n+    @Mock\n+    private CaseDefinitionRepository definitionRepository;\n+\n+    private ApprovalStatusValidator validator;\n+    private CaseFieldDefinition caseFieldDefinition;\n+\n+    @BeforeEach\n+    void setup() {\n+        MockitoAnnotations.initMocks(this);\n+\n+        when(definitionRepository.getBaseTypes()).thenReturn(Collections.emptyList());\n+        BaseType.setCaseDefinitionRepository(definitionRepository);\n+        BaseType.initialise();\n+\n+        when(numberBaseType.getType()).thenReturn(NumberValidator.TYPE_ID);\n+        BaseType.register(numberBaseType);\n+\n+        validator = new ApprovalStatusValidator();\n+\n+        caseFieldDefinition = caseField(FIELD_ID).build();\n+    }\n+\n+    private CaseFieldDefinitionBuilder caseField(String fieldId) {\n+        return new CaseFieldDefinitionBuilder(fieldId).withType(ApprovalStatusValidator.TYPE_ID);\n+    }\n+\n+    @Test\n+    void shouldFailOnInvalidApprovalStatus() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"5\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"ApprovalStatus\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(1, validationResults.size());\n+        assertEquals(\"Invalid Approval Status Value, Valid values are 0,1 and 2. \"\n+                + \"0 = \u2018Not considered\u2019, 1 = \u2018Approved\u2019, 2 = \u2018Rejected\u2019\",\n+            validationResults.get(0).getErrorMessage());\n+    }\n+\n+    @Test\n+    void shouldValidateOnValidApprovalStatus() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"0\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"ApprovalStatus\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForOtherFieldId() {\n+        caseFieldDefinition = caseField(ORGANISATION_TO_ADD).build();\n+        final JsonNode data = NODE_FACTORY.textNode(\"0\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForEmptyData() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForNullData() {\n+        final JsonNode data = null;\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8528ffa70cfb3a60a3cc62ac8e7c01f6e3a618f8"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3MjY1Mw==", "bodyText": "this is intended to check other fields not for \"ApprovalStatus\", changed the method name to include ForOtherFieldId", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1085#discussion_r483072653", "createdAt": "2020-09-03T15:37:09Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/types/ApprovalStatusValidatorTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package uk.gov.hmcts.ccd.domain.types;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.util.Collections;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import uk.gov.hmcts.ccd.data.definition.CaseDefinitionRepository;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseFieldDefinition;\n+import uk.gov.hmcts.ccd.test.CaseFieldDefinitionBuilder;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.Mockito.when;\n+import static uk.gov.hmcts.ccd.domain.types.BaseTypeValidator.REGEX_GUIDANCE;\n+\n+class ApprovalStatusValidatorTest {\n+\n+    private static final JsonNodeFactory NODE_FACTORY = JsonNodeFactory.instance;\n+    private static final String FIELD_ID = \"ApprovalStatus\";\n+    private static final String ORGANISATION_TO_ADD = \"OrganisationToAdd\";\n+\n+    @Mock\n+    private BaseType numberBaseType;\n+\n+    @Mock\n+    private CaseDefinitionRepository definitionRepository;\n+\n+    private ApprovalStatusValidator validator;\n+    private CaseFieldDefinition caseFieldDefinition;\n+\n+    @BeforeEach\n+    void setup() {\n+        MockitoAnnotations.initMocks(this);\n+\n+        when(definitionRepository.getBaseTypes()).thenReturn(Collections.emptyList());\n+        BaseType.setCaseDefinitionRepository(definitionRepository);\n+        BaseType.initialise();\n+\n+        when(numberBaseType.getType()).thenReturn(NumberValidator.TYPE_ID);\n+        BaseType.register(numberBaseType);\n+\n+        validator = new ApprovalStatusValidator();\n+\n+        caseFieldDefinition = caseField(FIELD_ID).build();\n+    }\n+\n+    private CaseFieldDefinitionBuilder caseField(String fieldId) {\n+        return new CaseFieldDefinitionBuilder(fieldId).withType(ApprovalStatusValidator.TYPE_ID);\n+    }\n+\n+    @Test\n+    void shouldFailOnInvalidApprovalStatus() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"5\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"ApprovalStatus\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(1, validationResults.size());\n+        assertEquals(\"Invalid Approval Status Value, Valid values are 0,1 and 2. \"\n+                + \"0 = \u2018Not considered\u2019, 1 = \u2018Approved\u2019, 2 = \u2018Rejected\u2019\",\n+            validationResults.get(0).getErrorMessage());\n+    }\n+\n+    @Test\n+    void shouldValidateOnValidApprovalStatus() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"0\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"ApprovalStatus\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForOtherFieldId() {\n+        caseFieldDefinition = caseField(ORGANISATION_TO_ADD).build();\n+        final JsonNode data = NODE_FACTORY.textNode(\"0\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForEmptyData() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForNullData() {\n+        final JsonNode data = null;\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwMjM4Mg=="}, "originalCommit": {"oid": "8528ffa70cfb3a60a3cc62ac8e7c01f6e3a618f8"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDQ1MTc0OnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/domain/types/ApprovalStatusValidatorTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoyNjowMlrOHLxvjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTozOTo1NVrOHMsh4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjExMTM3NA==", "bodyText": "There is a class that test all validations together based on definitions.  CaseDataValidatorTest . May be you can add your new Type and its validator there.  It is just a recommendation . Not mandatory.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1085#discussion_r482111374", "createdAt": "2020-09-02T14:26:02Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/types/ApprovalStatusValidatorTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package uk.gov.hmcts.ccd.domain.types;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.util.Collections;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import uk.gov.hmcts.ccd.data.definition.CaseDefinitionRepository;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseFieldDefinition;\n+import uk.gov.hmcts.ccd.test.CaseFieldDefinitionBuilder;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.Mockito.when;\n+import static uk.gov.hmcts.ccd.domain.types.BaseTypeValidator.REGEX_GUIDANCE;\n+\n+class ApprovalStatusValidatorTest {\n+\n+    private static final JsonNodeFactory NODE_FACTORY = JsonNodeFactory.instance;\n+    private static final String FIELD_ID = \"ApprovalStatus\";\n+    private static final String ORGANISATION_TO_ADD = \"OrganisationToAdd\";\n+\n+    @Mock\n+    private BaseType numberBaseType;\n+\n+    @Mock\n+    private CaseDefinitionRepository definitionRepository;\n+\n+    private ApprovalStatusValidator validator;\n+    private CaseFieldDefinition caseFieldDefinition;\n+\n+    @BeforeEach\n+    void setup() {\n+        MockitoAnnotations.initMocks(this);\n+\n+        when(definitionRepository.getBaseTypes()).thenReturn(Collections.emptyList());\n+        BaseType.setCaseDefinitionRepository(definitionRepository);\n+        BaseType.initialise();\n+\n+        when(numberBaseType.getType()).thenReturn(NumberValidator.TYPE_ID);\n+        BaseType.register(numberBaseType);\n+\n+        validator = new ApprovalStatusValidator();\n+\n+        caseFieldDefinition = caseField(FIELD_ID).build();\n+    }\n+\n+    private CaseFieldDefinitionBuilder caseField(String fieldId) {\n+        return new CaseFieldDefinitionBuilder(fieldId).withType(ApprovalStatusValidator.TYPE_ID);\n+    }\n+\n+    @Test\n+    void shouldFailOnInvalidApprovalStatus() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"5\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"ApprovalStatus\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(1, validationResults.size());\n+        assertEquals(\"Invalid Approval Status Value, Valid values are 0,1 and 2. \"\n+                + \"0 = \u2018Not considered\u2019, 1 = \u2018Approved\u2019, 2 = \u2018Rejected\u2019\",\n+            validationResults.get(0).getErrorMessage());\n+    }\n+\n+    @Test\n+    void shouldValidateOnValidApprovalStatus() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"0\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"ApprovalStatus\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForOtherFieldId() {\n+        caseFieldDefinition = caseField(ORGANISATION_TO_ADD).build();\n+        final JsonNode data = NODE_FACTORY.textNode(\"0\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForEmptyData() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForNullData() {\n+        final JsonNode data = null;\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void getType() {\n+        assertEquals(validator.getType(), BaseType.get(\"Number\"), \"Type is incorrect\");\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8528ffa70cfb3a60a3cc62ac8e7c01f6e3a618f8"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3NDUxNw==", "bodyText": "we are not checking data here.. this is check checking the method return type, which is static in this case", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1085#discussion_r483074517", "createdAt": "2020-09-03T15:39:54Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/types/ApprovalStatusValidatorTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package uk.gov.hmcts.ccd.domain.types;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.util.Collections;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import uk.gov.hmcts.ccd.data.definition.CaseDefinitionRepository;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseFieldDefinition;\n+import uk.gov.hmcts.ccd.test.CaseFieldDefinitionBuilder;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.Mockito.when;\n+import static uk.gov.hmcts.ccd.domain.types.BaseTypeValidator.REGEX_GUIDANCE;\n+\n+class ApprovalStatusValidatorTest {\n+\n+    private static final JsonNodeFactory NODE_FACTORY = JsonNodeFactory.instance;\n+    private static final String FIELD_ID = \"ApprovalStatus\";\n+    private static final String ORGANISATION_TO_ADD = \"OrganisationToAdd\";\n+\n+    @Mock\n+    private BaseType numberBaseType;\n+\n+    @Mock\n+    private CaseDefinitionRepository definitionRepository;\n+\n+    private ApprovalStatusValidator validator;\n+    private CaseFieldDefinition caseFieldDefinition;\n+\n+    @BeforeEach\n+    void setup() {\n+        MockitoAnnotations.initMocks(this);\n+\n+        when(definitionRepository.getBaseTypes()).thenReturn(Collections.emptyList());\n+        BaseType.setCaseDefinitionRepository(definitionRepository);\n+        BaseType.initialise();\n+\n+        when(numberBaseType.getType()).thenReturn(NumberValidator.TYPE_ID);\n+        BaseType.register(numberBaseType);\n+\n+        validator = new ApprovalStatusValidator();\n+\n+        caseFieldDefinition = caseField(FIELD_ID).build();\n+    }\n+\n+    private CaseFieldDefinitionBuilder caseField(String fieldId) {\n+        return new CaseFieldDefinitionBuilder(fieldId).withType(ApprovalStatusValidator.TYPE_ID);\n+    }\n+\n+    @Test\n+    void shouldFailOnInvalidApprovalStatus() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"5\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"ApprovalStatus\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(1, validationResults.size());\n+        assertEquals(\"Invalid Approval Status Value, Valid values are 0,1 and 2. \"\n+                + \"0 = \u2018Not considered\u2019, 1 = \u2018Approved\u2019, 2 = \u2018Rejected\u2019\",\n+            validationResults.get(0).getErrorMessage());\n+    }\n+\n+    @Test\n+    void shouldValidateOnValidApprovalStatus() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"0\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"ApprovalStatus\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForOtherFieldId() {\n+        caseFieldDefinition = caseField(ORGANISATION_TO_ADD).build();\n+        final JsonNode data = NODE_FACTORY.textNode(\"0\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForEmptyData() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForNullData() {\n+        final JsonNode data = null;\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void getType() {\n+        assertEquals(validator.getType(), BaseType.get(\"Number\"), \"Type is incorrect\");\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjExMTM3NA=="}, "originalCommit": {"oid": "8528ffa70cfb3a60a3cc62ac8e7c01f6e3a618f8"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3NDUzMA==", "bodyText": "we are not checking data here.. this is check checking the method return type, which is static in this case", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1085#discussion_r483074530", "createdAt": "2020-09-03T15:39:55Z", "author": {"login": "kiran-yenigala-hmcts"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/types/ApprovalStatusValidatorTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package uk.gov.hmcts.ccd.domain.types;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.util.Collections;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import uk.gov.hmcts.ccd.data.definition.CaseDefinitionRepository;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseFieldDefinition;\n+import uk.gov.hmcts.ccd.test.CaseFieldDefinitionBuilder;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.Mockito.when;\n+import static uk.gov.hmcts.ccd.domain.types.BaseTypeValidator.REGEX_GUIDANCE;\n+\n+class ApprovalStatusValidatorTest {\n+\n+    private static final JsonNodeFactory NODE_FACTORY = JsonNodeFactory.instance;\n+    private static final String FIELD_ID = \"ApprovalStatus\";\n+    private static final String ORGANISATION_TO_ADD = \"OrganisationToAdd\";\n+\n+    @Mock\n+    private BaseType numberBaseType;\n+\n+    @Mock\n+    private CaseDefinitionRepository definitionRepository;\n+\n+    private ApprovalStatusValidator validator;\n+    private CaseFieldDefinition caseFieldDefinition;\n+\n+    @BeforeEach\n+    void setup() {\n+        MockitoAnnotations.initMocks(this);\n+\n+        when(definitionRepository.getBaseTypes()).thenReturn(Collections.emptyList());\n+        BaseType.setCaseDefinitionRepository(definitionRepository);\n+        BaseType.initialise();\n+\n+        when(numberBaseType.getType()).thenReturn(NumberValidator.TYPE_ID);\n+        BaseType.register(numberBaseType);\n+\n+        validator = new ApprovalStatusValidator();\n+\n+        caseFieldDefinition = caseField(FIELD_ID).build();\n+    }\n+\n+    private CaseFieldDefinitionBuilder caseField(String fieldId) {\n+        return new CaseFieldDefinitionBuilder(fieldId).withType(ApprovalStatusValidator.TYPE_ID);\n+    }\n+\n+    @Test\n+    void shouldFailOnInvalidApprovalStatus() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"5\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"ApprovalStatus\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(1, validationResults.size());\n+        assertEquals(\"Invalid Approval Status Value, Valid values are 0,1 and 2. \"\n+                + \"0 = \u2018Not considered\u2019, 1 = \u2018Approved\u2019, 2 = \u2018Rejected\u2019\",\n+            validationResults.get(0).getErrorMessage());\n+    }\n+\n+    @Test\n+    void shouldValidateOnValidApprovalStatus() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"0\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"ApprovalStatus\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForOtherFieldId() {\n+        caseFieldDefinition = caseField(ORGANISATION_TO_ADD).build();\n+        final JsonNode data = NODE_FACTORY.textNode(\"0\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForEmptyData() {\n+        final JsonNode data = NODE_FACTORY.textNode(\"\");\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyErrorListValidateForNullData() {\n+        final JsonNode data = null;\n+        List<ValidationResult> validationResults =\n+            this.validator.validate(\"OrganisationToAdd\", data, caseFieldDefinition);\n+        assertNotNull(validationResults);\n+        assertEquals(0, validationResults.size());\n+    }\n+\n+    @Test\n+    void getType() {\n+        assertEquals(validator.getType(), BaseType.get(\"Number\"), \"Type is incorrect\");\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjExMTM3NA=="}, "originalCommit": {"oid": "8528ffa70cfb3a60a3cc62ac8e7c01f6e3a618f8"}, "originalPosition": 107}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3674, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}