{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMjUzOTU3", "number": 1042, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMDo1ODoyNFrOEVx7Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwOTowOTozMlrOEXH3_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjczNDkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/types/TextCaseReferenceCaseLinkValidator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMDo1ODoyNFrOG8urMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTo0MjoyNlrOG9Tgzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMzMjQ2NA==", "bodyText": "this seems a good candidate for a utility method put in a utility class", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1042#discussion_r466332464", "createdAt": "2020-08-06T10:58:24Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/types/TextCaseReferenceCaseLinkValidator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package uk.gov.hmcts.ccd.domain.types;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseFieldDefinition;\n+import uk.gov.hmcts.ccd.domain.service.common.CaseService;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.ResourceNotFoundException;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import javax.inject.Singleton;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Named(\"TextCaseReferenceCaseLinkValidator\")\n+@Singleton\n+public class TextCaseReferenceCaseLinkValidator implements PredefinedTypeFieldValidator {\n+\n+    private CaseService caseService;\n+    private TextValidator textValidator;\n+\n+    @Inject\n+    public TextCaseReferenceCaseLinkValidator(@Qualifier(\"TextValidator\") TextValidator textValidator, CaseService caseService) {\n+        this.caseService = caseService;\n+        this.textValidator = textValidator;\n+    }\n+\n+    @Override\n+    public List<ValidationResult> validate(final String dataFieldId,\n+                                           final JsonNode dataValue,\n+                                           final CaseFieldDefinition caseFieldDefinition) {\n+\n+        List<ValidationResult> validationResults = textValidator.validate(dataFieldId, dataValue, caseFieldDefinition);\n+        if (validationResults.isEmpty() && !textValidator.isNullOrEmpty(dataValue)) {\n+            final String value = dataValue.textValue();\n+            return isAnExistingCase(value, dataFieldId);\n+        }\n+        return validationResults;\n+    }\n+\n+    private List<ValidationResult> isAnExistingCase(final String value, final String dataFieldId) {\n+        try {\n+            this.caseService.getCaseDetailsByCaseReference(formatCaseReference(value));\n+            return Collections.emptyList();\n+        } catch (ResourceNotFoundException resourceNotFoundException) {\n+            return Collections.singletonList(\n+                new ValidationResult(\n+                    value + \" does not correspond to an existing CCD case. Please update before proceeding\",\n+                    dataFieldId)\n+            );\n+        }\n+    }\n+\n+    private String formatCaseReference(String caseReference) {\n+        if (caseReference.contains(\"-\")) {\n+            return String.join(\"\", caseReference.split(\"-\"));\n+        }\n+        return caseReference;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bba37ac1bd52b7a299c7b7a7bc62995fc40e035"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM1MDc2Mw==", "bodyText": "Where is going to be the Utility Class ?  Should we inject it ?  that can cause more refactor .  let me know", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1042#discussion_r466350763", "createdAt": "2020-08-06T11:37:43Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/types/TextCaseReferenceCaseLinkValidator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package uk.gov.hmcts.ccd.domain.types;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseFieldDefinition;\n+import uk.gov.hmcts.ccd.domain.service.common.CaseService;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.ResourceNotFoundException;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import javax.inject.Singleton;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Named(\"TextCaseReferenceCaseLinkValidator\")\n+@Singleton\n+public class TextCaseReferenceCaseLinkValidator implements PredefinedTypeFieldValidator {\n+\n+    private CaseService caseService;\n+    private TextValidator textValidator;\n+\n+    @Inject\n+    public TextCaseReferenceCaseLinkValidator(@Qualifier(\"TextValidator\") TextValidator textValidator, CaseService caseService) {\n+        this.caseService = caseService;\n+        this.textValidator = textValidator;\n+    }\n+\n+    @Override\n+    public List<ValidationResult> validate(final String dataFieldId,\n+                                           final JsonNode dataValue,\n+                                           final CaseFieldDefinition caseFieldDefinition) {\n+\n+        List<ValidationResult> validationResults = textValidator.validate(dataFieldId, dataValue, caseFieldDefinition);\n+        if (validationResults.isEmpty() && !textValidator.isNullOrEmpty(dataValue)) {\n+            final String value = dataValue.textValue();\n+            return isAnExistingCase(value, dataFieldId);\n+        }\n+        return validationResults;\n+    }\n+\n+    private List<ValidationResult> isAnExistingCase(final String value, final String dataFieldId) {\n+        try {\n+            this.caseService.getCaseDetailsByCaseReference(formatCaseReference(value));\n+            return Collections.emptyList();\n+        } catch (ResourceNotFoundException resourceNotFoundException) {\n+            return Collections.singletonList(\n+                new ValidationResult(\n+                    value + \" does not correspond to an existing CCD case. Please update before proceeding\",\n+                    dataFieldId)\n+            );\n+        }\n+    }\n+\n+    private String formatCaseReference(String caseReference) {\n+        if (caseReference.contains(\"-\")) {\n+            return String.join(\"\", caseReference.split(\"-\"));\n+        }\n+        return caseReference;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMzMjQ2NA=="}, "originalCommit": {"oid": "2bba37ac1bd52b7a299c7b7a7bc62995fc40e035"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzNjAxNQ==", "bodyText": "DONE", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1042#discussion_r466936015", "createdAt": "2020-08-07T09:42:26Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/types/TextCaseReferenceCaseLinkValidator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package uk.gov.hmcts.ccd.domain.types;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseFieldDefinition;\n+import uk.gov.hmcts.ccd.domain.service.common.CaseService;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.ResourceNotFoundException;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import javax.inject.Singleton;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Named(\"TextCaseReferenceCaseLinkValidator\")\n+@Singleton\n+public class TextCaseReferenceCaseLinkValidator implements PredefinedTypeFieldValidator {\n+\n+    private CaseService caseService;\n+    private TextValidator textValidator;\n+\n+    @Inject\n+    public TextCaseReferenceCaseLinkValidator(@Qualifier(\"TextValidator\") TextValidator textValidator, CaseService caseService) {\n+        this.caseService = caseService;\n+        this.textValidator = textValidator;\n+    }\n+\n+    @Override\n+    public List<ValidationResult> validate(final String dataFieldId,\n+                                           final JsonNode dataValue,\n+                                           final CaseFieldDefinition caseFieldDefinition) {\n+\n+        List<ValidationResult> validationResults = textValidator.validate(dataFieldId, dataValue, caseFieldDefinition);\n+        if (validationResults.isEmpty() && !textValidator.isNullOrEmpty(dataValue)) {\n+            final String value = dataValue.textValue();\n+            return isAnExistingCase(value, dataFieldId);\n+        }\n+        return validationResults;\n+    }\n+\n+    private List<ValidationResult> isAnExistingCase(final String value, final String dataFieldId) {\n+        try {\n+            this.caseService.getCaseDetailsByCaseReference(formatCaseReference(value));\n+            return Collections.emptyList();\n+        } catch (ResourceNotFoundException resourceNotFoundException) {\n+            return Collections.singletonList(\n+                new ValidationResult(\n+                    value + \" does not correspond to an existing CCD case. Please update before proceeding\",\n+                    dataFieldId)\n+            );\n+        }\n+    }\n+\n+    private String formatCaseReference(String caseReference) {\n+        if (caseReference.contains(\"-\")) {\n+            return String.join(\"\", caseReference.split(\"-\"));\n+        }\n+        return caseReference;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMzMjQ2NA=="}, "originalCommit": {"oid": "2bba37ac1bd52b7a299c7b7a7bc62995fc40e035"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjczOTM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/types/TextCaseReferenceCaseLinkValidator.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMDo1OTo1MFrOG8ut6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMTo0NjowNVrOG9Wwxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMzMzE2MQ==", "bodyText": "what happens in case of other exceptions that are not ResourceNotFoundException? we should test that out and decide what happens in that case", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1042#discussion_r466333161", "createdAt": "2020-08-06T10:59:50Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/types/TextCaseReferenceCaseLinkValidator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package uk.gov.hmcts.ccd.domain.types;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseFieldDefinition;\n+import uk.gov.hmcts.ccd.domain.service.common.CaseService;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.ResourceNotFoundException;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import javax.inject.Singleton;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Named(\"TextCaseReferenceCaseLinkValidator\")\n+@Singleton\n+public class TextCaseReferenceCaseLinkValidator implements PredefinedTypeFieldValidator {\n+\n+    private CaseService caseService;\n+    private TextValidator textValidator;\n+\n+    @Inject\n+    public TextCaseReferenceCaseLinkValidator(@Qualifier(\"TextValidator\") TextValidator textValidator, CaseService caseService) {\n+        this.caseService = caseService;\n+        this.textValidator = textValidator;\n+    }\n+\n+    @Override\n+    public List<ValidationResult> validate(final String dataFieldId,\n+                                           final JsonNode dataValue,\n+                                           final CaseFieldDefinition caseFieldDefinition) {\n+\n+        List<ValidationResult> validationResults = textValidator.validate(dataFieldId, dataValue, caseFieldDefinition);\n+        if (validationResults.isEmpty() && !textValidator.isNullOrEmpty(dataValue)) {\n+            final String value = dataValue.textValue();\n+            return isAnExistingCase(value, dataFieldId);\n+        }\n+        return validationResults;\n+    }\n+\n+    private List<ValidationResult> isAnExistingCase(final String value, final String dataFieldId) {\n+        try {\n+            this.caseService.getCaseDetailsByCaseReference(formatCaseReference(value));\n+            return Collections.emptyList();\n+        } catch (ResourceNotFoundException resourceNotFoundException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bba37ac1bd52b7a299c7b7a7bc62995fc40e035"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM1MDE5OQ==", "bodyText": "There are some exception in uk.gov.hmcts.ccd.endpoint.exceptions .  1). Should we  throw BadRequestException() for unexpected errors ?   2) Log the error  and return a ValidationException() ?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1042#discussion_r466350199", "createdAt": "2020-08-06T11:36:35Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/types/TextCaseReferenceCaseLinkValidator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package uk.gov.hmcts.ccd.domain.types;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseFieldDefinition;\n+import uk.gov.hmcts.ccd.domain.service.common.CaseService;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.ResourceNotFoundException;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import javax.inject.Singleton;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Named(\"TextCaseReferenceCaseLinkValidator\")\n+@Singleton\n+public class TextCaseReferenceCaseLinkValidator implements PredefinedTypeFieldValidator {\n+\n+    private CaseService caseService;\n+    private TextValidator textValidator;\n+\n+    @Inject\n+    public TextCaseReferenceCaseLinkValidator(@Qualifier(\"TextValidator\") TextValidator textValidator, CaseService caseService) {\n+        this.caseService = caseService;\n+        this.textValidator = textValidator;\n+    }\n+\n+    @Override\n+    public List<ValidationResult> validate(final String dataFieldId,\n+                                           final JsonNode dataValue,\n+                                           final CaseFieldDefinition caseFieldDefinition) {\n+\n+        List<ValidationResult> validationResults = textValidator.validate(dataFieldId, dataValue, caseFieldDefinition);\n+        if (validationResults.isEmpty() && !textValidator.isNullOrEmpty(dataValue)) {\n+            final String value = dataValue.textValue();\n+            return isAnExistingCase(value, dataFieldId);\n+        }\n+        return validationResults;\n+    }\n+\n+    private List<ValidationResult> isAnExistingCase(final String value, final String dataFieldId) {\n+        try {\n+            this.caseService.getCaseDetailsByCaseReference(formatCaseReference(value));\n+            return Collections.emptyList();\n+        } catch (ResourceNotFoundException resourceNotFoundException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMzMzE2MQ=="}, "originalCommit": {"oid": "2bba37ac1bd52b7a299c7b7a7bc62995fc40e035"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk4OTExOA==", "bodyText": "DONE", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1042#discussion_r466989118", "createdAt": "2020-08-07T11:45:40Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/types/TextCaseReferenceCaseLinkValidator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package uk.gov.hmcts.ccd.domain.types;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseFieldDefinition;\n+import uk.gov.hmcts.ccd.domain.service.common.CaseService;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.ResourceNotFoundException;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import javax.inject.Singleton;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Named(\"TextCaseReferenceCaseLinkValidator\")\n+@Singleton\n+public class TextCaseReferenceCaseLinkValidator implements PredefinedTypeFieldValidator {\n+\n+    private CaseService caseService;\n+    private TextValidator textValidator;\n+\n+    @Inject\n+    public TextCaseReferenceCaseLinkValidator(@Qualifier(\"TextValidator\") TextValidator textValidator, CaseService caseService) {\n+        this.caseService = caseService;\n+        this.textValidator = textValidator;\n+    }\n+\n+    @Override\n+    public List<ValidationResult> validate(final String dataFieldId,\n+                                           final JsonNode dataValue,\n+                                           final CaseFieldDefinition caseFieldDefinition) {\n+\n+        List<ValidationResult> validationResults = textValidator.validate(dataFieldId, dataValue, caseFieldDefinition);\n+        if (validationResults.isEmpty() && !textValidator.isNullOrEmpty(dataValue)) {\n+            final String value = dataValue.textValue();\n+            return isAnExistingCase(value, dataFieldId);\n+        }\n+        return validationResults;\n+    }\n+\n+    private List<ValidationResult> isAnExistingCase(final String value, final String dataFieldId) {\n+        try {\n+            this.caseService.getCaseDetailsByCaseReference(formatCaseReference(value));\n+            return Collections.emptyList();\n+        } catch (ResourceNotFoundException resourceNotFoundException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMzMzE2MQ=="}, "originalCommit": {"oid": "2bba37ac1bd52b7a299c7b7a7bc62995fc40e035"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk4OTI1NQ==", "bodyText": "DONE", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1042#discussion_r466989255", "createdAt": "2020-08-07T11:46:05Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/types/TextCaseReferenceCaseLinkValidator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package uk.gov.hmcts.ccd.domain.types;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseFieldDefinition;\n+import uk.gov.hmcts.ccd.domain.service.common.CaseService;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.ResourceNotFoundException;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import javax.inject.Singleton;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Named(\"TextCaseReferenceCaseLinkValidator\")\n+@Singleton\n+public class TextCaseReferenceCaseLinkValidator implements PredefinedTypeFieldValidator {\n+\n+    private CaseService caseService;\n+    private TextValidator textValidator;\n+\n+    @Inject\n+    public TextCaseReferenceCaseLinkValidator(@Qualifier(\"TextValidator\") TextValidator textValidator, CaseService caseService) {\n+        this.caseService = caseService;\n+        this.textValidator = textValidator;\n+    }\n+\n+    @Override\n+    public List<ValidationResult> validate(final String dataFieldId,\n+                                           final JsonNode dataValue,\n+                                           final CaseFieldDefinition caseFieldDefinition) {\n+\n+        List<ValidationResult> validationResults = textValidator.validate(dataFieldId, dataValue, caseFieldDefinition);\n+        if (validationResults.isEmpty() && !textValidator.isNullOrEmpty(dataValue)) {\n+            final String value = dataValue.textValue();\n+            return isAnExistingCase(value, dataFieldId);\n+        }\n+        return validationResults;\n+    }\n+\n+    private List<ValidationResult> isAnExistingCase(final String value, final String dataFieldId) {\n+        try {\n+            this.caseService.getCaseDetailsByCaseReference(formatCaseReference(value));\n+            return Collections.emptyList();\n+        } catch (ResourceNotFoundException resourceNotFoundException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMzMzE2MQ=="}, "originalCommit": {"oid": "2bba37ac1bd52b7a299c7b7a7bc62995fc40e035"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjc0NjQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/types/TextCaseReferenceCaseLinkValidator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMTowMTo1OVrOG8uyDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzo1NTo1NVrOG80rIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMzNDIyMQ==", "bodyText": "Please update before proceeding is more a UI type of error message. But this validator is supposed to be generic. I would remove that from the message", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1042#discussion_r466334221", "createdAt": "2020-08-06T11:01:59Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/types/TextCaseReferenceCaseLinkValidator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package uk.gov.hmcts.ccd.domain.types;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseFieldDefinition;\n+import uk.gov.hmcts.ccd.domain.service.common.CaseService;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.ResourceNotFoundException;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import javax.inject.Singleton;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Named(\"TextCaseReferenceCaseLinkValidator\")\n+@Singleton\n+public class TextCaseReferenceCaseLinkValidator implements PredefinedTypeFieldValidator {\n+\n+    private CaseService caseService;\n+    private TextValidator textValidator;\n+\n+    @Inject\n+    public TextCaseReferenceCaseLinkValidator(@Qualifier(\"TextValidator\") TextValidator textValidator, CaseService caseService) {\n+        this.caseService = caseService;\n+        this.textValidator = textValidator;\n+    }\n+\n+    @Override\n+    public List<ValidationResult> validate(final String dataFieldId,\n+                                           final JsonNode dataValue,\n+                                           final CaseFieldDefinition caseFieldDefinition) {\n+\n+        List<ValidationResult> validationResults = textValidator.validate(dataFieldId, dataValue, caseFieldDefinition);\n+        if (validationResults.isEmpty() && !textValidator.isNullOrEmpty(dataValue)) {\n+            final String value = dataValue.textValue();\n+            return isAnExistingCase(value, dataFieldId);\n+        }\n+        return validationResults;\n+    }\n+\n+    private List<ValidationResult> isAnExistingCase(final String value, final String dataFieldId) {\n+        try {\n+            this.caseService.getCaseDetailsByCaseReference(formatCaseReference(value));\n+            return Collections.emptyList();\n+        } catch (ResourceNotFoundException resourceNotFoundException) {\n+            return Collections.singletonList(\n+                new ValidationResult(\n+                    value + \" does not correspond to an existing CCD case. Please update before proceeding\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bba37ac1bd52b7a299c7b7a7bc62995fc40e035"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM0NzYwMg==", "bodyText": "what is would be the final message mario ? the current one without the \"Please update before proceeding\".   The message that I added come from the ticket .  https://tools.hmcts.net/jira/browse/RDM-2676.", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1042#discussion_r466347602", "createdAt": "2020-08-06T11:31:06Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/types/TextCaseReferenceCaseLinkValidator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package uk.gov.hmcts.ccd.domain.types;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseFieldDefinition;\n+import uk.gov.hmcts.ccd.domain.service.common.CaseService;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.ResourceNotFoundException;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import javax.inject.Singleton;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Named(\"TextCaseReferenceCaseLinkValidator\")\n+@Singleton\n+public class TextCaseReferenceCaseLinkValidator implements PredefinedTypeFieldValidator {\n+\n+    private CaseService caseService;\n+    private TextValidator textValidator;\n+\n+    @Inject\n+    public TextCaseReferenceCaseLinkValidator(@Qualifier(\"TextValidator\") TextValidator textValidator, CaseService caseService) {\n+        this.caseService = caseService;\n+        this.textValidator = textValidator;\n+    }\n+\n+    @Override\n+    public List<ValidationResult> validate(final String dataFieldId,\n+                                           final JsonNode dataValue,\n+                                           final CaseFieldDefinition caseFieldDefinition) {\n+\n+        List<ValidationResult> validationResults = textValidator.validate(dataFieldId, dataValue, caseFieldDefinition);\n+        if (validationResults.isEmpty() && !textValidator.isNullOrEmpty(dataValue)) {\n+            final String value = dataValue.textValue();\n+            return isAnExistingCase(value, dataFieldId);\n+        }\n+        return validationResults;\n+    }\n+\n+    private List<ValidationResult> isAnExistingCase(final String value, final String dataFieldId) {\n+        try {\n+            this.caseService.getCaseDetailsByCaseReference(formatCaseReference(value));\n+            return Collections.emptyList();\n+        } catch (ResourceNotFoundException resourceNotFoundException) {\n+            return Collections.singletonList(\n+                new ValidationResult(\n+                    value + \" does not correspond to an existing CCD case. Please update before proceeding\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMzNDIyMQ=="}, "originalCommit": {"oid": "2bba37ac1bd52b7a299c7b7a7bc62995fc40e035"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQzMDc1Mw==", "bodyText": "Mario I ended up removing the \"  Please update before proceeding\".  As suggested . We need to update the ticket too.  DONE", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1042#discussion_r466430753", "createdAt": "2020-08-06T13:55:55Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/types/TextCaseReferenceCaseLinkValidator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package uk.gov.hmcts.ccd.domain.types;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseFieldDefinition;\n+import uk.gov.hmcts.ccd.domain.service.common.CaseService;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.ResourceNotFoundException;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import javax.inject.Singleton;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Named(\"TextCaseReferenceCaseLinkValidator\")\n+@Singleton\n+public class TextCaseReferenceCaseLinkValidator implements PredefinedTypeFieldValidator {\n+\n+    private CaseService caseService;\n+    private TextValidator textValidator;\n+\n+    @Inject\n+    public TextCaseReferenceCaseLinkValidator(@Qualifier(\"TextValidator\") TextValidator textValidator, CaseService caseService) {\n+        this.caseService = caseService;\n+        this.textValidator = textValidator;\n+    }\n+\n+    @Override\n+    public List<ValidationResult> validate(final String dataFieldId,\n+                                           final JsonNode dataValue,\n+                                           final CaseFieldDefinition caseFieldDefinition) {\n+\n+        List<ValidationResult> validationResults = textValidator.validate(dataFieldId, dataValue, caseFieldDefinition);\n+        if (validationResults.isEmpty() && !textValidator.isNullOrEmpty(dataValue)) {\n+            final String value = dataValue.textValue();\n+            return isAnExistingCase(value, dataFieldId);\n+        }\n+        return validationResults;\n+    }\n+\n+    private List<ValidationResult> isAnExistingCase(final String value, final String dataFieldId) {\n+        try {\n+            this.caseService.getCaseDetailsByCaseReference(formatCaseReference(value));\n+            return Collections.emptyList();\n+        } catch (ResourceNotFoundException resourceNotFoundException) {\n+            return Collections.singletonList(\n+                new ValidationResult(\n+                    value + \" does not correspond to an existing CCD case. Please update before proceeding\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMzNDIyMQ=="}, "originalCommit": {"oid": "2bba37ac1bd52b7a299c7b7a7bc62995fc40e035"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjc0OTkzOnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/data/casedetails/query/CaseDetailsQueryBuilderFactoryTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMTowMzowM1rOG8uz-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzo0NTo1NVrOG80PEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMzNDcxMw==", "bodyText": "we need to add unite tests here for the unsecured case we introduced", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1042#discussion_r466334713", "createdAt": "2020-08-06T11:03:03Z", "author": {"login": "mario-paniccia"}, "path": "src/test/java/uk/gov/hmcts/ccd/data/casedetails/query/CaseDetailsQueryBuilderFactoryTest.java", "diffHunk": "@@ -67,7 +67,7 @@ void setUp() {\n         @Test\n         @DisplayName(\"should secure new builder instance with user authorisation\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bba37ac1bd52b7a299c7b7a7bc62995fc40e035"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQwMjQ4NQ==", "bodyText": "ok \ud83d\udc4d", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1042#discussion_r466402485", "createdAt": "2020-08-06T13:14:34Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/test/java/uk/gov/hmcts/ccd/data/casedetails/query/CaseDetailsQueryBuilderFactoryTest.java", "diffHunk": "@@ -67,7 +67,7 @@ void setUp() {\n         @Test\n         @DisplayName(\"should secure new builder instance with user authorisation\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMzNDcxMw=="}, "originalCommit": {"oid": "2bba37ac1bd52b7a299c7b7a7bc62995fc40e035"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQyMzU3MA==", "bodyText": "DONE", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1042#discussion_r466423570", "createdAt": "2020-08-06T13:45:55Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/test/java/uk/gov/hmcts/ccd/data/casedetails/query/CaseDetailsQueryBuilderFactoryTest.java", "diffHunk": "@@ -67,7 +67,7 @@ void setUp() {\n         @Test\n         @DisplayName(\"should secure new builder instance with user authorisation\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMzNDcxMw=="}, "originalCommit": {"oid": "2bba37ac1bd52b7a299c7b7a7bc62995fc40e035"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjc1OTIwOnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/domain/types/CaseDataValidatorTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMTowNjowMVrOG8u5Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDo0MjoyMlrOG9cl-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMzNjEwMg==", "bodyText": "CaseDataValidatorTest is a generic class, should not contain tests for a specific field like this test. Le't make it more generic", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1042#discussion_r466336102", "createdAt": "2020-08-06T11:06:01Z", "author": {"login": "mario-paniccia"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/types/CaseDataValidatorTest.java", "diffHunk": "@@ -338,6 +338,24 @@ public void invalidCollection_notObject() throws Exception {\n         assertThat(result1.getFieldId(), equalTo(\"Initials.1\"));\n     }\n \n+    @Test\n+    public void shouldFailForTextCaseReference() throws Exception {\n+        final String DATA = \"{\\n\" +\n+            \"        \\\"CaseReference\\\": \\\"1596XXXXX1048-4059XXXOOOO\\\"\\n\" +\n+            \"      }\";\n+\n+        final Map<String, JsonNode> values = MAPPER.readValue(DATA, new TypeReference<HashMap<String, JsonNode>>() {\n+        });\n+        final List<ValidationResult> results = caseDataValidator.validate(values, caseFields);\n+        assertEquals(results.toString(), 1, results.size());\n+\n+        final ValidationResult result0 = results.get(0);\n+        assertThat(result0.getFieldId(), equalTo(\"CaseReference\"));\n+        assertThat(result0.getErrorMessage(),\n+            equalTo(\"The data entered is not valid for this type of field, please delete and re-enter using only valid data\")\n+        );\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bba37ac1bd52b7a299c7b7a7bc62995fc40e035"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQyODUwMg==", "bodyText": "mario, The current test is validating counreate text fields features.  for instance textFieldWithMaxMin  and textFieldWithInvalidMaxMin .  Should a rename my test for refer to a predefined-field ? or Should I Create a new test class for Predefined types ?", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1042#discussion_r466428502", "createdAt": "2020-08-06T13:52:53Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/types/CaseDataValidatorTest.java", "diffHunk": "@@ -338,6 +338,24 @@ public void invalidCollection_notObject() throws Exception {\n         assertThat(result1.getFieldId(), equalTo(\"Initials.1\"));\n     }\n \n+    @Test\n+    public void shouldFailForTextCaseReference() throws Exception {\n+        final String DATA = \"{\\n\" +\n+            \"        \\\"CaseReference\\\": \\\"1596XXXXX1048-4059XXXOOOO\\\"\\n\" +\n+            \"      }\";\n+\n+        final Map<String, JsonNode> values = MAPPER.readValue(DATA, new TypeReference<HashMap<String, JsonNode>>() {\n+        });\n+        final List<ValidationResult> results = caseDataValidator.validate(values, caseFields);\n+        assertEquals(results.toString(), 1, results.size());\n+\n+        final ValidationResult result0 = results.get(0);\n+        assertThat(result0.getFieldId(), equalTo(\"CaseReference\"));\n+        assertThat(result0.getErrorMessage(),\n+            equalTo(\"The data entered is not valid for this type of field, please delete and re-enter using only valid data\")\n+        );\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMzNjEwMg=="}, "originalCommit": {"oid": "2bba37ac1bd52b7a299c7b7a7bc62995fc40e035"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4NDc5NA==", "bodyText": "More test has been added . DONE", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1042#discussion_r467084794", "createdAt": "2020-08-07T14:42:22Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/types/CaseDataValidatorTest.java", "diffHunk": "@@ -338,6 +338,24 @@ public void invalidCollection_notObject() throws Exception {\n         assertThat(result1.getFieldId(), equalTo(\"Initials.1\"));\n     }\n \n+    @Test\n+    public void shouldFailForTextCaseReference() throws Exception {\n+        final String DATA = \"{\\n\" +\n+            \"        \\\"CaseReference\\\": \\\"1596XXXXX1048-4059XXXOOOO\\\"\\n\" +\n+            \"      }\";\n+\n+        final Map<String, JsonNode> values = MAPPER.readValue(DATA, new TypeReference<HashMap<String, JsonNode>>() {\n+        });\n+        final List<ValidationResult> results = caseDataValidator.validate(values, caseFields);\n+        assertEquals(results.toString(), 1, results.size());\n+\n+        final ValidationResult result0 = results.get(0);\n+        assertThat(result0.getFieldId(), equalTo(\"CaseReference\"));\n+        assertThat(result0.getErrorMessage(),\n+            equalTo(\"The data entered is not valid for this type of field, please delete and re-enter using only valid data\")\n+        );\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMzNjEwMg=="}, "originalCommit": {"oid": "2bba37ac1bd52b7a299c7b7a7bc62995fc40e035"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjc2MDQ5OnYy", "diffSide": "RIGHT", "path": "src/test/java/uk/gov/hmcts/ccd/domain/types/CaseDataValidatorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMTowNjoyOFrOG8u6Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDo0MTozN1rOG9ckKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMzNjI5NQ==", "bodyText": "we need to introduce more tests. We have made an important change in the class logic. Please test it well", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1042#discussion_r466336295", "createdAt": "2020-08-06T11:06:28Z", "author": {"login": "mario-paniccia"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/types/CaseDataValidatorTest.java", "diffHunk": "@@ -338,6 +338,24 @@ public void invalidCollection_notObject() throws Exception {\n         assertThat(result1.getFieldId(), equalTo(\"Initials.1\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bba37ac1bd52b7a299c7b7a7bc62995fc40e035"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4NDMyOA==", "bodyText": "DONE", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1042#discussion_r467084328", "createdAt": "2020-08-07T14:41:37Z", "author": {"login": "Thor-tech-of-metal"}, "path": "src/test/java/uk/gov/hmcts/ccd/domain/types/CaseDataValidatorTest.java", "diffHunk": "@@ -338,6 +338,24 @@ public void invalidCollection_notObject() throws Exception {\n         assertThat(result1.getFieldId(), equalTo(\"Initials.1\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMzNjI5NQ=="}, "originalCommit": {"oid": "2bba37ac1bd52b7a299c7b7a7bc62995fc40e035"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjc5MTA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/common/CaseReferenceUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwOTowMjowOVrOG-u5hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwOTowMjowOVrOG-u5hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQzMzI4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class CaseReferenceUtils {\n          \n          \n            \n            public class CommonUtils {", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1042#discussion_r468433287", "createdAt": "2020-08-11T09:02:09Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/common/CaseReferenceUtils.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package uk.gov.hmcts.ccd.domain.model.common;\n+\n+public class CaseReferenceUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "784d7ff7dcc5d1386ab73f0d400b8f5725a0796b"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjc5MjMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/common/CaseReferenceUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwOTowMjozMVrOG-u6Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwOTowMjozMVrOG-u6Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQzMzQ4Nw==", "bodyText": "possible to come up with a more descriptive name? And add a javadoc with example please", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1042#discussion_r468433487", "createdAt": "2020-08-11T09:02:31Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/common/CaseReferenceUtils.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package uk.gov.hmcts.ccd.domain.model.common;\n+\n+public class CaseReferenceUtils {\n+\n+    private CaseReferenceUtils() {\n+    }\n+\n+    public static String formatCaseReference(String caseReference) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "784d7ff7dcc5d1386ab73f0d400b8f5725a0796b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjgxNzI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/uk/gov/hmcts/ccd/domain/types/TextCaseReferenceCaseLinkValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwOTowOTozMlrOG-vJzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwOToxMDowMlrOG-vK_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQzNzQ1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        final String message = \"Un expected error during case link validation.\";\n          \n          \n            \n                       String message = \"Unexpected error during case link validation.\";", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1042#discussion_r468437455", "createdAt": "2020-08-11T09:09:32Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/types/TextCaseReferenceCaseLinkValidator.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package uk.gov.hmcts.ccd.domain.types;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseFieldDefinition;\n+import uk.gov.hmcts.ccd.domain.service.common.CaseService;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.ResourceNotFoundException;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.ServiceException;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import javax.inject.Singleton;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static uk.gov.hmcts.ccd.domain.model.common.CaseReferenceUtils.formatCaseReference;\n+\n+@Named(\"TextCaseReferenceCaseLinkValidator\")\n+@Singleton\n+public class TextCaseReferenceCaseLinkValidator implements PredefinedTypeFieldValidator {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(TextCaseReferenceCaseLinkValidator.class);\n+    private CaseService caseService;\n+    private TextValidator textValidator;\n+\n+    @Inject\n+    public TextCaseReferenceCaseLinkValidator(@Qualifier(\"TextValidator\") TextValidator textValidator, CaseService caseService) {\n+        this.caseService = caseService;\n+        this.textValidator = textValidator;\n+    }\n+\n+    @Override\n+    public List<ValidationResult> validate(final String dataFieldId,\n+                                           final JsonNode dataValue,\n+                                           final CaseFieldDefinition caseFieldDefinition) {\n+\n+        List<ValidationResult> validationResults = textValidator.validate(dataFieldId, dataValue, caseFieldDefinition);\n+        if (validationResults.isEmpty() && !textValidator.isNullOrEmpty(dataValue)) {\n+            final String value = dataValue.textValue();\n+            return isAnExistingCase(value, dataFieldId);\n+        }\n+        return validationResults;\n+    }\n+\n+    private List<ValidationResult> isAnExistingCase(final String value, final String dataFieldId) {\n+        try {\n+            this.caseService.getCaseDetailsByCaseReference(formatCaseReference(value));\n+            return Collections.emptyList();\n+        } catch (ResourceNotFoundException resourceNotFoundException) {\n+            return Collections.singletonList(\n+                new ValidationResult(\n+                    value + \" does not correspond to an existing CCD case.\",\n+                    dataFieldId)\n+            );\n+        } catch (Exception exception) {\n+            final String message = \"Un expected error during case link validation.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "784d7ff7dcc5d1386ab73f0d400b8f5725a0796b"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQzNzc1OQ==", "bodyText": "please change your IDE setting to not add 'final' by default", "url": "https://github.com/hmcts/ccd-data-store-api/pull/1042#discussion_r468437759", "createdAt": "2020-08-11T09:10:02Z", "author": {"login": "mario-paniccia"}, "path": "src/main/java/uk/gov/hmcts/ccd/domain/types/TextCaseReferenceCaseLinkValidator.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package uk.gov.hmcts.ccd.domain.types;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseFieldDefinition;\n+import uk.gov.hmcts.ccd.domain.service.common.CaseService;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.ResourceNotFoundException;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.ServiceException;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import javax.inject.Singleton;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static uk.gov.hmcts.ccd.domain.model.common.CaseReferenceUtils.formatCaseReference;\n+\n+@Named(\"TextCaseReferenceCaseLinkValidator\")\n+@Singleton\n+public class TextCaseReferenceCaseLinkValidator implements PredefinedTypeFieldValidator {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(TextCaseReferenceCaseLinkValidator.class);\n+    private CaseService caseService;\n+    private TextValidator textValidator;\n+\n+    @Inject\n+    public TextCaseReferenceCaseLinkValidator(@Qualifier(\"TextValidator\") TextValidator textValidator, CaseService caseService) {\n+        this.caseService = caseService;\n+        this.textValidator = textValidator;\n+    }\n+\n+    @Override\n+    public List<ValidationResult> validate(final String dataFieldId,\n+                                           final JsonNode dataValue,\n+                                           final CaseFieldDefinition caseFieldDefinition) {\n+\n+        List<ValidationResult> validationResults = textValidator.validate(dataFieldId, dataValue, caseFieldDefinition);\n+        if (validationResults.isEmpty() && !textValidator.isNullOrEmpty(dataValue)) {\n+            final String value = dataValue.textValue();\n+            return isAnExistingCase(value, dataFieldId);\n+        }\n+        return validationResults;\n+    }\n+\n+    private List<ValidationResult> isAnExistingCase(final String value, final String dataFieldId) {\n+        try {\n+            this.caseService.getCaseDetailsByCaseReference(formatCaseReference(value));\n+            return Collections.emptyList();\n+        } catch (ResourceNotFoundException resourceNotFoundException) {\n+            return Collections.singletonList(\n+                new ValidationResult(\n+                    value + \" does not correspond to an existing CCD case.\",\n+                    dataFieldId)\n+            );\n+        } catch (Exception exception) {\n+            final String message = \"Un expected error during case link validation.\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQzNzQ1NQ=="}, "originalCommit": {"oid": "784d7ff7dcc5d1386ab73f0d400b8f5725a0796b"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3784, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}