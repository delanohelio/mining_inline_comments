{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3NzMyMDgx", "number": 2299, "title": "Add more tests from calabash to espresso", "bodyText": "", "createdAt": "2020-07-28T10:55:28Z", "url": "https://github.com/dimagi/commcare-android/pull/2299", "merged": true, "mergeCommit": {"oid": "f30a5235f5e8690dc036ba4912f579ce3908c8f9"}, "closed": true, "closedAt": "2020-08-25T11:59:24Z", "author": {"login": "ShivamPokhriyal"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8IhxaABqjM2MjczNzg1ODc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCVJVQgH2gAyNDU3NzMyMDgxOmYwZjVkZTM5ZjhiZDY4YWYzMGM5NjQ1Y2FhNjM4OTlmNmMyNDIyODU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e5adb09e5aa4e848fb598adf89f52c840c6b0201", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/e5adb09e5aa4e848fb598adf89f52c840c6b0201", "committedDate": "2020-08-06T04:30:48Z", "message": "Add kotlin dependency to instrumentation tests"}, "afterCommit": {"oid": "fd4743ac0a70838deed97c62c82ffea439ce537e", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/fd4743ac0a70838deed97c62c82ffea439ce537e", "committedDate": "2020-08-06T04:57:04Z", "message": "Remove assertion"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NjI2NzE2", "url": "https://github.com/dimagi/commcare-android/pull/2299#pullrequestreview-465626716", "createdAt": "2020-08-12T06:35:48Z", "commit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjozNTo0OFrOG_Tp4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODowNjozMFrOG_WY7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzNTQ4OA==", "bodyText": "we should rename to InstallFromListTest as these tests are only about the Install from list feature.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r469035488", "createdAt": "2020-08-12T06:35:48Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppInstallationTest.kt", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.commcare.androidTests\n+\n+import android.widget.ListView\n+import androidx.test.espresso.Espresso.closeSoftKeyboard\n+import androidx.test.espresso.Espresso.onView\n+import androidx.test.espresso.Espresso.onData\n+import androidx.test.espresso.action.ViewActions.*\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.intent.Intents.intended\n+import androidx.test.espresso.intent.matcher.IntentMatchers.hasComponent\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import junit.framework.Assert.fail\n+import org.commcare.CommCareApplication\n+import org.commcare.CommCareInstrumentationTestApplication\n+import org.commcare.activities.InstallFromListActivity\n+import org.commcare.android.database.global.models.AppAvailableToInstall\n+import org.commcare.dalvik.BuildConfig\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Description\n+import org.hamcrest.Matchers.*\n+import org.hamcrest.TypeSafeMatcher\n+import org.junit.After\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppInstallationTest: BaseTest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzNjYwNA==", "bodyText": "what's the reason behind repeating the closeSoftKeyboard call ?", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r469036604", "createdAt": "2020-08-12T06:38:40Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppInstallationTest.kt", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.commcare.androidTests\n+\n+import android.widget.ListView\n+import androidx.test.espresso.Espresso.closeSoftKeyboard\n+import androidx.test.espresso.Espresso.onView\n+import androidx.test.espresso.Espresso.onData\n+import androidx.test.espresso.action.ViewActions.*\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.intent.Intents.intended\n+import androidx.test.espresso.intent.matcher.IntentMatchers.hasComponent\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import junit.framework.Assert.fail\n+import org.commcare.CommCareApplication\n+import org.commcare.CommCareInstrumentationTestApplication\n+import org.commcare.activities.InstallFromListActivity\n+import org.commcare.android.database.global.models.AppAvailableToInstall\n+import org.commcare.dalvik.BuildConfig\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Description\n+import org.hamcrest.Matchers.*\n+import org.hamcrest.TypeSafeMatcher\n+import org.junit.After\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppInstallationTest: BaseTest() {\n+\n+    @After\n+    fun setup() {\n+        // Uninstall app.\n+        InstrumentationUtility.uninstallCurrentApp()\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for Another User\"))\n+                .perform(click())\n+    }\n+\n+    @Test\n+    fun testAppInstall_usingMobieWorkerDetails() {\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        // Confirm the activity\n+        intended(hasComponent(InstallFromListActivity::class.java.name))\n+\n+        // Verify that we start out in mobile user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(isDisplayed()))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(not(isDisplayed())))\n+\n+        // Toggle switch\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Verify that we're now in web user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(not(isDisplayed())))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(isDisplayed()))\n+\n+        // Switch back to mobile auth view\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Test getting app list for a mobile user\n+        onView(withId(R.id.edit_username))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+        closeSoftKeyboard()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MTU4OA==", "bodyText": "we should create a method wrapping the text input and close keyboard calls and call that instead to avoid multiple close keyboard calls.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r469041588", "createdAt": "2020-08-12T06:50:18Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppInstallationTest.kt", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.commcare.androidTests\n+\n+import android.widget.ListView\n+import androidx.test.espresso.Espresso.closeSoftKeyboard\n+import androidx.test.espresso.Espresso.onView\n+import androidx.test.espresso.Espresso.onData\n+import androidx.test.espresso.action.ViewActions.*\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.intent.Intents.intended\n+import androidx.test.espresso.intent.matcher.IntentMatchers.hasComponent\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import junit.framework.Assert.fail\n+import org.commcare.CommCareApplication\n+import org.commcare.CommCareInstrumentationTestApplication\n+import org.commcare.activities.InstallFromListActivity\n+import org.commcare.android.database.global.models.AppAvailableToInstall\n+import org.commcare.dalvik.BuildConfig\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Description\n+import org.hamcrest.Matchers.*\n+import org.hamcrest.TypeSafeMatcher\n+import org.junit.After\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppInstallationTest: BaseTest() {\n+\n+    @After\n+    fun setup() {\n+        // Uninstall app.\n+        InstrumentationUtility.uninstallCurrentApp()\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for Another User\"))\n+                .perform(click())\n+    }\n+\n+    @Test\n+    fun testAppInstall_usingMobieWorkerDetails() {\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        // Confirm the activity\n+        intended(hasComponent(InstallFromListActivity::class.java.name))\n+\n+        // Verify that we start out in mobile user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(isDisplayed()))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(not(isDisplayed())))\n+\n+        // Toggle switch\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Verify that we're now in web user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(not(isDisplayed())))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(isDisplayed()))\n+\n+        // Switch back to mobile auth view\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Test getting app list for a mobile user\n+        onView(withId(R.id.edit_username))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+        closeSoftKeyboard()\n+        onView(withId(R.id.edit_domain))\n+                .perform(typeText(\"commcare-tests\"))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.edit_password))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MjQwMw==", "bodyText": "very cool.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r469042403", "createdAt": "2020-08-12T06:52:01Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppInstallationTest.kt", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.commcare.androidTests\n+\n+import android.widget.ListView\n+import androidx.test.espresso.Espresso.closeSoftKeyboard\n+import androidx.test.espresso.Espresso.onView\n+import androidx.test.espresso.Espresso.onData\n+import androidx.test.espresso.action.ViewActions.*\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.intent.Intents.intended\n+import androidx.test.espresso.intent.matcher.IntentMatchers.hasComponent\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import junit.framework.Assert.fail\n+import org.commcare.CommCareApplication\n+import org.commcare.CommCareInstrumentationTestApplication\n+import org.commcare.activities.InstallFromListActivity\n+import org.commcare.android.database.global.models.AppAvailableToInstall\n+import org.commcare.dalvik.BuildConfig\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Description\n+import org.hamcrest.Matchers.*\n+import org.hamcrest.TypeSafeMatcher\n+import org.junit.After\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppInstallationTest: BaseTest() {\n+\n+    @After\n+    fun setup() {\n+        // Uninstall app.\n+        InstrumentationUtility.uninstallCurrentApp()\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for Another User\"))\n+                .perform(click())\n+    }\n+\n+    @Test\n+    fun testAppInstall_usingMobieWorkerDetails() {\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        // Confirm the activity\n+        intended(hasComponent(InstallFromListActivity::class.java.name))\n+\n+        // Verify that we start out in mobile user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(isDisplayed()))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(not(isDisplayed())))\n+\n+        // Toggle switch\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Verify that we're now in web user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(not(isDisplayed())))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(isDisplayed()))\n+\n+        // Switch back to mobile auth view\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Test getting app list for a mobile user\n+        onView(withId(R.id.edit_username))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+        closeSoftKeyboard()\n+        onView(withId(R.id.edit_domain))\n+                .perform(typeText(\"commcare-tests\"))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.edit_password))\n+                .perform(typeText(\"123\"))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.get_apps_button))\n+                .perform(click())\n+\n+        // Check that all the apps belong to commcare-tests domain\n+        for (position in 0 until getAppListSize()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MzQ4Nw==", "bodyText": "nice asserts, would be useful to bundle these both in a function that checks the validity of the seated app.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r469043487", "createdAt": "2020-08-12T06:54:34Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppInstallationTest.kt", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.commcare.androidTests\n+\n+import android.widget.ListView\n+import androidx.test.espresso.Espresso.closeSoftKeyboard\n+import androidx.test.espresso.Espresso.onView\n+import androidx.test.espresso.Espresso.onData\n+import androidx.test.espresso.action.ViewActions.*\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.intent.Intents.intended\n+import androidx.test.espresso.intent.matcher.IntentMatchers.hasComponent\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import junit.framework.Assert.fail\n+import org.commcare.CommCareApplication\n+import org.commcare.CommCareInstrumentationTestApplication\n+import org.commcare.activities.InstallFromListActivity\n+import org.commcare.android.database.global.models.AppAvailableToInstall\n+import org.commcare.dalvik.BuildConfig\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Description\n+import org.hamcrest.Matchers.*\n+import org.hamcrest.TypeSafeMatcher\n+import org.junit.After\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppInstallationTest: BaseTest() {\n+\n+    @After\n+    fun setup() {\n+        // Uninstall app.\n+        InstrumentationUtility.uninstallCurrentApp()\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for Another User\"))\n+                .perform(click())\n+    }\n+\n+    @Test\n+    fun testAppInstall_usingMobieWorkerDetails() {\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        // Confirm the activity\n+        intended(hasComponent(InstallFromListActivity::class.java.name))\n+\n+        // Verify that we start out in mobile user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(isDisplayed()))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(not(isDisplayed())))\n+\n+        // Toggle switch\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Verify that we're now in web user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(not(isDisplayed())))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(isDisplayed()))\n+\n+        // Switch back to mobile auth view\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Test getting app list for a mobile user\n+        onView(withId(R.id.edit_username))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+        closeSoftKeyboard()\n+        onView(withId(R.id.edit_domain))\n+                .perform(typeText(\"commcare-tests\"))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.edit_password))\n+                .perform(typeText(\"123\"))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.get_apps_button))\n+                .perform(click())\n+\n+        // Check that all the apps belong to commcare-tests domain\n+        for (position in 0 until getAppListSize()) {\n+            InstrumentationUtility.getSubViewInListItem(R.id.apps_list_view, position, R.id.domain)\n+                    .check(matches(withText(\"commcare-tests\")))\n+        }\n+\n+        // Check the app names\n+        matchAppInAppList(\"Case callout test for Simprints\")\n+        matchAppInAppList(\"Case Search and Claim\")\n+        matchAppInAppList(\"Integration Tests\")\n+\n+        // Install 1 of the apps\n+        onView(withText(\"Case Search and Claim\"))\n+                .perform(click())\n+\n+        assert(CommCareApplication.instance().currentApp != null, \"App is null\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0NjYxMw==", "bodyText": "L110-130 can be moved to a before test setup", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r469046613", "createdAt": "2020-08-12T07:01:18Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppInstallationTest.kt", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.commcare.androidTests\n+\n+import android.widget.ListView\n+import androidx.test.espresso.Espresso.closeSoftKeyboard\n+import androidx.test.espresso.Espresso.onView\n+import androidx.test.espresso.Espresso.onData\n+import androidx.test.espresso.action.ViewActions.*\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.intent.Intents.intended\n+import androidx.test.espresso.intent.matcher.IntentMatchers.hasComponent\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import junit.framework.Assert.fail\n+import org.commcare.CommCareApplication\n+import org.commcare.CommCareInstrumentationTestApplication\n+import org.commcare.activities.InstallFromListActivity\n+import org.commcare.android.database.global.models.AppAvailableToInstall\n+import org.commcare.dalvik.BuildConfig\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Description\n+import org.hamcrest.Matchers.*\n+import org.hamcrest.TypeSafeMatcher\n+import org.junit.After\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppInstallationTest: BaseTest() {\n+\n+    @After\n+    fun setup() {\n+        // Uninstall app.\n+        InstrumentationUtility.uninstallCurrentApp()\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for Another User\"))\n+                .perform(click())\n+    }\n+\n+    @Test\n+    fun testAppInstall_usingMobieWorkerDetails() {\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        // Confirm the activity\n+        intended(hasComponent(InstallFromListActivity::class.java.name))\n+\n+        // Verify that we start out in mobile user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(isDisplayed()))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(not(isDisplayed())))\n+\n+        // Toggle switch\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Verify that we're now in web user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(not(isDisplayed())))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(isDisplayed()))\n+\n+        // Switch back to mobile auth view\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Test getting app list for a mobile user\n+        onView(withId(R.id.edit_username))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+        closeSoftKeyboard()\n+        onView(withId(R.id.edit_domain))\n+                .perform(typeText(\"commcare-tests\"))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.edit_password))\n+                .perform(typeText(\"123\"))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.get_apps_button))\n+                .perform(click())\n+\n+        // Check that all the apps belong to commcare-tests domain\n+        for (position in 0 until getAppListSize()) {\n+            InstrumentationUtility.getSubViewInListItem(R.id.apps_list_view, position, R.id.domain)\n+                    .check(matches(withText(\"commcare-tests\")))\n+        }\n+\n+        // Check the app names\n+        matchAppInAppList(\"Case callout test for Simprints\")\n+        matchAppInAppList(\"Case Search and Claim\")\n+        matchAppInAppList(\"Integration Tests\")\n+\n+        // Install 1 of the apps\n+        onView(withText(\"Case Search and Claim\"))\n+                .perform(click())\n+\n+        assert(CommCareApplication.instance().currentApp != null, \"App is null\")\n+        assert(CommCareApplication.instance().currentApp.appRecord.displayName == \"Case Search and Claim\", \"App didn't match\")\n+    }\n+\n+    @Test\n+    fun testAppInstall_usingWebWorkerDetails() {\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        // Confirm the activity\n+        intended(hasComponent(InstallFromListActivity::class.java.name))\n+\n+        // Verify that we start out in mobile user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(isDisplayed()))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(not(isDisplayed())))\n+\n+        // Toggle switch\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Verify that we're now in web user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(not(isDisplayed())))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(isDisplayed()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0NzIzNg==", "bodyText": "what's the reason that are we not simply touching the text as we are doing above in the testAppInstall_usingMobieWorkerDetails", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r469047236", "createdAt": "2020-08-12T07:02:44Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppInstallationTest.kt", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.commcare.androidTests\n+\n+import android.widget.ListView\n+import androidx.test.espresso.Espresso.closeSoftKeyboard\n+import androidx.test.espresso.Espresso.onView\n+import androidx.test.espresso.Espresso.onData\n+import androidx.test.espresso.action.ViewActions.*\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.intent.Intents.intended\n+import androidx.test.espresso.intent.matcher.IntentMatchers.hasComponent\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import junit.framework.Assert.fail\n+import org.commcare.CommCareApplication\n+import org.commcare.CommCareInstrumentationTestApplication\n+import org.commcare.activities.InstallFromListActivity\n+import org.commcare.android.database.global.models.AppAvailableToInstall\n+import org.commcare.dalvik.BuildConfig\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Description\n+import org.hamcrest.Matchers.*\n+import org.hamcrest.TypeSafeMatcher\n+import org.junit.After\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppInstallationTest: BaseTest() {\n+\n+    @After\n+    fun setup() {\n+        // Uninstall app.\n+        InstrumentationUtility.uninstallCurrentApp()\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for Another User\"))\n+                .perform(click())\n+    }\n+\n+    @Test\n+    fun testAppInstall_usingMobieWorkerDetails() {\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        // Confirm the activity\n+        intended(hasComponent(InstallFromListActivity::class.java.name))\n+\n+        // Verify that we start out in mobile user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(isDisplayed()))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(not(isDisplayed())))\n+\n+        // Toggle switch\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Verify that we're now in web user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(not(isDisplayed())))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(isDisplayed()))\n+\n+        // Switch back to mobile auth view\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Test getting app list for a mobile user\n+        onView(withId(R.id.edit_username))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+        closeSoftKeyboard()\n+        onView(withId(R.id.edit_domain))\n+                .perform(typeText(\"commcare-tests\"))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.edit_password))\n+                .perform(typeText(\"123\"))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.get_apps_button))\n+                .perform(click())\n+\n+        // Check that all the apps belong to commcare-tests domain\n+        for (position in 0 until getAppListSize()) {\n+            InstrumentationUtility.getSubViewInListItem(R.id.apps_list_view, position, R.id.domain)\n+                    .check(matches(withText(\"commcare-tests\")))\n+        }\n+\n+        // Check the app names\n+        matchAppInAppList(\"Case callout test for Simprints\")\n+        matchAppInAppList(\"Case Search and Claim\")\n+        matchAppInAppList(\"Integration Tests\")\n+\n+        // Install 1 of the apps\n+        onView(withText(\"Case Search and Claim\"))\n+                .perform(click())\n+\n+        assert(CommCareApplication.instance().currentApp != null, \"App is null\")\n+        assert(CommCareApplication.instance().currentApp.appRecord.displayName == \"Case Search and Claim\", \"App didn't match\")\n+    }\n+\n+    @Test\n+    fun testAppInstall_usingWebWorkerDetails() {\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        // Confirm the activity\n+        intended(hasComponent(InstallFromListActivity::class.java.name))\n+\n+        // Verify that we start out in mobile user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(isDisplayed()))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(not(isDisplayed())))\n+\n+        // Toggle switch\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Verify that we're now in web user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(not(isDisplayed())))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(isDisplayed()))\n+\n+        // Test getting app list for a mobile user\n+        onView(withId(R.id.edit_email))\n+                .perform(typeText(BuildConfig.HQ_API_USERNAME))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.edit_password))\n+                .perform(typeText(BuildConfig.HQ_API_PASSWORD))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.get_apps_button))\n+                .perform(click())\n+\n+        // Check that we see each of the apps in this domain, plus the domain name\n+        for (position in 0 until getAppListSize()) {\n+            InstrumentationUtility.getSubViewInListItem(R.id.apps_list_view, position, R.id.domain)\n+                    .check(matches(anyOf(withText(\"commcare-tests\"), withText(\"swat\"))))\n+        }\n+\n+        matchAppInAppList(\"Case callout test for Simprints\")\n+        matchAppInAppList(\"Case Search and Claim\")\n+        matchAppInAppList(\"Demo - Form Design Patterns\")\n+        matchAppInAppList(\"Demo - Live XForm Examples\")\n+        matchAppInAppList(\"SWAT: CommCare Projects Phone Survey\")\n+        matchAppInAppList(\"SWAT: App Tracker\")\n+\n+        // Install 1 of the apps\n+        onData(allOf(`is`(instanceOf(AppAvailableToInstall::class.java)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0ODE0Mg==", "bodyText": "this would be useful in all the tests and should move out to a util class", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r469048142", "createdAt": "2020-08-12T07:04:48Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppInstallationTest.kt", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.commcare.androidTests\n+\n+import android.widget.ListView\n+import androidx.test.espresso.Espresso.closeSoftKeyboard\n+import androidx.test.espresso.Espresso.onView\n+import androidx.test.espresso.Espresso.onData\n+import androidx.test.espresso.action.ViewActions.*\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.intent.Intents.intended\n+import androidx.test.espresso.intent.matcher.IntentMatchers.hasComponent\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import junit.framework.Assert.fail\n+import org.commcare.CommCareApplication\n+import org.commcare.CommCareInstrumentationTestApplication\n+import org.commcare.activities.InstallFromListActivity\n+import org.commcare.android.database.global.models.AppAvailableToInstall\n+import org.commcare.dalvik.BuildConfig\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Description\n+import org.hamcrest.Matchers.*\n+import org.hamcrest.TypeSafeMatcher\n+import org.junit.After\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppInstallationTest: BaseTest() {\n+\n+    @After\n+    fun setup() {\n+        // Uninstall app.\n+        InstrumentationUtility.uninstallCurrentApp()\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for Another User\"))\n+                .perform(click())\n+    }\n+\n+    @Test\n+    fun testAppInstall_usingMobieWorkerDetails() {\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        // Confirm the activity\n+        intended(hasComponent(InstallFromListActivity::class.java.name))\n+\n+        // Verify that we start out in mobile user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(isDisplayed()))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(not(isDisplayed())))\n+\n+        // Toggle switch\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Verify that we're now in web user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(not(isDisplayed())))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(isDisplayed()))\n+\n+        // Switch back to mobile auth view\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Test getting app list for a mobile user\n+        onView(withId(R.id.edit_username))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+        closeSoftKeyboard()\n+        onView(withId(R.id.edit_domain))\n+                .perform(typeText(\"commcare-tests\"))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.edit_password))\n+                .perform(typeText(\"123\"))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.get_apps_button))\n+                .perform(click())\n+\n+        // Check that all the apps belong to commcare-tests domain\n+        for (position in 0 until getAppListSize()) {\n+            InstrumentationUtility.getSubViewInListItem(R.id.apps_list_view, position, R.id.domain)\n+                    .check(matches(withText(\"commcare-tests\")))\n+        }\n+\n+        // Check the app names\n+        matchAppInAppList(\"Case callout test for Simprints\")\n+        matchAppInAppList(\"Case Search and Claim\")\n+        matchAppInAppList(\"Integration Tests\")\n+\n+        // Install 1 of the apps\n+        onView(withText(\"Case Search and Claim\"))\n+                .perform(click())\n+\n+        assert(CommCareApplication.instance().currentApp != null, \"App is null\")\n+        assert(CommCareApplication.instance().currentApp.appRecord.displayName == \"Case Search and Claim\", \"App didn't match\")\n+    }\n+\n+    @Test\n+    fun testAppInstall_usingWebWorkerDetails() {\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        // Confirm the activity\n+        intended(hasComponent(InstallFromListActivity::class.java.name))\n+\n+        // Verify that we start out in mobile user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(isDisplayed()))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(not(isDisplayed())))\n+\n+        // Toggle switch\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Verify that we're now in web user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(not(isDisplayed())))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(isDisplayed()))\n+\n+        // Test getting app list for a mobile user\n+        onView(withId(R.id.edit_email))\n+                .perform(typeText(BuildConfig.HQ_API_USERNAME))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.edit_password))\n+                .perform(typeText(BuildConfig.HQ_API_PASSWORD))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.get_apps_button))\n+                .perform(click())\n+\n+        // Check that we see each of the apps in this domain, plus the domain name\n+        for (position in 0 until getAppListSize()) {\n+            InstrumentationUtility.getSubViewInListItem(R.id.apps_list_view, position, R.id.domain)\n+                    .check(matches(anyOf(withText(\"commcare-tests\"), withText(\"swat\"))))\n+        }\n+\n+        matchAppInAppList(\"Case callout test for Simprints\")\n+        matchAppInAppList(\"Case Search and Claim\")\n+        matchAppInAppList(\"Demo - Form Design Patterns\")\n+        matchAppInAppList(\"Demo - Live XForm Examples\")\n+        matchAppInAppList(\"SWAT: CommCare Projects Phone Survey\")\n+        matchAppInAppList(\"SWAT: App Tracker\")\n+\n+        // Install 1 of the apps\n+        onData(allOf(`is`(instanceOf(AppAvailableToInstall::class.java)),\n+                withAppName(\"SWAT: App Tracker\")))\n+                .perform(click())\n+\n+        assert(CommCareApplication.instance().currentApp != null, \"App is null\")\n+        assert(CommCareApplication.instance().currentApp.appRecord.displayName == \"SWAT: App Tracker\", \"App didn't match\")\n+    }\n+\n+    private fun withAppName(appName: String): TypeSafeMatcher<AppAvailableToInstall> {\n+        return object: TypeSafeMatcher<AppAvailableToInstall>() {\n+            override fun describeTo(description: Description) {\n+                description.appendText(\"will match if $appName is present in the App List\")\n+            }\n+\n+            override fun matchesSafely(item: AppAvailableToInstall): Boolean {\n+                return item.appName == appName\n+            }\n+\n+        }\n+    }\n+\n+    private fun matchAppInAppList(appName: String) {\n+        onData(allOf(`is`(instanceOf(AppAvailableToInstall::class.java)),\n+                withAppName(appName)))\n+                .check(matches(isDisplayed()))\n+    }\n+\n+    private fun getAppListSize(): Int {\n+        val application = InstrumentationRegistry.getInstrumentation().targetContext.applicationContext\n+                as CommCareInstrumentationTestApplication\n+        var activity = application.currentActivity as InstallFromListActivity<*>\n+        val listView = activity.findViewById<ListView>(R.id.apps_list_view)\n+        return listView.adapter.count\n+    }\n+}\n+/**\n+ * A workaround to Failed resolution of: Lkotlin/_Assertions;\n+ * This will fail the test if the value is false.\n+ */\n+public fun assert(value: Boolean, failMsg: String) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0OTA4OA==", "bodyText": "I didn't realize you have swtiched to Kotlin for tests in this PR untill I saw companion \ud83d\udcaf", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r469049088", "createdAt": "2020-08-12T07:06:49Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "diffHunk": "@@ -0,0 +1,195 @@\n+package org.commcare.androidTests\n+\n+import android.content.Context\n+import android.net.wifi.WifiManager\n+import android.os.Build\n+import androidx.test.espresso.Espresso.*\n+import androidx.test.espresso.action.ViewActions.click\n+import androidx.test.espresso.assertion.ViewAssertions.doesNotExist\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Matchers.endsWith\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppUpdateTest: BaseTest() {\n+\n+    companion object {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1MjQ5Mg==", "bodyText": "we should have a function to go back to the home activity which just presses back until home activity", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r469052492", "createdAt": "2020-08-12T07:13:58Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "diffHunk": "@@ -0,0 +1,195 @@\n+package org.commcare.androidTests\n+\n+import android.content.Context\n+import android.net.wifi.WifiManager\n+import android.os.Build\n+import androidx.test.espresso.Espresso.*\n+import androidx.test.espresso.action.ViewActions.click\n+import androidx.test.espresso.assertion.ViewAssertions.doesNotExist\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Matchers.endsWith\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppUpdateTest: BaseTest() {\n+\n+    companion object {\n+        const val CCZ_NAME = \"app_update.ccz\"\n+        const val APP_NAME = \"Update Test\"\n+    }\n+\n+    @Before\n+    fun setup() {\n+        installApp(APP_NAME, CCZ_NAME)\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+    }\n+\n+    @Test\n+    fun testAppUpdate() {\n+        InstrumentationUtility.enableDeveloperMode()\n+        // Enable app update item.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Settings\"))\n+                .perform(click())\n+        onView(withText(\"Developer Options\"))\n+                .perform(click())\n+        onView(withText(\"Show Update Options Item\"))\n+                .perform(click())\n+        onView(withText(\"Enabled\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // Make sure the update endpoint is set to \"Latest starred version\"\n+        onView(withText(\"Update Options\"))\n+                .perform(click())\n+        onView(withText(\"Latest starred version\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // check base form content\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module Three\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Module One\"))\n+                .perform(click())\n+        onView(withText(\"Example 1\"))\n+                .perform(click())\n+        onView(withText(\"A text question\"))\n+                .check(matches(isDisplayed()))\n+        closeSoftKeyboard()\n+        pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        pressBack()\n+\n+        // make sure case list doesn't have status column\n+        onView(withText(\"Module Two\"))\n+                .perform(click())\n+        onView(withText(\"Update Case\"))\n+                .perform(click())\n+        onView(withText(\"Status\"))\n+                .check(doesNotExist())\n+        pressBack()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1Mzc2MA==", "bodyText": "I see the calabsh test for this is running some rotation checks here along with a test to see if the update progress is saved when we come back to the update screen. Those are critical update behaviours that should be tested as part of this test.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r469053760", "createdAt": "2020-08-12T07:16:31Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "diffHunk": "@@ -0,0 +1,195 @@\n+package org.commcare.androidTests\n+\n+import android.content.Context\n+import android.net.wifi.WifiManager\n+import android.os.Build\n+import androidx.test.espresso.Espresso.*\n+import androidx.test.espresso.action.ViewActions.click\n+import androidx.test.espresso.assertion.ViewAssertions.doesNotExist\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Matchers.endsWith\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppUpdateTest: BaseTest() {\n+\n+    companion object {\n+        const val CCZ_NAME = \"app_update.ccz\"\n+        const val APP_NAME = \"Update Test\"\n+    }\n+\n+    @Before\n+    fun setup() {\n+        installApp(APP_NAME, CCZ_NAME)\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+    }\n+\n+    @Test\n+    fun testAppUpdate() {\n+        InstrumentationUtility.enableDeveloperMode()\n+        // Enable app update item.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Settings\"))\n+                .perform(click())\n+        onView(withText(\"Developer Options\"))\n+                .perform(click())\n+        onView(withText(\"Show Update Options Item\"))\n+                .perform(click())\n+        onView(withText(\"Enabled\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // Make sure the update endpoint is set to \"Latest starred version\"\n+        onView(withText(\"Update Options\"))\n+                .perform(click())\n+        onView(withText(\"Latest starred version\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // check base form content\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module Three\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Module One\"))\n+                .perform(click())\n+        onView(withText(\"Example 1\"))\n+                .perform(click())\n+        onView(withText(\"A text question\"))\n+                .check(matches(isDisplayed()))\n+        closeSoftKeyboard()\n+        pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        pressBack()\n+\n+        // make sure case list doesn't have status column\n+        onView(withText(\"Module Two\"))\n+                .perform(click())\n+        onView(withText(\"Update Case\"))\n+                .perform(click())\n+        onView(withText(\"Status\"))\n+                .check(doesNotExist())\n+        pressBack()\n+        pressBack()\n+        pressBack()\n+\n+        // download the app update\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 2\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 11 & log out\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1Njc2OA==", "bodyText": "should be implemented.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r469056768", "createdAt": "2020-08-12T07:22:23Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "diffHunk": "@@ -0,0 +1,195 @@\n+package org.commcare.androidTests\n+\n+import android.content.Context\n+import android.net.wifi.WifiManager\n+import android.os.Build\n+import androidx.test.espresso.Espresso.*\n+import androidx.test.espresso.action.ViewActions.click\n+import androidx.test.espresso.assertion.ViewAssertions.doesNotExist\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Matchers.endsWith\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppUpdateTest: BaseTest() {\n+\n+    companion object {\n+        const val CCZ_NAME = \"app_update.ccz\"\n+        const val APP_NAME = \"Update Test\"\n+    }\n+\n+    @Before\n+    fun setup() {\n+        installApp(APP_NAME, CCZ_NAME)\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+    }\n+\n+    @Test\n+    fun testAppUpdate() {\n+        InstrumentationUtility.enableDeveloperMode()\n+        // Enable app update item.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Settings\"))\n+                .perform(click())\n+        onView(withText(\"Developer Options\"))\n+                .perform(click())\n+        onView(withText(\"Show Update Options Item\"))\n+                .perform(click())\n+        onView(withText(\"Enabled\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // Make sure the update endpoint is set to \"Latest starred version\"\n+        onView(withText(\"Update Options\"))\n+                .perform(click())\n+        onView(withText(\"Latest starred version\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // check base form content\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module Three\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Module One\"))\n+                .perform(click())\n+        onView(withText(\"Example 1\"))\n+                .perform(click())\n+        onView(withText(\"A text question\"))\n+                .check(matches(isDisplayed()))\n+        closeSoftKeyboard()\n+        pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        pressBack()\n+\n+        // make sure case list doesn't have status column\n+        onView(withText(\"Module Two\"))\n+                .perform(click())\n+        onView(withText(\"Update Case\"))\n+                .perform(click())\n+        onView(withText(\"Status\"))\n+                .check(doesNotExist())\n+        pressBack()\n+        pressBack()\n+        pressBack()\n+\n+        // download the app update\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 2\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 11 & log out\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 11 & log out\"))\n+                .perform(click())\n+\n+        // Login into the updated version\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+\n+        //TODO check that a sync is triggered automatically", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1OTI5Mg==", "bodyText": "are there other espresso APIs that let you turn on and off internet, our end goal here is to be able to simulate internet on and off on the device.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r469059292", "createdAt": "2020-08-12T07:27:21Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "diffHunk": "@@ -0,0 +1,195 @@\n+package org.commcare.androidTests\n+\n+import android.content.Context\n+import android.net.wifi.WifiManager\n+import android.os.Build\n+import androidx.test.espresso.Espresso.*\n+import androidx.test.espresso.action.ViewActions.click\n+import androidx.test.espresso.assertion.ViewAssertions.doesNotExist\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Matchers.endsWith\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppUpdateTest: BaseTest() {\n+\n+    companion object {\n+        const val CCZ_NAME = \"app_update.ccz\"\n+        const val APP_NAME = \"Update Test\"\n+    }\n+\n+    @Before\n+    fun setup() {\n+        installApp(APP_NAME, CCZ_NAME)\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+    }\n+\n+    @Test\n+    fun testAppUpdate() {\n+        InstrumentationUtility.enableDeveloperMode()\n+        // Enable app update item.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Settings\"))\n+                .perform(click())\n+        onView(withText(\"Developer Options\"))\n+                .perform(click())\n+        onView(withText(\"Show Update Options Item\"))\n+                .perform(click())\n+        onView(withText(\"Enabled\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // Make sure the update endpoint is set to \"Latest starred version\"\n+        onView(withText(\"Update Options\"))\n+                .perform(click())\n+        onView(withText(\"Latest starred version\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // check base form content\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module Three\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Module One\"))\n+                .perform(click())\n+        onView(withText(\"Example 1\"))\n+                .perform(click())\n+        onView(withText(\"A text question\"))\n+                .check(matches(isDisplayed()))\n+        closeSoftKeyboard()\n+        pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        pressBack()\n+\n+        // make sure case list doesn't have status column\n+        onView(withText(\"Module Two\"))\n+                .perform(click())\n+        onView(withText(\"Update Case\"))\n+                .perform(click())\n+        onView(withText(\"Status\"))\n+                .check(doesNotExist())\n+        pressBack()\n+        pressBack()\n+        pressBack()\n+\n+        // download the app update\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 2\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 11 & log out\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 11 & log out\"))\n+                .perform(click())\n+\n+        // Login into the updated version\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+\n+        //TODO check that a sync is triggered automatically\n+\n+        // Check updated data, including multimedia\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module Three\"))\n+                .check(doesNotExist())\n+        onView(withText(\"Module One\"))\n+                .perform(click())\n+        onView(withText(\"Example 1\"))\n+                .perform(click())\n+        onView(withText(\"Question with audio\"))\n+                .check(matches(isDisplayed()))\n+        onView(withClassName(endsWith(\"AudioPlaybackButton\")))\n+                .check(matches(isDisplayed()))\n+        closeSoftKeyboard()\n+        pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        pressBack()\n+\n+        // make sure case list `Status` column was added\n+        onView(withText(\"Module Two\"))\n+                .perform(click())\n+        onView(withText(\"Update Case\"))\n+                .perform(click())\n+        onView(withText(\"Status\"))\n+                .check(matches(isDisplayed()))\n+        pressBack()\n+        pressBack()\n+        pressBack()\n+\n+        // make sure there are no new updates\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 11\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Recheck\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 11\"))\n+                .check(matches(isDisplayed()))\n+        pressBack()\n+\n+        // Change the update endpoint to \"Latest version\"\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Settings\"))\n+                .perform(click())\n+        onView(withText(\"Update Options\"))\n+                .perform(click())\n+        onView(withText(\"Latest version\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // Confirm that you can now see an update. And Update the app.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Update to version 22 & log out\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 22 & log out\"))\n+                .perform(click())\n+\n+        // Login again\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+        //TODO Check that sync is triggered automatically\n+\n+        // Check updates in base form\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module One, renamed\"))\n+                .check(matches(isDisplayed()))\n+        pressBack()\n+\n+        // The below tests will only work on a pre-android Q device.\n+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {\n+            changeWifi(false)\n+            InstrumentationUtility.openOptionsMenu()\n+            onView(withText(\"Update App\"))\n+                    .perform(click())\n+            onView(withText(\"No network connectivity\"))\n+                    .perform(click())\n+            changeWifi(true)\n+        }\n+    }\n+\n+    /**\n+     * Starting with Android Q, applications are not allowed to enable/disable Wi-Fi.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1OTU1Ng==", "bodyText": "should move to a util class.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r469059556", "createdAt": "2020-08-12T07:27:52Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "diffHunk": "@@ -0,0 +1,195 @@\n+package org.commcare.androidTests\n+\n+import android.content.Context\n+import android.net.wifi.WifiManager\n+import android.os.Build\n+import androidx.test.espresso.Espresso.*\n+import androidx.test.espresso.action.ViewActions.click\n+import androidx.test.espresso.assertion.ViewAssertions.doesNotExist\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Matchers.endsWith\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppUpdateTest: BaseTest() {\n+\n+    companion object {\n+        const val CCZ_NAME = \"app_update.ccz\"\n+        const val APP_NAME = \"Update Test\"\n+    }\n+\n+    @Before\n+    fun setup() {\n+        installApp(APP_NAME, CCZ_NAME)\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+    }\n+\n+    @Test\n+    fun testAppUpdate() {\n+        InstrumentationUtility.enableDeveloperMode()\n+        // Enable app update item.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Settings\"))\n+                .perform(click())\n+        onView(withText(\"Developer Options\"))\n+                .perform(click())\n+        onView(withText(\"Show Update Options Item\"))\n+                .perform(click())\n+        onView(withText(\"Enabled\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // Make sure the update endpoint is set to \"Latest starred version\"\n+        onView(withText(\"Update Options\"))\n+                .perform(click())\n+        onView(withText(\"Latest starred version\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // check base form content\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module Three\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Module One\"))\n+                .perform(click())\n+        onView(withText(\"Example 1\"))\n+                .perform(click())\n+        onView(withText(\"A text question\"))\n+                .check(matches(isDisplayed()))\n+        closeSoftKeyboard()\n+        pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        pressBack()\n+\n+        // make sure case list doesn't have status column\n+        onView(withText(\"Module Two\"))\n+                .perform(click())\n+        onView(withText(\"Update Case\"))\n+                .perform(click())\n+        onView(withText(\"Status\"))\n+                .check(doesNotExist())\n+        pressBack()\n+        pressBack()\n+        pressBack()\n+\n+        // download the app update\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 2\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 11 & log out\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 11 & log out\"))\n+                .perform(click())\n+\n+        // Login into the updated version\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+\n+        //TODO check that a sync is triggered automatically\n+\n+        // Check updated data, including multimedia\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module Three\"))\n+                .check(doesNotExist())\n+        onView(withText(\"Module One\"))\n+                .perform(click())\n+        onView(withText(\"Example 1\"))\n+                .perform(click())\n+        onView(withText(\"Question with audio\"))\n+                .check(matches(isDisplayed()))\n+        onView(withClassName(endsWith(\"AudioPlaybackButton\")))\n+                .check(matches(isDisplayed()))\n+        closeSoftKeyboard()\n+        pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        pressBack()\n+\n+        // make sure case list `Status` column was added\n+        onView(withText(\"Module Two\"))\n+                .perform(click())\n+        onView(withText(\"Update Case\"))\n+                .perform(click())\n+        onView(withText(\"Status\"))\n+                .check(matches(isDisplayed()))\n+        pressBack()\n+        pressBack()\n+        pressBack()\n+\n+        // make sure there are no new updates\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 11\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Recheck\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 11\"))\n+                .check(matches(isDisplayed()))\n+        pressBack()\n+\n+        // Change the update endpoint to \"Latest version\"\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Settings\"))\n+                .perform(click())\n+        onView(withText(\"Update Options\"))\n+                .perform(click())\n+        onView(withText(\"Latest version\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // Confirm that you can now see an update. And Update the app.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Update to version 22 & log out\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 22 & log out\"))\n+                .perform(click())\n+\n+        // Login again\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+        //TODO Check that sync is triggered automatically\n+\n+        // Check updates in base form\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module One, renamed\"))\n+                .check(matches(isDisplayed()))\n+        pressBack()\n+\n+        // The below tests will only work on a pre-android Q device.\n+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {\n+            changeWifi(false)\n+            InstrumentationUtility.openOptionsMenu()\n+            onView(withText(\"Update App\"))\n+                    .perform(click())\n+            onView(withText(\"No network connectivity\"))\n+                    .perform(click())\n+            changeWifi(true)\n+        }\n+    }\n+\n+    /**\n+     * Starting with Android Q, applications are not allowed to enable/disable Wi-Fi.\n+     */\n+    private fun changeWifi(enable: Boolean) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA2MDM5Ng==", "bodyText": "An @After should not be called setup. You can use tearDown instead as the method name.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r469060396", "createdAt": "2020-08-12T07:29:31Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppInstallationTest.kt", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.commcare.androidTests\n+\n+import android.widget.ListView\n+import androidx.test.espresso.Espresso.closeSoftKeyboard\n+import androidx.test.espresso.Espresso.onView\n+import androidx.test.espresso.Espresso.onData\n+import androidx.test.espresso.action.ViewActions.*\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.intent.Intents.intended\n+import androidx.test.espresso.intent.matcher.IntentMatchers.hasComponent\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import junit.framework.Assert.fail\n+import org.commcare.CommCareApplication\n+import org.commcare.CommCareInstrumentationTestApplication\n+import org.commcare.activities.InstallFromListActivity\n+import org.commcare.android.database.global.models.AppAvailableToInstall\n+import org.commcare.dalvik.BuildConfig\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Description\n+import org.hamcrest.Matchers.*\n+import org.hamcrest.TypeSafeMatcher\n+import org.junit.After\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppInstallationTest: BaseTest() {\n+\n+    @After\n+    fun setup() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA4MDMwMg==", "bodyText": "nit: we should abstract these matcher functions into their own class.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r469080302", "createdAt": "2020-08-12T08:06:30Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/utils/InstrumentationUtility.java", "diffHunk": "@@ -211,6 +234,80 @@ public void describeTo(Description description) {\n         };\n     }\n \n+    /**\n+     * Matches the listView item count with the @param size\n+     * Note: Only works for listview.\n+     */\n+    public static Matcher<View> matchListSize(int size) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afd02a0aa163534a1643c44dc923415e5801e021", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/afd02a0aa163534a1643c44dc923415e5801e021", "committedDate": "2020-08-19T09:36:38Z", "message": "Add tests for form submission errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b088fe79ea5d76a5a16049d46ace4f54f141206d", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/b088fe79ea5d76a5a16049d46ace4f54f141206d", "committedDate": "2020-08-19T09:36:38Z", "message": "Add tests for app update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c283f3f4eca5a63f8ddea523bdaabbc0bc3a51c3", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/c283f3f4eca5a63f8ddea523bdaabbc0bc3a51c3", "committedDate": "2020-08-19T09:36:38Z", "message": "Add tests for app installation using app list"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a39bc90f7056d099715ce05935b1e5782e722c10", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/a39bc90f7056d099715ce05935b1e5782e722c10", "committedDate": "2020-08-19T09:36:38Z", "message": "Enable network logging in browserstack"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "598e5fb63c36c5cb6a2a40ffde74860ef786c3bd", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/598e5fb63c36c5cb6a2a40ffde74860ef786c3bd", "committedDate": "2020-08-19T09:36:38Z", "message": "Get current activity from test application"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6644830726c833c12485b0977330cd5cdd8da2e", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/f6644830726c833c12485b0977330cd5cdd8da2e", "committedDate": "2020-08-19T09:36:38Z", "message": "Remove assertion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23918cb4741f32c095354f87c28813f23073e296", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/23918cb4741f32c095354f87c28813f23073e296", "committedDate": "2020-08-19T09:36:38Z", "message": "Workaround for kotlin.assert method not found"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb840bf98426123c74d69f780eb39217b47ee7d3", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/fb840bf98426123c74d69f780eb39217b47ee7d3", "committedDate": "2020-08-19T09:36:38Z", "message": "Add tests for lookup table sync"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f97a1daec88862a640e3ab0d65831ef7dc4bd855", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/f97a1daec88862a640e3ab0d65831ef7dc4bd855", "committedDate": "2020-08-19T09:36:38Z", "message": "Add tests for Sync Recovery"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "faf3f426277eb65e1d843f6f6111038867dc6db1", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/faf3f426277eb65e1d843f6f6111038867dc6db1", "committedDate": "2020-08-19T09:36:38Z", "message": "Use sendBroadcastSync in asyncRestore tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0baec916e2ba4c33a0fc0bf5cb8dec6f9a56f2a", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/c0baec916e2ba4c33a0fc0bf5cb8dec6f9a56f2a", "committedDate": "2020-08-19T09:36:38Z", "message": "Add proguard rule for sendBroadcastSync"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "005ed46a496f15e5adf242867c173420646887e2", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/005ed46a496f15e5adf242867c173420646887e2", "committedDate": "2020-08-19T09:36:38Z", "message": "Use custom assert method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fa9bde15b4c13252ff605f8c04395f1dbd6646a", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/4fa9bde15b4c13252ff605f8c04395f1dbd6646a", "committedDate": "2020-08-19T09:36:38Z", "message": "Add suggested changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/7e1430a332ba710f9d88f90c77880852e4b80e65", "committedDate": "2020-08-21T13:57:33Z", "message": "Add more suggested changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "335d67a792ac36cae0a13621818d6f5802c6ff45", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/335d67a792ac36cae0a13621818d6f5802c6ff45", "committedDate": "2020-08-18T05:45:30Z", "message": "Add suggested changes"}, "afterCommit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/7e1430a332ba710f9d88f90c77880852e4b80e65", "committedDate": "2020-08-21T13:57:33Z", "message": "Add more suggested changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyOTAzOTQ2", "url": "https://github.com/dimagi/commcare-android/pull/2299#pullrequestreview-472903946", "createdAt": "2020-08-22T07:10:07Z", "commit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwNzoxMDowN1rOHFDMNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwNzozMjozN1rOHFDTBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1NzIwNA==", "bodyText": "Can't we use SyncDetailCalculations.getLastSyncTime directly ?", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r475057204", "createdAt": "2020-08-22T07:10:07Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/CommCareInstrumentationTestApplication.java", "diffHunk": "@@ -64,6 +65,11 @@ public void onActivityDestroyed(@NonNull Activity activity) {\n     public Activity getCurrentActivity() {\n         return currentActivity;\n     }\n-    \n \n+    public static long getLastSyncTime(String userName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1NzUxOA==", "bodyText": "the sdk check should go inside the method changeWifi itself.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r475057518", "createdAt": "2020-08-22T07:14:04Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "diffHunk": "@@ -0,0 +1,209 @@\n+package org.commcare.androidTests\n+\n+import android.os.Build\n+import androidx.test.espresso.Espresso.*\n+import androidx.test.espresso.action.ViewActions.click\n+import androidx.test.espresso.assertion.ViewAssertions.doesNotExist\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import org.commcare.CommCareInstrumentationTestApplication\n+import org.commcare.dalvik.R\n+import org.commcare.utils.*\n+import org.hamcrest.Matchers.endsWith\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppUpdateTest: BaseTest() {\n+\n+    companion object {\n+        const val CCZ_NAME = \"app_update.ccz\"\n+        const val APP_NAME = \"Update Test\"\n+        const val USERNAME = \"user_with_no_data\"\n+        const val PASSWORD = \"123\"\n+    }\n+\n+    @Before\n+    fun setup() {\n+        installApp(APP_NAME, CCZ_NAME)\n+        InstrumentationUtility.login(USERNAME, PASSWORD)\n+    }\n+\n+    @Test\n+    fun testAppUpdate() {\n+        InstrumentationUtility.enableDeveloperMode()\n+        // Enable app update item.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Settings\"))\n+                .perform(click())\n+        onView(withText(\"Developer Options\"))\n+                .perform(click())\n+        onView(withText(\"Show Update Options Item\"))\n+                .perform(click())\n+        onView(withText(\"Enabled\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // Make sure the update endpoint is set to \"Latest starred version\"\n+        onView(withText(\"Update Options\"))\n+                .perform(click())\n+        onView(withText(\"Latest starred version\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // check base form content\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module Three\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Module One\"))\n+                .perform(click())\n+        onView(withText(\"Example 1\"))\n+                .perform(click())\n+        onView(withText(\"A text question\"))\n+                .check(matches(isDisplayed()))\n+        closeSoftKeyboard()\n+        pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        pressBack()\n+\n+        // make sure case list doesn't have status column\n+        onView(withText(\"Module Two\"))\n+                .perform(click())\n+        onView(withText(\"Update Case\"))\n+                .perform(click())\n+        onView(withText(\"Status\"))\n+                .check(doesNotExist())\n+        gotoHome()\n+\n+        // download the app update\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 2\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 11 & log out\"))\n+                .check(matches(isDisplayed()))\n+        // Disable Wifi and make sure update is saved.\n+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1ODE0Mw==", "bodyText": "what's the difference between InstrumentationHelpers and InstrumentationUtility ?", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r475058143", "createdAt": "2020-08-22T07:22:09Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/utils/InstrumentationHelpers.kt", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.commcare.utils", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1ODIyOA==", "bodyText": "does this method throw an exception if it's called on api >= Q", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r475058228", "createdAt": "2020-08-22T07:23:26Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/utils/InstrumentationUtility.java", "diffHunk": "@@ -188,27 +215,59 @@ public void perform(UiController uiController, final View view) {\n     }\n \n     /**\n-     * In case a view contains more than 1 items of same type,\n-     * use this to select the item at @param position.\n-     * NOTE:- position is 1 based.\n+     * Matches total occurrences of child inside parent with count.\n      */\n-    public static <T> Matcher<T> find(Matcher<T> matcher, int position) {\n-        return new BaseMatcher<T>() {\n-            int count = 0;\n-            @Override\n-            public boolean matches(Object item) {\n-                if (matcher.matches(item)) {\n-                    count++;\n-                    return count == position;\n-                }\n-                return false;\n-            }\n+    public static void matchChildCount(Class<?> parent, Class<?> child, int count) {\n+        onView(withClassName(is(parent.getCanonicalName())))\n+                .check(matches(\n+                        CustomMatchers.withChildViewCount(count,\n+                                withClassName(is(child.getCanonicalName())))\n+                ));\n+    }\n \n-            @Override\n-            public void describeTo(Description description) {\n-                description.appendText(\"will return \" + position + \" matching item\");\n-            }\n-        };\n+    /**\n+     * Returns the count of total number of items present in the listView.\n+     * @param resId Resource reference to the list.\n+     */\n+    public static int getListSize(@IdRes int resId) {\n+        CommCareInstrumentationTestApplication application =\n+                (CommCareInstrumentationTestApplication) InstrumentationRegistry\n+                        .getInstrumentation()\n+                        .getTargetContext()\n+                        .getApplicationContext();\n+        Activity activity = application.getCurrentActivity();\n+        ListView listView = activity.findViewById(resId);\n+        return listView.getAdapter().getCount();\n+    }\n+\n+    /**\n+     * This method will toggle the wifi state in mobile.\n+     * Starting with Android Q, applications are not allowed to enable/disable Wi-Fi.\n+     */\n+    public static void changeWifi(boolean enable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1ODQ5Mg==", "bodyText": "is there no api to check for the current activity in espresso ?", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r475058492", "createdAt": "2020-08-22T07:26:30Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/utils/InstrumentationHelpers.kt", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.commcare.utils\n+\n+import androidx.test.espresso.Espresso\n+import androidx.test.espresso.matcher.ViewMatchers\n+import junit.framework.Assert\n+import org.commcare.dalvik.R\n+\n+\n+/**\n+ * A workaround to Failed resolution of: Lkotlin/_Assertions;\n+ * This will fail the test if the value is false.\n+ */\n+fun assert(value: Boolean, failMsg: String) {\n+    if (!value) {\n+        Assert.fail(\"Assertion Failed: $failMsg\")\n+    }\n+}\n+\n+/**\n+ * A utility to pressBack until Home screen is reached at most 6 times.\n+ */\n+fun gotoHome() {\n+    for (i in 0..5) { // Try atmost 6 times.\n+        if (Espresso.onView(ViewMatchers.withId(R.id.home_gridview_buttons)).isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1ODc2NA==", "bodyText": "is there an outcome that onView().check(matches(isDisplayed())) doesn't serve because of which we need this ?", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r475058764", "createdAt": "2020-08-22T07:30:05Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/utils/ViewInteraction+Extension.kt", "diffHunk": "@@ -0,0 +1,20 @@\n+package org.commcare.utils\n+\n+import androidx.test.espresso.NoMatchingViewException\n+import androidx.test.espresso.ViewInteraction\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.isDisplayed\n+\n+/**\n+ * A utility view interaction to check whether a view is present in the screen or not.\n+ * Espresso APIs are designed away from conditional logic by only allowing test actions and assertions.\n+ * So it's kinda against what espresso tells you to do.\n+ */\n+fun ViewInteraction.isPresent(): Boolean {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1ODk0OA==", "bodyText": "can you elaborate on what conditional logic are you referring to here ?", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r475058948", "createdAt": "2020-08-22T07:32:37Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/utils/ViewInteraction+Extension.kt", "diffHunk": "@@ -0,0 +1,20 @@\n+package org.commcare.utils\n+\n+import androidx.test.espresso.NoMatchingViewException\n+import androidx.test.espresso.ViewInteraction\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.isDisplayed\n+\n+/**\n+ * A utility view interaction to check whether a view is present in the screen or not.\n+ * Espresso APIs are designed away from conditional logic by only allowing test actions and assertions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ead53ca41a35a2c22cb824d1a21f92409a235b34", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/ead53ca41a35a2c22cb824d1a21f92409a235b34", "committedDate": "2020-08-22T11:52:05Z", "message": "Fix import of package level function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b66bc54a68239ae380da2a14bf1f1ebb7eac109", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/3b66bc54a68239ae380da2a14bf1f1ebb7eac109", "committedDate": "2020-08-22T15:13:46Z", "message": "Fix InstallFromListTest and Use getLastSyncTime directly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4e13e7bb02b7dae5b85453a230c8bdb01f14fa5", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/e4e13e7bb02b7dae5b85453a230c8bdb01f14fa5", "committedDate": "2020-08-23T14:52:52Z", "message": "Convert InstrumentationUtility to kotlin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26a68d8118e0498faf3d6aba1bf011b3f1234fff", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/26a68d8118e0498faf3d6aba1bf011b3f1234fff", "committedDate": "2020-08-24T07:32:41Z", "message": "Decouple app update persistence test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d132ebf0bd63dd3136e07897bbfbc502d4ebcba", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/2d132ebf0bd63dd3136e07897bbfbc502d4ebcba", "committedDate": "2020-08-24T07:56:49Z", "message": "Fix InstallFromListTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "342bbc38d797c0e99f55534a2f6685e49c63843d", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/342bbc38d797c0e99f55534a2f6685e49c63843d", "committedDate": "2020-08-25T04:41:36Z", "message": "Merge branch 'master' into espresso-tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MzYzNTc4", "url": "https://github.com/dimagi/commcare-android/pull/2299#pullrequestreview-474363578", "createdAt": "2020-08-25T10:55:07Z", "commit": {"oid": "342bbc38d797c0e99f55534a2f6685e49c63843d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDo1NTowN1rOHGSoRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDo1NTowN1rOHGSoRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM1ODcyNw==", "bodyText": "nice!", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r476358727", "createdAt": "2020-08-25T10:55:07Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "diffHunk": "@@ -0,0 +1,236 @@\n+package org.commcare.androidTests\n+\n+import android.os.Build\n+import androidx.test.espresso.Espresso.*\n+import androidx.test.espresso.action.ViewActions.click\n+import androidx.test.espresso.assertion.ViewAssertions.doesNotExist\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.filters.SdkSuppress\n+import org.commcare.dalvik.R\n+import org.commcare.utils.*\n+import org.hamcrest.Matchers.endsWith\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppUpdateTest: BaseTest() {\n+\n+    companion object {\n+        const val CCZ_NAME = \"app_update.ccz\"\n+        const val APP_NAME = \"Update Test\"\n+        const val USERNAME = \"user_with_no_data\"\n+        const val PASSWORD = \"123\"\n+    }\n+\n+    @Before\n+    fun setup() {\n+        installApp(APP_NAME, CCZ_NAME)\n+        InstrumentationUtility.login(USERNAME, PASSWORD)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        InstrumentationUtility.logout()\n+        InstrumentationUtility.uninstallCurrentApp()\n+    }\n+\n+    @Test\n+    fun testAppUpdate() {\n+        InstrumentationUtility.enableDeveloperMode()\n+        // Enable app update item.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Settings\"))\n+                .perform(click())\n+        onView(withText(\"Developer Options\"))\n+                .perform(click())\n+        onView(withText(\"Show Update Options Item\"))\n+                .perform(click())\n+        onView(withText(\"Enabled\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // Make sure the update endpoint is set to \"Latest starred version\"\n+        onView(withText(\"Update Options\"))\n+                .perform(click())\n+        onView(withText(\"Latest starred version\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // check base form content\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module Three\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Module One\"))\n+                .perform(click())\n+        onView(withText(\"Example 1\"))\n+                .perform(click())\n+        onView(withText(\"A text question\"))\n+                .check(matches(isDisplayed()))\n+        closeSoftKeyboard()\n+        pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        pressBack()\n+\n+        // make sure case list doesn't have status column\n+        onView(withText(\"Module Two\"))\n+                .perform(click())\n+        onView(withText(\"Update Case\"))\n+                .perform(click())\n+        onView(withText(\"Status\"))\n+                .check(doesNotExist())\n+        InstrumentationUtility.gotoHome()\n+\n+        // download the app update\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 2\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 11 & log out\"))\n+                .check(matches(isDisplayed()))\n+\n+        // Record LastSyncTime\n+        var lastSyncTime = SyncDetailCalculations.getLastSyncTime()\n+\n+        // Update app\n+        onView(withText(\"Update to version 11 & log out\"))\n+                .perform(click())\n+\n+        // Login into the updated version\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+\n+        // Check that a sync is triggered automatically\n+        InstrumentationUtility.assert(SyncDetailCalculations.getLastSyncTime() > lastSyncTime,\n+                \"Sync not triggered automatically\")\n+\n+        // Check updated data, including multimedia\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module Three\"))\n+                .check(doesNotExist())\n+        onView(withText(\"Module One\"))\n+                .perform(click())\n+        onView(withText(\"Example 1\"))\n+                .perform(click())\n+        onView(withText(\"Question with audio\"))\n+                .check(matches(isDisplayed()))\n+        onView(withClassName(endsWith(\"AudioPlaybackButton\")))\n+                .check(matches(isDisplayed()))\n+        closeSoftKeyboard()\n+        pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        pressBack()\n+\n+        // make sure case list `Status` column was added\n+        onView(withText(\"Module Two\"))\n+                .perform(click())\n+        onView(withText(\"Update Case\"))\n+                .perform(click())\n+        onView(withText(\"Status\"))\n+                .check(matches(isDisplayed()))\n+        InstrumentationUtility.gotoHome()\n+\n+        // make sure there are no new updates\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 11\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Recheck\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 11\"))\n+                .check(matches(isDisplayed()))\n+        pressBack()\n+\n+        // Change the update endpoint to \"Latest version\"\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Settings\"))\n+                .perform(click())\n+        onView(withText(\"Update Options\"))\n+                .perform(click())\n+        onView(withText(\"Latest version\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // Confirm that you can now see an update. And Update the app.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Update to version 22 & log out\"))\n+                .check(matches(isDisplayed()))\n+\n+        // Record the last sync time.\n+        lastSyncTime = SyncDetailCalculations.getLastSyncTime()\n+\n+        // Update app\n+        onView(withText(\"Update to version 22 & log out\"))\n+                .perform(click())\n+\n+        // Login again\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+\n+        // Check that login triggers sync\n+        InstrumentationUtility.assert(SyncDetailCalculations.getLastSyncTime() > lastSyncTime,\n+                \"Sync not triggered automatically\")\n+\n+        // Check updates in base form\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module One, renamed\"))\n+                .check(matches(isDisplayed()))\n+    }\n+\n+    @SdkSuppress(maxSdkVersion = Build.VERSION_CODES.Q)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "342bbc38d797c0e99f55534a2f6685e49c63843d"}, "originalPosition": 192}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0f5de39f8bd68af30c9645caa63899f6c242285", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/f0f5de39f8bd68af30c9645caa63899f6c242285", "committedDate": "2020-08-25T11:03:17Z", "message": "Merge branch 'master' into espresso-tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2089, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}