{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyODU4MDc2", "number": 2231, "title": "Add instrumentation tests for saved form using espresso", "bodyText": "Tests are running successfully using jenkins and aws\ncross-request: dimagi/commcare-core#901\nJenkins setup:\n\nassembleCommcareDebug and assembleCommcareDebugAndroidTest gradle tasks are used to create 2 apks, 1 debug and 1 for testing.\nOnce the build is successful, we add a post build action to run tests on aws device farm. It uses jenkins aws device farm plugin.\n\nBrowserStack run It appears to me that browserstack is more powerful and stable compared to aws device farm. Though they don't have a jenkins plugin for espresso as of now.\nAdded a python script which will run in this jenkins job and will schedule a build on browserstack and at the same time will run the tests on aws-device-farm.\nWIKI: https://confluence.dimagi.com/display/MD/CommCare+Android+Instrumentation+Tests", "createdAt": "2020-05-04T10:10:40Z", "url": "https://github.com/dimagi/commcare-android/pull/2231", "merged": true, "mergeCommit": {"oid": "ce581c30ff966e0676db66092822e3283583d7f3"}, "closed": true, "closedAt": "2020-07-24T05:05:38Z", "author": {"login": "ShivamPokhriyal"}, "timelineItems": {"totalCount": 48, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABciQTFZAFqTQxMzE5MDEzNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3vWQhAFqTQ1NDEyMzc4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMTkwMTM3", "url": "https://github.com/dimagi/commcare-android/pull/2231#pullrequestreview-413190137", "createdAt": "2020-05-17T19:11:13Z", "commit": {"oid": "a0c9254e1274ac14bb4c47ae763e73a6db6ba24b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxOToxMToxM1rOGWi7tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxOToxNzoyN1rOGWi94Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI5NDE5Ng==", "bodyText": "can we offline install this from ccz in order to have faster test runtime ?", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r426294196", "createdAt": "2020-05-17T19:11:13Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/SavedFormTest.java", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.commcare.tests;\n+\n+import android.Manifest;\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+import android.net.Uri;\n+import android.provider.MediaStore;\n+import androidx.test.espresso.action.ViewActions;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import androidx.test.rule.ActivityTestRule;\n+import androidx.test.rule.GrantPermissionRule;\n+import androidx.test.runner.intent.IntentCallback;\n+import androidx.test.runner.intent.IntentMonitorRegistry;\n+import org.commcare.CommCareApplication;\n+import org.commcare.activities.DispatchActivity;\n+import org.commcare.activities.FormEntryActivity;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.Utility;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.io.OutputStream;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.endsWith;\n+import static org.hamcrest.Matchers.not;\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class SavedFormTest {\n+\n+    @Rule\n+    public ActivityTestRule<DispatchActivity> activityTestRule = new ActivityTestRule<>(DispatchActivity.class);\n+\n+    @Rule\n+    public IntentsTestRule<FormEntryActivity> intentsRule = new IntentsTestRule<>(FormEntryActivity.class);\n+\n+    @Rule\n+    public GrantPermissionRule permissionRule = GrantPermissionRule.grant(\n+            Manifest.permission.READ_PHONE_STATE,\n+            Manifest.permission.CALL_PHONE,\n+            Manifest.permission.ACCESS_FINE_LOCATION,\n+            Manifest.permission.ACCESS_COARSE_LOCATION,\n+            Manifest.permission.WRITE_EXTERNAL_STORAGE,\n+            Manifest.permission.READ_EXTERNAL_STORAGE,\n+            Manifest.permission.RECORD_AUDIO,\n+            Manifest.permission.CAMERA\n+    );\n+\n+    private IntentCallback intentCallback = intent -> {\n+        if (MediaStore.ACTION_IMAGE_CAPTURE.equals(intent.getAction())) {\n+            Uri uri = intent.getExtras().getParcelable(MediaStore.EXTRA_OUTPUT);\n+            Context context = InstrumentationRegistry.getInstrumentation().getTargetContext();\n+            Bitmap icon = BitmapFactory.decodeResource(\n+                    context.getResources(),\n+                    R.mipmap.ic_launcher);\n+            try (OutputStream outputStream = context.getContentResolver().openOutputStream(uri)) {\n+                icon.compress(Bitmap.CompressFormat.JPEG, 100, outputStream);\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    };\n+\n+    private void stubCamera() {\n+        // Build a result to return from the Camera app\n+        Intent resultData = new Intent();\n+        Instrumentation.ActivityResult result = new Instrumentation.ActivityResult(Activity.RESULT_OK, resultData);\n+\n+        // Stub out the Camera. When an intent is sent to the Camera, this tells Espresso to respond\n+        // with the ActivityResult we just created\n+        intending(hasAction(MediaStore.ACTION_IMAGE_CAPTURE)).respondWith(result);\n+    }\n+\n+    @Before\n+    public void login() {\n+        if (CommCareApplication.instance().getCurrentApp() == null) {\n+            Utility.installApp(\"2zI4jeQ\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0c9254e1274ac14bb4c47ae763e73a6db6ba24b"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI5NDYyMw==", "bodyText": "Is there a reason these changes are needed ?", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r426294623", "createdAt": "2020-05-17T19:15:44Z", "author": {"login": "shubham1g5"}, "path": "app/src/org/commcare/tasks/SaveToDiskTask.java", "diffHunk": "@@ -289,25 +290,21 @@ public void setFormSavedListener(FormSavedListener fsl) {\n      * though, until all answers conform to their constraints/requirements.\n      */\n     private boolean hasInvalidAnswers(boolean markCompleted) {\n-        FormIndex i = FormEntryActivity.mFormController.getFormIndex();\n-        FormEntryActivity.mFormController.jumpToIndex(FormIndex.createBeginningOfFormIndex());\n-\n+        FormController formController = FormEntryActivity.mFormController;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0c9254e1274ac14bb4c47ae763e73a6db6ba24b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI5NDc1Mw==", "bodyText": "What scenarios lead to instanceState being null ?", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r426294753", "createdAt": "2020-05-17T19:17:27Z", "author": {"login": "shubham1g5"}, "path": "app/src/org/commcare/activities/FormEntryActivity.java", "diffHunk": "@@ -257,8 +257,9 @@ public void onReceive(Context context, Intent intent) {\n     @Override\n     protected void onSaveInstanceState(Bundle outState) {\n         super.onSaveInstanceState(outState);\n-        instanceState.saveState(outState);\n-\n+        if (instanceState != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0c9254e1274ac14bb4c47ae763e73a6db6ba24b"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e4708c72c0db301a180253d746434b4088883c30", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/e4708c72c0db301a180253d746434b4088883c30", "committedDate": "2020-05-28T10:36:51Z", "message": "Use environment variable for absolute location"}, "afterCommit": {"oid": "d3c56b3e96bc100c582e96aaa46723d23f1ad337", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/d3c56b3e96bc100c582e96aaa46723d23f1ad337", "committedDate": "2020-06-08T13:59:39Z", "message": "Use environment variable for absolute location"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3676052adb7aee69d637996991f658fc64aeeb0c", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/3676052adb7aee69d637996991f658fc64aeeb0c", "committedDate": "2020-06-30T10:40:32Z", "message": "Add instrumentation tests for saved form using espresso"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcbaa1e19efa820681bfd349e55935efe72b1e13", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/bcbaa1e19efa820681bfd349e55935efe72b1e13", "committedDate": "2020-06-30T10:40:32Z", "message": "Logout once test completes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c1c0bbfb8da11bc09f929253b16a5aca47b6765", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/0c1c0bbfb8da11bc09f929253b16a5aca47b6765", "committedDate": "2020-06-30T10:40:32Z", "message": "Use ccz for installation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9529a72e28edc1bf2f60f7652460bfbe58c48212", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/9529a72e28edc1bf2f60f7652460bfbe58c48212", "committedDate": "2020-06-30T10:40:32Z", "message": "Move out savetodisk task change to separate pr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bc293c013f8935a4118a759164f0f1c5facaca8", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/1bc293c013f8935a4118a759164f0f1c5facaca8", "committedDate": "2020-06-30T10:40:32Z", "message": "Add instrumentation tests for form attachment uploads"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ac52b939b927297e110f58a4ca64a71536748e8", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/6ac52b939b927297e110f58a4ca64a71536748e8", "committedDate": "2020-06-30T10:40:32Z", "message": "Uninstall previously installed app before proceeding tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aafecb44138818c26cae0b98203d53b5a3354175", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/aafecb44138818c26cae0b98203d53b5a3354175", "committedDate": "2020-06-30T10:40:32Z", "message": "Use intent stubbing for app installation rather than screen rotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a7dda013714b435235f9b67880441d5d6c73460", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/8a7dda013714b435235f9b67880441d5d6c73460", "committedDate": "2020-06-30T10:40:32Z", "message": "Add back press cuz app installation doesn't take back to login screen"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c637ca65c828fa3770cfbf9ca7c3d19a443e0cd", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/1c637ca65c828fa3770cfbf9ca7c3d19a443e0cd", "committedDate": "2020-06-30T10:40:32Z", "message": "Add repeated rules and permissions to base class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1a14e54698061b0c217c1284a9f9187b04cdb2b", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/a1a14e54698061b0c217c1284a9f9187b04cdb2b", "committedDate": "2020-06-30T10:40:32Z", "message": "Add another way to use cczs for installation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95110612a970270c984e1a35a2dc7d03240472d7", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/95110612a970270c984e1a35a2dc7d03240472d7", "committedDate": "2020-06-30T10:40:32Z", "message": "Remove hardcoded ccz name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9ff635f57ccb8055f1a97c9a31d7abfc412e650", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/f9ff635f57ccb8055f1a97c9a31d7abfc412e650", "committedDate": "2020-06-30T10:40:32Z", "message": "Add case claim espresso test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2271f7c9e3760f29c0f7afb38ba455e714f63f9", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/b2271f7c9e3760f29c0f7afb38ba455e714f63f9", "committedDate": "2020-06-30T10:40:32Z", "message": "Add AsyncRestoreTest with a hacky way to mock AsyncRestore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "247e1a2ec265c95b49361476bcde5c1e3feabd0c", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/247e1a2ec265c95b49361476bcde5c1e3feabd0c", "committedDate": "2020-06-30T10:40:32Z", "message": "Clear Mock before running tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c477ef9f1a72c7ba4c819768ec07b662f06d8e11", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/c477ef9f1a72c7ba4c819768ec07b662f06d8e11", "committedDate": "2020-06-30T10:40:32Z", "message": "Add steps to run instrumentation tests in readme"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f791240b0be92cb8aa83b703cc09c5cdf80fd81", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/7f791240b0be92cb8aa83b703cc09c5cdf80fd81", "committedDate": "2020-06-30T10:40:32Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9e067ad428a76620389e41b86132e52da9fe5b5", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/d9e067ad428a76620389e41b86132e52da9fe5b5", "committedDate": "2020-06-30T10:40:32Z", "message": "Close okhttp response to avoid leaks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78706e79a804ed80c618b29afff8301d53795f11", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/78706e79a804ed80c618b29afff8301d53795f11", "committedDate": "2020-06-30T10:40:32Z", "message": "Remove @after for logout in AsyncRestoreTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f711fca1554a7eaa8ea21c9e0e54fc15af827deb", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/f711fca1554a7eaa8ea21c9e0e54fc15af827deb", "committedDate": "2020-06-30T10:40:32Z", "message": "Remove unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ba0b1cde749d92a6966e45e29c1dcf8fee54a0d", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/3ba0b1cde749d92a6966e45e29c1dcf8fee54a0d", "committedDate": "2020-06-30T10:40:32Z", "message": "Add a python script to schedule runs on browserstack"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "122f1f9aeb068d455dd9ca1a3c0e70634a3c521f", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/122f1f9aeb068d455dd9ca1a3c0e70634a3c521f", "committedDate": "2020-06-30T10:40:32Z", "message": "Use environment variable for absolute location"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c234365e09d3f5a243f554ed51b1e1b972990ca5", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/c234365e09d3f5a243f554ed51b1e1b972990ca5", "committedDate": "2020-06-30T10:43:05Z", "message": "Revert SaveToDiskTask to master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/919549937491b8b7f3936b636c2b56f7a137f8e2", "committedDate": "2020-07-01T06:00:50Z", "message": "Add tests for finish button clicks with validation failures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d3c56b3e96bc100c582e96aaa46723d23f1ad337", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/d3c56b3e96bc100c582e96aaa46723d23f1ad337", "committedDate": "2020-06-08T13:59:39Z", "message": "Use environment variable for absolute location"}, "afterCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/919549937491b8b7f3936b636c2b56f7a137f8e2", "committedDate": "2020-07-01T06:00:50Z", "message": "Add tests for finish button clicks with validation failures"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMzY3NjQ3", "url": "https://github.com/dimagi/commcare-android/pull/2231#pullrequestreview-441367647", "createdAt": "2020-07-02T05:52:44Z", "commit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNTo1Mjo0NFrOGr-VJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjoxMjoxOVrOGsKHmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc2MzE3Mw==", "bodyText": "This step will likely cause obstacles in automating any instrumenation tests work. If possible, We should try to be independent of any manual device configuration in tests and use overide any animating views in test classes for tests to run smoothly.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448763173", "createdAt": "2020-07-02T05:52:44Z", "author": {"login": "shubham1g5"}, "path": "README.md", "diffHunk": "@@ -92,6 +92,51 @@ Create a new Android Studio JUnit Build configuration using the following steps.\n - Select the \"commcare android test suite\" under the configuration drop down to the left of the green play button.\n - Press the green play button to run the tests.\n \n+## Instrumentation Tests\n+\n+The commcare-android repository uses [Espresso](https://developer.android.com/training/testing/espresso/) to write UI tests.\n+You need to have two keys in your `gradle.properties` before being able to run any instrumentation tests. **But make sure you never commit these keys to github.**\n+```\n+HQ_API_USERNAME=<ASK_ANOTHER_DEV_FOR_KEY>\n+HQ_API_PASSWORD=<ASK_ANOTHER_DEV_FOR_KEY>\n+```\n+\n+### Run instrumentation-tests from the command-line\n+\n+```bash\n+cd commcare-android\n+./gradlew connectedCommcareDebugAndroidTest\n+```\n+\n+It's also a common requirement to run a particular test, such as when you\u2019re fixing a bug or developing a new test. You can achieve the same in command-line using: \n+\n+```bash\n+./gradlew connectedCommcareDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=<FULLY_QUALIFIED_NAME_OF_YOUR_TEST>\n+```\n+\n+You can view the results from the output file generated.\n+\n+### Run instrumentation-tests from Android Studio\n+\n+Before running tests from Android-Studio make sure you've disabled animations in your device. Note, this is only required when you're running tests from Android Studio ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc2NDI3NA==", "bodyText": "Thanks for adding this info, super helpful to set these up locally.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448764274", "createdAt": "2020-07-02T05:56:16Z", "author": {"login": "shubham1g5"}, "path": "README.md", "diffHunk": "@@ -92,6 +92,51 @@ Create a new Android Studio JUnit Build configuration using the following steps.\n - Select the \"commcare android test suite\" under the configuration drop down to the left of the green play button.\n - Press the green play button to run the tests.\n \n+## Instrumentation Tests\n+\n+The commcare-android repository uses [Espresso](https://developer.android.com/training/testing/espresso/) to write UI tests.\n+You need to have two keys in your `gradle.properties` before being able to run any instrumentation tests. **But make sure you never commit these keys to github.**\n+```\n+HQ_API_USERNAME=<ASK_ANOTHER_DEV_FOR_KEY>\n+HQ_API_PASSWORD=<ASK_ANOTHER_DEV_FOR_KEY>\n+```\n+\n+### Run instrumentation-tests from the command-line\n+\n+```bash\n+cd commcare-android\n+./gradlew connectedCommcareDebugAndroidTest\n+```\n+\n+It's also a common requirement to run a particular test, such as when you\u2019re fixing a bug or developing a new test. You can achieve the same in command-line using: \n+\n+```bash\n+./gradlew connectedCommcareDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=<FULLY_QUALIFIED_NAME_OF_YOUR_TEST>\n+```\n+\n+You can view the results from the output file generated.\n+\n+### Run instrumentation-tests from Android Studio\n+\n+Before running tests from Android-Studio make sure you've disabled animations in your device. Note, this is only required when you're running tests from Android Studio \n+```\n+Go to Setting -> Developer Options, and under the Drawing section, switch all of the following options:\n+\n+Window animation scale -> off\n+Transition animation scale -> off\n+Animator duration scale -> off\n+```\n+\n+Create a new Android Studio _Android Instrumented Test_ Build configuration using the following steps.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgxODk0Ng==", "bodyText": "should use upper case for constants - CCZ_NAME", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448818946", "createdAt": "2020-07-02T07:59:51Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/AsyncRestoreTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.commcare.tests;\n+\n+import android.content.Intent;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.AsyncRestoreHelperMock;\n+import org.commcare.tasks.DataPullTask;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class AsyncRestoreTest extends BaseTest {\n+\n+    private final String cczName = \"integration_test_app.ccz\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5MzMzOA==", "bodyText": "Wondering if you can mock it using Mockito instead, for eg. mockito provides APIs to check for whether a particular method was called on the mocked object, so that will remove need of methods like isRetryCalled and be much cleaner in injecting the mocks themselves into the code. Proposing this for you to explore it and full disclaimer that I am not too familiar with mockito myself so this might turn out to be a bad lead.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448893338", "createdAt": "2020-07-02T10:05:26Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/AsyncRestoreHelperMock.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package org.commcare;\n+\n+import org.commcare.network.RemoteDataPullResponse;\n+import org.commcare.tasks.AsyncRestoreHelper;\n+import org.commcare.tasks.DataPullTask;\n+import org.commcare.tasks.ResultAndError;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+public class AsyncRestoreHelperMock extends AsyncRestoreHelper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5NTY2Nw==", "bodyText": "can be abstracted into a function.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448895667", "createdAt": "2020-07-02T10:09:51Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/AsyncRestoreTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.commcare.tests;\n+\n+import android.content.Intent;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.AsyncRestoreHelperMock;\n+import org.commcare.tasks.DataPullTask;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class AsyncRestoreTest extends BaseTest {\n+\n+    private final String cczName = \"integration_test_app.ccz\";\n+    private final String appName = \"Integration Tests\";\n+\n+    @Test\n+    public void testRestoreOnLogin() {\n+        String userId = \"13a0910ea963acbf9f4b59dcc9a0f9aa\";\n+        String groupId = \"78185f2132bd8ba3af30b488f9974b41\";\n+        AsyncRestoreHelperMock.clear();\n+\n+        // Make sure user is present in the group.\n+        HQApi.addUserInGroup(userId, groupId);\n+\n+        // Install the app.\n+        installApp(appName, cczName);\n+\n+        // Clear cache", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwODE5Ng==", "bodyText": "is there a reason that it's defined here instead of the individual test classes ? It feels like the intending activity will be different for different test cases.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448908196", "createdAt": "2020-07-02T10:34:06Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/BaseTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.commcare.tests;\n+\n+import android.Manifest;\n+\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import androidx.test.rule.ActivityTestRule;\n+import androidx.test.rule.GrantPermissionRule;\n+import org.commcare.CommCareApplication;\n+import org.commcare.activities.DispatchActivity;\n+import org.commcare.activities.FormEntryActivity;\n+import org.commcare.utils.Utility;\n+import org.junit.Rule;\n+import org.junit.runner.RunWith;\n+\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public abstract class BaseTest {\n+\n+    @Rule\n+    public ActivityTestRule<DispatchActivity> activityTestRule = new ActivityTestRule<>(DispatchActivity.class);\n+\n+    @Rule\n+    public IntentsTestRule<FormEntryActivity> intentsRule = new IntentsTestRule<>(FormEntryActivity.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwOTAwMg==", "bodyText": "caps for constant.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448909002", "createdAt": "2020-07-02T10:35:38Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.commcare.tests;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.endsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class CaseClaimTest extends BaseTest {\n+\n+    private final String cczName = \"case_claim.ccz\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwOTYwNw==", "bodyText": "can be abstracted into setup", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448909607", "createdAt": "2020-07-02T10:36:49Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/AsyncRestoreTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.commcare.tests;\n+\n+import android.content.Intent;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.AsyncRestoreHelperMock;\n+import org.commcare.tasks.DataPullTask;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class AsyncRestoreTest extends BaseTest {\n+\n+    private final String cczName = \"integration_test_app.ccz\";\n+    private final String appName = \"Integration Tests\";\n+\n+    @Test\n+    public void testRestoreOnLogin() {\n+        String userId = \"13a0910ea963acbf9f4b59dcc9a0f9aa\";\n+        String groupId = \"78185f2132bd8ba3af30b488f9974b41\";\n+        AsyncRestoreHelperMock.clear();\n+\n+        // Make sure user is present in the group.\n+        HQApi.addUserInGroup(userId, groupId);\n+\n+        // Install the app.\n+        installApp(appName, cczName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkxMjYyOA==", "bodyText": "do you remain on installation screen after install ? you might wanna check how it's handled in calabash tests today.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448912628", "createdAt": "2020-07-02T10:42:56Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/BaseTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.commcare.tests;\n+\n+import android.Manifest;\n+\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import androidx.test.rule.ActivityTestRule;\n+import androidx.test.rule.GrantPermissionRule;\n+import org.commcare.CommCareApplication;\n+import org.commcare.activities.DispatchActivity;\n+import org.commcare.activities.FormEntryActivity;\n+import org.commcare.utils.Utility;\n+import org.junit.Rule;\n+import org.junit.runner.RunWith;\n+\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public abstract class BaseTest {\n+\n+    @Rule\n+    public ActivityTestRule<DispatchActivity> activityTestRule = new ActivityTestRule<>(DispatchActivity.class);\n+\n+    @Rule\n+    public IntentsTestRule<FormEntryActivity> intentsRule = new IntentsTestRule<>(FormEntryActivity.class);\n+\n+    @Rule\n+    public GrantPermissionRule permissionRule = GrantPermissionRule.grant(\n+            Manifest.permission.READ_PHONE_STATE,\n+            Manifest.permission.CALL_PHONE,\n+            Manifest.permission.ACCESS_FINE_LOCATION,\n+            Manifest.permission.ACCESS_COARSE_LOCATION,\n+            Manifest.permission.WRITE_EXTERNAL_STORAGE,\n+            Manifest.permission.READ_EXTERNAL_STORAGE,\n+            Manifest.permission.RECORD_AUDIO,\n+            Manifest.permission.CAMERA\n+    );\n+\n+    protected void installApp(String appName, String ccz) {\n+        if (CommCareApplication.instance().getCurrentApp() == null) {\n+            Utility.installApp(ccz);\n+        } else if (!appName.equals(CommCareApplication.instance().getCurrentApp().getAppRecord().getDisplayName())) {\n+            // We already have an installed app, But not the one we need for this test.\n+            Utility.uninstallCurrentApp();\n+            Utility.installApp(ccz);\n+            // App installation doesn't take back to login screen. Is this an issue?\n+            pressBackUnconditionally();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkxNDU5MQ==", "bodyText": "Would not pressBack be more appropriate mechanism used for going back since we wanna fail fast in case of any errors ?", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448914591", "createdAt": "2020-07-02T10:46:45Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.commcare.tests;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.endsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class CaseClaimTest extends BaseTest {\n+\n+    private final String cczName = \"case_claim.ccz\";\n+    private final String appName = \"Case Search and Claim\";\n+\n+    @Before\n+    public void setup() {\n+        installApp(appName, cczName);\n+    }\n+\n+    @Test\n+    public void testCaseClaimByDifferentUser() {\n+        String name = \"cordelia\";\n+        String location = \"boston\";\n+\n+        // Make sure we close off any existing cases due to previous test failures.\n+        HQApi.closeExistingCases(name, \"human\", \"d58f7a55dbe2bf22d0b6838311ada205\");\n+\n+        // Waiting here cuz, HQ sometimes is out of sync and might give stale data.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+\n+        // Make sure that a case with cordelia doesn't exist.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+        onView(withId(R.id.request_button))\n+                .check(matches(isDisplayed())); // The request doesn't do anything which confirms case doesn't exists.\n+\n+        // Register a new case with name cordelia\n+        pressBackUnconditionally();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkxNjg2NQ==", "bodyText": "this can be abstracted into a logout utility method which press backs until it see the logout button on screen.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448916865", "createdAt": "2020-07-02T10:51:11Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.commcare.tests;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.endsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class CaseClaimTest extends BaseTest {\n+\n+    private final String cczName = \"case_claim.ccz\";\n+    private final String appName = \"Case Search and Claim\";\n+\n+    @Before\n+    public void setup() {\n+        installApp(appName, cczName);\n+    }\n+\n+    @Test\n+    public void testCaseClaimByDifferentUser() {\n+        String name = \"cordelia\";\n+        String location = \"boston\";\n+\n+        // Make sure we close off any existing cases due to previous test failures.\n+        HQApi.closeExistingCases(name, \"human\", \"d58f7a55dbe2bf22d0b6838311ada205\");\n+\n+        // Waiting here cuz, HQ sometimes is out of sync and might give stale data.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+\n+        // Make sure that a case with cordelia doesn't exist.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+        onView(withId(R.id.request_button))\n+                .check(matches(isDisplayed())); // The request doesn't do anything which confirms case doesn't exists.\n+\n+        // Register a new case with name cordelia\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        onView(withText(\"Registration\"))\n+                .perform(click());\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(name));\n+\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(location));\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click());\n+\n+        // Confirm newly created case can be claimed.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(name))\n+                .check(matches(isDisplayed()));\n+        onView(withText(name))\n+                .perform(click());\n+        onView(withText(\"Continue\"))\n+                .perform(click());\n+        onView(withText(\"Close\"))\n+                .check(matches(isDisplayed()));\n+\n+        // Login with another user.\n+        pressBackUnconditionally();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkxODE2Mw==", "bodyText": "can be a utility method that takes the wait duration as input.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448918163", "createdAt": "2020-07-02T10:53:52Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.commcare.tests;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.endsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class CaseClaimTest extends BaseTest {\n+\n+    private final String cczName = \"case_claim.ccz\";\n+    private final String appName = \"Case Search and Claim\";\n+\n+    @Before\n+    public void setup() {\n+        installApp(appName, cczName);\n+    }\n+\n+    @Test\n+    public void testCaseClaimByDifferentUser() {\n+        String name = \"cordelia\";\n+        String location = \"boston\";\n+\n+        // Make sure we close off any existing cases due to previous test failures.\n+        HQApi.closeExistingCases(name, \"human\", \"d58f7a55dbe2bf22d0b6838311ada205\");\n+\n+        // Waiting here cuz, HQ sometimes is out of sync and might give stale data.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+\n+        // Make sure that a case with cordelia doesn't exist.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+        onView(withId(R.id.request_button))\n+                .check(matches(isDisplayed())); // The request doesn't do anything which confirms case doesn't exists.\n+\n+        // Register a new case with name cordelia\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        onView(withText(\"Registration\"))\n+                .perform(click());\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(name));\n+\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(location));\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click());\n+\n+        // Confirm newly created case can be claimed.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(name))\n+                .check(matches(isDisplayed()));\n+        onView(withText(name))\n+                .perform(click());\n+        onView(withText(\"Continue\"))\n+                .perform(click());\n+        onView(withText(\"Close\"))\n+                .check(matches(isDisplayed()));\n+\n+        // Login with another user.\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        Utility.logout();\n+\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkxODcyMg==", "bodyText": "same as L56, should be abstracted.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448918722", "createdAt": "2020-07-02T10:55:03Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.commcare.tests;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.endsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class CaseClaimTest extends BaseTest {\n+\n+    private final String cczName = \"case_claim.ccz\";\n+    private final String appName = \"Case Search and Claim\";\n+\n+    @Before\n+    public void setup() {\n+        installApp(appName, cczName);\n+    }\n+\n+    @Test\n+    public void testCaseClaimByDifferentUser() {\n+        String name = \"cordelia\";\n+        String location = \"boston\";\n+\n+        // Make sure we close off any existing cases due to previous test failures.\n+        HQApi.closeExistingCases(name, \"human\", \"d58f7a55dbe2bf22d0b6838311ada205\");\n+\n+        // Waiting here cuz, HQ sometimes is out of sync and might give stale data.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+\n+        // Make sure that a case with cordelia doesn't exist.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+        onView(withId(R.id.request_button))\n+                .check(matches(isDisplayed())); // The request doesn't do anything which confirms case doesn't exists.\n+\n+        // Register a new case with name cordelia\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        onView(withText(\"Registration\"))\n+                .perform(click());\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(name));\n+\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(location));\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click());\n+\n+        // Confirm newly created case can be claimed.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(name))\n+                .check(matches(isDisplayed()));\n+        onView(withText(name))\n+                .perform(click());\n+        onView(withText(\"Continue\"))\n+                .perform(click());\n+        onView(withText(\"Close\"))\n+                .check(matches(isDisplayed()));\n+\n+        // Login with another user.\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        Utility.logout();\n+\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test2\", \"123\");\n+        // Syncing once again to pull all the case data.\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click());\n+\n+        // Somehow, espresso starts before data pull is completed.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        // Search for cordelia.\n+        onView(withText(\"Start\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyMDY0MQ==", "bodyText": "can we have a function here that waits until progress bar is invisible instead ?", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448920641", "createdAt": "2020-07-02T10:59:02Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.commcare.tests;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.endsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class CaseClaimTest extends BaseTest {\n+\n+    private final String cczName = \"case_claim.ccz\";\n+    private final String appName = \"Case Search and Claim\";\n+\n+    @Before\n+    public void setup() {\n+        installApp(appName, cczName);\n+    }\n+\n+    @Test\n+    public void testCaseClaimByDifferentUser() {\n+        String name = \"cordelia\";\n+        String location = \"boston\";\n+\n+        // Make sure we close off any existing cases due to previous test failures.\n+        HQApi.closeExistingCases(name, \"human\", \"d58f7a55dbe2bf22d0b6838311ada205\");\n+\n+        // Waiting here cuz, HQ sometimes is out of sync and might give stale data.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+\n+        // Make sure that a case with cordelia doesn't exist.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+        onView(withId(R.id.request_button))\n+                .check(matches(isDisplayed())); // The request doesn't do anything which confirms case doesn't exists.\n+\n+        // Register a new case with name cordelia\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        onView(withText(\"Registration\"))\n+                .perform(click());\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(name));\n+\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(location));\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click());\n+\n+        // Confirm newly created case can be claimed.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(name))\n+                .check(matches(isDisplayed()));\n+        onView(withText(name))\n+                .perform(click());\n+        onView(withText(\"Continue\"))\n+                .perform(click());\n+        onView(withText(\"Close\"))\n+                .check(matches(isDisplayed()));\n+\n+        // Login with another user.\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        Utility.logout();\n+\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test2\", \"123\");\n+        // Syncing once again to pull all the case data.\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click());\n+\n+        // Somehow, espresso starts before data pull is completed.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyMzc3Mg==", "bodyText": "this part is closing the case, not claiming it.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448923772", "createdAt": "2020-07-02T11:06:04Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.commcare.tests;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.endsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class CaseClaimTest extends BaseTest {\n+\n+    private final String cczName = \"case_claim.ccz\";\n+    private final String appName = \"Case Search and Claim\";\n+\n+    @Before\n+    public void setup() {\n+        installApp(appName, cczName);\n+    }\n+\n+    @Test\n+    public void testCaseClaimByDifferentUser() {\n+        String name = \"cordelia\";\n+        String location = \"boston\";\n+\n+        // Make sure we close off any existing cases due to previous test failures.\n+        HQApi.closeExistingCases(name, \"human\", \"d58f7a55dbe2bf22d0b6838311ada205\");\n+\n+        // Waiting here cuz, HQ sometimes is out of sync and might give stale data.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+\n+        // Make sure that a case with cordelia doesn't exist.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+        onView(withId(R.id.request_button))\n+                .check(matches(isDisplayed())); // The request doesn't do anything which confirms case doesn't exists.\n+\n+        // Register a new case with name cordelia\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        onView(withText(\"Registration\"))\n+                .perform(click());\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(name));\n+\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(location));\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click());\n+\n+        // Confirm newly created case can be claimed.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(name))\n+                .check(matches(isDisplayed()));\n+        onView(withText(name))\n+                .perform(click());\n+        onView(withText(\"Continue\"))\n+                .perform(click());\n+        onView(withText(\"Close\"))\n+                .check(matches(isDisplayed()));\n+\n+        // Login with another user.\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        Utility.logout();\n+\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test2\", \"123\");\n+        // Syncing once again to pull all the case data.\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click());\n+\n+        // Somehow, espresso starts before data pull is completed.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        // Search for cordelia.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                2\n+        )).perform(typeText(location));\n+\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+\n+        // Claim the new case of cordelia with this user.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyNDUzNA==", "bodyText": "we don't need to search any more, but just test in the follow up list ?", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448924534", "createdAt": "2020-07-02T11:07:34Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.commcare.tests;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.endsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class CaseClaimTest extends BaseTest {\n+\n+    private final String cczName = \"case_claim.ccz\";\n+    private final String appName = \"Case Search and Claim\";\n+\n+    @Before\n+    public void setup() {\n+        installApp(appName, cczName);\n+    }\n+\n+    @Test\n+    public void testCaseClaimByDifferentUser() {\n+        String name = \"cordelia\";\n+        String location = \"boston\";\n+\n+        // Make sure we close off any existing cases due to previous test failures.\n+        HQApi.closeExistingCases(name, \"human\", \"d58f7a55dbe2bf22d0b6838311ada205\");\n+\n+        // Waiting here cuz, HQ sometimes is out of sync and might give stale data.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+\n+        // Make sure that a case with cordelia doesn't exist.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+        onView(withId(R.id.request_button))\n+                .check(matches(isDisplayed())); // The request doesn't do anything which confirms case doesn't exists.\n+\n+        // Register a new case with name cordelia\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        onView(withText(\"Registration\"))\n+                .perform(click());\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(name));\n+\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(location));\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click());\n+\n+        // Confirm newly created case can be claimed.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(name))\n+                .check(matches(isDisplayed()));\n+        onView(withText(name))\n+                .perform(click());\n+        onView(withText(\"Continue\"))\n+                .perform(click());\n+        onView(withText(\"Close\"))\n+                .check(matches(isDisplayed()));\n+\n+        // Login with another user.\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        Utility.logout();\n+\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test2\", \"123\");\n+        // Syncing once again to pull all the case data.\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click());\n+\n+        // Somehow, espresso starts before data pull is completed.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        // Search for cordelia.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                2\n+        )).perform(typeText(location));\n+\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+\n+        // Claim the new case of cordelia with this user.\n+        onView(withText(name))\n+                .perform(click());\n+        onView(withText(\"Continue\"))\n+                .perform(click());\n+        onView(withText(\"Close\"))\n+                .perform(click());\n+        onView(withText(\"Yes\"))\n+                .perform(click());\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(\"Robot says bye\"));\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click());\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click());\n+\n+        // Login with first user again.\n+        Utility.logout();\n+\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+        // Sync with server to pull all the data.\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click());\n+        // Make sure espresso doesn't start before data pull is completed.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        // Make sure the case is no longer around.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyNTI5OA==", "bodyText": "very cool and much better apis then calabash!", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448925298", "createdAt": "2020-07-02T11:09:24Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/FormAttachmentUploadTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.commcare.tests;\n+\n+import androidx.test.espresso.action.GeneralLocation;\n+import androidx.test.espresso.action.GeneralSwipeAction;\n+import androidx.test.espresso.action.Press;\n+import androidx.test.espresso.action.Swipe;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.activities.DrawActivity;\n+import org.commcare.dalvik.R;\n+import org.commcare.modern.util.Pair;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.onData;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertNotNull;\n+import static org.hamcrest.Matchers.anything;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static junit.framework.Assert.assertTrue;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class FormAttachmentUploadTest extends BaseTest {\n+\n+    private final String cczName = \"integration_test_app.ccz\";\n+    private final String appName = \"Integration Tests\";\n+\n+    @Before\n+    public void setup() {\n+        installApp(appName, cczName);\n+        Utility.login(\"test\", \"123\");\n+    }\n+\n+    @Test\n+    public void testAttachmentUpload() {\n+        Long latestFormTime = HQApi.getLatestFormTime();\n+        assertNotNull(latestFormTime);\n+\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Form Attachments\"))\n+                .perform(click());\n+        onData(anything())\n+                .inAdapterView(withId(R.id.screen_suite_menu_list))\n+                .atPosition(1)\n+                .perform(click());\n+\n+        Utility.chooseImage();\n+\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+\n+        onView(withText(\"Gather Signature\"))\n+                .perform(click());\n+        onView(instanceOf(DrawActivity.DrawView.class))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzMzgwOQ==", "bodyText": "Why are not we using exisiting Java Android date time utilities ?", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448933809", "createdAt": "2020-07-02T11:27:14Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/utils/DateTime.java", "diffHunk": "@@ -0,0 +1,361 @@\n+/*\n+ * Copyright (c) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.commcare.utils;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.TimeZone;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Immutable representation of a date with an optional time and an optional time zone based on <a\n+ * href=\"http://tools.ietf.org/html/rfc3339\">RFC 3339</a>.\n+ *\n+ * <p>\n+ * Implementation is immutable and therefore thread-safe.\n+ * </p>\n+ *\n+ * @since 1.0\n+ * @author Yaniv Inbar\n+ */\n+public final class DateTime implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0OTYzMw==", "bodyText": "Where does this script plug into today ?", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448949633", "createdAt": "2020-07-02T11:59:49Z", "author": {"login": "shubham1g5"}, "path": "scripts/instrumentationRunner.py", "diffHunk": "@@ -0,0 +1,58 @@\n+\"\"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1NjE0OA==", "bodyText": "how about onImageCaptureIntentSent ?", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448956148", "createdAt": "2020-07-02T12:12:00Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/utils/Utility.java", "diffHunk": "@@ -0,0 +1,240 @@\n+package org.commcare.utils;\n+\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+import android.net.Uri;\n+import android.provider.MediaStore;\n+import android.view.View;\n+import androidx.annotation.IdRes;\n+import androidx.test.espresso.DataInteraction;\n+import androidx.test.espresso.UiController;\n+import androidx.test.espresso.ViewAction;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.runner.intent.IntentMonitorRegistry;\n+import org.commcare.dalvik.R;\n+import org.hamcrest.BaseMatcher;\n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onData;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.openActionBarOverflowOrOptionsMenu;\n+import static androidx.test.espresso.action.ViewActions.clearText;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.swipeUp;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.matcher.RootMatchers.isDialog;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.anything;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+public class Utility {\n+\n+    /**\n+     * Installs the ccz by copying it into app-specific cache directory.\n+     * @param cczName\n+     */\n+    public static void installApp(String cczName) {\n+        Context context = InstrumentationRegistry.getInstrumentation().getTargetContext();\n+        File file = new File(context.getExternalCacheDir(), cczName);\n+        if (!file.exists()) {\n+            InputStream is = context.getClassLoader().getResourceAsStream(cczName);\n+            try {\n+                FileUtil.copyFile(is, file);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+        openOptionsMenu();\n+        onView(withText(\"Offline Install\"))\n+                .perform(click());\n+        stubFileSelection(file.getAbsolutePath());\n+        onView(withId(R.id.screen_multimedia_inflater_filefetch)).perform(click());\n+        onView(withId(R.id.screen_multimedia_inflater_install))\n+                .perform(click());\n+    }\n+\n+    public static void uninstallCurrentApp() {\n+        openOptionsMenu();\n+        onView(withText(\"Go To App Manager\")).perform(click());\n+        clickListItem(R.id.apps_list_view, 0);\n+        onView(withText(\"Uninstall\")).perform(click());\n+        onView(withText(\"OK\")).inRoot(isDialog()).perform(click());\n+        onView(withId(R.id.install_app_button)).perform(click());\n+    }\n+\n+    public static void login(String userName, String password) {\n+        onView(withId(R.id.edit_username))\n+                .perform(clearText());\n+        onView(withId(R.id.edit_username))\n+                .perform(typeText(userName));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.edit_password))\n+                .perform(typeText(password));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.login_button))\n+                .perform(click());\n+    }\n+\n+    public static void openFirstForm() {\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        clickListItem(R.id.screen_suite_menu_list, 0);\n+        clickListItem(R.id.screen_suite_menu_list, 1);\n+    }\n+\n+    public static void openOptionsMenu() {\n+        Context context = InstrumentationRegistry.getInstrumentation().getTargetContext();\n+        openActionBarOverflowOrOptionsMenu(context);\n+    }\n+\n+    /**\n+     * Click the list item at a particular item position\n+     * @param resId Resource reference to the list.\n+     * @param position Position of the item to be clicked.\n+     */\n+    public static void clickListItem(@IdRes int resId, int position) {\n+        onData(anything())\n+                .inAdapterView(withId(resId))\n+                .atPosition(position)\n+                .perform(click());\n+    }\n+\n+    /**\n+     * Returns a subview inside a particular list item.\n+     * @param listId Resource reference to the list.\n+     * @param position Position of the list item whose subview is needed.\n+     * @param subviewId Resource reference to the subview.\n+     */\n+    public static DataInteraction getSubViewInListItem(@IdRes int listId, int position, @IdRes int subviewId) {\n+        return onData(anything())\n+                .inAdapterView(withId(listId))\n+                .atPosition(position)\n+                .onChildView(withId(subviewId));\n+    }\n+\n+    /**\n+     * Opens first incomplete form in the app.\n+     * Need to have incomplete-form-enabled custom parameter set.\n+     */\n+    public static void openFirstIncompleteForm() {\n+        onView(withText(startsWith(\"Incomplete\"))).perform(click());\n+        clickListItem(R.id.screen_entity_select_list, 0);\n+    }\n+\n+    public static void logout() {\n+        onView(withId(R.id.home_gridview_buttons))\n+                .perform(swipeUp());\n+        onView(withText(\"Log out of CommCare\"))\n+                .perform(click());\n+    }\n+\n+    /**\n+     * Stubs the camera intent and uses R.mipmap.ic_launcher as the image to be returned by the camera.\n+     */\n+    public static void chooseImage() {\n+        stubCamera();\n+        IntentMonitorRegistry.getInstance().addIntentCallback(Utility::onIntentSent);\n+        onView(withText(R.string.capture_image))\n+                .perform(click());\n+        IntentMonitorRegistry.getInstance().removeIntentCallback(Utility::onIntentSent);\n+    }\n+\n+    /**\n+     * Apparently Thread.sleep() doesn't work on espresso.\n+     * https://youtu.be/isihPOY2vS4?t=674\n+     */\n+    public static ViewAction sleep(final long millis) {\n+        return new ViewAction() {\n+            @Override\n+            public Matcher<View> getConstraints() {\n+                return isRoot();\n+            }\n+\n+            @Override\n+            public String getDescription() {\n+                return \"Going to sleep for \" + millis + \"milliseconds\";\n+            }\n+\n+            @Override\n+            public void perform(UiController uiController, final View view) {\n+                uiController.loopMainThreadForAtLeast(millis);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * In case a view contains more than 1 items of same type,\n+     * use this to select the item at @param position.\n+     * NOTE:- position is 1 based.\n+     */\n+    public static <T> Matcher<T> find(Matcher<T> matcher, int position) {\n+        return new BaseMatcher<T>() {\n+            int count = 0;\n+            @Override\n+            public boolean matches(Object item) {\n+                if (matcher.matches(item)) {\n+                    count++;\n+                    return count == position;\n+                }\n+                return false;\n+            }\n+\n+            @Override\n+            public void describeTo(Description description) {\n+                description.appendText(\"will return \" + position + \" matching item\");\n+            }\n+        };\n+    }\n+\n+    //region private helpers.\n+    private static void stubCamera() {\n+        // Build a result to return from the Camera app\n+        Intent resultData = new Intent();\n+        Instrumentation.ActivityResult result = new Instrumentation.ActivityResult(Activity.RESULT_OK, resultData);\n+\n+        // Stub out the Camera. When an intent is sent to the Camera, this tells Espresso to respond\n+        // with the ActivityResult we just created\n+        intending(hasAction(MediaStore.ACTION_IMAGE_CAPTURE)).respondWith(result);\n+    }\n+\n+    private static void stubFileSelection(String filePath) {\n+        Intent resultData = new Intent();\n+        Uri fileUri = Uri.fromFile(new File(filePath));\n+        resultData.setData(fileUri);\n+        Instrumentation.ActivityResult result = new Instrumentation.ActivityResult(Activity.RESULT_OK, resultData);\n+        intending(hasAction(Intent.ACTION_GET_CONTENT)).respondWith(result);\n+    }\n+\n+    private static void onIntentSent(Intent intent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1NjMxNA==", "bodyText": "InstrumentationUtility ?", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448956314", "createdAt": "2020-07-02T12:12:19Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/utils/Utility.java", "diffHunk": "@@ -0,0 +1,240 @@\n+package org.commcare.utils;\n+\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+import android.net.Uri;\n+import android.provider.MediaStore;\n+import android.view.View;\n+import androidx.annotation.IdRes;\n+import androidx.test.espresso.DataInteraction;\n+import androidx.test.espresso.UiController;\n+import androidx.test.espresso.ViewAction;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.runner.intent.IntentMonitorRegistry;\n+import org.commcare.dalvik.R;\n+import org.hamcrest.BaseMatcher;\n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onData;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.openActionBarOverflowOrOptionsMenu;\n+import static androidx.test.espresso.action.ViewActions.clearText;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.swipeUp;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.matcher.RootMatchers.isDialog;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.anything;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+public class Utility {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d155011c4d93060f25a15a3822432c7fdd98716", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/0d155011c4d93060f25a15a3822432c7fdd98716", "committedDate": "2020-07-03T04:22:28Z", "message": "Rename android tests package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e54452415602918c054ba0bf49983a87c385ccb", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/6e54452415602918c054ba0bf49983a87c385ccb", "committedDate": "2020-07-06T07:37:40Z", "message": "PR suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c152cfc70f83146df93774989f1cfe0e320fb47a", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/c152cfc70f83146df93774989f1cfe0e320fb47a", "committedDate": "2020-07-06T11:29:27Z", "message": "Use intent test rule on dispatch activity"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNTk1ODQ2", "url": "https://github.com/dimagi/commcare-android/pull/2231#pullrequestreview-443595846", "createdAt": "2020-07-07T06:29:47Z", "commit": {"oid": "c152cfc70f83146df93774989f1cfe0e320fb47a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNjoyOTo0N1rOGtwxfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNjo0NjoyM1rOGtxJyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYzODIwNg==", "bodyText": "since it's only related to browserstack we should rename this something similar to browserstack.py to avoid confusion.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450638206", "createdAt": "2020-07-07T06:29:47Z", "author": {"login": "shubham1g5"}, "path": "scripts/instrumentationRunner.py", "diffHunk": "@@ -0,0 +1,58 @@\n+\"\"\"\n+Submits the apks to BrowserStack to run the instrumentation tests.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c152cfc70f83146df93774989f1cfe0e320fb47a"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYzODM3NA==", "bodyText": "can we add another Android 4.4 device here ?", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450638374", "createdAt": "2020-07-07T06:30:14Z", "author": {"login": "shubham1g5"}, "path": "scripts/instrumentationRunner.py", "diffHunk": "@@ -0,0 +1,58 @@\n+\"\"\"\n+Submits the apks to BrowserStack to run the instrumentation tests.\n+\"\"\"\n+\n+import os\n+import shlex\n+import subprocess\n+from subprocess import PIPE\n+import sys\n+import json\n+\n+def appendData(command, dataUrl):\n+    var = \"file=@{}\".format(dataUrl)\n+    return command + \" \" + json.dumps(var)\n+\n+def buildTestCommand(appToken, testToken):\n+    test = {}\n+    test[\"devices\"] = [\"LG G5-6.0\"] #using just 1 device right now.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c152cfc70f83146df93774989f1cfe0e320fb47a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0NDA4Mw==", "bodyText": "Yeah you can make 2 changes -\n\nChange FormAndDataSyncer to utilize a DataPullTaskFactory and then override that factory class in the tests to return you the mocked class.\nHave a setter for asyncRestoreHelper in DataPullTask to set the mocked asyncRestoreHelper", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450644083", "createdAt": "2020-07-07T06:45:34Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/AsyncRestoreHelperMock.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package org.commcare;\n+\n+import org.commcare.network.RemoteDataPullResponse;\n+import org.commcare.tasks.AsyncRestoreHelper;\n+import org.commcare.tasks.DataPullTask;\n+import org.commcare.tasks.ResultAndError;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+public class AsyncRestoreHelperMock extends AsyncRestoreHelper {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5MzMzOA=="}, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0NDQyNQ==", "bodyText": "bumping this for your thoughts on this.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450644425", "createdAt": "2020-07-07T06:46:23Z", "author": {"login": "shubham1g5"}, "path": "README.md", "diffHunk": "@@ -92,6 +92,51 @@ Create a new Android Studio JUnit Build configuration using the following steps.\n - Select the \"commcare android test suite\" under the configuration drop down to the left of the green play button.\n - Press the green play button to run the tests.\n \n+## Instrumentation Tests\n+\n+The commcare-android repository uses [Espresso](https://developer.android.com/training/testing/espresso/) to write UI tests.\n+You need to have two keys in your `gradle.properties` before being able to run any instrumentation tests. **But make sure you never commit these keys to github.**\n+```\n+HQ_API_USERNAME=<ASK_ANOTHER_DEV_FOR_KEY>\n+HQ_API_PASSWORD=<ASK_ANOTHER_DEV_FOR_KEY>\n+```\n+\n+### Run instrumentation-tests from the command-line\n+\n+```bash\n+cd commcare-android\n+./gradlew connectedCommcareDebugAndroidTest\n+```\n+\n+It's also a common requirement to run a particular test, such as when you\u2019re fixing a bug or developing a new test. You can achieve the same in command-line using: \n+\n+```bash\n+./gradlew connectedCommcareDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=<FULLY_QUALIFIED_NAME_OF_YOUR_TEST>\n+```\n+\n+You can view the results from the output file generated.\n+\n+### Run instrumentation-tests from Android Studio\n+\n+Before running tests from Android-Studio make sure you've disabled animations in your device. Note, this is only required when you're running tests from Android Studio ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc2MzE3Mw=="}, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79a715ae29bd61bf78ead6e4fd35fcaab67c9f1e", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/79a715ae29bd61bf78ead6e4fd35fcaab67c9f1e", "committedDate": "2020-07-08T11:23:32Z", "message": "Use custom application class in androidTests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b29076875c92d754eba422538378e24e69b06bd0", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/b29076875c92d754eba422538378e24e69b06bd0", "committedDate": "2020-07-09T05:20:21Z", "message": "Reset form entry activity to master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cecfc6e0265d8867e924a8e528e4cfc94f0f9093", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/cecfc6e0265d8867e924a8e528e4cfc94f0f9093", "committedDate": "2020-07-09T05:21:19Z", "message": "Merge branch 'master' into test-saved-form-flow"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MzkyMTc1", "url": "https://github.com/dimagi/commcare-android/pull/2231#pullrequestreview-445392175", "createdAt": "2020-07-09T08:20:10Z", "commit": {"oid": "cecfc6e0265d8867e924a8e528e4cfc94f0f9093"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODoyMDoxMFrOGvGtnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODoyMDoxMFrOGvGtnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0NjIzOQ==", "bodyText": "Q: Does browserstack support uploading bundles ?", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r452046239", "createdAt": "2020-07-09T08:20:10Z", "author": {"login": "shubham1g5"}, "path": "scripts/browserstack.py", "diffHunk": "@@ -0,0 +1,58 @@\n+\"\"\"\n+Submits the apks to BrowserStack to run the instrumentation tests.\n+\"\"\"\n+\n+import os\n+import shlex\n+import subprocess\n+from subprocess import PIPE\n+import sys\n+import json\n+\n+def appendData(command, dataUrl):\n+    var = \"file=@{}\".format(dataUrl)\n+    return command + \" \" + json.dumps(var)\n+\n+def buildTestCommand(appToken, testToken):\n+    test = {}\n+    test[\"devices\"] = [\"LG G5-6.0\", \"Google Nexus 5-4.4\"]\n+    test[\"app\"] = appToken\n+    test[\"deviceLogs\"] = True\n+    test[\"testSuite\"] = testToken\n+    return json.dumps(json.dumps(test))\n+\n+if __name__ == \"__main__\":\n+\n+    if \"BROWSERSTACK_USERNAME\" in os.environ:\n+        userName = os.environ[\"BROWSERSTACK_USERNAME\"]\n+\n+    if \"BROWSERSTACK_PASSWORD\" in os.environ:\n+        password = os.environ[\"BROWSERSTACK_PASSWORD\"]\n+\n+    if \"BASE_LOCATION\" in os.environ:\n+        baseLoc = os.environ[\"BASE_LOCATION\"]\n+\n+    debugApk = baseLoc + \"commcare/debug/app-commcare-debug.apk\"\n+    testApk = baseLoc + \"androidTest/commcare/debug/app-commcare-debug-androidTest.apk\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cecfc6e0265d8867e924a8e528e4cfc94f0f9093"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "771490b50cf9ec011a27235904733b9dc86ffe6e", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/771490b50cf9ec011a27235904733b9dc86ffe6e", "committedDate": "2020-07-09T09:45:53Z", "message": "Use app bundles for testing on browserstack"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1NTEwNjAx", "url": "https://github.com/dimagi/commcare-android/pull/2231#pullrequestreview-445510601", "createdAt": "2020-07-09T11:00:39Z", "commit": {"oid": "771490b50cf9ec011a27235904733b9dc86ffe6e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMTowMDozOVrOGvMNWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMTowMDozOVrOGvMNWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEzNjI4MQ==", "bodyText": "would be good to rename this to debugBundle now that it represents bundle.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r452136281", "createdAt": "2020-07-09T11:00:39Z", "author": {"login": "shubham1g5"}, "path": "scripts/browserstack.py", "diffHunk": "@@ -32,8 +32,8 @@ def buildTestCommand(appToken, testToken):\n     if \"BASE_LOCATION\" in os.environ:\n         baseLoc = os.environ[\"BASE_LOCATION\"]\n \n-    debugApk = baseLoc + \"commcare/debug/app-commcare-debug.apk\"\n-    testApk = baseLoc + \"androidTest/commcare/debug/app-commcare-debug-androidTest.apk\"\n+    debugApk = baseLoc + \"bundle/commcareDebug/app-commcare-debug.aab\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "771490b50cf9ec011a27235904733b9dc86ffe6e"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f526342f2cb9b86db037c33174404b8c2ff5bbf", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/7f526342f2cb9b86db037c33174404b8c2ff5bbf", "committedDate": "2020-07-09T11:21:23Z", "message": "Rename debugApk to debugAppBundle"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "07d5402b1ade6244f20e6d5aeceddc42f0a89eb1", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/07d5402b1ade6244f20e6d5aeceddc42f0a89eb1", "committedDate": "2020-07-20T14:44:05Z", "message": "Remove firebase core and upgrade crashlytics"}, "afterCommit": {"oid": "7f526342f2cb9b86db037c33174404b8c2ff5bbf", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/7f526342f2cb9b86db037c33174404b8c2ff5bbf", "committedDate": "2020-07-09T11:21:23Z", "message": "Rename debugApk to debugAppBundle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9db50dcf146ce07f81fd12480437b10fce86ae2", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/d9db50dcf146ce07f81fd12480437b10fce86ae2", "committedDate": "2020-07-21T05:37:21Z", "message": "Fix incorrect sleep time"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "414261f4f594ee859d71810e10f2b0249f730939", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/414261f4f594ee859d71810e10f2b0249f730939", "committedDate": "2020-07-21T06:24:55Z", "message": "Use browserstack device names from jenkins job config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54fcb2d2a263cb5093b7d809545de5cc0295656b", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/54fcb2d2a263cb5093b7d809545de5cc0295656b", "committedDate": "2020-07-21T07:03:10Z", "message": "Merge branch 'master' into test-saved-form-flow"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMTkxMzkw", "url": "https://github.com/dimagi/commcare-android/pull/2231#pullrequestreview-452191390", "createdAt": "2020-07-21T07:24:20Z", "commit": {"oid": "54fcb2d2a263cb5093b7d809545de5cc0295656b"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a303724c1d92ad065934493a9bf0fa344b0b9571", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/a303724c1d92ad065934493a9bf0fa344b0b9571", "committedDate": "2020-07-21T13:22:49Z", "message": "Get the result of browerstack test run in jenkins"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b17fa22b71988a60b2a83abcfdee4f60b4d3ae5f", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/b17fa22b71988a60b2a83abcfdee4f60b4d3ae5f", "committedDate": "2020-07-23T06:59:29Z", "message": "Update tests to run on release build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c86a5bceed20732ec133f0b608072a778ca5e896", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/c86a5bceed20732ec133f0b608072a778ca5e896", "committedDate": "2020-07-23T07:00:53Z", "message": "Update script to use release apks for browserstack"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db4853d3001440e1d5f79821b89211f1015494cc", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/db4853d3001440e1d5f79821b89211f1015494cc", "committedDate": "2020-07-23T07:01:38Z", "message": "Fix NoSuchMethodError in release build"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MTIzNzgy", "url": "https://github.com/dimagi/commcare-android/pull/2231#pullrequestreview-454123782", "createdAt": "2020-07-23T13:21:46Z", "commit": {"oid": "db4853d3001440e1d5f79821b89211f1015494cc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2036, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}