{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5Mjk5Mjcw", "number": 2237, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNToxNDozNlrOD92H2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMTowMTozNFrOD_eEOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTc2NDc1OnYy", "diffSide": "RIGHT", "path": "app/src/org/commcare/gis/AreaCalculator.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNToxNDozNlrOGXlacg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNzoxMDo0OVrOGaGgWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4MzQxMA==", "bodyText": "Are we expecting that NoSuchElementException can occur and ignoring that?", "url": "https://github.com/dimagi/commcare-android/pull/2237#discussion_r427383410", "createdAt": "2020-05-19T15:14:36Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/src/org/commcare/gis/AreaCalculator.kt", "diffHunk": "@@ -0,0 +1,44 @@\n+package org.commcare.gis\n+\n+import com.google.android.gms.maps.model.LatLng\n+import com.google.maps.android.SphericalUtil\n+import com.mapbox.geojson.Polygon\n+\n+/**\n+ * Utility class to calculate polygon sphrical properties like area and perimeter\n+ */\n+class AreaCalculator(val polygon: Polygon) {\n+\n+    private var latLngs = ArrayList<LatLng>()\n+\n+    init {\n+        kotlin.runCatching {\n+            polygon.coordinates().first().map { point ->\n+                LatLng(point.latitude(), point.longitude())\n+            }.toCollection(latLngs)\n+        }.onFailure { e ->\n+            if (e !is NoSuchElementException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4feccfa9c4f7bf648e814e9f5b4a147e831e5710"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyMjc0NQ==", "bodyText": "yeah, first throws a NoSuchElementException in case the list is empty.", "url": "https://github.com/dimagi/commcare-android/pull/2237#discussion_r430022745", "createdAt": "2020-05-25T17:10:49Z", "author": {"login": "shubham1g5"}, "path": "app/src/org/commcare/gis/AreaCalculator.kt", "diffHunk": "@@ -0,0 +1,44 @@\n+package org.commcare.gis\n+\n+import com.google.android.gms.maps.model.LatLng\n+import com.google.maps.android.SphericalUtil\n+import com.mapbox.geojson.Polygon\n+\n+/**\n+ * Utility class to calculate polygon sphrical properties like area and perimeter\n+ */\n+class AreaCalculator(val polygon: Polygon) {\n+\n+    private var latLngs = ArrayList<LatLng>()\n+\n+    init {\n+        kotlin.runCatching {\n+            polygon.coordinates().first().map { point ->\n+                LatLng(point.latitude(), point.longitude())\n+            }.toCollection(latLngs)\n+        }.onFailure { e ->\n+            if (e !is NoSuchElementException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4MzQxMA=="}, "originalCommit": {"oid": "4feccfa9c4f7bf648e814e9f5b4a147e831e5710"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTk0MzMyOnYy", "diffSide": "RIGHT", "path": "app/src/org/commcare/gis/DrawingBoundaryActivity.kt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxMzoyNjoyNVrOGZu73Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNzoxMToyOVrOGaGhEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzNjU3Mw==", "bodyText": "Should we be worried about locationClient being null here? perhaps ? will be a better operator to use.", "url": "https://github.com/dimagi/commcare-android/pull/2237#discussion_r429636573", "createdAt": "2020-05-24T13:26:25Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/src/org/commcare/gis/DrawingBoundaryActivity.kt", "diffHunk": "@@ -0,0 +1,239 @@\n+package org.commcare.gis\n+\n+import android.app.Activity\n+import android.content.Intent\n+import android.content.pm.ActivityInfo\n+import android.content.res.Configuration\n+import android.graphics.Bitmap\n+import android.location.Location\n+import android.location.LocationListener\n+import android.os.Build\n+import android.os.Bundle\n+import android.widget.Toast\n+import com.mapbox.geojson.Polygon\n+import com.mapbox.mapboxsdk.geometry.LatLng\n+import com.mapbox.mapboxsdk.maps.MapboxMap\n+import com.mapbox.mapboxsdk.maps.Style\n+import io.ona.kujaku.manager.DrawingManager\n+import kotlinx.android.synthetic.main.activity_entity_mapbox.*\n+import org.commcare.activities.components.FormEntryInstanceState\n+import org.commcare.android.javarosa.IntentCallout\n+import org.commcare.dalvik.R\n+import org.commcare.gis.EntityMapUtils.parseBoundaryCoords\n+import org.commcare.interfaces.CommCareActivityUIController\n+import org.commcare.interfaces.WithUIController\n+import org.commcare.utils.FileUtil\n+import org.commcare.utils.ImageType\n+import org.javarosa.core.services.Logger\n+import java.io.File\n+\n+/**\n+ * Used to draw or walk a boundary on mapbox based map\n+ */\n+class DrawingBoundaryActivity : BaseMapboxActivity(), WithUIController, LocationListener, MapboxMap.SnapshotReadyCallback {\n+\n+    companion object {\n+        // Incoming Intent Extras\n+        private const val EXTRA_KEY_ACCURACY = \"accuracy\"\n+        private const val EXTRA_KEY_IMAGE = \"image\"\n+        private const val EXTRA_KEY_INTERVAL_METERS = \"interval_meters\"\n+        private const val EXTRA_KEY_INTERVAL_MILLIS = \"interval_millis\"\n+        private const val EXTRA_KEY_TITLE = \"title\"\n+        private const val EXTRA_KEY_DETAIL = \"detail\"\n+        private const val EXTRA_KEY_MANUAL = \"manual\"\n+\n+        // Result Intent Extras\n+        private const val EXTRA_KEY_COORDINATES = \"coordinates\"\n+        private const val EXTRA_KEY_PERIMETER = \"perimeter\"\n+\n+        private const val LOCATION_MIN_MAX_ACCURACY = 50\n+        private const val LOCATION_MIN_MIN_ACCURACY = 10\n+\n+    }\n+\n+    private var mapSnapshotPath: String? = null\n+    private lateinit var loadedStyle: Style\n+    private lateinit var boundaryCoords: String\n+    private var polygon: Polygon? = null\n+    private var isManual: Boolean = false\n+    private lateinit var drawingManager: DrawingManager\n+    private var isRecording: Boolean = false\n+    private var previousLocation: Location? = null\n+    private var recordingIntervalMeters = 0\n+    private var recordingIntervalMillis = 0\n+    private var isImageReturnRequired = false\n+    private var title: String? = null\n+    private var detail: String? = null\n+    private var locationMinAccuracy = 35\n+\n+    private lateinit var uiController: DrawingBoundaryActivityUIController\n+\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        freezeOrientation()\n+        initExtras()\n+    }\n+\n+    private fun initExtras() {\n+        val params = intent.extras\n+        if (params != null) {\n+\n+            locationMinAccuracy = LOCATION_MIN_MIN_ACCURACY.coerceAtLeast(\n+                    LOCATION_MIN_MAX_ACCURACY.coerceAtMost(\n+                            Integer.valueOf(params.getString(EXTRA_KEY_ACCURACY, LOCATION_MIN_MIN_ACCURACY.toString()))))\n+\n+\n+            recordingIntervalMeters = Integer.valueOf(params.getString(EXTRA_KEY_INTERVAL_METERS, \"0\"))\n+            recordingIntervalMillis = Integer.valueOf(params.getString(EXTRA_KEY_INTERVAL_MILLIS, \"0\"))\n+            isImageReturnRequired = params.getString(EXTRA_KEY_IMAGE, \"false\")!!.toBoolean()\n+            title = params.getString(EXTRA_KEY_TITLE, \"\")\n+            detail = params.getString(EXTRA_KEY_DETAIL, \"\")\n+            isManual = params.getString(EXTRA_KEY_MANUAL, \"false\")!!.toBoolean()\n+            boundaryCoords = params.getString(EXTRA_KEY_COORDINATES, \"\")\n+        }\n+    }\n+\n+    private fun freezeOrientation() {\n+        val orientation = resources.configuration.orientation\n+        requestedOrientation = if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR2) {\n+            when (orientation) {\n+                Configuration.ORIENTATION_PORTRAIT -> ActivityInfo.SCREEN_ORIENTATION_SENSOR_PORTRAIT\n+                else -> ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE\n+            }\n+        } else {\n+            when (orientation) {\n+                Configuration.ORIENTATION_PORTRAIT -> ActivityInfo.SCREEN_ORIENTATION_USER_PORTRAIT\n+                else -> ActivityInfo.SCREEN_ORIENTATION_USER_LANDSCAPE\n+            }\n+        }\n+    }\n+\n+    override fun onMapLoaded() {\n+        map.setStyle(Style.MAPBOX_STREETS) { loadedStyle ->\n+            this.loadedStyle = loadedStyle\n+            onStyleLoaded()\n+        }\n+    }\n+\n+    private fun onStyleLoaded() {\n+        mapView.isWarmGps = true\n+        drawingManager = DrawingManager(mapView, map, loadedStyle)\n+        map.addOnMapClickListener {\n+            polygon = drawingManager.currentPolygon\n+            uiController.refreshView()\n+            false\n+        }\n+        setUiFromBoundaryCoords()\n+    }\n+\n+    private fun setUiFromBoundaryCoords() {\n+        kotlin.runCatching {\n+            parseBoundaryCoords(boundaryCoords)\n+        }.onFailure {\n+            showToast(R.string.parse_coordinates_failure)\n+            setResult(Activity.RESULT_CANCELED)\n+            Logger.exception(\"Exception while loading boundary coordinates \", Exception(it))\n+            finish()\n+        }.onSuccess { latlngs ->\n+            latlngs.map { latlng -> drawingManager.drawCircle(latlng) }\n+        }\n+    }\n+\n+\n+    fun startTracking() {\n+        isRecording = true\n+        if (!isManual) {\n+            if (mapView.locationClient != null) {\n+                mapView.locationClient!!.addLocationListener(this)\n+            }\n+        } else {\n+            drawingManager.startDrawing(null)\n+        }\n+    }\n+\n+    fun stopTracking() {\n+        isRecording = false\n+        mapView.locationClient!!.removeLocationListener(this)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc598d9b5d07c4483394ab04254f21595ba92a4e"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzOTE1MQ==", "bodyText": "Confirming, it crashes here, if we deny the location permission and then press Start followed by Stop.\nPerhaps we should finish the activity if the permissions are not granted?", "url": "https://github.com/dimagi/commcare-android/pull/2237#discussion_r429639151", "createdAt": "2020-05-24T13:53:47Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/src/org/commcare/gis/DrawingBoundaryActivity.kt", "diffHunk": "@@ -0,0 +1,239 @@\n+package org.commcare.gis\n+\n+import android.app.Activity\n+import android.content.Intent\n+import android.content.pm.ActivityInfo\n+import android.content.res.Configuration\n+import android.graphics.Bitmap\n+import android.location.Location\n+import android.location.LocationListener\n+import android.os.Build\n+import android.os.Bundle\n+import android.widget.Toast\n+import com.mapbox.geojson.Polygon\n+import com.mapbox.mapboxsdk.geometry.LatLng\n+import com.mapbox.mapboxsdk.maps.MapboxMap\n+import com.mapbox.mapboxsdk.maps.Style\n+import io.ona.kujaku.manager.DrawingManager\n+import kotlinx.android.synthetic.main.activity_entity_mapbox.*\n+import org.commcare.activities.components.FormEntryInstanceState\n+import org.commcare.android.javarosa.IntentCallout\n+import org.commcare.dalvik.R\n+import org.commcare.gis.EntityMapUtils.parseBoundaryCoords\n+import org.commcare.interfaces.CommCareActivityUIController\n+import org.commcare.interfaces.WithUIController\n+import org.commcare.utils.FileUtil\n+import org.commcare.utils.ImageType\n+import org.javarosa.core.services.Logger\n+import java.io.File\n+\n+/**\n+ * Used to draw or walk a boundary on mapbox based map\n+ */\n+class DrawingBoundaryActivity : BaseMapboxActivity(), WithUIController, LocationListener, MapboxMap.SnapshotReadyCallback {\n+\n+    companion object {\n+        // Incoming Intent Extras\n+        private const val EXTRA_KEY_ACCURACY = \"accuracy\"\n+        private const val EXTRA_KEY_IMAGE = \"image\"\n+        private const val EXTRA_KEY_INTERVAL_METERS = \"interval_meters\"\n+        private const val EXTRA_KEY_INTERVAL_MILLIS = \"interval_millis\"\n+        private const val EXTRA_KEY_TITLE = \"title\"\n+        private const val EXTRA_KEY_DETAIL = \"detail\"\n+        private const val EXTRA_KEY_MANUAL = \"manual\"\n+\n+        // Result Intent Extras\n+        private const val EXTRA_KEY_COORDINATES = \"coordinates\"\n+        private const val EXTRA_KEY_PERIMETER = \"perimeter\"\n+\n+        private const val LOCATION_MIN_MAX_ACCURACY = 50\n+        private const val LOCATION_MIN_MIN_ACCURACY = 10\n+\n+    }\n+\n+    private var mapSnapshotPath: String? = null\n+    private lateinit var loadedStyle: Style\n+    private lateinit var boundaryCoords: String\n+    private var polygon: Polygon? = null\n+    private var isManual: Boolean = false\n+    private lateinit var drawingManager: DrawingManager\n+    private var isRecording: Boolean = false\n+    private var previousLocation: Location? = null\n+    private var recordingIntervalMeters = 0\n+    private var recordingIntervalMillis = 0\n+    private var isImageReturnRequired = false\n+    private var title: String? = null\n+    private var detail: String? = null\n+    private var locationMinAccuracy = 35\n+\n+    private lateinit var uiController: DrawingBoundaryActivityUIController\n+\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        freezeOrientation()\n+        initExtras()\n+    }\n+\n+    private fun initExtras() {\n+        val params = intent.extras\n+        if (params != null) {\n+\n+            locationMinAccuracy = LOCATION_MIN_MIN_ACCURACY.coerceAtLeast(\n+                    LOCATION_MIN_MAX_ACCURACY.coerceAtMost(\n+                            Integer.valueOf(params.getString(EXTRA_KEY_ACCURACY, LOCATION_MIN_MIN_ACCURACY.toString()))))\n+\n+\n+            recordingIntervalMeters = Integer.valueOf(params.getString(EXTRA_KEY_INTERVAL_METERS, \"0\"))\n+            recordingIntervalMillis = Integer.valueOf(params.getString(EXTRA_KEY_INTERVAL_MILLIS, \"0\"))\n+            isImageReturnRequired = params.getString(EXTRA_KEY_IMAGE, \"false\")!!.toBoolean()\n+            title = params.getString(EXTRA_KEY_TITLE, \"\")\n+            detail = params.getString(EXTRA_KEY_DETAIL, \"\")\n+            isManual = params.getString(EXTRA_KEY_MANUAL, \"false\")!!.toBoolean()\n+            boundaryCoords = params.getString(EXTRA_KEY_COORDINATES, \"\")\n+        }\n+    }\n+\n+    private fun freezeOrientation() {\n+        val orientation = resources.configuration.orientation\n+        requestedOrientation = if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR2) {\n+            when (orientation) {\n+                Configuration.ORIENTATION_PORTRAIT -> ActivityInfo.SCREEN_ORIENTATION_SENSOR_PORTRAIT\n+                else -> ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE\n+            }\n+        } else {\n+            when (orientation) {\n+                Configuration.ORIENTATION_PORTRAIT -> ActivityInfo.SCREEN_ORIENTATION_USER_PORTRAIT\n+                else -> ActivityInfo.SCREEN_ORIENTATION_USER_LANDSCAPE\n+            }\n+        }\n+    }\n+\n+    override fun onMapLoaded() {\n+        map.setStyle(Style.MAPBOX_STREETS) { loadedStyle ->\n+            this.loadedStyle = loadedStyle\n+            onStyleLoaded()\n+        }\n+    }\n+\n+    private fun onStyleLoaded() {\n+        mapView.isWarmGps = true\n+        drawingManager = DrawingManager(mapView, map, loadedStyle)\n+        map.addOnMapClickListener {\n+            polygon = drawingManager.currentPolygon\n+            uiController.refreshView()\n+            false\n+        }\n+        setUiFromBoundaryCoords()\n+    }\n+\n+    private fun setUiFromBoundaryCoords() {\n+        kotlin.runCatching {\n+            parseBoundaryCoords(boundaryCoords)\n+        }.onFailure {\n+            showToast(R.string.parse_coordinates_failure)\n+            setResult(Activity.RESULT_CANCELED)\n+            Logger.exception(\"Exception while loading boundary coordinates \", Exception(it))\n+            finish()\n+        }.onSuccess { latlngs ->\n+            latlngs.map { latlng -> drawingManager.drawCircle(latlng) }\n+        }\n+    }\n+\n+\n+    fun startTracking() {\n+        isRecording = true\n+        if (!isManual) {\n+            if (mapView.locationClient != null) {\n+                mapView.locationClient!!.addLocationListener(this)\n+            }\n+        } else {\n+            drawingManager.startDrawing(null)\n+        }\n+    }\n+\n+    fun stopTracking() {\n+        isRecording = false\n+        mapView.locationClient!!.removeLocationListener(this)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzNjU3Mw=="}, "originalCommit": {"oid": "dc598d9b5d07c4483394ab04254f21595ba92a4e"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyMjkzMA==", "bodyText": "Thanks for catching this. Going to make a change.", "url": "https://github.com/dimagi/commcare-android/pull/2237#discussion_r430022930", "createdAt": "2020-05-25T17:11:29Z", "author": {"login": "shubham1g5"}, "path": "app/src/org/commcare/gis/DrawingBoundaryActivity.kt", "diffHunk": "@@ -0,0 +1,239 @@\n+package org.commcare.gis\n+\n+import android.app.Activity\n+import android.content.Intent\n+import android.content.pm.ActivityInfo\n+import android.content.res.Configuration\n+import android.graphics.Bitmap\n+import android.location.Location\n+import android.location.LocationListener\n+import android.os.Build\n+import android.os.Bundle\n+import android.widget.Toast\n+import com.mapbox.geojson.Polygon\n+import com.mapbox.mapboxsdk.geometry.LatLng\n+import com.mapbox.mapboxsdk.maps.MapboxMap\n+import com.mapbox.mapboxsdk.maps.Style\n+import io.ona.kujaku.manager.DrawingManager\n+import kotlinx.android.synthetic.main.activity_entity_mapbox.*\n+import org.commcare.activities.components.FormEntryInstanceState\n+import org.commcare.android.javarosa.IntentCallout\n+import org.commcare.dalvik.R\n+import org.commcare.gis.EntityMapUtils.parseBoundaryCoords\n+import org.commcare.interfaces.CommCareActivityUIController\n+import org.commcare.interfaces.WithUIController\n+import org.commcare.utils.FileUtil\n+import org.commcare.utils.ImageType\n+import org.javarosa.core.services.Logger\n+import java.io.File\n+\n+/**\n+ * Used to draw or walk a boundary on mapbox based map\n+ */\n+class DrawingBoundaryActivity : BaseMapboxActivity(), WithUIController, LocationListener, MapboxMap.SnapshotReadyCallback {\n+\n+    companion object {\n+        // Incoming Intent Extras\n+        private const val EXTRA_KEY_ACCURACY = \"accuracy\"\n+        private const val EXTRA_KEY_IMAGE = \"image\"\n+        private const val EXTRA_KEY_INTERVAL_METERS = \"interval_meters\"\n+        private const val EXTRA_KEY_INTERVAL_MILLIS = \"interval_millis\"\n+        private const val EXTRA_KEY_TITLE = \"title\"\n+        private const val EXTRA_KEY_DETAIL = \"detail\"\n+        private const val EXTRA_KEY_MANUAL = \"manual\"\n+\n+        // Result Intent Extras\n+        private const val EXTRA_KEY_COORDINATES = \"coordinates\"\n+        private const val EXTRA_KEY_PERIMETER = \"perimeter\"\n+\n+        private const val LOCATION_MIN_MAX_ACCURACY = 50\n+        private const val LOCATION_MIN_MIN_ACCURACY = 10\n+\n+    }\n+\n+    private var mapSnapshotPath: String? = null\n+    private lateinit var loadedStyle: Style\n+    private lateinit var boundaryCoords: String\n+    private var polygon: Polygon? = null\n+    private var isManual: Boolean = false\n+    private lateinit var drawingManager: DrawingManager\n+    private var isRecording: Boolean = false\n+    private var previousLocation: Location? = null\n+    private var recordingIntervalMeters = 0\n+    private var recordingIntervalMillis = 0\n+    private var isImageReturnRequired = false\n+    private var title: String? = null\n+    private var detail: String? = null\n+    private var locationMinAccuracy = 35\n+\n+    private lateinit var uiController: DrawingBoundaryActivityUIController\n+\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        freezeOrientation()\n+        initExtras()\n+    }\n+\n+    private fun initExtras() {\n+        val params = intent.extras\n+        if (params != null) {\n+\n+            locationMinAccuracy = LOCATION_MIN_MIN_ACCURACY.coerceAtLeast(\n+                    LOCATION_MIN_MAX_ACCURACY.coerceAtMost(\n+                            Integer.valueOf(params.getString(EXTRA_KEY_ACCURACY, LOCATION_MIN_MIN_ACCURACY.toString()))))\n+\n+\n+            recordingIntervalMeters = Integer.valueOf(params.getString(EXTRA_KEY_INTERVAL_METERS, \"0\"))\n+            recordingIntervalMillis = Integer.valueOf(params.getString(EXTRA_KEY_INTERVAL_MILLIS, \"0\"))\n+            isImageReturnRequired = params.getString(EXTRA_KEY_IMAGE, \"false\")!!.toBoolean()\n+            title = params.getString(EXTRA_KEY_TITLE, \"\")\n+            detail = params.getString(EXTRA_KEY_DETAIL, \"\")\n+            isManual = params.getString(EXTRA_KEY_MANUAL, \"false\")!!.toBoolean()\n+            boundaryCoords = params.getString(EXTRA_KEY_COORDINATES, \"\")\n+        }\n+    }\n+\n+    private fun freezeOrientation() {\n+        val orientation = resources.configuration.orientation\n+        requestedOrientation = if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR2) {\n+            when (orientation) {\n+                Configuration.ORIENTATION_PORTRAIT -> ActivityInfo.SCREEN_ORIENTATION_SENSOR_PORTRAIT\n+                else -> ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE\n+            }\n+        } else {\n+            when (orientation) {\n+                Configuration.ORIENTATION_PORTRAIT -> ActivityInfo.SCREEN_ORIENTATION_USER_PORTRAIT\n+                else -> ActivityInfo.SCREEN_ORIENTATION_USER_LANDSCAPE\n+            }\n+        }\n+    }\n+\n+    override fun onMapLoaded() {\n+        map.setStyle(Style.MAPBOX_STREETS) { loadedStyle ->\n+            this.loadedStyle = loadedStyle\n+            onStyleLoaded()\n+        }\n+    }\n+\n+    private fun onStyleLoaded() {\n+        mapView.isWarmGps = true\n+        drawingManager = DrawingManager(mapView, map, loadedStyle)\n+        map.addOnMapClickListener {\n+            polygon = drawingManager.currentPolygon\n+            uiController.refreshView()\n+            false\n+        }\n+        setUiFromBoundaryCoords()\n+    }\n+\n+    private fun setUiFromBoundaryCoords() {\n+        kotlin.runCatching {\n+            parseBoundaryCoords(boundaryCoords)\n+        }.onFailure {\n+            showToast(R.string.parse_coordinates_failure)\n+            setResult(Activity.RESULT_CANCELED)\n+            Logger.exception(\"Exception while loading boundary coordinates \", Exception(it))\n+            finish()\n+        }.onSuccess { latlngs ->\n+            latlngs.map { latlng -> drawingManager.drawCircle(latlng) }\n+        }\n+    }\n+\n+\n+    fun startTracking() {\n+        isRecording = true\n+        if (!isManual) {\n+            if (mapView.locationClient != null) {\n+                mapView.locationClient!!.addLocationListener(this)\n+            }\n+        } else {\n+            drawingManager.startDrawing(null)\n+        }\n+    }\n+\n+    fun stopTracking() {\n+        isRecording = false\n+        mapView.locationClient!!.removeLocationListener(this)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzNjU3Mw=="}, "originalCommit": {"oid": "dc598d9b5d07c4483394ab04254f21595ba92a4e"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODc5MTgwOnYy", "diffSide": "RIGHT", "path": "app/res/values/colors.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMDo1OToyNlrOGaJlPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODowMDoyN1rOGaS70Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA3MzE1MQ==", "bodyText": "Does this mean we'll get the ability to restyle the Kujaku views on our side? That would be cool", "url": "https://github.com/dimagi/commcare-android/pull/2237#discussion_r430073151", "createdAt": "2020-05-25T20:59:26Z", "author": {"login": "ctsims"}, "path": "app/res/values/colors.xml", "diffHunk": "@@ -130,4 +130,22 @@\n     <color name=\"cc_error_bg_color\">#EE5555</color>\n     <color name=\"cc_error_text_color\">#FFFFFF</color>\n     <color name=\"map_layer_button_color\">#D3D3D3</color>\n+\n+    <!--    Map  Buttons-->\n+    <color name=\"gray_300\">#E0E0E0</color>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbf9a7e469587fc551901115618b1ca309e6b1a9"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIyNjM4NQ==", "bodyText": "ahh no, I forgot to clean up these colors from the Area mapper port. removed the unused ones.", "url": "https://github.com/dimagi/commcare-android/pull/2237#discussion_r430226385", "createdAt": "2020-05-26T08:00:27Z", "author": {"login": "shubham1g5"}, "path": "app/res/values/colors.xml", "diffHunk": "@@ -130,4 +130,22 @@\n     <color name=\"cc_error_bg_color\">#EE5555</color>\n     <color name=\"cc_error_text_color\">#FFFFFF</color>\n     <color name=\"map_layer_button_color\">#D3D3D3</color>\n+\n+    <!--    Map  Buttons-->\n+    <color name=\"gray_300\">#E0E0E0</color>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA3MzE1MQ=="}, "originalCommit": {"oid": "cbf9a7e469587fc551901115618b1ca309e6b1a9"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODc5NDgxOnYy", "diffSide": "RIGHT", "path": "app/src/org/commcare/gis/DrawingBoundaryActivityUIController.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMTowMTozNFrOGaJm5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzo1OToyNVrOGaS5gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA3MzU3NQ==", "bodyText": "It's awesome that decorators still work the same way across the kotlin files", "url": "https://github.com/dimagi/commcare-android/pull/2237#discussion_r430073575", "createdAt": "2020-05-25T21:01:34Z", "author": {"login": "ctsims"}, "path": "app/src/org/commcare/gis/DrawingBoundaryActivityUIController.kt", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.commcare.gis\n+\n+import android.view.View\n+import android.widget.Button\n+import android.widget.TextView\n+import org.commcare.dalvik.R\n+import org.commcare.interfaces.CommCareActivityUIController\n+import org.commcare.utils.StringUtils\n+import org.commcare.views.ManagedUi\n+import org.commcare.views.UiElement\n+import org.javarosa.core.services.locale.Localization\n+\n+@ManagedUi(R.layout.activity_drawing_boundary)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbf9a7e469587fc551901115618b1ca309e6b1a9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIyNTc5NQ==", "bodyText": "yes! I was very skeptical that this would work before trying it out.", "url": "https://github.com/dimagi/commcare-android/pull/2237#discussion_r430225795", "createdAt": "2020-05-26T07:59:25Z", "author": {"login": "shubham1g5"}, "path": "app/src/org/commcare/gis/DrawingBoundaryActivityUIController.kt", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.commcare.gis\n+\n+import android.view.View\n+import android.widget.Button\n+import android.widget.TextView\n+import org.commcare.dalvik.R\n+import org.commcare.interfaces.CommCareActivityUIController\n+import org.commcare.utils.StringUtils\n+import org.commcare.views.ManagedUi\n+import org.commcare.views.UiElement\n+import org.javarosa.core.services.locale.Localization\n+\n+@ManagedUi(R.layout.activity_drawing_boundary)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA3MzU3NQ=="}, "originalCommit": {"oid": "cbf9a7e469587fc551901115618b1ca309e6b1a9"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3256, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}