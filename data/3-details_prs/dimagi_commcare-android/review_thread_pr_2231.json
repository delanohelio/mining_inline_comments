{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyODU4MDc2", "number": 2231, "reviewThreads": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxOToxMToxM1rOD9MNLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMTowMDozOVrOEM2J4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDg5NzA4OnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/tests/SavedFormTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxOToxMToxM1rOGWi7tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxOToxMToxM1rOGWi7tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI5NDE5Ng==", "bodyText": "can we offline install this from ccz in order to have faster test runtime ?", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r426294196", "createdAt": "2020-05-17T19:11:13Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/SavedFormTest.java", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.commcare.tests;\n+\n+import android.Manifest;\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+import android.net.Uri;\n+import android.provider.MediaStore;\n+import androidx.test.espresso.action.ViewActions;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import androidx.test.rule.ActivityTestRule;\n+import androidx.test.rule.GrantPermissionRule;\n+import androidx.test.runner.intent.IntentCallback;\n+import androidx.test.runner.intent.IntentMonitorRegistry;\n+import org.commcare.CommCareApplication;\n+import org.commcare.activities.DispatchActivity;\n+import org.commcare.activities.FormEntryActivity;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.Utility;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.io.OutputStream;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.endsWith;\n+import static org.hamcrest.Matchers.not;\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class SavedFormTest {\n+\n+    @Rule\n+    public ActivityTestRule<DispatchActivity> activityTestRule = new ActivityTestRule<>(DispatchActivity.class);\n+\n+    @Rule\n+    public IntentsTestRule<FormEntryActivity> intentsRule = new IntentsTestRule<>(FormEntryActivity.class);\n+\n+    @Rule\n+    public GrantPermissionRule permissionRule = GrantPermissionRule.grant(\n+            Manifest.permission.READ_PHONE_STATE,\n+            Manifest.permission.CALL_PHONE,\n+            Manifest.permission.ACCESS_FINE_LOCATION,\n+            Manifest.permission.ACCESS_COARSE_LOCATION,\n+            Manifest.permission.WRITE_EXTERNAL_STORAGE,\n+            Manifest.permission.READ_EXTERNAL_STORAGE,\n+            Manifest.permission.RECORD_AUDIO,\n+            Manifest.permission.CAMERA\n+    );\n+\n+    private IntentCallback intentCallback = intent -> {\n+        if (MediaStore.ACTION_IMAGE_CAPTURE.equals(intent.getAction())) {\n+            Uri uri = intent.getExtras().getParcelable(MediaStore.EXTRA_OUTPUT);\n+            Context context = InstrumentationRegistry.getInstrumentation().getTargetContext();\n+            Bitmap icon = BitmapFactory.decodeResource(\n+                    context.getResources(),\n+                    R.mipmap.ic_launcher);\n+            try (OutputStream outputStream = context.getContentResolver().openOutputStream(uri)) {\n+                icon.compress(Bitmap.CompressFormat.JPEG, 100, outputStream);\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    };\n+\n+    private void stubCamera() {\n+        // Build a result to return from the Camera app\n+        Intent resultData = new Intent();\n+        Instrumentation.ActivityResult result = new Instrumentation.ActivityResult(Activity.RESULT_OK, resultData);\n+\n+        // Stub out the Camera. When an intent is sent to the Camera, this tells Espresso to respond\n+        // with the ActivityResult we just created\n+        intending(hasAction(MediaStore.ACTION_IMAGE_CAPTURE)).respondWith(result);\n+    }\n+\n+    @Before\n+    public void login() {\n+        if (CommCareApplication.instance().getCurrentApp() == null) {\n+            Utility.installApp(\"2zI4jeQ\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0c9254e1274ac14bb4c47ae763e73a6db6ba24b"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDkwMDMzOnYy", "diffSide": "RIGHT", "path": "app/src/org/commcare/tasks/SaveToDiskTask.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxOToxNTo0NFrOGWi9Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODowNDozM1rOGXCE9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI5NDYyMw==", "bodyText": "Is there a reason these changes are needed ?", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r426294623", "createdAt": "2020-05-17T19:15:44Z", "author": {"login": "shubham1g5"}, "path": "app/src/org/commcare/tasks/SaveToDiskTask.java", "diffHunk": "@@ -289,25 +290,21 @@ public void setFormSavedListener(FormSavedListener fsl) {\n      * though, until all answers conform to their constraints/requirements.\n      */\n     private boolean hasInvalidAnswers(boolean markCompleted) {\n-        FormIndex i = FormEntryActivity.mFormController.getFormIndex();\n-        FormEntryActivity.mFormController.jumpToIndex(FormIndex.createBeginningOfFormIndex());\n-\n+        FormController formController = FormEntryActivity.mFormController;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0c9254e1274ac14bb4c47ae763e73a6db6ba24b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4OTE1OA==", "bodyText": "Yeah, so the earlier code used to modify the currentFormIndex to loop over all the questions. But if at the same time, some other thread also wants to get hold of the current question in screen, it'll have to use the currentFormIndex which might give wrong value, if this thread has already modified it. And hence may produce NPE in worst cases.\nSince, we've to loop over all the questions here, we don't really need to modify the currentFormIndex rather we can simply have another form index to get all the questions. And this will also make sure that the other threads who might be using the currentFormIndex at the same time don't get wrong values.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r426389158", "createdAt": "2020-05-18T06:13:09Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/src/org/commcare/tasks/SaveToDiskTask.java", "diffHunk": "@@ -289,25 +290,21 @@ public void setFormSavedListener(FormSavedListener fsl) {\n      * though, until all answers conform to their constraints/requirements.\n      */\n     private boolean hasInvalidAnswers(boolean markCompleted) {\n-        FormIndex i = FormEntryActivity.mFormController.getFormIndex();\n-        FormEntryActivity.mFormController.jumpToIndex(FormIndex.createBeginningOfFormIndex());\n-\n+        FormController formController = FormEntryActivity.mFormController;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI5NDYyMw=="}, "originalCommit": {"oid": "a0c9254e1274ac14bb4c47ae763e73a6db6ba24b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgwNDQ2OQ==", "bodyText": "Got it, thanks for the explanation. Only suggestion here would be to abstract this out into it's own PR so that it's easy to revert in case of any unseen edge cases.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r426804469", "createdAt": "2020-05-18T18:04:33Z", "author": {"login": "shubham1g5"}, "path": "app/src/org/commcare/tasks/SaveToDiskTask.java", "diffHunk": "@@ -289,25 +290,21 @@ public void setFormSavedListener(FormSavedListener fsl) {\n      * though, until all answers conform to their constraints/requirements.\n      */\n     private boolean hasInvalidAnswers(boolean markCompleted) {\n-        FormIndex i = FormEntryActivity.mFormController.getFormIndex();\n-        FormEntryActivity.mFormController.jumpToIndex(FormIndex.createBeginningOfFormIndex());\n-\n+        FormController formController = FormEntryActivity.mFormController;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI5NDYyMw=="}, "originalCommit": {"oid": "a0c9254e1274ac14bb4c47ae763e73a6db6ba24b"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDkwMTI3OnYy", "diffSide": "RIGHT", "path": "app/src/org/commcare/activities/FormEntryActivity.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxOToxNzoyN1rOGWi94Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzozOTozNFrOGtMJVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI5NDc1Mw==", "bodyText": "What scenarios lead to instanceState being null ?", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r426294753", "createdAt": "2020-05-17T19:17:27Z", "author": {"login": "shubham1g5"}, "path": "app/src/org/commcare/activities/FormEntryActivity.java", "diffHunk": "@@ -257,8 +257,9 @@ public void onReceive(Context context, Intent intent) {\n     @Override\n     protected void onSaveInstanceState(Bundle outState) {\n         super.onSaveInstanceState(outState);\n-        instanceState.saveState(outState);\n-\n+        if (instanceState != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0c9254e1274ac14bb4c47ae763e73a6db6ba24b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4NjgwMA==", "bodyText": "I honestly have no idea why it would ever be null here. I thought that this might be a result of using IntentTestRule here since the crash started happening after adding that only and it's needed to stub intents.\nBut then I also saw some crashes related to this in crashlytics as well.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r426386800", "createdAt": "2020-05-18T06:05:33Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/src/org/commcare/activities/FormEntryActivity.java", "diffHunk": "@@ -257,8 +257,9 @@ public void onReceive(Context context, Intent intent) {\n     @Override\n     protected void onSaveInstanceState(Bundle outState) {\n         super.onSaveInstanceState(outState);\n-        instanceState.saveState(outState);\n-\n+        if (instanceState != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI5NDc1Mw=="}, "originalCommit": {"oid": "a0c9254e1274ac14bb4c47ae763e73a6db6ba24b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3NDU2Mg==", "bodyText": "Would be good to investigate this if you are encountering it in your test,  since doing this null check will only result in supressing errors we should not and can result in user believing everything is alright when it is not.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r426774562", "createdAt": "2020-05-18T17:09:14Z", "author": {"login": "shubham1g5"}, "path": "app/src/org/commcare/activities/FormEntryActivity.java", "diffHunk": "@@ -257,8 +257,9 @@ public void onReceive(Context context, Intent intent) {\n     @Override\n     protected void onSaveInstanceState(Bundle outState) {\n         super.onSaveInstanceState(outState);\n-        instanceState.saveState(outState);\n-\n+        if (instanceState != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI5NDc1Mw=="}, "originalCommit": {"oid": "a0c9254e1274ac14bb4c47ae763e73a6db6ba24b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzODEwMQ==", "bodyText": "will remove this change from the PR before merging.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450038101", "createdAt": "2020-07-06T07:39:34Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/src/org/commcare/activities/FormEntryActivity.java", "diffHunk": "@@ -257,8 +257,9 @@ public void onReceive(Context context, Intent intent) {\n     @Override\n     protected void onSaveInstanceState(Bundle outState) {\n         super.onSaveInstanceState(outState);\n-        instanceState.saveState(outState);\n-\n+        if (instanceState != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI5NDc1Mw=="}, "originalCommit": {"oid": "a0c9254e1274ac14bb4c47ae763e73a6db6ba24b"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzEyMjI0OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNTo1Mjo0NFrOGr-VJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDo1MDoyNFrOGt5MdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc2MzE3Mw==", "bodyText": "This step will likely cause obstacles in automating any instrumenation tests work. If possible, We should try to be independent of any manual device configuration in tests and use overide any animating views in test classes for tests to run smoothly.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448763173", "createdAt": "2020-07-02T05:52:44Z", "author": {"login": "shubham1g5"}, "path": "README.md", "diffHunk": "@@ -92,6 +92,51 @@ Create a new Android Studio JUnit Build configuration using the following steps.\n - Select the \"commcare android test suite\" under the configuration drop down to the left of the green play button.\n - Press the green play button to run the tests.\n \n+## Instrumentation Tests\n+\n+The commcare-android repository uses [Espresso](https://developer.android.com/training/testing/espresso/) to write UI tests.\n+You need to have two keys in your `gradle.properties` before being able to run any instrumentation tests. **But make sure you never commit these keys to github.**\n+```\n+HQ_API_USERNAME=<ASK_ANOTHER_DEV_FOR_KEY>\n+HQ_API_PASSWORD=<ASK_ANOTHER_DEV_FOR_KEY>\n+```\n+\n+### Run instrumentation-tests from the command-line\n+\n+```bash\n+cd commcare-android\n+./gradlew connectedCommcareDebugAndroidTest\n+```\n+\n+It's also a common requirement to run a particular test, such as when you\u2019re fixing a bug or developing a new test. You can achieve the same in command-line using: \n+\n+```bash\n+./gradlew connectedCommcareDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=<FULLY_QUALIFIED_NAME_OF_YOUR_TEST>\n+```\n+\n+You can view the results from the output file generated.\n+\n+### Run instrumentation-tests from Android Studio\n+\n+Before running tests from Android-Studio make sure you've disabled animations in your device. Note, this is only required when you're running tests from Android Studio ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0NDQyNQ==", "bodyText": "bumping this for your thoughts on this.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450644425", "createdAt": "2020-07-07T06:46:23Z", "author": {"login": "shubham1g5"}, "path": "README.md", "diffHunk": "@@ -92,6 +92,51 @@ Create a new Android Studio JUnit Build configuration using the following steps.\n - Select the \"commcare android test suite\" under the configuration drop down to the left of the green play button.\n - Press the green play button to run the tests.\n \n+## Instrumentation Tests\n+\n+The commcare-android repository uses [Espresso](https://developer.android.com/training/testing/espresso/) to write UI tests.\n+You need to have two keys in your `gradle.properties` before being able to run any instrumentation tests. **But make sure you never commit these keys to github.**\n+```\n+HQ_API_USERNAME=<ASK_ANOTHER_DEV_FOR_KEY>\n+HQ_API_PASSWORD=<ASK_ANOTHER_DEV_FOR_KEY>\n+```\n+\n+### Run instrumentation-tests from the command-line\n+\n+```bash\n+cd commcare-android\n+./gradlew connectedCommcareDebugAndroidTest\n+```\n+\n+It's also a common requirement to run a particular test, such as when you\u2019re fixing a bug or developing a new test. You can achieve the same in command-line using: \n+\n+```bash\n+./gradlew connectedCommcareDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=<FULLY_QUALIFIED_NAME_OF_YOUR_TEST>\n+```\n+\n+You can view the results from the output file generated.\n+\n+### Run instrumentation-tests from Android Studio\n+\n+Before running tests from Android-Studio make sure you've disabled animations in your device. Note, this is only required when you're running tests from Android Studio ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc2MzE3Mw=="}, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY4MDg3NQ==", "bodyText": "Actually this is recommended from espresso docs, I'm already using animationDisabled gradle option for this but that doesn't work when you run tests using android studio.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450680875", "createdAt": "2020-07-07T08:02:16Z", "author": {"login": "ShivamPokhriyal"}, "path": "README.md", "diffHunk": "@@ -92,6 +92,51 @@ Create a new Android Studio JUnit Build configuration using the following steps.\n - Select the \"commcare android test suite\" under the configuration drop down to the left of the green play button.\n - Press the green play button to run the tests.\n \n+## Instrumentation Tests\n+\n+The commcare-android repository uses [Espresso](https://developer.android.com/training/testing/espresso/) to write UI tests.\n+You need to have two keys in your `gradle.properties` before being able to run any instrumentation tests. **But make sure you never commit these keys to github.**\n+```\n+HQ_API_USERNAME=<ASK_ANOTHER_DEV_FOR_KEY>\n+HQ_API_PASSWORD=<ASK_ANOTHER_DEV_FOR_KEY>\n+```\n+\n+### Run instrumentation-tests from the command-line\n+\n+```bash\n+cd commcare-android\n+./gradlew connectedCommcareDebugAndroidTest\n+```\n+\n+It's also a common requirement to run a particular test, such as when you\u2019re fixing a bug or developing a new test. You can achieve the same in command-line using: \n+\n+```bash\n+./gradlew connectedCommcareDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=<FULLY_QUALIFIED_NAME_OF_YOUR_TEST>\n+```\n+\n+You can view the results from the output file generated.\n+\n+### Run instrumentation-tests from Android Studio\n+\n+Before running tests from Android-Studio make sure you've disabled animations in your device. Note, this is only required when you're running tests from Android Studio ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc2MzE3Mw=="}, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc1OTY5NA==", "bodyText": "I see, and browserstack have these turn off by default ?", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450759694", "createdAt": "2020-07-07T10:17:43Z", "author": {"login": "shubham1g5"}, "path": "README.md", "diffHunk": "@@ -92,6 +92,51 @@ Create a new Android Studio JUnit Build configuration using the following steps.\n - Select the \"commcare android test suite\" under the configuration drop down to the left of the green play button.\n - Press the green play button to run the tests.\n \n+## Instrumentation Tests\n+\n+The commcare-android repository uses [Espresso](https://developer.android.com/training/testing/espresso/) to write UI tests.\n+You need to have two keys in your `gradle.properties` before being able to run any instrumentation tests. **But make sure you never commit these keys to github.**\n+```\n+HQ_API_USERNAME=<ASK_ANOTHER_DEV_FOR_KEY>\n+HQ_API_PASSWORD=<ASK_ANOTHER_DEV_FOR_KEY>\n+```\n+\n+### Run instrumentation-tests from the command-line\n+\n+```bash\n+cd commcare-android\n+./gradlew connectedCommcareDebugAndroidTest\n+```\n+\n+It's also a common requirement to run a particular test, such as when you\u2019re fixing a bug or developing a new test. You can achieve the same in command-line using: \n+\n+```bash\n+./gradlew connectedCommcareDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=<FULLY_QUALIFIED_NAME_OF_YOUR_TEST>\n+```\n+\n+You can view the results from the output file generated.\n+\n+### Run instrumentation-tests from Android Studio\n+\n+Before running tests from Android-Studio make sure you've disabled animations in your device. Note, this is only required when you're running tests from Android Studio ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc2MzE3Mw=="}, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc3NjE4MQ==", "bodyText": "No, the animationDisabled option that i used in the build.gradle file does the trick there I guess.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450776181", "createdAt": "2020-07-07T10:50:24Z", "author": {"login": "ShivamPokhriyal"}, "path": "README.md", "diffHunk": "@@ -92,6 +92,51 @@ Create a new Android Studio JUnit Build configuration using the following steps.\n - Select the \"commcare android test suite\" under the configuration drop down to the left of the green play button.\n - Press the green play button to run the tests.\n \n+## Instrumentation Tests\n+\n+The commcare-android repository uses [Espresso](https://developer.android.com/training/testing/espresso/) to write UI tests.\n+You need to have two keys in your `gradle.properties` before being able to run any instrumentation tests. **But make sure you never commit these keys to github.**\n+```\n+HQ_API_USERNAME=<ASK_ANOTHER_DEV_FOR_KEY>\n+HQ_API_PASSWORD=<ASK_ANOTHER_DEV_FOR_KEY>\n+```\n+\n+### Run instrumentation-tests from the command-line\n+\n+```bash\n+cd commcare-android\n+./gradlew connectedCommcareDebugAndroidTest\n+```\n+\n+It's also a common requirement to run a particular test, such as when you\u2019re fixing a bug or developing a new test. You can achieve the same in command-line using: \n+\n+```bash\n+./gradlew connectedCommcareDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=<FULLY_QUALIFIED_NAME_OF_YOUR_TEST>\n+```\n+\n+You can view the results from the output file generated.\n+\n+### Run instrumentation-tests from Android Studio\n+\n+Before running tests from Android-Studio make sure you've disabled animations in your device. Note, this is only required when you're running tests from Android Studio ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc2MzE3Mw=="}, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzEyOTY3OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNTo1NjoxNlrOGr-Zcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNTo1NjoxNlrOGr-Zcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc2NDI3NA==", "bodyText": "Thanks for adding this info, super helpful to set these up locally.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448764274", "createdAt": "2020-07-02T05:56:16Z", "author": {"login": "shubham1g5"}, "path": "README.md", "diffHunk": "@@ -92,6 +92,51 @@ Create a new Android Studio JUnit Build configuration using the following steps.\n - Select the \"commcare android test suite\" under the configuration drop down to the left of the green play button.\n - Press the green play button to run the tests.\n \n+## Instrumentation Tests\n+\n+The commcare-android repository uses [Espresso](https://developer.android.com/training/testing/espresso/) to write UI tests.\n+You need to have two keys in your `gradle.properties` before being able to run any instrumentation tests. **But make sure you never commit these keys to github.**\n+```\n+HQ_API_USERNAME=<ASK_ANOTHER_DEV_FOR_KEY>\n+HQ_API_PASSWORD=<ASK_ANOTHER_DEV_FOR_KEY>\n+```\n+\n+### Run instrumentation-tests from the command-line\n+\n+```bash\n+cd commcare-android\n+./gradlew connectedCommcareDebugAndroidTest\n+```\n+\n+It's also a common requirement to run a particular test, such as when you\u2019re fixing a bug or developing a new test. You can achieve the same in command-line using: \n+\n+```bash\n+./gradlew connectedCommcareDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=<FULLY_QUALIFIED_NAME_OF_YOUR_TEST>\n+```\n+\n+You can view the results from the output file generated.\n+\n+### Run instrumentation-tests from Android Studio\n+\n+Before running tests from Android-Studio make sure you've disabled animations in your device. Note, this is only required when you're running tests from Android Studio \n+```\n+Go to Setting -> Developer Options, and under the Drawing section, switch all of the following options:\n+\n+Window animation scale -> off\n+Transition animation scale -> off\n+Animator duration scale -> off\n+```\n+\n+Create a new Android Studio _Android Instrumented Test_ Build configuration using the following steps.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzQ3ODA4OnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/tests/AsyncRestoreTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNzo1OTo1MVrOGsBvAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNzo1OTo1MVrOGsBvAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgxODk0Ng==", "bodyText": "should use upper case for constants - CCZ_NAME", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448818946", "createdAt": "2020-07-02T07:59:51Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/AsyncRestoreTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.commcare.tests;\n+\n+import android.content.Intent;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.AsyncRestoreHelperMock;\n+import org.commcare.tasks.DataPullTask;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class AsyncRestoreTest extends BaseTest {\n+\n+    private final String cczName = \"integration_test_app.ccz\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzkzNTM0OnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/AsyncRestoreHelperMock.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDowNToyNlrOGsGRmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDoxOTozNVrOGt4P3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5MzMzOA==", "bodyText": "Wondering if you can mock it using Mockito instead, for eg. mockito provides APIs to check for whether a particular method was called on the mocked object, so that will remove need of methods like isRetryCalled and be much cleaner in injecting the mocks themselves into the code. Proposing this for you to explore it and full disclaimer that I am not too familiar with mockito myself so this might turn out to be a bad lead.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448893338", "createdAt": "2020-07-02T10:05:26Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/AsyncRestoreHelperMock.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package org.commcare;\n+\n+import org.commcare.network.RemoteDataPullResponse;\n+import org.commcare.tasks.AsyncRestoreHelper;\n+import org.commcare.tasks.DataPullTask;\n+import org.commcare.tasks.ResultAndError;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+public class AsyncRestoreHelperMock extends AsyncRestoreHelper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM2NzA4OA==", "bodyText": "I think the reason why I couldn't use mockito is because I have no way to inject the mock here", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r449367088", "createdAt": "2020-07-03T04:16:06Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/instrumentation-tests/src/org/commcare/AsyncRestoreHelperMock.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package org.commcare;\n+\n+import org.commcare.network.RemoteDataPullResponse;\n+import org.commcare.tasks.AsyncRestoreHelper;\n+import org.commcare.tasks.DataPullTask;\n+import org.commcare.tasks.ResultAndError;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+public class AsyncRestoreHelperMock extends AsyncRestoreHelper {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5MzMzOA=="}, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA4MjM1Mg==", "bodyText": "is there a way we can mock the DataPullTask itself instead of AsyncRestoreHelper to check for this behaviour ? AsyncRestoreHelper is in an internal api to DataPullTask and should ideally be treated as a black box.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450082352", "createdAt": "2020-07-06T09:00:31Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/AsyncRestoreHelperMock.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package org.commcare;\n+\n+import org.commcare.network.RemoteDataPullResponse;\n+import org.commcare.tasks.AsyncRestoreHelper;\n+import org.commcare.tasks.DataPullTask;\n+import org.commcare.tasks.ResultAndError;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+public class AsyncRestoreHelperMock extends AsyncRestoreHelper {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5MzMzOA=="}, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1OTkzMg==", "bodyText": "Ohh, so it'll be like: I mock DataPulLtask and then override its constructor to use AsyncRestoreHelperMock. And then perhaps maybe I'll have to mock FormAndDataSyncer as well and override it's method to use DataPullTaskMock? Or maybe I'm wrong here?", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450159932", "createdAt": "2020-07-06T11:33:20Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/instrumentation-tests/src/org/commcare/AsyncRestoreHelperMock.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package org.commcare;\n+\n+import org.commcare.network.RemoteDataPullResponse;\n+import org.commcare.tasks.AsyncRestoreHelper;\n+import org.commcare.tasks.DataPullTask;\n+import org.commcare.tasks.ResultAndError;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+public class AsyncRestoreHelperMock extends AsyncRestoreHelper {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5MzMzOA=="}, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0NDA4Mw==", "bodyText": "Yeah you can make 2 changes -\n\nChange FormAndDataSyncer to utilize a DataPullTaskFactory and then override that factory class in the tests to return you the mocked class.\nHave a setter for asyncRestoreHelper in DataPullTask to set the mocked asyncRestoreHelper", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450644083", "createdAt": "2020-07-07T06:45:34Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/AsyncRestoreHelperMock.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package org.commcare;\n+\n+import org.commcare.network.RemoteDataPullResponse;\n+import org.commcare.tasks.AsyncRestoreHelper;\n+import org.commcare.tasks.DataPullTask;\n+import org.commcare.tasks.ResultAndError;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+public class AsyncRestoreHelperMock extends AsyncRestoreHelper {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5MzMzOA=="}, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc2MDY3MA==", "bodyText": "Also realized you can also just introduce a factory for asyncRestoreHelper and override that in tests as well, Basically I am trying to avoid having any test specific functions in non-test code.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450760670", "createdAt": "2020-07-07T10:19:35Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/AsyncRestoreHelperMock.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package org.commcare;\n+\n+import org.commcare.network.RemoteDataPullResponse;\n+import org.commcare.tasks.AsyncRestoreHelper;\n+import org.commcare.tasks.DataPullTask;\n+import org.commcare.tasks.ResultAndError;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+public class AsyncRestoreHelperMock extends AsyncRestoreHelper {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5MzMzOA=="}, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Nzk0OTY2OnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/tests/AsyncRestoreTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDowOTo1MVrOGsGasw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDowOTo1MVrOGsGasw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5NTY2Nw==", "bodyText": "can be abstracted into a function.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448895667", "createdAt": "2020-07-02T10:09:51Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/AsyncRestoreTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.commcare.tests;\n+\n+import android.content.Intent;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.AsyncRestoreHelperMock;\n+import org.commcare.tasks.DataPullTask;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class AsyncRestoreTest extends BaseTest {\n+\n+    private final String cczName = \"integration_test_app.ccz\";\n+    private final String appName = \"Integration Tests\";\n+\n+    @Test\n+    public void testRestoreOnLogin() {\n+        String userId = \"13a0910ea963acbf9f4b59dcc9a0f9aa\";\n+        String groupId = \"78185f2132bd8ba3af30b488f9974b41\";\n+        AsyncRestoreHelperMock.clear();\n+\n+        // Make sure user is present in the group.\n+        HQApi.addUserInGroup(userId, groupId);\n+\n+        // Install the app.\n+        installApp(appName, cczName);\n+\n+        // Clear cache", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODAyODgwOnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/tests/BaseTest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDozNDowNlrOGsHLpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMToyODoyN1rOGtTc3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwODE5Ng==", "bodyText": "is there a reason that it's defined here instead of the individual test classes ? It feels like the intending activity will be different for different test cases.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448908196", "createdAt": "2020-07-02T10:34:06Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/BaseTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.commcare.tests;\n+\n+import android.Manifest;\n+\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import androidx.test.rule.ActivityTestRule;\n+import androidx.test.rule.GrantPermissionRule;\n+import org.commcare.CommCareApplication;\n+import org.commcare.activities.DispatchActivity;\n+import org.commcare.activities.FormEntryActivity;\n+import org.commcare.utils.Utility;\n+import org.junit.Rule;\n+import org.junit.runner.RunWith;\n+\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public abstract class BaseTest {\n+\n+    @Rule\n+    public ActivityTestRule<DispatchActivity> activityTestRule = new ActivityTestRule<>(DispatchActivity.class);\n+\n+    @Rule\n+    public IntentsTestRule<FormEntryActivity> intentsRule = new IntentsTestRule<>(FormEntryActivity.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4Mjk4MQ==", "bodyText": "Yeah I thought that most of our intents are from the FormEntryActivity only so decided to put it here. But yeah makes sense to avoid having it in a superclass when not all subclasses need it.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448982981", "createdAt": "2020-07-02T12:59:49Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/instrumentation-tests/src/org/commcare/tests/BaseTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.commcare.tests;\n+\n+import android.Manifest;\n+\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import androidx.test.rule.ActivityTestRule;\n+import androidx.test.rule.GrantPermissionRule;\n+import org.commcare.CommCareApplication;\n+import org.commcare.activities.DispatchActivity;\n+import org.commcare.activities.FormEntryActivity;\n+import org.commcare.utils.Utility;\n+import org.junit.Rule;\n+import org.junit.runner.RunWith;\n+\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public abstract class BaseTest {\n+\n+    @Rule\n+    public ActivityTestRule<DispatchActivity> activityTestRule = new ActivityTestRule<>(DispatchActivity.class);\n+\n+    @Rule\n+    public IntentsTestRule<FormEntryActivity> intentsRule = new IntentsTestRule<>(FormEntryActivity.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwODE5Ng=="}, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzOTc2Mw==", "bodyText": "Now when I was updating it, I got to know that we need atleast 1 IntentsTestRule to be able to install the app offline. So keeping it here.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450039763", "createdAt": "2020-07-06T07:42:45Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/instrumentation-tests/src/org/commcare/tests/BaseTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.commcare.tests;\n+\n+import android.Manifest;\n+\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import androidx.test.rule.ActivityTestRule;\n+import androidx.test.rule.GrantPermissionRule;\n+import org.commcare.CommCareApplication;\n+import org.commcare.activities.DispatchActivity;\n+import org.commcare.activities.FormEntryActivity;\n+import org.commcare.utils.Utility;\n+import org.junit.Rule;\n+import org.junit.runner.RunWith;\n+\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public abstract class BaseTest {\n+\n+    @Rule\n+    public ActivityTestRule<DispatchActivity> activityTestRule = new ActivityTestRule<>(DispatchActivity.class);\n+\n+    @Rule\n+    public IntentsTestRule<FormEntryActivity> intentsRule = new IntentsTestRule<>(FormEntryActivity.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwODE5Ng=="}, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA4MTMyNw==", "bodyText": "How is a intent test rule with FormEntryActivity related to offline ccz install ?", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450081327", "createdAt": "2020-07-06T08:58:54Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/BaseTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.commcare.tests;\n+\n+import android.Manifest;\n+\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import androidx.test.rule.ActivityTestRule;\n+import androidx.test.rule.GrantPermissionRule;\n+import org.commcare.CommCareApplication;\n+import org.commcare.activities.DispatchActivity;\n+import org.commcare.activities.FormEntryActivity;\n+import org.commcare.utils.Utility;\n+import org.junit.Rule;\n+import org.junit.runner.RunWith;\n+\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public abstract class BaseTest {\n+\n+    @Rule\n+    public ActivityTestRule<DispatchActivity> activityTestRule = new ActivityTestRule<>(DispatchActivity.class);\n+\n+    @Rule\n+    public IntentsTestRule<FormEntryActivity> intentsRule = new IntentsTestRule<>(FormEntryActivity.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwODE5Ng=="}, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1Nzc4OA==", "bodyText": "Ahh, I see it now. Actually we only need IntentTestRule with any activity, so will update the code. I used ActivityTestRule while starting to write tests and missed its usage.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450157788", "createdAt": "2020-07-06T11:28:27Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/instrumentation-tests/src/org/commcare/tests/BaseTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.commcare.tests;\n+\n+import android.Manifest;\n+\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import androidx.test.rule.ActivityTestRule;\n+import androidx.test.rule.GrantPermissionRule;\n+import org.commcare.CommCareApplication;\n+import org.commcare.activities.DispatchActivity;\n+import org.commcare.activities.FormEntryActivity;\n+import org.commcare.utils.Utility;\n+import org.junit.Rule;\n+import org.junit.runner.RunWith;\n+\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public abstract class BaseTest {\n+\n+    @Rule\n+    public ActivityTestRule<DispatchActivity> activityTestRule = new ActivityTestRule<>(DispatchActivity.class);\n+\n+    @Rule\n+    public IntentsTestRule<FormEntryActivity> intentsRule = new IntentsTestRule<>(FormEntryActivity.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwODE5Ng=="}, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODAzNDA5OnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDozNTozOFrOGsHOyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDozNTozOFrOGsHOyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwOTAwMg==", "bodyText": "caps for constant.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448909002", "createdAt": "2020-07-02T10:35:38Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.commcare.tests;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.endsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class CaseClaimTest extends BaseTest {\n+\n+    private final String cczName = \"case_claim.ccz\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODAzNzc0OnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/tests/AsyncRestoreTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDozNjo0OVrOGsHRJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDozNjo0OVrOGsHRJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwOTYwNw==", "bodyText": "can be abstracted into setup", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448909607", "createdAt": "2020-07-02T10:36:49Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/AsyncRestoreTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.commcare.tests;\n+\n+import android.content.Intent;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.AsyncRestoreHelperMock;\n+import org.commcare.tasks.DataPullTask;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class AsyncRestoreTest extends BaseTest {\n+\n+    private final String cczName = \"integration_test_app.ccz\";\n+    private final String appName = \"Integration Tests\";\n+\n+    @Test\n+    public void testRestoreOnLogin() {\n+        String userId = \"13a0910ea963acbf9f4b59dcc9a0f9aa\";\n+        String groupId = \"78185f2132bd8ba3af30b488f9974b41\";\n+        AsyncRestoreHelperMock.clear();\n+\n+        // Make sure user is present in the group.\n+        HQApi.addUserInGroup(userId, groupId);\n+\n+        // Install the app.\n+        installApp(appName, cczName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODA1NzAwOnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/tests/BaseTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDo0Mjo1NlrOGsHc9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjo1ODo0OFrOGsLtOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkxMjYyOA==", "bodyText": "do you remain on installation screen after install ? you might wanna check how it's handled in calabash tests today.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448912628", "createdAt": "2020-07-02T10:42:56Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/BaseTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.commcare.tests;\n+\n+import android.Manifest;\n+\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import androidx.test.rule.ActivityTestRule;\n+import androidx.test.rule.GrantPermissionRule;\n+import org.commcare.CommCareApplication;\n+import org.commcare.activities.DispatchActivity;\n+import org.commcare.activities.FormEntryActivity;\n+import org.commcare.utils.Utility;\n+import org.junit.Rule;\n+import org.junit.runner.RunWith;\n+\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public abstract class BaseTest {\n+\n+    @Rule\n+    public ActivityTestRule<DispatchActivity> activityTestRule = new ActivityTestRule<>(DispatchActivity.class);\n+\n+    @Rule\n+    public IntentsTestRule<FormEntryActivity> intentsRule = new IntentsTestRule<>(FormEntryActivity.class);\n+\n+    @Rule\n+    public GrantPermissionRule permissionRule = GrantPermissionRule.grant(\n+            Manifest.permission.READ_PHONE_STATE,\n+            Manifest.permission.CALL_PHONE,\n+            Manifest.permission.ACCESS_FINE_LOCATION,\n+            Manifest.permission.ACCESS_COARSE_LOCATION,\n+            Manifest.permission.WRITE_EXTERNAL_STORAGE,\n+            Manifest.permission.READ_EXTERNAL_STORAGE,\n+            Manifest.permission.RECORD_AUDIO,\n+            Manifest.permission.CAMERA\n+    );\n+\n+    protected void installApp(String appName, String ccz) {\n+        if (CommCareApplication.instance().getCurrentApp() == null) {\n+            Utility.installApp(ccz);\n+        } else if (!appName.equals(CommCareApplication.instance().getCurrentApp().getAppRecord().getDisplayName())) {\n+            // We already have an installed app, But not the one we need for this test.\n+            Utility.uninstallCurrentApp();\n+            Utility.installApp(ccz);\n+            // App installation doesn't take back to login screen. Is this an issue?\n+            pressBackUnconditionally();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4MjMzMA==", "bodyText": "Yeah, I found it weird when I saw it first, but it's true!", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448982330", "createdAt": "2020-07-02T12:58:48Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/instrumentation-tests/src/org/commcare/tests/BaseTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.commcare.tests;\n+\n+import android.Manifest;\n+\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import androidx.test.rule.ActivityTestRule;\n+import androidx.test.rule.GrantPermissionRule;\n+import org.commcare.CommCareApplication;\n+import org.commcare.activities.DispatchActivity;\n+import org.commcare.activities.FormEntryActivity;\n+import org.commcare.utils.Utility;\n+import org.junit.Rule;\n+import org.junit.runner.RunWith;\n+\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public abstract class BaseTest {\n+\n+    @Rule\n+    public ActivityTestRule<DispatchActivity> activityTestRule = new ActivityTestRule<>(DispatchActivity.class);\n+\n+    @Rule\n+    public IntentsTestRule<FormEntryActivity> intentsRule = new IntentsTestRule<>(FormEntryActivity.class);\n+\n+    @Rule\n+    public GrantPermissionRule permissionRule = GrantPermissionRule.grant(\n+            Manifest.permission.READ_PHONE_STATE,\n+            Manifest.permission.CALL_PHONE,\n+            Manifest.permission.ACCESS_FINE_LOCATION,\n+            Manifest.permission.ACCESS_COARSE_LOCATION,\n+            Manifest.permission.WRITE_EXTERNAL_STORAGE,\n+            Manifest.permission.READ_EXTERNAL_STORAGE,\n+            Manifest.permission.RECORD_AUDIO,\n+            Manifest.permission.CAMERA\n+    );\n+\n+    protected void installApp(String appName, String ccz) {\n+        if (CommCareApplication.instance().getCurrentApp() == null) {\n+            Utility.installApp(ccz);\n+        } else if (!appName.equals(CommCareApplication.instance().getCurrentApp().getAppRecord().getDisplayName())) {\n+            // We already have an installed app, But not the one we need for this test.\n+            Utility.uninstallCurrentApp();\n+            Utility.installApp(ccz);\n+            // App installation doesn't take back to login screen. Is this an issue?\n+            pressBackUnconditionally();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkxMjYyOA=="}, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODA2OTM4OnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDo0Njo0NVrOGsHknw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjo1NDo1OVrOGsLj4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkxNDU5MQ==", "bodyText": "Would not pressBack be more appropriate mechanism used for going back since we wanna fail fast in case of any errors ?", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448914591", "createdAt": "2020-07-02T10:46:45Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.commcare.tests;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.endsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class CaseClaimTest extends BaseTest {\n+\n+    private final String cczName = \"case_claim.ccz\";\n+    private final String appName = \"Case Search and Claim\";\n+\n+    @Before\n+    public void setup() {\n+        installApp(appName, cczName);\n+    }\n+\n+    @Test\n+    public void testCaseClaimByDifferentUser() {\n+        String name = \"cordelia\";\n+        String location = \"boston\";\n+\n+        // Make sure we close off any existing cases due to previous test failures.\n+        HQApi.closeExistingCases(name, \"human\", \"d58f7a55dbe2bf22d0b6838311ada205\");\n+\n+        // Waiting here cuz, HQ sometimes is out of sync and might give stale data.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+\n+        // Make sure that a case with cordelia doesn't exist.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+        onView(withId(R.id.request_button))\n+                .check(matches(isDisplayed())); // The request doesn't do anything which confirms case doesn't exists.\n+\n+        // Register a new case with name cordelia\n+        pressBackUnconditionally();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3OTkzNw==", "bodyText": "Yeah, I had a silly thought where I liked that pressBackUnconditionally is better since it doesn't throw any exceptions :)", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448979937", "createdAt": "2020-07-02T12:54:59Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.commcare.tests;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.endsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class CaseClaimTest extends BaseTest {\n+\n+    private final String cczName = \"case_claim.ccz\";\n+    private final String appName = \"Case Search and Claim\";\n+\n+    @Before\n+    public void setup() {\n+        installApp(appName, cczName);\n+    }\n+\n+    @Test\n+    public void testCaseClaimByDifferentUser() {\n+        String name = \"cordelia\";\n+        String location = \"boston\";\n+\n+        // Make sure we close off any existing cases due to previous test failures.\n+        HQApi.closeExistingCases(name, \"human\", \"d58f7a55dbe2bf22d0b6838311ada205\");\n+\n+        // Waiting here cuz, HQ sometimes is out of sync and might give stale data.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+\n+        // Make sure that a case with cordelia doesn't exist.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+        onView(withId(R.id.request_button))\n+                .check(matches(isDisplayed())); // The request doesn't do anything which confirms case doesn't exists.\n+\n+        // Register a new case with name cordelia\n+        pressBackUnconditionally();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkxNDU5MQ=="}, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODA4MzY1OnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDo1MToxMVrOGsHtgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDo1MToxMVrOGsHtgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkxNjg2NQ==", "bodyText": "this can be abstracted into a logout utility method which press backs until it see the logout button on screen.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448916865", "createdAt": "2020-07-02T10:51:11Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.commcare.tests;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.endsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class CaseClaimTest extends BaseTest {\n+\n+    private final String cczName = \"case_claim.ccz\";\n+    private final String appName = \"Case Search and Claim\";\n+\n+    @Before\n+    public void setup() {\n+        installApp(appName, cczName);\n+    }\n+\n+    @Test\n+    public void testCaseClaimByDifferentUser() {\n+        String name = \"cordelia\";\n+        String location = \"boston\";\n+\n+        // Make sure we close off any existing cases due to previous test failures.\n+        HQApi.closeExistingCases(name, \"human\", \"d58f7a55dbe2bf22d0b6838311ada205\");\n+\n+        // Waiting here cuz, HQ sometimes is out of sync and might give stale data.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+\n+        // Make sure that a case with cordelia doesn't exist.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+        onView(withId(R.id.request_button))\n+                .check(matches(isDisplayed())); // The request doesn't do anything which confirms case doesn't exists.\n+\n+        // Register a new case with name cordelia\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        onView(withText(\"Registration\"))\n+                .perform(click());\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(name));\n+\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(location));\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click());\n+\n+        // Confirm newly created case can be claimed.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(name))\n+                .check(matches(isDisplayed()));\n+        onView(withText(name))\n+                .perform(click());\n+        onView(withText(\"Continue\"))\n+                .perform(click());\n+        onView(withText(\"Close\"))\n+                .check(matches(isDisplayed()));\n+\n+        // Login with another user.\n+        pressBackUnconditionally();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODA5MTc1OnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDo1Mzo1MlrOGsHykw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDo1Mzo1MlrOGsHykw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkxODE2Mw==", "bodyText": "can be a utility method that takes the wait duration as input.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448918163", "createdAt": "2020-07-02T10:53:52Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.commcare.tests;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.endsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class CaseClaimTest extends BaseTest {\n+\n+    private final String cczName = \"case_claim.ccz\";\n+    private final String appName = \"Case Search and Claim\";\n+\n+    @Before\n+    public void setup() {\n+        installApp(appName, cczName);\n+    }\n+\n+    @Test\n+    public void testCaseClaimByDifferentUser() {\n+        String name = \"cordelia\";\n+        String location = \"boston\";\n+\n+        // Make sure we close off any existing cases due to previous test failures.\n+        HQApi.closeExistingCases(name, \"human\", \"d58f7a55dbe2bf22d0b6838311ada205\");\n+\n+        // Waiting here cuz, HQ sometimes is out of sync and might give stale data.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+\n+        // Make sure that a case with cordelia doesn't exist.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+        onView(withId(R.id.request_button))\n+                .check(matches(isDisplayed())); // The request doesn't do anything which confirms case doesn't exists.\n+\n+        // Register a new case with name cordelia\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        onView(withText(\"Registration\"))\n+                .perform(click());\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(name));\n+\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(location));\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click());\n+\n+        // Confirm newly created case can be claimed.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(name))\n+                .check(matches(isDisplayed()));\n+        onView(withText(name))\n+                .perform(click());\n+        onView(withText(\"Continue\"))\n+                .perform(click());\n+        onView(withText(\"Close\"))\n+                .check(matches(isDisplayed()));\n+\n+        // Login with another user.\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        Utility.logout();\n+\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODA5NTE1OnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDo1NTowM1rOGsH0wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDo1NTowM1rOGsH0wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkxODcyMg==", "bodyText": "same as L56, should be abstracted.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448918722", "createdAt": "2020-07-02T10:55:03Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.commcare.tests;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.endsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class CaseClaimTest extends BaseTest {\n+\n+    private final String cczName = \"case_claim.ccz\";\n+    private final String appName = \"Case Search and Claim\";\n+\n+    @Before\n+    public void setup() {\n+        installApp(appName, cczName);\n+    }\n+\n+    @Test\n+    public void testCaseClaimByDifferentUser() {\n+        String name = \"cordelia\";\n+        String location = \"boston\";\n+\n+        // Make sure we close off any existing cases due to previous test failures.\n+        HQApi.closeExistingCases(name, \"human\", \"d58f7a55dbe2bf22d0b6838311ada205\");\n+\n+        // Waiting here cuz, HQ sometimes is out of sync and might give stale data.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+\n+        // Make sure that a case with cordelia doesn't exist.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+        onView(withId(R.id.request_button))\n+                .check(matches(isDisplayed())); // The request doesn't do anything which confirms case doesn't exists.\n+\n+        // Register a new case with name cordelia\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        onView(withText(\"Registration\"))\n+                .perform(click());\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(name));\n+\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(location));\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click());\n+\n+        // Confirm newly created case can be claimed.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(name))\n+                .check(matches(isDisplayed()));\n+        onView(withText(name))\n+                .perform(click());\n+        onView(withText(\"Continue\"))\n+                .perform(click());\n+        onView(withText(\"Close\"))\n+                .check(matches(isDisplayed()));\n+\n+        // Login with another user.\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        Utility.logout();\n+\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test2\", \"123\");\n+        // Syncing once again to pull all the case data.\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click());\n+\n+        // Somehow, espresso starts before data pull is completed.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        // Search for cordelia.\n+        onView(withText(\"Start\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODEwNjgwOnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDo1OTowMlrOGsH8QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwOToxNjo1NFrOGtPasg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyMDY0MQ==", "bodyText": "can we have a function here that waits until progress bar is invisible instead ?", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448920641", "createdAt": "2020-07-02T10:59:02Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.commcare.tests;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.endsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class CaseClaimTest extends BaseTest {\n+\n+    private final String cczName = \"case_claim.ccz\";\n+    private final String appName = \"Case Search and Claim\";\n+\n+    @Before\n+    public void setup() {\n+        installApp(appName, cczName);\n+    }\n+\n+    @Test\n+    public void testCaseClaimByDifferentUser() {\n+        String name = \"cordelia\";\n+        String location = \"boston\";\n+\n+        // Make sure we close off any existing cases due to previous test failures.\n+        HQApi.closeExistingCases(name, \"human\", \"d58f7a55dbe2bf22d0b6838311ada205\");\n+\n+        // Waiting here cuz, HQ sometimes is out of sync and might give stale data.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+\n+        // Make sure that a case with cordelia doesn't exist.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+        onView(withId(R.id.request_button))\n+                .check(matches(isDisplayed())); // The request doesn't do anything which confirms case doesn't exists.\n+\n+        // Register a new case with name cordelia\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        onView(withText(\"Registration\"))\n+                .perform(click());\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(name));\n+\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(location));\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click());\n+\n+        // Confirm newly created case can be claimed.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(name))\n+                .check(matches(isDisplayed()));\n+        onView(withText(name))\n+                .perform(click());\n+        onView(withText(\"Continue\"))\n+                .perform(click());\n+        onView(withText(\"Close\"))\n+                .check(matches(isDisplayed()));\n+\n+        // Login with another user.\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        Utility.logout();\n+\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test2\", \"123\");\n+        // Syncing once again to pull all the case data.\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click());\n+\n+        // Somehow, espresso starts before data pull is completed.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4MTE0Ng==", "bodyText": "I guess it's not possible to perform anything with progress bar in espresso.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448981146", "createdAt": "2020-07-02T12:56:55Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.commcare.tests;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.endsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class CaseClaimTest extends BaseTest {\n+\n+    private final String cczName = \"case_claim.ccz\";\n+    private final String appName = \"Case Search and Claim\";\n+\n+    @Before\n+    public void setup() {\n+        installApp(appName, cczName);\n+    }\n+\n+    @Test\n+    public void testCaseClaimByDifferentUser() {\n+        String name = \"cordelia\";\n+        String location = \"boston\";\n+\n+        // Make sure we close off any existing cases due to previous test failures.\n+        HQApi.closeExistingCases(name, \"human\", \"d58f7a55dbe2bf22d0b6838311ada205\");\n+\n+        // Waiting here cuz, HQ sometimes is out of sync and might give stale data.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+\n+        // Make sure that a case with cordelia doesn't exist.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+        onView(withId(R.id.request_button))\n+                .check(matches(isDisplayed())); // The request doesn't do anything which confirms case doesn't exists.\n+\n+        // Register a new case with name cordelia\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        onView(withText(\"Registration\"))\n+                .perform(click());\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(name));\n+\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(location));\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click());\n+\n+        // Confirm newly created case can be claimed.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(name))\n+                .check(matches(isDisplayed()));\n+        onView(withText(name))\n+                .perform(click());\n+        onView(withText(\"Continue\"))\n+                .perform(click());\n+        onView(withText(\"Close\"))\n+                .check(matches(isDisplayed()));\n+\n+        // Login with another user.\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        Utility.logout();\n+\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test2\", \"123\");\n+        // Syncing once again to pull all the case data.\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click());\n+\n+        // Somehow, espresso starts before data pull is completed.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyMDY0MQ=="}, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4NTg1MA==", "bodyText": "It's weird in that case that espresso starts even before the data pull as seems like it waits by itself for the async tasks to be executed which is the reason we can't perform operations on progress bar right ? so both these behaviours looks contradicting to me with possibility of only one to exist. If they are both co-existing it would be nice to see what exactly is going on here.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r449485850", "createdAt": "2020-07-03T09:37:36Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.commcare.tests;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.endsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class CaseClaimTest extends BaseTest {\n+\n+    private final String cczName = \"case_claim.ccz\";\n+    private final String appName = \"Case Search and Claim\";\n+\n+    @Before\n+    public void setup() {\n+        installApp(appName, cczName);\n+    }\n+\n+    @Test\n+    public void testCaseClaimByDifferentUser() {\n+        String name = \"cordelia\";\n+        String location = \"boston\";\n+\n+        // Make sure we close off any existing cases due to previous test failures.\n+        HQApi.closeExistingCases(name, \"human\", \"d58f7a55dbe2bf22d0b6838311ada205\");\n+\n+        // Waiting here cuz, HQ sometimes is out of sync and might give stale data.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+\n+        // Make sure that a case with cordelia doesn't exist.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+        onView(withId(R.id.request_button))\n+                .check(matches(isDisplayed())); // The request doesn't do anything which confirms case doesn't exists.\n+\n+        // Register a new case with name cordelia\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        onView(withText(\"Registration\"))\n+                .perform(click());\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(name));\n+\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(location));\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click());\n+\n+        // Confirm newly created case can be claimed.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(name))\n+                .check(matches(isDisplayed()));\n+        onView(withText(name))\n+                .perform(click());\n+        onView(withText(\"Continue\"))\n+                .perform(click());\n+        onView(withText(\"Close\"))\n+                .check(matches(isDisplayed()));\n+\n+        // Login with another user.\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        Utility.logout();\n+\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test2\", \"123\");\n+        // Syncing once again to pull all the case data.\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click());\n+\n+        // Somehow, espresso starts before data pull is completed.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyMDY0MQ=="}, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzODkzMA==", "bodyText": "yeah I confused myself and added 2 waits there. I just wanted to wait for HQ since it gave me wrong data many times. Updated the code to remove these waits.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450038930", "createdAt": "2020-07-06T07:41:07Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.commcare.tests;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.endsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class CaseClaimTest extends BaseTest {\n+\n+    private final String cczName = \"case_claim.ccz\";\n+    private final String appName = \"Case Search and Claim\";\n+\n+    @Before\n+    public void setup() {\n+        installApp(appName, cczName);\n+    }\n+\n+    @Test\n+    public void testCaseClaimByDifferentUser() {\n+        String name = \"cordelia\";\n+        String location = \"boston\";\n+\n+        // Make sure we close off any existing cases due to previous test failures.\n+        HQApi.closeExistingCases(name, \"human\", \"d58f7a55dbe2bf22d0b6838311ada205\");\n+\n+        // Waiting here cuz, HQ sometimes is out of sync and might give stale data.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+\n+        // Make sure that a case with cordelia doesn't exist.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+        onView(withId(R.id.request_button))\n+                .check(matches(isDisplayed())); // The request doesn't do anything which confirms case doesn't exists.\n+\n+        // Register a new case with name cordelia\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        onView(withText(\"Registration\"))\n+                .perform(click());\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(name));\n+\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(location));\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click());\n+\n+        // Confirm newly created case can be claimed.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(name))\n+                .check(matches(isDisplayed()));\n+        onView(withText(name))\n+                .perform(click());\n+        onView(withText(\"Continue\"))\n+                .perform(click());\n+        onView(withText(\"Close\"))\n+                .check(matches(isDisplayed()));\n+\n+        // Login with another user.\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        Utility.logout();\n+\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test2\", \"123\");\n+        // Syncing once again to pull all the case data.\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click());\n+\n+        // Somehow, espresso starts before data pull is completed.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyMDY0MQ=="}, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5MTY5OA==", "bodyText": "sounds good.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450091698", "createdAt": "2020-07-06T09:16:54Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.commcare.tests;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.endsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class CaseClaimTest extends BaseTest {\n+\n+    private final String cczName = \"case_claim.ccz\";\n+    private final String appName = \"Case Search and Claim\";\n+\n+    @Before\n+    public void setup() {\n+        installApp(appName, cczName);\n+    }\n+\n+    @Test\n+    public void testCaseClaimByDifferentUser() {\n+        String name = \"cordelia\";\n+        String location = \"boston\";\n+\n+        // Make sure we close off any existing cases due to previous test failures.\n+        HQApi.closeExistingCases(name, \"human\", \"d58f7a55dbe2bf22d0b6838311ada205\");\n+\n+        // Waiting here cuz, HQ sometimes is out of sync and might give stale data.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+\n+        // Make sure that a case with cordelia doesn't exist.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+        onView(withId(R.id.request_button))\n+                .check(matches(isDisplayed())); // The request doesn't do anything which confirms case doesn't exists.\n+\n+        // Register a new case with name cordelia\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        onView(withText(\"Registration\"))\n+                .perform(click());\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(name));\n+\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(location));\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click());\n+\n+        // Confirm newly created case can be claimed.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(name))\n+                .check(matches(isDisplayed()));\n+        onView(withText(name))\n+                .perform(click());\n+        onView(withText(\"Continue\"))\n+                .perform(click());\n+        onView(withText(\"Close\"))\n+                .check(matches(isDisplayed()));\n+\n+        // Login with another user.\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        Utility.logout();\n+\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test2\", \"123\");\n+        // Syncing once again to pull all the case data.\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click());\n+\n+        // Somehow, espresso starts before data pull is completed.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyMDY0MQ=="}, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODEyNTgyOnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMTowNjowNFrOGsIIfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMTowNjowNFrOGsIIfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyMzc3Mg==", "bodyText": "this part is closing the case, not claiming it.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448923772", "createdAt": "2020-07-02T11:06:04Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.commcare.tests;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.endsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class CaseClaimTest extends BaseTest {\n+\n+    private final String cczName = \"case_claim.ccz\";\n+    private final String appName = \"Case Search and Claim\";\n+\n+    @Before\n+    public void setup() {\n+        installApp(appName, cczName);\n+    }\n+\n+    @Test\n+    public void testCaseClaimByDifferentUser() {\n+        String name = \"cordelia\";\n+        String location = \"boston\";\n+\n+        // Make sure we close off any existing cases due to previous test failures.\n+        HQApi.closeExistingCases(name, \"human\", \"d58f7a55dbe2bf22d0b6838311ada205\");\n+\n+        // Waiting here cuz, HQ sometimes is out of sync and might give stale data.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+\n+        // Make sure that a case with cordelia doesn't exist.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+        onView(withId(R.id.request_button))\n+                .check(matches(isDisplayed())); // The request doesn't do anything which confirms case doesn't exists.\n+\n+        // Register a new case with name cordelia\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        onView(withText(\"Registration\"))\n+                .perform(click());\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(name));\n+\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(location));\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click());\n+\n+        // Confirm newly created case can be claimed.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(name))\n+                .check(matches(isDisplayed()));\n+        onView(withText(name))\n+                .perform(click());\n+        onView(withText(\"Continue\"))\n+                .perform(click());\n+        onView(withText(\"Close\"))\n+                .check(matches(isDisplayed()));\n+\n+        // Login with another user.\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        Utility.logout();\n+\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test2\", \"123\");\n+        // Syncing once again to pull all the case data.\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click());\n+\n+        // Somehow, espresso starts before data pull is completed.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        // Search for cordelia.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                2\n+        )).perform(typeText(location));\n+\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+\n+        // Claim the new case of cordelia with this user.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODEzMDY4OnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMTowNzozNFrOGsILdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzozOTo1MFrOGtMJ5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyNDUzNA==", "bodyText": "we don't need to search any more, but just test in the follow up list ?", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448924534", "createdAt": "2020-07-02T11:07:34Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.commcare.tests;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.endsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class CaseClaimTest extends BaseTest {\n+\n+    private final String cczName = \"case_claim.ccz\";\n+    private final String appName = \"Case Search and Claim\";\n+\n+    @Before\n+    public void setup() {\n+        installApp(appName, cczName);\n+    }\n+\n+    @Test\n+    public void testCaseClaimByDifferentUser() {\n+        String name = \"cordelia\";\n+        String location = \"boston\";\n+\n+        // Make sure we close off any existing cases due to previous test failures.\n+        HQApi.closeExistingCases(name, \"human\", \"d58f7a55dbe2bf22d0b6838311ada205\");\n+\n+        // Waiting here cuz, HQ sometimes is out of sync and might give stale data.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+\n+        // Make sure that a case with cordelia doesn't exist.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+        onView(withId(R.id.request_button))\n+                .check(matches(isDisplayed())); // The request doesn't do anything which confirms case doesn't exists.\n+\n+        // Register a new case with name cordelia\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        onView(withText(\"Registration\"))\n+                .perform(click());\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(name));\n+\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(location));\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click());\n+\n+        // Confirm newly created case can be claimed.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(name))\n+                .check(matches(isDisplayed()));\n+        onView(withText(name))\n+                .perform(click());\n+        onView(withText(\"Continue\"))\n+                .perform(click());\n+        onView(withText(\"Close\"))\n+                .check(matches(isDisplayed()));\n+\n+        // Login with another user.\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        Utility.logout();\n+\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test2\", \"123\");\n+        // Syncing once again to pull all the case data.\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click());\n+\n+        // Somehow, espresso starts before data pull is completed.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        // Search for cordelia.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                2\n+        )).perform(typeText(location));\n+\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+\n+        // Claim the new case of cordelia with this user.\n+        onView(withText(name))\n+                .perform(click());\n+        onView(withText(\"Continue\"))\n+                .perform(click());\n+        onView(withText(\"Close\"))\n+                .perform(click());\n+        onView(withText(\"Yes\"))\n+                .perform(click());\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(\"Robot says bye\"));\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click());\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click());\n+\n+        // Login with first user again.\n+        Utility.logout();\n+\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+        // Sync with server to pull all the data.\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click());\n+        // Make sure espresso doesn't start before data pull is completed.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        // Make sure the case is no longer around.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4MTkwNA==", "bodyText": "I tried to have almost exactly the same flow as calabash. And I think we're doing the same there.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448981904", "createdAt": "2020-07-02T12:58:05Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.commcare.tests;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.endsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class CaseClaimTest extends BaseTest {\n+\n+    private final String cczName = \"case_claim.ccz\";\n+    private final String appName = \"Case Search and Claim\";\n+\n+    @Before\n+    public void setup() {\n+        installApp(appName, cczName);\n+    }\n+\n+    @Test\n+    public void testCaseClaimByDifferentUser() {\n+        String name = \"cordelia\";\n+        String location = \"boston\";\n+\n+        // Make sure we close off any existing cases due to previous test failures.\n+        HQApi.closeExistingCases(name, \"human\", \"d58f7a55dbe2bf22d0b6838311ada205\");\n+\n+        // Waiting here cuz, HQ sometimes is out of sync and might give stale data.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+\n+        // Make sure that a case with cordelia doesn't exist.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+        onView(withId(R.id.request_button))\n+                .check(matches(isDisplayed())); // The request doesn't do anything which confirms case doesn't exists.\n+\n+        // Register a new case with name cordelia\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        onView(withText(\"Registration\"))\n+                .perform(click());\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(name));\n+\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(location));\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click());\n+\n+        // Confirm newly created case can be claimed.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(name))\n+                .check(matches(isDisplayed()));\n+        onView(withText(name))\n+                .perform(click());\n+        onView(withText(\"Continue\"))\n+                .perform(click());\n+        onView(withText(\"Close\"))\n+                .check(matches(isDisplayed()));\n+\n+        // Login with another user.\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        Utility.logout();\n+\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test2\", \"123\");\n+        // Syncing once again to pull all the case data.\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click());\n+\n+        // Somehow, espresso starts before data pull is completed.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        // Search for cordelia.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                2\n+        )).perform(typeText(location));\n+\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+\n+        // Claim the new case of cordelia with this user.\n+        onView(withText(name))\n+                .perform(click());\n+        onView(withText(\"Continue\"))\n+                .perform(click());\n+        onView(withText(\"Close\"))\n+                .perform(click());\n+        onView(withText(\"Yes\"))\n+                .perform(click());\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(\"Robot says bye\"));\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click());\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click());\n+\n+        // Login with first user again.\n+        Utility.logout();\n+\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+        // Sync with server to pull all the data.\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click());\n+        // Make sure espresso doesn't start before data pull is completed.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        // Make sure the case is no longer around.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyNDUzNA=="}, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4NjcwMQ==", "bodyText": "I can't find the \"search all cases\" here as well.  Am I missing something ?", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r449486701", "createdAt": "2020-07-03T09:39:20Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.commcare.tests;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.endsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class CaseClaimTest extends BaseTest {\n+\n+    private final String cczName = \"case_claim.ccz\";\n+    private final String appName = \"Case Search and Claim\";\n+\n+    @Before\n+    public void setup() {\n+        installApp(appName, cczName);\n+    }\n+\n+    @Test\n+    public void testCaseClaimByDifferentUser() {\n+        String name = \"cordelia\";\n+        String location = \"boston\";\n+\n+        // Make sure we close off any existing cases due to previous test failures.\n+        HQApi.closeExistingCases(name, \"human\", \"d58f7a55dbe2bf22d0b6838311ada205\");\n+\n+        // Waiting here cuz, HQ sometimes is out of sync and might give stale data.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+\n+        // Make sure that a case with cordelia doesn't exist.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+        onView(withId(R.id.request_button))\n+                .check(matches(isDisplayed())); // The request doesn't do anything which confirms case doesn't exists.\n+\n+        // Register a new case with name cordelia\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        onView(withText(\"Registration\"))\n+                .perform(click());\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(name));\n+\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(location));\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click());\n+\n+        // Confirm newly created case can be claimed.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(name))\n+                .check(matches(isDisplayed()));\n+        onView(withText(name))\n+                .perform(click());\n+        onView(withText(\"Continue\"))\n+                .perform(click());\n+        onView(withText(\"Close\"))\n+                .check(matches(isDisplayed()));\n+\n+        // Login with another user.\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        Utility.logout();\n+\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test2\", \"123\");\n+        // Syncing once again to pull all the case data.\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click());\n+\n+        // Somehow, espresso starts before data pull is completed.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        // Search for cordelia.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                2\n+        )).perform(typeText(location));\n+\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+\n+        // Claim the new case of cordelia with this user.\n+        onView(withText(name))\n+                .perform(click());\n+        onView(withText(\"Continue\"))\n+                .perform(click());\n+        onView(withText(\"Close\"))\n+                .perform(click());\n+        onView(withText(\"Yes\"))\n+                .perform(click());\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(\"Robot says bye\"));\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click());\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click());\n+\n+        // Login with first user again.\n+        Utility.logout();\n+\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+        // Sync with server to pull all the data.\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click());\n+        // Make sure espresso doesn't start before data pull is completed.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        // Make sure the case is no longer around.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyNDUzNA=="}, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzODI0NA==", "bodyText": "updated. Sorry the confusion.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450038244", "createdAt": "2020-07-06T07:39:50Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.commcare.tests;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.endsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class CaseClaimTest extends BaseTest {\n+\n+    private final String cczName = \"case_claim.ccz\";\n+    private final String appName = \"Case Search and Claim\";\n+\n+    @Before\n+    public void setup() {\n+        installApp(appName, cczName);\n+    }\n+\n+    @Test\n+    public void testCaseClaimByDifferentUser() {\n+        String name = \"cordelia\";\n+        String location = \"boston\";\n+\n+        // Make sure we close off any existing cases due to previous test failures.\n+        HQApi.closeExistingCases(name, \"human\", \"d58f7a55dbe2bf22d0b6838311ada205\");\n+\n+        // Waiting here cuz, HQ sometimes is out of sync and might give stale data.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+\n+        // Make sure that a case with cordelia doesn't exist.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+        onView(withId(R.id.request_button))\n+                .check(matches(isDisplayed())); // The request doesn't do anything which confirms case doesn't exists.\n+\n+        // Register a new case with name cordelia\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        onView(withText(\"Registration\"))\n+                .perform(click());\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(name));\n+\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(location));\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click());\n+\n+        // Confirm newly created case can be claimed.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(name))\n+                .check(matches(isDisplayed()));\n+        onView(withText(name))\n+                .perform(click());\n+        onView(withText(\"Continue\"))\n+                .perform(click());\n+        onView(withText(\"Close\"))\n+                .check(matches(isDisplayed()));\n+\n+        // Login with another user.\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        Utility.logout();\n+\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test2\", \"123\");\n+        // Syncing once again to pull all the case data.\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click());\n+\n+        // Somehow, espresso starts before data pull is completed.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        // Search for cordelia.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                2\n+        )).perform(typeText(location));\n+\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+\n+        // Claim the new case of cordelia with this user.\n+        onView(withText(name))\n+                .perform(click());\n+        onView(withText(\"Continue\"))\n+                .perform(click());\n+        onView(withText(\"Close\"))\n+                .perform(click());\n+        onView(withText(\"Yes\"))\n+                .perform(click());\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(\"Robot says bye\"));\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click());\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click());\n+\n+        // Login with first user again.\n+        Utility.logout();\n+\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+        // Sync with server to pull all the data.\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click());\n+        // Make sure espresso doesn't start before data pull is completed.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        // Make sure the case is no longer around.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyNDUzNA=="}, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODEzNTM4OnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/tests/FormAttachmentUploadTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMTowOToyNFrOGsIOcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMTowOToyNFrOGsIOcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyNTI5OA==", "bodyText": "very cool and much better apis then calabash!", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448925298", "createdAt": "2020-07-02T11:09:24Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/tests/FormAttachmentUploadTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.commcare.tests;\n+\n+import androidx.test.espresso.action.GeneralLocation;\n+import androidx.test.espresso.action.GeneralSwipeAction;\n+import androidx.test.espresso.action.Press;\n+import androidx.test.espresso.action.Swipe;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.activities.DrawActivity;\n+import org.commcare.dalvik.R;\n+import org.commcare.modern.util.Pair;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.onData;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertNotNull;\n+import static org.hamcrest.Matchers.anything;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static junit.framework.Assert.assertTrue;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class FormAttachmentUploadTest extends BaseTest {\n+\n+    private final String cczName = \"integration_test_app.ccz\";\n+    private final String appName = \"Integration Tests\";\n+\n+    @Before\n+    public void setup() {\n+        installApp(appName, cczName);\n+        Utility.login(\"test\", \"123\");\n+    }\n+\n+    @Test\n+    public void testAttachmentUpload() {\n+        Long latestFormTime = HQApi.getLatestFormTime();\n+        assertNotNull(latestFormTime);\n+\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Form Attachments\"))\n+                .perform(click());\n+        onData(anything())\n+                .inAdapterView(withId(R.id.screen_suite_menu_list))\n+                .atPosition(1)\n+                .perform(click());\n+\n+        Utility.chooseImage();\n+\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+\n+        onView(withText(\"Gather Signature\"))\n+                .perform(click());\n+        onView(instanceOf(DrawActivity.DrawView.class))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODE4OTcwOnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/utils/DateTime.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMToyNzoxNFrOGsIvsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMzoyMDowMFrOGunsMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzMzgwOQ==", "bodyText": "Why are not we using exisiting Java Android date time utilities ?", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448933809", "createdAt": "2020-07-02T11:27:14Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/utils/DateTime.java", "diffHunk": "@@ -0,0 +1,361 @@\n+/*\n+ * Copyright (c) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.commcare.utils;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.TimeZone;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Immutable representation of a date with an optional time and an optional time zone based on <a\n+ * href=\"http://tools.ietf.org/html/rfc3339\">RFC 3339</a>.\n+ *\n+ * <p>\n+ * Implementation is immutable and therefore thread-safe.\n+ * </p>\n+ *\n+ * @since 1.0\n+ * @author Yaniv Inbar\n+ */\n+public final class DateTime implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3NzY2NQ==", "bodyText": "I remember trying the Android DateTime methods for this but couldn't get them to work as expected. So I used this utility instead. It was maybe the Z offset that caused some trouble to me.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448977665", "createdAt": "2020-07-02T12:51:22Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/instrumentation-tests/src/org/commcare/utils/DateTime.java", "diffHunk": "@@ -0,0 +1,361 @@\n+/*\n+ * Copyright (c) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.commcare.utils;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.TimeZone;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Immutable representation of a date with an optional time and an optional time zone based on <a\n+ * href=\"http://tools.ietf.org/html/rfc3339\">RFC 3339</a>.\n+ *\n+ * <p>\n+ * Implementation is immutable and therefore thread-safe.\n+ * </p>\n+ *\n+ * @since 1.0\n+ * @author Yaniv Inbar\n+ */\n+public final class DateTime implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzMzgwOQ=="}, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4NzYxMg==", "bodyText": "Would you be able to have a relook and elaborate the issue you had with the Z offset.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r449487612", "createdAt": "2020-07-03T09:41:17Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/utils/DateTime.java", "diffHunk": "@@ -0,0 +1,361 @@\n+/*\n+ * Copyright (c) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.commcare.utils;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.TimeZone;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Immutable representation of a date with an optional time and an optional time zone based on <a\n+ * href=\"http://tools.ietf.org/html/rfc3339\">RFC 3339</a>.\n+ *\n+ * <p>\n+ * Implementation is immutable and therefore thread-safe.\n+ * </p>\n+ *\n+ * @since 1.0\n+ * @author Yaniv Inbar\n+ */\n+public final class DateTime implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzMzgwOQ=="}, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIyMzA2NA==", "bodyText": "Putting it in here in case you're interested. The date string coming from HQ was like 2020-06-12T02:42:38.555065Z\nThe closest I got to converting that to milliseconds was using SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSsss'Z'\") and it gave 1591929785555 which is different than the expected 1591929758555.\njava.time.Instant.parse() gives correct result but it requires api level 26+ so can't use that also.\nSo, I'm using org.joda.DateTime right now.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450223064", "createdAt": "2020-07-06T13:33:18Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/instrumentation-tests/src/org/commcare/utils/DateTime.java", "diffHunk": "@@ -0,0 +1,361 @@\n+/*\n+ * Copyright (c) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.commcare.utils;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.TimeZone;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Immutable representation of a date with an optional time and an optional time zone based on <a\n+ * href=\"http://tools.ietf.org/html/rfc3339\">RFC 3339</a>.\n+ *\n+ * <p>\n+ * Implementation is immutable and therefore thread-safe.\n+ * </p>\n+ *\n+ * @since 1.0\n+ * @author Yaniv Inbar\n+ */\n+public final class DateTime implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzMzgwOQ=="}, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUzNzk2OQ==", "bodyText": "looks good.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r451537969", "createdAt": "2020-07-08T13:20:00Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/utils/DateTime.java", "diffHunk": "@@ -0,0 +1,361 @@\n+/*\n+ * Copyright (c) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.commcare.utils;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.TimeZone;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Immutable representation of a date with an optional time and an optional time zone based on <a\n+ * href=\"http://tools.ietf.org/html/rfc3339\">RFC 3339</a>.\n+ *\n+ * <p>\n+ * Implementation is immutable and therefore thread-safe.\n+ * </p>\n+ *\n+ * @since 1.0\n+ * @author Yaniv Inbar\n+ */\n+public final class DateTime implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzMzgwOQ=="}, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODI4ODc3OnYy", "diffSide": "RIGHT", "path": "scripts/instrumentationRunner.py", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMTo1OTo0OVrOGsJtgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo1MzozM1rOGtOlhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0OTYzMw==", "bodyText": "Where does this script plug into today ?", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448949633", "createdAt": "2020-07-02T11:59:49Z", "author": {"login": "shubham1g5"}, "path": "scripts/instrumentationRunner.py", "diffHunk": "@@ -0,0 +1,58 @@\n+\"\"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3NjA4Ng==", "bodyText": "This is for running the tests on browserstack. When I was working on it, no jenkins plugin was available for browserstack.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448976086", "createdAt": "2020-07-02T12:48:50Z", "author": {"login": "ShivamPokhriyal"}, "path": "scripts/instrumentationRunner.py", "diffHunk": "@@ -0,0 +1,58 @@\n+\"\"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0OTYzMw=="}, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4ODU5Mg==", "bodyText": "And a Jenkins plugin is available now ? I am mostly curious if there is a place where we are referencing this script or is browserstack auto-configured to look for this file.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r449488592", "createdAt": "2020-07-03T09:43:12Z", "author": {"login": "shubham1g5"}, "path": "scripts/instrumentationRunner.py", "diffHunk": "@@ -0,0 +1,58 @@\n+\"\"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0OTYzMw=="}, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzNzg1Mg==", "bodyText": "This is used in jenkins job here at the execute shell option.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450037852", "createdAt": "2020-07-06T07:39:01Z", "author": {"login": "ShivamPokhriyal"}, "path": "scripts/instrumentationRunner.py", "diffHunk": "@@ -0,0 +1,58 @@\n+\"\"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0OTYzMw=="}, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3ODA4Nw==", "bodyText": "cool, thanks.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450078087", "createdAt": "2020-07-06T08:53:33Z", "author": {"login": "shubham1g5"}, "path": "scripts/instrumentationRunner.py", "diffHunk": "@@ -0,0 +1,58 @@\n+\"\"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0OTYzMw=="}, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODMzMDA2OnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/utils/Utility.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjoxMjowMFrOGsKG9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjoxMjowMFrOGsKG9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1NjE0OA==", "bodyText": "how about onImageCaptureIntentSent ?", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448956148", "createdAt": "2020-07-02T12:12:00Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/utils/Utility.java", "diffHunk": "@@ -0,0 +1,240 @@\n+package org.commcare.utils;\n+\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+import android.net.Uri;\n+import android.provider.MediaStore;\n+import android.view.View;\n+import androidx.annotation.IdRes;\n+import androidx.test.espresso.DataInteraction;\n+import androidx.test.espresso.UiController;\n+import androidx.test.espresso.ViewAction;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.runner.intent.IntentMonitorRegistry;\n+import org.commcare.dalvik.R;\n+import org.hamcrest.BaseMatcher;\n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onData;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.openActionBarOverflowOrOptionsMenu;\n+import static androidx.test.espresso.action.ViewActions.clearText;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.swipeUp;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.matcher.RootMatchers.isDialog;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.anything;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+public class Utility {\n+\n+    /**\n+     * Installs the ccz by copying it into app-specific cache directory.\n+     * @param cczName\n+     */\n+    public static void installApp(String cczName) {\n+        Context context = InstrumentationRegistry.getInstrumentation().getTargetContext();\n+        File file = new File(context.getExternalCacheDir(), cczName);\n+        if (!file.exists()) {\n+            InputStream is = context.getClassLoader().getResourceAsStream(cczName);\n+            try {\n+                FileUtil.copyFile(is, file);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+        openOptionsMenu();\n+        onView(withText(\"Offline Install\"))\n+                .perform(click());\n+        stubFileSelection(file.getAbsolutePath());\n+        onView(withId(R.id.screen_multimedia_inflater_filefetch)).perform(click());\n+        onView(withId(R.id.screen_multimedia_inflater_install))\n+                .perform(click());\n+    }\n+\n+    public static void uninstallCurrentApp() {\n+        openOptionsMenu();\n+        onView(withText(\"Go To App Manager\")).perform(click());\n+        clickListItem(R.id.apps_list_view, 0);\n+        onView(withText(\"Uninstall\")).perform(click());\n+        onView(withText(\"OK\")).inRoot(isDialog()).perform(click());\n+        onView(withId(R.id.install_app_button)).perform(click());\n+    }\n+\n+    public static void login(String userName, String password) {\n+        onView(withId(R.id.edit_username))\n+                .perform(clearText());\n+        onView(withId(R.id.edit_username))\n+                .perform(typeText(userName));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.edit_password))\n+                .perform(typeText(password));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.login_button))\n+                .perform(click());\n+    }\n+\n+    public static void openFirstForm() {\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        clickListItem(R.id.screen_suite_menu_list, 0);\n+        clickListItem(R.id.screen_suite_menu_list, 1);\n+    }\n+\n+    public static void openOptionsMenu() {\n+        Context context = InstrumentationRegistry.getInstrumentation().getTargetContext();\n+        openActionBarOverflowOrOptionsMenu(context);\n+    }\n+\n+    /**\n+     * Click the list item at a particular item position\n+     * @param resId Resource reference to the list.\n+     * @param position Position of the item to be clicked.\n+     */\n+    public static void clickListItem(@IdRes int resId, int position) {\n+        onData(anything())\n+                .inAdapterView(withId(resId))\n+                .atPosition(position)\n+                .perform(click());\n+    }\n+\n+    /**\n+     * Returns a subview inside a particular list item.\n+     * @param listId Resource reference to the list.\n+     * @param position Position of the list item whose subview is needed.\n+     * @param subviewId Resource reference to the subview.\n+     */\n+    public static DataInteraction getSubViewInListItem(@IdRes int listId, int position, @IdRes int subviewId) {\n+        return onData(anything())\n+                .inAdapterView(withId(listId))\n+                .atPosition(position)\n+                .onChildView(withId(subviewId));\n+    }\n+\n+    /**\n+     * Opens first incomplete form in the app.\n+     * Need to have incomplete-form-enabled custom parameter set.\n+     */\n+    public static void openFirstIncompleteForm() {\n+        onView(withText(startsWith(\"Incomplete\"))).perform(click());\n+        clickListItem(R.id.screen_entity_select_list, 0);\n+    }\n+\n+    public static void logout() {\n+        onView(withId(R.id.home_gridview_buttons))\n+                .perform(swipeUp());\n+        onView(withText(\"Log out of CommCare\"))\n+                .perform(click());\n+    }\n+\n+    /**\n+     * Stubs the camera intent and uses R.mipmap.ic_launcher as the image to be returned by the camera.\n+     */\n+    public static void chooseImage() {\n+        stubCamera();\n+        IntentMonitorRegistry.getInstance().addIntentCallback(Utility::onIntentSent);\n+        onView(withText(R.string.capture_image))\n+                .perform(click());\n+        IntentMonitorRegistry.getInstance().removeIntentCallback(Utility::onIntentSent);\n+    }\n+\n+    /**\n+     * Apparently Thread.sleep() doesn't work on espresso.\n+     * https://youtu.be/isihPOY2vS4?t=674\n+     */\n+    public static ViewAction sleep(final long millis) {\n+        return new ViewAction() {\n+            @Override\n+            public Matcher<View> getConstraints() {\n+                return isRoot();\n+            }\n+\n+            @Override\n+            public String getDescription() {\n+                return \"Going to sleep for \" + millis + \"milliseconds\";\n+            }\n+\n+            @Override\n+            public void perform(UiController uiController, final View view) {\n+                uiController.loopMainThreadForAtLeast(millis);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * In case a view contains more than 1 items of same type,\n+     * use this to select the item at @param position.\n+     * NOTE:- position is 1 based.\n+     */\n+    public static <T> Matcher<T> find(Matcher<T> matcher, int position) {\n+        return new BaseMatcher<T>() {\n+            int count = 0;\n+            @Override\n+            public boolean matches(Object item) {\n+                if (matcher.matches(item)) {\n+                    count++;\n+                    return count == position;\n+                }\n+                return false;\n+            }\n+\n+            @Override\n+            public void describeTo(Description description) {\n+                description.appendText(\"will return \" + position + \" matching item\");\n+            }\n+        };\n+    }\n+\n+    //region private helpers.\n+    private static void stubCamera() {\n+        // Build a result to return from the Camera app\n+        Intent resultData = new Intent();\n+        Instrumentation.ActivityResult result = new Instrumentation.ActivityResult(Activity.RESULT_OK, resultData);\n+\n+        // Stub out the Camera. When an intent is sent to the Camera, this tells Espresso to respond\n+        // with the ActivityResult we just created\n+        intending(hasAction(MediaStore.ACTION_IMAGE_CAPTURE)).respondWith(result);\n+    }\n+\n+    private static void stubFileSelection(String filePath) {\n+        Intent resultData = new Intent();\n+        Uri fileUri = Uri.fromFile(new File(filePath));\n+        resultData.setData(fileUri);\n+        Instrumentation.ActivityResult result = new Instrumentation.ActivityResult(Activity.RESULT_OK, resultData);\n+        intending(hasAction(Intent.ACTION_GET_CONTENT)).respondWith(result);\n+    }\n+\n+    private static void onIntentSent(Intent intent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 225}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODMzMTA2OnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/utils/Utility.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjoxMjoxOVrOGsKHmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjoxMjoxOVrOGsKHmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1NjMxNA==", "bodyText": "InstrumentationUtility ?", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448956314", "createdAt": "2020-07-02T12:12:19Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/utils/Utility.java", "diffHunk": "@@ -0,0 +1,240 @@\n+package org.commcare.utils;\n+\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+import android.net.Uri;\n+import android.provider.MediaStore;\n+import android.view.View;\n+import androidx.annotation.IdRes;\n+import androidx.test.espresso.DataInteraction;\n+import androidx.test.espresso.UiController;\n+import androidx.test.espresso.ViewAction;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.runner.intent.IntentMonitorRegistry;\n+import org.commcare.dalvik.R;\n+import org.hamcrest.BaseMatcher;\n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onData;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.openActionBarOverflowOrOptionsMenu;\n+import static androidx.test.espresso.action.ViewActions.clearText;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.swipeUp;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.matcher.RootMatchers.isDialog;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.anything;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+public class Utility {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTU3MjQ3OnYy", "diffSide": "RIGHT", "path": "scripts/instrumentationRunner.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNjoyOTo0N1rOGtwxfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNjoyOTo0N1rOGtwxfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYzODIwNg==", "bodyText": "since it's only related to browserstack we should rename this something similar to browserstack.py to avoid confusion.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450638206", "createdAt": "2020-07-07T06:29:47Z", "author": {"login": "shubham1g5"}, "path": "scripts/instrumentationRunner.py", "diffHunk": "@@ -0,0 +1,58 @@\n+\"\"\"\n+Submits the apks to BrowserStack to run the instrumentation tests.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c152cfc70f83146df93774989f1cfe0e320fb47a"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTU3MzYzOnYy", "diffSide": "RIGHT", "path": "scripts/instrumentationRunner.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNjozMDoxNFrOGtwyJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNjozMDoxNFrOGtwyJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYzODM3NA==", "bodyText": "can we add another Android 4.4 device here ?", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450638374", "createdAt": "2020-07-07T06:30:14Z", "author": {"login": "shubham1g5"}, "path": "scripts/instrumentationRunner.py", "diffHunk": "@@ -0,0 +1,58 @@\n+\"\"\"\n+Submits the apks to BrowserStack to run the instrumentation tests.\n+\"\"\"\n+\n+import os\n+import shlex\n+import subprocess\n+from subprocess import PIPE\n+import sys\n+import json\n+\n+def appendData(command, dataUrl):\n+    var = \"file=@{}\".format(dataUrl)\n+    return command + \" \" + json.dumps(var)\n+\n+def buildTestCommand(appToken, testToken):\n+    test = {}\n+    test[\"devices\"] = [\"LG G5-6.0\"] #using just 1 device right now.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c152cfc70f83146df93774989f1cfe0e320fb47a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODQ4NDgwOnYy", "diffSide": "RIGHT", "path": "scripts/browserstack.py", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODoyMDoxMFrOGvGtnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNzoxNDo0M1rOG0rHTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0NjIzOQ==", "bodyText": "Q: Does browserstack support uploading bundles ?", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r452046239", "createdAt": "2020-07-09T08:20:10Z", "author": {"login": "shubham1g5"}, "path": "scripts/browserstack.py", "diffHunk": "@@ -0,0 +1,58 @@\n+\"\"\"\n+Submits the apks to BrowserStack to run the instrumentation tests.\n+\"\"\"\n+\n+import os\n+import shlex\n+import subprocess\n+from subprocess import PIPE\n+import sys\n+import json\n+\n+def appendData(command, dataUrl):\n+    var = \"file=@{}\".format(dataUrl)\n+    return command + \" \" + json.dumps(var)\n+\n+def buildTestCommand(appToken, testToken):\n+    test = {}\n+    test[\"devices\"] = [\"LG G5-6.0\", \"Google Nexus 5-4.4\"]\n+    test[\"app\"] = appToken\n+    test[\"deviceLogs\"] = True\n+    test[\"testSuite\"] = testToken\n+    return json.dumps(json.dumps(test))\n+\n+if __name__ == \"__main__\":\n+\n+    if \"BROWSERSTACK_USERNAME\" in os.environ:\n+        userName = os.environ[\"BROWSERSTACK_USERNAME\"]\n+\n+    if \"BROWSERSTACK_PASSWORD\" in os.environ:\n+        password = os.environ[\"BROWSERSTACK_PASSWORD\"]\n+\n+    if \"BASE_LOCATION\" in os.environ:\n+        baseLoc = os.environ[\"BASE_LOCATION\"]\n+\n+    debugApk = baseLoc + \"commcare/debug/app-commcare-debug.apk\"\n+    testApk = baseLoc + \"androidTest/commcare/debug/app-commcare-debug-androidTest.apk\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cecfc6e0265d8867e924a8e528e4cfc94f0f9093"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0ODA1Ng==", "bodyText": "yeah, I noticed that sometime ago, seems like that's a new feature there. I'll change this to use app bundles instead.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r452048056", "createdAt": "2020-07-09T08:23:12Z", "author": {"login": "ShivamPokhriyal"}, "path": "scripts/browserstack.py", "diffHunk": "@@ -0,0 +1,58 @@\n+\"\"\"\n+Submits the apks to BrowserStack to run the instrumentation tests.\n+\"\"\"\n+\n+import os\n+import shlex\n+import subprocess\n+from subprocess import PIPE\n+import sys\n+import json\n+\n+def appendData(command, dataUrl):\n+    var = \"file=@{}\".format(dataUrl)\n+    return command + \" \" + json.dumps(var)\n+\n+def buildTestCommand(appToken, testToken):\n+    test = {}\n+    test[\"devices\"] = [\"LG G5-6.0\", \"Google Nexus 5-4.4\"]\n+    test[\"app\"] = appToken\n+    test[\"deviceLogs\"] = True\n+    test[\"testSuite\"] = testToken\n+    return json.dumps(json.dumps(test))\n+\n+if __name__ == \"__main__\":\n+\n+    if \"BROWSERSTACK_USERNAME\" in os.environ:\n+        userName = os.environ[\"BROWSERSTACK_USERNAME\"]\n+\n+    if \"BROWSERSTACK_PASSWORD\" in os.environ:\n+        password = os.environ[\"BROWSERSTACK_PASSWORD\"]\n+\n+    if \"BASE_LOCATION\" in os.environ:\n+        baseLoc = os.environ[\"BASE_LOCATION\"]\n+\n+    debugApk = baseLoc + \"commcare/debug/app-commcare-debug.apk\"\n+    testApk = baseLoc + \"androidTest/commcare/debug/app-commcare-debug-androidTest.apk\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0NjIzOQ=="}, "originalCommit": {"oid": "cecfc6e0265d8867e924a8e528e4cfc94f0f9093"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEzMjY5MA==", "bodyText": "Updated it to use app bundles. Also, the tests will be failing since I removed that null check! So until that one is fixed, they'll all fail!", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r452132690", "createdAt": "2020-07-09T10:53:15Z", "author": {"login": "ShivamPokhriyal"}, "path": "scripts/browserstack.py", "diffHunk": "@@ -0,0 +1,58 @@\n+\"\"\"\n+Submits the apks to BrowserStack to run the instrumentation tests.\n+\"\"\"\n+\n+import os\n+import shlex\n+import subprocess\n+from subprocess import PIPE\n+import sys\n+import json\n+\n+def appendData(command, dataUrl):\n+    var = \"file=@{}\".format(dataUrl)\n+    return command + \" \" + json.dumps(var)\n+\n+def buildTestCommand(appToken, testToken):\n+    test = {}\n+    test[\"devices\"] = [\"LG G5-6.0\", \"Google Nexus 5-4.4\"]\n+    test[\"app\"] = appToken\n+    test[\"deviceLogs\"] = True\n+    test[\"testSuite\"] = testToken\n+    return json.dumps(json.dumps(test))\n+\n+if __name__ == \"__main__\":\n+\n+    if \"BROWSERSTACK_USERNAME\" in os.environ:\n+        userName = os.environ[\"BROWSERSTACK_USERNAME\"]\n+\n+    if \"BROWSERSTACK_PASSWORD\" in os.environ:\n+        password = os.environ[\"BROWSERSTACK_PASSWORD\"]\n+\n+    if \"BASE_LOCATION\" in os.environ:\n+        baseLoc = os.environ[\"BASE_LOCATION\"]\n+\n+    debugApk = baseLoc + \"commcare/debug/app-commcare-debug.apk\"\n+    testApk = baseLoc + \"androidTest/commcare/debug/app-commcare-debug-androidTest.apk\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0NjIzOQ=="}, "originalCommit": {"oid": "cecfc6e0265d8867e924a8e528e4cfc94f0f9093"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEzMjk2OQ==", "bodyText": "But Imma gonna address that in a separate PR cuz that issue is coming to real users as well. So I'm good to merge this one unless you have any concerns.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r452132969", "createdAt": "2020-07-09T10:53:53Z", "author": {"login": "ShivamPokhriyal"}, "path": "scripts/browserstack.py", "diffHunk": "@@ -0,0 +1,58 @@\n+\"\"\"\n+Submits the apks to BrowserStack to run the instrumentation tests.\n+\"\"\"\n+\n+import os\n+import shlex\n+import subprocess\n+from subprocess import PIPE\n+import sys\n+import json\n+\n+def appendData(command, dataUrl):\n+    var = \"file=@{}\".format(dataUrl)\n+    return command + \" \" + json.dumps(var)\n+\n+def buildTestCommand(appToken, testToken):\n+    test = {}\n+    test[\"devices\"] = [\"LG G5-6.0\", \"Google Nexus 5-4.4\"]\n+    test[\"app\"] = appToken\n+    test[\"deviceLogs\"] = True\n+    test[\"testSuite\"] = testToken\n+    return json.dumps(json.dumps(test))\n+\n+if __name__ == \"__main__\":\n+\n+    if \"BROWSERSTACK_USERNAME\" in os.environ:\n+        userName = os.environ[\"BROWSERSTACK_USERNAME\"]\n+\n+    if \"BROWSERSTACK_PASSWORD\" in os.environ:\n+        password = os.environ[\"BROWSERSTACK_PASSWORD\"]\n+\n+    if \"BASE_LOCATION\" in os.environ:\n+        baseLoc = os.environ[\"BASE_LOCATION\"]\n+\n+    debugApk = baseLoc + \"commcare/debug/app-commcare-debug.apk\"\n+    testApk = baseLoc + \"androidTest/commcare/debug/app-commcare-debug-androidTest.apk\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0NjIzOQ=="}, "originalCommit": {"oid": "cecfc6e0265d8867e924a8e528e4cfc94f0f9093"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEzNzkzMw==", "bodyText": "@ShivamPokhriyal  I don't think there is value in us merging tests which are going to fail for time being. So unless you think otherwise, I will hold them off until the issue is fixed, verify that this PR works successfully on top of that other PR that fixes this isse and merge it afterwards.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r452137933", "createdAt": "2020-07-09T11:04:13Z", "author": {"login": "shubham1g5"}, "path": "scripts/browserstack.py", "diffHunk": "@@ -0,0 +1,58 @@\n+\"\"\"\n+Submits the apks to BrowserStack to run the instrumentation tests.\n+\"\"\"\n+\n+import os\n+import shlex\n+import subprocess\n+from subprocess import PIPE\n+import sys\n+import json\n+\n+def appendData(command, dataUrl):\n+    var = \"file=@{}\".format(dataUrl)\n+    return command + \" \" + json.dumps(var)\n+\n+def buildTestCommand(appToken, testToken):\n+    test = {}\n+    test[\"devices\"] = [\"LG G5-6.0\", \"Google Nexus 5-4.4\"]\n+    test[\"app\"] = appToken\n+    test[\"deviceLogs\"] = True\n+    test[\"testSuite\"] = testToken\n+    return json.dumps(json.dumps(test))\n+\n+if __name__ == \"__main__\":\n+\n+    if \"BROWSERSTACK_USERNAME\" in os.environ:\n+        userName = os.environ[\"BROWSERSTACK_USERNAME\"]\n+\n+    if \"BROWSERSTACK_PASSWORD\" in os.environ:\n+        password = os.environ[\"BROWSERSTACK_PASSWORD\"]\n+\n+    if \"BASE_LOCATION\" in os.environ:\n+        baseLoc = os.environ[\"BASE_LOCATION\"]\n+\n+    debugApk = baseLoc + \"commcare/debug/app-commcare-debug.apk\"\n+    testApk = baseLoc + \"androidTest/commcare/debug/app-commcare-debug-androidTest.apk\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0NjIzOQ=="}, "originalCommit": {"oid": "cecfc6e0265d8867e924a8e528e4cfc94f0f9093"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE0NzE4Nw==", "bodyText": "Cool makes sense.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r452147187", "createdAt": "2020-07-09T11:23:36Z", "author": {"login": "ShivamPokhriyal"}, "path": "scripts/browserstack.py", "diffHunk": "@@ -0,0 +1,58 @@\n+\"\"\"\n+Submits the apks to BrowserStack to run the instrumentation tests.\n+\"\"\"\n+\n+import os\n+import shlex\n+import subprocess\n+from subprocess import PIPE\n+import sys\n+import json\n+\n+def appendData(command, dataUrl):\n+    var = \"file=@{}\".format(dataUrl)\n+    return command + \" \" + json.dumps(var)\n+\n+def buildTestCommand(appToken, testToken):\n+    test = {}\n+    test[\"devices\"] = [\"LG G5-6.0\", \"Google Nexus 5-4.4\"]\n+    test[\"app\"] = appToken\n+    test[\"deviceLogs\"] = True\n+    test[\"testSuite\"] = testToken\n+    return json.dumps(json.dumps(test))\n+\n+if __name__ == \"__main__\":\n+\n+    if \"BROWSERSTACK_USERNAME\" in os.environ:\n+        userName = os.environ[\"BROWSERSTACK_USERNAME\"]\n+\n+    if \"BROWSERSTACK_PASSWORD\" in os.environ:\n+        password = os.environ[\"BROWSERSTACK_PASSWORD\"]\n+\n+    if \"BASE_LOCATION\" in os.environ:\n+        baseLoc = os.environ[\"BASE_LOCATION\"]\n+\n+    debugApk = baseLoc + \"commcare/debug/app-commcare-debug.apk\"\n+    testApk = baseLoc + \"androidTest/commcare/debug/app-commcare-debug-androidTest.apk\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0NjIzOQ=="}, "originalCommit": {"oid": "cecfc6e0265d8867e924a8e528e4cfc94f0f9093"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg3MTAzNQ==", "bodyText": "@shubham1g5 Hey I was wrong about it earlier. The tests are passing. The IntentTestRule was the reason behind the npe crashes and when we removed it here #2231 (comment), crashes also disappear.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r457871035", "createdAt": "2020-07-21T06:42:15Z", "author": {"login": "ShivamPokhriyal"}, "path": "scripts/browserstack.py", "diffHunk": "@@ -0,0 +1,58 @@\n+\"\"\"\n+Submits the apks to BrowserStack to run the instrumentation tests.\n+\"\"\"\n+\n+import os\n+import shlex\n+import subprocess\n+from subprocess import PIPE\n+import sys\n+import json\n+\n+def appendData(command, dataUrl):\n+    var = \"file=@{}\".format(dataUrl)\n+    return command + \" \" + json.dumps(var)\n+\n+def buildTestCommand(appToken, testToken):\n+    test = {}\n+    test[\"devices\"] = [\"LG G5-6.0\", \"Google Nexus 5-4.4\"]\n+    test[\"app\"] = appToken\n+    test[\"deviceLogs\"] = True\n+    test[\"testSuite\"] = testToken\n+    return json.dumps(json.dumps(test))\n+\n+if __name__ == \"__main__\":\n+\n+    if \"BROWSERSTACK_USERNAME\" in os.environ:\n+        userName = os.environ[\"BROWSERSTACK_USERNAME\"]\n+\n+    if \"BROWSERSTACK_PASSWORD\" in os.environ:\n+        password = os.environ[\"BROWSERSTACK_PASSWORD\"]\n+\n+    if \"BASE_LOCATION\" in os.environ:\n+        baseLoc = os.environ[\"BASE_LOCATION\"]\n+\n+    debugApk = baseLoc + \"commcare/debug/app-commcare-debug.apk\"\n+    testApk = baseLoc + \"androidTest/commcare/debug/app-commcare-debug-androidTest.apk\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0NjIzOQ=="}, "originalCommit": {"oid": "cecfc6e0265d8867e924a8e528e4cfc94f0f9093"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg4NTUxOQ==", "bodyText": "wow, that's great.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r457885519", "createdAt": "2020-07-21T07:14:43Z", "author": {"login": "shubham1g5"}, "path": "scripts/browserstack.py", "diffHunk": "@@ -0,0 +1,58 @@\n+\"\"\"\n+Submits the apks to BrowserStack to run the instrumentation tests.\n+\"\"\"\n+\n+import os\n+import shlex\n+import subprocess\n+from subprocess import PIPE\n+import sys\n+import json\n+\n+def appendData(command, dataUrl):\n+    var = \"file=@{}\".format(dataUrl)\n+    return command + \" \" + json.dumps(var)\n+\n+def buildTestCommand(appToken, testToken):\n+    test = {}\n+    test[\"devices\"] = [\"LG G5-6.0\", \"Google Nexus 5-4.4\"]\n+    test[\"app\"] = appToken\n+    test[\"deviceLogs\"] = True\n+    test[\"testSuite\"] = testToken\n+    return json.dumps(json.dumps(test))\n+\n+if __name__ == \"__main__\":\n+\n+    if \"BROWSERSTACK_USERNAME\" in os.environ:\n+        userName = os.environ[\"BROWSERSTACK_USERNAME\"]\n+\n+    if \"BROWSERSTACK_PASSWORD\" in os.environ:\n+        password = os.environ[\"BROWSERSTACK_PASSWORD\"]\n+\n+    if \"BASE_LOCATION\" in os.environ:\n+        baseLoc = os.environ[\"BASE_LOCATION\"]\n+\n+    debugApk = baseLoc + \"commcare/debug/app-commcare-debug.apk\"\n+    testApk = baseLoc + \"androidTest/commcare/debug/app-commcare-debug-androidTest.apk\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0NjIzOQ=="}, "originalCommit": {"oid": "cecfc6e0265d8867e924a8e528e4cfc94f0f9093"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTA1NjMzOnYy", "diffSide": "RIGHT", "path": "scripts/browserstack.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMTowMDozOVrOGvMNWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMTowMDozOVrOGvMNWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEzNjI4MQ==", "bodyText": "would be good to rename this to debugBundle now that it represents bundle.", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r452136281", "createdAt": "2020-07-09T11:00:39Z", "author": {"login": "shubham1g5"}, "path": "scripts/browserstack.py", "diffHunk": "@@ -32,8 +32,8 @@ def buildTestCommand(appToken, testToken):\n     if \"BASE_LOCATION\" in os.environ:\n         baseLoc = os.environ[\"BASE_LOCATION\"]\n \n-    debugApk = baseLoc + \"commcare/debug/app-commcare-debug.apk\"\n-    testApk = baseLoc + \"androidTest/commcare/debug/app-commcare-debug-androidTest.apk\"\n+    debugApk = baseLoc + \"bundle/commcareDebug/app-commcare-debug.aab\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "771490b50cf9ec011a27235904733b9dc86ffe6e"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3247, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}