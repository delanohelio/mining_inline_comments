{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3NzMyMDgx", "number": 2299, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjozNTo0OFrOEXfXZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDo1NTowN1rOEcA51Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDY2NTk3OnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppInstallationTest.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjozNTo0OFrOG_Tp4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjozNTo0OFrOG_Tp4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzNTQ4OA==", "bodyText": "we should rename to InstallFromListTest as these tests are only about the Install from list feature.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r469035488", "createdAt": "2020-08-12T06:35:48Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppInstallationTest.kt", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.commcare.androidTests\n+\n+import android.widget.ListView\n+import androidx.test.espresso.Espresso.closeSoftKeyboard\n+import androidx.test.espresso.Espresso.onView\n+import androidx.test.espresso.Espresso.onData\n+import androidx.test.espresso.action.ViewActions.*\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.intent.Intents.intended\n+import androidx.test.espresso.intent.matcher.IntentMatchers.hasComponent\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import junit.framework.Assert.fail\n+import org.commcare.CommCareApplication\n+import org.commcare.CommCareInstrumentationTestApplication\n+import org.commcare.activities.InstallFromListActivity\n+import org.commcare.android.database.global.models.AppAvailableToInstall\n+import org.commcare.dalvik.BuildConfig\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Description\n+import org.hamcrest.Matchers.*\n+import org.hamcrest.TypeSafeMatcher\n+import org.junit.After\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppInstallationTest: BaseTest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDY3MzQ4OnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppInstallationTest.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjozODo0MFrOG_TuPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOToxNzowM1rOHBg2ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzNjYwNA==", "bodyText": "what's the reason behind repeating the closeSoftKeyboard call ?", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r469036604", "createdAt": "2020-08-12T06:38:40Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppInstallationTest.kt", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.commcare.androidTests\n+\n+import android.widget.ListView\n+import androidx.test.espresso.Espresso.closeSoftKeyboard\n+import androidx.test.espresso.Espresso.onView\n+import androidx.test.espresso.Espresso.onData\n+import androidx.test.espresso.action.ViewActions.*\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.intent.Intents.intended\n+import androidx.test.espresso.intent.matcher.IntentMatchers.hasComponent\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import junit.framework.Assert.fail\n+import org.commcare.CommCareApplication\n+import org.commcare.CommCareInstrumentationTestApplication\n+import org.commcare.activities.InstallFromListActivity\n+import org.commcare.android.database.global.models.AppAvailableToInstall\n+import org.commcare.dalvik.BuildConfig\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Description\n+import org.hamcrest.Matchers.*\n+import org.hamcrest.TypeSafeMatcher\n+import org.junit.After\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppInstallationTest: BaseTest() {\n+\n+    @After\n+    fun setup() {\n+        // Uninstall app.\n+        InstrumentationUtility.uninstallCurrentApp()\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for Another User\"))\n+                .perform(click())\n+    }\n+\n+    @Test\n+    fun testAppInstall_usingMobieWorkerDetails() {\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        // Confirm the activity\n+        intended(hasComponent(InstallFromListActivity::class.java.name))\n+\n+        // Verify that we start out in mobile user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(isDisplayed()))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(not(isDisplayed())))\n+\n+        // Toggle switch\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Verify that we're now in web user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(not(isDisplayed())))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(isDisplayed()))\n+\n+        // Switch back to mobile auth view\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Test getting app list for a mobile user\n+        onView(withId(R.id.edit_username))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+        closeSoftKeyboard()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM0ODkyMg==", "bodyText": "might have added by mistake, will remove it.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r471348922", "createdAt": "2020-08-17T09:17:03Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppInstallationTest.kt", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.commcare.androidTests\n+\n+import android.widget.ListView\n+import androidx.test.espresso.Espresso.closeSoftKeyboard\n+import androidx.test.espresso.Espresso.onView\n+import androidx.test.espresso.Espresso.onData\n+import androidx.test.espresso.action.ViewActions.*\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.intent.Intents.intended\n+import androidx.test.espresso.intent.matcher.IntentMatchers.hasComponent\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import junit.framework.Assert.fail\n+import org.commcare.CommCareApplication\n+import org.commcare.CommCareInstrumentationTestApplication\n+import org.commcare.activities.InstallFromListActivity\n+import org.commcare.android.database.global.models.AppAvailableToInstall\n+import org.commcare.dalvik.BuildConfig\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Description\n+import org.hamcrest.Matchers.*\n+import org.hamcrest.TypeSafeMatcher\n+import org.junit.After\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppInstallationTest: BaseTest() {\n+\n+    @After\n+    fun setup() {\n+        // Uninstall app.\n+        InstrumentationUtility.uninstallCurrentApp()\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for Another User\"))\n+                .perform(click())\n+    }\n+\n+    @Test\n+    fun testAppInstall_usingMobieWorkerDetails() {\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        // Confirm the activity\n+        intended(hasComponent(InstallFromListActivity::class.java.name))\n+\n+        // Verify that we start out in mobile user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(isDisplayed()))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(not(isDisplayed())))\n+\n+        // Toggle switch\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Verify that we're now in web user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(not(isDisplayed())))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(isDisplayed()))\n+\n+        // Switch back to mobile auth view\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Test getting app list for a mobile user\n+        onView(withId(R.id.edit_username))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+        closeSoftKeyboard()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzNjYwNA=="}, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDcwNzUwOnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppInstallationTest.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo1MDoxOFrOG_UBtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo1MDoxOFrOG_UBtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MTU4OA==", "bodyText": "we should create a method wrapping the text input and close keyboard calls and call that instead to avoid multiple close keyboard calls.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r469041588", "createdAt": "2020-08-12T06:50:18Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppInstallationTest.kt", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.commcare.androidTests\n+\n+import android.widget.ListView\n+import androidx.test.espresso.Espresso.closeSoftKeyboard\n+import androidx.test.espresso.Espresso.onView\n+import androidx.test.espresso.Espresso.onData\n+import androidx.test.espresso.action.ViewActions.*\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.intent.Intents.intended\n+import androidx.test.espresso.intent.matcher.IntentMatchers.hasComponent\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import junit.framework.Assert.fail\n+import org.commcare.CommCareApplication\n+import org.commcare.CommCareInstrumentationTestApplication\n+import org.commcare.activities.InstallFromListActivity\n+import org.commcare.android.database.global.models.AppAvailableToInstall\n+import org.commcare.dalvik.BuildConfig\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Description\n+import org.hamcrest.Matchers.*\n+import org.hamcrest.TypeSafeMatcher\n+import org.junit.After\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppInstallationTest: BaseTest() {\n+\n+    @After\n+    fun setup() {\n+        // Uninstall app.\n+        InstrumentationUtility.uninstallCurrentApp()\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for Another User\"))\n+                .perform(click())\n+    }\n+\n+    @Test\n+    fun testAppInstall_usingMobieWorkerDetails() {\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        // Confirm the activity\n+        intended(hasComponent(InstallFromListActivity::class.java.name))\n+\n+        // Verify that we start out in mobile user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(isDisplayed()))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(not(isDisplayed())))\n+\n+        // Toggle switch\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Verify that we're now in web user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(not(isDisplayed())))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(isDisplayed()))\n+\n+        // Switch back to mobile auth view\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Test getting app list for a mobile user\n+        onView(withId(R.id.edit_username))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+        closeSoftKeyboard()\n+        onView(withId(R.id.edit_domain))\n+                .perform(typeText(\"commcare-tests\"))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.edit_password))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDcxMjg3OnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppInstallationTest.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo1MjowMVrOG_UE4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo1MjowMVrOG_UE4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MjQwMw==", "bodyText": "very cool.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r469042403", "createdAt": "2020-08-12T06:52:01Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppInstallationTest.kt", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.commcare.androidTests\n+\n+import android.widget.ListView\n+import androidx.test.espresso.Espresso.closeSoftKeyboard\n+import androidx.test.espresso.Espresso.onView\n+import androidx.test.espresso.Espresso.onData\n+import androidx.test.espresso.action.ViewActions.*\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.intent.Intents.intended\n+import androidx.test.espresso.intent.matcher.IntentMatchers.hasComponent\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import junit.framework.Assert.fail\n+import org.commcare.CommCareApplication\n+import org.commcare.CommCareInstrumentationTestApplication\n+import org.commcare.activities.InstallFromListActivity\n+import org.commcare.android.database.global.models.AppAvailableToInstall\n+import org.commcare.dalvik.BuildConfig\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Description\n+import org.hamcrest.Matchers.*\n+import org.hamcrest.TypeSafeMatcher\n+import org.junit.After\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppInstallationTest: BaseTest() {\n+\n+    @After\n+    fun setup() {\n+        // Uninstall app.\n+        InstrumentationUtility.uninstallCurrentApp()\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for Another User\"))\n+                .perform(click())\n+    }\n+\n+    @Test\n+    fun testAppInstall_usingMobieWorkerDetails() {\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        // Confirm the activity\n+        intended(hasComponent(InstallFromListActivity::class.java.name))\n+\n+        // Verify that we start out in mobile user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(isDisplayed()))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(not(isDisplayed())))\n+\n+        // Toggle switch\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Verify that we're now in web user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(not(isDisplayed())))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(isDisplayed()))\n+\n+        // Switch back to mobile auth view\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Test getting app list for a mobile user\n+        onView(withId(R.id.edit_username))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+        closeSoftKeyboard()\n+        onView(withId(R.id.edit_domain))\n+                .perform(typeText(\"commcare-tests\"))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.edit_password))\n+                .perform(typeText(\"123\"))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.get_apps_button))\n+                .perform(click())\n+\n+        // Check that all the apps belong to commcare-tests domain\n+        for (position in 0 until getAppListSize()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDcxOTkwOnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppInstallationTest.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo1NDozNFrOG_UJHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo1NDozNFrOG_UJHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MzQ4Nw==", "bodyText": "nice asserts, would be useful to bundle these both in a function that checks the validity of the seated app.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r469043487", "createdAt": "2020-08-12T06:54:34Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppInstallationTest.kt", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.commcare.androidTests\n+\n+import android.widget.ListView\n+import androidx.test.espresso.Espresso.closeSoftKeyboard\n+import androidx.test.espresso.Espresso.onView\n+import androidx.test.espresso.Espresso.onData\n+import androidx.test.espresso.action.ViewActions.*\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.intent.Intents.intended\n+import androidx.test.espresso.intent.matcher.IntentMatchers.hasComponent\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import junit.framework.Assert.fail\n+import org.commcare.CommCareApplication\n+import org.commcare.CommCareInstrumentationTestApplication\n+import org.commcare.activities.InstallFromListActivity\n+import org.commcare.android.database.global.models.AppAvailableToInstall\n+import org.commcare.dalvik.BuildConfig\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Description\n+import org.hamcrest.Matchers.*\n+import org.hamcrest.TypeSafeMatcher\n+import org.junit.After\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppInstallationTest: BaseTest() {\n+\n+    @After\n+    fun setup() {\n+        // Uninstall app.\n+        InstrumentationUtility.uninstallCurrentApp()\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for Another User\"))\n+                .perform(click())\n+    }\n+\n+    @Test\n+    fun testAppInstall_usingMobieWorkerDetails() {\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        // Confirm the activity\n+        intended(hasComponent(InstallFromListActivity::class.java.name))\n+\n+        // Verify that we start out in mobile user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(isDisplayed()))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(not(isDisplayed())))\n+\n+        // Toggle switch\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Verify that we're now in web user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(not(isDisplayed())))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(isDisplayed()))\n+\n+        // Switch back to mobile auth view\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Test getting app list for a mobile user\n+        onView(withId(R.id.edit_username))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+        closeSoftKeyboard()\n+        onView(withId(R.id.edit_domain))\n+                .perform(typeText(\"commcare-tests\"))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.edit_password))\n+                .perform(typeText(\"123\"))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.get_apps_button))\n+                .perform(click())\n+\n+        // Check that all the apps belong to commcare-tests domain\n+        for (position in 0 until getAppListSize()) {\n+            InstrumentationUtility.getSubViewInListItem(R.id.apps_list_view, position, R.id.domain)\n+                    .check(matches(withText(\"commcare-tests\")))\n+        }\n+\n+        // Check the app names\n+        matchAppInAppList(\"Case callout test for Simprints\")\n+        matchAppInAppList(\"Case Search and Claim\")\n+        matchAppInAppList(\"Integration Tests\")\n+\n+        // Install 1 of the apps\n+        onView(withText(\"Case Search and Claim\"))\n+                .perform(click())\n+\n+        assert(CommCareApplication.instance().currentApp != null, \"App is null\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDczOTk1OnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppInstallationTest.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzowMToxOFrOG_UVVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzowMToxOFrOG_UVVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0NjYxMw==", "bodyText": "L110-130 can be moved to a before test setup", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r469046613", "createdAt": "2020-08-12T07:01:18Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppInstallationTest.kt", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.commcare.androidTests\n+\n+import android.widget.ListView\n+import androidx.test.espresso.Espresso.closeSoftKeyboard\n+import androidx.test.espresso.Espresso.onView\n+import androidx.test.espresso.Espresso.onData\n+import androidx.test.espresso.action.ViewActions.*\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.intent.Intents.intended\n+import androidx.test.espresso.intent.matcher.IntentMatchers.hasComponent\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import junit.framework.Assert.fail\n+import org.commcare.CommCareApplication\n+import org.commcare.CommCareInstrumentationTestApplication\n+import org.commcare.activities.InstallFromListActivity\n+import org.commcare.android.database.global.models.AppAvailableToInstall\n+import org.commcare.dalvik.BuildConfig\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Description\n+import org.hamcrest.Matchers.*\n+import org.hamcrest.TypeSafeMatcher\n+import org.junit.After\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppInstallationTest: BaseTest() {\n+\n+    @After\n+    fun setup() {\n+        // Uninstall app.\n+        InstrumentationUtility.uninstallCurrentApp()\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for Another User\"))\n+                .perform(click())\n+    }\n+\n+    @Test\n+    fun testAppInstall_usingMobieWorkerDetails() {\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        // Confirm the activity\n+        intended(hasComponent(InstallFromListActivity::class.java.name))\n+\n+        // Verify that we start out in mobile user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(isDisplayed()))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(not(isDisplayed())))\n+\n+        // Toggle switch\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Verify that we're now in web user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(not(isDisplayed())))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(isDisplayed()))\n+\n+        // Switch back to mobile auth view\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Test getting app list for a mobile user\n+        onView(withId(R.id.edit_username))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+        closeSoftKeyboard()\n+        onView(withId(R.id.edit_domain))\n+                .perform(typeText(\"commcare-tests\"))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.edit_password))\n+                .perform(typeText(\"123\"))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.get_apps_button))\n+                .perform(click())\n+\n+        // Check that all the apps belong to commcare-tests domain\n+        for (position in 0 until getAppListSize()) {\n+            InstrumentationUtility.getSubViewInListItem(R.id.apps_list_view, position, R.id.domain)\n+                    .check(matches(withText(\"commcare-tests\")))\n+        }\n+\n+        // Check the app names\n+        matchAppInAppList(\"Case callout test for Simprints\")\n+        matchAppInAppList(\"Case Search and Claim\")\n+        matchAppInAppList(\"Integration Tests\")\n+\n+        // Install 1 of the apps\n+        onView(withText(\"Case Search and Claim\"))\n+                .perform(click())\n+\n+        assert(CommCareApplication.instance().currentApp != null, \"App is null\")\n+        assert(CommCareApplication.instance().currentApp.appRecord.displayName == \"Case Search and Claim\", \"App didn't match\")\n+    }\n+\n+    @Test\n+    fun testAppInstall_usingWebWorkerDetails() {\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        // Confirm the activity\n+        intended(hasComponent(InstallFromListActivity::class.java.name))\n+\n+        // Verify that we start out in mobile user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(isDisplayed()))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(not(isDisplayed())))\n+\n+        // Toggle switch\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Verify that we're now in web user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(not(isDisplayed())))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(isDisplayed()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDc0MzcyOnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppInstallationTest.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzowMjo0NFrOG_UXxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOToyMDozNFrOHBg-BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0NzIzNg==", "bodyText": "what's the reason that are we not simply touching the text as we are doing above in the testAppInstall_usingMobieWorkerDetails", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r469047236", "createdAt": "2020-08-12T07:02:44Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppInstallationTest.kt", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.commcare.androidTests\n+\n+import android.widget.ListView\n+import androidx.test.espresso.Espresso.closeSoftKeyboard\n+import androidx.test.espresso.Espresso.onView\n+import androidx.test.espresso.Espresso.onData\n+import androidx.test.espresso.action.ViewActions.*\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.intent.Intents.intended\n+import androidx.test.espresso.intent.matcher.IntentMatchers.hasComponent\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import junit.framework.Assert.fail\n+import org.commcare.CommCareApplication\n+import org.commcare.CommCareInstrumentationTestApplication\n+import org.commcare.activities.InstallFromListActivity\n+import org.commcare.android.database.global.models.AppAvailableToInstall\n+import org.commcare.dalvik.BuildConfig\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Description\n+import org.hamcrest.Matchers.*\n+import org.hamcrest.TypeSafeMatcher\n+import org.junit.After\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppInstallationTest: BaseTest() {\n+\n+    @After\n+    fun setup() {\n+        // Uninstall app.\n+        InstrumentationUtility.uninstallCurrentApp()\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for Another User\"))\n+                .perform(click())\n+    }\n+\n+    @Test\n+    fun testAppInstall_usingMobieWorkerDetails() {\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        // Confirm the activity\n+        intended(hasComponent(InstallFromListActivity::class.java.name))\n+\n+        // Verify that we start out in mobile user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(isDisplayed()))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(not(isDisplayed())))\n+\n+        // Toggle switch\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Verify that we're now in web user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(not(isDisplayed())))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(isDisplayed()))\n+\n+        // Switch back to mobile auth view\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Test getting app list for a mobile user\n+        onView(withId(R.id.edit_username))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+        closeSoftKeyboard()\n+        onView(withId(R.id.edit_domain))\n+                .perform(typeText(\"commcare-tests\"))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.edit_password))\n+                .perform(typeText(\"123\"))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.get_apps_button))\n+                .perform(click())\n+\n+        // Check that all the apps belong to commcare-tests domain\n+        for (position in 0 until getAppListSize()) {\n+            InstrumentationUtility.getSubViewInListItem(R.id.apps_list_view, position, R.id.domain)\n+                    .check(matches(withText(\"commcare-tests\")))\n+        }\n+\n+        // Check the app names\n+        matchAppInAppList(\"Case callout test for Simprints\")\n+        matchAppInAppList(\"Case Search and Claim\")\n+        matchAppInAppList(\"Integration Tests\")\n+\n+        // Install 1 of the apps\n+        onView(withText(\"Case Search and Claim\"))\n+                .perform(click())\n+\n+        assert(CommCareApplication.instance().currentApp != null, \"App is null\")\n+        assert(CommCareApplication.instance().currentApp.appRecord.displayName == \"Case Search and Claim\", \"App didn't match\")\n+    }\n+\n+    @Test\n+    fun testAppInstall_usingWebWorkerDetails() {\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        // Confirm the activity\n+        intended(hasComponent(InstallFromListActivity::class.java.name))\n+\n+        // Verify that we start out in mobile user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(isDisplayed()))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(not(isDisplayed())))\n+\n+        // Toggle switch\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Verify that we're now in web user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(not(isDisplayed())))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(isDisplayed()))\n+\n+        // Test getting app list for a mobile user\n+        onView(withId(R.id.edit_email))\n+                .perform(typeText(BuildConfig.HQ_API_USERNAME))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.edit_password))\n+                .perform(typeText(BuildConfig.HQ_API_PASSWORD))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.get_apps_button))\n+                .perform(click())\n+\n+        // Check that we see each of the apps in this domain, plus the domain name\n+        for (position in 0 until getAppListSize()) {\n+            InstrumentationUtility.getSubViewInListItem(R.id.apps_list_view, position, R.id.domain)\n+                    .check(matches(anyOf(withText(\"commcare-tests\"), withText(\"swat\"))))\n+        }\n+\n+        matchAppInAppList(\"Case callout test for Simprints\")\n+        matchAppInAppList(\"Case Search and Claim\")\n+        matchAppInAppList(\"Demo - Form Design Patterns\")\n+        matchAppInAppList(\"Demo - Live XForm Examples\")\n+        matchAppInAppList(\"SWAT: CommCare Projects Phone Survey\")\n+        matchAppInAppList(\"SWAT: App Tracker\")\n+\n+        // Install 1 of the apps\n+        onData(allOf(`is`(instanceOf(AppAvailableToInstall::class.java)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM1MDc4OQ==", "bodyText": "Ohh, actually this one's a better way to click a list item, as this will automatically scroll the list if the item is not yet visible. The above one simply clicks the view in the screen, and I forgot to update the above one, though it works cuz the list isn't big.\nSo I'll update the above one to use onData utility.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r471350789", "createdAt": "2020-08-17T09:20:34Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppInstallationTest.kt", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.commcare.androidTests\n+\n+import android.widget.ListView\n+import androidx.test.espresso.Espresso.closeSoftKeyboard\n+import androidx.test.espresso.Espresso.onView\n+import androidx.test.espresso.Espresso.onData\n+import androidx.test.espresso.action.ViewActions.*\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.intent.Intents.intended\n+import androidx.test.espresso.intent.matcher.IntentMatchers.hasComponent\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import junit.framework.Assert.fail\n+import org.commcare.CommCareApplication\n+import org.commcare.CommCareInstrumentationTestApplication\n+import org.commcare.activities.InstallFromListActivity\n+import org.commcare.android.database.global.models.AppAvailableToInstall\n+import org.commcare.dalvik.BuildConfig\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Description\n+import org.hamcrest.Matchers.*\n+import org.hamcrest.TypeSafeMatcher\n+import org.junit.After\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppInstallationTest: BaseTest() {\n+\n+    @After\n+    fun setup() {\n+        // Uninstall app.\n+        InstrumentationUtility.uninstallCurrentApp()\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for Another User\"))\n+                .perform(click())\n+    }\n+\n+    @Test\n+    fun testAppInstall_usingMobieWorkerDetails() {\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        // Confirm the activity\n+        intended(hasComponent(InstallFromListActivity::class.java.name))\n+\n+        // Verify that we start out in mobile user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(isDisplayed()))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(not(isDisplayed())))\n+\n+        // Toggle switch\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Verify that we're now in web user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(not(isDisplayed())))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(isDisplayed()))\n+\n+        // Switch back to mobile auth view\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Test getting app list for a mobile user\n+        onView(withId(R.id.edit_username))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+        closeSoftKeyboard()\n+        onView(withId(R.id.edit_domain))\n+                .perform(typeText(\"commcare-tests\"))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.edit_password))\n+                .perform(typeText(\"123\"))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.get_apps_button))\n+                .perform(click())\n+\n+        // Check that all the apps belong to commcare-tests domain\n+        for (position in 0 until getAppListSize()) {\n+            InstrumentationUtility.getSubViewInListItem(R.id.apps_list_view, position, R.id.domain)\n+                    .check(matches(withText(\"commcare-tests\")))\n+        }\n+\n+        // Check the app names\n+        matchAppInAppList(\"Case callout test for Simprints\")\n+        matchAppInAppList(\"Case Search and Claim\")\n+        matchAppInAppList(\"Integration Tests\")\n+\n+        // Install 1 of the apps\n+        onView(withText(\"Case Search and Claim\"))\n+                .perform(click())\n+\n+        assert(CommCareApplication.instance().currentApp != null, \"App is null\")\n+        assert(CommCareApplication.instance().currentApp.appRecord.displayName == \"Case Search and Claim\", \"App didn't match\")\n+    }\n+\n+    @Test\n+    fun testAppInstall_usingWebWorkerDetails() {\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        // Confirm the activity\n+        intended(hasComponent(InstallFromListActivity::class.java.name))\n+\n+        // Verify that we start out in mobile user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(isDisplayed()))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(not(isDisplayed())))\n+\n+        // Toggle switch\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Verify that we're now in web user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(not(isDisplayed())))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(isDisplayed()))\n+\n+        // Test getting app list for a mobile user\n+        onView(withId(R.id.edit_email))\n+                .perform(typeText(BuildConfig.HQ_API_USERNAME))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.edit_password))\n+                .perform(typeText(BuildConfig.HQ_API_PASSWORD))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.get_apps_button))\n+                .perform(click())\n+\n+        // Check that we see each of the apps in this domain, plus the domain name\n+        for (position in 0 until getAppListSize()) {\n+            InstrumentationUtility.getSubViewInListItem(R.id.apps_list_view, position, R.id.domain)\n+                    .check(matches(anyOf(withText(\"commcare-tests\"), withText(\"swat\"))))\n+        }\n+\n+        matchAppInAppList(\"Case callout test for Simprints\")\n+        matchAppInAppList(\"Case Search and Claim\")\n+        matchAppInAppList(\"Demo - Form Design Patterns\")\n+        matchAppInAppList(\"Demo - Live XForm Examples\")\n+        matchAppInAppList(\"SWAT: CommCare Projects Phone Survey\")\n+        matchAppInAppList(\"SWAT: App Tracker\")\n+\n+        // Install 1 of the apps\n+        onData(allOf(`is`(instanceOf(AppAvailableToInstall::class.java)),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0NzIzNg=="}, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDc0OTYzOnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppInstallationTest.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzowNDo0OFrOG_UbTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzowNDo0OFrOG_UbTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0ODE0Mg==", "bodyText": "this would be useful in all the tests and should move out to a util class", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r469048142", "createdAt": "2020-08-12T07:04:48Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppInstallationTest.kt", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.commcare.androidTests\n+\n+import android.widget.ListView\n+import androidx.test.espresso.Espresso.closeSoftKeyboard\n+import androidx.test.espresso.Espresso.onView\n+import androidx.test.espresso.Espresso.onData\n+import androidx.test.espresso.action.ViewActions.*\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.intent.Intents.intended\n+import androidx.test.espresso.intent.matcher.IntentMatchers.hasComponent\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import junit.framework.Assert.fail\n+import org.commcare.CommCareApplication\n+import org.commcare.CommCareInstrumentationTestApplication\n+import org.commcare.activities.InstallFromListActivity\n+import org.commcare.android.database.global.models.AppAvailableToInstall\n+import org.commcare.dalvik.BuildConfig\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Description\n+import org.hamcrest.Matchers.*\n+import org.hamcrest.TypeSafeMatcher\n+import org.junit.After\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppInstallationTest: BaseTest() {\n+\n+    @After\n+    fun setup() {\n+        // Uninstall app.\n+        InstrumentationUtility.uninstallCurrentApp()\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for Another User\"))\n+                .perform(click())\n+    }\n+\n+    @Test\n+    fun testAppInstall_usingMobieWorkerDetails() {\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        // Confirm the activity\n+        intended(hasComponent(InstallFromListActivity::class.java.name))\n+\n+        // Verify that we start out in mobile user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(isDisplayed()))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(not(isDisplayed())))\n+\n+        // Toggle switch\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Verify that we're now in web user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(not(isDisplayed())))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(isDisplayed()))\n+\n+        // Switch back to mobile auth view\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Test getting app list for a mobile user\n+        onView(withId(R.id.edit_username))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+        closeSoftKeyboard()\n+        onView(withId(R.id.edit_domain))\n+                .perform(typeText(\"commcare-tests\"))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.edit_password))\n+                .perform(typeText(\"123\"))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.get_apps_button))\n+                .perform(click())\n+\n+        // Check that all the apps belong to commcare-tests domain\n+        for (position in 0 until getAppListSize()) {\n+            InstrumentationUtility.getSubViewInListItem(R.id.apps_list_view, position, R.id.domain)\n+                    .check(matches(withText(\"commcare-tests\")))\n+        }\n+\n+        // Check the app names\n+        matchAppInAppList(\"Case callout test for Simprints\")\n+        matchAppInAppList(\"Case Search and Claim\")\n+        matchAppInAppList(\"Integration Tests\")\n+\n+        // Install 1 of the apps\n+        onView(withText(\"Case Search and Claim\"))\n+                .perform(click())\n+\n+        assert(CommCareApplication.instance().currentApp != null, \"App is null\")\n+        assert(CommCareApplication.instance().currentApp.appRecord.displayName == \"Case Search and Claim\", \"App didn't match\")\n+    }\n+\n+    @Test\n+    fun testAppInstall_usingWebWorkerDetails() {\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"See Apps for My User\"))\n+                .perform(click())\n+        // Confirm the activity\n+        intended(hasComponent(InstallFromListActivity::class.java.name))\n+\n+        // Verify that we start out in mobile user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(isDisplayed()))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(not(isDisplayed())))\n+\n+        // Toggle switch\n+        onView(withClassName(endsWith(\"Switch\")))\n+                .perform(click())\n+\n+        // Verify that we're now in web user auth mode\n+        onView(withId(R.id.edit_domain))\n+                .check(matches(not(isDisplayed())))\n+        onView(withId(R.id.edit_email))\n+                .check(matches(isDisplayed()))\n+\n+        // Test getting app list for a mobile user\n+        onView(withId(R.id.edit_email))\n+                .perform(typeText(BuildConfig.HQ_API_USERNAME))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.edit_password))\n+                .perform(typeText(BuildConfig.HQ_API_PASSWORD))\n+        closeSoftKeyboard()\n+        onView(withId(R.id.get_apps_button))\n+                .perform(click())\n+\n+        // Check that we see each of the apps in this domain, plus the domain name\n+        for (position in 0 until getAppListSize()) {\n+            InstrumentationUtility.getSubViewInListItem(R.id.apps_list_view, position, R.id.domain)\n+                    .check(matches(anyOf(withText(\"commcare-tests\"), withText(\"swat\"))))\n+        }\n+\n+        matchAppInAppList(\"Case callout test for Simprints\")\n+        matchAppInAppList(\"Case Search and Claim\")\n+        matchAppInAppList(\"Demo - Form Design Patterns\")\n+        matchAppInAppList(\"Demo - Live XForm Examples\")\n+        matchAppInAppList(\"SWAT: CommCare Projects Phone Survey\")\n+        matchAppInAppList(\"SWAT: App Tracker\")\n+\n+        // Install 1 of the apps\n+        onData(allOf(`is`(instanceOf(AppAvailableToInstall::class.java)),\n+                withAppName(\"SWAT: App Tracker\")))\n+                .perform(click())\n+\n+        assert(CommCareApplication.instance().currentApp != null, \"App is null\")\n+        assert(CommCareApplication.instance().currentApp.appRecord.displayName == \"SWAT: App Tracker\", \"App didn't match\")\n+    }\n+\n+    private fun withAppName(appName: String): TypeSafeMatcher<AppAvailableToInstall> {\n+        return object: TypeSafeMatcher<AppAvailableToInstall>() {\n+            override fun describeTo(description: Description) {\n+                description.appendText(\"will match if $appName is present in the App List\")\n+            }\n+\n+            override fun matchesSafely(item: AppAvailableToInstall): Boolean {\n+                return item.appName == appName\n+            }\n+\n+        }\n+    }\n+\n+    private fun matchAppInAppList(appName: String) {\n+        onData(allOf(`is`(instanceOf(AppAvailableToInstall::class.java)),\n+                withAppName(appName)))\n+                .check(matches(isDisplayed()))\n+    }\n+\n+    private fun getAppListSize(): Int {\n+        val application = InstrumentationRegistry.getInstrumentation().targetContext.applicationContext\n+                as CommCareInstrumentationTestApplication\n+        var activity = application.currentActivity as InstallFromListActivity<*>\n+        val listView = activity.findViewById<ListView>(R.id.apps_list_view)\n+        return listView.adapter.count\n+    }\n+}\n+/**\n+ * A workaround to Failed resolution of: Lkotlin/_Assertions;\n+ * This will fail the test if the value is false.\n+ */\n+public fun assert(value: Boolean, failMsg: String) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDc1NTU2OnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzowNjo0OVrOG_UfAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzowNjo0OVrOG_UfAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0OTA4OA==", "bodyText": "I didn't realize you have swtiched to Kotlin for tests in this PR untill I saw companion \ud83d\udcaf", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r469049088", "createdAt": "2020-08-12T07:06:49Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "diffHunk": "@@ -0,0 +1,195 @@\n+package org.commcare.androidTests\n+\n+import android.content.Context\n+import android.net.wifi.WifiManager\n+import android.os.Build\n+import androidx.test.espresso.Espresso.*\n+import androidx.test.espresso.action.ViewActions.click\n+import androidx.test.espresso.assertion.ViewAssertions.doesNotExist\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Matchers.endsWith\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppUpdateTest: BaseTest() {\n+\n+    companion object {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDc3NzcwOnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoxMzo1OFrOG_UsTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoxMzo1OFrOG_UsTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1MjQ5Mg==", "bodyText": "we should have a function to go back to the home activity which just presses back until home activity", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r469052492", "createdAt": "2020-08-12T07:13:58Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "diffHunk": "@@ -0,0 +1,195 @@\n+package org.commcare.androidTests\n+\n+import android.content.Context\n+import android.net.wifi.WifiManager\n+import android.os.Build\n+import androidx.test.espresso.Espresso.*\n+import androidx.test.espresso.action.ViewActions.click\n+import androidx.test.espresso.assertion.ViewAssertions.doesNotExist\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Matchers.endsWith\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppUpdateTest: BaseTest() {\n+\n+    companion object {\n+        const val CCZ_NAME = \"app_update.ccz\"\n+        const val APP_NAME = \"Update Test\"\n+    }\n+\n+    @Before\n+    fun setup() {\n+        installApp(APP_NAME, CCZ_NAME)\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+    }\n+\n+    @Test\n+    fun testAppUpdate() {\n+        InstrumentationUtility.enableDeveloperMode()\n+        // Enable app update item.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Settings\"))\n+                .perform(click())\n+        onView(withText(\"Developer Options\"))\n+                .perform(click())\n+        onView(withText(\"Show Update Options Item\"))\n+                .perform(click())\n+        onView(withText(\"Enabled\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // Make sure the update endpoint is set to \"Latest starred version\"\n+        onView(withText(\"Update Options\"))\n+                .perform(click())\n+        onView(withText(\"Latest starred version\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // check base form content\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module Three\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Module One\"))\n+                .perform(click())\n+        onView(withText(\"Example 1\"))\n+                .perform(click())\n+        onView(withText(\"A text question\"))\n+                .check(matches(isDisplayed()))\n+        closeSoftKeyboard()\n+        pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        pressBack()\n+\n+        // make sure case list doesn't have status column\n+        onView(withText(\"Module Two\"))\n+                .perform(click())\n+        onView(withText(\"Update Case\"))\n+                .perform(click())\n+        onView(withText(\"Status\"))\n+                .check(doesNotExist())\n+        pressBack()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDc4NjA2OnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoxNjozMVrOG_UxQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMjozOTowOVrOHDFbBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1Mzc2MA==", "bodyText": "I see the calabsh test for this is running some rotation checks here along with a test to see if the update progress is saved when we come back to the update screen. Those are critical update behaviours that should be tested as part of this test.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r469053760", "createdAt": "2020-08-12T07:16:31Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "diffHunk": "@@ -0,0 +1,195 @@\n+package org.commcare.androidTests\n+\n+import android.content.Context\n+import android.net.wifi.WifiManager\n+import android.os.Build\n+import androidx.test.espresso.Espresso.*\n+import androidx.test.espresso.action.ViewActions.click\n+import androidx.test.espresso.assertion.ViewAssertions.doesNotExist\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Matchers.endsWith\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppUpdateTest: BaseTest() {\n+\n+    companion object {\n+        const val CCZ_NAME = \"app_update.ccz\"\n+        const val APP_NAME = \"Update Test\"\n+    }\n+\n+    @Before\n+    fun setup() {\n+        installApp(APP_NAME, CCZ_NAME)\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+    }\n+\n+    @Test\n+    fun testAppUpdate() {\n+        InstrumentationUtility.enableDeveloperMode()\n+        // Enable app update item.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Settings\"))\n+                .perform(click())\n+        onView(withText(\"Developer Options\"))\n+                .perform(click())\n+        onView(withText(\"Show Update Options Item\"))\n+                .perform(click())\n+        onView(withText(\"Enabled\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // Make sure the update endpoint is set to \"Latest starred version\"\n+        onView(withText(\"Update Options\"))\n+                .perform(click())\n+        onView(withText(\"Latest starred version\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // check base form content\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module Three\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Module One\"))\n+                .perform(click())\n+        onView(withText(\"Example 1\"))\n+                .perform(click())\n+        onView(withText(\"A text question\"))\n+                .check(matches(isDisplayed()))\n+        closeSoftKeyboard()\n+        pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        pressBack()\n+\n+        // make sure case list doesn't have status column\n+        onView(withText(\"Module Two\"))\n+                .perform(click())\n+        onView(withText(\"Update Case\"))\n+                .perform(click())\n+        onView(withText(\"Status\"))\n+                .check(doesNotExist())\n+        pressBack()\n+        pressBack()\n+        pressBack()\n+\n+        // download the app update\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 2\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 11 & log out\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM1MTkwMw==", "bodyText": "Ahh okay. One of the reasons I didn't do it is because espresso doesn't support rotating devices. I'll use uiautomator to rotate the device.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r471351903", "createdAt": "2020-08-17T09:22:36Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "diffHunk": "@@ -0,0 +1,195 @@\n+package org.commcare.androidTests\n+\n+import android.content.Context\n+import android.net.wifi.WifiManager\n+import android.os.Build\n+import androidx.test.espresso.Espresso.*\n+import androidx.test.espresso.action.ViewActions.click\n+import androidx.test.espresso.assertion.ViewAssertions.doesNotExist\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Matchers.endsWith\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppUpdateTest: BaseTest() {\n+\n+    companion object {\n+        const val CCZ_NAME = \"app_update.ccz\"\n+        const val APP_NAME = \"Update Test\"\n+    }\n+\n+    @Before\n+    fun setup() {\n+        installApp(APP_NAME, CCZ_NAME)\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+    }\n+\n+    @Test\n+    fun testAppUpdate() {\n+        InstrumentationUtility.enableDeveloperMode()\n+        // Enable app update item.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Settings\"))\n+                .perform(click())\n+        onView(withText(\"Developer Options\"))\n+                .perform(click())\n+        onView(withText(\"Show Update Options Item\"))\n+                .perform(click())\n+        onView(withText(\"Enabled\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // Make sure the update endpoint is set to \"Latest starred version\"\n+        onView(withText(\"Update Options\"))\n+                .perform(click())\n+        onView(withText(\"Latest starred version\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // check base form content\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module Three\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Module One\"))\n+                .perform(click())\n+        onView(withText(\"Example 1\"))\n+                .perform(click())\n+        onView(withText(\"A text question\"))\n+                .check(matches(isDisplayed()))\n+        closeSoftKeyboard()\n+        pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        pressBack()\n+\n+        // make sure case list doesn't have status column\n+        onView(withText(\"Module Two\"))\n+                .perform(click())\n+        onView(withText(\"Update Case\"))\n+                .perform(click())\n+        onView(withText(\"Status\"))\n+                .check(doesNotExist())\n+        pressBack()\n+        pressBack()\n+        pressBack()\n+\n+        // download the app update\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 2\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 11 & log out\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1Mzc2MA=="}, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk4ODI2OA==", "bodyText": "@shubham1g5 I came back to this today, and I guess you're hinting at stopping the update in between.\nAnd I don't think it's possible to click on the stop button(since espresso is gonna wait for the update to finish before doing any operation) \ud83d\ude05\nI'll try to do it using internal commcare methods maybe, but yeah just an FYI.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r472988268", "createdAt": "2020-08-19T12:24:42Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "diffHunk": "@@ -0,0 +1,195 @@\n+package org.commcare.androidTests\n+\n+import android.content.Context\n+import android.net.wifi.WifiManager\n+import android.os.Build\n+import androidx.test.espresso.Espresso.*\n+import androidx.test.espresso.action.ViewActions.click\n+import androidx.test.espresso.assertion.ViewAssertions.doesNotExist\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Matchers.endsWith\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppUpdateTest: BaseTest() {\n+\n+    companion object {\n+        const val CCZ_NAME = \"app_update.ccz\"\n+        const val APP_NAME = \"Update Test\"\n+    }\n+\n+    @Before\n+    fun setup() {\n+        installApp(APP_NAME, CCZ_NAME)\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+    }\n+\n+    @Test\n+    fun testAppUpdate() {\n+        InstrumentationUtility.enableDeveloperMode()\n+        // Enable app update item.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Settings\"))\n+                .perform(click())\n+        onView(withText(\"Developer Options\"))\n+                .perform(click())\n+        onView(withText(\"Show Update Options Item\"))\n+                .perform(click())\n+        onView(withText(\"Enabled\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // Make sure the update endpoint is set to \"Latest starred version\"\n+        onView(withText(\"Update Options\"))\n+                .perform(click())\n+        onView(withText(\"Latest starred version\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // check base form content\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module Three\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Module One\"))\n+                .perform(click())\n+        onView(withText(\"Example 1\"))\n+                .perform(click())\n+        onView(withText(\"A text question\"))\n+                .check(matches(isDisplayed()))\n+        closeSoftKeyboard()\n+        pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        pressBack()\n+\n+        // make sure case list doesn't have status column\n+        onView(withText(\"Module Two\"))\n+                .perform(click())\n+        onView(withText(\"Update Case\"))\n+                .perform(click())\n+        onView(withText(\"Status\"))\n+                .check(doesNotExist())\n+        pressBack()\n+        pressBack()\n+        pressBack()\n+\n+        // download the app update\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 2\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 11 & log out\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1Mzc2MA=="}, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk5NjYxMw==", "bodyText": "Interestingly, I never removed this stuff \ud83e\udd23 \n  \n    \n      commcare-android/app/instrumentation-tests/AndroidManifest.xml\n    \n    \n         Line 6\n      in\n      ce581c3\n    \n    \n    \n    \n\n        \n          \n           <uses-sdk tools:overrideLibrary=\"android_libs.ub_uiautomator\"/>", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r472996613", "createdAt": "2020-08-19T12:39:09Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "diffHunk": "@@ -0,0 +1,195 @@\n+package org.commcare.androidTests\n+\n+import android.content.Context\n+import android.net.wifi.WifiManager\n+import android.os.Build\n+import androidx.test.espresso.Espresso.*\n+import androidx.test.espresso.action.ViewActions.click\n+import androidx.test.espresso.assertion.ViewAssertions.doesNotExist\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Matchers.endsWith\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppUpdateTest: BaseTest() {\n+\n+    companion object {\n+        const val CCZ_NAME = \"app_update.ccz\"\n+        const val APP_NAME = \"Update Test\"\n+    }\n+\n+    @Before\n+    fun setup() {\n+        installApp(APP_NAME, CCZ_NAME)\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+    }\n+\n+    @Test\n+    fun testAppUpdate() {\n+        InstrumentationUtility.enableDeveloperMode()\n+        // Enable app update item.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Settings\"))\n+                .perform(click())\n+        onView(withText(\"Developer Options\"))\n+                .perform(click())\n+        onView(withText(\"Show Update Options Item\"))\n+                .perform(click())\n+        onView(withText(\"Enabled\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // Make sure the update endpoint is set to \"Latest starred version\"\n+        onView(withText(\"Update Options\"))\n+                .perform(click())\n+        onView(withText(\"Latest starred version\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // check base form content\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module Three\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Module One\"))\n+                .perform(click())\n+        onView(withText(\"Example 1\"))\n+                .perform(click())\n+        onView(withText(\"A text question\"))\n+                .check(matches(isDisplayed()))\n+        closeSoftKeyboard()\n+        pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        pressBack()\n+\n+        // make sure case list doesn't have status column\n+        onView(withText(\"Module Two\"))\n+                .perform(click())\n+        onView(withText(\"Update Case\"))\n+                .perform(click())\n+        onView(withText(\"Status\"))\n+                .check(doesNotExist())\n+        pressBack()\n+        pressBack()\n+        pressBack()\n+\n+        // download the app update\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 2\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 11 & log out\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1Mzc2MA=="}, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDgwNTcxOnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoyMjoyM1rOG_U9AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoyMjoyM1rOG_U9AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1Njc2OA==", "bodyText": "should be implemented.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r469056768", "createdAt": "2020-08-12T07:22:23Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "diffHunk": "@@ -0,0 +1,195 @@\n+package org.commcare.androidTests\n+\n+import android.content.Context\n+import android.net.wifi.WifiManager\n+import android.os.Build\n+import androidx.test.espresso.Espresso.*\n+import androidx.test.espresso.action.ViewActions.click\n+import androidx.test.espresso.assertion.ViewAssertions.doesNotExist\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Matchers.endsWith\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppUpdateTest: BaseTest() {\n+\n+    companion object {\n+        const val CCZ_NAME = \"app_update.ccz\"\n+        const val APP_NAME = \"Update Test\"\n+    }\n+\n+    @Before\n+    fun setup() {\n+        installApp(APP_NAME, CCZ_NAME)\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+    }\n+\n+    @Test\n+    fun testAppUpdate() {\n+        InstrumentationUtility.enableDeveloperMode()\n+        // Enable app update item.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Settings\"))\n+                .perform(click())\n+        onView(withText(\"Developer Options\"))\n+                .perform(click())\n+        onView(withText(\"Show Update Options Item\"))\n+                .perform(click())\n+        onView(withText(\"Enabled\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // Make sure the update endpoint is set to \"Latest starred version\"\n+        onView(withText(\"Update Options\"))\n+                .perform(click())\n+        onView(withText(\"Latest starred version\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // check base form content\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module Three\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Module One\"))\n+                .perform(click())\n+        onView(withText(\"Example 1\"))\n+                .perform(click())\n+        onView(withText(\"A text question\"))\n+                .check(matches(isDisplayed()))\n+        closeSoftKeyboard()\n+        pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        pressBack()\n+\n+        // make sure case list doesn't have status column\n+        onView(withText(\"Module Two\"))\n+                .perform(click())\n+        onView(withText(\"Update Case\"))\n+                .perform(click())\n+        onView(withText(\"Status\"))\n+                .check(doesNotExist())\n+        pressBack()\n+        pressBack()\n+        pressBack()\n+\n+        // download the app update\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 2\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 11 & log out\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 11 & log out\"))\n+                .perform(click())\n+\n+        // Login into the updated version\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+\n+        //TODO check that a sync is triggered automatically", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDgyMjE4OnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoyNzoyMVrOG_VG3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOToyMzoxOFrOHBhDyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1OTI5Mg==", "bodyText": "are there other espresso APIs that let you turn on and off internet, our end goal here is to be able to simulate internet on and off on the device.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r469059292", "createdAt": "2020-08-12T07:27:21Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "diffHunk": "@@ -0,0 +1,195 @@\n+package org.commcare.androidTests\n+\n+import android.content.Context\n+import android.net.wifi.WifiManager\n+import android.os.Build\n+import androidx.test.espresso.Espresso.*\n+import androidx.test.espresso.action.ViewActions.click\n+import androidx.test.espresso.assertion.ViewAssertions.doesNotExist\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Matchers.endsWith\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppUpdateTest: BaseTest() {\n+\n+    companion object {\n+        const val CCZ_NAME = \"app_update.ccz\"\n+        const val APP_NAME = \"Update Test\"\n+    }\n+\n+    @Before\n+    fun setup() {\n+        installApp(APP_NAME, CCZ_NAME)\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+    }\n+\n+    @Test\n+    fun testAppUpdate() {\n+        InstrumentationUtility.enableDeveloperMode()\n+        // Enable app update item.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Settings\"))\n+                .perform(click())\n+        onView(withText(\"Developer Options\"))\n+                .perform(click())\n+        onView(withText(\"Show Update Options Item\"))\n+                .perform(click())\n+        onView(withText(\"Enabled\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // Make sure the update endpoint is set to \"Latest starred version\"\n+        onView(withText(\"Update Options\"))\n+                .perform(click())\n+        onView(withText(\"Latest starred version\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // check base form content\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module Three\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Module One\"))\n+                .perform(click())\n+        onView(withText(\"Example 1\"))\n+                .perform(click())\n+        onView(withText(\"A text question\"))\n+                .check(matches(isDisplayed()))\n+        closeSoftKeyboard()\n+        pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        pressBack()\n+\n+        // make sure case list doesn't have status column\n+        onView(withText(\"Module Two\"))\n+                .perform(click())\n+        onView(withText(\"Update Case\"))\n+                .perform(click())\n+        onView(withText(\"Status\"))\n+                .check(doesNotExist())\n+        pressBack()\n+        pressBack()\n+        pressBack()\n+\n+        // download the app update\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 2\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 11 & log out\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 11 & log out\"))\n+                .perform(click())\n+\n+        // Login into the updated version\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+\n+        //TODO check that a sync is triggered automatically\n+\n+        // Check updated data, including multimedia\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module Three\"))\n+                .check(doesNotExist())\n+        onView(withText(\"Module One\"))\n+                .perform(click())\n+        onView(withText(\"Example 1\"))\n+                .perform(click())\n+        onView(withText(\"Question with audio\"))\n+                .check(matches(isDisplayed()))\n+        onView(withClassName(endsWith(\"AudioPlaybackButton\")))\n+                .check(matches(isDisplayed()))\n+        closeSoftKeyboard()\n+        pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        pressBack()\n+\n+        // make sure case list `Status` column was added\n+        onView(withText(\"Module Two\"))\n+                .perform(click())\n+        onView(withText(\"Update Case\"))\n+                .perform(click())\n+        onView(withText(\"Status\"))\n+                .check(matches(isDisplayed()))\n+        pressBack()\n+        pressBack()\n+        pressBack()\n+\n+        // make sure there are no new updates\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 11\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Recheck\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 11\"))\n+                .check(matches(isDisplayed()))\n+        pressBack()\n+\n+        // Change the update endpoint to \"Latest version\"\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Settings\"))\n+                .perform(click())\n+        onView(withText(\"Update Options\"))\n+                .perform(click())\n+        onView(withText(\"Latest version\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // Confirm that you can now see an update. And Update the app.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Update to version 22 & log out\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 22 & log out\"))\n+                .perform(click())\n+\n+        // Login again\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+        //TODO Check that sync is triggered automatically\n+\n+        // Check updates in base form\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module One, renamed\"))\n+                .check(matches(isDisplayed()))\n+        pressBack()\n+\n+        // The below tests will only work on a pre-android Q device.\n+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {\n+            changeWifi(false)\n+            InstrumentationUtility.openOptionsMenu()\n+            onView(withText(\"Update App\"))\n+                    .perform(click())\n+            onView(withText(\"No network connectivity\"))\n+                    .perform(click())\n+            changeWifi(true)\n+        }\n+    }\n+\n+    /**\n+     * Starting with Android Q, applications are not allowed to enable/disable Wi-Fi.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM1MjI2NQ==", "bodyText": "I don't think there is such an API in espresso.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r471352265", "createdAt": "2020-08-17T09:23:18Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "diffHunk": "@@ -0,0 +1,195 @@\n+package org.commcare.androidTests\n+\n+import android.content.Context\n+import android.net.wifi.WifiManager\n+import android.os.Build\n+import androidx.test.espresso.Espresso.*\n+import androidx.test.espresso.action.ViewActions.click\n+import androidx.test.espresso.assertion.ViewAssertions.doesNotExist\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Matchers.endsWith\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppUpdateTest: BaseTest() {\n+\n+    companion object {\n+        const val CCZ_NAME = \"app_update.ccz\"\n+        const val APP_NAME = \"Update Test\"\n+    }\n+\n+    @Before\n+    fun setup() {\n+        installApp(APP_NAME, CCZ_NAME)\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+    }\n+\n+    @Test\n+    fun testAppUpdate() {\n+        InstrumentationUtility.enableDeveloperMode()\n+        // Enable app update item.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Settings\"))\n+                .perform(click())\n+        onView(withText(\"Developer Options\"))\n+                .perform(click())\n+        onView(withText(\"Show Update Options Item\"))\n+                .perform(click())\n+        onView(withText(\"Enabled\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // Make sure the update endpoint is set to \"Latest starred version\"\n+        onView(withText(\"Update Options\"))\n+                .perform(click())\n+        onView(withText(\"Latest starred version\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // check base form content\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module Three\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Module One\"))\n+                .perform(click())\n+        onView(withText(\"Example 1\"))\n+                .perform(click())\n+        onView(withText(\"A text question\"))\n+                .check(matches(isDisplayed()))\n+        closeSoftKeyboard()\n+        pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        pressBack()\n+\n+        // make sure case list doesn't have status column\n+        onView(withText(\"Module Two\"))\n+                .perform(click())\n+        onView(withText(\"Update Case\"))\n+                .perform(click())\n+        onView(withText(\"Status\"))\n+                .check(doesNotExist())\n+        pressBack()\n+        pressBack()\n+        pressBack()\n+\n+        // download the app update\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 2\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 11 & log out\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 11 & log out\"))\n+                .perform(click())\n+\n+        // Login into the updated version\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+\n+        //TODO check that a sync is triggered automatically\n+\n+        // Check updated data, including multimedia\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module Three\"))\n+                .check(doesNotExist())\n+        onView(withText(\"Module One\"))\n+                .perform(click())\n+        onView(withText(\"Example 1\"))\n+                .perform(click())\n+        onView(withText(\"Question with audio\"))\n+                .check(matches(isDisplayed()))\n+        onView(withClassName(endsWith(\"AudioPlaybackButton\")))\n+                .check(matches(isDisplayed()))\n+        closeSoftKeyboard()\n+        pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        pressBack()\n+\n+        // make sure case list `Status` column was added\n+        onView(withText(\"Module Two\"))\n+                .perform(click())\n+        onView(withText(\"Update Case\"))\n+                .perform(click())\n+        onView(withText(\"Status\"))\n+                .check(matches(isDisplayed()))\n+        pressBack()\n+        pressBack()\n+        pressBack()\n+\n+        // make sure there are no new updates\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 11\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Recheck\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 11\"))\n+                .check(matches(isDisplayed()))\n+        pressBack()\n+\n+        // Change the update endpoint to \"Latest version\"\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Settings\"))\n+                .perform(click())\n+        onView(withText(\"Update Options\"))\n+                .perform(click())\n+        onView(withText(\"Latest version\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // Confirm that you can now see an update. And Update the app.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Update to version 22 & log out\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 22 & log out\"))\n+                .perform(click())\n+\n+        // Login again\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+        //TODO Check that sync is triggered automatically\n+\n+        // Check updates in base form\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module One, renamed\"))\n+                .check(matches(isDisplayed()))\n+        pressBack()\n+\n+        // The below tests will only work on a pre-android Q device.\n+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {\n+            changeWifi(false)\n+            InstrumentationUtility.openOptionsMenu()\n+            onView(withText(\"Update App\"))\n+                    .perform(click())\n+            onView(withText(\"No network connectivity\"))\n+                    .perform(click())\n+            changeWifi(true)\n+        }\n+    }\n+\n+    /**\n+     * Starting with Android Q, applications are not allowed to enable/disable Wi-Fi.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1OTI5Mg=="}, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDgyMzg3OnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoyNzo1MlrOG_VH5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoyNzo1MlrOG_VH5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1OTU1Ng==", "bodyText": "should move to a util class.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r469059556", "createdAt": "2020-08-12T07:27:52Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "diffHunk": "@@ -0,0 +1,195 @@\n+package org.commcare.androidTests\n+\n+import android.content.Context\n+import android.net.wifi.WifiManager\n+import android.os.Build\n+import androidx.test.espresso.Espresso.*\n+import androidx.test.espresso.action.ViewActions.click\n+import androidx.test.espresso.assertion.ViewAssertions.doesNotExist\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Matchers.endsWith\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppUpdateTest: BaseTest() {\n+\n+    companion object {\n+        const val CCZ_NAME = \"app_update.ccz\"\n+        const val APP_NAME = \"Update Test\"\n+    }\n+\n+    @Before\n+    fun setup() {\n+        installApp(APP_NAME, CCZ_NAME)\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+    }\n+\n+    @Test\n+    fun testAppUpdate() {\n+        InstrumentationUtility.enableDeveloperMode()\n+        // Enable app update item.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Settings\"))\n+                .perform(click())\n+        onView(withText(\"Developer Options\"))\n+                .perform(click())\n+        onView(withText(\"Show Update Options Item\"))\n+                .perform(click())\n+        onView(withText(\"Enabled\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // Make sure the update endpoint is set to \"Latest starred version\"\n+        onView(withText(\"Update Options\"))\n+                .perform(click())\n+        onView(withText(\"Latest starred version\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // check base form content\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module Three\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Module One\"))\n+                .perform(click())\n+        onView(withText(\"Example 1\"))\n+                .perform(click())\n+        onView(withText(\"A text question\"))\n+                .check(matches(isDisplayed()))\n+        closeSoftKeyboard()\n+        pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        pressBack()\n+\n+        // make sure case list doesn't have status column\n+        onView(withText(\"Module Two\"))\n+                .perform(click())\n+        onView(withText(\"Update Case\"))\n+                .perform(click())\n+        onView(withText(\"Status\"))\n+                .check(doesNotExist())\n+        pressBack()\n+        pressBack()\n+        pressBack()\n+\n+        // download the app update\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 2\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 11 & log out\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 11 & log out\"))\n+                .perform(click())\n+\n+        // Login into the updated version\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+\n+        //TODO check that a sync is triggered automatically\n+\n+        // Check updated data, including multimedia\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module Three\"))\n+                .check(doesNotExist())\n+        onView(withText(\"Module One\"))\n+                .perform(click())\n+        onView(withText(\"Example 1\"))\n+                .perform(click())\n+        onView(withText(\"Question with audio\"))\n+                .check(matches(isDisplayed()))\n+        onView(withClassName(endsWith(\"AudioPlaybackButton\")))\n+                .check(matches(isDisplayed()))\n+        closeSoftKeyboard()\n+        pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        pressBack()\n+\n+        // make sure case list `Status` column was added\n+        onView(withText(\"Module Two\"))\n+                .perform(click())\n+        onView(withText(\"Update Case\"))\n+                .perform(click())\n+        onView(withText(\"Status\"))\n+                .check(matches(isDisplayed()))\n+        pressBack()\n+        pressBack()\n+        pressBack()\n+\n+        // make sure there are no new updates\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 11\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Recheck\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 11\"))\n+                .check(matches(isDisplayed()))\n+        pressBack()\n+\n+        // Change the update endpoint to \"Latest version\"\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Settings\"))\n+                .perform(click())\n+        onView(withText(\"Update Options\"))\n+                .perform(click())\n+        onView(withText(\"Latest version\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // Confirm that you can now see an update. And Update the app.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Update to version 22 & log out\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 22 & log out\"))\n+                .perform(click())\n+\n+        // Login again\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+        //TODO Check that sync is triggered automatically\n+\n+        // Check updates in base form\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module One, renamed\"))\n+                .check(matches(isDisplayed()))\n+        pressBack()\n+\n+        // The below tests will only work on a pre-android Q device.\n+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {\n+            changeWifi(false)\n+            InstrumentationUtility.openOptionsMenu()\n+            onView(withText(\"Update App\"))\n+                    .perform(click())\n+            onView(withText(\"No network connectivity\"))\n+                    .perform(click())\n+            changeWifi(true)\n+        }\n+    }\n+\n+    /**\n+     * Starting with Android Q, applications are not allowed to enable/disable Wi-Fi.\n+     */\n+    private fun changeWifi(enable: Boolean) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDgyOTE2OnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppInstallationTest.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoyOTozMVrOG_VLLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoyOTozMVrOG_VLLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA2MDM5Ng==", "bodyText": "An @After should not be called setup. You can use tearDown instead as the method name.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r469060396", "createdAt": "2020-08-12T07:29:31Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppInstallationTest.kt", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.commcare.androidTests\n+\n+import android.widget.ListView\n+import androidx.test.espresso.Espresso.closeSoftKeyboard\n+import androidx.test.espresso.Espresso.onView\n+import androidx.test.espresso.Espresso.onData\n+import androidx.test.espresso.action.ViewActions.*\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.intent.Intents.intended\n+import androidx.test.espresso.intent.matcher.IntentMatchers.hasComponent\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.platform.app.InstrumentationRegistry\n+import junit.framework.Assert.fail\n+import org.commcare.CommCareApplication\n+import org.commcare.CommCareInstrumentationTestApplication\n+import org.commcare.activities.InstallFromListActivity\n+import org.commcare.android.database.global.models.AppAvailableToInstall\n+import org.commcare.dalvik.BuildConfig\n+import org.commcare.dalvik.R\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Description\n+import org.hamcrest.Matchers.*\n+import org.hamcrest.TypeSafeMatcher\n+import org.junit.After\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppInstallationTest: BaseTest() {\n+\n+    @After\n+    fun setup() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDk1NTkxOnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/utils/InstrumentationUtility.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODowNjozMFrOG_WY7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODowNjozMFrOG_WY7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA4MDMwMg==", "bodyText": "nit: we should abstract these matcher functions into their own class.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r469080302", "createdAt": "2020-08-12T08:06:30Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/utils/InstrumentationUtility.java", "diffHunk": "@@ -211,6 +234,80 @@ public void describeTo(Description description) {\n         };\n     }\n \n+    /**\n+     * Matches the listView item count with the @param size\n+     * Note: Only works for listview.\n+     */\n+    public static Matcher<View> matchListSize(int size) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26deba4928cda04c911f0a9ae5e5caba6ac13d40"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTQ3MTk1OnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/CommCareInstrumentationTestApplication.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwNzoxMDowN1rOHFDMNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwNzo0Nzo0OFrOHFDXvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1NzIwNA==", "bodyText": "Can't we use SyncDetailCalculations.getLastSyncTime directly ?", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r475057204", "createdAt": "2020-08-22T07:10:07Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/CommCareInstrumentationTestApplication.java", "diffHunk": "@@ -64,6 +65,11 @@ public void onActivityDestroyed(@NonNull Activity activity) {\n     public Activity getCurrentActivity() {\n         return currentActivity;\n     }\n-    \n \n+    public static long getLastSyncTime(String userName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA2MDE1Ng==", "bodyText": "Nice, Didn't know it existed.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r475060156", "createdAt": "2020-08-22T07:47:48Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/instrumentation-tests/src/org/commcare/CommCareInstrumentationTestApplication.java", "diffHunk": "@@ -64,6 +65,11 @@ public void onActivityDestroyed(@NonNull Activity activity) {\n     public Activity getCurrentActivity() {\n         return currentActivity;\n     }\n-    \n \n+    public static long getLastSyncTime(String userName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1NzIwNA=="}, "originalCommit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTQ3NDU3OnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwNzoxNDowNFrOHFDNbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxMzoxMjozMlrOHFNAIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1NzUxOA==", "bodyText": "the sdk check should go inside the method changeWifi itself.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r475057518", "createdAt": "2020-08-22T07:14:04Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "diffHunk": "@@ -0,0 +1,209 @@\n+package org.commcare.androidTests\n+\n+import android.os.Build\n+import androidx.test.espresso.Espresso.*\n+import androidx.test.espresso.action.ViewActions.click\n+import androidx.test.espresso.assertion.ViewAssertions.doesNotExist\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import org.commcare.CommCareInstrumentationTestApplication\n+import org.commcare.dalvik.R\n+import org.commcare.utils.*\n+import org.hamcrest.Matchers.endsWith\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppUpdateTest: BaseTest() {\n+\n+    companion object {\n+        const val CCZ_NAME = \"app_update.ccz\"\n+        const val APP_NAME = \"Update Test\"\n+        const val USERNAME = \"user_with_no_data\"\n+        const val PASSWORD = \"123\"\n+    }\n+\n+    @Before\n+    fun setup() {\n+        installApp(APP_NAME, CCZ_NAME)\n+        InstrumentationUtility.login(USERNAME, PASSWORD)\n+    }\n+\n+    @Test\n+    fun testAppUpdate() {\n+        InstrumentationUtility.enableDeveloperMode()\n+        // Enable app update item.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Settings\"))\n+                .perform(click())\n+        onView(withText(\"Developer Options\"))\n+                .perform(click())\n+        onView(withText(\"Show Update Options Item\"))\n+                .perform(click())\n+        onView(withText(\"Enabled\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // Make sure the update endpoint is set to \"Latest starred version\"\n+        onView(withText(\"Update Options\"))\n+                .perform(click())\n+        onView(withText(\"Latest starred version\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // check base form content\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module Three\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Module One\"))\n+                .perform(click())\n+        onView(withText(\"Example 1\"))\n+                .perform(click())\n+        onView(withText(\"A text question\"))\n+                .check(matches(isDisplayed()))\n+        closeSoftKeyboard()\n+        pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        pressBack()\n+\n+        // make sure case list doesn't have status column\n+        onView(withText(\"Module Two\"))\n+                .perform(click())\n+        onView(withText(\"Update Case\"))\n+                .perform(click())\n+        onView(withText(\"Status\"))\n+                .check(doesNotExist())\n+        gotoHome()\n+\n+        // download the app update\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 2\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 11 & log out\"))\n+                .check(matches(isDisplayed()))\n+        // Disable Wifi and make sure update is saved.\n+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA5ODAxOQ==", "bodyText": "Ohh, Actually, I need to put the check here as well, cuz the below assertion,\nonView(withText(\"No network connectivity\"))\n                    .perform(click())\n\nWould only work when the wifi is actually disabled. Otherwise it'd fail the test.\nThough still adding the check inside changeWifi method.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r475098019", "createdAt": "2020-08-22T14:47:52Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "diffHunk": "@@ -0,0 +1,209 @@\n+package org.commcare.androidTests\n+\n+import android.os.Build\n+import androidx.test.espresso.Espresso.*\n+import androidx.test.espresso.action.ViewActions.click\n+import androidx.test.espresso.assertion.ViewAssertions.doesNotExist\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import org.commcare.CommCareInstrumentationTestApplication\n+import org.commcare.dalvik.R\n+import org.commcare.utils.*\n+import org.hamcrest.Matchers.endsWith\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppUpdateTest: BaseTest() {\n+\n+    companion object {\n+        const val CCZ_NAME = \"app_update.ccz\"\n+        const val APP_NAME = \"Update Test\"\n+        const val USERNAME = \"user_with_no_data\"\n+        const val PASSWORD = \"123\"\n+    }\n+\n+    @Before\n+    fun setup() {\n+        installApp(APP_NAME, CCZ_NAME)\n+        InstrumentationUtility.login(USERNAME, PASSWORD)\n+    }\n+\n+    @Test\n+    fun testAppUpdate() {\n+        InstrumentationUtility.enableDeveloperMode()\n+        // Enable app update item.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Settings\"))\n+                .perform(click())\n+        onView(withText(\"Developer Options\"))\n+                .perform(click())\n+        onView(withText(\"Show Update Options Item\"))\n+                .perform(click())\n+        onView(withText(\"Enabled\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // Make sure the update endpoint is set to \"Latest starred version\"\n+        onView(withText(\"Update Options\"))\n+                .perform(click())\n+        onView(withText(\"Latest starred version\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // check base form content\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module Three\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Module One\"))\n+                .perform(click())\n+        onView(withText(\"Example 1\"))\n+                .perform(click())\n+        onView(withText(\"A text question\"))\n+                .check(matches(isDisplayed()))\n+        closeSoftKeyboard()\n+        pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        pressBack()\n+\n+        // make sure case list doesn't have status column\n+        onView(withText(\"Module Two\"))\n+                .perform(click())\n+        onView(withText(\"Update Case\"))\n+                .perform(click())\n+        onView(withText(\"Status\"))\n+                .check(doesNotExist())\n+        gotoHome()\n+\n+        // download the app update\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 2\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 11 & log out\"))\n+                .check(matches(isDisplayed()))\n+        // Disable Wifi and make sure update is saved.\n+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1NzUxOA=="}, "originalCommit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIxNTkyNA==", "bodyText": "since the test is anyway going to fail, it's better that we fail explicitly from inside of the changeWifi. We don't want to pass the test if these tests run on devices >=10, instead we should make sure that these tests don't run on these devices at all.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r475215924", "createdAt": "2020-08-23T12:51:37Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "diffHunk": "@@ -0,0 +1,209 @@\n+package org.commcare.androidTests\n+\n+import android.os.Build\n+import androidx.test.espresso.Espresso.*\n+import androidx.test.espresso.action.ViewActions.click\n+import androidx.test.espresso.assertion.ViewAssertions.doesNotExist\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import org.commcare.CommCareInstrumentationTestApplication\n+import org.commcare.dalvik.R\n+import org.commcare.utils.*\n+import org.hamcrest.Matchers.endsWith\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppUpdateTest: BaseTest() {\n+\n+    companion object {\n+        const val CCZ_NAME = \"app_update.ccz\"\n+        const val APP_NAME = \"Update Test\"\n+        const val USERNAME = \"user_with_no_data\"\n+        const val PASSWORD = \"123\"\n+    }\n+\n+    @Before\n+    fun setup() {\n+        installApp(APP_NAME, CCZ_NAME)\n+        InstrumentationUtility.login(USERNAME, PASSWORD)\n+    }\n+\n+    @Test\n+    fun testAppUpdate() {\n+        InstrumentationUtility.enableDeveloperMode()\n+        // Enable app update item.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Settings\"))\n+                .perform(click())\n+        onView(withText(\"Developer Options\"))\n+                .perform(click())\n+        onView(withText(\"Show Update Options Item\"))\n+                .perform(click())\n+        onView(withText(\"Enabled\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // Make sure the update endpoint is set to \"Latest starred version\"\n+        onView(withText(\"Update Options\"))\n+                .perform(click())\n+        onView(withText(\"Latest starred version\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // check base form content\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module Three\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Module One\"))\n+                .perform(click())\n+        onView(withText(\"Example 1\"))\n+                .perform(click())\n+        onView(withText(\"A text question\"))\n+                .check(matches(isDisplayed()))\n+        closeSoftKeyboard()\n+        pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        pressBack()\n+\n+        // make sure case list doesn't have status column\n+        onView(withText(\"Module Two\"))\n+                .perform(click())\n+        onView(withText(\"Update Case\"))\n+                .perform(click())\n+        onView(withText(\"Status\"))\n+                .check(doesNotExist())\n+        gotoHome()\n+\n+        // download the app update\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 2\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 11 & log out\"))\n+                .check(matches(isDisplayed()))\n+        // Disable Wifi and make sure update is saved.\n+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1NzUxOA=="}, "originalCommit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIxNzI4Mw==", "bodyText": "Ahh well going slightly back on this. I think the right behaviour for us here is to 1. decouple the functionality we are testing (in this case \"persistency of the update state\") that depends on the changeWifi into a separate test so that we can still test all other update functionality on > 10 devices  2. Annotate the new test with something like sdk < 10 which makes the > 10 devices skips this test automatically (not sure if Instrumentaion tests support this annotation but unit tests does and would be a good thing to explore for us).", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r475217283", "createdAt": "2020-08-23T13:05:11Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "diffHunk": "@@ -0,0 +1,209 @@\n+package org.commcare.androidTests\n+\n+import android.os.Build\n+import androidx.test.espresso.Espresso.*\n+import androidx.test.espresso.action.ViewActions.click\n+import androidx.test.espresso.assertion.ViewAssertions.doesNotExist\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import org.commcare.CommCareInstrumentationTestApplication\n+import org.commcare.dalvik.R\n+import org.commcare.utils.*\n+import org.hamcrest.Matchers.endsWith\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppUpdateTest: BaseTest() {\n+\n+    companion object {\n+        const val CCZ_NAME = \"app_update.ccz\"\n+        const val APP_NAME = \"Update Test\"\n+        const val USERNAME = \"user_with_no_data\"\n+        const val PASSWORD = \"123\"\n+    }\n+\n+    @Before\n+    fun setup() {\n+        installApp(APP_NAME, CCZ_NAME)\n+        InstrumentationUtility.login(USERNAME, PASSWORD)\n+    }\n+\n+    @Test\n+    fun testAppUpdate() {\n+        InstrumentationUtility.enableDeveloperMode()\n+        // Enable app update item.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Settings\"))\n+                .perform(click())\n+        onView(withText(\"Developer Options\"))\n+                .perform(click())\n+        onView(withText(\"Show Update Options Item\"))\n+                .perform(click())\n+        onView(withText(\"Enabled\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // Make sure the update endpoint is set to \"Latest starred version\"\n+        onView(withText(\"Update Options\"))\n+                .perform(click())\n+        onView(withText(\"Latest starred version\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // check base form content\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module Three\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Module One\"))\n+                .perform(click())\n+        onView(withText(\"Example 1\"))\n+                .perform(click())\n+        onView(withText(\"A text question\"))\n+                .check(matches(isDisplayed()))\n+        closeSoftKeyboard()\n+        pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        pressBack()\n+\n+        // make sure case list doesn't have status column\n+        onView(withText(\"Module Two\"))\n+                .perform(click())\n+        onView(withText(\"Update Case\"))\n+                .perform(click())\n+        onView(withText(\"Status\"))\n+                .check(doesNotExist())\n+        gotoHome()\n+\n+        // download the app update\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 2\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 11 & log out\"))\n+                .check(matches(isDisplayed()))\n+        // Disable Wifi and make sure update is saved.\n+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1NzUxOA=="}, "originalCommit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIxNzUzOQ==", "bodyText": "since the test is anyway going to fail,\n\nThe test isn't gonna fail, unless we remove the if here.\nAlso, I'm not really sure if we should fail the test just because of this limitation, when the thing we're testing is so trivial.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r475217539", "createdAt": "2020-08-23T13:08:00Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "diffHunk": "@@ -0,0 +1,209 @@\n+package org.commcare.androidTests\n+\n+import android.os.Build\n+import androidx.test.espresso.Espresso.*\n+import androidx.test.espresso.action.ViewActions.click\n+import androidx.test.espresso.assertion.ViewAssertions.doesNotExist\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import org.commcare.CommCareInstrumentationTestApplication\n+import org.commcare.dalvik.R\n+import org.commcare.utils.*\n+import org.hamcrest.Matchers.endsWith\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppUpdateTest: BaseTest() {\n+\n+    companion object {\n+        const val CCZ_NAME = \"app_update.ccz\"\n+        const val APP_NAME = \"Update Test\"\n+        const val USERNAME = \"user_with_no_data\"\n+        const val PASSWORD = \"123\"\n+    }\n+\n+    @Before\n+    fun setup() {\n+        installApp(APP_NAME, CCZ_NAME)\n+        InstrumentationUtility.login(USERNAME, PASSWORD)\n+    }\n+\n+    @Test\n+    fun testAppUpdate() {\n+        InstrumentationUtility.enableDeveloperMode()\n+        // Enable app update item.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Settings\"))\n+                .perform(click())\n+        onView(withText(\"Developer Options\"))\n+                .perform(click())\n+        onView(withText(\"Show Update Options Item\"))\n+                .perform(click())\n+        onView(withText(\"Enabled\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // Make sure the update endpoint is set to \"Latest starred version\"\n+        onView(withText(\"Update Options\"))\n+                .perform(click())\n+        onView(withText(\"Latest starred version\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // check base form content\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module Three\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Module One\"))\n+                .perform(click())\n+        onView(withText(\"Example 1\"))\n+                .perform(click())\n+        onView(withText(\"A text question\"))\n+                .check(matches(isDisplayed()))\n+        closeSoftKeyboard()\n+        pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        pressBack()\n+\n+        // make sure case list doesn't have status column\n+        onView(withText(\"Module Two\"))\n+                .perform(click())\n+        onView(withText(\"Update Case\"))\n+                .perform(click())\n+        onView(withText(\"Status\"))\n+                .check(doesNotExist())\n+        gotoHome()\n+\n+        // download the app update\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 2\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 11 & log out\"))\n+                .check(matches(isDisplayed()))\n+        // Disable Wifi and make sure update is saved.\n+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1NzUxOA=="}, "originalCommit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIxNzk1NA==", "bodyText": "which makes the > 10 devices skips this test automatically\n\nThis sounds better. Will check on how to do this.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r475217954", "createdAt": "2020-08-23T13:12:32Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "diffHunk": "@@ -0,0 +1,209 @@\n+package org.commcare.androidTests\n+\n+import android.os.Build\n+import androidx.test.espresso.Espresso.*\n+import androidx.test.espresso.action.ViewActions.click\n+import androidx.test.espresso.assertion.ViewAssertions.doesNotExist\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import org.commcare.CommCareInstrumentationTestApplication\n+import org.commcare.dalvik.R\n+import org.commcare.utils.*\n+import org.hamcrest.Matchers.endsWith\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppUpdateTest: BaseTest() {\n+\n+    companion object {\n+        const val CCZ_NAME = \"app_update.ccz\"\n+        const val APP_NAME = \"Update Test\"\n+        const val USERNAME = \"user_with_no_data\"\n+        const val PASSWORD = \"123\"\n+    }\n+\n+    @Before\n+    fun setup() {\n+        installApp(APP_NAME, CCZ_NAME)\n+        InstrumentationUtility.login(USERNAME, PASSWORD)\n+    }\n+\n+    @Test\n+    fun testAppUpdate() {\n+        InstrumentationUtility.enableDeveloperMode()\n+        // Enable app update item.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Settings\"))\n+                .perform(click())\n+        onView(withText(\"Developer Options\"))\n+                .perform(click())\n+        onView(withText(\"Show Update Options Item\"))\n+                .perform(click())\n+        onView(withText(\"Enabled\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // Make sure the update endpoint is set to \"Latest starred version\"\n+        onView(withText(\"Update Options\"))\n+                .perform(click())\n+        onView(withText(\"Latest starred version\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // check base form content\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module Three\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Module One\"))\n+                .perform(click())\n+        onView(withText(\"Example 1\"))\n+                .perform(click())\n+        onView(withText(\"A text question\"))\n+                .check(matches(isDisplayed()))\n+        closeSoftKeyboard()\n+        pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        pressBack()\n+\n+        // make sure case list doesn't have status column\n+        onView(withText(\"Module Two\"))\n+                .perform(click())\n+        onView(withText(\"Update Case\"))\n+                .perform(click())\n+        onView(withText(\"Status\"))\n+                .check(doesNotExist())\n+        gotoHome()\n+\n+        // download the app update\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 2\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 11 & log out\"))\n+                .check(matches(isDisplayed()))\n+        // Disable Wifi and make sure update is saved.\n+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1NzUxOA=="}, "originalCommit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTQ3OTk2OnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/utils/InstrumentationHelpers.kt", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwNzoyMjowOVrOHFDP3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxMzowODoyOFrOHFM-nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1ODE0Mw==", "bodyText": "what's the difference between InstrumentationHelpers and InstrumentationUtility ?", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r475058143", "createdAt": "2020-08-22T07:22:09Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/utils/InstrumentationHelpers.kt", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.commcare.utils", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA2MDI0NA==", "bodyText": "Not much, InstrumentationUtility is in java, and It seemed like the kotlin extensions don't really work in java(it showed compile error to me) Espresso.onView(ViewMatchers.withId(R.id.home_gridview_buttons)).isPresent() isPresent() is an extension here.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r475060244", "createdAt": "2020-08-22T07:49:20Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/instrumentation-tests/src/org/commcare/utils/InstrumentationHelpers.kt", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.commcare.utils", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1ODE0Mw=="}, "originalCommit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIxNTE1Mw==", "bodyText": "It's a bit confusing to have 2 different classes for same purpose. I think we should merge the 2 classes by either migrating the InstrumentationUtility to kotlin or InstrumentationHelpers to java.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r475215153", "createdAt": "2020-08-23T12:44:46Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/utils/InstrumentationHelpers.kt", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.commcare.utils", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1ODE0Mw=="}, "originalCommit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIxNzU2NQ==", "bodyText": "Gotcha, will move to kotlin", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r475217565", "createdAt": "2020-08-23T13:08:28Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/instrumentation-tests/src/org/commcare/utils/InstrumentationHelpers.kt", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.commcare.utils", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1ODE0Mw=="}, "originalCommit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTQ4MDY5OnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/utils/InstrumentationUtility.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwNzoyMzoyNlrOHFDQNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxMjo0Njo0NFrOHFM2HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1ODIyOA==", "bodyText": "does this method throw an exception if it's called on api >= Q", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r475058228", "createdAt": "2020-08-22T07:23:26Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/utils/InstrumentationUtility.java", "diffHunk": "@@ -188,27 +215,59 @@ public void perform(UiController uiController, final View view) {\n     }\n \n     /**\n-     * In case a view contains more than 1 items of same type,\n-     * use this to select the item at @param position.\n-     * NOTE:- position is 1 based.\n+     * Matches total occurrences of child inside parent with count.\n      */\n-    public static <T> Matcher<T> find(Matcher<T> matcher, int position) {\n-        return new BaseMatcher<T>() {\n-            int count = 0;\n-            @Override\n-            public boolean matches(Object item) {\n-                if (matcher.matches(item)) {\n-                    count++;\n-                    return count == position;\n-                }\n-                return false;\n-            }\n+    public static void matchChildCount(Class<?> parent, Class<?> child, int count) {\n+        onView(withClassName(is(parent.getCanonicalName())))\n+                .check(matches(\n+                        CustomMatchers.withChildViewCount(count,\n+                                withClassName(is(child.getCanonicalName())))\n+                ));\n+    }\n \n-            @Override\n-            public void describeTo(Description description) {\n-                description.appendText(\"will return \" + position + \" matching item\");\n-            }\n-        };\n+    /**\n+     * Returns the count of total number of items present in the listView.\n+     * @param resId Resource reference to the list.\n+     */\n+    public static int getListSize(@IdRes int resId) {\n+        CommCareInstrumentationTestApplication application =\n+                (CommCareInstrumentationTestApplication) InstrumentationRegistry\n+                        .getInstrumentation()\n+                        .getTargetContext()\n+                        .getApplicationContext();\n+        Activity activity = application.getCurrentActivity();\n+        ListView listView = activity.findViewById(resId);\n+        return listView.getAdapter().getCount();\n+    }\n+\n+    /**\n+     * This method will toggle the wifi state in mobile.\n+     * Starting with Android Q, applications are not allowed to enable/disable Wi-Fi.\n+     */\n+    public static void changeWifi(boolean enable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA2MDM4MQ==", "bodyText": "Not sure, perhaps it doesn't give an exception(at least that's what the docs seems to hint).", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r475060381", "createdAt": "2020-08-22T07:50:53Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/instrumentation-tests/src/org/commcare/utils/InstrumentationUtility.java", "diffHunk": "@@ -188,27 +215,59 @@ public void perform(UiController uiController, final View view) {\n     }\n \n     /**\n-     * In case a view contains more than 1 items of same type,\n-     * use this to select the item at @param position.\n-     * NOTE:- position is 1 based.\n+     * Matches total occurrences of child inside parent with count.\n      */\n-    public static <T> Matcher<T> find(Matcher<T> matcher, int position) {\n-        return new BaseMatcher<T>() {\n-            int count = 0;\n-            @Override\n-            public boolean matches(Object item) {\n-                if (matcher.matches(item)) {\n-                    count++;\n-                    return count == position;\n-                }\n-                return false;\n-            }\n+    public static void matchChildCount(Class<?> parent, Class<?> child, int count) {\n+        onView(withClassName(is(parent.getCanonicalName())))\n+                .check(matches(\n+                        CustomMatchers.withChildViewCount(count,\n+                                withClassName(is(child.getCanonicalName())))\n+                ));\n+    }\n \n-            @Override\n-            public void describeTo(Description description) {\n-                description.appendText(\"will return \" + position + \" matching item\");\n-            }\n-        };\n+    /**\n+     * Returns the count of total number of items present in the listView.\n+     * @param resId Resource reference to the list.\n+     */\n+    public static int getListSize(@IdRes int resId) {\n+        CommCareInstrumentationTestApplication application =\n+                (CommCareInstrumentationTestApplication) InstrumentationRegistry\n+                        .getInstrumentation()\n+                        .getTargetContext()\n+                        .getApplicationContext();\n+        Activity activity = application.getCurrentActivity();\n+        ListView listView = activity.findViewById(resId);\n+        return listView.getAdapter().getCount();\n+    }\n+\n+    /**\n+     * This method will toggle the wifi state in mobile.\n+     * Starting with Android Q, applications are not allowed to enable/disable Wi-Fi.\n+     */\n+    public static void changeWifi(boolean enable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1ODIyOA=="}, "originalCommit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIxNTM4OQ==", "bodyText": "I see, we should throw an error ourselves in that case so that we fail clearly and explicitly and avoid future confusions in case someone decides to run these tests on > Q device.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r475215389", "createdAt": "2020-08-23T12:46:44Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/utils/InstrumentationUtility.java", "diffHunk": "@@ -188,27 +215,59 @@ public void perform(UiController uiController, final View view) {\n     }\n \n     /**\n-     * In case a view contains more than 1 items of same type,\n-     * use this to select the item at @param position.\n-     * NOTE:- position is 1 based.\n+     * Matches total occurrences of child inside parent with count.\n      */\n-    public static <T> Matcher<T> find(Matcher<T> matcher, int position) {\n-        return new BaseMatcher<T>() {\n-            int count = 0;\n-            @Override\n-            public boolean matches(Object item) {\n-                if (matcher.matches(item)) {\n-                    count++;\n-                    return count == position;\n-                }\n-                return false;\n-            }\n+    public static void matchChildCount(Class<?> parent, Class<?> child, int count) {\n+        onView(withClassName(is(parent.getCanonicalName())))\n+                .check(matches(\n+                        CustomMatchers.withChildViewCount(count,\n+                                withClassName(is(child.getCanonicalName())))\n+                ));\n+    }\n \n-            @Override\n-            public void describeTo(Description description) {\n-                description.appendText(\"will return \" + position + \" matching item\");\n-            }\n-        };\n+    /**\n+     * Returns the count of total number of items present in the listView.\n+     * @param resId Resource reference to the list.\n+     */\n+    public static int getListSize(@IdRes int resId) {\n+        CommCareInstrumentationTestApplication application =\n+                (CommCareInstrumentationTestApplication) InstrumentationRegistry\n+                        .getInstrumentation()\n+                        .getTargetContext()\n+                        .getApplicationContext();\n+        Activity activity = application.getCurrentActivity();\n+        ListView listView = activity.findViewById(resId);\n+        return listView.getAdapter().getCount();\n+    }\n+\n+    /**\n+     * This method will toggle the wifi state in mobile.\n+     * Starting with Android Q, applications are not allowed to enable/disable Wi-Fi.\n+     */\n+    public static void changeWifi(boolean enable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1ODIyOA=="}, "originalCommit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTQ4MjkzOnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/utils/InstrumentationHelpers.kt", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwNzoyNjozMFrOHFDRPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxMjo0MToxMFrOHFMzuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1ODQ5Mg==", "bodyText": "is there no api to check for the current activity in espresso ?", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r475058492", "createdAt": "2020-08-22T07:26:30Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/utils/InstrumentationHelpers.kt", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.commcare.utils\n+\n+import androidx.test.espresso.Espresso\n+import androidx.test.espresso.matcher.ViewMatchers\n+import junit.framework.Assert\n+import org.commcare.dalvik.R\n+\n+\n+/**\n+ * A workaround to Failed resolution of: Lkotlin/_Assertions;\n+ * This will fail the test if the value is false.\n+ */\n+fun assert(value: Boolean, failMsg: String) {\n+    if (!value) {\n+        Assert.fail(\"Assertion Failed: $failMsg\")\n+    }\n+}\n+\n+/**\n+ * A utility to pressBack until Home screen is reached at most 6 times.\n+ */\n+fun gotoHome() {\n+    for (i in 0..5) { // Try atmost 6 times.\n+        if (Espresso.onView(ViewMatchers.withId(R.id.home_gridview_buttons)).isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA2MDQ0NQ==", "bodyText": "Yeah intended api can be used here.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r475060445", "createdAt": "2020-08-22T07:51:39Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/instrumentation-tests/src/org/commcare/utils/InstrumentationHelpers.kt", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.commcare.utils\n+\n+import androidx.test.espresso.Espresso\n+import androidx.test.espresso.matcher.ViewMatchers\n+import junit.framework.Assert\n+import org.commcare.dalvik.R\n+\n+\n+/**\n+ * A workaround to Failed resolution of: Lkotlin/_Assertions;\n+ * This will fail the test if the value is false.\n+ */\n+fun assert(value: Boolean, failMsg: String) {\n+    if (!value) {\n+        Assert.fail(\"Assertion Failed: $failMsg\")\n+    }\n+}\n+\n+/**\n+ * A utility to pressBack until Home screen is reached at most 6 times.\n+ */\n+fun gotoHome() {\n+    for (i in 0..5) { // Try atmost 6 times.\n+        if (Espresso.onView(ViewMatchers.withId(R.id.home_gridview_buttons)).isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1ODQ5Mg=="}, "originalCommit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA5OTk3OA==", "bodyText": "Ohh, I was wrong here, intended can't be used cuz it merely checks whether the activity is present in the list of recorded intents(kinda think of it as activity stack).", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r475099978", "createdAt": "2020-08-22T15:11:06Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/instrumentation-tests/src/org/commcare/utils/InstrumentationHelpers.kt", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.commcare.utils\n+\n+import androidx.test.espresso.Espresso\n+import androidx.test.espresso.matcher.ViewMatchers\n+import junit.framework.Assert\n+import org.commcare.dalvik.R\n+\n+\n+/**\n+ * A workaround to Failed resolution of: Lkotlin/_Assertions;\n+ * This will fail the test if the value is false.\n+ */\n+fun assert(value: Boolean, failMsg: String) {\n+    if (!value) {\n+        Assert.fail(\"Assertion Failed: $failMsg\")\n+    }\n+}\n+\n+/**\n+ * A utility to pressBack until Home screen is reached at most 6 times.\n+ */\n+fun gotoHome() {\n+    for (i in 0..5) { // Try atmost 6 times.\n+        if (Espresso.onView(ViewMatchers.withId(R.id.home_gridview_buttons)).isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1ODQ5Mg=="}, "originalCommit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIxNDc3Ng==", "bodyText": "I see, thanks for looking.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r475214776", "createdAt": "2020-08-23T12:41:10Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/utils/InstrumentationHelpers.kt", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.commcare.utils\n+\n+import androidx.test.espresso.Espresso\n+import androidx.test.espresso.matcher.ViewMatchers\n+import junit.framework.Assert\n+import org.commcare.dalvik.R\n+\n+\n+/**\n+ * A workaround to Failed resolution of: Lkotlin/_Assertions;\n+ * This will fail the test if the value is false.\n+ */\n+fun assert(value: Boolean, failMsg: String) {\n+    if (!value) {\n+        Assert.fail(\"Assertion Failed: $failMsg\")\n+    }\n+}\n+\n+/**\n+ * A utility to pressBack until Home screen is reached at most 6 times.\n+ */\n+fun gotoHome() {\n+    for (i in 0..5) { // Try atmost 6 times.\n+        if (Espresso.onView(ViewMatchers.withId(R.id.home_gridview_buttons)).isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1ODQ5Mg=="}, "originalCommit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTQ4NTE5OnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/utils/ViewInteraction+Extension.kt", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwNzozMDowNVrOHFDSTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxMzoxMzoyOVrOHFNAbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1ODc2NA==", "bodyText": "is there an outcome that onView().check(matches(isDisplayed())) doesn't serve because of which we need this ?", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r475058764", "createdAt": "2020-08-22T07:30:05Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/utils/ViewInteraction+Extension.kt", "diffHunk": "@@ -0,0 +1,20 @@\n+package org.commcare.utils\n+\n+import androidx.test.espresso.NoMatchingViewException\n+import androidx.test.espresso.ViewInteraction\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.isDisplayed\n+\n+/**\n+ * A utility view interaction to check whether a view is present in the screen or not.\n+ * Espresso APIs are designed away from conditional logic by only allowing test actions and assertions.\n+ * So it's kinda against what espresso tells you to do.\n+ */\n+fun ViewInteraction.isPresent(): Boolean {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA2MDYwOA==", "bodyText": "So the espresso APIs would only allow you to do some action or assertion and they'd fail the test if the action or assertion can't be performed.\nonView().check(matches(isDisplayed())) is used to assert that the view is actually displayed and it would throw an exception and fail the test if the view isn't displayed. This isPresent method here is used to check whether or not a view is displayed and simply returns a boolean without failing or throwing any exception. These conditional logics are not present in espresso.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r475060608", "createdAt": "2020-08-22T07:54:04Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/instrumentation-tests/src/org/commcare/utils/ViewInteraction+Extension.kt", "diffHunk": "@@ -0,0 +1,20 @@\n+package org.commcare.utils\n+\n+import androidx.test.espresso.NoMatchingViewException\n+import androidx.test.espresso.ViewInteraction\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.isDisplayed\n+\n+/**\n+ * A utility view interaction to check whether a view is present in the screen or not.\n+ * Espresso APIs are designed away from conditional logic by only allowing test actions and assertions.\n+ * So it's kinda against what espresso tells you to do.\n+ */\n+fun ViewInteraction.isPresent(): Boolean {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1ODc2NA=="}, "originalCommit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIxNjM4OQ==", "bodyText": "Ahh I see, that makes a ton on sense. I think having the comment just say that this method is same as onView().check(matches(isDisplayed())) but doesn't throw an exception would much more clearly convey the need of this function.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r475216389", "createdAt": "2020-08-23T12:56:23Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/utils/ViewInteraction+Extension.kt", "diffHunk": "@@ -0,0 +1,20 @@\n+package org.commcare.utils\n+\n+import androidx.test.espresso.NoMatchingViewException\n+import androidx.test.espresso.ViewInteraction\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.isDisplayed\n+\n+/**\n+ * A utility view interaction to check whether a view is present in the screen or not.\n+ * Espresso APIs are designed away from conditional logic by only allowing test actions and assertions.\n+ * So it's kinda against what espresso tells you to do.\n+ */\n+fun ViewInteraction.isPresent(): Boolean {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1ODc2NA=="}, "originalCommit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIxODAyOQ==", "bodyText": "Sounds good. will amend the comment.", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r475218029", "createdAt": "2020-08-23T13:13:29Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/instrumentation-tests/src/org/commcare/utils/ViewInteraction+Extension.kt", "diffHunk": "@@ -0,0 +1,20 @@\n+package org.commcare.utils\n+\n+import androidx.test.espresso.NoMatchingViewException\n+import androidx.test.espresso.ViewInteraction\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.isDisplayed\n+\n+/**\n+ * A utility view interaction to check whether a view is present in the screen or not.\n+ * Espresso APIs are designed away from conditional logic by only allowing test actions and assertions.\n+ * So it's kinda against what espresso tells you to do.\n+ */\n+fun ViewInteraction.isPresent(): Boolean {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1ODc2NA=="}, "originalCommit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTQ4NjcyOnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/utils/ViewInteraction+Extension.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwNzozMjozN1rOHFDTBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwNzozMjozN1rOHFDTBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1ODk0OA==", "bodyText": "can you elaborate on what conditional logic are you referring to here ?", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r475058948", "createdAt": "2020-08-22T07:32:37Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/utils/ViewInteraction+Extension.kt", "diffHunk": "@@ -0,0 +1,20 @@\n+package org.commcare.utils\n+\n+import androidx.test.espresso.NoMatchingViewException\n+import androidx.test.espresso.ViewInteraction\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.isDisplayed\n+\n+/**\n+ * A utility view interaction to check whether a view is present in the screen or not.\n+ * Espresso APIs are designed away from conditional logic by only allowing test actions and assertions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1430a332ba710f9d88f90c77880852e4b80e65"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODEwMzg5OnYy", "diffSide": "RIGHT", "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDo1NTowN1rOHGSoRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDo1NTowN1rOHGSoRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM1ODcyNw==", "bodyText": "nice!", "url": "https://github.com/dimagi/commcare-android/pull/2299#discussion_r476358727", "createdAt": "2020-08-25T10:55:07Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/AppUpdateTest.kt", "diffHunk": "@@ -0,0 +1,236 @@\n+package org.commcare.androidTests\n+\n+import android.os.Build\n+import androidx.test.espresso.Espresso.*\n+import androidx.test.espresso.action.ViewActions.click\n+import androidx.test.espresso.assertion.ViewAssertions.doesNotExist\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.filters.SdkSuppress\n+import org.commcare.dalvik.R\n+import org.commcare.utils.*\n+import org.hamcrest.Matchers.endsWith\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class AppUpdateTest: BaseTest() {\n+\n+    companion object {\n+        const val CCZ_NAME = \"app_update.ccz\"\n+        const val APP_NAME = \"Update Test\"\n+        const val USERNAME = \"user_with_no_data\"\n+        const val PASSWORD = \"123\"\n+    }\n+\n+    @Before\n+    fun setup() {\n+        installApp(APP_NAME, CCZ_NAME)\n+        InstrumentationUtility.login(USERNAME, PASSWORD)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        InstrumentationUtility.logout()\n+        InstrumentationUtility.uninstallCurrentApp()\n+    }\n+\n+    @Test\n+    fun testAppUpdate() {\n+        InstrumentationUtility.enableDeveloperMode()\n+        // Enable app update item.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Settings\"))\n+                .perform(click())\n+        onView(withText(\"Developer Options\"))\n+                .perform(click())\n+        onView(withText(\"Show Update Options Item\"))\n+                .perform(click())\n+        onView(withText(\"Enabled\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // Make sure the update endpoint is set to \"Latest starred version\"\n+        onView(withText(\"Update Options\"))\n+                .perform(click())\n+        onView(withText(\"Latest starred version\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // check base form content\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module Three\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Module One\"))\n+                .perform(click())\n+        onView(withText(\"Example 1\"))\n+                .perform(click())\n+        onView(withText(\"A text question\"))\n+                .check(matches(isDisplayed()))\n+        closeSoftKeyboard()\n+        pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        pressBack()\n+\n+        // make sure case list doesn't have status column\n+        onView(withText(\"Module Two\"))\n+                .perform(click())\n+        onView(withText(\"Update Case\"))\n+                .perform(click())\n+        onView(withText(\"Status\"))\n+                .check(doesNotExist())\n+        InstrumentationUtility.gotoHome()\n+\n+        // download the app update\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 2\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Update to version 11 & log out\"))\n+                .check(matches(isDisplayed()))\n+\n+        // Record LastSyncTime\n+        var lastSyncTime = SyncDetailCalculations.getLastSyncTime()\n+\n+        // Update app\n+        onView(withText(\"Update to version 11 & log out\"))\n+                .perform(click())\n+\n+        // Login into the updated version\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+\n+        // Check that a sync is triggered automatically\n+        InstrumentationUtility.assert(SyncDetailCalculations.getLastSyncTime() > lastSyncTime,\n+                \"Sync not triggered automatically\")\n+\n+        // Check updated data, including multimedia\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module Three\"))\n+                .check(doesNotExist())\n+        onView(withText(\"Module One\"))\n+                .perform(click())\n+        onView(withText(\"Example 1\"))\n+                .perform(click())\n+        onView(withText(\"Question with audio\"))\n+                .check(matches(isDisplayed()))\n+        onView(withClassName(endsWith(\"AudioPlaybackButton\")))\n+                .check(matches(isDisplayed()))\n+        closeSoftKeyboard()\n+        pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        pressBack()\n+\n+        // make sure case list `Status` column was added\n+        onView(withText(\"Module Two\"))\n+                .perform(click())\n+        onView(withText(\"Update Case\"))\n+                .perform(click())\n+        onView(withText(\"Status\"))\n+                .check(matches(isDisplayed()))\n+        InstrumentationUtility.gotoHome()\n+\n+        // make sure there are no new updates\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 11\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Recheck\"))\n+                .perform(click())\n+        onView(withText(\"Current version: 11\"))\n+                .check(matches(isDisplayed()))\n+        pressBack()\n+\n+        // Change the update endpoint to \"Latest version\"\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Settings\"))\n+                .perform(click())\n+        onView(withText(\"Update Options\"))\n+                .perform(click())\n+        onView(withText(\"Latest version\"))\n+                .perform(click())\n+        pressBack()\n+\n+        // Confirm that you can now see an update. And Update the app.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(\"Update App\"))\n+                .perform(click())\n+        onView(withText(\"Update to version 22 & log out\"))\n+                .check(matches(isDisplayed()))\n+\n+        // Record the last sync time.\n+        lastSyncTime = SyncDetailCalculations.getLastSyncTime()\n+\n+        // Update app\n+        onView(withText(\"Update to version 22 & log out\"))\n+                .perform(click())\n+\n+        // Login again\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+\n+        // Check that login triggers sync\n+        InstrumentationUtility.assert(SyncDetailCalculations.getLastSyncTime() > lastSyncTime,\n+                \"Sync not triggered automatically\")\n+\n+        // Check updates in base form\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        onView(withText(\"Module One, renamed\"))\n+                .check(matches(isDisplayed()))\n+    }\n+\n+    @SdkSuppress(maxSdkVersion = Build.VERSION_CODES.Q)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "342bbc38d797c0e99f55534a2f6685e49c63843d"}, "originalPosition": 192}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3295, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}