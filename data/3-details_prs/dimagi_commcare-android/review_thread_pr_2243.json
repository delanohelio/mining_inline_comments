{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMzM5Mjcx", "number": 2243, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMjo0OTozNlrOEAvQxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDo0Mzo1N1rOEDfEEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjA5Nzk5OnYy", "diffSide": "RIGHT", "path": "app/src/org/commcare/engine/resource/AndroidResourceUtils.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMjo0OTozNlrOGcNGRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMjo0OTozNlrOGcNGRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIyNzkwOQ==", "bodyText": "Not sure where this list is populated from, but heads up that iterating over resources is a really expensive operation on really large apps like CAS. This might need to get cached into a table which is indexed by the file URI", "url": "https://github.com/dimagi/commcare-android/pull/2243#discussion_r432227909", "createdAt": "2020-05-29T02:49:36Z", "author": {"login": "ctsims"}, "path": "app/src/org/commcare/engine/resource/AndroidResourceUtils.kt", "diffHunk": "@@ -0,0 +1,44 @@\n+package org.commcare.engine.resource\n+\n+import org.commcare.android.resource.installers.MediaFileAndroidInstaller\n+import org.commcare.resources.model.MissingMediaException\n+import org.commcare.resources.model.Resource\n+import org.javarosa.core.reference.InvalidReferenceException\n+import org.javarosa.core.reference.ReferenceManager\n+import java.io.File\n+import java.io.IOException\n+import java.util.*\n+\n+object AndroidResourceUtils {\n+\n+    // loops over all lazy resources and checks if one of them has the same local path as {@param problem} URI\n+    @JvmStatic\n+    fun ifUriBelongsToALazyResource(problem: MissingMediaException, lazyResources: Vector<Resource>): Boolean {\n+        for (lazyResource in lazyResources) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce9309c52a3a09d3b3df872e33364c06e9e6f3d5"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjEwMDE4OnYy", "diffSide": "RIGHT", "path": "app/src/org/commcare/engine/resource/AndroidResourceUtils.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMjo1MDo1N1rOGcNHlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwODoyODozM1rOGcTkSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIyODI0NA==", "bodyText": "I think it's really risky to swallow these. IRE's are almost always the result of a bug, and the IOException is absorbing a pretty large surface area", "url": "https://github.com/dimagi/commcare-android/pull/2243#discussion_r432228244", "createdAt": "2020-05-29T02:50:57Z", "author": {"login": "ctsims"}, "path": "app/src/org/commcare/engine/resource/AndroidResourceUtils.kt", "diffHunk": "@@ -0,0 +1,44 @@\n+package org.commcare.engine.resource\n+\n+import org.commcare.android.resource.installers.MediaFileAndroidInstaller\n+import org.commcare.resources.model.MissingMediaException\n+import org.commcare.resources.model.Resource\n+import org.javarosa.core.reference.InvalidReferenceException\n+import org.javarosa.core.reference.ReferenceManager\n+import java.io.File\n+import java.io.IOException\n+import java.util.*\n+\n+object AndroidResourceUtils {\n+\n+    // loops over all lazy resources and checks if one of them has the same local path as {@param problem} URI\n+    @JvmStatic\n+    fun ifUriBelongsToALazyResource(problem: MissingMediaException, lazyResources: Vector<Resource>): Boolean {\n+        for (lazyResource in lazyResources) {\n+            if (matchFileUriToResource(lazyResource, problem.uri)) {\n+                return true\n+            }\n+        }\n+        return false\n+    }\n+\n+    // checks if {@param resource} has same location as that represented by {@param uri}\n+    @JvmStatic\n+    fun matchFileUriToResource(resource: Resource, uri: String?): Boolean {\n+        if (resource.installer is MediaFileAndroidInstaller) {\n+            try {\n+                val resourceUri = (resource.installer as MediaFileAndroidInstaller).localLocation\n+                val resourcePath = ReferenceManager.instance().DeriveReference(resourceUri).localURI\n+                val problemPath = ReferenceManager.instance().DeriveReference(uri).localURI\n+                if (File(resourcePath).canonicalPath.contentEquals(File(problemPath).canonicalPath)) {\n+                    return true\n+                }\n+            } catch (e: InvalidReferenceException) {\n+                e.printStackTrace()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce9309c52a3a09d3b3df872e33364c06e9e6f3d5"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMzMzg5OQ==", "bodyText": "Agree", "url": "https://github.com/dimagi/commcare-android/pull/2243#discussion_r432333899", "createdAt": "2020-05-29T08:28:33Z", "author": {"login": "shubham1g5"}, "path": "app/src/org/commcare/engine/resource/AndroidResourceUtils.kt", "diffHunk": "@@ -0,0 +1,44 @@\n+package org.commcare.engine.resource\n+\n+import org.commcare.android.resource.installers.MediaFileAndroidInstaller\n+import org.commcare.resources.model.MissingMediaException\n+import org.commcare.resources.model.Resource\n+import org.javarosa.core.reference.InvalidReferenceException\n+import org.javarosa.core.reference.ReferenceManager\n+import java.io.File\n+import java.io.IOException\n+import java.util.*\n+\n+object AndroidResourceUtils {\n+\n+    // loops over all lazy resources and checks if one of them has the same local path as {@param problem} URI\n+    @JvmStatic\n+    fun ifUriBelongsToALazyResource(problem: MissingMediaException, lazyResources: Vector<Resource>): Boolean {\n+        for (lazyResource in lazyResources) {\n+            if (matchFileUriToResource(lazyResource, problem.uri)) {\n+                return true\n+            }\n+        }\n+        return false\n+    }\n+\n+    // checks if {@param resource} has same location as that represented by {@param uri}\n+    @JvmStatic\n+    fun matchFileUriToResource(resource: Resource, uri: String?): Boolean {\n+        if (resource.installer is MediaFileAndroidInstaller) {\n+            try {\n+                val resourceUri = (resource.installer as MediaFileAndroidInstaller).localLocation\n+                val resourcePath = ReferenceManager.instance().DeriveReference(resourceUri).localURI\n+                val problemPath = ReferenceManager.instance().DeriveReference(uri).localURI\n+                if (File(resourcePath).canonicalPath.contentEquals(File(problemPath).canonicalPath)) {\n+                    return true\n+                }\n+            } catch (e: InvalidReferenceException) {\n+                e.printStackTrace()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIyODI0NA=="}, "originalCommit": {"oid": "ce9309c52a3a09d3b3df872e33364c06e9e6f3d5"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjEwMzI2OnYy", "diffSide": "RIGHT", "path": "app/src/org/commcare/mediadownload/MissingMediaDownloadHelper.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMjo1Mjo1NVrOGcNJag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzoyNDozN1rOGcRnUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIyODcxNA==", "bodyText": "Have you timed this operation with CAS, out of curiosity?", "url": "https://github.com/dimagi/commcare-android/pull/2243#discussion_r432228714", "createdAt": "2020-05-29T02:52:55Z", "author": {"login": "ctsims"}, "path": "app/src/org/commcare/mediadownload/MissingMediaDownloadHelper.kt", "diffHunk": "@@ -0,0 +1,196 @@\n+package org.commcare.mediadownload\n+\n+import android.content.Context\n+import android.widget.ImageButton\n+import android.widget.Toast\n+import androidx.work.*\n+import kotlinx.coroutines.*\n+import org.commcare.CommCareApplication\n+import org.commcare.dalvik.R\n+import org.commcare.engine.resource.AndroidResourceUtils\n+import org.commcare.engine.resource.ResourceInstallUtils\n+import org.commcare.preferences.HiddenPreferences\n+import org.commcare.resources.model.*\n+import org.commcare.utils.AndroidCommCarePlatform\n+import org.commcare.utils.AndroidUtil\n+import org.commcare.utils.FileUtil\n+import org.commcare.views.dialogs.PinnedNotificationWithProgress\n+import org.javarosa.core.services.Logger\n+import org.javarosa.core.util.SizeBoundUniqueVector\n+import java.util.*\n+import java.util.concurrent.TimeUnit\n+import kotlin.collections.ArrayList\n+\n+// Contains helper functions to download lazy or missing media resources\n+object MissingMediaDownloadHelper : TableStateListener, InstallCancelled {\n+\n+    var resourceInProgress: Resource? = null\n+        private set\n+\n+    private val jobs = ArrayList<Job>()\n+    private lateinit var mPinnedNotificationProgress: PinnedNotificationWithProgress\n+\n+\n+    private const val BACK_OFF_DELAY = 5 * 60 * 1000L // 5 mins\n+    private const val REQUEST_NAME = \"missing_media_download_request\"\n+\n+    var installCancelled: InstallCancelled? = null\n+\n+    // Schedules MissingMediaDownloadWorker\n+    @JvmStatic\n+    fun scheduleMissingMediaDownload() {\n+        if (HiddenPreferences.shouldDownloadLazyMediaInBackground()) {\n+            val constraints = Constraints.Builder()\n+                    .setRequiredNetworkType(NetworkType.CONNECTED)\n+                    .setRequiresBatteryNotLow(true)\n+                    .build()\n+\n+            val downloadMissingMediaRequest = OneTimeWorkRequest.Builder(MissingMediaDownloadWorker::class.java)\n+                    .addTag(CommCareApplication.instance().currentApp.appRecord.applicationId)\n+                    .setConstraints(constraints)\n+                    .setBackoffCriteria(\n+                            BackoffPolicy.EXPONENTIAL,\n+                            BACK_OFF_DELAY,\n+                            TimeUnit.MILLISECONDS)\n+                    .build()\n+\n+            WorkManager.getInstance(CommCareApplication.instance())\n+                    .enqueueUniqueWork(\n+                            getMissingMediaDownloadRequestName(),\n+                            ExistingWorkPolicy.KEEP,\n+                            downloadMissingMediaRequest)\n+        }\n+    }\n+\n+    // Returns Unique request name for the UpdateWorker Request\n+    private fun getMissingMediaDownloadRequestName(): String {\n+        val appId = CommCareApplication.instance().currentApp.uniqueId\n+        return REQUEST_NAME + \"_\" + appId\n+    }\n+\n+\n+    // Verifies all application media and re-downloads any missing lazy resources\n+    fun downloadAllMissingMedia() {\n+        val platform = CommCareApplication.instance().commCarePlatform\n+        val global = platform.globalResourceTable\n+\n+        global.setInstallCancellationChecker(this)\n+\n+        val problems = Vector<MissingMediaException>()\n+        global.verifyInstallation(problems, platform)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce9309c52a3a09d3b3df872e33364c06e9e6f3d5"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMwMTkwNg==", "bodyText": "I have seen it varying from 14 to 30 seconds on lower mid range to mid range devices but can imagine it taking more closer to a minute on really low end devices.", "url": "https://github.com/dimagi/commcare-android/pull/2243#discussion_r432301906", "createdAt": "2020-05-29T07:24:37Z", "author": {"login": "shubham1g5"}, "path": "app/src/org/commcare/mediadownload/MissingMediaDownloadHelper.kt", "diffHunk": "@@ -0,0 +1,196 @@\n+package org.commcare.mediadownload\n+\n+import android.content.Context\n+import android.widget.ImageButton\n+import android.widget.Toast\n+import androidx.work.*\n+import kotlinx.coroutines.*\n+import org.commcare.CommCareApplication\n+import org.commcare.dalvik.R\n+import org.commcare.engine.resource.AndroidResourceUtils\n+import org.commcare.engine.resource.ResourceInstallUtils\n+import org.commcare.preferences.HiddenPreferences\n+import org.commcare.resources.model.*\n+import org.commcare.utils.AndroidCommCarePlatform\n+import org.commcare.utils.AndroidUtil\n+import org.commcare.utils.FileUtil\n+import org.commcare.views.dialogs.PinnedNotificationWithProgress\n+import org.javarosa.core.services.Logger\n+import org.javarosa.core.util.SizeBoundUniqueVector\n+import java.util.*\n+import java.util.concurrent.TimeUnit\n+import kotlin.collections.ArrayList\n+\n+// Contains helper functions to download lazy or missing media resources\n+object MissingMediaDownloadHelper : TableStateListener, InstallCancelled {\n+\n+    var resourceInProgress: Resource? = null\n+        private set\n+\n+    private val jobs = ArrayList<Job>()\n+    private lateinit var mPinnedNotificationProgress: PinnedNotificationWithProgress\n+\n+\n+    private const val BACK_OFF_DELAY = 5 * 60 * 1000L // 5 mins\n+    private const val REQUEST_NAME = \"missing_media_download_request\"\n+\n+    var installCancelled: InstallCancelled? = null\n+\n+    // Schedules MissingMediaDownloadWorker\n+    @JvmStatic\n+    fun scheduleMissingMediaDownload() {\n+        if (HiddenPreferences.shouldDownloadLazyMediaInBackground()) {\n+            val constraints = Constraints.Builder()\n+                    .setRequiredNetworkType(NetworkType.CONNECTED)\n+                    .setRequiresBatteryNotLow(true)\n+                    .build()\n+\n+            val downloadMissingMediaRequest = OneTimeWorkRequest.Builder(MissingMediaDownloadWorker::class.java)\n+                    .addTag(CommCareApplication.instance().currentApp.appRecord.applicationId)\n+                    .setConstraints(constraints)\n+                    .setBackoffCriteria(\n+                            BackoffPolicy.EXPONENTIAL,\n+                            BACK_OFF_DELAY,\n+                            TimeUnit.MILLISECONDS)\n+                    .build()\n+\n+            WorkManager.getInstance(CommCareApplication.instance())\n+                    .enqueueUniqueWork(\n+                            getMissingMediaDownloadRequestName(),\n+                            ExistingWorkPolicy.KEEP,\n+                            downloadMissingMediaRequest)\n+        }\n+    }\n+\n+    // Returns Unique request name for the UpdateWorker Request\n+    private fun getMissingMediaDownloadRequestName(): String {\n+        val appId = CommCareApplication.instance().currentApp.uniqueId\n+        return REQUEST_NAME + \"_\" + appId\n+    }\n+\n+\n+    // Verifies all application media and re-downloads any missing lazy resources\n+    fun downloadAllMissingMedia() {\n+        val platform = CommCareApplication.instance().commCarePlatform\n+        val global = platform.globalResourceTable\n+\n+        global.setInstallCancellationChecker(this)\n+\n+        val problems = Vector<MissingMediaException>()\n+        global.verifyInstallation(problems, platform)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIyODcxNA=="}, "originalCommit": {"oid": "ce9309c52a3a09d3b3df872e33364c06e9e6f3d5"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjEwNTc3OnYy", "diffSide": "RIGHT", "path": "app/src/org/commcare/mediadownload/MissingMediaDownloadHelper.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMjo1NDozOVrOGcNK5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzoyODo0M1rOGcRvDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIyOTA5Mg==", "bodyText": "Same comment as above that I think this is likely to be too expensive to be practical if this list is as big as CAS's", "url": "https://github.com/dimagi/commcare-android/pull/2243#discussion_r432229092", "createdAt": "2020-05-29T02:54:39Z", "author": {"login": "ctsims"}, "path": "app/src/org/commcare/mediadownload/MissingMediaDownloadHelper.kt", "diffHunk": "@@ -0,0 +1,196 @@\n+package org.commcare.mediadownload\n+\n+import android.content.Context\n+import android.widget.ImageButton\n+import android.widget.Toast\n+import androidx.work.*\n+import kotlinx.coroutines.*\n+import org.commcare.CommCareApplication\n+import org.commcare.dalvik.R\n+import org.commcare.engine.resource.AndroidResourceUtils\n+import org.commcare.engine.resource.ResourceInstallUtils\n+import org.commcare.preferences.HiddenPreferences\n+import org.commcare.resources.model.*\n+import org.commcare.utils.AndroidCommCarePlatform\n+import org.commcare.utils.AndroidUtil\n+import org.commcare.utils.FileUtil\n+import org.commcare.views.dialogs.PinnedNotificationWithProgress\n+import org.javarosa.core.services.Logger\n+import org.javarosa.core.util.SizeBoundUniqueVector\n+import java.util.*\n+import java.util.concurrent.TimeUnit\n+import kotlin.collections.ArrayList\n+\n+// Contains helper functions to download lazy or missing media resources\n+object MissingMediaDownloadHelper : TableStateListener, InstallCancelled {\n+\n+    var resourceInProgress: Resource? = null\n+        private set\n+\n+    private val jobs = ArrayList<Job>()\n+    private lateinit var mPinnedNotificationProgress: PinnedNotificationWithProgress\n+\n+\n+    private const val BACK_OFF_DELAY = 5 * 60 * 1000L // 5 mins\n+    private const val REQUEST_NAME = \"missing_media_download_request\"\n+\n+    var installCancelled: InstallCancelled? = null\n+\n+    // Schedules MissingMediaDownloadWorker\n+    @JvmStatic\n+    fun scheduleMissingMediaDownload() {\n+        if (HiddenPreferences.shouldDownloadLazyMediaInBackground()) {\n+            val constraints = Constraints.Builder()\n+                    .setRequiredNetworkType(NetworkType.CONNECTED)\n+                    .setRequiresBatteryNotLow(true)\n+                    .build()\n+\n+            val downloadMissingMediaRequest = OneTimeWorkRequest.Builder(MissingMediaDownloadWorker::class.java)\n+                    .addTag(CommCareApplication.instance().currentApp.appRecord.applicationId)\n+                    .setConstraints(constraints)\n+                    .setBackoffCriteria(\n+                            BackoffPolicy.EXPONENTIAL,\n+                            BACK_OFF_DELAY,\n+                            TimeUnit.MILLISECONDS)\n+                    .build()\n+\n+            WorkManager.getInstance(CommCareApplication.instance())\n+                    .enqueueUniqueWork(\n+                            getMissingMediaDownloadRequestName(),\n+                            ExistingWorkPolicy.KEEP,\n+                            downloadMissingMediaRequest)\n+        }\n+    }\n+\n+    // Returns Unique request name for the UpdateWorker Request\n+    private fun getMissingMediaDownloadRequestName(): String {\n+        val appId = CommCareApplication.instance().currentApp.uniqueId\n+        return REQUEST_NAME + \"_\" + appId\n+    }\n+\n+\n+    // Verifies all application media and re-downloads any missing lazy resources\n+    fun downloadAllMissingMedia() {\n+        val platform = CommCareApplication.instance().commCarePlatform\n+        val global = platform.globalResourceTable\n+\n+        global.setInstallCancellationChecker(this)\n+\n+        val problems = Vector<MissingMediaException>()\n+        global.verifyInstallation(problems, platform)\n+\n+        val missingMediaResources = SizeBoundUniqueVector<Resource>(problems.size)\n+        val lazyResources = global.lazyResources\n+\n+        problems.filter { problem -> problem.type == MissingMediaException.MissingMediaExceptionType.FILE_NOT_FOUND }\n+                .map { problem ->\n+                    runCatching {\n+                        missingMediaResources.add(getLazyResourceFromMediaUri(lazyResources, problem.uri))\n+                    }.onFailure {\n+                        Logger.exception(\n+                                \"Could not map to a lazy resource while downloading missing media for uri ${problem.uri}\",\n+                                java.lang.Exception(it))\n+                    }\n+                }\n+\n+        startPinnedNotification()\n+\n+        missingMediaResources.mapIndexed { index, resource ->\n+            if (!wasInstallCancelled()) {\n+                recoverResource(platform, resource)\n+                incrementProgress(index + 1, missingMediaResources.size)\n+            }\n+        }\n+\n+        cancelNotification()\n+        global.setInstallCancellationChecker(null)\n+    }\n+\n+    /**\n+     * Downloads a resource with it's location represented by {@param mediaUri}\n+     */\n+    @JvmStatic\n+    fun requestMediaDownload(mediaUri: String, missingMediaDownloadListener: MissingMediaDownloadListener) {\n+        jobs.add(\n+                CoroutineScope(Dispatchers.Default).launch {\n+                    var result: MissingMediaDownloadResult = MissingMediaDownloadResult.Error(\"Unknown Error\")\n+                    try {\n+                        result = downloadMissingMediaResource(mediaUri)\n+                    } catch (e: Exception) {\n+                        Logger.exception(\" An error occured while recovering a missing resource\", e);\n+                        withContext(Dispatchers.Main) {\n+                            missingMediaDownloadListener.onComplete(MissingMediaDownloadResult.Exception(e))\n+                        }\n+                    }\n+\n+                    withContext(Dispatchers.Main) {\n+                        missingMediaDownloadListener.onComplete(result)\n+                    }\n+                }\n+        )\n+    }\n+\n+    private fun downloadMissingMediaResource(uri: String): MissingMediaDownloadResult {\n+        val platform = CommCareApplication.instance().commCarePlatform\n+        val global = platform.globalResourceTable\n+        val lazyResources: Vector<Resource> = global.lazyResources!!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce9309c52a3a09d3b3df872e33364c06e9e6f3d5"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMwMzg4NQ==", "bodyText": "this particular call is quite cheap (takes .1 sec on MotoG, around .4 seconds on a low performant device I have) as we are indexing the lazy property in the Resource Table.", "url": "https://github.com/dimagi/commcare-android/pull/2243#discussion_r432303885", "createdAt": "2020-05-29T07:28:43Z", "author": {"login": "shubham1g5"}, "path": "app/src/org/commcare/mediadownload/MissingMediaDownloadHelper.kt", "diffHunk": "@@ -0,0 +1,196 @@\n+package org.commcare.mediadownload\n+\n+import android.content.Context\n+import android.widget.ImageButton\n+import android.widget.Toast\n+import androidx.work.*\n+import kotlinx.coroutines.*\n+import org.commcare.CommCareApplication\n+import org.commcare.dalvik.R\n+import org.commcare.engine.resource.AndroidResourceUtils\n+import org.commcare.engine.resource.ResourceInstallUtils\n+import org.commcare.preferences.HiddenPreferences\n+import org.commcare.resources.model.*\n+import org.commcare.utils.AndroidCommCarePlatform\n+import org.commcare.utils.AndroidUtil\n+import org.commcare.utils.FileUtil\n+import org.commcare.views.dialogs.PinnedNotificationWithProgress\n+import org.javarosa.core.services.Logger\n+import org.javarosa.core.util.SizeBoundUniqueVector\n+import java.util.*\n+import java.util.concurrent.TimeUnit\n+import kotlin.collections.ArrayList\n+\n+// Contains helper functions to download lazy or missing media resources\n+object MissingMediaDownloadHelper : TableStateListener, InstallCancelled {\n+\n+    var resourceInProgress: Resource? = null\n+        private set\n+\n+    private val jobs = ArrayList<Job>()\n+    private lateinit var mPinnedNotificationProgress: PinnedNotificationWithProgress\n+\n+\n+    private const val BACK_OFF_DELAY = 5 * 60 * 1000L // 5 mins\n+    private const val REQUEST_NAME = \"missing_media_download_request\"\n+\n+    var installCancelled: InstallCancelled? = null\n+\n+    // Schedules MissingMediaDownloadWorker\n+    @JvmStatic\n+    fun scheduleMissingMediaDownload() {\n+        if (HiddenPreferences.shouldDownloadLazyMediaInBackground()) {\n+            val constraints = Constraints.Builder()\n+                    .setRequiredNetworkType(NetworkType.CONNECTED)\n+                    .setRequiresBatteryNotLow(true)\n+                    .build()\n+\n+            val downloadMissingMediaRequest = OneTimeWorkRequest.Builder(MissingMediaDownloadWorker::class.java)\n+                    .addTag(CommCareApplication.instance().currentApp.appRecord.applicationId)\n+                    .setConstraints(constraints)\n+                    .setBackoffCriteria(\n+                            BackoffPolicy.EXPONENTIAL,\n+                            BACK_OFF_DELAY,\n+                            TimeUnit.MILLISECONDS)\n+                    .build()\n+\n+            WorkManager.getInstance(CommCareApplication.instance())\n+                    .enqueueUniqueWork(\n+                            getMissingMediaDownloadRequestName(),\n+                            ExistingWorkPolicy.KEEP,\n+                            downloadMissingMediaRequest)\n+        }\n+    }\n+\n+    // Returns Unique request name for the UpdateWorker Request\n+    private fun getMissingMediaDownloadRequestName(): String {\n+        val appId = CommCareApplication.instance().currentApp.uniqueId\n+        return REQUEST_NAME + \"_\" + appId\n+    }\n+\n+\n+    // Verifies all application media and re-downloads any missing lazy resources\n+    fun downloadAllMissingMedia() {\n+        val platform = CommCareApplication.instance().commCarePlatform\n+        val global = platform.globalResourceTable\n+\n+        global.setInstallCancellationChecker(this)\n+\n+        val problems = Vector<MissingMediaException>()\n+        global.verifyInstallation(problems, platform)\n+\n+        val missingMediaResources = SizeBoundUniqueVector<Resource>(problems.size)\n+        val lazyResources = global.lazyResources\n+\n+        problems.filter { problem -> problem.type == MissingMediaException.MissingMediaExceptionType.FILE_NOT_FOUND }\n+                .map { problem ->\n+                    runCatching {\n+                        missingMediaResources.add(getLazyResourceFromMediaUri(lazyResources, problem.uri))\n+                    }.onFailure {\n+                        Logger.exception(\n+                                \"Could not map to a lazy resource while downloading missing media for uri ${problem.uri}\",\n+                                java.lang.Exception(it))\n+                    }\n+                }\n+\n+        startPinnedNotification()\n+\n+        missingMediaResources.mapIndexed { index, resource ->\n+            if (!wasInstallCancelled()) {\n+                recoverResource(platform, resource)\n+                incrementProgress(index + 1, missingMediaResources.size)\n+            }\n+        }\n+\n+        cancelNotification()\n+        global.setInstallCancellationChecker(null)\n+    }\n+\n+    /**\n+     * Downloads a resource with it's location represented by {@param mediaUri}\n+     */\n+    @JvmStatic\n+    fun requestMediaDownload(mediaUri: String, missingMediaDownloadListener: MissingMediaDownloadListener) {\n+        jobs.add(\n+                CoroutineScope(Dispatchers.Default).launch {\n+                    var result: MissingMediaDownloadResult = MissingMediaDownloadResult.Error(\"Unknown Error\")\n+                    try {\n+                        result = downloadMissingMediaResource(mediaUri)\n+                    } catch (e: Exception) {\n+                        Logger.exception(\" An error occured while recovering a missing resource\", e);\n+                        withContext(Dispatchers.Main) {\n+                            missingMediaDownloadListener.onComplete(MissingMediaDownloadResult.Exception(e))\n+                        }\n+                    }\n+\n+                    withContext(Dispatchers.Main) {\n+                        missingMediaDownloadListener.onComplete(result)\n+                    }\n+                }\n+        )\n+    }\n+\n+    private fun downloadMissingMediaResource(uri: String): MissingMediaDownloadResult {\n+        val platform = CommCareApplication.instance().commCarePlatform\n+        val global = platform.globalResourceTable\n+        val lazyResources: Vector<Resource> = global.lazyResources!!", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIyOTA5Mg=="}, "originalCommit": {"oid": "ce9309c52a3a09d3b3df872e33364c06e9e6f3d5"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjEwNzA4OnYy", "diffSide": "RIGHT", "path": "app/src/org/commcare/mediadownload/MissingMediaDownloadHelper.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMjo1NToyOFrOGcNLrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwODoyODoyMVrOGcTj4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIyOTI5NQ==", "bodyText": "Shouldn't there be a lock of some sort around each one of these jobs, or is that inherent to the job class?", "url": "https://github.com/dimagi/commcare-android/pull/2243#discussion_r432229295", "createdAt": "2020-05-29T02:55:28Z", "author": {"login": "ctsims"}, "path": "app/src/org/commcare/mediadownload/MissingMediaDownloadHelper.kt", "diffHunk": "@@ -0,0 +1,196 @@\n+package org.commcare.mediadownload\n+\n+import android.content.Context\n+import android.widget.ImageButton\n+import android.widget.Toast\n+import androidx.work.*\n+import kotlinx.coroutines.*\n+import org.commcare.CommCareApplication\n+import org.commcare.dalvik.R\n+import org.commcare.engine.resource.AndroidResourceUtils\n+import org.commcare.engine.resource.ResourceInstallUtils\n+import org.commcare.preferences.HiddenPreferences\n+import org.commcare.resources.model.*\n+import org.commcare.utils.AndroidCommCarePlatform\n+import org.commcare.utils.AndroidUtil\n+import org.commcare.utils.FileUtil\n+import org.commcare.views.dialogs.PinnedNotificationWithProgress\n+import org.javarosa.core.services.Logger\n+import org.javarosa.core.util.SizeBoundUniqueVector\n+import java.util.*\n+import java.util.concurrent.TimeUnit\n+import kotlin.collections.ArrayList\n+\n+// Contains helper functions to download lazy or missing media resources\n+object MissingMediaDownloadHelper : TableStateListener, InstallCancelled {\n+\n+    var resourceInProgress: Resource? = null\n+        private set\n+\n+    private val jobs = ArrayList<Job>()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce9309c52a3a09d3b3df872e33364c06e9e6f3d5"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMzMzc5Mg==", "bodyText": "each job in jobs depends on the synchronized  recoverResource function in this class which takes care of protecting against spawning multiple download requests for a resource. The jobs itself is only meant to provide a way for cancelling all jobs at once.  So it's fine for it to not be thread safe and have duplicate job entries as a result.", "url": "https://github.com/dimagi/commcare-android/pull/2243#discussion_r432333792", "createdAt": "2020-05-29T08:28:21Z", "author": {"login": "shubham1g5"}, "path": "app/src/org/commcare/mediadownload/MissingMediaDownloadHelper.kt", "diffHunk": "@@ -0,0 +1,196 @@\n+package org.commcare.mediadownload\n+\n+import android.content.Context\n+import android.widget.ImageButton\n+import android.widget.Toast\n+import androidx.work.*\n+import kotlinx.coroutines.*\n+import org.commcare.CommCareApplication\n+import org.commcare.dalvik.R\n+import org.commcare.engine.resource.AndroidResourceUtils\n+import org.commcare.engine.resource.ResourceInstallUtils\n+import org.commcare.preferences.HiddenPreferences\n+import org.commcare.resources.model.*\n+import org.commcare.utils.AndroidCommCarePlatform\n+import org.commcare.utils.AndroidUtil\n+import org.commcare.utils.FileUtil\n+import org.commcare.views.dialogs.PinnedNotificationWithProgress\n+import org.javarosa.core.services.Logger\n+import org.javarosa.core.util.SizeBoundUniqueVector\n+import java.util.*\n+import java.util.concurrent.TimeUnit\n+import kotlin.collections.ArrayList\n+\n+// Contains helper functions to download lazy or missing media resources\n+object MissingMediaDownloadHelper : TableStateListener, InstallCancelled {\n+\n+    var resourceInProgress: Resource? = null\n+        private set\n+\n+    private val jobs = ArrayList<Job>()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIyOTI5NQ=="}, "originalCommit": {"oid": "ce9309c52a3a09d3b3df872e33364c06e9e6f3d5"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDg4NDQ4OnYy", "diffSide": "RIGHT", "path": "app/src/org/commcare/mediadownload/MissingMediaDownloadHelper.kt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDo0MDoxMFrOGghv1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxODowODowOFrOGgqGYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc2MDUzNQ==", "bodyText": "I'm not sure why we'd ever been running lazy media installers for multiple app versions. Are we lazy installing the upgrade table as well as the installed version? or is this due to some behavior that happens after handing over between updates being applied??", "url": "https://github.com/dimagi/commcare-android/pull/2243#discussion_r436760535", "createdAt": "2020-06-08T14:40:10Z", "author": {"login": "ctsims"}, "path": "app/src/org/commcare/mediadownload/MissingMediaDownloadHelper.kt", "diffHunk": "@@ -72,29 +72,32 @@ object MissingMediaDownloadHelper : TableStateListener, InstallCancelled {\n      * Downloads any missing lazy resources, make sure to call this on background thread\n      */\n     fun downloadAllLazyMedia(): AppInstallStatus {\n-        val platform = CommCareApplication.instance().commCarePlatform\n-        val global = platform.globalResourceTable\n-\n-        global.setInstallCancellationChecker(this)\n-        startPinnedNotification()\n-\n-        val lazyResourceIds = global.lazyResourceIds\n-        lazyResourceIds.asSequence()\n-                .runCatching {\n-                    withIndex()\n-                            .onEach { incrementProgress(it.index + 1, lazyResourceIds.size) }\n-                            .takeWhile { !wasInstallCancelled() }\n-                            .map { global.getResource(it.value) }\n-                            .filter { isResourceMissing(it) }\n-                            .takeWhile { !wasInstallCancelled() }\n-                            .onEach { recoverResource(platform, it) }.toList()\n-                }.onFailure {\n-                    Logger.log(LogTypes.TYPE_MAINTENANCE, \"An error occured while lazy downloading a media resource : \" + it.message)\n-                    return handleRecoverResourceFailure(it).data\n-                }\n+        if (!HiddenPreferences.hasLazyMediaDownloaded()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7700747791ec0fb354bcf9c5cb2b9cc056adf1f5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4OTcwNQ==", "bodyText": "Only A new app update can introduce new lazy resources, so once we have successfully run this task for version x, we don't need to run it again for the same version until user updates to a different version.\nRetrospectively, a better change here will be to just maintain a single app pref across all versions and reset that flag after an app update.", "url": "https://github.com/dimagi/commcare-android/pull/2243#discussion_r436889705", "createdAt": "2020-06-08T17:54:46Z", "author": {"login": "shubham1g5"}, "path": "app/src/org/commcare/mediadownload/MissingMediaDownloadHelper.kt", "diffHunk": "@@ -72,29 +72,32 @@ object MissingMediaDownloadHelper : TableStateListener, InstallCancelled {\n      * Downloads any missing lazy resources, make sure to call this on background thread\n      */\n     fun downloadAllLazyMedia(): AppInstallStatus {\n-        val platform = CommCareApplication.instance().commCarePlatform\n-        val global = platform.globalResourceTable\n-\n-        global.setInstallCancellationChecker(this)\n-        startPinnedNotification()\n-\n-        val lazyResourceIds = global.lazyResourceIds\n-        lazyResourceIds.asSequence()\n-                .runCatching {\n-                    withIndex()\n-                            .onEach { incrementProgress(it.index + 1, lazyResourceIds.size) }\n-                            .takeWhile { !wasInstallCancelled() }\n-                            .map { global.getResource(it.value) }\n-                            .filter { isResourceMissing(it) }\n-                            .takeWhile { !wasInstallCancelled() }\n-                            .onEach { recoverResource(platform, it) }.toList()\n-                }.onFailure {\n-                    Logger.log(LogTypes.TYPE_MAINTENANCE, \"An error occured while lazy downloading a media resource : \" + it.message)\n-                    return handleRecoverResourceFailure(it).data\n-                }\n+        if (!HiddenPreferences.hasLazyMediaDownloaded()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc2MDUzNQ=="}, "originalCommit": {"oid": "7700747791ec0fb354bcf9c5cb2b9cc056adf1f5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg5NzM3Ng==", "bodyText": "Ah, got it. I was reviewing by commit, which was silly, and I missed this was old. Sorry for the noise.", "url": "https://github.com/dimagi/commcare-android/pull/2243#discussion_r436897376", "createdAt": "2020-06-08T18:08:08Z", "author": {"login": "ctsims"}, "path": "app/src/org/commcare/mediadownload/MissingMediaDownloadHelper.kt", "diffHunk": "@@ -72,29 +72,32 @@ object MissingMediaDownloadHelper : TableStateListener, InstallCancelled {\n      * Downloads any missing lazy resources, make sure to call this on background thread\n      */\n     fun downloadAllLazyMedia(): AppInstallStatus {\n-        val platform = CommCareApplication.instance().commCarePlatform\n-        val global = platform.globalResourceTable\n-\n-        global.setInstallCancellationChecker(this)\n-        startPinnedNotification()\n-\n-        val lazyResourceIds = global.lazyResourceIds\n-        lazyResourceIds.asSequence()\n-                .runCatching {\n-                    withIndex()\n-                            .onEach { incrementProgress(it.index + 1, lazyResourceIds.size) }\n-                            .takeWhile { !wasInstallCancelled() }\n-                            .map { global.getResource(it.value) }\n-                            .filter { isResourceMissing(it) }\n-                            .takeWhile { !wasInstallCancelled() }\n-                            .onEach { recoverResource(platform, it) }.toList()\n-                }.onFailure {\n-                    Logger.log(LogTypes.TYPE_MAINTENANCE, \"An error occured while lazy downloading a media resource : \" + it.message)\n-                    return handleRecoverResourceFailure(it).data\n-                }\n+        if (!HiddenPreferences.hasLazyMediaDownloaded()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc2MDUzNQ=="}, "originalCommit": {"oid": "7700747791ec0fb354bcf9c5cb2b9cc056adf1f5"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDkwMTI4OnYy", "diffSide": "RIGHT", "path": "app/src/org/commcare/mediadownload/MissingMediaDownloadWorker.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDo0Mzo1N1rOGgh6VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDo0Mzo1N1rOGgh6VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc2MzIyMA==", "bodyText": "Don't we only want to retry automatically on specific errors?\nIn the handling list above, 3 of the 4 errors wouldn't be good for us to run a retry on", "url": "https://github.com/dimagi/commcare-android/pull/2243#discussion_r436763220", "createdAt": "2020-06-08T14:43:57Z", "author": {"login": "ctsims"}, "path": "app/src/org/commcare/mediadownload/MissingMediaDownloadWorker.kt", "diffHunk": "@@ -3,21 +3,16 @@ package org.commcare.mediadownload\n import android.content.Context\n import androidx.work.CoroutineWorker\n import androidx.work.WorkerParameters\n+import org.commcare.engine.resource.AppInstallStatus\n import org.commcare.resources.model.InstallCancelled\n \n class MissingMediaDownloadWorker(appContext: Context, workerParams: WorkerParameters)\n     : CoroutineWorker(appContext, workerParams), InstallCancelled {\n \n     override suspend fun doWork(): Result {\n         MissingMediaDownloadHelper.installCancelled = this\n-        kotlin.runCatching {\n-            MissingMediaDownloadHelper.downloadAllLazyMedia()\n-        }.onSuccess {\n-            return Result.success()\n-        }.onFailure {\n-            return Result.failure()\n-        }\n-        return Result.failure()\n+        val result = MissingMediaDownloadHelper.downloadAllLazyMedia()\n+        return if (result == AppInstallStatus.Installed) Result.success() else Result.retry()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fb86158cb77cb120d00ae8a1e34026b9987108"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3261, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}