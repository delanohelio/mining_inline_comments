{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5NTI2NDEw", "number": 2411, "title": "Text to speech support", "bodyText": "Product Note: Add support for text-to-speech which can be enabled by the app setting Enable TTS or by setting tts content for the question in the form.\nUI:", "createdAt": "2020-11-30T12:46:41Z", "url": "https://github.com/dimagi/commcare-android/pull/2411", "merged": true, "mergeCommit": {"oid": "d98c7f93f3a5f654d7504e5d1c0fb2ee70c80982"}, "closed": true, "closedAt": "2020-12-17T12:51:27Z", "author": {"login": "ShivamPokhriyal"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdhjlhkAH2gAyNTI5NTI2NDEwOmE3MzY3Y2Q4YzRhZmNlODVhZWI1NzAyZmZlM2Y1NGYwNmUzN2Y5Y2E=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmpNuBgFqTU1MzM5NzU1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a7367cd8c4afce85aeb5702ffe3f54f06e37f9ca", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/a7367cd8c4afce85aeb5702ffe3f54f06e37f9ca", "committedDate": "2020-11-30T11:24:24Z", "message": "Add Text to speech engine"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d18314bb3bcea0d10add5e3f7578ad9467d1699", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/0d18314bb3bcea0d10add5e3f7578ad9467d1699", "committedDate": "2020-11-30T12:43:50Z", "message": "Add app preference for text-to-speech"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4a90b79baa8ba34e362082c6d024f313c6b39d65", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/4a90b79baa8ba34e362082c6d024f313c6b39d65", "committedDate": "2020-12-01T05:04:47Z", "message": "Add tts button to question view"}, "afterCommit": {"oid": "1d9947b601770a50ea05d9e942c0b10c6d335679", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/1d9947b601770a50ea05d9e942c0b10c6d335679", "committedDate": "2020-12-01T05:08:43Z", "message": "Add tts button to question view"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "046ff1a184e3c051dcacbe59a5c97028495e3a3a", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/046ff1a184e3c051dcacbe59a5c97028495e3a3a", "committedDate": "2020-12-01T05:23:44Z", "message": "Add tts button to question view"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1d9947b601770a50ea05d9e942c0b10c6d335679", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/1d9947b601770a50ea05d9e942c0b10c6d335679", "committedDate": "2020-12-01T05:08:43Z", "message": "Add tts button to question view"}, "afterCommit": {"oid": "046ff1a184e3c051dcacbe59a5c97028495e3a3a", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/046ff1a184e3c051dcacbe59a5c97028495e3a3a", "committedDate": "2020-12-01T05:23:44Z", "message": "Add tts button to question view"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9dda46be1986ed5e7d7da881b718cb0558002106", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/9dda46be1986ed5e7d7da881b718cb0558002106", "committedDate": "2020-12-01T05:54:16Z", "message": "Stop audio when app goes to background"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf1aee3d2c3fb9ba064f37a43b6c10847f61df54", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/cf1aee3d2c3fb9ba064f37a43b6c10847f61df54", "committedDate": "2020-12-01T10:14:10Z", "message": "Use lazy initialization for TTS"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzNjUxMzI1", "url": "https://github.com/dimagi/commcare-android/pull/2411#pullrequestreview-543651325", "createdAt": "2020-12-03T06:53:41Z", "commit": {"oid": "cf1aee3d2c3fb9ba064f37a43b6c10847f61df54"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNjo1Mzo0MVrOH9-1fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODo0ODoyMVrOH-KWdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1NDY4NQ==", "bodyText": "I think tts should be shown irrespective of all other media content except the audioURI i.e. only when audioURI is present we don't want the TTS settings to take effect but in all other cases if TTS is enabled, we should show the TTS button.", "url": "https://github.com/dimagi/commcare-android/pull/2411#discussion_r534754685", "createdAt": "2020-12-03T06:53:41Z", "author": {"login": "shubham1g5"}, "path": "app/src/org/commcare/views/media/MediaLayout.java", "diffHunk": "@@ -103,9 +105,15 @@ public static MediaLayout buildComprehensiveLayout(Context context,\n                                                        TextView text, String audioURI, String imageURI,\n                                                        final String videoURI, final String bigImageURI,\n                                                        final String qrCodeContent, String inlineVideoURI,\n+                                                       final String ttsText,\n                                                        int questionIndex) {\n         MediaLayout mediaLayout = new MediaLayout(context);\n         mediaLayout.setAVT(text, audioURI, imageURI, videoURI, bigImageURI, qrCodeContent, inlineVideoURI, false, questionIndex);\n+        // Show TTS view only when no other media is present\n+        if (ttsText != null && audioURI == null && imageURI == null && videoURI == null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf1aee3d2c3fb9ba064f37a43b6c10847f61df54"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg1NTk5MA==", "bodyText": "4000 should not be hardcoded and use same mechanism as isTextLong to get the chunk length.", "url": "https://github.com/dimagi/commcare-android/pull/2411#discussion_r534855990", "createdAt": "2020-12-03T07:57:43Z", "author": {"login": "shubham1g5"}, "path": "app/src/org/commcare/tts/TextToSpeechConverter.kt", "diffHunk": "@@ -0,0 +1,191 @@\n+package org.commcare.tts\n+\n+import android.content.Context\n+import android.os.Build\n+import android.os.Handler\n+import android.os.Looper\n+import android.speech.tts.TextToSpeech\n+import android.speech.tts.UtteranceProgressListener\n+import android.text.TextUtils\n+\n+import org.javarosa.core.services.locale.Localization\n+\n+import java.util.Locale\n+import java.util.LinkedList\n+\n+import kotlin.collections.HashMap\n+\n+/**\n+ * Utility for Android's {@link android.speech.tts.TextToSpeech} that handles initialization, shutdown,\n+ * locale setting.\n+ */\n+object TextToSpeechConverter {\n+\n+    private const val MAX_TEXT_LENGTH = 4000\n+    private var mTextToSpeech: TextToSpeech? = null\n+    private var mInitialized: Boolean = false\n+    private var mTTSCallback: TextToSpeechCallback? = null\n+    private val mUtteranceProgressListener = object: UtteranceProgressListener() {\n+        // The callbacks specified here can be called from multiple threads.\n+        override fun onDone(utteranceId: String?) { }\n+\n+        override fun onError(utteranceId: String?) {\n+            Handler(Looper.getMainLooper()).post {\n+                mTTSCallback?.speakFailed()\n+            }\n+        }\n+\n+        override fun onStart(utteranceId: String?) { }\n+    }\n+\n+    /**\n+     * Adds a listener to register callbacks for different states of Text-To-Speech engine.\n+     */\n+    fun setListener(listener: TextToSpeechCallback) {\n+        mTTSCallback = listener\n+    }\n+\n+    /**\n+     * Attempts to speak the specified text.\n+     */\n+    fun speak(context: Context, text: String) {\n+        if (!mInitialized) {\n+            initialize(context, text)\n+            return\n+        }\n+        // Handle empty text\n+        if (TextUtils.isEmpty(text)) {\n+            return\n+        }\n+        mTextToSpeech?.let { tts ->\n+            if (isTextLong(text)) {\n+                text.chunked(4000).forEach {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf1aee3d2c3fb9ba064f37a43b6c10847f61df54"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg4MzY2Mw==", "bodyText": "youc can just call dialog1.dismiss instead of re-querying for the dialog.", "url": "https://github.com/dimagi/commcare-android/pull/2411#discussion_r534883663", "createdAt": "2020-12-03T08:12:57Z", "author": {"login": "shubham1g5"}, "path": "app/src/org/commcare/activities/FormEntryActivity.java", "diffHunk": "@@ -167,6 +171,34 @@\n \n     private boolean fullFormProfilingEnabled = false;\n     private EvaluationTraceReporter traceReporter;\n+    private TextToSpeechCallback mTTSCallback = new TextToSpeechCallback() {\n+        @Override\n+        public void initFailed() {\n+            Toast.makeText(FormEntryActivity.this, Localization.get(\"tts.init.failed\"), Toast.LENGTH_LONG).show();\n+        }\n+\n+        @Override\n+        public void speakFailed() {\n+            Toast.makeText(FormEntryActivity.this, Localization.get(\"tts.speak.failed\"), Toast.LENGTH_LONG).show();\n+        }\n+\n+        @Override\n+        public void voiceDataMissing(String language) {\n+            StandardAlertDialog dialog = new StandardAlertDialog(\n+                    FormEntryActivity.this,\n+                    Localization.get(\"tts.data.missing.title\"),\n+                    Localization.get(\"tts.data.missing.message\", language));\n+            dialog.setPositiveButton(Localization.get(\"dialog.ok\"), (dialog1, which) -> {\n+                Intent installIntent = new Intent();\n+                installIntent.setAction(TextToSpeech.Engine.ACTION_INSTALL_TTS_DATA);\n+                startActivity(installIntent);\n+            });\n+            dialog.setNegativeButton(Localization.get(\"option.cancel\"), (dialog1, which) -> {\n+                dismissAlertDialog();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf1aee3d2c3fb9ba064f37a43b6c10847f61df54"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg4NDY0Ng==", "bodyText": "should dismiss the dialog once user has taken an action", "url": "https://github.com/dimagi/commcare-android/pull/2411#discussion_r534884646", "createdAt": "2020-12-03T08:13:28Z", "author": {"login": "shubham1g5"}, "path": "app/src/org/commcare/activities/FormEntryActivity.java", "diffHunk": "@@ -167,6 +171,34 @@\n \n     private boolean fullFormProfilingEnabled = false;\n     private EvaluationTraceReporter traceReporter;\n+    private TextToSpeechCallback mTTSCallback = new TextToSpeechCallback() {\n+        @Override\n+        public void initFailed() {\n+            Toast.makeText(FormEntryActivity.this, Localization.get(\"tts.init.failed\"), Toast.LENGTH_LONG).show();\n+        }\n+\n+        @Override\n+        public void speakFailed() {\n+            Toast.makeText(FormEntryActivity.this, Localization.get(\"tts.speak.failed\"), Toast.LENGTH_LONG).show();\n+        }\n+\n+        @Override\n+        public void voiceDataMissing(String language) {\n+            StandardAlertDialog dialog = new StandardAlertDialog(\n+                    FormEntryActivity.this,\n+                    Localization.get(\"tts.data.missing.title\"),\n+                    Localization.get(\"tts.data.missing.message\", language));\n+            dialog.setPositiveButton(Localization.get(\"dialog.ok\"), (dialog1, which) -> {\n+                Intent installIntent = new Intent();\n+                installIntent.setAction(TextToSpeech.Engine.ACTION_INSTALL_TTS_DATA);\n+                startActivity(installIntent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf1aee3d2c3fb9ba064f37a43b6c10847f61df54"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkzNjI0Mg==", "bodyText": "the locale needs to be reapplied when user changes the language in form and we should also pass the conuntry code from default locale to account for accents.", "url": "https://github.com/dimagi/commcare-android/pull/2411#discussion_r534936242", "createdAt": "2020-12-03T08:44:48Z", "author": {"login": "shubham1g5"}, "path": "app/src/org/commcare/tts/TextToSpeechConverter.kt", "diffHunk": "@@ -0,0 +1,191 @@\n+package org.commcare.tts\n+\n+import android.content.Context\n+import android.os.Build\n+import android.os.Handler\n+import android.os.Looper\n+import android.speech.tts.TextToSpeech\n+import android.speech.tts.UtteranceProgressListener\n+import android.text.TextUtils\n+\n+import org.javarosa.core.services.locale.Localization\n+\n+import java.util.Locale\n+import java.util.LinkedList\n+\n+import kotlin.collections.HashMap\n+\n+/**\n+ * Utility for Android's {@link android.speech.tts.TextToSpeech} that handles initialization, shutdown,\n+ * locale setting.\n+ */\n+object TextToSpeechConverter {\n+\n+    private const val MAX_TEXT_LENGTH = 4000\n+    private var mTextToSpeech: TextToSpeech? = null\n+    private var mInitialized: Boolean = false\n+    private var mTTSCallback: TextToSpeechCallback? = null\n+    private val mUtteranceProgressListener = object: UtteranceProgressListener() {\n+        // The callbacks specified here can be called from multiple threads.\n+        override fun onDone(utteranceId: String?) { }\n+\n+        override fun onError(utteranceId: String?) {\n+            Handler(Looper.getMainLooper()).post {\n+                mTTSCallback?.speakFailed()\n+            }\n+        }\n+\n+        override fun onStart(utteranceId: String?) { }\n+    }\n+\n+    /**\n+     * Adds a listener to register callbacks for different states of Text-To-Speech engine.\n+     */\n+    fun setListener(listener: TextToSpeechCallback) {\n+        mTTSCallback = listener\n+    }\n+\n+    /**\n+     * Attempts to speak the specified text.\n+     */\n+    fun speak(context: Context, text: String) {\n+        if (!mInitialized) {\n+            initialize(context, text)\n+            return\n+        }\n+        // Handle empty text\n+        if (TextUtils.isEmpty(text)) {\n+            return\n+        }\n+        mTextToSpeech?.let { tts ->\n+            if (isTextLong(text)) {\n+                text.chunked(4000).forEach {\n+                    speakInternal(tts, it, TextToSpeech.QUEUE_ADD)\n+                }\n+            } else {\n+                speakInternal(tts, text)\n+            }\n+        } ?: run {\n+            mTTSCallback?.initFailed()\n+        }\n+    }\n+\n+    /**\n+     * Attempts to stop the TTS.\n+     */\n+    fun stop() {\n+        mTextToSpeech?.let {\n+            it.stop()\n+        }\n+    }\n+\n+    /**\n+     * Attempts to shutdown the TTS engine. No calls should be made to this object after calling this method.\n+     * Good to call this from onDestroy().\n+     */\n+    fun shutDown() {\n+        mTextToSpeech?.let {\n+            it.shutdown()\n+        }\n+        mInitialized = false\n+    }\n+\n+    private fun speakInternal(tts: TextToSpeech, text: String, queueMode: Int = TextToSpeech.QUEUE_FLUSH) {\n+        val utteranceId = System.currentTimeMillis().toString()\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n+            tts.speak(text, queueMode, null, utteranceId)\n+        } else {\n+            val params = HashMap<String, String>()\n+            params[TextToSpeech.Engine.KEY_PARAM_UTTERANCE_ID] = utteranceId\n+            tts.speak(text, queueMode, params)\n+        }\n+    }\n+\n+    private fun isTextLong(text: String): Boolean {\n+        // TTS can only speak 4000 characters at max at a time.\n+        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {\n+            text.length > TextToSpeech.getMaxSpeechInputLength()\n+        } else {\n+            text.length > MAX_TEXT_LENGTH\n+        }\n+    }\n+\n+    /**\n+     * Initializes the Text-To-Speech engine\n+     */\n+    private fun initialize(context: Context, text: String) {\n+        mTextToSpeech = TextToSpeech(context, TextToSpeech.OnInitListener { status ->\n+            if (status == TextToSpeech.SUCCESS) {\n+                // set language and speak\n+                mTextToSpeech?.let { tts ->\n+                    tts.setOnUtteranceProgressListener(mUtteranceProgressListener)\n+                    if (setLocale(tts, LinkedList(listOf(\n+                                    Locale(Localization.getCurrentLocale()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf1aee3d2c3fb9ba064f37a43b6c10847f61df54"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDk0MTkyOA==", "bodyText": "if it does not work at all, is there any sense of having it in code ?", "url": "https://github.com/dimagi/commcare-android/pull/2411#discussion_r534941928", "createdAt": "2020-12-03T08:47:40Z", "author": {"login": "shubham1g5"}, "path": "app/src/org/commcare/tts/TextToSpeechConverter.kt", "diffHunk": "@@ -0,0 +1,191 @@\n+package org.commcare.tts\n+\n+import android.content.Context\n+import android.os.Build\n+import android.os.Handler\n+import android.os.Looper\n+import android.speech.tts.TextToSpeech\n+import android.speech.tts.UtteranceProgressListener\n+import android.text.TextUtils\n+\n+import org.javarosa.core.services.locale.Localization\n+\n+import java.util.Locale\n+import java.util.LinkedList\n+\n+import kotlin.collections.HashMap\n+\n+/**\n+ * Utility for Android's {@link android.speech.tts.TextToSpeech} that handles initialization, shutdown,\n+ * locale setting.\n+ */\n+object TextToSpeechConverter {\n+\n+    private const val MAX_TEXT_LENGTH = 4000\n+    private var mTextToSpeech: TextToSpeech? = null\n+    private var mInitialized: Boolean = false\n+    private var mTTSCallback: TextToSpeechCallback? = null\n+    private val mUtteranceProgressListener = object: UtteranceProgressListener() {\n+        // The callbacks specified here can be called from multiple threads.\n+        override fun onDone(utteranceId: String?) { }\n+\n+        override fun onError(utteranceId: String?) {\n+            Handler(Looper.getMainLooper()).post {\n+                mTTSCallback?.speakFailed()\n+            }\n+        }\n+\n+        override fun onStart(utteranceId: String?) { }\n+    }\n+\n+    /**\n+     * Adds a listener to register callbacks for different states of Text-To-Speech engine.\n+     */\n+    fun setListener(listener: TextToSpeechCallback) {\n+        mTTSCallback = listener\n+    }\n+\n+    /**\n+     * Attempts to speak the specified text.\n+     */\n+    fun speak(context: Context, text: String) {\n+        if (!mInitialized) {\n+            initialize(context, text)\n+            return\n+        }\n+        // Handle empty text\n+        if (TextUtils.isEmpty(text)) {\n+            return\n+        }\n+        mTextToSpeech?.let { tts ->\n+            if (isTextLong(text)) {\n+                text.chunked(4000).forEach {\n+                    speakInternal(tts, it, TextToSpeech.QUEUE_ADD)\n+                }\n+            } else {\n+                speakInternal(tts, text)\n+            }\n+        } ?: run {\n+            mTTSCallback?.initFailed()\n+        }\n+    }\n+\n+    /**\n+     * Attempts to stop the TTS.\n+     */\n+    fun stop() {\n+        mTextToSpeech?.let {\n+            it.stop()\n+        }\n+    }\n+\n+    /**\n+     * Attempts to shutdown the TTS engine. No calls should be made to this object after calling this method.\n+     * Good to call this from onDestroy().\n+     */\n+    fun shutDown() {\n+        mTextToSpeech?.let {\n+            it.shutdown()\n+        }\n+        mInitialized = false\n+    }\n+\n+    private fun speakInternal(tts: TextToSpeech, text: String, queueMode: Int = TextToSpeech.QUEUE_FLUSH) {\n+        val utteranceId = System.currentTimeMillis().toString()\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n+            tts.speak(text, queueMode, null, utteranceId)\n+        } else {\n+            val params = HashMap<String, String>()\n+            params[TextToSpeech.Engine.KEY_PARAM_UTTERANCE_ID] = utteranceId\n+            tts.speak(text, queueMode, params)\n+        }\n+    }\n+\n+    private fun isTextLong(text: String): Boolean {\n+        // TTS can only speak 4000 characters at max at a time.\n+        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {\n+            text.length > TextToSpeech.getMaxSpeechInputLength()\n+        } else {\n+            text.length > MAX_TEXT_LENGTH\n+        }\n+    }\n+\n+    /**\n+     * Initializes the Text-To-Speech engine\n+     */\n+    private fun initialize(context: Context, text: String) {\n+        mTextToSpeech = TextToSpeech(context, TextToSpeech.OnInitListener { status ->\n+            if (status == TextToSpeech.SUCCESS) {\n+                // set language and speak\n+                mTextToSpeech?.let { tts ->\n+                    tts.setOnUtteranceProgressListener(mUtteranceProgressListener)\n+                    if (setLocale(tts, LinkedList(listOf(\n+                                    Locale(Localization.getCurrentLocale()),\n+                                    Locale.getDefault(),\n+                                    Locale.ENGLISH)))) {\n+                        // tts initialization completed.\n+                        mInitialized = true\n+                        speak(context, text)\n+                    }\n+                }\n+            } else {\n+                mTTSCallback?.initFailed()\n+            }\n+        })\n+    }\n+\n+    /**\n+     * Sets a TTS language from the given list of locale starting from the first Locale.\n+     *\n+     * Returns a boolean indicating whether we TTS language is ready to use.\n+     */\n+    private fun setLocale(tts: TextToSpeech, localeList: LinkedList<Locale>): Boolean {\n+        if (localeList.isEmpty()) {\n+            return false\n+        }\n+        val locale = localeList.pop()\n+        return when (tts.isLanguageAvailable(locale)) {\n+            TextToSpeech.LANG_AVAILABLE,\n+            TextToSpeech.LANG_COUNTRY_AVAILABLE,\n+            TextToSpeech.LANG_COUNTRY_VAR_AVAILABLE -> {\n+                // Set language\n+                tts.language = locale\n+\n+                // Check if voice data is present or not.\n+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n+                    if (tts.voice != null) {\n+                        val features = tts.voice.features\n+                        if (features == null\n+                                || features.contains(TextToSpeech.Engine.KEY_FEATURE_NOT_INSTALLED)\n+                                || tts.voice.isNetworkConnectionRequired) {\n+                            // voice data is not present\n+                            mTTSCallback?.voiceDataMissing(locale.displayLanguage)\n+                            return false\n+                        }\n+                    }\n+                } else {\n+                    val features = tts.getFeatures(locale)\n+                    if (features == null || features.contains(\"notInstalled\")) {\n+                        mTTSCallback?.voiceDataMissing(locale.displayLanguage)\n+                        return false\n+                    }\n+                }\n+                // voice data is present so return true that we're ready to use.\n+                true\n+            }\n+            TextToSpeech.LANG_MISSING_DATA -> {\n+                // Unfortunately this callback doesn't really work.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf1aee3d2c3fb9ba064f37a43b6c10847f61df54"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDk0MzM0OQ==", "bodyText": "should we returning false when tts.voice==null ?", "url": "https://github.com/dimagi/commcare-android/pull/2411#discussion_r534943349", "createdAt": "2020-12-03T08:48:21Z", "author": {"login": "shubham1g5"}, "path": "app/src/org/commcare/tts/TextToSpeechConverter.kt", "diffHunk": "@@ -0,0 +1,191 @@\n+package org.commcare.tts\n+\n+import android.content.Context\n+import android.os.Build\n+import android.os.Handler\n+import android.os.Looper\n+import android.speech.tts.TextToSpeech\n+import android.speech.tts.UtteranceProgressListener\n+import android.text.TextUtils\n+\n+import org.javarosa.core.services.locale.Localization\n+\n+import java.util.Locale\n+import java.util.LinkedList\n+\n+import kotlin.collections.HashMap\n+\n+/**\n+ * Utility for Android's {@link android.speech.tts.TextToSpeech} that handles initialization, shutdown,\n+ * locale setting.\n+ */\n+object TextToSpeechConverter {\n+\n+    private const val MAX_TEXT_LENGTH = 4000\n+    private var mTextToSpeech: TextToSpeech? = null\n+    private var mInitialized: Boolean = false\n+    private var mTTSCallback: TextToSpeechCallback? = null\n+    private val mUtteranceProgressListener = object: UtteranceProgressListener() {\n+        // The callbacks specified here can be called from multiple threads.\n+        override fun onDone(utteranceId: String?) { }\n+\n+        override fun onError(utteranceId: String?) {\n+            Handler(Looper.getMainLooper()).post {\n+                mTTSCallback?.speakFailed()\n+            }\n+        }\n+\n+        override fun onStart(utteranceId: String?) { }\n+    }\n+\n+    /**\n+     * Adds a listener to register callbacks for different states of Text-To-Speech engine.\n+     */\n+    fun setListener(listener: TextToSpeechCallback) {\n+        mTTSCallback = listener\n+    }\n+\n+    /**\n+     * Attempts to speak the specified text.\n+     */\n+    fun speak(context: Context, text: String) {\n+        if (!mInitialized) {\n+            initialize(context, text)\n+            return\n+        }\n+        // Handle empty text\n+        if (TextUtils.isEmpty(text)) {\n+            return\n+        }\n+        mTextToSpeech?.let { tts ->\n+            if (isTextLong(text)) {\n+                text.chunked(4000).forEach {\n+                    speakInternal(tts, it, TextToSpeech.QUEUE_ADD)\n+                }\n+            } else {\n+                speakInternal(tts, text)\n+            }\n+        } ?: run {\n+            mTTSCallback?.initFailed()\n+        }\n+    }\n+\n+    /**\n+     * Attempts to stop the TTS.\n+     */\n+    fun stop() {\n+        mTextToSpeech?.let {\n+            it.stop()\n+        }\n+    }\n+\n+    /**\n+     * Attempts to shutdown the TTS engine. No calls should be made to this object after calling this method.\n+     * Good to call this from onDestroy().\n+     */\n+    fun shutDown() {\n+        mTextToSpeech?.let {\n+            it.shutdown()\n+        }\n+        mInitialized = false\n+    }\n+\n+    private fun speakInternal(tts: TextToSpeech, text: String, queueMode: Int = TextToSpeech.QUEUE_FLUSH) {\n+        val utteranceId = System.currentTimeMillis().toString()\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n+            tts.speak(text, queueMode, null, utteranceId)\n+        } else {\n+            val params = HashMap<String, String>()\n+            params[TextToSpeech.Engine.KEY_PARAM_UTTERANCE_ID] = utteranceId\n+            tts.speak(text, queueMode, params)\n+        }\n+    }\n+\n+    private fun isTextLong(text: String): Boolean {\n+        // TTS can only speak 4000 characters at max at a time.\n+        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {\n+            text.length > TextToSpeech.getMaxSpeechInputLength()\n+        } else {\n+            text.length > MAX_TEXT_LENGTH\n+        }\n+    }\n+\n+    /**\n+     * Initializes the Text-To-Speech engine\n+     */\n+    private fun initialize(context: Context, text: String) {\n+        mTextToSpeech = TextToSpeech(context, TextToSpeech.OnInitListener { status ->\n+            if (status == TextToSpeech.SUCCESS) {\n+                // set language and speak\n+                mTextToSpeech?.let { tts ->\n+                    tts.setOnUtteranceProgressListener(mUtteranceProgressListener)\n+                    if (setLocale(tts, LinkedList(listOf(\n+                                    Locale(Localization.getCurrentLocale()),\n+                                    Locale.getDefault(),\n+                                    Locale.ENGLISH)))) {\n+                        // tts initialization completed.\n+                        mInitialized = true\n+                        speak(context, text)\n+                    }\n+                }\n+            } else {\n+                mTTSCallback?.initFailed()\n+            }\n+        })\n+    }\n+\n+    /**\n+     * Sets a TTS language from the given list of locale starting from the first Locale.\n+     *\n+     * Returns a boolean indicating whether we TTS language is ready to use.\n+     */\n+    private fun setLocale(tts: TextToSpeech, localeList: LinkedList<Locale>): Boolean {\n+        if (localeList.isEmpty()) {\n+            return false\n+        }\n+        val locale = localeList.pop()\n+        return when (tts.isLanguageAvailable(locale)) {\n+            TextToSpeech.LANG_AVAILABLE,\n+            TextToSpeech.LANG_COUNTRY_AVAILABLE,\n+            TextToSpeech.LANG_COUNTRY_VAR_AVAILABLE -> {\n+                // Set language\n+                tts.language = locale\n+\n+                // Check if voice data is present or not.\n+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n+                    if (tts.voice != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf1aee3d2c3fb9ba064f37a43b6c10847f61df54"}, "originalPosition": 156}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "004fd3fa84cb1c43d397400153db4f8d5813dfd0", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/004fd3fa84cb1c43d397400153db4f8d5813dfd0", "committedDate": "2020-12-04T06:36:59Z", "message": "PR suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d05bfda22685a7615752f95b3f856aaffe1f340", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/1d05bfda22685a7615752f95b3f856aaffe1f340", "committedDate": "2020-12-04T07:15:55Z", "message": "Return true when voice is null"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcda13814c80d821c67806b156ef0c0d36a41f8a", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/bcda13814c80d821c67806b156ef0c0d36a41f8a", "committedDate": "2020-12-04T07:41:14Z", "message": "Use locale with country code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3dd36a2f21a019dbb93dfb4fef2d637716cc9275", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/3dd36a2f21a019dbb93dfb4fef2d637716cc9275", "committedDate": "2020-12-08T10:46:21Z", "message": "Merge branch 'master' into text-to-speech"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMDYzNTQ1", "url": "https://github.com/dimagi/commcare-android/pull/2411#pullrequestreview-551063545", "createdAt": "2020-12-14T05:59:29Z", "commit": {"oid": "3dd36a2f21a019dbb93dfb4fef2d637716cc9275"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNTo1OToyOVrOIFBDmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNTo1OToyOVrOIFBDmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEzMTA5Nw==", "bodyText": "How does the layout look when you have TTS plus a videoURI ?", "url": "https://github.com/dimagi/commcare-android/pull/2411#discussion_r542131097", "createdAt": "2020-12-14T05:59:29Z", "author": {"login": "shubham1g5"}, "path": "app/src/org/commcare/views/media/MediaLayout.java", "diffHunk": "@@ -103,9 +105,14 @@ public static MediaLayout buildComprehensiveLayout(Context context,\n                                                        TextView text, String audioURI, String imageURI,\n                                                        final String videoURI, final String bigImageURI,\n                                                        final String qrCodeContent, String inlineVideoURI,\n+                                                       final String ttsText,\n                                                        int questionIndex) {\n         MediaLayout mediaLayout = new MediaLayout(context);\n         mediaLayout.setAVT(text, audioURI, imageURI, videoURI, bigImageURI, qrCodeContent, inlineVideoURI, false, questionIndex);\n+        // Show TTS view only when audioURI is not present\n+        if (ttsText != null && audioURI == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dd36a2f21a019dbb93dfb4fef2d637716cc9275"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMDY0Mjc0", "url": "https://github.com/dimagi/commcare-android/pull/2411#pullrequestreview-551064274", "createdAt": "2020-12-14T06:01:22Z", "commit": {"oid": "3dd36a2f21a019dbb93dfb4fef2d637716cc9275"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMTI3MTU1", "url": "https://github.com/dimagi/commcare-android/pull/2411#pullrequestreview-552127155", "createdAt": "2020-12-15T05:57:16Z", "commit": {"oid": "3dd36a2f21a019dbb93dfb4fef2d637716cc9275"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNTo1NzoxNlrOIF6N6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNTo1NzoxNlrOIF6N6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA2NzYyNw==", "bodyText": "Should not this called again after user change a language in CommCare ?", "url": "https://github.com/dimagi/commcare-android/pull/2411#discussion_r543067627", "createdAt": "2020-12-15T05:57:16Z", "author": {"login": "shubham1g5"}, "path": "app/src/org/commcare/tts/TextToSpeechConverter.kt", "diffHunk": "@@ -0,0 +1,208 @@\n+package org.commcare.tts\n+\n+import android.content.Context\n+import android.os.Build\n+import android.os.Handler\n+import android.os.Looper\n+import android.speech.tts.TextToSpeech\n+import android.speech.tts.UtteranceProgressListener\n+import android.text.TextUtils\n+\n+import org.javarosa.core.services.locale.Localization\n+\n+import java.util.Locale\n+import java.util.LinkedList\n+\n+import kotlin.collections.HashMap\n+\n+/**\n+ * Utility for Android's {@link android.speech.tts.TextToSpeech} that handles initialization, shutdown,\n+ * locale setting.\n+ */\n+object TextToSpeechConverter {\n+\n+    private val MAX_TEXT_LENGTH = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {\n+        TextToSpeech.getMaxSpeechInputLength()\n+    } else {\n+        4000\n+    }\n+    private var mTextToSpeech: TextToSpeech? = null\n+    private var mInitialized: Boolean = false\n+    private var mTTSCallback: TextToSpeechCallback? = null\n+    private val mUtteranceProgressListener = object: UtteranceProgressListener() {\n+        // The callbacks specified here can be called from multiple threads.\n+        override fun onDone(utteranceId: String?) { }\n+\n+        override fun onError(utteranceId: String?) {\n+            Handler(Looper.getMainLooper()).post {\n+                mTTSCallback?.speakFailed()\n+            }\n+        }\n+\n+        override fun onStart(utteranceId: String?) { }\n+    }\n+\n+    /**\n+     * Adds a listener to register callbacks for different states of Text-To-Speech engine.\n+     */\n+    fun setListener(listener: TextToSpeechCallback) {\n+        mTTSCallback = listener\n+    }\n+\n+    /**\n+     * Attempts to speak the specified text.\n+     */\n+    fun speak(context: Context, text: String) {\n+        if (!mInitialized) {\n+            initialize(context, text)\n+            return\n+        }\n+        // Handle empty text\n+        if (TextUtils.isEmpty(text)) {\n+            return\n+        }\n+        mTextToSpeech?.let { tts ->\n+            if (text.length > MAX_TEXT_LENGTH) {\n+                text.chunked(MAX_TEXT_LENGTH).forEach {\n+                    speakInternal(tts, it, TextToSpeech.QUEUE_ADD)\n+                }\n+            } else {\n+                speakInternal(tts, text)\n+            }\n+        } ?: run {\n+            mTTSCallback?.initFailed()\n+        }\n+    }\n+\n+    /**\n+     * Attempts to stop the TTS.\n+     */\n+    fun stop() {\n+        mTextToSpeech?.let {\n+            it.stop()\n+        }\n+    }\n+\n+    /**\n+     * Attempts to shutdown the TTS engine. No calls should be made to this object after calling this method.\n+     * Good to call this from onDestroy().\n+     */\n+    fun shutDown() {\n+        mTextToSpeech?.let {\n+            it.shutdown()\n+        }\n+        mInitialized = false\n+    }\n+\n+    /**\n+     * Changes the locale of text to speech engine.\n+     */\n+    fun changeLocale(language: String) {\n+        mTextToSpeech?.let { tts ->\n+            setLocale(tts, LinkedList(listOf(Locale(language, Locale.getDefault().country))))\n+        }\n+    }\n+\n+    private fun speakInternal(tts: TextToSpeech, text: String, queueMode: Int = TextToSpeech.QUEUE_FLUSH) {\n+        val utteranceId = System.currentTimeMillis().toString()\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n+            tts.speak(text, queueMode, null, utteranceId)\n+        } else {\n+            val params = HashMap<String, String>()\n+            params[TextToSpeech.Engine.KEY_PARAM_UTTERANCE_ID] = utteranceId\n+            tts.speak(text, queueMode, params)\n+        }\n+    }\n+\n+    private fun isTextLong(text: String): Boolean {\n+        // TTS can only speak 4000 characters at max at a time.\n+        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {\n+            text.length > TextToSpeech.getMaxSpeechInputLength()\n+        } else {\n+            text.length > MAX_TEXT_LENGTH\n+        }\n+    }\n+\n+    /**\n+     * Initializes the Text-To-Speech engine\n+     */\n+    private fun initialize(context: Context, text: String) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dd36a2f21a019dbb93dfb4fef2d637716cc9275"}, "originalPosition": 129}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMTc5NjQ4", "url": "https://github.com/dimagi/commcare-android/pull/2411#pullrequestreview-552179648", "createdAt": "2020-12-15T07:47:19Z", "commit": {"oid": "3dd36a2f21a019dbb93dfb4fef2d637716cc9275"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6adb96fc40c42bdb7bf0b74fc985a89713109a5", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/d6adb96fc40c42bdb7bf0b74fc985a89713109a5", "committedDate": "2020-12-15T13:58:34Z", "message": "Check for missing voice data only when we get error in speak\n\nOddly, TTS voice.getFeature returns notinstalled sometimes even when the data is installed. Because of this false positive we were showing a dialog to install voice data when it was already installed. With this change we now move the voice data check outside, and only report it when we get an error while speaking."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNDkxMDk1", "url": "https://github.com/dimagi/commcare-android/pull/2411#pullrequestreview-552491095", "createdAt": "2020-12-15T14:04:48Z", "commit": {"oid": "d6adb96fc40c42bdb7bf0b74fc985a89713109a5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDowNDo0OFrOIGMgjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDowNDo0OFrOIGMgjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM2NzMwOQ==", "bodyText": "features.contains(TextToSpeech.Engine.KEY_FEATURE_NOT_INSTALLED) returns true irregularly even when the data is installed. Because of this false positive we were showing a dialog to install voice data when it was already installed.", "url": "https://github.com/dimagi/commcare-android/pull/2411#discussion_r543367309", "createdAt": "2020-12-15T14:04:48Z", "author": {"login": "ShivamPokhriyal"}, "path": "app/src/org/commcare/tts/TextToSpeechConverter.kt", "diffHunk": "@@ -163,31 +187,6 @@ object TextToSpeechConverter {\n             TextToSpeech.LANG_COUNTRY_VAR_AVAILABLE -> {\n                 // Set language\n                 tts.language = locale\n-\n-                // Check if voice data is present or not.\n-                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n-                    if (tts.voice != null) {\n-                        val features = tts.voice.features\n-                        if (features == null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6adb96fc40c42bdb7bf0b74fc985a89713109a5"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzMzk3NTUx", "url": "https://github.com/dimagi/commcare-android/pull/2411#pullrequestreview-553397551", "createdAt": "2020-12-16T06:47:27Z", "commit": {"oid": "d6adb96fc40c42bdb7bf0b74fc985a89713109a5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2017, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}