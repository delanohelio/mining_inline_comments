{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NDE0NDky", "number": 2280, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTowNzo1OVrOEGy0yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToyOTozOVrOEGzYug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTU5NjI1OnYy", "diffSide": "RIGHT", "path": "app/src/org/commcare/activities/QueryRequestActivity.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTowNzo1OVrOGlzzAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTowNzo1OVrOGlzzAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5OTEzOA==", "bodyText": "Does this handle blank entries effectively? It was unclear from the UI and I can't quite tell from the code how easy it is to \"undo\" entering a value into the spinner at all (which we definitely want to support)", "url": "https://github.com/dimagi/commcare-android/pull/2280#discussion_r442299138", "createdAt": "2020-06-18T15:07:59Z", "author": {"login": "ctsims"}, "path": "app/src/org/commcare/activities/QueryRequestActivity.java", "diffHunk": "@@ -116,56 +132,176 @@ private void buildPromptUI() {\n     }\n \n     private void buildPromptEntry(LinearLayout promptsLayout, String promptId,\n-                                  DisplayUnit displayUnit, boolean isLastPrompt) {\n+                                  QueryPrompt queryPrompt, boolean isLastPrompt) {\n         Hashtable<String, String> userAnswers =\n                 remoteQuerySessionManager.getUserAnswers();\n-        promptsLayout.addView(createPromptMedia(displayUnit));\n \n-        EditText promptEditText = new EditText(this);\n+        View promptView = LayoutInflater.from(this).inflate(R.layout.query_prompt_layout, promptsLayout, false);\n+        setLabelText(promptView, queryPrompt.getDisplay());\n+        View inputView;\n+        String input = queryPrompt.getInput();\n+        if (input != null && input.contentEquals(SELECT1)) {\n+            inputView = setUpSpinnerView(promptView, queryPrompt, userAnswers);\n+        } else {\n+            inputView = setUpEditTextView(promptView, queryPrompt, promptId, userAnswers, isLastPrompt);\n+        }\n+        setUpBarCodeScanButton(promptView, promptId, queryPrompt);\n+\n+        promptsLayout.addView(promptView);\n+        promptsBoxes.put(promptId, inputView);\n+    }\n+\n+    private void setUpBarCodeScanButton(View promptView, String promptId, QueryPrompt queryPrompt) {\n+        ImageView barcodeScannerView = promptView.findViewById(R.id.barcode_scanner);\n+        barcodeScannerView.setVisibility(isBarcodeEnabled(queryPrompt) ? View.VISIBLE : View.INVISIBLE);\n+        barcodeScannerView.setTag(promptId);\n+        barcodeScannerView.setOnClickListener(v ->\n+                callBarcodeScanIntent((String)v.getTag())\n+        );\n+    }\n+\n+    private Spinner setUpSpinnerView(View promptView, QueryPrompt queryPrompt,\n+                                     Hashtable<String, String> userAnswers) {\n+        Spinner promptSpinner = promptView.findViewById(R.id.prompt_spinner);\n+        promptSpinner.setVisibility(View.VISIBLE);\n+        promptView.findViewById(R.id.prompt_et).setVisibility(View.GONE);\n+\n+        promptSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n+            @Override\n+            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n+                Vector<SelectChoice> choices = queryPrompt.getItemsetBinding().getChoices();\n+                SelectChoice selectChoice = choices.get(position);\n+                String oldAnswer = userAnswers.get(queryPrompt.getKey());\n+                if(oldAnswer == null || !oldAnswer.contentEquals(selectChoice.getValue())) {\n+                    remoteQuerySessionManager.answerUserPrompt(queryPrompt.getKey(), selectChoice.getValue());\n+                    refreshUI();\n+                }\n+            }\n+\n+            @Override\n+            public void onNothingSelected(AdapterView<?> parent) {\n+\n+            }\n+        });\n+\n+        setSpinnerData(userAnswers, queryPrompt, promptSpinner);\n+        return promptSpinner;\n+    }\n+\n+    private void setSpinnerData(Hashtable<String, String> userAnswers, QueryPrompt queryPrompt, Spinner promptSpinner) {\n+        remoteQuerySessionManager.populateItemSetChoices(queryPrompt);\n+        Vector<SelectChoice> items = queryPrompt.getItemsetBinding().getChoices();\n+        String answer = userAnswers.get(queryPrompt.getKey());\n+        String[] choices = new String[items.size()];\n+        int selectedPosition = -1;\n+        for (int i = 0; i < items.size(); i++) {\n+            SelectChoice item = items.get(i);\n+            choices[i] = item.getLabelInnerText();\n+            if(item.getValue().equals(answer)){\n+                selectedPosition = i;\n+            }\n+        }\n+\n+        ArrayAdapter<String> adapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, choices);\n+        promptSpinner.setAdapter(adapter);\n+        if(selectedPosition != -1) {\n+            promptSpinner.setSelection(selectedPosition);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13059b1cb18e067a7fdb61d6a7bb5065ff1f9307"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTY3OTE4OnYy", "diffSide": "RIGHT", "path": "app/src/org/commcare/activities/QueryRequestActivity.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToyNzoyOFrOGl0nxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToyNzoyOFrOGl0nxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxMjY0NA==", "bodyText": "Does this trigger a \"selection changed\" event at all, or is it only in like 208 that this gets processed?", "url": "https://github.com/dimagi/commcare-android/pull/2280#discussion_r442312644", "createdAt": "2020-06-18T15:27:28Z", "author": {"login": "ctsims"}, "path": "app/src/org/commcare/activities/QueryRequestActivity.java", "diffHunk": "@@ -116,56 +132,176 @@ private void buildPromptUI() {\n     }\n \n     private void buildPromptEntry(LinearLayout promptsLayout, String promptId,\n-                                  DisplayUnit displayUnit, boolean isLastPrompt) {\n+                                  QueryPrompt queryPrompt, boolean isLastPrompt) {\n         Hashtable<String, String> userAnswers =\n                 remoteQuerySessionManager.getUserAnswers();\n-        promptsLayout.addView(createPromptMedia(displayUnit));\n \n-        EditText promptEditText = new EditText(this);\n+        View promptView = LayoutInflater.from(this).inflate(R.layout.query_prompt_layout, promptsLayout, false);\n+        setLabelText(promptView, queryPrompt.getDisplay());\n+        View inputView;\n+        String input = queryPrompt.getInput();\n+        if (input != null && input.contentEquals(SELECT1)) {\n+            inputView = setUpSpinnerView(promptView, queryPrompt, userAnswers);\n+        } else {\n+            inputView = setUpEditTextView(promptView, queryPrompt, promptId, userAnswers, isLastPrompt);\n+        }\n+        setUpBarCodeScanButton(promptView, promptId, queryPrompt);\n+\n+        promptsLayout.addView(promptView);\n+        promptsBoxes.put(promptId, inputView);\n+    }\n+\n+    private void setUpBarCodeScanButton(View promptView, String promptId, QueryPrompt queryPrompt) {\n+        ImageView barcodeScannerView = promptView.findViewById(R.id.barcode_scanner);\n+        barcodeScannerView.setVisibility(isBarcodeEnabled(queryPrompt) ? View.VISIBLE : View.INVISIBLE);\n+        barcodeScannerView.setTag(promptId);\n+        barcodeScannerView.setOnClickListener(v ->\n+                callBarcodeScanIntent((String)v.getTag())\n+        );\n+    }\n+\n+    private Spinner setUpSpinnerView(View promptView, QueryPrompt queryPrompt,\n+                                     Hashtable<String, String> userAnswers) {\n+        Spinner promptSpinner = promptView.findViewById(R.id.prompt_spinner);\n+        promptSpinner.setVisibility(View.VISIBLE);\n+        promptView.findViewById(R.id.prompt_et).setVisibility(View.GONE);\n+\n+        promptSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n+            @Override\n+            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n+                Vector<SelectChoice> choices = queryPrompt.getItemsetBinding().getChoices();\n+                SelectChoice selectChoice = choices.get(position);\n+                String oldAnswer = userAnswers.get(queryPrompt.getKey());\n+                if(oldAnswer == null || !oldAnswer.contentEquals(selectChoice.getValue())) {\n+                    remoteQuerySessionManager.answerUserPrompt(queryPrompt.getKey(), selectChoice.getValue());\n+                    refreshUI();\n+                }\n+            }\n+\n+            @Override\n+            public void onNothingSelected(AdapterView<?> parent) {\n+\n+            }\n+        });\n+\n+        setSpinnerData(userAnswers, queryPrompt, promptSpinner);\n+        return promptSpinner;\n+    }\n+\n+    private void setSpinnerData(Hashtable<String, String> userAnswers, QueryPrompt queryPrompt, Spinner promptSpinner) {\n+        remoteQuerySessionManager.populateItemSetChoices(queryPrompt);\n+        Vector<SelectChoice> items = queryPrompt.getItemsetBinding().getChoices();\n+        String answer = userAnswers.get(queryPrompt.getKey());\n+        String[] choices = new String[items.size()];\n+        int selectedPosition = -1;\n+        for (int i = 0; i < items.size(); i++) {\n+            SelectChoice item = items.get(i);\n+            choices[i] = item.getLabelInnerText();\n+            if(item.getValue().equals(answer)){\n+                selectedPosition = i;\n+            }\n+        }\n+\n+        ArrayAdapter<String> adapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, choices);\n+        promptSpinner.setAdapter(adapter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13059b1cb18e067a7fdb61d6a7bb5065ff1f9307"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTY4ODI2OnYy", "diffSide": "RIGHT", "path": "app/src/org/commcare/activities/QueryRequestActivity.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToyOTozOVrOGl0tgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToyOTozOVrOGl0tgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxNDExNQ==", "bodyText": "Am I right in assuming that it's this event loop that propagates out of order changes?\nIE: If this spinner view is the last item in the 213 loop, and its value is changed on 208, this selected method is fired, and the loop is redone in case a previous spinner needs to be changed?", "url": "https://github.com/dimagi/commcare-android/pull/2280#discussion_r442314115", "createdAt": "2020-06-18T15:29:39Z", "author": {"login": "ctsims"}, "path": "app/src/org/commcare/activities/QueryRequestActivity.java", "diffHunk": "@@ -116,56 +132,176 @@ private void buildPromptUI() {\n     }\n \n     private void buildPromptEntry(LinearLayout promptsLayout, String promptId,\n-                                  DisplayUnit displayUnit, boolean isLastPrompt) {\n+                                  QueryPrompt queryPrompt, boolean isLastPrompt) {\n         Hashtable<String, String> userAnswers =\n                 remoteQuerySessionManager.getUserAnswers();\n-        promptsLayout.addView(createPromptMedia(displayUnit));\n \n-        EditText promptEditText = new EditText(this);\n+        View promptView = LayoutInflater.from(this).inflate(R.layout.query_prompt_layout, promptsLayout, false);\n+        setLabelText(promptView, queryPrompt.getDisplay());\n+        View inputView;\n+        String input = queryPrompt.getInput();\n+        if (input != null && input.contentEquals(SELECT1)) {\n+            inputView = setUpSpinnerView(promptView, queryPrompt, userAnswers);\n+        } else {\n+            inputView = setUpEditTextView(promptView, queryPrompt, promptId, userAnswers, isLastPrompt);\n+        }\n+        setUpBarCodeScanButton(promptView, promptId, queryPrompt);\n+\n+        promptsLayout.addView(promptView);\n+        promptsBoxes.put(promptId, inputView);\n+    }\n+\n+    private void setUpBarCodeScanButton(View promptView, String promptId, QueryPrompt queryPrompt) {\n+        ImageView barcodeScannerView = promptView.findViewById(R.id.barcode_scanner);\n+        barcodeScannerView.setVisibility(isBarcodeEnabled(queryPrompt) ? View.VISIBLE : View.INVISIBLE);\n+        barcodeScannerView.setTag(promptId);\n+        barcodeScannerView.setOnClickListener(v ->\n+                callBarcodeScanIntent((String)v.getTag())\n+        );\n+    }\n+\n+    private Spinner setUpSpinnerView(View promptView, QueryPrompt queryPrompt,\n+                                     Hashtable<String, String> userAnswers) {\n+        Spinner promptSpinner = promptView.findViewById(R.id.prompt_spinner);\n+        promptSpinner.setVisibility(View.VISIBLE);\n+        promptView.findViewById(R.id.prompt_et).setVisibility(View.GONE);\n+\n+        promptSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n+            @Override\n+            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n+                Vector<SelectChoice> choices = queryPrompt.getItemsetBinding().getChoices();\n+                SelectChoice selectChoice = choices.get(position);\n+                String oldAnswer = userAnswers.get(queryPrompt.getKey());\n+                if(oldAnswer == null || !oldAnswer.contentEquals(selectChoice.getValue())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13059b1cb18e067a7fdb61d6a7bb5065ff1f9307"}, "originalPosition": 128}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3286, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}