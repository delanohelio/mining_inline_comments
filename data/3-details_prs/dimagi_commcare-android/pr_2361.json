{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0MDMzMjA1", "number": 2361, "title": "Add form entry tests", "bodyText": "#2341", "createdAt": "2020-09-28T10:08:43Z", "url": "https://github.com/dimagi/commcare-android/pull/2361", "merged": true, "mergeCommit": {"oid": "1364747479d9721be557d078ebd72975df95a9ee"}, "closed": true, "closedAt": "2020-10-02T05:22:49Z", "author": {"login": "ShivamPokhriyal"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNRcBvgH2gAyNDk0MDMzMjA1OmNhNTAyYmYxNjczZTc3Y2MwMzJiY2EyMzk5NDgwYzczYTAyMzVhNDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOPGQVgFqTUwMDIyNDcxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ca502bf1673e77cc032bca2399480c73a0235a45", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/ca502bf1673e77cc032bca2399480c73a0235a45", "committedDate": "2020-09-28T10:57:15Z", "message": "Add form entry tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bad3afff6ad7059247a3ce3da3f977bac5440f24", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/bad3afff6ad7059247a3ce3da3f977bac5440f24", "committedDate": "2020-09-28T10:08:09Z", "message": "Add form entry tests"}, "afterCommit": {"oid": "ca502bf1673e77cc032bca2399480c73a0235a45", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/ca502bf1673e77cc032bca2399480c73a0235a45", "committedDate": "2020-09-28T10:57:15Z", "message": "Add form entry tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4dc8506460ef64b37423e0b4f43e818f747881a", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/b4dc8506460ef64b37423e0b4f43e818f747881a", "committedDate": "2020-09-29T12:22:45Z", "message": "Merge branch 'master' into form-entry-test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NDA0MzIx", "url": "https://github.com/dimagi/commcare-android/pull/2361#pullrequestreview-498404321", "createdAt": "2020-09-29T12:16:46Z", "commit": {"oid": "ca502bf1673e77cc032bca2399480c73a0235a45"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjoxNjo0NlrOHZqOoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjoyODo0OFrOHZqrAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY2ODMyMA==", "bodyText": "Do we have devices on BS which are on >= Q ?", "url": "https://github.com/dimagi/commcare-android/pull/2361#discussion_r496668320", "createdAt": "2020-09-29T12:16:46Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/FormEntryTest.kt", "diffHunk": "@@ -0,0 +1,300 @@\n+package org.commcare.androidTests\n+\n+import android.os.Build\n+import androidx.test.espresso.Espresso\n+import androidx.test.espresso.Espresso.closeSoftKeyboard\n+import androidx.test.espresso.Espresso.onView\n+import androidx.test.espresso.action.ViewActions.*\n+import androidx.test.espresso.assertion.ViewAssertions.doesNotExist\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.filters.SdkSuppress\n+import org.commcare.dalvik.R\n+import org.commcare.utils.CustomMatchers\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Matchers.*\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class FormEntryTest: BaseTest() {\n+\n+    companion object {\n+        const val CCZ_NAME = \"languages.ccz\"\n+        const val APP_NAME = \"Language Test\"\n+    }\n+\n+    @Before\n+    fun setup() {\n+        InstrumentationUtility.uninstallCurrentApp()\n+        installApp(APP_NAME, CCZ_NAME)\n+    }\n+\n+    @Test\n+    fun testIncompleteFormCreation() {\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+        // Create an incomplete form.\n+        InstrumentationUtility.openForm(0, 0)\n+        closeSoftKeyboard()\n+        Espresso.pressBack()\n+        onView(withText(R.string.keep_changes))\n+                .perform(click())\n+\n+        // Open the incomplete form and make changes but do not save.\n+        InstrumentationUtility.openFirstIncompleteForm()\n+        onView(withId(R.id.jumpBeginningButton))\n+                .perform(click())\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+        Espresso.pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        InstrumentationUtility.gotoHome()\n+\n+        // Open the incomplete form and confirm that the changes you made aren't saved.\n+        InstrumentationUtility.openFirstIncompleteForm()\n+        onView(withId(R.id.jumpBeginningButton))\n+                .perform(click())\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .check(matches(withText(\"\")))\n+\n+        // Again make changes and this time save it.\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+        Espresso.pressBack()\n+        onView(withText(R.string.keep_changes))\n+                .perform(click())\n+\n+        // Open incomplete form again and confirm that the changes you made exists.\n+        InstrumentationUtility.openFirstIncompleteForm()\n+        onView(withId(R.id.jumpBeginningButton))\n+                .perform(click())\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .check(matches(withText(\"test\")))\n+\n+        // Confirm that we can submit the form.\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click())\n+\n+        // Check that the form now appears in saved form and not in incomplete form.\n+        onView(withText(\"Saved\"))\n+                .perform(click())\n+        onView(withText(\"Languages\"))\n+                .check(matches(isDisplayed()))\n+        Espresso.pressBack()\n+        onView(withText(startsWith(\"Incomplete\")))\n+                .perform(click())\n+        onView(withText(\"Languages\"))\n+                .check(doesNotExist())\n+    }\n+\n+    @Test\n+    fun testSaveFormMenu() {\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+        // Create an incomplete form.\n+        InstrumentationUtility.openForm(0, 0)\n+        closeSoftKeyboard()\n+\n+        // Confirm that backing out without saving goes to form list.\n+        Espresso.pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        onView(CustomMatchers.find(\n+                allOf(withText(\"Basic Form Tests\")),\n+                1\n+        )).check(matches(isDisplayed()))\n+        onView(withText(\"Languages\"))\n+                .perform(click())\n+\n+        // Make changes to the form.\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+\n+        // Save the form using options menu item.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(R.string.save_all_answers))\n+                .perform(click())\n+\n+        // Exit form using do not save.\n+        Espresso.pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        InstrumentationUtility.gotoHome()\n+\n+        // Open the incomplete form and confirm that the changes exists.\n+        InstrumentationUtility.openFirstIncompleteForm()\n+        onView(withId(R.id.jumpBeginningButton))\n+                .perform(click())\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .check(matches(withText(\"test\")))\n+    }\n+\n+    @Test\n+    fun testFormEntryQuirks() {\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+        InstrumentationUtility.openForm(0, 1)\n+\n+        // Trigger constraint violation(require response)\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click())\n+        onView(withText(\"Sorry, this response is required!\"))\n+                .check(matches(isDisplayed()))\n+\n+        // Confirm that we can save form despite violated constraint\n+        closeSoftKeyboard()\n+        Espresso.pressBack()\n+        onView(withText(R.string.keep_changes))\n+                .perform(click())\n+        onView(withText(startsWith(\"Incomplete\")))\n+                .perform(click())\n+        onView(withText(\"Constraint\"))\n+                .check(matches(isDisplayed()))\n+    }\n+\n+    @SdkSuppress(maxSdkVersion = Build.VERSION_CODES.Q)\n+    @Test\n+    fun testSync() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca502bf1673e77cc032bca2399480c73a0235a45"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY3MzE0NQ==", "bodyText": "232-235 can be wrapped in a function - saveAsIncomplete", "url": "https://github.com/dimagi/commcare-android/pull/2361#discussion_r496673145", "createdAt": "2020-09-29T12:24:49Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/FormEntryTest.kt", "diffHunk": "@@ -0,0 +1,300 @@\n+package org.commcare.androidTests\n+\n+import android.os.Build\n+import androidx.test.espresso.Espresso\n+import androidx.test.espresso.Espresso.closeSoftKeyboard\n+import androidx.test.espresso.Espresso.onView\n+import androidx.test.espresso.action.ViewActions.*\n+import androidx.test.espresso.assertion.ViewAssertions.doesNotExist\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.filters.SdkSuppress\n+import org.commcare.dalvik.R\n+import org.commcare.utils.CustomMatchers\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Matchers.*\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class FormEntryTest: BaseTest() {\n+\n+    companion object {\n+        const val CCZ_NAME = \"languages.ccz\"\n+        const val APP_NAME = \"Language Test\"\n+    }\n+\n+    @Before\n+    fun setup() {\n+        InstrumentationUtility.uninstallCurrentApp()\n+        installApp(APP_NAME, CCZ_NAME)\n+    }\n+\n+    @Test\n+    fun testIncompleteFormCreation() {\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+        // Create an incomplete form.\n+        InstrumentationUtility.openForm(0, 0)\n+        closeSoftKeyboard()\n+        Espresso.pressBack()\n+        onView(withText(R.string.keep_changes))\n+                .perform(click())\n+\n+        // Open the incomplete form and make changes but do not save.\n+        InstrumentationUtility.openFirstIncompleteForm()\n+        onView(withId(R.id.jumpBeginningButton))\n+                .perform(click())\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+        Espresso.pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        InstrumentationUtility.gotoHome()\n+\n+        // Open the incomplete form and confirm that the changes you made aren't saved.\n+        InstrumentationUtility.openFirstIncompleteForm()\n+        onView(withId(R.id.jumpBeginningButton))\n+                .perform(click())\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .check(matches(withText(\"\")))\n+\n+        // Again make changes and this time save it.\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+        Espresso.pressBack()\n+        onView(withText(R.string.keep_changes))\n+                .perform(click())\n+\n+        // Open incomplete form again and confirm that the changes you made exists.\n+        InstrumentationUtility.openFirstIncompleteForm()\n+        onView(withId(R.id.jumpBeginningButton))\n+                .perform(click())\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .check(matches(withText(\"test\")))\n+\n+        // Confirm that we can submit the form.\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click())\n+\n+        // Check that the form now appears in saved form and not in incomplete form.\n+        onView(withText(\"Saved\"))\n+                .perform(click())\n+        onView(withText(\"Languages\"))\n+                .check(matches(isDisplayed()))\n+        Espresso.pressBack()\n+        onView(withText(startsWith(\"Incomplete\")))\n+                .perform(click())\n+        onView(withText(\"Languages\"))\n+                .check(doesNotExist())\n+    }\n+\n+    @Test\n+    fun testSaveFormMenu() {\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+        // Create an incomplete form.\n+        InstrumentationUtility.openForm(0, 0)\n+        closeSoftKeyboard()\n+\n+        // Confirm that backing out without saving goes to form list.\n+        Espresso.pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        onView(CustomMatchers.find(\n+                allOf(withText(\"Basic Form Tests\")),\n+                1\n+        )).check(matches(isDisplayed()))\n+        onView(withText(\"Languages\"))\n+                .perform(click())\n+\n+        // Make changes to the form.\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+\n+        // Save the form using options menu item.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(R.string.save_all_answers))\n+                .perform(click())\n+\n+        // Exit form using do not save.\n+        Espresso.pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        InstrumentationUtility.gotoHome()\n+\n+        // Open the incomplete form and confirm that the changes exists.\n+        InstrumentationUtility.openFirstIncompleteForm()\n+        onView(withId(R.id.jumpBeginningButton))\n+                .perform(click())\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .check(matches(withText(\"test\")))\n+    }\n+\n+    @Test\n+    fun testFormEntryQuirks() {\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+        InstrumentationUtility.openForm(0, 1)\n+\n+        // Trigger constraint violation(require response)\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click())\n+        onView(withText(\"Sorry, this response is required!\"))\n+                .check(matches(isDisplayed()))\n+\n+        // Confirm that we can save form despite violated constraint\n+        closeSoftKeyboard()\n+        Espresso.pressBack()\n+        onView(withText(R.string.keep_changes))\n+                .perform(click())\n+        onView(withText(startsWith(\"Incomplete\")))\n+                .perform(click())\n+        onView(withText(\"Constraint\"))\n+                .check(matches(isDisplayed()))\n+    }\n+\n+    @SdkSuppress(maxSdkVersion = Build.VERSION_CODES.Q)\n+    @Test\n+    fun testSync() {\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+        InstrumentationUtility.logout()\n+        // Disable wifi\n+        InstrumentationUtility.changeWifi(false)\n+        // We can still login.\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+        // Submit a form.\n+        InstrumentationUtility.openForm(0, 0)\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(\"hello\"))\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click())\n+        // Confirm unsent form.\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        Espresso.pressBack()\n+        onView(withText(\"Unsent Forms: 1\"))\n+                .check(matches(isDisplayed()))\n+\n+        // Enabled wifi.\n+        InstrumentationUtility.changeWifi(true)\n+        InstrumentationUtility.sleep(10) // Sleeping 10 seconds so that wifi is setup.\n+\n+        // Confirm form is sent on sync.\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click())\n+        onView(withText(\"Unsent Forms: 1\"))\n+                .check(doesNotExist())\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        Espresso.pressBack()\n+        onView(withText(startsWith(\"You last synced with the server:\")))\n+                .check(matches(isDisplayed()))\n+\n+        // Confirm form is present in saved forms\n+        onView(withText(\"Saved\"))\n+                .perform(click())\n+        onView(withText(\"Languages\"))\n+                .check(matches(isDisplayed()))\n+    }\n+\n+    @Test\n+    fun testSaveCase() {\n+        InstrumentationUtility.login(\"form_tests\", \"123\")\n+        // Create incomplete update case form.\n+        InstrumentationUtility.openForm(1, 1)\n+        openCase(\"Snow\")\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click())\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(\"hello\"))\n+        closeSoftKeyboard()\n+        Espresso.pressBack()\n+        onView(withText(R.string.keep_changes))\n+                .perform(click())\n+\n+        // testing notification for having incomplete form for case already made\n+        InstrumentationUtility.openForm(1, 1)\n+        openCase(\"Snow\")\n+        confirmNotification_whenCaseHasIncompeleteForm()\n+        onView(withText(\"NO\"))\n+                .perform(click())\n+        onView(withText(\"A\"))\n+                .perform(click())\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click())\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .check(matches(withText(\"\"))) // we don't see the text hello here.\n+        closeSoftKeyboard()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4dc8506460ef64b37423e0b4f43e818f747881a"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY3NTU4Ng==", "bodyText": "not required", "url": "https://github.com/dimagi/commcare-android/pull/2361#discussion_r496675586", "createdAt": "2020-09-29T12:28:48Z", "author": {"login": "shubham1g5"}, "path": "app/instrumentation-tests/src/org/commcare/androidTests/FormEntryTest.kt", "diffHunk": "@@ -0,0 +1,300 @@\n+package org.commcare.androidTests\n+\n+import android.os.Build\n+import androidx.test.espresso.Espresso\n+import androidx.test.espresso.Espresso.closeSoftKeyboard\n+import androidx.test.espresso.Espresso.onView\n+import androidx.test.espresso.action.ViewActions.*\n+import androidx.test.espresso.assertion.ViewAssertions.doesNotExist\n+import androidx.test.espresso.assertion.ViewAssertions.matches\n+import androidx.test.espresso.matcher.ViewMatchers.*\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.filters.LargeTest\n+import androidx.test.filters.SdkSuppress\n+import org.commcare.dalvik.R\n+import org.commcare.utils.CustomMatchers\n+import org.commcare.utils.InstrumentationUtility\n+import org.hamcrest.Matchers.*\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+@LargeTest\n+class FormEntryTest: BaseTest() {\n+\n+    companion object {\n+        const val CCZ_NAME = \"languages.ccz\"\n+        const val APP_NAME = \"Language Test\"\n+    }\n+\n+    @Before\n+    fun setup() {\n+        InstrumentationUtility.uninstallCurrentApp()\n+        installApp(APP_NAME, CCZ_NAME)\n+    }\n+\n+    @Test\n+    fun testIncompleteFormCreation() {\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+        // Create an incomplete form.\n+        InstrumentationUtility.openForm(0, 0)\n+        closeSoftKeyboard()\n+        Espresso.pressBack()\n+        onView(withText(R.string.keep_changes))\n+                .perform(click())\n+\n+        // Open the incomplete form and make changes but do not save.\n+        InstrumentationUtility.openFirstIncompleteForm()\n+        onView(withId(R.id.jumpBeginningButton))\n+                .perform(click())\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+        Espresso.pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        InstrumentationUtility.gotoHome()\n+\n+        // Open the incomplete form and confirm that the changes you made aren't saved.\n+        InstrumentationUtility.openFirstIncompleteForm()\n+        onView(withId(R.id.jumpBeginningButton))\n+                .perform(click())\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .check(matches(withText(\"\")))\n+\n+        // Again make changes and this time save it.\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+        Espresso.pressBack()\n+        onView(withText(R.string.keep_changes))\n+                .perform(click())\n+\n+        // Open incomplete form again and confirm that the changes you made exists.\n+        InstrumentationUtility.openFirstIncompleteForm()\n+        onView(withId(R.id.jumpBeginningButton))\n+                .perform(click())\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .check(matches(withText(\"test\")))\n+\n+        // Confirm that we can submit the form.\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click())\n+\n+        // Check that the form now appears in saved form and not in incomplete form.\n+        onView(withText(\"Saved\"))\n+                .perform(click())\n+        onView(withText(\"Languages\"))\n+                .check(matches(isDisplayed()))\n+        Espresso.pressBack()\n+        onView(withText(startsWith(\"Incomplete\")))\n+                .perform(click())\n+        onView(withText(\"Languages\"))\n+                .check(doesNotExist())\n+    }\n+\n+    @Test\n+    fun testSaveFormMenu() {\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+        // Create an incomplete form.\n+        InstrumentationUtility.openForm(0, 0)\n+        closeSoftKeyboard()\n+\n+        // Confirm that backing out without saving goes to form list.\n+        Espresso.pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        onView(CustomMatchers.find(\n+                allOf(withText(\"Basic Form Tests\")),\n+                1\n+        )).check(matches(isDisplayed()))\n+        onView(withText(\"Languages\"))\n+                .perform(click())\n+\n+        // Make changes to the form.\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(\"test\"))\n+        closeSoftKeyboard()\n+\n+        // Save the form using options menu item.\n+        InstrumentationUtility.openOptionsMenu()\n+        onView(withText(R.string.save_all_answers))\n+                .perform(click())\n+\n+        // Exit form using do not save.\n+        Espresso.pressBack()\n+        onView(withText(R.string.do_not_save))\n+                .perform(click())\n+        InstrumentationUtility.gotoHome()\n+\n+        // Open the incomplete form and confirm that the changes exists.\n+        InstrumentationUtility.openFirstIncompleteForm()\n+        onView(withId(R.id.jumpBeginningButton))\n+                .perform(click())\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .check(matches(withText(\"test\")))\n+    }\n+\n+    @Test\n+    fun testFormEntryQuirks() {\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+        InstrumentationUtility.openForm(0, 1)\n+\n+        // Trigger constraint violation(require response)\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click())\n+        onView(withText(\"Sorry, this response is required!\"))\n+                .check(matches(isDisplayed()))\n+\n+        // Confirm that we can save form despite violated constraint\n+        closeSoftKeyboard()\n+        Espresso.pressBack()\n+        onView(withText(R.string.keep_changes))\n+                .perform(click())\n+        onView(withText(startsWith(\"Incomplete\")))\n+                .perform(click())\n+        onView(withText(\"Constraint\"))\n+                .check(matches(isDisplayed()))\n+    }\n+\n+    @SdkSuppress(maxSdkVersion = Build.VERSION_CODES.Q)\n+    @Test\n+    fun testSync() {\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+        InstrumentationUtility.logout()\n+        // Disable wifi\n+        InstrumentationUtility.changeWifi(false)\n+        // We can still login.\n+        InstrumentationUtility.login(\"user_with_no_data\", \"123\")\n+        // Submit a form.\n+        InstrumentationUtility.openForm(0, 0)\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(\"hello\"))\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click())\n+        // Confirm unsent form.\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        Espresso.pressBack()\n+        onView(withText(\"Unsent Forms: 1\"))\n+                .check(matches(isDisplayed()))\n+\n+        // Enabled wifi.\n+        InstrumentationUtility.changeWifi(true)\n+        InstrumentationUtility.sleep(10) // Sleeping 10 seconds so that wifi is setup.\n+\n+        // Confirm form is sent on sync.\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click())\n+        onView(withText(\"Unsent Forms: 1\"))\n+                .check(doesNotExist())\n+        onView(withText(\"Start\"))\n+                .perform(click())\n+        Espresso.pressBack()\n+        onView(withText(startsWith(\"You last synced with the server:\")))\n+                .check(matches(isDisplayed()))\n+\n+        // Confirm form is present in saved forms\n+        onView(withText(\"Saved\"))\n+                .perform(click())\n+        onView(withText(\"Languages\"))\n+                .check(matches(isDisplayed()))\n+    }\n+\n+    @Test\n+    fun testSaveCase() {\n+        InstrumentationUtility.login(\"form_tests\", \"123\")\n+        // Create incomplete update case form.\n+        InstrumentationUtility.openForm(1, 1)\n+        openCase(\"Snow\")\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click())\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(\"hello\"))\n+        closeSoftKeyboard()\n+        Espresso.pressBack()\n+        onView(withText(R.string.keep_changes))\n+                .perform(click())\n+\n+        // testing notification for having incomplete form for case already made\n+        InstrumentationUtility.openForm(1, 1)\n+        openCase(\"Snow\")\n+        confirmNotification_whenCaseHasIncompeleteForm()\n+        onView(withText(\"NO\"))\n+                .perform(click())\n+        onView(withText(\"A\"))\n+                .perform(click())\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click())\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .check(matches(withText(\"\"))) // we don't see the text hello here.\n+        closeSoftKeyboard()\n+        Espresso.pressBack()\n+        onView(withText(R.string.keep_changes))\n+                .perform(click())\n+\n+        // Deleting one incomplete form for case\n+        onView(withText(startsWith(\"Incomplete\")))\n+                .perform(click())\n+        onView(CustomMatchers.find(\n+                allOf(withText(\"Update a Case\")),\n+                1\n+        )).perform(longClick())\n+        onView(withText(\"Open\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Delete Record\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Scan Record Integrity\"))\n+                .check(matches(isDisplayed()))\n+        onView(withText(\"Delete Record\"))\n+                .perform(click())\n+\n+        // Confirm we still have one and only one incomplete case.\n+        onView(withText(\"Update a Case\"))\n+                .check(matches(isDisplayed()))\n+        Espresso.pressBack()\n+\n+        // Continue incomplete case form.\n+        InstrumentationUtility.openForm(1, 1)\n+        openCase(\"Snow\")\n+        confirmNotification_whenCaseHasIncompeleteForm()\n+        onView(withText(\"YES\"))\n+                .perform(click())\n+        onView(withId(R.id.jumpEndButton))\n+                .perform(click())\n+\n+        // Save form\n+        onView(withText(\"hello\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4dc8506460ef64b37423e0b4f43e818f747881a"}, "originalPosition": 268}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3d26a35e10896465e61cbadb9e1ceac9aeeff7d", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/e3d26a35e10896465e61cbadb9e1ceac9aeeff7d", "committedDate": "2020-09-30T10:03:58Z", "message": "PR suggestion"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5Mjc1OTQz", "url": "https://github.com/dimagi/commcare-android/pull/2361#pullrequestreview-499275943", "createdAt": "2020-09-30T10:05:47Z", "commit": {"oid": "e3d26a35e10896465e61cbadb9e1ceac9aeeff7d"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fe64e4eaa0fc4ed0532de8bb7e05b11b385247f", "author": {"user": {"login": "ShivamPokhriyal", "name": "Shivam Pokhriyal"}}, "url": "https://github.com/dimagi/commcare-android/commit/6fe64e4eaa0fc4ed0532de8bb7e05b11b385247f", "committedDate": "2020-10-01T09:41:45Z", "message": "Move back to login screen after installing app in FormEntryTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMjI0NzEw", "url": "https://github.com/dimagi/commcare-android/pull/2361#pullrequestreview-500224710", "createdAt": "2020-10-01T10:47:35Z", "commit": {"oid": "6fe64e4eaa0fc4ed0532de8bb7e05b11b385247f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1948, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}