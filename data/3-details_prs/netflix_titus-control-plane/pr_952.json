{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5NDYxNDM0", "number": 952, "title": "Initial support for EBS volume model and validation", "bodyText": "Partial feature support for EBS volumes. This PR depends on PR Netflix/titus-api-definitions#127\nThis PR provides:\n\nInternal EBS model/data types.\nAPI support for EBS volumes specified as job attributes.\nValidation of user provided EBS volumes.\nCreation of Kube Persistent Volumes.\nPod configurations to use Persistent Volumes.\n\nThis PR does NOT provide to following which will be added in follow on PRs:\n\nGC of previously created Persistent Volumes.\nIntegration testing with @solarkennedy 's specific CSI driver changes.", "createdAt": "2020-11-11T21:29:56Z", "url": "https://github.com/Netflix/titus-control-plane/pull/952", "merged": true, "mergeCommit": {"oid": "a518f02a6c89633e1dc1f54cd07c5fcd24032cb6"}, "closed": true, "closedAt": "2020-11-18T18:14:53Z", "author": {"login": "andrew-leung"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbWwgYgH2gAyNTE5NDYxNDM0OjUwNDRhN2ViNjViMDdhYjkzY2E2MjMwZDEyNjA5ZTk0YmEyNTJlMjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddx04igH2gAyNTE5NDYxNDM0OmE2MWFhZDYyOTc2NTU5ZDYzODVlYjJlNzMyNjY4ZGE1OTA2YmZkYzY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5044a7eb65b07ab93ca6230d12609e94ba252e27", "author": {"user": {"login": "andrew-leung", "name": "Andrew Leung"}}, "url": "https://github.com/Netflix/titus-control-plane/commit/5044a7eb65b07ab93ca6230d12609e94ba252e27", "committedDate": "2020-11-11T05:04:05Z", "message": "Initial support for EBS volume model and validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e92c3cc66f87ff2e31cdcbb2095b3a197c099c34", "author": {"user": {"login": "andrew-leung", "name": "Andrew Leung"}}, "url": "https://github.com/Netflix/titus-control-plane/commit/e92c3cc66f87ff2e31cdcbb2095b3a197c099c34", "committedDate": "2020-11-12T01:11:26Z", "message": "Fixes for local integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2c95d0ffa531ae00e4cb696e1f78394c26a388c", "author": {"user": {"login": "andrew-leung", "name": "Andrew Leung"}}, "url": "https://github.com/Netflix/titus-control-plane/commit/d2c95d0ffa531ae00e4cb696e1f78394c26a388c", "committedDate": "2020-11-13T17:57:17Z", "message": "Use Titus API definitions with EBS Validatio Serivce updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b60cbf28afe50886c0ba13bd9ee51d17781a71b", "author": {"user": {"login": "andrew-leung", "name": "Andrew Leung"}}, "url": "https://github.com/Netflix/titus-control-plane/commit/5b60cbf28afe50886c0ba13bd9ee51d17781a71b", "committedDate": "2020-11-13T20:52:43Z", "message": "Refactor validation module to better support embedded and docker compose testing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMjIwMTIz", "url": "https://github.com/Netflix/titus-control-plane/pull/952#pullrequestreview-530220123", "createdAt": "2020-11-13T16:42:56Z", "commit": {"oid": "e92c3cc66f87ff2e31cdcbb2095b3a197c099c34"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNjo0Mjo1NlrOHy1u3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMTozMToyMlrOHzAORg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA3MTE5Nw==", "bodyText": "Use CollectionsExt.nonNullImmutableCopyOf to make sure this value is always non-null", "url": "https://github.com/Netflix/titus-control-plane/pull/952#discussion_r523071197", "createdAt": "2020-11-13T16:42:56Z", "author": {"login": "tbak"}, "path": "titus-api/src/main/java/com/netflix/titus/api/jobmanager/model/job/ContainerResources.java", "diffHunk": "@@ -87,6 +92,7 @@ public ContainerResources(double cpu,\n         this.allocateIP = allocateIP;\n         this.shmMB = shmMB;\n         this.ipSignedAddressAllocations = CollectionsExt.nonNullImmutableCopyOf(ipSignedAddressAllocations);\n+        this.ebsVolumes = ebsVolumes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92c3cc66f87ff2e31cdcbb2095b3a197c099c34"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA3MTkzNw==", "bodyText": "Class fields at the top of the file?", "url": "https://github.com/Netflix/titus-control-plane/pull/952#discussion_r523071937", "createdAt": "2020-11-13T16:44:10Z", "author": {"login": "tbak"}, "path": "titus-api/src/main/java/com/netflix/titus/api/jobmanager/model/job/ebs/EbsVolume.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.api.jobmanager.model.job.ebs;\n+\n+import java.util.Objects;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+import javax.validation.constraints.Size;\n+\n+import com.google.common.base.Preconditions;\n+\n+public class EbsVolume {\n+\n+    public EbsVolume(String volumeId, String volumeAvailabilityZone, int volumeCapacityGB, String mountPath, MountPerm mountPerm, String fsType) {\n+        this.volumeId = volumeId;\n+        this.volumeAvailabilityZone = volumeAvailabilityZone;\n+        this.volumeCapacityGB = volumeCapacityGB;\n+        this.mountPath = mountPath;\n+        this.mountPermissions = mountPerm;\n+        this.fsType = fsType;\n+    }\n+\n+    public static Builder newBuilder() {\n+        return new Builder();\n+    }\n+\n+    public Builder toBuilder() {\n+        return new Builder(this);\n+    }\n+\n+    public enum MountPerm {RO, RW}\n+\n+    @NotNull", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92c3cc66f87ff2e31cdcbb2095b3a197c099c34"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA3Mjk1OA==", "bodyText": "Check also if volumeIds is empty?", "url": "https://github.com/Netflix/titus-control-plane/pull/952#discussion_r523072958", "createdAt": "2020-11-13T16:45:47Z", "author": {"login": "tbak"}, "path": "titus-api/src/main/java/com/netflix/titus/api/jobmanager/model/job/ebs/EbsVolumeUtils.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.api.jobmanager.model.job.ebs;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.jobmanager.model.job.JobDescriptor;\n+import com.netflix.titus.api.jobmanager.model.job.Task;\n+import com.netflix.titus.common.util.StringExt;\n+\n+import static com.netflix.titus.api.jobmanager.TaskAttributes.TASK_ATTRIBUTES_EBS_VOLUME_ID;\n+\n+/**\n+ * Helper utilities for processing EBS volume related info.\n+ */\n+public class EbsVolumeUtils {\n+\n+    public static <E extends JobDescriptor.JobDescriptorExt> List<EbsVolume> getEbsVolumes(JobDescriptor<E> jobDescriptor) {\n+        List<String> volumeIds = getVolumeIds(jobDescriptor);\n+        Optional<String> mountPointOptional = getMountPoint(jobDescriptor);\n+        Optional<EbsVolume.MountPerm> mountPermOptional = getEbsMountPerm(jobDescriptor);\n+        Optional<String> fsTypeOptional = getEbsFsType(jobDescriptor);\n+\n+        if (!(mountPointOptional.isPresent() && mountPermOptional.isPresent() && fsTypeOptional.isPresent())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92c3cc66f87ff2e31cdcbb2095b3a197c099c34"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA3Mzk0MA==", "bodyText": "Use StringExt.splitByComma to simplify? (also does null check)", "url": "https://github.com/Netflix/titus-control-plane/pull/952#discussion_r523073940", "createdAt": "2020-11-13T16:47:22Z", "author": {"login": "tbak"}, "path": "titus-api/src/main/java/com/netflix/titus/api/jobmanager/model/job/ebs/EbsVolumeUtils.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.api.jobmanager.model.job.ebs;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.jobmanager.model.job.JobDescriptor;\n+import com.netflix.titus.api.jobmanager.model.job.Task;\n+import com.netflix.titus.common.util.StringExt;\n+\n+import static com.netflix.titus.api.jobmanager.TaskAttributes.TASK_ATTRIBUTES_EBS_VOLUME_ID;\n+\n+/**\n+ * Helper utilities for processing EBS volume related info.\n+ */\n+public class EbsVolumeUtils {\n+\n+    public static <E extends JobDescriptor.JobDescriptorExt> List<EbsVolume> getEbsVolumes(JobDescriptor<E> jobDescriptor) {\n+        List<String> volumeIds = getVolumeIds(jobDescriptor);\n+        Optional<String> mountPointOptional = getMountPoint(jobDescriptor);\n+        Optional<EbsVolume.MountPerm> mountPermOptional = getEbsMountPerm(jobDescriptor);\n+        Optional<String> fsTypeOptional = getEbsFsType(jobDescriptor);\n+\n+        if (!(mountPointOptional.isPresent() && mountPermOptional.isPresent() && fsTypeOptional.isPresent())) {\n+            return Collections.emptyList();\n+        }\n+\n+        String mountPoint = mountPointOptional.get();\n+        EbsVolume.MountPerm mountPerm = mountPermOptional.get();\n+        String fsType = fsTypeOptional.get();\n+\n+        return volumeIds.stream()\n+                .map(volumeId -> EbsVolume.newBuilder()\n+                        .withVolumeId(volumeId)\n+                        .withMountPath(mountPoint)\n+                        .withMountPermissions(mountPerm)\n+                        .withFsType(fsType)\n+                        .build())\n+                .collect(Collectors.toList());\n+    }\n+\n+    public static <E extends JobDescriptor.JobDescriptorExt> List<String> getVolumeIds(JobDescriptor<E> jobDescriptor) {\n+        String volumeIdsStr = StringExt.nonNull(jobDescriptor.getAttributes().get(JobAttributes.JOB_ATTRIBUTES_EBS_VOLUME_IDS));\n+        return Arrays.asList(volumeIdsStr.split(\",\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92c3cc66f87ff2e31cdcbb2095b3a197c099c34"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA3Njc0NQ==", "bodyText": "What about volume capacity and availability zone? Should we mark it somehow that it is not set yet.", "url": "https://github.com/Netflix/titus-control-plane/pull/952#discussion_r523076745", "createdAt": "2020-11-13T16:52:10Z", "author": {"login": "tbak"}, "path": "titus-api/src/main/java/com/netflix/titus/api/jobmanager/model/job/ebs/EbsVolumeUtils.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.api.jobmanager.model.job.ebs;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.jobmanager.model.job.JobDescriptor;\n+import com.netflix.titus.api.jobmanager.model.job.Task;\n+import com.netflix.titus.common.util.StringExt;\n+\n+import static com.netflix.titus.api.jobmanager.TaskAttributes.TASK_ATTRIBUTES_EBS_VOLUME_ID;\n+\n+/**\n+ * Helper utilities for processing EBS volume related info.\n+ */\n+public class EbsVolumeUtils {\n+\n+    public static <E extends JobDescriptor.JobDescriptorExt> List<EbsVolume> getEbsVolumes(JobDescriptor<E> jobDescriptor) {\n+        List<String> volumeIds = getVolumeIds(jobDescriptor);\n+        Optional<String> mountPointOptional = getMountPoint(jobDescriptor);\n+        Optional<EbsVolume.MountPerm> mountPermOptional = getEbsMountPerm(jobDescriptor);\n+        Optional<String> fsTypeOptional = getEbsFsType(jobDescriptor);\n+\n+        if (!(mountPointOptional.isPresent() && mountPermOptional.isPresent() && fsTypeOptional.isPresent())) {\n+            return Collections.emptyList();\n+        }\n+\n+        String mountPoint = mountPointOptional.get();\n+        EbsVolume.MountPerm mountPerm = mountPermOptional.get();\n+        String fsType = fsTypeOptional.get();\n+\n+        return volumeIds.stream()\n+                .map(volumeId -> EbsVolume.newBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92c3cc66f87ff2e31cdcbb2095b3a197c099c34"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA3ODc4Mg==", "bodyText": "Set AZ to empty string if not defined to avoid passing null values?", "url": "https://github.com/Netflix/titus-control-plane/pull/952#discussion_r523078782", "createdAt": "2020-11-13T16:54:55Z", "author": {"login": "tbak"}, "path": "titus-api/src/main/java/com/netflix/titus/api/jobmanager/model/job/ebs/EbsVolume.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.api.jobmanager.model.job.ebs;\n+\n+import java.util.Objects;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+import javax.validation.constraints.Size;\n+\n+import com.google.common.base.Preconditions;\n+\n+public class EbsVolume {\n+\n+    public EbsVolume(String volumeId, String volumeAvailabilityZone, int volumeCapacityGB, String mountPath, MountPerm mountPerm, String fsType) {\n+        this.volumeId = volumeId;\n+        this.volumeAvailabilityZone = volumeAvailabilityZone;\n+        this.volumeCapacityGB = volumeCapacityGB;\n+        this.mountPath = mountPath;\n+        this.mountPermissions = mountPerm;\n+        this.fsType = fsType;\n+    }\n+\n+    public static Builder newBuilder() {\n+        return new Builder();\n+    }\n+\n+    public Builder toBuilder() {\n+        return new Builder(this);\n+    }\n+\n+    public enum MountPerm {RO, RW}\n+\n+    @NotNull\n+    @Size(min = 1, max = 512, message = \"EBS volume ID cannot be empty or greater than 512 bytes\")\n+    private final String volumeId;\n+\n+    @Size(min = 1, max = 512, message = \"EBS volume AZ cannot be empty or greater than 512 bytes\")\n+    private final String volumeAvailabilityZone;\n+\n+    private final int volumeCapacityGB;\n+\n+    @NotNull\n+    @Size(min = 1, max = 1024, message = \"EBS volume mount path cannot be empty or greater than 1024 bytes\")\n+    private final String mountPath;\n+\n+    @NotNull(message = \"'mountPermissions' is null\")\n+    private final MountPerm mountPermissions;\n+\n+    @NotNull\n+    @Size(min = 1, max = 512, message = \"EBS volume FS type cannot be empty or greater than 512 bytes\")\n+    private final String fsType;\n+\n+    public String getVolumeId() {\n+        return volumeId;\n+    }\n+\n+    public String getVolumeAvailabilityZone() {\n+        return volumeAvailabilityZone;\n+    }\n+\n+    public int getVolumeCapacityGB() {\n+        return volumeCapacityGB;\n+    }\n+\n+    public String getMountPath() {\n+        return mountPath;\n+    }\n+\n+    public MountPerm getMountPermissions() {\n+        return mountPermissions;\n+    }\n+\n+    public String getFsType() {\n+        return fsType;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        EbsVolume ebsVolume = (EbsVolume) o;\n+        return volumeCapacityGB == ebsVolume.volumeCapacityGB &&\n+                volumeId.equals(ebsVolume.volumeId) &&\n+                Objects.equals(volumeAvailabilityZone, ebsVolume.volumeAvailabilityZone) &&\n+                mountPath.equals(ebsVolume.mountPath) &&\n+                mountPermissions == ebsVolume.mountPermissions &&\n+                fsType.equals(ebsVolume.fsType);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(volumeId, volumeAvailabilityZone, volumeCapacityGB, mountPath, mountPermissions, fsType);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"EbsVolume{\" +\n+                \"volumeId='\" + volumeId + '\\'' +\n+                \", volumeAvailabilityZone='\" + volumeAvailabilityZone + '\\'' +\n+                \", volumeCapacityGB=\" + volumeCapacityGB +\n+                \", mountPath='\" + mountPath + '\\'' +\n+                \", mountPermissions=\" + mountPermissions +\n+                \", fsType='\" + fsType + '\\'' +\n+                '}';\n+    }\n+\n+    public static final class Builder {\n+        private String volumeId;\n+        private String volumeAvailabilityZone;\n+        private int volumeCapacityGB;\n+        private String mountPath;\n+        private MountPerm mountPermissions;\n+        private String fsType;\n+\n+        private Builder() {\n+        }\n+\n+        private Builder(EbsVolume ebsVolume) {\n+            this.volumeId = ebsVolume.getVolumeId();\n+            this.volumeAvailabilityZone = ebsVolume.getVolumeAvailabilityZone();\n+            this.volumeCapacityGB = ebsVolume.getVolumeCapacityGB();\n+            this.mountPath = ebsVolume.getMountPath();\n+            this.mountPermissions = ebsVolume.getMountPermissions();\n+            this.fsType = ebsVolume.getFsType();\n+        }\n+\n+        public Builder withVolumeId(String val) {\n+            volumeId = val;\n+            return this;\n+        }\n+\n+        public Builder withVolumeAvailabilityZone(String val) {\n+            volumeAvailabilityZone = val;\n+            return this;\n+        }\n+\n+        public Builder withVolumeCapacityGB(int val) {\n+            volumeCapacityGB = val;\n+            return this;\n+        }\n+\n+        public Builder withMountPath(String val) {\n+            mountPath = val;\n+            return this;\n+        }\n+\n+        public Builder withMountPermissions(MountPerm val) {\n+            mountPermissions = val;\n+            return this;\n+        }\n+\n+        public Builder withFsType(String val) {\n+            fsType = val;\n+            return this;\n+        }\n+\n+        public EbsVolume build() {\n+            Preconditions.checkNotNull(volumeId, \"Volume ID is null\");\n+            Preconditions.checkNotNull(mountPath, \"Mount path is null\");\n+            Preconditions.checkNotNull(mountPermissions, \"Mount permission is null\");\n+            Preconditions.checkNotNull(fsType, \"File system type is null\");\n+            // Volume AZ and capacity may be set after object creation during object sanitization", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92c3cc66f87ff2e31cdcbb2095b3a197c099c34"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzExMDk5MA==", "bodyText": "Change to \"Failure reason unknown\"? This message could be misleading.", "url": "https://github.com/Netflix/titus-control-plane/pull/952#discussion_r523110990", "createdAt": "2020-11-13T17:30:22Z", "author": {"login": "tbak"}, "path": "titus-ext/job-validator/src/main/java/com/netflix/titus/ext/jobvalidator/ebs/JobEbsVolumeSanitizer.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.ext.jobvalidator.ebs;\n+\n+import java.time.Duration;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.function.UnaryOperator;\n+import javax.inject.Inject;\n+\n+import com.netflix.compute.validator.protogen.ComputeValidator;\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.JobDescriptor;\n+import com.netflix.titus.api.jobmanager.model.job.JobFunctions;\n+import com.netflix.titus.api.jobmanager.model.job.ebs.EbsVolume;\n+import com.netflix.titus.api.jobmanager.service.JobManagerException;\n+import com.netflix.titus.common.model.admission.AdmissionSanitizer;\n+import com.netflix.titus.common.model.admission.ValidatorMetrics;\n+import com.netflix.titus.common.runtime.TitusRuntime;\n+import com.netflix.titus.ext.jobvalidator.s3.ReactorValidationServiceClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Schedulers;\n+\n+/**\n+ * This {@link com.netflix.titus.common.model.admission.AdmissionSanitizer} sanitizes Job EBS volume\n+ * information. Sanitization adds required EBS volume metadata (e.g., AZ, capacity, etc...) that are\n+ * retrieved from the validation service.\n+ */\n+public class JobEbsVolumeSanitizer implements AdmissionSanitizer<JobDescriptor> {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(JobEbsVolumeSanitizer.class);\n+\n+    private static final long RETRY_COUNT = 5;\n+\n+    private final JobEbsVolumeSanitizerConfiguration configuration;\n+    private final ReactorValidationServiceClient validationClient;\n+    private final ValidatorMetrics metrics;\n+\n+    @Inject\n+    public JobEbsVolumeSanitizer(JobEbsVolumeSanitizerConfiguration configuration,\n+                                 ReactorValidationServiceClient validationClient,\n+                                 TitusRuntime titusRuntime) {\n+        this.configuration = configuration;\n+        this.validationClient = validationClient;\n+        this.metrics = new ValidatorMetrics(JobEbsVolumeSanitizer.class.getSimpleName(), titusRuntime.getRegistry());\n+    }\n+\n+    /**\n+     * @return a {@link UnaryOperator} that adds sanitized EBS volume List.\n+     */\n+    @Override\n+    public Mono<UnaryOperator<JobDescriptor>> sanitize(JobDescriptor jobDescriptor) {\n+        if (!configuration.isEnabled()) {\n+            metrics.incrementValidationSkipped(ValidatorMetrics.REASON_DISABLED);\n+            return Mono.just(JobEbsVolumeSanitizer::skipSanitization);\n+        }\n+\n+        List<EbsVolume> ebsVolumes = jobDescriptor.getContainer().getContainerResources().getEbsVolumes();\n+        return Flux.fromIterable(ebsVolumes)\n+                // Execute validation service calls concurrently\n+                .parallel()\n+                .runOn(Schedulers.parallel())\n+                // Validate the volume and update the core EBS volume object\n+                .flatMap(ebsVolume -> getEbsVolumeValidationResponse(ebsVolume)\n+                        .flatMap(response -> sanitizeEbsVolume(ebsVolume, response))\n+                        .doOnEach(response -> metrics.incrementValidationSuccess(ebsVolume.getVolumeId()))\n+                        .doOnError(throwable -> metrics.incrementValidationError(ebsVolume.getVolumeId(), throwable.getMessage())))\n+                .collectSortedList(Comparator.comparing(EbsVolume::getVolumeId))\n+                // Update the job with sanitized ebs volume list\n+                .map(JobEbsVolumeSanitizer::setEbsFunction)\n+                .timeout(Duration.ofMillis(configuration.getJobEbsSanitizationTimeoutMs()));\n+    }\n+\n+    private Mono<ComputeValidator.EbsVolumeValidationResponse> getEbsVolumeValidationResponse(EbsVolume ebsVolume) {\n+        return validationClient.validateEbsVolume(\n+                ComputeValidator.EbsVolumeValidationRequest.newBuilder()\n+                        .setEbsVolumeId(ebsVolume.getVolumeId())\n+                        .build())\n+                .retry(RETRY_COUNT)\n+                .onErrorMap(error -> {\n+                    logger.warn(\"EBS volume validation failure: {}\", error.getMessage());\n+                    logger.debug(\"Stack trace\", error);\n+                    metrics.incrementValidationError(ebsVolume.getVolumeId(), error.getClass().getSimpleName());\n+\n+                    return new IllegalArgumentException(String.format(\"EBS volume validation error: bucket=%s, error=%s\",\n+                            ebsVolume.getVolumeId(),\n+                            error.getMessage()\n+                    ), error);\n+                });\n+    }\n+\n+    private Mono<EbsVolume> sanitizeEbsVolume(EbsVolume ebsVolume, ComputeValidator.EbsVolumeValidationResponse response) {\n+        if (response.getResultCase() == ComputeValidator.EbsVolumeValidationResponse.ResultCase.FAILURES) {\n+            List<ComputeValidator.ValidationFailure> failures = response.getFailures().getFailuresList();\n+            if (!failures.isEmpty()) {\n+                return Mono.error(JobManagerException.invalidContainerResources(ebsVolume, failures.get(0).getErrorMessage()));\n+            }\n+            return Mono.error(JobManagerException.invalidContainerResources(ebsVolume, \"No failures reported\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92c3cc66f87ff2e31cdcbb2095b3a197c099c34"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIxOTg3NA==", "bodyText": "I believe that these expensive validations we do only in TitusGateway.", "url": "https://github.com/Netflix/titus-control-plane/pull/952#discussion_r523219874", "createdAt": "2020-11-13T20:47:34Z", "author": {"login": "tbak"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/endpoint/v3/grpc/DefaultJobManagementServiceGrpc.java", "diffHunk": "@@ -156,6 +160,8 @@ public DefaultJobManagementServiceGrpc(GrpcMasterEndpointConfiguration configura\n                                            V3JobOperations jobOperations,\n                                            LogStorageInfo<com.netflix.titus.api.jobmanager.model.job.Task> logStorageInfo,\n                                            @Named(JOB_STRICT_SANITIZER) EntitySanitizer entitySanitizer,\n+                                           AdmissionValidator<com.netflix.titus.api.jobmanager.model.job.JobDescriptor> admissionValidator,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92c3cc66f87ff2e31cdcbb2095b3a197c099c34"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIyMjI2NA==", "bodyText": "Is it guaranteed that there are no duplicates?", "url": "https://github.com/Netflix/titus-control-plane/pull/952#discussion_r523222264", "createdAt": "2020-11-13T20:50:05Z", "author": {"login": "tbak"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/common/DifferenceResolverUtils.java", "diffHunk": "@@ -246,12 +248,12 @@ public static int countActiveNotStartedTasks(EntityHolder refJobHolder, EntityHo\n     /**\n      * Determines unassigned IP allocations based on the current reference view\n      */\n-    public static Set<String> getUnassignedIpAllocations(JobView refJobView) {\n-        // Get all IP allocations from the job\n-        Set<String> unassignedIpAddressIds = refJobView.getJob().getJobDescriptor().getContainer().getContainerResources().getSignedIpAddressAllocations()\n-                .stream()\n+    public static List<String> getUnassignedIpAllocations(JobView refJobView) {\n+        // Get a sorted list of all IP allocations from the job\n+        List<String> unassignedIpAddressIds = refJobView.getJob().getJobDescriptor().getContainer().getContainerResources().getSignedIpAddressAllocations().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92c3cc66f87ff2e31cdcbb2095b3a197c099c34"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIyMjU2MQ==", "bodyText": "Like above, possible duplicates?", "url": "https://github.com/Netflix/titus-control-plane/pull/952#discussion_r523222561", "createdAt": "2020-11-13T20:50:24Z", "author": {"login": "tbak"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/common/DifferenceResolverUtils.java", "diffHunk": "@@ -263,36 +265,73 @@ public static int countActiveNotStartedTasks(EntityHolder refJobHolder, EntityHo\n         return unassignedIpAddressIds;\n     }\n \n+    public static List<String> getUnassignedEbsVolumes(JobView refJobView) {\n+        // Get a sorted list of all ebs values from the job\n+        List<String> unassignedEbsVolumeIds = refJobView.getJob().getJobDescriptor().getContainer().getContainerResources().getEbsVolumes().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92c3cc66f87ff2e31cdcbb2095b3a197c099c34"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIyODM4MQ==", "bodyText": "Add try/catch in case converter throws an exception, similar to what is below.", "url": "https://github.com/Netflix/titus-control-plane/pull/952#discussion_r523228381", "createdAt": "2020-11-13T20:57:05Z", "author": {"login": "tbak"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultDirectKubeApiServerIntegrator.java", "diffHunk": "@@ -140,27 +143,14 @@ public boolean isReadyForScheduling() {\n     @Override\n     public Mono<V1Pod> launchTask(Job job, Task task) {\n         return Mono.fromCallable(() -> {\n-            Stopwatch timer = Stopwatch.createStarted();\n-            try {\n-                V1Pod v1Pod = taskToPodConverter.apply(job, task);\n-                logger.info(\"creating pod: {}\", v1Pod);\n-\n-                fitKubeInjection.ifPresent(i -> i.beforeImmediate(KubeFitAction.ErrorKind.POD_CREATE_ERROR.name()));\n-\n-                kubeApiFacade.getCoreV1Api().createNamespacedPod(KUBERNETES_NAMESPACE, v1Pod, null, null, null);\n-                pods.putIfAbsent(task.getId(), v1Pod);\n-\n-                metrics.launchSuccess(task, v1Pod, timer.elapsed(TimeUnit.MILLISECONDS));\n-\n-                return v1Pod;\n-            } catch (Exception e) {\n-                logger.error(\"Unable to create pod with error: {}\", KubeUtil.toErrorDetails(e), e);\n-\n-                metrics.launchError(task, e, timer.elapsed(TimeUnit.MILLISECONDS));\n-\n-                throw new IllegalStateException(\"Unable to launch a task \" + task.getId(), e);\n-            }\n-        }).subscribeOn(apiClientScheduler).timeout(Duration.ofMillis(configuration.getKubeApiClientTimeoutMs()));\n+            V1Pod v1Pod = taskToPodConverter.apply(job, task);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92c3cc66f87ff2e31cdcbb2095b3a197c099c34"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzMjc5OQ==", "bodyText": "Check getVolumes() != null? Kube objects are not fully initialized.", "url": "https://github.com/Netflix/titus-control-plane/pull/952#discussion_r523232799", "createdAt": "2020-11-13T21:07:30Z", "author": {"login": "tbak"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultDirectKubeApiServerIntegrator.java", "diffHunk": "@@ -218,6 +208,58 @@ public String resolveReasonCode(Throwable cause) {\n         return podCreateErrorToReasonCodeResolver.resolveReasonCode(cause);\n     }\n \n+    private static Mono<V1PersistentVolume> launchPersistentVolume(Job<?> job, Task task, V1Pod v1Pod, CoreV1Api coreV1Api) {\n+        return Mono.defer(() -> {\n+            Optional<V1Volume> optionalV1Volume = v1Pod.getSpec().getVolumes().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92c3cc66f87ff2e31cdcbb2095b3a197c099c34"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzMzU5MA==", "bodyText": "Add stopwatch and metrics like in pod below?", "url": "https://github.com/Netflix/titus-control-plane/pull/952#discussion_r523233590", "createdAt": "2020-11-13T21:09:24Z", "author": {"login": "tbak"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultDirectKubeApiServerIntegrator.java", "diffHunk": "@@ -218,6 +208,58 @@ public String resolveReasonCode(Throwable cause) {\n         return podCreateErrorToReasonCodeResolver.resolveReasonCode(cause);\n     }\n \n+    private static Mono<V1PersistentVolume> launchPersistentVolume(Job<?> job, Task task, V1Pod v1Pod, CoreV1Api coreV1Api) {\n+        return Mono.defer(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92c3cc66f87ff2e31cdcbb2095b3a197c099c34"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MzA3OA==", "bodyText": "This is non blocking operation which could be done in EntityValidator. Is this going to be extended to make an external call?", "url": "https://github.com/Netflix/titus-control-plane/pull/952#discussion_r523243078", "createdAt": "2020-11-13T21:31:22Z", "author": {"login": "tbak"}, "path": "titus-server-runtime/src/main/java/com/netflix/titus/runtime/endpoint/admission/JobEbsVolumeValidator.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.runtime.endpoint.admission;\n+\n+import java.util.Set;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.JobDescriptor;\n+import com.netflix.titus.common.model.admission.AdmissionValidator;\n+import com.netflix.titus.common.model.admission.ValidatorMetrics;\n+import com.netflix.titus.common.model.sanitizer.ValidationError;\n+import com.netflix.titus.common.runtime.TitusRuntime;\n+import com.netflix.titus.common.util.StringExt;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * This {@link com.netflix.titus.common.model.admission.AdmissionValidator} validates Job EBS volumes\n+ * have all of the appropriate volume metadata set. This metadata should be set during a prior sanitization step.\n+ */\n+public class JobEbsVolumeValidator implements AdmissionValidator<JobDescriptor> {\n+\n+    private static final String REASON_MISSING_FIELD = \"missingField\";\n+\n+    private final Supplier<ValidationError.Type> validationErrorTypeProvider;\n+    private final ValidatorMetrics metrics;\n+\n+    public JobEbsVolumeValidator(Supplier<ValidationError.Type> validationErrorTypeProvider,\n+                                 TitusRuntime titusRuntime) {\n+        this.validationErrorTypeProvider = validationErrorTypeProvider;\n+        this.metrics = new ValidatorMetrics(JobEbsVolumeValidator.class.getSimpleName(), titusRuntime.getRegistry());\n+    }\n+\n+    @Override\n+    public Mono<Set<ValidationError>> validate(JobDescriptor jobDescriptor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92c3cc66f87ff2e31cdcbb2095b3a197c099c34"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c69e852decf407751910c510503271f5cf83d094", "author": {"user": {"login": "andrew-leung", "name": "Andrew Leung"}}, "url": "https://github.com/Netflix/titus-control-plane/commit/c69e852decf407751910c510503271f5cf83d094", "committedDate": "2020-11-17T04:13:12Z", "message": "Initial review comment updates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNTk3Njk5", "url": "https://github.com/Netflix/titus-control-plane/pull/952#pullrequestreview-532597699", "createdAt": "2020-11-17T17:08:54Z", "commit": {"oid": "c69e852decf407751910c510503271f5cf83d094"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMTU4OTk0", "url": "https://github.com/Netflix/titus-control-plane/pull/952#pullrequestreview-533158994", "createdAt": "2020-11-18T07:19:54Z", "commit": {"oid": "c69e852decf407751910c510503271f5cf83d094"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNzoxOTo1NFrOH1f_qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNzoxOTo1NFrOH1f_qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg2MDc3Nw==", "bodyText": "Should we use the same unit (MB) as the disk resource?", "url": "https://github.com/Netflix/titus-control-plane/pull/952#discussion_r525860777", "createdAt": "2020-11-18T07:19:54Z", "author": {"login": "joshi-keyur"}, "path": "titus-api/src/main/java/com/netflix/titus/api/jobmanager/model/job/ebs/EbsVolume.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.api.jobmanager.model.job.ebs;\n+\n+import java.util.Objects;\n+import javax.validation.constraints.NotNull;\n+import javax.validation.constraints.Size;\n+\n+import com.google.common.base.Preconditions;\n+\n+public class EbsVolume {\n+\n+    public enum MountPerm {RO, RW}\n+\n+    public EbsVolume(String volumeId, String volumeAvailabilityZone, int volumeCapacityGB, String mountPath, MountPerm mountPerm, String fsType) {\n+        this.volumeId = volumeId;\n+        this.volumeAvailabilityZone = volumeAvailabilityZone;\n+        this.volumeCapacityGB = volumeCapacityGB;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c69e852decf407751910c510503271f5cf83d094"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMTg0ODEw", "url": "https://github.com/Netflix/titus-control-plane/pull/952#pullrequestreview-533184810", "createdAt": "2020-11-18T08:04:57Z", "commit": {"oid": "c69e852decf407751910c510503271f5cf83d094"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwODowNDo1N1rOH1hRyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwODowNDo1N1rOH1hRyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg4MTgwMQ==", "bodyText": "Do we need to increase the timeout now that we are adding a call to launchPersistentVolume?", "url": "https://github.com/Netflix/titus-control-plane/pull/952#discussion_r525881801", "createdAt": "2020-11-18T08:04:57Z", "author": {"login": "joshi-keyur"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultDirectKubeApiServerIntegrator.java", "diffHunk": "@@ -140,27 +144,19 @@ public boolean isReadyForScheduling() {\n     @Override\n     public Mono<V1Pod> launchTask(Job job, Task task) {\n         return Mono.fromCallable(() -> {\n-            Stopwatch timer = Stopwatch.createStarted();\n             try {\n                 V1Pod v1Pod = taskToPodConverter.apply(job, task);\n                 logger.info(\"creating pod: {}\", v1Pod);\n-\n-                fitKubeInjection.ifPresent(i -> i.beforeImmediate(KubeFitAction.ErrorKind.POD_CREATE_ERROR.name()));\n-\n-                kubeApiFacade.getCoreV1Api().createNamespacedPod(KUBERNETES_NAMESPACE, v1Pod, null, null, null);\n-                pods.putIfAbsent(task.getId(), v1Pod);\n-\n-                metrics.launchSuccess(task, v1Pod, timer.elapsed(TimeUnit.MILLISECONDS));\n-\n                 return v1Pod;\n             } catch (Exception e) {\n-                logger.error(\"Unable to create pod with error: {}\", KubeUtil.toErrorDetails(e), e);\n-\n-                metrics.launchError(task, e, timer.elapsed(TimeUnit.MILLISECONDS));\n-\n-                throw new IllegalStateException(\"Unable to launch a task \" + task.getId(), e);\n+                logger.error(\"Unable to convert job {} and task {} to pod: {}\", job, task, KubeUtil.toErrorDetails(e), e);\n+                throw new IllegalStateException(\"Unable to convert task to pod \" + task.getId(), e);\n             }\n-        }).subscribeOn(apiClientScheduler).timeout(Duration.ofMillis(configuration.getKubeApiClientTimeoutMs()));\n+        })\n+                .flatMap(v1Pod -> launchPersistentVolume(job, task, v1Pod, kubeApiFacade.getCoreV1Api())\n+                        .then(Mono.just(v1Pod)))\n+                .flatMap(v1Pod -> launchPod(task, v1Pod))\n+                .subscribeOn(apiClientScheduler).timeout(Duration.ofMillis(configuration.getKubeApiClientTimeoutMs()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c69e852decf407751910c510503271f5cf83d094"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMTg3NDY1", "url": "https://github.com/Netflix/titus-control-plane/pull/952#pullrequestreview-533187465", "createdAt": "2020-11-18T08:08:38Z", "commit": {"oid": "c69e852decf407751910c510503271f5cf83d094"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwODowODozOFrOH1hZNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwODowODozOFrOH1hZNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg4MzcwMw==", "bodyText": "Is there a value in tracking errors by fsType and AZ?", "url": "https://github.com/Netflix/titus-control-plane/pull/952#discussion_r525883703", "createdAt": "2020-11-18T08:08:38Z", "author": {"login": "joshi-keyur"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultDirectKubeApiServerIntegrator.java", "diffHunk": "@@ -218,6 +214,62 @@ public String resolveReasonCode(Throwable cause) {\n         return podCreateErrorToReasonCodeResolver.resolveReasonCode(cause);\n     }\n \n+    private Mono<V1PersistentVolume> launchPersistentVolume(Job<?> job, Task task, V1Pod v1Pod, CoreV1Api coreV1Api) {\n+        return Mono.defer(() -> {\n+            Stopwatch timer = Stopwatch.createStarted();\n+\n+            Optional<V1Volume> optionalV1Volume = CollectionsExt.nonNull(v1Pod.getSpec().getVolumes())\n+                    .stream()\n+                    .filter(v1Volume -> null != v1Volume.getAwsElasticBlockStore())\n+                    .findFirst();\n+            if (!optionalV1Volume.isPresent()) {\n+                return Mono.empty();\n+            }\n+            V1Volume v1Volume = optionalV1Volume.get();\n+            V1PersistentVolume v1PersistentVolume = KubeModelConverters.toV1PersistentVolume(job, task, v1Volume);\n+\n+            logger.info(\"Creating persistent volume {} for task {}\", v1PersistentVolume, task.getId());\n+\n+            try {\n+                coreV1Api.createPersistentVolume(v1PersistentVolume, null, null, null);\n+                logger.info(\"Created persistent volume {} in {}\", v1PersistentVolume, timer.elapsed(TimeUnit.MILLISECONDS));\n+                metrics.persistentVolumeCreateSuccess(timer.elapsed(TimeUnit.MILLISECONDS));\n+            } catch (ApiException apiException) {\n+                if (isEbsVolumeConflictException(apiException)) {\n+                    logger.info(\"Persistent volume already exists {}\", v1PersistentVolume);\n+                } else {\n+                    logger.error(\"Unable to create persistent volume {}, error: {}\", v1PersistentVolume, apiException);\n+                    metrics.persistentVolumeCreateError(apiException, timer.elapsed(TimeUnit.MILLISECONDS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c69e852decf407751910c510503271f5cf83d094"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMTkzNjUz", "url": "https://github.com/Netflix/titus-control-plane/pull/952#pullrequestreview-533193653", "createdAt": "2020-11-18T08:15:02Z", "commit": {"oid": "c69e852decf407751910c510503271f5cf83d094"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwODoxNTowMlrOH1hvkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwODoxNTowMlrOH1hvkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg4OTQyNw==", "bodyText": "incomplete comment? :)", "url": "https://github.com/Netflix/titus-control-plane/pull/952#discussion_r525889427", "createdAt": "2020-11-18T08:15:02Z", "author": {"login": "joshi-keyur"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultTaskToPodConverter.java", "diffHunk": "@@ -440,4 +452,28 @@ private void setJobAcceptedTimestamp(TitanProtos.ContainerInfo.Builder container\n \n         return Collections.singletonList(constraint);\n     }\n+\n+    /**\n+     * Builds the various objects needed to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c69e852decf407751910c510503271f5cf83d094"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMjAxMjU5", "url": "https://github.com/Netflix/titus-control-plane/pull/952#pullrequestreview-533201259", "createdAt": "2020-11-18T08:25:40Z", "commit": {"oid": "c69e852decf407751910c510503271f5cf83d094"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efa930d662d551824a54c67696b6f70afb3acbe2", "author": {"user": {"login": "andrew-leung", "name": "Andrew Leung"}}, "url": "https://github.com/Netflix/titus-control-plane/commit/efa930d662d551824a54c67696b6f70afb3acbe2", "committedDate": "2020-11-18T17:15:35Z", "message": "Fix incomplete method comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNjg4Nzkw", "url": "https://github.com/Netflix/titus-control-plane/pull/952#pullrequestreview-533688790", "createdAt": "2020-11-18T17:23:53Z", "commit": {"oid": "efa930d662d551824a54c67696b6f70afb3acbe2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzoyMzo1M1rOH145qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzoyMzo1M1rOH145qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI2ODg0MA==", "bodyText": "should this be getEBSMountPoint?", "url": "https://github.com/Netflix/titus-control-plane/pull/952#discussion_r526268840", "createdAt": "2020-11-18T17:23:53Z", "author": {"login": "solarkennedy"}, "path": "titus-api/src/main/java/com/netflix/titus/api/jobmanager/model/job/ebs/EbsVolumeUtils.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.api.jobmanager.model.job.ebs;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.jobmanager.model.job.JobDescriptor;\n+import com.netflix.titus.api.jobmanager.model.job.Task;\n+import com.netflix.titus.common.util.StringExt;\n+\n+import static com.netflix.titus.api.jobmanager.TaskAttributes.TASK_ATTRIBUTES_EBS_VOLUME_ID;\n+\n+/**\n+ * Helper utilities for processing EBS volume related info.\n+ */\n+public class EbsVolumeUtils {\n+\n+    public static <E extends JobDescriptor.JobDescriptorExt> List<EbsVolume> getEbsVolumes(JobDescriptor<E> jobDescriptor) {\n+        List<String> volumeIds = getVolumeIds(jobDescriptor);\n+        Optional<String> mountPointOptional = getMountPoint(jobDescriptor);\n+        Optional<EbsVolume.MountPerm> mountPermOptional = getEbsMountPerm(jobDescriptor);\n+        Optional<String> fsTypeOptional = getEbsFsType(jobDescriptor);\n+\n+        if (!(mountPointOptional.isPresent() && mountPermOptional.isPresent() && fsTypeOptional.isPresent())) {\n+            return Collections.emptyList();\n+        }\n+\n+        String mountPoint = mountPointOptional.get();\n+        EbsVolume.MountPerm mountPerm = mountPermOptional.get();\n+        String fsType = fsTypeOptional.get();\n+\n+        return volumeIds.stream()\n+                .map(volumeId -> EbsVolume.newBuilder()\n+                        .withVolumeId(volumeId)\n+                        .withMountPath(mountPoint)\n+                        .withMountPermissions(mountPerm)\n+                        .withFsType(fsType)\n+                        .build())\n+                .collect(Collectors.toList());\n+    }\n+\n+    public static <E extends JobDescriptor.JobDescriptorExt> List<String> getVolumeIds(JobDescriptor<E> jobDescriptor) {\n+        String volumeIdsStr = StringExt.nonNull(jobDescriptor.getAttributes().get(JobAttributes.JOB_ATTRIBUTES_EBS_VOLUME_IDS));\n+        return StringExt.splitByComma(volumeIdsStr);\n+    }\n+\n+    public static <E extends JobDescriptor.JobDescriptorExt> Optional<String> getMountPoint(JobDescriptor<E> jobDescriptor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efa930d662d551824a54c67696b6f70afb3acbe2"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNjg5Njkx", "url": "https://github.com/Netflix/titus-control-plane/pull/952#pullrequestreview-533689691", "createdAt": "2020-11-18T17:24:18Z", "commit": {"oid": "efa930d662d551824a54c67696b6f70afb3acbe2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzoyNDoxOFrOH146qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzoyNDoxOFrOH146qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI2OTA5Nw==", "bodyText": "getEBSVolumeIDs?", "url": "https://github.com/Netflix/titus-control-plane/pull/952#discussion_r526269097", "createdAt": "2020-11-18T17:24:18Z", "author": {"login": "solarkennedy"}, "path": "titus-api/src/main/java/com/netflix/titus/api/jobmanager/model/job/ebs/EbsVolumeUtils.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.api.jobmanager.model.job.ebs;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.jobmanager.model.job.JobDescriptor;\n+import com.netflix.titus.api.jobmanager.model.job.Task;\n+import com.netflix.titus.common.util.StringExt;\n+\n+import static com.netflix.titus.api.jobmanager.TaskAttributes.TASK_ATTRIBUTES_EBS_VOLUME_ID;\n+\n+/**\n+ * Helper utilities for processing EBS volume related info.\n+ */\n+public class EbsVolumeUtils {\n+\n+    public static <E extends JobDescriptor.JobDescriptorExt> List<EbsVolume> getEbsVolumes(JobDescriptor<E> jobDescriptor) {\n+        List<String> volumeIds = getVolumeIds(jobDescriptor);\n+        Optional<String> mountPointOptional = getMountPoint(jobDescriptor);\n+        Optional<EbsVolume.MountPerm> mountPermOptional = getEbsMountPerm(jobDescriptor);\n+        Optional<String> fsTypeOptional = getEbsFsType(jobDescriptor);\n+\n+        if (!(mountPointOptional.isPresent() && mountPermOptional.isPresent() && fsTypeOptional.isPresent())) {\n+            return Collections.emptyList();\n+        }\n+\n+        String mountPoint = mountPointOptional.get();\n+        EbsVolume.MountPerm mountPerm = mountPermOptional.get();\n+        String fsType = fsTypeOptional.get();\n+\n+        return volumeIds.stream()\n+                .map(volumeId -> EbsVolume.newBuilder()\n+                        .withVolumeId(volumeId)\n+                        .withMountPath(mountPoint)\n+                        .withMountPermissions(mountPerm)\n+                        .withFsType(fsType)\n+                        .build())\n+                .collect(Collectors.toList());\n+    }\n+\n+    public static <E extends JobDescriptor.JobDescriptorExt> List<String> getVolumeIds(JobDescriptor<E> jobDescriptor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efa930d662d551824a54c67696b6f70afb3acbe2"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNjkyMzcw", "url": "https://github.com/Netflix/titus-control-plane/pull/952#pullrequestreview-533692370", "createdAt": "2020-11-18T17:25:30Z", "commit": {"oid": "efa930d662d551824a54c67696b6f70afb3acbe2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a61aad62976559d6385eb2e732668da5906bfdc6", "author": {"user": {"login": "andrew-leung", "name": "Andrew Leung"}}, "url": "https://github.com/Netflix/titus-control-plane/commit/a61aad62976559d6385eb2e732668da5906bfdc6", "committedDate": "2020-11-18T17:44:09Z", "message": "More consistent EBS method naming"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 466, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}