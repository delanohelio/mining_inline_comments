{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMDIyMzg4", "number": 812, "title": "Keep task retryer in the direct Kube integration", "bodyText": "", "createdAt": "2020-03-17T19:04:24Z", "url": "https://github.com/Netflix/titus-control-plane/pull/812", "merged": true, "mergeCommit": {"oid": "9939b4a2f0efae4d937128ad902089beee2cba3a"}, "closed": true, "closedAt": "2020-03-17T23:27:29Z", "author": {"login": "tbak"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOnf25gH2gAyMzkwMDIyMzg4OmUyZmVmM2ViMGQ0ZGY2ZmM0MzU1MDczODAwYTQ4NjA5YjhlYTZmZWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOrOjRAFqTM3NjQ2OTAyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e2fef3eb0d4df6fc4355073800a48609b8ea6fea", "author": {"user": {"login": "tbak", "name": null}}, "url": "https://github.com/Netflix/titus-control-plane/commit/e2fef3eb0d4df6fc4355073800a48609b8ea6fea", "committedDate": "2020-03-17T19:02:07Z", "message": "Keep task retryer in the direct Kube integration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7217326d794c54b8171d7d8dfe2fe008ccdb3ba", "author": {"user": {"login": "tbak", "name": null}}, "url": "https://github.com/Netflix/titus-control-plane/commit/c7217326d794c54b8171d7d8dfe2fe008ccdb3ba", "committedDate": "2020-03-17T20:03:05Z", "message": "Dependency lock update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MzY0ODc2", "url": "https://github.com/Netflix/titus-control-plane/pull/812#pullrequestreview-376364876", "createdAt": "2020-03-17T20:04:29Z", "commit": {"oid": "c7217326d794c54b8171d7d8dfe2fe008ccdb3ba"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NDY5MDI3", "url": "https://github.com/Netflix/titus-control-plane/pull/812#pullrequestreview-376469027", "createdAt": "2020-03-17T23:19:21Z", "commit": {"oid": "c7217326d794c54b8171d7d8dfe2fe008ccdb3ba"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzoxOToyMlrOF3xZBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzoxOToyMlrOF3xZBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyNTIyMg==", "bodyText": "minor: can probably extract the comparator here as a constant to avoid allocations", "url": "https://github.com/Netflix/titus-control-plane/pull/812#discussion_r394025222", "createdAt": "2020-03-17T23:19:22Z", "author": {"login": "fabiokung"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java", "diffHunk": "@@ -316,7 +318,38 @@ private Task fillInMissingStates(V1Pod pod, Task task) {\n         newStatusHistory.sort(Comparator.comparing(ExecutableStatus::getState));\n \n         return task.toBuilder().withStatusHistory(newStatusHistory).build();\n+    }\n+\n+    /**\n+     * In case container could not be started, we do not have the container start time, only the finished time.\n+     * The {@link V1PodStatus#getPhase()} is failed, and the {@link V1PodStatus#getMessage()} contains details on\n+     * the nature of failure. There should be no launched state, so we add it to mark the container start attempt.\n+     */\n+    private Task fillInMissingStatesForContainerSetupFailure(V1Pod pod, Task task) {\n+        // Sanity check. Should never be true.\n+        if (JobFunctions.findTaskStatus(task, TaskState.Launched).isPresent()) {\n+            return task;\n+        }\n+\n+        long startAtTimestamp;\n+        V1ContainerState containerState = KubeUtil.findContainerState(pod).orElse(null);\n+        if (containerState != null && containerState.getTerminated() != null && containerState.getTerminated().getFinishedAt() != null) {\n+            startAtTimestamp = containerState.getTerminated().getFinishedAt().getMillis();\n+        } else {\n+            startAtTimestamp = task.getStatus().getTimestamp();\n+        }\n+\n+        List<TaskStatus> newStatusHistory = new ArrayList<>(task.getStatusHistory());\n+        newStatusHistory.add(TaskStatus.newBuilder()\n+                .withState(TaskState.Launched)\n+                .withReasonCode(TaskStatus.REASON_STATE_MISSING)\n+                .withReasonMessage(\"Filled in\")\n+                .withTimestamp(startAtTimestamp)\n+                .build()\n+        );\n+        newStatusHistory.sort(Comparator.comparing(ExecutableStatus::getState));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7217326d794c54b8171d7d8dfe2fe008ccdb3ba"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 671, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}