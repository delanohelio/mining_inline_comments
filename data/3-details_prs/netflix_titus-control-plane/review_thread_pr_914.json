{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxNzAwNjE1", "number": 914, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjowMTo1NlrOEhULcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNjoxMDo0MVrOEmKU5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzY5MDc1OnYy", "diffSide": "RIGHT", "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/descheduler/DefaultDeschedulerService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjowMTo1NlrOHOkDEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjowMTo1NlrOHOkDEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAzMjcyMQ==", "bodyText": "Import added with no other code changes.", "url": "https://github.com/Netflix/titus-control-plane/pull/914#discussion_r485032721", "createdAt": "2020-09-08T16:01:56Z", "author": {"login": "tbak"}, "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/descheduler/DefaultDeschedulerService.java", "diffHunk": "@@ -35,6 +35,7 @@\n import com.netflix.titus.common.util.CollectionsExt;\n import com.netflix.titus.common.util.time.Clock;\n import com.netflix.titus.common.util.tuple.Pair;\n+import com.netflix.titus.runtime.connector.jobmanager.JobDataReplicator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "788f6772a646f76c3171483680c5dc447c487ec7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzg2OTIwOnYy", "diffSide": "RIGHT", "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo0NzozMFrOHOlvcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo0NzozMFrOHOlvcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2MDQ2NA==", "bodyText": "All upper case?", "url": "https://github.com/Netflix/titus-control-plane/pull/914#discussion_r485060464", "createdAt": "2020-09-08T16:47:30Z", "author": {"login": "tbak"}, "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionController.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.netflix.titus.supplementary.relocation.workflow;\n+\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.jobmanager.service.ReadOnlyJobOperations;\n+import com.netflix.titus.api.model.callmetadata.CallMetadata;\n+import com.netflix.titus.api.model.callmetadata.Caller;\n+import com.netflix.titus.api.model.callmetadata.CallerType;\n+import com.netflix.titus.common.framework.scheduler.ExecutionContext;\n+import com.netflix.titus.common.framework.scheduler.ScheduleReference;\n+import com.netflix.titus.common.framework.scheduler.model.ScheduleDescriptor;\n+import com.netflix.titus.common.runtime.TitusRuntime;\n+import com.netflix.titus.common.util.retry.Retryers;\n+import com.netflix.titus.runtime.connector.jobmanager.JobDataReplicator;\n+import com.netflix.titus.runtime.connector.jobmanager.JobManagementClient;\n+import com.netflix.titus.supplementary.relocation.RelocationConfiguration;\n+import com.netflix.titus.supplementary.relocation.connector.Node;\n+import com.netflix.titus.supplementary.relocation.connector.NodeDataResolver;\n+import com.netflix.titus.supplementary.relocation.util.RelocationUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Schedulers;\n+\n+public class DefaultNodeConditionController implements NodeConditionController {\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultNodeConditionController.class);\n+    private final RelocationConfiguration configuration;\n+    private final NodeDataResolver nodeDataResolver;\n+    private final JobDataReplicator jobDataReplicator;\n+    private final ReadOnlyJobOperations jobOperations;\n+    private final JobManagementClient jobManagementClient;\n+    private final NodeConditionCtrlMetrics metrics;\n+    private final TitusRuntime titusRuntime;\n+\n+    private static final CallMetadata callMetadata;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "788f6772a646f76c3171483680c5dc447c487ec7"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzg3MDgxOnYy", "diffSide": "RIGHT", "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo0Nzo1OFrOHOlwdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo0Nzo1OFrOHOlwdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2MDcyNA==", "bodyText": "Why not built in the field initialization?", "url": "https://github.com/Netflix/titus-control-plane/pull/914#discussion_r485060724", "createdAt": "2020-09-08T16:47:58Z", "author": {"login": "tbak"}, "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionController.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.netflix.titus.supplementary.relocation.workflow;\n+\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.jobmanager.service.ReadOnlyJobOperations;\n+import com.netflix.titus.api.model.callmetadata.CallMetadata;\n+import com.netflix.titus.api.model.callmetadata.Caller;\n+import com.netflix.titus.api.model.callmetadata.CallerType;\n+import com.netflix.titus.common.framework.scheduler.ExecutionContext;\n+import com.netflix.titus.common.framework.scheduler.ScheduleReference;\n+import com.netflix.titus.common.framework.scheduler.model.ScheduleDescriptor;\n+import com.netflix.titus.common.runtime.TitusRuntime;\n+import com.netflix.titus.common.util.retry.Retryers;\n+import com.netflix.titus.runtime.connector.jobmanager.JobDataReplicator;\n+import com.netflix.titus.runtime.connector.jobmanager.JobManagementClient;\n+import com.netflix.titus.supplementary.relocation.RelocationConfiguration;\n+import com.netflix.titus.supplementary.relocation.connector.Node;\n+import com.netflix.titus.supplementary.relocation.connector.NodeDataResolver;\n+import com.netflix.titus.supplementary.relocation.util.RelocationUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Schedulers;\n+\n+public class DefaultNodeConditionController implements NodeConditionController {\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultNodeConditionController.class);\n+    private final RelocationConfiguration configuration;\n+    private final NodeDataResolver nodeDataResolver;\n+    private final JobDataReplicator jobDataReplicator;\n+    private final ReadOnlyJobOperations jobOperations;\n+    private final JobManagementClient jobManagementClient;\n+    private final NodeConditionCtrlMetrics metrics;\n+    private final TitusRuntime titusRuntime;\n+\n+    private static final CallMetadata callMetadata;\n+\n+    static {\n+        Caller caller = Caller.newBuilder().withCallerType(CallerType.Application).withId(\"titusrelocation\").build();\n+        callMetadata = CallMetadata.newBuilder().withCallers(Collections.singletonList(caller)).withCallReason(\"Bad Node Condition\").build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "788f6772a646f76c3171483680c5dc447c487ec7"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzg3ODQyOnYy", "diffSide": "RIGHT", "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo1MDowNFrOHOl0_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNDoxNzoxMFrOHSfcHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2MTg4NQ==", "bodyText": "Should we check the value as well (value == true)?", "url": "https://github.com/Netflix/titus-control-plane/pull/914#discussion_r485061885", "createdAt": "2020-09-08T16:50:04Z", "author": {"login": "tbak"}, "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionController.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.netflix.titus.supplementary.relocation.workflow;\n+\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.jobmanager.service.ReadOnlyJobOperations;\n+import com.netflix.titus.api.model.callmetadata.CallMetadata;\n+import com.netflix.titus.api.model.callmetadata.Caller;\n+import com.netflix.titus.api.model.callmetadata.CallerType;\n+import com.netflix.titus.common.framework.scheduler.ExecutionContext;\n+import com.netflix.titus.common.framework.scheduler.ScheduleReference;\n+import com.netflix.titus.common.framework.scheduler.model.ScheduleDescriptor;\n+import com.netflix.titus.common.runtime.TitusRuntime;\n+import com.netflix.titus.common.util.retry.Retryers;\n+import com.netflix.titus.runtime.connector.jobmanager.JobDataReplicator;\n+import com.netflix.titus.runtime.connector.jobmanager.JobManagementClient;\n+import com.netflix.titus.supplementary.relocation.RelocationConfiguration;\n+import com.netflix.titus.supplementary.relocation.connector.Node;\n+import com.netflix.titus.supplementary.relocation.connector.NodeDataResolver;\n+import com.netflix.titus.supplementary.relocation.util.RelocationUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Schedulers;\n+\n+public class DefaultNodeConditionController implements NodeConditionController {\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultNodeConditionController.class);\n+    private final RelocationConfiguration configuration;\n+    private final NodeDataResolver nodeDataResolver;\n+    private final JobDataReplicator jobDataReplicator;\n+    private final ReadOnlyJobOperations jobOperations;\n+    private final JobManagementClient jobManagementClient;\n+    private final NodeConditionCtrlMetrics metrics;\n+    private final TitusRuntime titusRuntime;\n+\n+    private static final CallMetadata callMetadata;\n+\n+    static {\n+        Caller caller = Caller.newBuilder().withCallerType(CallerType.Application).withId(\"titusrelocation\").build();\n+        callMetadata = CallMetadata.newBuilder().withCallers(Collections.singletonList(caller)).withCallReason(\"Bad Node Condition\").build();\n+    }\n+\n+    private ScheduleReference scheduleReference;\n+\n+\n+    public DefaultNodeConditionController(RelocationConfiguration relocationConfiguration,\n+                                          NodeDataResolver nodeDataResolver,\n+                                          JobDataReplicator jobDataReplicator,\n+                                          ReadOnlyJobOperations jobOperations,\n+                                          JobManagementClient jobManagementClient,\n+                                          TitusRuntime titusRuntime) {\n+        this.configuration = relocationConfiguration;\n+        this.nodeDataResolver = nodeDataResolver;\n+        this.jobDataReplicator = jobDataReplicator;\n+        this.jobOperations = jobOperations;\n+        this.jobManagementClient = jobManagementClient;\n+        this.metrics = new NodeConditionCtrlMetrics(titusRuntime.getRegistry());\n+        this.titusRuntime = titusRuntime;\n+    }\n+\n+    @Override\n+    public void activate() {\n+        logger.info(\"Activating DefaultNodeConditionController\");\n+        ScheduleDescriptor nodeConditionControlLoopSchedulerDescriptor = ScheduleDescriptor.newBuilder()\n+                .withName(\"nodeConditionCtrl\")\n+                .withDescription(\"Node Condition control loop\")\n+                .withInitialDelay(Duration.ZERO)\n+                .withInterval(Duration.ofMillis(configuration.getNodeConditionControlLoopIntervalMs()))\n+                .withTimeout(Duration.ofMillis(configuration.getNodeConditionControlLoopTimeoutMs()))\n+                .withRetryerSupplier(() -> Retryers.exponentialBackoff(1, 5, TimeUnit.MINUTES))\n+                .build();\n+        this.scheduleReference = titusRuntime.getLocalScheduler().scheduleMono(nodeConditionControlLoopSchedulerDescriptor,\n+                this::handleNodesWithBadCondition, Schedulers.parallel());\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        if (scheduleReference != null) {\n+            scheduleReference.cancel();\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    Mono<Void> handleNodesWithBadCondition(ExecutionContext executionContext) {\n+        int iterationCount = executionContext.getExecutionId().getTotal();\n+        logger.debug(\"Starting node condition controller iteration {} ...\", iterationCount);\n+        if (hasStaleData()) {\n+            logger.info(\"Stale data. Skipping the node condition control loop iteration- {} \", iterationCount);\n+            return Mono.empty();\n+        }\n+        return handleNodesWithBadCondition();\n+    }\n+\n+    private boolean hasStaleData() {\n+        long dataStaleness = getDataStalenessMs();\n+        boolean stale = dataStaleness > configuration.getDataStalenessThresholdMs();\n+        metrics.setStaleness(stale, dataStaleness);\n+        return stale;\n+    }\n+\n+    private long getDataStalenessMs() {\n+        return Math.max(nodeDataResolver.getStalenessMs(), jobDataReplicator.getStalenessMs());\n+    }\n+\n+    @Override\n+    public Mono<Void> handleNodesWithBadCondition() {\n+        // Identify bad nodes from node resolver\n+        Map<String, Node> badConditionNodesById = nodeDataResolver.resolve().entrySet().stream().filter(nodeEntry -> nodeEntry.getValue().isInBadCondition())\n+                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+\n+        // Find jobs that are eligible for bad node condition treatment\n+        Set<String> eligibleJobIds = jobOperations.getJobs().stream().filter(job ->\n+                job.getJobDescriptor().getAttributes().containsKey(JobAttributes.JOB_PARAMETER_TERMINATE_ON_BAD_AGENT))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "788f6772a646f76c3171483680c5dc447c487ec7"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1MTUxNg==", "bodyText": "Good catch", "url": "https://github.com/Netflix/titus-control-plane/pull/914#discussion_r489151516", "createdAt": "2020-09-16T04:17:10Z", "author": {"login": "amit-git"}, "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionController.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.netflix.titus.supplementary.relocation.workflow;\n+\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.jobmanager.service.ReadOnlyJobOperations;\n+import com.netflix.titus.api.model.callmetadata.CallMetadata;\n+import com.netflix.titus.api.model.callmetadata.Caller;\n+import com.netflix.titus.api.model.callmetadata.CallerType;\n+import com.netflix.titus.common.framework.scheduler.ExecutionContext;\n+import com.netflix.titus.common.framework.scheduler.ScheduleReference;\n+import com.netflix.titus.common.framework.scheduler.model.ScheduleDescriptor;\n+import com.netflix.titus.common.runtime.TitusRuntime;\n+import com.netflix.titus.common.util.retry.Retryers;\n+import com.netflix.titus.runtime.connector.jobmanager.JobDataReplicator;\n+import com.netflix.titus.runtime.connector.jobmanager.JobManagementClient;\n+import com.netflix.titus.supplementary.relocation.RelocationConfiguration;\n+import com.netflix.titus.supplementary.relocation.connector.Node;\n+import com.netflix.titus.supplementary.relocation.connector.NodeDataResolver;\n+import com.netflix.titus.supplementary.relocation.util.RelocationUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Schedulers;\n+\n+public class DefaultNodeConditionController implements NodeConditionController {\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultNodeConditionController.class);\n+    private final RelocationConfiguration configuration;\n+    private final NodeDataResolver nodeDataResolver;\n+    private final JobDataReplicator jobDataReplicator;\n+    private final ReadOnlyJobOperations jobOperations;\n+    private final JobManagementClient jobManagementClient;\n+    private final NodeConditionCtrlMetrics metrics;\n+    private final TitusRuntime titusRuntime;\n+\n+    private static final CallMetadata callMetadata;\n+\n+    static {\n+        Caller caller = Caller.newBuilder().withCallerType(CallerType.Application).withId(\"titusrelocation\").build();\n+        callMetadata = CallMetadata.newBuilder().withCallers(Collections.singletonList(caller)).withCallReason(\"Bad Node Condition\").build();\n+    }\n+\n+    private ScheduleReference scheduleReference;\n+\n+\n+    public DefaultNodeConditionController(RelocationConfiguration relocationConfiguration,\n+                                          NodeDataResolver nodeDataResolver,\n+                                          JobDataReplicator jobDataReplicator,\n+                                          ReadOnlyJobOperations jobOperations,\n+                                          JobManagementClient jobManagementClient,\n+                                          TitusRuntime titusRuntime) {\n+        this.configuration = relocationConfiguration;\n+        this.nodeDataResolver = nodeDataResolver;\n+        this.jobDataReplicator = jobDataReplicator;\n+        this.jobOperations = jobOperations;\n+        this.jobManagementClient = jobManagementClient;\n+        this.metrics = new NodeConditionCtrlMetrics(titusRuntime.getRegistry());\n+        this.titusRuntime = titusRuntime;\n+    }\n+\n+    @Override\n+    public void activate() {\n+        logger.info(\"Activating DefaultNodeConditionController\");\n+        ScheduleDescriptor nodeConditionControlLoopSchedulerDescriptor = ScheduleDescriptor.newBuilder()\n+                .withName(\"nodeConditionCtrl\")\n+                .withDescription(\"Node Condition control loop\")\n+                .withInitialDelay(Duration.ZERO)\n+                .withInterval(Duration.ofMillis(configuration.getNodeConditionControlLoopIntervalMs()))\n+                .withTimeout(Duration.ofMillis(configuration.getNodeConditionControlLoopTimeoutMs()))\n+                .withRetryerSupplier(() -> Retryers.exponentialBackoff(1, 5, TimeUnit.MINUTES))\n+                .build();\n+        this.scheduleReference = titusRuntime.getLocalScheduler().scheduleMono(nodeConditionControlLoopSchedulerDescriptor,\n+                this::handleNodesWithBadCondition, Schedulers.parallel());\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        if (scheduleReference != null) {\n+            scheduleReference.cancel();\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    Mono<Void> handleNodesWithBadCondition(ExecutionContext executionContext) {\n+        int iterationCount = executionContext.getExecutionId().getTotal();\n+        logger.debug(\"Starting node condition controller iteration {} ...\", iterationCount);\n+        if (hasStaleData()) {\n+            logger.info(\"Stale data. Skipping the node condition control loop iteration- {} \", iterationCount);\n+            return Mono.empty();\n+        }\n+        return handleNodesWithBadCondition();\n+    }\n+\n+    private boolean hasStaleData() {\n+        long dataStaleness = getDataStalenessMs();\n+        boolean stale = dataStaleness > configuration.getDataStalenessThresholdMs();\n+        metrics.setStaleness(stale, dataStaleness);\n+        return stale;\n+    }\n+\n+    private long getDataStalenessMs() {\n+        return Math.max(nodeDataResolver.getStalenessMs(), jobDataReplicator.getStalenessMs());\n+    }\n+\n+    @Override\n+    public Mono<Void> handleNodesWithBadCondition() {\n+        // Identify bad nodes from node resolver\n+        Map<String, Node> badConditionNodesById = nodeDataResolver.resolve().entrySet().stream().filter(nodeEntry -> nodeEntry.getValue().isInBadCondition())\n+                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+\n+        // Find jobs that are eligible for bad node condition treatment\n+        Set<String> eligibleJobIds = jobOperations.getJobs().stream().filter(job ->\n+                job.getJobDescriptor().getAttributes().containsKey(JobAttributes.JOB_PARAMETER_TERMINATE_ON_BAD_AGENT))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2MTg4NQ=="}, "originalCommit": {"oid": "788f6772a646f76c3171483680c5dc447c487ec7"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzg4OTM4OnYy", "diffSide": "RIGHT", "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/NodeConditionController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo1MzowM1rOHOl7pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo1MzowM1rOHOl7pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2MzU5MA==", "bodyText": "Just a marek interface? This is internal method that should not be called by an external client.", "url": "https://github.com/Netflix/titus-control-plane/pull/914#discussion_r485063590", "createdAt": "2020-09-08T16:53:03Z", "author": {"login": "tbak"}, "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/NodeConditionController.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.netflix.titus.supplementary.relocation.workflow;\n+\n+import com.netflix.titus.api.common.LeaderActivationListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Mono;\n+\n+public interface NodeConditionController extends LeaderActivationListener {\n+   Mono<Void> handleNodesWithBadCondition();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "788f6772a646f76c3171483680c5dc447c487ec7"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzg5MjgxOnYy", "diffSide": "RIGHT", "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/NodeConditionCtrlMetrics.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo1NDowMlrOHOl9qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNDoyMzo0NFrOHSfiQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2NDEwNw==", "bodyText": "We should also report metrics for terminated tasks and evacuated nodes.", "url": "https://github.com/Netflix/titus-control-plane/pull/914#discussion_r485064107", "createdAt": "2020-09-08T16:54:02Z", "author": {"login": "tbak"}, "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/NodeConditionCtrlMetrics.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package com.netflix.titus.supplementary.relocation.workflow;\n+\n+import com.netflix.spectator.api.Gauge;\n+import com.netflix.spectator.api.Registry;\n+import com.netflix.titus.supplementary.relocation.RelocationMetrics;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class NodeConditionCtrlMetrics {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "788f6772a646f76c3171483680c5dc447c487ec7"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1MzA5MA==", "bodyText": "It makes sense to include terminated tasks metric here since the control loop here isn't aware of potential node evacuation scenarios", "url": "https://github.com/Netflix/titus-control-plane/pull/914#discussion_r489153090", "createdAt": "2020-09-16T04:23:44Z", "author": {"login": "amit-git"}, "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/NodeConditionCtrlMetrics.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package com.netflix.titus.supplementary.relocation.workflow;\n+\n+import com.netflix.spectator.api.Gauge;\n+import com.netflix.spectator.api.Registry;\n+import com.netflix.titus.supplementary.relocation.RelocationMetrics;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class NodeConditionCtrlMetrics {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2NDEwNw=="}, "originalCommit": {"oid": "788f6772a646f76c3171483680c5dc447c487ec7"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzkxMjUxOnYy", "diffSide": "RIGHT", "path": "titus-supplementary-component/task-relocation/src/test/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo1OToyMFrOHOmJnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo1OToyMFrOHOmJnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2NzE2Nw==", "bodyText": "Uppercase?", "url": "https://github.com/Netflix/titus-control-plane/pull/914#discussion_r485067167", "createdAt": "2020-09-08T16:59:20Z", "author": {"login": "tbak"}, "path": "titus-supplementary-component/task-relocation/src/test/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionControllerTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package com.netflix.titus.supplementary.relocation.workflow;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.netflix.spectator.api.DefaultRegistry;\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.TaskAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.BatchJobTask;\n+import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.jobmanager.model.job.Task;\n+import com.netflix.titus.api.jobmanager.model.job.ext.BatchJobExt;\n+import com.netflix.titus.api.jobmanager.service.ReadOnlyJobOperations;\n+import com.netflix.titus.common.framework.scheduler.ExecutionContext;\n+import com.netflix.titus.common.framework.scheduler.model.ExecutionId;\n+import com.netflix.titus.common.runtime.TitusRuntime;\n+import com.netflix.titus.runtime.connector.jobmanager.JobDataReplicator;\n+import com.netflix.titus.runtime.connector.jobmanager.JobManagementClient;\n+import com.netflix.titus.supplementary.relocation.RelocationConfiguration;\n+import com.netflix.titus.supplementary.relocation.connector.Node;\n+import com.netflix.titus.supplementary.relocation.connector.NodeDataResolver;\n+import com.netflix.titus.testkit.model.job.JobGenerator;\n+import org.junit.Test;\n+import reactor.core.publisher.Mono;\n+import reactor.test.StepVerifier;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class DefaultNodeConditionControllerTest {\n+\n+    enum NodeIds {\n+        node1,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "788f6772a646f76c3171483680c5dc447c487ec7"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NDQzMTY3OnYy", "diffSide": "RIGHT", "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/RelocationConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNTo1NDowMlrOHWBLAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNTo1NDowMlrOHWBLAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg0OTkyMQ==", "bodyText": "add javadocs for all these new configs", "url": "https://github.com/Netflix/titus-control-plane/pull/914#discussion_r492849921", "createdAt": "2020-09-22T15:54:02Z", "author": {"login": "corindwyer"}, "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/RelocationConfiguration.java", "diffHunk": "@@ -50,4 +50,23 @@\n \n     @DefaultValue(\"NONE\")\n     String getNodeRelocationRequiredImmediatelyTaints();\n+\n+    @DefaultValue(\"UncorrectableMemoryFailure\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9b707237deb2964d6b5ce6a9f97d72aeb3699a4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NDQ3MTk1OnYy", "diffSide": "RIGHT", "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/connector/NodePredicates.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNjowMjo1OFrOHWBkqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODoxMzo1MFrOHWGkrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg1NjQ4OQ==", "bodyText": "Boolean.valueOf to make this cleaner/safer.", "url": "https://github.com/Netflix/titus-control-plane/pull/914#discussion_r492856489", "createdAt": "2020-09-22T16:02:58Z", "author": {"login": "corindwyer"}, "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/connector/NodePredicates.java", "diffHunk": "@@ -47,4 +51,24 @@ static boolean isOwnedByScheduler(String schedulerName, V1Node node) {\n                 KubeConstants.TAINT_SCHEDULER.equals(taint.getKey()) && schedulerName.equals(taint.getValue())\n         );\n     }\n+\n+    @VisibleForTesting\n+    static boolean hasBadCondition(V1Node node, Function<String, Matcher> badConditionExpression,\n+                                   int nodeConditionTransitionTimeThresholdSeconds) {\n+        if (node.getStatus() != null && node.getStatus().getConditions() != null) {\n+            return node.getStatus().getConditions().stream()\n+                    .anyMatch(v1NodeCondition -> badConditionExpression.apply(v1NodeCondition.getType()).matches() &&\n+                            v1NodeCondition.getStatus().equals(\"True\") &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9b707237deb2964d6b5ce6a9f97d72aeb3699a4"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkzODQxMg==", "bodyText": "Good catch", "url": "https://github.com/Netflix/titus-control-plane/pull/914#discussion_r492938412", "createdAt": "2020-09-22T18:13:50Z", "author": {"login": "amit-git"}, "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/connector/NodePredicates.java", "diffHunk": "@@ -47,4 +51,24 @@ static boolean isOwnedByScheduler(String schedulerName, V1Node node) {\n                 KubeConstants.TAINT_SCHEDULER.equals(taint.getKey()) && schedulerName.equals(taint.getValue())\n         );\n     }\n+\n+    @VisibleForTesting\n+    static boolean hasBadCondition(V1Node node, Function<String, Matcher> badConditionExpression,\n+                                   int nodeConditionTransitionTimeThresholdSeconds) {\n+        if (node.getStatus() != null && node.getStatus().getConditions() != null) {\n+            return node.getStatus().getConditions().stream()\n+                    .anyMatch(v1NodeCondition -> badConditionExpression.apply(v1NodeCondition.getType()).matches() &&\n+                            v1NodeCondition.getStatus().equals(\"True\") &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg1NjQ4OQ=="}, "originalCommit": {"oid": "e9b707237deb2964d6b5ce6a9f97d72aeb3699a4"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NDUwNTM0OnYy", "diffSide": "RIGHT", "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNjoxMDo0MVrOHWB5mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNjoxMDo0MVrOHWB5mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg2MTg0OA==", "bodyText": "I think using a more descriptive reason here would be better like: This task was automatically terminated because the underlying host had issues.", "url": "https://github.com/Netflix/titus-control-plane/pull/914#discussion_r492861848", "createdAt": "2020-09-22T16:10:41Z", "author": {"login": "corindwyer"}, "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionController.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package com.netflix.titus.supplementary.relocation.workflow;\n+\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.jobmanager.model.job.JobDescriptor;\n+import com.netflix.titus.api.jobmanager.service.ReadOnlyJobOperations;\n+import com.netflix.titus.api.model.callmetadata.CallMetadata;\n+import com.netflix.titus.api.model.callmetadata.Caller;\n+import com.netflix.titus.api.model.callmetadata.CallerType;\n+import com.netflix.titus.common.framework.scheduler.ExecutionContext;\n+import com.netflix.titus.common.framework.scheduler.ScheduleReference;\n+import com.netflix.titus.common.framework.scheduler.model.ScheduleDescriptor;\n+import com.netflix.titus.common.runtime.TitusRuntime;\n+import com.netflix.titus.common.util.retry.Retryers;\n+import com.netflix.titus.runtime.connector.jobmanager.JobDataReplicator;\n+import com.netflix.titus.runtime.connector.jobmanager.JobManagementClient;\n+import com.netflix.titus.supplementary.relocation.RelocationConfiguration;\n+import com.netflix.titus.supplementary.relocation.connector.Node;\n+import com.netflix.titus.supplementary.relocation.connector.NodeDataResolver;\n+import com.netflix.titus.supplementary.relocation.util.RelocationUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Schedulers;\n+\n+public class DefaultNodeConditionController implements NodeConditionController {\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultNodeConditionController.class);\n+    private final RelocationConfiguration configuration;\n+    private final NodeDataResolver nodeDataResolver;\n+    private final JobDataReplicator jobDataReplicator;\n+    private final ReadOnlyJobOperations jobOperations;\n+    private final JobManagementClient jobManagementClient;\n+    private final NodeConditionCtrlMetrics metrics;\n+    private final TitusRuntime titusRuntime;\n+\n+    private static final CallMetadata CALL_METADATA = buildCallMetadata();\n+    private static final String CALLER_APP_ID = \"titusrelocation\";\n+    private static final String CALL_REASON = \"Bad Node Condition\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9b707237deb2964d6b5ce6a9f97d72aeb3699a4"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4029, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}