{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNjQwMTc4", "number": 764, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwMDoxMDo1NlrODeL4VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwMDoxMzozMVrODeL5lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTc4NTE2OnYy", "diffSide": "RIGHT", "path": "titus-server-master/src/main/java/com/netflix/titus/master/scheduler/TaskPlacementFailure.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwMDoxMDo1NlrOFnNuIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwMDoxMDo1NlrOFnNuIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY2MzU4NA==", "bodyText": "add this new kind to FailureKind.IGNORED_FOR_OPPORTUNISTIC_SCHEDULING since it should not cause opportunistic behavior to change", "url": "https://github.com/Netflix/titus-control-plane/pull/764#discussion_r376663584", "createdAt": "2020-02-08T00:10:56Z", "author": {"login": "fabiokung"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/scheduler/TaskPlacementFailure.java", "diffHunk": "@@ -54,6 +54,11 @@\n          */\n         LaunchGuard,\n \n+        /**\n+         * Task not launched on an agent, as it runs the maximum allowed number of containers.\n+         */\n+        AgentContainerLimit,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9952569a74e6fb0c48ba4e3f718d697c8bf7a8d0"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTc4ODM3OnYy", "diffSide": "RIGHT", "path": "titus-server-master/src/main/java/com/netflix/titus/master/scheduler/constraint/AgentContainerLimitSystemConstraint.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwMDoxMzozMVrOFnNv_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxNjo0MzowM1rOFnRKWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY2NDA2MA==", "bodyText": "should this be protected against the empty string? Why not use .equals() instead of .contains()?", "url": "https://github.com/Netflix/titus-control-plane/pull/764#discussion_r376664060", "createdAt": "2020-02-08T00:13:31Z", "author": {"login": "fabiokung"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/scheduler/constraint/AgentContainerLimitSystemConstraint.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.master.scheduler.constraint;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import com.netflix.fenzo.TaskRequest;\n+import com.netflix.fenzo.TaskTrackerState;\n+import com.netflix.fenzo.VirtualMachineCurrentState;\n+import com.netflix.titus.master.scheduler.SchedulerConfiguration;\n+\n+@Singleton\n+public class AgentContainerLimitSystemConstraint implements SystemConstraint {\n+\n+    public static final String NAME = AgentContainerLimitSystemConstraint.class.getSimpleName();\n+\n+    private static final Result VALID = new Result(true, \"\");\n+    private static final Result TOO_MANY_CONTAINERS = new Result(false, \"Too many containers on the agent node\");\n+\n+    private final SchedulerConfiguration configuration;\n+\n+    @Inject\n+    public AgentContainerLimitSystemConstraint(SchedulerConfiguration configuration) {\n+        this.configuration = configuration;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public Result evaluate(TaskRequest taskRequest, VirtualMachineCurrentState targetVM, TaskTrackerState taskTrackerState) {\n+        int total = targetVM.getRunningTasks().size() + targetVM.getTasksCurrentlyAssigned().size();\n+        int max = Math.max(1, configuration.getMaxTasksPerMachine());\n+        return total < max ? VALID : TOO_MANY_CONTAINERS;\n+    }\n+\n+    public static boolean isAgentContainerLimitSystemConstraint(String reason) {\n+        return reason != null && TOO_MANY_CONTAINERS.getFailureReason().contains(reason);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9952569a74e6fb0c48ba4e3f718d697c8bf7a8d0"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxOTk2MQ==", "bodyText": "Copy paste. It should be equals.", "url": "https://github.com/Netflix/titus-control-plane/pull/764#discussion_r376719961", "createdAt": "2020-02-08T16:43:03Z", "author": {"login": "tbak"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/scheduler/constraint/AgentContainerLimitSystemConstraint.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.master.scheduler.constraint;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import com.netflix.fenzo.TaskRequest;\n+import com.netflix.fenzo.TaskTrackerState;\n+import com.netflix.fenzo.VirtualMachineCurrentState;\n+import com.netflix.titus.master.scheduler.SchedulerConfiguration;\n+\n+@Singleton\n+public class AgentContainerLimitSystemConstraint implements SystemConstraint {\n+\n+    public static final String NAME = AgentContainerLimitSystemConstraint.class.getSimpleName();\n+\n+    private static final Result VALID = new Result(true, \"\");\n+    private static final Result TOO_MANY_CONTAINERS = new Result(false, \"Too many containers on the agent node\");\n+\n+    private final SchedulerConfiguration configuration;\n+\n+    @Inject\n+    public AgentContainerLimitSystemConstraint(SchedulerConfiguration configuration) {\n+        this.configuration = configuration;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public Result evaluate(TaskRequest taskRequest, VirtualMachineCurrentState targetVM, TaskTrackerState taskTrackerState) {\n+        int total = targetVM.getRunningTasks().size() + targetVM.getTasksCurrentlyAssigned().size();\n+        int max = Math.max(1, configuration.getMaxTasksPerMachine());\n+        return total < max ? VALID : TOO_MANY_CONTAINERS;\n+    }\n+\n+    public static boolean isAgentContainerLimitSystemConstraint(String reason) {\n+        return reason != null && TOO_MANY_CONTAINERS.getFailureReason().contains(reason);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY2NDA2MA=="}, "originalCommit": {"oid": "9952569a74e6fb0c48ba4e3f718d697c8bf7a8d0"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4044, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}