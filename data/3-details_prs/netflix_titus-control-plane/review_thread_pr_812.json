{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMDIyMzg4", "number": 812, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzoxOToyMlrODo67gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzoxOToyMlrODo67gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjM1MTM2OnYy", "diffSide": "RIGHT", "path": "titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzoxOToyMlrOF3xZBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzoxOToyMlrOF3xZBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyNTIyMg==", "bodyText": "minor: can probably extract the comparator here as a constant to avoid allocations", "url": "https://github.com/Netflix/titus-control-plane/pull/812#discussion_r394025222", "createdAt": "2020-03-17T23:19:22Z", "author": {"login": "fabiokung"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java", "diffHunk": "@@ -316,7 +318,38 @@ private Task fillInMissingStates(V1Pod pod, Task task) {\n         newStatusHistory.sort(Comparator.comparing(ExecutableStatus::getState));\n \n         return task.toBuilder().withStatusHistory(newStatusHistory).build();\n+    }\n+\n+    /**\n+     * In case container could not be started, we do not have the container start time, only the finished time.\n+     * The {@link V1PodStatus#getPhase()} is failed, and the {@link V1PodStatus#getMessage()} contains details on\n+     * the nature of failure. There should be no launched state, so we add it to mark the container start attempt.\n+     */\n+    private Task fillInMissingStatesForContainerSetupFailure(V1Pod pod, Task task) {\n+        // Sanity check. Should never be true.\n+        if (JobFunctions.findTaskStatus(task, TaskState.Launched).isPresent()) {\n+            return task;\n+        }\n+\n+        long startAtTimestamp;\n+        V1ContainerState containerState = KubeUtil.findContainerState(pod).orElse(null);\n+        if (containerState != null && containerState.getTerminated() != null && containerState.getTerminated().getFinishedAt() != null) {\n+            startAtTimestamp = containerState.getTerminated().getFinishedAt().getMillis();\n+        } else {\n+            startAtTimestamp = task.getStatus().getTimestamp();\n+        }\n+\n+        List<TaskStatus> newStatusHistory = new ArrayList<>(task.getStatusHistory());\n+        newStatusHistory.add(TaskStatus.newBuilder()\n+                .withState(TaskState.Launched)\n+                .withReasonCode(TaskStatus.REASON_STATE_MISSING)\n+                .withReasonMessage(\"Filled in\")\n+                .withTimestamp(startAtTimestamp)\n+                .build()\n+        );\n+        newStatusHistory.sort(Comparator.comparing(ExecutableStatus::getState));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7217326d794c54b8171d7d8dfe2fe008ccdb3ba"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4102, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}