{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0ODQ1OTYw", "number": 904, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNzozMzoyNVrOEdUiLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNzo0NTozN1rOEdUzIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MTgwNTg4OnYy", "diffSide": "RIGHT", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/PodAffinityFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNzozMzoyNVrOHIactQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNzozMzoyNVrOHIactQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU4Mzk4OQ==", "bodyText": "please document what the Map return should contain", "url": "https://github.com/Netflix/titus-control-plane/pull/904#discussion_r478583989", "createdAt": "2020-08-27T17:33:25Z", "author": {"login": "fabiokung"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/PodAffinityFactory.java", "diffHunk": "@@ -26,5 +29,5 @@\n  */\n public interface PodAffinityFactory {\n \n-    V1Affinity buildV1Affinity(Job<?> job, Task task);\n+    Pair<V1Affinity, Map<String, String>> buildV1Affinity(Job<?> job, Task task);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c331e8069ddd64803228a09639611afede4767d2"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MTgyMzQ4OnYy", "diffSide": "RIGHT", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/resourcepool/CapacityGroupPodResourcePoolResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNzozODoxNFrOHIanoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxODoxMToxMVrOHIbvwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU4Njc4NQ==", "bodyText": "minor: thoughts on deferring this to after leader activation?", "url": "https://github.com/Netflix/titus-control-plane/pull/904#discussion_r478586785", "createdAt": "2020-08-27T17:38:14Z", "author": {"login": "fabiokung"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/resourcepool/CapacityGroupPodResourcePoolResolver.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.master.mesos.kubeapiserver.direct.resourcepool;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.collect.Iterators;\n+import com.netflix.archaius.api.Config;\n+import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.model.ApplicationSLA;\n+import com.netflix.titus.common.runtime.TitusRuntime;\n+import com.netflix.titus.common.util.tuple.Pair;\n+import com.netflix.titus.master.jobmanager.service.JobManagerUtil;\n+import com.netflix.titus.master.mesos.kubeapiserver.direct.DirectKubeConfiguration;\n+import com.netflix.titus.master.service.management.ApplicationSlaManagementService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class CapacityGroupPodResourcePoolResolver implements PodResourcePoolResolver {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(CapacityGroupPodResourcePoolResolver.class);\n+\n+    private final DirectKubeConfiguration configuration;\n+    private final Config config;\n+    private final ApplicationSlaManagementService capacityGroupService;\n+    private final TitusRuntime titusRuntime;\n+\n+    private final Lock lock = new ReentrantLock();\n+    private volatile List<Pair<String, Pattern>> resourcePoolToCapacityGroupMappers;\n+    private volatile long lastUpdate;\n+\n+    public CapacityGroupPodResourcePoolResolver(DirectKubeConfiguration configuration,\n+                                                Config config,\n+                                                ApplicationSlaManagementService capacityGroupService,\n+                                                TitusRuntime titusRuntime) {\n+        this.configuration = configuration;\n+        this.config = config;\n+        this.capacityGroupService = capacityGroupService;\n+        this.titusRuntime = titusRuntime;\n+        refreshResourcePoolToCapacityGroupMappers();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c331e8069ddd64803228a09639611afede4767d2"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYwNTI1MA==", "bodyText": "It has a very minor CPU impact and does not make any external calls. I would prefer to keep it as it is.", "url": "https://github.com/Netflix/titus-control-plane/pull/904#discussion_r478605250", "createdAt": "2020-08-27T18:11:11Z", "author": {"login": "tbak"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/resourcepool/CapacityGroupPodResourcePoolResolver.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.master.mesos.kubeapiserver.direct.resourcepool;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.collect.Iterators;\n+import com.netflix.archaius.api.Config;\n+import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.model.ApplicationSLA;\n+import com.netflix.titus.common.runtime.TitusRuntime;\n+import com.netflix.titus.common.util.tuple.Pair;\n+import com.netflix.titus.master.jobmanager.service.JobManagerUtil;\n+import com.netflix.titus.master.mesos.kubeapiserver.direct.DirectKubeConfiguration;\n+import com.netflix.titus.master.service.management.ApplicationSlaManagementService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class CapacityGroupPodResourcePoolResolver implements PodResourcePoolResolver {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(CapacityGroupPodResourcePoolResolver.class);\n+\n+    private final DirectKubeConfiguration configuration;\n+    private final Config config;\n+    private final ApplicationSlaManagementService capacityGroupService;\n+    private final TitusRuntime titusRuntime;\n+\n+    private final Lock lock = new ReentrantLock();\n+    private volatile List<Pair<String, Pattern>> resourcePoolToCapacityGroupMappers;\n+    private volatile long lastUpdate;\n+\n+    public CapacityGroupPodResourcePoolResolver(DirectKubeConfiguration configuration,\n+                                                Config config,\n+                                                ApplicationSlaManagementService capacityGroupService,\n+                                                TitusRuntime titusRuntime) {\n+        this.configuration = configuration;\n+        this.config = config;\n+        this.capacityGroupService = capacityGroupService;\n+        this.titusRuntime = titusRuntime;\n+        refreshResourcePoolToCapacityGroupMappers();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU4Njc4NQ=="}, "originalCommit": {"oid": "c331e8069ddd64803228a09639611afede4767d2"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MTg0MTM4OnYy", "diffSide": "RIGHT", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeModule.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNzo0MzoyNVrOHIazGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxODowOToxMlrOHIbrUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU4OTcyMw==", "bodyText": "minor: consider adding a GpuResourcePoolResolver into the chain to automatically assign jobs requesting GPUs to RESOURCE_POOL_GPU_PREFIX pools", "url": "https://github.com/Netflix/titus-control-plane/pull/904#discussion_r478589723", "createdAt": "2020-08-27T17:43:25Z", "author": {"login": "fabiokung"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeModule.java", "diffHunk": "@@ -77,6 +87,24 @@ public FixedIntervalTokenBucketConfiguration getGcUnknownPodsTokenBucketConfigur\n         return factory.newProxy(FixedIntervalTokenBucketConfiguration.class, \"titusMaster.kube.gcUnknownPodsTokenBucket\");\n     }\n \n+    @Provides\n+    @Singleton\n+    public PodResourcePoolResolver getPodResourcePoolResolver(DirectKubeConfiguration configuration,\n+                                                              Config config,\n+                                                              ApplicationSlaManagementService capacityGroupService,\n+                                                              TitusRuntime titusRuntime) {\n+        return new PodResourcePoolResolverChain(Arrays.asList(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c331e8069ddd64803228a09639611afede4767d2"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYwNDExNQ==", "bodyText": "I have intentionally left GPU out of the picture for now. The way we handle them is complicated, and I want to address it in a separate PR.", "url": "https://github.com/Netflix/titus-control-plane/pull/904#discussion_r478604115", "createdAt": "2020-08-27T18:09:12Z", "author": {"login": "tbak"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeModule.java", "diffHunk": "@@ -77,6 +87,24 @@ public FixedIntervalTokenBucketConfiguration getGcUnknownPodsTokenBucketConfigur\n         return factory.newProxy(FixedIntervalTokenBucketConfiguration.class, \"titusMaster.kube.gcUnknownPodsTokenBucket\");\n     }\n \n+    @Provides\n+    @Singleton\n+    public PodResourcePoolResolver getPodResourcePoolResolver(DirectKubeConfiguration configuration,\n+                                                              Config config,\n+                                                              ApplicationSlaManagementService capacityGroupService,\n+                                                              TitusRuntime titusRuntime) {\n+        return new PodResourcePoolResolverChain(Arrays.asList(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU4OTcyMw=="}, "originalCommit": {"oid": "c331e8069ddd64803228a09639611afede4767d2"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MTg0OTI5OnYy", "diffSide": "LEFT", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/taint/DefaultTaintTolerationFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNzo0NTozN1rOHIa4Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxODoxNTowMFrOHIb3zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU5MTAwMw==", "bodyText": "is this backwards compatible? I think we may need to keep double writing for now until all other components are aligned", "url": "https://github.com/Netflix/titus-control-plane/pull/904#discussion_r478591003", "createdAt": "2020-08-27T17:45:37Z", "author": {"login": "fabiokung"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/taint/DefaultTaintTolerationFactory.java", "diffHunk": "@@ -56,23 +49,13 @@ public DefaultTaintTolerationFactory(DirectKubeConfiguration configuration,\n         tolerations.add(Tolerations.TOLERATION_VIRTUAL_KUBLET);\n         tolerations.add(Tolerations.TOLERATION_KUBE_SCHEDULER);\n \n-        tolerations.add(resolveTierToleration(job));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c331e8069ddd64803228a09639611afede4767d2"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYwNzMwOA==", "bodyText": "I think you are right. It would be too risky to assume we can make all updates in one shot.", "url": "https://github.com/Netflix/titus-control-plane/pull/904#discussion_r478607308", "createdAt": "2020-08-27T18:15:00Z", "author": {"login": "tbak"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/taint/DefaultTaintTolerationFactory.java", "diffHunk": "@@ -56,23 +49,13 @@ public DefaultTaintTolerationFactory(DirectKubeConfiguration configuration,\n         tolerations.add(Tolerations.TOLERATION_VIRTUAL_KUBLET);\n         tolerations.add(Tolerations.TOLERATION_KUBE_SCHEDULER);\n \n-        tolerations.add(resolveTierToleration(job));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU5MTAwMw=="}, "originalCommit": {"oid": "c331e8069ddd64803228a09639611afede4767d2"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4018, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}