{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxNTUxMzM3", "number": 850, "title": "Feature/kube informer sync", "bodyText": "This PR adds a new metric to track an informer (pod, node, etc) sync status.", "createdAt": "2020-05-21T19:58:07Z", "url": "https://github.com/Netflix/titus-control-plane/pull/850", "merged": true, "mergeCommit": {"oid": "5abbf67fd2c7543dcae9e13faed02d072a86a63b"}, "closed": true, "closedAt": "2020-05-26T17:52:42Z", "author": {"login": "tbak"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjh5xWAH2gAyNDIxNTUxMzM3OmE2NDJmOTQ5N2JjMWM4YjkyYTZiMzkwOTNkOTIwMmI4NDQzYWY1MWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclIIyRgFqTQxODUyMjA3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a642f9497bc1c8b92a6b39093d9202b8443af51e", "author": {"user": {"login": "tbak", "name": null}}, "url": "https://github.com/Netflix/titus-control-plane/commit/a642f9497bc1c8b92a6b39093d9202b8443af51e", "committedDate": "2020-05-21T18:23:24Z", "message": "Move KubeApiClients to its own package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "400aa55ac44f367de3f2d364c58354d8ae147f7a", "author": {"user": {"login": "tbak", "name": null}}, "url": "https://github.com/Netflix/titus-control-plane/commit/400aa55ac44f367de3f2d364c58354d8ae147f7a", "committedDate": "2020-05-21T19:55:20Z", "message": "Add KubeAPI informer sync metric"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NTI4MzQ0", "url": "https://github.com/Netflix/titus-control-plane/pull/850#pullrequestreview-416528344", "createdAt": "2020-05-21T22:11:40Z", "commit": {"oid": "400aa55ac44f367de3f2d364c58354d8ae147f7a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NTU4MzA5", "url": "https://github.com/Netflix/titus-control-plane/pull/850#pullrequestreview-416558309", "createdAt": "2020-05-21T23:30:35Z", "commit": {"oid": "400aa55ac44f367de3f2d364c58354d8ae147f7a"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMzozMDozNVrOGZGIpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMzozMDozNVrOGZGIpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk2ODEwMw==", "bodyText": "use ExecutorsExt.instrumentedCachedThreadPool(...) to get thread pool metrics", "url": "https://github.com/Netflix/titus-control-plane/pull/850#discussion_r428968103", "createdAt": "2020-05-21T23:30:35Z", "author": {"login": "fabiokung"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/client/KubeApiClients.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.master.mesos.kubeapiserver.client;\n+\n+import java.io.IOException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.base.Strings;\n+import com.netflix.titus.common.runtime.TitusRuntime;\n+import io.kubernetes.client.informer.SharedInformerFactory;\n+import io.kubernetes.client.openapi.ApiClient;\n+import io.kubernetes.client.util.Config;\n+import okhttp3.Request;\n+\n+public class KubeApiClients {\n+\n+    public static final Pattern UUID_PATTERN = Pattern.compile(\"[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\");\n+\n+    public static final Function<Request, String> DEFAULT_URI_MAPPER = r -> {\n+        String path = '/' + String.join(\"/\", r.url().pathSegments());\n+        Matcher matcher = UUID_PATTERN.matcher(path);\n+        return matcher.replaceAll(\"\");\n+    };\n+\n+    public static ApiClient createApiClient(String kubeApiServerUrl,\n+                                            String kubeConfigPath,\n+                                            String metricsNamePrefix,\n+                                            TitusRuntime titusRuntime,\n+                                            long readTimeoutMs) {\n+        return createApiClient(kubeApiServerUrl, kubeConfigPath, metricsNamePrefix, titusRuntime, DEFAULT_URI_MAPPER, readTimeoutMs);\n+    }\n+\n+    public static ApiClient createApiClient(String kubeApiServerUrl,\n+                                            String kubeConfigPath,\n+                                            String metricsNamePrefix,\n+                                            TitusRuntime titusRuntime,\n+                                            Function<Request, String> uriMapper,\n+                                            long readTimeoutMs) {\n+        OkHttpMetricsInterceptor metricsInterceptor = new OkHttpMetricsInterceptor(metricsNamePrefix, titusRuntime.getRegistry(),\n+                titusRuntime.getClock(), uriMapper);\n+\n+        ApiClient client;\n+        if (Strings.isNullOrEmpty(kubeApiServerUrl)) {\n+            try {\n+                client = Config.fromConfig(kubeConfigPath);\n+            } catch (IOException e) {\n+                throw new RuntimeException(e);\n+            }\n+        } else {\n+            client = Config.fromUrl(kubeApiServerUrl);\n+        }\n+\n+        client.setHttpClient(\n+                client.getHttpClient().newBuilder()\n+                        .addInterceptor(metricsInterceptor)\n+                        .readTimeout(readTimeoutMs, TimeUnit.SECONDS)\n+                        .build()\n+        );\n+        return client;\n+    }\n+\n+    public static SharedInformerFactory createSharedInformerFactory(String threadNamePrefix, ApiClient apiClient) {\n+        AtomicLong nextThreadNum = new AtomicLong(0);\n+        return new SharedInformerFactory(apiClient, Executors.newCachedThreadPool(runnable -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "400aa55ac44f367de3f2d364c58354d8ae147f7a"}, "originalPosition": 83}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cddc2a106fa9f4d7874abf5099567a0f5ced17e", "author": {"user": {"login": "tbak", "name": null}}, "url": "https://github.com/Netflix/titus-control-plane/commit/7cddc2a106fa9f4d7874abf5099567a0f5ced17e", "committedDate": "2020-05-26T17:18:11Z", "message": "Code review updates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NTIyMDc2", "url": "https://github.com/Netflix/titus-control-plane/pull/850#pullrequestreview-418522076", "createdAt": "2020-05-26T17:30:08Z", "commit": {"oid": "7cddc2a106fa9f4d7874abf5099567a0f5ced17e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 522, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}