{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNDg1NTA5", "number": 796, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjozOToxNVrODkVoog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDo1MDozMVrODkaxtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDI5Nzk0OnYy", "diffSide": "RIGHT", "path": "titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjozOToxNVrOFwmn3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDozMzoxN1rOFwuRaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwODc2Nw==", "bodyText": "Is it ok to create many of those during initialization if there are concurrent calls?", "url": "https://github.com/Netflix/titus-control-plane/pull/796#discussion_r386508767", "createdAt": "2020-03-02T16:39:15Z", "author": {"login": "tbak"}, "path": "titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.netflix.titus.ext.aws;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import com.amazonaws.arn.Arn;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n+import com.amazonaws.services.elasticloadbalancingv2.AmazonElasticLoadBalancingAsync;\n+import com.amazonaws.services.elasticloadbalancingv2.AmazonElasticLoadBalancingAsyncClientBuilder;\n+import com.amazonaws.services.securitytoken.AWSSecurityTokenServiceAsync;\n+\n+@Singleton\n+public class AmazonClientProvider {\n+\n+    private final AwsConfiguration configuration;\n+    private final AWSSecurityTokenServiceAsync stsClient;\n+\n+    private ConcurrentMap<String, AWSCredentialsProvider> awsCredentialsByAccountId = new ConcurrentHashMap<>();\n+    private ConcurrentMap<String, AmazonElasticLoadBalancingAsync> loadBalancerClients = new ConcurrentHashMap<>();\n+\n+    @Inject\n+    public AmazonClientProvider(AwsConfiguration configuration,\n+                                AWSSecurityTokenServiceAsync stsClient) {\n+        this.configuration = configuration;\n+        this.stsClient = stsClient;\n+    }\n+\n+    public AmazonElasticLoadBalancingAsync getLoadBalancingClient(String accountId) {\n+        return loadBalancerClients.computeIfAbsent(accountId, id -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8ada91d64cf552f454d1116c70a1e29d5dd58a8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5MjQzMA==", "bodyText": "\ud83d\udc4d probably not a huge deal, it might just increase the number of thread (pools) and connections during initialization a bit, but I agree it would be probably better to do a simple double-checked lock of the whole thing here and serialize calls", "url": "https://github.com/Netflix/titus-control-plane/pull/796#discussion_r386592430", "createdAt": "2020-03-02T19:11:25Z", "author": {"login": "fabiokung"}, "path": "titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.netflix.titus.ext.aws;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import com.amazonaws.arn.Arn;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n+import com.amazonaws.services.elasticloadbalancingv2.AmazonElasticLoadBalancingAsync;\n+import com.amazonaws.services.elasticloadbalancingv2.AmazonElasticLoadBalancingAsyncClientBuilder;\n+import com.amazonaws.services.securitytoken.AWSSecurityTokenServiceAsync;\n+\n+@Singleton\n+public class AmazonClientProvider {\n+\n+    private final AwsConfiguration configuration;\n+    private final AWSSecurityTokenServiceAsync stsClient;\n+\n+    private ConcurrentMap<String, AWSCredentialsProvider> awsCredentialsByAccountId = new ConcurrentHashMap<>();\n+    private ConcurrentMap<String, AmazonElasticLoadBalancingAsync> loadBalancerClients = new ConcurrentHashMap<>();\n+\n+    @Inject\n+    public AmazonClientProvider(AwsConfiguration configuration,\n+                                AWSSecurityTokenServiceAsync stsClient) {\n+        this.configuration = configuration;\n+        this.stsClient = stsClient;\n+    }\n+\n+    public AmazonElasticLoadBalancingAsync getLoadBalancingClient(String accountId) {\n+        return loadBalancerClients.computeIfAbsent(accountId, id -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwODc2Nw=="}, "originalCommit": {"oid": "c8ada91d64cf552f454d1116c70a1e29d5dd58a8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzNDA4OQ==", "bodyText": "Fixed", "url": "https://github.com/Netflix/titus-control-plane/pull/796#discussion_r386634089", "createdAt": "2020-03-02T20:33:17Z", "author": {"login": "corindwyer"}, "path": "titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.netflix.titus.ext.aws;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import com.amazonaws.arn.Arn;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n+import com.amazonaws.services.elasticloadbalancingv2.AmazonElasticLoadBalancingAsync;\n+import com.amazonaws.services.elasticloadbalancingv2.AmazonElasticLoadBalancingAsyncClientBuilder;\n+import com.amazonaws.services.securitytoken.AWSSecurityTokenServiceAsync;\n+\n+@Singleton\n+public class AmazonClientProvider {\n+\n+    private final AwsConfiguration configuration;\n+    private final AWSSecurityTokenServiceAsync stsClient;\n+\n+    private ConcurrentMap<String, AWSCredentialsProvider> awsCredentialsByAccountId = new ConcurrentHashMap<>();\n+    private ConcurrentMap<String, AmazonElasticLoadBalancingAsync> loadBalancerClients = new ConcurrentHashMap<>();\n+\n+    @Inject\n+    public AmazonClientProvider(AwsConfiguration configuration,\n+                                AWSSecurityTokenServiceAsync stsClient) {\n+        this.configuration = configuration;\n+        this.stsClient = stsClient;\n+    }\n+\n+    public AmazonElasticLoadBalancingAsync getLoadBalancingClient(String accountId) {\n+        return loadBalancerClients.computeIfAbsent(accountId, id -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwODc2Nw=="}, "originalCommit": {"oid": "c8ada91d64cf552f454d1116c70a1e29d5dd58a8"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDMwMjg2OnYy", "diffSide": "RIGHT", "path": "titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/loadbalancer/AwsLoadBalancerConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjo0MDoyNFrOFwmqtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOToxNDoyMlrOFwr1mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwOTQ5Mg==", "bodyText": "Is it an invariant that account id is always set in the load balancer id?", "url": "https://github.com/Netflix/titus-control-plane/pull/796#discussion_r386509492", "createdAt": "2020-03-02T16:40:24Z", "author": {"login": "tbak"}, "path": "titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/loadbalancer/AwsLoadBalancerConnector.java", "diffHunk": "@@ -173,14 +175,19 @@ public Completable isValid(String loadBalancerId) {\n                     Set<String> ips = result.getTargetHealthDescriptions().stream()\n                             .map(description -> description.getTarget().getId())\n                             .collect(Collectors.toSet());\n-                    return new LoadBalancer(id, LoadBalancer.State.ACTIVE, ips);\n+                    return new LoadBalancer(loadBalancerId, LoadBalancer.State.ACTIVE, ips);\n                 })\n                 .onErrorResumeNext(throwable -> {\n                     connectorMetrics.failure(AwsLoadBalancerConnectorMetrics.AwsLoadBalancerMethods.DescribeTargetHealth, throwable, startTime);\n                     if (throwable instanceof TargetGroupNotFoundException) {\n-                        return Single.just(new LoadBalancer(id, LoadBalancer.State.REMOVED, Collections.emptySet()));\n+                        return Single.just(new LoadBalancer(loadBalancerId, LoadBalancer.State.REMOVED, Collections.emptySet()));\n                     }\n                     return Single.error(throwable);\n                 });\n     }\n+\n+    private AmazonElasticLoadBalancingAsync getClient(String loadBalancerId) {\n+        Arn arn = Arn.fromString(loadBalancerId);\n+        return clientProvider.getLoadBalancingClient(arn.getAccountId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8ada91d64cf552f454d1116c70a1e29d5dd58a8"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5NDIwMA==", "bodyText": "yes, a valid ARN must always contain the accountId and Arn.fromString(loadBalancerId) does the validation.", "url": "https://github.com/Netflix/titus-control-plane/pull/796#discussion_r386594200", "createdAt": "2020-03-02T19:14:22Z", "author": {"login": "corindwyer"}, "path": "titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/loadbalancer/AwsLoadBalancerConnector.java", "diffHunk": "@@ -173,14 +175,19 @@ public Completable isValid(String loadBalancerId) {\n                     Set<String> ips = result.getTargetHealthDescriptions().stream()\n                             .map(description -> description.getTarget().getId())\n                             .collect(Collectors.toSet());\n-                    return new LoadBalancer(id, LoadBalancer.State.ACTIVE, ips);\n+                    return new LoadBalancer(loadBalancerId, LoadBalancer.State.ACTIVE, ips);\n                 })\n                 .onErrorResumeNext(throwable -> {\n                     connectorMetrics.failure(AwsLoadBalancerConnectorMetrics.AwsLoadBalancerMethods.DescribeTargetHealth, throwable, startTime);\n                     if (throwable instanceof TargetGroupNotFoundException) {\n-                        return Single.just(new LoadBalancer(id, LoadBalancer.State.REMOVED, Collections.emptySet()));\n+                        return Single.just(new LoadBalancer(loadBalancerId, LoadBalancer.State.REMOVED, Collections.emptySet()));\n                     }\n                     return Single.error(throwable);\n                 });\n     }\n+\n+    private AmazonElasticLoadBalancingAsync getClient(String loadBalancerId) {\n+        Arn arn = Arn.fromString(loadBalancerId);\n+        return clientProvider.getLoadBalancingClient(arn.getAccountId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwOTQ5Mg=="}, "originalCommit": {"oid": "c8ada91d64cf552f454d1116c70a1e29d5dd58a8"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDM2ODQ1OnYy", "diffSide": "RIGHT", "path": "titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjo1Njo0MlrOFwnSog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzowMDo0N1rOFwndEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUxOTcxNA==", "bodyText": "Looks like we are using string representation arn.toString() returned by this function. Do we need to build Arn object or would we rather build a string and return just that?", "url": "https://github.com/Netflix/titus-control-plane/pull/796#discussion_r386519714", "createdAt": "2020-03-02T16:56:42Z", "author": {"login": "joshi-keyur"}, "path": "titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.netflix.titus.ext.aws;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import com.amazonaws.arn.Arn;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n+import com.amazonaws.services.elasticloadbalancingv2.AmazonElasticLoadBalancingAsync;\n+import com.amazonaws.services.elasticloadbalancingv2.AmazonElasticLoadBalancingAsyncClientBuilder;\n+import com.amazonaws.services.securitytoken.AWSSecurityTokenServiceAsync;\n+\n+@Singleton\n+public class AmazonClientProvider {\n+\n+    private final AwsConfiguration configuration;\n+    private final AWSSecurityTokenServiceAsync stsClient;\n+\n+    private ConcurrentMap<String, AWSCredentialsProvider> awsCredentialsByAccountId = new ConcurrentHashMap<>();\n+    private ConcurrentMap<String, AmazonElasticLoadBalancingAsync> loadBalancerClients = new ConcurrentHashMap<>();\n+\n+    @Inject\n+    public AmazonClientProvider(AwsConfiguration configuration,\n+                                AWSSecurityTokenServiceAsync stsClient) {\n+        this.configuration = configuration;\n+        this.stsClient = stsClient;\n+    }\n+\n+    public AmazonElasticLoadBalancingAsync getLoadBalancingClient(String accountId) {\n+        return loadBalancerClients.computeIfAbsent(accountId, id -> {\n+            String region = configuration.getRegion().trim().toLowerCase();\n+            AWSCredentialsProvider credentialsProvider = getAwsCredentialsProvider(id);\n+            return AmazonElasticLoadBalancingAsyncClientBuilder.standard()\n+                    .withCredentials(credentialsProvider)\n+                    .withRegion(region)\n+                    .build();\n+        });\n+    }\n+\n+    private AWSCredentialsProvider getAwsCredentialsProvider(String accountId) {\n+        return awsCredentialsByAccountId.computeIfAbsent(accountId, id -> {\n+            String roleSessionName = configuration.getControlPlaneRoleSessionName();\n+            int roleSessionDurationSeconds = configuration.getControlPlaneRoleSessionDurationSeconds();\n+            Arn roleArn = getControlPlaneRoleArnForAccount(id);\n+\n+            return new STSAssumeRoleSessionCredentialsProvider.Builder(roleArn.toString(), roleSessionName)\n+                    .withStsClient(stsClient)\n+                    .withRoleSessionDurationSeconds(roleSessionDurationSeconds)\n+                    .build();\n+        });\n+    }\n+\n+    private Arn getControlPlaneRoleArnForAccount(String accountId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8ada91d64cf552f454d1116c70a1e29d5dd58a8"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyMjM4NA==", "bodyText": "I am using the ARN builder in order for it to provide validations and guarantee what is outputted is a valid ARN.", "url": "https://github.com/Netflix/titus-control-plane/pull/796#discussion_r386522384", "createdAt": "2020-03-02T17:00:47Z", "author": {"login": "corindwyer"}, "path": "titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.netflix.titus.ext.aws;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import com.amazonaws.arn.Arn;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n+import com.amazonaws.services.elasticloadbalancingv2.AmazonElasticLoadBalancingAsync;\n+import com.amazonaws.services.elasticloadbalancingv2.AmazonElasticLoadBalancingAsyncClientBuilder;\n+import com.amazonaws.services.securitytoken.AWSSecurityTokenServiceAsync;\n+\n+@Singleton\n+public class AmazonClientProvider {\n+\n+    private final AwsConfiguration configuration;\n+    private final AWSSecurityTokenServiceAsync stsClient;\n+\n+    private ConcurrentMap<String, AWSCredentialsProvider> awsCredentialsByAccountId = new ConcurrentHashMap<>();\n+    private ConcurrentMap<String, AmazonElasticLoadBalancingAsync> loadBalancerClients = new ConcurrentHashMap<>();\n+\n+    @Inject\n+    public AmazonClientProvider(AwsConfiguration configuration,\n+                                AWSSecurityTokenServiceAsync stsClient) {\n+        this.configuration = configuration;\n+        this.stsClient = stsClient;\n+    }\n+\n+    public AmazonElasticLoadBalancingAsync getLoadBalancingClient(String accountId) {\n+        return loadBalancerClients.computeIfAbsent(accountId, id -> {\n+            String region = configuration.getRegion().trim().toLowerCase();\n+            AWSCredentialsProvider credentialsProvider = getAwsCredentialsProvider(id);\n+            return AmazonElasticLoadBalancingAsyncClientBuilder.standard()\n+                    .withCredentials(credentialsProvider)\n+                    .withRegion(region)\n+                    .build();\n+        });\n+    }\n+\n+    private AWSCredentialsProvider getAwsCredentialsProvider(String accountId) {\n+        return awsCredentialsByAccountId.computeIfAbsent(accountId, id -> {\n+            String roleSessionName = configuration.getControlPlaneRoleSessionName();\n+            int roleSessionDurationSeconds = configuration.getControlPlaneRoleSessionDurationSeconds();\n+            Arn roleArn = getControlPlaneRoleArnForAccount(id);\n+\n+            return new STSAssumeRoleSessionCredentialsProvider.Builder(roleArn.toString(), roleSessionName)\n+                    .withStsClient(stsClient)\n+                    .withRoleSessionDurationSeconds(roleSessionDurationSeconds)\n+                    .build();\n+        });\n+    }\n+\n+    private Arn getControlPlaneRoleArnForAccount(String accountId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUxOTcxNA=="}, "originalCommit": {"oid": "c8ada91d64cf552f454d1116c70a1e29d5dd58a8"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDg2MzQ2OnYy", "diffSide": "RIGHT", "path": "titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOToyMTozN1rOFwsFEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDozMjo1MVrOFwuQng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5ODE2MA==", "bodyText": "How do we make sure the credentials provider in the Map is still valid and has not expired the session duration when first constructed?", "url": "https://github.com/Netflix/titus-control-plane/pull/796#discussion_r386598160", "createdAt": "2020-03-02T19:21:37Z", "author": {"login": "joshi-keyur"}, "path": "titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.netflix.titus.ext.aws;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import com.amazonaws.arn.Arn;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n+import com.amazonaws.services.elasticloadbalancingv2.AmazonElasticLoadBalancingAsync;\n+import com.amazonaws.services.elasticloadbalancingv2.AmazonElasticLoadBalancingAsyncClientBuilder;\n+import com.amazonaws.services.securitytoken.AWSSecurityTokenServiceAsync;\n+\n+@Singleton\n+public class AmazonClientProvider {\n+\n+    private final AwsConfiguration configuration;\n+    private final AWSSecurityTokenServiceAsync stsClient;\n+\n+    private ConcurrentMap<String, AWSCredentialsProvider> awsCredentialsByAccountId = new ConcurrentHashMap<>();\n+    private ConcurrentMap<String, AmazonElasticLoadBalancingAsync> loadBalancerClients = new ConcurrentHashMap<>();\n+\n+    @Inject\n+    public AmazonClientProvider(AwsConfiguration configuration,\n+                                AWSSecurityTokenServiceAsync stsClient) {\n+        this.configuration = configuration;\n+        this.stsClient = stsClient;\n+    }\n+\n+    public AmazonElasticLoadBalancingAsync getLoadBalancingClient(String accountId) {\n+        return loadBalancerClients.computeIfAbsent(accountId, id -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8ada91d64cf552f454d1116c70a1e29d5dd58a8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzMzg4Ng==", "bodyText": "The STSAssumeRoleSessionCredentialsProvider has a background thread that does the automatic refreshing.", "url": "https://github.com/Netflix/titus-control-plane/pull/796#discussion_r386633886", "createdAt": "2020-03-02T20:32:51Z", "author": {"login": "corindwyer"}, "path": "titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.netflix.titus.ext.aws;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import com.amazonaws.arn.Arn;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n+import com.amazonaws.services.elasticloadbalancingv2.AmazonElasticLoadBalancingAsync;\n+import com.amazonaws.services.elasticloadbalancingv2.AmazonElasticLoadBalancingAsyncClientBuilder;\n+import com.amazonaws.services.securitytoken.AWSSecurityTokenServiceAsync;\n+\n+@Singleton\n+public class AmazonClientProvider {\n+\n+    private final AwsConfiguration configuration;\n+    private final AWSSecurityTokenServiceAsync stsClient;\n+\n+    private ConcurrentMap<String, AWSCredentialsProvider> awsCredentialsByAccountId = new ConcurrentHashMap<>();\n+    private ConcurrentMap<String, AmazonElasticLoadBalancingAsync> loadBalancerClients = new ConcurrentHashMap<>();\n+\n+    @Inject\n+    public AmazonClientProvider(AwsConfiguration configuration,\n+                                AWSSecurityTokenServiceAsync stsClient) {\n+        this.configuration = configuration;\n+        this.stsClient = stsClient;\n+    }\n+\n+    public AmazonElasticLoadBalancingAsync getLoadBalancingClient(String accountId) {\n+        return loadBalancerClients.computeIfAbsent(accountId, id -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5ODE2MA=="}, "originalCommit": {"oid": "c8ada91d64cf552f454d1116c70a1e29d5dd58a8"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTEzODgyOnYy", "diffSide": "RIGHT", "path": "titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDo0OTo1OVrOFwuwFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDo1Mzo0N1rOFwu3jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0MTk0Mw==", "bodyText": "minor: sinchronize on an instance level mutex just to avoid issues when this class is not being used as a singleton (e.g.: tests)", "url": "https://github.com/Netflix/titus-control-plane/pull/796#discussion_r386641943", "createdAt": "2020-03-02T20:49:59Z", "author": {"login": "fabiokung"}, "path": "titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java", "diffHunk": "@@ -29,27 +29,43 @@ public AmazonClientProvider(AwsConfiguration configuration,\n     }\n \n     public AmazonElasticLoadBalancingAsync getLoadBalancingClient(String accountId) {\n-        return loadBalancerClients.computeIfAbsent(accountId, id -> {\n-            String region = configuration.getRegion().trim().toLowerCase();\n-            AWSCredentialsProvider credentialsProvider = getAwsCredentialsProvider(id);\n-            return AmazonElasticLoadBalancingAsyncClientBuilder.standard()\n-                    .withCredentials(credentialsProvider)\n-                    .withRegion(region)\n-                    .build();\n-        });\n+        AmazonElasticLoadBalancingAsync client = loadBalancerClients.get(accountId);\n+        if (client == null) {\n+            synchronized (AmazonClientProvider.class) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30c6b707dc58633bef7f543c1cccf19c60ff0d73"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0Mzg1Mg==", "bodyText": "Fixed", "url": "https://github.com/Netflix/titus-control-plane/pull/796#discussion_r386643852", "createdAt": "2020-03-02T20:53:47Z", "author": {"login": "corindwyer"}, "path": "titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java", "diffHunk": "@@ -29,27 +29,43 @@ public AmazonClientProvider(AwsConfiguration configuration,\n     }\n \n     public AmazonElasticLoadBalancingAsync getLoadBalancingClient(String accountId) {\n-        return loadBalancerClients.computeIfAbsent(accountId, id -> {\n-            String region = configuration.getRegion().trim().toLowerCase();\n-            AWSCredentialsProvider credentialsProvider = getAwsCredentialsProvider(id);\n-            return AmazonElasticLoadBalancingAsyncClientBuilder.standard()\n-                    .withCredentials(credentialsProvider)\n-                    .withRegion(region)\n-                    .build();\n-        });\n+        AmazonElasticLoadBalancingAsync client = loadBalancerClients.get(accountId);\n+        if (client == null) {\n+            synchronized (AmazonClientProvider.class) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0MTk0Mw=="}, "originalCommit": {"oid": "30c6b707dc58633bef7f543c1cccf19c60ff0d73"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTE0MDM4OnYy", "diffSide": "RIGHT", "path": "titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDo1MDozMVrOFwuxGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDo1Mzo1MFrOFwu3qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0MjIwMg==", "bodyText": "same as above", "url": "https://github.com/Netflix/titus-control-plane/pull/796#discussion_r386642202", "createdAt": "2020-03-02T20:50:31Z", "author": {"login": "fabiokung"}, "path": "titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java", "diffHunk": "@@ -29,27 +29,43 @@ public AmazonClientProvider(AwsConfiguration configuration,\n     }\n \n     public AmazonElasticLoadBalancingAsync getLoadBalancingClient(String accountId) {\n-        return loadBalancerClients.computeIfAbsent(accountId, id -> {\n-            String region = configuration.getRegion().trim().toLowerCase();\n-            AWSCredentialsProvider credentialsProvider = getAwsCredentialsProvider(id);\n-            return AmazonElasticLoadBalancingAsyncClientBuilder.standard()\n-                    .withCredentials(credentialsProvider)\n-                    .withRegion(region)\n-                    .build();\n-        });\n+        AmazonElasticLoadBalancingAsync client = loadBalancerClients.get(accountId);\n+        if (client == null) {\n+            synchronized (AmazonClientProvider.class) {\n+                client = loadBalancerClients.get(accountId);\n+                if (client == null) {\n+                    String region = configuration.getRegion().trim().toLowerCase();\n+                    AWSCredentialsProvider credentialsProvider = getAwsCredentialsProvider(accountId);\n+                    client = AmazonElasticLoadBalancingAsyncClientBuilder.standard()\n+                            .withCredentials(credentialsProvider)\n+                            .withRegion(region)\n+                            .build();\n+                    loadBalancerClients.put(accountId, client);\n+                }\n+            }\n+        }\n+        return client;\n     }\n \n     private AWSCredentialsProvider getAwsCredentialsProvider(String accountId) {\n-        return awsCredentialsByAccountId.computeIfAbsent(accountId, id -> {\n-            String roleSessionName = configuration.getControlPlaneRoleSessionName();\n-            int roleSessionDurationSeconds = configuration.getControlPlaneRoleSessionDurationSeconds();\n-            Arn roleArn = getControlPlaneRoleArnForAccount(id);\n+        AWSCredentialsProvider credentialsProvider = awsCredentialsByAccountId.get(accountId);\n+        if (credentialsProvider == null) {\n+            synchronized (AmazonClientProvider.class) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30c6b707dc58633bef7f543c1cccf19c60ff0d73"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0Mzg4MA==", "bodyText": "Fixed", "url": "https://github.com/Netflix/titus-control-plane/pull/796#discussion_r386643880", "createdAt": "2020-03-02T20:53:50Z", "author": {"login": "corindwyer"}, "path": "titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java", "diffHunk": "@@ -29,27 +29,43 @@ public AmazonClientProvider(AwsConfiguration configuration,\n     }\n \n     public AmazonElasticLoadBalancingAsync getLoadBalancingClient(String accountId) {\n-        return loadBalancerClients.computeIfAbsent(accountId, id -> {\n-            String region = configuration.getRegion().trim().toLowerCase();\n-            AWSCredentialsProvider credentialsProvider = getAwsCredentialsProvider(id);\n-            return AmazonElasticLoadBalancingAsyncClientBuilder.standard()\n-                    .withCredentials(credentialsProvider)\n-                    .withRegion(region)\n-                    .build();\n-        });\n+        AmazonElasticLoadBalancingAsync client = loadBalancerClients.get(accountId);\n+        if (client == null) {\n+            synchronized (AmazonClientProvider.class) {\n+                client = loadBalancerClients.get(accountId);\n+                if (client == null) {\n+                    String region = configuration.getRegion().trim().toLowerCase();\n+                    AWSCredentialsProvider credentialsProvider = getAwsCredentialsProvider(accountId);\n+                    client = AmazonElasticLoadBalancingAsyncClientBuilder.standard()\n+                            .withCredentials(credentialsProvider)\n+                            .withRegion(region)\n+                            .build();\n+                    loadBalancerClients.put(accountId, client);\n+                }\n+            }\n+        }\n+        return client;\n     }\n \n     private AWSCredentialsProvider getAwsCredentialsProvider(String accountId) {\n-        return awsCredentialsByAccountId.computeIfAbsent(accountId, id -> {\n-            String roleSessionName = configuration.getControlPlaneRoleSessionName();\n-            int roleSessionDurationSeconds = configuration.getControlPlaneRoleSessionDurationSeconds();\n-            Arn roleArn = getControlPlaneRoleArnForAccount(id);\n+        AWSCredentialsProvider credentialsProvider = awsCredentialsByAccountId.get(accountId);\n+        if (credentialsProvider == null) {\n+            synchronized (AmazonClientProvider.class) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0MjIwMg=="}, "originalCommit": {"oid": "30c6b707dc58633bef7f543c1cccf19c60ff0d73"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4082, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}