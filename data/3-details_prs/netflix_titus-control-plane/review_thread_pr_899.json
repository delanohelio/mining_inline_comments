{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxMTEyNTgz", "number": 899, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOTowNjo1OVrOEaqwrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOTowNjo1OVrOEaqwrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Mzk5MDIxOnYy", "diffSide": "RIGHT", "path": "titus-common-ext/kube/src/main/java/com/netflix/titus/ext/kube/clustermembership/connector/KubeClientComponent.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOTowNjo1OVrOHEPYbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOToxMzoyM1rOHEPkrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIwODM2Ng==", "bodyText": "It seems like the timeouts could be part of KubeConnectorConfiguration.", "url": "https://github.com/Netflix/titus-control-plane/pull/899#discussion_r474208366", "createdAt": "2020-08-20T19:06:59Z", "author": {"login": "amit-git"}, "path": "titus-common-ext/kube/src/main/java/com/netflix/titus/ext/kube/clustermembership/connector/KubeClientComponent.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.ext.kube.clustermembership.connector;\n+\n+import java.io.IOException;\n+\n+import com.google.common.base.Preconditions;\n+import com.netflix.titus.common.util.StringExt;\n+import io.kubernetes.client.openapi.ApiClient;\n+import io.kubernetes.client.util.Config;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @deprecated {@link ApiClient} should be provided independently of the cluster membership component.\n+ */\n+@Component\n+public class KubeClientComponent {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KubeClientComponent.class);\n+\n+    @Bean\n+    public ApiClient getApiClient(KubeClusterMembershipConfiguration configuration) {\n+        String kubeApiServerUri = StringExt.safeTrim(configuration.getKubeApiServerUri());\n+        String kubeConfigPath = StringExt.safeTrim(configuration.getKubeConfigPath());\n+\n+        Preconditions.checkState(!kubeApiServerUri.isEmpty() || !kubeConfigPath.isEmpty(),\n+                \"Kubernetes address not set\"\n+        );\n+\n+        ApiClient client;\n+        if (kubeApiServerUri.isEmpty()) {\n+            try {\n+                logger.info(\"Initializing Kube ApiClient from config file: {}\", kubeConfigPath);\n+                client = Config.fromConfig(kubeConfigPath);\n+            } catch (IOException e) {\n+                throw new RuntimeException(e);\n+            }\n+        } else {\n+            logger.info(\"Initializing Kube ApiClient with URI: {}\", kubeApiServerUri);\n+            client = Config.fromUrl(kubeApiServerUri);\n+        }\n+\n+        client.setReadTimeout(0); // infinite timeout", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc768a1d0bc8cc4a3a8b74f37cc160cac54fddca"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIxMTUwMA==", "bodyText": "This class is deprecated and should not be used.", "url": "https://github.com/Netflix/titus-control-plane/pull/899#discussion_r474211500", "createdAt": "2020-08-20T19:13:23Z", "author": {"login": "tbak"}, "path": "titus-common-ext/kube/src/main/java/com/netflix/titus/ext/kube/clustermembership/connector/KubeClientComponent.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.ext.kube.clustermembership.connector;\n+\n+import java.io.IOException;\n+\n+import com.google.common.base.Preconditions;\n+import com.netflix.titus.common.util.StringExt;\n+import io.kubernetes.client.openapi.ApiClient;\n+import io.kubernetes.client.util.Config;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @deprecated {@link ApiClient} should be provided independently of the cluster membership component.\n+ */\n+@Component\n+public class KubeClientComponent {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KubeClientComponent.class);\n+\n+    @Bean\n+    public ApiClient getApiClient(KubeClusterMembershipConfiguration configuration) {\n+        String kubeApiServerUri = StringExt.safeTrim(configuration.getKubeApiServerUri());\n+        String kubeConfigPath = StringExt.safeTrim(configuration.getKubeConfigPath());\n+\n+        Preconditions.checkState(!kubeApiServerUri.isEmpty() || !kubeConfigPath.isEmpty(),\n+                \"Kubernetes address not set\"\n+        );\n+\n+        ApiClient client;\n+        if (kubeApiServerUri.isEmpty()) {\n+            try {\n+                logger.info(\"Initializing Kube ApiClient from config file: {}\", kubeConfigPath);\n+                client = Config.fromConfig(kubeConfigPath);\n+            } catch (IOException e) {\n+                throw new RuntimeException(e);\n+            }\n+        } else {\n+            logger.info(\"Initializing Kube ApiClient with URI: {}\", kubeApiServerUri);\n+            client = Config.fromUrl(kubeApiServerUri);\n+        }\n+\n+        client.setReadTimeout(0); // infinite timeout", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIwODM2Ng=="}, "originalCommit": {"oid": "dc768a1d0bc8cc4a3a8b74f37cc160cac54fddca"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4009, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}