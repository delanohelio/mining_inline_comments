{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNjQyMDgx", "number": 765, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNTo0ODozNVrODf7xMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNTo1MzozOFrODf74ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODExNjk2OnYy", "diffSide": "RIGHT", "path": "titus-common/src/main/java/com/netflix/titus/common/util/FunctionExt.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNTo0ODozNVrOFp7DGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNzoyMjoyMVrOFp9-pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUwMzM4Nw==", "bodyText": "The description is probably incorrect: the more specific type is required? We do not change type here. It looks like a function composition. In that case this method could be generalized to accept an array of operators.", "url": "https://github.com/Netflix/titus-control-plane/pull/765#discussion_r379503387", "createdAt": "2020-02-14T15:48:35Z", "author": {"login": "tbak"}, "path": "titus-common/src/main/java/com/netflix/titus/common/util/FunctionExt.java", "diffHunk": "@@ -37,4 +40,14 @@\n         }\n         return opt;\n     }\n+\n+    /**\n+     * {@link UnaryOperator} does not have an equivalent of {@link Function#andThen(Function)}, so this can be used when\n+     * the more specific type is required.\n+     */\n+    public static <T> UnaryOperator<T> andThen(UnaryOperator<T> op, UnaryOperator<T> after) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a017af18c687f490d989ab5cf7059a98602dfe8d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUzODQ3Nw==", "bodyText": "By more specific type here I mean returning back a UnaryOperator rather than a Function (I\u2019m not referring to the generic type T). The implementation is just a copy-and-pasta of Function#andThen(Function), but returning a UnaryOperator (more specific type) back.\nDoes it mane more sense now? Any suggestion on how to make the doc more clear?", "url": "https://github.com/Netflix/titus-control-plane/pull/765#discussion_r379538477", "createdAt": "2020-02-14T16:53:55Z", "author": {"login": "fabiokung"}, "path": "titus-common/src/main/java/com/netflix/titus/common/util/FunctionExt.java", "diffHunk": "@@ -37,4 +40,14 @@\n         }\n         return opt;\n     }\n+\n+    /**\n+     * {@link UnaryOperator} does not have an equivalent of {@link Function#andThen(Function)}, so this can be used when\n+     * the more specific type is required.\n+     */\n+    public static <T> UnaryOperator<T> andThen(UnaryOperator<T> op, UnaryOperator<T> after) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUwMzM4Nw=="}, "originalCommit": {"oid": "a017af18c687f490d989ab5cf7059a98602dfe8d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU1MTM5Nw==", "bodyText": "Makes sense. Maybe you can change it to: the more specific type (UnaryOperator) is required to avoid any confusion.", "url": "https://github.com/Netflix/titus-control-plane/pull/765#discussion_r379551397", "createdAt": "2020-02-14T17:22:21Z", "author": {"login": "tbak"}, "path": "titus-common/src/main/java/com/netflix/titus/common/util/FunctionExt.java", "diffHunk": "@@ -37,4 +40,14 @@\n         }\n         return opt;\n     }\n+\n+    /**\n+     * {@link UnaryOperator} does not have an equivalent of {@link Function#andThen(Function)}, so this can be used when\n+     * the more specific type is required.\n+     */\n+    public static <T> UnaryOperator<T> andThen(UnaryOperator<T> op, UnaryOperator<T> after) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUwMzM4Nw=="}, "originalCommit": {"oid": "a017af18c687f490d989ab5cf7059a98602dfe8d"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODEzNTk4OnYy", "diffSide": "RIGHT", "path": "titus-api/src/main/java/com/netflix/titus/api/jobmanager/model/job/ext/BatchJobExt.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNTo1MzozOFrOFp7OpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMDozMjo0MlrOFqHFPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUwNjM0MA==", "bodyText": "In DifferenceResolverUtils we have:\nlong runtimeLimitMs = Math.max(60_000, batchJob.getJobDescriptor().getExtensions().getRuntimeLimitMs());\nWe did this to prevent to unnecessary terminations, due to slowness in state propagation. The runtime limit for a job should be an actual limit + delta. Delta ~60sec is an amount we set here, assuming actual execution time is 0.", "url": "https://github.com/Netflix/titus-control-plane/pull/765#discussion_r379506340", "createdAt": "2020-02-14T15:53:38Z", "author": {"login": "tbak"}, "path": "titus-api/src/main/java/com/netflix/titus/api/jobmanager/model/job/ext/BatchJobExt.java", "diffHunk": "@@ -34,7 +34,7 @@\n     @FieldInvariant(value = \"value <= @constraints.getMaxBatchJobSize()\", message = \"Batch job too big #{value} > #{@constraints.getMaxBatchJobSize()}\")\n     private final int size;\n \n-    @Min(value = 60_000, message = \"Runtime limit too low (must be at least 60sec, but is #{#root}[ms])\")\n+    @Min(value = 5_000, message = \"Runtime limit too low (must be at least 5sec, but is #{#root}[ms])\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a017af18c687f490d989ab5cf7059a98602dfe8d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUzNzA5NA==", "bodyText": "Good catch. I was planning to update this as well and forgot it. I will get it fixed.", "url": "https://github.com/Netflix/titus-control-plane/pull/765#discussion_r379537094", "createdAt": "2020-02-14T16:51:12Z", "author": {"login": "fabiokung"}, "path": "titus-api/src/main/java/com/netflix/titus/api/jobmanager/model/job/ext/BatchJobExt.java", "diffHunk": "@@ -34,7 +34,7 @@\n     @FieldInvariant(value = \"value <= @constraints.getMaxBatchJobSize()\", message = \"Batch job too big #{value} > #{@constraints.getMaxBatchJobSize()}\")\n     private final int size;\n \n-    @Min(value = 60_000, message = \"Runtime limit too low (must be at least 60sec, but is #{#root}[ms])\")\n+    @Min(value = 5_000, message = \"Runtime limit too low (must be at least 5sec, but is #{#root}[ms])\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUwNjM0MA=="}, "originalCommit": {"oid": "a017af18c687f490d989ab5cf7059a98602dfe8d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcwMDU0MA==", "bodyText": "@tbak since we already check that state == TaskState.Started in DifferenceResolverUtils, I don't think we need to account for propagation delays. I made the fix to always use the same min from BatchJobExt, but that is just a safeguard.\nLet me know what you think.", "url": "https://github.com/Netflix/titus-control-plane/pull/765#discussion_r379700540", "createdAt": "2020-02-15T00:32:42Z", "author": {"login": "fabiokung"}, "path": "titus-api/src/main/java/com/netflix/titus/api/jobmanager/model/job/ext/BatchJobExt.java", "diffHunk": "@@ -34,7 +34,7 @@\n     @FieldInvariant(value = \"value <= @constraints.getMaxBatchJobSize()\", message = \"Batch job too big #{value} > #{@constraints.getMaxBatchJobSize()}\")\n     private final int size;\n \n-    @Min(value = 60_000, message = \"Runtime limit too low (must be at least 60sec, but is #{#root}[ms])\")\n+    @Min(value = 5_000, message = \"Runtime limit too low (must be at least 5sec, but is #{#root}[ms])\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUwNjM0MA=="}, "originalCommit": {"oid": "a017af18c687f490d989ab5cf7059a98602dfe8d"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4046, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}