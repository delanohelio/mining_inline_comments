{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxNDQyMDc4", "number": 849, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QyMzowNzo0N1rOFnQ9fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QyMzoxNToxNFrOFnRE7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc2NzE2NjcxOnYy", "diffSide": "RIGHT", "path": "titus-supplementary-component/job-activity-history/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QyMzowNzo0N1rOI4z-ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QyMzowNzo0N1rOI4z-ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjQ0Mjc4Nw==", "bodyText": "We keep storage implementation in separate subproject (in titus-ext/) so we can easily swap it if needed with different implementation.", "url": "https://github.com/Netflix/titus-control-plane/pull/849#discussion_r596442787", "createdAt": "2021-03-17T23:07:47Z", "author": {"login": "tbak"}, "path": "titus-supplementary-component/job-activity-history/build.gradle", "diffHunk": "@@ -1,8 +1,71 @@\n+buildscript {\n+    dependencies {\n+        classpath 'com.opentable.components:otj-pg-embedded:0.13.+'\n+    }\n+}\n+\n+plugins {\n+    id \"com.revolut.jooq-docker\" version \"0.3.6\"\n+    id 'org.flywaydb.flyway' version '5.2.4'\n+}\n+\n+apply plugin: \"com.revolut.jooq-docker\"\n+\n+ext.flywayVersion = '6.1.+'\n+ext.jooqVersion = '3.13.2'\n+ext.psql = '42.2.8'\n+\n dependencies {\n     compile \"org.springframework:spring-web:${springVersion}\"\n     compile \"org.springframework.boot:spring-boot:${springBootVersion}\"\n \n+    compile project(':titus-common')\n+    compile project(':titus-api')\n+    compile project(':titus-server-runtime')\n+\n+    implementation(\"org.jooq:jooq:${jooqVersion}\")\n+    jdbc(\"org.postgresql:postgresql:${psql}\")\n+\n+    // DB -  Drivers\n+    compile \"org.postgresql:postgresql:${psql}\"\n+\n+    // DB - jOOQ\n+    compile \"org.jooq:jooq:${jooqVersion}\"\n+    compile \"org.jooq:jooq-meta:${jooqVersion}\"\n+    compile \"org.jooq:jooq-codegen:${jooqVersion}\"\n+    // Flyway\n+    compile \"org.flywaydb:flyway-core:${flywayVersion}\"\n+\n+    compile 'com.opentable.components:otj-pg-embedded:0.13.+'\n+    // Hikari DataSource for connection pooling to the DB\n+    compile 'com.zaxxer:HikariCP:3.2.0'\n     compile project(':titus-server-runtime')\n \n     testCompile project(':titus-testkit')\n }\n+\n+// Begin: Jooq code generation using EmbeddedPostgres database and Flyway migration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d051e24784f43d547deca5ba01c87ed93f4c9d7"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc2NzE3Mjg3OnYy", "diffSide": "RIGHT", "path": "titus-supplementary-component/job-activity-history/src/main/java/com/netflix/titus/supplementary/jobactivity/JobActivityWorker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QyMzowOTo1NFrOI40CAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QyMzowOTo1NFrOI40CAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjQ0MzY1MQ==", "bodyText": "There are more parameters to be configured, like interval, executor, etc.", "url": "https://github.com/Netflix/titus-control-plane/pull/849#discussion_r596443651", "createdAt": "2021-03-17T23:09:54Z", "author": {"login": "tbak"}, "path": "titus-supplementary-component/job-activity-history/src/main/java/com/netflix/titus/supplementary/jobactivity/JobActivityWorker.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.netflix.titus.supplementary.jobactivity;\n+\n+import java.time.Duration;\n+import javax.annotation.PreDestroy;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import com.netflix.spectator.api.Registry;\n+import com.netflix.titus.common.framework.scheduler.ScheduleReference;\n+import com.netflix.titus.common.framework.scheduler.model.ScheduleDescriptor;\n+import com.netflix.titus.common.runtime.TitusRuntime;\n+import com.netflix.titus.common.util.Evaluators;\n+import com.netflix.titus.common.util.ExecutorsExt;\n+import com.netflix.titus.common.util.guice.annotation.Activator;\n+import com.netflix.titus.common.util.guice.annotation.Deactivator;\n+import com.netflix.titus.common.util.time.Clock;\n+import com.netflix.titus.supplementary.jobactivity.store.JobActivityStore;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Singleton\n+public class JobActivityWorker {\n+    private ScheduleReference schedulerRef;\n+    private final Clock clock;\n+    private final TitusRuntime titusRuntime;\n+    private JobActivityStore jobActivityStore;\n+\n+    private static final Logger logger = LoggerFactory.getLogger(JobActivityWorker.class);\n+\n+    @Inject\n+    public JobActivityWorker(TitusRuntime titusRuntime,\n+                             JobActivityStore jobActivityStore) {\n+        this.clock = titusRuntime.getClock();\n+        this.titusRuntime = titusRuntime;\n+        this.jobActivityStore = jobActivityStore;\n+\n+        Registry registry = titusRuntime.getRegistry();\n+    }\n+\n+    @Activator\n+    public void enterActiveMode() {\n+        ScheduleDescriptor scheduleDescriptor = ScheduleDescriptor.newBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d051e24784f43d547deca5ba01c87ed93f4c9d7"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc2NzE3Njk1OnYy", "diffSide": "RIGHT", "path": "titus-supplementary-component/job-activity-history/src/main/java/com/netflix/titus/supplementary/jobactivity/store/JooqConfigurationBean.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QyMzoxMTozM1rOI40Eag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QyMzoxMTozM1rOI40Eag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjQ0NDI2Ng==", "bodyText": "This is not needed anymore. You can use Archaius2Ext.newConfiguration to create Archaius style proxy to Spring config.", "url": "https://github.com/Netflix/titus-control-plane/pull/849#discussion_r596444266", "createdAt": "2021-03-17T23:11:33Z", "author": {"login": "tbak"}, "path": "titus-supplementary-component/job-activity-history/src/main/java/com/netflix/titus/supplementary/jobactivity/store/JooqConfigurationBean.java", "diffHunk": "@@ -14,36 +14,34 @@\n  * limitations under the License.\n  */\n \n-package com.netflix.titus.ext.jooqflyway.jobactivity;\n-\n-import javax.inject.Inject;\n+package com.netflix.titus.supplementary.jobactivity.store;\n \n import com.netflix.archaius.api.annotations.Configuration;\n import com.netflix.titus.common.util.SpringConfigurationUtil;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.core.env.Environment;\n \n-@Configuration(prefix = \"titus.ext.jooqflyway\")\n-public class JooqConfiguration {\n+@Configuration(prefix = \"titus.ext.supplementary.jobactivity\")\n+public class JooqConfigurationBean implements JooqConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d051e24784f43d547deca5ba01c87ed93f4c9d7"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc2NzE3ODIxOnYy", "diffSide": "RIGHT", "path": "titus-supplementary-component/job-activity-history/src/main/java/com/netflix/titus/supplementary/jobactivity/store/JooqJobActivityContextComponent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QyMzoxMjowNVrOI40FKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QyMzoxMjowNVrOI40FKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjQ0NDQ1OA==", "bodyText": "logger?", "url": "https://github.com/Netflix/titus-control-plane/pull/849#discussion_r596444458", "createdAt": "2021-03-17T23:12:05Z", "author": {"login": "tbak"}, "path": "titus-supplementary-component/job-activity-history/src/main/java/com/netflix/titus/supplementary/jobactivity/store/JooqJobActivityContextComponent.java", "diffHunk": "@@ -44,67 +41,73 @@ public SQLDialect dialect() {\n     }\n \n     @Bean\n-    public EmbeddedPostgresService getEmbeddedPostgresService(JooqConfiguration configuration) {\n-        return new EmbeddedPostgresService(configuration);\n+    public EmbeddedPostgresService getEmbeddedPostgresService(JooqConfigurationBean jooqConfiguration) {\n+        return new EmbeddedPostgresService(jooqConfiguration);\n     }\n \n     @Bean\n     @Primary\n-    public JooqContext getJooqContext(JooqConfiguration jooqConfiguration, EmbeddedPostgresService embeddedPostgresService) {\n+    @Qualifier(\"jobActivityJooqContext\")\n+    public JooqContext getJobActivityJooqContext(JooqConfigurationBean jooqConfiguration, EmbeddedPostgresService embeddedPostgresService) {\n         HikariConfig hikariConfig = new HikariConfig();\n+        System.out.println(\"CONSUMER\");\n \n         hikariConfig.setAutoCommit(true);\n \n         // Connection management\n         hikariConfig.setConnectionTimeout(10000);\n         hikariConfig.setMaximumPoolSize(10);\n         hikariConfig.setLeakDetectionThreshold(3000);\n-\n         if (jooqConfiguration.isInMemoryDb()) {\n             hikariConfig.setDataSource(embeddedPostgresService.getDataSource());\n+        } else if (jooqConfiguration.isLocalDb()) {\n+            hikariConfig.setJdbcUrl(\"jdbc:postgresql://localhost:5432/postgres\");\n         } else {\n             hikariConfig.addDataSourceProperty(PGProperty.SSL.getName(), \"true\");\n             hikariConfig.addDataSourceProperty(PGProperty.SSL_MODE.getName(), \"verify-ca\");\n             hikariConfig.addDataSourceProperty(PGProperty.SSL_FACTORY.getName(), RDSSSLSocketFactory.class.getName());\n             hikariConfig.setJdbcUrl(jooqConfiguration.getDatabaseUrl());\n         }\n-\n         return new JooqContext(jooqConfiguration, new HikariDataSource(hikariConfig), embeddedPostgresService);\n     }\n \n     @Bean\n-    public JooqContext getJooqProducerContext(JooqConfiguration jooqConfiguration, EmbeddedPostgresService embeddedPostgresService) {\n+    @Qualifier(\"producerJooqContext\")\n+    public JooqContext getJooqProducerContext(JooqConfigurationBean jooqConfiguration, EmbeddedPostgresService embeddedPostgresService) {\n         HikariConfig hikariConfig = new HikariConfig();\n-\n         hikariConfig.setAutoCommit(true);\n+        System.err.println(\"PRODUCER\");\n \n         // Connection management\n         hikariConfig.setConnectionTimeout(10000);\n         hikariConfig.setMaximumPoolSize(10);\n         hikariConfig.setLeakDetectionThreshold(3000);\n \n         if (jooqConfiguration.isInMemoryDb()) {\n+            System.out.println(\"IN memory\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d051e24784f43d547deca5ba01c87ed93f4c9d7"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc2NzE4MDQyOnYy", "diffSide": "RIGHT", "path": "titus-supplementary-component/job-activity-history/src/main/java/com/netflix/titus/supplementary/jobactivity/store/JooqJobActivityStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QyMzoxMjo1NlrOI40GZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xOFQxNjoyNzozOVrOI5Ys5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjQ0NDc3NQ==", "bodyText": "logger?", "url": "https://github.com/Netflix/titus-control-plane/pull/849#discussion_r596444775", "createdAt": "2021-03-17T23:12:56Z", "author": {"login": "tbak"}, "path": "titus-supplementary-component/job-activity-history/src/main/java/com/netflix/titus/supplementary/jobactivity/store/JooqJobActivityStore.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright 2019 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.supplementary.jobactivity.store;\n+\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import com.netflix.titus.api.jobactivity.store.JobActivityPublisherRecord;\n+import com.netflix.titus.api.jobactivity.store.JobActivityStoreException;\n+import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.jobmanager.model.job.Task;\n+import com.netflix.titus.common.framework.scheduler.ScheduleReference;\n+import com.netflix.titus.common.runtime.TitusRuntime;\n+import com.netflix.titus.common.util.spectator.DatabaseMetrics;\n+import com.netflix.titus.common.util.time.Clock;\n+import com.netflix.titus.runtime.jobactivity.JobActivityPublisherRecordUtils;\n+import org.flywaydb.core.Flyway;\n+import org.jooq.DSLContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Mono;\n+\n+import static com.netflix.titus.supplementary.jobactivity.activity.tables.ActivityQueue.ACTIVITY_QUEUE;\n+import static com.netflix.titus.supplementary.jobactivity.jobactivity.Jobactivity.JOBACTIVITY;\n+\n+\n+@Singleton\n+public class JooqJobActivityStore implements JobActivityStore {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(JobActivityStore.class);\n+    private final JooqContext jobActivityJooqContext;\n+    private final JooqContext producerJooqContext;\n+    private final TitusRuntime titusRuntime;\n+    private ScheduleReference schedulerRef;\n+    private final Clock clock;\n+\n+    private final DSLContext jobActivityDSLContext;\n+    private final DSLContext producerDSLContext;\n+    private final DatabaseMetrics producerDatabaseMetrics;\n+    private final DatabaseMetrics jobActivityDatabaseMetrics;\n+\n+    @Inject\n+    public JooqJobActivityStore(TitusRuntime titusRuntime,\n+                                JooqContext jobActivityJooqContext,\n+                                JooqContext producerJooqContext) {\n+        this(titusRuntime, jobActivityJooqContext, producerJooqContext, true);\n+    }\n+\n+    @VisibleForTesting\n+    public JooqJobActivityStore(TitusRuntime titusRuntime,\n+                                JooqContext jobActivityJooqContext,\n+                                JooqContext producerJooqContext,\n+                                boolean createIfNotExists) {\n+        this.jobActivityJooqContext = jobActivityJooqContext;\n+        this.producerJooqContext = producerJooqContext;\n+        this.titusRuntime = titusRuntime;\n+        this.clock = titusRuntime.getClock();\n+        this.jobActivityDSLContext = jobActivityJooqContext.getDslContext();\n+        this.producerDSLContext = producerJooqContext.getDslContext();\n+        this.producerDatabaseMetrics = new DatabaseMetrics(titusRuntime.getRegistry(), \"titus\", \"JobActivityPublisher\");\n+        this.jobActivityDatabaseMetrics = new DatabaseMetrics(titusRuntime.getRegistry(), \"titus\", \"JobActivityHistory\");\n+\n+        initializeSchema(createIfNotExists);\n+    }\n+\n+    public void initializeSchema(boolean createIfNotExists) {\n+        if (createIfNotExists) {\n+            logger.info(\"Creating/migrating JooqJobStore DB schema...\");\n+            Flyway flyway = Flyway.configure().dataSource(jobActivityJooqContext.getDataSource()).load();\n+            flyway.migrate();\n+        }\n+    }\n+\n+    @Override\n+    public Mono<Void> processRecords() {\n+        return readRecordFromPublisherQueue()\n+                .flatMap(this::writeRecord)\n+                .flatMap(this::deleteRecordFromPublisher);\n+    }\n+\n+    public Mono<JobActivityPublisherRecord> readRecordFromPublisherQueue() {\n+        return JooqUtils.executeAsyncMono(() -> {\n+            long startTimeMs = System.currentTimeMillis();\n+            List<JobActivityPublisherRecord> records = producerDSLContext\n+                    .selectFrom(ACTIVITY_QUEUE)\n+                    .orderBy(ACTIVITY_QUEUE.QUEUE_INDEX.asc())\n+                    .limit(1)\n+                    .fetchInto(JobActivityPublisherRecord.class);\n+            if(records.size() != 0) {\n+                System.out.println(records.get(0).getRecordType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d051e24784f43d547deca5ba01c87ed93f4c9d7"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzA0NDQ1Mg==", "bodyText": "oops looks like I missed these", "url": "https://github.com/Netflix/titus-control-plane/pull/849#discussion_r597044452", "createdAt": "2021-03-18T16:27:39Z", "author": {"login": "amitaekbote"}, "path": "titus-supplementary-component/job-activity-history/src/main/java/com/netflix/titus/supplementary/jobactivity/store/JooqJobActivityStore.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright 2019 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.supplementary.jobactivity.store;\n+\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import com.netflix.titus.api.jobactivity.store.JobActivityPublisherRecord;\n+import com.netflix.titus.api.jobactivity.store.JobActivityStoreException;\n+import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.jobmanager.model.job.Task;\n+import com.netflix.titus.common.framework.scheduler.ScheduleReference;\n+import com.netflix.titus.common.runtime.TitusRuntime;\n+import com.netflix.titus.common.util.spectator.DatabaseMetrics;\n+import com.netflix.titus.common.util.time.Clock;\n+import com.netflix.titus.runtime.jobactivity.JobActivityPublisherRecordUtils;\n+import org.flywaydb.core.Flyway;\n+import org.jooq.DSLContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Mono;\n+\n+import static com.netflix.titus.supplementary.jobactivity.activity.tables.ActivityQueue.ACTIVITY_QUEUE;\n+import static com.netflix.titus.supplementary.jobactivity.jobactivity.Jobactivity.JOBACTIVITY;\n+\n+\n+@Singleton\n+public class JooqJobActivityStore implements JobActivityStore {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(JobActivityStore.class);\n+    private final JooqContext jobActivityJooqContext;\n+    private final JooqContext producerJooqContext;\n+    private final TitusRuntime titusRuntime;\n+    private ScheduleReference schedulerRef;\n+    private final Clock clock;\n+\n+    private final DSLContext jobActivityDSLContext;\n+    private final DSLContext producerDSLContext;\n+    private final DatabaseMetrics producerDatabaseMetrics;\n+    private final DatabaseMetrics jobActivityDatabaseMetrics;\n+\n+    @Inject\n+    public JooqJobActivityStore(TitusRuntime titusRuntime,\n+                                JooqContext jobActivityJooqContext,\n+                                JooqContext producerJooqContext) {\n+        this(titusRuntime, jobActivityJooqContext, producerJooqContext, true);\n+    }\n+\n+    @VisibleForTesting\n+    public JooqJobActivityStore(TitusRuntime titusRuntime,\n+                                JooqContext jobActivityJooqContext,\n+                                JooqContext producerJooqContext,\n+                                boolean createIfNotExists) {\n+        this.jobActivityJooqContext = jobActivityJooqContext;\n+        this.producerJooqContext = producerJooqContext;\n+        this.titusRuntime = titusRuntime;\n+        this.clock = titusRuntime.getClock();\n+        this.jobActivityDSLContext = jobActivityJooqContext.getDslContext();\n+        this.producerDSLContext = producerJooqContext.getDslContext();\n+        this.producerDatabaseMetrics = new DatabaseMetrics(titusRuntime.getRegistry(), \"titus\", \"JobActivityPublisher\");\n+        this.jobActivityDatabaseMetrics = new DatabaseMetrics(titusRuntime.getRegistry(), \"titus\", \"JobActivityHistory\");\n+\n+        initializeSchema(createIfNotExists);\n+    }\n+\n+    public void initializeSchema(boolean createIfNotExists) {\n+        if (createIfNotExists) {\n+            logger.info(\"Creating/migrating JooqJobStore DB schema...\");\n+            Flyway flyway = Flyway.configure().dataSource(jobActivityJooqContext.getDataSource()).load();\n+            flyway.migrate();\n+        }\n+    }\n+\n+    @Override\n+    public Mono<Void> processRecords() {\n+        return readRecordFromPublisherQueue()\n+                .flatMap(this::writeRecord)\n+                .flatMap(this::deleteRecordFromPublisher);\n+    }\n+\n+    public Mono<JobActivityPublisherRecord> readRecordFromPublisherQueue() {\n+        return JooqUtils.executeAsyncMono(() -> {\n+            long startTimeMs = System.currentTimeMillis();\n+            List<JobActivityPublisherRecord> records = producerDSLContext\n+                    .selectFrom(ACTIVITY_QUEUE)\n+                    .orderBy(ACTIVITY_QUEUE.QUEUE_INDEX.asc())\n+                    .limit(1)\n+                    .fetchInto(JobActivityPublisherRecord.class);\n+            if(records.size() != 0) {\n+                System.out.println(records.get(0).getRecordType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjQ0NDc3NQ=="}, "originalCommit": {"oid": "6d051e24784f43d547deca5ba01c87ed93f4c9d7"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc2NzE4NTc1OnYy", "diffSide": "RIGHT", "path": "titus-supplementary-component/job-activity-history/src/main/resources/db/migration/V1__initial_setup.sql", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QyMzoxNToxNFrOI40Jqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QyMzoxNToxNFrOI40Jqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjQ0NTYxMA==", "bodyText": "Ideally this should be unlimited size or very high (128KB). We might also consider gziping it to save space.", "url": "https://github.com/Netflix/titus-control-plane/pull/849#discussion_r596445610", "createdAt": "2021-03-17T23:15:14Z", "author": {"login": "tbak"}, "path": "titus-supplementary-component/job-activity-history/src/main/resources/db/migration/V1__initial_setup.sql", "diffHunk": "@@ -16,22 +16,30 @@\n \n CREATE SCHEMA IF NOT EXISTS jobactivity;\n \n-\n CREATE TABLE IF NOT EXISTS jobactivity.jobs\n (\n-  job_id          VARCHAR (64) NOT NULL,\n-  create_time     TIMESTAMP NOT NULL,\n-  record_time     TIMESTAMP NOT NULL,\n-  job_record_json jsonb,\n-  PRIMARY KEY (job_id)\n+    job_id          VARCHAR(64) NOT NULL,\n+    record_time     TIMESTAMP   NOT NULL,\n+    job_record_json varchar(64),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d051e24784f43d547deca5ba01c87ed93f4c9d7"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3960, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}