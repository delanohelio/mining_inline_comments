{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5NTY1ODM5", "number": 878, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDowODo1OVrOEIkb7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDoxMjowMVrOEIkd8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDIxMDM3OnYy", "diffSide": "RIGHT", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDowODo1OVrOGonKmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDowODo1OVrOGonKmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIzNzkxMg==", "bodyText": "add docs explaining that this method will still block until all requests are finished (so we still expect the Fenzo thread to be blocked while all requests are in-flight, but requests will be executed concurrently)", "url": "https://github.com/Netflix/titus-control-plane/pull/878#discussion_r445237912", "createdAt": "2020-06-25T00:08:59Z", "author": {"login": "fabiokung"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java", "diffHunk": "@@ -259,6 +278,36 @@ public void launchTasks(List<TaskInfoRequest> requests, List<VirtualMachineLease\n         }\n     }\n \n+    private void launchTasksAsync(List<TaskInfoRequest> requests) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abb84baceb3e44a94025ea2f6fd8e32475c95505"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDIxMTkwOnYy", "diffSide": "RIGHT", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDowOTo1N1rOGonLeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxOTo0MjoxMFrOGpJO7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIzODEzNw==", "bodyText": "I suggest adding a doOnComplete() callback to record latencies on each individual operation (DefaultSchedulingService will still record the latency of the whole operation until all requests are finished).", "url": "https://github.com/Netflix/titus-control-plane/pull/878#discussion_r445238137", "createdAt": "2020-06-25T00:09:57Z", "author": {"login": "fabiokung"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java", "diffHunk": "@@ -259,6 +278,36 @@ public void launchTasks(List<TaskInfoRequest> requests, List<VirtualMachineLease\n         }\n     }\n \n+    private void launchTasksAsync(List<TaskInfoRequest> requests) {\n+        List<Mono<Void>> podAddActions = new ArrayList<>(requests.size());\n+        for (TaskInfoRequest request : requests) {\n+            V1Pod v1Pod = taskInfoToPod(request);\n+            Mono<Void> podAddAction = KubeUtil\n+                    .<V1Pod>toReact(handler -> kubeApiFacade.getCoreV1Api().createNamespacedPodAsync(\n+                            KUBERNETES_NAMESPACE, v1Pod, null, null, null, handler\n+                    ))\n+                    .doOnSubscribe(subscription -> {\n+                        launchTaskCounter.increment();\n+                        logger.info(\"creating pod: {}\", v1Pod);\n+                        podSizeMetrics.record(KubeUtil.estimatePodSize(v1Pod));\n+                    })\n+                    .timeout(Duration.ofMillis(directKubeConfiguration.getKubeApiClientTimeoutMs()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abb84baceb3e44a94025ea2f6fd8e32475c95505"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5NjA3OQ==", "bodyText": "We record request level latencies in okhttp interceptor.", "url": "https://github.com/Netflix/titus-control-plane/pull/878#discussion_r445796079", "createdAt": "2020-06-25T19:42:10Z", "author": {"login": "tbak"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java", "diffHunk": "@@ -259,6 +278,36 @@ public void launchTasks(List<TaskInfoRequest> requests, List<VirtualMachineLease\n         }\n     }\n \n+    private void launchTasksAsync(List<TaskInfoRequest> requests) {\n+        List<Mono<Void>> podAddActions = new ArrayList<>(requests.size());\n+        for (TaskInfoRequest request : requests) {\n+            V1Pod v1Pod = taskInfoToPod(request);\n+            Mono<Void> podAddAction = KubeUtil\n+                    .<V1Pod>toReact(handler -> kubeApiFacade.getCoreV1Api().createNamespacedPodAsync(\n+                            KUBERNETES_NAMESPACE, v1Pod, null, null, null, handler\n+                    ))\n+                    .doOnSubscribe(subscription -> {\n+                        launchTaskCounter.increment();\n+                        logger.info(\"creating pod: {}\", v1Pod);\n+                        podSizeMetrics.record(KubeUtil.estimatePodSize(v1Pod));\n+                    })\n+                    .timeout(Duration.ofMillis(directKubeConfiguration.getKubeApiClientTimeoutMs()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIzODEzNw=="}, "originalCommit": {"oid": "abb84baceb3e44a94025ea2f6fd8e32475c95505"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDIxNTU1OnYy", "diffSide": "RIGHT", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDoxMjowMVrOGonNsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDoxNDowN1rOGonP3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIzODcwNw==", "bodyText": "consider adding a concurrency limit to the merge so we avoid overloading kube-apiserver during big bursts", "url": "https://github.com/Netflix/titus-control-plane/pull/878#discussion_r445238707", "createdAt": "2020-06-25T00:12:01Z", "author": {"login": "fabiokung"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java", "diffHunk": "@@ -259,6 +278,36 @@ public void launchTasks(List<TaskInfoRequest> requests, List<VirtualMachineLease\n         }\n     }\n \n+    private void launchTasksAsync(List<TaskInfoRequest> requests) {\n+        List<Mono<Void>> podAddActions = new ArrayList<>(requests.size());\n+        for (TaskInfoRequest request : requests) {\n+            V1Pod v1Pod = taskInfoToPod(request);\n+            Mono<Void> podAddAction = KubeUtil\n+                    .<V1Pod>toReact(handler -> kubeApiFacade.getCoreV1Api().createNamespacedPodAsync(\n+                            KUBERNETES_NAMESPACE, v1Pod, null, null, null, handler\n+                    ))\n+                    .doOnSubscribe(subscription -> {\n+                        launchTaskCounter.increment();\n+                        logger.info(\"creating pod: {}\", v1Pod);\n+                        podSizeMetrics.record(KubeUtil.estimatePodSize(v1Pod));\n+                    })\n+                    .timeout(Duration.ofMillis(directKubeConfiguration.getKubeApiClientTimeoutMs()))\n+                    .ignoreElement()\n+                    .cast(Void.class)\n+                    .onErrorResume(error -> {\n+                        logger.error(\"Unable to create pod with error: {}\", KubeUtil.toErrorDetails(error), error);\n+                        return Mono.empty();\n+                    });\n+            podAddActions.add(podAddAction);\n+        }\n+\n+        try {\n+            Flux.merge(podAddActions).blockLast();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abb84baceb3e44a94025ea2f6fd8e32475c95505"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIzOTI2Mg==", "bodyText": "also consider mergeDelayError to allow partial failures mirroring the previous behavior from launchTasksSync", "url": "https://github.com/Netflix/titus-control-plane/pull/878#discussion_r445239262", "createdAt": "2020-06-25T00:14:07Z", "author": {"login": "fabiokung"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java", "diffHunk": "@@ -259,6 +278,36 @@ public void launchTasks(List<TaskInfoRequest> requests, List<VirtualMachineLease\n         }\n     }\n \n+    private void launchTasksAsync(List<TaskInfoRequest> requests) {\n+        List<Mono<Void>> podAddActions = new ArrayList<>(requests.size());\n+        for (TaskInfoRequest request : requests) {\n+            V1Pod v1Pod = taskInfoToPod(request);\n+            Mono<Void> podAddAction = KubeUtil\n+                    .<V1Pod>toReact(handler -> kubeApiFacade.getCoreV1Api().createNamespacedPodAsync(\n+                            KUBERNETES_NAMESPACE, v1Pod, null, null, null, handler\n+                    ))\n+                    .doOnSubscribe(subscription -> {\n+                        launchTaskCounter.increment();\n+                        logger.info(\"creating pod: {}\", v1Pod);\n+                        podSizeMetrics.record(KubeUtil.estimatePodSize(v1Pod));\n+                    })\n+                    .timeout(Duration.ofMillis(directKubeConfiguration.getKubeApiClientTimeoutMs()))\n+                    .ignoreElement()\n+                    .cast(Void.class)\n+                    .onErrorResume(error -> {\n+                        logger.error(\"Unable to create pod with error: {}\", KubeUtil.toErrorDetails(error), error);\n+                        return Mono.empty();\n+                    });\n+            podAddActions.add(podAddAction);\n+        }\n+\n+        try {\n+            Flux.merge(podAddActions).blockLast();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIzODcwNw=="}, "originalCommit": {"oid": "abb84baceb3e44a94025ea2f6fd8e32475c95505"}, "originalPosition": 100}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3982, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}