{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzOTYyMjU3", "number": 800, "title": "Add farzone support", "bodyText": "", "createdAt": "2020-03-04T23:15:25Z", "url": "https://github.com/Netflix/titus-control-plane/pull/800", "merged": true, "mergeCommit": {"oid": "834a1de559c106a43d5128396657f2d7d690bf5e"}, "closed": true, "closedAt": "2020-03-05T19:05:58Z", "author": {"login": "tbak"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKuaCiAFqTM2OTczNjgyMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKwQsSAFqTM2OTgyNTYyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NzM2ODIz", "url": "https://github.com/Netflix/titus-control-plane/pull/800#pullrequestreview-369736823", "createdAt": "2020-03-05T16:47:58Z", "commit": {"oid": "364c6a14e43e5ee4064a76c64a96ad3a624c873b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjo0Nzo1OFrOFybaIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjo0Nzo1OFrOFybaIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQyMjE3OA==", "bodyText": "The first ipv4 ip address should be used as the host ip like in:\nhttps://github.com/Netflix/titus-control-plane/blob/master/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java#L453", "url": "https://github.com/Netflix/titus-control-plane/pull/800#discussion_r388422178", "createdAt": "2020-03-05T16:47:58Z", "author": {"login": "corindwyer"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java", "diffHunk": "@@ -264,6 +266,16 @@ private Task attachNodeMetadata(Task task, V1Node node) {\n \n         acceptNotNull(node.getMetadata().getName(), nodeName -> agentAttributes.put(TaskAttributes.TASK_ATTRIBUTES_KUBE_NODE_NAME, nodeName));\n \n+        List<V1NodeAddress> addresses = node.getStatus().getAddresses();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "364c6a14e43e5ee4064a76c64a96ad3a624c873b"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f905c8121ea84179c18abaa794810077dbbee6d", "author": {"user": {"login": "tbak", "name": null}}, "url": "https://github.com/Netflix/titus-control-plane/commit/9f905c8121ea84179c18abaa794810077dbbee6d", "committedDate": "2020-03-05T16:52:31Z", "message": "Add farzone support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "372302aaacc312652a402b6b28e0739d7013cb76", "author": {"user": {"login": "tbak", "name": null}}, "url": "https://github.com/Netflix/titus-control-plane/commit/372302aaacc312652a402b6b28e0739d7013cb76", "committedDate": "2020-03-05T16:52:31Z", "message": "Add agent host attributes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56dbe6d10d178829b6fb132efd470def8ee963b7", "author": {"user": {"login": "tbak", "name": null}}, "url": "https://github.com/Netflix/titus-control-plane/commit/56dbe6d10d178829b6fb132efd470def8ee963b7", "committedDate": "2020-03-05T17:16:57Z", "message": "Reuse node IP extractor from KubeApiServerIntegrator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "364c6a14e43e5ee4064a76c64a96ad3a624c873b", "author": {"user": {"login": "tbak", "name": null}}, "url": "https://github.com/Netflix/titus-control-plane/commit/364c6a14e43e5ee4064a76c64a96ad3a624c873b", "committedDate": "2020-03-05T03:20:20Z", "message": "Add agent host attributes"}, "afterCommit": {"oid": "56dbe6d10d178829b6fb132efd470def8ee963b7", "author": {"user": {"login": "tbak", "name": null}}, "url": "https://github.com/Netflix/titus-control-plane/commit/56dbe6d10d178829b6fb132efd470def8ee963b7", "committedDate": "2020-03-05T17:16:57Z", "message": "Reuse node IP extractor from KubeApiServerIntegrator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NzY3ODkw", "url": "https://github.com/Netflix/titus-control-plane/pull/800#pullrequestreview-369767890", "createdAt": "2020-03-05T17:26:12Z", "commit": {"oid": "56dbe6d10d178829b6fb132efd470def8ee963b7"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoyNjoxMlrOFyc4Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoyNjoxMlrOFyc4Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0NjIzMA==", "bodyText": "this looks incorrectly indented", "url": "https://github.com/Netflix/titus-control-plane/pull/800#discussion_r388446230", "createdAt": "2020-03-05T17:26:12Z", "author": {"login": "corindwyer"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java", "diffHunk": "@@ -191,4 +197,12 @@ public static boolean isOwnedByKubeScheduler(V1Pod v1Pod) {\n         }\n         return false;\n     }\n+\n+    public static String getNodeIpV4Address(V1Node node) {\n+        return   node.getStatus().getAddresses().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56dbe6d10d178829b6fb132efd470def8ee963b7"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5ODI1NjI1", "url": "https://github.com/Netflix/titus-control-plane/pull/800#pullrequestreview-369825625", "createdAt": "2020-03-05T18:51:16Z", "commit": {"oid": "56dbe6d10d178829b6fb132efd470def8ee963b7"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1MToxNlrOFyfqmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1Njo0NFrOFyf3AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MTkyOA==", "bodyText": "why not centralize this check into the kubeSchedulerPredicate?", "url": "https://github.com/Netflix/titus-control-plane/pull/800#discussion_r388491928", "createdAt": "2020-03-05T18:51:16Z", "author": {"login": "fabiokung"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/batch/BatchDifferenceResolver.java", "diffHunk": "@@ -238,7 +244,7 @@ public BatchDifferenceResolver(\n         }\n \n         Map<String, String> taskContext = getTaskContext(previousTask, unassignedIpAllocations);\n-        if (kubeSchedulerPredicate.test(refJobView.getJob().getJobDescriptor())) {\n+        if (KubeUtil.findFarzoneId(kubeConfiguration, refJobView.getJob()).isPresent() || kubeSchedulerPredicate.test(refJobView.getJob().getJobDescriptor())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56dbe6d10d178829b6fb132efd470def8ee963b7"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MjIyMA==", "bodyText": "same as above, centralize this into the predicate", "url": "https://github.com/Netflix/titus-control-plane/pull/800#discussion_r388492220", "createdAt": "2020-03-05T18:51:45Z", "author": {"login": "fabiokung"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java", "diffHunk": "@@ -261,7 +267,7 @@ public ServiceDifferenceResolver(\n         }\n \n         Map<String, String> taskContext = getTaskContext(previousTask, unassignedIpAllocations);\n-        if (kubeSchedulerPredicate.test(refJobView.getJob().getJobDescriptor())) {\n+        if (KubeUtil.findFarzoneId(kubeConfiguration, refJobView.getJob()).isPresent() || kubeSchedulerPredicate.test(refJobView.getJob().getJobDescriptor())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56dbe6d10d178829b6fb132efd470def8ee963b7"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NDI2MQ==", "bodyText": "could this be generalized to any availabilityZones? Does it matter that it is a farzone? I'd recommend naming this isAvailabilityZoneOwnedByKubeScheduler() and configuration.getAvailabilityZonesOwnedByKubeScheduler(), or similar.\nIOW, can we abstract away that some AZs are farzones?", "url": "https://github.com/Netflix/titus-control-plane/pull/800#discussion_r388494261", "createdAt": "2020-03-05T18:55:22Z", "author": {"login": "fabiokung"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java", "diffHunk": "@@ -148,4 +161,48 @@ public static String formatV1ContainerState(V1ContainerState containerState) {\n \n         return \"{state=<not set>}\";\n     }\n+\n+    /**\n+     * If a job has an availability zone hard constraint with a farzone id, return this farzone id.\n+     */\n+    public static Optional<String> findFarzoneId(DirectKubeConfiguration configuration, Job job) {\n+        List<String> farzones = configuration.getFarzones();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56dbe6d10d178829b6fb132efd470def8ee963b7"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NTEwNQ==", "bodyText": "same, generalize to any AZs, farzone or not", "url": "https://github.com/Netflix/titus-control-plane/pull/800#discussion_r388495105", "createdAt": "2020-03-05T18:56:44Z", "author": {"login": "fabiokung"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultPodAffinityFactory.java", "diffHunk": "@@ -181,6 +186,12 @@ private void addNodeAffinityPreferredSelectorConstraint(String key, String value\n             term.addMatchExpressionsItem(requirement);\n         }\n \n+        private void processFarzoneConstraints() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56dbe6d10d178829b6fb132efd470def8ee963b7"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 654, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}