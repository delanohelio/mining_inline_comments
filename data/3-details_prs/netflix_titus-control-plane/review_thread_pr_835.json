{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMDUyNzI5", "number": 835, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjozNzozNVrODxuriA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjozOTo0NlrODxuvGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDcxNjI0OnYy", "diffSide": "RIGHT", "path": "titus-server-federation/src/main/java/com/netflix/titus/federation/endpoint/rest/FederationV2CapacityGroupSpringResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjozNzozNVrOGFXVMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjozNzozNVrOGFXVMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3ODMyMg==", "bodyText": "minor: an utility method like <T, E extends Exception> T FunctionExt::must(Either<T, E>) throws E would be nice to reduce repetition of dealing with the result here, e.g.: return must(result)", "url": "https://github.com/Netflix/titus-control-plane/pull/835#discussion_r408278322", "createdAt": "2020-04-14T16:37:35Z", "author": {"login": "fabiokung"}, "path": "titus-server-federation/src/main/java/com/netflix/titus/federation/endpoint/rest/FederationV2CapacityGroupSpringResource.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.federation.endpoint.rest;\n+\n+import java.util.List;\n+import javax.inject.Inject;\n+import javax.ws.rs.WebApplicationException;\n+\n+import com.netflix.titus.api.endpoint.v2.rest.representation.ApplicationSlaRepresentation;\n+import com.netflix.titus.common.util.tuple.Either;\n+import com.netflix.titus.federation.endpoint.EndpointConfiguration;\n+import com.netflix.titus.federation.service.CellWebClientConnector;\n+import com.netflix.titus.federation.service.CellWebClientConnectorUtil;\n+import io.swagger.annotations.Api;\n+import org.springframework.core.ParameterizedTypeReference;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@Api(tags = \"CapacityManagement\")\n+@RestController\n+@RequestMapping(path = \"/api/v2/management/applications\", produces = \"application/json\")\n+public class FederationV2CapacityGroupSpringResource {\n+\n+    public static final String API_PATH = \"/api/v2/management/applications\";\n+\n+    private static final ParameterizedTypeReference<ApplicationSlaRepresentation> APPLICATION_SLA_TP =\n+            ParameterizedTypeReference.forType(ApplicationSlaRepresentation.class);\n+\n+    private static final ParameterizedTypeReference<List<ApplicationSlaRepresentation>> APPLICATION_SLA_LIST_TP =\n+            new ParameterizedTypeReference<List<ApplicationSlaRepresentation>>() {\n+            };\n+\n+    private final EndpointConfiguration configuration;\n+    private final CellWebClientConnector cellWebClientConnector;\n+\n+    @Inject\n+    public FederationV2CapacityGroupSpringResource(EndpointConfiguration configuration,\n+                                                   CellWebClientConnector cellWebClientConnector) {\n+        this.configuration = configuration;\n+        this.cellWebClientConnector = cellWebClientConnector;\n+    }\n+\n+    /**\n+     * Returns all registered application SLAs.\n+     *\n+     * @return a collection of application SLAs or empty array if non present\n+     */\n+    @GetMapping\n+    public List<ApplicationSlaRepresentation> getApplicationSLAs(@RequestParam(name = \"extended\", defaultValue = \"false\") boolean extended) {\n+        Either<List<ApplicationSlaRepresentation>, WebApplicationException> result = CellWebClientConnectorUtil.doGetAndMerge(\n+                cellWebClientConnector,\n+                API_PATH + \"?extended=\" + extended,\n+                APPLICATION_SLA_LIST_TP,\n+                configuration.getRestRequestTimeoutMs()\n+        );\n+        if (result.hasError()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bee25f81c7b1a6d71c40b17a952e1a1e5f2a64c"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDcyNTM4OnYy", "diffSide": "RIGHT", "path": "titus-server-runtime/src/main/java/com/netflix/titus/runtime/endpoint/common/rest/Responses.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjozOTo0NlrOGFXaxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjozOTo0NlrOGFXaxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3OTc0OQ==", "bodyText": "why no REST_TIMEOUT_DURATION?", "url": "https://github.com/Netflix/titus-control-plane/pull/835#discussion_r408279749", "createdAt": "2020-04-14T16:39:46Z", "author": {"login": "fabiokung"}, "path": "titus-server-runtime/src/main/java/com/netflix/titus/runtime/endpoint/common/rest/Responses.java", "diffHunk": "@@ -79,6 +90,15 @@ public static Response fromCompletable(Completable completable, Response.Status\n         return Response.status(statusCode).build();\n     }\n \n+    public static ResponseEntity<Void> fromCompletable(Completable completable, HttpStatus statusCode) {\n+        try {\n+            completable.await(1, TimeUnit.MINUTES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bee25f81c7b1a6d71c40b17a952e1a1e5f2a64c"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3938, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}