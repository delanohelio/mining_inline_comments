{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MzU3Mzcx", "number": 834, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjowNTo1OFrODuBdgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjowNzoxN1rODuBfng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTg1MDI1OnYy", "diffSide": "RIGHT", "path": "titus-ext/jooqflyway/src/main/java/com/netflix/titus/ext/jooqflyway/jobactivity/RDSSSLSocketFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjowNTo1OFrOF_yenA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMToxNzozM1rOGJfA1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzMTY0NA==", "bodyText": "This code is duplicated (we should call into RdsUtil added below).", "url": "https://github.com/Netflix/titus-control-plane/pull/834#discussion_r402431644", "createdAt": "2020-04-02T16:05:58Z", "author": {"login": "tbak"}, "path": "titus-ext/jooqflyway/src/main/java/com/netflix/titus/ext/jooqflyway/jobactivity/RDSSSLSocketFactory.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.ext.jooqflyway.jobactivity;\n+\n+import java.io.InputStream;\n+import java.security.KeyStore;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManagerFactory;\n+\n+import org.postgresql.ssl.WrappedFactory;\n+\n+public class RDSSSLSocketFactory extends WrappedFactory {\n+    public RDSSSLSocketFactory() {\n+        try {\n+            KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b7b770770f143b765b2f0165a03106759b8097"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU5ODQ4Nw==", "bodyText": "fixed it.", "url": "https://github.com/Netflix/titus-control-plane/pull/834#discussion_r412598487", "createdAt": "2020-04-22T01:17:33Z", "author": {"login": "amitaekbote"}, "path": "titus-ext/jooqflyway/src/main/java/com/netflix/titus/ext/jooqflyway/jobactivity/RDSSSLSocketFactory.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.ext.jooqflyway.jobactivity;\n+\n+import java.io.InputStream;\n+import java.security.KeyStore;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManagerFactory;\n+\n+import org.postgresql.ssl.WrappedFactory;\n+\n+public class RDSSSLSocketFactory extends WrappedFactory {\n+    public RDSSSLSocketFactory() {\n+        try {\n+            KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzMTY0NA=="}, "originalCommit": {"oid": "d7b7b770770f143b765b2f0165a03106759b8097"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTg1NTY2OnYy", "diffSide": "RIGHT", "path": "titus-ext/jooqflyway/src/main/java/com/netflix/titus/ext/jooqflyway/jobactivity/RdsUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjowNzoxN1rOF_yiFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMToxODoxNFrOGJfBuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzMjUzNA==", "bodyText": "For security reason, we should allow injecting the truststore file name and the password here. Thus internally we can use a different file, and a different (ideally encrypted) password.", "url": "https://github.com/Netflix/titus-control-plane/pull/834#discussion_r402432534", "createdAt": "2020-04-02T16:07:17Z", "author": {"login": "tbak"}, "path": "titus-ext/jooqflyway/src/main/java/com/netflix/titus/ext/jooqflyway/jobactivity/RdsUtils.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.ext.jooqflyway.jobactivity;\n+\n+import java.io.InputStream;\n+import java.security.KeyStore;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocketFactory;\n+import javax.net.ssl.TrustManagerFactory;\n+\n+public final class RdsUtils {\n+    /**\n+     * Setting as a constant as it is not critical.\n+     */\n+    private static final String TRUST_STORE_PASSWORD = \"titus123\";\n+\n+    public static SSLSocketFactory createRdsSSLSocketFactory() {\n+        try {\n+            KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n+            try (InputStream inputStream = RdsUtils.class.getClassLoader().getResourceAsStream(\"RDS-2019.truststore\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b7b770770f143b765b2f0165a03106759b8097"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzNDM4NQ==", "bodyText": "We should reference the attached truststure in this repo for running the integration tests only.", "url": "https://github.com/Netflix/titus-control-plane/pull/834#discussion_r402434385", "createdAt": "2020-04-02T16:09:59Z", "author": {"login": "tbak"}, "path": "titus-ext/jooqflyway/src/main/java/com/netflix/titus/ext/jooqflyway/jobactivity/RdsUtils.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.ext.jooqflyway.jobactivity;\n+\n+import java.io.InputStream;\n+import java.security.KeyStore;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocketFactory;\n+import javax.net.ssl.TrustManagerFactory;\n+\n+public final class RdsUtils {\n+    /**\n+     * Setting as a constant as it is not critical.\n+     */\n+    private static final String TRUST_STORE_PASSWORD = \"titus123\";\n+\n+    public static SSLSocketFactory createRdsSSLSocketFactory() {\n+        try {\n+            KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n+            try (InputStream inputStream = RdsUtils.class.getClassLoader().getResourceAsStream(\"RDS-2019.truststore\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzMjUzNA=="}, "originalCommit": {"oid": "d7b7b770770f143b765b2f0165a03106759b8097"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU5ODcxMg==", "bodyText": "will fix this in the following pr, finally able to test this. was fighting gradle builds. definitely needs more work here", "url": "https://github.com/Netflix/titus-control-plane/pull/834#discussion_r412598712", "createdAt": "2020-04-22T01:18:14Z", "author": {"login": "amitaekbote"}, "path": "titus-ext/jooqflyway/src/main/java/com/netflix/titus/ext/jooqflyway/jobactivity/RdsUtils.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.ext.jooqflyway.jobactivity;\n+\n+import java.io.InputStream;\n+import java.security.KeyStore;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocketFactory;\n+import javax.net.ssl.TrustManagerFactory;\n+\n+public final class RdsUtils {\n+    /**\n+     * Setting as a constant as it is not critical.\n+     */\n+    private static final String TRUST_STORE_PASSWORD = \"titus123\";\n+\n+    public static SSLSocketFactory createRdsSSLSocketFactory() {\n+        try {\n+            KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n+            try (InputStream inputStream = RdsUtils.class.getClassLoader().getResourceAsStream(\"RDS-2019.truststore\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzMjUzNA=="}, "originalCommit": {"oid": "d7b7b770770f143b765b2f0165a03106759b8097"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3935, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}