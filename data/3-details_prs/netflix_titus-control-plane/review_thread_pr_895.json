{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MzgyMzk3", "number": 895, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzoyNzoyNFrOEWHAPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMDozNjoyOFrOEWWMFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjE4ODc4OnYy", "diffSide": "RIGHT", "path": "titus-server-runtime/src/main/java/com/netflix/titus/runtime/endpoint/admission/ServiceMeshImageSanitizer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzoyNzoyNFrOG9Pcww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODowODowOFrOG9jN5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg2OTQ0Mw==", "bodyText": "s/AdmissionValidator/AdmissionSanitizer/", "url": "https://github.com/Netflix/titus-control-plane/pull/895#discussion_r466869443", "createdAt": "2020-08-07T07:27:24Z", "author": {"login": "joshi-keyur"}, "path": "titus-server-runtime/src/main/java/com/netflix/titus/runtime/endpoint/admission/ServiceMeshImageSanitizer.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright 2018 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.runtime.endpoint.admission;\n+\n+import com.netflix.spectator.api.Registry;\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.Image;\n+import com.netflix.titus.api.jobmanager.model.job.JobDescriptor;\n+import com.netflix.titus.api.jobmanager.model.job.JobFunctions;\n+import com.netflix.titus.common.model.admission.AdmissionSanitizer;\n+import com.netflix.titus.common.model.admission.AdmissionValidator;\n+import com.netflix.titus.common.model.admission.ValidatorMetrics;\n+import com.netflix.titus.common.util.StringExt;\n+import com.netflix.titus.runtime.connector.registry.RegistryClient;\n+import com.netflix.titus.runtime.connector.registry.TitusRegistryException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Mono;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.time.Duration;\n+import java.util.function.UnaryOperator;\n+\n+/**\n+ * This {@link AdmissionValidator} implementation validates and sanitizes Job image information.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e10c2728c2e04a136cfe8b772e29412ddadc5be1"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MzMxNw==", "bodyText": "a33f69c", "url": "https://github.com/Netflix/titus-control-plane/pull/895#discussion_r467193317", "createdAt": "2020-08-07T18:08:08Z", "author": {"login": "alekar"}, "path": "titus-server-runtime/src/main/java/com/netflix/titus/runtime/endpoint/admission/ServiceMeshImageSanitizer.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright 2018 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.runtime.endpoint.admission;\n+\n+import com.netflix.spectator.api.Registry;\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.Image;\n+import com.netflix.titus.api.jobmanager.model.job.JobDescriptor;\n+import com.netflix.titus.api.jobmanager.model.job.JobFunctions;\n+import com.netflix.titus.common.model.admission.AdmissionSanitizer;\n+import com.netflix.titus.common.model.admission.AdmissionValidator;\n+import com.netflix.titus.common.model.admission.ValidatorMetrics;\n+import com.netflix.titus.common.util.StringExt;\n+import com.netflix.titus.runtime.connector.registry.RegistryClient;\n+import com.netflix.titus.runtime.connector.registry.TitusRegistryException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Mono;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.time.Duration;\n+import java.util.function.UnaryOperator;\n+\n+/**\n+ * This {@link AdmissionValidator} implementation validates and sanitizes Job image information.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg2OTQ0Mw=="}, "originalCommit": {"oid": "e10c2728c2e04a136cfe8b772e29412ddadc5be1"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODUyMDk5OnYy", "diffSide": "RIGHT", "path": "titus-server-gateway/src/test/java/com/netflix/titus/gateway/service/v3/internal/ServiceMeshImageSanitizerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxOTozNjoxMVrOG9lodQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxOTo1OTozMFrOG9mOaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIzMjg4NQ==", "bodyText": "Use CollectionsExt.asMap or Guave map builder.", "url": "https://github.com/Netflix/titus-control-plane/pull/895#discussion_r467232885", "createdAt": "2020-08-07T19:36:11Z", "author": {"login": "tbak"}, "path": "titus-server-gateway/src/test/java/com/netflix/titus/gateway/service/v3/internal/ServiceMeshImageSanitizerTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2018 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.gateway.service.v3.internal;\n+\n+import com.netflix.spectator.api.DefaultRegistry;\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.JobDescriptor;\n+import com.netflix.titus.common.model.sanitizer.ValidationError;\n+import com.netflix.titus.common.util.CollectionsExt;\n+import com.netflix.titus.runtime.connector.registry.RegistryClient;\n+import com.netflix.titus.runtime.connector.registry.TitusRegistryException;\n+import com.netflix.titus.runtime.endpoint.admission.ServiceMeshImageSanitizer;\n+import com.netflix.titus.runtime.endpoint.admission.ServiceMeshImageSanitizerConfiguration;\n+import com.netflix.titus.testkit.model.job.JobDescriptorGenerator;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.http.HttpStatus;\n+import reactor.core.publisher.Mono;\n+import reactor.test.StepVerifier;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class ServiceMeshImageSanitizerTest {\n+\n+    private static final String repo = \"proxydRepo/proxydImage\";\n+    private static final String tag = \"proxydTag\";\n+    private static final String digest = \"sha256:f9f5bb506406b80454a4255b33ed2e4383b9e4a32fb94d6f7e51922704e818fa\";\n+\n+    private final ServiceMeshImageSanitizerConfiguration configuration = mock(ServiceMeshImageSanitizerConfiguration.class);\n+    private final RegistryClient registryClient = mock(RegistryClient.class);\n+    private ServiceMeshImageSanitizer sanitizer;\n+\n+    private final String imageNameDigest = String.format(\"%s@%s\", repo, digest);\n+    private final Map<String, String> digestAttrs = new HashMap<String, String>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca976ce5761504e3633ce4091ddc6422aba6b8d5"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI0MjYwMw==", "bodyText": "abc5774", "url": "https://github.com/Netflix/titus-control-plane/pull/895#discussion_r467242603", "createdAt": "2020-08-07T19:59:30Z", "author": {"login": "alekar"}, "path": "titus-server-gateway/src/test/java/com/netflix/titus/gateway/service/v3/internal/ServiceMeshImageSanitizerTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2018 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.gateway.service.v3.internal;\n+\n+import com.netflix.spectator.api.DefaultRegistry;\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.JobDescriptor;\n+import com.netflix.titus.common.model.sanitizer.ValidationError;\n+import com.netflix.titus.common.util.CollectionsExt;\n+import com.netflix.titus.runtime.connector.registry.RegistryClient;\n+import com.netflix.titus.runtime.connector.registry.TitusRegistryException;\n+import com.netflix.titus.runtime.endpoint.admission.ServiceMeshImageSanitizer;\n+import com.netflix.titus.runtime.endpoint.admission.ServiceMeshImageSanitizerConfiguration;\n+import com.netflix.titus.testkit.model.job.JobDescriptorGenerator;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.http.HttpStatus;\n+import reactor.core.publisher.Mono;\n+import reactor.test.StepVerifier;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class ServiceMeshImageSanitizerTest {\n+\n+    private static final String repo = \"proxydRepo/proxydImage\";\n+    private static final String tag = \"proxydTag\";\n+    private static final String digest = \"sha256:f9f5bb506406b80454a4255b33ed2e4383b9e4a32fb94d6f7e51922704e818fa\";\n+\n+    private final ServiceMeshImageSanitizerConfiguration configuration = mock(ServiceMeshImageSanitizerConfiguration.class);\n+    private final RegistryClient registryClient = mock(RegistryClient.class);\n+    private ServiceMeshImageSanitizer sanitizer;\n+\n+    private final String imageNameDigest = String.format(\"%s@%s\", repo, digest);\n+    private final Map<String, String> digestAttrs = new HashMap<String, String>() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIzMjg4NQ=="}, "originalCommit": {"oid": "ca976ce5761504e3633ce4091ddc6422aba6b8d5"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODUyNDI2OnYy", "diffSide": "RIGHT", "path": "titus-server-gateway/src/test/java/com/netflix/titus/gateway/service/v3/internal/ServiceMeshImageSanitizerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxOTozNzoyNlrOG9lqdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxOTo1OTozOFrOG9mOrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIzMzM5OA==", "bodyText": "These fields could be static as the model entities are not mutable.", "url": "https://github.com/Netflix/titus-control-plane/pull/895#discussion_r467233398", "createdAt": "2020-08-07T19:37:26Z", "author": {"login": "tbak"}, "path": "titus-server-gateway/src/test/java/com/netflix/titus/gateway/service/v3/internal/ServiceMeshImageSanitizerTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2018 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.gateway.service.v3.internal;\n+\n+import com.netflix.spectator.api.DefaultRegistry;\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.JobDescriptor;\n+import com.netflix.titus.common.model.sanitizer.ValidationError;\n+import com.netflix.titus.common.util.CollectionsExt;\n+import com.netflix.titus.runtime.connector.registry.RegistryClient;\n+import com.netflix.titus.runtime.connector.registry.TitusRegistryException;\n+import com.netflix.titus.runtime.endpoint.admission.ServiceMeshImageSanitizer;\n+import com.netflix.titus.runtime.endpoint.admission.ServiceMeshImageSanitizerConfiguration;\n+import com.netflix.titus.testkit.model.job.JobDescriptorGenerator;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.http.HttpStatus;\n+import reactor.core.publisher.Mono;\n+import reactor.test.StepVerifier;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class ServiceMeshImageSanitizerTest {\n+\n+    private static final String repo = \"proxydRepo/proxydImage\";\n+    private static final String tag = \"proxydTag\";\n+    private static final String digest = \"sha256:f9f5bb506406b80454a4255b33ed2e4383b9e4a32fb94d6f7e51922704e818fa\";\n+\n+    private final ServiceMeshImageSanitizerConfiguration configuration = mock(ServiceMeshImageSanitizerConfiguration.class);\n+    private final RegistryClient registryClient = mock(RegistryClient.class);\n+    private ServiceMeshImageSanitizer sanitizer;\n+\n+    private final String imageNameDigest = String.format(\"%s@%s\", repo, digest);\n+    private final Map<String, String> digestAttrs = new HashMap<String, String>() {\n+        {\n+            put(JobAttributes.JOB_CONTAINER_ATTRIBUTE_SERVICEMESH_ENABLED, \"true\");\n+            put(JobAttributes.JOB_CONTAINER_ATTRIBUTE_SERVICEMESH_CONTAINER, imageNameDigest);\n+        }\n+    };\n+    private final JobDescriptor<?> jobDescriptorWithDigest = JobDescriptorGenerator.batchJobDescriptors()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca976ce5761504e3633ce4091ddc6422aba6b8d5"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI0MjY3MA==", "bodyText": "abc5774", "url": "https://github.com/Netflix/titus-control-plane/pull/895#discussion_r467242670", "createdAt": "2020-08-07T19:59:38Z", "author": {"login": "alekar"}, "path": "titus-server-gateway/src/test/java/com/netflix/titus/gateway/service/v3/internal/ServiceMeshImageSanitizerTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2018 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.gateway.service.v3.internal;\n+\n+import com.netflix.spectator.api.DefaultRegistry;\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.JobDescriptor;\n+import com.netflix.titus.common.model.sanitizer.ValidationError;\n+import com.netflix.titus.common.util.CollectionsExt;\n+import com.netflix.titus.runtime.connector.registry.RegistryClient;\n+import com.netflix.titus.runtime.connector.registry.TitusRegistryException;\n+import com.netflix.titus.runtime.endpoint.admission.ServiceMeshImageSanitizer;\n+import com.netflix.titus.runtime.endpoint.admission.ServiceMeshImageSanitizerConfiguration;\n+import com.netflix.titus.testkit.model.job.JobDescriptorGenerator;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.http.HttpStatus;\n+import reactor.core.publisher.Mono;\n+import reactor.test.StepVerifier;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class ServiceMeshImageSanitizerTest {\n+\n+    private static final String repo = \"proxydRepo/proxydImage\";\n+    private static final String tag = \"proxydTag\";\n+    private static final String digest = \"sha256:f9f5bb506406b80454a4255b33ed2e4383b9e4a32fb94d6f7e51922704e818fa\";\n+\n+    private final ServiceMeshImageSanitizerConfiguration configuration = mock(ServiceMeshImageSanitizerConfiguration.class);\n+    private final RegistryClient registryClient = mock(RegistryClient.class);\n+    private ServiceMeshImageSanitizer sanitizer;\n+\n+    private final String imageNameDigest = String.format(\"%s@%s\", repo, digest);\n+    private final Map<String, String> digestAttrs = new HashMap<String, String>() {\n+        {\n+            put(JobAttributes.JOB_CONTAINER_ATTRIBUTE_SERVICEMESH_ENABLED, \"true\");\n+            put(JobAttributes.JOB_CONTAINER_ATTRIBUTE_SERVICEMESH_CONTAINER, imageNameDigest);\n+        }\n+    };\n+    private final JobDescriptor<?> jobDescriptorWithDigest = JobDescriptorGenerator.batchJobDescriptors()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIzMzM5OA=="}, "originalCommit": {"oid": "ca976ce5761504e3633ce4091ddc6422aba6b8d5"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODUyODUxOnYy", "diffSide": "RIGHT", "path": "titus-server-runtime/src/main/java/com/netflix/titus/runtime/endpoint/admission/ServiceMeshImageSanitizer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxOTozOTowNlrOG9ls_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxOTo1OTo0NlrOG9mO5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIzNDA0NA==", "bodyText": "Check tagStart < 0?", "url": "https://github.com/Netflix/titus-control-plane/pull/895#discussion_r467234044", "createdAt": "2020-08-07T19:39:06Z", "author": {"login": "tbak"}, "path": "titus-server-runtime/src/main/java/com/netflix/titus/runtime/endpoint/admission/ServiceMeshImageSanitizer.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2018 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.runtime.endpoint.admission;\n+\n+import com.netflix.spectator.api.Registry;\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.Image;\n+import com.netflix.titus.api.jobmanager.model.job.JobDescriptor;\n+import com.netflix.titus.api.jobmanager.model.job.JobFunctions;\n+import com.netflix.titus.common.model.admission.AdmissionSanitizer;\n+import com.netflix.titus.common.model.admission.ValidatorMetrics;\n+import com.netflix.titus.common.util.StringExt;\n+import com.netflix.titus.runtime.connector.registry.RegistryClient;\n+import com.netflix.titus.runtime.connector.registry.TitusRegistryException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Mono;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.time.Duration;\n+import java.util.function.UnaryOperator;\n+\n+/**\n+ * This {@link AdmissionSanitizer} implementation validates and sanitizes service mesh image attributes.\n+ */\n+@Singleton\n+public class ServiceMeshImageSanitizer implements AdmissionSanitizer<JobDescriptor> {\n+    private static final Logger logger = LoggerFactory.getLogger(ServiceMeshImageSanitizer.class);\n+\n+    private final ServiceMeshImageSanitizerConfiguration configuration;\n+    private final RegistryClient registryClient;\n+    private final ValidatorMetrics validatorMetrics;\n+\n+    @Inject\n+    public ServiceMeshImageSanitizer(ServiceMeshImageSanitizerConfiguration configuration, RegistryClient registryClient, Registry spectatorRegistry) {\n+        this.configuration = configuration;\n+        this.registryClient = registryClient;\n+        this.validatorMetrics = new ValidatorMetrics(this.getClass().getSimpleName(), spectatorRegistry);\n+    }\n+\n+    /**\n+     * @return a {@link UnaryOperator} that adds a sanitized Image or job attributes when sanitization was skipped\n+     */\n+    @Override\n+    public Mono<UnaryOperator<JobDescriptor>> sanitize(JobDescriptor jobDescriptor) {\n+        if (isDisabled()) {\n+            return Mono.just(ServiceMeshImageSanitizer::skipSanitization);\n+        }\n+\n+        if (!serviceMeshIsEnabled(jobDescriptor)) {\n+            validatorMetrics.incrementValidationSkipped(\"serviceMeshNotEnabled\");\n+            return Mono.just(UnaryOperator.identity());\n+        }\n+\n+        if (!serviceMeshIsPinned(jobDescriptor)) {\n+            validatorMetrics.incrementValidationSkipped(\"serviceMeshNotPinned\");\n+            return Mono.just(UnaryOperator.identity());\n+        }\n+\n+        Image image = getServiceMeshImage(jobDescriptor);\n+        return sanitizeServiceMeshImage(image)\n+                .map(ServiceMeshImageSanitizer::setMeshImageFunction)\n+                .timeout(Duration.ofMillis(configuration.getServiceMeshImageValidationTimeoutMs()))\n+                .doOnSuccess(j -> validatorMetrics.incrementValidationSuccess(image.getName()))\n+                .onErrorReturn(throwable -> isAllowedException(throwable, image), ServiceMeshImageSanitizer::skipSanitization);\n+    }\n+\n+    private static UnaryOperator<JobDescriptor> setMeshImageFunction(Image image) {\n+        String imageName = toImageName(image);\n+        return jobDescriptor -> JobFunctions.appendJobDescriptorAttribute(jobDescriptor,\n+                JobAttributes.JOB_CONTAINER_ATTRIBUTE_SERVICEMESH_CONTAINER, imageName);\n+    }\n+\n+    private Mono<Image> sanitizeServiceMeshImage(Image image) {\n+        if (StringExt.isNotEmpty(image.getDigest())) {\n+            return checkImageDigestExist(image).then(Mono.empty());\n+        }\n+\n+        return registryClient.getImageDigest(image.getName(), image.getTag())\n+                .map(digest -> image.toBuilder().withDigest(digest).build());\n+    }\n+\n+    private Mono<String> checkImageDigestExist(Image image) {\n+        return registryClient.getImageDigest(image.getName(), image.getDigest());\n+    }\n+\n+    private boolean isDisabled() {\n+        return !configuration.isEnabled();\n+    }\n+\n+    private boolean serviceMeshIsEnabled(JobDescriptor<?> jobDescriptor) {\n+        String enabled = jobDescriptor\n+                .getAttributes()\n+                .get(JobAttributes.JOB_CONTAINER_ATTRIBUTE_SERVICEMESH_ENABLED);\n+\n+        if (enabled == null) {\n+            return false;\n+        }\n+\n+        return Boolean.parseBoolean(enabled);\n+    }\n+\n+    private boolean serviceMeshIsPinned(JobDescriptor<?> jobDescriptor) {\n+        return jobDescriptor\n+                .getAttributes()\n+                .containsKey(JobAttributes.JOB_CONTAINER_ATTRIBUTE_SERVICEMESH_CONTAINER);\n+    }\n+\n+    private Image getServiceMeshImage(JobDescriptor<?> jobDescriptor) {\n+        String image = jobDescriptor\n+                .getAttributes()\n+                .get(JobAttributes.JOB_CONTAINER_ATTRIBUTE_SERVICEMESH_CONTAINER);\n+\n+        return parseImageName(image);\n+    }\n+\n+    private static Image parseImageName(String imageName) {\n+        // Grammar\n+        //\n+        //  reference                       := name [ \":\" tag ] [ \"@\" digest ]\n+        //  name                            := [hostname '/'] component ['/' component]*\n+        //  hostname                        := hostcomponent ['.' hostcomponent]* [':' port-number]\n+        //  hostcomponent                   := /([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])/\n+        //  port-number                     := /[0-9]+/\n+        //  component                       := alpha-numeric [separator alpha-numeric]*\n+        //  alpha-numeric                   := /[a-z0-9]+/\n+        //  separator                       := /[_.]|__|[-]*/\n+        //\n+        //  tag                             := /[\\w][\\w.-]{0,127}/\n+        //\n+        //  digest                          := digest-algorithm \":\" digest-hex\n+        //  digest-algorithm                := digest-algorithm-component [ digest-algorithm-separator digest-algorithm-component ]\n+        //  digest-algorithm-separator      := /[+.-_]/\n+        //  digest-algorithm-component      := /[A-Za-z][A-Za-z0-9]*/\n+        //  digest-hex                      := /[0-9a-fA-F]{32,}/ ; At least 128 bit digest value\n+\n+\n+        int digestStart = imageName.lastIndexOf(\"@\");\n+        if (digestStart < 0) {\n+            int tagStart = imageName.lastIndexOf(\":\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca976ce5761504e3633ce4091ddc6422aba6b8d5"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI0MjcyNQ==", "bodyText": "abc5774", "url": "https://github.com/Netflix/titus-control-plane/pull/895#discussion_r467242725", "createdAt": "2020-08-07T19:59:46Z", "author": {"login": "alekar"}, "path": "titus-server-runtime/src/main/java/com/netflix/titus/runtime/endpoint/admission/ServiceMeshImageSanitizer.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2018 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.runtime.endpoint.admission;\n+\n+import com.netflix.spectator.api.Registry;\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.Image;\n+import com.netflix.titus.api.jobmanager.model.job.JobDescriptor;\n+import com.netflix.titus.api.jobmanager.model.job.JobFunctions;\n+import com.netflix.titus.common.model.admission.AdmissionSanitizer;\n+import com.netflix.titus.common.model.admission.ValidatorMetrics;\n+import com.netflix.titus.common.util.StringExt;\n+import com.netflix.titus.runtime.connector.registry.RegistryClient;\n+import com.netflix.titus.runtime.connector.registry.TitusRegistryException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Mono;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.time.Duration;\n+import java.util.function.UnaryOperator;\n+\n+/**\n+ * This {@link AdmissionSanitizer} implementation validates and sanitizes service mesh image attributes.\n+ */\n+@Singleton\n+public class ServiceMeshImageSanitizer implements AdmissionSanitizer<JobDescriptor> {\n+    private static final Logger logger = LoggerFactory.getLogger(ServiceMeshImageSanitizer.class);\n+\n+    private final ServiceMeshImageSanitizerConfiguration configuration;\n+    private final RegistryClient registryClient;\n+    private final ValidatorMetrics validatorMetrics;\n+\n+    @Inject\n+    public ServiceMeshImageSanitizer(ServiceMeshImageSanitizerConfiguration configuration, RegistryClient registryClient, Registry spectatorRegistry) {\n+        this.configuration = configuration;\n+        this.registryClient = registryClient;\n+        this.validatorMetrics = new ValidatorMetrics(this.getClass().getSimpleName(), spectatorRegistry);\n+    }\n+\n+    /**\n+     * @return a {@link UnaryOperator} that adds a sanitized Image or job attributes when sanitization was skipped\n+     */\n+    @Override\n+    public Mono<UnaryOperator<JobDescriptor>> sanitize(JobDescriptor jobDescriptor) {\n+        if (isDisabled()) {\n+            return Mono.just(ServiceMeshImageSanitizer::skipSanitization);\n+        }\n+\n+        if (!serviceMeshIsEnabled(jobDescriptor)) {\n+            validatorMetrics.incrementValidationSkipped(\"serviceMeshNotEnabled\");\n+            return Mono.just(UnaryOperator.identity());\n+        }\n+\n+        if (!serviceMeshIsPinned(jobDescriptor)) {\n+            validatorMetrics.incrementValidationSkipped(\"serviceMeshNotPinned\");\n+            return Mono.just(UnaryOperator.identity());\n+        }\n+\n+        Image image = getServiceMeshImage(jobDescriptor);\n+        return sanitizeServiceMeshImage(image)\n+                .map(ServiceMeshImageSanitizer::setMeshImageFunction)\n+                .timeout(Duration.ofMillis(configuration.getServiceMeshImageValidationTimeoutMs()))\n+                .doOnSuccess(j -> validatorMetrics.incrementValidationSuccess(image.getName()))\n+                .onErrorReturn(throwable -> isAllowedException(throwable, image), ServiceMeshImageSanitizer::skipSanitization);\n+    }\n+\n+    private static UnaryOperator<JobDescriptor> setMeshImageFunction(Image image) {\n+        String imageName = toImageName(image);\n+        return jobDescriptor -> JobFunctions.appendJobDescriptorAttribute(jobDescriptor,\n+                JobAttributes.JOB_CONTAINER_ATTRIBUTE_SERVICEMESH_CONTAINER, imageName);\n+    }\n+\n+    private Mono<Image> sanitizeServiceMeshImage(Image image) {\n+        if (StringExt.isNotEmpty(image.getDigest())) {\n+            return checkImageDigestExist(image).then(Mono.empty());\n+        }\n+\n+        return registryClient.getImageDigest(image.getName(), image.getTag())\n+                .map(digest -> image.toBuilder().withDigest(digest).build());\n+    }\n+\n+    private Mono<String> checkImageDigestExist(Image image) {\n+        return registryClient.getImageDigest(image.getName(), image.getDigest());\n+    }\n+\n+    private boolean isDisabled() {\n+        return !configuration.isEnabled();\n+    }\n+\n+    private boolean serviceMeshIsEnabled(JobDescriptor<?> jobDescriptor) {\n+        String enabled = jobDescriptor\n+                .getAttributes()\n+                .get(JobAttributes.JOB_CONTAINER_ATTRIBUTE_SERVICEMESH_ENABLED);\n+\n+        if (enabled == null) {\n+            return false;\n+        }\n+\n+        return Boolean.parseBoolean(enabled);\n+    }\n+\n+    private boolean serviceMeshIsPinned(JobDescriptor<?> jobDescriptor) {\n+        return jobDescriptor\n+                .getAttributes()\n+                .containsKey(JobAttributes.JOB_CONTAINER_ATTRIBUTE_SERVICEMESH_CONTAINER);\n+    }\n+\n+    private Image getServiceMeshImage(JobDescriptor<?> jobDescriptor) {\n+        String image = jobDescriptor\n+                .getAttributes()\n+                .get(JobAttributes.JOB_CONTAINER_ATTRIBUTE_SERVICEMESH_CONTAINER);\n+\n+        return parseImageName(image);\n+    }\n+\n+    private static Image parseImageName(String imageName) {\n+        // Grammar\n+        //\n+        //  reference                       := name [ \":\" tag ] [ \"@\" digest ]\n+        //  name                            := [hostname '/'] component ['/' component]*\n+        //  hostname                        := hostcomponent ['.' hostcomponent]* [':' port-number]\n+        //  hostcomponent                   := /([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])/\n+        //  port-number                     := /[0-9]+/\n+        //  component                       := alpha-numeric [separator alpha-numeric]*\n+        //  alpha-numeric                   := /[a-z0-9]+/\n+        //  separator                       := /[_.]|__|[-]*/\n+        //\n+        //  tag                             := /[\\w][\\w.-]{0,127}/\n+        //\n+        //  digest                          := digest-algorithm \":\" digest-hex\n+        //  digest-algorithm                := digest-algorithm-component [ digest-algorithm-separator digest-algorithm-component ]\n+        //  digest-algorithm-separator      := /[+.-_]/\n+        //  digest-algorithm-component      := /[A-Za-z][A-Za-z0-9]*/\n+        //  digest-hex                      := /[0-9a-fA-F]{32,}/ ; At least 128 bit digest value\n+\n+\n+        int digestStart = imageName.lastIndexOf(\"@\");\n+        if (digestStart < 0) {\n+            int tagStart = imageName.lastIndexOf(\":\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIzNDA0NA=="}, "originalCommit": {"oid": "ca976ce5761504e3633ce4091ddc6422aba6b8d5"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODY3NjY5OnYy", "diffSide": "RIGHT", "path": "titus-server-runtime/src/main/java/com/netflix/titus/runtime/endpoint/admission/ServiceMeshImageSanitizer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMDozNjoyOFrOG9nHdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTowMTo0MVrOG9ntxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI1NzIwNA==", "bodyText": "@tbak I want to call this change to your attention, in case you missed it", "url": "https://github.com/Netflix/titus-control-plane/pull/895#discussion_r467257204", "createdAt": "2020-08-07T20:36:28Z", "author": {"login": "alekar"}, "path": "titus-server-runtime/src/main/java/com/netflix/titus/runtime/endpoint/admission/ServiceMeshImageSanitizer.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2018 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.runtime.endpoint.admission;\n+\n+import com.netflix.spectator.api.Registry;\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.Image;\n+import com.netflix.titus.api.jobmanager.model.job.JobDescriptor;\n+import com.netflix.titus.api.jobmanager.model.job.JobFunctions;\n+import com.netflix.titus.common.model.admission.AdmissionSanitizer;\n+import com.netflix.titus.common.model.admission.ValidatorMetrics;\n+import com.netflix.titus.common.util.StringExt;\n+import com.netflix.titus.runtime.connector.registry.RegistryClient;\n+import com.netflix.titus.runtime.connector.registry.TitusRegistryException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Mono;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.time.Duration;\n+import java.util.function.UnaryOperator;\n+\n+/**\n+ * This {@link AdmissionSanitizer} implementation validates and sanitizes service mesh image attributes.\n+ */\n+@Singleton\n+public class ServiceMeshImageSanitizer implements AdmissionSanitizer<JobDescriptor> {\n+    private static final Logger logger = LoggerFactory.getLogger(ServiceMeshImageSanitizer.class);\n+\n+    private final ServiceMeshImageSanitizerConfiguration configuration;\n+    private final RegistryClient registryClient;\n+    private final ValidatorMetrics validatorMetrics;\n+\n+    @Inject\n+    public ServiceMeshImageSanitizer(ServiceMeshImageSanitizerConfiguration configuration, RegistryClient registryClient, Registry spectatorRegistry) {\n+        this.configuration = configuration;\n+        this.registryClient = registryClient;\n+        this.validatorMetrics = new ValidatorMetrics(this.getClass().getSimpleName(), spectatorRegistry);\n+    }\n+\n+    /**\n+     * @return a {@link UnaryOperator} that adds a sanitized Image or job attributes when sanitization was skipped\n+     */\n+    @Override\n+    public Mono<UnaryOperator<JobDescriptor>> sanitize(JobDescriptor jobDescriptor) {\n+        if (isDisabled()) {\n+            return Mono.just(ServiceMeshImageSanitizer::skipSanitization);\n+        }\n+\n+        if (!serviceMeshIsEnabled(jobDescriptor)) {\n+            validatorMetrics.incrementValidationSkipped(\"serviceMeshNotEnabled\");\n+            return Mono.just(UnaryOperator.identity());\n+        }\n+\n+        if (!serviceMeshIsPinned(jobDescriptor)) {\n+            validatorMetrics.incrementValidationSkipped(\"serviceMeshNotPinned\");\n+            return Mono.just(UnaryOperator.identity());\n+        }\n+\n+        try {\n+            Image image = getServiceMeshImage(jobDescriptor);\n+            return sanitizeServiceMeshImage(image)\n+                    .map(ServiceMeshImageSanitizer::setMeshImageFunction)\n+                    .timeout(Duration.ofMillis(configuration.getServiceMeshImageValidationTimeoutMs()))\n+                    .doOnSuccess(j -> validatorMetrics.incrementValidationSuccess(image.getName()))\n+                    .onErrorReturn(throwable -> isAllowedException(throwable, image), ServiceMeshImageSanitizer::skipSanitization);\n+        } catch (Throwable t) {\n+            return Mono.error(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f1157bbcb971af7e30ec978798f6bc9a54930ba"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI2NzAxMw==", "bodyText": "Yes, I have seen it. It is a good safety net.", "url": "https://github.com/Netflix/titus-control-plane/pull/895#discussion_r467267013", "createdAt": "2020-08-07T21:01:41Z", "author": {"login": "tbak"}, "path": "titus-server-runtime/src/main/java/com/netflix/titus/runtime/endpoint/admission/ServiceMeshImageSanitizer.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2018 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.runtime.endpoint.admission;\n+\n+import com.netflix.spectator.api.Registry;\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.Image;\n+import com.netflix.titus.api.jobmanager.model.job.JobDescriptor;\n+import com.netflix.titus.api.jobmanager.model.job.JobFunctions;\n+import com.netflix.titus.common.model.admission.AdmissionSanitizer;\n+import com.netflix.titus.common.model.admission.ValidatorMetrics;\n+import com.netflix.titus.common.util.StringExt;\n+import com.netflix.titus.runtime.connector.registry.RegistryClient;\n+import com.netflix.titus.runtime.connector.registry.TitusRegistryException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Mono;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.time.Duration;\n+import java.util.function.UnaryOperator;\n+\n+/**\n+ * This {@link AdmissionSanitizer} implementation validates and sanitizes service mesh image attributes.\n+ */\n+@Singleton\n+public class ServiceMeshImageSanitizer implements AdmissionSanitizer<JobDescriptor> {\n+    private static final Logger logger = LoggerFactory.getLogger(ServiceMeshImageSanitizer.class);\n+\n+    private final ServiceMeshImageSanitizerConfiguration configuration;\n+    private final RegistryClient registryClient;\n+    private final ValidatorMetrics validatorMetrics;\n+\n+    @Inject\n+    public ServiceMeshImageSanitizer(ServiceMeshImageSanitizerConfiguration configuration, RegistryClient registryClient, Registry spectatorRegistry) {\n+        this.configuration = configuration;\n+        this.registryClient = registryClient;\n+        this.validatorMetrics = new ValidatorMetrics(this.getClass().getSimpleName(), spectatorRegistry);\n+    }\n+\n+    /**\n+     * @return a {@link UnaryOperator} that adds a sanitized Image or job attributes when sanitization was skipped\n+     */\n+    @Override\n+    public Mono<UnaryOperator<JobDescriptor>> sanitize(JobDescriptor jobDescriptor) {\n+        if (isDisabled()) {\n+            return Mono.just(ServiceMeshImageSanitizer::skipSanitization);\n+        }\n+\n+        if (!serviceMeshIsEnabled(jobDescriptor)) {\n+            validatorMetrics.incrementValidationSkipped(\"serviceMeshNotEnabled\");\n+            return Mono.just(UnaryOperator.identity());\n+        }\n+\n+        if (!serviceMeshIsPinned(jobDescriptor)) {\n+            validatorMetrics.incrementValidationSkipped(\"serviceMeshNotPinned\");\n+            return Mono.just(UnaryOperator.identity());\n+        }\n+\n+        try {\n+            Image image = getServiceMeshImage(jobDescriptor);\n+            return sanitizeServiceMeshImage(image)\n+                    .map(ServiceMeshImageSanitizer::setMeshImageFunction)\n+                    .timeout(Duration.ofMillis(configuration.getServiceMeshImageValidationTimeoutMs()))\n+                    .doOnSuccess(j -> validatorMetrics.incrementValidationSuccess(image.getName()))\n+                    .onErrorReturn(throwable -> isAllowedException(throwable, image), ServiceMeshImageSanitizer::skipSanitization);\n+        } catch (Throwable t) {\n+            return Mono.error(t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI1NzIwNA=="}, "originalCommit": {"oid": "1f1157bbcb971af7e30ec978798f6bc9a54930ba"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4003, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}