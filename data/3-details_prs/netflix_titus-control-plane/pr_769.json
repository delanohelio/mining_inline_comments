{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MDcxMzkz", "number": 769, "title": "process C* resultsets outside of C* driver threads", "bodyText": "This prevents async (on demand) fetching of ResultSet pages blocking C* driver threads.\nThe Datastax driver has a deadlock detector that complains (throws an exception) when pagination of resultsets would cause a deadlock, particularly when results are processed in C* driver threads and blocking the C* driver event loop.", "createdAt": "2020-02-13T20:25:39Z", "url": "https://github.com/Netflix/titus-control-plane/pull/769", "merged": true, "mergeCommit": {"oid": "3a84b7253c987c20bb086fe66c1d8594189b525c"}, "closed": true, "closedAt": "2020-02-13T21:46:53Z", "author": {"login": "fabiokung"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcEA3EqAH2gAyMzc1MDcxMzkzOmVkMDlhZDZlYTFiYTVlZjAxYjAwNjZkYjIzOTZkZDA4NWMxOTNkNzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcEU2GFAFqTM1OTE3NDgyMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ed09ad6ea1ba5ef01b0066db2396dd085c193d72", "author": {"user": {"login": "fabiokung", "name": "Fabio Kung"}}, "url": "https://github.com/Netflix/titus-control-plane/commit/ed09ad6ea1ba5ef01b0066db2396dd085c193d72", "committedDate": "2020-02-13T20:21:56Z", "message": "process C* resultsets outside of C* driver threads"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NTM5MTA1", "url": "https://github.com/Netflix/titus-control-plane/pull/769#pullrequestreview-358539105", "createdAt": "2020-02-13T20:46:57Z", "commit": {"oid": "ed09ad6ea1ba5ef01b0066db2396dd085c193d72"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NTQ2MjQw", "url": "https://github.com/Netflix/titus-control-plane/pull/769#pullrequestreview-358546240", "createdAt": "2020-02-13T20:58:44Z", "commit": {"oid": "ed09ad6ea1ba5ef01b0066db2396dd085c193d72"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NTczODkx", "url": "https://github.com/Netflix/titus-control-plane/pull/769#pullrequestreview-358573891", "createdAt": "2020-02-13T21:45:12Z", "commit": {"oid": "ed09ad6ea1ba5ef01b0066db2396dd085c193d72"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MTc0ODIz", "url": "https://github.com/Netflix/titus-control-plane/pull/769#pullrequestreview-359174823", "createdAt": "2020-02-14T19:38:46Z", "commit": {"oid": "ed09ad6ea1ba5ef01b0066db2396dd085c193d72"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOTozODo0NlrOFqBjeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOTozODo0NlrOFqBjeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwOTk3OA==", "bodyText": "Minor - but potentially a common 'fetchAllPages' method that takes scheduler as a parameter could simplify both of these test case code", "url": "https://github.com/Netflix/titus-control-plane/pull/769#discussion_r379609978", "createdAt": "2020-02-14T19:38:46Z", "author": {"login": "amit-git"}, "path": "titus-ext/cassandra/src/test/java/com/netflix/titus/ext/cassandra/store/CassStoreHelperTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.ext.cassandra.store;\n+\n+import java.util.Arrays;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.datastax.driver.core.PreparedStatement;\n+import com.datastax.driver.core.ResultSet;\n+import com.datastax.driver.core.Session;\n+import org.cassandraunit.CassandraCQLUnit;\n+import org.cassandraunit.dataset.cql.ClassPathCQLDataSet;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import rx.Observable;\n+import rx.schedulers.Schedulers;\n+\n+import static com.datastax.driver.core.querybuilder.QueryBuilder.bindMarker;\n+import static com.datastax.driver.core.querybuilder.QueryBuilder.insertInto;\n+import static com.datastax.driver.core.querybuilder.QueryBuilder.select;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class CassStoreHelperTest {\n+\n+    private static final long STARTUP_TIMEOUT = 30_000L;\n+\n+    /**\n+     * As Cassandra uses memory mapped files there are sometimes issues with virtual disks storing the project files.\n+     * To solve this issue, we relocate the default embedded Cassandra folder to /var/tmp/embeddedCassandra.\n+     */\n+    private static final String CONFIGURATION_FILE_NAME = \"relocated-cassandra.yaml\";\n+\n+    @Rule\n+    public CassandraCQLUnit cassandraCQLUnit = new CassandraCQLUnit(\n+            new ClassPathCQLDataSet(\"tables.cql\", \"titus_integration_tests\"),\n+            CONFIGURATION_FILE_NAME,\n+            STARTUP_TIMEOUT\n+    );\n+\n+    @Test\n+    public void paginatedResultSetCanBeFetchedAsync() {\n+        int numberOfRecords = 500;\n+        int numberOfPages = 10;\n+        Session session = cassandraCQLUnit.getSession();\n+        PreparedStatement insertStmt = session.prepare(insertInto(\"app_scale_jobs\").values(\n+                Arrays.asList(\"job_id\", \"ref_id\"),\n+                Arrays.asList(bindMarker(), bindMarker())\n+        ));\n+\n+        for (int i = 0; i < numberOfRecords; i++) {\n+            ResultSet resultSet = session.execute(insertStmt.bind(\"job-\" + i, UUID.randomUUID()));\n+            assertThat(resultSet.wasApplied()).isTrue();\n+        }\n+\n+        PreparedStatement loadStmt = session.prepare(select(\"job_id\", \"ref_id\").from(\"app_scale_jobs\"));\n+        Observable<ResultSet> results = new CassStoreHelper(session, Schedulers.io()).execute(loadStmt.bind()\n+                // force pagination, and pages to be fetched on demand as the ResultSet is iterated on\n+                .setFetchSize(numberOfRecords / numberOfPages));\n+\n+        results.doOnNext(rows -> rows.forEach(row ->\n+                assertThat(row.getString(0)).startsWith(\"job-\"))\n+        ).toCompletable().await(1, TimeUnit.MINUTES);\n+    }\n+\n+    @Test(expected = IllegalStateException.class /* the datastax driver complains that page fetching will cause a deadlock */ )\n+    public void paginatedResultInCassandraThreadsThrowsException() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed09ad6ea1ba5ef01b0066db2396dd085c193d72"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 616, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}