{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwODM1NDQ5", "number": 937, "title": "node taints condition check", "bodyText": "Node taints check\nAs part of the relocation service, we have a way to enable task terminations based on a configurable set of node conditions. This change is adding a configurable set of node taints that could be enabled to effect immediate task terminations. It's adding the following options to configure this behavior\n\nbadTaintsPattern - a regular expression identifying undesirable node taints as reported by kubernetes\nnodeTaintTransitionTimeThresholdSeconds - it denotes (in seconds) the least amount of time the node should sustain a taint before being eligible for task terminations", "createdAt": "2020-10-09T21:48:00Z", "url": "https://github.com/Netflix/titus-control-plane/pull/937", "merged": true, "mergeCommit": {"oid": "51b23f597a2ab801d6144aef5fb8f3f561d5fab7"}, "closed": true, "closedAt": "2020-10-12T17:55:53Z", "author": {"login": "amit-git"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQ9QAdgH2gAyNTAwODM1NDQ5Ojg1NGJhYzk0NDA5ZjcxOWYzOTg1ZmY5NGVkY2I4NDkxYzJjOWYwNmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdR3cocAH2gAyNTAwODM1NDQ5OmRiYTRhNjNiMmY1ZGU5MzIyN2ZkYzljZGM1ZDRjMGE1ZDg5N2IzMDE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "854bac94409f719f3985ff94edcb8491c2c9f06f", "author": {"user": {"login": "amit-git", "name": null}}, "url": "https://github.com/Netflix/titus-control-plane/commit/854bac94409f719f3985ff94edcb8491c2c9f06f", "committedDate": "2020-10-09T21:41:43Z", "message": "node taints condition check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDE0MzI0", "url": "https://github.com/Netflix/titus-control-plane/pull/937#pullrequestreview-506014324", "createdAt": "2020-10-09T22:16:57Z", "commit": {"oid": "854bac94409f719f3985ff94edcb8491c2c9f06f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDEyNzY1", "url": "https://github.com/Netflix/titus-control-plane/pull/937#pullrequestreview-506012765", "createdAt": "2020-10-09T22:11:20Z", "commit": {"oid": "854bac94409f719f3985ff94edcb8491c2c9f06f"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMjoxMToyMFrOHfZvZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMjoxNjo0MVrOHfZzoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4OTYzOA==", "bodyText": "isNodeConditionBad -> isNodeBad", "url": "https://github.com/Netflix/titus-control-plane/pull/937#discussion_r502689638", "createdAt": "2020-10-09T22:11:20Z", "author": {"login": "corindwyer"}, "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/connector/AgentManagementNodeDataResolver.java", "diffHunk": "@@ -95,9 +99,15 @@ private Node toNode(AgentInstanceGroup serverGroup, AgentInstance instance) {\n         boolean serverGroupRelocationRequired = serverGroup.getLifecycleStatus().getState() == InstanceGroupLifecycleState.Removable;\n         boolean isNodeConditionBad = false;\n         V1Node k8sNode = k8sNodeIndexer.getByKey(instance.getId());\n+\n         if (k8sNode != null) {\n-            isNodeConditionBad = NodePredicates.hasBadCondition(k8sNode, badConditionMatcherFactory,\n+            boolean hasBadNodeCondition = NodePredicates.hasBadCondition(k8sNode, badConditionMatcherFactory,\n                     relocationConfiguration.getNodeConditionTransitionTimeThresholdSeconds());\n+\n+            boolean hasBadTaint = NodePredicates.hasBadTaint(k8sNode, badTaintMatcherFactory,\n+                    relocationConfiguration.getNodeTaintTransitionTimeThresholdSeconds());\n+\n+            isNodeConditionBad = hasBadNodeCondition || hasBadTaint;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "854bac94409f719f3985ff94edcb8491c2c9f06f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY5MDE5Ng==", "bodyText": "I prefer Boolean.TRUE.toString() over Boolean.toString(true). I also use a static import to get rid of the Boolean.", "url": "https://github.com/Netflix/titus-control-plane/pull/937#discussion_r502690196", "createdAt": "2020-10-09T22:14:18Z", "author": {"login": "corindwyer"}, "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/connector/NodePredicates.java", "diffHunk": "@@ -64,11 +65,39 @@ static boolean hasBadCondition(V1Node node, Function<String, Matcher> badConditi\n         return false;\n     }\n \n+    @VisibleForTesting\n+    static boolean hasBadTaint(V1Node node, Function<String, Matcher> badTaintExpression,\n+                                   int nodeTaintTransitionTimeThresholdSeconds) {\n+        if (node.getSpec() != null && node.getSpec().getTaints() != null) {\n+            return node.getSpec().getTaints().stream()\n+                    .anyMatch(v1Taint -> badTaintExpression.apply(v1Taint.getKey()).matches() &&\n+                            matchesTaintValueIfAvailable(v1Taint, Boolean.toString(true)) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "854bac94409f719f3985ff94edcb8491c2c9f06f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY5MDY3NQ==", "bodyText": "by using the Titus commons Clock here, you will have more flexibility over injecting in and manipulating the time.", "url": "https://github.com/Netflix/titus-control-plane/pull/937#discussion_r502690675", "createdAt": "2020-10-09T22:16:29Z", "author": {"login": "corindwyer"}, "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/connector/NodePredicates.java", "diffHunk": "@@ -64,11 +65,39 @@ static boolean hasBadCondition(V1Node node, Function<String, Matcher> badConditi\n         return false;\n     }\n \n+    @VisibleForTesting\n+    static boolean hasBadTaint(V1Node node, Function<String, Matcher> badTaintExpression,\n+                                   int nodeTaintTransitionTimeThresholdSeconds) {\n+        if (node.getSpec() != null && node.getSpec().getTaints() != null) {\n+            return node.getSpec().getTaints().stream()\n+                    .anyMatch(v1Taint -> badTaintExpression.apply(v1Taint.getKey()).matches() &&\n+                            matchesTaintValueIfAvailable(v1Taint, Boolean.toString(true)) &&\n+                            !isTransitionedRecently(v1Taint.getTimeAdded(), nodeTaintTransitionTimeThresholdSeconds));\n+        }\n+        return false;\n+    }\n+\n+    static boolean matchesTaintValueIfAvailable(V1Taint taint, String value) {\n+        if (taint.getValue() != null) {\n+            return taint.getValue().equalsIgnoreCase(value);\n+        }\n+        return true;\n+    }\n+\n+\n     static boolean isNodeConditionTransitionedRecently(V1NodeCondition nodeCondition, int thresholdSeconds) {\n         DateTime threshold = DateTime.now().minusSeconds(thresholdSeconds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "854bac94409f719f3985ff94edcb8491c2c9f06f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY5MDcyMQ==", "bodyText": "same as above.", "url": "https://github.com/Netflix/titus-control-plane/pull/937#discussion_r502690721", "createdAt": "2020-10-09T22:16:41Z", "author": {"login": "corindwyer"}, "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/connector/NodePredicates.java", "diffHunk": "@@ -64,11 +65,39 @@ static boolean hasBadCondition(V1Node node, Function<String, Matcher> badConditi\n         return false;\n     }\n \n+    @VisibleForTesting\n+    static boolean hasBadTaint(V1Node node, Function<String, Matcher> badTaintExpression,\n+                                   int nodeTaintTransitionTimeThresholdSeconds) {\n+        if (node.getSpec() != null && node.getSpec().getTaints() != null) {\n+            return node.getSpec().getTaints().stream()\n+                    .anyMatch(v1Taint -> badTaintExpression.apply(v1Taint.getKey()).matches() &&\n+                            matchesTaintValueIfAvailable(v1Taint, Boolean.toString(true)) &&\n+                            !isTransitionedRecently(v1Taint.getTimeAdded(), nodeTaintTransitionTimeThresholdSeconds));\n+        }\n+        return false;\n+    }\n+\n+    static boolean matchesTaintValueIfAvailable(V1Taint taint, String value) {\n+        if (taint.getValue() != null) {\n+            return taint.getValue().equalsIgnoreCase(value);\n+        }\n+        return true;\n+    }\n+\n+\n     static boolean isNodeConditionTransitionedRecently(V1NodeCondition nodeCondition, int thresholdSeconds) {\n         DateTime threshold = DateTime.now().minusSeconds(thresholdSeconds);\n         if (nodeCondition.getLastTransitionTime() != null) {\n             return nodeCondition.getLastTransitionTime().isAfter(threshold);\n         }\n         return false;\n     }\n+\n+    static boolean isTransitionedRecently(DateTime nodeTransitionTime, int thresholdSeconds) {\n+        DateTime threshold = DateTime.now().minusSeconds(thresholdSeconds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "854bac94409f719f3985ff94edcb8491c2c9f06f"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dba4a63b2f5de93227fdc9cdc5d4c0a5d897b301", "author": {"user": {"login": "amit-git", "name": null}}, "url": "https://github.com/Netflix/titus-control-plane/commit/dba4a63b2f5de93227fdc9cdc5d4c0a5d897b301", "committedDate": "2020-10-12T17:30:00Z", "message": "minor fixes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 453, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}