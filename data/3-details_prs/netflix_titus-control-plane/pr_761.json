{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNTMyOTA1", "number": 761, "title": "Initial kube-scheduler integration", "bodyText": "The newly introduced components are turned off by default. More work is required to fully support this integration.", "createdAt": "2020-02-07T18:01:18Z", "url": "https://github.com/Netflix/titus-control-plane/pull/761", "merged": true, "mergeCommit": {"oid": "20311ce0268315b7f2c0c91ede5fa6142462275a"}, "closed": true, "closedAt": "2020-02-10T17:38:43Z", "author": {"login": "tbak"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcCDhe0gFqTM1NTM0MzM3Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDArVJgFqTM1NjEyOTI2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MzQzMzcz", "url": "https://github.com/Netflix/titus-control-plane/pull/761#pullrequestreview-355343373", "createdAt": "2020-02-07T18:16:53Z", "commit": {"oid": "790047d79f62eb96fba75c9de522bc124146fe30"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODoxNjo1M1rOFnF0Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODoxNjo1M1rOFnF0Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzNDAxOA==", "bodyText": "this will block the Reactor thread, consider using the async version, or forcing it to be on Schedulers#elastic() or our own ExecutorService thread pool", "url": "https://github.com/Netflix/titus-control-plane/pull/761#discussion_r376534018", "createdAt": "2020-02-07T18:16:53Z", "author": {"login": "fabiokung"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultDirectKubeApiServerIntegrator.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.master.mesos.kubeapiserver.direct;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import javax.annotation.PreDestroy;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.jobmanager.model.job.Task;\n+import com.netflix.titus.common.util.guice.annotation.Activator;\n+import com.netflix.titus.master.mesos.kubeapiserver.direct.model.PodEvent;\n+import io.kubernetes.client.ApiClient;\n+import io.kubernetes.client.ApiException;\n+import io.kubernetes.client.apis.CoreV1Api;\n+import io.kubernetes.client.informer.ResourceEventHandler;\n+import io.kubernetes.client.informer.SharedIndexInformer;\n+import io.kubernetes.client.informer.SharedInformerFactory;\n+import io.kubernetes.client.models.V1Pod;\n+import io.kubernetes.client.models.V1PodList;\n+import io.kubernetes.client.util.CallGeneratorParams;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import static com.netflix.titus.master.mesos.kubeapiserver.KubeUtil.createSharedInformerFactory;\n+\n+@Singleton\n+public class DefaultDirectKubeApiServerIntegrator implements DirectKubeApiServerIntegrator {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultDirectKubeApiServerIntegrator.class);\n+\n+    private static final String KUBERNETES_NAMESPACE = \"default\";\n+\n+    private final DirectKubeConfiguration configuration;\n+\n+    private final ApiClient apiClient;\n+    private final CoreV1Api coreV1Api;\n+    private final TaskToPodConverter taskToPodConverter;\n+\n+    private volatile SharedInformerFactory sharedInformerFactory;\n+    private volatile SharedIndexInformer<V1Pod> podInformer;\n+\n+    private final ConcurrentMap<String, V1Pod> pods = new ConcurrentHashMap<>();\n+\n+    @Inject\n+    public DefaultDirectKubeApiServerIntegrator(DirectKubeConfiguration configuration,\n+                                                ApiClient apiClient,\n+                                                TaskToPodConverter taskToPodConverter) {\n+        this.configuration = configuration;\n+        this.apiClient = apiClient;\n+        this.coreV1Api = new CoreV1Api(apiClient);\n+        this.taskToPodConverter = taskToPodConverter;\n+    }\n+\n+    @Activator\n+    public void enterActiveMode() {\n+        this.sharedInformerFactory = createSharedInformerFactory(\n+                \"kube-api-server-integrator-shared-informer-\",\n+                apiClient\n+        );\n+        this.podInformer = createPodInformer(sharedInformerFactory, coreV1Api);\n+        sharedInformerFactory.startAllRegisteredInformers();\n+    }\n+\n+    @PreDestroy\n+    public void shutdown() {\n+        if (sharedInformerFactory != null) {\n+            sharedInformerFactory.stopAllRegisteredInformers();\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, V1Pod> getPods() {\n+        return new HashMap<>(pods);\n+    }\n+\n+    @Override\n+    public Mono<V1Pod> launchTask(Job job, Task task) {\n+        return Mono.defer(() -> {\n+            try {\n+                V1Pod v1Pod = taskToPodConverter.apply(job, task);\n+                logger.info(\"creating pod: {}\", v1Pod);\n+                coreV1Api.createNamespacedPod(KUBERNETES_NAMESPACE, v1Pod, null, null, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "790047d79f62eb96fba75c9de522bc124146fe30"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NDM0OTQ3", "url": "https://github.com/Netflix/titus-control-plane/pull/761#pullrequestreview-355434947", "createdAt": "2020-02-07T21:02:50Z", "commit": {"oid": "790047d79f62eb96fba75c9de522bc124146fe30"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMTowMjo1MFrOFnKNjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMTowMjo1MFrOFnKNjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYwNjA5NQ==", "bodyText": "need to eventually add StartInitiated", "url": "https://github.com/Netflix/titus-control-plane/pull/761#discussion_r376606095", "createdAt": "2020-02-07T21:02:50Z", "author": {"login": "corindwyer"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.master.jobmanager.service;\n+\n+import java.time.Duration;\n+import java.util.Optional;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.jobmanager.model.job.Task;\n+import com.netflix.titus.api.jobmanager.model.job.TaskState;\n+import com.netflix.titus.api.jobmanager.model.job.TaskStatus;\n+import com.netflix.titus.api.jobmanager.service.V3JobOperations;\n+import com.netflix.titus.api.model.callmetadata.CallMetadata;\n+import com.netflix.titus.common.util.CollectionsExt;\n+import com.netflix.titus.common.util.guice.annotation.Activator;\n+import com.netflix.titus.common.util.rx.ReactorExt;\n+import com.netflix.titus.common.util.tuple.Pair;\n+import com.netflix.titus.master.mesos.kubeapiserver.direct.DirectKubeApiServerIntegrator;\n+import com.netflix.titus.master.mesos.kubeapiserver.direct.model.PodEvent;\n+import io.kubernetes.client.models.V1ContainerState;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.Disposable;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * TODO Incorporate this into {@link DefaultV3JobOperations} once Fenzo is removed.\n+ */\n+@Singleton\n+public class KubeNotificationProcessor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KubeNotificationProcessor.class);\n+\n+    private static CallMetadata KUBE_CALL_METADATA = CallMetadata.newBuilder().withCallerId(\"Kube\").build();\n+\n+    private final DirectKubeApiServerIntegrator kubeApiServerIntegrator;\n+    private final V3JobOperations v3JobOperations;\n+\n+    private Disposable subscription;\n+\n+    @Inject\n+    public KubeNotificationProcessor(DirectKubeApiServerIntegrator kubeApiServerIntegrator,\n+                                     V3JobOperations v3JobOperations) {\n+        this.kubeApiServerIntegrator = kubeApiServerIntegrator;\n+        this.v3JobOperations = v3JobOperations;\n+    }\n+\n+    @Activator\n+    public void enterActiveMode() {\n+        this.subscription = kubeApiServerIntegrator.events()\n+                .flatMap(event -> {\n+                    Pair<Job<?>, Task> jobAndTask = v3JobOperations.findTaskById(event.getTaskId()).orElse(null);\n+                    if (jobAndTask == null) {\n+                        logger.warn(\"Got Kube notification about unknown task: {}\", event.getTaskId());\n+                        return Mono.empty();\n+                    }\n+                    return handlePodUpdatedEvent(event, jobAndTask.getLeft(), jobAndTask.getRight());\n+                })\n+                .ignoreElements()\n+                .doOnError(error -> logger.warn(\"Kube integration event stream terminated with an error (retrying soon)\", error))\n+                .retryBackoff(Long.MAX_VALUE, Duration.ofSeconds(1))\n+                .subscribe(\n+                        next -> {\n+                            // Nothing\n+                        },\n+                        e -> logger.error(\"Event stream terminated\"),\n+                        () -> logger.info(\"Event stream completed\")\n+                );\n+    }\n+\n+    public void shutdown() {\n+        ReactorExt.safeDispose(subscription);\n+    }\n+\n+    private Mono<Void> handlePodUpdatedEvent(PodEvent event, Job job, Task task) {\n+        if (event.getPod() == null || event.getPod().getStatus() == null || CollectionsExt.isNullOrEmpty(event.getPod().getStatus().getContainerStatuses())) {\n+            logger.info(\"Pod notification, but no container info yet: {}\", task.getId());\n+            return Mono.empty();\n+        }\n+        V1ContainerState containerState = event.getPod().getStatus().getContainerStatuses().get(0).getState();\n+        TaskState taskState = task.getStatus().getState();\n+\n+        logger.info(\"State: {}\", containerState);\n+        if (containerState.getWaiting() != null) {\n+            if (taskState == TaskState.Accepted) {\n+                return updateTaskStatus(containerState, task, TaskState.Launched);\n+            }\n+        } else if (containerState.getRunning() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "790047d79f62eb96fba75c9de522bc124146fe30"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NTA3MTE4", "url": "https://github.com/Netflix/titus-control-plane/pull/761#pullrequestreview-355507118", "createdAt": "2020-02-08T00:17:48Z", "commit": {"oid": "47e7b83e688c906602782d6cf10e7563bd1a5d38"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwMDoxNzo0OFrOFnNy7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwMDoxNzo0OFrOFnNy7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY2NDgxMg==", "bodyText": "Use one of the ExecutorsExt.instrumented...ThreadPool() options to get metrics here", "url": "https://github.com/Netflix/titus-control-plane/pull/761#discussion_r376664812", "createdAt": "2020-02-08T00:17:48Z", "author": {"login": "fabiokung"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultDirectKubeApiServerIntegrator.java", "diffHunk": "@@ -70,6 +80,13 @@ public DefaultDirectKubeApiServerIntegrator(DirectKubeConfiguration configuratio\n         this.apiClient = apiClient;\n         this.coreV1Api = new CoreV1Api(apiClient);\n         this.taskToPodConverter = taskToPodConverter;\n+\n+        ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                .setNameFormat(\"kube-apiclient-%s\")\n+                .setDaemon(true)\n+                .build();\n+        this.apiClientExecutor = Executors.newFixedThreadPool(configuration.getApiClientThreadPoolSize(), threadFactory);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47e7b83e688c906602782d6cf10e7563bd1a5d38"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ed498dbb7f413f20fcbfccb3a5b411c1bd59de7", "author": {"user": {"login": "tbak", "name": null}}, "url": "https://github.com/Netflix/titus-control-plane/commit/3ed498dbb7f413f20fcbfccb3a5b411c1bd59de7", "committedDate": "2020-02-10T16:01:42Z", "message": "Initial kube-scheduler integration\n\nThe newly introduced components are turned off by default. More work is required to fully support this integration."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00a8baeec061b052cd9b251e0da359b0f8920b1b", "author": {"user": {"login": "tbak", "name": null}}, "url": "https://github.com/Netflix/titus-control-plane/commit/00a8baeec061b052cd9b251e0da359b0f8920b1b", "committedDate": "2020-02-10T16:01:42Z", "message": "Code review updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e93dd55b6fc200b698ab6f310f37a5e602a4a7c5", "author": {"user": {"login": "tbak", "name": null}}, "url": "https://github.com/Netflix/titus-control-plane/commit/e93dd55b6fc200b698ab6f310f37a5e602a4a7c5", "committedDate": "2020-02-10T16:01:42Z", "message": "Code review updates"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "47e7b83e688c906602782d6cf10e7563bd1a5d38", "author": {"user": {"login": "tbak", "name": null}}, "url": "https://github.com/Netflix/titus-control-plane/commit/47e7b83e688c906602782d6cf10e7563bd1a5d38", "committedDate": "2020-02-07T23:34:58Z", "message": "Code review updates"}, "afterCommit": {"oid": "e93dd55b6fc200b698ab6f310f37a5e602a4a7c5", "author": {"user": {"login": "tbak", "name": null}}, "url": "https://github.com/Netflix/titus-control-plane/commit/e93dd55b6fc200b698ab6f310f37a5e602a4a7c5", "committedDate": "2020-02-10T16:01:42Z", "message": "Code review updates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MTI5MjY1", "url": "https://github.com/Netflix/titus-control-plane/pull/761#pullrequestreview-356129265", "createdAt": "2020-02-10T17:35:11Z", "commit": {"oid": "e93dd55b6fc200b698ab6f310f37a5e602a4a7c5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 608, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}