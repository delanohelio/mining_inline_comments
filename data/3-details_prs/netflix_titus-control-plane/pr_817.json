{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMjUzNDc2", "number": 817, "title": "Add configurable Fenzo taints", "bodyText": "", "createdAt": "2020-03-19T21:47:18Z", "url": "https://github.com/Netflix/titus-control-plane/pull/817", "merged": true, "mergeCommit": {"oid": "d35286955302d65c637815c6d6b6707831fffa93"}, "closed": true, "closedAt": "2020-03-20T21:13:26Z", "author": {"login": "tbak"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPTC-4AH2gAyMzkxMjUzNDc2OmQxYzg5ZGFmNTM5ZTU3ZDdmN2MyZDNhNWViNTJmNGUxZjJmOThiNmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPjTwQAFqTM3ODY0NTUzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d1c89daf539e57d7f7c2d3a5eb52f4e1f2f98b6e", "author": {"user": {"login": "tbak", "name": null}}, "url": "https://github.com/Netflix/titus-control-plane/commit/d1c89daf539e57d7f7c2d3a5eb52f4e1f2f98b6e", "committedDate": "2020-03-19T21:46:24Z", "message": "Add configurable Fenzo taints"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTI3Mjg2", "url": "https://github.com/Netflix/titus-control-plane/pull/817#pullrequestreview-378127286", "createdAt": "2020-03-19T22:07:29Z", "commit": {"oid": "d1c89daf539e57d7f7c2d3a5eb52f4e1f2f98b6e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjowNzoyOVrOF5CCiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjowNzoyOVrOF5CCiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0NjU2OQ==", "bodyText": "the code below seems to be returning false when there is no explicit scheduler taint (i.e. schedulerTaintValues.size() < 1). What is the expected behavior?\nSome unit tests here would be nice.", "url": "https://github.com/Netflix/titus-control-plane/pull/817#discussion_r395346569", "createdAt": "2020-03-19T22:07:29Z", "author": {"login": "fabiokung"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java", "diffHunk": "@@ -351,24 +351,49 @@ private void nodeUpdated(V1Node node) {\n      * </ul>\n      */\n     private boolean isNodeOwnedByFenzo(V1Node node) {\n+        if (isFarzoneNode(node)) {\n+            logger.debug(\"Not owned by fenzo (farzone node): {}\", node.getMetadata().getName());\n+            return false;\n+        }\n+        if (!hasFenzoSchedulerTaint(node)) {\n+            logger.debug(\"Not owned by fenzo (non Fenzo scheduler taint): {}\", node.getMetadata().getName());\n+            return false;\n+        }\n+\n         List<V1Taint> taints = node.getSpec().getTaints();\n         if (CollectionsExt.isNullOrEmpty(taints)) {\n-            return !isFarzoneNode(node);\n+            logger.debug(\"Owned by fenzo (no taint set): {}\", node.getMetadata().getName());\n+            return true;\n         }\n \n+        Set<String> toleratedTaints = mesosConfiguration.getFenzoTaintTolerations();\n+        for (V1Taint taint : taints) {\n+            String taintKey = taint.getKey();\n+            if (!taintKey.equals(KubeConstants.TAINT_SCHEDULER) && !toleratedTaints.contains(taintKey)) {\n+                logger.debug(\"Not owned by fenzo (non tolerable taint found): nodeId={}, taintKey={}\", node.getMetadata().getName(), taintKey);\n+                return false;\n+            }\n+        }\n+\n+        logger.debug(\"Owned by fenzo (all taints tolerated): {}\", node.getMetadata().getName());\n+        return true;\n+    }\n+\n+    /**\n+     * Returns true if there is {@link KubeConstants#TAINT_SCHEDULER} taint with {@link KubeConstants#TAINT_SCHEDULER_VALUE_FENZO} value\n+     * or this taint is missing (no explicit scheduler taint == Fenzo).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1c89daf539e57d7f7c2d3a5eb52f4e1f2f98b6e"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b2a07ca22ba9769d122c2a81906c3bc8a18a095", "author": {"user": {"login": "tbak", "name": null}}, "url": "https://github.com/Netflix/titus-control-plane/commit/2b2a07ca22ba9769d122c2a81906c3bc8a18a095", "committedDate": "2020-03-20T15:36:59Z", "message": "Bug fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NjAyNjE5", "url": "https://github.com/Netflix/titus-control-plane/pull/817#pullrequestreview-378602619", "createdAt": "2020-03-20T15:50:55Z", "commit": {"oid": "2b2a07ca22ba9769d122c2a81906c3bc8a18a095"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NjQ1NTMw", "url": "https://github.com/Netflix/titus-control-plane/pull/817#pullrequestreview-378645530", "createdAt": "2020-03-20T16:43:12Z", "commit": {"oid": "2b2a07ca22ba9769d122c2a81906c3bc8a18a095"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 485, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}