{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NTcyMTU1", "number": 782, "title": "Job constraints to Kube primitives mapping", "bodyText": "", "createdAt": "2020-02-20T06:20:03Z", "url": "https://github.com/Netflix/titus-control-plane/pull/782", "merged": true, "mergeCommit": {"oid": "9b216f9dc529df4ffe3b49ae19cc71372ee437a7"}, "closed": true, "closedAt": "2020-02-21T18:28:19Z", "author": {"login": "tbak"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGFR6TgH2gAyMzc3NTcyMTU1OmUxMGYyZjczMTYzZjgyZWUwNzRlNzAwMjhiZGYzOWY1MzczNGQwNjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGjjHwAH2gAyMzc3NTcyMTU1OjAzNDVlNzQyM2QzZWZjNTRhMjk2ZDIzOTc5OGEwNjhlMzRhOTZiNjk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e10f2f73163f82ee074e70028bdf39f53734d060", "author": {"user": {"login": "tbak", "name": null}}, "url": "https://github.com/Netflix/titus-control-plane/commit/e10f2f73163f82ee074e70028bdf39f53734d060", "committedDate": "2020-02-20T06:38:43Z", "message": "Job constraints to Kube primitives mapping"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2108538c504eb54d018c42d5d491e7a5aaa08517", "author": {"user": {"login": "tbak", "name": null}}, "url": "https://github.com/Netflix/titus-control-plane/commit/2108538c504eb54d018c42d5d491e7a5aaa08517", "committedDate": "2020-02-20T06:16:12Z", "message": "Job constraints to Kube primitives mapping"}, "afterCommit": {"oid": "e10f2f73163f82ee074e70028bdf39f53734d060", "author": {"user": {"login": "tbak", "name": null}}, "url": "https://github.com/Netflix/titus-control-plane/commit/e10f2f73163f82ee074e70028bdf39f53734d060", "committedDate": "2020-02-20T06:38:43Z", "message": "Job constraints to Kube primitives mapping"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMDg5MjEx", "url": "https://github.com/Netflix/titus-control-plane/pull/782#pullrequestreview-362089211", "createdAt": "2020-02-20T17:22:26Z", "commit": {"oid": "e10f2f73163f82ee074e70028bdf39f53734d060"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNzoyMjoyNlrOFscQlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNzoyNjowMVrOFscYZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0NDY2MA==", "bodyText": "it seems SchedulingConstaintValidator assumes they are always lowercase", "url": "https://github.com/Netflix/titus-control-plane/pull/782#discussion_r382144660", "createdAt": "2020-02-20T17:22:26Z", "author": {"login": "fabiokung"}, "path": "titus-api/src/main/java/com/netflix/titus/api/jobmanager/JobConstraints.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.api.jobmanager;\n+\n+import java.util.Set;\n+\n+import static com.netflix.titus.common.util.CollectionsExt.asSet;\n+\n+/**\n+ * Constants and functions for job soft and hard constraints. Constraint names are case insensitive.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e10f2f73163f82ee074e70028bdf39f53734d060"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0NjY2MA==", "bodyText": "should we add this only if isOwnedByKubeScheduler()? Any harm in adding it when tasks are being scheduled by Fenzo? (i.e.: will it negatively impact other controllers?)", "url": "https://github.com/Netflix/titus-control-plane/pull/782#discussion_r382146660", "createdAt": "2020-02-20T17:26:01Z", "author": {"login": "fabiokung"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultTaskToPodConverter.java", "diffHunk": "@@ -114,7 +122,8 @@ public V1Pod apply(Job<?> job, Task task) {\n                 .schedulerName(\"default-scheduler\")\n                 .containers(Collections.singletonList(container))\n                 .terminationGracePeriodSeconds(POD_TERMINATION_GRACE_PERIOD_SECONDS)\n-                .restartPolicy(NEVER_RESTART_POLICY);\n+                .restartPolicy(NEVER_RESTART_POLICY)\n+                .affinity(podAffinityFactory.buildV1Affinity(job, task));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e10f2f73163f82ee074e70028bdf39f53734d060"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNzk0MDE1", "url": "https://github.com/Netflix/titus-control-plane/pull/782#pullrequestreview-362794015", "createdAt": "2020-02-21T17:28:38Z", "commit": {"oid": "e10f2f73163f82ee074e70028bdf39f53734d060"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNzoyODozOFrOFs-wmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNzozMDo1OVrOFs-1AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcwOTkxMw==", "bodyText": "Boolean.valueOf?", "url": "https://github.com/Netflix/titus-control-plane/pull/782#discussion_r382709913", "createdAt": "2020-02-21T17:28:38Z", "author": {"login": "corindwyer"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultPodAffinityFactory.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.master.mesos.kubeapiserver.direct;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import com.netflix.titus.api.jobmanager.JobConstraints;\n+import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.jobmanager.model.job.Task;\n+import io.kubernetes.client.models.V1Affinity;\n+import io.kubernetes.client.models.V1LabelSelector;\n+import io.kubernetes.client.models.V1LabelSelectorRequirement;\n+import io.kubernetes.client.models.V1NodeAffinity;\n+import io.kubernetes.client.models.V1NodeSelector;\n+import io.kubernetes.client.models.V1NodeSelectorRequirement;\n+import io.kubernetes.client.models.V1NodeSelectorTerm;\n+import io.kubernetes.client.models.V1PodAffinityTerm;\n+import io.kubernetes.client.models.V1PodAntiAffinity;\n+import io.kubernetes.client.models.V1PreferredSchedulingTerm;\n+import io.kubernetes.client.models.V1WeightedPodAffinityTerm;\n+\n+@Singleton\n+public class DefaultPodAffinityFactory implements PodAffinityFactory {\n+\n+    private static final int EXCLUSIVE_HOST_WEIGHT = 100;\n+    private static final int UNIQUE_HOST_WEIGHT = 100;\n+    private static final int NODE_AFFINITY_WEIGHT = 100;\n+\n+    @Inject\n+    public DefaultPodAffinityFactory() {\n+    }\n+\n+    @Override\n+    public V1Affinity buildV1Affinity(Job<?> job, Task task) {\n+        return new Processor(job, task).build();\n+    }\n+\n+    private class Processor {\n+\n+        private final Job<?> job;\n+        private final Task task;\n+        private final V1Affinity v1Affinity;\n+\n+        private Processor(Job<?> job, Task task) {\n+            this.job = job;\n+            this.task = task;\n+            this.v1Affinity = new V1Affinity();\n+\n+            processJobConstraints(job.getJobDescriptor().getContainer().getHardConstraints(), true);\n+            processJobConstraints(job.getJobDescriptor().getContainer().getSoftConstraints(), false);\n+        }\n+\n+        private void processJobConstraints(Map<String, String> constraints, boolean hard) {\n+            if (\"true\".equalsIgnoreCase(constraints.get(JobConstraints.EXCLUSIVE_HOST))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e10f2f73163f82ee074e70028bdf39f53734d060"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcwOTk3Ng==", "bodyText": "Boolean.valueOf?", "url": "https://github.com/Netflix/titus-control-plane/pull/782#discussion_r382709976", "createdAt": "2020-02-21T17:28:46Z", "author": {"login": "corindwyer"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultPodAffinityFactory.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.master.mesos.kubeapiserver.direct;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import com.netflix.titus.api.jobmanager.JobConstraints;\n+import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.jobmanager.model.job.Task;\n+import io.kubernetes.client.models.V1Affinity;\n+import io.kubernetes.client.models.V1LabelSelector;\n+import io.kubernetes.client.models.V1LabelSelectorRequirement;\n+import io.kubernetes.client.models.V1NodeAffinity;\n+import io.kubernetes.client.models.V1NodeSelector;\n+import io.kubernetes.client.models.V1NodeSelectorRequirement;\n+import io.kubernetes.client.models.V1NodeSelectorTerm;\n+import io.kubernetes.client.models.V1PodAffinityTerm;\n+import io.kubernetes.client.models.V1PodAntiAffinity;\n+import io.kubernetes.client.models.V1PreferredSchedulingTerm;\n+import io.kubernetes.client.models.V1WeightedPodAffinityTerm;\n+\n+@Singleton\n+public class DefaultPodAffinityFactory implements PodAffinityFactory {\n+\n+    private static final int EXCLUSIVE_HOST_WEIGHT = 100;\n+    private static final int UNIQUE_HOST_WEIGHT = 100;\n+    private static final int NODE_AFFINITY_WEIGHT = 100;\n+\n+    @Inject\n+    public DefaultPodAffinityFactory() {\n+    }\n+\n+    @Override\n+    public V1Affinity buildV1Affinity(Job<?> job, Task task) {\n+        return new Processor(job, task).build();\n+    }\n+\n+    private class Processor {\n+\n+        private final Job<?> job;\n+        private final Task task;\n+        private final V1Affinity v1Affinity;\n+\n+        private Processor(Job<?> job, Task task) {\n+            this.job = job;\n+            this.task = task;\n+            this.v1Affinity = new V1Affinity();\n+\n+            processJobConstraints(job.getJobDescriptor().getContainer().getHardConstraints(), true);\n+            processJobConstraints(job.getJobDescriptor().getContainer().getSoftConstraints(), false);\n+        }\n+\n+        private void processJobConstraints(Map<String, String> constraints, boolean hard) {\n+            if (\"true\".equalsIgnoreCase(constraints.get(JobConstraints.EXCLUSIVE_HOST))) {\n+                addExclusiveHostConstraint(hard);\n+            }\n+\n+            if (\"true\".equalsIgnoreCase(constraints.get(JobConstraints.UNIQUE_HOST))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e10f2f73163f82ee074e70028bdf39f53734d060"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcxMTA0MQ==", "bodyText": "Can you add javadocs here?", "url": "https://github.com/Netflix/titus-control-plane/pull/782#discussion_r382711041", "createdAt": "2020-02-21T17:30:59Z", "author": {"login": "corindwyer"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/PodAffinityFactory.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.master.mesos.kubeapiserver.direct;\n+\n+import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.jobmanager.model.job.Task;\n+import io.kubernetes.client.models.V1Affinity;\n+\n+public interface PodAffinityFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e10f2f73163f82ee074e70028bdf39f53734d060"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0345e7423d3efc54a296d239798a068e34a96b69", "author": {"user": {"login": "tbak", "name": null}}, "url": "https://github.com/Netflix/titus-control-plane/commit/0345e7423d3efc54a296d239798a068e34a96b69", "committedDate": "2020-02-21T17:54:40Z", "message": "Code review updates"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 635, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}