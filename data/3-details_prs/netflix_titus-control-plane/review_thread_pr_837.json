{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MzU2NTEx", "number": 837, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMjoyOTo0NFrODzEDPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMTo0MDowNVrOD0_CJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODcwMzMyOnYy", "diffSide": "RIGHT", "path": "titus-api/src/main/java/com/netflix/titus/api/model/ApplicationSLA.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMjoyOTo0NFrOGHe6Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMDozNToxN1rOGHgegw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5OTYwMw==", "bodyText": "Jackson annotation are in ApplicationSlaMixIn. You should not add them here.", "url": "https://github.com/Netflix/titus-control-plane/pull/837#discussion_r410499603", "createdAt": "2020-04-17T22:29:44Z", "author": {"login": "tbak"}, "path": "titus-api/src/main/java/com/netflix/titus/api/model/ApplicationSLA.java", "diffHunk": "@@ -30,20 +38,29 @@\n \n     private final ResourceDimension resourceDimension;\n \n+    private final String schedulerName;\n+\n     /**\n      * Total number of instances required by this application. Titus will keep pre-allocated resources to always\n      * fulfill this requirement.\n      */\n     private int instanceCount;\n \n-    public ApplicationSLA(String appName,\n-                          Tier tier,\n-                          ResourceDimension resourceDimension,\n-                          int instanceCount) {\n+    @JsonCreator\n+    public ApplicationSLA(@JsonProperty(\"appName\") String appName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4d1e147bb2ff7ffa077ccfa13b1a379f1966472"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyNTMxNQ==", "bodyText": "Fixed. Thanks", "url": "https://github.com/Netflix/titus-control-plane/pull/837#discussion_r410525315", "createdAt": "2020-04-18T00:35:17Z", "author": {"login": "joshi-keyur"}, "path": "titus-api/src/main/java/com/netflix/titus/api/model/ApplicationSLA.java", "diffHunk": "@@ -30,20 +38,29 @@\n \n     private final ResourceDimension resourceDimension;\n \n+    private final String schedulerName;\n+\n     /**\n      * Total number of instances required by this application. Titus will keep pre-allocated resources to always\n      * fulfill this requirement.\n      */\n     private int instanceCount;\n \n-    public ApplicationSLA(String appName,\n-                          Tier tier,\n-                          ResourceDimension resourceDimension,\n-                          int instanceCount) {\n+    @JsonCreator\n+    public ApplicationSLA(@JsonProperty(\"appName\") String appName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5OTYwMw=="}, "originalCommit": {"oid": "f4d1e147bb2ff7ffa077ccfa13b1a379f1966472"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODcwOTE1OnYy", "diffSide": "RIGHT", "path": "titus-server-master/src/main/java/com/netflix/titus/master/service/management/internal/DefaultApplicationSlaManagementService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMjozMzoyMFrOGHe9uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjoyNzozNFrOGI0rXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwMDUzNw==", "bodyText": "Does .onErrorReturn(t -> null) emit null value or  nothing at all?", "url": "https://github.com/Netflix/titus-control-plane/pull/837#discussion_r410500537", "createdAt": "2020-04-17T22:33:20Z", "author": {"login": "tbak"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/service/management/internal/DefaultApplicationSlaManagementService.java", "diffHunk": "@@ -52,6 +52,12 @@ public DefaultApplicationSlaManagementService(CapacityMonitoringService capacity\n                 .toList().toBlocking().firstOrDefault(Collections.emptyList());\n     }\n \n+    @Override\n+    public Collection<ApplicationSLA> getApplicationSLAsForScheduler(String schedulerName) {\n+        return storage.findBySchedulerName(schedulerName).onErrorReturn(t -> null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4d1e147bb2ff7ffa077ccfa13b1a379f1966472"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDU1ODQ5NA==", "bodyText": "It emits a null value that would appear in the return collection. This behavior is borrowed from the other get methods in this service. Should we do anything differently here and possibly at other places?", "url": "https://github.com/Netflix/titus-control-plane/pull/837#discussion_r410558494", "createdAt": "2020-04-18T02:15:28Z", "author": {"login": "joshi-keyur"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/service/management/internal/DefaultApplicationSlaManagementService.java", "diffHunk": "@@ -52,6 +52,12 @@ public DefaultApplicationSlaManagementService(CapacityMonitoringService capacity\n                 .toList().toBlocking().firstOrDefault(Collections.emptyList());\n     }\n \n+    @Override\n+    public Collection<ApplicationSLA> getApplicationSLAsForScheduler(String schedulerName) {\n+        return storage.findBySchedulerName(schedulerName).onErrorReturn(t -> null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwMDUzNw=="}, "originalCommit": {"oid": "f4d1e147bb2ff7ffa077ccfa13b1a379f1966472"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxNDY0NQ==", "bodyText": "Yes, this is incorrect. Could you also fix the other method? What happens if a list of null is returned?", "url": "https://github.com/Netflix/titus-control-plane/pull/837#discussion_r410714645", "createdAt": "2020-04-18T15:48:50Z", "author": {"login": "tbak"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/service/management/internal/DefaultApplicationSlaManagementService.java", "diffHunk": "@@ -52,6 +52,12 @@ public DefaultApplicationSlaManagementService(CapacityMonitoringService capacity\n                 .toList().toBlocking().firstOrDefault(Collections.emptyList());\n     }\n \n+    @Override\n+    public Collection<ApplicationSLA> getApplicationSLAsForScheduler(String schedulerName) {\n+        return storage.findBySchedulerName(schedulerName).onErrorReturn(t -> null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwMDUzNw=="}, "originalCommit": {"oid": "f4d1e147bb2ff7ffa077ccfa13b1a379f1966472"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwNDg2MA==", "bodyText": "Changed onErrorReturn() to doOnError() and added error logging. Please review.", "url": "https://github.com/Netflix/titus-control-plane/pull/837#discussion_r411904860", "createdAt": "2020-04-21T06:27:34Z", "author": {"login": "joshi-keyur"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/service/management/internal/DefaultApplicationSlaManagementService.java", "diffHunk": "@@ -52,6 +52,12 @@ public DefaultApplicationSlaManagementService(CapacityMonitoringService capacity\n                 .toList().toBlocking().firstOrDefault(Collections.emptyList());\n     }\n \n+    @Override\n+    public Collection<ApplicationSLA> getApplicationSLAsForScheduler(String schedulerName) {\n+        return storage.findBySchedulerName(schedulerName).onErrorReturn(t -> null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwMDUzNw=="}, "originalCommit": {"oid": "f4d1e147bb2ff7ffa077ccfa13b1a379f1966472"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODg1MTg0OnYy", "diffSide": "RIGHT", "path": "titus-api/src/main/java/com/netflix/titus/api/store/v2/ApplicationSlaStoreCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMTozOTo0NFrOGKNAUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMTozOTo0NFrOGKNAUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM1MjAxNw==", "bodyText": "there is -> there are", "url": "https://github.com/Netflix/titus-control-plane/pull/837#discussion_r413352017", "createdAt": "2020-04-22T21:39:44Z", "author": {"login": "corindwyer"}, "path": "titus-api/src/main/java/com/netflix/titus/api/store/v2/ApplicationSlaStoreCache.java", "diffHunk": "@@ -32,15 +36,17 @@\n \n /**\n  * Caching proxy for {@link ApplicationSlaStore}. It loads all data on startup in a blocking mode to fail fast,\n- * in case the is any problem with the storage.\n+ * in case there is any problem with the storage.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e97936e821c5d5ce8872eecebfbd1dd84ac08374"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODg1Mjg0OnYy", "diffSide": "RIGHT", "path": "titus-api/src/main/java/com/netflix/titus/api/store/v2/ApplicationSlaStoreCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMTo0MDowNVrOGKNA-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMTo0MDowNVrOGKNA-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM1MjE4Ng==", "bodyText": "autoformat class should move this curly up a line", "url": "https://github.com/Netflix/titus-control-plane/pull/837#discussion_r413352186", "createdAt": "2020-04-22T21:40:05Z", "author": {"login": "corindwyer"}, "path": "titus-api/src/main/java/com/netflix/titus/api/store/v2/ApplicationSlaStoreCache.java", "diffHunk": "@@ -50,12 +56,22 @@ public ApplicationSlaStoreCache(ApplicationSlaStore delegate) {\n     public Observable<Void> enterActiveMode() {\n         logger.info(\"Entering active mode\");\n         this.cache = loadCache(delegate);\n+        this.cacheBySchedulerName = loadSchedulerMapCache(this.cache);\n         return Observable.empty();\n     }\n \n     @Override\n     public Observable<Void> create(ApplicationSLA applicationSLA) {\n-        return delegate.create(applicationSLA).doOnCompleted(() -> cache.put(applicationSLA.getAppName(), applicationSLA));\n+        return delegate.create(applicationSLA).doOnCompleted(() ->\n+        {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e97936e821c5d5ce8872eecebfbd1dd84ac08374"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3943, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}