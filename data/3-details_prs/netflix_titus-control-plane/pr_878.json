{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5NTY1ODM5", "number": 878, "title": "Use KubeClient async API to launch pods", "bodyText": "This update is limited to KubeApiServerIntegrator. We should refactor KubeScheduler code path after verifying that the async API is stable enough. The sync/async mode is controlled via persisted property.", "createdAt": "2020-06-24T23:12:28Z", "url": "https://github.com/Netflix/titus-control-plane/pull/878", "merged": true, "mergeCommit": {"oid": "ac3944c628902ab80bccbd058b2bb0999f15a99c"}, "closed": true, "closedAt": "2020-06-25T23:03:30Z", "author": {"login": "tbak"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuiW5lgH2gAyNDM5NTY1ODM5OmFiYjg0YmFjZWIzZTQ0YTk0MDI1ZWEyZjZmZDhlMzI0NzVjOTU1MDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcu1RbOAFqTQzNzg2MTA3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "abb84baceb3e44a94025ea2f6fd8e32475c95505", "author": {"user": {"login": "tbak", "name": null}}, "url": "https://github.com/Netflix/titus-control-plane/commit/abb84baceb3e44a94025ea2f6fd8e32475c95505", "committedDate": "2020-06-24T23:08:23Z", "message": "Use KubeClient async API to launch pods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDg2OTU0", "url": "https://github.com/Netflix/titus-control-plane/pull/878#pullrequestreview-437086954", "createdAt": "2020-06-25T00:08:59Z", "commit": {"oid": "abb84baceb3e44a94025ea2f6fd8e32475c95505"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDowODo1OVrOGonKmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDowOTo1N1rOGonLeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIzNzkxMg==", "bodyText": "add docs explaining that this method will still block until all requests are finished (so we still expect the Fenzo thread to be blocked while all requests are in-flight, but requests will be executed concurrently)", "url": "https://github.com/Netflix/titus-control-plane/pull/878#discussion_r445237912", "createdAt": "2020-06-25T00:08:59Z", "author": {"login": "fabiokung"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java", "diffHunk": "@@ -259,6 +278,36 @@ public void launchTasks(List<TaskInfoRequest> requests, List<VirtualMachineLease\n         }\n     }\n \n+    private void launchTasksAsync(List<TaskInfoRequest> requests) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abb84baceb3e44a94025ea2f6fd8e32475c95505"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIzODEzNw==", "bodyText": "I suggest adding a doOnComplete() callback to record latencies on each individual operation (DefaultSchedulingService will still record the latency of the whole operation until all requests are finished).", "url": "https://github.com/Netflix/titus-control-plane/pull/878#discussion_r445238137", "createdAt": "2020-06-25T00:09:57Z", "author": {"login": "fabiokung"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java", "diffHunk": "@@ -259,6 +278,36 @@ public void launchTasks(List<TaskInfoRequest> requests, List<VirtualMachineLease\n         }\n     }\n \n+    private void launchTasksAsync(List<TaskInfoRequest> requests) {\n+        List<Mono<Void>> podAddActions = new ArrayList<>(requests.size());\n+        for (TaskInfoRequest request : requests) {\n+            V1Pod v1Pod = taskInfoToPod(request);\n+            Mono<Void> podAddAction = KubeUtil\n+                    .<V1Pod>toReact(handler -> kubeApiFacade.getCoreV1Api().createNamespacedPodAsync(\n+                            KUBERNETES_NAMESPACE, v1Pod, null, null, null, handler\n+                    ))\n+                    .doOnSubscribe(subscription -> {\n+                        launchTaskCounter.increment();\n+                        logger.info(\"creating pod: {}\", v1Pod);\n+                        podSizeMetrics.record(KubeUtil.estimatePodSize(v1Pod));\n+                    })\n+                    .timeout(Duration.ofMillis(directKubeConfiguration.getKubeApiClientTimeoutMs()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abb84baceb3e44a94025ea2f6fd8e32475c95505"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDg3ODI5", "url": "https://github.com/Netflix/titus-control-plane/pull/878#pullrequestreview-437087829", "createdAt": "2020-06-25T00:12:01Z", "commit": {"oid": "abb84baceb3e44a94025ea2f6fd8e32475c95505"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDoxMjowMVrOGonNsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDoxMjowMVrOGonNsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIzODcwNw==", "bodyText": "consider adding a concurrency limit to the merge so we avoid overloading kube-apiserver during big bursts", "url": "https://github.com/Netflix/titus-control-plane/pull/878#discussion_r445238707", "createdAt": "2020-06-25T00:12:01Z", "author": {"login": "fabiokung"}, "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java", "diffHunk": "@@ -259,6 +278,36 @@ public void launchTasks(List<TaskInfoRequest> requests, List<VirtualMachineLease\n         }\n     }\n \n+    private void launchTasksAsync(List<TaskInfoRequest> requests) {\n+        List<Mono<Void>> podAddActions = new ArrayList<>(requests.size());\n+        for (TaskInfoRequest request : requests) {\n+            V1Pod v1Pod = taskInfoToPod(request);\n+            Mono<Void> podAddAction = KubeUtil\n+                    .<V1Pod>toReact(handler -> kubeApiFacade.getCoreV1Api().createNamespacedPodAsync(\n+                            KUBERNETES_NAMESPACE, v1Pod, null, null, null, handler\n+                    ))\n+                    .doOnSubscribe(subscription -> {\n+                        launchTaskCounter.increment();\n+                        logger.info(\"creating pod: {}\", v1Pod);\n+                        podSizeMetrics.record(KubeUtil.estimatePodSize(v1Pod));\n+                    })\n+                    .timeout(Duration.ofMillis(directKubeConfiguration.getKubeApiClientTimeoutMs()))\n+                    .ignoreElement()\n+                    .cast(Void.class)\n+                    .onErrorResume(error -> {\n+                        logger.error(\"Unable to create pod with error: {}\", KubeUtil.toErrorDetails(error), error);\n+                        return Mono.empty();\n+                    });\n+            podAddActions.add(podAddAction);\n+        }\n+\n+        try {\n+            Flux.merge(podAddActions).blockLast();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abb84baceb3e44a94025ea2f6fd8e32475c95505"}, "originalPosition": 100}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2552f77c5b98982c8c1d7a08777d3ad93f98f863", "author": {"user": {"login": "tbak", "name": null}}, "url": "https://github.com/Netflix/titus-control-plane/commit/2552f77c5b98982c8c1d7a08777d3ad93f98f863", "committedDate": "2020-06-25T20:57:40Z", "message": "Code review updates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3ODU2NzQ2", "url": "https://github.com/Netflix/titus-control-plane/pull/878#pullrequestreview-437856746", "createdAt": "2020-06-25T21:03:17Z", "commit": {"oid": "2552f77c5b98982c8c1d7a08777d3ad93f98f863"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3ODYxMDcy", "url": "https://github.com/Netflix/titus-control-plane/pull/878#pullrequestreview-437861072", "createdAt": "2020-06-25T21:10:36Z", "commit": {"oid": "2552f77c5b98982c8c1d7a08777d3ad93f98f863"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 545, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}