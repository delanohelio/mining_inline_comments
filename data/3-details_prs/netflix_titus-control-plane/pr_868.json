{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNzI1ODQ4", "number": 868, "title": "Read archived data from active job/task tables if not found in the archive tables", "bodyText": "It is possible that finished jobs/tasks are not moved after they are finished to\nthe archive tables. This may happen during failover which happens\nimmediately after a job completes, but is not archived yet. To read such\nabandoned items (which are ignored when loading active data into memory), we\nhave to make a fallback query in case the primary archive table does not contain\nan entry.", "createdAt": "2020-06-10T22:03:25Z", "url": "https://github.com/Netflix/titus-control-plane/pull/868", "merged": true, "mergeCommit": {"oid": "1192c6288c0497e30b7054a4cbbd468370a46535"}, "closed": true, "closedAt": "2020-06-11T17:53:58Z", "author": {"login": "tbak"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqA8g-AH2gAyNDMyNzI1ODQ4OmVkNmJjZWJkMDI1NjM3NDVjZGFjNWMwMWMxMzJlOWQzNzViNzc0MTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqR9sAAFqTQyOTE1MDk3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ed6bcebd02563745cdac5c01c132e9d375b77413", "author": {"user": {"login": "tbak", "name": null}}, "url": "https://github.com/Netflix/titus-control-plane/commit/ed6bcebd02563745cdac5c01c132e9d375b77413", "committedDate": "2020-06-10T21:57:00Z", "message": "Read archived data from active job/task tables if not found in the archive tables\n\nIt is possible that finished jobs/tasks are not moved after they are finished to\nthe archive tables. This may happen during failover which happens\nimmediately after a job completes, but is not archived yet. To read such\nabandoned items (which are ignored when loading active data into memory), we\nhave to make a fallback query in case the primary archive table does not contain\nan entry."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTAwOTcx", "url": "https://github.com/Netflix/titus-control-plane/pull/868#pullrequestreview-428500971", "createdAt": "2020-06-10T23:45:15Z", "commit": {"oid": "ed6bcebd02563745cdac5c01c132e9d375b77413"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMzo0NToxNlrOGiJ2dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMzo0NToxNlrOGiJ2dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ2NjE2NA==", "bodyText": "please add some documentation here (and consider renaming the method) since now it will also always returns active tasks for the job. It seems to be handled correctly by the only current caller, but it may cause confusion in the future", "url": "https://github.com/Netflix/titus-control-plane/pull/868#discussion_r438466164", "createdAt": "2020-06-10T23:45:16Z", "author": {"login": "fabiokung"}, "path": "titus-ext/cassandra/src/main/java/com/netflix/titus/ext/cassandra/store/CassandraJobStore.java", "diffHunk": "@@ -606,43 +606,62 @@ public Completable deleteTask(Task task) {\n \n     @Override\n     public Observable<Job<?>> retrieveArchivedJob(String jobId) {\n-        return Observable.fromCallable((Callable<Statement>) () -> retrieveArchivedJobStatement.bind(jobId)).flatMap(statement -> execute(statement)\n-                .map(resultSet -> {\n-                    Row row = resultSet.one();\n-                    if (row == null) {\n-                        throw JobStoreException.jobDoesNotExist(jobId);\n-                    }\n-                    String value = row.getString(0);\n-                    return (Job<?>) ObjectMappers.readValue(mapper, value, Job.class);\n-                }));\n+        Observable<Job> action = retrieveEntityById(jobId, Job.class, retrieveArchivedJobStatement)\n+                .switchIfEmpty(retrieveEntityById(jobId, Job.class, retrieveActiveJobStatement))\n+                .switchIfEmpty(Observable.error(JobStoreException.jobDoesNotExist(jobId)));\n+        return (Observable) action;\n     }\n \n     @Override\n     public Observable<Task> retrieveArchivedTasksForJob(String jobId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed6bcebd02563745cdac5c01c132e9d375b77413"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTE3MzQ2", "url": "https://github.com/Netflix/titus-control-plane/pull/868#pullrequestreview-428517346", "createdAt": "2020-06-11T00:36:46Z", "commit": {"oid": "ed6bcebd02563745cdac5c01c132e9d375b77413"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDozNjo0NlrOGiKt_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDozNjo0NlrOGiKt_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ4MDM4Mw==", "bodyText": "Is the variable name correct? Seems like these could be active or archived depending on the statement provided.", "url": "https://github.com/Netflix/titus-control-plane/pull/868#discussion_r438480383", "createdAt": "2020-06-11T00:36:46Z", "author": {"login": "andrew-leung"}, "path": "titus-ext/cassandra/src/main/java/com/netflix/titus/ext/cassandra/store/CassandraJobStore.java", "diffHunk": "@@ -606,43 +606,62 @@ public Completable deleteTask(Task task) {\n \n     @Override\n     public Observable<Job<?>> retrieveArchivedJob(String jobId) {\n-        return Observable.fromCallable((Callable<Statement>) () -> retrieveArchivedJobStatement.bind(jobId)).flatMap(statement -> execute(statement)\n-                .map(resultSet -> {\n-                    Row row = resultSet.one();\n-                    if (row == null) {\n-                        throw JobStoreException.jobDoesNotExist(jobId);\n-                    }\n-                    String value = row.getString(0);\n-                    return (Job<?>) ObjectMappers.readValue(mapper, value, Job.class);\n-                }));\n+        Observable<Job> action = retrieveEntityById(jobId, Job.class, retrieveArchivedJobStatement)\n+                .switchIfEmpty(retrieveEntityById(jobId, Job.class, retrieveActiveJobStatement))\n+                .switchIfEmpty(Observable.error(JobStoreException.jobDoesNotExist(jobId)));\n+        return (Observable) action;\n     }\n \n     @Override\n     public Observable<Task> retrieveArchivedTasksForJob(String jobId) {\n-        return Observable.fromCallable(() -> retrieveArchivedTaskIdsForJobStatement.bind(jobId).setFetchSize(Integer.MAX_VALUE))\n-                .flatMap(retrieveActiveTaskIdsForJob -> execute(retrieveActiveTaskIdsForJob).flatMap(taskIdsResultSet -> {\n-                    List<String> taskIds = taskIdsResultSet.all().stream().map(row -> row.getString(0)).collect(Collectors.toList());\n-                    List<Observable<ResultSet>> observables = taskIds.stream().map(retrieveArchivedTaskStatement::bind).map(this::execute).collect(Collectors.toList());\n-                    return Observable.merge(observables, getConcurrencyLimit()).flatMapIterable(tasksResultSet -> tasksResultSet.all().stream()\n-                            .map(row -> row.getString(0))\n-                            .map(value -> deserializeTask(value))\n-                            .collect(Collectors.toList()));\n-                }));\n+        return retrieveArchivedTasksForJob(jobId, retrieveArchivedTaskIdsForJobStatement, retrieveArchivedTaskStatement)\n+                .switchIfEmpty(retrieveArchivedTasksForJob(jobId, retrieveActiveTaskIdsForJobStatement, retrieveActiveTaskStatement));\n+    }\n+\n+    private Observable<Task> retrieveArchivedTasksForJob(String jobId, PreparedStatement taskIdStatement, PreparedStatement taskStatement) {\n+        return Observable.fromCallable(() -> taskIdStatement.bind(jobId).setFetchSize(Integer.MAX_VALUE))\n+                .flatMap(retrieveActiveTaskIdsForJob ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed6bcebd02563745cdac5c01c132e9d375b77413"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f3afdc6bd660b3f03485a3f04a78b2441d81d8a", "author": {"user": {"login": "tbak", "name": null}}, "url": "https://github.com/Netflix/titus-control-plane/commit/3f3afdc6bd660b3f03485a3f04a78b2441d81d8a", "committedDate": "2020-06-11T17:43:45Z", "message": "Code review updates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MTUwOTc1", "url": "https://github.com/Netflix/titus-control-plane/pull/868#pullrequestreview-429150975", "createdAt": "2020-06-11T17:46:40Z", "commit": {"oid": "3f3afdc6bd660b3f03485a3f04a78b2441d81d8a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 537, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}