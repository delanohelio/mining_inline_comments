{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0ODk4MjI3", "number": 1207, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjozNDoxNlrODmX1Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjo1ODo0MFrODmYbeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTYyOTA3OnYy", "diffSide": "RIGHT", "path": "security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjozNDoxNlrOFzwLmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjozNDoxNlrOFzwLmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgxMTA5Nw==", "bodyText": "Strictly speaking this is a breaking change : we should add the label and update the migration guide.", "url": "https://github.com/powsybl/powsybl-core/pull/1207#discussion_r389811097", "createdAt": "2020-03-09T16:34:16Z", "author": {"login": "sylvlecl"}, "path": "security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java", "diffHunk": "@@ -31,106 +31,49 @@\n \n     // Below are volatile objects used for building the actual complete result\n     private LimitViolationsResult preContingencyResult;\n-    private List<PostContingencyResult> postContingencyResults;\n-\n-    private ResultBuilder currentBuilder = null;\n+    private final List<PostContingencyResult> postContingencyResults = Collections.synchronizedList(new ArrayList<>());\n \n     public SecurityAnalysisResultBuilder(LimitViolationFilter filter, RunningContext context,\n                                          Collection<SecurityAnalysisInterceptor> interceptors) {\n         this.filter = Objects.requireNonNull(filter);\n         this.context = Objects.requireNonNull(context);\n         this.interceptors = ImmutableList.copyOf(interceptors);\n-        this.postContingencyResults = new ArrayList<>();\n     }\n \n     public SecurityAnalysisResultBuilder(LimitViolationFilter filter, RunningContext context) {\n         this(filter, context, Collections.emptyList());\n     }\n \n-    /**\n-     * Initiates the creation of the result for one {@link Contingency}.\n-     * @param contingency  the contingency for which a result should be created\n-     * @return             this SecurityAnalysisResultBuilder instance\n-     */\n-    public SecurityAnalysisResultBuilder contingency(Contingency contingency) {\n-        if (currentBuilder != null) {\n-            throw new IllegalStateException(\"Cannot start a new post-contingency result\");\n-        }\n-        currentBuilder = new PostContingencyResultBuilder(contingency);\n-        return this;\n+    private void setPreContingencyResult(LimitViolationsResult preContingencyResult) {\n+        this.preContingencyResult = Objects.requireNonNull(preContingencyResult);\n     }\n \n-    /**\n-     * Initiates the creation of the result for N situation.\n-     * @return this SecurityAnalysisResultBuilder instance.\n-     */\n-    public SecurityAnalysisResultBuilder preContingency() {\n-        if (currentBuilder != null) {\n-            throw new IllegalStateException(\"Cannot start a new pre-contingency result\");\n-        }\n-\n-        currentBuilder = new PreContingencyResultBuilder();\n-        return this;\n+    private void addPostContingencyResult(PostContingencyResult result) {\n+        postContingencyResults.add(Objects.requireNonNull(result));\n     }\n \n     /**\n-     * Finalize the creation of the PreContingencyResult instance\n-     * @return this SecurityAnalysisResultBuilder instance.\n+     * Initiates the creation of the result for N situation.\n+     * @return a {@link PreContingencyResultBuilder} instance.\n      */\n-    public SecurityAnalysisResultBuilder endPreContingency() {\n-        if (currentBuilder instanceof PreContingencyResultBuilder) {\n-            ((PreContingencyResultBuilder) currentBuilder).endPreContingency();\n-            currentBuilder = null;\n-            return this;\n-        }\n-\n-        throw new IllegalStateException(\"Cannot create the pre-contingency result\");\n+    public PreContingencyResultBuilder preContingency() {\n+        return new PreContingencyResultBuilder();\n     }\n \n     /**\n-     * Finalize the creation of the PostContingencyResult instance\n-     * @return this SecurityAnalysisResultBuilder instance.\n+     * Initiates the creation of the result for one {@link Contingency}.\n+     * @param contingency  the contingency for which a result should be created\n+     * @return a {@link PostContingencyResultBuilder} instance.\n      */\n-    public SecurityAnalysisResultBuilder endContingency() {\n-        if (currentBuilder instanceof PostContingencyResultBuilder) {\n-            ((PostContingencyResultBuilder) currentBuilder).endContingency();\n-            currentBuilder = null;\n-            return this;\n-        }\n-\n-        throw new IllegalStateException(\"Cannot create the post-contingency result\");\n-    }\n-\n-    /**\n-     * Add a violation for the current result\n-     * @return this SecurityAnalysisResultBuilder instance.\n-     */\n-    public SecurityAnalysisResultBuilder addViolation(LimitViolation violation) {\n-        if (currentBuilder == null) {\n-            throw new IllegalStateException(\"Cannot add the violation: currentBuilder is not set\");\n-        }\n-\n-        currentBuilder.addViolation(violation);\n-        return this;\n-    }\n-\n-    public SecurityAnalysisResultBuilder setComputationOk(boolean computationOk) {\n-        if (currentBuilder == null) {\n-            throw new IllegalStateException(\"Cannot set computation status: currentBuilder is not set\");\n-        }\n-\n-        currentBuilder.setComputationOk(computationOk);\n-        return this;\n+    public PostContingencyResultBuilder contingency(Contingency contingency) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2edf9d978fbf576c4e8e1c92bafebc467f4d2a46"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTYyOTM2OnYy", "diffSide": "RIGHT", "path": "security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjozNDoyMlrOFzwLzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjozNDoyMlrOFzwLzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgxMTE0OA==", "bodyText": "Strictly speaking this is a breaking change : we should add the label and update the migration guide.", "url": "https://github.com/powsybl/powsybl-core/pull/1207#discussion_r389811148", "createdAt": "2020-03-09T16:34:22Z", "author": {"login": "sylvlecl"}, "path": "security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java", "diffHunk": "@@ -31,106 +31,49 @@\n \n     // Below are volatile objects used for building the actual complete result\n     private LimitViolationsResult preContingencyResult;\n-    private List<PostContingencyResult> postContingencyResults;\n-\n-    private ResultBuilder currentBuilder = null;\n+    private final List<PostContingencyResult> postContingencyResults = Collections.synchronizedList(new ArrayList<>());\n \n     public SecurityAnalysisResultBuilder(LimitViolationFilter filter, RunningContext context,\n                                          Collection<SecurityAnalysisInterceptor> interceptors) {\n         this.filter = Objects.requireNonNull(filter);\n         this.context = Objects.requireNonNull(context);\n         this.interceptors = ImmutableList.copyOf(interceptors);\n-        this.postContingencyResults = new ArrayList<>();\n     }\n \n     public SecurityAnalysisResultBuilder(LimitViolationFilter filter, RunningContext context) {\n         this(filter, context, Collections.emptyList());\n     }\n \n-    /**\n-     * Initiates the creation of the result for one {@link Contingency}.\n-     * @param contingency  the contingency for which a result should be created\n-     * @return             this SecurityAnalysisResultBuilder instance\n-     */\n-    public SecurityAnalysisResultBuilder contingency(Contingency contingency) {\n-        if (currentBuilder != null) {\n-            throw new IllegalStateException(\"Cannot start a new post-contingency result\");\n-        }\n-        currentBuilder = new PostContingencyResultBuilder(contingency);\n-        return this;\n+    private void setPreContingencyResult(LimitViolationsResult preContingencyResult) {\n+        this.preContingencyResult = Objects.requireNonNull(preContingencyResult);\n     }\n \n-    /**\n-     * Initiates the creation of the result for N situation.\n-     * @return this SecurityAnalysisResultBuilder instance.\n-     */\n-    public SecurityAnalysisResultBuilder preContingency() {\n-        if (currentBuilder != null) {\n-            throw new IllegalStateException(\"Cannot start a new pre-contingency result\");\n-        }\n-\n-        currentBuilder = new PreContingencyResultBuilder();\n-        return this;\n+    private void addPostContingencyResult(PostContingencyResult result) {\n+        postContingencyResults.add(Objects.requireNonNull(result));\n     }\n \n     /**\n-     * Finalize the creation of the PreContingencyResult instance\n-     * @return this SecurityAnalysisResultBuilder instance.\n+     * Initiates the creation of the result for N situation.\n+     * @return a {@link PreContingencyResultBuilder} instance.\n      */\n-    public SecurityAnalysisResultBuilder endPreContingency() {\n-        if (currentBuilder instanceof PreContingencyResultBuilder) {\n-            ((PreContingencyResultBuilder) currentBuilder).endPreContingency();\n-            currentBuilder = null;\n-            return this;\n-        }\n-\n-        throw new IllegalStateException(\"Cannot create the pre-contingency result\");\n+    public PreContingencyResultBuilder preContingency() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2edf9d978fbf576c4e8e1c92bafebc467f4d2a46"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTcyNzMwOnYy", "diffSide": "RIGHT", "path": "security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjo1ODo0MFrOFzxHpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjo1ODo0MFrOFzxHpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgyNjQ3MA==", "bodyText": "Not really in favor of proposing this new method, but why not :\nI prefer to leave the detection responsibility to the user of the builder, while the builder's responsibility is really only to build the result.\nMaybe if we keep it, we should rename it to something like \"detectViolations\".", "url": "https://github.com/powsybl/powsybl-core/pull/1207#discussion_r389826470", "createdAt": "2020-03-09T16:58:40Z", "author": {"login": "sylvlecl"}, "path": "security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java", "diffHunk": "@@ -143,62 +86,87 @@ public SecurityAnalysisResult build() {\n     }\n \n     /**\n-     * Provides access to the security analysis running context to children classes.\n-     * @return the security analysis running context.\n+     * Base class for the pre and post contingency builders.\n      */\n-    protected RunningContext getContext() {\n-        return context;\n-    }\n-\n-    private interface ResultBuilder {\n-\n-        void setComputationOk(boolean computationOk);\n-\n-        void addViolation(LimitViolation violation);\n-\n-    }\n-\n-    private class LimitViolationsResultBuilder implements ResultBuilder {\n+    public abstract static class AbstractLimitViolationsResultBuilder<B extends AbstractLimitViolationsResultBuilder<B>> {\n \n         protected boolean computationOk;\n \n         protected final List<LimitViolation> violations = new ArrayList<>();\n \n-        @Override\n-        public void setComputationOk(boolean computationOk) {\n+        public B setComputationOk(boolean computationOk) {\n             this.computationOk = computationOk;\n+            return (B) this;\n         }\n \n-        @Override\n-        public void addViolation(LimitViolation violation) {\n+        public B addViolation(LimitViolation violation) {\n             violations.add(Objects.requireNonNull(violation));\n+            return (B) this;\n         }\n \n+        public B addViolations(List<LimitViolation> violations) {\n+            violations.forEach(this::addViolation);\n+            return (B) this;\n+        }\n+\n+        public abstract B addViolations(LimitViolationDetector detector);\n     }\n \n-    private class PreContingencyResultBuilder extends LimitViolationsResultBuilder {\n+    /**\n+     * Builder for the pre-contingency result\n+     */\n+    public class PreContingencyResultBuilder extends AbstractLimitViolationsResultBuilder<PreContingencyResultBuilder> {\n+\n+        @Override\n+        public PreContingencyResultBuilder addViolations(LimitViolationDetector detector) {\n+            Objects.requireNonNull(detector);\n+\n+            detector.checkAll(context.getNetwork(), this::addViolation);\n+\n+            return this;\n+        }\n \n-        void endPreContingency() {\n+        /**\n+         * Finalize the creation of the PreContingencyResult instance\n+         * @return the parent {@link SecurityAnalysisResultBuilder} instance.\n+         */\n+        public SecurityAnalysisResultBuilder endPreContingency() {\n             List<LimitViolation> filteredViolations = filter.apply(violations, context.getNetwork());\n             LimitViolationsResult res = new LimitViolationsResult(computationOk, filteredViolations);\n             interceptors.forEach(i -> i.onPreContingencyResult(context, res));\n-            preContingencyResult = res;\n+            setPreContingencyResult(res);\n+\n+            return SecurityAnalysisResultBuilder.this;\n         }\n     }\n \n-    private class PostContingencyResultBuilder extends LimitViolationsResultBuilder {\n+    public class PostContingencyResultBuilder extends AbstractLimitViolationsResultBuilder<PostContingencyResultBuilder> {\n \n         private final Contingency contingency;\n \n         PostContingencyResultBuilder(Contingency contingency) {\n             this.contingency = Objects.requireNonNull(contingency);\n         }\n \n-        void endContingency() {\n+        public PostContingencyResultBuilder addViolations(LimitViolationDetector detector) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2edf9d978fbf576c4e8e1c92bafebc467f4d2a46"}, "originalPosition": 211}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 94, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}