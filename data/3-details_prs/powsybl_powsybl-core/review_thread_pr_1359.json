{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2OTU2ODkw", "number": 1359, "reviewThreads": {"totalCount": 47, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwODowMDozN1rOEHd2rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMzo0MTozMlrOFLSNig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjY0NjIyOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/LoadingLimits.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwODowMDozN1rOGm12-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwODowMDozN1rOGm12-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM4MTQ5Nw==", "bodyText": "Don't forget the license header", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r443381497", "createdAt": "2020-06-22T08:00:37Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/LoadingLimits.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.powsybl.iidm.network;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f8a5f9f9fc684ec88a15edcaf3cdae33b1db699"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjY0NzE3OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/LoadingLimitsAdder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwODowMDo1OVrOGm13lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwODowMDo1OVrOGm13lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM4MTY1Mw==", "bodyText": "Fix copyright information. I think you rename the CurrentLimitsAdder to LoadingLimitsAdder, but maybe you should fix it", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r443381653", "createdAt": "2020-06-22T08:00:59Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/LoadingLimitsAdder.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * Copyright (c) 2016, All partners of the iTesla project (http://www.itesla-project.eu/consortium)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f8a5f9f9fc684ec88a15edcaf3cdae33b1db699"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjY1MDQwOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/OperationalLimits.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwODowMTo1NlrOGm15lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwODowMTo1NlrOGm15lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM4MjE2Ng==", "bodyText": "Don't forget the license header", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r443382166", "createdAt": "2020-06-22T08:01:56Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/OperationalLimits.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.powsybl.iidm.network;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f8a5f9f9fc684ec88a15edcaf3cdae33b1db699"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Nzk2MjE1OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/LoadingLimits.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDoxMzo0N1rOGsGinA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzoyMjowMVrOGtW_ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5NzY5Mg==", "bodyText": "I am really at ease with this function name choice. I imagine that we have it from the actual API. What do you think ?", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r448897692", "createdAt": "2020-07-02T10:13:47Z", "author": {"login": "annetill"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/LoadingLimits.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network;\n+\n+import java.util.Collection;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ * @author Thibaut Vermeulen <thibaut.vermeulen at rte-france.com>\n+ */\n+public interface LoadingLimits extends OperationalLimits {\n+\n+    /**\n+     * Temporary current limit.\n+     */\n+    interface TemporaryLimit {\n+\n+        /**\n+         * Get the temporary limit name\n+         * @return the temporary limit name\n+         */\n+        String getName();\n+\n+        /**\n+         * Get the temporary limit value.\n+         * @return the temporary limit value\n+         */\n+        double getValue();\n+\n+        /**\n+         * Get the acceptable duration of the limit in second.\n+         * @return the acceptable duration of the limit in second\n+         */\n+        int getAcceptableDuration();\n+\n+        /**\n+         * Check if the temporary limit is a real limit corresponding to an overloading  protection or just an operating\n+         * rule\n+         * @return false if it is a real limit, false otherwise\n+         */\n+        boolean isFictitious();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3MjQwNg==", "bodyText": "I agree: we should rename this method. This method returns true if there is an protection automaton that monitor the equipment. I think we can find a better name.", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450072406", "createdAt": "2020-07-06T08:43:38Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/LoadingLimits.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network;\n+\n+import java.util.Collection;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ * @author Thibaut Vermeulen <thibaut.vermeulen at rte-france.com>\n+ */\n+public interface LoadingLimits extends OperationalLimits {\n+\n+    /**\n+     * Temporary current limit.\n+     */\n+    interface TemporaryLimit {\n+\n+        /**\n+         * Get the temporary limit name\n+         * @return the temporary limit name\n+         */\n+        String getName();\n+\n+        /**\n+         * Get the temporary limit value.\n+         * @return the temporary limit value\n+         */\n+        double getValue();\n+\n+        /**\n+         * Get the acceptable duration of the limit in second.\n+         * @return the acceptable duration of the limit in second\n+         */\n+        int getAcceptableDuration();\n+\n+        /**\n+         * Check if the temporary limit is a real limit corresponding to an overloading  protection or just an operating\n+         * rule\n+         * @return false if it is a real limit, false otherwise\n+         */\n+        boolean isFictitious();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5NzY5Mg=="}, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIxNTg3NQ==", "bodyText": "Okay, I agree, is hasOverloadingProtection() an okay name?\nAlso, I am not sure limits other than current limits can have protection automaton, should this be specific to CurrentLimits.TL?", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450215875", "createdAt": "2020-07-06T13:22:01Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/LoadingLimits.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network;\n+\n+import java.util.Collection;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ * @author Thibaut Vermeulen <thibaut.vermeulen at rte-france.com>\n+ */\n+public interface LoadingLimits extends OperationalLimits {\n+\n+    /**\n+     * Temporary current limit.\n+     */\n+    interface TemporaryLimit {\n+\n+        /**\n+         * Get the temporary limit name\n+         * @return the temporary limit name\n+         */\n+        String getName();\n+\n+        /**\n+         * Get the temporary limit value.\n+         * @return the temporary limit value\n+         */\n+        double getValue();\n+\n+        /**\n+         * Get the acceptable duration of the limit in second.\n+         * @return the acceptable duration of the limit in second\n+         */\n+        int getAcceptableDuration();\n+\n+        /**\n+         * Check if the temporary limit is a real limit corresponding to an overloading  protection or just an operating\n+         * rule\n+         * @return false if it is a real limit, false otherwise\n+         */\n+        boolean isFictitious();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5NzY5Mg=="}, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Nzk5MTIzOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Branch.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDoyMjoxNVrOGsG0jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODozNjoyOFrOGtN_eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwMjI4Nw==", "bodyText": "I am not sure to well understand: here we don't have the methods getApparentPowerLimits1() and getActivePowerLimits1() ?  So how do I do to get them ?", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r448902287", "createdAt": "2020-07-02T10:22:15Z", "author": {"login": "annetill"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Branch.java", "diffHunk": "@@ -57,16 +60,79 @@\n \n     Side getSide(Terminal terminal);\n \n-    CurrentLimits getCurrentLimits(Side side);\n+    /**\n+     * @deprecated Use {@link #getOperationalLimits1(LimitType, Class)} or {@link #getOperationalLimits2(LimitType, Class)} instead.\n+     */\n+    @Deprecated\n+    default CurrentLimits getCurrentLimits(Side side) {\n+        if (side == Side.ONE) {\n+            return getOperationalLimits1(LimitType.CURRENT, CurrentLimits.class);\n+        } else if (side == Side.TWO) {\n+            return getOperationalLimits2(LimitType.CURRENT, CurrentLimits.class);\n+        }\n+        throw new AssertionError(\"Unexpected side: \" + side);\n+    }\n \n-    CurrentLimits getCurrentLimits1();\n+    /**\n+     * @deprecated Use {@link #getOperationalLimits1(LimitType, Class)} instead.\n+     */\n+    @Deprecated\n+    default CurrentLimits getCurrentLimits1() {\n+        return getOperationalLimits1(LimitType.CURRENT, CurrentLimits.class);\n+    }\n+\n+    default List<OperationalLimits> getOperationalLimits1() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA2ODM0Ng==", "bodyText": "This method will return a list of operational limit, that contains apparent limits, active power limits, and current limits.\nIn the API, we have to give a default behavior to the method to ensure backward compatibility. In previous IIDM version, only current limits was supported. So the implementation seems correct.", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450068346", "createdAt": "2020-07-06T08:36:28Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Branch.java", "diffHunk": "@@ -57,16 +60,79 @@\n \n     Side getSide(Terminal terminal);\n \n-    CurrentLimits getCurrentLimits(Side side);\n+    /**\n+     * @deprecated Use {@link #getOperationalLimits1(LimitType, Class)} or {@link #getOperationalLimits2(LimitType, Class)} instead.\n+     */\n+    @Deprecated\n+    default CurrentLimits getCurrentLimits(Side side) {\n+        if (side == Side.ONE) {\n+            return getOperationalLimits1(LimitType.CURRENT, CurrentLimits.class);\n+        } else if (side == Side.TWO) {\n+            return getOperationalLimits2(LimitType.CURRENT, CurrentLimits.class);\n+        }\n+        throw new AssertionError(\"Unexpected side: \" + side);\n+    }\n \n-    CurrentLimits getCurrentLimits1();\n+    /**\n+     * @deprecated Use {@link #getOperationalLimits1(LimitType, Class)} instead.\n+     */\n+    @Deprecated\n+    default CurrentLimits getCurrentLimits1() {\n+        return getOperationalLimits1(LimitType.CURRENT, CurrentLimits.class);\n+    }\n+\n+    default List<OperationalLimits> getOperationalLimits1() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwMjI4Nw=="}, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Nzk5NDE2OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/DanglingLine.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDoyMzoxNVrOGsG2WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzoyMjozMlrOGtXBNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwMjc0NQ==", "bodyText": "Same remark, how do I access to apparent power limits and active power limits ?", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r448902745", "createdAt": "2020-07-02T10:23:15Z", "author": {"login": "annetill"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/DanglingLine.java", "diffHunk": "@@ -98,8 +101,21 @@\n      */\n     String getUcteXnodeCode();\n \n-    CurrentLimits getCurrentLimits();\n-\n-    CurrentLimitsAdder newCurrentLimits();\n-\n+    /**\n+     * @deprecated Use {@link #getOperationalLimits(LimitType, Class)} instead.\n+     */\n+    @Deprecated\n+    default CurrentLimits getCurrentLimits() {\n+        return getOperationalLimits(LimitType.CURRENT, CurrentLimits.class);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwMzIyMg==", "bodyText": "Indeed you just leave getCurrentLimits() for compatibility but you will remove it ?", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r448903222", "createdAt": "2020-07-02T10:24:14Z", "author": {"login": "annetill"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/DanglingLine.java", "diffHunk": "@@ -98,8 +101,21 @@\n      */\n     String getUcteXnodeCode();\n \n-    CurrentLimits getCurrentLimits();\n-\n-    CurrentLimitsAdder newCurrentLimits();\n-\n+    /**\n+     * @deprecated Use {@link #getOperationalLimits(LimitType, Class)} instead.\n+     */\n+    @Deprecated\n+    default CurrentLimits getCurrentLimits() {\n+        return getOperationalLimits(LimitType.CURRENT, CurrentLimits.class);\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwMjc0NQ=="}, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIxNjI0Nw==", "bodyText": "Yes, this is it.", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450216247", "createdAt": "2020-07-06T13:22:32Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/DanglingLine.java", "diffHunk": "@@ -98,8 +101,21 @@\n      */\n     String getUcteXnodeCode();\n \n-    CurrentLimits getCurrentLimits();\n-\n-    CurrentLimitsAdder newCurrentLimits();\n-\n+    /**\n+     * @deprecated Use {@link #getOperationalLimits(LimitType, Class)} instead.\n+     */\n+    @Deprecated\n+    default CurrentLimits getCurrentLimits() {\n+        return getOperationalLimits(LimitType.CURRENT, CurrentLimits.class);\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwMjc0NQ=="}, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODAwMjgzOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Switch.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDoyNjowMVrOGsG72w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzoyNDowMFrOGtXE_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwNDE1NQ==", "bodyText": "Mmmmm I think that we have a problem here. Do you have any idea of the solution ?", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r448904155", "createdAt": "2020-07-02T10:26:01Z", "author": {"login": "annetill"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Switch.java", "diffHunk": "@@ -53,4 +56,44 @@\n      * @param retained the retain status of the switch\n      */\n     void setRetained(boolean retained);\n+\n+    default List<OperationalLimits> getOperationalLimits1() {\n+        return Collections.emptyList();\n+    }\n+\n+    default <L extends OperationalLimits> L getOperationalLimits1(LimitType limitType, Class<L> limitClazz) {\n+        return null;\n+    }\n+\n+    default CurrentLimitsAdder newCurrentLimits1() {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwNDgxMQ==", "bodyText": "Do we have a side for switches ?", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r448904811", "createdAt": "2020-07-02T10:27:20Z", "author": {"login": "annetill"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Switch.java", "diffHunk": "@@ -53,4 +56,44 @@\n      * @param retained the retain status of the switch\n      */\n     void setRetained(boolean retained);\n+\n+    default List<OperationalLimits> getOperationalLimits1() {\n+        return Collections.emptyList();\n+    }\n+\n+    default <L extends OperationalLimits> L getOperationalLimits1(LimitType limitType, Class<L> limitClazz) {\n+        return null;\n+    }\n+\n+    default CurrentLimitsAdder newCurrentLimits1() {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwNDE1NQ=="}, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIxNzIxMw==", "bodyText": "We don't have \"side\" object per see, but we discriminate between node1 and node2 (or bus1 and bus2) of a switch", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450217213", "createdAt": "2020-07-06T13:24:00Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Switch.java", "diffHunk": "@@ -53,4 +56,44 @@\n      * @param retained the retain status of the switch\n      */\n     void setRetained(boolean retained);\n+\n+    default List<OperationalLimits> getOperationalLimits1() {\n+        return Collections.emptyList();\n+    }\n+\n+    default <L extends OperationalLimits> L getOperationalLimits1(LimitType limitType, Class<L> limitClazz) {\n+        return null;\n+    }\n+\n+    default CurrentLimitsAdder newCurrentLimits1() {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwNDE1NQ=="}, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODAyNDA0OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Injection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDozMjo0MlrOGsHIwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzoyNDozOFrOGtXGdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwNzQ1OA==", "bodyText": "Why do we have this exception ?", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r448907458", "createdAt": "2020-07-02T10:32:42Z", "author": {"login": "annetill"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Injection.java", "diffHunk": "@@ -18,4 +21,27 @@\n      */\n     Terminal getTerminal();\n \n+    default List<OperationalLimits> getOperationalLimits() {\n+        return Collections.emptyList();\n+    }\n+\n+    default <L extends OperationalLimits> L getOperationalLimits(LimitType type, Class<L> limitClazz) {\n+        return null;\n+    }\n+\n+    default CurrentLimitsAdder newCurrentLimits() {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIxNzU5MQ==", "bodyText": "It is only to prevent breaking change (error in implementation - for example in persistent IIDM)", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450217591", "createdAt": "2020-07-06T13:24:38Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Injection.java", "diffHunk": "@@ -18,4 +21,27 @@\n      */\n     Terminal getTerminal();\n \n+    default List<OperationalLimits> getOperationalLimits() {\n+        return Collections.emptyList();\n+    }\n+\n+    default <L extends OperationalLimits> L getOperationalLimits(LimitType type, Class<L> limitClazz) {\n+        return null;\n+    }\n+\n+    default CurrentLimitsAdder newCurrentLimits() {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwNzQ1OA=="}, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTg5ODQ3OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Branch.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODozMjo0MlrOGtN3hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwOToyMzowNFrOGtPn4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA2NjMwOQ==", "bodyText": "Should we be more specific? The type of the limit is not CURRENT anymore?", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450066309", "createdAt": "2020-07-06T08:32:42Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Branch.java", "diffHunk": "@@ -28,7 +31,7 @@\n          * In particular, it determines the duration during which\n          * the current current value may be sustained.\n          */\n-        CurrentLimits.TemporaryLimit getTemporaryLimit();\n+        LoadingLimits.TemporaryLimit getTemporaryLimit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5NTA3Mw==", "bodyText": "Good remark... Not sure but I think for now, it will only be for current limits, I will keep it at that.", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450095073", "createdAt": "2020-07-06T09:23:04Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Branch.java", "diffHunk": "@@ -28,7 +31,7 @@\n          * In particular, it determines the duration during which\n          * the current current value may be sustained.\n          */\n-        CurrentLimits.TemporaryLimit getTemporaryLimit();\n+        LoadingLimits.TemporaryLimit getTemporaryLimit();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA2NjMwOQ=="}, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTkwMzM3OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Branch.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODozNDowNFrOGtN6dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOTo1MTo1NlrOGt3U1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA2NzA2MQ==", "bodyText": "I don't know if it's possible, but to have the same bahaviour you have to use the new method, but the first parameter is LimitType.CURRENT and the second one is CurrentLimits.class", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450067061", "createdAt": "2020-07-06T08:34:04Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Branch.java", "diffHunk": "@@ -57,16 +60,79 @@\n \n     Side getSide(Terminal terminal);\n \n-    CurrentLimits getCurrentLimits(Side side);\n+    /**\n+     * @deprecated Use {@link #getOperationalLimits1(LimitType, Class)} or {@link #getOperationalLimits2(LimitType, Class)} instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc0NTU1Ng==", "bodyText": "Add snipets of code in javadoc to specify it", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450745556", "createdAt": "2020-07-07T09:51:56Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Branch.java", "diffHunk": "@@ -57,16 +60,79 @@\n \n     Side getSide(Terminal terminal);\n \n-    CurrentLimits getCurrentLimits(Side side);\n+    /**\n+     * @deprecated Use {@link #getOperationalLimits1(LimitType, Class)} or {@link #getOperationalLimits2(LimitType, Class)} instead.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA2NzA2MQ=="}, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTkwNDI5OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Branch.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODozNDoxOVrOGtN7BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOTo1MjowM1rOGt3VFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA2NzIwNA==", "bodyText": "Same remark", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450067204", "createdAt": "2020-07-06T08:34:19Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Branch.java", "diffHunk": "@@ -57,16 +60,79 @@\n \n     Side getSide(Terminal terminal);\n \n-    CurrentLimits getCurrentLimits(Side side);\n+    /**\n+     * @deprecated Use {@link #getOperationalLimits1(LimitType, Class)} or {@link #getOperationalLimits2(LimitType, Class)} instead.\n+     */\n+    @Deprecated\n+    default CurrentLimits getCurrentLimits(Side side) {\n+        if (side == Side.ONE) {\n+            return getOperationalLimits1(LimitType.CURRENT, CurrentLimits.class);\n+        } else if (side == Side.TWO) {\n+            return getOperationalLimits2(LimitType.CURRENT, CurrentLimits.class);\n+        }\n+        throw new AssertionError(\"Unexpected side: \" + side);\n+    }\n \n-    CurrentLimits getCurrentLimits1();\n+    /**\n+     * @deprecated Use {@link #getOperationalLimits1(LimitType, Class)} instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc0NTYyMA==", "bodyText": "Same", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450745620", "createdAt": "2020-07-07T09:52:03Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Branch.java", "diffHunk": "@@ -57,16 +60,79 @@\n \n     Side getSide(Terminal terminal);\n \n-    CurrentLimits getCurrentLimits(Side side);\n+    /**\n+     * @deprecated Use {@link #getOperationalLimits1(LimitType, Class)} or {@link #getOperationalLimits2(LimitType, Class)} instead.\n+     */\n+    @Deprecated\n+    default CurrentLimits getCurrentLimits(Side side) {\n+        if (side == Side.ONE) {\n+            return getOperationalLimits1(LimitType.CURRENT, CurrentLimits.class);\n+        } else if (side == Side.TWO) {\n+            return getOperationalLimits2(LimitType.CURRENT, CurrentLimits.class);\n+        }\n+        throw new AssertionError(\"Unexpected side: \" + side);\n+    }\n \n-    CurrentLimits getCurrentLimits1();\n+    /**\n+     * @deprecated Use {@link #getOperationalLimits1(LimitType, Class)} instead.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA2NzIwNA=="}, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTkxNzY0OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Branch.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODozODoxN1rOGtODfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODoxMjowMVrOGtzrqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA2OTM3NQ==", "bodyText": "I don't know how it's possible, but do we really need to pass both parameters? For instance, in ReactiveLimitsHolder, we only pass the class:\n<L extends ReactiveLimits> L getReactiveLimits(Class<L> type)", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450069375", "createdAt": "2020-07-06T08:38:17Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Branch.java", "diffHunk": "@@ -57,16 +60,79 @@\n \n     Side getSide(Terminal terminal);\n \n-    CurrentLimits getCurrentLimits(Side side);\n+    /**\n+     * @deprecated Use {@link #getOperationalLimits1(LimitType, Class)} or {@link #getOperationalLimits2(LimitType, Class)} instead.\n+     */\n+    @Deprecated\n+    default CurrentLimits getCurrentLimits(Side side) {\n+        if (side == Side.ONE) {\n+            return getOperationalLimits1(LimitType.CURRENT, CurrentLimits.class);\n+        } else if (side == Side.TWO) {\n+            return getOperationalLimits2(LimitType.CURRENT, CurrentLimits.class);\n+        }\n+        throw new AssertionError(\"Unexpected side: \" + side);\n+    }\n \n-    CurrentLimits getCurrentLimits1();\n+    /**\n+     * @deprecated Use {@link #getOperationalLimits1(LimitType, Class)} instead.\n+     */\n+    @Deprecated\n+    default CurrentLimits getCurrentLimits1() {\n+        return getOperationalLimits1(LimitType.CURRENT, CurrentLimits.class);\n+    }\n+\n+    default List<OperationalLimits> getOperationalLimits1() {\n+        return Collections.singletonList(getCurrentLimits1());\n+    }\n+\n+    default <L extends OperationalLimits> L getOperationalLimits1(LimitType limitType, Class<L> limitClazz) {\n+        return limitType == LimitType.CURRENT && limitClazz == CurrentLimits.class ? (L) getCurrentLimits1() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY4NTg2NA==", "bodyText": "The issue is: what do we do if a user passes a parent class of two different kinds of limits? (for example, LoadingLimits.class). We do not have this issue with reactive limits because an equipment only has one instance of reactive limits.", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450685864", "createdAt": "2020-07-07T08:12:01Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Branch.java", "diffHunk": "@@ -57,16 +60,79 @@\n \n     Side getSide(Terminal terminal);\n \n-    CurrentLimits getCurrentLimits(Side side);\n+    /**\n+     * @deprecated Use {@link #getOperationalLimits1(LimitType, Class)} or {@link #getOperationalLimits2(LimitType, Class)} instead.\n+     */\n+    @Deprecated\n+    default CurrentLimits getCurrentLimits(Side side) {\n+        if (side == Side.ONE) {\n+            return getOperationalLimits1(LimitType.CURRENT, CurrentLimits.class);\n+        } else if (side == Side.TWO) {\n+            return getOperationalLimits2(LimitType.CURRENT, CurrentLimits.class);\n+        }\n+        throw new AssertionError(\"Unexpected side: \" + side);\n+    }\n \n-    CurrentLimits getCurrentLimits1();\n+    /**\n+     * @deprecated Use {@link #getOperationalLimits1(LimitType, Class)} instead.\n+     */\n+    @Deprecated\n+    default CurrentLimits getCurrentLimits1() {\n+        return getOperationalLimits1(LimitType.CURRENT, CurrentLimits.class);\n+    }\n+\n+    default List<OperationalLimits> getOperationalLimits1() {\n+        return Collections.singletonList(getCurrentLimits1());\n+    }\n+\n+    default <L extends OperationalLimits> L getOperationalLimits1(LimitType limitType, Class<L> limitClazz) {\n+        return limitType == LimitType.CURRENT && limitClazz == CurrentLimits.class ? (L) getCurrentLimits1() : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA2OTM3NQ=="}, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTkyNjA1OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Branch.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo0MDoyN1rOGtOIeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzoyNzowOFrOGtXM0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3MDY0OA==", "bodyText": "Are all these type of limits are possible for lines and/or transformers? I thought apparentPower was for transformers: we do not have this information for lines.", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450070648", "createdAt": "2020-07-06T08:40:27Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Branch.java", "diffHunk": "@@ -57,16 +60,79 @@\n \n     Side getSide(Terminal terminal);\n \n-    CurrentLimits getCurrentLimits(Side side);\n+    /**\n+     * @deprecated Use {@link #getOperationalLimits1(LimitType, Class)} or {@link #getOperationalLimits2(LimitType, Class)} instead.\n+     */\n+    @Deprecated\n+    default CurrentLimits getCurrentLimits(Side side) {\n+        if (side == Side.ONE) {\n+            return getOperationalLimits1(LimitType.CURRENT, CurrentLimits.class);\n+        } else if (side == Side.TWO) {\n+            return getOperationalLimits2(LimitType.CURRENT, CurrentLimits.class);\n+        }\n+        throw new AssertionError(\"Unexpected side: \" + side);\n+    }\n \n-    CurrentLimits getCurrentLimits1();\n+    /**\n+     * @deprecated Use {@link #getOperationalLimits1(LimitType, Class)} instead.\n+     */\n+    @Deprecated\n+    default CurrentLimits getCurrentLimits1() {\n+        return getOperationalLimits1(LimitType.CURRENT, CurrentLimits.class);\n+    }\n+\n+    default List<OperationalLimits> getOperationalLimits1() {\n+        return Collections.singletonList(getCurrentLimits1());\n+    }\n+\n+    default <L extends OperationalLimits> L getOperationalLimits1(LimitType limitType, Class<L> limitClazz) {\n+        return limitType == LimitType.CURRENT && limitClazz == CurrentLimits.class ? (L) getCurrentLimits1() : null;\n+    }\n \n     CurrentLimitsAdder newCurrentLimits1();\n \n-    CurrentLimits getCurrentLimits2();\n+    default ApparentPowerLimitsAdder newApparentPowerLimits1() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    default ActivePowerLimitsAdder newActivePowerLimits1() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    default VoltageLimitsAdder newVoltageLimits1() {\n+        throw new UnsupportedOperationException();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIxOTIxNg==", "bodyText": "apparentPower is voltage*current so it should be fine (ratedS is manufacturer information). For voltage limits, I think we would look at bus voltage at the point of connection of the equipment to check if the limit is respected or not", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450219216", "createdAt": "2020-07-06T13:27:08Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Branch.java", "diffHunk": "@@ -57,16 +60,79 @@\n \n     Side getSide(Terminal terminal);\n \n-    CurrentLimits getCurrentLimits(Side side);\n+    /**\n+     * @deprecated Use {@link #getOperationalLimits1(LimitType, Class)} or {@link #getOperationalLimits2(LimitType, Class)} instead.\n+     */\n+    @Deprecated\n+    default CurrentLimits getCurrentLimits(Side side) {\n+        if (side == Side.ONE) {\n+            return getOperationalLimits1(LimitType.CURRENT, CurrentLimits.class);\n+        } else if (side == Side.TWO) {\n+            return getOperationalLimits2(LimitType.CURRENT, CurrentLimits.class);\n+        }\n+        throw new AssertionError(\"Unexpected side: \" + side);\n+    }\n \n-    CurrentLimits getCurrentLimits1();\n+    /**\n+     * @deprecated Use {@link #getOperationalLimits1(LimitType, Class)} instead.\n+     */\n+    @Deprecated\n+    default CurrentLimits getCurrentLimits1() {\n+        return getOperationalLimits1(LimitType.CURRENT, CurrentLimits.class);\n+    }\n+\n+    default List<OperationalLimits> getOperationalLimits1() {\n+        return Collections.singletonList(getCurrentLimits1());\n+    }\n+\n+    default <L extends OperationalLimits> L getOperationalLimits1(LimitType limitType, Class<L> limitClazz) {\n+        return limitType == LimitType.CURRENT && limitClazz == CurrentLimits.class ? (L) getCurrentLimits1() : null;\n+    }\n \n     CurrentLimitsAdder newCurrentLimits1();\n \n-    CurrentLimits getCurrentLimits2();\n+    default ApparentPowerLimitsAdder newApparentPowerLimits1() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    default ActivePowerLimitsAdder newActivePowerLimits1() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    default VoltageLimitsAdder newVoltageLimits1() {\n+        throw new UnsupportedOperationException();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3MDY0OA=="}, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTkzMjc3OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Injection.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo0MjoxNlrOGtOMcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzoyODoxOFrOGtXP7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3MTY2Nw==", "bodyText": "Some of the operation limits are weird for injections. In IIDM, we do not have sufficient information to compute them.", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450071667", "createdAt": "2020-07-06T08:42:16Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Injection.java", "diffHunk": "@@ -18,4 +21,27 @@\n      */\n     Terminal getTerminal();\n \n+    default List<OperationalLimits> getOperationalLimits() {\n+        return Collections.emptyList();\n+    }\n+\n+    default <L extends OperationalLimits> L getOperationalLimits(LimitType type, Class<L> limitClazz) {\n+        return null;\n+    }\n+\n+    default CurrentLimitsAdder newCurrentLimits() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    default ApparentPowerLimitsAdder newApparentPowerLimits() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    default ActivePowerLimitsAdder newActivePowerLimits() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    default VoltageLimitsAdder newVoltageLimits() {\n+        throw new UnsupportedOperationException();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIyMDAxNQ==", "bodyText": "Same answer as above", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450220015", "createdAt": "2020-07-06T13:28:18Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Injection.java", "diffHunk": "@@ -18,4 +21,27 @@\n      */\n     Terminal getTerminal();\n \n+    default List<OperationalLimits> getOperationalLimits() {\n+        return Collections.emptyList();\n+    }\n+\n+    default <L extends OperationalLimits> L getOperationalLimits(LimitType type, Class<L> limitClazz) {\n+        return null;\n+    }\n+\n+    default CurrentLimitsAdder newCurrentLimits() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    default ApparentPowerLimitsAdder newApparentPowerLimits() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    default ActivePowerLimitsAdder newActivePowerLimits() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    default VoltageLimitsAdder newVoltageLimits() {\n+        throw new UnsupportedOperationException();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3MTY2Nw=="}, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTk0MDQwOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/OperationalLimits.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo0NDozMlrOGtORRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzozMDowMFrOGtXUPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3MjkwMg==", "bodyText": "I'm not convinced you have to provide a default method here: default method should not be used to factorize the code (use abstract class instead).", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450072902", "createdAt": "2020-07-06T08:44:32Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/OperationalLimits.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ * @author Thibaut Vermeulen <thibaut.vermeulen at rte-france.com>\n+ */\n+public interface OperationalLimits {\n+    /**\n+     * Get the operational limits' type (can be APPARENT_POWER, CURRENT or VOLTAGE)\n+     */\n+    LimitType getLimitType();\n+\n+    default void remove() {\n+        // do nothing\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIyMTExOA==", "bodyText": "It is mostly to prevent breaking changes. Is it better in your opinion to throw an exception?", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450221118", "createdAt": "2020-07-06T13:30:00Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/OperationalLimits.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ * @author Thibaut Vermeulen <thibaut.vermeulen at rte-france.com>\n+ */\n+public interface OperationalLimits {\n+    /**\n+     * Get the operational limits' type (can be APPARENT_POWER, CURRENT or VOLTAGE)\n+     */\n+    LimitType getLimitType();\n+\n+    default void remove() {\n+        // do nothing\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3MjkwMg=="}, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTk0NjMzOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Switch.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo0NjowM1rOGtOU0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo0NjowM1rOGtOU0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3MzgwOA==", "bodyText": "I would refactor a little bit the code: create a OperationLimitsHolder interface, to avoid to declare these methods everywhere?", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450073808", "createdAt": "2020-07-06T08:46:03Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Switch.java", "diffHunk": "@@ -53,4 +56,44 @@\n      * @param retained the retain status of the switch\n      */\n     void setRetained(boolean retained);\n+\n+    default List<OperationalLimits> getOperationalLimits1() {\n+        return Collections.emptyList();\n+    }\n+\n+    default <L extends OperationalLimits> L getOperationalLimits1(LimitType limitType, Class<L> limitClazz) {\n+        return null;\n+    }\n+\n+    default CurrentLimitsAdder newCurrentLimits1() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    default ApparentPowerLimitsAdder newApparentPowerLimits1() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    default VoltageLimitsAdder newVoltageLimits1() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    default List<OperationalLimits> getOperationalLimits2() {\n+        return Collections.emptyList();\n+    }\n+\n+    default <L extends OperationalLimits> L getOperationalLimits2(LimitType limitType, Class<L> limitClazz) {\n+        return null;\n+    }\n+\n+    default CurrentLimitsAdder newCurrentLimits2() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    default ApparentPowerLimitsAdder newApparentPowerLimits2() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    default VoltageLimitsAdder newVoltageLimits2() {\n+        throw new UnsupportedOperationException();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTk0OTc0OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ValidationUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo0Njo1N1rOGtOW1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo0Njo1N1rOGtOW1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3NDMyNw==", "bodyText": "I think a word is missing:\n\nmust be defined and greater than 0", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450074327", "createdAt": "2020-07-06T08:46:57Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ValidationUtil.java", "diffHunk": "@@ -385,8 +385,9 @@ public static void checkConnected(Validable validable, Boolean connected) {\n     }\n \n     public static void checkPermanentLimit(Validable validable, double permanentLimit) {\n+        // TODO: if (Double.isNaN(permanentLimit) || permanentLimit <= 0) {\n         if (permanentLimit <= 0) {\n-            throw new ValidationException(validable, \"permanent limit must be > 0\");\n+            throw new ValidationException(validable, \"permanent limit must defined and be > 0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTk1NDMyOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractBranch.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo0ODowOVrOGtOZfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzozMjoxMVrOGtXZVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3NTAwNA==", "bodyText": "Is it really useful to have these getters?", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450075004", "createdAt": "2020-07-06T08:48:09Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractBranch.java", "diffHunk": "@@ -80,54 +82,71 @@ public Side getSide(Terminal terminal) {\n     }\n \n     @Override\n-    public void setCurrentLimits(Branch.Side side, CurrentLimitsImpl limits) {\n-        switch (side) {\n-            case ONE:\n-                CurrentLimits oldValue1 = limits1;\n-                limits1 = limits;\n-                notifyUpdate(\"currentLimits1\", oldValue1, limits1);\n-                break;\n-            case TWO:\n-                CurrentLimits oldValue2 = limits2;\n-                limits2 = limits;\n-                notifyUpdate(\"currentLimits2\", oldValue2, limits2);\n-                break;\n-            default:\n-                throw new AssertionError(\"Unexpected Branch.Side value: \" + side);\n-        }\n+    public List<OperationalLimits> getOperationalLimits1() {\n+        return operationalLimitsHolder1.getOperationalLimits();\n     }\n \n     @Override\n-    public CurrentLimits getCurrentLimits(Side side) {\n-        switch (side) {\n-            case ONE:\n-                return limits1;\n-            case TWO:\n-                return limits2;\n-            default:\n-                throw new AssertionError(\"Unexpected Branch.Side value: \" + side);\n-        }\n+    public <L extends OperationalLimits> L getOperationalLimits1(LimitType limitType, Class<L> limitClazz) {\n+        return operationalLimitsHolder1.getOperationalLimits(limitType, limitClazz);\n+    }\n+\n+    @Override\n+    public CurrentLimitsAdder newCurrentLimits1() {\n+        return operationalLimitsHolder1.newCurrentLimits();\n+    }\n \n+    @Override\n+    public ApparentPowerLimitsAdder newApparentPowerLimits1() {\n+        return operationalLimitsHolder1.newApparentPowerLimits();\n     }\n \n     @Override\n-    public CurrentLimits getCurrentLimits1() {\n-        return limits1;\n+    public ActivePowerLimitsAdder newActivePowerLimits1() {\n+        return operationalLimitsHolder1.newActivePowerLimitsAdder();\n     }\n \n     @Override\n-    public CurrentLimitsAdder newCurrentLimits1() {\n-        return new CurrentLimitsAdderImpl<>(Branch.Side.ONE, this);\n+    public VoltageLimitsAdder newVoltageLimits1() {\n+        return operationalLimitsHolder1.newVoltageLimits();\n     }\n \n     @Override\n-    public CurrentLimits getCurrentLimits2() {\n-        return limits2;\n+    public List<OperationalLimits> getOperationalLimits2() {\n+        return operationalLimitsHolder2.getOperationalLimits();\n+    }\n+\n+    @Override\n+    public <L extends OperationalLimits> L getOperationalLimits2(LimitType limitType, Class<L> limitClazz) {\n+        return operationalLimitsHolder2.getOperationalLimits(limitType, limitClazz);\n     }\n \n     @Override\n     public CurrentLimitsAdder newCurrentLimits2() {\n-        return new CurrentLimitsAdderImpl<>(Branch.Side.TWO, this);\n+        return operationalLimitsHolder2.newCurrentLimits();\n+    }\n+\n+    @Override\n+    public ApparentPowerLimitsAdder newApparentPowerLimits2() {\n+        return operationalLimitsHolder2.newApparentPowerLimits();\n+    }\n+\n+    @Override\n+    public ActivePowerLimitsAdder newActivePowerLimits2() {\n+        return operationalLimitsHolder2.newActivePowerLimitsAdder();\n+    }\n+\n+    @Override\n+    public VoltageLimitsAdder newVoltageLimits2() {\n+        return operationalLimitsHolder2.newVoltageLimits();\n+    }\n+\n+    OperationalLimitsHolderImpl getLimitsHolder1() {\n+        return operationalLimitsHolder1;\n+    }\n+\n+    OperationalLimitsHolderImpl getLimitsHolder2() {\n+        return operationalLimitsHolder2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIyMjQyMw==", "bodyText": "Yes, for topological merge in NetworkImpl", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450222423", "createdAt": "2020-07-06T13:32:11Z", "author": {"login": "miovd"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractBranch.java", "diffHunk": "@@ -80,54 +82,71 @@ public Side getSide(Terminal terminal) {\n     }\n \n     @Override\n-    public void setCurrentLimits(Branch.Side side, CurrentLimitsImpl limits) {\n-        switch (side) {\n-            case ONE:\n-                CurrentLimits oldValue1 = limits1;\n-                limits1 = limits;\n-                notifyUpdate(\"currentLimits1\", oldValue1, limits1);\n-                break;\n-            case TWO:\n-                CurrentLimits oldValue2 = limits2;\n-                limits2 = limits;\n-                notifyUpdate(\"currentLimits2\", oldValue2, limits2);\n-                break;\n-            default:\n-                throw new AssertionError(\"Unexpected Branch.Side value: \" + side);\n-        }\n+    public List<OperationalLimits> getOperationalLimits1() {\n+        return operationalLimitsHolder1.getOperationalLimits();\n     }\n \n     @Override\n-    public CurrentLimits getCurrentLimits(Side side) {\n-        switch (side) {\n-            case ONE:\n-                return limits1;\n-            case TWO:\n-                return limits2;\n-            default:\n-                throw new AssertionError(\"Unexpected Branch.Side value: \" + side);\n-        }\n+    public <L extends OperationalLimits> L getOperationalLimits1(LimitType limitType, Class<L> limitClazz) {\n+        return operationalLimitsHolder1.getOperationalLimits(limitType, limitClazz);\n+    }\n+\n+    @Override\n+    public CurrentLimitsAdder newCurrentLimits1() {\n+        return operationalLimitsHolder1.newCurrentLimits();\n+    }\n \n+    @Override\n+    public ApparentPowerLimitsAdder newApparentPowerLimits1() {\n+        return operationalLimitsHolder1.newApparentPowerLimits();\n     }\n \n     @Override\n-    public CurrentLimits getCurrentLimits1() {\n-        return limits1;\n+    public ActivePowerLimitsAdder newActivePowerLimits1() {\n+        return operationalLimitsHolder1.newActivePowerLimitsAdder();\n     }\n \n     @Override\n-    public CurrentLimitsAdder newCurrentLimits1() {\n-        return new CurrentLimitsAdderImpl<>(Branch.Side.ONE, this);\n+    public VoltageLimitsAdder newVoltageLimits1() {\n+        return operationalLimitsHolder1.newVoltageLimits();\n     }\n \n     @Override\n-    public CurrentLimits getCurrentLimits2() {\n-        return limits2;\n+    public List<OperationalLimits> getOperationalLimits2() {\n+        return operationalLimitsHolder2.getOperationalLimits();\n+    }\n+\n+    @Override\n+    public <L extends OperationalLimits> L getOperationalLimits2(LimitType limitType, Class<L> limitClazz) {\n+        return operationalLimitsHolder2.getOperationalLimits(limitType, limitClazz);\n     }\n \n     @Override\n     public CurrentLimitsAdder newCurrentLimits2() {\n-        return new CurrentLimitsAdderImpl<>(Branch.Side.TWO, this);\n+        return operationalLimitsHolder2.newCurrentLimits();\n+    }\n+\n+    @Override\n+    public ApparentPowerLimitsAdder newApparentPowerLimits2() {\n+        return operationalLimitsHolder2.newApparentPowerLimits();\n+    }\n+\n+    @Override\n+    public ActivePowerLimitsAdder newActivePowerLimits2() {\n+        return operationalLimitsHolder2.newActivePowerLimitsAdder();\n+    }\n+\n+    @Override\n+    public VoltageLimitsAdder newVoltageLimits2() {\n+        return operationalLimitsHolder2.newVoltageLimits();\n+    }\n+\n+    OperationalLimitsHolderImpl getLimitsHolder1() {\n+        return operationalLimitsHolder1;\n+    }\n+\n+    OperationalLimitsHolderImpl getLimitsHolder2() {\n+        return operationalLimitsHolder2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3NTAwNA=="}, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTk1ODEzOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractLoadingLimits.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo0OToxMFrOGtObtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo0OToxMFrOGtObtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3NTU3NA==", "bodyText": "Reorder these attributes: owner, permanentLimit, temporaryLimit", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450075574", "createdAt": "2020-07-06T08:49:10Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractLoadingLimits.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.impl;\n+\n+import com.powsybl.iidm.network.LoadingLimits;\n+import com.powsybl.iidm.network.ValidationUtil;\n+\n+import java.util.Collection;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+abstract class AbstractLoadingLimits<L extends AbstractLoadingLimits<L>> implements LoadingLimits {\n+\n+    private double permanentLimit;\n+\n+    private final TreeMap<Integer, TemporaryLimit> temporaryLimits;\n+\n+    protected final OperationalLimitsOwner owner;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTk1OTg1OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractLoadingLimits.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo0OTozN1rOGtOcvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo0OTozN1rOGtOcvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3NTgzOQ==", "bodyText": "Move the owner at the first place.", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450075839", "createdAt": "2020-07-06T08:49:37Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractLoadingLimits.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.impl;\n+\n+import com.powsybl.iidm.network.LoadingLimits;\n+import com.powsybl.iidm.network.ValidationUtil;\n+\n+import java.util.Collection;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+abstract class AbstractLoadingLimits<L extends AbstractLoadingLimits<L>> implements LoadingLimits {\n+\n+    private double permanentLimit;\n+\n+    private final TreeMap<Integer, TemporaryLimit> temporaryLimits;\n+\n+    protected final OperationalLimitsOwner owner;\n+\n+    static class TemporaryLimitImpl implements TemporaryLimit {\n+\n+        private final String name;\n+\n+        private final double value;\n+\n+        private final int acceptableDuration;\n+\n+        private boolean fictitious;\n+\n+        TemporaryLimitImpl(String name, double value, int acceptableDuration, boolean fictitious) {\n+            this.name = Objects.requireNonNull(name);\n+            this.value = value;\n+            this.acceptableDuration = acceptableDuration;\n+            this.fictitious = fictitious;\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return name;\n+        }\n+\n+        @Override\n+        public double getValue() {\n+            return value;\n+        }\n+\n+        @Override\n+        public int getAcceptableDuration() {\n+            return acceptableDuration;\n+        }\n+\n+        @Override\n+        public boolean isFictitious() {\n+            return fictitious;\n+        }\n+    }\n+\n+    AbstractLoadingLimits(double permanentLimit, TreeMap<Integer, TemporaryLimit> temporaryLimits, OperationalLimitsOwner owner) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTk2NjY1OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ApparentPowerLimitsImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo1MTozMVrOGtOg7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNToxODowN1rOHVV2VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3NjkwOQ==", "bodyText": "I think the remove method could me mutualized:\nowner.setOperationLimit(getLimitType(), null);", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450076909", "createdAt": "2020-07-06T08:51:31Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ApparentPowerLimitsImpl.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.impl;\n+\n+import com.powsybl.iidm.network.ApparentPowerLimits;\n+import com.powsybl.iidm.network.LimitType;\n+\n+import java.util.TreeMap;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+class ApparentPowerLimitsImpl extends AbstractLoadingLimits<ApparentPowerLimitsImpl> implements ApparentPowerLimits {\n+\n+    ApparentPowerLimitsImpl(double permanentLimit, TreeMap<Integer, TemporaryLimit> temporaryLimits, OperationalLimitsOwner owner) {\n+        super(permanentLimit, temporaryLimits, owner);\n+    }\n+\n+    @Override\n+    public void remove() {\n+        owner.setOperationalLimits(LimitType.APPARENT_POWER, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE0MDExNg==", "bodyText": "It seems you liked my comment, but you didn't take it into account", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r492140116", "createdAt": "2020-09-21T15:18:07Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ApparentPowerLimitsImpl.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.impl;\n+\n+import com.powsybl.iidm.network.ApparentPowerLimits;\n+import com.powsybl.iidm.network.LimitType;\n+\n+import java.util.TreeMap;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+class ApparentPowerLimitsImpl extends AbstractLoadingLimits<ApparentPowerLimitsImpl> implements ApparentPowerLimits {\n+\n+    ApparentPowerLimitsImpl(double permanentLimit, TreeMap<Integer, TemporaryLimit> temporaryLimits, OperationalLimitsOwner owner) {\n+        super(permanentLimit, temporaryLimits, owner);\n+    }\n+\n+    @Override\n+    public void remove() {\n+        owner.setOperationalLimits(LimitType.APPARENT_POWER, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3NjkwOQ=="}, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTk3MTQ5OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/OperationalLimitsHolderImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo1Mjo0NFrOGtOjuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo1Mjo0NFrOGtOjuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3NzYyNw==", "bodyText": "Are null allowed?\nYou should switch the parameter order", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450077627", "createdAt": "2020-07-06T08:52:44Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/OperationalLimitsHolderImpl.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.impl;\n+\n+import com.powsybl.iidm.network.*;\n+\n+import java.util.ArrayList;\n+import java.util.EnumMap;\n+import java.util.List;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+class OperationalLimitsHolderImpl implements OperationalLimitsOwner {\n+\n+    private final EnumMap<LimitType, OperationalLimits> operationalLimits = new EnumMap<>(LimitType.class);\n+    private final AbstractIdentifiable<?> identifiable;\n+    private final String attributeName;\n+\n+    OperationalLimitsHolderImpl(String attributeName, AbstractIdentifiable<?> identifiable) {\n+        this.identifiable = identifiable;\n+        this.attributeName = attributeName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTk3ODI5OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ThreeWindingsTransformerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo1NDozMVrOGtOn1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzo1NDoyNVrOGtYQpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3ODY3OA==", "bodyText": "Should be declared as final?", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450078678", "createdAt": "2020-07-06T08:54:31Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ThreeWindingsTransformerImpl.java", "diffHunk": "@@ -37,7 +34,7 @@\n \n         private double ratedS;\n \n-        private CurrentLimits limits;\n+        private OperationalLimitsHolderImpl operationalLimitsHolder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIzNjU4MQ==", "bodyText": "It is only set in setTransformer() i.e. when the transformer is created which is only after the legs are created, which explains why it isn't final.", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450236581", "createdAt": "2020-07-06T13:54:25Z", "author": {"login": "miovd"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ThreeWindingsTransformerImpl.java", "diffHunk": "@@ -37,7 +34,7 @@\n \n         private double ratedS;\n \n-        private CurrentLimits limits;\n+        private OperationalLimitsHolderImpl operationalLimitsHolder;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3ODY3OA=="}, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTk4NDQ5OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/VoltageLimitsImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo1NjowMVrOGtOrfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo1NjowMVrOGtOrfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3OTYxNA==", "bodyText": "Do we need to introduce a new method to avoid this duplication (3 times)", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450079614", "createdAt": "2020-07-06T08:56:01Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/VoltageLimitsImpl.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.impl;\n+\n+import com.powsybl.iidm.network.ValidationException;\n+import com.powsybl.iidm.network.ValidationUtil;\n+import com.powsybl.iidm.network.VoltageLimits;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+class VoltageLimitsImpl implements VoltageLimits {\n+\n+    private final OperationalLimitsOwner owner;\n+    private double highVoltage;\n+    private double lowVoltage;\n+\n+    VoltageLimitsImpl(OperationalLimitsOwner owner, double lowVoltage, double highVoltage) {\n+        this.owner = owner;\n+        this.highVoltage = highVoltage;\n+        this.lowVoltage = lowVoltage;\n+    }\n+\n+    @Override\n+    public double getHighVoltage() {\n+        return highVoltage;\n+    }\n+\n+    @Override\n+    public VoltageLimits setHighVoltage(double highVoltage) {\n+        if (Double.isNaN(lowVoltage) && Double.isNaN(highVoltage)) {\n+            throw new ValidationException(owner, \"At least the low or the high voltage limit must be defined.\");\n+        }\n+        ValidationUtil.checkVoltageLimits(owner, lowVoltage, highVoltage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTk4NzQyOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/AbstractBranchAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo1Njo0NFrOGtOtNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo1Njo0NFrOGtOtNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA4MDA1NQ==", "bodyText": "Remove these methods?", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450080055", "createdAt": "2020-07-06T08:56:44Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/AbstractBranchAdapter.java", "diffHunk": "@@ -53,30 +52,83 @@ public Side getSide(final Terminal terminal) {\n     // Simple delegated methods ------\n     // -------------------------------\n     @Override\n+    @Deprecated\n     public CurrentLimits getCurrentLimits(final Side side) {\n         return getDelegate().getCurrentLimits(side);\n     }\n \n     @Override\n+    @Deprecated\n     public CurrentLimits getCurrentLimits1() {\n         return getDelegate().getCurrentLimits1();\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTk4OTMwOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/DanglingLineAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo1NzoxM1rOGtOuWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo1NzoxM1rOGtOuWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA4MDM0Nw==", "bodyText": "Remove this method", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450080347", "createdAt": "2020-07-06T08:57:13Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/DanglingLineAdapter.java", "diffHunk": "@@ -92,12 +92,8 @@ public String getUcteXnodeCode() {\n     }\n \n     @Override\n+    @Deprecated\n     public CurrentLimits getCurrentLimits() {\n         return getDelegate().getCurrentLimits();\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTk5MDg1OnYy", "diffSide": "LEFT", "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/DanglingLineAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo1Nzo0MFrOGtOvTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzo1NzoyN1rOGtYZFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA4MDU4OQ==", "bodyText": "Why this method is removed?", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450080589", "createdAt": "2020-07-06T08:57:40Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/DanglingLineAdapter.java", "diffHunk": "@@ -92,12 +92,8 @@ public String getUcteXnodeCode() {\n     }\n \n     @Override\n+    @Deprecated\n     public CurrentLimits getCurrentLimits() {\n         return getDelegate().getCurrentLimits();\n     }\n-\n-    @Override\n-    public CurrentLimitsAdder newCurrentLimits() {\n-        return getDelegate().newCurrentLimits();\n-    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIzODc0Mw==", "bodyText": "I deplaced it in AbstractInjectionAdapter", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r450238743", "createdAt": "2020-07-06T13:57:27Z", "author": {"login": "miovd"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/DanglingLineAdapter.java", "diffHunk": "@@ -92,12 +92,8 @@ public String getUcteXnodeCode() {\n     }\n \n     @Override\n+    @Deprecated\n     public CurrentLimits getCurrentLimits() {\n         return getDelegate().getCurrentLimits();\n     }\n-\n-    @Override\n-    public CurrentLimitsAdder newCurrentLimits() {\n-        return getDelegate().newCurrentLimits();\n-    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA4MDU4OQ=="}, "originalCommit": {"oid": "d6113474e8c1a3f5f3a5af097c03ded105d0adbe"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTc5NzQ2OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ValidationUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNToxNDoxMVrOHVVkgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNToxNDoxMVrOHVVkgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEzNTU1Mg==", "bodyText": "What about this TODO?", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r492135552", "createdAt": "2020-09-21T15:14:11Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ValidationUtil.java", "diffHunk": "@@ -385,8 +392,9 @@ public static void checkConnected(Validable validable, Boolean connected) {\n     }\n \n     public static void checkPermanentLimit(Validable validable, double permanentLimit) {\n+        // TODO: if (Double.isNaN(permanentLimit) || permanentLimit <= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbd020879e44c3337ab15fdfd2b5adcd8c585a44"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTgzMzA3OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNToxOToxM1rOHVV7KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNToxOToxM1rOHVV7KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE0MTM1Mw==", "bodyText": "I would hide the getLimitsHolder from the API, because it's not really user friendly", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r492141353", "createdAt": "2020-09-21T15:19:13Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/NetworkImpl.java", "diffHunk": "@@ -995,8 +994,8 @@ private void replaceDanglingLineByLine(List<MergedLine> lines, Multimap<Boundary\n                 la.setNode2(mergedLine.node2);\n             }\n             TieLineImpl l = la.add();\n-            l.setCurrentLimits(Side.ONE, (CurrentLimitsImpl) mergedLine.limits1);\n-            l.setCurrentLimits(Side.TWO, (CurrentLimitsImpl) mergedLine.limits2);\n+            l.getLimitsHolder1().setOperationalLimits(LimitType.CURRENT, mergedLine.limits1);\n+            l.getLimitsHolder2().setOperationalLimits(LimitType.CURRENT, mergedLine.limits2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbd020879e44c3337ab15fdfd2b5adcd8c585a44"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTg0NzM2OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/VoltageLimitsImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNToyMToyM1rOHVWEFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMTo1OToyNVrOIFNNeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE0MzYzOA==", "bodyText": "Should we notify the listeners when setters are called. Same remark everywhere. I think it was done in the previous version\nThe add and remove method should also notify", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r492143638", "createdAt": "2020-09-21T15:21:23Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/VoltageLimitsImpl.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.impl;\n+\n+import com.powsybl.iidm.network.ValidationUtil;\n+import com.powsybl.iidm.network.VoltageLimits;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+class VoltageLimitsImpl extends AbstractOperationalLimits implements VoltageLimits {\n+\n+    private double highVoltage;\n+    private double lowVoltage;\n+\n+    VoltageLimitsImpl(OperationalLimitsOwner owner, double lowVoltage, double highVoltage) {\n+        super(owner);\n+        this.highVoltage = highVoltage;\n+        this.lowVoltage = lowVoltage;\n+    }\n+\n+    @Override\n+    public double getHighVoltage() {\n+        return highVoltage;\n+    }\n+\n+    @Override\n+    public VoltageLimits setHighVoltage(double highVoltage) {\n+        ValidationUtil.checkDefinedVoltageLimits(owner, lowVoltage, highVoltage);\n+        this.highVoltage = highVoltage;\n+        return this;\n+    }\n+\n+    @Override\n+    public double getLowVoltage() {\n+        return lowVoltage;\n+    }\n+\n+    @Override\n+    public VoltageLimits setLowVoltage(double lowVoltage) {\n+        ValidationUtil.checkDefinedVoltageLimits(owner, lowVoltage, highVoltage);\n+        this.lowVoltage = lowVoltage;\n+        return this;\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbd020879e44c3337ab15fdfd2b5adcd8c585a44"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIyNjc1Ng==", "bodyText": "@MioRtia: Could you please considerer this remark", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r542226756", "createdAt": "2020-12-14T09:18:42Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/VoltageLimitsImpl.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.impl;\n+\n+import com.powsybl.iidm.network.ValidationUtil;\n+import com.powsybl.iidm.network.VoltageLimits;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+class VoltageLimitsImpl extends AbstractOperationalLimits implements VoltageLimits {\n+\n+    private double highVoltage;\n+    private double lowVoltage;\n+\n+    VoltageLimitsImpl(OperationalLimitsOwner owner, double lowVoltage, double highVoltage) {\n+        super(owner);\n+        this.highVoltage = highVoltage;\n+        this.lowVoltage = lowVoltage;\n+    }\n+\n+    @Override\n+    public double getHighVoltage() {\n+        return highVoltage;\n+    }\n+\n+    @Override\n+    public VoltageLimits setHighVoltage(double highVoltage) {\n+        ValidationUtil.checkDefinedVoltageLimits(owner, lowVoltage, highVoltage);\n+        this.highVoltage = highVoltage;\n+        return this;\n+    }\n+\n+    @Override\n+    public double getLowVoltage() {\n+        return lowVoltage;\n+    }\n+\n+    @Override\n+    public VoltageLimits setLowVoltage(double lowVoltage) {\n+        ValidationUtil.checkDefinedVoltageLimits(owner, lowVoltage, highVoltage);\n+        this.lowVoltage = lowVoltage;\n+        return this;\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE0MzYzOA=="}, "originalCommit": {"oid": "bbd020879e44c3337ab15fdfd2b5adcd8c585a44"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMzMDIzNA==", "bodyText": "Ah, yes we can. Will be modified.", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r542330234", "createdAt": "2020-12-14T11:59:25Z", "author": {"login": "miovd"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/VoltageLimitsImpl.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.impl;\n+\n+import com.powsybl.iidm.network.ValidationUtil;\n+import com.powsybl.iidm.network.VoltageLimits;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+class VoltageLimitsImpl extends AbstractOperationalLimits implements VoltageLimits {\n+\n+    private double highVoltage;\n+    private double lowVoltage;\n+\n+    VoltageLimitsImpl(OperationalLimitsOwner owner, double lowVoltage, double highVoltage) {\n+        super(owner);\n+        this.highVoltage = highVoltage;\n+        this.lowVoltage = lowVoltage;\n+    }\n+\n+    @Override\n+    public double getHighVoltage() {\n+        return highVoltage;\n+    }\n+\n+    @Override\n+    public VoltageLimits setHighVoltage(double highVoltage) {\n+        ValidationUtil.checkDefinedVoltageLimits(owner, lowVoltage, highVoltage);\n+        this.highVoltage = highVoltage;\n+        return this;\n+    }\n+\n+    @Override\n+    public double getLowVoltage() {\n+        return lowVoltage;\n+    }\n+\n+    @Override\n+    public VoltageLimits setLowVoltage(double lowVoltage) {\n+        ValidationUtil.checkDefinedVoltageLimits(owner, lowVoltage, highVoltage);\n+        this.lowVoltage = lowVoltage;\n+        return this;\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE0MzYzOA=="}, "originalCommit": {"oid": "bbd020879e44c3337ab15fdfd2b5adcd8c585a44"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjE2MzIzOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-tck/src/test/java/com/powsybl/iidm/network/tck/AbstractVoltageLimitsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMjozMjo0NVrOH5xV-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMjozMjo0NVrOH5xV-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMzOTMyMA==", "bodyText": "Finally we allow voltage limits on equipments ? I thought we decided to limit voltage limits to buses and bus bar sections. I am not sure to be able to simulate that level of details in the open load flow for example.", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r530339320", "createdAt": "2020-11-25T12:32:45Z", "author": {"login": "annetill"}, "path": "iidm/iidm-tck/src/test/java/com/powsybl/iidm/network/tck/AbstractVoltageLimitsTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.tck;\n+\n+import com.powsybl.iidm.network.Load;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.iidm.network.VoltageLimits;\n+import com.powsybl.iidm.network.test.EurostagTutorialExample1Factory;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public abstract class AbstractVoltageLimitsTest {\n+\n+    private static Network createNetwork() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c83e6e9ebf85fe2bcf0ab643b961524ef7650b"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjE4NjA5OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/ThreeWindingsTransformerAdapter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMjozODozNlrOH5xjpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMjozODozNlrOH5xjpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM0MjgyMQ==", "bodyText": "I am not sure to understand how voltage limits work indeed. You associate it to the terminal connected at network side ? I imagine that it is similar for the other operational limits.", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r530342821", "createdAt": "2020-11-25T12:38:36Z", "author": {"login": "annetill"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/ThreeWindingsTransformerAdapter.java", "diffHunk": "@@ -95,6 +100,36 @@ public CurrentLimitsAdder newCurrentLimits() {\n             return getDelegate().newCurrentLimits();\n         }\n \n+        @Override\n+        public ApparentPowerLimits getApparentPowerLimits() {\n+            return getDelegate().getApparentPowerLimits();\n+        }\n+\n+        @Override\n+        public ApparentPowerLimitsAdder newApparentPowerLimits() {\n+            return getDelegate().newApparentPowerLimits();\n+        }\n+\n+        @Override\n+        public ActivePowerLimits getActivePowerLimits() {\n+            return getDelegate().getActivePowerLimits();\n+        }\n+\n+        @Override\n+        public ActivePowerLimitsAdder newActivePowerLimits() {\n+            return getDelegate().newActivePowerLimits();\n+        }\n+\n+        @Override\n+        public VoltageLimits getVoltageLimits() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c83e6e9ebf85fe2bcf0ab643b961524ef7650b"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjE5MjkxOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/SwitchAdapter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMjo0MDoyMlrOH5xnrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMjo0MDoyMlrOH5xnrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM0Mzg1NA==", "bodyText": "Same remark about voltage limits.", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r530343854", "createdAt": "2020-11-25T12:40:22Z", "author": {"login": "annetill"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/SwitchAdapter.java", "diffHunk": "@@ -50,4 +51,49 @@ public boolean isRetained() {\n     public void setRetained(final boolean retained) {\n         getDelegate().setRetained(retained);\n     }\n+\n+    @Override\n+    public List<OperationalLimits> getOperationalLimits() {\n+        return getDelegate().getOperationalLimits();\n+    }\n+\n+    @Override\n+    public CurrentLimits getCurrentLimits() {\n+        return getDelegate().getCurrentLimits();\n+    }\n+\n+    @Override\n+    public CurrentLimitsAdder newCurrentLimits() {\n+        return getDelegate().newCurrentLimits();\n+    }\n+\n+    @Override\n+    public ActivePowerLimits getActivePowerLimits() {\n+        return getDelegate().getActivePowerLimits();\n+    }\n+\n+    @Override\n+    public ActivePowerLimitsAdder newActivePowerLimits() {\n+        return getDelegate().newActivePowerLimits();\n+    }\n+\n+    @Override\n+    public ApparentPowerLimits getApparentPowerLimits() {\n+        return getDelegate().getApparentPowerLimits();\n+    }\n+\n+    @Override\n+    public ApparentPowerLimitsAdder newApparentPowerLimits() {\n+        return getDelegate().newApparentPowerLimits();\n+    }\n+\n+    @Override\n+    public VoltageLimits getVoltageLimits() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c83e6e9ebf85fe2bcf0ab643b961524ef7650b"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjE5NDUzOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/SwitchAdapter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMjo0MDo0NVrOH5xomw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMjo0MDo0NVrOH5xomw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM0NDA5MQ==", "bodyText": "I thought that we decide to ignore operational limits for switches ?", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r530344091", "createdAt": "2020-11-25T12:40:45Z", "author": {"login": "annetill"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/SwitchAdapter.java", "diffHunk": "@@ -50,4 +51,49 @@ public boolean isRetained() {\n     public void setRetained(final boolean retained) {\n         getDelegate().setRetained(retained);\n     }\n+\n+    @Override\n+    public List<OperationalLimits> getOperationalLimits() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c83e6e9ebf85fe2bcf0ab643b961524ef7650b"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjIxMDkwOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/AbstractInjectionAdapter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMjo0NDo1N1rOH5xyqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMjo0NDo1N1rOH5xyqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM0NjY2NA==", "bodyText": "Same remark, to complex to deal with that for me.", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r530346664", "createdAt": "2020-11-25T12:44:57Z", "author": {"login": "annetill"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/AbstractInjectionAdapter.java", "diffHunk": "@@ -22,4 +23,49 @@ protected AbstractInjectionAdapter(I delegate, MergingViewIndex index) {\n     public final Terminal getTerminal() {\n         return getIndex().getTerminal(getDelegate().getTerminal());\n     }\n+\n+    @Override\n+    public List<OperationalLimits> getOperationalLimits() {\n+        return getDelegate().getOperationalLimits();\n+    }\n+\n+    @Override\n+    public CurrentLimits getCurrentLimits() {\n+        return getDelegate().getCurrentLimits();\n+    }\n+\n+    @Override\n+    public CurrentLimitsAdder newCurrentLimits() {\n+        return getDelegate().newCurrentLimits();\n+    }\n+\n+    @Override\n+    public ApparentPowerLimits getApparentPowerLimits() {\n+        return getDelegate().getApparentPowerLimits();\n+    }\n+\n+    @Override\n+    public ApparentPowerLimitsAdder newApparentPowerLimits() {\n+        return getDelegate().newApparentPowerLimits();\n+    }\n+\n+    @Override\n+    public ActivePowerLimits getActivePowerLimits() {\n+        return getDelegate().getActivePowerLimits();\n+    }\n+\n+    @Override\n+    public ActivePowerLimitsAdder newActivePowerLimits() {\n+        return getDelegate().newActivePowerLimits();\n+    }\n+\n+    @Override\n+    public VoltageLimits getVoltageLimits() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c83e6e9ebf85fe2bcf0ab643b961524ef7650b"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjIxNDM3OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/AbstractBranchAdapter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMjo0NTo0M1rOH5x0yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMjo0NTo0M1rOH5x0yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM0NzIxMQ==", "bodyText": "Same remark.", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r530347211", "createdAt": "2020-11-25T12:45:43Z", "author": {"login": "annetill"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/AbstractBranchAdapter.java", "diffHunk": "@@ -77,6 +111,36 @@ public CurrentLimitsAdder newCurrentLimits2() {\n         return getDelegate().newCurrentLimits2();\n     }\n \n+    @Override\n+    public ApparentPowerLimits getApparentPowerLimits2() {\n+        return getDelegate().getApparentPowerLimits2();\n+    }\n+\n+    @Override\n+    public ApparentPowerLimitsAdder newApparentPowerLimits2() {\n+        return getDelegate().newApparentPowerLimits2();\n+    }\n+\n+    @Override\n+    public ActivePowerLimits getActivePowerLimits2() {\n+        return getDelegate().getActivePowerLimits2();\n+    }\n+\n+    @Override\n+    public ActivePowerLimitsAdder newActivePowerLimits2() {\n+        return getDelegate().newActivePowerLimits2();\n+    }\n+\n+    @Override\n+    public VoltageLimits getVoltageLimits2() {\n+        return getDelegate().getVoltageLimits2();\n+    }\n+\n+    @Override\n+    public VoltageLimitsAdder newVoltageLimits2() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c83e6e9ebf85fe2bcf0ab643b961524ef7650b"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjIyOTcyOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/SwitchImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMjo0OTozOVrOH5x94A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMjo0OTozOVrOH5x94A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM0OTUzNg==", "bodyText": "For me, a switch does not have operational limits. It is going to increase considerably our network for nothing because secrutiy analysis are run on bus/breaker view.", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r530349536", "createdAt": "2020-11-25T12:49:39Z", "author": {"login": "annetill"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/SwitchImpl.java", "diffHunk": "@@ -137,4 +139,48 @@ protected String getTypeDescription() {\n         return \"Switch\";\n     }\n \n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c83e6e9ebf85fe2bcf0ab643b961524ef7650b"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjUwNDI3OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/test/java/com/powsybl/cgmes/conversion/test/conformity/modified/CgmesConformity1ModifiedConversionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwODo1MzoxNVrOIFF4uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwODo1MzoxNVrOIFF4uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIxMDIzMw==", "bodyText": "Lines 528 and 529 are the same: is there a regression? If not, remove one of the two lines.", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r542210233", "createdAt": "2020-12-14T08:53:15Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/test/java/com/powsybl/cgmes/conversion/test/conformity/modified/CgmesConformity1ModifiedConversionTest.java", "diffHunk": "@@ -526,7 +526,7 @@ public void miniNodeBreakerTestLimits() {\n         assertEquals(525, l0.getCurrentLimits1().getPermanentLimit(), tol);\n         assertNull(l0.getCurrentLimits2());\n         assertEquals(525, l1.getCurrentLimits1().getPermanentLimit(), tol);\n-        assertEquals(525, l1.getCurrentLimits2().getPermanentLimit(), tol);\n+        assertEquals(525, l1.getCurrentLimits1().getPermanentLimit(), tol);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "158afcb46784c9f23471efddc47653f0b179752f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjU0NTQ4OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Branch.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwOTowMjo0MlrOIFGQhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTowNToxNVrOIHJ1PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIxNjMyNQ==", "bodyText": "Still the same discussion: I suppose you will use this new method (and the others) in the converters. Suppose you use a different implementation of IIDM, this will crash the import.\nI don't know if we should care about it, or if we have to change our strategy for defaulted methods, like providing a mock that does nothing but ensure that the importers work with not updated implementations", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r542216325", "createdAt": "2020-12-14T09:02:42Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Branch.java", "diffHunk": "@@ -140,16 +143,81 @@\n \n     Side getSide(Terminal terminal);\n \n-    CurrentLimits getCurrentLimits(Side side);\n+    default List<OperationalLimits> getOperationalLimits1() {\n+        return getCurrentLimits1() != null ? Collections.singletonList(getCurrentLimits1()) : Collections.emptyList();\n+    }\n \n     CurrentLimits getCurrentLimits1();\n \n+    default ActivePowerLimits getActivePowerLimits1() {\n+        return null;\n+    }\n+\n+    default ApparentPowerLimits getApparentPowerLimits1() {\n+        return null;\n+    }\n+\n     CurrentLimitsAdder newCurrentLimits1();\n \n+    default ActivePowerLimitsAdder newActivePowerLimits1() {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "158afcb46784c9f23471efddc47653f0b179752f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMyODkxNw==", "bodyText": "To be honest, not sure what it is best for whole new objects... I worry that adding mock objects will only make the API more confusing", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r542328917", "createdAt": "2020-12-14T11:56:55Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Branch.java", "diffHunk": "@@ -140,16 +143,81 @@\n \n     Side getSide(Terminal terminal);\n \n-    CurrentLimits getCurrentLimits(Side side);\n+    default List<OperationalLimits> getOperationalLimits1() {\n+        return getCurrentLimits1() != null ? Collections.singletonList(getCurrentLimits1()) : Collections.emptyList();\n+    }\n \n     CurrentLimits getCurrentLimits1();\n \n+    default ActivePowerLimits getActivePowerLimits1() {\n+        return null;\n+    }\n+\n+    default ApparentPowerLimits getApparentPowerLimits1() {\n+        return null;\n+    }\n+\n     CurrentLimitsAdder newCurrentLimits1();\n \n+    default ActivePowerLimitsAdder newActivePowerLimits1() {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIxNjMyNQ=="}, "originalCommit": {"oid": "158afcb46784c9f23471efddc47653f0b179752f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM3MjAyOQ==", "bodyText": "The mock is not the good solution: what I mean is implementing the new methods with a throw will hide the issue. You don't break the compilation but it will fail at runtime that it's worst.", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r544372029", "createdAt": "2020-12-16T15:05:15Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Branch.java", "diffHunk": "@@ -140,16 +143,81 @@\n \n     Side getSide(Terminal terminal);\n \n-    CurrentLimits getCurrentLimits(Side side);\n+    default List<OperationalLimits> getOperationalLimits1() {\n+        return getCurrentLimits1() != null ? Collections.singletonList(getCurrentLimits1()) : Collections.emptyList();\n+    }\n \n     CurrentLimits getCurrentLimits1();\n \n+    default ActivePowerLimits getActivePowerLimits1() {\n+        return null;\n+    }\n+\n+    default ApparentPowerLimits getApparentPowerLimits1() {\n+        return null;\n+    }\n+\n     CurrentLimitsAdder newCurrentLimits1();\n \n+    default ActivePowerLimitsAdder newActivePowerLimits1() {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIxNjMyNQ=="}, "originalCommit": {"oid": "158afcb46784c9f23471efddc47653f0b179752f"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjU1MTMyOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Bus.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwOTowNDoxNVrOIFGT_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNjozMjozNFrOIH-FrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIxNzIxMw==", "bodyText": "I saw that the branch doesn't inherit from FlowsLimitsHolder. Do I miss something?\nTo be checked: how calculated bus manage limits.", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r542217213", "createdAt": "2020-12-14T09:04:15Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Bus.java", "diffHunk": "@@ -17,7 +17,7 @@\n  *\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n  */\n-public interface Bus extends Identifiable<Bus> {\n+public interface Bus extends Identifiable<Bus>, VoltageLimitsHolder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "158afcb46784c9f23471efddc47653f0b179752f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ0ODA2Mg==", "bodyText": "What I made was: when setting a calculated bus (NB to BB), it is actually the busbarsections underneath which are set (an error is thrown if there is none). For a merged bus (BusBreaker to Bus), it is actually the BB buses underneath which are set.", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r542448062", "createdAt": "2020-12-14T14:56:45Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Bus.java", "diffHunk": "@@ -17,7 +17,7 @@\n  *\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n  */\n-public interface Bus extends Identifiable<Bus> {\n+public interface Bus extends Identifiable<Bus>, VoltageLimitsHolder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIxNzIxMw=="}, "originalCommit": {"oid": "158afcb46784c9f23471efddc47653f0b179752f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ0ODg3MA==", "bodyText": "About FlowsLimitsHolder: there is only for holder with no side. Branch directly supports sided flows limits getters and setters in its API.", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r542448870", "createdAt": "2020-12-14T14:57:40Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Bus.java", "diffHunk": "@@ -17,7 +17,7 @@\n  *\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n  */\n-public interface Bus extends Identifiable<Bus> {\n+public interface Bus extends Identifiable<Bus>, VoltageLimitsHolder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIxNzIxMw=="}, "originalCommit": {"oid": "158afcb46784c9f23471efddc47653f0b179752f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5NTA3MQ==", "bodyText": "Changed a bit the mechanism in the new commits", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r542495071", "createdAt": "2020-12-14T15:54:25Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Bus.java", "diffHunk": "@@ -17,7 +17,7 @@\n  *\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n  */\n-public interface Bus extends Identifiable<Bus> {\n+public interface Bus extends Identifiable<Bus>, VoltageLimitsHolder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIxNzIxMw=="}, "originalCommit": {"oid": "158afcb46784c9f23471efddc47653f0b179752f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIyODIwNQ==", "bodyText": "I've thought a bit about your proposition and I don't think it is relevant to make Branch inherit from FlowsLimitHolder: indeed, in any cases, it hasn't any common methods with flow limit holder without sides so if we needed to iterate on FlowsLimitHolder, we would at the end cast it as Branch to use it so it is a bit pointless...\nFor example, we would have:\nIdentifiable i = network.getIdentifiable(\"i\");\nif (i instanceof FlowsLimitHolder) {\n     if (i instance of Branch) {\n           i.newCurrentLimits1()...\n     } else {\n           i.newCurrentLimits()...\n    }\n}\ninstead of:\nIdentifiable i = network.getIdentifiable(\"i\");\nif (i instanceof FlowsLimitHolder) {\n     i.newCurrentLimits().....\n} else if (i instanceof Branch) {\n     i.newCurrentLimits1().....\n}\nI think the second solution is clearer.", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r545228205", "createdAt": "2020-12-17T16:32:34Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/Bus.java", "diffHunk": "@@ -17,7 +17,7 @@\n  *\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n  */\n-public interface Bus extends Identifiable<Bus> {\n+public interface Bus extends Identifiable<Bus>, VoltageLimitsHolder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIxNzIxMw=="}, "originalCommit": {"oid": "158afcb46784c9f23471efddc47653f0b179752f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjU2ODg1OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/CalculatedBusImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwOTowODoxNFrOIFGeJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwOTowODoxNFrOIFGeJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIxOTgxMg==", "bodyText": "I'm pretty sure it won't be the case: I propose to sort the voltageLimits and return the lowest to avoid missing violations", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r542219812", "createdAt": "2020-12-14T09:08:14Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/CalculatedBusImpl.java", "diffHunk": "@@ -188,6 +188,23 @@ public Component getSynchronousComponent() {\n         return terminalRef == null ? null : scm.getComponent(terminalRef.getSynchronousComponentNumber());\n     }\n \n+    @Override\n+    public VoltageLimits getVoltageLimits() {\n+        return getConnectableStream(BusbarSection.class)\n+                .map(VoltageLimitsHolder::getVoltageLimits)\n+                .filter(Objects::nonNull)\n+                .findFirst() // we suppose that all voltage limits in a same calculated bus are equals", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "158afcb46784c9f23471efddc47653f0b179752f"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjU3NTYyOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/CalculatedBusImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwOTowOTo0NVrOIFGiHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwOTowOTo0NVrOIFGiHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIyMDgyOQ==", "bodyText": "I would throw an exception in all case: we could probably accept that limits have to be created from \"configured\" objects (BusbarSections and ConfiguredBus). It's arguable.", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r542220829", "createdAt": "2020-12-14T09:09:45Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/CalculatedBusImpl.java", "diffHunk": "@@ -188,6 +188,23 @@ public Component getSynchronousComponent() {\n         return terminalRef == null ? null : scm.getComponent(terminalRef.getSynchronousComponentNumber());\n     }\n \n+    @Override\n+    public VoltageLimits getVoltageLimits() {\n+        return getConnectableStream(BusbarSection.class)\n+                .map(VoltageLimitsHolder::getVoltageLimits)\n+                .filter(Objects::nonNull)\n+                .findFirst() // we suppose that all voltage limits in a same calculated bus are equals\n+                .orElse(null);\n+    }\n+\n+    @Override\n+    public VoltageLimitsAdder newVoltageLimits() {\n+        return getConnectableStream(BusbarSection.class)\n+                .findFirst()\n+                .map(VoltageLimitsHolder::newVoltageLimits)\n+                .orElseThrow(() -> new ValidationException(this, \"No busbarsection is associated to this calculated bus: no voltage limit can be created.\"));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "158afcb46784c9f23471efddc47653f0b179752f"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjU3ODc2OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/MergedBus.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwOToxMDoyOFrOIFGj2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwOToxMDoyOFrOIFGj2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIyMTI3Mg==", "bodyText": "See CalculatedBusImpl remarks", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r542221272", "createdAt": "2020-12-14T09:10:28Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/MergedBus.java", "diffHunk": "@@ -198,6 +199,23 @@ public Component getSynchronousComponent() {\n         throw new AssertionError(\"Should not happen\");\n     }\n \n+    @Override\n+    public VoltageLimits getVoltageLimits() {\n+        return buses.stream()\n+                .map(VoltageLimitsHolder::getVoltageLimits)\n+                .filter(Objects::nonNull)\n+                .findFirst() // we suppose that all voltage limits in a same calculated bus are equals\n+                .orElse(null);\n+    }\n+\n+    @Override\n+    public VoltageLimitsAdder newVoltageLimits() {\n+        return buses.stream()\n+                .findFirst()\n+                .map(VoltageLimitsHolder::newVoltageLimits)\n+                .orElseThrow(() -> new AssertionError(\"Should not happen\")); // a merged bus should at least contain one configured bus\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "158afcb46784c9f23471efddc47653f0b179752f"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjU5Njk2OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/OperationalLimitsHolderImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwOToxNDoyNVrOIFGuWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTo1ODowNVrOIFXdFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIyMzk2Mg==", "bodyText": "Do you really need to return a List, or a Collection could be OK?", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r542223962", "createdAt": "2020-12-14T09:14:25Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/OperationalLimitsHolderImpl.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.impl;\n+\n+import com.powsybl.iidm.network.*;\n+\n+import java.util.*;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+class OperationalLimitsHolderImpl implements OperationalLimitsOwner {\n+\n+    private final EnumMap<LimitType, OperationalLimits> operationalLimits = new EnumMap<>(LimitType.class);\n+    private final AbstractIdentifiable<?> identifiable;\n+    private final String attributeName;\n+\n+    OperationalLimitsHolderImpl(AbstractIdentifiable<?> identifiable, String attributeName) {\n+        this.identifiable = Objects.requireNonNull(identifiable);\n+        this.attributeName = Objects.requireNonNull(attributeName);\n+    }\n+\n+    @Override\n+    public void setOperationalLimits(LimitType limitType, OperationalLimits operationalLimits) {\n+        OperationalLimits oldValue = this.operationalLimits.put(limitType, operationalLimits);\n+        identifiable.getNetwork().getListeners().notifyUpdate(identifiable, attributeName + \"_\" + limitType, oldValue, operationalLimits);\n+    }\n+\n+    List<OperationalLimits> getOperationalLimits() {\n+        return Collections.unmodifiableList(new ArrayList<>(operationalLimits.values()));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "158afcb46784c9f23471efddc47653f0b179752f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMyOTUzMA==", "bodyText": "A collection would be okay, I will modify this", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r542329530", "createdAt": "2020-12-14T11:57:57Z", "author": {"login": "miovd"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/OperationalLimitsHolderImpl.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.impl;\n+\n+import com.powsybl.iidm.network.*;\n+\n+import java.util.*;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+class OperationalLimitsHolderImpl implements OperationalLimitsOwner {\n+\n+    private final EnumMap<LimitType, OperationalLimits> operationalLimits = new EnumMap<>(LimitType.class);\n+    private final AbstractIdentifiable<?> identifiable;\n+    private final String attributeName;\n+\n+    OperationalLimitsHolderImpl(AbstractIdentifiable<?> identifiable, String attributeName) {\n+        this.identifiable = Objects.requireNonNull(identifiable);\n+        this.attributeName = Objects.requireNonNull(attributeName);\n+    }\n+\n+    @Override\n+    public void setOperationalLimits(LimitType limitType, OperationalLimits operationalLimits) {\n+        OperationalLimits oldValue = this.operationalLimits.put(limitType, operationalLimits);\n+        identifiable.getNetwork().getListeners().notifyUpdate(identifiable, attributeName + \"_\" + limitType, oldValue, operationalLimits);\n+    }\n+\n+    List<OperationalLimits> getOperationalLimits() {\n+        return Collections.unmodifiableList(new ArrayList<>(operationalLimits.values()));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIyMzk2Mg=="}, "originalCommit": {"oid": "158afcb46784c9f23471efddc47653f0b179752f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5ODA3MQ==", "bodyText": "Just to be sure: do you mean in the API or in the implementation?", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r542498071", "createdAt": "2020-12-14T15:58:05Z", "author": {"login": "miovd"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/OperationalLimitsHolderImpl.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.impl;\n+\n+import com.powsybl.iidm.network.*;\n+\n+import java.util.*;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+class OperationalLimitsHolderImpl implements OperationalLimitsOwner {\n+\n+    private final EnumMap<LimitType, OperationalLimits> operationalLimits = new EnumMap<>(LimitType.class);\n+    private final AbstractIdentifiable<?> identifiable;\n+    private final String attributeName;\n+\n+    OperationalLimitsHolderImpl(AbstractIdentifiable<?> identifiable, String attributeName) {\n+        this.identifiable = Objects.requireNonNull(identifiable);\n+        this.attributeName = Objects.requireNonNull(attributeName);\n+    }\n+\n+    @Override\n+    public void setOperationalLimits(LimitType limitType, OperationalLimits operationalLimits) {\n+        OperationalLimits oldValue = this.operationalLimits.put(limitType, operationalLimits);\n+        identifiable.getNetwork().getListeners().notifyUpdate(identifiable, attributeName + \"_\" + limitType, oldValue, operationalLimits);\n+    }\n+\n+    List<OperationalLimits> getOperationalLimits() {\n+        return Collections.unmodifiableList(new ArrayList<>(operationalLimits.values()));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIyMzk2Mg=="}, "originalCommit": {"oid": "158afcb46784c9f23471efddc47653f0b179752f"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjYwMjkwOnYy", "diffSide": "RIGHT", "path": "action/action-dsl/src/main/java/com/powsybl/action/dsl/ast/ActionExpressionEvaluator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwOToxNTo0OVrOIFGxrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwOToxNTo0OVrOIFGxrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIyNDgxNQ==", "bodyText": "To be reverted?", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r542224815", "createdAt": "2020-12-14T09:15:49Z", "author": {"login": "mathbagu"}, "path": "action/action-dsl/src/main/java/com/powsybl/action/dsl/ast/ActionExpressionEvaluator.java", "diffHunk": "@@ -93,7 +93,7 @@ private Branch getBranch() {\n         /**\n          * TODO: to move to IIDM\n          */\n-        private static double getPermanentLimit(Branch branch, Branch.Side side) {\n+        private static double getPermanentLimit(Branch<?> branch, Branch.Side side) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "158afcb46784c9f23471efddc47653f0b179752f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjYxMzkwOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/VoltageLimitsAdderImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwOToxODowOVrOIFG35w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzozMzoxNFrOIGLEtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIyNjQwNw==", "bodyText": "To be discuss: is it better to return the VoltageLimits or to return the owner to be able to create additional limits?", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r542226407", "createdAt": "2020-12-14T09:18:09Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/VoltageLimitsAdderImpl.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.impl;\n+\n+import com.powsybl.iidm.network.*;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+class VoltageLimitsAdderImpl implements VoltageLimitsAdder {\n+\n+    private final OperationalLimitsOwner owner;\n+    private double highVoltage = Double.NaN;\n+    private double lowVoltage = Double.NaN;\n+\n+    VoltageLimitsAdderImpl(OperationalLimitsOwner owner) {\n+        this.owner = owner;\n+    }\n+\n+    @Override\n+    public VoltageLimitsAdder setHighVoltage(double highVoltage) {\n+        this.highVoltage = highVoltage;\n+        return this;\n+    }\n+\n+    @Override\n+    public VoltageLimitsAdder setLowVoltage(double lowVoltage) {\n+        this.lowVoltage = lowVoltage;\n+        return this;\n+    }\n+\n+    @Override\n+    public VoltageLimits add() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "158afcb46784c9f23471efddc47653f0b179752f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0Mzc5OQ==", "bodyText": "Both approaches are good for me. In favor of returning the limits: this is what we are doing with reactive limits so it would be consistent regarding the API. Furthermore, not sure it makes sense for VoltageLimits for example: objects supporting voltage limits do not support other kinds of limits.", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r543343799", "createdAt": "2020-12-15T13:33:14Z", "author": {"login": "miovd"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/VoltageLimitsAdderImpl.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.impl;\n+\n+import com.powsybl.iidm.network.*;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+class VoltageLimitsAdderImpl implements VoltageLimitsAdder {\n+\n+    private final OperationalLimitsOwner owner;\n+    private double highVoltage = Double.NaN;\n+    private double lowVoltage = Double.NaN;\n+\n+    VoltageLimitsAdderImpl(OperationalLimitsOwner owner) {\n+        this.owner = owner;\n+    }\n+\n+    @Override\n+    public VoltageLimitsAdder setHighVoltage(double highVoltage) {\n+        this.highVoltage = highVoltage;\n+        return this;\n+    }\n+\n+    @Override\n+    public VoltageLimitsAdder setLowVoltage(double lowVoltage) {\n+        this.lowVoltage = lowVoltage;\n+        return this;\n+    }\n+\n+    @Override\n+    public VoltageLimits add() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIyNjQwNw=="}, "originalCommit": {"oid": "158afcb46784c9f23471efddc47653f0b179752f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Mzc3MDM0OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/CalculatedBus.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMzo0MTozMlrOIOXoAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMzo0MTozMlrOIOXoAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkzODA0OA==", "bodyText": "Do you still need this modification?", "url": "https://github.com/powsybl/powsybl-core/pull/1359#discussion_r551938048", "createdAt": "2021-01-05T13:41:32Z", "author": {"login": "annetill"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/CalculatedBus.java", "diffHunk": "@@ -6,12 +6,13 @@\n  */\n package com.powsybl.iidm.network.impl;\n \n+import com.powsybl.iidm.network.Validable;\n+\n /**\n  *\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n  */\n-interface CalculatedBus extends BusExt {\n+interface CalculatedBus extends BusExt, Validable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ed3e58675830f02453ac0ab8f509d492be25aab"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 24, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}