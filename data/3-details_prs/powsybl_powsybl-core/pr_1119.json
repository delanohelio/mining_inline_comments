{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MjI4NjA5", "number": 1119, "title": "Allow to choose the name of the default iidm implementation instead o\u2026", "bodyText": "\u2026f the hardcoded 'Default'\nThis allows other implementations to be used by code that is using the the iidm api without specifying the implementation. For examples, all the tests in iidm-impl.\nSigned-off-by: Jon Harper jon.harper87@gmail.com\nPlease check if the PR fulfills these requirements (please use '[x]' to check the checkboxes, or submit the PR and then click the checkboxes)\n\n The commit message follows our guidelines\n Tests for the changes have been added (for bug fixes / features)\n Docs have been added / updated (for bug fixes / features)\n\nDoes this PR already have an issue describing the problem ? If so, link to this issue using '#XXX' and skip the rest\nNO\nWhat kind of change does this PR introduce? (Bug fix, feature, docs update, ...)\nFeature\nWhat is the current behavior? (You can also link to an open issue here)\nThe iidm implementation is chosen by serviceLoader.load.filter(name == \"Default\")\nWhat is the new behavior (if this is a feature change)?\nThe iidm implementation is chosen by\nString defaultName = ... ;//from platformConfig iidm.default\nserviceLoader.load.filter(name == defaultName)\nIf the iidm is module is not present, \"Default\" is used\nif the iidm module is present and the \"default\" property is not present, an exception is thrown\nif the iidm module is present and the default value is set to a missing implementation in the classpath an exception is thrown,\nDoes this PR introduce a breaking change or deprecate an API? If yes, check the following:\n\n The Breaking Change or Deprecated label has been added\n The migration guide has been updated in the github wiki (What changes might users need to make in their application due to this PR?)\nNo", "createdAt": "2020-01-17T16:45:51Z", "url": "https://github.com/powsybl/powsybl-core/pull/1119", "merged": true, "mergeCommit": {"oid": "4c3b2fec89cea32374fb48c107ab9c3952811de1"}, "closed": true, "closedAt": "2020-02-03T11:42:15Z", "author": {"login": "jonenst"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb8Jx-ZgBqjI5NjIzNTEzMzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcAqikNgH2gAyMzY0MjI4NjA5OmQ1YjlhMDAwMWNjMjY3NjFmMGQ1YmVhMzdlNzZiM2UzZjViZGRiOGE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "224e52bf47c3d7cdd0ac58cd1c4fdab7ec53d065", "author": {"user": {"login": "jonenst", "name": "Jon Harper"}}, "url": "https://github.com/powsybl/powsybl-core/commit/224e52bf47c3d7cdd0ac58cd1c4fdab7ec53d065", "committedDate": "2020-01-17T16:41:14Z", "message": "Allow to choose the name of the default iidm implementation instead of the hardcoded 'Default'\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>"}, "afterCommit": {"oid": "2a90376f4ecf4c65f4312bd62897b0d1c54ee26a", "author": {"user": {"login": "jonenst", "name": "Jon Harper"}}, "url": "https://github.com/powsybl/powsybl-core/commit/2a90376f4ecf4c65f4312bd62897b0d1c54ee26a", "committedDate": "2020-01-20T10:13:51Z", "message": "Allow to choose the name of the default iidm implementation instead of the hardcoded 'Default'\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2a90376f4ecf4c65f4312bd62897b0d1c54ee26a", "author": {"user": {"login": "jonenst", "name": "Jon Harper"}}, "url": "https://github.com/powsybl/powsybl-core/commit/2a90376f4ecf4c65f4312bd62897b0d1c54ee26a", "committedDate": "2020-01-20T10:13:51Z", "message": "Allow to choose the name of the default iidm implementation instead of the hardcoded 'Default'\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>"}, "afterCommit": {"oid": "ab5b04db69a309c4af54648cbe6d66aeb88045b6", "author": {"user": {"login": "jonenst", "name": "Jon Harper"}}, "url": "https://github.com/powsybl/powsybl-core/commit/ab5b04db69a309c4af54648cbe6d66aeb88045b6", "committedDate": "2020-01-20T10:48:39Z", "message": "Allow to choose the name of the default iidm implementation instead of the hardcoded 'Default'\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1MjYxNjI3", "url": "https://github.com/powsybl/powsybl-core/pull/1119#pullrequestreview-345261627", "createdAt": "2020-01-20T12:01:27Z", "commit": {"oid": "ab5b04db69a309c4af54648cbe6d66aeb88045b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMjowMToyN1rOFfcMCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMjowMToyN1rOFfcMCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUxMjAwOQ==", "bodyText": "Should you name the property default? Isn't impl more understandable for example?", "url": "https://github.com/powsybl/powsybl-core/pull/1119#discussion_r368512009", "createdAt": "2020-01-20T12:01:27Z", "author": {"login": "MioRtia"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/NetworkFactory.java", "diffHunk": "@@ -47,7 +48,11 @@ static NetworkFactory find(String name) {\n      * @return default {@code NetworkFactory} instance.\n      */\n     static NetworkFactory findDefault() {\n-        return find(NetworkFactoryConstants.DEFAULT);\n+        String defaultName = PlatformConfig.defaultConfig()\n+                .getOptionalModuleConfig(\"iidm\")\n+                .map(module -> module.getStringProperty(\"default\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab5b04db69a309c4af54648cbe6d66aeb88045b6"}, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ab5b04db69a309c4af54648cbe6d66aeb88045b6", "author": {"user": {"login": "jonenst", "name": "Jon Harper"}}, "url": "https://github.com/powsybl/powsybl-core/commit/ab5b04db69a309c4af54648cbe6d66aeb88045b6", "committedDate": "2020-01-20T10:48:39Z", "message": "Allow to choose the name of the default iidm implementation instead of the hardcoded 'Default'\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>"}, "afterCommit": {"oid": "5e09f090d4552230704f21c5acbc53dbdea94194", "author": {"user": {"login": "jonenst", "name": "Jon Harper"}}, "url": "https://github.com/powsybl/powsybl-core/commit/5e09f090d4552230704f21c5acbc53dbdea94194", "committedDate": "2020-01-20T12:12:48Z", "message": "Allow to choose the name of the default iidm implementation instead of the hardcoded 'Default'\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5e09f090d4552230704f21c5acbc53dbdea94194", "author": {"user": {"login": "jonenst", "name": "Jon Harper"}}, "url": "https://github.com/powsybl/powsybl-core/commit/5e09f090d4552230704f21c5acbc53dbdea94194", "committedDate": "2020-01-20T12:12:48Z", "message": "Allow to choose the name of the default iidm implementation instead of the hardcoded 'Default'\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>"}, "afterCommit": {"oid": "9282c351384560e71efc8532a3bc5f3894bde1c1", "author": {"user": {"login": "jonenst", "name": "Jon Harper"}}, "url": "https://github.com/powsybl/powsybl-core/commit/9282c351384560e71efc8532a3bc5f3894bde1c1", "committedDate": "2020-01-24T19:00:51Z", "message": "Move the providers static variables inside the PlatformConfigNameProvider class\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9282c351384560e71efc8532a3bc5f3894bde1c1", "author": {"user": {"login": "jonenst", "name": "Jon Harper"}}, "url": "https://github.com/powsybl/powsybl-core/commit/9282c351384560e71efc8532a3bc5f3894bde1c1", "committedDate": "2020-01-24T19:00:51Z", "message": "Move the providers static variables inside the PlatformConfigNameProvider class\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>"}, "afterCommit": {"oid": "5c823d4dcd9f5ed4b198f56ab3c0ee6fd972df8f", "author": {"user": {"login": "jonenst", "name": "Jon Harper"}}, "url": "https://github.com/powsybl/powsybl-core/commit/5c823d4dcd9f5ed4b198f56ab3c0ee6fd972df8f", "committedDate": "2020-01-27T10:05:07Z", "message": "Move the providers static variables inside the PlatformConfigNameProvider class\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5c823d4dcd9f5ed4b198f56ab3c0ee6fd972df8f", "author": {"user": {"login": "jonenst", "name": "Jon Harper"}}, "url": "https://github.com/powsybl/powsybl-core/commit/5c823d4dcd9f5ed4b198f56ab3c0ee6fd972df8f", "committedDate": "2020-01-27T10:05:07Z", "message": "Move the providers static variables inside the PlatformConfigNameProvider class\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>"}, "afterCommit": {"oid": "1547f3c98d175653101252c17b26c97231df6741", "author": {"user": {"login": "jonenst", "name": "Jon Harper"}}, "url": "https://github.com/powsybl/powsybl-core/commit/1547f3c98d175653101252c17b26c97231df6741", "committedDate": "2020-01-27T11:58:05Z", "message": "Move the providers static variables inside the PlatformConfigNameProvider class\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4NjY5Nzc1", "url": "https://github.com/powsybl/powsybl-core/pull/1119#pullrequestreview-348669775", "createdAt": "2020-01-27T13:44:18Z", "commit": {"oid": "1547f3c98d175653101252c17b26c97231df6741"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMzo0NDoxOFrOFiDD-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMzo0NDozOVrOFiDEog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI0NjA3Mw==", "bodyText": "Not sure I understand how this method is different from getName()? It is never overriden in the code, is it? In which case would it be overriden?", "url": "https://github.com/powsybl/powsybl-core/pull/1119#discussion_r371246073", "createdAt": "2020-01-27T13:44:18Z", "author": {"login": "MioRtia"}, "path": "commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.config;\n+\n+import com.google.common.collect.Lists;\n+import com.powsybl.commons.PowsyblException;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.ServiceLoader;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A provider that can be loaded by by Java's ServiceLoader based on its name\n+ * present in an entry in the PlatformConfig.\n+ *\n+ * @author Jon Harper <jon.harper at rte-france.com>\n+ */\n+public interface PlatformConfigNamedProvider {\n+\n+    /**\n+     * Get the name.\n+     *\n+     * @return the name\n+     */\n+    String getName();\n+\n+    /**\n+     * Get the Provider name used for identifying this provider in the\n+     * PlatformConfig. Defaults to getName(). Override this method only getName() is\n+     * already implemented and returns the wrong name.\n+     *\n+     * @return the name\n+     */\n+    default String getPlatformConfigName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1547f3c98d175653101252c17b26c97231df6741"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI0NjI0Mg==", "bodyText": "Small typo:\n\nOverride this method only if getName() is", "url": "https://github.com/powsybl/powsybl-core/pull/1119#discussion_r371246242", "createdAt": "2020-01-27T13:44:39Z", "author": {"login": "MioRtia"}, "path": "commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.config;\n+\n+import com.google.common.collect.Lists;\n+import com.powsybl.commons.PowsyblException;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.ServiceLoader;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A provider that can be loaded by by Java's ServiceLoader based on its name\n+ * present in an entry in the PlatformConfig.\n+ *\n+ * @author Jon Harper <jon.harper at rte-france.com>\n+ */\n+public interface PlatformConfigNamedProvider {\n+\n+    /**\n+     * Get the name.\n+     *\n+     * @return the name\n+     */\n+    String getName();\n+\n+    /**\n+     * Get the Provider name used for identifying this provider in the\n+     * PlatformConfig. Defaults to getName(). Override this method only getName() is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1547f3c98d175653101252c17b26c97231df6741"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MTc5MDg1", "url": "https://github.com/powsybl/powsybl-core/pull/1119#pullrequestreview-349179085", "createdAt": "2020-01-28T07:52:50Z", "commit": {"oid": "1547f3c98d175653101252c17b26c97231df6741"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNzo1Mjo1MFrOFibq-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNzo1NjoxMFrOFibvTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0OTI3NQ==", "bodyText": "Coding style: Indent this code like in the previous method", "url": "https://github.com/powsybl/powsybl-core/pull/1119#discussion_r371649275", "createdAt": "2020-01-28T07:52:50Z", "author": {"login": "mathbagu"}, "path": "commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.config;\n+\n+import com.google.common.collect.Lists;\n+import com.powsybl.commons.PowsyblException;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.ServiceLoader;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A provider that can be loaded by by Java's ServiceLoader based on its name\n+ * present in an entry in the PlatformConfig.\n+ *\n+ * @author Jon Harper <jon.harper at rte-france.com>\n+ */\n+public interface PlatformConfigNamedProvider {\n+\n+    /**\n+     * Get the name.\n+     *\n+     * @return the name\n+     */\n+    String getName();\n+\n+    /**\n+     * Get the Provider name used for identifying this provider in the\n+     * PlatformConfig. Defaults to getName(). Override this method only getName() is\n+     * already implemented and returns the wrong name.\n+     *\n+     * @return the name\n+     */\n+    default String getPlatformConfigName() {\n+        return getName();\n+    }\n+\n+    /**\n+     * A utility class to find providers in the {@link PlatformConfig} by their\n+     * names configured in standard fields. the find* methods use the standard\n+     * fields while the find*BackwardsCompatible methods also look in the legacy\n+     * fields.\n+     *\n+     * @author Jon harper <jon.harper at rte-france.com>\n+     * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+     */\n+    static final class Finder {\n+\n+        private Finder() {\n+        }\n+\n+        private static final String DEFAULT_SERVICE_IMPL_NAME_PROPERTY = \"default-impl-name\";\n+        private static final String LEGACY_SERVICE_IMPL_NAME_PROPERTY = \"default\";\n+\n+        private static final Map<Class<? extends PlatformConfigNamedProvider>, List<? extends PlatformConfigNamedProvider>> PROVIDERS = new ConcurrentHashMap<>();\n+\n+        /**\n+         * Find the default provider configured in the standard field of\n+         * {@code moduleName} in {@code platformConfig} among the {@code providers}\n+         * arguments based on its name.\n+         *\n+         * @return the provider\n+         */\n+        public static <T extends PlatformConfigNamedProvider> T findDefault(String moduleName,\n+                Class<T> clazz, PlatformConfig platformConfig) {\n+            return find(null, moduleName,\n+                    Arrays.asList(DEFAULT_SERVICE_IMPL_NAME_PROPERTY), clazz,\n+                    platformConfig);\n+        }\n+\n+        /**\n+         * Find the provider among the {@code providers} based on its {@code name}, or\n+         * if {@code name} is null find the default provider like @{link findDefault}\n+         *\n+         * @return the provider\n+         */\n+        public static <T extends PlatformConfigNamedProvider> T find(String name, String moduleName,\n+                Class<T> clazz, PlatformConfig platformConfig) {\n+            return find(name, moduleName,\n+                    Arrays.asList(DEFAULT_SERVICE_IMPL_NAME_PROPERTY), clazz,\n+                    platformConfig);\n+        }\n+\n+        /**\n+         * Find the default provider configured in the standard field or the legacy\n+         * field of {@code moduleName} in {@code platformConfig} among the\n+         * {@code providers} arguments based on its name.\n+         *\n+         * @deprecated Use {@link #findDefault} instead\n+         *\n+         * @return the provider\n+         */\n+        @Deprecated\n+        public static <T extends PlatformConfigNamedProvider> T findDefaultBackwardsCompatible(\n+                String moduleName, Class<T> clazz, PlatformConfig platformConfig) {\n+            return find(null, moduleName,\n+                    Arrays.asList(DEFAULT_SERVICE_IMPL_NAME_PROPERTY,\n+                    LEGACY_SERVICE_IMPL_NAME_PROPERTY), clazz, platformConfig);\n+        }\n+\n+        /**\n+         * Find the provider among the {@code providers} based on its {@code name}, or\n+         * if {@code name} is null find the default provider like @{link\n+         * findDefaultBackwardsCompatible}\n+         *\n+         * @deprecated Use {@link #find} instead\n+         *\n+         * @return the provider\n+         */\n+        @Deprecated\n+        public static <T extends PlatformConfigNamedProvider> T findBackwardsCompatible(String name,\n+                String moduleName, Class<T> clazz, PlatformConfig platformConfig) {\n+            return find(name, moduleName,\n+                    Arrays.asList(DEFAULT_SERVICE_IMPL_NAME_PROPERTY,\n+                            LEGACY_SERVICE_IMPL_NAME_PROPERTY),\n+                    clazz, platformConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1547f3c98d175653101252c17b26c97231df6741"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0OTQ2NA==", "bodyText": "Coding style: To increase the readability, we should write 1 stream function per line", "url": "https://github.com/powsybl/powsybl-core/pull/1119#discussion_r371649464", "createdAt": "2020-01-28T07:53:26Z", "author": {"login": "mathbagu"}, "path": "commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.config;\n+\n+import com.google.common.collect.Lists;\n+import com.powsybl.commons.PowsyblException;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.ServiceLoader;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A provider that can be loaded by by Java's ServiceLoader based on its name\n+ * present in an entry in the PlatformConfig.\n+ *\n+ * @author Jon Harper <jon.harper at rte-france.com>\n+ */\n+public interface PlatformConfigNamedProvider {\n+\n+    /**\n+     * Get the name.\n+     *\n+     * @return the name\n+     */\n+    String getName();\n+\n+    /**\n+     * Get the Provider name used for identifying this provider in the\n+     * PlatformConfig. Defaults to getName(). Override this method only getName() is\n+     * already implemented and returns the wrong name.\n+     *\n+     * @return the name\n+     */\n+    default String getPlatformConfigName() {\n+        return getName();\n+    }\n+\n+    /**\n+     * A utility class to find providers in the {@link PlatformConfig} by their\n+     * names configured in standard fields. the find* methods use the standard\n+     * fields while the find*BackwardsCompatible methods also look in the legacy\n+     * fields.\n+     *\n+     * @author Jon harper <jon.harper at rte-france.com>\n+     * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+     */\n+    static final class Finder {\n+\n+        private Finder() {\n+        }\n+\n+        private static final String DEFAULT_SERVICE_IMPL_NAME_PROPERTY = \"default-impl-name\";\n+        private static final String LEGACY_SERVICE_IMPL_NAME_PROPERTY = \"default\";\n+\n+        private static final Map<Class<? extends PlatformConfigNamedProvider>, List<? extends PlatformConfigNamedProvider>> PROVIDERS = new ConcurrentHashMap<>();\n+\n+        /**\n+         * Find the default provider configured in the standard field of\n+         * {@code moduleName} in {@code platformConfig} among the {@code providers}\n+         * arguments based on its name.\n+         *\n+         * @return the provider\n+         */\n+        public static <T extends PlatformConfigNamedProvider> T findDefault(String moduleName,\n+                Class<T> clazz, PlatformConfig platformConfig) {\n+            return find(null, moduleName,\n+                    Arrays.asList(DEFAULT_SERVICE_IMPL_NAME_PROPERTY), clazz,\n+                    platformConfig);\n+        }\n+\n+        /**\n+         * Find the provider among the {@code providers} based on its {@code name}, or\n+         * if {@code name} is null find the default provider like @{link findDefault}\n+         *\n+         * @return the provider\n+         */\n+        public static <T extends PlatformConfigNamedProvider> T find(String name, String moduleName,\n+                Class<T> clazz, PlatformConfig platformConfig) {\n+            return find(name, moduleName,\n+                    Arrays.asList(DEFAULT_SERVICE_IMPL_NAME_PROPERTY), clazz,\n+                    platformConfig);\n+        }\n+\n+        /**\n+         * Find the default provider configured in the standard field or the legacy\n+         * field of {@code moduleName} in {@code platformConfig} among the\n+         * {@code providers} arguments based on its name.\n+         *\n+         * @deprecated Use {@link #findDefault} instead\n+         *\n+         * @return the provider\n+         */\n+        @Deprecated\n+        public static <T extends PlatformConfigNamedProvider> T findDefaultBackwardsCompatible(\n+                String moduleName, Class<T> clazz, PlatformConfig platformConfig) {\n+            return find(null, moduleName,\n+                    Arrays.asList(DEFAULT_SERVICE_IMPL_NAME_PROPERTY,\n+                    LEGACY_SERVICE_IMPL_NAME_PROPERTY), clazz, platformConfig);\n+        }\n+\n+        /**\n+         * Find the provider among the {@code providers} based on its {@code name}, or\n+         * if {@code name} is null find the default provider like @{link\n+         * findDefaultBackwardsCompatible}\n+         *\n+         * @deprecated Use {@link #find} instead\n+         *\n+         * @return the provider\n+         */\n+        @Deprecated\n+        public static <T extends PlatformConfigNamedProvider> T findBackwardsCompatible(String name,\n+                String moduleName, Class<T> clazz, PlatformConfig platformConfig) {\n+            return find(name, moduleName,\n+                    Arrays.asList(DEFAULT_SERVICE_IMPL_NAME_PROPERTY,\n+                            LEGACY_SERVICE_IMPL_NAME_PROPERTY),\n+                    clazz, platformConfig);\n+        }\n+\n+        private static Optional<String> getOptionalFirstProperty(ModuleConfig moduleConfig,\n+                List<String> propertyNames) {\n+            return propertyNames.stream().map(moduleConfig::getOptionalStringProperty)\n+                    .filter(Optional::isPresent).map(Optional::get).findFirst();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1547f3c98d175653101252c17b26c97231df6741"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY1MDM4MQ==", "bodyText": "We discussed about this few days ago... You propose to remove this assertion, because, if the name is not null we don't need platformConfig. Did you change your mind?", "url": "https://github.com/powsybl/powsybl-core/pull/1119#discussion_r371650381", "createdAt": "2020-01-28T07:56:10Z", "author": {"login": "mathbagu"}, "path": "commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.config;\n+\n+import com.google.common.collect.Lists;\n+import com.powsybl.commons.PowsyblException;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.ServiceLoader;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A provider that can be loaded by by Java's ServiceLoader based on its name\n+ * present in an entry in the PlatformConfig.\n+ *\n+ * @author Jon Harper <jon.harper at rte-france.com>\n+ */\n+public interface PlatformConfigNamedProvider {\n+\n+    /**\n+     * Get the name.\n+     *\n+     * @return the name\n+     */\n+    String getName();\n+\n+    /**\n+     * Get the Provider name used for identifying this provider in the\n+     * PlatformConfig. Defaults to getName(). Override this method only getName() is\n+     * already implemented and returns the wrong name.\n+     *\n+     * @return the name\n+     */\n+    default String getPlatformConfigName() {\n+        return getName();\n+    }\n+\n+    /**\n+     * A utility class to find providers in the {@link PlatformConfig} by their\n+     * names configured in standard fields. the find* methods use the standard\n+     * fields while the find*BackwardsCompatible methods also look in the legacy\n+     * fields.\n+     *\n+     * @author Jon harper <jon.harper at rte-france.com>\n+     * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+     */\n+    static final class Finder {\n+\n+        private Finder() {\n+        }\n+\n+        private static final String DEFAULT_SERVICE_IMPL_NAME_PROPERTY = \"default-impl-name\";\n+        private static final String LEGACY_SERVICE_IMPL_NAME_PROPERTY = \"default\";\n+\n+        private static final Map<Class<? extends PlatformConfigNamedProvider>, List<? extends PlatformConfigNamedProvider>> PROVIDERS = new ConcurrentHashMap<>();\n+\n+        /**\n+         * Find the default provider configured in the standard field of\n+         * {@code moduleName} in {@code platformConfig} among the {@code providers}\n+         * arguments based on its name.\n+         *\n+         * @return the provider\n+         */\n+        public static <T extends PlatformConfigNamedProvider> T findDefault(String moduleName,\n+                Class<T> clazz, PlatformConfig platformConfig) {\n+            return find(null, moduleName,\n+                    Arrays.asList(DEFAULT_SERVICE_IMPL_NAME_PROPERTY), clazz,\n+                    platformConfig);\n+        }\n+\n+        /**\n+         * Find the provider among the {@code providers} based on its {@code name}, or\n+         * if {@code name} is null find the default provider like @{link findDefault}\n+         *\n+         * @return the provider\n+         */\n+        public static <T extends PlatformConfigNamedProvider> T find(String name, String moduleName,\n+                Class<T> clazz, PlatformConfig platformConfig) {\n+            return find(name, moduleName,\n+                    Arrays.asList(DEFAULT_SERVICE_IMPL_NAME_PROPERTY), clazz,\n+                    platformConfig);\n+        }\n+\n+        /**\n+         * Find the default provider configured in the standard field or the legacy\n+         * field of {@code moduleName} in {@code platformConfig} among the\n+         * {@code providers} arguments based on its name.\n+         *\n+         * @deprecated Use {@link #findDefault} instead\n+         *\n+         * @return the provider\n+         */\n+        @Deprecated\n+        public static <T extends PlatformConfigNamedProvider> T findDefaultBackwardsCompatible(\n+                String moduleName, Class<T> clazz, PlatformConfig platformConfig) {\n+            return find(null, moduleName,\n+                    Arrays.asList(DEFAULT_SERVICE_IMPL_NAME_PROPERTY,\n+                    LEGACY_SERVICE_IMPL_NAME_PROPERTY), clazz, platformConfig);\n+        }\n+\n+        /**\n+         * Find the provider among the {@code providers} based on its {@code name}, or\n+         * if {@code name} is null find the default provider like @{link\n+         * findDefaultBackwardsCompatible}\n+         *\n+         * @deprecated Use {@link #find} instead\n+         *\n+         * @return the provider\n+         */\n+        @Deprecated\n+        public static <T extends PlatformConfigNamedProvider> T findBackwardsCompatible(String name,\n+                String moduleName, Class<T> clazz, PlatformConfig platformConfig) {\n+            return find(name, moduleName,\n+                    Arrays.asList(DEFAULT_SERVICE_IMPL_NAME_PROPERTY,\n+                            LEGACY_SERVICE_IMPL_NAME_PROPERTY),\n+                    clazz, platformConfig);\n+        }\n+\n+        private static Optional<String> getOptionalFirstProperty(ModuleConfig moduleConfig,\n+                List<String> propertyNames) {\n+            return propertyNames.stream().map(moduleConfig::getOptionalStringProperty)\n+                    .filter(Optional::isPresent).map(Optional::get).findFirst();\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        private static <K, V, T extends V> T alwaysSameComputeIfAbsent(\n+                Map<K, V> map, K key,\n+                Function<? super K, T> mappingFunction) {\n+            // Casting to (T) is safe if we awlays pass the same T argument for a given key\n+            return (T) map.computeIfAbsent(key, mappingFunction);\n+        }\n+\n+        private static <T extends PlatformConfigNamedProvider> T find(String name,\n+                String moduleName, List<String> propertyNames, Class<T> clazz,\n+                PlatformConfig platformConfig) {\n+            List<T> providers = alwaysSameComputeIfAbsent(PROVIDERS, clazz,\n+                k -> Lists.newArrayList(ServiceLoader.load(clazz)));\n+            return find(name, moduleName, propertyNames, providers, platformConfig);\n+        }\n+\n+        // package private for tests\n+        static <T extends PlatformConfigNamedProvider> T find(String name,\n+                String moduleName, List<String> propertyNames, List<T> providers,\n+                PlatformConfig platformConfig) {\n+            Objects.requireNonNull(providers);\n+            Objects.requireNonNull(platformConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1547f3c98d175653101252c17b26c97231df6741"}, "originalPosition": 156}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MjE3NTM0", "url": "https://github.com/powsybl/powsybl-core/pull/1119#pullrequestreview-349217534", "createdAt": "2020-01-28T09:10:24Z", "commit": {"oid": "1547f3c98d175653101252c17b26c97231df6741"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwOToxMDoyNFrOFidiDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwOToxMDoyNFrOFidiDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY3OTc1Ng==", "bodyText": "Should be renamed?", "url": "https://github.com/powsybl/powsybl-core/pull/1119#discussion_r371679756", "createdAt": "2020-01-28T09:10:24Z", "author": {"login": "geofjamg"}, "path": "commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.config;\n+\n+import com.google.common.collect.Lists;\n+import com.powsybl.commons.PowsyblException;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.ServiceLoader;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A provider that can be loaded by by Java's ServiceLoader based on its name\n+ * present in an entry in the PlatformConfig.\n+ *\n+ * @author Jon Harper <jon.harper at rte-france.com>\n+ */\n+public interface PlatformConfigNamedProvider {\n+\n+    /**\n+     * Get the name.\n+     *\n+     * @return the name\n+     */\n+    String getName();\n+\n+    /**\n+     * Get the Provider name used for identifying this provider in the\n+     * PlatformConfig. Defaults to getName(). Override this method only getName() is\n+     * already implemented and returns the wrong name.\n+     *\n+     * @return the name\n+     */\n+    default String getPlatformConfigName() {\n+        return getName();\n+    }\n+\n+    /**\n+     * A utility class to find providers in the {@link PlatformConfig} by their\n+     * names configured in standard fields. the find* methods use the standard\n+     * fields while the find*BackwardsCompatible methods also look in the legacy\n+     * fields.\n+     *\n+     * @author Jon harper <jon.harper at rte-france.com>\n+     * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+     */\n+    static final class Finder {\n+\n+        private Finder() {\n+        }\n+\n+        private static final String DEFAULT_SERVICE_IMPL_NAME_PROPERTY = \"default-impl-name\";\n+        private static final String LEGACY_SERVICE_IMPL_NAME_PROPERTY = \"default\";\n+\n+        private static final Map<Class<? extends PlatformConfigNamedProvider>, List<? extends PlatformConfigNamedProvider>> PROVIDERS = new ConcurrentHashMap<>();\n+\n+        /**\n+         * Find the default provider configured in the standard field of\n+         * {@code moduleName} in {@code platformConfig} among the {@code providers}\n+         * arguments based on its name.\n+         *\n+         * @return the provider\n+         */\n+        public static <T extends PlatformConfigNamedProvider> T findDefault(String moduleName,\n+                Class<T> clazz, PlatformConfig platformConfig) {\n+            return find(null, moduleName,\n+                    Arrays.asList(DEFAULT_SERVICE_IMPL_NAME_PROPERTY), clazz,\n+                    platformConfig);\n+        }\n+\n+        /**\n+         * Find the provider among the {@code providers} based on its {@code name}, or\n+         * if {@code name} is null find the default provider like @{link findDefault}\n+         *\n+         * @return the provider\n+         */\n+        public static <T extends PlatformConfigNamedProvider> T find(String name, String moduleName,\n+                Class<T> clazz, PlatformConfig platformConfig) {\n+            return find(name, moduleName,\n+                    Arrays.asList(DEFAULT_SERVICE_IMPL_NAME_PROPERTY), clazz,\n+                    platformConfig);\n+        }\n+\n+        /**\n+         * Find the default provider configured in the standard field or the legacy\n+         * field of {@code moduleName} in {@code platformConfig} among the\n+         * {@code providers} arguments based on its name.\n+         *\n+         * @deprecated Use {@link #findDefault} instead\n+         *\n+         * @return the provider\n+         */\n+        @Deprecated\n+        public static <T extends PlatformConfigNamedProvider> T findDefaultBackwardsCompatible(\n+                String moduleName, Class<T> clazz, PlatformConfig platformConfig) {\n+            return find(null, moduleName,\n+                    Arrays.asList(DEFAULT_SERVICE_IMPL_NAME_PROPERTY,\n+                    LEGACY_SERVICE_IMPL_NAME_PROPERTY), clazz, platformConfig);\n+        }\n+\n+        /**\n+         * Find the provider among the {@code providers} based on its {@code name}, or\n+         * if {@code name} is null find the default provider like @{link\n+         * findDefaultBackwardsCompatible}\n+         *\n+         * @deprecated Use {@link #find} instead\n+         *\n+         * @return the provider\n+         */\n+        @Deprecated\n+        public static <T extends PlatformConfigNamedProvider> T findBackwardsCompatible(String name,\n+                String moduleName, Class<T> clazz, PlatformConfig platformConfig) {\n+            return find(name, moduleName,\n+                    Arrays.asList(DEFAULT_SERVICE_IMPL_NAME_PROPERTY,\n+                            LEGACY_SERVICE_IMPL_NAME_PROPERTY),\n+                    clazz, platformConfig);\n+        }\n+\n+        private static Optional<String> getOptionalFirstProperty(ModuleConfig moduleConfig,\n+                List<String> propertyNames) {\n+            return propertyNames.stream().map(moduleConfig::getOptionalStringProperty)\n+                    .filter(Optional::isPresent).map(Optional::get).findFirst();\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        private static <K, V, T extends V> T alwaysSameComputeIfAbsent(\n+                Map<K, V> map, K key,\n+                Function<? super K, T> mappingFunction) {\n+            // Casting to (T) is safe if we awlays pass the same T argument for a given key\n+            return (T) map.computeIfAbsent(key, mappingFunction);\n+        }\n+\n+        private static <T extends PlatformConfigNamedProvider> T find(String name,\n+                String moduleName, List<String> propertyNames, Class<T> clazz,\n+                PlatformConfig platformConfig) {\n+            List<T> providers = alwaysSameComputeIfAbsent(PROVIDERS, clazz,\n+                k -> Lists.newArrayList(ServiceLoader.load(clazz)));\n+            return find(name, moduleName, propertyNames, providers, platformConfig);\n+        }\n+\n+        // package private for tests\n+        static <T extends PlatformConfigNamedProvider> T find(String name,\n+                String moduleName, List<String> propertyNames, List<T> providers,\n+                PlatformConfig platformConfig) {\n+            Objects.requireNonNull(providers);\n+            Objects.requireNonNull(platformConfig);\n+\n+            if (providers.isEmpty()) {\n+                throw new PowsyblException(\"No \" + moduleName + \" providers found\");\n+            }\n+\n+            // if no implementation name is provided through the API we look for information\n+            // in platform configuration\n+            String finalName = name != null ? name\n+                    : platformConfig.getOptionalModuleConfig(moduleName)\n+                            .flatMap(mc -> getOptionalFirstProperty(mc, propertyNames))\n+                            .orElse(null);\n+            T provider;\n+            if (providers.size() == 1 && finalName == null) {\n+                // no information to select the implementation but only one provider, so we can\n+                // use it by default\n+                // (that is be the most common use case)\n+                provider = providers.get(0);\n+            } else {\n+                if (providers.size() > 1 && finalName == null) {\n+                    // several providers and no information to select which one to choose, we can\n+                    // only throw\n+                    // an exception\n+                    List<String> loadFlowNames = providers.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1547f3c98d175653101252c17b26c97231df6741"}, "originalPosition": 179}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eaabdaec202bd8458d1633051f6b32c235a043bb", "author": {"user": {"login": "jonenst", "name": "Jon Harper"}}, "url": "https://github.com/powsybl/powsybl-core/commit/eaabdaec202bd8458d1633051f6b32c235a043bb", "committedDate": "2020-01-29T15:17:37Z", "message": "Refactor provider loading from platformconfig into PlatformConfigNamedProvider\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3038e78ff653bbe3393b4a5216a8b85563c0eea6", "author": {"user": {"login": "jonenst", "name": "Jon Harper"}}, "url": "https://github.com/powsybl/powsybl-core/commit/3038e78ff653bbe3393b4a5216a8b85563c0eea6", "committedDate": "2020-01-29T15:30:30Z", "message": "Allow to choose iidm implementation from platformConfig\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61bd280b1cf0b68b25f42e0c8cdad57e94ee4590", "author": {"user": {"login": "jonenst", "name": "Jon Harper"}}, "url": "https://github.com/powsybl/powsybl-core/commit/61bd280b1cf0b68b25f42e0c8cdad57e94ee4590", "committedDate": "2020-01-29T15:30:48Z", "message": "Move the providers static variables inside the PlatformConfigNameProvider class\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1547f3c98d175653101252c17b26c97231df6741", "author": {"user": {"login": "jonenst", "name": "Jon Harper"}}, "url": "https://github.com/powsybl/powsybl-core/commit/1547f3c98d175653101252c17b26c97231df6741", "committedDate": "2020-01-27T11:58:05Z", "message": "Move the providers static variables inside the PlatformConfigNameProvider class\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>"}, "afterCommit": {"oid": "61bd280b1cf0b68b25f42e0c8cdad57e94ee4590", "author": {"user": {"login": "jonenst", "name": "Jon Harper"}}, "url": "https://github.com/powsybl/powsybl-core/commit/61bd280b1cf0b68b25f42e0c8cdad57e94ee4590", "committedDate": "2020-01-29T15:30:48Z", "message": "Move the providers static variables inside the PlatformConfigNameProvider class\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNjgyMDQx", "url": "https://github.com/powsybl/powsybl-core/pull/1119#pullrequestreview-350682041", "createdAt": "2020-01-30T09:30:20Z", "commit": {"oid": "61bd280b1cf0b68b25f42e0c8cdad57e94ee4590"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMDgxODUz", "url": "https://github.com/powsybl/powsybl-core/pull/1119#pullrequestreview-352081853", "createdAt": "2020-02-03T08:26:52Z", "commit": {"oid": "61bd280b1cf0b68b25f42e0c8cdad57e94ee4590"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e616852088be29f24a41136fe10f544b038299c", "author": {"user": {"login": "geofjamg", "name": "Geoffroy Jamgotchian"}}, "url": "https://github.com/powsybl/powsybl-core/commit/5e616852088be29f24a41136fe10f544b038299c", "committedDate": "2020-02-03T08:27:00Z", "message": "Merge branch 'master' into default-iidm"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMTU5OTIx", "url": "https://github.com/powsybl/powsybl-core/pull/1119#pullrequestreview-352159921", "createdAt": "2020-02-03T10:39:25Z", "commit": {"oid": "5e616852088be29f24a41136fe10f544b038299c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5b9a0001cc26761f0d5bea37e76b3e3f5bddb8a", "author": {"user": {"login": "mathbagu", "name": "Mathieu BAGUE"}}, "url": "https://github.com/powsybl/powsybl-core/commit/d5b9a0001cc26761f0d5bea37e76b3e3f5bddb8a", "committedDate": "2020-02-03T10:39:51Z", "message": "Merge branch 'master' into default-iidm"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4352, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}