{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzMDc4MTA1", "number": 1488, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMToxMDoyN1rOEyTC9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOTo1ODozMFrOE8oCjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTc2MzEwOnYy", "diffSide": "RIGHT", "path": "ampl-converter/src/main/java/com/powsybl/ampl/converter/AmplNetworkWriter.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMToxMDoyN1rOHo2zmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNToxNDoxOVrOHux_FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYwMzAzMw==", "bodyText": "I am not sure to like BoundaryPoint name choice indeed. We have no Point in IIDM: we have node, bus and terminal. When you do getBoundaryPoint(Branch.Side.ONE).getP() for me you refer to a terminal and it will be clearer to do getHalf1().getBoundaryTerminal().getP().", "url": "https://github.com/powsybl/powsybl-core/pull/1488#discussion_r512603033", "createdAt": "2020-10-27T11:10:27Z", "author": {"login": "annetill"}, "path": "ampl-converter/src/main/java/com/powsybl/ampl/converter/AmplNetworkWriter.java", "diffHunk": "@@ -639,9 +639,9 @@ private void writeLines(AmplExportContext context, TableFormatter formatter) thr\n                         .writeCell(-1) // no ratio tap changer\n                         .writeCell(-1) // no phase tap changer\n                         .writeCell(t1.getP())\n-                        .writeCell(-tl.getHalf1().getXnodeP()) // xnode node flow side 1\n+                        .writeCell(-tl.getBoundaryPoint(Branch.Side.ONE).getP()) // xnode node flow side 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72e7c9ee55cedb05cc15fe1c61103c8bc882d82d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc5ODE5Ng==", "bodyText": "I don't like using the term Terminal when it is not really a Terminal object... It is a bit confusing, for me it is not a node, bus or terminal and this is why I created another term.", "url": "https://github.com/powsybl/powsybl-core/pull/1488#discussion_r515798196", "createdAt": "2020-11-02T08:11:01Z", "author": {"login": "miovd"}, "path": "ampl-converter/src/main/java/com/powsybl/ampl/converter/AmplNetworkWriter.java", "diffHunk": "@@ -639,9 +639,9 @@ private void writeLines(AmplExportContext context, TableFormatter formatter) thr\n                         .writeCell(-1) // no ratio tap changer\n                         .writeCell(-1) // no phase tap changer\n                         .writeCell(t1.getP())\n-                        .writeCell(-tl.getHalf1().getXnodeP()) // xnode node flow side 1\n+                        .writeCell(-tl.getBoundaryPoint(Branch.Side.ONE).getP()) // xnode node flow side 1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYwMzAzMw=="}, "originalCommit": {"oid": "72e7c9ee55cedb05cc15fe1c61103c8bc882d82d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0NjQ1MA==", "bodyText": "Maybe we can remove the point word and keep getBoundary(Side)? But I agree with @MioRtia, terminal would be confusing for IIDM-fluent people as there is no Terminal object there", "url": "https://github.com/powsybl/powsybl-core/pull/1488#discussion_r518646450", "createdAt": "2020-11-06T10:04:03Z", "author": {"login": "mathbagu"}, "path": "ampl-converter/src/main/java/com/powsybl/ampl/converter/AmplNetworkWriter.java", "diffHunk": "@@ -639,9 +639,9 @@ private void writeLines(AmplExportContext context, TableFormatter formatter) thr\n                         .writeCell(-1) // no ratio tap changer\n                         .writeCell(-1) // no phase tap changer\n                         .writeCell(t1.getP())\n-                        .writeCell(-tl.getHalf1().getXnodeP()) // xnode node flow side 1\n+                        .writeCell(-tl.getBoundaryPoint(Branch.Side.ONE).getP()) // xnode node flow side 1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYwMzAzMw=="}, "originalCommit": {"oid": "72e7c9ee55cedb05cc15fe1c61103c8bc882d82d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgxNTUwOA==", "bodyText": "Another proposal:\ntieLine.getHalf1().getOtherSide().getP()\ndanglingLine.getOtherSide().getP()\nIn that proposal for tie lines, the half line is not hidden because it is comparable to dangling line concept.\nAbout the sign: I think that Mathieu is right, the sign should not changed as P at t1 has the opposite sign of P at boundary terminal. Indeed a test is missing in the AMPL converter.", "url": "https://github.com/powsybl/powsybl-core/pull/1488#discussion_r518815508", "createdAt": "2020-11-06T15:14:19Z", "author": {"login": "annetill"}, "path": "ampl-converter/src/main/java/com/powsybl/ampl/converter/AmplNetworkWriter.java", "diffHunk": "@@ -639,9 +639,9 @@ private void writeLines(AmplExportContext context, TableFormatter formatter) thr\n                         .writeCell(-1) // no ratio tap changer\n                         .writeCell(-1) // no phase tap changer\n                         .writeCell(t1.getP())\n-                        .writeCell(-tl.getHalf1().getXnodeP()) // xnode node flow side 1\n+                        .writeCell(-tl.getBoundaryPoint(Branch.Side.ONE).getP()) // xnode node flow side 1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYwMzAzMw=="}, "originalCommit": {"oid": "72e7c9ee55cedb05cc15fe1c61103c8bc882d82d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDg4MjUyOnYy", "diffSide": "RIGHT", "path": "ampl-converter/src/main/java/com/powsybl/ampl/converter/AmplNetworkWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDoyMzoyM1rOHuoTLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDoxNjowMFrOH2V7YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY1NjgxMg==", "bodyText": "I wonder if the sign are OK (same question above): could you confirm it is?", "url": "https://github.com/powsybl/powsybl-core/pull/1488#discussion_r518656812", "createdAt": "2020-11-06T10:23:23Z", "author": {"login": "mathbagu"}, "path": "ampl-converter/src/main/java/com/powsybl/ampl/converter/AmplNetworkWriter.java", "diffHunk": "@@ -665,9 +665,9 @@ private void writeLines(AmplExportContext context, TableFormatter formatter) thr\n                         .writeCell(1f) // constant ratio\n                         .writeCell(-1) // no ratio tap changer\n                         .writeCell(-1) // no phase tap changer\n-                        .writeCell(-tl.getHalf2().getXnodeP()) // xnode node flow side 2\n+                        .writeCell(-tl.getBoundaryPoint(Branch.Side.TWO).getP()) // xnode node flow side 2\n                         .writeCell(t2.getP())\n-                        .writeCell(-tl.getHalf2().getXnodeQ()) // xnode node flow side 2\n+                        .writeCell(-tl.getBoundaryPoint(Branch.Side.TWO).getQ()) // xnode node flow side 2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee867e1e7cd692766e8a12218db452331d0d4849"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc0NDQxNw==", "bodyText": "Not sure but xnodeQ and otherSide.getQ() were the same sign but I will check", "url": "https://github.com/powsybl/powsybl-core/pull/1488#discussion_r526744417", "createdAt": "2020-11-19T10:16:00Z", "author": {"login": "miovd"}, "path": "ampl-converter/src/main/java/com/powsybl/ampl/converter/AmplNetworkWriter.java", "diffHunk": "@@ -665,9 +665,9 @@ private void writeLines(AmplExportContext context, TableFormatter formatter) thr\n                         .writeCell(1f) // constant ratio\n                         .writeCell(-1) // no ratio tap changer\n                         .writeCell(-1) // no phase tap changer\n-                        .writeCell(-tl.getHalf2().getXnodeP()) // xnode node flow side 2\n+                        .writeCell(-tl.getBoundaryPoint(Branch.Side.TWO).getP()) // xnode node flow side 2\n                         .writeCell(t2.getP())\n-                        .writeCell(-tl.getHalf2().getXnodeQ()) // xnode node flow side 2\n+                        .writeCell(-tl.getBoundaryPoint(Branch.Side.TWO).getQ()) // xnode node flow side 2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY1NjgxMg=="}, "originalCommit": {"oid": "ee867e1e7cd692766e8a12218db452331d0d4849"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDg4Nzk5OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/DanglingLine.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDoyNDo1M1rOHuoWWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDoyNjo1MVrOH2WW5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY1NzYyNQ==", "bodyText": "Is returning null better?", "url": "https://github.com/powsybl/powsybl-core/pull/1488#discussion_r518657625", "createdAt": "2020-11-06T10:24:53Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/DanglingLine.java", "diffHunk": "@@ -278,4 +278,7 @@ default Generation getGeneration() {\n \n     CurrentLimitsAdder newCurrentLimits();\n \n+    default BoundaryPoint getBoundaryPoint() {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee867e1e7cd692766e8a12218db452331d0d4849"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc1MTQ2Mw==", "bodyText": "See answer below", "url": "https://github.com/powsybl/powsybl-core/pull/1488#discussion_r526751463", "createdAt": "2020-11-19T10:26:51Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/DanglingLine.java", "diffHunk": "@@ -278,4 +278,7 @@ default Generation getGeneration() {\n \n     CurrentLimitsAdder newCurrentLimits();\n \n+    default BoundaryPoint getBoundaryPoint() {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY1NzYyNQ=="}, "originalCommit": {"oid": "ee867e1e7cd692766e8a12218db452331d0d4849"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDg5MDY1OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/TieLine.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDoyNTo0MFrOHuoX4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDoxMjoyNlrOH2Vx_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY1ODAxNw==", "bodyText": "Is returning null better?", "url": "https://github.com/powsybl/powsybl-core/pull/1488#discussion_r518658017", "createdAt": "2020-11-06T10:25:40Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/TieLine.java", "diffHunk": "@@ -289,4 +301,7 @@ default HalfLine setFictitious(boolean fictitious) {\n      */\n     HalfLine getHalf(Side side);\n \n+    default BoundaryPoint getBoundaryPoint(Side side) {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee867e1e7cd692766e8a12218db452331d0d4849"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc0MjAxNA==", "bodyText": "I don't know, it would throw a null pointer exception (as every time we call it, it is to have a value and this object is supposed to never be null), wouldn't it be weird and more difficult to debug?", "url": "https://github.com/powsybl/powsybl-core/pull/1488#discussion_r526742014", "createdAt": "2020-11-19T10:12:26Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/TieLine.java", "diffHunk": "@@ -289,4 +301,7 @@ default HalfLine setFictitious(boolean fictitious) {\n      */\n     HalfLine getHalf(Side side);\n \n+    default BoundaryPoint getBoundaryPoint(Side side) {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY1ODAxNw=="}, "originalCommit": {"oid": "ee867e1e7cd692766e8a12218db452331d0d4849"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTAxNDAxOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineBoundaryPointImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDo1OTo0MFrOHupjDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDo1OTo0MFrOHupjDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY3NzI2Mw==", "bodyText": "To make the code simpler to read, add two private methods to get the Voltage and the Angle a bus\nprivate double getV(Bus b) {\n    return bus == null ? Double.NaN : b.getV();\n}\nprivate double getAngle(Bus b) {\n    return bus == null ? Double.NaN : b.getAngle();\n}\n\nand use them everywhere. Maybe these methods could be share with the other implementation", "url": "https://github.com/powsybl/powsybl-core/pull/1488#discussion_r518677263", "createdAt": "2020-11-06T10:59:40Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineBoundaryPointImpl.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.impl;\n+\n+import com.powsybl.iidm.network.BoundaryPoint;\n+import com.powsybl.iidm.network.Bus;\n+import com.powsybl.iidm.network.DanglingLine;\n+import com.powsybl.iidm.network.Terminal;\n+import com.powsybl.iidm.network.util.SV;\n+\n+import java.util.Objects;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+class DanglingLineBoundaryPointImpl implements BoundaryPoint {\n+\n+    private final DanglingLine parent;\n+\n+    DanglingLineBoundaryPointImpl(DanglingLine parent) {\n+        this.parent = Objects.requireNonNull(parent);\n+    }\n+\n+    @Override\n+    public double getV() {\n+        Terminal t = parent.getTerminal();\n+        Bus b = t.getBusView().getBus();\n+        return new SV(t.getP(), t.getQ(), b != null ? b.getV() : Double.NaN, b != null ? b.getAngle() : Double.NaN).otherSideU(parent);\n+    }\n+\n+    @Override\n+    public double getAngle() {\n+        Terminal t = parent.getTerminal();\n+        Bus b = t.getBusView().getBus();\n+        return new SV(t.getP(), t.getQ(), b != null ? b.getV() : Double.NaN, b != null ? b.getAngle() : Double.NaN).otherSideA(parent);\n+    }\n+\n+    @Override\n+    public double getP() {\n+        Terminal t = parent.getTerminal();\n+        Bus b = t.getBusView().getBus();\n+        return new SV(t.getP(), t.getQ(), b != null ? b.getV() : Double.NaN, b != null ? b.getAngle() : Double.NaN).otherSideP(parent);\n+    }\n+\n+    @Override\n+    public double getQ() {\n+        Terminal t = parent.getTerminal();\n+        Bus b = t.getBusView().getBus();\n+        return new SV(t.getP(), t.getQ(), b != null ? b.getV() : Double.NaN, b != null ? b.getAngle() : Double.NaN).otherSideQ(parent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee867e1e7cd692766e8a12218db452331d0d4849"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTAxODU2OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/TieLineBoundaryPointImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMTowMDozMFrOHupl4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMTowMDozMFrOHupl4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY3Nzk4NA==", "bodyText": "terminalSupplier is a better name", "url": "https://github.com/powsybl/powsybl-core/pull/1488#discussion_r518677984", "createdAt": "2020-11-06T11:00:30Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/TieLineBoundaryPointImpl.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.impl;\n+\n+import com.powsybl.iidm.network.BoundaryPoint;\n+import com.powsybl.iidm.network.Bus;\n+import com.powsybl.iidm.network.Terminal;\n+import com.powsybl.iidm.network.TieLine;\n+import com.powsybl.iidm.network.util.SV;\n+\n+import java.util.Objects;\n+import java.util.function.Supplier;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+class TieLineBoundaryPointImpl implements BoundaryPoint {\n+\n+    private final Supplier<Terminal> terminalGetter;\n+\n+    private final TieLine.HalfLine halfLine;\n+\n+    TieLineBoundaryPointImpl(TieLine.HalfLine halfLine, Supplier<Terminal> terminalGetter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee867e1e7cd692766e8a12218db452331d0d4849"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTA0MTg2OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/DanglingLineXml.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMTowNjo1MVrOHup0LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDozNzozNVrOH2WxYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY4MTY0NQ==", "bodyText": "If values are computed, why do we read/write them? For instance we do not serialize the intensity (Terminal.getI())", "url": "https://github.com/powsybl/powsybl-core/pull/1488#discussion_r518681645", "createdAt": "2020-11-06T11:06:51Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/DanglingLineXml.java", "diffHunk": "@@ -132,4 +161,30 @@ protected void readSubElements(DanglingLine dl, NetworkXmlReaderContext context)\n             }\n         });\n     }\n+\n+    private static void readBoundaryPoint(String dlId, BoundaryPoint boundaryPoint, NetworkXmlReaderContext context) {\n+        XMLStreamReader reader = context.getReader();\n+        double p = XmlUtil.readOptionalDoubleAttribute(reader, \"p\");\n+        double q = XmlUtil.readOptionalDoubleAttribute(reader, \"q\");\n+        double v = XmlUtil.readOptionalDoubleAttribute(reader, \"v\");\n+        double angle = XmlUtil.readOptionalDoubleAttribute(reader, ANGLE);\n+        context.getEndTasks().add(() -> {\n+            checkBoundaryValue(p, boundaryPoint.getP(), \"p\", dlId);\n+            checkBoundaryValue(q, boundaryPoint.getQ(), \"q\", dlId);\n+            checkBoundaryValue(v, boundaryPoint.getV(), \"v\", dlId);\n+            checkBoundaryValue(angle, boundaryPoint.getAngle(), ANGLE, dlId);\n+        });\n+    }\n+\n+    private static void checkBoundaryValue(double imported, double calculated, String name, String dlId) {\n+        if (!Double.isNaN(imported) && imported != calculated) {\n+            LOG.info(\"boundaryPoint.{} of DanglingLine {} is recalculated. Its imported value is not used (imported value = {}; calculated value = {})\", name, dlId, imported, calculated);\n+        }\n+    }\n+\n+    private static boolean hasDefinedBoundaryPoint(DanglingLine dl) {\n+        BoundaryPoint boundaryPoint = dl.getBoundaryPoint();\n+        return !Double.isNaN(boundaryPoint.getP()) || !Double.isNaN(boundaryPoint.getQ()) ||\n+                !Double.isNaN(boundaryPoint.getV()) || !Double.isNaN(boundaryPoint.getAngle());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee867e1e7cd692766e8a12218db452331d0d4849"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc0Mjk1Ng==", "bodyText": "Good question, I don't remember why we wanted to serialize it... maybe it is not useful as you said. What do you think @annetill ?", "url": "https://github.com/powsybl/powsybl-core/pull/1488#discussion_r526742956", "createdAt": "2020-11-19T10:13:54Z", "author": {"login": "miovd"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/DanglingLineXml.java", "diffHunk": "@@ -132,4 +161,30 @@ protected void readSubElements(DanglingLine dl, NetworkXmlReaderContext context)\n             }\n         });\n     }\n+\n+    private static void readBoundaryPoint(String dlId, BoundaryPoint boundaryPoint, NetworkXmlReaderContext context) {\n+        XMLStreamReader reader = context.getReader();\n+        double p = XmlUtil.readOptionalDoubleAttribute(reader, \"p\");\n+        double q = XmlUtil.readOptionalDoubleAttribute(reader, \"q\");\n+        double v = XmlUtil.readOptionalDoubleAttribute(reader, \"v\");\n+        double angle = XmlUtil.readOptionalDoubleAttribute(reader, ANGLE);\n+        context.getEndTasks().add(() -> {\n+            checkBoundaryValue(p, boundaryPoint.getP(), \"p\", dlId);\n+            checkBoundaryValue(q, boundaryPoint.getQ(), \"q\", dlId);\n+            checkBoundaryValue(v, boundaryPoint.getV(), \"v\", dlId);\n+            checkBoundaryValue(angle, boundaryPoint.getAngle(), ANGLE, dlId);\n+        });\n+    }\n+\n+    private static void checkBoundaryValue(double imported, double calculated, String name, String dlId) {\n+        if (!Double.isNaN(imported) && imported != calculated) {\n+            LOG.info(\"boundaryPoint.{} of DanglingLine {} is recalculated. Its imported value is not used (imported value = {}; calculated value = {})\", name, dlId, imported, calculated);\n+        }\n+    }\n+\n+    private static boolean hasDefinedBoundaryPoint(DanglingLine dl) {\n+        BoundaryPoint boundaryPoint = dl.getBoundaryPoint();\n+        return !Double.isNaN(boundaryPoint.getP()) || !Double.isNaN(boundaryPoint.getQ()) ||\n+                !Double.isNaN(boundaryPoint.getV()) || !Double.isNaN(boundaryPoint.getAngle());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY4MTY0NQ=="}, "originalCommit": {"oid": "ee867e1e7cd692766e8a12218db452331d0d4849"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc1ODI0Mw==", "bodyText": "After thinking and @zamarrenolm 's input, I think you are right", "url": "https://github.com/powsybl/powsybl-core/pull/1488#discussion_r526758243", "createdAt": "2020-11-19T10:37:35Z", "author": {"login": "miovd"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/DanglingLineXml.java", "diffHunk": "@@ -132,4 +161,30 @@ protected void readSubElements(DanglingLine dl, NetworkXmlReaderContext context)\n             }\n         });\n     }\n+\n+    private static void readBoundaryPoint(String dlId, BoundaryPoint boundaryPoint, NetworkXmlReaderContext context) {\n+        XMLStreamReader reader = context.getReader();\n+        double p = XmlUtil.readOptionalDoubleAttribute(reader, \"p\");\n+        double q = XmlUtil.readOptionalDoubleAttribute(reader, \"q\");\n+        double v = XmlUtil.readOptionalDoubleAttribute(reader, \"v\");\n+        double angle = XmlUtil.readOptionalDoubleAttribute(reader, ANGLE);\n+        context.getEndTasks().add(() -> {\n+            checkBoundaryValue(p, boundaryPoint.getP(), \"p\", dlId);\n+            checkBoundaryValue(q, boundaryPoint.getQ(), \"q\", dlId);\n+            checkBoundaryValue(v, boundaryPoint.getV(), \"v\", dlId);\n+            checkBoundaryValue(angle, boundaryPoint.getAngle(), ANGLE, dlId);\n+        });\n+    }\n+\n+    private static void checkBoundaryValue(double imported, double calculated, String name, String dlId) {\n+        if (!Double.isNaN(imported) && imported != calculated) {\n+            LOG.info(\"boundaryPoint.{} of DanglingLine {} is recalculated. Its imported value is not used (imported value = {}; calculated value = {})\", name, dlId, imported, calculated);\n+        }\n+    }\n+\n+    private static boolean hasDefinedBoundaryPoint(DanglingLine dl) {\n+        BoundaryPoint boundaryPoint = dl.getBoundaryPoint();\n+        return !Double.isNaN(boundaryPoint.getP()) || !Double.isNaN(boundaryPoint.getQ()) ||\n+                !Double.isNaN(boundaryPoint.getV()) || !Double.isNaN(boundaryPoint.getAngle());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY4MTY0NQ=="}, "originalCommit": {"oid": "ee867e1e7cd692766e8a12218db452331d0d4849"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTA0NzI1OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/TieLineXml.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMTowODoyMFrOHup3TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMTowODoyMFrOHup3TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY4MjQ0NA==", "bodyText": "Same question: I would only write xnodeP and xnodeQ to keep compatibilty with old XIIDM version", "url": "https://github.com/powsybl/powsybl-core/pull/1488#discussion_r518682444", "createdAt": "2020-11-06T11:08:20Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/TieLineXml.java", "diffHunk": "@@ -45,8 +56,16 @@ private static void writeHalf(TieLine.HalfLine halfLine, NetworkXmlWriterContext\n         XmlUtil.writeDouble(\"b1_\" + side, halfLine.getB1(), context.getWriter());\n         XmlUtil.writeDouble(\"g2_\" + side, halfLine.getG2(), context.getWriter());\n         XmlUtil.writeDouble(\"b2_\" + side, halfLine.getB2(), context.getWriter());\n-        XmlUtil.writeDouble(\"xnodeP_\" + side, halfLine.getXnodeP(), context.getWriter());\n-        XmlUtil.writeDouble(\"xnodeQ_\" + side, halfLine.getXnodeQ(), context.getWriter());\n+        IidmXmlUtil.runUntilMaximumVersion(IidmXmlVersion.V_1_4, context, () -> {\n+            XmlUtil.writeDouble(\"xnodeP_\" + side, boundaryPoint.getP(), context.getWriter());\n+            XmlUtil.writeDouble(\"xnodeQ_\" + side, boundaryPoint.getQ(), context.getWriter());\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee867e1e7cd692766e8a12218db452331d0d4849"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTA1MTQwOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-xml-converter/src/main/resources/xsd/iidm_V1_5.xsd", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMTowOToyN1rOHup5tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMTowOToyN1rOHup5tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY4MzA2MA==", "bodyText": "Why don't use the same type for DanglingLine and TieLines and serialize them as a sub-element?", "url": "https://github.com/powsybl/powsybl-core/pull/1488#discussion_r518683060", "createdAt": "2020-11-06T11:09:27Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/resources/xsd/iidm_V1_5.xsd", "diffHunk": "@@ -540,8 +547,10 @@\n                 <xs:attribute name=\"g2_1\" use=\"required\" type=\"xs:double\"/>\n                 <xs:attribute name=\"b1_1\" use=\"required\" type=\"xs:double\"/>\n                 <xs:attribute name=\"b2_1\" use=\"required\" type=\"xs:double\"/>\n-                <xs:attribute name=\"xnodeP_1\" use=\"required\" type=\"xs:double\"/>\n-                <xs:attribute name=\"xnodeQ_1\" use=\"required\" type=\"xs:double\"/>\n+                <xs:attribute name=\"boundaryPointP_1\" use=\"optional\" type=\"xs:double\"/>\n+                <xs:attribute name=\"boundaryPointQ_1\" use=\"optional\" type=\"xs:double\"/>\n+                <xs:attribute name=\"boundaryPointV_1\" use=\"optional\" type=\"xs:double\"/>\n+                <xs:attribute name=\"boundaryPointAngle_1\" use=\"optional\" type=\"xs:double\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee867e1e7cd692766e8a12218db452331d0d4849"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDAxOTkyOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/SV.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOTo1MzoxMlrOH42h7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOTo1MzoxMlrOH42h7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM3NTcyNg==", "bodyText": "maybe use rho instead of ratio", "url": "https://github.com/powsybl/powsybl-core/pull/1488#discussion_r529375726", "createdAt": "2020-11-24T09:53:12Z", "author": {"login": "marqueslanauja"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/SV.java", "diffHunk": "@@ -72,28 +84,49 @@ public double getA() {\n         return a;\n     }\n \n-    public SV otherSide(double r, double x, double g, double b, double ratio) {\n-        Complex z = new Complex(r, x); // z=r+jx\n-        Complex y = new Complex(g, b); // y=g+jb\n-        Complex s1 = new Complex(p, q); // s1=p1+jq1\n-        Complex u1 = ComplexUtils.polar2Complex(u, Math.toRadians(a));\n-        Complex v1 = u1.divide(Math.sqrt(3f)); // v1=u1/sqrt(3)\n-\n+    private Complex computeU2(Complex y1, Complex y2, Complex z, double ratio) {\n         Complex v1p = v1.multiply(ratio); // v1p=v1*rho\n-        Complex i1 = s1.divide(v1.multiply(3)).conjugate(); // i1=conj(s1/(3*v1))\n         Complex i1p = i1.divide(ratio); // i1p=i1/rho", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bfb2ce834e54b80d002945e905138952a46d930"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDA2MDI5OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/SV.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOTo1ODozMFrOH428sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOTo1ODozMFrOH428sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM4MjU3OQ==", "bodyText": "Maybe change ratio by rho in all the class", "url": "https://github.com/powsybl/powsybl-core/pull/1488#discussion_r529382579", "createdAt": "2020-11-24T09:58:30Z", "author": {"login": "marqueslanauja"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/SV.java", "diffHunk": "@@ -72,28 +84,49 @@ public double getA() {\n         return a;\n     }\n \n-    public SV otherSide(double r, double x, double g, double b, double ratio) {\n-        Complex z = new Complex(r, x); // z=r+jx\n-        Complex y = new Complex(g, b); // y=g+jb\n-        Complex s1 = new Complex(p, q); // s1=p1+jq1\n-        Complex u1 = ComplexUtils.polar2Complex(u, Math.toRadians(a));\n-        Complex v1 = u1.divide(Math.sqrt(3f)); // v1=u1/sqrt(3)\n-\n+    private Complex computeU2(Complex y1, Complex y2, Complex z, double ratio) {\n         Complex v1p = v1.multiply(ratio); // v1p=v1*rho\n-        Complex i1 = s1.divide(v1.multiply(3)).conjugate(); // i1=conj(s1/(3*v1))\n         Complex i1p = i1.divide(ratio); // i1p=i1/rho\n-        Complex i2 = i1p.subtract(y.multiply(v1p)); // i2=i1p-y*v1p\n-        Complex v2 = v1p.subtract(z.multiply(i2)); // v2=v1p-z*i2\n+\n+        Complex i2p = i1p.subtract(y1.multiply(v1p)); // i2p=i1p-y1*v1p\n+        Complex v2 = v1p.subtract(z.multiply(i2p)); // v2p=v1p-z*i2\n+        Complex i2 = i2p.subtract(y2.multiply(v2)); // i2=i2p-y2*v2\n         Complex s2 = v2.multiply(3).multiply(i2.conjugate()); // s2=3*v2*conj(i2)\n+        return v2.multiply(Math.sqrt(3f));\n+    }\n \n-        Complex u2 = v2.multiply(Math.sqrt(3f));\n+    private Complex computeU2(Complex y, Complex z, double ratio) {\n+        return computeU2(y, new Complex(0, 0), z, ratio);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bfb2ce834e54b80d002945e905138952a46d930"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 69, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}