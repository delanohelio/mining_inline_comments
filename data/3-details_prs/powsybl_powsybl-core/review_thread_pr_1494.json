{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2MzEyNzU1", "number": 1494, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTowNDozNVrOEphIDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNzowMzowOVrOEqLwpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTY5ODA0OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/LoadDetailXmlSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTowNDozNVrOHbOzJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjoyNTo0NlrOHbrpbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxNjA2OA==", "bodyText": "I'm not sure it's useful (or it's working...):\n\nPeople that need this serializer needs powsybl-iidm-xml-converter, so they automatically have the serializer\nYou will have 2 serializer for the same extension: is it working?\n\nI propose to simply move the class without managing the compatibility at compile time. At runtime, it will work perfectly.", "url": "https://github.com/powsybl/powsybl-core/pull/1494#discussion_r498316068", "createdAt": "2020-10-01T15:04:35Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/LoadDetailXmlSerializer.java", "diffHunk": "@@ -6,61 +6,10 @@\n  */\n package com.powsybl.iidm.network.extensions;\n \n-import com.google.auto.service.AutoService;\n-import com.powsybl.commons.extensions.AbstractExtensionXmlSerializer;\n-import com.powsybl.commons.extensions.ExtensionXmlSerializer;\n-import com.powsybl.commons.xml.XmlReaderContext;\n-import com.powsybl.commons.xml.XmlUtil;\n-import com.powsybl.commons.xml.XmlWriterContext;\n-import com.powsybl.iidm.network.Load;\n-\n-import javax.xml.stream.XMLStreamException;\n-\n /**\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ *\n+ * @deprecated Use {@link com.powsybl.iidm.xml.extensions.LoadDetailXmlSerializer} instead.\n  */\n-@AutoService(ExtensionXmlSerializer.class)\n-public class LoadDetailXmlSerializer extends AbstractExtensionXmlSerializer<Load, LoadDetail> {\n-\n-    public LoadDetailXmlSerializer() {\n-        super(\"detail\", \"network\", LoadDetail.class,\n-                false, \"loadDetail.xsd\",\n-                \"http://www.itesla_project.eu/schema/iidm/ext/load_detail/1_0\",\n-                \"ld\");\n-    }\n-\n-    @Override\n-    public void write(LoadDetail detail, XmlWriterContext context) throws XMLStreamException {\n-        XmlUtil.writeFloat(\"fixedActivePower\", detail.getFixedActivePower(), context.getExtensionsWriter());\n-        XmlUtil.writeFloat(\"fixedReactivePower\", detail.getFixedReactivePower(), context.getExtensionsWriter());\n-        XmlUtil.writeFloat(\"variableActivePower\", detail.getVariableActivePower(), context.getExtensionsWriter());\n-        XmlUtil.writeFloat(\"variableReactivePower\", detail.getVariableReactivePower(), context.getExtensionsWriter());\n-    }\n-\n-    @Override\n-    public LoadDetail read(Load load, XmlReaderContext context) {\n-        float fixedActivePower = XmlUtil.readOptionalFloatAttribute(context.getReader(), \"fixedActivePower\");\n-        if (Float.isNaN(fixedActivePower)) {\n-            fixedActivePower = XmlUtil.readFloatAttribute(context.getReader(), \"subLoad1ActivePower\");\n-        }\n-        float fixedReactivePower = XmlUtil.readOptionalFloatAttribute(context.getReader(), \"fixedReactivePower\");\n-        if (Float.isNaN(fixedReactivePower)) {\n-            fixedReactivePower = XmlUtil.readFloatAttribute(context.getReader(), \"subLoad1ReactivePower\");\n-        }\n-        float variableActivePower = XmlUtil.readOptionalFloatAttribute(context.getReader(), \"variableActivePower\");\n-        if (Float.isNaN(variableActivePower)) {\n-            variableActivePower = XmlUtil.readFloatAttribute(context.getReader(), \"subLoad2ActivePower\");\n-        }\n-        float variableReactivePower = XmlUtil.readOptionalFloatAttribute(context.getReader(), \"variableReactivePower\");\n-        if (Float.isNaN(variableReactivePower)) {\n-            variableReactivePower = XmlUtil.readFloatAttribute(context.getReader(), \"subLoad2ReactivePower\");\n-        }\n-        load.newExtension(LoadDetailAdder.class)\n-                .withFixedActivePower(fixedActivePower)\n-                .withFixedReactivePower(fixedReactivePower)\n-                .withVariableActivePower(variableActivePower)\n-                .withVariableReactivePower(variableReactivePower)\n-                .add();\n-        return load.getExtension(LoadDetail.class);\n-    }\n+public class LoadDetailXmlSerializer extends com.powsybl.iidm.xml.extensions.LoadDetailXmlSerializer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a89ed5498d961bb8cc7f8ff579fb7c6740a6737e"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4ODcxNw==", "bodyText": "You're right, it is only ever used in runtime so keeping it is useless.", "url": "https://github.com/powsybl/powsybl-core/pull/1494#discussion_r498788717", "createdAt": "2020-10-02T12:25:46Z", "author": {"login": "miovd"}, "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/LoadDetailXmlSerializer.java", "diffHunk": "@@ -6,61 +6,10 @@\n  */\n package com.powsybl.iidm.network.extensions;\n \n-import com.google.auto.service.AutoService;\n-import com.powsybl.commons.extensions.AbstractExtensionXmlSerializer;\n-import com.powsybl.commons.extensions.ExtensionXmlSerializer;\n-import com.powsybl.commons.xml.XmlReaderContext;\n-import com.powsybl.commons.xml.XmlUtil;\n-import com.powsybl.commons.xml.XmlWriterContext;\n-import com.powsybl.iidm.network.Load;\n-\n-import javax.xml.stream.XMLStreamException;\n-\n /**\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ *\n+ * @deprecated Use {@link com.powsybl.iidm.xml.extensions.LoadDetailXmlSerializer} instead.\n  */\n-@AutoService(ExtensionXmlSerializer.class)\n-public class LoadDetailXmlSerializer extends AbstractExtensionXmlSerializer<Load, LoadDetail> {\n-\n-    public LoadDetailXmlSerializer() {\n-        super(\"detail\", \"network\", LoadDetail.class,\n-                false, \"loadDetail.xsd\",\n-                \"http://www.itesla_project.eu/schema/iidm/ext/load_detail/1_0\",\n-                \"ld\");\n-    }\n-\n-    @Override\n-    public void write(LoadDetail detail, XmlWriterContext context) throws XMLStreamException {\n-        XmlUtil.writeFloat(\"fixedActivePower\", detail.getFixedActivePower(), context.getExtensionsWriter());\n-        XmlUtil.writeFloat(\"fixedReactivePower\", detail.getFixedReactivePower(), context.getExtensionsWriter());\n-        XmlUtil.writeFloat(\"variableActivePower\", detail.getVariableActivePower(), context.getExtensionsWriter());\n-        XmlUtil.writeFloat(\"variableReactivePower\", detail.getVariableReactivePower(), context.getExtensionsWriter());\n-    }\n-\n-    @Override\n-    public LoadDetail read(Load load, XmlReaderContext context) {\n-        float fixedActivePower = XmlUtil.readOptionalFloatAttribute(context.getReader(), \"fixedActivePower\");\n-        if (Float.isNaN(fixedActivePower)) {\n-            fixedActivePower = XmlUtil.readFloatAttribute(context.getReader(), \"subLoad1ActivePower\");\n-        }\n-        float fixedReactivePower = XmlUtil.readOptionalFloatAttribute(context.getReader(), \"fixedReactivePower\");\n-        if (Float.isNaN(fixedReactivePower)) {\n-            fixedReactivePower = XmlUtil.readFloatAttribute(context.getReader(), \"subLoad1ReactivePower\");\n-        }\n-        float variableActivePower = XmlUtil.readOptionalFloatAttribute(context.getReader(), \"variableActivePower\");\n-        if (Float.isNaN(variableActivePower)) {\n-            variableActivePower = XmlUtil.readFloatAttribute(context.getReader(), \"subLoad2ActivePower\");\n-        }\n-        float variableReactivePower = XmlUtil.readOptionalFloatAttribute(context.getReader(), \"variableReactivePower\");\n-        if (Float.isNaN(variableReactivePower)) {\n-            variableReactivePower = XmlUtil.readFloatAttribute(context.getReader(), \"subLoad2ReactivePower\");\n-        }\n-        load.newExtension(LoadDetailAdder.class)\n-                .withFixedActivePower(fixedActivePower)\n-                .withFixedReactivePower(fixedReactivePower)\n-                .withVariableActivePower(variableActivePower)\n-                .withVariableReactivePower(variableReactivePower)\n-                .add();\n-        return load.getExtension(LoadDetail.class);\n-    }\n+public class LoadDetailXmlSerializer extends com.powsybl.iidm.xml.extensions.LoadDetailXmlSerializer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxNjA2OA=="}, "originalCommit": {"oid": "a89ed5498d961bb8cc7f8ff579fb7c6740a6737e"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjY4MzI3OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/test/java/com/powsybl/iidm/network/impl/extensions/LoadDetailTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNzowMzowOVrOHcPxeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNzowMzowOVrOHcPxeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4MDYwMg==", "bodyText": "Maybe this test could be part of the TCK and have a subclass in each implementation?", "url": "https://github.com/powsybl/powsybl-core/pull/1494#discussion_r499380602", "createdAt": "2020-10-05T07:03:09Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/test/java/com/powsybl/iidm/network/impl/extensions/LoadDetailTest.java", "diffHunk": "@@ -24,7 +26,7 @@\n  */\n public class LoadDetailTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd067278b2a3879b6ea9622aed872f6a45565ff9"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4876, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}