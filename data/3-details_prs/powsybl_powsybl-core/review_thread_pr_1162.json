{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MjQzMjU3", "number": 1162, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMTowNToyNFrODhB4dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOToxNjoyN1rODluhBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTYwNDM5OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/LineAdderAdapter.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMTowNToyNFrOFrkDJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMToxMDozOVrOFunfdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIyMzcxNg==", "bodyText": "The P0 and Q0 are equal to the half of the sum of P1 and P2 (respectively Q1 and Q2). The sign depends on the side.\nIf P1 and P2 are NaN, you cannot initialize these values. You probably have to listen (NetworkListener) an event and recompute them each time P1, P2, Q1, Q2 are updated.", "url": "https://github.com/powsybl/powsybl-core/pull/1162#discussion_r381223716", "createdAt": "2020-02-19T11:05:24Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/LineAdderAdapter.java", "diffHunk": "@@ -52,24 +57,83 @@\n \n     private double b2 = Double.NaN;\n \n+    private double p0 = Double.NaN;\n+\n+    private double q0 = Double.NaN;\n+\n+    private String ucteXnodeCode;\n+\n     LineAdderAdapter(final MergingViewIndex index) {\n         this.index = Objects.requireNonNull(index, \"merging view index is null\");\n     }\n \n     @Override\n     public Line add() {\n-        Line newLine = null;\n+        Line newLine;\n         final Network n1 = checkAndGetNetwork1();\n         final Network n2 = checkAndGetNetwork2();\n         if (n1 == n2) {\n             newLine = index.getLine(addLine(n1));\n         } else {\n+            // FIXME : how to compute P0, Q0 & ucteXnodeCode ?\n+            ucteXnodeCode = \"\";\n+            p0 = 0.0;\n+            q0 = 0.0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f45854382030445475a4261d57f4f4ce7623a2e"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg4Nzk4MQ==", "bodyText": "So, I keep Line creation with q0 & p0 equal to 0.0 (NaN are not allowed)\nI implement NetworkListener::onUpdate with variantId into MergingNetworkListener and compute P0 & Q0 if P1, P2, Q1 or Q2 are updated.\nHow i set ucteXnodeCode ?", "url": "https://github.com/powsybl/powsybl-core/pull/1162#discussion_r381887981", "createdAt": "2020-02-20T09:45:40Z", "author": {"login": "tadam50"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/LineAdderAdapter.java", "diffHunk": "@@ -52,24 +57,83 @@\n \n     private double b2 = Double.NaN;\n \n+    private double p0 = Double.NaN;\n+\n+    private double q0 = Double.NaN;\n+\n+    private String ucteXnodeCode;\n+\n     LineAdderAdapter(final MergingViewIndex index) {\n         this.index = Objects.requireNonNull(index, \"merging view index is null\");\n     }\n \n     @Override\n     public Line add() {\n-        Line newLine = null;\n+        Line newLine;\n         final Network n1 = checkAndGetNetwork1();\n         final Network n2 = checkAndGetNetwork2();\n         if (n1 == n2) {\n             newLine = index.getLine(addLine(n1));\n         } else {\n+            // FIXME : how to compute P0, Q0 & ucteXnodeCode ?\n+            ucteXnodeCode = \"\";\n+            p0 = 0.0;\n+            q0 = 0.0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIyMzcxNg=="}, "originalCommit": {"oid": "4f45854382030445475a4261d57f4f4ce7623a2e"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzExMzEyNA==", "bodyText": "About XNode code, it's really hard to say. Is it mandatory?\nI think you need an extra configuration: based on the ID of the VL1 and VL2, you can defined the name of the Xnodes, but it's not really safe.", "url": "https://github.com/powsybl/powsybl-core/pull/1162#discussion_r383113124", "createdAt": "2020-02-24T07:31:58Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/LineAdderAdapter.java", "diffHunk": "@@ -52,24 +57,83 @@\n \n     private double b2 = Double.NaN;\n \n+    private double p0 = Double.NaN;\n+\n+    private double q0 = Double.NaN;\n+\n+    private String ucteXnodeCode;\n+\n     LineAdderAdapter(final MergingViewIndex index) {\n         this.index = Objects.requireNonNull(index, \"merging view index is null\");\n     }\n \n     @Override\n     public Line add() {\n-        Line newLine = null;\n+        Line newLine;\n         final Network n1 = checkAndGetNetwork1();\n         final Network n2 = checkAndGetNetwork2();\n         if (n1 == n2) {\n             newLine = index.getLine(addLine(n1));\n         } else {\n+            // FIXME : how to compute P0, Q0 & ucteXnodeCode ?\n+            ucteXnodeCode = \"\";\n+            p0 = 0.0;\n+            q0 = 0.0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIyMzcxNg=="}, "originalCommit": {"oid": "4f45854382030445475a4261d57f4f4ce7623a2e"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5MTY0NQ==", "bodyText": "@tadam50 The xnode code is not a mandatory information so you can just skip it. The idea we have is to use both Xnode and MergedXnode extensions and initialize the attributes from these extensions, so not directly when the object is created.\nAs the name of the XNode is not mandatory, you have to find another way to cache the merged lines\nAbout P and Q, the solution I suggested is ok. Could you please verify that the P0 and Q0 are well updated after a loadflow for all MergedLine, even automatically created ones?", "url": "https://github.com/powsybl/powsybl-core/pull/1162#discussion_r383391645", "createdAt": "2020-02-24T17:01:22Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/LineAdderAdapter.java", "diffHunk": "@@ -52,24 +57,83 @@\n \n     private double b2 = Double.NaN;\n \n+    private double p0 = Double.NaN;\n+\n+    private double q0 = Double.NaN;\n+\n+    private String ucteXnodeCode;\n+\n     LineAdderAdapter(final MergingViewIndex index) {\n         this.index = Objects.requireNonNull(index, \"merging view index is null\");\n     }\n \n     @Override\n     public Line add() {\n-        Line newLine = null;\n+        Line newLine;\n         final Network n1 = checkAndGetNetwork1();\n         final Network n2 = checkAndGetNetwork2();\n         if (n1 == n2) {\n             newLine = index.getLine(addLine(n1));\n         } else {\n+            // FIXME : how to compute P0, Q0 & ucteXnodeCode ?\n+            ucteXnodeCode = \"\";\n+            p0 = 0.0;\n+            q0 = 0.0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIyMzcxNg=="}, "originalCommit": {"oid": "4f45854382030445475a4261d57f4f4ce7623a2e"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyNTg0NQ==", "bodyText": "Issue #1183 created to manage Xnode", "url": "https://github.com/powsybl/powsybl-core/pull/1162#discussion_r384425845", "createdAt": "2020-02-26T11:10:39Z", "author": {"login": "tadam50"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/LineAdderAdapter.java", "diffHunk": "@@ -52,24 +57,83 @@\n \n     private double b2 = Double.NaN;\n \n+    private double p0 = Double.NaN;\n+\n+    private double q0 = Double.NaN;\n+\n+    private String ucteXnodeCode;\n+\n     LineAdderAdapter(final MergingViewIndex index) {\n         this.index = Objects.requireNonNull(index, \"merging view index is null\");\n     }\n \n     @Override\n     public Line add() {\n-        Line newLine = null;\n+        Line newLine;\n         final Network n1 = checkAndGetNetwork1();\n         final Network n2 = checkAndGetNetwork2();\n         if (n1 == n2) {\n             newLine = index.getLine(addLine(n1));\n         } else {\n+            // FIXME : how to compute P0, Q0 & ucteXnodeCode ?\n+            ucteXnodeCode = \"\";\n+            p0 = 0.0;\n+            q0 = 0.0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIyMzcxNg=="}, "originalCommit": {"oid": "4f45854382030445475a4261d57f4f4ce7623a2e"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTYxMTM5OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergedLine.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMTowNzozOVrOFrkHVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMTowMzo1MFrOFunS8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIyNDc5MA==", "bodyText": "Id is not mutable", "url": "https://github.com/powsybl/powsybl-core/pull/1162#discussion_r381224790", "createdAt": "2020-02-19T11:07:39Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergedLine.java", "diffHunk": "@@ -169,6 +171,11 @@ public String getId() {\n         return id;\n     }\n \n+    public MergedLine setId(String id) {\n+        this.id = id;\n+        return this;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f45854382030445475a4261d57f4f4ce7623a2e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg5NzY2Mw==", "bodyText": "In LineAdderAdapter, in case of Line creation from both networks.\nA MergedLine is created with generated id from both DangingLine.\nBut i need to overrride generated id with the requested id by LineAdderAdapter::setId.", "url": "https://github.com/powsybl/powsybl-core/pull/1162#discussion_r381897663", "createdAt": "2020-02-20T10:02:48Z", "author": {"login": "tadam50"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergedLine.java", "diffHunk": "@@ -169,6 +171,11 @@ public String getId() {\n         return id;\n     }\n \n+    public MergedLine setId(String id) {\n+        this.id = id;\n+        return this;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIyNDc5MA=="}, "originalCommit": {"oid": "4f45854382030445475a4261d57f4f4ce7623a2e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEyMzY5Mg==", "bodyText": "I still disagree: I have to look deeper in the code to understand why the MergedLine can be created without having the final ID", "url": "https://github.com/powsybl/powsybl-core/pull/1162#discussion_r383123692", "createdAt": "2020-02-24T08:11:27Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergedLine.java", "diffHunk": "@@ -169,6 +171,11 @@ public String getId() {\n         return id;\n     }\n \n+    public MergedLine setId(String id) {\n+        this.id = id;\n+        return this;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIyNDc5MA=="}, "originalCommit": {"oid": "4f45854382030445475a4261d57f4f4ce7623a2e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyMjY0Mg==", "bodyText": "setId method must be private-package", "url": "https://github.com/powsybl/powsybl-core/pull/1162#discussion_r384422642", "createdAt": "2020-02-26T11:03:50Z", "author": {"login": "tadam50"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergedLine.java", "diffHunk": "@@ -169,6 +171,11 @@ public String getId() {\n         return id;\n     }\n \n+    public MergedLine setId(String id) {\n+        this.id = id;\n+        return this;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIyNDc5MA=="}, "originalCommit": {"oid": "4f45854382030445475a4261d57f4f4ce7623a2e"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjI0OTQ5OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/LineAdderAdapter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwODowNDoyMFrOFtX5XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwODowNDoyMFrOFtX5XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEyMTc1Ng==", "bodyText": "I'm not sure this is a good idea to use getClass().getSimpleName() to get \"Line\"", "url": "https://github.com/powsybl/powsybl-core/pull/1162#discussion_r383121756", "createdAt": "2020-02-24T08:04:20Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/LineAdderAdapter.java", "diffHunk": "@@ -52,24 +57,84 @@\n \n     private double b2 = Double.NaN;\n \n+    private double p0 = Double.NaN;\n+\n+    private double q0 = Double.NaN;\n+\n+    private String ucteXnodeCode;\n+\n     LineAdderAdapter(final MergingViewIndex index) {\n         this.index = Objects.requireNonNull(index, \"merging view index is null\");\n     }\n \n     @Override\n     public Line add() {\n-        Line newLine = null;\n+        Line newLine;\n         final Network n1 = checkAndGetNetwork1();\n         final Network n2 = checkAndGetNetwork2();\n         if (n1 == n2) {\n             newLine = index.getLine(addLine(n1));\n         } else {\n+            // FIXME : how to compute ucteXnodeCode ?\n+            ucteXnodeCode = \"\";\n+            // P0 & Q0 are updated by MergingNetworkListener::onUpdate method\n+            p0 = 0.0;\n+            q0 = 0.0;\n+\n+            // Taking into account ensureIdUnicity\n+            checkAndSetUniqueId();\n             // Creation of 2 dangling lines\n-            throw MergingView.NOT_IMPLEMENTED_EXCEPTION;\n+            // -- first dangling line\n+            final MergingView view = index.getView();\n+            final VoltageLevel vl1 = view.getVoltageLevel(voltageLevelId1);\n+            addDanglingLine(vl1, id + DL1_SUFFIX, connectableBus1, bus1, node1, g1, b1);\n+            // -- second dangling line\n+            final VoltageLevel vl2 = view.getVoltageLevel(voltageLevelId2);\n+            addDanglingLine(vl2, id + DL2_SUFFIX, connectableBus2, bus2, node2, g2, b2);\n+            // MergedLine.id is forced here\n+            // Return the merged line as the new line\n+            newLine = index.getMergedLineByCode(ucteXnodeCode)\n+                           .setId(id);\n         }\n         return newLine;\n     }\n \n+    private void checkAndSetUniqueId() {\n+        if (this.id == null) {\n+            throw new PowsyblException(getClass().getSimpleName() + \" id is not set\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c31246d1bfea168168ebec0bed483c993285a3db"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjI1MTE4OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/LineAdderAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwODowNToxOVrOFtX6VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTowNDowOFrOFyxgXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEyMjAwNQ==", "bodyText": "You should make this function static and pass ucteXnodeCode as parameter?", "url": "https://github.com/powsybl/powsybl-core/pull/1162#discussion_r383122005", "createdAt": "2020-02-24T08:05:19Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/LineAdderAdapter.java", "diffHunk": "@@ -52,24 +57,84 @@\n \n     private double b2 = Double.NaN;\n \n+    private double p0 = Double.NaN;\n+\n+    private double q0 = Double.NaN;\n+\n+    private String ucteXnodeCode;\n+\n     LineAdderAdapter(final MergingViewIndex index) {\n         this.index = Objects.requireNonNull(index, \"merging view index is null\");\n     }\n \n     @Override\n     public Line add() {\n-        Line newLine = null;\n+        Line newLine;\n         final Network n1 = checkAndGetNetwork1();\n         final Network n2 = checkAndGetNetwork2();\n         if (n1 == n2) {\n             newLine = index.getLine(addLine(n1));\n         } else {\n+            // FIXME : how to compute ucteXnodeCode ?\n+            ucteXnodeCode = \"\";\n+            // P0 & Q0 are updated by MergingNetworkListener::onUpdate method\n+            p0 = 0.0;\n+            q0 = 0.0;\n+\n+            // Taking into account ensureIdUnicity\n+            checkAndSetUniqueId();\n             // Creation of 2 dangling lines\n-            throw MergingView.NOT_IMPLEMENTED_EXCEPTION;\n+            // -- first dangling line\n+            final MergingView view = index.getView();\n+            final VoltageLevel vl1 = view.getVoltageLevel(voltageLevelId1);\n+            addDanglingLine(vl1, id + DL1_SUFFIX, connectableBus1, bus1, node1, g1, b1);\n+            // -- second dangling line\n+            final VoltageLevel vl2 = view.getVoltageLevel(voltageLevelId2);\n+            addDanglingLine(vl2, id + DL2_SUFFIX, connectableBus2, bus2, node2, g2, b2);\n+            // MergedLine.id is forced here\n+            // Return the merged line as the new line\n+            newLine = index.getMergedLineByCode(ucteXnodeCode)\n+                           .setId(id);\n         }\n         return newLine;\n     }\n \n+    private void checkAndSetUniqueId() {\n+        if (this.id == null) {\n+            throw new PowsyblException(getClass().getSimpleName() + \" id is not set\");\n+        }\n+        if (ensureIdUnicity) {\n+            setId(Identifiables.getUniqueId(id, index::contains));\n+        } else {\n+            // Check Id is unique in all merging view\n+            if (index.contains(id)) {\n+                throw new PowsyblException(\"The network already contains an object with the id '\"\n+                        + id\n+                        + \"'\");\n+            }\n+        }\n+    }\n+\n+    private DanglingLine addDanglingLine(final VoltageLevel vl, final String id, final String connectableBus, final String bus, final Integer node, final double g, final double b) {\n+        DanglingLineAdder adder = vl.newDanglingLine()\n+                    .setId(id)\n+                    .setName(name)\n+                    .setP0(p0)\n+                    .setQ0(q0)\n+                    .setR(r)\n+                    .setX(x)\n+                    .setG(g)\n+                    .setB(b)\n+                    .setUcteXnodeCode(ucteXnodeCode)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c31246d1bfea168168ebec0bed483c993285a3db"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4NDIyMw==", "bodyText": "Please take this comment into account.", "url": "https://github.com/powsybl/powsybl-core/pull/1162#discussion_r388784223", "createdAt": "2020-03-06T09:04:08Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/LineAdderAdapter.java", "diffHunk": "@@ -52,24 +57,84 @@\n \n     private double b2 = Double.NaN;\n \n+    private double p0 = Double.NaN;\n+\n+    private double q0 = Double.NaN;\n+\n+    private String ucteXnodeCode;\n+\n     LineAdderAdapter(final MergingViewIndex index) {\n         this.index = Objects.requireNonNull(index, \"merging view index is null\");\n     }\n \n     @Override\n     public Line add() {\n-        Line newLine = null;\n+        Line newLine;\n         final Network n1 = checkAndGetNetwork1();\n         final Network n2 = checkAndGetNetwork2();\n         if (n1 == n2) {\n             newLine = index.getLine(addLine(n1));\n         } else {\n+            // FIXME : how to compute ucteXnodeCode ?\n+            ucteXnodeCode = \"\";\n+            // P0 & Q0 are updated by MergingNetworkListener::onUpdate method\n+            p0 = 0.0;\n+            q0 = 0.0;\n+\n+            // Taking into account ensureIdUnicity\n+            checkAndSetUniqueId();\n             // Creation of 2 dangling lines\n-            throw MergingView.NOT_IMPLEMENTED_EXCEPTION;\n+            // -- first dangling line\n+            final MergingView view = index.getView();\n+            final VoltageLevel vl1 = view.getVoltageLevel(voltageLevelId1);\n+            addDanglingLine(vl1, id + DL1_SUFFIX, connectableBus1, bus1, node1, g1, b1);\n+            // -- second dangling line\n+            final VoltageLevel vl2 = view.getVoltageLevel(voltageLevelId2);\n+            addDanglingLine(vl2, id + DL2_SUFFIX, connectableBus2, bus2, node2, g2, b2);\n+            // MergedLine.id is forced here\n+            // Return the merged line as the new line\n+            newLine = index.getMergedLineByCode(ucteXnodeCode)\n+                           .setId(id);\n         }\n         return newLine;\n     }\n \n+    private void checkAndSetUniqueId() {\n+        if (this.id == null) {\n+            throw new PowsyblException(getClass().getSimpleName() + \" id is not set\");\n+        }\n+        if (ensureIdUnicity) {\n+            setId(Identifiables.getUniqueId(id, index::contains));\n+        } else {\n+            // Check Id is unique in all merging view\n+            if (index.contains(id)) {\n+                throw new PowsyblException(\"The network already contains an object with the id '\"\n+                        + id\n+                        + \"'\");\n+            }\n+        }\n+    }\n+\n+    private DanglingLine addDanglingLine(final VoltageLevel vl, final String id, final String connectableBus, final String bus, final Integer node, final double g, final double b) {\n+        DanglingLineAdder adder = vl.newDanglingLine()\n+                    .setId(id)\n+                    .setName(name)\n+                    .setP0(p0)\n+                    .setQ0(q0)\n+                    .setR(r)\n+                    .setX(x)\n+                    .setG(g)\n+                    .setB(b)\n+                    .setUcteXnodeCode(ucteXnodeCode)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEyMjAwNQ=="}, "originalCommit": {"oid": "c31246d1bfea168168ebec0bed483c993285a3db"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjI1Njc1OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergedLine.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwODowNzo1OFrOFtX9Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwODowNzo1OFrOFtX9Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEyMjc3OA==", "bodyText": "No, it depends on the transit flow: P1 ---->-----DL1.P0 ---->----- DL2.P0 ---->---- P2\nThe sign of DL1.P0 is the same as P2, and respectively the sign of DL2.P0 is the same than P1", "url": "https://github.com/powsybl/powsybl-core/pull/1162#discussion_r383122778", "createdAt": "2020-02-24T08:07:58Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergedLine.java", "diffHunk": "@@ -95,6 +97,26 @@ private void mergeProperties(DanglingLine dl1, DanglingLine dl2) {\n         });\n     }\n \n+    void computeAndSetP0() {\n+        double p1 = dl1.getTerminal().getP();\n+        double p2 = dl2.getTerminal().getP();\n+        if (!Double.isNaN(p1) && !Double.isNaN(p2)) {\n+            double p0 = (p1 + p2) / 2.0d;\n+            dl1.setP0(p0);\n+            dl2.setP0(-p0); // sign depends of side", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c31246d1bfea168168ebec0bed483c993285a3db"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjI2NDY5OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergingView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwODoxMjoyMlrOFtYB5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwODoxMjoyMlrOFtYB5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEyMzk0Mw==", "bodyText": "Change a little bit the code:\nreturn index.isMerged(dl) ? null : dl", "url": "https://github.com/powsybl/powsybl-core/pull/1162#discussion_r383123943", "createdAt": "2020-02-24T08:12:22Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergingView.java", "diffHunk": "@@ -672,7 +672,7 @@ public int getDanglingLineCount() {\n     @Override\n     public DanglingLine getDanglingLine(final String id) {\n         final DanglingLine dl = index.get(n -> n.getDanglingLine(id), index::getDanglingLine);\n-        return index.isMerged(dl) ? dl : null;\n+        return !index.isMerged(dl) ? dl : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c31246d1bfea168168ebec0bed483c993285a3db"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjI2NjIzOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergingViewIndex.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwODoxMzowN1rOFtYC1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwODoxMzowN1rOFtYC1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEyNDE4Mw==", "bodyText": "See my remarks in the other PR.", "url": "https://github.com/powsybl/powsybl-core/pull/1162#discussion_r383124183", "createdAt": "2020-02-24T08:13:07Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergingViewIndex.java", "diffHunk": "@@ -272,14 +276,15 @@ Identifiable getIdentifiable(final Identifiable identifiable) {\n     }\n \n     boolean isMerged(final DanglingLine dl) {\n-        return !mergedLineCached.containsKey(dl.getUcteXnodeCode());\n+        Objects.requireNonNull(dl, \"DanglingLine is null\");\n+        return mergedLineCached.containsKey(dl.getUcteXnodeCode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c31246d1bfea168168ebec0bed483c993285a3db"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODgyMjYxOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/LineAdderAdapter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTowMzowNVrOFyxekw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTowMzowNVrOFyxekw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4Mzc2Mw==", "bodyText": "Remove this in this expression: it's useless", "url": "https://github.com/powsybl/powsybl-core/pull/1162#discussion_r388783763", "createdAt": "2020-03-06T09:03:05Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/LineAdderAdapter.java", "diffHunk": "@@ -52,24 +57,84 @@\n \n     private double b2 = Double.NaN;\n \n+    private double p0 = Double.NaN;\n+\n+    private double q0 = Double.NaN;\n+\n+    private String ucteXnodeCode;\n+\n     LineAdderAdapter(final MergingViewIndex index) {\n         this.index = Objects.requireNonNull(index, \"merging view index is null\");\n     }\n \n     @Override\n     public Line add() {\n-        Line newLine = null;\n+        Line newLine;\n         final Network n1 = checkAndGetNetwork1();\n         final Network n2 = checkAndGetNetwork2();\n         if (n1 == n2) {\n             newLine = index.getLine(addLine(n1));\n         } else {\n+            // UcteXnodeCode is empty for MergedLine created here\n+            ucteXnodeCode = \"\";\n+            // P0 & Q0 are updated by MergingNetworkListener::onUpdate method\n+            p0 = 0.0;\n+            q0 = 0.0;\n+\n+            // Taking into account ensureIdUnicity\n+            checkAndSetUniqueId();\n             // Creation of 2 dangling lines\n-            throw MergingView.NOT_IMPLEMENTED_EXCEPTION;\n+            // -- first dangling line\n+            final MergingView view = index.getView();\n+            final VoltageLevel vl1 = view.getVoltageLevel(voltageLevelId1);\n+            addDanglingLine(vl1, id + DL1_SUFFIX, connectableBus1, bus1, node1, g1, b1);\n+            // -- second dangling line\n+            final VoltageLevel vl2 = view.getVoltageLevel(voltageLevelId2);\n+            addDanglingLine(vl2, id + DL2_SUFFIX, connectableBus2, bus2, node2, g2, b2);\n+            // MergedLine.id is forced here\n+            // Return the merged line as the new line\n+            newLine = index.getMergedLineByCode(ucteXnodeCode)\n+                           .setId(id);\n         }\n         return newLine;\n     }\n \n+    private void checkAndSetUniqueId() {\n+        if (this.id == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f40f8bf56371bf364106b79ebc453ed1f14a0b2f"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODg0NzAwOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergedLine.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOToxMTo0NlrOFyxthg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOToxMTo0NlrOFyxthg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4NzU5MA==", "bodyText": "I think there is a mistake here: the sum should use absolute value: p1 and p2 have opposite sign and their values are close. So if I make the sum, I will have a value close to 0...\nExample:\np1 = -605\np2 = 600\n--> losses = 5\np1 + p2 / 2.0 = -2,5\n\nAnother way (simplest) way to compute the P0 and Q0 is to use the losses:\ndouble losses = (p1 + p2)\ndl1.P0 = (P1 + 1/2 losses) * sign(P2)\ndl2.P0 = (P2 + 1/2 losses) * sign(P1)", "url": "https://github.com/powsybl/powsybl-core/pull/1162#discussion_r388787590", "createdAt": "2020-03-06T09:11:46Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergedLine.java", "diffHunk": "@@ -95,6 +97,33 @@ private void mergeProperties(DanglingLine dl1, DanglingLine dl2) {\n         });\n     }\n \n+    void computeAndSetP0() {\n+        double p1 = dl1.getTerminal().getP();\n+        double p2 = dl2.getTerminal().getP();\n+        if (!Double.isNaN(p1) && !Double.isNaN(p2)) {\n+            double p0 = (p1 + p2) / 2.0d;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f40f8bf56371bf364106b79ebc453ed1f14a0b2f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODg0ODQzOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergedLine.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOToxMjoyM1rOFyxuaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOToxMjoyM1rOFyxuaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4NzgxNw==", "bodyText": "Same mistake there", "url": "https://github.com/powsybl/powsybl-core/pull/1162#discussion_r388787817", "createdAt": "2020-03-06T09:12:23Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergedLine.java", "diffHunk": "@@ -95,6 +97,33 @@ private void mergeProperties(DanglingLine dl1, DanglingLine dl2) {\n         });\n     }\n \n+    void computeAndSetP0() {\n+        double p1 = dl1.getTerminal().getP();\n+        double p2 = dl2.getTerminal().getP();\n+        if (!Double.isNaN(p1) && !Double.isNaN(p2)) {\n+            double p0 = (p1 + p2) / 2.0d;\n+            dl1.setP0(getSign(p2) * p0);\n+            dl2.setP0(getSign(p1) * p0);\n+        }\n+    }\n+\n+    void computeAndSetQ0() {\n+        double q1 = dl1.getTerminal().getQ();\n+        double q2 = dl2.getTerminal().getQ();\n+        if (!Double.isNaN(q1) && !Double.isNaN(q2)) {\n+            double q0 = (q1 + q2) / 2.0d;\n+            dl1.setQ0(getSign(q2) * q0);\n+            dl2.setQ0(getSign(q1) * q0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f40f8bf56371bf364106b79ebc453ed1f14a0b2f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODg2MDIyOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergingNetworkListener.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOToxNjoyN1rOFyx1pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOToxNjoyN1rOFyx1pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4OTY3MA==", "bodyText": "I thought we discussed about that: is it OK for you to move this code to a new dedicated listener (DanglingLinePowerListener) and attach it in the constructor of the MergingView?", "url": "https://github.com/powsybl/powsybl-core/pull/1162#discussion_r388789670", "createdAt": "2020-03-06T09:16:27Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergingNetworkListener.java", "diffHunk": "@@ -35,8 +35,24 @@ public void onRemoval(final Identifiable identifiable) {\n         // Not implemented yet !\n     }\n \n-    @Override\n     public void onUpdate(final Identifiable identifiable, final String attribute, final Object oldValue, final Object newValue) {\n         // Not implemented yet !\n     }\n+\n+    @Override\n+    public void onUpdate(Identifiable identifiable, String attribute, String variantId, Object oldValue, Object newValue) {\n+        Objects.requireNonNull(identifiable, \"identifiable is null\");\n+        if (identifiable instanceof DanglingLine) {\n+            final DanglingLine dl = (DanglingLine) identifiable;\n+            final String ucteCode = dl.getUcteXnodeCode();\n+            final MergedLine mergedLine = index.getMergedLineByCode(ucteCode);\n+            if (mergedLine != null) {\n+                if (attribute.contains(\"p\")) {\n+                    mergedLine.computeAndSetP0();\n+                } else if (attribute.contains(\"q\")) {\n+                    mergedLine.computeAndSetQ0();\n+                }\n+            }\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f40f8bf56371bf364106b79ebc453ed1f14a0b2f"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 66, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}