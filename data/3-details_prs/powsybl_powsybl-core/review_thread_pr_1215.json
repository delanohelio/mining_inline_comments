{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2MTc5OTQw", "number": 1215, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo0NjowNlrODn2_mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo1NTowOFrODn3Mbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTIyMDc0OnYy", "diffSide": "RIGHT", "path": "commons/src/main/java/com/powsybl/commons/xml/XmlUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo0NjowNlrOF2Gbnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo0NjowNlrOF2Gbnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3Mjc5OQ==", "bodyText": "Is it a good idea to mutualize this?", "url": "https://github.com/powsybl/powsybl-core/pull/1215#discussion_r392272799", "createdAt": "2020-03-13T14:46:06Z", "author": {"login": "mathbagu"}, "path": "commons/src/main/java/com/powsybl/commons/xml/XmlUtil.java", "diffHunk": "@@ -173,4 +179,29 @@ public static float readOptionalFloatAttribute(XMLStreamReader reader, String at\n         String attributeValue = reader.getAttributeValue(null, attributeName);\n         return attributeValue != null ? Float.valueOf(attributeValue) : defaultValue;\n     }\n+\n+    public static XMLStreamWriter writeStartAttributes(OutputStream os, String prefix, String namespaceUri, String rootName, String indentString, boolean indent) throws XMLStreamException {\n+        XMLStreamWriter writer;\n+        writer = createXmlStreamWriter(indentString, indent, os);\n+        writer.writeStartDocument(StandardCharsets.UTF_8.toString(), \"1.0\");\n+        writer.setPrefix(prefix, namespaceUri);\n+        writer.writeStartElement(namespaceUri, rootName);\n+        writer.writeNamespace(prefix, namespaceUri);\n+        return writer;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dee8c8c859c4fd8b6b9934d9f1fefdbeb743c9f"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTIyMzE0OnYy", "diffSide": "RIGHT", "path": "commons/src/main/java/com/powsybl/commons/xml/XmlUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo0Njo0NVrOF2GdGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo0Njo0NVrOF2GdGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3MzE3OA==", "bodyText": "Same question? The name of this method is not OK. As a developer, I don't know it will end my XML document.", "url": "https://github.com/powsybl/powsybl-core/pull/1215#discussion_r392273178", "createdAt": "2020-03-13T14:46:45Z", "author": {"login": "mathbagu"}, "path": "commons/src/main/java/com/powsybl/commons/xml/XmlUtil.java", "diffHunk": "@@ -173,4 +179,29 @@ public static float readOptionalFloatAttribute(XMLStreamReader reader, String at\n         String attributeValue = reader.getAttributeValue(null, attributeName);\n         return attributeValue != null ? Float.valueOf(attributeValue) : defaultValue;\n     }\n+\n+    public static XMLStreamWriter writeStartAttributes(OutputStream os, String prefix, String namespaceUri, String rootName, String indentString, boolean indent) throws XMLStreamException {\n+        XMLStreamWriter writer;\n+        writer = createXmlStreamWriter(indentString, indent, os);\n+        writer.writeStartDocument(StandardCharsets.UTF_8.toString(), \"1.0\");\n+        writer.setPrefix(prefix, namespaceUri);\n+        writer.writeStartElement(namespaceUri, rootName);\n+        writer.writeNamespace(prefix, namespaceUri);\n+        return writer;\n+    }\n+\n+    private static XMLStreamWriter createXmlStreamWriter(String indentString, boolean indent, OutputStream os) throws XMLStreamException {\n+        XMLStreamWriter writer = XML_OUTPUT_FACTORY_SUPPLIER.get().createXMLStreamWriter(os, StandardCharsets.UTF_8.toString());\n+        if (indent) {\n+            IndentingXMLStreamWriter indentingWriter = new IndentingXMLStreamWriter(writer);\n+            indentingWriter.setIndent(indentString);\n+            writer = indentingWriter;\n+        }\n+        return writer;\n+    }\n+\n+    public static void writeEndElement(XMLStreamWriter writer) throws XMLStreamException {\n+        writer.writeEndElement();\n+        writer.writeEndDocument();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dee8c8c859c4fd8b6b9934d9f1fefdbeb743c9f"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTIyNzQwOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-converter-api/src/main/java/com/powsybl/iidm/IidmImportExportMode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo0Nzo1NVrOF2Gf0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo0Nzo1NVrOF2Gf0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3Mzg3Mw==", "bodyText": "You should revert this change: if bad people use the order of this enum, they can consider it as a regression. Keep only the @Deprecated", "url": "https://github.com/powsybl/powsybl-core/pull/1215#discussion_r392273873", "createdAt": "2020-03-13T14:47:55Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-converter-api/src/main/java/com/powsybl/iidm/IidmImportExportMode.java", "diffHunk": "@@ -8,12 +8,14 @@\n \n /***\n  * @author Chamseddine BENHAMED <chamseddine.benhamed at rte-france.com>\n+ *\n+ * @deprecated Not used anymore\n  */\n-\n+@Deprecated\n public enum IidmImportExportMode {\n     ONE_SEPARATED_FILE_PER_EXTENSION_TYPE,\n-    UNIQUE_FILE,\n-    EXTENSIONS_IN_ONE_SEPARATED_FILE\n+    EXTENSIONS_IN_ONE_SEPARATED_FILE,\n+    UNIQUE_FILE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dee8c8c859c4fd8b6b9934d9f1fefdbeb743c9f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTIzNzAzOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/NetworkXml.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo1MDozOFrOF2GmVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzoyNDoyMVrOF4EvDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3NTU0Mg==", "bodyText": "Is there a validateWithoutExtension?", "url": "https://github.com/powsybl/powsybl-core/pull/1215#discussion_r392275542", "createdAt": "2020-03-13T14:50:38Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/NetworkXml.java", "diffHunk": "@@ -436,62 +326,23 @@ public static Anonymizer write(Network network, ExportOptions options, DataSourc\n         try (OutputStream osb = dataSource.newOutputStream(\"\", dataSourceExt, false);\n              BufferedOutputStream bosb = new BufferedOutputStream(osb)) {\n \n-            if (options.getMode() == IidmImportExportMode.UNIQUE_FILE) {\n-                Anonymizer anonymizer = write(network, options, bosb);\n-                if (options.isAnonymized()) {\n-                    try (BufferedWriter writer2 = new BufferedWriter(new OutputStreamWriter(dataSource.newOutputStream(\"_mapping\", \"csv\", false), StandardCharsets.UTF_8))) {\n-                        anonymizer.write(writer2);\n-                    }\n-                }\n-                return anonymizer;\n-            }\n-\n-            NetworkXmlWriterContext context = writeBaseNetwork(network, bosb, options);\n-            writeEndElement(context.getWriter());\n-\n-            // write extensions\n-            if (!options.withNoExtension() && !getNetworkExtensions(network).isEmpty()) {\n-\n-                if (options.getMode() == IidmImportExportMode.EXTENSIONS_IN_ONE_SEPARATED_FILE) {\n-                    try (OutputStream ose = dataSource.newOutputStream(\"-ext\", dataSourceExt, false);\n-                         BufferedOutputStream bose = new BufferedOutputStream(ose)) {\n-\n-                        final XMLStreamWriter extensionsWriter = initializeWriter(network, bose, options);\n-                        context.setExtensionsWriter(extensionsWriter);\n-                        writeExtensions(network, context, options);\n-                        writeEndElement(extensionsWriter);\n-                    }\n-                } else if (options.getMode() == IidmImportExportMode.ONE_SEPARATED_FILE_PER_EXTENSION_TYPE) {\n-                    writeExtensionsInMultipleFile(network, context, dataSource, options, dataSourceExt);\n-                }\n-            }\n-\n+            Anonymizer anonymizer = write(network, options, bosb);\n             if (options.isAnonymized()) {\n                 try (BufferedWriter writer2 = new BufferedWriter(new OutputStreamWriter(dataSource.newOutputStream(\"_mapping\", \"csv\", false), StandardCharsets.UTF_8))) {\n-                    context.getAnonymizer().write(writer2);\n+                    anonymizer.write(writer2);\n                 }\n             }\n-            return context.getAnonymizer();\n-        } catch (XMLStreamException e) {\n-            throw new UncheckedXmlStreamException(e);\n+            return anonymizer;\n         }\n     }\n \n     public static Anonymizer writeAndValidate(Network n, Path xmlFile) {\n-        try {\n-            return writeAndValidate(n, new ExportOptions(), xmlFile);\n-        } catch (IOException e) {\n-            throw new UncheckedIOException(e);\n-        }\n+        return writeAndValidate(n, new ExportOptions(), xmlFile);\n     }\n \n-    public static Anonymizer writeAndValidate(Network n, ExportOptions options, Path xmlFile) throws IOException {\n+    public static Anonymizer writeAndValidate(Network n, ExportOptions options, Path xmlFile) {\n         Anonymizer anonymizer = write(n, options, xmlFile);\n-        if (options.getMode() == IidmImportExportMode.UNIQUE_FILE) {\n-            validateWithExtensions(xmlFile);\n-            return anonymizer;\n-        }\n-        validate(xmlFile, options.getMode());\n+        validateWithExtensions(xmlFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dee8c8c859c4fd8b6b9934d9f1fefdbeb743c9f"}, "originalPosition": 285}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM0MjE1Ng==", "bodyText": "There was but as it is not used anymore, I will rename this one as you suggested", "url": "https://github.com/powsybl/powsybl-core/pull/1215#discussion_r394342156", "createdAt": "2020-03-18T13:24:21Z", "author": {"login": "miovd"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/NetworkXml.java", "diffHunk": "@@ -436,62 +326,23 @@ public static Anonymizer write(Network network, ExportOptions options, DataSourc\n         try (OutputStream osb = dataSource.newOutputStream(\"\", dataSourceExt, false);\n              BufferedOutputStream bosb = new BufferedOutputStream(osb)) {\n \n-            if (options.getMode() == IidmImportExportMode.UNIQUE_FILE) {\n-                Anonymizer anonymizer = write(network, options, bosb);\n-                if (options.isAnonymized()) {\n-                    try (BufferedWriter writer2 = new BufferedWriter(new OutputStreamWriter(dataSource.newOutputStream(\"_mapping\", \"csv\", false), StandardCharsets.UTF_8))) {\n-                        anonymizer.write(writer2);\n-                    }\n-                }\n-                return anonymizer;\n-            }\n-\n-            NetworkXmlWriterContext context = writeBaseNetwork(network, bosb, options);\n-            writeEndElement(context.getWriter());\n-\n-            // write extensions\n-            if (!options.withNoExtension() && !getNetworkExtensions(network).isEmpty()) {\n-\n-                if (options.getMode() == IidmImportExportMode.EXTENSIONS_IN_ONE_SEPARATED_FILE) {\n-                    try (OutputStream ose = dataSource.newOutputStream(\"-ext\", dataSourceExt, false);\n-                         BufferedOutputStream bose = new BufferedOutputStream(ose)) {\n-\n-                        final XMLStreamWriter extensionsWriter = initializeWriter(network, bose, options);\n-                        context.setExtensionsWriter(extensionsWriter);\n-                        writeExtensions(network, context, options);\n-                        writeEndElement(extensionsWriter);\n-                    }\n-                } else if (options.getMode() == IidmImportExportMode.ONE_SEPARATED_FILE_PER_EXTENSION_TYPE) {\n-                    writeExtensionsInMultipleFile(network, context, dataSource, options, dataSourceExt);\n-                }\n-            }\n-\n+            Anonymizer anonymizer = write(network, options, bosb);\n             if (options.isAnonymized()) {\n                 try (BufferedWriter writer2 = new BufferedWriter(new OutputStreamWriter(dataSource.newOutputStream(\"_mapping\", \"csv\", false), StandardCharsets.UTF_8))) {\n-                    context.getAnonymizer().write(writer2);\n+                    anonymizer.write(writer2);\n                 }\n             }\n-            return context.getAnonymizer();\n-        } catch (XMLStreamException e) {\n-            throw new UncheckedXmlStreamException(e);\n+            return anonymizer;\n         }\n     }\n \n     public static Anonymizer writeAndValidate(Network n, Path xmlFile) {\n-        try {\n-            return writeAndValidate(n, new ExportOptions(), xmlFile);\n-        } catch (IOException e) {\n-            throw new UncheckedIOException(e);\n-        }\n+        return writeAndValidate(n, new ExportOptions(), xmlFile);\n     }\n \n-    public static Anonymizer writeAndValidate(Network n, ExportOptions options, Path xmlFile) throws IOException {\n+    public static Anonymizer writeAndValidate(Network n, ExportOptions options, Path xmlFile) {\n         Anonymizer anonymizer = write(n, options, xmlFile);\n-        if (options.getMode() == IidmImportExportMode.UNIQUE_FILE) {\n-            validateWithExtensions(xmlFile);\n-            return anonymizer;\n-        }\n-        validate(xmlFile, options.getMode());\n+        validateWithExtensions(xmlFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3NTU0Mg=="}, "originalCommit": {"oid": "4dee8c8c859c4fd8b6b9934d9f1fefdbeb743c9f"}, "originalPosition": 285}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTI0MTY3OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/NetworkXml.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo1MTo0MlrOF2GpQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo1MTo0MlrOF2GpQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3NjI4OQ==", "bodyText": "Is it a good idea to forget the Import/export Options? Are you sure we should not keep both? As the ImportOptions is not deprecated, why this method is?", "url": "https://github.com/powsybl/powsybl-core/pull/1215#discussion_r392276289", "createdAt": "2020-03-13T14:51:42Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/NetworkXml.java", "diffHunk": "@@ -618,140 +467,32 @@ public static Network read(ReadOnlyDataSource dataSource, NetworkFactory network\n         try (InputStream isb = dataSource.newInputStream(null, dataSourceExt)) {\n             network = NetworkXml.read(isb, options, anonymizer, networkFactory);\n         }\n-        if (!options.withNoExtension()) {\n-            switch (options.getMode()) {\n-                case EXTENSIONS_IN_ONE_SEPARATED_FILE:\n-                    // in this case we have to read all extensions from one  file\n-                    try (InputStream ise = dataSource.newInputStream(\"-ext\", dataSourceExt)) {\n-                        readExtensions(network, ise, anonymizer, options);\n-                    } catch (IOException e) {\n-                        LOGGER.warn(String.format(\"the extensions file wasn't found while importing, please ensure that the file name respect the naming convention baseFileName-ext.%s\", dataSourceExt));\n-                    }\n-                    break;\n-                case ONE_SEPARATED_FILE_PER_EXTENSION_TYPE:\n-                    String ext = dataSourceExt.isEmpty() ? \"\" : \".\" + dataSourceExt;\n-                    // here we'll read all extensions declared in the extensions set\n-                    readExtensions(network, dataSource, anonymizer, options, ext);\n-                    break;\n-                default:\n-                    break;\n-            }\n-        }\n         return network;\n     }\n \n-    public static Network read(Path xmlFile, ImportOptions options) throws IOException {\n-        DataSource dataSource = getDataSourceFromPath(xmlFile);\n-        String ext = getFileExtensionFromPath(xmlFile);\n-        return read(dataSource, NetworkFactory.findDefault(), options, ext);\n-    }\n-\n-    public static Network validateAndRead(Path xmlFile) {\n-        try {\n-            return validateAndRead(xmlFile, new ImportOptions());\n-        } catch (IOException e) {\n-            throw new UncheckedIOException(e);\n-        }\n-    }\n-\n-    private static void validate(Path xmlFile, IidmImportExportMode mode) throws IOException {\n-        DataSource dataSource = getDataSourceFromPath(xmlFile);\n-        String ext = getFileExtensionFromPath(xmlFile);\n-\n-        if (mode == IidmImportExportMode.EXTENSIONS_IN_ONE_SEPARATED_FILE) {\n-            try (InputStream ise = dataSource.newInputStream(dataSource.getBaseName() + ext)) {\n-                validateWithExtensions(ise);\n-            }\n-            try (InputStream ise = dataSource.newInputStream(dataSource.getBaseName() + \"-ext.\" + ext)) {\n-                validateWithExtensions(ise);\n-            }\n-        } else {\n-            Set<String> listNames = dataSource.listNames(\".*\\\\.\" + ext);\n-            for (String fileName : listNames) {\n-                try (InputStream ise = dataSource.newInputStream(fileName)) {\n-                    validateWithExtensions(ise);\n-                }\n-            }\n-        }\n-    }\n-\n-    public static Network validateAndRead(Path xmlFile, ImportOptions options) throws IOException {\n-        if (options.getMode() == IidmImportExportMode.UNIQUE_FILE) {\n-            validateWithExtensions(xmlFile);\n-            return read(xmlFile);\n-        }\n-        validate(xmlFile, options.getMode());\n-        return read(xmlFile, options);\n+    /**\n+     * @deprecated Use {@link #read(Path)} instead.\n+     */\n+    @Deprecated\n+    public static Network read(Path xmlFile, ImportOptions options) {\n+        return read(xmlFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dee8c8c859c4fd8b6b9934d9f1fefdbeb743c9f"}, "originalPosition": 384}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTI0NDc0OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/NetworkXml.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo1MjozNFrOF2GrRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo1MjozNFrOF2GrRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3NjgwNg==", "bodyText": "Same question", "url": "https://github.com/powsybl/powsybl-core/pull/1215#discussion_r392276806", "createdAt": "2020-03-13T14:52:34Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/NetworkXml.java", "diffHunk": "@@ -618,140 +467,32 @@ public static Network read(ReadOnlyDataSource dataSource, NetworkFactory network\n         try (InputStream isb = dataSource.newInputStream(null, dataSourceExt)) {\n             network = NetworkXml.read(isb, options, anonymizer, networkFactory);\n         }\n-        if (!options.withNoExtension()) {\n-            switch (options.getMode()) {\n-                case EXTENSIONS_IN_ONE_SEPARATED_FILE:\n-                    // in this case we have to read all extensions from one  file\n-                    try (InputStream ise = dataSource.newInputStream(\"-ext\", dataSourceExt)) {\n-                        readExtensions(network, ise, anonymizer, options);\n-                    } catch (IOException e) {\n-                        LOGGER.warn(String.format(\"the extensions file wasn't found while importing, please ensure that the file name respect the naming convention baseFileName-ext.%s\", dataSourceExt));\n-                    }\n-                    break;\n-                case ONE_SEPARATED_FILE_PER_EXTENSION_TYPE:\n-                    String ext = dataSourceExt.isEmpty() ? \"\" : \".\" + dataSourceExt;\n-                    // here we'll read all extensions declared in the extensions set\n-                    readExtensions(network, dataSource, anonymizer, options, ext);\n-                    break;\n-                default:\n-                    break;\n-            }\n-        }\n         return network;\n     }\n \n-    public static Network read(Path xmlFile, ImportOptions options) throws IOException {\n-        DataSource dataSource = getDataSourceFromPath(xmlFile);\n-        String ext = getFileExtensionFromPath(xmlFile);\n-        return read(dataSource, NetworkFactory.findDefault(), options, ext);\n-    }\n-\n-    public static Network validateAndRead(Path xmlFile) {\n-        try {\n-            return validateAndRead(xmlFile, new ImportOptions());\n-        } catch (IOException e) {\n-            throw new UncheckedIOException(e);\n-        }\n-    }\n-\n-    private static void validate(Path xmlFile, IidmImportExportMode mode) throws IOException {\n-        DataSource dataSource = getDataSourceFromPath(xmlFile);\n-        String ext = getFileExtensionFromPath(xmlFile);\n-\n-        if (mode == IidmImportExportMode.EXTENSIONS_IN_ONE_SEPARATED_FILE) {\n-            try (InputStream ise = dataSource.newInputStream(dataSource.getBaseName() + ext)) {\n-                validateWithExtensions(ise);\n-            }\n-            try (InputStream ise = dataSource.newInputStream(dataSource.getBaseName() + \"-ext.\" + ext)) {\n-                validateWithExtensions(ise);\n-            }\n-        } else {\n-            Set<String> listNames = dataSource.listNames(\".*\\\\.\" + ext);\n-            for (String fileName : listNames) {\n-                try (InputStream ise = dataSource.newInputStream(fileName)) {\n-                    validateWithExtensions(ise);\n-                }\n-            }\n-        }\n-    }\n-\n-    public static Network validateAndRead(Path xmlFile, ImportOptions options) throws IOException {\n-        if (options.getMode() == IidmImportExportMode.UNIQUE_FILE) {\n-            validateWithExtensions(xmlFile);\n-            return read(xmlFile);\n-        }\n-        validate(xmlFile, options.getMode());\n-        return read(xmlFile, options);\n+    /**\n+     * @deprecated Use {@link #read(Path)} instead.\n+     */\n+    @Deprecated\n+    public static Network read(Path xmlFile, ImportOptions options) {\n+        return read(xmlFile);\n     }\n \n-    // To read extensions from multiple extension files\n-    static void readExtensions(Network network, ReadOnlyDataSource dataSource, Anonymizer anonymizer, ImportOptions options, String ext) throws IOException {\n-        options.getExtensions().ifPresent(extensions -> {\n-            for (String extension : extensions) {\n-                try (InputStream ise = dataSource.newInputStream(dataSource.getBaseName() + \"-\" + extension + ext)) {\n-                    readExtensions(network, ise, anonymizer, options);\n-                } catch (IOException e) {\n-                    LOGGER.warn(String.format(\"the %s extension file is not found despite it was declared in the extensions list\", extension));\n-                }\n-            }\n-        });\n-\n-        if (!options.getExtensions().isPresent()) {\n-            Set<String> listNames = dataSource.listNames(\".*\" + ext);\n-            listNames.remove(dataSource.getBaseName() + ext);\n-            for (String fileName : listNames) {\n-                try (InputStream ise = dataSource.newInputStream(fileName)) {\n-                    readExtensions(network, ise, anonymizer, options);\n-                } catch (IOException e) {\n-                    LOGGER.warn(String.format(\"the %s file is not found \", fileName));\n-                }\n-            }\n-        }\n+    /**\n+     * @deprecated Use {@link #validateAndRead(Path)} instead.\n+     */\n+    @Deprecated\n+    public static Network validateAndRead(Path xmlFile, ImportOptions options) {\n+        return validateAndRead(xmlFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dee8c8c859c4fd8b6b9934d9f1fefdbeb743c9f"}, "originalPosition": 415}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTI0NjI4OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/NetworkXml.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo1Mjo1OVrOF2GsRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo1Mjo1OVrOF2GsRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3NzA2MQ==", "bodyText": "I think you should rename this method validate", "url": "https://github.com/powsybl/powsybl-core/pull/1215#discussion_r392277061", "createdAt": "2020-03-13T14:52:59Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/NetworkXml.java", "diffHunk": "@@ -618,140 +467,32 @@ public static Network read(ReadOnlyDataSource dataSource, NetworkFactory network\n         try (InputStream isb = dataSource.newInputStream(null, dataSourceExt)) {\n             network = NetworkXml.read(isb, options, anonymizer, networkFactory);\n         }\n-        if (!options.withNoExtension()) {\n-            switch (options.getMode()) {\n-                case EXTENSIONS_IN_ONE_SEPARATED_FILE:\n-                    // in this case we have to read all extensions from one  file\n-                    try (InputStream ise = dataSource.newInputStream(\"-ext\", dataSourceExt)) {\n-                        readExtensions(network, ise, anonymizer, options);\n-                    } catch (IOException e) {\n-                        LOGGER.warn(String.format(\"the extensions file wasn't found while importing, please ensure that the file name respect the naming convention baseFileName-ext.%s\", dataSourceExt));\n-                    }\n-                    break;\n-                case ONE_SEPARATED_FILE_PER_EXTENSION_TYPE:\n-                    String ext = dataSourceExt.isEmpty() ? \"\" : \".\" + dataSourceExt;\n-                    // here we'll read all extensions declared in the extensions set\n-                    readExtensions(network, dataSource, anonymizer, options, ext);\n-                    break;\n-                default:\n-                    break;\n-            }\n-        }\n         return network;\n     }\n \n-    public static Network read(Path xmlFile, ImportOptions options) throws IOException {\n-        DataSource dataSource = getDataSourceFromPath(xmlFile);\n-        String ext = getFileExtensionFromPath(xmlFile);\n-        return read(dataSource, NetworkFactory.findDefault(), options, ext);\n-    }\n-\n-    public static Network validateAndRead(Path xmlFile) {\n-        try {\n-            return validateAndRead(xmlFile, new ImportOptions());\n-        } catch (IOException e) {\n-            throw new UncheckedIOException(e);\n-        }\n-    }\n-\n-    private static void validate(Path xmlFile, IidmImportExportMode mode) throws IOException {\n-        DataSource dataSource = getDataSourceFromPath(xmlFile);\n-        String ext = getFileExtensionFromPath(xmlFile);\n-\n-        if (mode == IidmImportExportMode.EXTENSIONS_IN_ONE_SEPARATED_FILE) {\n-            try (InputStream ise = dataSource.newInputStream(dataSource.getBaseName() + ext)) {\n-                validateWithExtensions(ise);\n-            }\n-            try (InputStream ise = dataSource.newInputStream(dataSource.getBaseName() + \"-ext.\" + ext)) {\n-                validateWithExtensions(ise);\n-            }\n-        } else {\n-            Set<String> listNames = dataSource.listNames(\".*\\\\.\" + ext);\n-            for (String fileName : listNames) {\n-                try (InputStream ise = dataSource.newInputStream(fileName)) {\n-                    validateWithExtensions(ise);\n-                }\n-            }\n-        }\n-    }\n-\n-    public static Network validateAndRead(Path xmlFile, ImportOptions options) throws IOException {\n-        if (options.getMode() == IidmImportExportMode.UNIQUE_FILE) {\n-            validateWithExtensions(xmlFile);\n-            return read(xmlFile);\n-        }\n-        validate(xmlFile, options.getMode());\n-        return read(xmlFile, options);\n+    /**\n+     * @deprecated Use {@link #read(Path)} instead.\n+     */\n+    @Deprecated\n+    public static Network read(Path xmlFile, ImportOptions options) {\n+        return read(xmlFile);\n     }\n \n-    // To read extensions from multiple extension files\n-    static void readExtensions(Network network, ReadOnlyDataSource dataSource, Anonymizer anonymizer, ImportOptions options, String ext) throws IOException {\n-        options.getExtensions().ifPresent(extensions -> {\n-            for (String extension : extensions) {\n-                try (InputStream ise = dataSource.newInputStream(dataSource.getBaseName() + \"-\" + extension + ext)) {\n-                    readExtensions(network, ise, anonymizer, options);\n-                } catch (IOException e) {\n-                    LOGGER.warn(String.format(\"the %s extension file is not found despite it was declared in the extensions list\", extension));\n-                }\n-            }\n-        });\n-\n-        if (!options.getExtensions().isPresent()) {\n-            Set<String> listNames = dataSource.listNames(\".*\" + ext);\n-            listNames.remove(dataSource.getBaseName() + ext);\n-            for (String fileName : listNames) {\n-                try (InputStream ise = dataSource.newInputStream(fileName)) {\n-                    readExtensions(network, ise, anonymizer, options);\n-                } catch (IOException e) {\n-                    LOGGER.warn(String.format(\"the %s file is not found \", fileName));\n-                }\n-            }\n-        }\n+    /**\n+     * @deprecated Use {@link #validateAndRead(Path)} instead.\n+     */\n+    @Deprecated\n+    public static Network validateAndRead(Path xmlFile, ImportOptions options) {\n+        return validateAndRead(xmlFile);\n     }\n \n-    // To read extensions from an extensions file\n-    static Network readExtensions(Network network, InputStream ise, Anonymizer anonymizer, ImportOptions options) {\n-        try {\n-            XMLStreamReader reader = XML_INPUT_FACTORY_SUPPLIER.get().createXMLStreamReader(ise);\n-            int state = reader.next();\n-            while (state == XMLStreamReader.COMMENT) {\n-                state = reader.next();\n-            }\n-            String id = reader.getAttributeValue(null, \"id\");\n-            DateTime date = DateTime.parse(reader.getAttributeValue(null, CASE_DATE));\n-\n-            //verify that the extensions file matches with the same network\n-            if (!network.getId().equals(id) || !network.getCaseDate().equals(date)) {\n-                throw new PowsyblException(\"Extension file do not match with the base file !\");\n-            }\n-\n-            NetworkXmlReaderContext context = new NetworkXmlReaderContext(anonymizer, reader, options, CURRENT_IIDM_XML_VERSION);\n-            context.buildExtensionNamespaceUriList(EXTENSIONS_SUPPLIER.get().getProviders().stream());\n-            Set<String> extensionNamesNotFound = new TreeSet<>();\n-\n-            XmlUtil.readUntilEndElement(NETWORK_ROOT_ELEMENT_NAME, reader, () -> {\n-                if (reader.getLocalName().equals(EXTENSION_ELEMENT_NAME)) {\n-                    String id2 = context.getAnonymizer().deanonymizeString(reader.getAttributeValue(null, \"id\"));\n-                    Identifiable identifiable = network.getIdentifiable(id2);\n-                    if (identifiable == null) {\n-                        throw new PowsyblException(\"Identifiable \" + id2 + \" not found\");\n-                    }\n-                    readExtensions(identifiable, context, extensionNamesNotFound);\n-                } else {\n-                    throw new PowsyblException(\"Unexpected element: \" + reader.getLocalName());\n-                }\n-            });\n-\n-            checkExtensionsNotFound(context, extensionNamesNotFound);\n-\n-            return network;\n-        } catch (XMLStreamException e) {\n-            throw new UncheckedXmlStreamException(e);\n-        }\n+    public static Network validateAndRead(Path xmlFile) {\n+        validateWithExtensions(xmlFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dee8c8c859c4fd8b6b9934d9f1fefdbeb743c9f"}, "originalPosition": 458}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTI1MjE4OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/XMLExporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo1NDo0MlrOF2GwOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo1NDo0MlrOF2GwOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3ODA3Mw==", "bodyText": "Do you think it's better with a method? Why don't you finish the job here:\nprivate ExportOptions createExportOptions(Properties parameters) {\n    ...\n}", "url": "https://github.com/powsybl/powsybl-core/pull/1215#discussion_r392278073", "createdAt": "2020-03-13T14:54:42Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/XMLExporter.java", "diffHunk": "@@ -149,4 +138,16 @@ private void addExtensionsVersions(Properties parameters, ExportOptions options)\n             }\n         });\n     }\n+\n+    protected void buildExportOptions(Properties parameters, ExportOptions options) {\n+        options.setIndent(ConversionParameters.readBooleanParameter(getFormat(), parameters, INDENT_PARAMETER, defaultValueConfig))\n+                .setWithBranchSV(ConversionParameters.readBooleanParameter(getFormat(), parameters, WITH_BRANCH_STATE_VARIABLES_PARAMETER, defaultValueConfig))\n+                .setOnlyMainCc(ConversionParameters.readBooleanParameter(getFormat(), parameters, ONLY_MAIN_CC_PARAMETER, defaultValueConfig))\n+                .setAnonymized(ConversionParameters.readBooleanParameter(getFormat(), parameters, ANONYMISED_PARAMETER, defaultValueConfig))\n+                .setTopologyLevel(TopologyLevel.valueOf(ConversionParameters.readStringParameter(getFormat(), parameters, TOPOLOGY_LEVEL_PARAMETER, defaultValueConfig)))\n+                .setThrowExceptionIfExtensionNotFound(ConversionParameters.readBooleanParameter(getFormat(), parameters, THROW_EXCEPTION_IF_EXTENSION_NOT_FOUND_PARAMETER, defaultValueConfig))\n+                .setExtensions(ConversionParameters.readStringListParameter(getFormat(), parameters, EXTENSIONS_LIST_PARAMETER, defaultValueConfig) != null ? new HashSet<>(ConversionParameters.readStringListParameter(getFormat(), parameters, EXTENSIONS_LIST_PARAMETER, defaultValueConfig)) : null)\n+                .setVersion(ConversionParameters.readStringParameter(getFormat(), parameters, VERSION_PARAMETER, defaultValueConfig));\n+        addExtensionsVersions(parameters, options);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dee8c8c859c4fd8b6b9934d9f1fefdbeb743c9f"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTI1MzU4OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/XMLImporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo1NTowOFrOF2GxKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo1NTowOFrOF2GxKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3ODMxMg==", "bodyText": "Same remark", "url": "https://github.com/powsybl/powsybl-core/pull/1215#discussion_r392278312", "createdAt": "2020-03-13T14:55:08Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/XMLImporter.java", "diffHunk": "@@ -195,5 +187,12 @@ public Network importData(ReadOnlyDataSource dataSource, NetworkFactory networkF\n         }\n         return network;\n     }\n+\n+    protected void buildImportOptions(Properties parameters, ImportOptions options) {\n+        options\n+                .setThrowExceptionIfExtensionNotFound(ConversionParameters.readBooleanParameter(getFormat(), parameters, THROW_EXCEPTION_IF_EXTENSION_NOT_FOUND_PARAMETER, defaultValueConfig))\n+                .setExtensions(ConversionParameters.readStringListParameter(getFormat(), parameters, EXTENSIONS_LIST_PARAMETER, defaultValueConfig) != null ? new HashSet<>(ConversionParameters.readStringListParameter(getFormat(), parameters, EXTENSIONS_LIST_PARAMETER, defaultValueConfig)) : null);\n+\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dee8c8c859c4fd8b6b9934d9f1fefdbeb743c9f"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 101, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}