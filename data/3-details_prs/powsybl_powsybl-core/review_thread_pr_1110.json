{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyOTY3NjUy", "number": 1110, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOTo1NjowNVrODYHkeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMTozMDoxNVrODZzGzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NjE2NDQyOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/LinkData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOTo1NjowNVrOFdyvMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOTo1NjowNVrOFdyvMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc4NDMwNw==", "bodyText": "*copyright 2020", "url": "https://github.com/powsybl/powsybl-core/pull/1110#discussion_r366784307", "createdAt": "2020-01-15T09:56:05Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/LinkData.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/**\n+ * Copyright (c) 2019, RTE (http://www.rte-france.com)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f347dee7b92c64b39c4f1b847012c9b5f889b465"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4Mzc3MzA2OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/LinkData.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMToyNTo0OVrOFgY0dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMTo1MzozM1rOFgw22w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUwNTM5Ng==", "bodyText": "I know that is not a new feature, but I think I am not really sure to understand why we do a1.conjugate().multiply(a2) or a2.conjugate().multiply(a1). It is from the branch admittance matrix building principle, but if you can just precise this factor, it would be nice.", "url": "https://github.com/powsybl/powsybl-core/pull/1110#discussion_r369505396", "createdAt": "2020-01-22T11:25:49Z", "author": {"login": "annetill"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/LinkData.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.util;\n+\n+import org.apache.commons.math3.complex.Complex;\n+import org.apache.commons.math3.complex.ComplexUtils;\n+\n+/**\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ * @author Marcos de Miguel <demiguelm at aia.es>\n+ */\n+\n+public final class LinkData {\n+\n+    private LinkData() {\n+    }\n+\n+    static double getFixedX(double x, double epsilonX, boolean applyReactanceCorrection) {\n+        return Math.abs(x) < epsilonX && applyReactanceCorrection ? epsilonX : x;\n+    }\n+\n+    static BranchAdmittanceMatrix calculateBranchAdmittance(double r, double x, double ratio1, double alpha1,\n+        double ratio2, double alpha2, Complex ysh1, Complex ysh2) {\n+\n+        Complex a1 = ComplexUtils.polar2Complex(ratio1, alpha1);\n+        Complex a2 = ComplexUtils.polar2Complex(ratio2, alpha2);\n+\n+        Complex ytr;\n+        if (r == 0.0 && x == 0.0) {\n+            ytr = Complex.ZERO;\n+        } else {\n+            ytr = new Complex(r, x).reciprocal();\n+        }\n+\n+        BranchAdmittanceMatrix branchAdmittance = new BranchAdmittanceMatrix();\n+\n+        branchAdmittance.y11 = ytr.add(ysh1).divide(a1.conjugate().multiply(a1));\n+        branchAdmittance.y12 = ytr.negate().divide(a1.conjugate().multiply(a2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "494dc6ac257b4b91df28422c9146cdc9202b52d3"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg5OTIyNw==", "bodyText": "I wrote a document explaining how to build the admittance matrix of a branch and kron reduction. We will send it by mail.", "url": "https://github.com/powsybl/powsybl-core/pull/1110#discussion_r369899227", "createdAt": "2020-01-23T01:53:33Z", "author": {"login": "marqueslanauja"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/LinkData.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.util;\n+\n+import org.apache.commons.math3.complex.Complex;\n+import org.apache.commons.math3.complex.ComplexUtils;\n+\n+/**\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ * @author Marcos de Miguel <demiguelm at aia.es>\n+ */\n+\n+public final class LinkData {\n+\n+    private LinkData() {\n+    }\n+\n+    static double getFixedX(double x, double epsilonX, boolean applyReactanceCorrection) {\n+        return Math.abs(x) < epsilonX && applyReactanceCorrection ? epsilonX : x;\n+    }\n+\n+    static BranchAdmittanceMatrix calculateBranchAdmittance(double r, double x, double ratio1, double alpha1,\n+        double ratio2, double alpha2, Complex ysh1, Complex ysh2) {\n+\n+        Complex a1 = ComplexUtils.polar2Complex(ratio1, alpha1);\n+        Complex a2 = ComplexUtils.polar2Complex(ratio2, alpha2);\n+\n+        Complex ytr;\n+        if (r == 0.0 && x == 0.0) {\n+            ytr = Complex.ZERO;\n+        } else {\n+            ytr = new Complex(r, x).reciprocal();\n+        }\n+\n+        BranchAdmittanceMatrix branchAdmittance = new BranchAdmittanceMatrix();\n+\n+        branchAdmittance.y11 = ytr.add(ysh1).divide(a1.conjugate().multiply(a1));\n+        branchAdmittance.y12 = ytr.negate().divide(a1.conjugate().multiply(a2));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUwNTM5Ng=="}, "originalCommit": {"oid": "494dc6ac257b4b91df28422c9146cdc9202b52d3"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4Mzc4MzE5OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/LinkData.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMTozMDoxNVrOFgY60Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMTo1Mzo1MlrOFgw3HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUwNzAyNQ==", "bodyText": "I could be nice if you could send me some elements to better understand this admittance matrix building.", "url": "https://github.com/powsybl/powsybl-core/pull/1110#discussion_r369507025", "createdAt": "2020-01-22T11:30:15Z", "author": {"login": "annetill"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/LinkData.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.util;\n+\n+import org.apache.commons.math3.complex.Complex;\n+import org.apache.commons.math3.complex.ComplexUtils;\n+\n+/**\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ * @author Marcos de Miguel <demiguelm at aia.es>\n+ */\n+\n+public final class LinkData {\n+\n+    private LinkData() {\n+    }\n+\n+    static double getFixedX(double x, double epsilonX, boolean applyReactanceCorrection) {\n+        return Math.abs(x) < epsilonX && applyReactanceCorrection ? epsilonX : x;\n+    }\n+\n+    static BranchAdmittanceMatrix calculateBranchAdmittance(double r, double x, double ratio1, double alpha1,\n+        double ratio2, double alpha2, Complex ysh1, Complex ysh2) {\n+\n+        Complex a1 = ComplexUtils.polar2Complex(ratio1, alpha1);\n+        Complex a2 = ComplexUtils.polar2Complex(ratio2, alpha2);\n+\n+        Complex ytr;\n+        if (r == 0.0 && x == 0.0) {\n+            ytr = Complex.ZERO;\n+        } else {\n+            ytr = new Complex(r, x).reciprocal();\n+        }\n+\n+        BranchAdmittanceMatrix branchAdmittance = new BranchAdmittanceMatrix();\n+\n+        branchAdmittance.y11 = ytr.add(ysh1).divide(a1.conjugate().multiply(a1));\n+        branchAdmittance.y12 = ytr.negate().divide(a1.conjugate().multiply(a2));\n+        branchAdmittance.y21 = ytr.negate().divide(a2.conjugate().multiply(a1));\n+        branchAdmittance.y22 = ytr.add(ysh2).divide(a2.conjugate().multiply(a2));\n+\n+        return branchAdmittance;\n+    }\n+\n+    static BranchAdmittanceMatrix kronChain(Complex yFirstConnected11, Complex yFirstConnected12,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "494dc6ac257b4b91df28422c9146cdc9202b52d3"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg5OTI5Mw==", "bodyText": "I wrote a document explaining how to build the admittance matrix of a branch and kron reduction. We will send it by mail.", "url": "https://github.com/powsybl/powsybl-core/pull/1110#discussion_r369899293", "createdAt": "2020-01-23T01:53:52Z", "author": {"login": "marqueslanauja"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/LinkData.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.util;\n+\n+import org.apache.commons.math3.complex.Complex;\n+import org.apache.commons.math3.complex.ComplexUtils;\n+\n+/**\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ * @author Marcos de Miguel <demiguelm at aia.es>\n+ */\n+\n+public final class LinkData {\n+\n+    private LinkData() {\n+    }\n+\n+    static double getFixedX(double x, double epsilonX, boolean applyReactanceCorrection) {\n+        return Math.abs(x) < epsilonX && applyReactanceCorrection ? epsilonX : x;\n+    }\n+\n+    static BranchAdmittanceMatrix calculateBranchAdmittance(double r, double x, double ratio1, double alpha1,\n+        double ratio2, double alpha2, Complex ysh1, Complex ysh2) {\n+\n+        Complex a1 = ComplexUtils.polar2Complex(ratio1, alpha1);\n+        Complex a2 = ComplexUtils.polar2Complex(ratio2, alpha2);\n+\n+        Complex ytr;\n+        if (r == 0.0 && x == 0.0) {\n+            ytr = Complex.ZERO;\n+        } else {\n+            ytr = new Complex(r, x).reciprocal();\n+        }\n+\n+        BranchAdmittanceMatrix branchAdmittance = new BranchAdmittanceMatrix();\n+\n+        branchAdmittance.y11 = ytr.add(ysh1).divide(a1.conjugate().multiply(a1));\n+        branchAdmittance.y12 = ytr.negate().divide(a1.conjugate().multiply(a2));\n+        branchAdmittance.y21 = ytr.negate().divide(a2.conjugate().multiply(a1));\n+        branchAdmittance.y22 = ytr.add(ysh2).divide(a2.conjugate().multiply(a2));\n+\n+        return branchAdmittance;\n+    }\n+\n+    static BranchAdmittanceMatrix kronChain(Complex yFirstConnected11, Complex yFirstConnected12,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUwNzAyNQ=="}, "originalCommit": {"oid": "494dc6ac257b4b91df28422c9146cdc9202b52d3"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 165, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}