{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNjcxMTc5", "number": 1326, "title": "Mergingview vl adapter", "bodyText": "Please check if the PR fulfills these requirements (please use '[x]' to check the checkboxes, or submit the PR and then click the checkboxes)\n\n The commit message follows our guidelines\n Tests for the changes have been added (for bug fixes / features)\n Docs have been added / updated (for bug fixes / features)\n\nDoes this PR already have an issue describing the problem ? If so, link to this issue using '#XXX' and skip the rest\nWhat kind of change does this PR introduce? (Bug fix, feature, docs update, ...)\nBug fix\nWhat is the current behavior? (You can also link to an open issue here)\nThe views in the VoltageLevelAdapter don't work properly: they don't manage the bus cache properly. Some of buses are temporary and should be invalidated when the topology change. They have to be cached in the VoltageLevel itself. Some of the buses are configured, and should be cached in the merging view\nWhat is the new behavior (if this is a feature change)?\nThis PR try to change this behaviour.\nDoes this PR introduce a breaking change or deprecate an API? If yes, check the following:\n\n The Breaking Change or Deprecated label has been added\n The migration guide has been updated in the github wiki (What changes might users need to make in their application due to this PR?)\n\nOther information:\nBefore merging this PR, we have to fix the bus definition for the BusView, and consider the DanglingLine as a branch, not only a feeder.\n(if any of the questions/checkboxes don't apply, please delete them entirely)", "createdAt": "2020-05-27T07:48:28Z", "url": "https://github.com/powsybl/powsybl-core/pull/1326", "merged": true, "mergeCommit": {"oid": "6015bc99caccf5a77a6eb41dfc7e573b9121ea40"}, "closed": true, "closedAt": "2020-06-16T14:15:28Z", "author": {"login": "mathbagu"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnQzz2AFqTQyMjQ2NjYxOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcr0ytwgH2gAyNDIzNjcxMTc5OjAyNGI1YjJhYTJhMzY1ZDA1YzM4ZDMxNmIyZDhiY2Q5OWQ4Zjk3ZWU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNDY2NjE5", "url": "https://github.com/powsybl/powsybl-core/pull/1326#pullrequestreview-422466619", "createdAt": "2020-06-02T08:44:12Z", "commit": {"oid": "5a730036ae986ed7b42d9f53bc4ec259fc67b2de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwODo0NDoxMlrOGdn-MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwODo0NDoxMlrOGdn-MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcxNjc4NA==", "bodyText": "Hi @mathbagu ! I have tried to resolve this fixme and it is fix with this #1316\nI just have now to validate the PR #1316 with @zamarrenolm and @geofjamg for bus definition and the consequences.", "url": "https://github.com/powsybl/powsybl-core/pull/1326#discussion_r433716784", "createdAt": "2020-06-02T08:44:12Z", "author": {"login": "annetill"}, "path": "iidm/iidm-mergingview/src/test/java/com/powsybl/iidm/mergingview/TopologyTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+\n+package com.powsybl.iidm.mergingview;\n+\n+import com.powsybl.iidm.network.Line;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.iidm.network.VoltageLevel;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+/**\n+ * @author Mathieu Bague <mathieu.bague@rte-france.com>\n+ */\n+public class TopologyTest {\n+\n+    @Test\n+    public void test() {\n+        MergingView cgm = MergingViewFactory.createCGM(null);\n+        Network n1 = cgm.getNetwork(\"n1\");\n+        Network n2 = cgm.getNetwork(\"n2\");\n+        assertNotNull(n1);\n+        assertNotNull(n2);\n+\n+        Line mergedLine = cgm.getLine(\"DL1 + DL2\");\n+        assertNotNull(mergedLine);\n+        assertNotNull(mergedLine.getTerminal1().getBusView().getBus());\n+        // FIXME(mathbagu) assertNotNull(mergedLine.getTerminal2().getBusView().getBus());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a730036ae986ed7b42d9f53bc4ec259fc67b2de"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5OTYxNjgz", "url": "https://github.com/powsybl/powsybl-core/pull/1326#pullrequestreview-419961683", "createdAt": "2020-05-28T10:06:11Z", "commit": {"oid": "5a730036ae986ed7b42d9f53bc4ec259fc67b2de"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMDowNjoxMVrOGbuYDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwODo1MTo0MlrOGeSU4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcyNDU1OQ==", "bodyText": "If the dangling line is merged (and is considered as a line), should it return null or fail the cast? It seems that when we try getConnectable(b, A.class) if b is not an instance of A, there is an exception during the cast, not a returned null? I don't know if it can be easily done though.", "url": "https://github.com/powsybl/powsybl-core/pull/1326#discussion_r431724559", "createdAt": "2020-05-28T10:06:11Z", "author": {"login": "MioRtia"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/AbstractVoltageLevelAdapter.java", "diffHunk": "@@ -0,0 +1,390 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+\n+package com.powsybl.iidm.mergingview;\n+\n+import com.google.common.collect.Iterables;\n+import com.google.common.primitives.Ints;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.util.ShortIdDictionary;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.io.Writer;\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * @author Mathieu Bague <mathieu.bague@rte-france.com>\n+ */\n+abstract class AbstractVoltageLevelAdapter extends AbstractIdentifiableAdapter<VoltageLevel> implements VoltageLevelAdapter {\n+\n+    static class BusCache<T> extends AbstractAdapter<T> {\n+\n+        private final Map<Bus, BusAdapter> busCache = new HashMap<>();\n+\n+        public BusCache(T delegate, MergingViewIndex index) {\n+            super(delegate, index);\n+        }\n+\n+        void invalidateCache() {\n+            busCache.clear();\n+        }\n+\n+        public Bus getBus(Bus bus) {\n+            return bus == null ? null : busCache.computeIfAbsent(bus, key -> new BusAdapter(key, getIndex()));\n+        }\n+\n+        public int size() {\n+            return busCache.size();\n+        }\n+    }\n+\n+    AbstractVoltageLevelAdapter(final VoltageLevel delegate, final MergingViewIndex index) {\n+        super(delegate, index);\n+    }\n+\n+    @Override\n+    public ContainerType getContainerType() {\n+        return getDelegate().getContainerType();\n+    }\n+\n+    @Override\n+    public Substation getSubstation() {\n+        return getIndex().getSubstation(getDelegate().getSubstation());\n+    }\n+\n+    @Override\n+    public double getNominalV() {\n+        return getDelegate().getNominalV();\n+    }\n+\n+    @Override\n+    public VoltageLevel setNominalV(double nominalV) {\n+        getDelegate().setNominalV(nominalV);\n+        return this;\n+    }\n+\n+    @Override\n+    public double getLowVoltageLimit() {\n+        return getDelegate().getLowVoltageLimit();\n+    }\n+\n+    @Override\n+    public VoltageLevel setLowVoltageLimit(double lowVoltageLimit) {\n+        getDelegate().setLowVoltageLimit(lowVoltageLimit);\n+        return this;\n+    }\n+\n+    @Override\n+    public double getHighVoltageLimit() {\n+        return getDelegate().getHighVoltageLimit();\n+    }\n+\n+    @Override\n+    public VoltageLevel setHighVoltageLimit(double highVoltageLimit) {\n+        getDelegate().setHighVoltageLimit(highVoltageLimit);\n+        return this;\n+    }\n+\n+    @Override\n+    public <T extends Connectable> T getConnectable(String id, Class<T> clazz) {\n+        T connectable = getDelegate().getConnectable(id, clazz);\n+        if (clazz == DanglingLine.class) {\n+            DanglingLine dl = (DanglingLine) connectable;\n+            return dl == null || getIndex().isMerged(dl) ? null : clazz.cast(getIndex().getDanglingLine(dl));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a730036ae986ed7b42d9f53bc4ec259fc67b2de"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQwNjk2Mg==", "bodyText": "Is this System.out.println voluntary?", "url": "https://github.com/powsybl/powsybl-core/pull/1326#discussion_r434406962", "createdAt": "2020-06-03T08:45:21Z", "author": {"login": "MioRtia"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/BusBreakerVoltageLevelAdapter.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+\n+package com.powsybl.iidm.mergingview;\n+\n+import com.google.common.collect.Iterables;\n+import com.powsybl.iidm.network.Bus;\n+import com.powsybl.iidm.network.BusAdder;\n+import com.powsybl.iidm.network.Switch;\n+import com.powsybl.iidm.network.VoltageLevel;\n+\n+import java.util.stream.Stream;\n+\n+/**\n+ * @author Mathieu Bague <mathieu.bague@rte-france.com>\n+ */\n+class BusBreakerVoltageLevelAdapter extends AbstractVoltageLevelAdapter {\n+\n+    class BusBreakerViewAdapter extends AbstractAdapter<BusBreakerView> implements BusBreakerViewExt {\n+\n+        final class SwitchAdderAdapter extends AbstractIdentifiableAdderAdapter<SwitchAdder> implements SwitchAdder {\n+\n+            SwitchAdderAdapter(final SwitchAdder delegate, final MergingViewIndex index) {\n+                super(delegate, index);\n+            }\n+\n+            @Override\n+            public Switch add() {\n+                checkAndSetUniqueId();\n+                return getIndex().getSwitch(getDelegate().add());\n+            }\n+\n+            @Override\n+            public VoltageLevel.BusBreakerView.SwitchAdder setBus1(String bus1) {\n+                getDelegate().setBus1(bus1);\n+                return this;\n+            }\n+\n+            @Override\n+            public VoltageLevel.BusBreakerView.SwitchAdder setBus2(String bus2) {\n+                getDelegate().setBus2(bus2);\n+                return this;\n+            }\n+\n+            @Override\n+            public VoltageLevel.BusBreakerView.SwitchAdder setOpen(final boolean open) {\n+                getDelegate().setOpen(open);\n+                return this;\n+            }\n+\n+            @Override\n+            public VoltageLevel.BusBreakerView.SwitchAdder setFictitious(final boolean fictitious) {\n+                getDelegate().setFictitious(fictitious);\n+                return this;\n+            }\n+        }\n+\n+        BusBreakerViewAdapter(BusBreakerView delegate, MergingViewIndex index) {\n+            super(delegate, index);\n+        }\n+\n+        @Override\n+        public Iterable<Bus> getBuses() {\n+            return Iterables.transform(getDelegate().getBuses(), this::getBus);\n+        }\n+\n+        @Override\n+        public Stream<Bus> getBusStream() {\n+            return getDelegate().getBusStream()\n+                    .map(this::getBus);\n+        }\n+\n+        @Override\n+        public Bus getBus(String id) {\n+            return getBus(getDelegate().getBus(id));\n+        }\n+\n+        @Override\n+        public BusAdder newBus() {\n+            return new BusAdderAdapter(getDelegate().newBus(), getIndex());\n+        }\n+\n+        @Override\n+        public void removeBus(String busId) {\n+            // TODO(mathbagu)\n+            throw MergingView.createNotImplementedException();\n+        }\n+\n+        @Override\n+        public void removeAllBuses() {\n+            // TODO(mathbagu)\n+            throw MergingView.createNotImplementedException();\n+        }\n+\n+        @Override\n+        public Iterable<Switch> getSwitches() {\n+            return Iterables.transform(getDelegate().getSwitches(), getIndex()::getSwitch);\n+        }\n+\n+        @Override\n+        public Stream<Switch> getSwitchStream() {\n+            return getDelegate().getSwitchStream()\n+                    .map(getIndex()::getSwitch);\n+        }\n+\n+        @Override\n+        public int getSwitchCount() {\n+            return getDelegate().getSwitchCount();\n+        }\n+\n+        @Override\n+        public void removeSwitch(String switchId) {\n+            // TODO(mathbagu)\n+            throw MergingView.createNotImplementedException();\n+        }\n+\n+        @Override\n+        public void removeAllSwitches() {\n+            // TODO(mathbagu)\n+            throw MergingView.createNotImplementedException();\n+        }\n+\n+        @Override\n+        public Bus getBus1(String switchId) {\n+            return getBus(getDelegate().getBus1(switchId));\n+        }\n+\n+        @Override\n+        public Bus getBus2(String switchId) {\n+            return getBus(getDelegate().getBus2(switchId));\n+        }\n+\n+        @Override\n+        public Switch getSwitch(String switchId) {\n+            return getIndex().getSwitch(getDelegate().getSwitch(switchId));\n+        }\n+\n+        @Override\n+        public SwitchAdder newSwitch() {\n+            return new SwitchAdderAdapter(getDelegate().newSwitch(), getIndex());\n+        }\n+\n+        @Override\n+        public Bus getBus(Bus bus) {\n+            return getIndex().getBus(bus);\n+        }\n+    }\n+\n+    static class BusViewAdapter extends BusCache<BusView> implements BusViewExt {\n+\n+        BusViewAdapter(BusView delegate, MergingViewIndex index) {\n+            super(delegate, index);\n+        }\n+\n+        @Override\n+        public Iterable<Bus> getBuses() {\n+            return Iterables.transform(getDelegate().getBuses(), this::getBus);\n+        }\n+\n+        @Override\n+        public Stream<Bus> getBusStream() {\n+            return getDelegate().getBusStream().map(this::getBus);\n+        }\n+\n+        @Override\n+        public Bus getBus(String id) {\n+            return getBus(getDelegate().getBus(id));\n+        }\n+\n+        @Override\n+        public Bus getMergedBus(String configuredBusId) {\n+            return getBus(getDelegate().getMergedBus(configuredBusId));\n+        }\n+    }\n+\n+    private final BusBreakerViewAdapter busBreakerView;\n+\n+    private final BusViewAdapter busView;\n+\n+    BusBreakerVoltageLevelAdapter(final VoltageLevel delegate, final MergingViewIndex index) {\n+        super(delegate, index);\n+        busBreakerView = new BusBreakerViewAdapter(delegate.getBusBreakerView(), index);\n+        busView = new BusViewAdapter(delegate.getBusView(), index);\n+    }\n+\n+    @Override\n+    public NodeBreakerView getNodeBreakerView() {\n+        // The delegate is a BusBreakerVoltageLevel, so we can return its Node/Breaker view that throws exception for all the methods.\n+        return getDelegate().getNodeBreakerView();\n+    }\n+\n+    @Override\n+    public BusBreakerViewExt getBusBreakerView() {\n+        return busBreakerView;\n+    }\n+\n+    @Override\n+    public BusViewExt getBusView() {\n+        return busView;\n+    }\n+\n+    @Override\n+    public void invalidateCache() {\n+        busView.invalidateCache();\n+        System.out.println(\"BBKVLA::invalidate\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a730036ae986ed7b42d9f53bc4ec259fc67b2de"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQxMDcyMA==", "bodyText": "Same remark as before. Shouldn't a logger be used?", "url": "https://github.com/powsybl/powsybl-core/pull/1326#discussion_r434410720", "createdAt": "2020-06-03T08:51:42Z", "author": {"login": "MioRtia"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/NodeBreakerVoltageLevelAdapter.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+\n+package com.powsybl.iidm.mergingview;\n+\n+import com.google.common.collect.Iterables;\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.iidm.network.*;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+/**\n+ * @author Mathieu Bague <mathieu.bague@rte-france.com>\n+ */\n+class NodeBreakerVoltageLevelAdapter extends AbstractVoltageLevelAdapter {\n+\n+    class NodeBreakerViewAdapter extends AbstractAdapter<NodeBreakerView> implements NodeBreakerView {\n+\n+        final class SwitchAdderAdapter extends AbstractIdentifiableAdderAdapter<SwitchAdder> implements SwitchAdder {\n+\n+            SwitchAdderAdapter(final SwitchAdder delegate, final MergingViewIndex index) {\n+                super(delegate, index);\n+            }\n+\n+            @Override\n+            public Switch add() {\n+                checkAndSetUniqueId();\n+                return getIndex().getSwitch(getDelegate().add());\n+            }\n+\n+            @Override\n+            public VoltageLevel.NodeBreakerView.SwitchAdder setNode1(final int node1) {\n+                getDelegate().setNode1(node1);\n+                return this;\n+            }\n+\n+            @Override\n+            public VoltageLevel.NodeBreakerView.SwitchAdder setNode2(final int node2) {\n+                getDelegate().setNode2(node2);\n+                return this;\n+            }\n+\n+            @Override\n+            public VoltageLevel.NodeBreakerView.SwitchAdder setKind(final SwitchKind kind) {\n+                getDelegate().setKind(kind);\n+                return this;\n+            }\n+\n+            @Override\n+            public VoltageLevel.NodeBreakerView.SwitchAdder setKind(final String kind) {\n+                getDelegate().setKind(kind);\n+                return this;\n+            }\n+\n+            @Override\n+            public VoltageLevel.NodeBreakerView.SwitchAdder setOpen(final boolean open) {\n+                getDelegate().setOpen(open);\n+                return this;\n+            }\n+\n+            @Override\n+            public VoltageLevel.NodeBreakerView.SwitchAdder setRetained(final boolean retained) {\n+                getDelegate().setRetained(retained);\n+                return this;\n+            }\n+\n+            @Override\n+            public VoltageLevel.NodeBreakerView.SwitchAdder setFictitious(final boolean fictitious) {\n+                getDelegate().setFictitious(fictitious);\n+                return this;\n+            }\n+        }\n+\n+        final class InternalConnectionAdderAdapter implements InternalConnectionAdder {\n+\n+            private final InternalConnectionAdder delegate;\n+\n+            InternalConnectionAdderAdapter(final InternalConnectionAdder delegate) {\n+                this.delegate = Objects.requireNonNull(delegate);\n+            }\n+\n+            @Override\n+            public InternalConnectionAdder setNode1(int node1) {\n+                delegate.setNode1(node1);\n+                return this;\n+            }\n+\n+            @Override\n+            public InternalConnectionAdder setNode2(int node2) {\n+                delegate.setNode2(node2);\n+                return this;\n+            }\n+\n+            @Override\n+            public void add() {\n+                delegate.add();\n+            }\n+        }\n+\n+        NodeBreakerViewAdapter(NodeBreakerView delegate, MergingViewIndex index) {\n+            super(delegate, index);\n+        }\n+\n+        @Override\n+        public int getMaximumNodeIndex() {\n+            return getDelegate().getMaximumNodeIndex();\n+        }\n+\n+        @Override\n+        public int[] getNodes() {\n+            return getDelegate().getNodes();\n+        }\n+\n+        @Override\n+        public SwitchAdder newSwitch() {\n+            return new SwitchAdderAdapter(getDelegate().newSwitch(), getIndex());\n+        }\n+\n+        @Override\n+        public InternalConnectionAdder newInternalConnection() {\n+            return new InternalConnectionAdderAdapter(getDelegate().newInternalConnection());\n+        }\n+\n+        @Override\n+        public int getInternalConnectionCount() {\n+            return getDelegate().getInternalConnectionCount();\n+        }\n+\n+        @Override\n+        public Iterable<InternalConnection> getInternalConnections() {\n+            return getDelegate().getInternalConnections();\n+        }\n+\n+        @Override\n+        public Stream<InternalConnection> getInternalConnectionStream() {\n+            return getDelegate().getInternalConnectionStream();\n+        }\n+\n+        @Override\n+        public void removeInternalConnections(int node1, int node2) {\n+            // TODO(mathbagu)\n+            throw MergingView.createNotImplementedException();\n+        }\n+\n+        @Override\n+        public SwitchAdder newBreaker() {\n+            return new SwitchAdderAdapter(getDelegate().newBreaker(), getIndex());\n+        }\n+\n+        @Override\n+        public SwitchAdder newDisconnector() {\n+            return new SwitchAdderAdapter(getDelegate().newDisconnector(), getIndex());\n+        }\n+\n+        @Override\n+        public int getNode1(String switchId) {\n+            return getDelegate().getNode1(switchId);\n+        }\n+\n+        @Override\n+        public int getNode2(String switchId) {\n+            return getDelegate().getNode2(switchId);\n+        }\n+\n+        @Override\n+        public Terminal getTerminal(int node) {\n+            return getIndex().getTerminal(getDelegate().getTerminal(node));\n+        }\n+\n+        @Override\n+        public Optional<Terminal> getOptionalTerminal(int node) {\n+            return Optional.ofNullable(getTerminal(node));\n+        }\n+\n+        @Override\n+        public boolean hasAttachedEquipment(int node) {\n+            return getDelegate().hasAttachedEquipment(node);\n+        }\n+\n+        @Override\n+        public Terminal getTerminal1(String switchId) {\n+            return getIndex().getTerminal(getDelegate().getTerminal1(switchId));\n+        }\n+\n+        @Override\n+        public Terminal getTerminal2(String switchId) {\n+            return getIndex().getTerminal(getDelegate().getTerminal2(switchId));\n+        }\n+\n+        @Override\n+        public Switch getSwitch(String switchId) {\n+            return getIndex().getSwitch(getDelegate().getSwitch(switchId));\n+        }\n+\n+        @Override\n+        public Iterable<Switch> getSwitches() {\n+            return Iterables.transform(getDelegate().getSwitches(),\n+                    getIndex()::getSwitch);\n+        }\n+\n+        @Override\n+        public Stream<Switch> getSwitchStream() {\n+            return getDelegate().getSwitchStream()\n+                    .map(getIndex()::getSwitch);\n+        }\n+\n+        @Override\n+        public int getSwitchCount() {\n+            return getDelegate().getSwitchCount();\n+        }\n+\n+        @Override\n+        public void removeSwitch(String switchId) {\n+            // TODO(mathbagu)\n+            throw MergingView.createNotImplementedException();\n+        }\n+\n+        @Override\n+        public BusbarSectionAdder newBusbarSection() {\n+            return new BusbarSectionAdderAdapter(getDelegate().newBusbarSection(), getIndex());\n+        }\n+\n+        @Override\n+        public Iterable<BusbarSection> getBusbarSections() {\n+            return Iterables.transform(getDelegate().getBusbarSections(),\n+                    getIndex()::getBusbarSection);\n+        }\n+\n+        @Override\n+        public Stream<BusbarSection> getBusbarSectionStream() {\n+            return getDelegate().getBusbarSectionStream()\n+                    .map(getIndex()::getBusbarSection);\n+        }\n+\n+        @Override\n+        public int getBusbarSectionCount() {\n+            return getDelegate().getBusbarSectionCount();\n+        }\n+\n+        @Override\n+        public BusbarSection getBusbarSection(String id) {\n+            return getIndex().getBusbarSection(getDelegate().getBusbarSection(id));\n+        }\n+\n+        @Override\n+        public void traverse(int node, Traverser traverser) {\n+            // TODO(mathbagu)\n+            throw MergingView.createNotImplementedException();\n+        }\n+    }\n+\n+    static class BusBreakerViewAdapter extends BusCache<BusBreakerView> implements BusBreakerViewExt {\n+\n+        BusBreakerViewAdapter(BusBreakerView delegate, MergingViewIndex index) {\n+            super(delegate, index);\n+        }\n+\n+        @Override\n+        public Iterable<Bus> getBuses() {\n+            return Iterables.transform(getDelegate().getBuses(), this::getBus);\n+        }\n+\n+        @Override\n+        public Stream<Bus> getBusStream() {\n+            return getDelegate().getBusStream().map(this::getBus);\n+        }\n+\n+        @Override\n+        public Bus getBus(String id) {\n+            return getBus(getDelegate().getBus(id));\n+        }\n+\n+        @Override\n+        public BusAdder newBus() {\n+            throw createNotSupportedNodeBreakerTopologyException();\n+        }\n+\n+        @Override\n+        public void removeBus(String busId) {\n+            throw createNotSupportedNodeBreakerTopologyException();\n+        }\n+\n+        @Override\n+        public void removeAllBuses() {\n+            throw createNotSupportedNodeBreakerTopologyException();\n+        }\n+\n+        @Override\n+        public Iterable<Switch> getSwitches() {\n+            return Iterables.transform(getDelegate().getSwitches(),\n+                    getIndex()::getSwitch);\n+        }\n+\n+        @Override\n+        public Stream<Switch> getSwitchStream() {\n+            return getDelegate().getSwitchStream()\n+                    .map(getIndex()::getSwitch);\n+        }\n+\n+        @Override\n+        public int getSwitchCount() {\n+            return getDelegate().getSwitchCount();\n+        }\n+\n+        @Override\n+        public void removeSwitch(String switchId) {\n+            throw createNotSupportedNodeBreakerTopologyException();\n+        }\n+\n+        @Override\n+        public void removeAllSwitches() {\n+            throw createNotSupportedNodeBreakerTopologyException();\n+        }\n+\n+        @Override\n+        public Bus getBus1(String switchId) {\n+            return getBus(getDelegate().getBus1(switchId));\n+        }\n+\n+        @Override\n+        public Bus getBus2(String switchId) {\n+            return getBus(getDelegate().getBus2(switchId));\n+        }\n+\n+        @Override\n+        public Switch getSwitch(String switchId) {\n+            return getIndex().getSwitch(getDelegate().getSwitch(switchId));\n+        }\n+\n+        @Override\n+        public SwitchAdder newSwitch() {\n+            throw createNotSupportedNodeBreakerTopologyException();\n+        }\n+\n+        private PowsyblException createNotSupportedNodeBreakerTopologyException() {\n+            return new PowsyblException(\"Not supported in a node/breaker topology\");\n+        }\n+    }\n+\n+    static class BusViewAdapter extends BusCache<BusView> implements BusViewExt {\n+\n+        BusViewAdapter(BusView delegate, MergingViewIndex index) {\n+            super(delegate, index);\n+        }\n+\n+        @Override\n+        public Iterable<Bus> getBuses() {\n+            return Iterables.transform(getDelegate().getBuses(), this::getBus);\n+        }\n+\n+        @Override\n+        public Stream<Bus> getBusStream() {\n+            return getDelegate().getBusStream().map(this::getBus);\n+        }\n+\n+        @Override\n+        public Bus getBus(String id) {\n+            return getBus(getDelegate().getBus(id));\n+        }\n+\n+        @Override\n+        public Bus getMergedBus(String configuredBusId) {\n+            return getBus(getDelegate().getMergedBus(configuredBusId));\n+        }\n+    }\n+\n+    private final NodeBreakerViewAdapter nodeBreakerView;\n+\n+    private final BusBreakerViewAdapter busBreakerView;\n+\n+    private final BusViewAdapter busView;\n+\n+    NodeBreakerVoltageLevelAdapter(final VoltageLevel delegate, final MergingViewIndex index) {\n+        super(delegate, index);\n+        nodeBreakerView = new NodeBreakerViewAdapter(delegate.getNodeBreakerView(), index);\n+        busBreakerView = new BusBreakerViewAdapter(delegate.getBusBreakerView(), index);\n+        busView = new BusViewAdapter(delegate.getBusView(), index);\n+    }\n+\n+    @Override\n+    public NodeBreakerView getNodeBreakerView() {\n+        return nodeBreakerView;\n+    }\n+\n+    @Override\n+    public BusBreakerViewExt getBusBreakerView() {\n+        return busBreakerView;\n+    }\n+\n+    @Override\n+    public BusViewExt getBusView() {\n+        return busView;\n+    }\n+\n+    @Override\n+    public void invalidateCache() {\n+        busBreakerView.invalidateCache();\n+        busView.invalidateCache();\n+        System.out.println(\"INVALIDATE\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a730036ae986ed7b42d9f53bc4ec259fc67b2de"}, "originalPosition": 405}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9718ea9267b54dc33163e2b98d7ceabd1214ad11", "author": {"user": {"login": "mathbagu", "name": "Mathieu BAGUE"}}, "url": "https://github.com/powsybl/powsybl-core/commit/9718ea9267b54dc33163e2b98d7ceabd1214ad11", "committedDate": "2020-06-16T08:51:39Z", "message": "Fix VoltageLevelAdapter implementation\n- Have a specific adapter for each kind of voltage levels\n- The CalculatedBus are cached in the voltage levels instead of in the MergingView\n- The CalculatedBus instance are the same in the three views holder\n\nSigned-off-by: Mathieu BAGUE <mathieu.bague@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e614d311617667df7af5f9a41aaae14a658ce53", "author": {"user": {"login": "mathbagu", "name": "Mathieu BAGUE"}}, "url": "https://github.com/powsybl/powsybl-core/commit/8e614d311617667df7af5f9a41aaae14a658ce53", "committedDate": "2020-06-16T08:51:39Z", "message": "TopologyListener (to be cleaned)\n\nSigned-off-by: Mathieu BAGUE <mathieu.bague@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2ce3180a6fda374282b10429cbd6da0eed9ffdb", "author": {"user": {"login": "mathbagu", "name": "Mathieu BAGUE"}}, "url": "https://github.com/powsybl/powsybl-core/commit/f2ce3180a6fda374282b10429cbd6da0eed9ffdb", "committedDate": "2020-06-16T08:51:39Z", "message": "Add fixme as reminders\n\nSigned-off-by: Mathieu BAGUE <mathieu.bague@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f66f99f55122e766d7ff11df69e1f56439bf3ae", "author": {"user": {"login": "mathbagu", "name": "Mathieu BAGUE"}}, "url": "https://github.com/powsybl/powsybl-core/commit/7f66f99f55122e766d7ff11df69e1f56439bf3ae", "committedDate": "2020-06-16T08:51:39Z", "message": "Move components management in the API\n\nSigned-off-by: Mathieu BAGUE <mathieu.bague@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec4db6abef1093614a6a60788be3d9c84d0305a8", "author": {"user": {"login": "mathbagu", "name": "Mathieu BAGUE"}}, "url": "https://github.com/powsybl/powsybl-core/commit/ec4db6abef1093614a6a60788be3d9c84d0305a8", "committedDate": "2020-06-16T09:06:09Z", "message": "Implement components management in the merging view\n\nSigned-off-by: Mathieu BAGUE <mathieu.bague@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "deb2449af89dd1bc7041ce93ec72262068ac9004", "author": {"user": {"login": "mathbagu", "name": "Mathieu BAGUE"}}, "url": "https://github.com/powsybl/powsybl-core/commit/deb2449af89dd1bc7041ce93ec72262068ac9004", "committedDate": "2020-06-16T09:06:09Z", "message": "MergedLine implements TieLine instead of Line\nHalfLineAdapter adapt a DanglingLine to a HalfLine\n\nSigned-off-by: Mathieu BAGUE <mathieu.bague@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e95b5dbdff5099eae23a3191b24790ab1c403b8e", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/e95b5dbdff5099eae23a3191b24790ab1c403b8e", "committedDate": "2020-06-16T09:46:00Z", "message": "Minor correction (rebasing + not using getName())\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a7f3ef326cd296ab0b2542882667aa2e936511d1", "author": {"user": {"login": "mathbagu", "name": "Mathieu BAGUE"}}, "url": "https://github.com/powsybl/powsybl-core/commit/a7f3ef326cd296ab0b2542882667aa2e936511d1", "committedDate": "2020-06-11T15:20:49Z", "message": "MergedLine implements TieLine instead of Line\nHalfLineAdapter adapt a DanglingLine to a HalfLine\n\nSigned-off-by: Mathieu BAGUE <mathieu.bague@rte-france.com>"}, "afterCommit": {"oid": "e95b5dbdff5099eae23a3191b24790ab1c403b8e", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/e95b5dbdff5099eae23a3191b24790ab1c403b8e", "committedDate": "2020-06-16T09:46:00Z", "message": "Minor correction (rebasing + not using getName())\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMzMwOTAx", "url": "https://github.com/powsybl/powsybl-core/pull/1326#pullrequestreview-431330901", "createdAt": "2020-06-16T09:37:09Z", "commit": {"oid": "a7f3ef326cd296ab0b2542882667aa2e936511d1"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTozNzoxMFrOGkTY0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTozNzoyN1rOGkTZhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxOTU3MA==", "bodyText": "Just for me, could you explain why you commented the throwing of exception here? Was it only to test?", "url": "https://github.com/powsybl/powsybl-core/pull/1326#discussion_r440719570", "createdAt": "2020-06-16T09:37:10Z", "author": {"login": "MioRtia"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergedLine.java", "diffHunk": "@@ -493,12 +497,14 @@ public void remove() {\n \n     @Override\n     public <E extends Extension<Line>> E getExtension(final Class<? super E> type) {\n-        throw MergingView.createNotImplementedException();\n+        return null;\n+        // throw MergingView.createNotImplementedException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7f3ef326cd296ab0b2542882667aa2e936511d1"}, "originalPosition": 287}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxOTYzNA==", "bodyText": "Same question", "url": "https://github.com/powsybl/powsybl-core/pull/1326#discussion_r440719634", "createdAt": "2020-06-16T09:37:16Z", "author": {"login": "MioRtia"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergedLine.java", "diffHunk": "@@ -493,12 +497,14 @@ public void remove() {\n \n     @Override\n     public <E extends Extension<Line>> E getExtension(final Class<? super E> type) {\n-        throw MergingView.createNotImplementedException();\n+        return null;\n+        // throw MergingView.createNotImplementedException();\n     }\n \n     @Override\n     public <E extends Extension<Line>> E getExtensionByName(final String name) {\n-        throw MergingView.createNotImplementedException();\n+        return null;\n+        // throw MergingView.createNotImplementedException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7f3ef326cd296ab0b2542882667aa2e936511d1"}, "originalPosition": 294}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxOTc0OA==", "bodyText": "Same question", "url": "https://github.com/powsybl/powsybl-core/pull/1326#discussion_r440719748", "createdAt": "2020-06-16T09:37:27Z", "author": {"login": "MioRtia"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergedLine.java", "diffHunk": "@@ -508,7 +514,8 @@ public void remove() {\n \n     @Override\n     public <E extends Extension<Line>> Collection<E> getExtensions() {\n-        throw MergingView.createNotImplementedException();\n+        return Collections.emptyList();\n+        // throw MergingView.createNotImplementedException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7f3ef326cd296ab0b2542882667aa2e936511d1"}, "originalPosition": 304}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a0b2db6f6dea0d9f8a5a4f594412a4643ae788d", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/6a0b2db6f6dea0d9f8a5a4f594412a4643ae788d", "committedDate": "2020-06-16T11:11:14Z", "message": "fix checkstyle\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "024b5b2aa2a365d05c38d316b2d8bcd99d8f97ee", "author": {"user": {"login": "mathbagu", "name": "Mathieu BAGUE"}}, "url": "https://github.com/powsybl/powsybl-core/commit/024b5b2aa2a365d05c38d316b2d8bcd99d8f97ee", "committedDate": "2020-06-16T12:55:17Z", "message": "Cleanup\n\nSigned-off-by: Mathieu BAGUE <mathieu.bague@rte-france.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4289, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}