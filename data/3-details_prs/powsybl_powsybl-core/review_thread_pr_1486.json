{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyOTAxNDIy", "number": 1486, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjo0MToxMVrOEncG1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNzo1MjozM1rOEqMtYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzkwNDIyOnYy", "diffSide": "RIGHT", "path": "dsl/src/main/java/com/powsybl/dsl/ast/ExpressionPrinter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjo0MToxMVrOHYB9aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMzo1NTozM1rOHYEsNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk1OTk3Nw==", "bodyText": "I think for more flexibility we should use a more generic object here, like a Writer.\nActually, after more thoughts, I think to keep the best of both worlds we could use a PrintWriter here, which has the same methods as PrintStream for writing primitives/objects.\nThen we could propose 2 constructors, one based on a Writer, and one based on an OutputStream as today (both wrapping it into a PrintWriter).\nThen to create a String we will input a StringWriter indeed.\nWhat do you think about it ?", "url": "https://github.com/powsybl/powsybl-core/pull/1486#discussion_r494959977", "createdAt": "2020-09-25T12:41:11Z", "author": {"login": "sylvlecl"}, "path": "dsl/src/main/java/com/powsybl/dsl/ast/ExpressionPrinter.java", "diffHunk": "@@ -6,133 +6,136 @@\n  */\n package com.powsybl.dsl.ast;\n \n-import org.apache.commons.io.output.WriterOutputStream;\n-\n+import java.io.IOException;\n import java.io.PrintStream;\n import java.io.StringWriter;\n-import java.nio.charset.StandardCharsets;\n+import java.io.UncheckedIOException;\n import java.util.Objects;\n \n /**\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n  */\n public class ExpressionPrinter extends DefaultExpressionVisitor<Void, Void> {\n \n-    protected final PrintStream out;\n+    protected final StringWriter out;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e2c9f4d3274d571582d06343242069a5461fc6"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTAwNDcyNA==", "bodyText": "(Otherwise, strictly speaking, removing the constructor based on a PrintStream is a breaking change. No big issue, but we can avoid it :) )", "url": "https://github.com/powsybl/powsybl-core/pull/1486#discussion_r495004724", "createdAt": "2020-09-25T13:55:33Z", "author": {"login": "sylvlecl"}, "path": "dsl/src/main/java/com/powsybl/dsl/ast/ExpressionPrinter.java", "diffHunk": "@@ -6,133 +6,136 @@\n  */\n package com.powsybl.dsl.ast;\n \n-import org.apache.commons.io.output.WriterOutputStream;\n-\n+import java.io.IOException;\n import java.io.PrintStream;\n import java.io.StringWriter;\n-import java.nio.charset.StandardCharsets;\n+import java.io.UncheckedIOException;\n import java.util.Objects;\n \n /**\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n  */\n public class ExpressionPrinter extends DefaultExpressionVisitor<Void, Void> {\n \n-    protected final PrintStream out;\n+    protected final StringWriter out;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk1OTk3Nw=="}, "originalCommit": {"oid": "74e2c9f4d3274d571582d06343242069a5461fc6"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjgzMTAwOnYy", "diffSide": "RIGHT", "path": "dsl/src/main/java/com/powsybl/dsl/ast/ExpressionPrinter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNzo1MDozNlrOHcRJNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTo1NjoyOVrOHdCv8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQwMzA2Mg==", "bodyText": "Looking at the javadoc it's not clear to me why we could not have a constructor that takes an OutputStream instead of a PrintStream. That will make ExpressionPrinter and ActionExpressionPrinter more convenient to use as we just wrap the objects in a PrintWriter that seems to work well with a simple OutputStream.", "url": "https://github.com/powsybl/powsybl-core/pull/1486#discussion_r499403062", "createdAt": "2020-10-05T07:50:36Z", "author": {"login": "mathbagu"}, "path": "dsl/src/main/java/com/powsybl/dsl/ast/ExpressionPrinter.java", "diffHunk": "@@ -37,102 +33,110 @@ public static void print(ExpressionNode node, PrintStream out) {\n         node.accept(new ExpressionPrinter(out), null);\n     }\n \n+    private static void write(ExpressionNode node, StringWriter out) {\n+        node.accept(new ExpressionPrinter(out), null);\n+    }\n+\n     public ExpressionPrinter(PrintStream out) {\n-        this.out = Objects.requireNonNull(out);\n+        this.out = new PrintWriter(Objects.requireNonNull(out));\n+    }\n+\n+    public ExpressionPrinter(Writer writer) {\n+        out = new PrintWriter(Objects.requireNonNull(writer));\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a5e15f5d86237cf3e816fe9502a99369becb103"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIxNTc5Mw==", "bodyText": "Agreed. The only thing which is not completely clear now is that this constructor will use \"default charset\" to write to the output stream: I think we should mention it in javadoc of the constructor.", "url": "https://github.com/powsybl/powsybl-core/pull/1486#discussion_r500215793", "createdAt": "2020-10-06T11:56:29Z", "author": {"login": "sylvlecl"}, "path": "dsl/src/main/java/com/powsybl/dsl/ast/ExpressionPrinter.java", "diffHunk": "@@ -37,102 +33,110 @@ public static void print(ExpressionNode node, PrintStream out) {\n         node.accept(new ExpressionPrinter(out), null);\n     }\n \n+    private static void write(ExpressionNode node, StringWriter out) {\n+        node.accept(new ExpressionPrinter(out), null);\n+    }\n+\n     public ExpressionPrinter(PrintStream out) {\n-        this.out = Objects.requireNonNull(out);\n+        this.out = new PrintWriter(Objects.requireNonNull(out));\n+    }\n+\n+    public ExpressionPrinter(Writer writer) {\n+        out = new PrintWriter(Objects.requireNonNull(writer));\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQwMzA2Mg=="}, "originalCommit": {"oid": "8a5e15f5d86237cf3e816fe9502a99369becb103"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjgzODc1OnYy", "diffSide": "RIGHT", "path": "action/action-dsl/src/main/java/com/powsybl/action/dsl/ast/ActionExpressionPrinter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNzo1MjozM1rOHcRNoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTo1Njo0NVrOHdCwcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQwNDE5Mg==", "bodyText": "Same question here: do we really need a StringWriter? It seems a Writer is sufficient here. You should change constructors of both classes to take the highest interface you can from the inheritance tree.", "url": "https://github.com/powsybl/powsybl-core/pull/1486#discussion_r499404192", "createdAt": "2020-10-05T07:52:33Z", "author": {"login": "mathbagu"}, "path": "action/action-dsl/src/main/java/com/powsybl/action/dsl/ast/ActionExpressionPrinter.java", "diffHunk": "@@ -21,20 +21,28 @@\n public class ActionExpressionPrinter extends ExpressionPrinter implements ActionExpressionVisitor<Void, Void> {\n \n     public static String toString(ExpressionNode node) {\n-        StringWriter writer = new StringWriter();\n-        try (PrintStream os = new PrintStream(new WriterOutputStream(writer, StandardCharsets.UTF_8))) {\n-            print(node, os);\n+        try (StringWriter writer = new StringWriter()) {\n+            write(node, writer);\n+            return writer.toString();\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n         }\n+    }\n \n-        return writer.toString();\n+    private static void write(ExpressionNode node, StringWriter out) {\n+        node.accept(new ActionExpressionPrinter(out), null);\n     }\n \n     public static void print(ExpressionNode node) {\n         print(node, System.out);\n     }\n \n     public static void print(ExpressionNode node, PrintStream out) {\n-        node.accept(new ActionExpressionPrinter(out), null);\n+        out.print(toString(node));\n+    }\n+\n+    public ActionExpressionPrinter(StringWriter out) {\n+        super(out);\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a5e15f5d86237cf3e816fe9502a99369becb103"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIxNTkyMw==", "bodyText": "Agreed", "url": "https://github.com/powsybl/powsybl-core/pull/1486#discussion_r500215923", "createdAt": "2020-10-06T11:56:45Z", "author": {"login": "sylvlecl"}, "path": "action/action-dsl/src/main/java/com/powsybl/action/dsl/ast/ActionExpressionPrinter.java", "diffHunk": "@@ -21,20 +21,28 @@\n public class ActionExpressionPrinter extends ExpressionPrinter implements ActionExpressionVisitor<Void, Void> {\n \n     public static String toString(ExpressionNode node) {\n-        StringWriter writer = new StringWriter();\n-        try (PrintStream os = new PrintStream(new WriterOutputStream(writer, StandardCharsets.UTF_8))) {\n-            print(node, os);\n+        try (StringWriter writer = new StringWriter()) {\n+            write(node, writer);\n+            return writer.toString();\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n         }\n+    }\n \n-        return writer.toString();\n+    private static void write(ExpressionNode node, StringWriter out) {\n+        node.accept(new ActionExpressionPrinter(out), null);\n     }\n \n     public static void print(ExpressionNode node) {\n         print(node, System.out);\n     }\n \n     public static void print(ExpressionNode node, PrintStream out) {\n-        node.accept(new ActionExpressionPrinter(out), null);\n+        out.print(toString(node));\n+    }\n+\n+    public ActionExpressionPrinter(StringWriter out) {\n+        super(out);\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQwNDE5Mg=="}, "originalCommit": {"oid": "8a5e15f5d86237cf3e816fe9502a99369becb103"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 67, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}