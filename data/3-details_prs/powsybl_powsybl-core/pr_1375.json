{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNjkwNTE5", "number": 1375, "title": "Compute star bus voltages of threeWindingsTransformers and boundary bus voltages of dangling lines", "bodyText": "Please check if the PR fulfills these requirements (please use '[x]' to check the checkboxes, or submit the PR and then click the checkboxes)\n\n The commit message follows our guidelines\n Tests for the changes have been added (for bug fixes / features)\n Docs have been added / updated (for bug fixes / features)\n\nDoes this PR already have an issue describing the problem ? If so, link to this issue using '#XXX' and skip the rest\nWhat kind of change does this PR introduce? (Bug fix, feature, docs update, ...)\nFeature\nWhat is the current behavior? (You can also link to an open issue here)\nVoltages were not calculated\nWhat is the new behavior (if this is a feature change)?\nStar bus voltage of threeWindingsTransformers has been calculated depending on connected legs\nBoundary bus voltage of danglingLines has been calculated depending on  injection\nDoes this PR introduce a breaking change or deprecate an API? If yes, check the following:\n\n The Breaking Change or Deprecated label has been added\n The migration guide has been updated in the github wiki (What changes might users need to make in their application due to this PR?)\n\nOther information:\n(if any of the questions/checkboxes don't apply, please delete them entirely)", "createdAt": "2020-06-26T16:59:44Z", "url": "https://github.com/powsybl/powsybl-core/pull/1375", "merged": true, "mergeCommit": {"oid": "fe6a2c900d8084fdeac1aff12fb0b94bdb9dc0a9"}, "closed": true, "closedAt": "2020-07-15T08:03:56Z", "author": {"login": "marqueslanauja"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuxBCmgH2gAyNDQwNjkwNTE5OmNhODA3NGZhMTg4N2NlNmE0YjMzZWVhNWYzMmM4M2EyODlmMThjNTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1Fw9MAFqTQ0ODcwODQ1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ca8074fa1887ce6a4b33eea5f32c83a289f18c55", "author": {"user": {"login": "marqueslanauja", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/ca8074fa1887ce6a4b33eea5f32c83a289f18c55", "committedDate": "2020-06-25T16:13:05Z", "message": "Calulate star bus voltage and danglingLine dummy bus voltage.\n\nSigned-off-by: Jos\u00e9 Antonio Marqu\u00e9s <marquesja@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a45517dc37b1ead3b26275f821967fe0b38809f", "author": {"user": {"login": "marqueslanauja", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/1a45517dc37b1ead3b26275f821967fe0b38809f", "committedDate": "2020-06-26T13:40:18Z", "message": "Pretty names\n\nSigned-off-by: Jos\u00e9 Antonio Marqu\u00e9s <marquesja@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edb65cb92fed4dd042f5fad8789c55a7ee7ab428", "author": {"user": {"login": "marqueslanauja", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/edb65cb92fed4dd042f5fad8789c55a7ee7ab428", "committedDate": "2020-06-26T16:39:26Z", "message": "Add unitary tests\n\nSigned-off-by: Jos\u00e9 Antonio Marqu\u00e9s <marquesja@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7239fc326d5f72678fbee5fe0ff33a69768e7ef1", "author": {"user": {"login": "marqueslanauja", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/7239fc326d5f72678fbee5fe0ff33a69768e7ef1", "committedDate": "2020-06-26T16:40:22Z", "message": "Merge branch 'master' into iidm_voltages_t3wts_danglingLines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d18bfa7096bf9422cc80af6edc301f1ee36cd885", "author": {"user": {"login": "marqueslanauja", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/d18bfa7096bf9422cc80af6edc301f1ee36cd885", "committedDate": "2020-07-02T07:46:38Z", "message": "Merge branch 'master' into iidm_voltages_t3wts_danglingLines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3e4f279c9755f986c0678aa851d3f205b9359a0", "author": {"user": {"login": "marqueslanauja", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/e3e4f279c9755f986c0678aa851d3f205b9359a0", "committedDate": "2020-07-02T08:53:56Z", "message": "add unitary test\n\nSigned-off-by: Jos\u00e9 Antonio Marqu\u00e9s <marquesja@aia.es>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNTEyNTIy", "url": "https://github.com/powsybl/powsybl-core/pull/1375#pullrequestreview-441512522", "createdAt": "2020-07-02T09:34:47Z", "commit": {"oid": "e3e4f279c9755f986c0678aa851d3f205b9359a0"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwOTozNDo0N1rOGsFMgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwOTozNjozMlrOGsFQdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg3NTY0OQ==", "bodyText": "Do we miss the parameter twtSplitShuntAdmittance here ? It is a parameter for the loadflow but it could be used here.", "url": "https://github.com/powsybl/powsybl-core/pull/1375#discussion_r448875649", "createdAt": "2020-07-02T09:34:47Z", "author": {"login": "annetill"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/DanglingLineData.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.util;\n+\n+import org.apache.commons.math3.complex.Complex;\n+import com.powsybl.iidm.network.DanglingLine;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class DanglingLineData {\n+\n+    private final String id;\n+\n+    private final double r;\n+    private final double x;\n+    private final double g1;\n+    private final double g2;\n+    private final double b1;\n+    private final double b2;\n+\n+    private final double u1;\n+    private final double theta1;\n+    private final double p0;\n+    private final double q0;\n+\n+    double boundaryBusU;\n+    double boundaryBusTheta;\n+\n+    public DanglingLineData(DanglingLine danglingLine) {\n+\n+        id = danglingLine.getId();\n+        r = danglingLine.getR();\n+        x = danglingLine.getX();\n+        g1 = danglingLine.getG();\n+        b1 = danglingLine.getB();\n+        g2 = 0.0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3e4f279c9755f986c0678aa851d3f205b9359a0"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg3NjY2Mg==", "bodyText": "It is here an approximation ? As r and x are not equal to zero ?", "url": "https://github.com/powsybl/powsybl-core/pull/1375#discussion_r448876662", "createdAt": "2020-07-02T09:36:32Z", "author": {"login": "annetill"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/DanglingLineData.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.util;\n+\n+import org.apache.commons.math3.complex.Complex;\n+import com.powsybl.iidm.network.DanglingLine;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class DanglingLineData {\n+\n+    private final String id;\n+\n+    private final double r;\n+    private final double x;\n+    private final double g1;\n+    private final double g2;\n+    private final double b1;\n+    private final double b2;\n+\n+    private final double u1;\n+    private final double theta1;\n+    private final double p0;\n+    private final double q0;\n+\n+    double boundaryBusU;\n+    double boundaryBusTheta;\n+\n+    public DanglingLineData(DanglingLine danglingLine) {\n+\n+        id = danglingLine.getId();\n+        r = danglingLine.getR();\n+        x = danglingLine.getX();\n+        g1 = danglingLine.getG();\n+        b1 = danglingLine.getB();\n+        g2 = 0.0;\n+        b2 = 0.0;\n+        p0 = danglingLine.getP0();\n+        q0 = danglingLine.getQ0();\n+\n+        u1 = getV(danglingLine);\n+        theta1 = getTheta(danglingLine);\n+\n+        boundaryBusU = Double.NaN;\n+        boundaryBusTheta = Double.NaN;\n+\n+        Complex v1 = new Complex(u1 * Math.cos(theta1), u1 * Math.sin(theta1));\n+\n+        Complex vBoundaryBus = new Complex(Double.NaN, Double.NaN);\n+        if (p0 == 0.0 && q0 == 0.0) {\n+            LinkData.BranchAdmittanceMatrix adm = LinkData.calculateBranchAdmittance(r, x, 1.0, 0.0, 1.0, 0.0, new Complex(g1, b1), new Complex(g2, b2));\n+            vBoundaryBus = adm.y21.multiply(v1).negate().divide(adm.y22);\n+        } else {\n+\n+            // Two buses Loadflow\n+            double pBoundaryBus = -p0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3e4f279c9755f986c0678aa851d3f205b9359a0"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNzQ0MTky", "url": "https://github.com/powsybl/powsybl-core/pull/1375#pullrequestreview-441744192", "createdAt": "2020-07-02T14:39:59Z", "commit": {"oid": "e3e4f279c9755f986c0678aa851d3f205b9359a0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03471f1d853a4b1541d9c64d7047e008b4677396", "author": {"user": {"login": "marqueslanauja", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/03471f1d853a4b1541d9c64d7047e008b4677396", "committedDate": "2020-07-08T07:24:53Z", "message": "split shunt admittance\n\nSigned-off-by: Jos\u00e9 Antonio Marqu\u00e9s <marquesja@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e04021f10861c1de899e4e4fc74fb11968ab0d9", "author": {"user": {"login": "marqueslanauja", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/7e04021f10861c1de899e4e4fc74fb11968ab0d9", "committedDate": "2020-07-08T08:32:17Z", "message": "Merge branch 'master' into iidm_voltages_t3wts_danglingLines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "237418f2e70c73900c88fd1a302db7527ceb5927", "author": {"user": {"login": "annetill", "name": "Anne Tilloy"}}, "url": "https://github.com/powsybl/powsybl-core/commit/237418f2e70c73900c88fd1a302db7527ceb5927", "committedDate": "2020-07-09T15:10:45Z", "message": "Merge branch 'master' into iidm_voltages_t3wts_danglingLines"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1NzQ3NDM4", "url": "https://github.com/powsybl/powsybl-core/pull/1375#pullrequestreview-445747438", "createdAt": "2020-07-09T15:48:52Z", "commit": {"oid": "237418f2e70c73900c88fd1a302db7527ceb5927"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTo0ODo1MlrOGvXRmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTo1NzoyNVrOGvXnXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMxNzU5NQ==", "bodyText": "We could use\nangle=getAngle(danglingLine)\nComplex v1 = ComplexUtils.polar2Complex(v, Math.toRadians(angle));\n\nSo the conversion degrees -> radians is in a single point, and the creation of complex from polar coordinates is explicit.", "url": "https://github.com/powsybl/powsybl-core/pull/1375#discussion_r452317595", "createdAt": "2020-07-09T15:48:52Z", "author": {"login": "zamarrenolm"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/DanglingLineData.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.util;\n+\n+import org.apache.commons.math3.complex.Complex;\n+import com.powsybl.iidm.network.DanglingLine;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class DanglingLineData {\n+\n+    private final String id;\n+\n+    private final double r;\n+    private final double x;\n+    private final double g1;\n+    private final double g2;\n+    private final double b1;\n+    private final double b2;\n+\n+    private final double u1;\n+    private final double theta1;\n+    private final double p0;\n+    private final double q0;\n+\n+    double boundaryBusU;\n+    double boundaryBusTheta;\n+\n+    public DanglingLineData(DanglingLine danglingLine) {\n+\n+        id = danglingLine.getId();\n+        r = danglingLine.getR();\n+        x = danglingLine.getX();\n+        g1 = danglingLine.getG() / 2.0;\n+        b1 = danglingLine.getB() / 2.0;\n+        g2 = danglingLine.getG() / 2.0;\n+        b2 = danglingLine.getB() / 2.0;\n+        p0 = danglingLine.getP0();\n+        q0 = danglingLine.getQ0();\n+\n+        u1 = getV(danglingLine);\n+        theta1 = getTheta(danglingLine);\n+\n+        boundaryBusU = Double.NaN;\n+        boundaryBusTheta = Double.NaN;\n+\n+        Complex v1 = new Complex(u1 * Math.cos(theta1), u1 * Math.sin(theta1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "237418f2e70c73900c88fd1a302db7527ceb5927"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyMDc4NQ==", "bodyText": "Maybe we could make s0 = new Complex(pBoundaryBus, qBoundaryBus) and then let sigma be also a Complex number calculated from zt and s0, so we end up with more compact code (less potential errors)", "url": "https://github.com/powsybl/powsybl-core/pull/1375#discussion_r452320785", "createdAt": "2020-07-09T15:53:49Z", "author": {"login": "zamarrenolm"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/DanglingLineData.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.util;\n+\n+import org.apache.commons.math3.complex.Complex;\n+import com.powsybl.iidm.network.DanglingLine;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class DanglingLineData {\n+\n+    private final String id;\n+\n+    private final double r;\n+    private final double x;\n+    private final double g1;\n+    private final double g2;\n+    private final double b1;\n+    private final double b2;\n+\n+    private final double u1;\n+    private final double theta1;\n+    private final double p0;\n+    private final double q0;\n+\n+    double boundaryBusU;\n+    double boundaryBusTheta;\n+\n+    public DanglingLineData(DanglingLine danglingLine) {\n+\n+        id = danglingLine.getId();\n+        r = danglingLine.getR();\n+        x = danglingLine.getX();\n+        g1 = danglingLine.getG() / 2.0;\n+        b1 = danglingLine.getB() / 2.0;\n+        g2 = danglingLine.getG() / 2.0;\n+        b2 = danglingLine.getB() / 2.0;\n+        p0 = danglingLine.getP0();\n+        q0 = danglingLine.getQ0();\n+\n+        u1 = getV(danglingLine);\n+        theta1 = getTheta(danglingLine);\n+\n+        boundaryBusU = Double.NaN;\n+        boundaryBusTheta = Double.NaN;\n+\n+        Complex v1 = new Complex(u1 * Math.cos(theta1), u1 * Math.sin(theta1));\n+\n+        Complex vBoundaryBus = new Complex(Double.NaN, Double.NaN);\n+        if (p0 == 0.0 && q0 == 0.0) {\n+            LinkData.BranchAdmittanceMatrix adm = LinkData.calculateBranchAdmittance(r, x, 1.0, 0.0, 1.0, 0.0, new Complex(g1, b1), new Complex(g2, b2));\n+            vBoundaryBus = adm.y21.multiply(v1).negate().divide(adm.y22);\n+        } else {\n+\n+            // Two buses Loadflow\n+            double pBoundaryBus = -p0;\n+            double qBoundaryBus = -q0;\n+            Complex ytr = new Complex(r, x).reciprocal();\n+            Complex ysh2 = new Complex(g2, b2);\n+            Complex zt = ytr.add(ysh2).reciprocal();\n+            Complex v0 = ytr.multiply(v1).divide(ytr.add(ysh2));\n+            double v02 = v0.abs() * v0.abs();\n+\n+            double sigmar = (zt.getImaginary() * qBoundaryBus + zt.getReal() * pBoundaryBus) / v02;\n+            double sigmai = (zt.getImaginary() * pBoundaryBus - zt.getReal() * qBoundaryBus) / v02;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "237418f2e70c73900c88fd1a302db7527ceb5927"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyMjEwMw==", "bodyText": "I think we could get always the voltage and angle from the BusView Bus. Why trying to obtain it from BusBreakerView first ?", "url": "https://github.com/powsybl/powsybl-core/pull/1375#discussion_r452322103", "createdAt": "2020-07-09T15:55:46Z", "author": {"login": "zamarrenolm"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/DanglingLineData.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.util;\n+\n+import org.apache.commons.math3.complex.Complex;\n+import com.powsybl.iidm.network.DanglingLine;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class DanglingLineData {\n+\n+    private final String id;\n+\n+    private final double r;\n+    private final double x;\n+    private final double g1;\n+    private final double g2;\n+    private final double b1;\n+    private final double b2;\n+\n+    private final double u1;\n+    private final double theta1;\n+    private final double p0;\n+    private final double q0;\n+\n+    double boundaryBusU;\n+    double boundaryBusTheta;\n+\n+    public DanglingLineData(DanglingLine danglingLine) {\n+\n+        id = danglingLine.getId();\n+        r = danglingLine.getR();\n+        x = danglingLine.getX();\n+        g1 = danglingLine.getG() / 2.0;\n+        b1 = danglingLine.getB() / 2.0;\n+        g2 = danglingLine.getG() / 2.0;\n+        b2 = danglingLine.getB() / 2.0;\n+        p0 = danglingLine.getP0();\n+        q0 = danglingLine.getQ0();\n+\n+        u1 = getV(danglingLine);\n+        theta1 = getTheta(danglingLine);\n+\n+        boundaryBusU = Double.NaN;\n+        boundaryBusTheta = Double.NaN;\n+\n+        Complex v1 = new Complex(u1 * Math.cos(theta1), u1 * Math.sin(theta1));\n+\n+        Complex vBoundaryBus = new Complex(Double.NaN, Double.NaN);\n+        if (p0 == 0.0 && q0 == 0.0) {\n+            LinkData.BranchAdmittanceMatrix adm = LinkData.calculateBranchAdmittance(r, x, 1.0, 0.0, 1.0, 0.0, new Complex(g1, b1), new Complex(g2, b2));\n+            vBoundaryBus = adm.y21.multiply(v1).negate().divide(adm.y22);\n+        } else {\n+\n+            // Two buses Loadflow\n+            double pBoundaryBus = -p0;\n+            double qBoundaryBus = -q0;\n+            Complex ytr = new Complex(r, x).reciprocal();\n+            Complex ysh2 = new Complex(g2, b2);\n+            Complex zt = ytr.add(ysh2).reciprocal();\n+            Complex v0 = ytr.multiply(v1).divide(ytr.add(ysh2));\n+            double v02 = v0.abs() * v0.abs();\n+\n+            double sigmar = (zt.getImaginary() * qBoundaryBus + zt.getReal() * pBoundaryBus) / v02;\n+            double sigmai = (zt.getImaginary() * pBoundaryBus - zt.getReal() * qBoundaryBus) / v02;\n+            double d = 0.25 + sigmar - sigmai * sigmai;\n+            // d < 0 Collapsed network\n+            if (d >= 0) {\n+                vBoundaryBus = new Complex(0.5 + Math.sqrt(d), sigmai).multiply(v0);\n+            }\n+        }\n+\n+        boundaryBusU = vBoundaryBus.abs();\n+        boundaryBusTheta = vBoundaryBus.getArgument();\n+    }\n+\n+    private static double getV(DanglingLine danglingLine) {\n+        if (danglingLine.getTerminal().getBusBreakerView() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "237418f2e70c73900c88fd1a302db7527ceb5927"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyMzE2Ng==", "bodyText": "I suggest we use v1 = ComplexUtils.polar2Complex(u1, theta1)", "url": "https://github.com/powsybl/powsybl-core/pull/1375#discussion_r452323166", "createdAt": "2020-07-09T15:57:25Z", "author": {"login": "zamarrenolm"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/TwtData.java", "diffHunk": "@@ -310,8 +345,20 @@ private void calculateThreeConnectedLegsFlow(double u1, double theta1, double u2\n         return LinkData.flowBothEnds(admittance.y11, admittance.y12, admittance.y21, admittance.y22, v1, v2);\n     }\n \n-    private Complex calculateOneConnectedLegFlow(double u, double theta,\n-        LinkData.BranchAdmittanceMatrix admittanceMatrixLeg, LinkData.BranchAdmittanceMatrix admittanceMatrixFirstOpenLeg,\n+    private Complex calculateTwoConnectedLegsStarBusVoltage(double u1, double theta1, double u2, double theta2,\n+        LinkData.BranchAdmittanceMatrix admittanceMatrixLeg1, LinkData.BranchAdmittanceMatrix admittanceMatrixLeg2,\n+        LinkData.BranchAdmittanceMatrix admittanceMatrixOpenLeg) {\n+\n+        Complex v1 = new Complex(u1 * Math.cos(theta1), u1 * Math.sin(theta1));\n+        Complex v2 = new Complex(u2 * Math.cos(theta2), u2 * Math.sin(theta2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "237418f2e70c73900c88fd1a302db7527ceb5927"}, "originalPosition": 109}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5ad8ddfb572b2c07eaaeda50e154efd993df215", "author": {"user": {"login": "marqueslanauja", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/d5ad8ddfb572b2c07eaaeda50e154efd993df215", "committedDate": "2020-07-09T22:11:00Z", "message": "Apply reviewer comments\n\nSigned-off-by: Jos\u00e9 Antonio Marqu\u00e9s <marquesja@aia.es>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MTQ1OTY0", "url": "https://github.com/powsybl/powsybl-core/pull/1375#pullrequestreview-446145964", "createdAt": "2020-07-10T06:17:26Z", "commit": {"oid": "237418f2e70c73900c88fd1a302db7527ceb5927"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "687b93a86a2af408fefda5acc623856c57147251", "author": {"user": {"login": "marqueslanauja", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/687b93a86a2af408fefda5acc623856c57147251", "committedDate": "2020-07-13T08:36:35Z", "message": "Apply reviewer comments\n\nSigned-off-by: Jos\u00e9 Antonio Marqu\u00e9s <marquesja@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aee18f4895ff59d689500eb80b5ceeac33c30593", "author": {"user": {"login": "marqueslanauja", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/aee18f4895ff59d689500eb80b5ceeac33c30593", "committedDate": "2020-07-13T08:36:52Z", "message": "Merge branch 'master' into iidm_voltages_t3wts_danglingLines"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NzA4NDUw", "url": "https://github.com/powsybl/powsybl-core/pull/1375#pullrequestreview-448708450", "createdAt": "2020-07-15T07:47:04Z", "commit": {"oid": "aee18f4895ff59d689500eb80b5ceeac33c30593"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4100, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}