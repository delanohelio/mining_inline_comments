{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0OTU1Mzc2", "number": 1382, "title": "Psse converter b3", "bodyText": "Please check if the PR fulfills these requirements (please use '[x]' to check the checkboxes, or submit the PR and then click the checkboxes)\n\n The commit message follows our guidelines\n Tests for the changes have been added (for bug fixes / features)\n Docs have been added / updated (for bug fixes / features)\n\nDoes this PR already have an issue describing the problem ? If so, link to this issue using '#XXX' and skip the rest\nWhat kind of change does this PR introduce? (Bug fix, feature, docs update, ...)\nWhat is the current behavior? (You can also link to an open issue here)\nWhat is the new behavior (if this is a feature change)?\nDoes this PR introduce a breaking change or deprecate an API? If yes, check the following:\n\n The Breaking Change or Deprecated label has been added\n The migration guide has been updated in the github wiki (What changes might users need to make in their application due to this PR?)\n\nOther information:\n(if any of the questions/checkboxes don't apply, please delete them entirely)", "createdAt": "2020-07-06T19:16:33Z", "url": "https://github.com/powsybl/powsybl-core/pull/1382", "merged": true, "mergeCommit": {"oid": "314933eb4d2f035413664532b43c1340f579caea"}, "closed": true, "closedAt": "2020-07-07T09:01:48Z", "author": {"login": "JB-H"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcxUHiFAH2gAyNDQ0OTU1Mzc2OjU0ZDZiMWRhYTEyNWEyMDNjMTNmYTZkOTZlOTBiYjg1MDBhYmU2YWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcyh_6FAFqTQ0MzY5NjgwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "54d6b1daa125a203c13fa6d96e90bb8500abe6af", "author": {"user": {"login": "JB-H", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/54d6b1daa125a203c13fa6d96e90bb8500abe6af", "committedDate": "2020-07-03T14:14:42Z", "message": "Improvements of PSS/E importer:\n- supporting both raw and RAW file extensions\n- supporting STATUS = 0 of equipments\n- modification of header detection\n- reading Qmin and Qmax of generating units\n- modification of targetQ setter\n- better check of the number of windings of transformers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9827f212004228318b1b5e67bf9d72c29df0703e", "author": {"user": {"login": "JB-H", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/9827f212004228318b1b5e67bf9d72c29df0703e", "committedDate": "2020-07-03T14:14:48Z", "message": "Improvements of PSS/E importer:\n- supporting both raw and RAW file extensions\n- supporting STATUS = 0 of equipments\n- modification of header detection\n- reading Qmin and Qmax of generating units\n- modification of targetQ setter\n- better check of the number of windings of transformers\n\nSigned-off-by: Jean-Baptiste Heyberger <jbheyberger@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4b5dfc4fa26c86a4e1aef4ee794911066aa2818", "author": {"user": {"login": "JB-H", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/f4b5dfc4fa26c86a4e1aef4ee794911066aa2818", "committedDate": "2020-07-03T14:26:39Z", "message": "Improvement of switched shunts\nImprovement of 2 windings transformers, with phase shift\nFirst implementation of 3 windings transformers\nSeveral checks to import different IEEE cases\n\nSigned-off-by: Jean-Baptiste Heyberger <jbheyberger@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "027e585bb10c8b6613e12c532ff79a8fc732c718", "author": {"user": {"login": "JB-H", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/027e585bb10c8b6613e12c532ff79a8fc732c718", "committedDate": "2020-07-03T15:48:11Z", "message": "Improvement of switched shunts\nImprovement of 2 windings transformers, with phase shift\nFirst implementation of 3 windings transformers\nSeveral checks to import different IEEE cases\n\nSigned-off-by: Jean-Baptiste Heyberger <jbheyberger@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82b338e6066f397d52df5d0f35a7dcb5ceeb3288", "author": {"user": {"login": "JB-H", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/82b338e6066f397d52df5d0f35a7dcb5ceeb3288", "committedDate": "2020-07-03T20:07:39Z", "message": "correction of parsing of switched shunts\n\nSigned-off-by: Jean-Baptiste Heyberger <jbheyberger@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1bf68bf0754c7b7383e08c3ab55c95287a16656", "author": {"user": {"login": "JB-H", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/d1bf68bf0754c7b7383e08c3ab55c95287a16656", "committedDate": "2020-07-03T20:18:50Z", "message": "correction of code smells\n\nSigned-off-by: Jean-Baptiste Heyberger <jbheyberger@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bad0668ef848f8ebee389593d348d8218c125fd", "author": {"user": {"login": "JB-H", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/1bad0668ef848f8ebee389593d348d8218c125fd", "committedDate": "2020-07-05T19:36:49Z", "message": "Additionnal tests using different IEEE cases\n\nSigned-off-by: Jean-Baptiste Heyberger <jbheyberger@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e02c04dace96dcc4849563dcc80ad92a20b7b528", "author": {"user": {"login": "JB-H", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/e02c04dace96dcc4849563dcc80ad92a20b7b528", "committedDate": "2020-07-06T09:06:51Z", "message": "Improvements of PSS/E importer:\n- supporting both raw and RAW file extensions\n- supporting STATUS = 0 of equipments\n- modification of header detection\n- reading Qmin and Qmax of generating units\n- modification of targetQ setter\n- better check of the number of windings of transformers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8a4bbfcdfbdc0d80c136fe030163a89c1abd513", "author": {"user": {"login": "JB-H", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/d8a4bbfcdfbdc0d80c136fe030163a89c1abd513", "committedDate": "2020-07-06T09:06:51Z", "message": "Improvements of PSS/E importer:\n- supporting both raw and RAW file extensions\n- supporting STATUS = 0 of equipments\n- modification of header detection\n- reading Qmin and Qmax of generating units\n- modification of targetQ setter\n- better check of the number of windings of transformers\n\nSigned-off-by: Jean-Baptiste Heyberger <jbheyberger@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eaa2c30cf014703624ddee57eaab2676793786c6", "author": {"user": {"login": "JB-H", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/eaa2c30cf014703624ddee57eaab2676793786c6", "committedDate": "2020-07-06T09:06:52Z", "message": "Improvement of switched shunts\nImprovement of 2 windings transformers, with phase shift\nFirst implementation of 3 windings transformers\nSeveral checks to import different IEEE cases\n\nSigned-off-by: Jean-Baptiste Heyberger <jbheyberger@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7aa4313848b60eeb4f53198206f2bf66b3be4f9", "author": {"user": {"login": "JB-H", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/d7aa4313848b60eeb4f53198206f2bf66b3be4f9", "committedDate": "2020-07-06T09:06:52Z", "message": "Improvement of switched shunts\nImprovement of 2 windings transformers, with phase shift\nFirst implementation of 3 windings transformers\nSeveral checks to import different IEEE cases\n\nSigned-off-by: Jean-Baptiste Heyberger <jbheyberger@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8669e5c5c075254a2ef0d4f80697445cb20d0581", "author": {"user": {"login": "JB-H", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/8669e5c5c075254a2ef0d4f80697445cb20d0581", "committedDate": "2020-07-06T09:06:52Z", "message": "correction of parsing of switched shunts\n\nSigned-off-by: Jean-Baptiste Heyberger <jbheyberger@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecaad5e9f40c93deb073d348888f94545eebf458", "author": {"user": {"login": "JB-H", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/ecaad5e9f40c93deb073d348888f94545eebf458", "committedDate": "2020-07-06T09:06:52Z", "message": "correction of code smells\n\nSigned-off-by: Jean-Baptiste Heyberger <jbheyberger@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0646f2112902fe1c6ae8391d369c1a06f69a1927", "author": {"user": {"login": "JB-H", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/0646f2112902fe1c6ae8391d369c1a06f69a1927", "committedDate": "2020-07-06T09:06:52Z", "message": "Modification of tests files including the switched shunts\n\nSigned-off-by: Jean-Baptiste Heyberger <jbheyberger@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa3c2178f6a5a8ef1bad9155144d695acdb0ccf6", "author": {"user": {"login": "JB-H", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/aa3c2178f6a5a8ef1bad9155144d695acdb0ccf6", "committedDate": "2020-07-06T09:07:26Z", "message": "Merge remote-tracking branch 'origin/psse-converter-b3' into psse-converter-b3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f60a8580a929821ecfb51da4d2bbbf681f69ed0", "author": {"user": {"login": "JB-H", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/4f60a8580a929821ecfb51da4d2bbbf681f69ed0", "committedDate": "2020-07-06T16:43:08Z", "message": "Improvements of PSS/E importer:\n- supporting both raw and RAW file extensions\n- supporting STATUS = 0 of equipments\n- modification of header detection\n- reading Qmin and Qmax of generating units\n- modification of targetQ setter\n- better check of the number of windings of transformers\n\nSigned-off-by: Jean-Baptiste Heyberger <jbheyberger@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ee7aca2913c8aa7c3f3ff016d1c1f767c80a4df", "author": {"user": {"login": "JB-H", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/9ee7aca2913c8aa7c3f3ff016d1c1f767c80a4df", "committedDate": "2020-07-06T16:45:19Z", "message": "Improvement of switched shunts\nImprovement of 2 windings transformers, with phase shift\nFirst implementation of 3 windings transformers\nSeveral checks to import different IEEE cases\n\nSigned-off-by: Jean-Baptiste Heyberger <jbheyberger@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed1c53424c8e5a2c042faef6405c53267f967a59", "author": {"user": {"login": "JB-H", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/ed1c53424c8e5a2c042faef6405c53267f967a59", "committedDate": "2020-07-06T18:26:53Z", "message": "Additionnal tests using different IEEE cases\n\nSigned-off-by: Jean-Baptiste Heyberger <jbheyberger@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf43d0dbf52b80e7825ba3a1651b10a2c67c668a", "author": {"user": {"login": "JB-H", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/cf43d0dbf52b80e7825ba3a1651b10a2c67c668a", "committedDate": "2020-07-06T18:27:38Z", "message": "Merge remote-tracking branch 'origin/psse-converter-b3' into psse-converter-b3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c724deef5601e38fee1f0322a1e8254a60487d9a", "author": {"user": {"login": "JB-H", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/c724deef5601e38fee1f0322a1e8254a60487d9a", "committedDate": "2020-07-06T19:14:28Z", "message": "Add a Three winding transformer test\n\nSigned-off-by: Jean-Baptiste Heyberger <jbheyberger@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0184606e92aae67fdd02a854cb8904608adac8f", "author": {"user": {"login": "JB-H", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/c0184606e92aae67fdd02a854cb8904608adac8f", "committedDate": "2020-07-06T19:14:50Z", "message": "Merge remote-tracking branch 'origin/psse-converter-b3' into psse-converter-b3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa27f9cdf1c4469471a5d98bf90daf24686711ff", "author": {"user": {"login": "JB-H", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/aa27f9cdf1c4469471a5d98bf90daf24686711ff", "committedDate": "2020-07-06T19:20:49Z", "message": "Merge remote-tracking branch 'origin/psse-converter-b3' into psse-converter-b3\n\nSigned-off-by: Jean-Baptiste Heyberger <jbheyberger@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fe2579a0db3a0f8f050e53595dfbe8ae7412aa7", "author": {"user": {"login": "JB-H", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/7fe2579a0db3a0f8f050e53595dfbe8ae7412aa7", "committedDate": "2020-07-06T19:21:04Z", "message": "Merge remote-tracking branch 'origin/psse-converter-b3' into psse-converter-b3"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMzY0MDc0", "url": "https://github.com/powsybl/powsybl-core/pull/1382#pullrequestreview-443364074", "createdAt": "2020-07-06T19:51:34Z", "commit": {"oid": "7fe2579a0db3a0f8f050e53595dfbe8ae7412aa7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTo1MTozNFrOGtlAeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDowMDowMVrOGtlPBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ0NTQzMw==", "bodyText": "There is already an equivalent feature in IIDM, would it be equivalent in your case?\n        Line line = network.newLine()\n                .setId(id)\n                .setEnsureIdUnicity(true)\n               ...", "url": "https://github.com/powsybl/powsybl-core/pull/1382#discussion_r450445433", "createdAt": "2020-07-06T19:51:34Z", "author": {"login": "geofjamg"}, "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -256,17 +355,32 @@ private static void createBuses(PsseRawModel psseModel, ContainersMapping contai\n             // create bus\n             createBus(psseBus, voltageLevel);\n \n+            busNumToPsseBus.put(psseBus.getI(), psseBus);\n+\n+        }\n+    }\n+\n+    private static String  getUniqueId(String id, Predicate<String> predicate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fe2579a0db3a0f8f050e53595dfbe8ae7412aa7"}, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ0NTk5NA==", "bodyText": "branch -> 0", "url": "https://github.com/powsybl/powsybl-core/pull/1382#discussion_r450445994", "createdAt": "2020-07-06T19:52:48Z", "author": {"login": "geofjamg"}, "path": "ieee-cdf/ieee-cdf-converter/src/main/java/com/powsybl/ieeecdf/converter/IeeeCdfImporter.java", "diffHunk": "@@ -468,7 +468,7 @@ public Network importData(ReadOnlyDataSource dataSource, NetworkFactory networkF\n \n             // build container to fit IIDM requirements\n             ContainersMapping containerMapping = ContainersMapping.create(ieeeCdfModel.getBuses(), ieeeCdfModel.getBranches(),\n-                IeeeCdfBus::getNumber, IeeeCdfBranch::getTapBusNumber, IeeeCdfBranch::getzBusNumber, IeeeCdfBranch::getResistance,\n+                IeeeCdfBus::getNumber, IeeeCdfBranch::getTapBusNumber, IeeeCdfBranch::getzBusNumber, IeeeCdfBranch -> 0,  IeeeCdfBranch::getResistance,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fe2579a0db3a0f8f050e53595dfbe8ae7412aa7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ0NjE0OQ==", "bodyText": "branch -> 0", "url": "https://github.com/powsybl/powsybl-core/pull/1382#discussion_r450446149", "createdAt": "2020-07-06T19:53:09Z", "author": {"login": "geofjamg"}, "path": "matpower/matpower-converter/src/main/java/com/powsybl/matpower/converter/MatpowerImporter.java", "diffHunk": "@@ -340,7 +340,7 @@ public Network importData(ReadOnlyDataSource dataSource, NetworkFactory networkF\n                 LOGGER.debug(\"MATPOWER model {}\", model.getCaseName());\n \n                 ContainersMapping containerMapping = ContainersMapping.create(model.getBuses(), model.getBranches(),\n-                    MBus::getNumber, MBranch::getFrom, MBranch::getTo, MBranch::getR, MBranch::getX, MatpowerImporter::isTransformer,\n+                    MBus::getNumber, MBranch::getFrom, MBranch::getTo, MBranch -> 0, MBranch::getR, MBranch::getX,  MatpowerImporter::isTransformer,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fe2579a0db3a0f8f050e53595dfbe8ae7412aa7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ0NzE3OQ==", "bodyText": "HashMap -> Map", "url": "https://github.com/powsybl/powsybl-core/pull/1382#discussion_r450447179", "createdAt": "2020-07-06T19:55:29Z", "author": {"login": "geofjamg"}, "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -182,30 +211,87 @@ private static void createLoad(PsseLoad psseLoad, ContainersMapping containerMap\n \n     }\n \n-    private static void createShuntCompensator(PsseFixedShunt psseShunt, PerUnitContext perUnitContext, ContainersMapping containerMapping, Network network) {\n-        String busId = getBusId(psseShunt.getI());\n-        VoltageLevel voltageLevel = network.getVoltageLevel(containerMapping.getVoltageLevelId(psseShunt.getI()));\n-        ShuntCompensatorAdder adder = voltageLevel.newShuntCompensator()\n-                .setId(busId + \"-SH\" + psseShunt.getId())\n-                .setConnectableBus(busId)\n-                .setBus(busId)\n-                .setSectionCount(1);\n-        adder.newLinearModel()\n-                .setBPerSection(psseShunt.getBl())//TODO: take into account gl\n-                .setMaximumSectionCount(1)\n-                .add();\n-        ShuntCompensator shunt = adder.add();\n+    private static void createShuntCompensator(PsseFixedShunt psseShunt, ContainersMapping containerMapping, Network network) {\n+        if (psseShunt.getBl() != 0) {\n+            String busId = getBusId(psseShunt.getI());\n+            VoltageLevel voltageLevel = network.getVoltageLevel(containerMapping.getVoltageLevelId(psseShunt.getI()));\n+            ShuntCompensatorAdder adder = voltageLevel.newShuntCompensator()\n+                    .setId(busId + \"-SH\" + psseShunt.getId())\n+                    .setConnectableBus(busId)\n+                    .setBus(busId)\n+                    .setSectionCount(1);\n+            adder.newLinearModel()\n+                    .setBPerSection(psseShunt.getBl())//TODO: take into account gl\n+                    .setMaximumSectionCount(1)\n+                    .add();\n+            ShuntCompensator shunt = adder.add();\n+\n+            if (psseShunt.getStatus() == 1) {\n+                shunt.getTerminal().connect();\n+            }\n+\n+            if (psseShunt.getGl() != 0) {\n+                LOGGER.warn(\"Shunt Gl not supported ({})\", psseShunt.getI());\n+            }\n+        } else {\n+            LOGGER.warn(\"Shunt ({}) has Bl = 0, not imported \", psseShunt.getI()); //TODO : allow import of shunts with Bl= 0 in iidm?\n+        }\n+    }\n+\n+    private void createSwitchedShuntBlocMap(PsseRawModel psseModel, HashMap<PsseSwitchedShunt, ShuntBlockTab > stoBlockiTab) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fe2579a0db3a0f8f050e53595dfbe8ae7412aa7"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ0ODI4Mg==", "bodyText": "Is there any reason to explicitly create a variable for adders?\nYou could write:\n                ShuntCompensator shunt = voltageLevel.newShuntCompensator()\n                        .setId(busId + \"-SwSH-B\" + i)\n                        .setConnectableBus(busId)\n                        .setSectionCount(1);\n                        .newLinearModel() //TODO: use Binit and sbl.getNi(i) to initiate Bi, for now we use Binit to obtain de same load-flow results\n                            .setBPerSection(psseSwShunt.getBinit())//TODO: take into account BINIT to define the number of switched steps in the case BINIT is different from the max switched steps\n                            .setMaximumSectionCount(1)\n                        .add()\n                .add();", "url": "https://github.com/powsybl/powsybl-core/pull/1382#discussion_r450448282", "createdAt": "2020-07-06T19:57:55Z", "author": {"login": "geofjamg"}, "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -182,30 +211,87 @@ private static void createLoad(PsseLoad psseLoad, ContainersMapping containerMap\n \n     }\n \n-    private static void createShuntCompensator(PsseFixedShunt psseShunt, PerUnitContext perUnitContext, ContainersMapping containerMapping, Network network) {\n-        String busId = getBusId(psseShunt.getI());\n-        VoltageLevel voltageLevel = network.getVoltageLevel(containerMapping.getVoltageLevelId(psseShunt.getI()));\n-        ShuntCompensatorAdder adder = voltageLevel.newShuntCompensator()\n-                .setId(busId + \"-SH\" + psseShunt.getId())\n-                .setConnectableBus(busId)\n-                .setBus(busId)\n-                .setSectionCount(1);\n-        adder.newLinearModel()\n-                .setBPerSection(psseShunt.getBl())//TODO: take into account gl\n-                .setMaximumSectionCount(1)\n-                .add();\n-        ShuntCompensator shunt = adder.add();\n+    private static void createShuntCompensator(PsseFixedShunt psseShunt, ContainersMapping containerMapping, Network network) {\n+        if (psseShunt.getBl() != 0) {\n+            String busId = getBusId(psseShunt.getI());\n+            VoltageLevel voltageLevel = network.getVoltageLevel(containerMapping.getVoltageLevelId(psseShunt.getI()));\n+            ShuntCompensatorAdder adder = voltageLevel.newShuntCompensator()\n+                    .setId(busId + \"-SH\" + psseShunt.getId())\n+                    .setConnectableBus(busId)\n+                    .setBus(busId)\n+                    .setSectionCount(1);\n+            adder.newLinearModel()\n+                    .setBPerSection(psseShunt.getBl())//TODO: take into account gl\n+                    .setMaximumSectionCount(1)\n+                    .add();\n+            ShuntCompensator shunt = adder.add();\n+\n+            if (psseShunt.getStatus() == 1) {\n+                shunt.getTerminal().connect();\n+            }\n+\n+            if (psseShunt.getGl() != 0) {\n+                LOGGER.warn(\"Shunt Gl not supported ({})\", psseShunt.getI());\n+            }\n+        } else {\n+            LOGGER.warn(\"Shunt ({}) has Bl = 0, not imported \", psseShunt.getI()); //TODO : allow import of shunts with Bl= 0 in iidm?\n+        }\n+    }\n+\n+    private void createSwitchedShuntBlocMap(PsseRawModel psseModel, HashMap<PsseSwitchedShunt, ShuntBlockTab > stoBlockiTab) {\n+\n+        /* Creates a map between the PSSE switched shunt and the blocks info of this shunt\n+        A switched shunt may contain up to 8 blocks and each block may contain up to 9 steps of the same value (in MVAR)\n+        A block may be capacitive or inductive */\n+        for (PsseSwitchedShunt psseSwShunt : psseModel.getSwitchedShunts()) {\n+\n+            ShuntBlockTab sbt = new ShuntBlockTab();\n+\n+            int[] ni = {\n+                    psseSwShunt.getN1(), psseSwShunt.getN2(), psseSwShunt.getN3(), psseSwShunt.getN4(),\n+                    psseSwShunt.getN5(), psseSwShunt.getN6(), psseSwShunt.getN7(), psseSwShunt.getN8()\n+            };\n+\n+            double[] bi = {\n+                    psseSwShunt.getB1(), psseSwShunt.getB2(), psseSwShunt.getB3(), psseSwShunt.getB4(),\n+                    psseSwShunt.getB5(), psseSwShunt.getB6(), psseSwShunt.getB7(), psseSwShunt.getB8()\n+            };\n+\n+            int i = 0;\n+            while (i <= 7 && ni[i] > 0) {\n+                sbt.add(i + 1, ni[i], bi[i]);\n+                i++;\n+            }\n \n-        if (psseShunt.getStatus() == 1) {\n-            shunt.getTerminal().connect();\n+            stoBlockiTab.put(psseSwShunt, sbt);\n         }\n+    }\n \n-        if (psseShunt.getGl() != 0) {\n-            LOGGER.warn(\"Shunt Gl not supported ({})\", psseShunt.getI());\n+    private static void createSwitchedShunt(PsseSwitchedShunt psseSwShunt, PerUnitContext perUnitContext, ContainersMapping containerMapping, Network network, HashMap<PsseSwitchedShunt, ShuntBlockTab >  stoBlockiTab) {\n+        String busId = getBusId(psseSwShunt.getI());\n+        VoltageLevel voltageLevel = network.getVoltageLevel(containerMapping.getVoltageLevelId(psseSwShunt.getI()));\n+        ShuntBlockTab sbl = stoBlockiTab.get(psseSwShunt);\n+\n+        for (int i = 1; i <= sbl.getSize(); i++) {\n+            if (psseSwShunt.getBinit() != 0) { //TODO : improve it to make it robust to all configurations\n+                ShuntCompensatorAdder adder = voltageLevel.newShuntCompensator()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fe2579a0db3a0f8f050e53595dfbe8ae7412aa7"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ0ODU1NQ==", "bodyText": "Here also you could use IIDM unicity feature?", "url": "https://github.com/powsybl/powsybl-core/pull/1382#discussion_r450448555", "createdAt": "2020-07-06T19:58:37Z", "author": {"login": "geofjamg"}, "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -291,38 +405,243 @@ private static void createLine(PsseNonTransformerBranch psseLine, ContainersMapp\n         }\n     }\n \n-    private static void createTransformer(PsseTransformer psseTfo, ContainersMapping containerMapping, PerUnitContext perUnitContext, Network network) {\n-        String id = \"T-\" + psseTfo.getFirstRecord().getI() + \"-\" + psseTfo.getFirstRecord().getJ() + \"-\" + psseTfo.getFirstRecord().getCkt();\n+    private static void createTransformer(PsseTransformer psseTfo, ContainersMapping containerMapping, PerUnitContext perUnitContext, Network network, Map<Integer, PsseBus> busNumToPsseBus, double sbase) {\n+\n+        String id = \"T-\" + psseTfo.getFirstRecord().getI() + \"-\" + psseTfo.getFirstRecord().getJ();\n+        if (psseTfo.getFirstRecord().getK() == 0) {\n+            id = id + \"-\" + psseTfo.getFirstRecord().getCkt();\n+            id = getUniqueId(id, s -> network.getTwoWindingsTransformer(s) != null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fe2579a0db3a0f8f050e53595dfbe8ae7412aa7"}, "originalPosition": 269}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ0OTE1OQ==", "bodyText": "Same remark than with shunts, it could be written without adder vars in a fluent way.", "url": "https://github.com/powsybl/powsybl-core/pull/1382#discussion_r450449159", "createdAt": "2020-07-06T20:00:01Z", "author": {"login": "geofjamg"}, "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -291,38 +405,243 @@ private static void createLine(PsseNonTransformerBranch psseLine, ContainersMapp\n         }\n     }\n \n-    private static void createTransformer(PsseTransformer psseTfo, ContainersMapping containerMapping, PerUnitContext perUnitContext, Network network) {\n-        String id = \"T-\" + psseTfo.getFirstRecord().getI() + \"-\" + psseTfo.getFirstRecord().getJ() + \"-\" + psseTfo.getFirstRecord().getCkt();\n+    private static void createTransformer(PsseTransformer psseTfo, ContainersMapping containerMapping, PerUnitContext perUnitContext, Network network, Map<Integer, PsseBus> busNumToPsseBus, double sbase) {\n+\n+        String id = \"T-\" + psseTfo.getFirstRecord().getI() + \"-\" + psseTfo.getFirstRecord().getJ();\n+        if (psseTfo.getFirstRecord().getK() == 0) {\n+            id = id + \"-\" + psseTfo.getFirstRecord().getCkt();\n+            id = getUniqueId(id, s -> network.getTwoWindingsTransformer(s) != null);\n+        } else {\n+            id = id + \"-\" + psseTfo.getFirstRecord().getK() + \"-\" + psseTfo.getFirstRecord().getCkt();\n+            id = getUniqueId(id, s -> network.getThreeWindingsTransformer(s) != null);\n+        }\n+\n         String bus1Id = getBusId(psseTfo.getFirstRecord().getI());\n         String bus2Id = getBusId(psseTfo.getFirstRecord().getJ());\n         String voltageLevel1Id = containerMapping.getVoltageLevelId(psseTfo.getFirstRecord().getI());\n         String voltageLevel2Id = containerMapping.getVoltageLevelId(psseTfo.getFirstRecord().getJ());\n         VoltageLevel voltageLevel1 = network.getVoltageLevel(voltageLevel1Id);\n         VoltageLevel voltageLevel2 = network.getVoltageLevel(voltageLevel2Id);\n-        double zb = Math.pow(voltageLevel2.getNominalV(), 2) / perUnitContext.getSb();\n+        double baskv1 = busNumToPsseBus.get(psseTfo.getFirstRecord().getI()).getBaskv();\n+        double baskv2 = busNumToPsseBus.get(psseTfo.getFirstRecord().getJ()).getBaskv();\n+        double zb2 = Math.pow(voltageLevel2.getNominalV(), 2) / perUnitContext.getSb();\n+        double sbase12 = psseTfo.getSecondRecord().getSbase12();\n+        double nomV1 = psseTfo.getThirdRecord1().getNomv();\n+\n+        //handling impedance and admittance\n+        // CZ = 1 the triangle values are already in right pu\n+        double r12 = psseTfo.getSecondRecord().getR12();\n+        double x12 = psseTfo.getSecondRecord().getX12();\n+\n+        if (psseTfo.getFirstRecord().getCz() == 2) {\n+            //CZ = 2 change to right Sbase pu\n+            r12 = r12 * sbase / sbase12;\n+            x12 = x12 * sbase / sbase12;\n+        } else if (psseTfo.getFirstRecord().getCz() == 3) {\n+            //CZ = 3 convert load loss power and current into pu impedances\n+            r12 = r12 * sbase / (sbase12 * sbase12 * 1000000);\n+            double absZ12 = x12 * sbase / sbase12;\n+            x12 = Math.sqrt(absZ12 * absZ12 - r12 * r12);\n+        }\n+\n+        // Handling terminal ratios\n+        //default value when Cw = 1\n+        double w1 = psseTfo.getThirdRecord1().getWindv();\n+        double w2 = psseTfo.getThirdRecord2().getWindv();\n+        if (psseTfo.getFirstRecord().getCw() == 2) {\n+            // case where Cw = 2\n+            w1 = w1 / baskv1;\n+            w2 = w2 / baskv2;\n+        }\n+\n+        // Handling magnetizing admittance Gm and Bm\n+        // Case where Cm = 1\n+        double mag1 = psseTfo.getFirstRecord().getMag1(); // admittance value when Cm = 1\n+        double mag2 = psseTfo.getFirstRecord().getMag2(); // admittance value when Cm = 1\n+        double bmPu = mag2; //bmPu and gmPu represent the values of the magnetizing admittance at the i end in pu at 1/Zb1 base where Zb1 = Vb1*Vb1/Sb1\n+        double gmPu = mag1; //Vb1 is the bus i voltage base  (BASKV) and Sb1 is the system MVA base which is SBASE\n+        double ymPu = 0;\n+        if (psseTfo.getFirstRecord().getCm() == 2) {\n+            // modification of value if Cm = 2\n+            gmPu = mag1 / (nomV1 * nomV1 * 1000000) * (baskv1 * baskv1 / sbase); // we need to convert mag1 and mag2 from a (NOMV1, Sbase12) to a (baskv1, Sbase) base so that it is expressed in pu admittance at i end.\n+            ymPu = mag2 / (nomV1 * nomV1) * sbase12 * (baskv1 * baskv1 / sbase);\n+            double bm2 = ymPu * ymPu - gmPu * gmPu;\n+            if (bm2 >= 0) {\n+                bmPu = -Math.sqrt(bm2);\n+            } else {\n+                bmPu = 0;\n+                LOGGER.warn(\"Magnetizing susceptance of Transformer ({}) set to 0 because admittance module is ({}) and conductance is ({})  \", id, ymPu, gmPu);\n+            }\n+        }\n \n         if (psseTfo.getFirstRecord().getK() == 0) {\n+            // Case of a 2 windings Transformer\n             TwoWindingsTransformer tfo2W = voltageLevel2.getSubstation().newTwoWindingsTransformer()\n                     .setId(id)\n                     .setConnectableBus1(bus1Id)\n                     .setVoltageLevel1(voltageLevel1Id)\n                     .setConnectableBus2(bus2Id)\n                     .setVoltageLevel2(voltageLevel2Id)\n-                    .setRatedU1(voltageLevel1.getNominalV() * psseTfo.getThirdRecord1().getWindv())\n-                    .setRatedU2(voltageLevel2.getNominalV())\n-                    .setR(psseTfo.getSecondRecord().getR12() * zb)\n-                    .setX(psseTfo.getSecondRecord().getX12() * zb)\n-                    .setG(0) //TODO\n-                    .setB(0) //TODO\n+                    .setRatedU1(voltageLevel1.getNominalV() * w1)\n+                    .setRatedU2(voltageLevel2.getNominalV() * w2)\n+                    .setR(r12 * zb2 * w2 * w2) // R12 and X12 shifted on the other side of the 2 wire (PSSE model to iidm model)\n+                    .setX(x12 * zb2 * w2 * w2)\n+                    .setG(gmPu / (zb2 * (w2 / w1) * (w2 / w1))) // magnetizing susceptance and conductance shifted from left of the first wire (PSSE model) to the right of the second wire (iidm model)\n+                    .setB(bmPu / (zb2 * (w2 / w1) * (w2 / w1)))\n                     .add();\n \n+            //Phase Shift Transformer\n+            if (psseTfo.getThirdRecord1().getAng() != 0) {\n+                PhaseTapChangerAdder phaseTapChangerAdder = tfo2W.newPhaseTapChanger()\n+                        .setRegulationMode(PhaseTapChanger.RegulationMode.FIXED_TAP)\n+                        .setRegulating(false)\n+                        .setTapPosition(0);\n+                List<Double> alphas = new ArrayList<>();\n+                alphas.add(-psseTfo.getThirdRecord1().getAng());  //TODO : check angle and angle units (supposed in degrees)\n+                // TODO create full table\n+                for (double alpha : alphas) {\n+                    phaseTapChangerAdder.beginStep()\n+                            .setAlpha(alpha)\n+                            .setRho(1)\n+                            .setR(0)\n+                            .setX(0)\n+                            .setG(0)\n+                            .setB(0)\n+                            .endStep();\n+                }\n+                phaseTapChangerAdder.add();\n+            }\n+\n+            //TODO support phase shift on all ends of the Tfo\n+            if (psseTfo.getThirdRecord2().getAng() != 0) {\n+                LOGGER.warn(\"Phase shift of Transformer ({}) located on end 2 not yet supported  \", id);\n+            }\n+            if (psseTfo.getFirstRecord().getK() != 0 && psseTfo.getThirdRecord3().getAng() != 0) {\n+                LOGGER.warn(\"Phase shift of Transformer ({}) located on end 3 not yet supported  \", id);\n+            }\n+\n             if (psseTfo.getFirstRecord().getStat() == 1) {\n                 tfo2W.getTerminal1().connect();\n                 tfo2W.getTerminal2().connect();\n             }\n \n         } else {\n-            LOGGER.warn(\"Non-2-windings transformers not supported ({})\", id);\n+            // case of a three windings transformer\n+            String bus3Id = getBusId(psseTfo.getFirstRecord().getK());\n+            String voltageLevel3Id = containerMapping.getVoltageLevelId(psseTfo.getFirstRecord().getK());\n+            VoltageLevel voltageLevel3 = network.getVoltageLevel(voltageLevel3Id);\n+            double baskv3 = busNumToPsseBus.get(psseTfo.getFirstRecord().getK()).getBaskv();\n+\n+            // Cw = 1\n+            double w3 = psseTfo.getThirdRecord3().getWindv();\n+            if (psseTfo.getFirstRecord().getCw() == 2) {\n+                // Cw = 2 : conversion of kV into ratio\n+                w3 = w3 / baskv3;\n+            }\n+\n+            double sbase31 = psseTfo.getSecondRecord().getSbase31();\n+            double sbase23 = psseTfo.getSecondRecord().getSbase23();\n+\n+            //Get the triangle impedances (rij,xij) values in all Cz configurations\n+            // CZ = 1 the triangle values are already in right pu\n+            double r23 = psseTfo.getSecondRecord().getR23();\n+            double x23 = psseTfo.getSecondRecord().getX23();\n+            double r31 = psseTfo.getSecondRecord().getR31();\n+            double x31 = psseTfo.getSecondRecord().getX31();\n+            if (psseTfo.getFirstRecord().getCz() == 2) {\n+                //CZ = 2 change to right Sbase pu\n+                r12 = r12 * sbase / sbase12;\n+                x12 = x12 * sbase / sbase12;\n+                r23 = r23 * sbase / sbase23;\n+                x23 = x23 * sbase / sbase23;\n+                r31 = r31 * sbase / sbase31;\n+                x31 = x31 * sbase / sbase31;\n+            } else if (psseTfo.getFirstRecord().getCz() == 3) {\n+                //CZ = 3 convert load loss power and current into pu impedances\n+                r23 = r23 * sbase / (sbase23 * sbase23 * 1000000);\n+                r31 = r31 * sbase / (sbase23 * sbase23 * 1000000);\n+\n+                double absZ23 = x23 * sbase / sbase23;\n+                if (absZ23 * absZ23 - r23 * r23 <= 0) {\n+                    x23 = 0;\n+                    LOGGER.warn(\"inductance x23 of Transformer ({}) set to 0 because impedance module is ({}) and resistance is ({})  \", id, absZ23, r23);\n+                } else {\n+                    x23 = Math.sqrt(absZ23 * absZ23 - r23 * r23);\n+                }\n+\n+                double absZ31 = x31 * sbase / sbase31;\n+                if (absZ23 * absZ23 - r23 * r23 <= 0) {\n+                    x31 = 0;\n+                    LOGGER.warn(\"inductance x31 of Transformer ({}) set to 0 because impedance module is ({}) and resistance is ({})  \", id, absZ31, r31);\n+                } else {\n+                    x31 = Math.sqrt(absZ31 * absZ31 - r31 * r31);\n+                }\n+            }\n+\n+            //transform triangle (rij,xij) impedances into star (ri,xj) impedances\n+            double sumR = r12 + r23 + r31;\n+            double sumX = x12 + x23 + x31;\n+            double squareMod = sumR * sumR + sumX * sumX;\n+\n+            double r1 = ((r31 * r12 - x31 * x12) * sumR + (r31 * x12 + r12 * x31) * sumX) / squareMod;\n+            double x1 = ((r31 * x12 + r12 * x31) * sumR - (r31 * r12 - x31 * x12) * sumX) / squareMod;\n+\n+            double r2 = ((r12 * r23 - x12 * x23) * sumR + (r12 * x23 + r23 * x12) * sumX) / squareMod;\n+            double x2 = ((r12 * x23 + r23 * x12) * sumR - (r12 * r23 - x12 * x23) * sumX) / squareMod;\n+\n+            double r3 = ((r23 * r31 - x23 * x31) * sumR + (r23 * x31 + r31 * x23) * sumX) / squareMod;\n+            double x3 = ((r23 * x31 + r31 * x23) * sumR - (r23 * r31 - x23 * x31) * sumX) / squareMod;\n+\n+            //set a voltage base at star node with the associated Zbase\n+            double v0 = 1.0;\n+            double zbV0 = v0 * v0 / perUnitContext.getSb();\n+\n+            ThreeWindingsTransformerAdder tfoAdder = voltageLevel1.getSubstation().newThreeWindingsTransformer()\n+                    .setRatedU0(v0)\n+                    .setId(id);\n+\n+            ThreeWindingsTransformerAdder.LegAdder l1adder = tfoAdder.newLeg1();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fe2579a0db3a0f8f050e53595dfbe8ae7412aa7"}, "originalPosition": 467}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ad247c19d363c379c9587e14cd9426cbc29751e", "author": {"user": {"login": "JB-H", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/2ad247c19d363c379c9587e14cd9426cbc29751e", "committedDate": "2020-07-06T20:35:54Z", "message": "Corrections required from pull request\n\nSigned-off-by: Jean-Baptiste Heyberger <jbheyberger@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5bfe9caf4e55f116178bc7b25d45807dcd01f91", "author": {"user": {"login": "JB-H", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/d5bfe9caf4e55f116178bc7b25d45807dcd01f91", "committedDate": "2020-07-06T20:36:12Z", "message": "Merge remote-tracking branch 'origin/psse-converter-b3' into psse-converter-b3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da88d734066329322685a99798555f5300189dd9", "author": {"user": {"login": "JB-H", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/da88d734066329322685a99798555f5300189dd9", "committedDate": "2020-07-06T20:38:48Z", "message": "Corrections required from pull request\n\nSigned-off-by: Jean-Baptiste Heyberger <jbheyberger@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNjQxMTgw", "url": "https://github.com/powsybl/powsybl-core/pull/1382#pullrequestreview-443641180", "createdAt": "2020-07-07T07:45:19Z", "commit": {"oid": "da88d734066329322685a99798555f5300189dd9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50f8ac1fa24f2e1f4c51b4593af4625866ca831f", "author": {"user": {"login": "mathbagu", "name": "Mathieu BAGUE"}}, "url": "https://github.com/powsybl/powsybl-core/commit/50f8ac1fa24f2e1f4c51b4593af4625866ca831f", "committedDate": "2020-07-07T07:46:09Z", "message": "Cosmetic fixes\n\nSigned-off-by: Mathieu BAGUE <mathieu.bague@rte-france.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNjk2ODAw", "url": "https://github.com/powsybl/powsybl-core/pull/1382#pullrequestreview-443696800", "createdAt": "2020-07-07T08:58:58Z", "commit": {"oid": "50f8ac1fa24f2e1f4c51b4593af4625866ca831f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4110, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}