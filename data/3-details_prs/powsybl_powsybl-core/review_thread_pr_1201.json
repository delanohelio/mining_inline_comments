{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMDg1NDg4", "number": 1201, "reviewThreads": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDoxNTowOVrODlcChA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTo0OToyOFrODn4cjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTgzMzAwOnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDoxNTowOVrOFyVGYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTozODo1NlrOFyyiHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMxODgxNw==", "bodyText": "Can be static", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r388318817", "createdAt": "2020-03-05T14:15:09Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -17,42 +26,122 @@\n import com.powsybl.cgmes.model.CgmesSubset;\n import com.powsybl.cgmes.model.triplestore.CgmesModelTripleStore;\n import com.powsybl.iidm.network.Bus;\n+import com.powsybl.iidm.network.Connectable;\n+import com.powsybl.iidm.network.DanglingLine;\n import com.powsybl.iidm.network.Generator;\n import com.powsybl.iidm.network.Load;\n import com.powsybl.iidm.network.Network;\n import com.powsybl.iidm.network.ShuntCompensator;\n import com.powsybl.iidm.network.Terminal;\n+import com.powsybl.iidm.network.ThreeWindingsTransformer;\n import com.powsybl.iidm.network.TwoWindingsTransformer;\n+import com.powsybl.iidm.network.VoltageLevel;\n+import com.powsybl.iidm.network.util.LinkData;\n+import com.powsybl.iidm.network.util.LinkData.BranchAdmittanceMatrix;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n  * @author Marcos de Miguel <demiguelm at aia.es>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Elena Kaltakova <kaltakovae at aia.es>\n  */\n-public final class StateVariablesAdder {\n+public class StateVariablesAdder {\n \n-    private StateVariablesAdder() {\n+    public StateVariablesAdder(CgmesModel cgmes, Network n) {\n+        this.cgmes = Objects.requireNonNull(cgmes);\n+        this.n = Objects.requireNonNull(n);\n+        this.cimVersion = ((CgmesModelTripleStore) cgmes).getCimVersion();\n+        this.originalTerminals = cgmes.terminals();\n+        this.originalFullModel = cgmes.fullModel(CgmesSubset.STATE_VARIABLES.getProfile());\n+        this.originalTopologicalIslands = cgmes.topologicalIslands();\n+        this.originalSVcontext = originalSVcontext();\n+        this.boundaryNodesFromDanglingLines = boundaryNodesFromDanglingLines();\n     }\n \n-    public static void add(Network n, CgmesModel cgmes) {\n-        // TODO Add full model data with proper profile (StateVariables)\n-        // FullModel is defined in ModelDescription:\n-        // http://iec.ch/TC57/61970-552/ModelDescription/1#\n+    private String originalSVcontext() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c5803a57c016ccc073c447f2f0b81bf799fd123"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwMTA1NQ==", "bodyText": "I don't think so because it uses the cgmes attribute.", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r388801055", "createdAt": "2020-03-06T09:38:56Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -17,42 +26,122 @@\n import com.powsybl.cgmes.model.CgmesSubset;\n import com.powsybl.cgmes.model.triplestore.CgmesModelTripleStore;\n import com.powsybl.iidm.network.Bus;\n+import com.powsybl.iidm.network.Connectable;\n+import com.powsybl.iidm.network.DanglingLine;\n import com.powsybl.iidm.network.Generator;\n import com.powsybl.iidm.network.Load;\n import com.powsybl.iidm.network.Network;\n import com.powsybl.iidm.network.ShuntCompensator;\n import com.powsybl.iidm.network.Terminal;\n+import com.powsybl.iidm.network.ThreeWindingsTransformer;\n import com.powsybl.iidm.network.TwoWindingsTransformer;\n+import com.powsybl.iidm.network.VoltageLevel;\n+import com.powsybl.iidm.network.util.LinkData;\n+import com.powsybl.iidm.network.util.LinkData.BranchAdmittanceMatrix;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n  * @author Marcos de Miguel <demiguelm at aia.es>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Elena Kaltakova <kaltakovae at aia.es>\n  */\n-public final class StateVariablesAdder {\n+public class StateVariablesAdder {\n \n-    private StateVariablesAdder() {\n+    public StateVariablesAdder(CgmesModel cgmes, Network n) {\n+        this.cgmes = Objects.requireNonNull(cgmes);\n+        this.n = Objects.requireNonNull(n);\n+        this.cimVersion = ((CgmesModelTripleStore) cgmes).getCimVersion();\n+        this.originalTerminals = cgmes.terminals();\n+        this.originalFullModel = cgmes.fullModel(CgmesSubset.STATE_VARIABLES.getProfile());\n+        this.originalTopologicalIslands = cgmes.topologicalIslands();\n+        this.originalSVcontext = originalSVcontext();\n+        this.boundaryNodesFromDanglingLines = boundaryNodesFromDanglingLines();\n     }\n \n-    public static void add(Network n, CgmesModel cgmes) {\n-        // TODO Add full model data with proper profile (StateVariables)\n-        // FullModel is defined in ModelDescription:\n-        // http://iec.ch/TC57/61970-552/ModelDescription/1#\n+    private String originalSVcontext() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMxODgxNw=="}, "originalCommit": {"oid": "8c5803a57c016ccc073c447f2f0b81bf799fd123"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTg3NTYyOnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDoyNTozNFrOFyVgaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTowMTo1NlrOFzfE2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMyNTQ4Mw==", "bodyText": "Does it work from a node/breaker CGMES file? In this case, topological nodes ID are not kept, are they?", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r388325483", "createdAt": "2020-03-05T14:25:34Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -17,42 +26,122 @@\n import com.powsybl.cgmes.model.CgmesSubset;\n import com.powsybl.cgmes.model.triplestore.CgmesModelTripleStore;\n import com.powsybl.iidm.network.Bus;\n+import com.powsybl.iidm.network.Connectable;\n+import com.powsybl.iidm.network.DanglingLine;\n import com.powsybl.iidm.network.Generator;\n import com.powsybl.iidm.network.Load;\n import com.powsybl.iidm.network.Network;\n import com.powsybl.iidm.network.ShuntCompensator;\n import com.powsybl.iidm.network.Terminal;\n+import com.powsybl.iidm.network.ThreeWindingsTransformer;\n import com.powsybl.iidm.network.TwoWindingsTransformer;\n+import com.powsybl.iidm.network.VoltageLevel;\n+import com.powsybl.iidm.network.util.LinkData;\n+import com.powsybl.iidm.network.util.LinkData.BranchAdmittanceMatrix;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n  * @author Marcos de Miguel <demiguelm at aia.es>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Elena Kaltakova <kaltakovae at aia.es>\n  */\n-public final class StateVariablesAdder {\n+public class StateVariablesAdder {\n \n-    private StateVariablesAdder() {\n+    public StateVariablesAdder(CgmesModel cgmes, Network n) {\n+        this.cgmes = Objects.requireNonNull(cgmes);\n+        this.n = Objects.requireNonNull(n);\n+        this.cimVersion = ((CgmesModelTripleStore) cgmes).getCimVersion();\n+        this.originalTerminals = cgmes.terminals();\n+        this.originalFullModel = cgmes.fullModel(CgmesSubset.STATE_VARIABLES.getProfile());\n+        this.originalTopologicalIslands = cgmes.topologicalIslands();\n+        this.originalSVcontext = originalSVcontext();\n+        this.boundaryNodesFromDanglingLines = boundaryNodesFromDanglingLines();\n     }\n \n-    public static void add(Network n, CgmesModel cgmes) {\n-        // TODO Add full model data with proper profile (StateVariables)\n-        // FullModel is defined in ModelDescription:\n-        // http://iec.ch/TC57/61970-552/ModelDescription/1#\n+    private String originalSVcontext() {\n+        PropertyBags pbs = cgmes.graph();\n+        PropertyBag defaultSvContext = new PropertyBag(Arrays.asList(\"graph\"));\n+        defaultSvContext.put(\"graph\", CgmesSubset.STATE_VARIABLES.toString());\n+        return pbs.stream()\n+            .filter(graph -> graph.getId(\"graph\").contains(CgmesSubset.STATE_VARIABLES.getIdentifier()))\n+            .findAny()\n+            .orElse(defaultSvContext)\n+            .getId(\"graph\");\n+    }\n+\n+    public void addStateVariablesToCgmes() {\n+        if (cgmes.isNodeBreaker()) {\n+            // TODO we need to export SV file data for NodeBraker\n+            LOG.warn(\"NodeBreaker view require further investigation to map correctly Topological Nodes\");\n+            return;\n+        }\n+        // Clear the previous SV data in CGMES model\n+        // and fill it with the Network current state values\n+        cgmes.clear(CgmesSubset.STATE_VARIABLES);\n+\n+        if (cimVersion != 14) {\n+            addModelDescriptionToCgmes();\n+            addTopologicalIslandsToCgmes();\n+        }\n+\n+        addVoltagesForTopologicalNodes();\n+\n+        addVoltagesForBoundaryNodes();\n+\n+        addPowerFlowToCgmes();\n \n+        addShuntCompensatorSectionsToCgmes();\n+\n+        addTapStepToCgmes();\n+\n+        addStatusToCgmes();\n+    }\n+\n+    private void addVoltagesForTopologicalNodes() {\n         PropertyBags voltages = new PropertyBags();\n-        for (Bus b : n.getBusBreakerView().getBuses()) {\n+        // add voltages for TpNodes existing in the Model\n+        for (PropertyBag tn : cgmes.topologicalNodes()) {\n+            Bus b = n.getBusBreakerView().getBus(tn.getId(CgmesNames.TOPOLOGICAL_NODE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c5803a57c016ccc073c447f2f0b81bf799fd123"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUyNjc5OQ==", "bodyText": "Correct, NodeBreaker view require further investigation to map correctly Topological Nodes. It will be done with the next iteration.", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r389526799", "createdAt": "2020-03-09T08:53:10Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -17,42 +26,122 @@\n import com.powsybl.cgmes.model.CgmesSubset;\n import com.powsybl.cgmes.model.triplestore.CgmesModelTripleStore;\n import com.powsybl.iidm.network.Bus;\n+import com.powsybl.iidm.network.Connectable;\n+import com.powsybl.iidm.network.DanglingLine;\n import com.powsybl.iidm.network.Generator;\n import com.powsybl.iidm.network.Load;\n import com.powsybl.iidm.network.Network;\n import com.powsybl.iidm.network.ShuntCompensator;\n import com.powsybl.iidm.network.Terminal;\n+import com.powsybl.iidm.network.ThreeWindingsTransformer;\n import com.powsybl.iidm.network.TwoWindingsTransformer;\n+import com.powsybl.iidm.network.VoltageLevel;\n+import com.powsybl.iidm.network.util.LinkData;\n+import com.powsybl.iidm.network.util.LinkData.BranchAdmittanceMatrix;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n  * @author Marcos de Miguel <demiguelm at aia.es>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Elena Kaltakova <kaltakovae at aia.es>\n  */\n-public final class StateVariablesAdder {\n+public class StateVariablesAdder {\n \n-    private StateVariablesAdder() {\n+    public StateVariablesAdder(CgmesModel cgmes, Network n) {\n+        this.cgmes = Objects.requireNonNull(cgmes);\n+        this.n = Objects.requireNonNull(n);\n+        this.cimVersion = ((CgmesModelTripleStore) cgmes).getCimVersion();\n+        this.originalTerminals = cgmes.terminals();\n+        this.originalFullModel = cgmes.fullModel(CgmesSubset.STATE_VARIABLES.getProfile());\n+        this.originalTopologicalIslands = cgmes.topologicalIslands();\n+        this.originalSVcontext = originalSVcontext();\n+        this.boundaryNodesFromDanglingLines = boundaryNodesFromDanglingLines();\n     }\n \n-    public static void add(Network n, CgmesModel cgmes) {\n-        // TODO Add full model data with proper profile (StateVariables)\n-        // FullModel is defined in ModelDescription:\n-        // http://iec.ch/TC57/61970-552/ModelDescription/1#\n+    private String originalSVcontext() {\n+        PropertyBags pbs = cgmes.graph();\n+        PropertyBag defaultSvContext = new PropertyBag(Arrays.asList(\"graph\"));\n+        defaultSvContext.put(\"graph\", CgmesSubset.STATE_VARIABLES.toString());\n+        return pbs.stream()\n+            .filter(graph -> graph.getId(\"graph\").contains(CgmesSubset.STATE_VARIABLES.getIdentifier()))\n+            .findAny()\n+            .orElse(defaultSvContext)\n+            .getId(\"graph\");\n+    }\n+\n+    public void addStateVariablesToCgmes() {\n+        if (cgmes.isNodeBreaker()) {\n+            // TODO we need to export SV file data for NodeBraker\n+            LOG.warn(\"NodeBreaker view require further investigation to map correctly Topological Nodes\");\n+            return;\n+        }\n+        // Clear the previous SV data in CGMES model\n+        // and fill it with the Network current state values\n+        cgmes.clear(CgmesSubset.STATE_VARIABLES);\n+\n+        if (cimVersion != 14) {\n+            addModelDescriptionToCgmes();\n+            addTopologicalIslandsToCgmes();\n+        }\n+\n+        addVoltagesForTopologicalNodes();\n+\n+        addVoltagesForBoundaryNodes();\n+\n+        addPowerFlowToCgmes();\n \n+        addShuntCompensatorSectionsToCgmes();\n+\n+        addTapStepToCgmes();\n+\n+        addStatusToCgmes();\n+    }\n+\n+    private void addVoltagesForTopologicalNodes() {\n         PropertyBags voltages = new PropertyBags();\n-        for (Bus b : n.getBusBreakerView().getBuses()) {\n+        // add voltages for TpNodes existing in the Model\n+        for (PropertyBag tn : cgmes.topologicalNodes()) {\n+            Bus b = n.getBusBreakerView().getBus(tn.getId(CgmesNames.TOPOLOGICAL_NODE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMyNTQ4Mw=="}, "originalCommit": {"oid": "8c5803a57c016ccc073c447f2f0b81bf799fd123"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUzMDg0MA==", "bodyText": "Okay!", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r389530840", "createdAt": "2020-03-09T09:01:56Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -17,42 +26,122 @@\n import com.powsybl.cgmes.model.CgmesSubset;\n import com.powsybl.cgmes.model.triplestore.CgmesModelTripleStore;\n import com.powsybl.iidm.network.Bus;\n+import com.powsybl.iidm.network.Connectable;\n+import com.powsybl.iidm.network.DanglingLine;\n import com.powsybl.iidm.network.Generator;\n import com.powsybl.iidm.network.Load;\n import com.powsybl.iidm.network.Network;\n import com.powsybl.iidm.network.ShuntCompensator;\n import com.powsybl.iidm.network.Terminal;\n+import com.powsybl.iidm.network.ThreeWindingsTransformer;\n import com.powsybl.iidm.network.TwoWindingsTransformer;\n+import com.powsybl.iidm.network.VoltageLevel;\n+import com.powsybl.iidm.network.util.LinkData;\n+import com.powsybl.iidm.network.util.LinkData.BranchAdmittanceMatrix;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n  * @author Marcos de Miguel <demiguelm at aia.es>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Elena Kaltakova <kaltakovae at aia.es>\n  */\n-public final class StateVariablesAdder {\n+public class StateVariablesAdder {\n \n-    private StateVariablesAdder() {\n+    public StateVariablesAdder(CgmesModel cgmes, Network n) {\n+        this.cgmes = Objects.requireNonNull(cgmes);\n+        this.n = Objects.requireNonNull(n);\n+        this.cimVersion = ((CgmesModelTripleStore) cgmes).getCimVersion();\n+        this.originalTerminals = cgmes.terminals();\n+        this.originalFullModel = cgmes.fullModel(CgmesSubset.STATE_VARIABLES.getProfile());\n+        this.originalTopologicalIslands = cgmes.topologicalIslands();\n+        this.originalSVcontext = originalSVcontext();\n+        this.boundaryNodesFromDanglingLines = boundaryNodesFromDanglingLines();\n     }\n \n-    public static void add(Network n, CgmesModel cgmes) {\n-        // TODO Add full model data with proper profile (StateVariables)\n-        // FullModel is defined in ModelDescription:\n-        // http://iec.ch/TC57/61970-552/ModelDescription/1#\n+    private String originalSVcontext() {\n+        PropertyBags pbs = cgmes.graph();\n+        PropertyBag defaultSvContext = new PropertyBag(Arrays.asList(\"graph\"));\n+        defaultSvContext.put(\"graph\", CgmesSubset.STATE_VARIABLES.toString());\n+        return pbs.stream()\n+            .filter(graph -> graph.getId(\"graph\").contains(CgmesSubset.STATE_VARIABLES.getIdentifier()))\n+            .findAny()\n+            .orElse(defaultSvContext)\n+            .getId(\"graph\");\n+    }\n+\n+    public void addStateVariablesToCgmes() {\n+        if (cgmes.isNodeBreaker()) {\n+            // TODO we need to export SV file data for NodeBraker\n+            LOG.warn(\"NodeBreaker view require further investigation to map correctly Topological Nodes\");\n+            return;\n+        }\n+        // Clear the previous SV data in CGMES model\n+        // and fill it with the Network current state values\n+        cgmes.clear(CgmesSubset.STATE_VARIABLES);\n+\n+        if (cimVersion != 14) {\n+            addModelDescriptionToCgmes();\n+            addTopologicalIslandsToCgmes();\n+        }\n+\n+        addVoltagesForTopologicalNodes();\n+\n+        addVoltagesForBoundaryNodes();\n+\n+        addPowerFlowToCgmes();\n \n+        addShuntCompensatorSectionsToCgmes();\n+\n+        addTapStepToCgmes();\n+\n+        addStatusToCgmes();\n+    }\n+\n+    private void addVoltagesForTopologicalNodes() {\n         PropertyBags voltages = new PropertyBags();\n-        for (Bus b : n.getBusBreakerView().getBuses()) {\n+        // add voltages for TpNodes existing in the Model\n+        for (PropertyBag tn : cgmes.topologicalNodes()) {\n+            Bus b = n.getBusBreakerView().getBus(tn.getId(CgmesNames.TOPOLOGICAL_NODE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMyNTQ4Mw=="}, "originalCommit": {"oid": "8c5803a57c016ccc073c447f2f0b81bf799fd123"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTkyOTMzOnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDozODo1MlrOFyWCSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOToyNjoxOVrOFzfykA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMzNDE1NQ==", "bodyText": "Why are you wrapping it in unmodifiableList? It should work with Arrays.asList(...).forEach(...)", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r388334155", "createdAt": "2020-03-05T14:38:52Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +210,109 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : n.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Collections.unmodifiableList(Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3())).forEach(leg -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c5803a57c016ccc073c447f2f0b81bf799fd123"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0MjU0NA==", "bodyText": "you're right, we don't keep the object here, the list is already immutable. I'll clean out the 'unmodifiable'", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r389542544", "createdAt": "2020-03-09T09:26:19Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +210,109 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : n.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Collections.unmodifiableList(Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3())).forEach(leg -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMzNDE1NQ=="}, "originalCommit": {"oid": "8c5803a57c016ccc073c447f2f0b81bf799fd123"}, "originalPosition": 221}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjA3MjAxOnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNToxMjoyMVrOFyXbag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTozMDo1N1rOFzf8YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM1Njk3MA==", "bodyText": "Does the case c.getId() == null happen? If not, it may not be necessary to test it.", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r388356970", "createdAt": "2020-03-05T15:12:21Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +210,109 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : n.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Collections.unmodifiableList(Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3())).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getPhaseTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.phaseTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                } else if (leg.getRatioTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getRatioTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.ratioTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                }\n+            });\n+        }\n+\n+        cgmes.add(originalSVcontext, \"SvTapStep\", tapSteps);\n+    }\n+\n+    private void addStatusToCgmes() {\n+        // create SvStatus, iterate on Connectables, check Terminal status, add\n+        // to SvStatus\n+        PropertyBags svStatus = new PropertyBags();\n+        Set<String> addedConnectables = new HashSet<>();\n+        for (VoltageLevel v : n.getVoltageLevels()) {\n+            for (Connectable<?> c : v.getConnectables()) {\n+                // need to check if connectable was already added\n+                if (!addedConnectables.contains(c.getId())) {\n+                    addedConnectables.add(c.getId());\n+                    if (c.getId() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c5803a57c016ccc073c447f2f0b81bf799fd123"}, "originalPosition": 247}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0NTA1Nw==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r389545057", "createdAt": "2020-03-09T09:30:57Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +210,109 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : n.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Collections.unmodifiableList(Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3())).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getPhaseTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.phaseTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                } else if (leg.getRatioTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getRatioTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.ratioTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                }\n+            });\n+        }\n+\n+        cgmes.add(originalSVcontext, \"SvTapStep\", tapSteps);\n+    }\n+\n+    private void addStatusToCgmes() {\n+        // create SvStatus, iterate on Connectables, check Terminal status, add\n+        // to SvStatus\n+        PropertyBags svStatus = new PropertyBags();\n+        Set<String> addedConnectables = new HashSet<>();\n+        for (VoltageLevel v : n.getVoltageLevels()) {\n+            for (Connectable<?> c : v.getConnectables()) {\n+                // need to check if connectable was already added\n+                if (!addedConnectables.contains(c.getId())) {\n+                    addedConnectables.add(c.getId());\n+                    if (c.getId() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM1Njk3MA=="}, "originalCommit": {"oid": "8c5803a57c016ccc073c447f2f0b81bf799fd123"}, "originalPosition": 247}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjA3ODc0OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNToxMzo0NlrOFyXfeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTozMjozMVrOFzf_ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM1ODAxMA==", "bodyText": "Again, I don't think this case can happen (in IIDM, when a connectable is created, at least one terminal is created with it).", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r388358010", "createdAt": "2020-03-05T15:13:46Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +210,109 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : n.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Collections.unmodifiableList(Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3())).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getPhaseTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.phaseTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                } else if (leg.getRatioTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getRatioTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.ratioTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                }\n+            });\n+        }\n+\n+        cgmes.add(originalSVcontext, \"SvTapStep\", tapSteps);\n+    }\n+\n+    private void addStatusToCgmes() {\n+        // create SvStatus, iterate on Connectables, check Terminal status, add\n+        // to SvStatus\n+        PropertyBags svStatus = new PropertyBags();\n+        Set<String> addedConnectables = new HashSet<>();\n+        for (VoltageLevel v : n.getVoltageLevels()) {\n+            for (Connectable<?> c : v.getConnectables()) {\n+                // need to check if connectable was already added\n+                if (!addedConnectables.contains(c.getId())) {\n+                    addedConnectables.add(c.getId());\n+                    if (c.getId() != null) {\n+                        PropertyBag p = new PropertyBag(SV_SVSTATUS_PROPERTIES);\n+                        for (Terminal t : c.getTerminals()) {\n+                            if (t == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c5803a57c016ccc073c447f2f0b81bf799fd123"}, "originalPosition": 250}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0NTg4Ng==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r389545886", "createdAt": "2020-03-09T09:32:31Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +210,109 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : n.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Collections.unmodifiableList(Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3())).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getPhaseTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.phaseTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                } else if (leg.getRatioTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getRatioTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.ratioTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                }\n+            });\n+        }\n+\n+        cgmes.add(originalSVcontext, \"SvTapStep\", tapSteps);\n+    }\n+\n+    private void addStatusToCgmes() {\n+        // create SvStatus, iterate on Connectables, check Terminal status, add\n+        // to SvStatus\n+        PropertyBags svStatus = new PropertyBags();\n+        Set<String> addedConnectables = new HashSet<>();\n+        for (VoltageLevel v : n.getVoltageLevels()) {\n+            for (Connectable<?> c : v.getConnectables()) {\n+                // need to check if connectable was already added\n+                if (!addedConnectables.contains(c.getId())) {\n+                    addedConnectables.add(c.getId());\n+                    if (c.getId() != null) {\n+                        PropertyBag p = new PropertyBag(SV_SVSTATUS_PROPERTIES);\n+                        for (Terminal t : c.getTerminals()) {\n+                            if (t == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM1ODAxMA=="}, "originalCommit": {"oid": "8c5803a57c016ccc073c447f2f0b81bf799fd123"}, "originalPosition": 250}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjE2MDc4OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNTozMjo0NVrOFyYR8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTozNDoxM1rOFzgC3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM3MDkyOQ==", "bodyText": "can be static", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r388370929", "createdAt": "2020-03-05T15:32:45Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -127,22 +326,115 @@ private static PropertyBag createPowerFlowProperties(CgmesModel cgmes, Terminal\n         return p;\n     }\n \n+    // added TopologicalIsland as it was in cgmes : original topology is\n+    // preserved.\n+    private void addTopologicalIslandsToCgmes() {\n+        if (!originalTopologicalIslands.isEmpty()) {\n+            // For properties such as \"cim:TopologicalIsland.TopologicalNodes\", which might\n+            // have arbitrary number of values, SPARQL will return multiple result sets.\n+            // All properties values will be equal, except the multiValued property\n+            // TopologicalNodes.\n+            // Also, there can be > 1 TopologicalIsland, so we need to re-group PropertyBags\n+            // by TopologicalIsland ID.\n+            Map<String, PropertyBags> byTopologicalIslandId = new HashMap<>();\n+            originalTopologicalIslands.forEach(pb -> {\n+                String island = pb.getId(CgmesNames.TOPOLOGICAL_ISLAND);\n+                if (byTopologicalIslandId.keySet().contains(island)) {\n+                    byTopologicalIslandId.get(island).add(pb);\n+                } else {\n+                    PropertyBags pbs = new PropertyBags();\n+                    pbs.add(pb);\n+                    byTopologicalIslandId.put(island, pbs);\n+                }\n+            });\n+            // now we can process all TPNodes from each island, and put them in one\n+            // multivaluedProperty.\n+            PropertyBags topologicalIslands = new PropertyBags();\n+            byTopologicalIslandId.values().forEach(value -> {\n+                PropertyBag topologicalIsland = new PropertyBag(SV_TOPOLOGICALISLAND_PROPERTIES);\n+                topologicalIsland.setClassPropertyNames(Arrays.asList(CgmesNames.NAME));\n+                topologicalIsland.setMultivaluedProperty(Arrays.asList(\"TopologicalNodes\"));\n+                topologicalIsland.put(CgmesNames.NAME, value.get(0).getId(\"name\"));\n+                topologicalIsland.put(CgmesNames.ANGLEREF_TOPOLOGICALNODE,\n+                    value.get(0).getId(CgmesNames.ANGLEREF_TOPOLOGICALNODE));\n+                topologicalIsland.put(CgmesNames.TOPOLOGICAL_NODES,\n+                    getMultivaluedProperty(value, CgmesNames.TOPOLOGICAL_NODES));\n+                topologicalIslands.add(topologicalIsland);\n+            });\n+            cgmes.add(originalSVcontext, CgmesNames.TOPOLOGICAL_ISLAND, topologicalIslands);\n+        }\n+    }\n+\n+    // Added full model data with proper profile (StateVariables)\n+    // FullModel is defined in ModelDescription:\n+    // http://iec.ch/TC57/61970-552/ModelDescription/1#\n+    private void addModelDescriptionToCgmes() {\n+        PropertyBags fullModelSV = new PropertyBags();\n+        // for properties such as \"md:Model.DependentOn\" which might have arbitrary\n+        // number of values, SPARQL will return multiple result sets.\n+        // All are equal, except the multiValued property value.\n+        if (!originalFullModel.isEmpty()) {\n+            PropertyBag newModelDescription = new PropertyBag(SV_FULLMODEL_PROPERTIES);\n+            newModelDescription\n+                .setClassPropertyNames(\n+                    Arrays.asList(CgmesNames.SCENARIO_TIME, CgmesNames.CREATED, CgmesNames.DESCRIPTION,\n+                        CgmesNames.VERSION, CgmesNames.DEPENDENT_ON, CgmesNames.PROFILE,\n+                        CgmesNames.MODELING_AUTHORITY_SET));\n+            newModelDescription.setMultivaluedProperty(Arrays.asList(CgmesNames.DEPENDENT_ON));\n+            newModelDescription.put(CgmesNames.SCENARIO_TIME, originalFullModel.get(0).getId(\"scenarioTime\"));\n+            newModelDescription.put(CgmesNames.CREATED, originalFullModel.get(0).getId(\"created\"));\n+            newModelDescription.put(CgmesNames.DESCRIPTION, originalFullModel.get(0).getId(\"description\"));\n+            newModelDescription.put(CgmesNames.VERSION, originalFullModel.get(0).getId(\"version\"));\n+            newModelDescription.put(CgmesNames.DEPENDENT_ON,\n+                getMultivaluedProperty(originalFullModel, \"DependentOn\"));\n+            newModelDescription.put(CgmesNames.PROFILE, originalFullModel.get(0).getId(\"profile\"));\n+            newModelDescription.put(CgmesNames.MODELING_AUTHORITY_SET,\n+                originalFullModel.get(0).getId(\"modelingAuthoritySet\"));\n+            fullModelSV.add(newModelDescription);\n+            cgmes.add(originalSVcontext, CgmesNames.FULL_MODEL, fullModelSV);\n+        }\n+    }\n+\n+    private String getMultivaluedProperty(PropertyBags pb, String multivaluedPropertyName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c5803a57c016ccc073c447f2f0b81bf799fd123"}, "originalPosition": 402}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0NjcxNg==", "bodyText": "Done. Eventually, we removed the method at all, as we realized it could be done using existing methods PropertyBags.pluckLocals()", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r389546716", "createdAt": "2020-03-09T09:34:13Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -127,22 +326,115 @@ private static PropertyBag createPowerFlowProperties(CgmesModel cgmes, Terminal\n         return p;\n     }\n \n+    // added TopologicalIsland as it was in cgmes : original topology is\n+    // preserved.\n+    private void addTopologicalIslandsToCgmes() {\n+        if (!originalTopologicalIslands.isEmpty()) {\n+            // For properties such as \"cim:TopologicalIsland.TopologicalNodes\", which might\n+            // have arbitrary number of values, SPARQL will return multiple result sets.\n+            // All properties values will be equal, except the multiValued property\n+            // TopologicalNodes.\n+            // Also, there can be > 1 TopologicalIsland, so we need to re-group PropertyBags\n+            // by TopologicalIsland ID.\n+            Map<String, PropertyBags> byTopologicalIslandId = new HashMap<>();\n+            originalTopologicalIslands.forEach(pb -> {\n+                String island = pb.getId(CgmesNames.TOPOLOGICAL_ISLAND);\n+                if (byTopologicalIslandId.keySet().contains(island)) {\n+                    byTopologicalIslandId.get(island).add(pb);\n+                } else {\n+                    PropertyBags pbs = new PropertyBags();\n+                    pbs.add(pb);\n+                    byTopologicalIslandId.put(island, pbs);\n+                }\n+            });\n+            // now we can process all TPNodes from each island, and put them in one\n+            // multivaluedProperty.\n+            PropertyBags topologicalIslands = new PropertyBags();\n+            byTopologicalIslandId.values().forEach(value -> {\n+                PropertyBag topologicalIsland = new PropertyBag(SV_TOPOLOGICALISLAND_PROPERTIES);\n+                topologicalIsland.setClassPropertyNames(Arrays.asList(CgmesNames.NAME));\n+                topologicalIsland.setMultivaluedProperty(Arrays.asList(\"TopologicalNodes\"));\n+                topologicalIsland.put(CgmesNames.NAME, value.get(0).getId(\"name\"));\n+                topologicalIsland.put(CgmesNames.ANGLEREF_TOPOLOGICALNODE,\n+                    value.get(0).getId(CgmesNames.ANGLEREF_TOPOLOGICALNODE));\n+                topologicalIsland.put(CgmesNames.TOPOLOGICAL_NODES,\n+                    getMultivaluedProperty(value, CgmesNames.TOPOLOGICAL_NODES));\n+                topologicalIslands.add(topologicalIsland);\n+            });\n+            cgmes.add(originalSVcontext, CgmesNames.TOPOLOGICAL_ISLAND, topologicalIslands);\n+        }\n+    }\n+\n+    // Added full model data with proper profile (StateVariables)\n+    // FullModel is defined in ModelDescription:\n+    // http://iec.ch/TC57/61970-552/ModelDescription/1#\n+    private void addModelDescriptionToCgmes() {\n+        PropertyBags fullModelSV = new PropertyBags();\n+        // for properties such as \"md:Model.DependentOn\" which might have arbitrary\n+        // number of values, SPARQL will return multiple result sets.\n+        // All are equal, except the multiValued property value.\n+        if (!originalFullModel.isEmpty()) {\n+            PropertyBag newModelDescription = new PropertyBag(SV_FULLMODEL_PROPERTIES);\n+            newModelDescription\n+                .setClassPropertyNames(\n+                    Arrays.asList(CgmesNames.SCENARIO_TIME, CgmesNames.CREATED, CgmesNames.DESCRIPTION,\n+                        CgmesNames.VERSION, CgmesNames.DEPENDENT_ON, CgmesNames.PROFILE,\n+                        CgmesNames.MODELING_AUTHORITY_SET));\n+            newModelDescription.setMultivaluedProperty(Arrays.asList(CgmesNames.DEPENDENT_ON));\n+            newModelDescription.put(CgmesNames.SCENARIO_TIME, originalFullModel.get(0).getId(\"scenarioTime\"));\n+            newModelDescription.put(CgmesNames.CREATED, originalFullModel.get(0).getId(\"created\"));\n+            newModelDescription.put(CgmesNames.DESCRIPTION, originalFullModel.get(0).getId(\"description\"));\n+            newModelDescription.put(CgmesNames.VERSION, originalFullModel.get(0).getId(\"version\"));\n+            newModelDescription.put(CgmesNames.DEPENDENT_ON,\n+                getMultivaluedProperty(originalFullModel, \"DependentOn\"));\n+            newModelDescription.put(CgmesNames.PROFILE, originalFullModel.get(0).getId(\"profile\"));\n+            newModelDescription.put(CgmesNames.MODELING_AUTHORITY_SET,\n+                originalFullModel.get(0).getId(\"modelingAuthoritySet\"));\n+            fullModelSV.add(newModelDescription);\n+            cgmes.add(originalSVcontext, CgmesNames.FULL_MODEL, fullModelSV);\n+        }\n+    }\n+\n+    private String getMultivaluedProperty(PropertyBags pb, String multivaluedPropertyName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM3MDkyOQ=="}, "originalCommit": {"oid": "8c5803a57c016ccc073c447f2f0b81bf799fd123"}, "originalPosition": 402}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjM2MjQ3OnYy", "diffSide": "RIGHT", "path": "triple-store/triple-store-api/src/main/java/com/powsybl/triplestore/api/PropertyBag.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjoxOToxOFrOFyaQzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTo1NjozMFrOFzgwEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQwMzQwNg==", "bodyText": "set this as a copy to be protected against unsafe changes:\nthis.multiValuedPropertyNames = new ArrayList<>(Objects.requireNonNull(multiValuePropertyNames));", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r388403406", "createdAt": "2020-03-05T16:19:18Z", "author": {"login": "miovd"}, "path": "triple-store/triple-store-api/src/main/java/com/powsybl/triplestore/api/PropertyBag.java", "diffHunk": "@@ -195,10 +197,19 @@ public boolean isClassProperty(String name) {\n         return classPropertyNames.contains(name);\n     }\n \n+    public void setMultivaluedProperty(List<String> multiValuedPropertyNames) {\n+        this.multiValuedPropertyNames = Objects.requireNonNull(multiValuedPropertyNames);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c5803a57c016ccc073c447f2f0b81bf799fd123"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU1ODI4OQ==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r389558289", "createdAt": "2020-03-09T09:56:30Z", "author": {"login": "kaltakovae"}, "path": "triple-store/triple-store-api/src/main/java/com/powsybl/triplestore/api/PropertyBag.java", "diffHunk": "@@ -195,10 +197,19 @@ public boolean isClassProperty(String name) {\n         return classPropertyNames.contains(name);\n     }\n \n+    public void setMultivaluedProperty(List<String> multiValuedPropertyNames) {\n+        this.multiValuedPropertyNames = Objects.requireNonNull(multiValuedPropertyNames);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQwMzQwNg=="}, "originalCommit": {"oid": "8c5803a57c016ccc073c447f2f0b81bf799fd123"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODk0MjAwOnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo0MTozNlrOFyynQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMDowMToyNlrOFzg6Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwMjM2OA==", "bodyText": "I don't think this is really needed.", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r388802368", "createdAt": "2020-03-06T09:41:36Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -61,30 +150,51 @@ public static void add(Network n, CgmesModel cgmes) {\n             }\n         }\n         for (Generator g : n.getGenerators()) {\n-            PropertyBag p = createPowerFlowProperties(cgmes, g.getTerminal());\n+            PropertyBag p = createPowerFlowProperties(g.getTerminal());\n             if (p != null) {\n                 powerFlows.add(p);\n             }\n         }\n         for (ShuntCompensator s : n.getShuntCompensators()) {\n-            PropertyBag p = createPowerFlowProperties(cgmes, s.getTerminal());\n+            PropertyBag p = createPowerFlowProperties(s.getTerminal());\n             if (p != null) {\n-                powerFlows.add(createPowerFlowProperties(cgmes, s.getTerminal()));\n+                powerFlows.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvPowerFlow\", powerFlows);\n \n+        // PowerFlow at boundaries set as it was in original cgmes.\n+        for (PropertyBag terminal : originalTerminals) {\n+            Objects.requireNonNull(terminal);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c7c81771f354c7c36c0290e364726d10162b25"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU2MDkwNw==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r389560907", "createdAt": "2020-03-09T10:01:26Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -61,30 +150,51 @@ public static void add(Network n, CgmesModel cgmes) {\n             }\n         }\n         for (Generator g : n.getGenerators()) {\n-            PropertyBag p = createPowerFlowProperties(cgmes, g.getTerminal());\n+            PropertyBag p = createPowerFlowProperties(g.getTerminal());\n             if (p != null) {\n                 powerFlows.add(p);\n             }\n         }\n         for (ShuntCompensator s : n.getShuntCompensators()) {\n-            PropertyBag p = createPowerFlowProperties(cgmes, s.getTerminal());\n+            PropertyBag p = createPowerFlowProperties(s.getTerminal());\n             if (p != null) {\n-                powerFlows.add(createPowerFlowProperties(cgmes, s.getTerminal()));\n+                powerFlows.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvPowerFlow\", powerFlows);\n \n+        // PowerFlow at boundaries set as it was in original cgmes.\n+        for (PropertyBag terminal : originalTerminals) {\n+            Objects.requireNonNull(terminal);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwMjM2OA=="}, "originalCommit": {"oid": "24c7c81771f354c7c36c0290e364726d10162b25"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODk1MzIxOnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo0NTowMlrOFyyuSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMDowOTo0OFrOFzhK3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwNDE2OQ==", "bodyText": "Consider replacing String.valueOf by Boolean.toString", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r388804169", "createdAt": "2020-03-06T09:45:02Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +210,109 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : n.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Collections.unmodifiableList(Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3())).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getPhaseTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.phaseTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                } else if (leg.getRatioTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getRatioTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.ratioTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                }\n+            });\n+        }\n+\n+        cgmes.add(originalSVcontext, \"SvTapStep\", tapSteps);\n+    }\n+\n+    private void addStatusToCgmes() {\n+        // create SvStatus, iterate on Connectables, check Terminal status, add\n+        // to SvStatus\n+        PropertyBags svStatus = new PropertyBags();\n+        Set<String> addedConnectables = new HashSet<>();\n+        for (VoltageLevel v : n.getVoltageLevels()) {\n+            for (Connectable<?> c : v.getConnectables()) {\n+                // need to check if connectable was already added\n+                if (!addedConnectables.contains(c.getId())) {\n+                    addedConnectables.add(c.getId());\n+                    if (c.getId() != null) {\n+                        PropertyBag p = new PropertyBag(SV_SVSTATUS_PROPERTIES);\n+                        for (Terminal t : c.getTerminals()) {\n+                            if (t == null) {\n+                                continue;\n+                            }\n+                            p.put(IN_SERVICE, String.valueOf(t.isConnected()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c7c81771f354c7c36c0290e364726d10162b25"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU2NTE0OQ==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r389565149", "createdAt": "2020-03-09T10:09:48Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +210,109 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : n.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Collections.unmodifiableList(Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3())).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getPhaseTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.phaseTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                } else if (leg.getRatioTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getRatioTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.ratioTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                }\n+            });\n+        }\n+\n+        cgmes.add(originalSVcontext, \"SvTapStep\", tapSteps);\n+    }\n+\n+    private void addStatusToCgmes() {\n+        // create SvStatus, iterate on Connectables, check Terminal status, add\n+        // to SvStatus\n+        PropertyBags svStatus = new PropertyBags();\n+        Set<String> addedConnectables = new HashSet<>();\n+        for (VoltageLevel v : n.getVoltageLevels()) {\n+            for (Connectable<?> c : v.getConnectables()) {\n+                // need to check if connectable was already added\n+                if (!addedConnectables.contains(c.getId())) {\n+                    addedConnectables.add(c.getId());\n+                    if (c.getId() != null) {\n+                        PropertyBag p = new PropertyBag(SV_SVSTATUS_PROPERTIES);\n+                        for (Terminal t : c.getTerminals()) {\n+                            if (t == null) {\n+                                continue;\n+                            }\n+                            p.put(IN_SERVICE, String.valueOf(t.isConnected()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwNDE2OQ=="}, "originalCommit": {"oid": "24c7c81771f354c7c36c0290e364726d10162b25"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODk2MDUwOnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo0NzowOVrOFyyysw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMTowMzo1MlrOFzizlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwNTI5OQ==", "bodyText": "Use the stream API to collect boundadyNodes:\nList<String> boundaryNodes = cgmes.boundaryNodes().map(X::getId).collect(Collectors.toList());\n\nReplace X by the name of the class of node.", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r388805299", "createdAt": "2020-03-06T09:47:09Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +210,109 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : n.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Collections.unmodifiableList(Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3())).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getPhaseTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.phaseTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                } else if (leg.getRatioTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getRatioTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.ratioTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                }\n+            });\n+        }\n+\n+        cgmes.add(originalSVcontext, \"SvTapStep\", tapSteps);\n+    }\n+\n+    private void addStatusToCgmes() {\n+        // create SvStatus, iterate on Connectables, check Terminal status, add\n+        // to SvStatus\n+        PropertyBags svStatus = new PropertyBags();\n+        Set<String> addedConnectables = new HashSet<>();\n+        for (VoltageLevel v : n.getVoltageLevels()) {\n+            for (Connectable<?> c : v.getConnectables()) {\n+                // need to check if connectable was already added\n+                if (!addedConnectables.contains(c.getId())) {\n+                    addedConnectables.add(c.getId());\n+                    if (c.getId() != null) {\n+                        PropertyBag p = new PropertyBag(SV_SVSTATUS_PROPERTIES);\n+                        for (Terminal t : c.getTerminals()) {\n+                            if (t == null) {\n+                                continue;\n+                            }\n+                            p.put(IN_SERVICE, String.valueOf(t.isConnected()));\n+                        }\n+                        p.put(CgmesNames.CONDUCTING_EQUIPMENT, c.getId());\n+                        svStatus.add(p);\n+                    }\n+                }\n+            }\n+        }\n+\n+        // SvStatus at boundaries set as it was in original cgmes.\n+        for (PropertyBag terminal : originalTerminals) {\n+            Objects.requireNonNull(terminal);\n+            if (terminal.getId(\"SvStatus\") == null) {\n+                continue;\n+            }\n+            boundaryNodesFromDanglingLines.values().forEach(value -> {\n+                if (terminal.getId(CgmesNames.TOPOLOGICAL_NODE).equals(value)) {\n+                    PropertyBag p = new PropertyBag(SV_SVSTATUS_PROPERTIES);\n+                    p.put(IN_SERVICE, terminal.getId(IN_SERVICE));\n+                    p.put(CgmesNames.CONDUCTING_EQUIPMENT, terminal.getId(CgmesNames.CONDUCTING_EQUIPMENT));\n+                    svStatus.add(p);\n+                }\n+            });\n+        }\n+        cgmes.add(originalSVcontext, \"SvStatus\", svStatus);\n+    }\n+\n+    private Map<String, String> boundaryNodesFromDanglingLines() {\n+        Map<String, String> nodesFromLines = new HashMap<>();\n+        List<String> boundaryNodes = new ArrayList<>();\n+        cgmes.boundaryNodes().forEach(node -> boundaryNodes.add(node.getId(\"Node\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c7c81771f354c7c36c0290e364726d10162b25"}, "originalPosition": 283}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU5MTk1OA==", "bodyText": "Done. Replaced by PropertyBags.pluckLocals(String property)", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r389591958", "createdAt": "2020-03-09T11:03:52Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +210,109 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : n.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Collections.unmodifiableList(Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3())).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getPhaseTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.phaseTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                } else if (leg.getRatioTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getRatioTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.ratioTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                }\n+            });\n+        }\n+\n+        cgmes.add(originalSVcontext, \"SvTapStep\", tapSteps);\n+    }\n+\n+    private void addStatusToCgmes() {\n+        // create SvStatus, iterate on Connectables, check Terminal status, add\n+        // to SvStatus\n+        PropertyBags svStatus = new PropertyBags();\n+        Set<String> addedConnectables = new HashSet<>();\n+        for (VoltageLevel v : n.getVoltageLevels()) {\n+            for (Connectable<?> c : v.getConnectables()) {\n+                // need to check if connectable was already added\n+                if (!addedConnectables.contains(c.getId())) {\n+                    addedConnectables.add(c.getId());\n+                    if (c.getId() != null) {\n+                        PropertyBag p = new PropertyBag(SV_SVSTATUS_PROPERTIES);\n+                        for (Terminal t : c.getTerminals()) {\n+                            if (t == null) {\n+                                continue;\n+                            }\n+                            p.put(IN_SERVICE, String.valueOf(t.isConnected()));\n+                        }\n+                        p.put(CgmesNames.CONDUCTING_EQUIPMENT, c.getId());\n+                        svStatus.add(p);\n+                    }\n+                }\n+            }\n+        }\n+\n+        // SvStatus at boundaries set as it was in original cgmes.\n+        for (PropertyBag terminal : originalTerminals) {\n+            Objects.requireNonNull(terminal);\n+            if (terminal.getId(\"SvStatus\") == null) {\n+                continue;\n+            }\n+            boundaryNodesFromDanglingLines.values().forEach(value -> {\n+                if (terminal.getId(CgmesNames.TOPOLOGICAL_NODE).equals(value)) {\n+                    PropertyBag p = new PropertyBag(SV_SVSTATUS_PROPERTIES);\n+                    p.put(IN_SERVICE, terminal.getId(IN_SERVICE));\n+                    p.put(CgmesNames.CONDUCTING_EQUIPMENT, terminal.getId(CgmesNames.CONDUCTING_EQUIPMENT));\n+                    svStatus.add(p);\n+                }\n+            });\n+        }\n+        cgmes.add(originalSVcontext, \"SvStatus\", svStatus);\n+    }\n+\n+    private Map<String, String> boundaryNodesFromDanglingLines() {\n+        Map<String, String> nodesFromLines = new HashMap<>();\n+        List<String> boundaryNodes = new ArrayList<>();\n+        cgmes.boundaryNodes().forEach(node -> boundaryNodes.add(node.getId(\"Node\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwNTI5OQ=="}, "originalCommit": {"oid": "24c7c81771f354c7c36c0290e364726d10162b25"}, "originalPosition": 283}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODk3MjQzOnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo1MDozOFrOFyy52w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMTo1MDoxOVrOFzkBTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwNzEzMQ==", "bodyText": "Use the stream API to initialize list. If there is no stream() method in PropertyBags, you should consider to add one.", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r388807131", "createdAt": "2020-03-06T09:50:38Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -127,22 +326,115 @@ private static PropertyBag createPowerFlowProperties(CgmesModel cgmes, Terminal\n         return p;\n     }\n \n+    // added TopologicalIsland as it was in cgmes : original topology is\n+    // preserved.\n+    private void addTopologicalIslandsToCgmes() {\n+        if (!originalTopologicalIslands.isEmpty()) {\n+            // For properties such as \"cim:TopologicalIsland.TopologicalNodes\", which might\n+            // have arbitrary number of values, SPARQL will return multiple result sets.\n+            // All properties values will be equal, except the multiValued property\n+            // TopologicalNodes.\n+            // Also, there can be > 1 TopologicalIsland, so we need to re-group PropertyBags\n+            // by TopologicalIsland ID.\n+            Map<String, PropertyBags> byTopologicalIslandId = new HashMap<>();\n+            originalTopologicalIslands.forEach(pb -> {\n+                String island = pb.getId(CgmesNames.TOPOLOGICAL_ISLAND);\n+                if (byTopologicalIslandId.keySet().contains(island)) {\n+                    byTopologicalIslandId.get(island).add(pb);\n+                } else {\n+                    PropertyBags pbs = new PropertyBags();\n+                    pbs.add(pb);\n+                    byTopologicalIslandId.put(island, pbs);\n+                }\n+            });\n+            // now we can process all TPNodes from each island, and put them in one\n+            // multivaluedProperty.\n+            PropertyBags topologicalIslands = new PropertyBags();\n+            byTopologicalIslandId.values().forEach(value -> {\n+                PropertyBag topologicalIsland = new PropertyBag(SV_TOPOLOGICALISLAND_PROPERTIES);\n+                topologicalIsland.setClassPropertyNames(Arrays.asList(CgmesNames.NAME));\n+                topologicalIsland.setMultivaluedProperty(Arrays.asList(\"TopologicalNodes\"));\n+                topologicalIsland.put(CgmesNames.NAME, value.get(0).getId(\"name\"));\n+                topologicalIsland.put(CgmesNames.ANGLEREF_TOPOLOGICALNODE,\n+                    value.get(0).getId(CgmesNames.ANGLEREF_TOPOLOGICALNODE));\n+                topologicalIsland.put(CgmesNames.TOPOLOGICAL_NODES,\n+                    getMultivaluedProperty(value, CgmesNames.TOPOLOGICAL_NODES));\n+                topologicalIslands.add(topologicalIsland);\n+            });\n+            cgmes.add(originalSVcontext, CgmesNames.TOPOLOGICAL_ISLAND, topologicalIslands);\n+        }\n+    }\n+\n+    // Added full model data with proper profile (StateVariables)\n+    // FullModel is defined in ModelDescription:\n+    // http://iec.ch/TC57/61970-552/ModelDescription/1#\n+    private void addModelDescriptionToCgmes() {\n+        PropertyBags fullModelSV = new PropertyBags();\n+        // for properties such as \"md:Model.DependentOn\" which might have arbitrary\n+        // number of values, SPARQL will return multiple result sets.\n+        // All are equal, except the multiValued property value.\n+        if (!originalFullModel.isEmpty()) {\n+            PropertyBag newModelDescription = new PropertyBag(SV_FULLMODEL_PROPERTIES);\n+            newModelDescription\n+                .setClassPropertyNames(\n+                    Arrays.asList(CgmesNames.SCENARIO_TIME, CgmesNames.CREATED, CgmesNames.DESCRIPTION,\n+                        CgmesNames.VERSION, CgmesNames.DEPENDENT_ON, CgmesNames.PROFILE,\n+                        CgmesNames.MODELING_AUTHORITY_SET));\n+            newModelDescription.setMultivaluedProperty(Arrays.asList(CgmesNames.DEPENDENT_ON));\n+            newModelDescription.put(CgmesNames.SCENARIO_TIME, originalFullModel.get(0).getId(\"scenarioTime\"));\n+            newModelDescription.put(CgmesNames.CREATED, originalFullModel.get(0).getId(\"created\"));\n+            newModelDescription.put(CgmesNames.DESCRIPTION, originalFullModel.get(0).getId(\"description\"));\n+            newModelDescription.put(CgmesNames.VERSION, originalFullModel.get(0).getId(\"version\"));\n+            newModelDescription.put(CgmesNames.DEPENDENT_ON,\n+                getMultivaluedProperty(originalFullModel, \"DependentOn\"));\n+            newModelDescription.put(CgmesNames.PROFILE, originalFullModel.get(0).getId(\"profile\"));\n+            newModelDescription.put(CgmesNames.MODELING_AUTHORITY_SET,\n+                originalFullModel.get(0).getId(\"modelingAuthoritySet\"));\n+            fullModelSV.add(newModelDescription);\n+            cgmes.add(originalSVcontext, CgmesNames.FULL_MODEL, fullModelSV);\n+        }\n+    }\n+\n+    private String getMultivaluedProperty(PropertyBags pb, String multivaluedPropertyName) {\n+        // for properties such as \"md:Model.DependentOn\" which might have arbitrary\n+        // number of values, SPARQL will return multiple result sets. We will loop\n+        // through all and collect all values for multiValued property.\n+        List<String> list = new ArrayList<>();\n+        pb.forEach(m -> list.add(m.getId(multivaluedPropertyName)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c7c81771f354c7c36c0290e364726d10162b25"}, "originalPosition": 407}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYxMTg1Mg==", "bodyText": "Done. PropertyBags.pluckLocals(String property) does what we need, I missed it initially.", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r389611852", "createdAt": "2020-03-09T11:50:19Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -127,22 +326,115 @@ private static PropertyBag createPowerFlowProperties(CgmesModel cgmes, Terminal\n         return p;\n     }\n \n+    // added TopologicalIsland as it was in cgmes : original topology is\n+    // preserved.\n+    private void addTopologicalIslandsToCgmes() {\n+        if (!originalTopologicalIslands.isEmpty()) {\n+            // For properties such as \"cim:TopologicalIsland.TopologicalNodes\", which might\n+            // have arbitrary number of values, SPARQL will return multiple result sets.\n+            // All properties values will be equal, except the multiValued property\n+            // TopologicalNodes.\n+            // Also, there can be > 1 TopologicalIsland, so we need to re-group PropertyBags\n+            // by TopologicalIsland ID.\n+            Map<String, PropertyBags> byTopologicalIslandId = new HashMap<>();\n+            originalTopologicalIslands.forEach(pb -> {\n+                String island = pb.getId(CgmesNames.TOPOLOGICAL_ISLAND);\n+                if (byTopologicalIslandId.keySet().contains(island)) {\n+                    byTopologicalIslandId.get(island).add(pb);\n+                } else {\n+                    PropertyBags pbs = new PropertyBags();\n+                    pbs.add(pb);\n+                    byTopologicalIslandId.put(island, pbs);\n+                }\n+            });\n+            // now we can process all TPNodes from each island, and put them in one\n+            // multivaluedProperty.\n+            PropertyBags topologicalIslands = new PropertyBags();\n+            byTopologicalIslandId.values().forEach(value -> {\n+                PropertyBag topologicalIsland = new PropertyBag(SV_TOPOLOGICALISLAND_PROPERTIES);\n+                topologicalIsland.setClassPropertyNames(Arrays.asList(CgmesNames.NAME));\n+                topologicalIsland.setMultivaluedProperty(Arrays.asList(\"TopologicalNodes\"));\n+                topologicalIsland.put(CgmesNames.NAME, value.get(0).getId(\"name\"));\n+                topologicalIsland.put(CgmesNames.ANGLEREF_TOPOLOGICALNODE,\n+                    value.get(0).getId(CgmesNames.ANGLEREF_TOPOLOGICALNODE));\n+                topologicalIsland.put(CgmesNames.TOPOLOGICAL_NODES,\n+                    getMultivaluedProperty(value, CgmesNames.TOPOLOGICAL_NODES));\n+                topologicalIslands.add(topologicalIsland);\n+            });\n+            cgmes.add(originalSVcontext, CgmesNames.TOPOLOGICAL_ISLAND, topologicalIslands);\n+        }\n+    }\n+\n+    // Added full model data with proper profile (StateVariables)\n+    // FullModel is defined in ModelDescription:\n+    // http://iec.ch/TC57/61970-552/ModelDescription/1#\n+    private void addModelDescriptionToCgmes() {\n+        PropertyBags fullModelSV = new PropertyBags();\n+        // for properties such as \"md:Model.DependentOn\" which might have arbitrary\n+        // number of values, SPARQL will return multiple result sets.\n+        // All are equal, except the multiValued property value.\n+        if (!originalFullModel.isEmpty()) {\n+            PropertyBag newModelDescription = new PropertyBag(SV_FULLMODEL_PROPERTIES);\n+            newModelDescription\n+                .setClassPropertyNames(\n+                    Arrays.asList(CgmesNames.SCENARIO_TIME, CgmesNames.CREATED, CgmesNames.DESCRIPTION,\n+                        CgmesNames.VERSION, CgmesNames.DEPENDENT_ON, CgmesNames.PROFILE,\n+                        CgmesNames.MODELING_AUTHORITY_SET));\n+            newModelDescription.setMultivaluedProperty(Arrays.asList(CgmesNames.DEPENDENT_ON));\n+            newModelDescription.put(CgmesNames.SCENARIO_TIME, originalFullModel.get(0).getId(\"scenarioTime\"));\n+            newModelDescription.put(CgmesNames.CREATED, originalFullModel.get(0).getId(\"created\"));\n+            newModelDescription.put(CgmesNames.DESCRIPTION, originalFullModel.get(0).getId(\"description\"));\n+            newModelDescription.put(CgmesNames.VERSION, originalFullModel.get(0).getId(\"version\"));\n+            newModelDescription.put(CgmesNames.DEPENDENT_ON,\n+                getMultivaluedProperty(originalFullModel, \"DependentOn\"));\n+            newModelDescription.put(CgmesNames.PROFILE, originalFullModel.get(0).getId(\"profile\"));\n+            newModelDescription.put(CgmesNames.MODELING_AUTHORITY_SET,\n+                originalFullModel.get(0).getId(\"modelingAuthoritySet\"));\n+            fullModelSV.add(newModelDescription);\n+            cgmes.add(originalSVcontext, CgmesNames.FULL_MODEL, fullModelSV);\n+        }\n+    }\n+\n+    private String getMultivaluedProperty(PropertyBags pb, String multivaluedPropertyName) {\n+        // for properties such as \"md:Model.DependentOn\" which might have arbitrary\n+        // number of values, SPARQL will return multiple result sets. We will loop\n+        // through all and collect all values for multiValued property.\n+        List<String> list = new ArrayList<>();\n+        pb.forEach(m -> list.add(m.getId(multivaluedPropertyName)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwNzEzMQ=="}, "originalCommit": {"oid": "24c7c81771f354c7c36c0290e364726d10162b25"}, "originalPosition": 407}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODk4Mjk3OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-model/src/main/java/com/powsybl/cgmes/model/CgmesSubset.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo1MzozNFrOFyzAGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowNTozN1rOFzpwiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwODczMQ==", "bodyText": "I think you should make this map static. Change also the case of profile to upper case.", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r388808731", "createdAt": "2020-03-06T09:53:34Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-model/src/main/java/com/powsybl/cgmes/model/CgmesSubset.java", "diffHunk": "@@ -71,11 +72,26 @@ public String getIdentifier() {\n         return identifier;\n     }\n \n+    public String getProfile() {\n+        return profileName;\n+    }\n+\n     public boolean isValidName(String contextName) {\n         return contextName.contains(validName0) || contextName.contains(validName1);\n     }\n \n     private static boolean isBoundary(String contextName) {\n         return contextName.contains(\"_BD\") || contextName.contains(\"BOUNDARY\");\n     }\n+\n+    private final String identifier;\n+    private final String validName0;\n+    private final String validName1;\n+    private String profileName;\n+    private final Map<String, String> profile = ImmutableMap.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c7c81771f354c7c36c0290e364726d10162b25"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwNTg2NQ==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r389705865", "createdAt": "2020-03-09T14:05:37Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-model/src/main/java/com/powsybl/cgmes/model/CgmesSubset.java", "diffHunk": "@@ -71,11 +72,26 @@ public String getIdentifier() {\n         return identifier;\n     }\n \n+    public String getProfile() {\n+        return profileName;\n+    }\n+\n     public boolean isValidName(String contextName) {\n         return contextName.contains(validName0) || contextName.contains(validName1);\n     }\n \n     private static boolean isBoundary(String contextName) {\n         return contextName.contains(\"_BD\") || contextName.contains(\"BOUNDARY\");\n     }\n+\n+    private final String identifier;\n+    private final String validName0;\n+    private final String validName1;\n+    private String profileName;\n+    private final Map<String, String> profile = ImmutableMap.of(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwODczMQ=="}, "originalCommit": {"oid": "24c7c81771f354c7c36c0290e364726d10162b25"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODk4Mzg0OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-model/src/main/java/com/powsybl/cgmes/model/CgmesSubset.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo1Mzo0OVrOFyzAlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzozNzowNFrOFznwnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwODg1Mg==", "bodyText": "should probably be final", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r388808852", "createdAt": "2020-03-06T09:53:49Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-model/src/main/java/com/powsybl/cgmes/model/CgmesSubset.java", "diffHunk": "@@ -71,11 +72,26 @@ public String getIdentifier() {\n         return identifier;\n     }\n \n+    public String getProfile() {\n+        return profileName;\n+    }\n+\n     public boolean isValidName(String contextName) {\n         return contextName.contains(validName0) || contextName.contains(validName1);\n     }\n \n     private static boolean isBoundary(String contextName) {\n         return contextName.contains(\"_BD\") || contextName.contains(\"BOUNDARY\");\n     }\n+\n+    private final String identifier;\n+    private final String validName0;\n+    private final String validName1;\n+    private String profileName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c7c81771f354c7c36c0290e364726d10162b25"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY3MzExOQ==", "bodyText": "Done. Eventually, we removed profileName at all.", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r389673119", "createdAt": "2020-03-09T13:37:04Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-model/src/main/java/com/powsybl/cgmes/model/CgmesSubset.java", "diffHunk": "@@ -71,11 +72,26 @@ public String getIdentifier() {\n         return identifier;\n     }\n \n+    public String getProfile() {\n+        return profileName;\n+    }\n+\n     public boolean isValidName(String contextName) {\n         return contextName.contains(validName0) || contextName.contains(validName1);\n     }\n \n     private static boolean isBoundary(String contextName) {\n         return contextName.contains(\"_BD\") || contextName.contains(\"BOUNDARY\");\n     }\n+\n+    private final String identifier;\n+    private final String validName0;\n+    private final String validName1;\n+    private String profileName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwODg1Mg=="}, "originalCommit": {"oid": "24c7c81771f354c7c36c0290e364726d10162b25"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODk4Njg4OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-model/src/main/resources/CIM14.sparql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo1NDo0MFrOFyzCTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzo1Nzo1OFrOFzpOoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwOTI5Mg==", "bodyText": "Fix indentation: do not use tabs", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r388809292", "createdAt": "2020-03-06T09:54:40Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-model/src/main/resources/CIM14.sparql", "diffHunk": "@@ -74,6 +81,10 @@ OPTIONAL { GRAPH ?graphSV {\n         cim:SvPowerFlow.Terminal ?Terminal ;\n         cim:SvPowerFlow.p ?p ;\n         cim:SvPowerFlow.q ?q\n+} OPTIONAL {?SvStatus\n+\t\ta cim:SvStatus ;\n+\t\tcim:SvStatus.ConductingEquipment ?ConductingEquipment ;\n+\t\tcim:SvStatus.inService ?inService . ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c7c81771f354c7c36c0290e364726d10162b25"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY5NzE4NQ==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r389697185", "createdAt": "2020-03-09T13:57:58Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-model/src/main/resources/CIM14.sparql", "diffHunk": "@@ -74,6 +81,10 @@ OPTIONAL { GRAPH ?graphSV {\n         cim:SvPowerFlow.Terminal ?Terminal ;\n         cim:SvPowerFlow.p ?p ;\n         cim:SvPowerFlow.q ?q\n+} OPTIONAL {?SvStatus\n+\t\ta cim:SvStatus ;\n+\t\tcim:SvStatus.ConductingEquipment ?ConductingEquipment ;\n+\t\tcim:SvStatus.inService ?inService . ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwOTI5Mg=="}, "originalCommit": {"oid": "24c7c81771f354c7c36c0290e364726d10162b25"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODk4Nzg2OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-model/src/main/resources/CIM16.sparql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo1NTowMFrOFyzC5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzo1ODowN1rOFzpPNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwOTQ0NQ==", "bodyText": "Same remark about tabs", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r388809445", "createdAt": "2020-03-06T09:55:00Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-model/src/main/resources/CIM16.sparql", "diffHunk": "@@ -144,6 +167,10 @@ OPTIONAL { GRAPH ?graphSV {\n         cim:SvPowerFlow.Terminal ?Terminal ;\n         cim:SvPowerFlow.p ?p ;\n         cim:SvPowerFlow.q ?q\n+} OPTIONAL {?SvStatus\n+\t\ta cim:SvStatus ;\n+\t\tcim:SvStatus.ConductingEquipment ?ConductingEquipment ;\n+\t\tcim:SvStatus.inService ?inService . ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c7c81771f354c7c36c0290e364726d10162b25"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY5NzMzMg==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r389697332", "createdAt": "2020-03-09T13:58:07Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-model/src/main/resources/CIM16.sparql", "diffHunk": "@@ -144,6 +167,10 @@ OPTIONAL { GRAPH ?graphSV {\n         cim:SvPowerFlow.Terminal ?Terminal ;\n         cim:SvPowerFlow.p ?p ;\n         cim:SvPowerFlow.q ?q\n+} OPTIONAL {?SvStatus\n+\t\ta cim:SvStatus ;\n+\t\tcim:SvStatus.ConductingEquipment ?ConductingEquipment ;\n+\t\tcim:SvStatus.inService ?inService . ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwOTQ0NQ=="}, "originalCommit": {"oid": "24c7c81771f354c7c36c0290e364726d10162b25"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODk4ODM2OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-model/src/main/resources/CIM16.sparql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo1NTowOVrOFyzDMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDoyNzowMlrOFzq4WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwOTUyMg==", "bodyText": "Same remakr", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r388809522", "createdAt": "2020-03-06T09:55:09Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-model/src/main/resources/CIM16.sparql", "diffHunk": "@@ -199,6 +226,16 @@ OPTIONAL { GRAPH ?graphSVT {\n }}\n }\n \n+# query: topologicalIslands\n+SELECT *\n+{ GRAPH ?graph { \n+\t?TopologicalIsland\n+\t\ta cim:TopologicalIsland ;\n+\t\tcim:IdentifiedObject.name ?name ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c7c81771f354c7c36c0290e364726d10162b25"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyNDI0OA==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r389724248", "createdAt": "2020-03-09T14:27:02Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-model/src/main/resources/CIM16.sparql", "diffHunk": "@@ -199,6 +226,16 @@ OPTIONAL { GRAPH ?graphSVT {\n }}\n }\n \n+# query: topologicalIslands\n+SELECT *\n+{ GRAPH ?graph { \n+\t?TopologicalIsland\n+\t\ta cim:TopologicalIsland ;\n+\t\tcim:IdentifiedObject.name ?name ;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwOTUyMg=="}, "originalCommit": {"oid": "24c7c81771f354c7c36c0290e364726d10162b25"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODk5Mjk4OnYy", "diffSide": "RIGHT", "path": "triple-store/triple-store-api/src/main/java/com/powsybl/triplestore/api/PropertyBag.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo1NjoxOFrOFyzFvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDo0NToyMlrOFzrpNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxMDE3NQ==", "bodyText": "Replace Stream.of by Arrays.asList. This list should be static and final ?", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r388810175", "createdAt": "2020-03-06T09:56:18Z", "author": {"login": "mathbagu"}, "path": "triple-store/triple-store-api/src/main/java/com/powsybl/triplestore/api/PropertyBag.java", "diffHunk": "@@ -173,9 +174,10 @@ public final boolean equals(Object obj) {\n \n     public boolean isResource(String name) {\n         // TODO do not rely on property name, use metadata or answer based on value?\n-        return name.equals(\"TopologicalNode\") || name.equals(\"Terminal\")\n-                || name.equals(\"ShuntCompensator\") || name.equals(\"TapChanger\")\n-                || resourceNames.contains(name);\n+        List<String> list = Stream.of(\"TopologicalNode\", \"Terminal\", \"ShuntCompensator\",\n+            \"TapChanger\", \"ConductingEquipment\", \"Model.DependentOn\", \"TopologicalNodes\",\n+            \"AngleRefTopologicalNode\").collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c7c81771f354c7c36c0290e364726d10162b25"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczNjc1Ng==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r389736756", "createdAt": "2020-03-09T14:45:22Z", "author": {"login": "kaltakovae"}, "path": "triple-store/triple-store-api/src/main/java/com/powsybl/triplestore/api/PropertyBag.java", "diffHunk": "@@ -173,9 +174,10 @@ public final boolean equals(Object obj) {\n \n     public boolean isResource(String name) {\n         // TODO do not rely on property name, use metadata or answer based on value?\n-        return name.equals(\"TopologicalNode\") || name.equals(\"Terminal\")\n-                || name.equals(\"ShuntCompensator\") || name.equals(\"TapChanger\")\n-                || resourceNames.contains(name);\n+        List<String> list = Stream.of(\"TopologicalNode\", \"Terminal\", \"ShuntCompensator\",\n+            \"TapChanger\", \"ConductingEquipment\", \"Model.DependentOn\", \"TopologicalNodes\",\n+            \"AngleRefTopologicalNode\").collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxMDE3NQ=="}, "originalCommit": {"oid": "24c7c81771f354c7c36c0290e364726d10162b25"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODk5NTA3OnYy", "diffSide": "RIGHT", "path": "triple-store/triple-store-api/src/main/java/com/powsybl/triplestore/api/PropertyBag.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo1Njo1MVrOFyzG_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwOTo1MDowMlrOF0Hzsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxMDQ5Mg==", "bodyText": "All these lists should be final?", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r388810492", "createdAt": "2020-03-06T09:56:51Z", "author": {"login": "mathbagu"}, "path": "triple-store/triple-store-api/src/main/java/com/powsybl/triplestore/api/PropertyBag.java", "diffHunk": "@@ -195,10 +197,19 @@ public boolean isClassProperty(String name) {\n         return classPropertyNames.contains(name);\n     }\n \n+    public void setMultivaluedProperty(List<String> multiValuedPropertyNames) {\n+        this.multiValuedPropertyNames = Objects.requireNonNull(multiValuedPropertyNames);\n+    }\n+\n+    public boolean isMultivaluedProperty(String name) {\n+        return multiValuedPropertyNames.contains(name);\n+    }\n+\n     private final List<String> propertyNames;\n     private final boolean removeInitialUnderscoreForIdentifiers;\n     private List<String> resourceNames = new ArrayList<>();\n     private List<String> classPropertyNames = new ArrayList<>();\n+    private List<String> multiValuedPropertyNames = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c7c81771f354c7c36c0290e364726d10162b25"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5ODE5NA==", "bodyText": "yes, we set them as finals", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r390198194", "createdAt": "2020-03-10T09:50:02Z", "author": {"login": "kaltakovae"}, "path": "triple-store/triple-store-api/src/main/java/com/powsybl/triplestore/api/PropertyBag.java", "diffHunk": "@@ -195,10 +197,19 @@ public boolean isClassProperty(String name) {\n         return classPropertyNames.contains(name);\n     }\n \n+    public void setMultivaluedProperty(List<String> multiValuedPropertyNames) {\n+        this.multiValuedPropertyNames = Objects.requireNonNull(multiValuedPropertyNames);\n+    }\n+\n+    public boolean isMultivaluedProperty(String name) {\n+        return multiValuedPropertyNames.contains(name);\n+    }\n+\n     private final List<String> propertyNames;\n     private final boolean removeInitialUnderscoreForIdentifiers;\n     private List<String> resourceNames = new ArrayList<>();\n     private List<String> classPropertyNames = new ArrayList<>();\n+    private List<String> multiValuedPropertyNames = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxMDQ5Mg=="}, "originalCommit": {"oid": "24c7c81771f354c7c36c0290e364726d10162b25"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTYyNzg0OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjoxODoxOFrOF0Wd-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMDowNDo1N1rOF0wTww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzODM5Mw==", "bodyText": "@mathbagu We discussed it but I don't really like that getConnectables() does not ensure that the elements are distinct\n@kaltakovae Do you have a case in which the same Connectable is met several times? In any case, I think you should drop this check, I will make another PR to ensure the list/stream is distinct. Besides, you can use the stream API here.", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r390438393", "createdAt": "2020-03-10T16:18:18Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +221,103 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : network.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3()).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getPhaseTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.phaseTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                } else if (leg.getRatioTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getRatioTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.ratioTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                }\n+            });\n+        }\n+\n+        cgmes.add(originalSVcontext, \"SvTapStep\", tapSteps);\n+    }\n+\n+    private void addStatusToCgmes() {\n+        // create SvStatus, iterate on Connectables, check Terminal status, add\n+        // to SvStatus\n+        PropertyBags svStatus = new PropertyBags();\n+        Set<String> addedConnectables = new HashSet<>();\n+        for (VoltageLevel v : network.getVoltageLevels()) {\n+            for (Connectable<?> c : v.getConnectables()) {\n+                // need to check if connectable was already added\n+                if (!addedConnectables.contains(c.getId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd8333f28ebd2758f545c82d7e239db457488e9f"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgzNTYxMQ==", "bodyText": "Currently we observe multiple duplicates, e.g. for each Line or Transformer getConnectables() duplicates results. We've tested with MicroGrid and HOPS test cases.\nBut, even if getConnectables() results in distincts, we still need the check for duplicates here:\nWithout this check any Connectables which are in different VoltageLevels (e.g Transformers) will be duplicated or triplicated.", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r390835611", "createdAt": "2020-03-11T09:19:28Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +221,103 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : network.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3()).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getPhaseTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.phaseTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                } else if (leg.getRatioTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getRatioTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.ratioTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                }\n+            });\n+        }\n+\n+        cgmes.add(originalSVcontext, \"SvTapStep\", tapSteps);\n+    }\n+\n+    private void addStatusToCgmes() {\n+        // create SvStatus, iterate on Connectables, check Terminal status, add\n+        // to SvStatus\n+        PropertyBags svStatus = new PropertyBags();\n+        Set<String> addedConnectables = new HashSet<>();\n+        for (VoltageLevel v : network.getVoltageLevels()) {\n+            for (Connectable<?> c : v.getConnectables()) {\n+                // need to check if connectable was already added\n+                if (!addedConnectables.contains(c.getId())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzODM5Mw=="}, "originalCommit": {"oid": "fd8333f28ebd2758f545c82d7e239db457488e9f"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg0NjYwNQ==", "bodyText": "Thank you for your input! I made a PR to check for duplicates in a same voltage level. As for your code, thank your for the clarification! I think you can optimize it as such:\nPropertyBags svStatus = new PropertyBags();\nnetwork.getVoltageLevelStream()\n                .flatMap(VoltageLevel::getConnectableStream)\n                .distinct()\n                .forEach(c -> {\n                    PropertyBag p = new PropertyBag(SV_SVSTATUS_PROPERTIES);\n                    for (Terminal t : ((Connectable<?>) c).getTerminals()) {\n                        p.put(IN_SERVICE, Boolean.toString(t.isConnected()));\n                    }\n                    p.put(CgmesNames.CONDUCTING_EQUIPMENT, c.getId());\n                    svStatus.add(p);\n});", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r390846605", "createdAt": "2020-03-11T09:38:50Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +221,103 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : network.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3()).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getPhaseTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.phaseTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                } else if (leg.getRatioTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getRatioTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.ratioTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                }\n+            });\n+        }\n+\n+        cgmes.add(originalSVcontext, \"SvTapStep\", tapSteps);\n+    }\n+\n+    private void addStatusToCgmes() {\n+        // create SvStatus, iterate on Connectables, check Terminal status, add\n+        // to SvStatus\n+        PropertyBags svStatus = new PropertyBags();\n+        Set<String> addedConnectables = new HashSet<>();\n+        for (VoltageLevel v : network.getVoltageLevels()) {\n+            for (Connectable<?> c : v.getConnectables()) {\n+                // need to check if connectable was already added\n+                if (!addedConnectables.contains(c.getId())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzODM5Mw=="}, "originalCommit": {"oid": "fd8333f28ebd2758f545c82d7e239db457488e9f"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg0Njg2Nw==", "bodyText": "About finding duplicates:\nThere is no getConnectables at Network level, so to obtain all connectables of the network we must iterate first over the voltage levels, then its connectables.\nThis means that we have to account for potential duplicates: lines and 2w transformers will be found twice, once for every end, and 3w transformers will appear three times during the iteration.\nSo, unless we have a getConnectables at Network level, we have to take into account for potential duplicates.\nAn alternative could be to iterate over specific types of equipment (getLines, getTransformers, getGenerators, getLoads, ...) but that would mean to have a long list of method calls, and leave the risk of omitting new types when they are added to the Network (in the future). I mean, leaving a long list of specific dependencies when a generic treatment over all kind of equipment can be done.", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r390846867", "createdAt": "2020-03-11T09:39:18Z", "author": {"login": "zamarrenolm"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +221,103 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : network.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3()).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getPhaseTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.phaseTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                } else if (leg.getRatioTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getRatioTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.ratioTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                }\n+            });\n+        }\n+\n+        cgmes.add(originalSVcontext, \"SvTapStep\", tapSteps);\n+    }\n+\n+    private void addStatusToCgmes() {\n+        // create SvStatus, iterate on Connectables, check Terminal status, add\n+        // to SvStatus\n+        PropertyBags svStatus = new PropertyBags();\n+        Set<String> addedConnectables = new HashSet<>();\n+        for (VoltageLevel v : network.getVoltageLevels()) {\n+            for (Connectable<?> c : v.getConnectables()) {\n+                // need to check if connectable was already added\n+                if (!addedConnectables.contains(c.getId())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzODM5Mw=="}, "originalCommit": {"oid": "fd8333f28ebd2758f545c82d7e239db457488e9f"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2MTc2Mw==", "bodyText": "@MioRtia  Thank you Miora, this mathes perfectly to what we wanted. I've done the change.", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r390861763", "createdAt": "2020-03-11T10:04:57Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +221,103 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : network.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3()).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getPhaseTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.phaseTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                } else if (leg.getRatioTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getRatioTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.ratioTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                }\n+            });\n+        }\n+\n+        cgmes.add(originalSVcontext, \"SvTapStep\", tapSteps);\n+    }\n+\n+    private void addStatusToCgmes() {\n+        // create SvStatus, iterate on Connectables, check Terminal status, add\n+        // to SvStatus\n+        PropertyBags svStatus = new PropertyBags();\n+        Set<String> addedConnectables = new HashSet<>();\n+        for (VoltageLevel v : network.getVoltageLevels()) {\n+            for (Connectable<?> c : v.getConnectables()) {\n+                // need to check if connectable was already added\n+                if (!addedConnectables.contains(c.getId())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzODM5Mw=="}, "originalCommit": {"oid": "fd8333f28ebd2758f545c82d7e239db457488e9f"}, "originalPosition": 264}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzEzNTI0OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMzo0MToxNVrOF1fCYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNToyNDoyMlrOF1jX-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYyNzM2Mg==", "bodyText": "You can replace Arrays.asList(CgmesNames.GRAPH) by Collections.singletonList(CgmesNames.GRAPH)", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r391627362", "createdAt": "2020-03-12T13:41:15Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -7,86 +7,205 @@\n package com.powsybl.cgmes.conversion.update;\n \n import java.util.Arrays;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n \n+import org.apache.commons.math3.complex.Complex;\n+import org.apache.commons.math3.complex.ComplexUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.powsybl.cgmes.model.CgmesModel;\n import com.powsybl.cgmes.model.CgmesNames;\n import com.powsybl.cgmes.model.CgmesSubset;\n import com.powsybl.cgmes.model.triplestore.CgmesModelTripleStore;\n+import com.powsybl.iidm.network.Battery;\n import com.powsybl.iidm.network.Bus;\n+import com.powsybl.iidm.network.Connectable;\n+import com.powsybl.iidm.network.DanglingLine;\n import com.powsybl.iidm.network.Generator;\n import com.powsybl.iidm.network.Load;\n import com.powsybl.iidm.network.Network;\n import com.powsybl.iidm.network.ShuntCompensator;\n+import com.powsybl.iidm.network.StaticVarCompensator;\n import com.powsybl.iidm.network.Terminal;\n+import com.powsybl.iidm.network.ThreeWindingsTransformer;\n import com.powsybl.iidm.network.TwoWindingsTransformer;\n+import com.powsybl.iidm.network.VoltageLevel;\n+import com.powsybl.iidm.network.util.LinkData;\n+import com.powsybl.iidm.network.util.LinkData.BranchAdmittanceMatrix;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n  * @author Marcos de Miguel <demiguelm at aia.es>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Elena Kaltakova <kaltakovae at aia.es>\n  */\n-public final class StateVariablesAdder {\n+public class StateVariablesAdder {\n \n-    private StateVariablesAdder() {\n+    public StateVariablesAdder(CgmesModel cgmes, Network n) {\n+        this.cgmes = Objects.requireNonNull(cgmes);\n+        this.network = Objects.requireNonNull(n);\n+        this.cimVersion = ((CgmesModelTripleStore) cgmes).getCimVersion();\n+        this.originalTerminals = cgmes.terminals();\n+        this.originalFullModel = cgmes.fullModel(CgmesSubset.STATE_VARIABLES.getProfile());\n+        this.originalTopologicalIslands = cgmes.topologicalIslands();\n+        this.originalSVcontext = originalSVcontext();\n+        this.boundaryNodesFromDanglingLines = boundaryNodesFromDanglingLines();\n     }\n \n-    public static void add(Network n, CgmesModel cgmes) {\n-        // TODO Add full model data with proper profile (StateVariables)\n-        // FullModel is defined in ModelDescription:\n-        // http://iec.ch/TC57/61970-552/ModelDescription/1#\n+    private String originalSVcontext() {\n+        PropertyBags pbs = cgmes.graph();\n+        PropertyBag defaultSvContext = new PropertyBag(Arrays.asList(CgmesNames.GRAPH));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de47779ee06033672b959e9f934154fdc5060a78"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY5ODQyNA==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r391698424", "createdAt": "2020-03-12T15:24:22Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -7,86 +7,205 @@\n package com.powsybl.cgmes.conversion.update;\n \n import java.util.Arrays;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n \n+import org.apache.commons.math3.complex.Complex;\n+import org.apache.commons.math3.complex.ComplexUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.powsybl.cgmes.model.CgmesModel;\n import com.powsybl.cgmes.model.CgmesNames;\n import com.powsybl.cgmes.model.CgmesSubset;\n import com.powsybl.cgmes.model.triplestore.CgmesModelTripleStore;\n+import com.powsybl.iidm.network.Battery;\n import com.powsybl.iidm.network.Bus;\n+import com.powsybl.iidm.network.Connectable;\n+import com.powsybl.iidm.network.DanglingLine;\n import com.powsybl.iidm.network.Generator;\n import com.powsybl.iidm.network.Load;\n import com.powsybl.iidm.network.Network;\n import com.powsybl.iidm.network.ShuntCompensator;\n+import com.powsybl.iidm.network.StaticVarCompensator;\n import com.powsybl.iidm.network.Terminal;\n+import com.powsybl.iidm.network.ThreeWindingsTransformer;\n import com.powsybl.iidm.network.TwoWindingsTransformer;\n+import com.powsybl.iidm.network.VoltageLevel;\n+import com.powsybl.iidm.network.util.LinkData;\n+import com.powsybl.iidm.network.util.LinkData.BranchAdmittanceMatrix;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n  * @author Marcos de Miguel <demiguelm at aia.es>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Elena Kaltakova <kaltakovae at aia.es>\n  */\n-public final class StateVariablesAdder {\n+public class StateVariablesAdder {\n \n-    private StateVariablesAdder() {\n+    public StateVariablesAdder(CgmesModel cgmes, Network n) {\n+        this.cgmes = Objects.requireNonNull(cgmes);\n+        this.network = Objects.requireNonNull(n);\n+        this.cimVersion = ((CgmesModelTripleStore) cgmes).getCimVersion();\n+        this.originalTerminals = cgmes.terminals();\n+        this.originalFullModel = cgmes.fullModel(CgmesSubset.STATE_VARIABLES.getProfile());\n+        this.originalTopologicalIslands = cgmes.topologicalIslands();\n+        this.originalSVcontext = originalSVcontext();\n+        this.boundaryNodesFromDanglingLines = boundaryNodesFromDanglingLines();\n     }\n \n-    public static void add(Network n, CgmesModel cgmes) {\n-        // TODO Add full model data with proper profile (StateVariables)\n-        // FullModel is defined in ModelDescription:\n-        // http://iec.ch/TC57/61970-552/ModelDescription/1#\n+    private String originalSVcontext() {\n+        PropertyBags pbs = cgmes.graph();\n+        PropertyBag defaultSvContext = new PropertyBag(Arrays.asList(CgmesNames.GRAPH));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYyNzM2Mg=="}, "originalCommit": {"oid": "de47779ee06033672b959e9f934154fdc5060a78"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzE0NDQxOnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMzo0Mzo0NFrOF1fIXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo0MDowMFrOF1kA1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYyODg5NQ==", "bodyText": "You can replace boundaryNodesFromDanglingLines.entrySet().forEach(entry -> {...}); by boundaryNodesFromDanglingLines.forEach((key, value) -> {...});", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r391628895", "createdAt": "2020-03-12T13:43:44Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -7,86 +7,205 @@\n package com.powsybl.cgmes.conversion.update;\n \n import java.util.Arrays;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n \n+import org.apache.commons.math3.complex.Complex;\n+import org.apache.commons.math3.complex.ComplexUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.powsybl.cgmes.model.CgmesModel;\n import com.powsybl.cgmes.model.CgmesNames;\n import com.powsybl.cgmes.model.CgmesSubset;\n import com.powsybl.cgmes.model.triplestore.CgmesModelTripleStore;\n+import com.powsybl.iidm.network.Battery;\n import com.powsybl.iidm.network.Bus;\n+import com.powsybl.iidm.network.Connectable;\n+import com.powsybl.iidm.network.DanglingLine;\n import com.powsybl.iidm.network.Generator;\n import com.powsybl.iidm.network.Load;\n import com.powsybl.iidm.network.Network;\n import com.powsybl.iidm.network.ShuntCompensator;\n+import com.powsybl.iidm.network.StaticVarCompensator;\n import com.powsybl.iidm.network.Terminal;\n+import com.powsybl.iidm.network.ThreeWindingsTransformer;\n import com.powsybl.iidm.network.TwoWindingsTransformer;\n+import com.powsybl.iidm.network.VoltageLevel;\n+import com.powsybl.iidm.network.util.LinkData;\n+import com.powsybl.iidm.network.util.LinkData.BranchAdmittanceMatrix;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n  * @author Marcos de Miguel <demiguelm at aia.es>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Elena Kaltakova <kaltakovae at aia.es>\n  */\n-public final class StateVariablesAdder {\n+public class StateVariablesAdder {\n \n-    private StateVariablesAdder() {\n+    public StateVariablesAdder(CgmesModel cgmes, Network n) {\n+        this.cgmes = Objects.requireNonNull(cgmes);\n+        this.network = Objects.requireNonNull(n);\n+        this.cimVersion = ((CgmesModelTripleStore) cgmes).getCimVersion();\n+        this.originalTerminals = cgmes.terminals();\n+        this.originalFullModel = cgmes.fullModel(CgmesSubset.STATE_VARIABLES.getProfile());\n+        this.originalTopologicalIslands = cgmes.topologicalIslands();\n+        this.originalSVcontext = originalSVcontext();\n+        this.boundaryNodesFromDanglingLines = boundaryNodesFromDanglingLines();\n     }\n \n-    public static void add(Network n, CgmesModel cgmes) {\n-        // TODO Add full model data with proper profile (StateVariables)\n-        // FullModel is defined in ModelDescription:\n-        // http://iec.ch/TC57/61970-552/ModelDescription/1#\n+    private String originalSVcontext() {\n+        PropertyBags pbs = cgmes.graph();\n+        PropertyBag defaultSvContext = new PropertyBag(Arrays.asList(CgmesNames.GRAPH));\n+        defaultSvContext.put(CgmesNames.GRAPH, CgmesSubset.STATE_VARIABLES.toString());\n+        return pbs.stream()\n+            .filter(graph -> graph.getId(CgmesNames.GRAPH).contains(CgmesSubset.STATE_VARIABLES.getIdentifier()))\n+            .findAny()\n+            .orElse(defaultSvContext)\n+            .getId(CgmesNames.GRAPH);\n+    }\n+\n+    public void addStateVariablesToCgmes() {\n+        if (cgmes.isNodeBreaker()) {\n+            // TODO we need to export SV file data for NodeBraker\n+            LOG.warn(\"NodeBreaker view require further investigation to map correctly Topological Nodes\");\n+            return;\n+        }\n+        // Clear the previous SV data in CGMES model\n+        // and fill it with the Network current state values\n+        cgmes.clear(CgmesSubset.STATE_VARIABLES);\n+\n+        if (cimVersion != 14) {\n+            addModelDescriptionToCgmes();\n+            addTopologicalIslandsToCgmes();\n+        }\n+\n+        addVoltagesForTopologicalNodes();\n+\n+        addVoltagesForBoundaryNodes();\n+\n+        addPowerFlowToCgmes();\n \n+        addShuntCompensatorSectionsToCgmes();\n+\n+        addTapStepToCgmes();\n+\n+        addStatusToCgmes();\n+    }\n+\n+    private void addVoltagesForTopologicalNodes() {\n         PropertyBags voltages = new PropertyBags();\n-        for (Bus b : n.getBusBreakerView().getBuses()) {\n+        // add voltages for TpNodes existing in the Model\n+        for (PropertyBag tn : cgmes.topologicalNodes()) {\n+            Bus b = network.getBusBreakerView().getBus(tn.getId(CgmesNames.TOPOLOGICAL_NODE));\n             PropertyBag p = new PropertyBag(SV_VOLTAGE_PROPERTIES);\n-            p.put(CgmesNames.ANGLE, fs(b.getAngle()));\n-            p.put(CgmesNames.VOLTAGE, fs(b.getV()));\n-            p.put(\"TopologicalNode\", topologicalNodeFromBusId(b.getId()));\n-            voltages.add(p);\n+            if (b != null) {\n+                p.put(CgmesNames.ANGLE, fs(b.getAngle()));\n+                p.put(CgmesNames.VOLTAGE, fs(b.getV()));\n+                p.put(CgmesNames.TOPOLOGICAL_NODE, tn.getId(CgmesNames.TOPOLOGICAL_NODE));\n+                voltages.add(p);\n+            }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvVoltage\", voltages);\n+        cgmes.add(originalSVcontext, \"SvVoltage\", voltages);\n+    }\n \n+    private void addVoltagesForBoundaryNodes() {\n+        PropertyBags voltages = new PropertyBags();\n+        // add voltages for TpNodes existing in the Model's boundaries\n+        boundaryNodesFromDanglingLines.entrySet().forEach(entry -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de47779ee06033672b959e9f934154fdc5060a78"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcwODg4Nw==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r391708887", "createdAt": "2020-03-12T15:40:00Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -7,86 +7,205 @@\n package com.powsybl.cgmes.conversion.update;\n \n import java.util.Arrays;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n \n+import org.apache.commons.math3.complex.Complex;\n+import org.apache.commons.math3.complex.ComplexUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.powsybl.cgmes.model.CgmesModel;\n import com.powsybl.cgmes.model.CgmesNames;\n import com.powsybl.cgmes.model.CgmesSubset;\n import com.powsybl.cgmes.model.triplestore.CgmesModelTripleStore;\n+import com.powsybl.iidm.network.Battery;\n import com.powsybl.iidm.network.Bus;\n+import com.powsybl.iidm.network.Connectable;\n+import com.powsybl.iidm.network.DanglingLine;\n import com.powsybl.iidm.network.Generator;\n import com.powsybl.iidm.network.Load;\n import com.powsybl.iidm.network.Network;\n import com.powsybl.iidm.network.ShuntCompensator;\n+import com.powsybl.iidm.network.StaticVarCompensator;\n import com.powsybl.iidm.network.Terminal;\n+import com.powsybl.iidm.network.ThreeWindingsTransformer;\n import com.powsybl.iidm.network.TwoWindingsTransformer;\n+import com.powsybl.iidm.network.VoltageLevel;\n+import com.powsybl.iidm.network.util.LinkData;\n+import com.powsybl.iidm.network.util.LinkData.BranchAdmittanceMatrix;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n  * @author Marcos de Miguel <demiguelm at aia.es>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Elena Kaltakova <kaltakovae at aia.es>\n  */\n-public final class StateVariablesAdder {\n+public class StateVariablesAdder {\n \n-    private StateVariablesAdder() {\n+    public StateVariablesAdder(CgmesModel cgmes, Network n) {\n+        this.cgmes = Objects.requireNonNull(cgmes);\n+        this.network = Objects.requireNonNull(n);\n+        this.cimVersion = ((CgmesModelTripleStore) cgmes).getCimVersion();\n+        this.originalTerminals = cgmes.terminals();\n+        this.originalFullModel = cgmes.fullModel(CgmesSubset.STATE_VARIABLES.getProfile());\n+        this.originalTopologicalIslands = cgmes.topologicalIslands();\n+        this.originalSVcontext = originalSVcontext();\n+        this.boundaryNodesFromDanglingLines = boundaryNodesFromDanglingLines();\n     }\n \n-    public static void add(Network n, CgmesModel cgmes) {\n-        // TODO Add full model data with proper profile (StateVariables)\n-        // FullModel is defined in ModelDescription:\n-        // http://iec.ch/TC57/61970-552/ModelDescription/1#\n+    private String originalSVcontext() {\n+        PropertyBags pbs = cgmes.graph();\n+        PropertyBag defaultSvContext = new PropertyBag(Arrays.asList(CgmesNames.GRAPH));\n+        defaultSvContext.put(CgmesNames.GRAPH, CgmesSubset.STATE_VARIABLES.toString());\n+        return pbs.stream()\n+            .filter(graph -> graph.getId(CgmesNames.GRAPH).contains(CgmesSubset.STATE_VARIABLES.getIdentifier()))\n+            .findAny()\n+            .orElse(defaultSvContext)\n+            .getId(CgmesNames.GRAPH);\n+    }\n+\n+    public void addStateVariablesToCgmes() {\n+        if (cgmes.isNodeBreaker()) {\n+            // TODO we need to export SV file data for NodeBraker\n+            LOG.warn(\"NodeBreaker view require further investigation to map correctly Topological Nodes\");\n+            return;\n+        }\n+        // Clear the previous SV data in CGMES model\n+        // and fill it with the Network current state values\n+        cgmes.clear(CgmesSubset.STATE_VARIABLES);\n+\n+        if (cimVersion != 14) {\n+            addModelDescriptionToCgmes();\n+            addTopologicalIslandsToCgmes();\n+        }\n+\n+        addVoltagesForTopologicalNodes();\n+\n+        addVoltagesForBoundaryNodes();\n+\n+        addPowerFlowToCgmes();\n \n+        addShuntCompensatorSectionsToCgmes();\n+\n+        addTapStepToCgmes();\n+\n+        addStatusToCgmes();\n+    }\n+\n+    private void addVoltagesForTopologicalNodes() {\n         PropertyBags voltages = new PropertyBags();\n-        for (Bus b : n.getBusBreakerView().getBuses()) {\n+        // add voltages for TpNodes existing in the Model\n+        for (PropertyBag tn : cgmes.topologicalNodes()) {\n+            Bus b = network.getBusBreakerView().getBus(tn.getId(CgmesNames.TOPOLOGICAL_NODE));\n             PropertyBag p = new PropertyBag(SV_VOLTAGE_PROPERTIES);\n-            p.put(CgmesNames.ANGLE, fs(b.getAngle()));\n-            p.put(CgmesNames.VOLTAGE, fs(b.getV()));\n-            p.put(\"TopologicalNode\", topologicalNodeFromBusId(b.getId()));\n-            voltages.add(p);\n+            if (b != null) {\n+                p.put(CgmesNames.ANGLE, fs(b.getAngle()));\n+                p.put(CgmesNames.VOLTAGE, fs(b.getV()));\n+                p.put(CgmesNames.TOPOLOGICAL_NODE, tn.getId(CgmesNames.TOPOLOGICAL_NODE));\n+                voltages.add(p);\n+            }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvVoltage\", voltages);\n+        cgmes.add(originalSVcontext, \"SvVoltage\", voltages);\n+    }\n \n+    private void addVoltagesForBoundaryNodes() {\n+        PropertyBags voltages = new PropertyBags();\n+        // add voltages for TpNodes existing in the Model's boundaries\n+        boundaryNodesFromDanglingLines.entrySet().forEach(entry -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYyODg5NQ=="}, "originalCommit": {"oid": "de47779ee06033672b959e9f934154fdc5060a78"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzIxNjA5OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNDowMDo1NFrOF1f1Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo1NzoxOVrOF1kunQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY0MDMzNQ==", "bodyText": "To lower this method's complexity, create an intermediary method:\nprivate <I extends Injection> void addInjectionPowerFlowToCgmes(PropertyBags powerFlows, Iterable<I> injectionStream) {\n        injectionStream.forEach(i -> {\n            PropertyBag p = createPowerFlowProperties(i.getTerminal());\n            if (p != null) {\n                powerFlows.add(p);\n            } else if (i instanceof Load) {\n                // FIXME CGMES SvInjection objects created as loads\n                LOG.error(\"No SvPowerFlow created for load {}\", i.getId());\n            }\n        });\n    }\nYou can then call:\nPropertyBags powerFlows = new PropertyBags();\naddInjectionPowerFlowToCgmes(powerFlows, network.getLoads());\naddInjectionPowerFlowToCgmes(powerFlows, network.getGenerators());\naddInjectionPowerFlowToCgmes(powerFlows, network.getShuntCompensators());\naddInjectionPowerFlowToCgmes(powerFlows, network.getStaticVarCompensators());\naddInjectionPowerFlowToCgmes(powerFlows, network.getBatteries());", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r391640335", "createdAt": "2020-03-12T14:00:54Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -7,86 +7,205 @@\n package com.powsybl.cgmes.conversion.update;\n \n import java.util.Arrays;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n \n+import org.apache.commons.math3.complex.Complex;\n+import org.apache.commons.math3.complex.ComplexUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.powsybl.cgmes.model.CgmesModel;\n import com.powsybl.cgmes.model.CgmesNames;\n import com.powsybl.cgmes.model.CgmesSubset;\n import com.powsybl.cgmes.model.triplestore.CgmesModelTripleStore;\n+import com.powsybl.iidm.network.Battery;\n import com.powsybl.iidm.network.Bus;\n+import com.powsybl.iidm.network.Connectable;\n+import com.powsybl.iidm.network.DanglingLine;\n import com.powsybl.iidm.network.Generator;\n import com.powsybl.iidm.network.Load;\n import com.powsybl.iidm.network.Network;\n import com.powsybl.iidm.network.ShuntCompensator;\n+import com.powsybl.iidm.network.StaticVarCompensator;\n import com.powsybl.iidm.network.Terminal;\n+import com.powsybl.iidm.network.ThreeWindingsTransformer;\n import com.powsybl.iidm.network.TwoWindingsTransformer;\n+import com.powsybl.iidm.network.VoltageLevel;\n+import com.powsybl.iidm.network.util.LinkData;\n+import com.powsybl.iidm.network.util.LinkData.BranchAdmittanceMatrix;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n  * @author Marcos de Miguel <demiguelm at aia.es>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Elena Kaltakova <kaltakovae at aia.es>\n  */\n-public final class StateVariablesAdder {\n+public class StateVariablesAdder {\n \n-    private StateVariablesAdder() {\n+    public StateVariablesAdder(CgmesModel cgmes, Network n) {\n+        this.cgmes = Objects.requireNonNull(cgmes);\n+        this.network = Objects.requireNonNull(n);\n+        this.cimVersion = ((CgmesModelTripleStore) cgmes).getCimVersion();\n+        this.originalTerminals = cgmes.terminals();\n+        this.originalFullModel = cgmes.fullModel(CgmesSubset.STATE_VARIABLES.getProfile());\n+        this.originalTopologicalIslands = cgmes.topologicalIslands();\n+        this.originalSVcontext = originalSVcontext();\n+        this.boundaryNodesFromDanglingLines = boundaryNodesFromDanglingLines();\n     }\n \n-    public static void add(Network n, CgmesModel cgmes) {\n-        // TODO Add full model data with proper profile (StateVariables)\n-        // FullModel is defined in ModelDescription:\n-        // http://iec.ch/TC57/61970-552/ModelDescription/1#\n+    private String originalSVcontext() {\n+        PropertyBags pbs = cgmes.graph();\n+        PropertyBag defaultSvContext = new PropertyBag(Arrays.asList(CgmesNames.GRAPH));\n+        defaultSvContext.put(CgmesNames.GRAPH, CgmesSubset.STATE_VARIABLES.toString());\n+        return pbs.stream()\n+            .filter(graph -> graph.getId(CgmesNames.GRAPH).contains(CgmesSubset.STATE_VARIABLES.getIdentifier()))\n+            .findAny()\n+            .orElse(defaultSvContext)\n+            .getId(CgmesNames.GRAPH);\n+    }\n+\n+    public void addStateVariablesToCgmes() {\n+        if (cgmes.isNodeBreaker()) {\n+            // TODO we need to export SV file data for NodeBraker\n+            LOG.warn(\"NodeBreaker view require further investigation to map correctly Topological Nodes\");\n+            return;\n+        }\n+        // Clear the previous SV data in CGMES model\n+        // and fill it with the Network current state values\n+        cgmes.clear(CgmesSubset.STATE_VARIABLES);\n+\n+        if (cimVersion != 14) {\n+            addModelDescriptionToCgmes();\n+            addTopologicalIslandsToCgmes();\n+        }\n+\n+        addVoltagesForTopologicalNodes();\n+\n+        addVoltagesForBoundaryNodes();\n+\n+        addPowerFlowToCgmes();\n \n+        addShuntCompensatorSectionsToCgmes();\n+\n+        addTapStepToCgmes();\n+\n+        addStatusToCgmes();\n+    }\n+\n+    private void addVoltagesForTopologicalNodes() {\n         PropertyBags voltages = new PropertyBags();\n-        for (Bus b : n.getBusBreakerView().getBuses()) {\n+        // add voltages for TpNodes existing in the Model\n+        for (PropertyBag tn : cgmes.topologicalNodes()) {\n+            Bus b = network.getBusBreakerView().getBus(tn.getId(CgmesNames.TOPOLOGICAL_NODE));\n             PropertyBag p = new PropertyBag(SV_VOLTAGE_PROPERTIES);\n-            p.put(CgmesNames.ANGLE, fs(b.getAngle()));\n-            p.put(CgmesNames.VOLTAGE, fs(b.getV()));\n-            p.put(\"TopologicalNode\", topologicalNodeFromBusId(b.getId()));\n-            voltages.add(p);\n+            if (b != null) {\n+                p.put(CgmesNames.ANGLE, fs(b.getAngle()));\n+                p.put(CgmesNames.VOLTAGE, fs(b.getV()));\n+                p.put(CgmesNames.TOPOLOGICAL_NODE, tn.getId(CgmesNames.TOPOLOGICAL_NODE));\n+                voltages.add(p);\n+            }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvVoltage\", voltages);\n+        cgmes.add(originalSVcontext, \"SvVoltage\", voltages);\n+    }\n \n+    private void addVoltagesForBoundaryNodes() {\n+        PropertyBags voltages = new PropertyBags();\n+        // add voltages for TpNodes existing in the Model's boundaries\n+        boundaryNodesFromDanglingLines.entrySet().forEach(entry -> {\n+            PropertyBag p = new PropertyBag(SV_VOLTAGE_PROPERTIES);\n+            DanglingLine dl = network.getDanglingLine(entry.getKey());\n+            Bus b = dl.getTerminal().getBusBreakerView().getBus();\n+            if (b != null) {\n+                // calculate complex voltage value: abs for VOLTAGE, degrees for ANGLE\n+                Complex v2 = complexVoltage(dl.getR(), dl.getX(), dl.getG(), dl.getB(), b.getV(), b.getAngle(),\n+                    dl.getP0(), dl.getQ0());\n+                p.put(CgmesNames.ANGLE, fs(Math.toDegrees(v2.getArgument())));\n+                p.put(CgmesNames.VOLTAGE, fs(v2.abs()));\n+                p.put(CgmesNames.TOPOLOGICAL_NODE, entry.getValue());\n+            } else {\n+                p.put(CgmesNames.ANGLE, fs(0.0));\n+                p.put(CgmesNames.VOLTAGE, fs(0.0));\n+                p.put(CgmesNames.TOPOLOGICAL_NODE, entry.getValue());\n+            }\n+            voltages.add(p);\n+        });\n+        cgmes.add(originalSVcontext, \"SvVoltage\", voltages);\n+    }\n+\n+    private void addPowerFlowToCgmes() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de47779ee06033672b959e9f934154fdc5060a78"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyMDYwNQ==", "bodyText": "Done.\nThank you Miora, that's really good, I'll try to use this pattern in future.", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r391720605", "createdAt": "2020-03-12T15:57:19Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -7,86 +7,205 @@\n package com.powsybl.cgmes.conversion.update;\n \n import java.util.Arrays;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n \n+import org.apache.commons.math3.complex.Complex;\n+import org.apache.commons.math3.complex.ComplexUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.powsybl.cgmes.model.CgmesModel;\n import com.powsybl.cgmes.model.CgmesNames;\n import com.powsybl.cgmes.model.CgmesSubset;\n import com.powsybl.cgmes.model.triplestore.CgmesModelTripleStore;\n+import com.powsybl.iidm.network.Battery;\n import com.powsybl.iidm.network.Bus;\n+import com.powsybl.iidm.network.Connectable;\n+import com.powsybl.iidm.network.DanglingLine;\n import com.powsybl.iidm.network.Generator;\n import com.powsybl.iidm.network.Load;\n import com.powsybl.iidm.network.Network;\n import com.powsybl.iidm.network.ShuntCompensator;\n+import com.powsybl.iidm.network.StaticVarCompensator;\n import com.powsybl.iidm.network.Terminal;\n+import com.powsybl.iidm.network.ThreeWindingsTransformer;\n import com.powsybl.iidm.network.TwoWindingsTransformer;\n+import com.powsybl.iidm.network.VoltageLevel;\n+import com.powsybl.iidm.network.util.LinkData;\n+import com.powsybl.iidm.network.util.LinkData.BranchAdmittanceMatrix;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n  * @author Marcos de Miguel <demiguelm at aia.es>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Elena Kaltakova <kaltakovae at aia.es>\n  */\n-public final class StateVariablesAdder {\n+public class StateVariablesAdder {\n \n-    private StateVariablesAdder() {\n+    public StateVariablesAdder(CgmesModel cgmes, Network n) {\n+        this.cgmes = Objects.requireNonNull(cgmes);\n+        this.network = Objects.requireNonNull(n);\n+        this.cimVersion = ((CgmesModelTripleStore) cgmes).getCimVersion();\n+        this.originalTerminals = cgmes.terminals();\n+        this.originalFullModel = cgmes.fullModel(CgmesSubset.STATE_VARIABLES.getProfile());\n+        this.originalTopologicalIslands = cgmes.topologicalIslands();\n+        this.originalSVcontext = originalSVcontext();\n+        this.boundaryNodesFromDanglingLines = boundaryNodesFromDanglingLines();\n     }\n \n-    public static void add(Network n, CgmesModel cgmes) {\n-        // TODO Add full model data with proper profile (StateVariables)\n-        // FullModel is defined in ModelDescription:\n-        // http://iec.ch/TC57/61970-552/ModelDescription/1#\n+    private String originalSVcontext() {\n+        PropertyBags pbs = cgmes.graph();\n+        PropertyBag defaultSvContext = new PropertyBag(Arrays.asList(CgmesNames.GRAPH));\n+        defaultSvContext.put(CgmesNames.GRAPH, CgmesSubset.STATE_VARIABLES.toString());\n+        return pbs.stream()\n+            .filter(graph -> graph.getId(CgmesNames.GRAPH).contains(CgmesSubset.STATE_VARIABLES.getIdentifier()))\n+            .findAny()\n+            .orElse(defaultSvContext)\n+            .getId(CgmesNames.GRAPH);\n+    }\n+\n+    public void addStateVariablesToCgmes() {\n+        if (cgmes.isNodeBreaker()) {\n+            // TODO we need to export SV file data for NodeBraker\n+            LOG.warn(\"NodeBreaker view require further investigation to map correctly Topological Nodes\");\n+            return;\n+        }\n+        // Clear the previous SV data in CGMES model\n+        // and fill it with the Network current state values\n+        cgmes.clear(CgmesSubset.STATE_VARIABLES);\n+\n+        if (cimVersion != 14) {\n+            addModelDescriptionToCgmes();\n+            addTopologicalIslandsToCgmes();\n+        }\n+\n+        addVoltagesForTopologicalNodes();\n+\n+        addVoltagesForBoundaryNodes();\n+\n+        addPowerFlowToCgmes();\n \n+        addShuntCompensatorSectionsToCgmes();\n+\n+        addTapStepToCgmes();\n+\n+        addStatusToCgmes();\n+    }\n+\n+    private void addVoltagesForTopologicalNodes() {\n         PropertyBags voltages = new PropertyBags();\n-        for (Bus b : n.getBusBreakerView().getBuses()) {\n+        // add voltages for TpNodes existing in the Model\n+        for (PropertyBag tn : cgmes.topologicalNodes()) {\n+            Bus b = network.getBusBreakerView().getBus(tn.getId(CgmesNames.TOPOLOGICAL_NODE));\n             PropertyBag p = new PropertyBag(SV_VOLTAGE_PROPERTIES);\n-            p.put(CgmesNames.ANGLE, fs(b.getAngle()));\n-            p.put(CgmesNames.VOLTAGE, fs(b.getV()));\n-            p.put(\"TopologicalNode\", topologicalNodeFromBusId(b.getId()));\n-            voltages.add(p);\n+            if (b != null) {\n+                p.put(CgmesNames.ANGLE, fs(b.getAngle()));\n+                p.put(CgmesNames.VOLTAGE, fs(b.getV()));\n+                p.put(CgmesNames.TOPOLOGICAL_NODE, tn.getId(CgmesNames.TOPOLOGICAL_NODE));\n+                voltages.add(p);\n+            }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvVoltage\", voltages);\n+        cgmes.add(originalSVcontext, \"SvVoltage\", voltages);\n+    }\n \n+    private void addVoltagesForBoundaryNodes() {\n+        PropertyBags voltages = new PropertyBags();\n+        // add voltages for TpNodes existing in the Model's boundaries\n+        boundaryNodesFromDanglingLines.entrySet().forEach(entry -> {\n+            PropertyBag p = new PropertyBag(SV_VOLTAGE_PROPERTIES);\n+            DanglingLine dl = network.getDanglingLine(entry.getKey());\n+            Bus b = dl.getTerminal().getBusBreakerView().getBus();\n+            if (b != null) {\n+                // calculate complex voltage value: abs for VOLTAGE, degrees for ANGLE\n+                Complex v2 = complexVoltage(dl.getR(), dl.getX(), dl.getG(), dl.getB(), b.getV(), b.getAngle(),\n+                    dl.getP0(), dl.getQ0());\n+                p.put(CgmesNames.ANGLE, fs(Math.toDegrees(v2.getArgument())));\n+                p.put(CgmesNames.VOLTAGE, fs(v2.abs()));\n+                p.put(CgmesNames.TOPOLOGICAL_NODE, entry.getValue());\n+            } else {\n+                p.put(CgmesNames.ANGLE, fs(0.0));\n+                p.put(CgmesNames.VOLTAGE, fs(0.0));\n+                p.put(CgmesNames.TOPOLOGICAL_NODE, entry.getValue());\n+            }\n+            voltages.add(p);\n+        });\n+        cgmes.add(originalSVcontext, \"SvVoltage\", voltages);\n+    }\n+\n+    private void addPowerFlowToCgmes() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY0MDMzNQ=="}, "originalCommit": {"oid": "de47779ee06033672b959e9f934154fdc5060a78"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzI0OTAwOnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNDowODo0MVrOF1gJ8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjowMjoyNFrOF1k74g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY0NTY4MA==", "bodyText": "You can replace Arrays.asList(CgmesNames.NAME) by Collections.singletonList(...)", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r391645680", "createdAt": "2020-03-12T14:08:41Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -127,22 +325,106 @@ private static PropertyBag createPowerFlowProperties(CgmesModel cgmes, Terminal\n         return p;\n     }\n \n+    // added TopologicalIsland as it was in cgmes : original topology is\n+    // preserved.\n+    private void addTopologicalIslandsToCgmes() {\n+        if (!originalTopologicalIslands.isEmpty()) {\n+            // For properties such as \"cim:TopologicalIsland.TopologicalNodes\", which might\n+            // have arbitrary number of values, SPARQL will return multiple result sets.\n+            // All properties values will be equal, except the multiValued property\n+            // TopologicalNodes.\n+            // Also, there can be > 1 TopologicalIsland, so we need to re-group PropertyBags\n+            // by TopologicalIsland ID.\n+            Map<String, PropertyBags> byTopologicalIslandId = new HashMap<>();\n+            originalTopologicalIslands.forEach(pb -> {\n+                String island = pb.getId(CgmesNames.TOPOLOGICAL_ISLAND);\n+                if (byTopologicalIslandId.keySet().contains(island)) {\n+                    byTopologicalIslandId.get(island).add(pb);\n+                } else {\n+                    PropertyBags pbs = new PropertyBags();\n+                    pbs.add(pb);\n+                    byTopologicalIslandId.put(island, pbs);\n+                }\n+            });\n+            // now we can process all TPNodes from each island, and put them in one\n+            // multivaluedProperty.\n+            PropertyBags topologicalIslands = new PropertyBags();\n+            byTopologicalIslandId.values().forEach(island -> {\n+                PropertyBag topologicalIsland = new PropertyBag(SV_TOPOLOGICALISLAND_PROPERTIES);\n+                topologicalIsland.setClassPropertyNames(Arrays.asList(CgmesNames.NAME));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de47779ee06033672b959e9f934154fdc5060a78"}, "originalPosition": 366}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyNDAwMg==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r391724002", "createdAt": "2020-03-12T16:02:24Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -127,22 +325,106 @@ private static PropertyBag createPowerFlowProperties(CgmesModel cgmes, Terminal\n         return p;\n     }\n \n+    // added TopologicalIsland as it was in cgmes : original topology is\n+    // preserved.\n+    private void addTopologicalIslandsToCgmes() {\n+        if (!originalTopologicalIslands.isEmpty()) {\n+            // For properties such as \"cim:TopologicalIsland.TopologicalNodes\", which might\n+            // have arbitrary number of values, SPARQL will return multiple result sets.\n+            // All properties values will be equal, except the multiValued property\n+            // TopologicalNodes.\n+            // Also, there can be > 1 TopologicalIsland, so we need to re-group PropertyBags\n+            // by TopologicalIsland ID.\n+            Map<String, PropertyBags> byTopologicalIslandId = new HashMap<>();\n+            originalTopologicalIslands.forEach(pb -> {\n+                String island = pb.getId(CgmesNames.TOPOLOGICAL_ISLAND);\n+                if (byTopologicalIslandId.keySet().contains(island)) {\n+                    byTopologicalIslandId.get(island).add(pb);\n+                } else {\n+                    PropertyBags pbs = new PropertyBags();\n+                    pbs.add(pb);\n+                    byTopologicalIslandId.put(island, pbs);\n+                }\n+            });\n+            // now we can process all TPNodes from each island, and put them in one\n+            // multivaluedProperty.\n+            PropertyBags topologicalIslands = new PropertyBags();\n+            byTopologicalIslandId.values().forEach(island -> {\n+                PropertyBag topologicalIsland = new PropertyBag(SV_TOPOLOGICALISLAND_PROPERTIES);\n+                topologicalIsland.setClassPropertyNames(Arrays.asList(CgmesNames.NAME));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY0NTY4MA=="}, "originalCommit": {"oid": "de47779ee06033672b959e9f934154fdc5060a78"}, "originalPosition": 366}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzI1MDAyOnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNDowODo1OFrOF1gKpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjowMjo1MVrOF1k85g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY0NTg2Mg==", "bodyText": "You can replace Arrays.asList(TopologicalNodes) by Collections.singletonList(...)", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r391645862", "createdAt": "2020-03-12T14:08:58Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -127,22 +325,106 @@ private static PropertyBag createPowerFlowProperties(CgmesModel cgmes, Terminal\n         return p;\n     }\n \n+    // added TopologicalIsland as it was in cgmes : original topology is\n+    // preserved.\n+    private void addTopologicalIslandsToCgmes() {\n+        if (!originalTopologicalIslands.isEmpty()) {\n+            // For properties such as \"cim:TopologicalIsland.TopologicalNodes\", which might\n+            // have arbitrary number of values, SPARQL will return multiple result sets.\n+            // All properties values will be equal, except the multiValued property\n+            // TopologicalNodes.\n+            // Also, there can be > 1 TopologicalIsland, so we need to re-group PropertyBags\n+            // by TopologicalIsland ID.\n+            Map<String, PropertyBags> byTopologicalIslandId = new HashMap<>();\n+            originalTopologicalIslands.forEach(pb -> {\n+                String island = pb.getId(CgmesNames.TOPOLOGICAL_ISLAND);\n+                if (byTopologicalIslandId.keySet().contains(island)) {\n+                    byTopologicalIslandId.get(island).add(pb);\n+                } else {\n+                    PropertyBags pbs = new PropertyBags();\n+                    pbs.add(pb);\n+                    byTopologicalIslandId.put(island, pbs);\n+                }\n+            });\n+            // now we can process all TPNodes from each island, and put them in one\n+            // multivaluedProperty.\n+            PropertyBags topologicalIslands = new PropertyBags();\n+            byTopologicalIslandId.values().forEach(island -> {\n+                PropertyBag topologicalIsland = new PropertyBag(SV_TOPOLOGICALISLAND_PROPERTIES);\n+                topologicalIsland.setClassPropertyNames(Arrays.asList(CgmesNames.NAME));\n+                topologicalIsland.setMultivaluedProperty(Arrays.asList(\"TopologicalNodes\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de47779ee06033672b959e9f934154fdc5060a78"}, "originalPosition": 367}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyNDI2Mg==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r391724262", "createdAt": "2020-03-12T16:02:51Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -127,22 +325,106 @@ private static PropertyBag createPowerFlowProperties(CgmesModel cgmes, Terminal\n         return p;\n     }\n \n+    // added TopologicalIsland as it was in cgmes : original topology is\n+    // preserved.\n+    private void addTopologicalIslandsToCgmes() {\n+        if (!originalTopologicalIslands.isEmpty()) {\n+            // For properties such as \"cim:TopologicalIsland.TopologicalNodes\", which might\n+            // have arbitrary number of values, SPARQL will return multiple result sets.\n+            // All properties values will be equal, except the multiValued property\n+            // TopologicalNodes.\n+            // Also, there can be > 1 TopologicalIsland, so we need to re-group PropertyBags\n+            // by TopologicalIsland ID.\n+            Map<String, PropertyBags> byTopologicalIslandId = new HashMap<>();\n+            originalTopologicalIslands.forEach(pb -> {\n+                String island = pb.getId(CgmesNames.TOPOLOGICAL_ISLAND);\n+                if (byTopologicalIslandId.keySet().contains(island)) {\n+                    byTopologicalIslandId.get(island).add(pb);\n+                } else {\n+                    PropertyBags pbs = new PropertyBags();\n+                    pbs.add(pb);\n+                    byTopologicalIslandId.put(island, pbs);\n+                }\n+            });\n+            // now we can process all TPNodes from each island, and put them in one\n+            // multivaluedProperty.\n+            PropertyBags topologicalIslands = new PropertyBags();\n+            byTopologicalIslandId.values().forEach(island -> {\n+                PropertyBag topologicalIsland = new PropertyBag(SV_TOPOLOGICALISLAND_PROPERTIES);\n+                topologicalIsland.setClassPropertyNames(Arrays.asList(CgmesNames.NAME));\n+                topologicalIsland.setMultivaluedProperty(Arrays.asList(\"TopologicalNodes\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY0NTg2Mg=="}, "originalCommit": {"oid": "de47779ee06033672b959e9f934154fdc5060a78"}, "originalPosition": 367}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzI1MzA0OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNDowOTo0MVrOF1gMkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjowMzoyNVrOF1k-Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY0NjM1Mg==", "bodyText": "You can replace Arrays.asList(CgmesNames.DEPENDENT_ON) by Collections.singletonList(...)", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r391646352", "createdAt": "2020-03-12T14:09:41Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -127,22 +325,106 @@ private static PropertyBag createPowerFlowProperties(CgmesModel cgmes, Terminal\n         return p;\n     }\n \n+    // added TopologicalIsland as it was in cgmes : original topology is\n+    // preserved.\n+    private void addTopologicalIslandsToCgmes() {\n+        if (!originalTopologicalIslands.isEmpty()) {\n+            // For properties such as \"cim:TopologicalIsland.TopologicalNodes\", which might\n+            // have arbitrary number of values, SPARQL will return multiple result sets.\n+            // All properties values will be equal, except the multiValued property\n+            // TopologicalNodes.\n+            // Also, there can be > 1 TopologicalIsland, so we need to re-group PropertyBags\n+            // by TopologicalIsland ID.\n+            Map<String, PropertyBags> byTopologicalIslandId = new HashMap<>();\n+            originalTopologicalIslands.forEach(pb -> {\n+                String island = pb.getId(CgmesNames.TOPOLOGICAL_ISLAND);\n+                if (byTopologicalIslandId.keySet().contains(island)) {\n+                    byTopologicalIslandId.get(island).add(pb);\n+                } else {\n+                    PropertyBags pbs = new PropertyBags();\n+                    pbs.add(pb);\n+                    byTopologicalIslandId.put(island, pbs);\n+                }\n+            });\n+            // now we can process all TPNodes from each island, and put them in one\n+            // multivaluedProperty.\n+            PropertyBags topologicalIslands = new PropertyBags();\n+            byTopologicalIslandId.values().forEach(island -> {\n+                PropertyBag topologicalIsland = new PropertyBag(SV_TOPOLOGICALISLAND_PROPERTIES);\n+                topologicalIsland.setClassPropertyNames(Arrays.asList(CgmesNames.NAME));\n+                topologicalIsland.setMultivaluedProperty(Arrays.asList(\"TopologicalNodes\"));\n+                topologicalIsland.put(CgmesNames.NAME, island.get(0).getId(\"name\"));\n+                topologicalIsland.put(CgmesNames.ANGLEREF_TOPOLOGICALNODE,\n+                    island.get(0).getId(CgmesNames.ANGLEREF_TOPOLOGICALNODE));\n+                topologicalIsland.put(CgmesNames.TOPOLOGICAL_NODES,\n+                    String.join(\",\", island.pluckLocals(CgmesNames.TOPOLOGICAL_NODES)));\n+                topologicalIslands.add(topologicalIsland);\n+            });\n+            cgmes.add(originalSVcontext, CgmesNames.TOPOLOGICAL_ISLAND, topologicalIslands);\n+        }\n+    }\n+\n+    // Added full model data with proper profile (StateVariables)\n+    // FullModel is defined in ModelDescription:\n+    // http://iec.ch/TC57/61970-552/ModelDescription/1#\n+    private void addModelDescriptionToCgmes() {\n+        PropertyBags fullModelSV = new PropertyBags();\n+        // for properties such as \"md:Model.DependentOn\" which might have arbitrary\n+        // number of values, SPARQL will return multiple result sets.\n+        // All are equal, except the multiValued property value.\n+        if (!originalFullModel.isEmpty()) {\n+            PropertyBag newModelDescription = new PropertyBag(SV_FULLMODEL_PROPERTIES);\n+            newModelDescription\n+                .setClassPropertyNames(\n+                    Arrays.asList(CgmesNames.SCENARIO_TIME, CgmesNames.CREATED, CgmesNames.DESCRIPTION,\n+                        CgmesNames.VERSION, CgmesNames.DEPENDENT_ON, CgmesNames.PROFILE,\n+                        CgmesNames.MODELING_AUTHORITY_SET));\n+            newModelDescription.setMultivaluedProperty(Arrays.asList(CgmesNames.DEPENDENT_ON));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de47779ee06033672b959e9f934154fdc5060a78"}, "originalPosition": 394}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyNDY0Mg==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r391724642", "createdAt": "2020-03-12T16:03:25Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -127,22 +325,106 @@ private static PropertyBag createPowerFlowProperties(CgmesModel cgmes, Terminal\n         return p;\n     }\n \n+    // added TopologicalIsland as it was in cgmes : original topology is\n+    // preserved.\n+    private void addTopologicalIslandsToCgmes() {\n+        if (!originalTopologicalIslands.isEmpty()) {\n+            // For properties such as \"cim:TopologicalIsland.TopologicalNodes\", which might\n+            // have arbitrary number of values, SPARQL will return multiple result sets.\n+            // All properties values will be equal, except the multiValued property\n+            // TopologicalNodes.\n+            // Also, there can be > 1 TopologicalIsland, so we need to re-group PropertyBags\n+            // by TopologicalIsland ID.\n+            Map<String, PropertyBags> byTopologicalIslandId = new HashMap<>();\n+            originalTopologicalIslands.forEach(pb -> {\n+                String island = pb.getId(CgmesNames.TOPOLOGICAL_ISLAND);\n+                if (byTopologicalIslandId.keySet().contains(island)) {\n+                    byTopologicalIslandId.get(island).add(pb);\n+                } else {\n+                    PropertyBags pbs = new PropertyBags();\n+                    pbs.add(pb);\n+                    byTopologicalIslandId.put(island, pbs);\n+                }\n+            });\n+            // now we can process all TPNodes from each island, and put them in one\n+            // multivaluedProperty.\n+            PropertyBags topologicalIslands = new PropertyBags();\n+            byTopologicalIslandId.values().forEach(island -> {\n+                PropertyBag topologicalIsland = new PropertyBag(SV_TOPOLOGICALISLAND_PROPERTIES);\n+                topologicalIsland.setClassPropertyNames(Arrays.asList(CgmesNames.NAME));\n+                topologicalIsland.setMultivaluedProperty(Arrays.asList(\"TopologicalNodes\"));\n+                topologicalIsland.put(CgmesNames.NAME, island.get(0).getId(\"name\"));\n+                topologicalIsland.put(CgmesNames.ANGLEREF_TOPOLOGICALNODE,\n+                    island.get(0).getId(CgmesNames.ANGLEREF_TOPOLOGICALNODE));\n+                topologicalIsland.put(CgmesNames.TOPOLOGICAL_NODES,\n+                    String.join(\",\", island.pluckLocals(CgmesNames.TOPOLOGICAL_NODES)));\n+                topologicalIslands.add(topologicalIsland);\n+            });\n+            cgmes.add(originalSVcontext, CgmesNames.TOPOLOGICAL_ISLAND, topologicalIslands);\n+        }\n+    }\n+\n+    // Added full model data with proper profile (StateVariables)\n+    // FullModel is defined in ModelDescription:\n+    // http://iec.ch/TC57/61970-552/ModelDescription/1#\n+    private void addModelDescriptionToCgmes() {\n+        PropertyBags fullModelSV = new PropertyBags();\n+        // for properties such as \"md:Model.DependentOn\" which might have arbitrary\n+        // number of values, SPARQL will return multiple result sets.\n+        // All are equal, except the multiValued property value.\n+        if (!originalFullModel.isEmpty()) {\n+            PropertyBag newModelDescription = new PropertyBag(SV_FULLMODEL_PROPERTIES);\n+            newModelDescription\n+                .setClassPropertyNames(\n+                    Arrays.asList(CgmesNames.SCENARIO_TIME, CgmesNames.CREATED, CgmesNames.DESCRIPTION,\n+                        CgmesNames.VERSION, CgmesNames.DEPENDENT_ON, CgmesNames.PROFILE,\n+                        CgmesNames.MODELING_AUTHORITY_SET));\n+            newModelDescription.setMultivaluedProperty(Arrays.asList(CgmesNames.DEPENDENT_ON));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY0NjM1Mg=="}, "originalCommit": {"oid": "de47779ee06033672b959e9f934154fdc5060a78"}, "originalPosition": 394}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzI1OTQ1OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNDoxMTowNlrOF1gQcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoxMzoyMlrOF1lW3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY0NzM0NQ==", "bodyText": "All these fields can be final.", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r391647345", "createdAt": "2020-03-12T14:11:06Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -127,22 +325,106 @@ private static PropertyBag createPowerFlowProperties(CgmesModel cgmes, Terminal\n         return p;\n     }\n \n+    // added TopologicalIsland as it was in cgmes : original topology is\n+    // preserved.\n+    private void addTopologicalIslandsToCgmes() {\n+        if (!originalTopologicalIslands.isEmpty()) {\n+            // For properties such as \"cim:TopologicalIsland.TopologicalNodes\", which might\n+            // have arbitrary number of values, SPARQL will return multiple result sets.\n+            // All properties values will be equal, except the multiValued property\n+            // TopologicalNodes.\n+            // Also, there can be > 1 TopologicalIsland, so we need to re-group PropertyBags\n+            // by TopologicalIsland ID.\n+            Map<String, PropertyBags> byTopologicalIslandId = new HashMap<>();\n+            originalTopologicalIslands.forEach(pb -> {\n+                String island = pb.getId(CgmesNames.TOPOLOGICAL_ISLAND);\n+                if (byTopologicalIslandId.keySet().contains(island)) {\n+                    byTopologicalIslandId.get(island).add(pb);\n+                } else {\n+                    PropertyBags pbs = new PropertyBags();\n+                    pbs.add(pb);\n+                    byTopologicalIslandId.put(island, pbs);\n+                }\n+            });\n+            // now we can process all TPNodes from each island, and put them in one\n+            // multivaluedProperty.\n+            PropertyBags topologicalIslands = new PropertyBags();\n+            byTopologicalIslandId.values().forEach(island -> {\n+                PropertyBag topologicalIsland = new PropertyBag(SV_TOPOLOGICALISLAND_PROPERTIES);\n+                topologicalIsland.setClassPropertyNames(Arrays.asList(CgmesNames.NAME));\n+                topologicalIsland.setMultivaluedProperty(Arrays.asList(\"TopologicalNodes\"));\n+                topologicalIsland.put(CgmesNames.NAME, island.get(0).getId(\"name\"));\n+                topologicalIsland.put(CgmesNames.ANGLEREF_TOPOLOGICALNODE,\n+                    island.get(0).getId(CgmesNames.ANGLEREF_TOPOLOGICALNODE));\n+                topologicalIsland.put(CgmesNames.TOPOLOGICAL_NODES,\n+                    String.join(\",\", island.pluckLocals(CgmesNames.TOPOLOGICAL_NODES)));\n+                topologicalIslands.add(topologicalIsland);\n+            });\n+            cgmes.add(originalSVcontext, CgmesNames.TOPOLOGICAL_ISLAND, topologicalIslands);\n+        }\n+    }\n+\n+    // Added full model data with proper profile (StateVariables)\n+    // FullModel is defined in ModelDescription:\n+    // http://iec.ch/TC57/61970-552/ModelDescription/1#\n+    private void addModelDescriptionToCgmes() {\n+        PropertyBags fullModelSV = new PropertyBags();\n+        // for properties such as \"md:Model.DependentOn\" which might have arbitrary\n+        // number of values, SPARQL will return multiple result sets.\n+        // All are equal, except the multiValued property value.\n+        if (!originalFullModel.isEmpty()) {\n+            PropertyBag newModelDescription = new PropertyBag(SV_FULLMODEL_PROPERTIES);\n+            newModelDescription\n+                .setClassPropertyNames(\n+                    Arrays.asList(CgmesNames.SCENARIO_TIME, CgmesNames.CREATED, CgmesNames.DESCRIPTION,\n+                        CgmesNames.VERSION, CgmesNames.DEPENDENT_ON, CgmesNames.PROFILE,\n+                        CgmesNames.MODELING_AUTHORITY_SET));\n+            newModelDescription.setMultivaluedProperty(Arrays.asList(CgmesNames.DEPENDENT_ON));\n+            newModelDescription.put(CgmesNames.SCENARIO_TIME, originalFullModel.get(0).getId(\"scenarioTime\"));\n+            newModelDescription.put(CgmesNames.CREATED, originalFullModel.get(0).getId(\"created\"));\n+            newModelDescription.put(CgmesNames.DESCRIPTION, originalFullModel.get(0).getId(\"description\"));\n+            newModelDescription.put(CgmesNames.VERSION, originalFullModel.get(0).getId(\"version\"));\n+            newModelDescription.put(CgmesNames.DEPENDENT_ON,\n+                String.join(\",\", originalFullModel.pluckLocals(\"DependentOn\")));\n+            newModelDescription.put(CgmesNames.PROFILE, originalFullModel.get(0).getId(\"profile\"));\n+            newModelDescription.put(CgmesNames.MODELING_AUTHORITY_SET,\n+                originalFullModel.get(0).getId(\"modelingAuthoritySet\"));\n+            fullModelSV.add(newModelDescription);\n+            cgmes.add(originalSVcontext, CgmesNames.FULL_MODEL, fullModelSV);\n+        }\n+    }\n+\n     private static String fs(double value) {\n-        return String.valueOf(value);\n+        return Double.isNaN(value) ? String.valueOf(0.0) : String.valueOf(value);\n     }\n \n     private static String is(int value) {\n         return String.valueOf(value);\n     }\n \n-    private static String topologicalNodeFromBusId(String iidmBusId) {\n-        // TODO Consider potential namingStrategy transformations\n-        return iidmBusId;\n-    }\n+    private CgmesModel cgmes;\n+    private Network network;\n+    private int cimVersion;\n+    private PropertyBags originalTerminals;\n+    private PropertyBags originalFullModel;\n+    private PropertyBags originalTopologicalIslands;\n+    private String originalSVcontext;\n+    private Map<String, String> boundaryNodesFromDanglingLines;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de47779ee06033672b959e9f934154fdc5060a78"}, "originalPosition": 429}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczMDkxMQ==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r391730911", "createdAt": "2020-03-12T16:13:22Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -127,22 +325,106 @@ private static PropertyBag createPowerFlowProperties(CgmesModel cgmes, Terminal\n         return p;\n     }\n \n+    // added TopologicalIsland as it was in cgmes : original topology is\n+    // preserved.\n+    private void addTopologicalIslandsToCgmes() {\n+        if (!originalTopologicalIslands.isEmpty()) {\n+            // For properties such as \"cim:TopologicalIsland.TopologicalNodes\", which might\n+            // have arbitrary number of values, SPARQL will return multiple result sets.\n+            // All properties values will be equal, except the multiValued property\n+            // TopologicalNodes.\n+            // Also, there can be > 1 TopologicalIsland, so we need to re-group PropertyBags\n+            // by TopologicalIsland ID.\n+            Map<String, PropertyBags> byTopologicalIslandId = new HashMap<>();\n+            originalTopologicalIslands.forEach(pb -> {\n+                String island = pb.getId(CgmesNames.TOPOLOGICAL_ISLAND);\n+                if (byTopologicalIslandId.keySet().contains(island)) {\n+                    byTopologicalIslandId.get(island).add(pb);\n+                } else {\n+                    PropertyBags pbs = new PropertyBags();\n+                    pbs.add(pb);\n+                    byTopologicalIslandId.put(island, pbs);\n+                }\n+            });\n+            // now we can process all TPNodes from each island, and put them in one\n+            // multivaluedProperty.\n+            PropertyBags topologicalIslands = new PropertyBags();\n+            byTopologicalIslandId.values().forEach(island -> {\n+                PropertyBag topologicalIsland = new PropertyBag(SV_TOPOLOGICALISLAND_PROPERTIES);\n+                topologicalIsland.setClassPropertyNames(Arrays.asList(CgmesNames.NAME));\n+                topologicalIsland.setMultivaluedProperty(Arrays.asList(\"TopologicalNodes\"));\n+                topologicalIsland.put(CgmesNames.NAME, island.get(0).getId(\"name\"));\n+                topologicalIsland.put(CgmesNames.ANGLEREF_TOPOLOGICALNODE,\n+                    island.get(0).getId(CgmesNames.ANGLEREF_TOPOLOGICALNODE));\n+                topologicalIsland.put(CgmesNames.TOPOLOGICAL_NODES,\n+                    String.join(\",\", island.pluckLocals(CgmesNames.TOPOLOGICAL_NODES)));\n+                topologicalIslands.add(topologicalIsland);\n+            });\n+            cgmes.add(originalSVcontext, CgmesNames.TOPOLOGICAL_ISLAND, topologicalIslands);\n+        }\n+    }\n+\n+    // Added full model data with proper profile (StateVariables)\n+    // FullModel is defined in ModelDescription:\n+    // http://iec.ch/TC57/61970-552/ModelDescription/1#\n+    private void addModelDescriptionToCgmes() {\n+        PropertyBags fullModelSV = new PropertyBags();\n+        // for properties such as \"md:Model.DependentOn\" which might have arbitrary\n+        // number of values, SPARQL will return multiple result sets.\n+        // All are equal, except the multiValued property value.\n+        if (!originalFullModel.isEmpty()) {\n+            PropertyBag newModelDescription = new PropertyBag(SV_FULLMODEL_PROPERTIES);\n+            newModelDescription\n+                .setClassPropertyNames(\n+                    Arrays.asList(CgmesNames.SCENARIO_TIME, CgmesNames.CREATED, CgmesNames.DESCRIPTION,\n+                        CgmesNames.VERSION, CgmesNames.DEPENDENT_ON, CgmesNames.PROFILE,\n+                        CgmesNames.MODELING_AUTHORITY_SET));\n+            newModelDescription.setMultivaluedProperty(Arrays.asList(CgmesNames.DEPENDENT_ON));\n+            newModelDescription.put(CgmesNames.SCENARIO_TIME, originalFullModel.get(0).getId(\"scenarioTime\"));\n+            newModelDescription.put(CgmesNames.CREATED, originalFullModel.get(0).getId(\"created\"));\n+            newModelDescription.put(CgmesNames.DESCRIPTION, originalFullModel.get(0).getId(\"description\"));\n+            newModelDescription.put(CgmesNames.VERSION, originalFullModel.get(0).getId(\"version\"));\n+            newModelDescription.put(CgmesNames.DEPENDENT_ON,\n+                String.join(\",\", originalFullModel.pluckLocals(\"DependentOn\")));\n+            newModelDescription.put(CgmesNames.PROFILE, originalFullModel.get(0).getId(\"profile\"));\n+            newModelDescription.put(CgmesNames.MODELING_AUTHORITY_SET,\n+                originalFullModel.get(0).getId(\"modelingAuthoritySet\"));\n+            fullModelSV.add(newModelDescription);\n+            cgmes.add(originalSVcontext, CgmesNames.FULL_MODEL, fullModelSV);\n+        }\n+    }\n+\n     private static String fs(double value) {\n-        return String.valueOf(value);\n+        return Double.isNaN(value) ? String.valueOf(0.0) : String.valueOf(value);\n     }\n \n     private static String is(int value) {\n         return String.valueOf(value);\n     }\n \n-    private static String topologicalNodeFromBusId(String iidmBusId) {\n-        // TODO Consider potential namingStrategy transformations\n-        return iidmBusId;\n-    }\n+    private CgmesModel cgmes;\n+    private Network network;\n+    private int cimVersion;\n+    private PropertyBags originalTerminals;\n+    private PropertyBags originalFullModel;\n+    private PropertyBags originalTopologicalIslands;\n+    private String originalSVcontext;\n+    private Map<String, String> boundaryNodesFromDanglingLines;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY0NzM0NQ=="}, "originalCommit": {"oid": "de47779ee06033672b959e9f934154fdc5060a78"}, "originalPosition": 429}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzI4MjM1OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-model/src/main/java/com/powsybl/cgmes/model/CgmesModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNDoxNjoyOFrOF1geuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNjo0ODowNlrOF15J1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY1MTAwMA==", "bodyText": "Add a default implementation to prevent breaking changes", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r391651000", "createdAt": "2020-03-12T14:16:28Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-model/src/main/java/com/powsybl/cgmes/model/CgmesModel.java", "diffHunk": "@@ -29,6 +29,8 @@\n \n     Properties getProperties();\n \n+    PropertyBags fullModel(String cgmesProfile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de47779ee06033672b959e9f934154fdc5060a78"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA1NTI1Mg==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r392055252", "createdAt": "2020-03-13T06:48:06Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-model/src/main/java/com/powsybl/cgmes/model/CgmesModel.java", "diffHunk": "@@ -29,6 +29,8 @@\n \n     Properties getProperties();\n \n+    PropertyBags fullModel(String cgmesProfile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY1MTAwMA=="}, "originalCommit": {"oid": "de47779ee06033672b959e9f934154fdc5060a78"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzI4MjgzOnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-model/src/main/java/com/powsybl/cgmes/model/CgmesModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNDoxNjozNlrOF1gfFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNjo1MzoyNFrOF15PQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY1MTA5NA==", "bodyText": "Same remark", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r391651094", "createdAt": "2020-03-12T14:16:36Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-model/src/main/java/com/powsybl/cgmes/model/CgmesModel.java", "diffHunk": "@@ -130,10 +132,16 @@\n \n     PropertyBags dcTerminalsTP();\n \n+    PropertyBags topologicalIslands();\n+\n+    PropertyBags graph();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de47779ee06033672b959e9f934154fdc5060a78"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA1NjY0MA==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r392056640", "createdAt": "2020-03-13T06:53:24Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-model/src/main/java/com/powsybl/cgmes/model/CgmesModel.java", "diffHunk": "@@ -130,10 +132,16 @@\n \n     PropertyBags dcTerminalsTP();\n \n+    PropertyBags topologicalIslands();\n+\n+    PropertyBags graph();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY1MTA5NA=="}, "originalCommit": {"oid": "de47779ee06033672b959e9f934154fdc5060a78"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzI4MzEzOnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-model/src/main/java/com/powsybl/cgmes/model/CgmesModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNDoxNjo0MlrOF1gfTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNzoxNDo1OVrOF15m2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY1MTE0OA==", "bodyText": "Same remark", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r391651148", "createdAt": "2020-03-12T14:16:42Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-model/src/main/java/com/powsybl/cgmes/model/CgmesModel.java", "diffHunk": "@@ -130,10 +132,16 @@\n \n     PropertyBags dcTerminalsTP();\n \n+    PropertyBags topologicalIslands();\n+\n+    PropertyBags graph();\n+\n     void clear(CgmesSubset subset);\n \n     void add(CgmesSubset subset, String type, PropertyBags objects);\n \n+    void add(String context, String type, PropertyBags objects);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de47779ee06033672b959e9f934154fdc5060a78"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA2MjY4Mw==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r392062683", "createdAt": "2020-03-13T07:14:59Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-model/src/main/java/com/powsybl/cgmes/model/CgmesModel.java", "diffHunk": "@@ -130,10 +132,16 @@\n \n     PropertyBags dcTerminalsTP();\n \n+    PropertyBags topologicalIslands();\n+\n+    PropertyBags graph();\n+\n     void clear(CgmesSubset subset);\n \n     void add(CgmesSubset subset, String type, PropertyBags objects);\n \n+    void add(String context, String type, PropertyBags objects);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY1MTE0OA=="}, "originalCommit": {"oid": "de47779ee06033672b959e9f934154fdc5060a78"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzI5MzkzOnYy", "diffSide": "RIGHT", "path": "triple-store/triple-store-api/src/main/java/com/powsybl/triplestore/api/PropertyBag.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNDoxOToyMFrOF1gmIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjo0NDo1OVrOF1moKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY1Mjg5OQ==", "bodyText": "If you want to set this.resourceNames, you will need to clear it before calling addAll:\nthis.resourceNames.clear();\nthis.resourceNames.addAll(...);", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r391652899", "createdAt": "2020-03-12T14:19:20Z", "author": {"login": "miovd"}, "path": "triple-store/triple-store-api/src/main/java/com/powsybl/triplestore/api/PropertyBag.java", "diffHunk": "@@ -184,24 +183,36 @@ public String namespacePrefix(String name) {\n     }\n \n     public void setResourceNames(List<String> resourceNames) {\n-        this.resourceNames = Objects.requireNonNull(resourceNames);\n+        this.resourceNames.addAll(Objects.requireNonNull(resourceNames));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de47779ee06033672b959e9f934154fdc5060a78"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1MTcyMA==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r391751720", "createdAt": "2020-03-12T16:44:59Z", "author": {"login": "kaltakovae"}, "path": "triple-store/triple-store-api/src/main/java/com/powsybl/triplestore/api/PropertyBag.java", "diffHunk": "@@ -184,24 +183,36 @@ public String namespacePrefix(String name) {\n     }\n \n     public void setResourceNames(List<String> resourceNames) {\n-        this.resourceNames = Objects.requireNonNull(resourceNames);\n+        this.resourceNames.addAll(Objects.requireNonNull(resourceNames));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY1Mjg5OQ=="}, "originalCommit": {"oid": "de47779ee06033672b959e9f934154fdc5060a78"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzI5NDU2OnYy", "diffSide": "RIGHT", "path": "triple-store/triple-store-api/src/main/java/com/powsybl/triplestore/api/PropertyBag.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNDoxOTozMVrOF1gmlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNzoxOToxMFrOF15r1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY1MzAxNA==", "bodyText": "Same remark", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r391653014", "createdAt": "2020-03-12T14:19:31Z", "author": {"login": "miovd"}, "path": "triple-store/triple-store-api/src/main/java/com/powsybl/triplestore/api/PropertyBag.java", "diffHunk": "@@ -184,24 +183,36 @@ public String namespacePrefix(String name) {\n     }\n \n     public void setResourceNames(List<String> resourceNames) {\n-        this.resourceNames = Objects.requireNonNull(resourceNames);\n+        this.resourceNames.addAll(Objects.requireNonNull(resourceNames));\n     }\n \n     public void setClassPropertyNames(List<String> classPropertyNames) {\n-        this.classPropertyNames = Objects.requireNonNull(classPropertyNames);\n+        this.classPropertyNames.addAll(Objects.requireNonNull(classPropertyNames));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de47779ee06033672b959e9f934154fdc5060a78"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA2Mzk1OA==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r392063958", "createdAt": "2020-03-13T07:19:10Z", "author": {"login": "kaltakovae"}, "path": "triple-store/triple-store-api/src/main/java/com/powsybl/triplestore/api/PropertyBag.java", "diffHunk": "@@ -184,24 +183,36 @@ public String namespacePrefix(String name) {\n     }\n \n     public void setResourceNames(List<String> resourceNames) {\n-        this.resourceNames = Objects.requireNonNull(resourceNames);\n+        this.resourceNames.addAll(Objects.requireNonNull(resourceNames));\n     }\n \n     public void setClassPropertyNames(List<String> classPropertyNames) {\n-        this.classPropertyNames = Objects.requireNonNull(classPropertyNames);\n+        this.classPropertyNames.addAll(Objects.requireNonNull(classPropertyNames));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY1MzAxNA=="}, "originalCommit": {"oid": "de47779ee06033672b959e9f934154fdc5060a78"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzI5NTE0OnYy", "diffSide": "RIGHT", "path": "triple-store/triple-store-api/src/main/java/com/powsybl/triplestore/api/PropertyBag.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNDoxOTozOVrOF1gm7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNzoyMDowMlrOF15svQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY1MzEwMg==", "bodyText": "Same remark", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r391653102", "createdAt": "2020-03-12T14:19:39Z", "author": {"login": "miovd"}, "path": "triple-store/triple-store-api/src/main/java/com/powsybl/triplestore/api/PropertyBag.java", "diffHunk": "@@ -184,24 +183,36 @@ public String namespacePrefix(String name) {\n     }\n \n     public void setResourceNames(List<String> resourceNames) {\n-        this.resourceNames = Objects.requireNonNull(resourceNames);\n+        this.resourceNames.addAll(Objects.requireNonNull(resourceNames));\n     }\n \n     public void setClassPropertyNames(List<String> classPropertyNames) {\n-        this.classPropertyNames = Objects.requireNonNull(classPropertyNames);\n+        this.classPropertyNames.addAll(Objects.requireNonNull(classPropertyNames));\n     }\n \n     public boolean isClassProperty(String name) {\n         return classPropertyNames.contains(name);\n     }\n \n+    public void setMultivaluedProperty(List<String> multiValuedPropertyNames) {\n+        this.multiValuedPropertyNames.addAll(Objects.requireNonNull(multiValuedPropertyNames));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de47779ee06033672b959e9f934154fdc5060a78"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA2NDE4OQ==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r392064189", "createdAt": "2020-03-13T07:20:02Z", "author": {"login": "kaltakovae"}, "path": "triple-store/triple-store-api/src/main/java/com/powsybl/triplestore/api/PropertyBag.java", "diffHunk": "@@ -184,24 +183,36 @@ public String namespacePrefix(String name) {\n     }\n \n     public void setResourceNames(List<String> resourceNames) {\n-        this.resourceNames = Objects.requireNonNull(resourceNames);\n+        this.resourceNames.addAll(Objects.requireNonNull(resourceNames));\n     }\n \n     public void setClassPropertyNames(List<String> classPropertyNames) {\n-        this.classPropertyNames = Objects.requireNonNull(classPropertyNames);\n+        this.classPropertyNames.addAll(Objects.requireNonNull(classPropertyNames));\n     }\n \n     public boolean isClassProperty(String name) {\n         return classPropertyNames.contains(name);\n     }\n \n+    public void setMultivaluedProperty(List<String> multiValuedPropertyNames) {\n+        this.multiValuedPropertyNames.addAll(Objects.requireNonNull(multiValuedPropertyNames));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY1MzEwMg=="}, "originalCommit": {"oid": "de47779ee06033672b959e9f934154fdc5060a78"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTQyNzc4OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTo0MTowNVrOF2IgoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDo0NDozNVrOF23mRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwNjg0OA==", "bodyText": "You should use leg.hasPhaseTapChanger() that is more human readable.", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r392306848", "createdAt": "2020-03-13T15:41:05Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +203,99 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : network.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3()).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27bfaf640a665af273e04e42a7ab415c4ed856ab"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkxMTk5Mw==", "bodyText": "The hasPhaseTapChanger() is not available for Leg. Theses methods are in TapChangerParent interface. Would you like us to modify iidm Leg - add hasPhaseTapChanger() ? or make the method in TapChangerParent available for Leg?", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r392911993", "createdAt": "2020-03-16T10:22:25Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +203,99 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : network.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3()).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwNjg0OA=="}, "originalCommit": {"oid": "27bfaf640a665af273e04e42a7ab415c4ed856ab"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkyNDM5MA==", "bodyText": "Alternatively, I can add private methods like this to StateVariableAdder:\nprivate boolean hasRatioTapChanger(Leg leg) {\nreturn leg.getRatioTapChanger() != null;\n}\nprivate boolean hasPhaseTapChanger(Leg leg) {\n    return leg.getPhaseTapChanger() != null;\n}", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r392924390", "createdAt": "2020-03-16T10:39:03Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +203,99 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : network.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3()).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwNjg0OA=="}, "originalCommit": {"oid": "27bfaf640a665af273e04e42a7ab415c4ed856ab"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkyOTk5Mw==", "bodyText": "I don't think it is a good idea to make this evolution in this PR... Keep the code here as it is for now, I am opening an issue to add convenient methods such as hasPhaseTapChanger() on APIs.", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r392929993", "createdAt": "2020-03-16T10:45:53Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +203,99 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : network.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3()).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwNjg0OA=="}, "originalCommit": {"oid": "27bfaf640a665af273e04e42a7ab415c4ed856ab"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzNTgwNQ==", "bodyText": "Alternatively, I can add private methods like this to StateVariableAdder:\nprivate boolean hasRatioTapChanger(Leg leg) {\nreturn leg.getRatioTapChanger() != null;\n}\nprivate boolean hasPhaseTapChanger(Leg leg) {\n    return leg.getPhaseTapChanger() != null;\n}\n\n\nThis is a good idea, it will make it easier to \"clean\" the code, once the API change will be implemented.", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r392935805", "createdAt": "2020-03-16T10:56:25Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +203,99 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : network.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3()).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwNjg0OA=="}, "originalCommit": {"oid": "27bfaf640a665af273e04e42a7ab415c4ed856ab"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk1MDY5Mg==", "bodyText": "@MioRtia  what do you think if we use this version:\nprivate boolean hasPhaseTapChanger(Object leg) {\nif (leg instanceof Leg) {\nreturn ((Leg) leg).getPhaseTapChanger() != null;\n} else if (leg instanceof TwoWindingsTransformer) {\nreturn ((TwoWindingsTransformer) leg).getPhaseTapChanger() != null;\n}\nreturn false;\n}\nWe could use it for both 2 and 3 wing transformes in addTapStepToCgmes()", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r392950692", "createdAt": "2020-03-16T11:28:53Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +203,99 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : network.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3()).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwNjg0OA=="}, "originalCommit": {"oid": "27bfaf640a665af273e04e42a7ab415c4ed856ab"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAwMDA3OQ==", "bodyText": "it works for me!", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r393000079", "createdAt": "2020-03-16T12:50:22Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +203,99 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : network.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3()).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwNjg0OA=="}, "originalCommit": {"oid": "27bfaf640a665af273e04e42a7ab415c4ed856ab"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA3ODM0Mg==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r393078342", "createdAt": "2020-03-16T14:44:35Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +203,99 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : network.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3()).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwNjg0OA=="}, "originalCommit": {"oid": "27bfaf640a665af273e04e42a7ab415c4ed856ab"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTQyOTY1OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTo0MTozMVrOF2Ihxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDo1MDoxN1rOF2uszA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwNzE0Mw==", "bodyText": "Same improvement using leg.hasRatioTapChanger()", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r392307143", "createdAt": "2020-03-13T15:41:31Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +203,99 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : network.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3()).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getPhaseTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.phaseTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                } else if (leg.getRatioTapChanger() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27bfaf640a665af273e04e42a7ab415c4ed856ab"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzMjU1Ng==", "bodyText": "Same remark", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r392932556", "createdAt": "2020-03-16T10:50:17Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +203,99 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : network.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3()).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getPhaseTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.phaseTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                } else if (leg.getRatioTapChanger() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwNzE0Mw=="}, "originalCommit": {"oid": "27bfaf640a665af273e04e42a7ab415c4ed856ab"}, "originalPosition": 236}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTQzNDUzOnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTo0Mjo1MVrOF2Ik3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDo1MDo0MFrOF2utpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwNzkzMg==", "bodyText": "It could be a good idea to add this convenient feature to the network.", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r392307932", "createdAt": "2020-03-13T15:42:51Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +203,99 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : network.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3()).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getPhaseTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.phaseTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                } else if (leg.getRatioTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getRatioTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.ratioTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                }\n+            });\n+        }\n+\n+        cgmes.add(originalSVcontext, \"SvTapStep\", tapSteps);\n+    }\n+\n+    private void addStatusToCgmes() {\n+        // create SvStatus, iterate on Connectables, check Terminal status, add\n+        // to SvStatus\n+        PropertyBags svStatus = new PropertyBags();\n+        network.getVoltageLevelStream()\n+            .flatMap(VoltageLevel::getConnectableStream)\n+            .distinct()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27bfaf640a665af273e04e42a7ab415c4ed856ab"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzMjc3Mg==", "bodyText": "I will write an issue related to that", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r392932772", "createdAt": "2020-03-16T10:50:40Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +203,99 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : network.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3()).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getPhaseTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.phaseTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                } else if (leg.getRatioTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getRatioTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.ratioTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                }\n+            });\n+        }\n+\n+        cgmes.add(originalSVcontext, \"SvTapStep\", tapSteps);\n+    }\n+\n+    private void addStatusToCgmes() {\n+        // create SvStatus, iterate on Connectables, check Terminal status, add\n+        // to SvStatus\n+        PropertyBags svStatus = new PropertyBags();\n+        network.getVoltageLevelStream()\n+            .flatMap(VoltageLevel::getConnectableStream)\n+            .distinct()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwNzkzMg=="}, "originalCommit": {"oid": "27bfaf640a665af273e04e42a7ab415c4ed856ab"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTQ0MDY5OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTo0NDozMlrOF2IoyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzozOTowNVrOF2_Agw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwODkzNw==", "bodyText": "Not sure this is OK: If a line is connected on side 1 but disconnected on side 2, I'm not sure the IN_SERVICE should be true.", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r392308937", "createdAt": "2020-03-13T15:44:32Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +203,99 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : network.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3()).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getPhaseTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.phaseTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                } else if (leg.getRatioTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getRatioTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.ratioTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                }\n+            });\n+        }\n+\n+        cgmes.add(originalSVcontext, \"SvTapStep\", tapSteps);\n+    }\n+\n+    private void addStatusToCgmes() {\n+        // create SvStatus, iterate on Connectables, check Terminal status, add\n+        // to SvStatus\n+        PropertyBags svStatus = new PropertyBags();\n+        network.getVoltageLevelStream()\n+            .flatMap(VoltageLevel::getConnectableStream)\n+            .distinct()\n+            .forEach(c -> {\n+                PropertyBag p = new PropertyBag(SV_SVSTATUS_PROPERTIES);\n+                for (Terminal t : ((Connectable<?>) c).getTerminals()) {\n+                    p.put(IN_SERVICE, Boolean.toString(t.isConnected()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27bfaf640a665af273e04e42a7ab415c4ed856ab"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMxOTEzMw==", "bodyText": "@MioRtia @zamarrenolm What do you think?", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r392319133", "createdAt": "2020-03-13T15:59:13Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +203,99 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : network.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3()).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getPhaseTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.phaseTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                } else if (leg.getRatioTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getRatioTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.ratioTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                }\n+            });\n+        }\n+\n+        cgmes.add(originalSVcontext, \"SvTapStep\", tapSteps);\n+    }\n+\n+    private void addStatusToCgmes() {\n+        // create SvStatus, iterate on Connectables, check Terminal status, add\n+        // to SvStatus\n+        PropertyBags svStatus = new PropertyBags();\n+        network.getVoltageLevelStream()\n+            .flatMap(VoltageLevel::getConnectableStream)\n+            .distinct()\n+            .forEach(c -> {\n+                PropertyBag p = new PropertyBag(SV_SVSTATUS_PROPERTIES);\n+                for (Terminal t : ((Connectable<?>) c).getTerminals()) {\n+                    p.put(IN_SERVICE, Boolean.toString(t.isConnected()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwODkzNw=="}, "originalCommit": {"oid": "27bfaf640a665af273e04e42a7ab415c4ed856ab"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0MDE2Mw==", "bodyText": "I agree with @mathbagu, not sure what is put in the property bag, it always is the connectivity status of the last terminal, right? Is it what we want?", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r392940163", "createdAt": "2020-03-16T11:04:26Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +203,99 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : network.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3()).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getPhaseTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.phaseTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                } else if (leg.getRatioTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getRatioTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.ratioTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                }\n+            });\n+        }\n+\n+        cgmes.add(originalSVcontext, \"SvTapStep\", tapSteps);\n+    }\n+\n+    private void addStatusToCgmes() {\n+        // create SvStatus, iterate on Connectables, check Terminal status, add\n+        // to SvStatus\n+        PropertyBags svStatus = new PropertyBags();\n+        network.getVoltageLevelStream()\n+            .flatMap(VoltageLevel::getConnectableStream)\n+            .distinct()\n+            .forEach(c -> {\n+                PropertyBag p = new PropertyBag(SV_SVSTATUS_PROPERTIES);\n+                for (Terminal t : ((Connectable<?>) c).getTerminals()) {\n+                    p.put(IN_SERVICE, Boolean.toString(t.isConnected()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwODkzNw=="}, "originalCommit": {"oid": "27bfaf640a665af273e04e42a7ab415c4ed856ab"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAwODA1NQ==", "bodyText": "The definition for inService attribute for a ConductingEquipment states that it is: The in service status as a result of topology processing.\nFor me: if a conducting equipment with multiple terminals has at least one terminal connected, it should be considered in-service. At least it makes sense from a modeling point of view, and its impact in the network could be calculated.", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r393008055", "createdAt": "2020-03-16T13:05:13Z", "author": {"login": "zamarrenolm"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +203,99 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : network.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3()).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getPhaseTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.phaseTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                } else if (leg.getRatioTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getRatioTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.ratioTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                }\n+            });\n+        }\n+\n+        cgmes.add(originalSVcontext, \"SvTapStep\", tapSteps);\n+    }\n+\n+    private void addStatusToCgmes() {\n+        // create SvStatus, iterate on Connectables, check Terminal status, add\n+        // to SvStatus\n+        PropertyBags svStatus = new PropertyBags();\n+        network.getVoltageLevelStream()\n+            .flatMap(VoltageLevel::getConnectableStream)\n+            .distinct()\n+            .forEach(c -> {\n+                PropertyBag p = new PropertyBag(SV_SVSTATUS_PROPERTIES);\n+                for (Terminal t : ((Connectable<?>) c).getTerminals()) {\n+                    p.put(IN_SERVICE, Boolean.toString(t.isConnected()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwODkzNw=="}, "originalCommit": {"oid": "27bfaf640a665af273e04e42a7ab415c4ed856ab"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAyOTU2MA==", "bodyText": "In fact Miora seems to say that we only keep the status of the last terminal we have checked. So what is the good solution to put inService when at least one terminal is connected ?", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r393029560", "createdAt": "2020-03-16T13:40:56Z", "author": {"login": "annetill"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +203,99 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : network.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3()).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getPhaseTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.phaseTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                } else if (leg.getRatioTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getRatioTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.ratioTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                }\n+            });\n+        }\n+\n+        cgmes.add(originalSVcontext, \"SvTapStep\", tapSteps);\n+    }\n+\n+    private void addStatusToCgmes() {\n+        // create SvStatus, iterate on Connectables, check Terminal status, add\n+        // to SvStatus\n+        PropertyBags svStatus = new PropertyBags();\n+        network.getVoltageLevelStream()\n+            .flatMap(VoltageLevel::getConnectableStream)\n+            .distinct()\n+            .forEach(c -> {\n+                PropertyBag p = new PropertyBag(SV_SVSTATUS_PROPERTIES);\n+                for (Terminal t : ((Connectable<?>) c).getTerminals()) {\n+                    p.put(IN_SERVICE, Boolean.toString(t.isConnected()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwODkzNw=="}, "originalCommit": {"oid": "27bfaf640a665af273e04e42a7ab415c4ed856ab"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA4MzY4Nw==", "bodyText": "We will change it for \"any\" terminal, instead of \"last\"", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r393083687", "createdAt": "2020-03-16T14:51:58Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +203,99 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : network.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3()).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getPhaseTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.phaseTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                } else if (leg.getRatioTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getRatioTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.ratioTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                }\n+            });\n+        }\n+\n+        cgmes.add(originalSVcontext, \"SvTapStep\", tapSteps);\n+    }\n+\n+    private void addStatusToCgmes() {\n+        // create SvStatus, iterate on Connectables, check Terminal status, add\n+        // to SvStatus\n+        PropertyBags svStatus = new PropertyBags();\n+        network.getVoltageLevelStream()\n+            .flatMap(VoltageLevel::getConnectableStream)\n+            .distinct()\n+            .forEach(c -> {\n+                PropertyBag p = new PropertyBag(SV_SVSTATUS_PROPERTIES);\n+                for (Terminal t : ((Connectable<?>) c).getTerminals()) {\n+                    p.put(IN_SERVICE, Boolean.toString(t.isConnected()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwODkzNw=="}, "originalCommit": {"oid": "27bfaf640a665af273e04e42a7ab415c4ed856ab"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5OTc0Nw==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r393199747", "createdAt": "2020-03-16T17:39:05Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +203,99 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : network.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3()).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getPhaseTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.phaseTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                } else if (leg.getRatioTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getRatioTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.ratioTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                }\n+            });\n+        }\n+\n+        cgmes.add(originalSVcontext, \"SvTapStep\", tapSteps);\n+    }\n+\n+    private void addStatusToCgmes() {\n+        // create SvStatus, iterate on Connectables, check Terminal status, add\n+        // to SvStatus\n+        PropertyBags svStatus = new PropertyBags();\n+        network.getVoltageLevelStream()\n+            .flatMap(VoltageLevel::getConnectableStream)\n+            .distinct()\n+            .forEach(c -> {\n+                PropertyBag p = new PropertyBag(SV_SVSTATUS_PROPERTIES);\n+                for (Terminal t : ((Connectable<?>) c).getTerminals()) {\n+                    p.put(IN_SERVICE, Boolean.toString(t.isConnected()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwODkzNw=="}, "originalCommit": {"oid": "27bfaf640a665af273e04e42a7ab415c4ed856ab"}, "originalPosition": 257}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTQ0Mzc2OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTo0NToyNFrOF2Iquw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNzoyMDo1NlrOF2oI-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwOTQzNQ==", "bodyText": "Are you sure this check is needed: in which case the terminal is null?", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r392309435", "createdAt": "2020-03-13T15:45:24Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +203,99 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : network.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3()).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getPhaseTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.phaseTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                } else if (leg.getRatioTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getRatioTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.ratioTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                }\n+            });\n+        }\n+\n+        cgmes.add(originalSVcontext, \"SvTapStep\", tapSteps);\n+    }\n+\n+    private void addStatusToCgmes() {\n+        // create SvStatus, iterate on Connectables, check Terminal status, add\n+        // to SvStatus\n+        PropertyBags svStatus = new PropertyBags();\n+        network.getVoltageLevelStream()\n+            .flatMap(VoltageLevel::getConnectableStream)\n+            .distinct()\n+            .forEach(c -> {\n+                PropertyBag p = new PropertyBag(SV_SVSTATUS_PROPERTIES);\n+                for (Terminal t : ((Connectable<?>) c).getTerminals()) {\n+                    p.put(IN_SERVICE, Boolean.toString(t.isConnected()));\n+                }\n+                p.put(CgmesNames.CONDUCTING_EQUIPMENT, c.getId());\n+                svStatus.add(p);\n+            });\n+\n+        // SvStatus at boundaries set as it was in original cgmes.\n+        for (PropertyBag terminal : originalTerminals) {\n+            Objects.requireNonNull(terminal);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27bfaf640a665af273e04e42a7ab415c4ed856ab"}, "originalPosition": 265}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgyNTA4Mg==", "bodyText": "Removed unnecessary check", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r392825082", "createdAt": "2020-03-16T07:20:56Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -100,20 +203,99 @@ public static void add(Network n, CgmesModel cgmes) {\n                 tapSteps.add(p);\n             }\n         }\n-        cgmes.add(CgmesSubset.STATE_VARIABLES, \"SvTapStep\", tapSteps);\n+\n+        for (ThreeWindingsTransformer t : network.getThreeWindingsTransformers()) {\n+            PropertyBag p = new PropertyBag(svTapStepProperties);\n+            Arrays.asList(t.getLeg1(), t.getLeg2(), t.getLeg3()).forEach(leg -> {\n+                if (leg.getPhaseTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getPhaseTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.phaseTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                } else if (leg.getRatioTapChanger() != null) {\n+                    p.put(tapChangerPositionName, is(leg.getRatioTapChanger().getTapPosition()));\n+                    p.put(CgmesNames.TAP_CHANGER, cgmes.ratioTapChangerForPowerTransformer(t.getId()));\n+                    tapSteps.add(p);\n+                }\n+            });\n+        }\n+\n+        cgmes.add(originalSVcontext, \"SvTapStep\", tapSteps);\n+    }\n+\n+    private void addStatusToCgmes() {\n+        // create SvStatus, iterate on Connectables, check Terminal status, add\n+        // to SvStatus\n+        PropertyBags svStatus = new PropertyBags();\n+        network.getVoltageLevelStream()\n+            .flatMap(VoltageLevel::getConnectableStream)\n+            .distinct()\n+            .forEach(c -> {\n+                PropertyBag p = new PropertyBag(SV_SVSTATUS_PROPERTIES);\n+                for (Terminal t : ((Connectable<?>) c).getTerminals()) {\n+                    p.put(IN_SERVICE, Boolean.toString(t.isConnected()));\n+                }\n+                p.put(CgmesNames.CONDUCTING_EQUIPMENT, c.getId());\n+                svStatus.add(p);\n+            });\n+\n+        // SvStatus at boundaries set as it was in original cgmes.\n+        for (PropertyBag terminal : originalTerminals) {\n+            Objects.requireNonNull(terminal);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwOTQzNQ=="}, "originalCommit": {"oid": "27bfaf640a665af273e04e42a7ab415c4ed856ab"}, "originalPosition": 265}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTQ1ODY4OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTo0OToyOFrOF2I0lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjo0ODoxMFrOF2LDmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMxMTk1OQ==", "bodyText": "This test is not necessary, the for-each at line 323 seems sufficient. If it's empty the `byTopologicalIslandId will be empty, and the for-each loop at line 336 won't loop.", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r392311959", "createdAt": "2020-03-13T15:49:28Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -127,22 +309,106 @@ private static PropertyBag createPowerFlowProperties(CgmesModel cgmes, Terminal\n         return p;\n     }\n \n+    // added TopologicalIsland as it was in cgmes : original topology is\n+    // preserved.\n+    private void addTopologicalIslandsToCgmes() {\n+        if (!originalTopologicalIslands.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27bfaf640a665af273e04e42a7ab415c4ed856ab"}, "originalPosition": 336}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM0ODU3MQ==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1201#discussion_r392348571", "createdAt": "2020-03-13T16:48:10Z", "author": {"login": "kaltakovae"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesAdder.java", "diffHunk": "@@ -127,22 +309,106 @@ private static PropertyBag createPowerFlowProperties(CgmesModel cgmes, Terminal\n         return p;\n     }\n \n+    // added TopologicalIsland as it was in cgmes : original topology is\n+    // preserved.\n+    private void addTopologicalIslandsToCgmes() {\n+        if (!originalTopologicalIslands.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMxMTk1OQ=="}, "originalCommit": {"oid": "27bfaf640a665af273e04e42a7ab415c4ed856ab"}, "originalPosition": 336}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 83, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}