{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4NTAxNDk5", "number": 1507, "title": "[IIDM] Allow to reuse TieLineAdder twice", "bodyText": "Signed-off-by: Thomas ADAM tadam@silicom.fr\nPlease check if the PR fulfills these requirements (please use '[x]' to check the checkboxes, or submit the PR and then click the checkboxes)\n\n The commit message follows our guidelines\n Tests for the changes have been added (for bug fixes / features)\n Docs have been added / updated (for bug fixes / features)\n\nDoes this PR already have an issue describing the problem ? If so, link to this issue using '#XXX' and skip the rest\n'#1489'\nOther information:\nOnly TieLineAdder part of issue is done on this PR", "createdAt": "2020-10-06T12:28:41Z", "url": "https://github.com/powsybl/powsybl-core/pull/1507", "merged": true, "mergeCommit": {"oid": "cf533604721221defbb65620f6d95acce77b99c6"}, "closed": true, "closedAt": "2020-11-16T09:30:57Z", "author": {"login": "tadam50"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdP1VMYgH2gAyNDk4NTAxNDk5OjBiODczM2I0MzVmODc1NTgxMGU1YjM1MjIzNDUyODIwYmFlNzU1ZmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddBV4vgH2gAyNDk4NTAxNDk5OjRhNmYxYmZkZmExZDZhMTdhNDAwMGE3MjA4NGM1NTYwY2FhNzcxODg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0b8733b435f8755810e5b35223452820bae755fd", "author": {"user": {"login": "tadam50", "name": "Thomas ADAM"}}, "url": "https://github.com/powsybl/powsybl-core/commit/0b8733b435f8755810e5b35223452820bae755fd", "committedDate": "2020-10-06T09:54:13Z", "message": "Allow to reuse TieLineAdder twice\n\nSigned-off-by: Thomas ADAM <tadam@silicom.fr>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MzQ4NTA0", "url": "https://github.com/powsybl/powsybl-core/pull/1507#pullrequestreview-506348504", "createdAt": "2020-10-12T07:15:01Z", "commit": {"oid": "0b8733b435f8755810e5b35223452820bae755fd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzoxNTowMlrOHfxy-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzoxODo0M1rOHfx5ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA4Mzc2OQ==", "bodyText": "This will break all existing code: I don't if it's possible but we should create a proxy that wrap a HalfLineAdder in a TieLineAdder?", "url": "https://github.com/powsybl/powsybl-core/pull/1507#discussion_r503083769", "createdAt": "2020-10-12T07:15:02Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/TieLineAdder.java", "diffHunk": "@@ -11,27 +11,54 @@\n  */\n public interface TieLineAdder extends BranchAdder<TieLineAdder> {\n \n-    TieLineAdder setR(double r);\n+    interface HalfLineAdder {\n \n-    TieLineAdder setX(double x);\n+        TieLineAdder.HalfLineAdder setId(String id);\n \n-    TieLineAdder setG1(double g1);\n+        TieLineAdder.HalfLineAdder setName(String name);\n \n-    TieLineAdder setB1(double b1);\n+        TieLineAdder.HalfLineAdder setFictitious(boolean fictitious);\n \n-    TieLineAdder setG2(double g2);\n+        TieLineAdder.HalfLineAdder setXnodeP(double xnodeP);\n \n-    TieLineAdder setB2(double b2);\n+        TieLineAdder.HalfLineAdder setXnodeQ(double xnodeQ);\n \n-    TieLineAdder setXnodeP(double xnodeP);\n+        TieLineAdder.HalfLineAdder setR(double r);\n \n-    TieLineAdder setXnodeQ(double xnodeQ);\n+        TieLineAdder.HalfLineAdder setX(double x);\n+\n+        TieLineAdder.HalfLineAdder setG1(double g1);\n+\n+        TieLineAdder.HalfLineAdder setG2(double g2);\n+\n+        TieLineAdder.HalfLineAdder setB1(double b1);\n+\n+        TieLineAdder.HalfLineAdder setB2(double b2);\n+\n+        TieLineAdder add();\n+    }\n \n     TieLineAdder setUcteXnodeCode(String ucteXnodeCode);\n \n-    TieLineAdder line1();\n+    TieLineAdder.HalfLineAdder newHalfLine1();\n+\n+    TieLineAdder.HalfLineAdder newHalfLine2();\n+\n+    /**\n+     * @deprecated Use {@link #newHalfLine1()} and {@link TieLineAdder#add()} instead.\n+     */\n+    @Deprecated\n+    default TieLineAdder line1() {\n+        throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b8733b435f8755810e5b35223452820bae755fd"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA4NDQwMw==", "bodyText": "Should be final and set in the constructor?", "url": "https://github.com/powsybl/powsybl-core/pull/1507#discussion_r503084403", "createdAt": "2020-10-12T07:16:22Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/TieLineAdderImpl.java", "diffHunk": "@@ -6,169 +6,182 @@\n  */\n package com.powsybl.iidm.network.impl;\n \n-import com.powsybl.iidm.network.TieLineAdder;\n-import com.powsybl.iidm.network.ValidationException;\n+import com.powsybl.iidm.network.*;\n \n /**\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n  */\n class TieLineAdderImpl extends AbstractBranchAdder<TieLineAdderImpl> implements TieLineAdder {\n \n-    private final NetworkImpl network;\n+    class HalfLineAdderImpl implements Validable, TieLineAdder.HalfLineAdder {\n \n-    private String ucteXnodeCode;\n+        protected int num;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b8733b435f8755810e5b35223452820bae755fd"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA4NTA1Mg==", "bodyText": "halfLineAdder1 = new HalfLineAdderImpl(1);\nreturn halfLineAdder1;", "url": "https://github.com/powsybl/powsybl-core/pull/1507#discussion_r503085052", "createdAt": "2020-10-12T07:17:43Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/TieLineAdderImpl.java", "diffHunk": "@@ -6,169 +6,182 @@\n  */\n package com.powsybl.iidm.network.impl;\n \n-import com.powsybl.iidm.network.TieLineAdder;\n-import com.powsybl.iidm.network.ValidationException;\n+import com.powsybl.iidm.network.*;\n \n /**\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n  */\n class TieLineAdderImpl extends AbstractBranchAdder<TieLineAdderImpl> implements TieLineAdder {\n \n-    private final NetworkImpl network;\n+    class HalfLineAdderImpl implements Validable, TieLineAdder.HalfLineAdder {\n \n-    private String ucteXnodeCode;\n+        protected int num;\n \n-    private TieLineImpl.HalfLineImpl half1 = new TieLineImpl.HalfLineImpl();\n+        protected String id;\n \n-    private TieLineImpl.HalfLineImpl half2 = new TieLineImpl.HalfLineImpl();\n+        protected String name;\n \n-    private TieLineImpl.HalfLineImpl activeHalf;\n+        protected boolean fictitious = false;\n \n-    TieLineAdderImpl(NetworkImpl network) {\n-        this.network = network;\n-    }\n+        protected double xnodeP = Double.NaN;\n \n-    @Override\n-    protected NetworkImpl getNetwork() {\n-        return network;\n-    }\n+        protected double xnodeQ = Double.NaN;\n \n-    @Override\n-    protected String getTypeDescription() {\n-        return \"AC tie Line\";\n-    }\n+        protected double r = Double.NaN;\n \n-    @Override\n-    public TieLineAdderImpl setUcteXnodeCode(String ucteXnodeCode) {\n-        this.ucteXnodeCode = ucteXnodeCode;\n-        return this;\n-    }\n+        protected double x = Double.NaN;\n \n-    @Override\n-    public TieLineAdderImpl line1() {\n-        activeHalf = half1;\n-        return this;\n-    }\n+        protected double g1 = Double.NaN;\n \n-    @Override\n-    public TieLineAdderImpl line2() {\n-        activeHalf = half2;\n-        return this;\n-    }\n+        protected double g2 = Double.NaN;\n+\n+        protected double b1 = Double.NaN;\n \n-    private TieLineImpl.HalfLineImpl getActiveHalf() {\n-        if (activeHalf == null) {\n-            throw new ValidationException(this, \"No active half of the line\");\n+        protected double b2 = Double.NaN;\n+\n+        @Override\n+        public HalfLineAdderImpl setId(String id) {\n+            this.id = id;\n+            return this;\n         }\n-        return activeHalf;\n-    }\n \n-    @Override\n-    public TieLineAdderImpl setId(String id) {\n-        if (activeHalf == null) {\n-            return super.setId(id);\n-        } else {\n-            getActiveHalf().setId(id);\n+        @Override\n+        public HalfLineAdderImpl setName(String name) {\n+            this.name = name;\n+            return this;\n         }\n-        return this;\n-    }\n \n-    @Override\n-    public TieLineAdderImpl setName(String name) {\n-        if (activeHalf == null) {\n-            return super.setName(name);\n-        } else {\n-            getActiveHalf().setName(name);\n+        @Override\n+        public HalfLineAdderImpl setFictitious(boolean fictitious) {\n+            this.fictitious = fictitious;\n+            return this;\n         }\n-        return this;\n-    }\n \n-    @Override\n-    public TieLineAdderImpl setFictitious(boolean fictitious) {\n-        if (activeHalf == null) {\n-            return super.setFictitious(fictitious);\n-        } else {\n-            getActiveHalf().setFictitious(fictitious);\n+        @Override\n+        public HalfLineAdderImpl setXnodeP(double xnodeP) {\n+            this.xnodeP = xnodeP;\n+            return this;\n         }\n-        return this;\n-    }\n \n-    @Override\n-    public TieLineAdderImpl setR(double r) {\n-        getActiveHalf().setR(r);\n-        return this;\n-    }\n+        @Override\n+        public HalfLineAdderImpl setXnodeQ(double xnodeQ) {\n+            this.xnodeQ = xnodeQ;\n+            return this;\n+        }\n \n-    @Override\n-    public TieLineAdderImpl setX(double x) {\n-        getActiveHalf().setX(x);\n-        return this;\n-    }\n+        @Override\n+        public HalfLineAdderImpl setR(double r) {\n+            this.r = r;\n+            return this;\n+        }\n \n-    @Override\n-    public TieLineAdderImpl setG1(double g1) {\n-        getActiveHalf().setG1(g1);\n-        return this;\n+        @Override\n+        public HalfLineAdderImpl setX(double x) {\n+            this.x = x;\n+            return this;\n+        }\n+\n+        @Override\n+        public HalfLineAdderImpl setG1(double g1) {\n+            this.g1 = g1;\n+            return this;\n+        }\n+\n+        @Override\n+        public HalfLineAdderImpl setG2(double g2) {\n+            this.g2 = g2;\n+            return this;\n+        }\n+\n+        @Override\n+        public HalfLineAdderImpl setB1(double b1) {\n+            this.b1 = b1;\n+            return this;\n+        }\n+\n+        @Override\n+        public HalfLineAdderImpl setB2(double b2) {\n+            this.b2 = b2;\n+            return this;\n+        }\n+\n+        public TieLineAdderImpl add() {\n+            if (id == null || id.isEmpty()) {\n+                throw new ValidationException(this, String.format(\"id is not set for half line %d\", num));\n+            }\n+            if (Double.isNaN(r)) {\n+                throw new ValidationException(this, String.format(\"r is not set for half line %d\", num));\n+            }\n+            if (Double.isNaN(x)) {\n+                throw new ValidationException(this, String.format(\"x is not set for half line %d\", num));\n+            }\n+            if (Double.isNaN(g1)) {\n+                throw new ValidationException(this, String.format(\"g1 is not set for half line %d\", num));\n+            }\n+            if (Double.isNaN(b1)) {\n+                throw new ValidationException(this, String.format(\"b1 is not set for half line %d\", num));\n+            }\n+            if (Double.isNaN(g2)) {\n+                throw new ValidationException(this, String.format(\"g2 is not set for half line %d\", num));\n+            }\n+            if (Double.isNaN(b2)) {\n+                throw new ValidationException(this, String.format(\"b2 is not set for half line %d\", num));\n+            }\n+            if (Double.isNaN(xnodeP)) {\n+                throw new ValidationException(this, String.format(\"xnodeP is not set for half line %d\", num));\n+            }\n+            if (Double.isNaN(xnodeQ)) {\n+                throw new ValidationException(this, String.format(\"xnodeQ is not set for half line %d\", num));\n+            }\n+            return TieLineAdderImpl.this;\n+        }\n+\n+        @Override\n+        public String getMessageHeader() {\n+            return String.format(\"TieLine.halfLine%d\", num);\n+        }\n     }\n \n-    @Override\n-    public TieLineAdderImpl setG2(double g2) {\n-        getActiveHalf().setG2(g2);\n-        return this;\n+    private final NetworkImpl network;\n+\n+    private String ucteXnodeCode;\n+\n+    private HalfLineAdderImpl halfLineAdder1;\n+\n+    private HalfLineAdderImpl halfLineAdder2;\n+\n+    TieLineAdderImpl(NetworkImpl network) {\n+        this.network = network;\n     }\n \n     @Override\n-    public TieLineAdderImpl setB1(double b1) {\n-        getActiveHalf().setB1(b1);\n-        return this;\n+    protected NetworkImpl getNetwork() {\n+        return network;\n     }\n \n     @Override\n-    public TieLineAdderImpl setB2(double b2) {\n-        getActiveHalf().setB2(b2);\n-        return this;\n+    protected String getTypeDescription() {\n+        return \"AC tie Line\";\n     }\n \n     @Override\n-    public TieLineAdderImpl setXnodeP(double xnodeP) {\n-        getActiveHalf().setXnodeP(xnodeP);\n+    public TieLineAdderImpl setUcteXnodeCode(String ucteXnodeCode) {\n+        this.ucteXnodeCode = ucteXnodeCode;\n         return this;\n     }\n \n     @Override\n-    public TieLineAdderImpl setXnodeQ(double xnodeQ) {\n-        getActiveHalf().setXnodeQ(xnodeQ);\n-        return this;\n+    public HalfLineAdderImpl newHalfLine1() {\n+        halfLineAdder1 = new HalfLineAdderImpl();\n+        halfLineAdder1.num = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b8733b435f8755810e5b35223452820bae755fd"}, "originalPosition": 262}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA4NTQ5OA==", "bodyText": "I would check if both half1 and half2 adders are set before creating half1 and half2", "url": "https://github.com/powsybl/powsybl-core/pull/1507#discussion_r503085498", "createdAt": "2020-10-12T07:18:43Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/TieLineAdderImpl.java", "diffHunk": "@@ -182,8 +195,40 @@ public TieLineImpl add() {\n         if (ucteXnodeCode == null) {\n             throw new ValidationException(this, \"ucteXnodeCode is not set\");\n         }\n-        checkHalf(half1, 1);\n-        checkHalf(half2, 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b8733b435f8755810e5b35223452820bae755fd"}, "originalPosition": 307}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7a5e9c8144ec45770c82a4e63cbcf80ddfe91a3", "author": {"user": {"login": "tadam50", "name": "Thomas ADAM"}}, "url": "https://github.com/powsybl/powsybl-core/commit/c7a5e9c8144ec45770c82a4e63cbcf80ddfe91a3", "committedDate": "2020-10-12T09:06:17Z", "message": "Fix HalfLine number private field + checks before to instanciate them\n\nSigned-off-by: Thomas ADAM <tadam@silicom.fr>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "369e3e38c75ca3f5e35165080ee4a0a6bb3838e4", "author": {"user": {"login": "tadam50", "name": "Thomas ADAM"}}, "url": "https://github.com/powsybl/powsybl-core/commit/369e3e38c75ca3f5e35165080ee4a0a6bb3838e4", "committedDate": "2020-10-13T07:22:58Z", "message": "Move internal adder set into add method\n\nSigned-off-by: Thomas ADAM <tadam@silicom.fr>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ddc3229bcddcafc4ecf7209e457402f4a83aff7", "author": {"user": {"login": "tadam50", "name": "Thomas ADAM"}}, "url": "https://github.com/powsybl/powsybl-core/commit/3ddc3229bcddcafc4ecf7209e457402f4a83aff7", "committedDate": "2020-10-13T08:11:19Z", "message": "Add Proxy in order to keep API compatibility\n\nSigned-off-by: Thomas ADAM <tadam@silicom.fr>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15cba63acf244aa92084ea7cc15453f6ac9a247d", "author": {"user": {"login": "tadam50", "name": "Thomas ADAM"}}, "url": "https://github.com/powsybl/powsybl-core/commit/15cba63acf244aa92084ea7cc15453f6ac9a247d", "committedDate": "2020-10-13T08:56:44Z", "message": "Fix Sonar major code smell\n\nSigned-off-by: Thomas ADAM <tadam@silicom.fr>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MzA3ODM0", "url": "https://github.com/powsybl/powsybl-core/pull/1507#pullrequestreview-509307834", "createdAt": "2020-10-15T12:09:10Z", "commit": {"oid": "15cba63acf244aa92084ea7cc15453f6ac9a247d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMjowOToxMFrOHiElyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMjoxMjo1OFrOHiEubg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ4ODg0MQ==", "bodyText": "The proxy should be moved in the API and used in the old API methods. So that it will be really easy to remove existing code in the implementation without breaking existing code.", "url": "https://github.com/powsybl/powsybl-core/pull/1507#discussion_r505488841", "createdAt": "2020-10-15T12:09:10Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/TieLineAdderProxy.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.impl;\n+\n+import com.powsybl.iidm.network.*;\n+import java.util.Objects;\n+\n+/**\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ *\n+ * @deprecated Use {@link TieLineAdder#newHalfLine1()} or {@link TieLineAdder#newHalfLine2()} instead.\n+ */\n+@Deprecated\n+class TieLineAdderProxy implements TieLineAdder, Validable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15cba63acf244aa92084ea7cc15453f6ac9a247d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ5MTA1NA==", "bodyText": "return this.halfLineAdder1 instead", "url": "https://github.com/powsybl/powsybl-core/pull/1507#discussion_r505491054", "createdAt": "2020-10-15T12:12:58Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/TieLineAdderProxy.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.impl;\n+\n+import com.powsybl.iidm.network.*;\n+import java.util.Objects;\n+\n+/**\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ *\n+ * @deprecated Use {@link TieLineAdder#newHalfLine1()} or {@link TieLineAdder#newHalfLine2()} instead.\n+ */\n+@Deprecated\n+class TieLineAdderProxy implements TieLineAdder, Validable {\n+\n+    private final TieLineAdderImpl delegate;\n+\n+    private TieLineAdderImpl.HalfLineAdderImpl halfLine1;\n+\n+    private TieLineAdderImpl.HalfLineAdderImpl halfLine2;\n+\n+    private TieLineAdderImpl.HalfLineAdderImpl activeHalf;\n+\n+    TieLineAdderProxy(TieLineAdderImpl delegate) {\n+        this.delegate = Objects.requireNonNull(delegate);\n+    }\n+\n+    private TieLineAdderImpl.HalfLineAdderImpl getActiveHalf() {\n+        if (activeHalf == null) {\n+            throw new ValidationException(this, \"No active half of the line\");\n+        }\n+        return activeHalf;\n+    }\n+\n+    @Override\n+    public TieLineAdder setId(String id) {\n+        if (activeHalf == null) {\n+            delegate.setId(id);\n+        } else {\n+            activeHalf.setId(id);\n+        }\n+        return this;\n+    }\n+\n+    @Override\n+    public TieLineAdder setName(String name) {\n+        if (activeHalf == null) {\n+            delegate.setName(name);\n+        } else {\n+            activeHalf.setName(name);\n+        }\n+        return this;\n+    }\n+\n+    @Override\n+    public TieLineAdder setFictitious(boolean fictitious) {\n+        if (activeHalf == null) {\n+            delegate.setFictitious(fictitious);\n+        } else {\n+            activeHalf.setFictitious(fictitious);\n+        }\n+        return this;\n+    }\n+\n+    @Override\n+    public TieLineAdder setR(double r) {\n+        getActiveHalf().setR(r);\n+        return this;\n+    }\n+\n+    @Override\n+    public TieLineAdder setX(double x) {\n+        getActiveHalf().setX(x);\n+        return this;\n+    }\n+\n+    @Override\n+    public TieLineAdder setG1(double g1) {\n+        getActiveHalf().setG1(g1);\n+        return this;\n+    }\n+\n+    @Override\n+    public TieLineAdder setB1(double b1) {\n+        getActiveHalf().setB1(b1);\n+        return this;\n+    }\n+\n+    @Override\n+    public TieLineAdder setG2(double g2) {\n+        getActiveHalf().setG2(g2);\n+        return this;\n+    }\n+\n+    @Override\n+    public TieLineAdder setB2(double b2) {\n+        getActiveHalf().setB2(b2);\n+        return this;\n+    }\n+\n+    @Override\n+    public TieLineAdder setXnodeP(double xnodeP) {\n+        getActiveHalf().setXnodeP(xnodeP);\n+        return this;\n+    }\n+\n+    @Override\n+    public TieLineAdder setXnodeQ(double xnodeQ) {\n+        getActiveHalf().setXnodeQ(xnodeQ);\n+        return this;\n+    }\n+\n+    @Override\n+    public TieLine add() {\n+        // Check if half line have been set\n+        if (halfLine1 == null) {\n+            throw new ValidationException(this, \"half line 1 is not set\");\n+        }\n+        if (halfLine2 == null) {\n+            throw new ValidationException(this, \"half line 2 is not set\");\n+        }\n+\n+        // Reset activeHalf\n+        activeHalf = null;\n+\n+        // Call validity check & set half lines on delegate\n+        halfLine1.add();\n+        halfLine2.add();\n+\n+        return delegate.add();\n+    }\n+\n+    @Override\n+    public TieLineAdder line1() {\n+        this.halfLine1 = delegate.newHalfLine1();\n+        this.activeHalf = halfLine1;\n+        return this;\n+    }\n+\n+    @Override\n+    public TieLineAdder line2() {\n+        this.halfLine2 = delegate.newHalfLine2();\n+        this.activeHalf = halfLine2;\n+        return this;\n+    }\n+\n+    @Override\n+    public TieLineAdderImpl.HalfLineAdderImpl newHalfLine1() {\n+        throw new UnsupportedOperationException(\"Use line1() instead\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15cba63acf244aa92084ea7cc15453f6ac9a247d"}, "originalPosition": 153}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13ac70e3dba487cd23faf787891b0dcbea7bf74b", "author": {"user": {"login": "tadam50", "name": "Thomas ADAM"}}, "url": "https://github.com/powsybl/powsybl-core/commit/13ac70e3dba487cd23faf787891b0dcbea7bf74b", "committedDate": "2020-10-15T16:39:59Z", "message": "Taking into account PR reviews\n\nSigned-off-by: Thomas ADAM <tadam@silicom.fr>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bb77ba14279aea3aba4d8f2713c4103c7f78d68", "author": {"user": {"login": "tadam50", "name": "Thomas ADAM"}}, "url": "https://github.com/powsybl/powsybl-core/commit/9bb77ba14279aea3aba4d8f2713c4103c7f78d68", "committedDate": "2020-10-15T16:44:00Z", "message": "Add ieLine groovy tests\n\nSigned-off-by: Thomas ADAM <tadam@silicom.fr>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bb797e571233de3fed36e32103408f822786e5f", "author": {"user": {"login": "tadam50", "name": "Thomas ADAM"}}, "url": "https://github.com/powsybl/powsybl-core/commit/0bb797e571233de3fed36e32103408f822786e5f", "committedDate": "2020-10-19T08:42:35Z", "message": "Do not break API\n\nSigned-off-by: Thomas ADAM <tadam@silicom.fr>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cbb997b7d35b62c7b8c227e6d0a972c58823065", "author": {"user": {"login": "tadam50", "name": "Thomas ADAM"}}, "url": "https://github.com/powsybl/powsybl-core/commit/0cbb997b7d35b62c7b8c227e6d0a972c58823065", "committedDate": "2020-11-06T14:29:57Z", "message": "Break api implementation\n\nSigned-off-by: Thomas ADAM <tadam@silicom.fr>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "524fa56acea9ffb9c62342f80d72f1373f8386d6", "author": {"user": {"login": "tadam50", "name": "Thomas ADAM"}}, "url": "https://github.com/powsybl/powsybl-core/commit/524fa56acea9ffb9c62342f80d72f1373f8386d6", "committedDate": "2020-11-06T15:18:53Z", "message": "Increase test coverage\n\nSigned-off-by: Thomas ADAM <tadam@silicom.fr>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa3288ff28c96b8920e9d778ac5a658466c15d77", "author": {"user": {"login": "mathbagu", "name": "Mathieu BAGUE"}}, "url": "https://github.com/powsybl/powsybl-core/commit/fa3288ff28c96b8920e9d778ac5a658466c15d77", "committedDate": "2020-11-16T09:07:58Z", "message": "Remove extra prefix in TieLineAdder.HalfLineAdder return types\n\nSigned-off-by: Mathieu BAGUE <mathieu.bague@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a6f1bfdfa1d6a17a4000a72084c5560caa77188", "author": {"user": {"login": "mathbagu", "name": "Mathieu BAGUE"}}, "url": "https://github.com/powsybl/powsybl-core/commit/4a6f1bfdfa1d6a17a4000a72084c5560caa77188", "committedDate": "2020-11-16T09:14:51Z", "message": "Merge branch 'master' into issue_1489_tielines"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4050, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}