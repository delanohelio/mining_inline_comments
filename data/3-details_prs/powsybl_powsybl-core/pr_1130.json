{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1OTQwMTQy", "number": 1130, "title": "Merging view step : MergedLine adapter implementation", "bodyText": "Signed-off-by: Thomas ADAM tadam@silicom.fr\nPlease check if the PR fulfills these requirements (please use '[x]' to check the checkboxes, or submit the PR and then click the checkboxes)\n\n The commit message follows our guidelines\n Tests for the changes have been added (for bug fixes / features)\n Docs have been added / updated (for bug fixes / features)\n\nDoes this PR already have an issue describing the problem ? If so, link to this issue using '#XXX' and skip the rest\nNo\nWhat kind of change does this PR introduce? (Bug fix, feature, docs update, ...)\nNew feature for non destructive network merge, in order to taking into account two DanglingLine with same UcteCode\nWhat is the current behavior? (You can also link to an open issue here)\nMerging view does not take into account of two DanglingLines with same UcteCode\nWhat is the new behavior (if this is a feature change)?\nMergedLine is a new class which contains two dangling lines with the same uctecode.\nFor user of a merging view a 2 DanglingLines is saw as a Line (MergedLine)\nMerging view can take partially into account of same DanglingLine (with same UcteCode)\nIndeed, creation of a line between two different network is not implemented yet.\nDoes this PR introduce a breaking change or deprecate an API? If yes, check the following:\n\n The Breaking Change or Deprecated label has been added\n The migration guide has been updated in the github wiki (What changes might users need to make in their application due to this PR?)\n\nOther information:\n(if any of the questions/checkboxes don't apply, please delete them entirely)", "createdAt": "2020-01-22T16:13:46Z", "url": "https://github.com/powsybl/powsybl-core/pull/1130", "merged": true, "mergeCommit": {"oid": "c792cf2b230c0fc59826f27cb8b8499cfcff207b"}, "closed": true, "closedAt": "2020-02-17T10:03:45Z", "author": {"login": "tadam50"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb84SYogBqjI5NzA3MTQwMzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcELnhNAH2gAyMzY1OTQwMTQyOjI3NmU1NGRlODkyNDgyY2ZkYTY3NGI2ZTExZWQ3ODM5NTdmYzIxYWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f45888ed01d562453aaed49fbf16e3d5510bddcd", "author": {"user": {"login": "tadam50", "name": "Thomas ADAM"}}, "url": "https://github.com/powsybl/powsybl-core/commit/f45888ed01d562453aaed49fbf16e3d5510bddcd", "committedDate": "2020-01-22T16:09:07Z", "message": "Merging view step : MergedLine adapter implementation\n\nSigned-off-by: Thomas ADAM <tadam@silicom.fr>"}, "afterCommit": {"oid": "c98c6df4d11f11e4a2d79e49ab9dbdb166eb56cf", "author": {"user": {"login": "tadam50", "name": "Thomas ADAM"}}, "url": "https://github.com/powsybl/powsybl-core/commit/c98c6df4d11f11e4a2d79e49ab9dbdb166eb56cf", "committedDate": "2020-01-22T16:24:44Z", "message": "Merging view step : MergedLine adapter implementation\n\nSigned-off-by: Thomas ADAM <tadam@silicom.fr>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79178b40bb571f67f9d87817322cf704a162e681", "author": {"user": {"login": "tadam50", "name": "Thomas ADAM"}}, "url": "https://github.com/powsybl/powsybl-core/commit/79178b40bb571f67f9d87817322cf704a162e681", "committedDate": "2020-01-22T17:16:15Z", "message": "Merging view step : MergedLine adapter implementation\n\nSigned-off-by: Thomas ADAM <tadam@silicom.fr>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c98c6df4d11f11e4a2d79e49ab9dbdb166eb56cf", "author": {"user": {"login": "tadam50", "name": "Thomas ADAM"}}, "url": "https://github.com/powsybl/powsybl-core/commit/c98c6df4d11f11e4a2d79e49ab9dbdb166eb56cf", "committedDate": "2020-01-22T16:24:44Z", "message": "Merging view step : MergedLine adapter implementation\n\nSigned-off-by: Thomas ADAM <tadam@silicom.fr>"}, "afterCommit": {"oid": "79178b40bb571f67f9d87817322cf704a162e681", "author": {"user": {"login": "tadam50", "name": "Thomas ADAM"}}, "url": "https://github.com/powsybl/powsybl-core/commit/79178b40bb571f67f9d87817322cf704a162e681", "committedDate": "2020-01-22T17:16:15Z", "message": "Merging view step : MergedLine adapter implementation\n\nSigned-off-by: Thomas ADAM <tadam@silicom.fr>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5f71a522dd8aa9b85b27d52ecd605d0c5575c39", "author": {"user": {"login": "tadam50", "name": "Thomas ADAM"}}, "url": "https://github.com/powsybl/powsybl-core/commit/f5f71a522dd8aa9b85b27d52ecd605d0c5575c39", "committedDate": "2020-01-23T09:31:32Z", "message": "Include MergedLine into Branch & Identifiable searches\n\nSigned-off-by: Thomas ADAM <tadam@silicom.fr>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4NTM3Njk1", "url": "https://github.com/powsybl/powsybl-core/pull/1130#pullrequestreview-348537695", "createdAt": "2020-01-27T09:49:14Z", "commit": {"oid": "f5f71a522dd8aa9b85b27d52ecd605d0c5575c39"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwOTo0OToxNFrOFh8yHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMDoxMDo1MlrOFh9aIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE0MzE5OQ==", "bodyText": "Detail: rename dll to dl (DanglingLine)", "url": "https://github.com/powsybl/powsybl-core/pull/1130#discussion_r371143199", "createdAt": "2020-01-27T09:49:14Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/DanglingLineAdderAdapter.java", "diffHunk": "@@ -21,7 +21,9 @@\n     @Override\n     public DanglingLine add() {\n         checkAndSetUniqueId();\n-        return getIndex().getDanglingLine(getDelegate().add());\n+        final DanglingLine dll = getDelegate().add();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f71a522dd8aa9b85b27d52ecd605d0c5575c39"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE0MzQxOA==", "bodyText": "Add license information", "url": "https://github.com/powsybl/powsybl-core/pull/1130#discussion_r371143418", "createdAt": "2020-01-27T09:49:41Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/LineAdderAdapter.java", "diffHunk": "@@ -0,0 +1,224 @@\n+package com.powsybl.iidm.mergingview;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f71a522dd8aa9b85b27d52ecd605d0c5575c39"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE0MzUwMQ==", "bodyText": "Add @author information", "url": "https://github.com/powsybl/powsybl-core/pull/1130#discussion_r371143501", "createdAt": "2020-01-27T09:49:54Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/LineAdderAdapter.java", "diffHunk": "@@ -0,0 +1,224 @@\n+package com.powsybl.iidm.mergingview;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.iidm.network.*;\n+\n+import java.util.Objects;\n+\n+class LineAdderAdapter implements LineAdder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f71a522dd8aa9b85b27d52ecd605d0c5575c39"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE0NzcxNA==", "bodyText": "I think it's not needed to have this if/else. Integrity tests are done in the add method:\n    ...\n    .setBus1(bus1)\n    .setConnectableBus1(connectableBus1)\n    .setNode1(node1)\n    ...", "url": "https://github.com/powsybl/powsybl-core/pull/1130#discussion_r371147714", "createdAt": "2020-01-27T09:58:45Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/LineAdderAdapter.java", "diffHunk": "@@ -0,0 +1,224 @@\n+package com.powsybl.iidm.mergingview;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.iidm.network.*;\n+\n+import java.util.Objects;\n+\n+class LineAdderAdapter implements LineAdder {\n+\n+    private final MergingViewIndex index;\n+\n+    private String id;\n+\n+    private String name;\n+\n+    private boolean ensureIdUnicity;\n+\n+    private Integer node1;\n+\n+    private String bus1;\n+\n+    private String connectableBus1;\n+\n+    private String voltageLevelId1;\n+\n+    private Integer node2;\n+\n+    private String bus2;\n+\n+    private String connectableBus2;\n+\n+    private String voltageLevelId2;\n+\n+    private double r = Double.NaN;\n+\n+    private double x = Double.NaN;\n+\n+    private double g1 = Double.NaN;\n+\n+    private double b1 = Double.NaN;\n+\n+    private double g2 = Double.NaN;\n+\n+    private double b2 = Double.NaN;\n+\n+    LineAdderAdapter(final MergingViewIndex index) {\n+        this.index = Objects.requireNonNull(index, \"merging view index is null\");\n+    }\n+\n+    @Override\n+    public Line add() {\n+        Line newLine = null;\n+        final Network n1 = checkAndGetNetwork1();\n+        final Network n2 = checkAndGetNetwork2();\n+        if (n1 == n2) {\n+            newLine = index.getLine(addLine(n1));\n+        } else {\n+            // Creation of 2 dangling lines\n+            throw MergingView.NOT_IMPLEMENTED_EXCEPTION;\n+        }\n+        return newLine;\n+    }\n+\n+    private Line addLine(final Network network) {\n+        final LineAdder adder = network.newLine()\n+                .setId(id)\n+                .setEnsureIdUnicity(ensureIdUnicity)\n+                .setName(name)\n+                .setR(r)\n+                .setX(x)\n+                .setG1(g1)\n+                .setB1(b1)\n+                .setG2(g2)\n+                .setB2(b2)\n+                .setVoltageLevel1(voltageLevelId1)\n+                .setVoltageLevel2(voltageLevelId2);\n+        if (network.getVoltageLevel(voltageLevelId1).getTopologyKind() == TopologyKind.BUS_BREAKER) {\n+            adder.setBus1(bus1)\n+                 .setConnectableBus1(connectableBus1);\n+        } else {\n+            adder.setNode1(node1);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f71a522dd8aa9b85b27d52ecd605d0c5575c39"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE0Nzc2NA==", "bodyText": "Same remark here", "url": "https://github.com/powsybl/powsybl-core/pull/1130#discussion_r371147764", "createdAt": "2020-01-27T09:58:52Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/LineAdderAdapter.java", "diffHunk": "@@ -0,0 +1,224 @@\n+package com.powsybl.iidm.mergingview;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.iidm.network.*;\n+\n+import java.util.Objects;\n+\n+class LineAdderAdapter implements LineAdder {\n+\n+    private final MergingViewIndex index;\n+\n+    private String id;\n+\n+    private String name;\n+\n+    private boolean ensureIdUnicity;\n+\n+    private Integer node1;\n+\n+    private String bus1;\n+\n+    private String connectableBus1;\n+\n+    private String voltageLevelId1;\n+\n+    private Integer node2;\n+\n+    private String bus2;\n+\n+    private String connectableBus2;\n+\n+    private String voltageLevelId2;\n+\n+    private double r = Double.NaN;\n+\n+    private double x = Double.NaN;\n+\n+    private double g1 = Double.NaN;\n+\n+    private double b1 = Double.NaN;\n+\n+    private double g2 = Double.NaN;\n+\n+    private double b2 = Double.NaN;\n+\n+    LineAdderAdapter(final MergingViewIndex index) {\n+        this.index = Objects.requireNonNull(index, \"merging view index is null\");\n+    }\n+\n+    @Override\n+    public Line add() {\n+        Line newLine = null;\n+        final Network n1 = checkAndGetNetwork1();\n+        final Network n2 = checkAndGetNetwork2();\n+        if (n1 == n2) {\n+            newLine = index.getLine(addLine(n1));\n+        } else {\n+            // Creation of 2 dangling lines\n+            throw MergingView.NOT_IMPLEMENTED_EXCEPTION;\n+        }\n+        return newLine;\n+    }\n+\n+    private Line addLine(final Network network) {\n+        final LineAdder adder = network.newLine()\n+                .setId(id)\n+                .setEnsureIdUnicity(ensureIdUnicity)\n+                .setName(name)\n+                .setR(r)\n+                .setX(x)\n+                .setG1(g1)\n+                .setB1(b1)\n+                .setG2(g2)\n+                .setB2(b2)\n+                .setVoltageLevel1(voltageLevelId1)\n+                .setVoltageLevel2(voltageLevelId2);\n+        if (network.getVoltageLevel(voltageLevelId1).getTopologyKind() == TopologyKind.BUS_BREAKER) {\n+            adder.setBus1(bus1)\n+                 .setConnectableBus1(connectableBus1);\n+        } else {\n+            adder.setNode1(node1);\n+        }\n+        if (network.getVoltageLevel(voltageLevelId2).getTopologyKind() == TopologyKind.BUS_BREAKER) {\n+            adder.setBus2(bus2)\n+                 .setConnectableBus2(connectableBus2);\n+        } else {\n+            adder.setNode2(node2);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f71a522dd8aa9b85b27d52ecd605d0c5575c39"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE0OTI5MQ==", "bodyText": "To be discussed: if we have performance issue, we should consider to add a private-package method to get the underlying network instead of iterating over the networks.", "url": "https://github.com/powsybl/powsybl-core/pull/1130#discussion_r371149291", "createdAt": "2020-01-27T10:01:58Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/LineAdderAdapter.java", "diffHunk": "@@ -0,0 +1,224 @@\n+package com.powsybl.iidm.mergingview;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.iidm.network.*;\n+\n+import java.util.Objects;\n+\n+class LineAdderAdapter implements LineAdder {\n+\n+    private final MergingViewIndex index;\n+\n+    private String id;\n+\n+    private String name;\n+\n+    private boolean ensureIdUnicity;\n+\n+    private Integer node1;\n+\n+    private String bus1;\n+\n+    private String connectableBus1;\n+\n+    private String voltageLevelId1;\n+\n+    private Integer node2;\n+\n+    private String bus2;\n+\n+    private String connectableBus2;\n+\n+    private String voltageLevelId2;\n+\n+    private double r = Double.NaN;\n+\n+    private double x = Double.NaN;\n+\n+    private double g1 = Double.NaN;\n+\n+    private double b1 = Double.NaN;\n+\n+    private double g2 = Double.NaN;\n+\n+    private double b2 = Double.NaN;\n+\n+    LineAdderAdapter(final MergingViewIndex index) {\n+        this.index = Objects.requireNonNull(index, \"merging view index is null\");\n+    }\n+\n+    @Override\n+    public Line add() {\n+        Line newLine = null;\n+        final Network n1 = checkAndGetNetwork1();\n+        final Network n2 = checkAndGetNetwork2();\n+        if (n1 == n2) {\n+            newLine = index.getLine(addLine(n1));\n+        } else {\n+            // Creation of 2 dangling lines\n+            throw MergingView.NOT_IMPLEMENTED_EXCEPTION;\n+        }\n+        return newLine;\n+    }\n+\n+    private Line addLine(final Network network) {\n+        final LineAdder adder = network.newLine()\n+                .setId(id)\n+                .setEnsureIdUnicity(ensureIdUnicity)\n+                .setName(name)\n+                .setR(r)\n+                .setX(x)\n+                .setG1(g1)\n+                .setB1(b1)\n+                .setG2(g2)\n+                .setB2(b2)\n+                .setVoltageLevel1(voltageLevelId1)\n+                .setVoltageLevel2(voltageLevelId2);\n+        if (network.getVoltageLevel(voltageLevelId1).getTopologyKind() == TopologyKind.BUS_BREAKER) {\n+            adder.setBus1(bus1)\n+                 .setConnectableBus1(connectableBus1);\n+        } else {\n+            adder.setNode1(node1);\n+        }\n+        if (network.getVoltageLevel(voltageLevelId2).getTopologyKind() == TopologyKind.BUS_BREAKER) {\n+            adder.setBus2(bus2)\n+                 .setConnectableBus2(connectableBus2);\n+        } else {\n+            adder.setNode2(node2);\n+        }\n+        return adder.add();\n+    }\n+\n+    private Network checkAndGetNetwork1() {\n+        if (voltageLevelId1 == null) {\n+            throw new PowsyblException(\"first voltage level is not set\");\n+        }\n+        Network network = index.getNetworkStream()\n+                .filter(n -> n.getVoltageLevel(voltageLevelId1) != null)\n+                .findFirst()\n+                .orElse(null);\n+        if (network == null) {\n+            throw new PowsyblException(\"first voltage level '\" + voltageLevelId1 + \"' not found\");\n+        }\n+        return network;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f71a522dd8aa9b85b27d52ecd605d0c5575c39"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE0OTQ0MA==", "bodyText": "Typo: Second", "url": "https://github.com/powsybl/powsybl-core/pull/1130#discussion_r371149440", "createdAt": "2020-01-27T10:02:19Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/LineAdderAdapter.java", "diffHunk": "@@ -0,0 +1,224 @@\n+package com.powsybl.iidm.mergingview;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.iidm.network.*;\n+\n+import java.util.Objects;\n+\n+class LineAdderAdapter implements LineAdder {\n+\n+    private final MergingViewIndex index;\n+\n+    private String id;\n+\n+    private String name;\n+\n+    private boolean ensureIdUnicity;\n+\n+    private Integer node1;\n+\n+    private String bus1;\n+\n+    private String connectableBus1;\n+\n+    private String voltageLevelId1;\n+\n+    private Integer node2;\n+\n+    private String bus2;\n+\n+    private String connectableBus2;\n+\n+    private String voltageLevelId2;\n+\n+    private double r = Double.NaN;\n+\n+    private double x = Double.NaN;\n+\n+    private double g1 = Double.NaN;\n+\n+    private double b1 = Double.NaN;\n+\n+    private double g2 = Double.NaN;\n+\n+    private double b2 = Double.NaN;\n+\n+    LineAdderAdapter(final MergingViewIndex index) {\n+        this.index = Objects.requireNonNull(index, \"merging view index is null\");\n+    }\n+\n+    @Override\n+    public Line add() {\n+        Line newLine = null;\n+        final Network n1 = checkAndGetNetwork1();\n+        final Network n2 = checkAndGetNetwork2();\n+        if (n1 == n2) {\n+            newLine = index.getLine(addLine(n1));\n+        } else {\n+            // Creation of 2 dangling lines\n+            throw MergingView.NOT_IMPLEMENTED_EXCEPTION;\n+        }\n+        return newLine;\n+    }\n+\n+    private Line addLine(final Network network) {\n+        final LineAdder adder = network.newLine()\n+                .setId(id)\n+                .setEnsureIdUnicity(ensureIdUnicity)\n+                .setName(name)\n+                .setR(r)\n+                .setX(x)\n+                .setG1(g1)\n+                .setB1(b1)\n+                .setG2(g2)\n+                .setB2(b2)\n+                .setVoltageLevel1(voltageLevelId1)\n+                .setVoltageLevel2(voltageLevelId2);\n+        if (network.getVoltageLevel(voltageLevelId1).getTopologyKind() == TopologyKind.BUS_BREAKER) {\n+            adder.setBus1(bus1)\n+                 .setConnectableBus1(connectableBus1);\n+        } else {\n+            adder.setNode1(node1);\n+        }\n+        if (network.getVoltageLevel(voltageLevelId2).getTopologyKind() == TopologyKind.BUS_BREAKER) {\n+            adder.setBus2(bus2)\n+                 .setConnectableBus2(connectableBus2);\n+        } else {\n+            adder.setNode2(node2);\n+        }\n+        return adder.add();\n+    }\n+\n+    private Network checkAndGetNetwork1() {\n+        if (voltageLevelId1 == null) {\n+            throw new PowsyblException(\"first voltage level is not set\");\n+        }\n+        Network network = index.getNetworkStream()\n+                .filter(n -> n.getVoltageLevel(voltageLevelId1) != null)\n+                .findFirst()\n+                .orElse(null);\n+        if (network == null) {\n+            throw new PowsyblException(\"first voltage level '\" + voltageLevelId1 + \"' not found\");\n+        }\n+        return network;\n+    }\n+\n+    private Network checkAndGetNetwork2() {\n+        if (voltageLevelId2 == null) {\n+            throw new PowsyblException(\"second voltage level is not set\");\n+        }\n+        Network network = index.getNetworkStream()\n+                .filter(n -> n.getVoltageLevel(voltageLevelId2) != null)\n+                .findFirst()\n+                .orElse(null);\n+        if (network == null) {\n+            throw new PowsyblException(\"second voltage level '\" + voltageLevelId2 + \"' not found\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f71a522dd8aa9b85b27d52ecd605d0c5575c39"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE0OTUxMA==", "bodyText": "Typo: First", "url": "https://github.com/powsybl/powsybl-core/pull/1130#discussion_r371149510", "createdAt": "2020-01-27T10:02:28Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/LineAdderAdapter.java", "diffHunk": "@@ -0,0 +1,224 @@\n+package com.powsybl.iidm.mergingview;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.iidm.network.*;\n+\n+import java.util.Objects;\n+\n+class LineAdderAdapter implements LineAdder {\n+\n+    private final MergingViewIndex index;\n+\n+    private String id;\n+\n+    private String name;\n+\n+    private boolean ensureIdUnicity;\n+\n+    private Integer node1;\n+\n+    private String bus1;\n+\n+    private String connectableBus1;\n+\n+    private String voltageLevelId1;\n+\n+    private Integer node2;\n+\n+    private String bus2;\n+\n+    private String connectableBus2;\n+\n+    private String voltageLevelId2;\n+\n+    private double r = Double.NaN;\n+\n+    private double x = Double.NaN;\n+\n+    private double g1 = Double.NaN;\n+\n+    private double b1 = Double.NaN;\n+\n+    private double g2 = Double.NaN;\n+\n+    private double b2 = Double.NaN;\n+\n+    LineAdderAdapter(final MergingViewIndex index) {\n+        this.index = Objects.requireNonNull(index, \"merging view index is null\");\n+    }\n+\n+    @Override\n+    public Line add() {\n+        Line newLine = null;\n+        final Network n1 = checkAndGetNetwork1();\n+        final Network n2 = checkAndGetNetwork2();\n+        if (n1 == n2) {\n+            newLine = index.getLine(addLine(n1));\n+        } else {\n+            // Creation of 2 dangling lines\n+            throw MergingView.NOT_IMPLEMENTED_EXCEPTION;\n+        }\n+        return newLine;\n+    }\n+\n+    private Line addLine(final Network network) {\n+        final LineAdder adder = network.newLine()\n+                .setId(id)\n+                .setEnsureIdUnicity(ensureIdUnicity)\n+                .setName(name)\n+                .setR(r)\n+                .setX(x)\n+                .setG1(g1)\n+                .setB1(b1)\n+                .setG2(g2)\n+                .setB2(b2)\n+                .setVoltageLevel1(voltageLevelId1)\n+                .setVoltageLevel2(voltageLevelId2);\n+        if (network.getVoltageLevel(voltageLevelId1).getTopologyKind() == TopologyKind.BUS_BREAKER) {\n+            adder.setBus1(bus1)\n+                 .setConnectableBus1(connectableBus1);\n+        } else {\n+            adder.setNode1(node1);\n+        }\n+        if (network.getVoltageLevel(voltageLevelId2).getTopologyKind() == TopologyKind.BUS_BREAKER) {\n+            adder.setBus2(bus2)\n+                 .setConnectableBus2(connectableBus2);\n+        } else {\n+            adder.setNode2(node2);\n+        }\n+        return adder.add();\n+    }\n+\n+    private Network checkAndGetNetwork1() {\n+        if (voltageLevelId1 == null) {\n+            throw new PowsyblException(\"first voltage level is not set\");\n+        }\n+        Network network = index.getNetworkStream()\n+                .filter(n -> n.getVoltageLevel(voltageLevelId1) != null)\n+                .findFirst()\n+                .orElse(null);\n+        if (network == null) {\n+            throw new PowsyblException(\"first voltage level '\" + voltageLevelId1 + \"' not found\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f71a522dd8aa9b85b27d52ecd605d0c5575c39"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE1MDE0NQ==", "bodyText": "Fix this license header: 2020 and RTE instead of 2016 and iTesla", "url": "https://github.com/powsybl/powsybl-core/pull/1130#discussion_r371150145", "createdAt": "2020-01-27T10:03:47Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergedLine.java", "diffHunk": "@@ -0,0 +1,391 @@\n+/**\n+ * Copyright (c) 2016, All partners of the iTesla project (http://www.itesla-project.eu/consortium)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f71a522dd8aa9b85b27d52ecd605d0c5575c39"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE1MDYyMw==", "bodyText": "For readability, make a private static utility function", "url": "https://github.com/powsybl/powsybl-core/pull/1130#discussion_r371150623", "createdAt": "2020-01-27T10:04:48Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergedLine.java", "diffHunk": "@@ -0,0 +1,391 @@\n+/**\n+ * Copyright (c) 2016, All partners of the iTesla project (http://www.itesla-project.eu/consortium)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.mergingview;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.extensions.Extension;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.util.LimitViolationUtils;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+class MergedLine implements Line {\n+\n+    private final MergingViewIndex index;\n+\n+    private final DanglingLine dl1;\n+\n+    private final DanglingLine dl2;\n+\n+    private String id;\n+\n+    MergedLine(final MergingViewIndex index, final DanglingLine dl1, final DanglingLine dl2) {\n+        this.index = Objects.requireNonNull(index, \"merging view index is null\");\n+        this.dl1 = Objects.requireNonNull(dl1, \"dangling line 1 is null\");\n+        this.dl2 = Objects.requireNonNull(dl2, \"dangling line 2 is null\");\n+        this.id = dl1.getId().compareTo(dl2.getId()) < 0 ? dl1.getId() + \" + \" + dl2.getId() : dl2.getId() + \" + \" + dl1.getId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f71a522dd8aa9b85b27d52ecd605d0c5575c39"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE1MDkzNQ==", "bodyText": "Add a message: \"Unexpected side value: \" + side", "url": "https://github.com/powsybl/powsybl-core/pull/1130#discussion_r371150935", "createdAt": "2020-01-27T10:05:26Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergedLine.java", "diffHunk": "@@ -0,0 +1,391 @@\n+/**\n+ * Copyright (c) 2016, All partners of the iTesla project (http://www.itesla-project.eu/consortium)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.mergingview;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.extensions.Extension;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.util.LimitViolationUtils;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+class MergedLine implements Line {\n+\n+    private final MergingViewIndex index;\n+\n+    private final DanglingLine dl1;\n+\n+    private final DanglingLine dl2;\n+\n+    private String id;\n+\n+    MergedLine(final MergingViewIndex index, final DanglingLine dl1, final DanglingLine dl2) {\n+        this.index = Objects.requireNonNull(index, \"merging view index is null\");\n+        this.dl1 = Objects.requireNonNull(dl1, \"dangling line 1 is null\");\n+        this.dl2 = Objects.requireNonNull(dl2, \"dangling line 2 is null\");\n+        this.id = dl1.getId().compareTo(dl2.getId()) < 0 ? dl1.getId() + \" + \" + dl2.getId() : dl2.getId() + \" + \" + dl1.getId();\n+    }\n+\n+    @Override\n+    public ConnectableType getType() {\n+        return ConnectableType.LINE;\n+    }\n+\n+    @Override\n+    public boolean isTieLine() {\n+        return false;\n+    }\n+\n+    @Override\n+    public MergingView getNetwork() {\n+        return index.getView();\n+    }\n+\n+    @Override\n+    public Terminal getTerminal(final Side side) {\n+        switch (side) {\n+            case ONE:\n+                return getTerminal1();\n+            case TWO:\n+                return getTerminal2();\n+            default:\n+                throw new AssertionError();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f71a522dd8aa9b85b27d52ecd605d0c5575c39"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE1MTQxOA==", "bodyText": "Same remark here", "url": "https://github.com/powsybl/powsybl-core/pull/1130#discussion_r371151418", "createdAt": "2020-01-27T10:06:23Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergedLine.java", "diffHunk": "@@ -0,0 +1,391 @@\n+/**\n+ * Copyright (c) 2016, All partners of the iTesla project (http://www.itesla-project.eu/consortium)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.mergingview;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.extensions.Extension;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.util.LimitViolationUtils;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+class MergedLine implements Line {\n+\n+    private final MergingViewIndex index;\n+\n+    private final DanglingLine dl1;\n+\n+    private final DanglingLine dl2;\n+\n+    private String id;\n+\n+    MergedLine(final MergingViewIndex index, final DanglingLine dl1, final DanglingLine dl2) {\n+        this.index = Objects.requireNonNull(index, \"merging view index is null\");\n+        this.dl1 = Objects.requireNonNull(dl1, \"dangling line 1 is null\");\n+        this.dl2 = Objects.requireNonNull(dl2, \"dangling line 2 is null\");\n+        this.id = dl1.getId().compareTo(dl2.getId()) < 0 ? dl1.getId() + \" + \" + dl2.getId() : dl2.getId() + \" + \" + dl1.getId();\n+    }\n+\n+    @Override\n+    public ConnectableType getType() {\n+        return ConnectableType.LINE;\n+    }\n+\n+    @Override\n+    public boolean isTieLine() {\n+        return false;\n+    }\n+\n+    @Override\n+    public MergingView getNetwork() {\n+        return index.getView();\n+    }\n+\n+    @Override\n+    public Terminal getTerminal(final Side side) {\n+        switch (side) {\n+            case ONE:\n+                return getTerminal1();\n+            case TWO:\n+                return getTerminal2();\n+            default:\n+                throw new AssertionError();\n+        }\n+    }\n+\n+    @Override\n+    public Terminal getTerminal1() {\n+        return index.getTerminal(dl1.getTerminal());\n+    }\n+\n+    @Override\n+    public Terminal getTerminal2() {\n+        return index.getTerminal(dl2.getTerminal());\n+    }\n+\n+    @Override\n+    public CurrentLimits getCurrentLimits(final Side side) {\n+        switch (side) {\n+            case ONE:\n+                return getCurrentLimits1();\n+            case TWO:\n+                return getCurrentLimits2();\n+            default:\n+                throw new AssertionError();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f71a522dd8aa9b85b27d52ecd605d0c5575c39"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE1MTk5NA==", "bodyText": "Rename to terminal1 and terminal2", "url": "https://github.com/powsybl/powsybl-core/pull/1130#discussion_r371151994", "createdAt": "2020-01-27T10:07:39Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergedLine.java", "diffHunk": "@@ -0,0 +1,391 @@\n+/**\n+ * Copyright (c) 2016, All partners of the iTesla project (http://www.itesla-project.eu/consortium)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.mergingview;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.extensions.Extension;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.util.LimitViolationUtils;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+class MergedLine implements Line {\n+\n+    private final MergingViewIndex index;\n+\n+    private final DanglingLine dl1;\n+\n+    private final DanglingLine dl2;\n+\n+    private String id;\n+\n+    MergedLine(final MergingViewIndex index, final DanglingLine dl1, final DanglingLine dl2) {\n+        this.index = Objects.requireNonNull(index, \"merging view index is null\");\n+        this.dl1 = Objects.requireNonNull(dl1, \"dangling line 1 is null\");\n+        this.dl2 = Objects.requireNonNull(dl2, \"dangling line 2 is null\");\n+        this.id = dl1.getId().compareTo(dl2.getId()) < 0 ? dl1.getId() + \" + \" + dl2.getId() : dl2.getId() + \" + \" + dl1.getId();\n+    }\n+\n+    @Override\n+    public ConnectableType getType() {\n+        return ConnectableType.LINE;\n+    }\n+\n+    @Override\n+    public boolean isTieLine() {\n+        return false;\n+    }\n+\n+    @Override\n+    public MergingView getNetwork() {\n+        return index.getView();\n+    }\n+\n+    @Override\n+    public Terminal getTerminal(final Side side) {\n+        switch (side) {\n+            case ONE:\n+                return getTerminal1();\n+            case TWO:\n+                return getTerminal2();\n+            default:\n+                throw new AssertionError();\n+        }\n+    }\n+\n+    @Override\n+    public Terminal getTerminal1() {\n+        return index.getTerminal(dl1.getTerminal());\n+    }\n+\n+    @Override\n+    public Terminal getTerminal2() {\n+        return index.getTerminal(dl2.getTerminal());\n+    }\n+\n+    @Override\n+    public CurrentLimits getCurrentLimits(final Side side) {\n+        switch (side) {\n+            case ONE:\n+                return getCurrentLimits1();\n+            case TWO:\n+                return getCurrentLimits2();\n+            default:\n+                throw new AssertionError();\n+        }\n+    }\n+\n+    @Override\n+    public CurrentLimits getCurrentLimits1() {\n+        return dl1.getCurrentLimits();\n+    }\n+\n+    @Override\n+    public CurrentLimitsAdder newCurrentLimits1() {\n+        return dl1.newCurrentLimits();\n+    }\n+\n+    @Override\n+    public CurrentLimits getCurrentLimits2() {\n+        return dl2.getCurrentLimits();\n+    }\n+\n+    @Override\n+    public CurrentLimitsAdder newCurrentLimits2() {\n+        return dl2.newCurrentLimits();\n+    }\n+\n+    @Override\n+    public String getId() {\n+        return id;\n+    }\n+\n+    @Override\n+    public double getR() {\n+        return dl1.getR() + dl2.getR();\n+    }\n+\n+    @Override\n+    public Line setR(final double r) {\n+        dl1.setR(r / 2.0d);\n+        dl2.setR(r / 2.0d);\n+        return this;\n+    }\n+\n+    @Override\n+    public double getX() {\n+        return dl1.getX() + dl2.getX();\n+    }\n+\n+    @Override\n+    public Line setX(final double x) {\n+        dl1.setX(x / 2.0d);\n+        dl2.setX(x / 2.0d);\n+        return this;\n+    }\n+\n+    @Override\n+    public double getG1() {\n+        return dl1.getG();\n+    }\n+\n+    @Override\n+    public Line setG1(final double g1) {\n+        dl1.setG(g1);\n+        return this;\n+    }\n+\n+    @Override\n+    public double getG2() {\n+        return dl2.getG();\n+    }\n+\n+    @Override\n+    public Line setG2(final double g2) {\n+        dl2.setG(g2);\n+        return this;\n+    }\n+\n+    @Override\n+    public double getB1() {\n+        return dl1.getB();\n+    }\n+\n+    @Override\n+    public Line setB1(final double b1) {\n+        dl1.setB(b1);\n+        return this;\n+    }\n+\n+    @Override\n+    public double getB2() {\n+        return dl2.getB();\n+    }\n+\n+    @Override\n+    public Line setB2(final double b2) {\n+        dl2.setB(b2);\n+        return this;\n+    }\n+\n+    @Override\n+    public Terminal getTerminal(final String voltageLevelId) {\n+        Objects.requireNonNull(voltageLevelId);\n+\n+        Terminal termDl1 = dl1.getTerminal();\n+        Terminal termDl2 = dl2.getTerminal();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f71a522dd8aa9b85b27d52ecd605d0c5575c39"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE1MjI5MA==", "bodyText": "Add a message", "url": "https://github.com/powsybl/powsybl-core/pull/1130#discussion_r371152290", "createdAt": "2020-01-27T10:08:21Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergedLine.java", "diffHunk": "@@ -0,0 +1,391 @@\n+/**\n+ * Copyright (c) 2016, All partners of the iTesla project (http://www.itesla-project.eu/consortium)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.mergingview;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.extensions.Extension;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.util.LimitViolationUtils;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+class MergedLine implements Line {\n+\n+    private final MergingViewIndex index;\n+\n+    private final DanglingLine dl1;\n+\n+    private final DanglingLine dl2;\n+\n+    private String id;\n+\n+    MergedLine(final MergingViewIndex index, final DanglingLine dl1, final DanglingLine dl2) {\n+        this.index = Objects.requireNonNull(index, \"merging view index is null\");\n+        this.dl1 = Objects.requireNonNull(dl1, \"dangling line 1 is null\");\n+        this.dl2 = Objects.requireNonNull(dl2, \"dangling line 2 is null\");\n+        this.id = dl1.getId().compareTo(dl2.getId()) < 0 ? dl1.getId() + \" + \" + dl2.getId() : dl2.getId() + \" + \" + dl1.getId();\n+    }\n+\n+    @Override\n+    public ConnectableType getType() {\n+        return ConnectableType.LINE;\n+    }\n+\n+    @Override\n+    public boolean isTieLine() {\n+        return false;\n+    }\n+\n+    @Override\n+    public MergingView getNetwork() {\n+        return index.getView();\n+    }\n+\n+    @Override\n+    public Terminal getTerminal(final Side side) {\n+        switch (side) {\n+            case ONE:\n+                return getTerminal1();\n+            case TWO:\n+                return getTerminal2();\n+            default:\n+                throw new AssertionError();\n+        }\n+    }\n+\n+    @Override\n+    public Terminal getTerminal1() {\n+        return index.getTerminal(dl1.getTerminal());\n+    }\n+\n+    @Override\n+    public Terminal getTerminal2() {\n+        return index.getTerminal(dl2.getTerminal());\n+    }\n+\n+    @Override\n+    public CurrentLimits getCurrentLimits(final Side side) {\n+        switch (side) {\n+            case ONE:\n+                return getCurrentLimits1();\n+            case TWO:\n+                return getCurrentLimits2();\n+            default:\n+                throw new AssertionError();\n+        }\n+    }\n+\n+    @Override\n+    public CurrentLimits getCurrentLimits1() {\n+        return dl1.getCurrentLimits();\n+    }\n+\n+    @Override\n+    public CurrentLimitsAdder newCurrentLimits1() {\n+        return dl1.newCurrentLimits();\n+    }\n+\n+    @Override\n+    public CurrentLimits getCurrentLimits2() {\n+        return dl2.getCurrentLimits();\n+    }\n+\n+    @Override\n+    public CurrentLimitsAdder newCurrentLimits2() {\n+        return dl2.newCurrentLimits();\n+    }\n+\n+    @Override\n+    public String getId() {\n+        return id;\n+    }\n+\n+    @Override\n+    public double getR() {\n+        return dl1.getR() + dl2.getR();\n+    }\n+\n+    @Override\n+    public Line setR(final double r) {\n+        dl1.setR(r / 2.0d);\n+        dl2.setR(r / 2.0d);\n+        return this;\n+    }\n+\n+    @Override\n+    public double getX() {\n+        return dl1.getX() + dl2.getX();\n+    }\n+\n+    @Override\n+    public Line setX(final double x) {\n+        dl1.setX(x / 2.0d);\n+        dl2.setX(x / 2.0d);\n+        return this;\n+    }\n+\n+    @Override\n+    public double getG1() {\n+        return dl1.getG();\n+    }\n+\n+    @Override\n+    public Line setG1(final double g1) {\n+        dl1.setG(g1);\n+        return this;\n+    }\n+\n+    @Override\n+    public double getG2() {\n+        return dl2.getG();\n+    }\n+\n+    @Override\n+    public Line setG2(final double g2) {\n+        dl2.setG(g2);\n+        return this;\n+    }\n+\n+    @Override\n+    public double getB1() {\n+        return dl1.getB();\n+    }\n+\n+    @Override\n+    public Line setB1(final double b1) {\n+        dl1.setB(b1);\n+        return this;\n+    }\n+\n+    @Override\n+    public double getB2() {\n+        return dl2.getB();\n+    }\n+\n+    @Override\n+    public Line setB2(final double b2) {\n+        dl2.setB(b2);\n+        return this;\n+    }\n+\n+    @Override\n+    public Terminal getTerminal(final String voltageLevelId) {\n+        Objects.requireNonNull(voltageLevelId);\n+\n+        Terminal termDl1 = dl1.getTerminal();\n+        Terminal termDl2 = dl2.getTerminal();\n+        if (voltageLevelId.equals(termDl1.getVoltageLevel().getId())) {\n+            return termDl1;\n+        } else if (voltageLevelId.equals(termDl2.getVoltageLevel().getId())) {\n+            return termDl2;\n+        } else {\n+            throw new PowsyblException(\"No terminal connected to voltage level \" + voltageLevelId);\n+        }\n+    }\n+\n+    @Override\n+    public Side getSide(final Terminal terminal) {\n+        Objects.requireNonNull(terminal);\n+\n+        Terminal term = terminal;\n+        if (term instanceof AbstractAdapter) {\n+            term = ((AbstractAdapter<Terminal>) term).getDelegate();\n+        }\n+        if (term == dl1.getTerminal()) {\n+            return Side.ONE;\n+        } else if (term == dl2.getTerminal()) {\n+            return Side.TWO;\n+        } else {\n+            throw new PowsyblException(\"The terminal is not connected to this branch\");\n+        }\n+    }\n+\n+    @Override\n+    public boolean isOverloaded() {\n+        return isOverloaded(1.0f);\n+    }\n+\n+    @Override\n+    public boolean isOverloaded(final float limitReduction) {\n+        return checkPermanentLimit1(limitReduction) || checkPermanentLimit2(limitReduction);\n+    }\n+\n+    @Override\n+    public int getOverloadDuration() {\n+        Branch.Overload o1 = checkTemporaryLimits1();\n+        Branch.Overload o2 = checkTemporaryLimits2();\n+        int duration1 = o1 != null ? o1.getTemporaryLimit().getAcceptableDuration() : Integer.MAX_VALUE;\n+        int duration2 = o2 != null ? o2.getTemporaryLimit().getAcceptableDuration() : Integer.MAX_VALUE;\n+        return Math.min(duration1, duration2);\n+    }\n+\n+    @Override\n+    public boolean checkPermanentLimit(final Side side, final float limitReduction) {\n+        Objects.requireNonNull(side);\n+        switch (side) {\n+            case ONE:\n+                return checkPermanentLimit1(limitReduction);\n+\n+            case TWO:\n+                return checkPermanentLimit2(limitReduction);\n+\n+            default:\n+                throw new AssertionError();\n+        }\n+    }\n+\n+    @Override\n+    public boolean checkPermanentLimit(final Side side) {\n+        return checkPermanentLimit(side, 1f);\n+    }\n+\n+    @Override\n+    public boolean checkPermanentLimit1(final float limitReduction) {\n+        return LimitViolationUtils.checkPermanentLimit(this, Side.ONE, limitReduction, getTerminal1().getI());\n+    }\n+\n+    @Override\n+    public boolean checkPermanentLimit1() {\n+        return checkPermanentLimit1(1f);\n+    }\n+\n+    @Override\n+    public boolean checkPermanentLimit2(final float limitReduction) {\n+        return LimitViolationUtils.checkPermanentLimit(this, Side.TWO, limitReduction, getTerminal2().getI());\n+    }\n+\n+    @Override\n+    public boolean checkPermanentLimit2() {\n+        return checkPermanentLimit2(1f);\n+    }\n+\n+    @Override\n+    public Overload checkTemporaryLimits(final Side side, final float limitReduction) {\n+        Objects.requireNonNull(side);\n+        switch (side) {\n+            case ONE:\n+                return checkTemporaryLimits1(limitReduction);\n+\n+            case TWO:\n+                return checkTemporaryLimits2(limitReduction);\n+\n+            default:\n+                throw new AssertionError();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f71a522dd8aa9b85b27d52ecd605d0c5575c39"}, "originalPosition": 285}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE1MzE2MA==", "bodyText": "Refactor this code, by introducing a function that takes an ID and a Consumer?", "url": "https://github.com/powsybl/powsybl-core/pull/1130#discussion_r371153160", "createdAt": "2020-01-27T10:10:14Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergingView.java", "diffHunk": "@@ -735,12 +749,16 @@ public int getLineCount() {\n \n     @Override\n     public Line getLine(final String id) {\n-        return index.getNetworkStream()\n-                .map(n -> n.getLine(id))\n-                .filter(Objects::nonNull)\n-                .map(index::getLine)\n-                .findFirst()\n-                .orElse(null);\n+        Line line = index.getMergedLine(id);\n+        if (Objects.isNull(line)) {\n+            line = index.getNetworkStream()\n+                        .map(n -> n.getLine(id))\n+                        .filter(Objects::nonNull)\n+                        .map(index::getLine)\n+                        .findFirst()\n+                        .orElse(null);\n+        }\n+        return line;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f71a522dd8aa9b85b27d52ecd605d0c5575c39"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE1MzM3MQ==", "bodyText": "Should be private?", "url": "https://github.com/powsybl/powsybl-core/pull/1130#discussion_r371153371", "createdAt": "2020-01-27T10:10:44Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergingViewIndex.java", "diffHunk": "@@ -68,6 +71,29 @@ void checkAndAdd(final Network other) {\n         ValidationUtil.checkUniqueIds(other, this);\n         // Local storage for mergeable network\n         networks.add(other);\n+        // Manage DanglingLines\n+        other.getDanglingLineStream().forEach(this::checkNewDanglingLine);\n+    }\n+\n+    void checkNewDanglingLine(final DanglingLine dll2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f71a522dd8aa9b85b27d52ecd605d0c5575c39"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE1MzQ0Mw==", "bodyText": "Should be private?", "url": "https://github.com/powsybl/powsybl-core/pull/1130#discussion_r371153443", "createdAt": "2020-01-27T10:10:52Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergingViewIndex.java", "diffHunk": "@@ -68,6 +71,29 @@ void checkAndAdd(final Network other) {\n         ValidationUtil.checkUniqueIds(other, this);\n         // Local storage for mergeable network\n         networks.add(other);\n+        // Manage DanglingLines\n+        other.getDanglingLineStream().forEach(this::checkNewDanglingLine);\n+    }\n+\n+    void checkNewDanglingLine(final DanglingLine dll2) {\n+        Objects.requireNonNull(dll2, \"DanglingLine is null\");\n+        // Manage DanglingLines\n+        final String code = dll2.getUcteXnodeCode();\n+        // Find other DanglingLine if exist\n+        final Set<DanglingLine> danglingLines = getNetworkStream().flatMap(Network::getDanglingLineStream).filter(d -> d.getUcteXnodeCode().equals(code)).collect(Collectors.toSet());\n+        for (DanglingLine dll1 : danglingLines) {\n+            if (dll1 != dll2) {\n+                // Create MergedLine from 2 dangling lines\n+                mergedLineCached.computeIfAbsent(code, key -> new MergedLine(this, dll1, dll2));\n+            }\n+        }\n+    }\n+\n+    Line getMergedLine(final String id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f71a522dd8aa9b85b27d52ecd605d0c5575c39"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d0eb8ebba81cf538e032ea06934eb06235f9245", "author": {"user": {"login": "tadam50", "name": "Thomas ADAM"}}, "url": "https://github.com/powsybl/powsybl-core/commit/4d0eb8ebba81cf538e032ea06934eb06235f9245", "committedDate": "2020-01-28T17:04:18Z", "message": "Taking into account MR reviews\n\nSigned-off-by: Thomas ADAM <tadam@silicom.fr>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b501e91755caa8e147690f35cd9697dce936d4f", "author": {"user": {"login": "tadam50", "name": "Thomas ADAM"}}, "url": "https://github.com/powsybl/powsybl-core/commit/9b501e91755caa8e147690f35cd9697dce936d4f", "committedDate": "2020-01-29T09:19:11Z", "message": "Missing message on assertion\n\nSigned-off-by: Thomas ADAM <tadam@silicom.fr>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMjkzMjQw", "url": "https://github.com/powsybl/powsybl-core/pull/1130#pullrequestreview-352293240", "createdAt": "2020-02-03T14:29:39Z", "commit": {"oid": "9b501e91755caa8e147690f35cd9697dce936d4f"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoyOTozOVrOFkzPfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwOTozMTo1NlrOFlxBGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzMjYwNA==", "bodyText": "I'm not sure this is a good idea. Is it to avoid a test for null and/or a NullPointerException?", "url": "https://github.com/powsybl/powsybl-core/pull/1130#discussion_r374132604", "createdAt": "2020-02-03T14:29:39Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/BranchAdder.java", "diffHunk": "@@ -14,15 +14,15 @@\n \n     T setVoltageLevel1(String voltageLevelId1);\n \n-    T setNode1(int node1);\n+    T setNode1(Integer node1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b501e91755caa8e147690f35cd9697dce936d4f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEzOTU2OQ==", "bodyText": "See above: maybe we can just have a test for Null only for these two setters", "url": "https://github.com/powsybl/powsybl-core/pull/1130#discussion_r375139569", "createdAt": "2020-02-05T09:21:47Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/LineAdderAdapter.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.mergingview;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.iidm.network.*;\n+\n+import java.util.Objects;\n+\n+/**\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+class LineAdderAdapter implements LineAdder {\n+\n+    private final MergingViewIndex index;\n+\n+    private String id;\n+\n+    private String name;\n+\n+    private boolean ensureIdUnicity;\n+\n+    private Integer node1;\n+\n+    private String bus1;\n+\n+    private String connectableBus1;\n+\n+    private String voltageLevelId1;\n+\n+    private Integer node2;\n+\n+    private String bus2;\n+\n+    private String connectableBus2;\n+\n+    private String voltageLevelId2;\n+\n+    private double r = Double.NaN;\n+\n+    private double x = Double.NaN;\n+\n+    private double g1 = Double.NaN;\n+\n+    private double b1 = Double.NaN;\n+\n+    private double g2 = Double.NaN;\n+\n+    private double b2 = Double.NaN;\n+\n+    LineAdderAdapter(final MergingViewIndex index) {\n+        this.index = Objects.requireNonNull(index, \"merging view index is null\");\n+    }\n+\n+    @Override\n+    public Line add() {\n+        Line newLine = null;\n+        final Network n1 = checkAndGetNetwork1();\n+        final Network n2 = checkAndGetNetwork2();\n+        if (n1 == n2) {\n+            newLine = index.getLine(addLine(n1));\n+        } else {\n+            // Creation of 2 dangling lines\n+            throw MergingView.NOT_IMPLEMENTED_EXCEPTION;\n+        }\n+        return newLine;\n+    }\n+\n+    private Line addLine(final Network network) {\n+        LineAdder adder = network.newLine()\n+                    .setId(id)\n+                    .setEnsureIdUnicity(ensureIdUnicity)\n+                    .setName(name)\n+                    .setR(r)\n+                    .setX(x)\n+                    .setG1(g1)\n+                    .setB1(b1)\n+                    .setG2(g2)\n+                    .setB2(b2)\n+                    .setVoltageLevel1(voltageLevelId1)\n+                    .setVoltageLevel2(voltageLevelId2)\n+                    .setBus1(bus1)\n+                    .setConnectableBus1(connectableBus1)\n+                    .setBus2(bus2)\n+                    .setConnectableBus2(connectableBus2)\n+                    .setNode1(node1)\n+                    .setNode2(node2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b501e91755caa8e147690f35cd9697dce936d4f"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE0MDQ3Mg==", "bodyText": "You have to ensure the unicity of this ID (or throw depending on the policy)", "url": "https://github.com/powsybl/powsybl-core/pull/1130#discussion_r375140472", "createdAt": "2020-02-05T09:23:36Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergedLine.java", "diffHunk": "@@ -0,0 +1,401 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.mergingview;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.extensions.Extension;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.util.LimitViolationUtils;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+class MergedLine implements Line {\n+\n+    private final MergingViewIndex index;\n+\n+    private final DanglingLine dl1;\n+\n+    private final DanglingLine dl2;\n+\n+    private String id;\n+\n+    MergedLine(final MergingViewIndex index, final DanglingLine dl1, final DanglingLine dl2) {\n+        this.index = Objects.requireNonNull(index, \"merging view index is null\");\n+        this.dl1 = Objects.requireNonNull(dl1, \"dangling line 1 is null\");\n+        this.dl2 = Objects.requireNonNull(dl2, \"dangling line 2 is null\");\n+        this.id = buildId(dl1, dl2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b501e91755caa8e147690f35cd9697dce936d4f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE0MDUyNQ==", "bodyText": "Make it final.", "url": "https://github.com/powsybl/powsybl-core/pull/1130#discussion_r375140525", "createdAt": "2020-02-05T09:23:44Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergedLine.java", "diffHunk": "@@ -0,0 +1,401 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.mergingview;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.extensions.Extension;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.util.LimitViolationUtils;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+class MergedLine implements Line {\n+\n+    private final MergingViewIndex index;\n+\n+    private final DanglingLine dl1;\n+\n+    private final DanglingLine dl2;\n+\n+    private String id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b501e91755caa8e147690f35cd9697dce936d4f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE0MTEzMw==", "bodyText": "Is that true?", "url": "https://github.com/powsybl/powsybl-core/pull/1130#discussion_r375141133", "createdAt": "2020-02-05T09:25:01Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergedLine.java", "diffHunk": "@@ -0,0 +1,401 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.mergingview;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.extensions.Extension;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.util.LimitViolationUtils;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+class MergedLine implements Line {\n+\n+    private final MergingViewIndex index;\n+\n+    private final DanglingLine dl1;\n+\n+    private final DanglingLine dl2;\n+\n+    private String id;\n+\n+    MergedLine(final MergingViewIndex index, final DanglingLine dl1, final DanglingLine dl2) {\n+        this.index = Objects.requireNonNull(index, \"merging view index is null\");\n+        this.dl1 = Objects.requireNonNull(dl1, \"dangling line 1 is null\");\n+        this.dl2 = Objects.requireNonNull(dl2, \"dangling line 2 is null\");\n+        this.id = buildId(dl1, dl2);\n+    }\n+\n+    private static String buildId(final DanglingLine dl1, final DanglingLine dl2) {\n+        String id;\n+        if (dl1.getId().compareTo(dl2.getId()) < 0) {\n+            id = dl1.getId() + \" + \" + dl2.getId();\n+        } else {\n+            id = dl2.getId() + \" + \" + dl1.getId();\n+        }\n+        return id;\n+    }\n+\n+    @Override\n+    public ConnectableType getType() {\n+        return ConnectableType.LINE;\n+    }\n+\n+    @Override\n+    public boolean isTieLine() {\n+        return false;\n+    }\n+\n+    @Override\n+    public MergingView getNetwork() {\n+        return index.getView();\n+    }\n+\n+    @Override\n+    public Terminal getTerminal(final Side side) {\n+        switch (side) {\n+            case ONE:\n+                return getTerminal1();\n+            case TWO:\n+                return getTerminal2();\n+            default:\n+                throw new AssertionError(\"Unexpected side value: \" + side);\n+        }\n+    }\n+\n+    @Override\n+    public Terminal getTerminal1() {\n+        return index.getTerminal(dl1.getTerminal());\n+    }\n+\n+    @Override\n+    public Terminal getTerminal2() {\n+        return index.getTerminal(dl2.getTerminal());\n+    }\n+\n+    @Override\n+    public CurrentLimits getCurrentLimits(final Side side) {\n+        switch (side) {\n+            case ONE:\n+                return getCurrentLimits1();\n+            case TWO:\n+                return getCurrentLimits2();\n+            default:\n+                throw new AssertionError(\"Unexpected side value: \" + side);\n+        }\n+    }\n+\n+    @Override\n+    public CurrentLimits getCurrentLimits1() {\n+        return dl1.getCurrentLimits();\n+    }\n+\n+    @Override\n+    public CurrentLimitsAdder newCurrentLimits1() {\n+        return dl1.newCurrentLimits();\n+    }\n+\n+    @Override\n+    public CurrentLimits getCurrentLimits2() {\n+        return dl2.getCurrentLimits();\n+    }\n+\n+    @Override\n+    public CurrentLimitsAdder newCurrentLimits2() {\n+        return dl2.newCurrentLimits();\n+    }\n+\n+    @Override\n+    public String getId() {\n+        return id;\n+    }\n+\n+    @Override\n+    public double getR() {\n+        return dl1.getR() + dl2.getR();\n+    }\n+\n+    @Override\n+    public Line setR(final double r) {\n+        dl1.setR(r / 2.0d);\n+        dl2.setR(r / 2.0d);\n+        return this;\n+    }\n+\n+    @Override\n+    public double getX() {\n+        return dl1.getX() + dl2.getX();\n+    }\n+\n+    @Override\n+    public Line setX(final double x) {\n+        dl1.setX(x / 2.0d);\n+        dl2.setX(x / 2.0d);\n+        return this;\n+    }\n+\n+    @Override\n+    public double getG1() {\n+        return dl1.getG();\n+    }\n+\n+    @Override\n+    public Line setG1(final double g1) {\n+        dl1.setG(g1);\n+        return this;\n+    }\n+\n+    @Override\n+    public double getG2() {\n+        return dl2.getG();\n+    }\n+\n+    @Override\n+    public Line setG2(final double g2) {\n+        dl2.setG(g2);\n+        return this;\n+    }\n+\n+    @Override\n+    public double getB1() {\n+        return dl1.getB();\n+    }\n+\n+    @Override\n+    public Line setB1(final double b1) {\n+        dl1.setB(b1);\n+        return this;\n+    }\n+\n+    @Override\n+    public double getB2() {\n+        return dl2.getB();\n+    }\n+\n+    @Override\n+    public Line setB2(final double b2) {\n+        dl2.setB(b2);\n+        return this;\n+    }\n+\n+    @Override\n+    public Terminal getTerminal(final String voltageLevelId) {\n+        Objects.requireNonNull(voltageLevelId);\n+\n+        Terminal terminal1 = dl1.getTerminal();\n+        Terminal terminal2 = dl2.getTerminal();\n+        if (voltageLevelId.equals(terminal1.getVoltageLevel().getId())) {\n+            return terminal1;\n+        } else if (voltageLevelId.equals(terminal2.getVoltageLevel().getId())) {\n+            return terminal2;\n+        } else {\n+            throw new PowsyblException(\"No terminal connected to voltage level \" + voltageLevelId);\n+        }\n+    }\n+\n+    @Override\n+    public Side getSide(final Terminal terminal) {\n+        Objects.requireNonNull(terminal);\n+\n+        Terminal term = terminal;\n+        if (term instanceof AbstractAdapter) {\n+            term = ((AbstractAdapter<Terminal>) term).getDelegate();\n+        }\n+        if (term == dl1.getTerminal()) {\n+            return Side.ONE;\n+        } else if (term == dl2.getTerminal()) {\n+            return Side.TWO;\n+        } else {\n+            throw new PowsyblException(\"The terminal is not connected to this branch\");\n+        }\n+    }\n+\n+    @Override\n+    public boolean isOverloaded() {\n+        return isOverloaded(1.0f);\n+    }\n+\n+    @Override\n+    public boolean isOverloaded(final float limitReduction) {\n+        return checkPermanentLimit1(limitReduction) || checkPermanentLimit2(limitReduction);\n+    }\n+\n+    @Override\n+    public int getOverloadDuration() {\n+        Branch.Overload o1 = checkTemporaryLimits1();\n+        Branch.Overload o2 = checkTemporaryLimits2();\n+        int duration1 = o1 != null ? o1.getTemporaryLimit().getAcceptableDuration() : Integer.MAX_VALUE;\n+        int duration2 = o2 != null ? o2.getTemporaryLimit().getAcceptableDuration() : Integer.MAX_VALUE;\n+        return Math.min(duration1, duration2);\n+    }\n+\n+    @Override\n+    public boolean checkPermanentLimit(final Side side, final float limitReduction) {\n+        Objects.requireNonNull(side);\n+        switch (side) {\n+            case ONE:\n+                return checkPermanentLimit1(limitReduction);\n+\n+            case TWO:\n+                return checkPermanentLimit2(limitReduction);\n+\n+            default:\n+                throw new AssertionError(\"Unexpected side value: \" + side);\n+        }\n+    }\n+\n+    @Override\n+    public boolean checkPermanentLimit(final Side side) {\n+        return checkPermanentLimit(side, 1f);\n+    }\n+\n+    @Override\n+    public boolean checkPermanentLimit1(final float limitReduction) {\n+        return LimitViolationUtils.checkPermanentLimit(this, Side.ONE, limitReduction, getTerminal1().getI());\n+    }\n+\n+    @Override\n+    public boolean checkPermanentLimit1() {\n+        return checkPermanentLimit1(1f);\n+    }\n+\n+    @Override\n+    public boolean checkPermanentLimit2(final float limitReduction) {\n+        return LimitViolationUtils.checkPermanentLimit(this, Side.TWO, limitReduction, getTerminal2().getI());\n+    }\n+\n+    @Override\n+    public boolean checkPermanentLimit2() {\n+        return checkPermanentLimit2(1f);\n+    }\n+\n+    @Override\n+    public Overload checkTemporaryLimits(final Side side, final float limitReduction) {\n+        Objects.requireNonNull(side);\n+        switch (side) {\n+            case ONE:\n+                return checkTemporaryLimits1(limitReduction);\n+\n+            case TWO:\n+                return checkTemporaryLimits2(limitReduction);\n+\n+            default:\n+                throw new AssertionError(\"Unexpected side value: \" + side);\n+        }\n+    }\n+\n+    @Override\n+    public Overload checkTemporaryLimits(final Side side) {\n+        return checkTemporaryLimits(side, 1f);\n+    }\n+\n+    @Override\n+    public Overload checkTemporaryLimits1(final float limitReduction) {\n+        return LimitViolationUtils.checkTemporaryLimits(this, Side.ONE, limitReduction, getTerminal1().getI());\n+    }\n+\n+    @Override\n+    public Overload checkTemporaryLimits1() {\n+        return checkTemporaryLimits1(1f);\n+    }\n+\n+    @Override\n+    public Overload checkTemporaryLimits2(final float limitReduction) {\n+        return LimitViolationUtils.checkTemporaryLimits(this, Side.TWO, limitReduction, getTerminal2().getI());\n+    }\n+\n+    @Override\n+    public Overload checkTemporaryLimits2() {\n+        return checkTemporaryLimits2(1f);\n+    }\n+\n+    @Override\n+    public List<? extends Terminal> getTerminals() {\n+        return Stream.concat(dl1.getTerminals().stream(),\n+                             dl2.getTerminals().stream())\n+                     .map(index::getTerminal)\n+                     .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return this.id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b501e91755caa8e147690f35cd9697dce936d4f"}, "originalPosition": 334}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE0MTgyNA==", "bodyText": "Maybe you have to look in the UCTEImporter code. @murgeyseb make a change recently to manage this differently. For instance, what happens if both dangling lines have the property defined, but not equal.", "url": "https://github.com/powsybl/powsybl-core/pull/1130#discussion_r375141824", "createdAt": "2020-02-05T09:26:28Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergedLine.java", "diffHunk": "@@ -0,0 +1,401 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.mergingview;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.extensions.Extension;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.util.LimitViolationUtils;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+class MergedLine implements Line {\n+\n+    private final MergingViewIndex index;\n+\n+    private final DanglingLine dl1;\n+\n+    private final DanglingLine dl2;\n+\n+    private String id;\n+\n+    MergedLine(final MergingViewIndex index, final DanglingLine dl1, final DanglingLine dl2) {\n+        this.index = Objects.requireNonNull(index, \"merging view index is null\");\n+        this.dl1 = Objects.requireNonNull(dl1, \"dangling line 1 is null\");\n+        this.dl2 = Objects.requireNonNull(dl2, \"dangling line 2 is null\");\n+        this.id = buildId(dl1, dl2);\n+    }\n+\n+    private static String buildId(final DanglingLine dl1, final DanglingLine dl2) {\n+        String id;\n+        if (dl1.getId().compareTo(dl2.getId()) < 0) {\n+            id = dl1.getId() + \" + \" + dl2.getId();\n+        } else {\n+            id = dl2.getId() + \" + \" + dl1.getId();\n+        }\n+        return id;\n+    }\n+\n+    @Override\n+    public ConnectableType getType() {\n+        return ConnectableType.LINE;\n+    }\n+\n+    @Override\n+    public boolean isTieLine() {\n+        return false;\n+    }\n+\n+    @Override\n+    public MergingView getNetwork() {\n+        return index.getView();\n+    }\n+\n+    @Override\n+    public Terminal getTerminal(final Side side) {\n+        switch (side) {\n+            case ONE:\n+                return getTerminal1();\n+            case TWO:\n+                return getTerminal2();\n+            default:\n+                throw new AssertionError(\"Unexpected side value: \" + side);\n+        }\n+    }\n+\n+    @Override\n+    public Terminal getTerminal1() {\n+        return index.getTerminal(dl1.getTerminal());\n+    }\n+\n+    @Override\n+    public Terminal getTerminal2() {\n+        return index.getTerminal(dl2.getTerminal());\n+    }\n+\n+    @Override\n+    public CurrentLimits getCurrentLimits(final Side side) {\n+        switch (side) {\n+            case ONE:\n+                return getCurrentLimits1();\n+            case TWO:\n+                return getCurrentLimits2();\n+            default:\n+                throw new AssertionError(\"Unexpected side value: \" + side);\n+        }\n+    }\n+\n+    @Override\n+    public CurrentLimits getCurrentLimits1() {\n+        return dl1.getCurrentLimits();\n+    }\n+\n+    @Override\n+    public CurrentLimitsAdder newCurrentLimits1() {\n+        return dl1.newCurrentLimits();\n+    }\n+\n+    @Override\n+    public CurrentLimits getCurrentLimits2() {\n+        return dl2.getCurrentLimits();\n+    }\n+\n+    @Override\n+    public CurrentLimitsAdder newCurrentLimits2() {\n+        return dl2.newCurrentLimits();\n+    }\n+\n+    @Override\n+    public String getId() {\n+        return id;\n+    }\n+\n+    @Override\n+    public double getR() {\n+        return dl1.getR() + dl2.getR();\n+    }\n+\n+    @Override\n+    public Line setR(final double r) {\n+        dl1.setR(r / 2.0d);\n+        dl2.setR(r / 2.0d);\n+        return this;\n+    }\n+\n+    @Override\n+    public double getX() {\n+        return dl1.getX() + dl2.getX();\n+    }\n+\n+    @Override\n+    public Line setX(final double x) {\n+        dl1.setX(x / 2.0d);\n+        dl2.setX(x / 2.0d);\n+        return this;\n+    }\n+\n+    @Override\n+    public double getG1() {\n+        return dl1.getG();\n+    }\n+\n+    @Override\n+    public Line setG1(final double g1) {\n+        dl1.setG(g1);\n+        return this;\n+    }\n+\n+    @Override\n+    public double getG2() {\n+        return dl2.getG();\n+    }\n+\n+    @Override\n+    public Line setG2(final double g2) {\n+        dl2.setG(g2);\n+        return this;\n+    }\n+\n+    @Override\n+    public double getB1() {\n+        return dl1.getB();\n+    }\n+\n+    @Override\n+    public Line setB1(final double b1) {\n+        dl1.setB(b1);\n+        return this;\n+    }\n+\n+    @Override\n+    public double getB2() {\n+        return dl2.getB();\n+    }\n+\n+    @Override\n+    public Line setB2(final double b2) {\n+        dl2.setB(b2);\n+        return this;\n+    }\n+\n+    @Override\n+    public Terminal getTerminal(final String voltageLevelId) {\n+        Objects.requireNonNull(voltageLevelId);\n+\n+        Terminal terminal1 = dl1.getTerminal();\n+        Terminal terminal2 = dl2.getTerminal();\n+        if (voltageLevelId.equals(terminal1.getVoltageLevel().getId())) {\n+            return terminal1;\n+        } else if (voltageLevelId.equals(terminal2.getVoltageLevel().getId())) {\n+            return terminal2;\n+        } else {\n+            throw new PowsyblException(\"No terminal connected to voltage level \" + voltageLevelId);\n+        }\n+    }\n+\n+    @Override\n+    public Side getSide(final Terminal terminal) {\n+        Objects.requireNonNull(terminal);\n+\n+        Terminal term = terminal;\n+        if (term instanceof AbstractAdapter) {\n+            term = ((AbstractAdapter<Terminal>) term).getDelegate();\n+        }\n+        if (term == dl1.getTerminal()) {\n+            return Side.ONE;\n+        } else if (term == dl2.getTerminal()) {\n+            return Side.TWO;\n+        } else {\n+            throw new PowsyblException(\"The terminal is not connected to this branch\");\n+        }\n+    }\n+\n+    @Override\n+    public boolean isOverloaded() {\n+        return isOverloaded(1.0f);\n+    }\n+\n+    @Override\n+    public boolean isOverloaded(final float limitReduction) {\n+        return checkPermanentLimit1(limitReduction) || checkPermanentLimit2(limitReduction);\n+    }\n+\n+    @Override\n+    public int getOverloadDuration() {\n+        Branch.Overload o1 = checkTemporaryLimits1();\n+        Branch.Overload o2 = checkTemporaryLimits2();\n+        int duration1 = o1 != null ? o1.getTemporaryLimit().getAcceptableDuration() : Integer.MAX_VALUE;\n+        int duration2 = o2 != null ? o2.getTemporaryLimit().getAcceptableDuration() : Integer.MAX_VALUE;\n+        return Math.min(duration1, duration2);\n+    }\n+\n+    @Override\n+    public boolean checkPermanentLimit(final Side side, final float limitReduction) {\n+        Objects.requireNonNull(side);\n+        switch (side) {\n+            case ONE:\n+                return checkPermanentLimit1(limitReduction);\n+\n+            case TWO:\n+                return checkPermanentLimit2(limitReduction);\n+\n+            default:\n+                throw new AssertionError(\"Unexpected side value: \" + side);\n+        }\n+    }\n+\n+    @Override\n+    public boolean checkPermanentLimit(final Side side) {\n+        return checkPermanentLimit(side, 1f);\n+    }\n+\n+    @Override\n+    public boolean checkPermanentLimit1(final float limitReduction) {\n+        return LimitViolationUtils.checkPermanentLimit(this, Side.ONE, limitReduction, getTerminal1().getI());\n+    }\n+\n+    @Override\n+    public boolean checkPermanentLimit1() {\n+        return checkPermanentLimit1(1f);\n+    }\n+\n+    @Override\n+    public boolean checkPermanentLimit2(final float limitReduction) {\n+        return LimitViolationUtils.checkPermanentLimit(this, Side.TWO, limitReduction, getTerminal2().getI());\n+    }\n+\n+    @Override\n+    public boolean checkPermanentLimit2() {\n+        return checkPermanentLimit2(1f);\n+    }\n+\n+    @Override\n+    public Overload checkTemporaryLimits(final Side side, final float limitReduction) {\n+        Objects.requireNonNull(side);\n+        switch (side) {\n+            case ONE:\n+                return checkTemporaryLimits1(limitReduction);\n+\n+            case TWO:\n+                return checkTemporaryLimits2(limitReduction);\n+\n+            default:\n+                throw new AssertionError(\"Unexpected side value: \" + side);\n+        }\n+    }\n+\n+    @Override\n+    public Overload checkTemporaryLimits(final Side side) {\n+        return checkTemporaryLimits(side, 1f);\n+    }\n+\n+    @Override\n+    public Overload checkTemporaryLimits1(final float limitReduction) {\n+        return LimitViolationUtils.checkTemporaryLimits(this, Side.ONE, limitReduction, getTerminal1().getI());\n+    }\n+\n+    @Override\n+    public Overload checkTemporaryLimits1() {\n+        return checkTemporaryLimits1(1f);\n+    }\n+\n+    @Override\n+    public Overload checkTemporaryLimits2(final float limitReduction) {\n+        return LimitViolationUtils.checkTemporaryLimits(this, Side.TWO, limitReduction, getTerminal2().getI());\n+    }\n+\n+    @Override\n+    public Overload checkTemporaryLimits2() {\n+        return checkTemporaryLimits2(1f);\n+    }\n+\n+    @Override\n+    public List<? extends Terminal> getTerminals() {\n+        return Stream.concat(dl1.getTerminals().stream(),\n+                             dl2.getTerminals().stream())\n+                     .map(index::getTerminal)\n+                     .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return this.id;\n+    }\n+\n+    @Override\n+    public boolean hasProperty() {\n+        return dl1.hasProperty() || dl2.hasProperty();\n+    }\n+\n+    @Override\n+    public boolean hasProperty(final String key) {\n+        return dl1.hasProperty(key) || dl2.hasProperty(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b501e91755caa8e147690f35cd9697dce936d4f"}, "originalPosition": 344}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE0MjQ0Ng==", "bodyText": "search == null is more common?", "url": "https://github.com/powsybl/powsybl-core/pull/1130#discussion_r375142446", "createdAt": "2020-02-05T09:27:31Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergingView.java", "diffHunk": "@@ -289,12 +277,11 @@ public int getCountryCount() {\n \n     @Override\n     public Identifiable<?> getIdentifiable(final String id) {\n-        return index.getNetworkStream()\n-                .map(n -> n.getIdentifiable(id))\n-                .filter(Objects::nonNull)\n-                .map(index::getIdentifiable)\n-                .findFirst()\n-                .orElse(null);\n+        Identifiable<?> search = index.getMergedLine(id);\n+        if (Objects.isNull(search)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b501e91755caa8e147690f35cd9697dce936d4f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE0MzA2MA==", "bodyText": "I think you can use an Optional there. Something like this:\nreturn Optional.ofNullable(index.getMergedLine()).orElse(index.get(...));\n\nTell me if it's cleaner (more readable) or keep like this and ignore the next comments otherwise", "url": "https://github.com/powsybl/powsybl-core/pull/1130#discussion_r375143060", "createdAt": "2020-02-05T09:28:42Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergingView.java", "diffHunk": "@@ -289,12 +277,11 @@ public int getCountryCount() {\n \n     @Override\n     public Identifiable<?> getIdentifiable(final String id) {\n-        return index.getNetworkStream()\n-                .map(n -> n.getIdentifiable(id))\n-                .filter(Objects::nonNull)\n-                .map(index::getIdentifiable)\n-                .findFirst()\n-                .orElse(null);\n+        Identifiable<?> search = index.getMergedLine(id);\n+        if (Objects.isNull(search)) {\n+            search = index.get(n -> n.getIdentifiable(id), index::getIdentifiable);\n+        }\n+        return search;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b501e91755caa8e147690f35cd9697dce936d4f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE0MzIzNQ==", "bodyText": "Same remark here", "url": "https://github.com/powsybl/powsybl-core/pull/1130#discussion_r375143235", "createdAt": "2020-02-05T09:28:59Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergingView.java", "diffHunk": "@@ -657,23 +584,17 @@ public int getHvdcConverterStationCount() {\n \n     @Override\n     public HvdcConverterStation<?> getHvdcConverterStation(final String id) {\n-        return index.getNetworkStream()\n-                .map(n -> n.getHvdcConverterStation(id))\n-                .filter(Objects::nonNull)\n-                .map(index::getHvdcConverterStation)\n-                .findFirst()\n-                .orElse(null);\n+        return index.get(n -> n.getHvdcConverterStation(id), index::getHvdcConverterStation);\n     }\n \n     // Branches\n     @Override\n     public Branch getBranch(final String id) {\n-        return index.getNetworkStream()\n-                .map(n -> n.getBranch(id))\n-                .filter(Objects::nonNull)\n-                .map(index::getBranch)\n-                .findFirst()\n-                .orElse(null);\n+        Branch search = index.getMergedLine(id);\n+        if (Objects.isNull(search)) {\n+            search = index.get(n -> n.getBranch(id), index::getBranch);\n+        }\n+        return search;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b501e91755caa8e147690f35cd9697dce936d4f"}, "originalPosition": 256}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE0MzMxNQ==", "bodyText": "Same remark here", "url": "https://github.com/powsybl/powsybl-core/pull/1130#discussion_r375143315", "createdAt": "2020-02-05T09:29:09Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergingView.java", "diffHunk": "@@ -735,12 +656,11 @@ public int getLineCount() {\n \n     @Override\n     public Line getLine(final String id) {\n-        return index.getNetworkStream()\n-                .map(n -> n.getLine(id))\n-                .filter(Objects::nonNull)\n-                .map(index::getLine)\n-                .findFirst()\n-                .orElse(null);\n+        Line search = index.getMergedLine(id);\n+        if (Objects.isNull(search)) {\n+            search = index.get(n -> n.getLine(id), index::getLine);\n+        }\n+        return search;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b501e91755caa8e147690f35cd9697dce936d4f"}, "originalPosition": 296}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE0MzkzNQ==", "bodyText": "I'm not sure to understand the name of this method: is it a way to check if the danglingLine is merged or not?", "url": "https://github.com/powsybl/powsybl-core/pull/1130#discussion_r375143935", "createdAt": "2020-02-05T09:30:29Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergingView.java", "diffHunk": "@@ -761,12 +681,8 @@ public int getDanglingLineCount() {\n \n     @Override\n     public DanglingLine getDanglingLine(final String id) {\n-        return index.getNetworkStream()\n-                .map(n -> n.getDanglingLine(id))\n-                .filter(Objects::nonNull)\n-                .map(index::getDanglingLine)\n-                .findFirst()\n-                .orElse(null);\n+        final DanglingLine dl = index.get(n -> n.getDanglingLine(id), index::getDanglingLine);\n+        return index.asDanglingLine(dl) ? dl : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b501e91755caa8e147690f35cd9697dce936d4f"}, "originalPosition": 311}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE0NDczMQ==", "bodyText": "See above: maybe you should rename this method to isMerged()", "url": "https://github.com/powsybl/powsybl-core/pull/1130#discussion_r375144731", "createdAt": "2020-02-05T09:31:56Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergingViewIndex.java", "diffHunk": "@@ -243,17 +269,22 @@ Identifiable getIdentifiable(final Identifiable identifiable) {\n     }\n \n     Collection<Line> getLines() {\n-        // Search Line into merging & working networks\n-        return getNetworkStream()\n-                .flatMap(Network::getLineStream)\n-                .map(this::getLine)\n+        // Search Line into merging & working networks, and MergedLines\n+        return Stream.concat(getNetworkStream().flatMap(Network::getLineStream)\n+                        .map(this::getLine),\n+                mergedLineCached.values().stream())\n                 .collect(Collectors.toList());\n     }\n \n+    boolean asDanglingLine(final DanglingLine dl) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b501e91755caa8e147690f35cd9697dce936d4f"}, "originalPosition": 96}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb4c5d50067a470e85db0ded8e9b9f493e1ff431", "author": {"user": {"login": "tadam50", "name": "Thomas ADAM"}}, "url": "https://github.com/powsybl/powsybl-core/commit/bb4c5d50067a470e85db0ded8e9b9f493e1ff431", "committedDate": "2020-02-05T13:58:17Z", "message": "Revert BranchAdder changes on setNode methods\n\nSigned-off-by: Thomas ADAM <tadam@silicom.fr>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f02cd16d536610eb30ffccd27964dac1d33ab218", "author": {"user": {"login": "tadam50", "name": "Thomas ADAM"}}, "url": "https://github.com/powsybl/powsybl-core/commit/f02cd16d536610eb30ffccd27964dac1d33ab218", "committedDate": "2020-02-13T13:57:45Z", "message": "Taking into account MR reviews\n\nSigned-off-by: Thomas ADAM <tadam@silicom.fr>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4Nzg5Mjg5", "url": "https://github.com/powsybl/powsybl-core/pull/1130#pullrequestreview-358789289", "createdAt": "2020-02-14T08:53:41Z", "commit": {"oid": "f02cd16d536610eb30ffccd27964dac1d33ab218"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "276e54de892482cfda674b6e11ed783957fc21aa", "author": {"user": {"login": "mathbagu", "name": "Mathieu BAGUE"}}, "url": "https://github.com/powsybl/powsybl-core/commit/276e54de892482cfda674b6e11ed783957fc21aa", "committedDate": "2020-02-14T08:53:54Z", "message": "Merge branch 'master' into iidm_merging_view_part_15_merged_line_v2"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4364, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}