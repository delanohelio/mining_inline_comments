{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0OTU1Mzc2", "number": 1382, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTo1MTozNFrOEL0pWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDowMDowMVrOEL0yVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODMyMzQ2OnYy", "diffSide": "RIGHT", "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTo1MTozNFrOGtlAeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTo1MTozNFrOGtlAeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ0NTQzMw==", "bodyText": "There is already an equivalent feature in IIDM, would it be equivalent in your case?\n        Line line = network.newLine()\n                .setId(id)\n                .setEnsureIdUnicity(true)\n               ...", "url": "https://github.com/powsybl/powsybl-core/pull/1382#discussion_r450445433", "createdAt": "2020-07-06T19:51:34Z", "author": {"login": "geofjamg"}, "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -256,17 +355,32 @@ private static void createBuses(PsseRawModel psseModel, ContainersMapping contai\n             // create bus\n             createBus(psseBus, voltageLevel);\n \n+            busNumToPsseBus.put(psseBus.getI(), psseBus);\n+\n+        }\n+    }\n+\n+    private static String  getUniqueId(String id, Predicate<String> predicate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fe2579a0db3a0f8f050e53595dfbe8ae7412aa7"}, "originalPosition": 219}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODMyNzA2OnYy", "diffSide": "RIGHT", "path": "ieee-cdf/ieee-cdf-converter/src/main/java/com/powsybl/ieeecdf/converter/IeeeCdfImporter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTo1Mjo0OFrOGtlCqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTo1Mjo0OFrOGtlCqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ0NTk5NA==", "bodyText": "branch -> 0", "url": "https://github.com/powsybl/powsybl-core/pull/1382#discussion_r450445994", "createdAt": "2020-07-06T19:52:48Z", "author": {"login": "geofjamg"}, "path": "ieee-cdf/ieee-cdf-converter/src/main/java/com/powsybl/ieeecdf/converter/IeeeCdfImporter.java", "diffHunk": "@@ -468,7 +468,7 @@ public Network importData(ReadOnlyDataSource dataSource, NetworkFactory networkF\n \n             // build container to fit IIDM requirements\n             ContainersMapping containerMapping = ContainersMapping.create(ieeeCdfModel.getBuses(), ieeeCdfModel.getBranches(),\n-                IeeeCdfBus::getNumber, IeeeCdfBranch::getTapBusNumber, IeeeCdfBranch::getzBusNumber, IeeeCdfBranch::getResistance,\n+                IeeeCdfBus::getNumber, IeeeCdfBranch::getTapBusNumber, IeeeCdfBranch::getzBusNumber, IeeeCdfBranch -> 0,  IeeeCdfBranch::getResistance,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fe2579a0db3a0f8f050e53595dfbe8ae7412aa7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODMyODA1OnYy", "diffSide": "RIGHT", "path": "matpower/matpower-converter/src/main/java/com/powsybl/matpower/converter/MatpowerImporter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTo1MzowOVrOGtlDRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTo1MzowOVrOGtlDRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ0NjE0OQ==", "bodyText": "branch -> 0", "url": "https://github.com/powsybl/powsybl-core/pull/1382#discussion_r450446149", "createdAt": "2020-07-06T19:53:09Z", "author": {"login": "geofjamg"}, "path": "matpower/matpower-converter/src/main/java/com/powsybl/matpower/converter/MatpowerImporter.java", "diffHunk": "@@ -340,7 +340,7 @@ public Network importData(ReadOnlyDataSource dataSource, NetworkFactory networkF\n                 LOGGER.debug(\"MATPOWER model {}\", model.getCaseName());\n \n                 ContainersMapping containerMapping = ContainersMapping.create(model.getBuses(), model.getBranches(),\n-                    MBus::getNumber, MBranch::getFrom, MBranch::getTo, MBranch::getR, MBranch::getX, MatpowerImporter::isTransformer,\n+                    MBus::getNumber, MBranch::getFrom, MBranch::getTo, MBranch -> 0, MBranch::getR, MBranch::getX,  MatpowerImporter::isTransformer,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fe2579a0db3a0f8f050e53595dfbe8ae7412aa7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODMzNDI4OnYy", "diffSide": "RIGHT", "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTo1NToyOVrOGtlHSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTo1NToyOVrOGtlHSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ0NzE3OQ==", "bodyText": "HashMap -> Map", "url": "https://github.com/powsybl/powsybl-core/pull/1382#discussion_r450447179", "createdAt": "2020-07-06T19:55:29Z", "author": {"login": "geofjamg"}, "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -182,30 +211,87 @@ private static void createLoad(PsseLoad psseLoad, ContainersMapping containerMap\n \n     }\n \n-    private static void createShuntCompensator(PsseFixedShunt psseShunt, PerUnitContext perUnitContext, ContainersMapping containerMapping, Network network) {\n-        String busId = getBusId(psseShunt.getI());\n-        VoltageLevel voltageLevel = network.getVoltageLevel(containerMapping.getVoltageLevelId(psseShunt.getI()));\n-        ShuntCompensatorAdder adder = voltageLevel.newShuntCompensator()\n-                .setId(busId + \"-SH\" + psseShunt.getId())\n-                .setConnectableBus(busId)\n-                .setBus(busId)\n-                .setSectionCount(1);\n-        adder.newLinearModel()\n-                .setBPerSection(psseShunt.getBl())//TODO: take into account gl\n-                .setMaximumSectionCount(1)\n-                .add();\n-        ShuntCompensator shunt = adder.add();\n+    private static void createShuntCompensator(PsseFixedShunt psseShunt, ContainersMapping containerMapping, Network network) {\n+        if (psseShunt.getBl() != 0) {\n+            String busId = getBusId(psseShunt.getI());\n+            VoltageLevel voltageLevel = network.getVoltageLevel(containerMapping.getVoltageLevelId(psseShunt.getI()));\n+            ShuntCompensatorAdder adder = voltageLevel.newShuntCompensator()\n+                    .setId(busId + \"-SH\" + psseShunt.getId())\n+                    .setConnectableBus(busId)\n+                    .setBus(busId)\n+                    .setSectionCount(1);\n+            adder.newLinearModel()\n+                    .setBPerSection(psseShunt.getBl())//TODO: take into account gl\n+                    .setMaximumSectionCount(1)\n+                    .add();\n+            ShuntCompensator shunt = adder.add();\n+\n+            if (psseShunt.getStatus() == 1) {\n+                shunt.getTerminal().connect();\n+            }\n+\n+            if (psseShunt.getGl() != 0) {\n+                LOGGER.warn(\"Shunt Gl not supported ({})\", psseShunt.getI());\n+            }\n+        } else {\n+            LOGGER.warn(\"Shunt ({}) has Bl = 0, not imported \", psseShunt.getI()); //TODO : allow import of shunts with Bl= 0 in iidm?\n+        }\n+    }\n+\n+    private void createSwitchedShuntBlocMap(PsseRawModel psseModel, HashMap<PsseSwitchedShunt, ShuntBlockTab > stoBlockiTab) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fe2579a0db3a0f8f050e53595dfbe8ae7412aa7"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODM0MTA0OnYy", "diffSide": "RIGHT", "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTo1Nzo1NVrOGtlLmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTo1Nzo1NVrOGtlLmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ0ODI4Mg==", "bodyText": "Is there any reason to explicitly create a variable for adders?\nYou could write:\n                ShuntCompensator shunt = voltageLevel.newShuntCompensator()\n                        .setId(busId + \"-SwSH-B\" + i)\n                        .setConnectableBus(busId)\n                        .setSectionCount(1);\n                        .newLinearModel() //TODO: use Binit and sbl.getNi(i) to initiate Bi, for now we use Binit to obtain de same load-flow results\n                            .setBPerSection(psseSwShunt.getBinit())//TODO: take into account BINIT to define the number of switched steps in the case BINIT is different from the max switched steps\n                            .setMaximumSectionCount(1)\n                        .add()\n                .add();", "url": "https://github.com/powsybl/powsybl-core/pull/1382#discussion_r450448282", "createdAt": "2020-07-06T19:57:55Z", "author": {"login": "geofjamg"}, "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -182,30 +211,87 @@ private static void createLoad(PsseLoad psseLoad, ContainersMapping containerMap\n \n     }\n \n-    private static void createShuntCompensator(PsseFixedShunt psseShunt, PerUnitContext perUnitContext, ContainersMapping containerMapping, Network network) {\n-        String busId = getBusId(psseShunt.getI());\n-        VoltageLevel voltageLevel = network.getVoltageLevel(containerMapping.getVoltageLevelId(psseShunt.getI()));\n-        ShuntCompensatorAdder adder = voltageLevel.newShuntCompensator()\n-                .setId(busId + \"-SH\" + psseShunt.getId())\n-                .setConnectableBus(busId)\n-                .setBus(busId)\n-                .setSectionCount(1);\n-        adder.newLinearModel()\n-                .setBPerSection(psseShunt.getBl())//TODO: take into account gl\n-                .setMaximumSectionCount(1)\n-                .add();\n-        ShuntCompensator shunt = adder.add();\n+    private static void createShuntCompensator(PsseFixedShunt psseShunt, ContainersMapping containerMapping, Network network) {\n+        if (psseShunt.getBl() != 0) {\n+            String busId = getBusId(psseShunt.getI());\n+            VoltageLevel voltageLevel = network.getVoltageLevel(containerMapping.getVoltageLevelId(psseShunt.getI()));\n+            ShuntCompensatorAdder adder = voltageLevel.newShuntCompensator()\n+                    .setId(busId + \"-SH\" + psseShunt.getId())\n+                    .setConnectableBus(busId)\n+                    .setBus(busId)\n+                    .setSectionCount(1);\n+            adder.newLinearModel()\n+                    .setBPerSection(psseShunt.getBl())//TODO: take into account gl\n+                    .setMaximumSectionCount(1)\n+                    .add();\n+            ShuntCompensator shunt = adder.add();\n+\n+            if (psseShunt.getStatus() == 1) {\n+                shunt.getTerminal().connect();\n+            }\n+\n+            if (psseShunt.getGl() != 0) {\n+                LOGGER.warn(\"Shunt Gl not supported ({})\", psseShunt.getI());\n+            }\n+        } else {\n+            LOGGER.warn(\"Shunt ({}) has Bl = 0, not imported \", psseShunt.getI()); //TODO : allow import of shunts with Bl= 0 in iidm?\n+        }\n+    }\n+\n+    private void createSwitchedShuntBlocMap(PsseRawModel psseModel, HashMap<PsseSwitchedShunt, ShuntBlockTab > stoBlockiTab) {\n+\n+        /* Creates a map between the PSSE switched shunt and the blocks info of this shunt\n+        A switched shunt may contain up to 8 blocks and each block may contain up to 9 steps of the same value (in MVAR)\n+        A block may be capacitive or inductive */\n+        for (PsseSwitchedShunt psseSwShunt : psseModel.getSwitchedShunts()) {\n+\n+            ShuntBlockTab sbt = new ShuntBlockTab();\n+\n+            int[] ni = {\n+                    psseSwShunt.getN1(), psseSwShunt.getN2(), psseSwShunt.getN3(), psseSwShunt.getN4(),\n+                    psseSwShunt.getN5(), psseSwShunt.getN6(), psseSwShunt.getN7(), psseSwShunt.getN8()\n+            };\n+\n+            double[] bi = {\n+                    psseSwShunt.getB1(), psseSwShunt.getB2(), psseSwShunt.getB3(), psseSwShunt.getB4(),\n+                    psseSwShunt.getB5(), psseSwShunt.getB6(), psseSwShunt.getB7(), psseSwShunt.getB8()\n+            };\n+\n+            int i = 0;\n+            while (i <= 7 && ni[i] > 0) {\n+                sbt.add(i + 1, ni[i], bi[i]);\n+                i++;\n+            }\n \n-        if (psseShunt.getStatus() == 1) {\n-            shunt.getTerminal().connect();\n+            stoBlockiTab.put(psseSwShunt, sbt);\n         }\n+    }\n \n-        if (psseShunt.getGl() != 0) {\n-            LOGGER.warn(\"Shunt Gl not supported ({})\", psseShunt.getI());\n+    private static void createSwitchedShunt(PsseSwitchedShunt psseSwShunt, PerUnitContext perUnitContext, ContainersMapping containerMapping, Network network, HashMap<PsseSwitchedShunt, ShuntBlockTab >  stoBlockiTab) {\n+        String busId = getBusId(psseSwShunt.getI());\n+        VoltageLevel voltageLevel = network.getVoltageLevel(containerMapping.getVoltageLevelId(psseSwShunt.getI()));\n+        ShuntBlockTab sbl = stoBlockiTab.get(psseSwShunt);\n+\n+        for (int i = 1; i <= sbl.getSize(); i++) {\n+            if (psseSwShunt.getBinit() != 0) { //TODO : improve it to make it robust to all configurations\n+                ShuntCompensatorAdder adder = voltageLevel.newShuntCompensator()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fe2579a0db3a0f8f050e53595dfbe8ae7412aa7"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODM0MjgzOnYy", "diffSide": "RIGHT", "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTo1ODozN1rOGtlMqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTo1ODozN1rOGtlMqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ0ODU1NQ==", "bodyText": "Here also you could use IIDM unicity feature?", "url": "https://github.com/powsybl/powsybl-core/pull/1382#discussion_r450448555", "createdAt": "2020-07-06T19:58:37Z", "author": {"login": "geofjamg"}, "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -291,38 +405,243 @@ private static void createLine(PsseNonTransformerBranch psseLine, ContainersMapp\n         }\n     }\n \n-    private static void createTransformer(PsseTransformer psseTfo, ContainersMapping containerMapping, PerUnitContext perUnitContext, Network network) {\n-        String id = \"T-\" + psseTfo.getFirstRecord().getI() + \"-\" + psseTfo.getFirstRecord().getJ() + \"-\" + psseTfo.getFirstRecord().getCkt();\n+    private static void createTransformer(PsseTransformer psseTfo, ContainersMapping containerMapping, PerUnitContext perUnitContext, Network network, Map<Integer, PsseBus> busNumToPsseBus, double sbase) {\n+\n+        String id = \"T-\" + psseTfo.getFirstRecord().getI() + \"-\" + psseTfo.getFirstRecord().getJ();\n+        if (psseTfo.getFirstRecord().getK() == 0) {\n+            id = id + \"-\" + psseTfo.getFirstRecord().getCkt();\n+            id = getUniqueId(id, s -> network.getTwoWindingsTransformer(s) != null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fe2579a0db3a0f8f050e53595dfbe8ae7412aa7"}, "originalPosition": 269}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODM0NjQ2OnYy", "diffSide": "RIGHT", "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDowMDowMVrOGtlPBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDowMDowMVrOGtlPBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ0OTE1OQ==", "bodyText": "Same remark than with shunts, it could be written without adder vars in a fluent way.", "url": "https://github.com/powsybl/powsybl-core/pull/1382#discussion_r450449159", "createdAt": "2020-07-06T20:00:01Z", "author": {"login": "geofjamg"}, "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -291,38 +405,243 @@ private static void createLine(PsseNonTransformerBranch psseLine, ContainersMapp\n         }\n     }\n \n-    private static void createTransformer(PsseTransformer psseTfo, ContainersMapping containerMapping, PerUnitContext perUnitContext, Network network) {\n-        String id = \"T-\" + psseTfo.getFirstRecord().getI() + \"-\" + psseTfo.getFirstRecord().getJ() + \"-\" + psseTfo.getFirstRecord().getCkt();\n+    private static void createTransformer(PsseTransformer psseTfo, ContainersMapping containerMapping, PerUnitContext perUnitContext, Network network, Map<Integer, PsseBus> busNumToPsseBus, double sbase) {\n+\n+        String id = \"T-\" + psseTfo.getFirstRecord().getI() + \"-\" + psseTfo.getFirstRecord().getJ();\n+        if (psseTfo.getFirstRecord().getK() == 0) {\n+            id = id + \"-\" + psseTfo.getFirstRecord().getCkt();\n+            id = getUniqueId(id, s -> network.getTwoWindingsTransformer(s) != null);\n+        } else {\n+            id = id + \"-\" + psseTfo.getFirstRecord().getK() + \"-\" + psseTfo.getFirstRecord().getCkt();\n+            id = getUniqueId(id, s -> network.getThreeWindingsTransformer(s) != null);\n+        }\n+\n         String bus1Id = getBusId(psseTfo.getFirstRecord().getI());\n         String bus2Id = getBusId(psseTfo.getFirstRecord().getJ());\n         String voltageLevel1Id = containerMapping.getVoltageLevelId(psseTfo.getFirstRecord().getI());\n         String voltageLevel2Id = containerMapping.getVoltageLevelId(psseTfo.getFirstRecord().getJ());\n         VoltageLevel voltageLevel1 = network.getVoltageLevel(voltageLevel1Id);\n         VoltageLevel voltageLevel2 = network.getVoltageLevel(voltageLevel2Id);\n-        double zb = Math.pow(voltageLevel2.getNominalV(), 2) / perUnitContext.getSb();\n+        double baskv1 = busNumToPsseBus.get(psseTfo.getFirstRecord().getI()).getBaskv();\n+        double baskv2 = busNumToPsseBus.get(psseTfo.getFirstRecord().getJ()).getBaskv();\n+        double zb2 = Math.pow(voltageLevel2.getNominalV(), 2) / perUnitContext.getSb();\n+        double sbase12 = psseTfo.getSecondRecord().getSbase12();\n+        double nomV1 = psseTfo.getThirdRecord1().getNomv();\n+\n+        //handling impedance and admittance\n+        // CZ = 1 the triangle values are already in right pu\n+        double r12 = psseTfo.getSecondRecord().getR12();\n+        double x12 = psseTfo.getSecondRecord().getX12();\n+\n+        if (psseTfo.getFirstRecord().getCz() == 2) {\n+            //CZ = 2 change to right Sbase pu\n+            r12 = r12 * sbase / sbase12;\n+            x12 = x12 * sbase / sbase12;\n+        } else if (psseTfo.getFirstRecord().getCz() == 3) {\n+            //CZ = 3 convert load loss power and current into pu impedances\n+            r12 = r12 * sbase / (sbase12 * sbase12 * 1000000);\n+            double absZ12 = x12 * sbase / sbase12;\n+            x12 = Math.sqrt(absZ12 * absZ12 - r12 * r12);\n+        }\n+\n+        // Handling terminal ratios\n+        //default value when Cw = 1\n+        double w1 = psseTfo.getThirdRecord1().getWindv();\n+        double w2 = psseTfo.getThirdRecord2().getWindv();\n+        if (psseTfo.getFirstRecord().getCw() == 2) {\n+            // case where Cw = 2\n+            w1 = w1 / baskv1;\n+            w2 = w2 / baskv2;\n+        }\n+\n+        // Handling magnetizing admittance Gm and Bm\n+        // Case where Cm = 1\n+        double mag1 = psseTfo.getFirstRecord().getMag1(); // admittance value when Cm = 1\n+        double mag2 = psseTfo.getFirstRecord().getMag2(); // admittance value when Cm = 1\n+        double bmPu = mag2; //bmPu and gmPu represent the values of the magnetizing admittance at the i end in pu at 1/Zb1 base where Zb1 = Vb1*Vb1/Sb1\n+        double gmPu = mag1; //Vb1 is the bus i voltage base  (BASKV) and Sb1 is the system MVA base which is SBASE\n+        double ymPu = 0;\n+        if (psseTfo.getFirstRecord().getCm() == 2) {\n+            // modification of value if Cm = 2\n+            gmPu = mag1 / (nomV1 * nomV1 * 1000000) * (baskv1 * baskv1 / sbase); // we need to convert mag1 and mag2 from a (NOMV1, Sbase12) to a (baskv1, Sbase) base so that it is expressed in pu admittance at i end.\n+            ymPu = mag2 / (nomV1 * nomV1) * sbase12 * (baskv1 * baskv1 / sbase);\n+            double bm2 = ymPu * ymPu - gmPu * gmPu;\n+            if (bm2 >= 0) {\n+                bmPu = -Math.sqrt(bm2);\n+            } else {\n+                bmPu = 0;\n+                LOGGER.warn(\"Magnetizing susceptance of Transformer ({}) set to 0 because admittance module is ({}) and conductance is ({})  \", id, ymPu, gmPu);\n+            }\n+        }\n \n         if (psseTfo.getFirstRecord().getK() == 0) {\n+            // Case of a 2 windings Transformer\n             TwoWindingsTransformer tfo2W = voltageLevel2.getSubstation().newTwoWindingsTransformer()\n                     .setId(id)\n                     .setConnectableBus1(bus1Id)\n                     .setVoltageLevel1(voltageLevel1Id)\n                     .setConnectableBus2(bus2Id)\n                     .setVoltageLevel2(voltageLevel2Id)\n-                    .setRatedU1(voltageLevel1.getNominalV() * psseTfo.getThirdRecord1().getWindv())\n-                    .setRatedU2(voltageLevel2.getNominalV())\n-                    .setR(psseTfo.getSecondRecord().getR12() * zb)\n-                    .setX(psseTfo.getSecondRecord().getX12() * zb)\n-                    .setG(0) //TODO\n-                    .setB(0) //TODO\n+                    .setRatedU1(voltageLevel1.getNominalV() * w1)\n+                    .setRatedU2(voltageLevel2.getNominalV() * w2)\n+                    .setR(r12 * zb2 * w2 * w2) // R12 and X12 shifted on the other side of the 2 wire (PSSE model to iidm model)\n+                    .setX(x12 * zb2 * w2 * w2)\n+                    .setG(gmPu / (zb2 * (w2 / w1) * (w2 / w1))) // magnetizing susceptance and conductance shifted from left of the first wire (PSSE model) to the right of the second wire (iidm model)\n+                    .setB(bmPu / (zb2 * (w2 / w1) * (w2 / w1)))\n                     .add();\n \n+            //Phase Shift Transformer\n+            if (psseTfo.getThirdRecord1().getAng() != 0) {\n+                PhaseTapChangerAdder phaseTapChangerAdder = tfo2W.newPhaseTapChanger()\n+                        .setRegulationMode(PhaseTapChanger.RegulationMode.FIXED_TAP)\n+                        .setRegulating(false)\n+                        .setTapPosition(0);\n+                List<Double> alphas = new ArrayList<>();\n+                alphas.add(-psseTfo.getThirdRecord1().getAng());  //TODO : check angle and angle units (supposed in degrees)\n+                // TODO create full table\n+                for (double alpha : alphas) {\n+                    phaseTapChangerAdder.beginStep()\n+                            .setAlpha(alpha)\n+                            .setRho(1)\n+                            .setR(0)\n+                            .setX(0)\n+                            .setG(0)\n+                            .setB(0)\n+                            .endStep();\n+                }\n+                phaseTapChangerAdder.add();\n+            }\n+\n+            //TODO support phase shift on all ends of the Tfo\n+            if (psseTfo.getThirdRecord2().getAng() != 0) {\n+                LOGGER.warn(\"Phase shift of Transformer ({}) located on end 2 not yet supported  \", id);\n+            }\n+            if (psseTfo.getFirstRecord().getK() != 0 && psseTfo.getThirdRecord3().getAng() != 0) {\n+                LOGGER.warn(\"Phase shift of Transformer ({}) located on end 3 not yet supported  \", id);\n+            }\n+\n             if (psseTfo.getFirstRecord().getStat() == 1) {\n                 tfo2W.getTerminal1().connect();\n                 tfo2W.getTerminal2().connect();\n             }\n \n         } else {\n-            LOGGER.warn(\"Non-2-windings transformers not supported ({})\", id);\n+            // case of a three windings transformer\n+            String bus3Id = getBusId(psseTfo.getFirstRecord().getK());\n+            String voltageLevel3Id = containerMapping.getVoltageLevelId(psseTfo.getFirstRecord().getK());\n+            VoltageLevel voltageLevel3 = network.getVoltageLevel(voltageLevel3Id);\n+            double baskv3 = busNumToPsseBus.get(psseTfo.getFirstRecord().getK()).getBaskv();\n+\n+            // Cw = 1\n+            double w3 = psseTfo.getThirdRecord3().getWindv();\n+            if (psseTfo.getFirstRecord().getCw() == 2) {\n+                // Cw = 2 : conversion of kV into ratio\n+                w3 = w3 / baskv3;\n+            }\n+\n+            double sbase31 = psseTfo.getSecondRecord().getSbase31();\n+            double sbase23 = psseTfo.getSecondRecord().getSbase23();\n+\n+            //Get the triangle impedances (rij,xij) values in all Cz configurations\n+            // CZ = 1 the triangle values are already in right pu\n+            double r23 = psseTfo.getSecondRecord().getR23();\n+            double x23 = psseTfo.getSecondRecord().getX23();\n+            double r31 = psseTfo.getSecondRecord().getR31();\n+            double x31 = psseTfo.getSecondRecord().getX31();\n+            if (psseTfo.getFirstRecord().getCz() == 2) {\n+                //CZ = 2 change to right Sbase pu\n+                r12 = r12 * sbase / sbase12;\n+                x12 = x12 * sbase / sbase12;\n+                r23 = r23 * sbase / sbase23;\n+                x23 = x23 * sbase / sbase23;\n+                r31 = r31 * sbase / sbase31;\n+                x31 = x31 * sbase / sbase31;\n+            } else if (psseTfo.getFirstRecord().getCz() == 3) {\n+                //CZ = 3 convert load loss power and current into pu impedances\n+                r23 = r23 * sbase / (sbase23 * sbase23 * 1000000);\n+                r31 = r31 * sbase / (sbase23 * sbase23 * 1000000);\n+\n+                double absZ23 = x23 * sbase / sbase23;\n+                if (absZ23 * absZ23 - r23 * r23 <= 0) {\n+                    x23 = 0;\n+                    LOGGER.warn(\"inductance x23 of Transformer ({}) set to 0 because impedance module is ({}) and resistance is ({})  \", id, absZ23, r23);\n+                } else {\n+                    x23 = Math.sqrt(absZ23 * absZ23 - r23 * r23);\n+                }\n+\n+                double absZ31 = x31 * sbase / sbase31;\n+                if (absZ23 * absZ23 - r23 * r23 <= 0) {\n+                    x31 = 0;\n+                    LOGGER.warn(\"inductance x31 of Transformer ({}) set to 0 because impedance module is ({}) and resistance is ({})  \", id, absZ31, r31);\n+                } else {\n+                    x31 = Math.sqrt(absZ31 * absZ31 - r31 * r31);\n+                }\n+            }\n+\n+            //transform triangle (rij,xij) impedances into star (ri,xj) impedances\n+            double sumR = r12 + r23 + r31;\n+            double sumX = x12 + x23 + x31;\n+            double squareMod = sumR * sumR + sumX * sumX;\n+\n+            double r1 = ((r31 * r12 - x31 * x12) * sumR + (r31 * x12 + r12 * x31) * sumX) / squareMod;\n+            double x1 = ((r31 * x12 + r12 * x31) * sumR - (r31 * r12 - x31 * x12) * sumX) / squareMod;\n+\n+            double r2 = ((r12 * r23 - x12 * x23) * sumR + (r12 * x23 + r23 * x12) * sumX) / squareMod;\n+            double x2 = ((r12 * x23 + r23 * x12) * sumR - (r12 * r23 - x12 * x23) * sumX) / squareMod;\n+\n+            double r3 = ((r23 * r31 - x23 * x31) * sumR + (r23 * x31 + r31 * x23) * sumX) / squareMod;\n+            double x3 = ((r23 * x31 + r31 * x23) * sumR - (r23 * r31 - x23 * x31) * sumX) / squareMod;\n+\n+            //set a voltage base at star node with the associated Zbase\n+            double v0 = 1.0;\n+            double zbV0 = v0 * v0 / perUnitContext.getSb();\n+\n+            ThreeWindingsTransformerAdder tfoAdder = voltageLevel1.getSubstation().newThreeWindingsTransformer()\n+                    .setRatedU0(v0)\n+                    .setId(id);\n+\n+            ThreeWindingsTransformerAdder.LegAdder l1adder = tfoAdder.newLeg1();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fe2579a0db3a0f8f050e53595dfbe8ae7412aa7"}, "originalPosition": 467}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4968, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}