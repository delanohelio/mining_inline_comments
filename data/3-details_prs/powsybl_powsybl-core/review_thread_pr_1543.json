{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3ODQ1MDc1", "number": 1543, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQyMTozMzowNFrOE-cP4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMToxMjozOVrOFCRAbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTA5OTg1OnYy", "diffSide": "RIGHT", "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQyMTozMzowNFrOH7nQdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjoxMTowMlrOH-kf8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI3MTIyMQ==", "bodyText": "This is too much parameters, add a TimeSeries.CsvParserConfig with default values.", "url": "https://github.com/powsybl/powsybl-core/pull/1543#discussion_r532271221", "createdAt": "2020-11-29T21:33:04Z", "author": {"login": "geofjamg"}, "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeries.java", "diffHunk": "@@ -125,20 +131,32 @@ static StringTimeSeries createString(String name, TimeSeriesIndex index, String.\n     }\n \n     static Map<Integer, List<TimeSeries>> parseCsv(Path file) {\n-        return parseCsv(file, TimeSeriesConstants.DEFAULT_SEPARATOR);\n+        return parseCsv(file, TimeSeriesConstants.DEFAULT_SEPARATOR, true, TimeFormat.DATE_TIME);\n+    }\n+\n+    static Map<Integer, List<TimeSeries>> parseCsv(Path file, boolean versioned, TimeFormat timeFormat) {\n+        return parseCsv(file, TimeSeriesConstants.DEFAULT_SEPARATOR, versioned, timeFormat);\n     }\n \n     static Map<Integer, List<TimeSeries>> parseCsv(String csv, char separator) {\n         try (BufferedReader reader = new BufferedReader(new StringReader(csv))) {\n-            return parseCsv(reader, separator);\n+            return parseCsv(reader, separator, true, TimeFormat.DATE_TIME);\n         } catch (IOException e) {\n             throw new UncheckedIOException(e);\n         }\n     }\n \n-    static Map<Integer, List<TimeSeries>> parseCsv(Path file, char separator) {\n+    static Map<Integer, List<TimeSeries>> parseCsv(String csv, char separator, boolean versioned, TimeFormat timeFormat) {\n+        try (BufferedReader reader = new BufferedReader(new StringReader(csv))) {\n+            return parseCsv(reader, separator, versioned, timeFormat);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    static Map<Integer, List<TimeSeries>> parseCsv(Path file, char separator, boolean versioned, TimeFormat timeFormat) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "304b66eaa37a15d19bbb8e398b467145c7a8a44e"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3MTc2MA==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1543#discussion_r535371760", "createdAt": "2020-12-03T16:11:02Z", "author": {"login": "marcosmc"}, "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeries.java", "diffHunk": "@@ -125,20 +131,32 @@ static StringTimeSeries createString(String name, TimeSeriesIndex index, String.\n     }\n \n     static Map<Integer, List<TimeSeries>> parseCsv(Path file) {\n-        return parseCsv(file, TimeSeriesConstants.DEFAULT_SEPARATOR);\n+        return parseCsv(file, TimeSeriesConstants.DEFAULT_SEPARATOR, true, TimeFormat.DATE_TIME);\n+    }\n+\n+    static Map<Integer, List<TimeSeries>> parseCsv(Path file, boolean versioned, TimeFormat timeFormat) {\n+        return parseCsv(file, TimeSeriesConstants.DEFAULT_SEPARATOR, versioned, timeFormat);\n     }\n \n     static Map<Integer, List<TimeSeries>> parseCsv(String csv, char separator) {\n         try (BufferedReader reader = new BufferedReader(new StringReader(csv))) {\n-            return parseCsv(reader, separator);\n+            return parseCsv(reader, separator, true, TimeFormat.DATE_TIME);\n         } catch (IOException e) {\n             throw new UncheckedIOException(e);\n         }\n     }\n \n-    static Map<Integer, List<TimeSeries>> parseCsv(Path file, char separator) {\n+    static Map<Integer, List<TimeSeries>> parseCsv(String csv, char separator, boolean versioned, TimeFormat timeFormat) {\n+        try (BufferedReader reader = new BufferedReader(new StringReader(csv))) {\n+            return parseCsv(reader, separator, versioned, timeFormat);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    static Map<Integer, List<TimeSeries>> parseCsv(Path file, char separator, boolean versioned, TimeFormat timeFormat) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI3MTIyMQ=="}, "originalCommit": {"oid": "304b66eaa37a15d19bbb8e398b467145c7a8a44e"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTEwMjM0OnYy", "diffSide": "RIGHT", "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQyMTozMzo0NVrOH7nSHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjoxMTowOVrOH-kgUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI3MTY0Ng==", "bodyText": "static final is useless", "url": "https://github.com/powsybl/powsybl-core/pull/1543#discussion_r532271646", "createdAt": "2020-11-29T21:33:45Z", "author": {"login": "geofjamg"}, "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeries.java", "diffHunk": "@@ -472,4 +541,6 @@ static void parseChunks(JsonParser parser, TimeSeriesMetadata metadata, List<Tim\n     static List<TimeSeries> parseJson(Path file) {\n         return JsonUtil.parseJson(file, TimeSeries::parseJson);\n     }\n+\n+    static final Logger LOG = LoggerFactory.getLogger(TimeSeries.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "304b66eaa37a15d19bbb8e398b467145c7a8a44e"}, "originalPosition": 338}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3MTg1OQ==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1543#discussion_r535371859", "createdAt": "2020-12-03T16:11:09Z", "author": {"login": "marcosmc"}, "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeries.java", "diffHunk": "@@ -472,4 +541,6 @@ static void parseChunks(JsonParser parser, TimeSeriesMetadata metadata, List<Tim\n     static List<TimeSeries> parseJson(Path file) {\n         return JsonUtil.parseJson(file, TimeSeries::parseJson);\n     }\n+\n+    static final Logger LOG = LoggerFactory.getLogger(TimeSeries.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI3MTY0Ng=="}, "originalCommit": {"oid": "304b66eaa37a15d19bbb8e398b467145c7a8a44e"}, "originalPosition": 338}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTE0NTkwOnYy", "diffSide": "RIGHT", "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDo1OTo0NFrOIBTw-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNToyNTowOFrOIGREBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI0MzMyMg==", "bodyText": "Should be static?", "url": "https://github.com/powsybl/powsybl-core/pull/1543#discussion_r538243322", "createdAt": "2020-12-08T10:59:44Z", "author": {"login": "mathbagu"}, "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeries.java", "diffHunk": "@@ -152,18 +169,48 @@ static String checkString(String token) {\n         return token.isEmpty() ? null : token;\n     }\n \n+    class CsvParserConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b0e336e5ea619a1e163e7d38782f78e0c6ee52a"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ0MTkyNw==", "bodyText": "To avoid duplicate classes, an individual class is generated to group it with the CsvConfig class of TimeSeriesTable.", "url": "https://github.com/powsybl/powsybl-core/pull/1543#discussion_r543441927", "createdAt": "2020-12-15T15:25:08Z", "author": {"login": "marcosmc"}, "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeries.java", "diffHunk": "@@ -152,18 +169,48 @@ static String checkString(String token) {\n         return token.isEmpty() ? null : token;\n     }\n \n+    class CsvParserConfig {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI0MzMyMg=="}, "originalCommit": {"oid": "4b0e336e5ea619a1e163e7d38782f78e0c6ee52a"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTE0NjY3OnYy", "diffSide": "RIGHT", "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDo1OTo1NlrOIBTxdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNToyNTozMFrOIGRFTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI0MzQ0NA==", "bodyText": "Should be private and final", "url": "https://github.com/powsybl/powsybl-core/pull/1543#discussion_r538243444", "createdAt": "2020-12-08T10:59:56Z", "author": {"login": "mathbagu"}, "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeries.java", "diffHunk": "@@ -152,18 +169,48 @@ static String checkString(String token) {\n         return token.isEmpty() ? null : token;\n     }\n \n+    class CsvParserConfig {\n+        boolean versioned;\n+        TimeFormat timeFormat;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b0e336e5ea619a1e163e7d38782f78e0c6ee52a"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ0MjI1NQ==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1543#discussion_r543442255", "createdAt": "2020-12-15T15:25:30Z", "author": {"login": "marcosmc"}, "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeries.java", "diffHunk": "@@ -152,18 +169,48 @@ static String checkString(String token) {\n         return token.isEmpty() ? null : token;\n     }\n \n+    class CsvParserConfig {\n+        boolean versioned;\n+        TimeFormat timeFormat;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI0MzQ0NA=="}, "originalCommit": {"oid": "4b0e336e5ea619a1e163e7d38782f78e0c6ee52a"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTE1MjMyOnYy", "diffSide": "RIGHT", "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMTowMToxOVrOIBT0zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNToyNTo1MVrOIGRGvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI0NDMwMA==", "bodyText": "Same comment there: you could also fix the declaration of the class and the fields", "url": "https://github.com/powsybl/powsybl-core/pull/1543#discussion_r538244300", "createdAt": "2020-12-08T11:01:19Z", "author": {"login": "mathbagu"}, "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeries.java", "diffHunk": "@@ -152,18 +169,48 @@ static String checkString(String token) {\n         return token.isEmpty() ? null : token;\n     }\n \n+    class CsvParserConfig {\n+        boolean versioned;\n+        TimeFormat timeFormat;\n+\n+        CsvParserConfig() {\n+            this(true, TimeFormat.DATE_TIME);\n+        }\n+\n+        public CsvParserConfig(boolean versioned, TimeFormat timeFormat) {\n+            this.versioned = versioned;\n+            this.timeFormat = timeFormat;\n+        }\n+\n+        public boolean versioned() {\n+            return versioned;\n+        }\n+\n+        public TimeFormat timeFormat() {\n+            return timeFormat;\n+        }\n+    }\n+\n     class CsvParsingContext {\n         final List<String> names;\n+        final CsvParserConfig csvParserConfig;\n+        final int fixedColumns;\n \n         final TimeSeriesDataType[] dataTypes;\n         final Object[] values;\n \n-        final List<ZonedDateTime> times = new ArrayList<>();\n+        final List<Long> times = new ArrayList<>();\n \n         TimeSeriesIndex refIndex;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b0e336e5ea619a1e163e7d38782f78e0c6ee52a"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ0MjYyMg==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1543#discussion_r543442622", "createdAt": "2020-12-15T15:25:51Z", "author": {"login": "marcosmc"}, "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeries.java", "diffHunk": "@@ -152,18 +169,48 @@ static String checkString(String token) {\n         return token.isEmpty() ? null : token;\n     }\n \n+    class CsvParserConfig {\n+        boolean versioned;\n+        TimeFormat timeFormat;\n+\n+        CsvParserConfig() {\n+            this(true, TimeFormat.DATE_TIME);\n+        }\n+\n+        public CsvParserConfig(boolean versioned, TimeFormat timeFormat) {\n+            this.versioned = versioned;\n+            this.timeFormat = timeFormat;\n+        }\n+\n+        public boolean versioned() {\n+            return versioned;\n+        }\n+\n+        public TimeFormat timeFormat() {\n+            return timeFormat;\n+        }\n+    }\n+\n     class CsvParsingContext {\n         final List<String> names;\n+        final CsvParserConfig csvParserConfig;\n+        final int fixedColumns;\n \n         final TimeSeriesDataType[] dataTypes;\n         final Object[] values;\n \n-        final List<ZonedDateTime> times = new ArrayList<>();\n+        final List<Long> times = new ArrayList<>();\n \n         TimeSeriesIndex refIndex;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI0NDMwMA=="}, "originalCommit": {"oid": "4b0e336e5ea619a1e163e7d38782f78e0c6ee52a"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTE2MzI5OnYy", "diffSide": "RIGHT", "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMTowMzo0OFrOIBT7QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNToyNjowMlrOIGRHSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI0NTk1Mg==", "bodyText": "I wonder if the separator should be added in the CsvParserConfig and then pass the config to this method", "url": "https://github.com/powsybl/powsybl-core/pull/1543#discussion_r538245952", "createdAt": "2020-12-08T11:03:48Z", "author": {"login": "mathbagu"}, "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeries.java", "diffHunk": "@@ -338,11 +418,19 @@ static CsvParsingContext readCsvHeader(CsvListReader csvListReader, String separ\n         if (!duplicates.isEmpty()) {\n             throw new TimeSeriesException(\"Bad CSV header, there are duplicates in time series names \" + duplicates);\n         }\n-        List<String> names = Arrays.asList(tokens).subList(2, tokens.length);\n-        return new CsvParsingContext(names);\n+        List<String> names = Arrays.asList(tokens).subList(csvParserConfig.versioned() ? 2 : 1, tokens.length);\n+        return new CsvParsingContext(names, csvParserConfig);\n+    }\n+\n+    static void checkCsvHeader(String separatorStr, boolean versioned, String[] tokens) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b0e336e5ea619a1e163e7d38782f78e0c6ee52a"}, "originalPosition": 332}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ0Mjc2Mw==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1543#discussion_r543442763", "createdAt": "2020-12-15T15:26:02Z", "author": {"login": "marcosmc"}, "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeries.java", "diffHunk": "@@ -338,11 +418,19 @@ static CsvParsingContext readCsvHeader(CsvListReader csvListReader, String separ\n         if (!duplicates.isEmpty()) {\n             throw new TimeSeriesException(\"Bad CSV header, there are duplicates in time series names \" + duplicates);\n         }\n-        List<String> names = Arrays.asList(tokens).subList(2, tokens.length);\n-        return new CsvParsingContext(names);\n+        List<String> names = Arrays.asList(tokens).subList(csvParserConfig.versioned() ? 2 : 1, tokens.length);\n+        return new CsvParsingContext(names, csvParserConfig);\n+    }\n+\n+    static void checkCsvHeader(String separatorStr, boolean versioned, String[] tokens) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI0NTk1Mg=="}, "originalCommit": {"oid": "4b0e336e5ea619a1e163e7d38782f78e0c6ee52a"}, "originalPosition": 332}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTE2NTU5OnYy", "diffSide": "RIGHT", "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMTowNDoxN1rOIBT8pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNToyNjoxMlrOIGRH6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI0NjMxMA==", "bodyText": "I wonder if the separator should be added in the config and the pass only the config to this method", "url": "https://github.com/powsybl/powsybl-core/pull/1543#discussion_r538246310", "createdAt": "2020-12-08T11:04:17Z", "author": {"login": "mathbagu"}, "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeries.java", "diffHunk": "@@ -319,15 +400,14 @@ static void readCsvValues(CsvListReader reader, CsvParsingContext context,\n         timeSeriesPerVersion.put(currentVersion, context.createTimeSeries());\n     }\n \n-    static CsvParsingContext readCsvHeader(CsvListReader csvListReader, String separatorStr) throws IOException {\n+    static CsvParsingContext readCsvHeader(CsvListReader csvListReader, String separatorStr, CsvParserConfig csvParserConfig) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b0e336e5ea619a1e163e7d38782f78e0c6ee52a"}, "originalPosition": 308}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ0MjkyMQ==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1543#discussion_r543442921", "createdAt": "2020-12-15T15:26:12Z", "author": {"login": "marcosmc"}, "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeries.java", "diffHunk": "@@ -319,15 +400,14 @@ static void readCsvValues(CsvListReader reader, CsvParsingContext context,\n         timeSeriesPerVersion.put(currentVersion, context.createTimeSeries());\n     }\n \n-    static CsvParsingContext readCsvHeader(CsvListReader csvListReader, String separatorStr) throws IOException {\n+    static CsvParsingContext readCsvHeader(CsvListReader csvListReader, String separatorStr, CsvParserConfig csvParserConfig) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI0NjMxMA=="}, "originalCommit": {"oid": "4b0e336e5ea619a1e163e7d38782f78e0c6ee52a"}, "originalPosition": 308}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTE3MDY1OnYy", "diffSide": "RIGHT", "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMTowNToyMlrOIBT_iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNTozMjoxNVrOIGRcAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI0NzA0OA==", "bodyText": "Is an empty timeseries totally dumb? Maybe it could be useful for the timeline (see my comment about null TS vs empty TS in #1539)", "url": "https://github.com/powsybl/powsybl-core/pull/1543#discussion_r538247048", "createdAt": "2020-12-08T11:05:22Z", "author": {"login": "mathbagu"}, "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeries.java", "diffHunk": "@@ -288,11 +340,40 @@ private Duration checkRegularSpacing() {\n                     StringDataChunk chunk = new UncompressedStringDataChunk(0, stringValues.toArray(new String[0])).tryToCompress();\n                     timeSeriesList.add(new StringTimeSeries(metadata, chunk));\n                 } else {\n-                    throw assertDataType(dataTypes[i - 2]);\n+                    throw assertDataType(dataTypes[i - fixedColumns]);\n                 }\n             }\n             return timeSeriesList;\n         }\n+\n+        private TimeSeriesIndex getTimeSeriesIndex() {\n+            Long spacing = checkRegularSpacing();\n+            if (spacing != Long.MIN_VALUE) {\n+                return new RegularTimeSeriesIndex(times.get(0), times.get(times.size() - 1), spacing);\n+            } else {\n+                return new IrregularTimeSeriesIndex(times.stream().mapToLong(l -> l).toArray());\n+            }\n+        }\n+\n+        private long checkRegularSpacing() {\n+            if (times.size() < 2) {\n+                throw new TimeSeriesException(\"At least 2 rows are expected\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b0e336e5ea619a1e163e7d38782f78e0c6ee52a"}, "originalPosition": 269}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ0ODA2NQ==", "bodyText": "At this point it only affects the reading of TimeSeries from a CSV file, it is possible to create an empty object of type TimeSeries without using a CSV file as a starting point", "url": "https://github.com/powsybl/powsybl-core/pull/1543#discussion_r543448065", "createdAt": "2020-12-15T15:32:15Z", "author": {"login": "marcosmc"}, "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeries.java", "diffHunk": "@@ -288,11 +340,40 @@ private Duration checkRegularSpacing() {\n                     StringDataChunk chunk = new UncompressedStringDataChunk(0, stringValues.toArray(new String[0])).tryToCompress();\n                     timeSeriesList.add(new StringTimeSeries(metadata, chunk));\n                 } else {\n-                    throw assertDataType(dataTypes[i - 2]);\n+                    throw assertDataType(dataTypes[i - fixedColumns]);\n                 }\n             }\n             return timeSeriesList;\n         }\n+\n+        private TimeSeriesIndex getTimeSeriesIndex() {\n+            Long spacing = checkRegularSpacing();\n+            if (spacing != Long.MIN_VALUE) {\n+                return new RegularTimeSeriesIndex(times.get(0), times.get(times.size() - 1), spacing);\n+            } else {\n+                return new IrregularTimeSeriesIndex(times.stream().mapToLong(l -> l).toArray());\n+            }\n+        }\n+\n+        private long checkRegularSpacing() {\n+            if (times.size() < 2) {\n+                throw new TimeSeriesException(\"At least 2 rows are expected\");\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI0NzA0OA=="}, "originalCommit": {"oid": "4b0e336e5ea619a1e163e7d38782f78e0c6ee52a"}, "originalPosition": 269}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTE3MzM0OnYy", "diffSide": "RIGHT", "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMTowNjowNFrOIBUBQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNToyNzowMFrOIGRK1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI0NzQ4OQ==", "bodyText": "Add a default case that throws an AssertionError with the unexpected timeFormat", "url": "https://github.com/powsybl/powsybl-core/pull/1543#discussion_r538247489", "createdAt": "2020-12-08T11:06:04Z", "author": {"login": "mathbagu"}, "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeries.java", "diffHunk": "@@ -190,42 +237,66 @@ private TDoubleArrayList createDoubleValues() {\n             return stringValues;\n         }\n \n+        int getVersion(List<String> tokens) {\n+            return csvParserConfig.versioned() ? Integer.parseInt(tokens.get(1)) : 0;\n+        }\n+\n+        int timesSize() {\n+            return times.size();\n+        }\n+\n+        int expectedTokens() {\n+            return names.size() + fixedColumns;\n+        }\n+\n         void parseToken(int i, String token) {\n-            if (dataTypes[i - 2] == null) {\n+            if (dataTypes[i - fixedColumns] == null) {\n                 // test double parsing, in case of error we consider it a string time series\n                 if (Doubles.tryParse(token) != null) {\n-                    dataTypes[i - 2] = TimeSeriesDataType.DOUBLE;\n+                    dataTypes[i - fixedColumns] = TimeSeriesDataType.DOUBLE;\n                     TDoubleArrayList doubleValues = createDoubleValues();\n                     doubleValues.add(parseDouble(token));\n-                    values[i - 2] = doubleValues;\n+                    values[i - fixedColumns] = doubleValues;\n                 } else {\n-                    dataTypes[i - 2] = TimeSeriesDataType.STRING;\n+                    dataTypes[i - fixedColumns] = TimeSeriesDataType.STRING;\n                     List<String> stringValues = createStringValues();\n                     stringValues.add(checkString(token));\n-                    values[i - 2] = stringValues;\n+                    values[i - fixedColumns] = stringValues;\n                 }\n             } else {\n-                if (dataTypes[i - 2] == TimeSeriesDataType.DOUBLE) {\n-                    ((TDoubleArrayList) values[i - 2]).add(parseDouble(token));\n-                } else if (dataTypes[i - 2] == TimeSeriesDataType.STRING) {\n-                    ((List<String>) values[i - 2]).add(checkString(token));\n+                if (dataTypes[i - fixedColumns] == TimeSeriesDataType.DOUBLE) {\n+                    ((TDoubleArrayList) values[i - fixedColumns]).add(parseDouble(token));\n+                } else if (dataTypes[i - fixedColumns] == TimeSeriesDataType.STRING) {\n+                    ((List<String>) values[i - fixedColumns]).add(checkString(token));\n                 } else {\n-                    throw assertDataType(dataTypes[i - 2]);\n+                    throw assertDataType(dataTypes[i - fixedColumns]);\n                 }\n             }\n         }\n \n         void parseLine(List<String> tokens) {\n-            for (int i = 2; i < tokens.size(); i++) {\n+            for (int i = fixedColumns; i < tokens.size(); i++) {\n                 String token = tokens.get(i) != null ? tokens.get(i).trim() : \"\";\n                 parseToken(i, token);\n             }\n-            // empty last cell case\n-            if (tokens.size() == names.size() + 1) {\n-                parseToken(tokens.size(), \"\");\n-            }\n \n-            times.add(ZonedDateTime.parse(tokens.get(0)));\n+            parseTokenTime(tokens);\n+        }\n+\n+        void parseTokenTime(List<String> tokens) {\n+            switch (csvParserConfig.timeFormat()) {\n+                case DATE_TIME:\n+                    times.add(ZonedDateTime.parse(tokens.get(0)).toInstant().toEpochMilli());\n+                    break;\n+                case FRACTIONS_OF_SECOND:\n+                    Double time = Double.parseDouble(tokens.get(0)) * 1000;\n+                    times.add(time.longValue());\n+                    break;\n+                case MILLIS:\n+                    Double millis = Double.parseDouble(tokens.get(0));\n+                    times.add(millis.longValue());\n+                    break;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b0e336e5ea619a1e163e7d38782f78e0c6ee52a"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ0MzY2OA==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1543#discussion_r543443668", "createdAt": "2020-12-15T15:27:00Z", "author": {"login": "marcosmc"}, "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeries.java", "diffHunk": "@@ -190,42 +237,66 @@ private TDoubleArrayList createDoubleValues() {\n             return stringValues;\n         }\n \n+        int getVersion(List<String> tokens) {\n+            return csvParserConfig.versioned() ? Integer.parseInt(tokens.get(1)) : 0;\n+        }\n+\n+        int timesSize() {\n+            return times.size();\n+        }\n+\n+        int expectedTokens() {\n+            return names.size() + fixedColumns;\n+        }\n+\n         void parseToken(int i, String token) {\n-            if (dataTypes[i - 2] == null) {\n+            if (dataTypes[i - fixedColumns] == null) {\n                 // test double parsing, in case of error we consider it a string time series\n                 if (Doubles.tryParse(token) != null) {\n-                    dataTypes[i - 2] = TimeSeriesDataType.DOUBLE;\n+                    dataTypes[i - fixedColumns] = TimeSeriesDataType.DOUBLE;\n                     TDoubleArrayList doubleValues = createDoubleValues();\n                     doubleValues.add(parseDouble(token));\n-                    values[i - 2] = doubleValues;\n+                    values[i - fixedColumns] = doubleValues;\n                 } else {\n-                    dataTypes[i - 2] = TimeSeriesDataType.STRING;\n+                    dataTypes[i - fixedColumns] = TimeSeriesDataType.STRING;\n                     List<String> stringValues = createStringValues();\n                     stringValues.add(checkString(token));\n-                    values[i - 2] = stringValues;\n+                    values[i - fixedColumns] = stringValues;\n                 }\n             } else {\n-                if (dataTypes[i - 2] == TimeSeriesDataType.DOUBLE) {\n-                    ((TDoubleArrayList) values[i - 2]).add(parseDouble(token));\n-                } else if (dataTypes[i - 2] == TimeSeriesDataType.STRING) {\n-                    ((List<String>) values[i - 2]).add(checkString(token));\n+                if (dataTypes[i - fixedColumns] == TimeSeriesDataType.DOUBLE) {\n+                    ((TDoubleArrayList) values[i - fixedColumns]).add(parseDouble(token));\n+                } else if (dataTypes[i - fixedColumns] == TimeSeriesDataType.STRING) {\n+                    ((List<String>) values[i - fixedColumns]).add(checkString(token));\n                 } else {\n-                    throw assertDataType(dataTypes[i - 2]);\n+                    throw assertDataType(dataTypes[i - fixedColumns]);\n                 }\n             }\n         }\n \n         void parseLine(List<String> tokens) {\n-            for (int i = 2; i < tokens.size(); i++) {\n+            for (int i = fixedColumns; i < tokens.size(); i++) {\n                 String token = tokens.get(i) != null ? tokens.get(i).trim() : \"\";\n                 parseToken(i, token);\n             }\n-            // empty last cell case\n-            if (tokens.size() == names.size() + 1) {\n-                parseToken(tokens.size(), \"\");\n-            }\n \n-            times.add(ZonedDateTime.parse(tokens.get(0)));\n+            parseTokenTime(tokens);\n+        }\n+\n+        void parseTokenTime(List<String> tokens) {\n+            switch (csvParserConfig.timeFormat()) {\n+                case DATE_TIME:\n+                    times.add(ZonedDateTime.parse(tokens.get(0)).toInstant().toEpochMilli());\n+                    break;\n+                case FRACTIONS_OF_SECOND:\n+                    Double time = Double.parseDouble(tokens.get(0)) * 1000;\n+                    times.add(time.longValue());\n+                    break;\n+                case MILLIS:\n+                    Double millis = Double.parseDouble(tokens.get(0));\n+                    times.add(millis.longValue());\n+                    break;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI0NzQ4OQ=="}, "originalCommit": {"oid": "4b0e336e5ea619a1e163e7d38782f78e0c6ee52a"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTE4MjQxOnYy", "diffSide": "RIGHT", "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMTowODoxNlrOIBUGnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNToyNzozOFrOIGRNIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI0ODg2MA==", "bodyText": "What did you have in mind by replacing the equality by this epsilon? Maybe you should also introduce a constant instead of a magic number. What is the unit of this value?", "url": "https://github.com/powsybl/powsybl-core/pull/1543#discussion_r538248860", "createdAt": "2020-12-08T11:08:16Z", "author": {"login": "mathbagu"}, "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeries.java", "diffHunk": "@@ -288,11 +340,40 @@ private Duration checkRegularSpacing() {\n                     StringDataChunk chunk = new UncompressedStringDataChunk(0, stringValues.toArray(new String[0])).tryToCompress();\n                     timeSeriesList.add(new StringTimeSeries(metadata, chunk));\n                 } else {\n-                    throw assertDataType(dataTypes[i - 2]);\n+                    throw assertDataType(dataTypes[i - fixedColumns]);\n                 }\n             }\n             return timeSeriesList;\n         }\n+\n+        private TimeSeriesIndex getTimeSeriesIndex() {\n+            Long spacing = checkRegularSpacing();\n+            if (spacing != Long.MIN_VALUE) {\n+                return new RegularTimeSeriesIndex(times.get(0), times.get(times.size() - 1), spacing);\n+            } else {\n+                return new IrregularTimeSeriesIndex(times.stream().mapToLong(l -> l).toArray());\n+            }\n+        }\n+\n+        private long checkRegularSpacing() {\n+            if (times.size() < 2) {\n+                throw new TimeSeriesException(\"At least 2 rows are expected\");\n+            }\n+\n+            long spacing = Long.MIN_VALUE;\n+            for (int i = 1; i < times.size(); i++) {\n+                long duration = times.get(i) - times.get(i - 1);\n+                if (spacing == Long.MIN_VALUE) {\n+                    spacing = duration;\n+                } else {\n+                    if (1e-4 < Math.abs(duration - spacing)) {\n+                        return Long.MIN_VALUE;\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b0e336e5ea619a1e163e7d38782f78e0c6ee52a"}, "originalPosition": 279}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ0NDI1OA==", "bodyText": "Replaced with an equality", "url": "https://github.com/powsybl/powsybl-core/pull/1543#discussion_r543444258", "createdAt": "2020-12-15T15:27:38Z", "author": {"login": "marcosmc"}, "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeries.java", "diffHunk": "@@ -288,11 +340,40 @@ private Duration checkRegularSpacing() {\n                     StringDataChunk chunk = new UncompressedStringDataChunk(0, stringValues.toArray(new String[0])).tryToCompress();\n                     timeSeriesList.add(new StringTimeSeries(metadata, chunk));\n                 } else {\n-                    throw assertDataType(dataTypes[i - 2]);\n+                    throw assertDataType(dataTypes[i - fixedColumns]);\n                 }\n             }\n             return timeSeriesList;\n         }\n+\n+        private TimeSeriesIndex getTimeSeriesIndex() {\n+            Long spacing = checkRegularSpacing();\n+            if (spacing != Long.MIN_VALUE) {\n+                return new RegularTimeSeriesIndex(times.get(0), times.get(times.size() - 1), spacing);\n+            } else {\n+                return new IrregularTimeSeriesIndex(times.stream().mapToLong(l -> l).toArray());\n+            }\n+        }\n+\n+        private long checkRegularSpacing() {\n+            if (times.size() < 2) {\n+                throw new TimeSeriesException(\"At least 2 rows are expected\");\n+            }\n+\n+            long spacing = Long.MIN_VALUE;\n+            for (int i = 1; i < times.size(); i++) {\n+                long duration = times.get(i) - times.get(i - 1);\n+                if (spacing == Long.MIN_VALUE) {\n+                    spacing = duration;\n+                } else {\n+                    if (1e-4 < Math.abs(duration - spacing)) {\n+                        return Long.MIN_VALUE;\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI0ODg2MA=="}, "originalCommit": {"oid": "4b0e336e5ea619a1e163e7d38782f78e0c6ee52a"}, "originalPosition": 279}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTE4ODY3OnYy", "diffSide": "RIGHT", "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeriesTable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMTowOTo0MFrOIBUKVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNToyNzo1N1rOIGROPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI0OTgxMg==", "bodyText": "I wonder if the flush should be moved in the writeCsv() method to avoid user to forget it. What do you think?", "url": "https://github.com/powsybl/powsybl-core/pull/1543#discussion_r538249812", "createdAt": "2020-12-08T11:09:40Z", "author": {"login": "mathbagu"}, "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeriesTable.java", "diffHunk": "@@ -534,15 +537,33 @@ private static BufferedWriter createWriter(Path file) throws IOException {\n \n     public void writeCsv(Path file) {\n         try (BufferedWriter writer = createWriter(file)) {\n-            writeCsv(writer, TimeSeriesConstants.DEFAULT_SEPARATOR, ZoneId.systemDefault());\n+            writeCsv(writer, TimeSeriesConstants.DEFAULT_SEPARATOR, ZoneId.systemDefault(), new CsvParserConfig());\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    public void writeCsv(Path file, CsvParserConfig csvParserConfig) {\n+        try (BufferedWriter writer = createWriter(file)) {\n+            writeCsv(writer, TimeSeriesConstants.DEFAULT_SEPARATOR, ZoneId.systemDefault(), csvParserConfig);\n         } catch (IOException e) {\n             throw new UncheckedIOException(e);\n         }\n     }\n \n     public String toCsvString(char separator, ZoneId zoneId) {\n         try (StringWriter writer = new StringWriter()) {\n-            writeCsv(writer, separator, zoneId);\n+            writeCsv(writer, separator, zoneId, new CsvParserConfig());\n+            writer.flush();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b0e336e5ea619a1e163e7d38782f78e0c6ee52a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ0NDU0MA==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1543#discussion_r543444540", "createdAt": "2020-12-15T15:27:57Z", "author": {"login": "marcosmc"}, "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeriesTable.java", "diffHunk": "@@ -534,15 +537,33 @@ private static BufferedWriter createWriter(Path file) throws IOException {\n \n     public void writeCsv(Path file) {\n         try (BufferedWriter writer = createWriter(file)) {\n-            writeCsv(writer, TimeSeriesConstants.DEFAULT_SEPARATOR, ZoneId.systemDefault());\n+            writeCsv(writer, TimeSeriesConstants.DEFAULT_SEPARATOR, ZoneId.systemDefault(), new CsvParserConfig());\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    public void writeCsv(Path file, CsvParserConfig csvParserConfig) {\n+        try (BufferedWriter writer = createWriter(file)) {\n+            writeCsv(writer, TimeSeriesConstants.DEFAULT_SEPARATOR, ZoneId.systemDefault(), csvParserConfig);\n         } catch (IOException e) {\n             throw new UncheckedIOException(e);\n         }\n     }\n \n     public String toCsvString(char separator, ZoneId zoneId) {\n         try (StringWriter writer = new StringWriter()) {\n-            writeCsv(writer, separator, zoneId);\n+            writeCsv(writer, separator, zoneId, new CsvParserConfig());\n+            writer.flush();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI0OTgxMg=="}, "originalCommit": {"oid": "4b0e336e5ea619a1e163e7d38782f78e0c6ee52a"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTE5MTU0OnYy", "diffSide": "RIGHT", "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeriesTable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMToxMDoyNVrOIBUMGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNToyODowNFrOIGROoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI1MDI2Nw==", "bodyText": "Add a default case that throws an exception", "url": "https://github.com/powsybl/powsybl-core/pull/1543#discussion_r538250267", "createdAt": "2020-12-08T11:10:25Z", "author": {"login": "mathbagu"}, "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeriesTable.java", "diffHunk": "@@ -640,14 +679,32 @@ private void dumpCache(Writer writer, CsvConfig config, int point, CsvCache cach\n         }\n     }\n \n-    public void writeCsv(Writer writer, char separator, ZoneId zoneId) {\n+    private void writeTime(Writer writer, CsvConfig config, int point, int cachedPoint) throws IOException {\n+        long time = tableIndex.getTimeAt(point + cachedPoint);\n+        switch (config.getTimeFormat()) {\n+            case DATE_TIME:\n+                ZonedDateTime dateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(time), ZoneId.systemDefault());\n+                writer.write(dateTime.format(config.dateTimeFormatter));\n+                break;\n+            case FRACTIONS_OF_SECOND:\n+                Long longTime = new Long(time);\n+                double convertedTime = longTime.doubleValue();\n+                writer.write(Double.toString(convertedTime / 1000));\n+                break;\n+            case MILLIS:\n+                writer.write(Long.toString(time));\n+                break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b0e336e5ea619a1e163e7d38782f78e0c6ee52a"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ0NDY0MA==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1543#discussion_r543444640", "createdAt": "2020-12-15T15:28:04Z", "author": {"login": "marcosmc"}, "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeriesTable.java", "diffHunk": "@@ -640,14 +679,32 @@ private void dumpCache(Writer writer, CsvConfig config, int point, CsvCache cach\n         }\n     }\n \n-    public void writeCsv(Writer writer, char separator, ZoneId zoneId) {\n+    private void writeTime(Writer writer, CsvConfig config, int point, int cachedPoint) throws IOException {\n+        long time = tableIndex.getTimeAt(point + cachedPoint);\n+        switch (config.getTimeFormat()) {\n+            case DATE_TIME:\n+                ZonedDateTime dateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(time), ZoneId.systemDefault());\n+                writer.write(dateTime.format(config.dateTimeFormatter));\n+                break;\n+            case FRACTIONS_OF_SECOND:\n+                Long longTime = new Long(time);\n+                double convertedTime = longTime.doubleValue();\n+                writer.write(Double.toString(convertedTime / 1000));\n+                break;\n+            case MILLIS:\n+                writer.write(Long.toString(time));\n+                break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI1MDI2Nw=="}, "originalCommit": {"oid": "4b0e336e5ea619a1e163e7d38782f78e0c6ee52a"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTIwMTA4OnYy", "diffSide": "RIGHT", "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeriesTable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMToxMjozOVrOIBURlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNToyODoxMVrOIGRPAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI1MTY3MA==", "bodyText": "Is this code equivalent to:\nwriter.write(Double.toString(time / 1000.0));\n\nI think that time / 1000.0 will be automatically cast into a double (thanks to the .0)", "url": "https://github.com/powsybl/powsybl-core/pull/1543#discussion_r538251670", "createdAt": "2020-12-08T11:12:39Z", "author": {"login": "mathbagu"}, "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeriesTable.java", "diffHunk": "@@ -640,14 +679,32 @@ private void dumpCache(Writer writer, CsvConfig config, int point, CsvCache cach\n         }\n     }\n \n-    public void writeCsv(Writer writer, char separator, ZoneId zoneId) {\n+    private void writeTime(Writer writer, CsvConfig config, int point, int cachedPoint) throws IOException {\n+        long time = tableIndex.getTimeAt(point + cachedPoint);\n+        switch (config.getTimeFormat()) {\n+            case DATE_TIME:\n+                ZonedDateTime dateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(time), ZoneId.systemDefault());\n+                writer.write(dateTime.format(config.dateTimeFormatter));\n+                break;\n+            case FRACTIONS_OF_SECOND:\n+                Long longTime = new Long(time);\n+                double convertedTime = longTime.doubleValue();\n+                writer.write(Double.toString(convertedTime / 1000));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b0e336e5ea619a1e163e7d38782f78e0c6ee52a"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ0NDczNw==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1543#discussion_r543444737", "createdAt": "2020-12-15T15:28:11Z", "author": {"login": "marcosmc"}, "path": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/TimeSeriesTable.java", "diffHunk": "@@ -640,14 +679,32 @@ private void dumpCache(Writer writer, CsvConfig config, int point, CsvCache cach\n         }\n     }\n \n-    public void writeCsv(Writer writer, char separator, ZoneId zoneId) {\n+    private void writeTime(Writer writer, CsvConfig config, int point, int cachedPoint) throws IOException {\n+        long time = tableIndex.getTimeAt(point + cachedPoint);\n+        switch (config.getTimeFormat()) {\n+            case DATE_TIME:\n+                ZonedDateTime dateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(time), ZoneId.systemDefault());\n+                writer.write(dateTime.format(config.dateTimeFormatter));\n+                break;\n+            case FRACTIONS_OF_SECOND:\n+                Long longTime = new Long(time);\n+                double convertedTime = longTime.doubleValue();\n+                writer.write(Double.toString(convertedTime / 1000));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI1MTY3MA=="}, "originalCommit": {"oid": "4b0e336e5ea619a1e163e7d38782f78e0c6ee52a"}, "originalPosition": 115}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4923, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}