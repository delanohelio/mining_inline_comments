{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0MTM5Mzkw", "number": 1585, "title": "Use ServiceLoader to create SecurityAnalysis", "bodyText": "Signed-off-by: Thomas ADAM tadam@silicom.fr\nPlease check if the PR fulfills these requirements (please use '[x]' to check the checkboxes, or submit the PR and then click the checkboxes)\n\n The commit message follows our guidelines\n Tests for the changes have been added (for bug fixes / features)\n Docs have been added / updated (for bug fixes / features)\n\nDoes this PR already have an issue describing the problem ? If so, link to this issue using '#XXX' and skip the rest\nNo\nWhat kind of change does this PR introduce? (Bug fix, feature, docs update, ...)\nRefactoring of security-analysis-api\nWhat is the current behavior? (You can also link to an open issue here)\nFactory mechanism is used to create implementation of SecurityAnalysis\nWhat is the new behavior (if this is a feature change)?\nService Loader is used to create implementation of SecurityAnalysis\nDoes this PR introduce a breaking change or deprecate an API? If yes, check the following:\n\n The Breaking Change or Deprecated label has been added\n The migration guide has been updated in the github wiki (What changes might users need to make in their application due to this PR?)\n\nOther information:\nIn order to reduce changes on this PR to speed up reviews. A new class 'SecurityAnalysis2' was added instead of change 'SecurityAnalysis'.\nThis will be done on next PR", "createdAt": "2020-12-22T13:56:08Z", "url": "https://github.com/powsybl/powsybl-core/pull/1585", "merged": true, "mergeCommit": {"oid": "c79dd37751d6a14a6acf203a2f4dba23aff5a40e"}, "closed": true, "closedAt": "2021-02-01T13:51:58Z", "author": {"login": "tadam50"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABduI1MxAFqTU2NDI1ODQ1NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdz7YhCgH2gAyNTQ0MTM5MzkwOjlkN2VkZTJmNzVkNmQzODQyZDQyNTJiYWM4YjU5MDUzZjM4MzkzNDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0MjU4NDU1", "url": "https://github.com/powsybl/powsybl-core/pull/1585#pullrequestreview-564258455", "createdAt": "2021-01-08T13:29:48Z", "commit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMzoyOTo0OFrOIQSC1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMzozNDo0MVrOIQSLYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk0Mzc2NQ==", "bodyText": "Add a TODO to not forget to rename this class at the end", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r553943765", "createdAt": "2021-01-08T13:29:48Z", "author": {"login": "mathbagu"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysis2.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfig;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.computation.local.LocalComputationManagerFactory;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.contingency.EmptyContingencyListProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.detectors.DefaultLimitViolationDetector;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ *\n+ * Sensitivity analysis main API. It is a utility class (so with only static methods) used as an entry point for running\n+ * a sensitivity analysis allowing to choose either a specific implementation or just to rely on the default one.\n+ *\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+public final class SecurityAnalysis2 {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk0NDYyMg==", "bodyText": "Use LocalComputationManager.getDefault() instead", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r553944622", "createdAt": "2021-01-08T13:31:43Z", "author": {"login": "mathbagu"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysis2.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfig;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.computation.local.LocalComputationManagerFactory;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.contingency.EmptyContingencyListProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.detectors.DefaultLimitViolationDetector;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ *\n+ * Sensitivity analysis main API. It is a utility class (so with only static methods) used as an entry point for running\n+ * a sensitivity analysis allowing to choose either a specific implementation or just to rely on the default one.\n+ *\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+public final class SecurityAnalysis2 {\n+\n+    private SecurityAnalysis2() {\n+        throw new AssertionError(\"Utility class should not been instantiated\");\n+    }\n+\n+    /**\n+     * A sensitivity analysis runner is responsible for providing convenient methods on top of {@link SecurityAnalysisProvider}:\n+     * several variants of synchronous and asynchronous run with default parameters.\n+     */\n+    public static final class Runner implements Versionable {\n+\n+        private final SecurityAnalysisProvider provider;\n+\n+        private Runner(SecurityAnalysisProvider provider) {\n+            this.provider = Objects.requireNonNull(provider);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network,\n+                                                                  String workingStateId,\n+                                                                  LimitViolationDetector detector,\n+                                                                  LimitViolationFilter filter,\n+                                                                  ComputationManager computationManager,\n+                                                                  SecurityAnalysisParameters parameters,\n+                                                                  ContingenciesProvider contingenciesProvider,\n+                                                                  List<SecurityAnalysisInterceptor> interceptors) {\n+            Objects.requireNonNull(network, \"Network should not be null\");\n+            Objects.requireNonNull(workingStateId, \"WorkingVariantId should not be null\");\n+            Objects.requireNonNull(detector, \"LimitViolation detector should not be null\");\n+            Objects.requireNonNull(filter, \"LimitViolation filter should not be null\");\n+            Objects.requireNonNull(computationManager, \"ComputationManager should not be null\");\n+            Objects.requireNonNull(contingenciesProvider, \"Contingencies provider should not be null\");\n+            Objects.requireNonNull(parameters, \"Sensitivity analysis parameters should not be null\");\n+            Objects.requireNonNull(interceptors, \"Interceptor list should not be null\");\n+            return provider.run(network, workingStateId, detector, filter, computationManager, parameters, contingenciesProvider, interceptors);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network, LimitViolationFilter filter,\n+                                                                  ComputationManager computationManager) {\n+            return runAsync(network, network.getVariantManager().getWorkingVariantId(), new DefaultLimitViolationDetector(), filter, computationManager, SecurityAnalysisParameters.load(), new EmptyContingencyListProvider(), Collections.emptyList());\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network, ComputationManager computationManager) {\n+            return runAsync(network, LimitViolationFilter.load(), computationManager);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network) {\n+            return runAsync(network, new LocalComputationManagerFactory().create());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk0NTIwMA==", "bodyText": "I think you should remove all the WithLog method: as proposed last time, we would probably return an object that contain the result of the simulation and a report. To be discussed with the others", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r553945200", "createdAt": "2021-01-08T13:33:03Z", "author": {"login": "mathbagu"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysis2.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfig;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.computation.local.LocalComputationManagerFactory;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.contingency.EmptyContingencyListProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.detectors.DefaultLimitViolationDetector;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ *\n+ * Sensitivity analysis main API. It is a utility class (so with only static methods) used as an entry point for running\n+ * a sensitivity analysis allowing to choose either a specific implementation or just to rely on the default one.\n+ *\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+public final class SecurityAnalysis2 {\n+\n+    private SecurityAnalysis2() {\n+        throw new AssertionError(\"Utility class should not been instantiated\");\n+    }\n+\n+    /**\n+     * A sensitivity analysis runner is responsible for providing convenient methods on top of {@link SecurityAnalysisProvider}:\n+     * several variants of synchronous and asynchronous run with default parameters.\n+     */\n+    public static final class Runner implements Versionable {\n+\n+        private final SecurityAnalysisProvider provider;\n+\n+        private Runner(SecurityAnalysisProvider provider) {\n+            this.provider = Objects.requireNonNull(provider);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network,\n+                                                                  String workingStateId,\n+                                                                  LimitViolationDetector detector,\n+                                                                  LimitViolationFilter filter,\n+                                                                  ComputationManager computationManager,\n+                                                                  SecurityAnalysisParameters parameters,\n+                                                                  ContingenciesProvider contingenciesProvider,\n+                                                                  List<SecurityAnalysisInterceptor> interceptors) {\n+            Objects.requireNonNull(network, \"Network should not be null\");\n+            Objects.requireNonNull(workingStateId, \"WorkingVariantId should not be null\");\n+            Objects.requireNonNull(detector, \"LimitViolation detector should not be null\");\n+            Objects.requireNonNull(filter, \"LimitViolation filter should not be null\");\n+            Objects.requireNonNull(computationManager, \"ComputationManager should not be null\");\n+            Objects.requireNonNull(contingenciesProvider, \"Contingencies provider should not be null\");\n+            Objects.requireNonNull(parameters, \"Sensitivity analysis parameters should not be null\");\n+            Objects.requireNonNull(interceptors, \"Interceptor list should not be null\");\n+            return provider.run(network, workingStateId, detector, filter, computationManager, parameters, contingenciesProvider, interceptors);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network, LimitViolationFilter filter,\n+                                                                  ComputationManager computationManager) {\n+            return runAsync(network, network.getVariantManager().getWorkingVariantId(), new DefaultLimitViolationDetector(), filter, computationManager, SecurityAnalysisParameters.load(), new EmptyContingencyListProvider(), Collections.emptyList());\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network, ComputationManager computationManager) {\n+            return runAsync(network, LimitViolationFilter.load(), computationManager);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network) {\n+            return runAsync(network, new LocalComputationManagerFactory().create());\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResultWithLog> runAsyncWithLog(Network network,\n+                                                                                String workingStateId,\n+                                                                                LimitViolationDetector detector,\n+                                                                                LimitViolationFilter filter,\n+                                                                                ComputationManager computationManager,\n+                                                                                SecurityAnalysisParameters parameters,\n+                                                                                ContingenciesProvider contingenciesProvider,\n+                                                                                List<SecurityAnalysisInterceptor> interceptors) {\n+            Objects.requireNonNull(network, \"Network should not be null\");\n+            Objects.requireNonNull(workingStateId, \"WorkingVariantId should not be null\");\n+            Objects.requireNonNull(detector, \"LimitViolation detector should not be null\");\n+            Objects.requireNonNull(filter, \"LimitViolation filter should not be null\");\n+            Objects.requireNonNull(computationManager, \"ComputationManager should not be null\");\n+            Objects.requireNonNull(contingenciesProvider, \"Contingencies provider should not be null\");\n+            Objects.requireNonNull(parameters, \"Sensitivity analysis parameters should not be null\");\n+            Objects.requireNonNull(interceptors, \"Interceptor list should not be null\");\n+            return provider.runWithLog(network, workingStateId, detector, filter, computationManager, parameters, contingenciesProvider, interceptors);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk0NTgwNQ==", "bodyText": "Same remark: I think you can remove this method except if it breaks the compilation", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r553945805", "createdAt": "2021-01-08T13:34:24Z", "author": {"login": "mathbagu"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisProvider.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Security analysis provider\n+ *\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+public interface SecurityAnalysisProvider extends Versionable, PlatformConfigNamedProvider {\n+\n+    /**\n+     * Run an asynchronous single security analysis job.\n+     *\n+     * @param network IIDM network on which the security analysis will be performed\n+     * @param workingVariantId network variant ID on which the analysis will be performed\n+     * @param detector\n+     * @param filter\n+     * @param computationManager\n+     * @param parameters specific security analysis parameters\n+     * @param contingenciesProvider provides list of contingencies\n+     * @param interceptors\n+     * @return a {@link CompletableFuture} on {@link SecurityAnalysisResult} that gathers sensitivity factor values\n+     */\n+    CompletableFuture<SecurityAnalysisResult> run(Network network,\n+                                                  String workingVariantId,\n+                                                  LimitViolationDetector detector,\n+                                                  LimitViolationFilter filter,\n+                                                  ComputationManager computationManager,\n+                                                  SecurityAnalysisParameters parameters,\n+                                                  ContingenciesProvider contingenciesProvider,\n+                                                  List<SecurityAnalysisInterceptor> interceptors);\n+\n+    default CompletableFuture<SecurityAnalysisResultWithLog> runWithLog(Network network,\n+                                                                        String workingVariantId,\n+                                                                        LimitViolationDetector detector,\n+                                                                        LimitViolationFilter filter,\n+                                                                        ComputationManager computationManager,\n+                                                                        SecurityAnalysisParameters parameters,\n+                                                                        ContingenciesProvider contingenciesProvider,\n+                                                                        List<SecurityAnalysisInterceptor> interceptors) {\n+        return run(network, workingVariantId, detector, filter, computationManager, parameters, contingenciesProvider, interceptors).thenApply(r -> new SecurityAnalysisResultWithLog(r, null));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk0NTk1Mg==", "bodyText": "Same remark: add a todo/fixme", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r553945952", "createdAt": "2021-01-08T13:34:41Z", "author": {"login": "mathbagu"}, "path": "security-analysis-api/src/test/java/com/powsybl/security/SecurityAnalysis2Test.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.computation.local.LocalComputationManagerFactory;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.contingency.EmptyContingencyListProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.iidm.network.VariantManager;\n+import com.powsybl.security.detectors.DefaultLimitViolationDetector;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * @author Thomas Adam<tadam at silicom.fr>\n+ */\n+public class SecurityAnalysis2Test {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwMzE5NTU1", "url": "https://github.com/powsybl/powsybl-core/pull/1585#pullrequestreview-570319555", "createdAt": "2021-01-18T09:42:59Z", "commit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwOTo0Mjo1OVrOIVhIxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwOTo0OTo0MlrOIVhaoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQzMzkyNg==", "bodyText": "Isn't it already the purpose of SecurityAnalysisResultWithLog?", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r559433926", "createdAt": "2021-01-18T09:42:59Z", "author": {"login": "geofjamg"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysis2.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfig;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.computation.local.LocalComputationManagerFactory;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.contingency.EmptyContingencyListProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.detectors.DefaultLimitViolationDetector;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ *\n+ * Sensitivity analysis main API. It is a utility class (so with only static methods) used as an entry point for running\n+ * a sensitivity analysis allowing to choose either a specific implementation or just to rely on the default one.\n+ *\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+public final class SecurityAnalysis2 {\n+\n+    private SecurityAnalysis2() {\n+        throw new AssertionError(\"Utility class should not been instantiated\");\n+    }\n+\n+    /**\n+     * A sensitivity analysis runner is responsible for providing convenient methods on top of {@link SecurityAnalysisProvider}:\n+     * several variants of synchronous and asynchronous run with default parameters.\n+     */\n+    public static final class Runner implements Versionable {\n+\n+        private final SecurityAnalysisProvider provider;\n+\n+        private Runner(SecurityAnalysisProvider provider) {\n+            this.provider = Objects.requireNonNull(provider);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network,\n+                                                                  String workingStateId,\n+                                                                  LimitViolationDetector detector,\n+                                                                  LimitViolationFilter filter,\n+                                                                  ComputationManager computationManager,\n+                                                                  SecurityAnalysisParameters parameters,\n+                                                                  ContingenciesProvider contingenciesProvider,\n+                                                                  List<SecurityAnalysisInterceptor> interceptors) {\n+            Objects.requireNonNull(network, \"Network should not be null\");\n+            Objects.requireNonNull(workingStateId, \"WorkingVariantId should not be null\");\n+            Objects.requireNonNull(detector, \"LimitViolation detector should not be null\");\n+            Objects.requireNonNull(filter, \"LimitViolation filter should not be null\");\n+            Objects.requireNonNull(computationManager, \"ComputationManager should not be null\");\n+            Objects.requireNonNull(contingenciesProvider, \"Contingencies provider should not be null\");\n+            Objects.requireNonNull(parameters, \"Sensitivity analysis parameters should not be null\");\n+            Objects.requireNonNull(interceptors, \"Interceptor list should not be null\");\n+            return provider.run(network, workingStateId, detector, filter, computationManager, parameters, contingenciesProvider, interceptors);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network, LimitViolationFilter filter,\n+                                                                  ComputationManager computationManager) {\n+            return runAsync(network, network.getVariantManager().getWorkingVariantId(), new DefaultLimitViolationDetector(), filter, computationManager, SecurityAnalysisParameters.load(), new EmptyContingencyListProvider(), Collections.emptyList());\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network, ComputationManager computationManager) {\n+            return runAsync(network, LimitViolationFilter.load(), computationManager);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network) {\n+            return runAsync(network, new LocalComputationManagerFactory().create());\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResultWithLog> runAsyncWithLog(Network network,\n+                                                                                String workingStateId,\n+                                                                                LimitViolationDetector detector,\n+                                                                                LimitViolationFilter filter,\n+                                                                                ComputationManager computationManager,\n+                                                                                SecurityAnalysisParameters parameters,\n+                                                                                ContingenciesProvider contingenciesProvider,\n+                                                                                List<SecurityAnalysisInterceptor> interceptors) {\n+            Objects.requireNonNull(network, \"Network should not be null\");\n+            Objects.requireNonNull(workingStateId, \"WorkingVariantId should not be null\");\n+            Objects.requireNonNull(detector, \"LimitViolation detector should not be null\");\n+            Objects.requireNonNull(filter, \"LimitViolation filter should not be null\");\n+            Objects.requireNonNull(computationManager, \"ComputationManager should not be null\");\n+            Objects.requireNonNull(contingenciesProvider, \"Contingencies provider should not be null\");\n+            Objects.requireNonNull(parameters, \"Sensitivity analysis parameters should not be null\");\n+            Objects.requireNonNull(interceptors, \"Interceptor list should not be null\");\n+            return provider.runWithLog(network, workingStateId, detector, filter, computationManager, parameters, contingenciesProvider, interceptors);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk0NTIwMA=="}, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQzNDM1Mw==", "bodyText": "So in the next PR, the plan is to move the code of SecurityAnalysisImpl in this class?", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r559434353", "createdAt": "2021-01-18T09:43:38Z", "author": {"login": "geofjamg"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisImplProvider.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+@AutoService(SecurityAnalysisProvider.class)\n+public class SecurityAnalysisImplProvider implements SecurityAnalysisProvider {\n+\n+    private static final String PROVIDER_NAME = \"SecurityAnalysisImpl\";\n+    private static final String PROVIDER_VERSION = \"1.0\";\n+\n+    @Override\n+    public CompletableFuture<SecurityAnalysisResult> run(Network network,\n+                                                         String workingVariantId,\n+                                                         LimitViolationDetector detector,\n+                                                         LimitViolationFilter filter,\n+                                                         ComputationManager computationManager,\n+                                                         SecurityAnalysisParameters parameters,\n+                                                         ContingenciesProvider contingenciesProvider,\n+                                                         List<SecurityAnalysisInterceptor> interceptors) {\n+        SecurityAnalysisImpl securityAnalysis = new SecurityAnalysisImpl(network, detector, filter, computationManager);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQzNjU4MQ==", "bodyText": "For me LimitViolationDetector has nothing to do in the API, because it supposes that violation detection is done on IIDM model. It is not the case for instance in OLF, because violation detection is  done one a more internal data model to speed up performance. I guess it should be the case too, with hades2.\n@sylvlecl i think this is you who add it to the API, do you really need it?", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r559436581", "createdAt": "2021-01-18T09:46:53Z", "author": {"login": "geofjamg"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisProvider.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Security analysis provider\n+ *\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+public interface SecurityAnalysisProvider extends Versionable, PlatformConfigNamedProvider {\n+\n+    /**\n+     * Run an asynchronous single security analysis job.\n+     *\n+     * @param network IIDM network on which the security analysis will be performed\n+     * @param workingVariantId network variant ID on which the analysis will be performed\n+     * @param detector\n+     * @param filter\n+     * @param computationManager\n+     * @param parameters specific security analysis parameters\n+     * @param contingenciesProvider provides list of contingencies\n+     * @param interceptors\n+     * @return a {@link CompletableFuture} on {@link SecurityAnalysisResult} that gathers sensitivity factor values\n+     */\n+    CompletableFuture<SecurityAnalysisResult> run(Network network,\n+                                                  String workingVariantId,\n+                                                  LimitViolationDetector detector,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQzODQ5Nw==", "bodyText": "Maybe we should just remove SecurityAnalysisResultWithLog and move logBytes to SecurityAnalysisResult (and up to an impl to use it or not) so that the API will be cleaner?", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r559438497", "createdAt": "2021-01-18T09:49:42Z", "author": {"login": "geofjamg"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysis2.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfig;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.computation.local.LocalComputationManagerFactory;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.contingency.EmptyContingencyListProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.detectors.DefaultLimitViolationDetector;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ *\n+ * Sensitivity analysis main API. It is a utility class (so with only static methods) used as an entry point for running\n+ * a sensitivity analysis allowing to choose either a specific implementation or just to rely on the default one.\n+ *\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+public final class SecurityAnalysis2 {\n+\n+    private SecurityAnalysis2() {\n+        throw new AssertionError(\"Utility class should not been instantiated\");\n+    }\n+\n+    /**\n+     * A sensitivity analysis runner is responsible for providing convenient methods on top of {@link SecurityAnalysisProvider}:\n+     * several variants of synchronous and asynchronous run with default parameters.\n+     */\n+    public static final class Runner implements Versionable {\n+\n+        private final SecurityAnalysisProvider provider;\n+\n+        private Runner(SecurityAnalysisProvider provider) {\n+            this.provider = Objects.requireNonNull(provider);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network,\n+                                                                  String workingStateId,\n+                                                                  LimitViolationDetector detector,\n+                                                                  LimitViolationFilter filter,\n+                                                                  ComputationManager computationManager,\n+                                                                  SecurityAnalysisParameters parameters,\n+                                                                  ContingenciesProvider contingenciesProvider,\n+                                                                  List<SecurityAnalysisInterceptor> interceptors) {\n+            Objects.requireNonNull(network, \"Network should not be null\");\n+            Objects.requireNonNull(workingStateId, \"WorkingVariantId should not be null\");\n+            Objects.requireNonNull(detector, \"LimitViolation detector should not be null\");\n+            Objects.requireNonNull(filter, \"LimitViolation filter should not be null\");\n+            Objects.requireNonNull(computationManager, \"ComputationManager should not be null\");\n+            Objects.requireNonNull(contingenciesProvider, \"Contingencies provider should not be null\");\n+            Objects.requireNonNull(parameters, \"Sensitivity analysis parameters should not be null\");\n+            Objects.requireNonNull(interceptors, \"Interceptor list should not be null\");\n+            return provider.run(network, workingStateId, detector, filter, computationManager, parameters, contingenciesProvider, interceptors);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network, LimitViolationFilter filter,\n+                                                                  ComputationManager computationManager) {\n+            return runAsync(network, network.getVariantManager().getWorkingVariantId(), new DefaultLimitViolationDetector(), filter, computationManager, SecurityAnalysisParameters.load(), new EmptyContingencyListProvider(), Collections.emptyList());\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network, ComputationManager computationManager) {\n+            return runAsync(network, LimitViolationFilter.load(), computationManager);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network) {\n+            return runAsync(network, new LocalComputationManagerFactory().create());\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResultWithLog> runAsyncWithLog(Network network,\n+                                                                                String workingStateId,\n+                                                                                LimitViolationDetector detector,\n+                                                                                LimitViolationFilter filter,\n+                                                                                ComputationManager computationManager,\n+                                                                                SecurityAnalysisParameters parameters,\n+                                                                                ContingenciesProvider contingenciesProvider,\n+                                                                                List<SecurityAnalysisInterceptor> interceptors) {\n+            Objects.requireNonNull(network, \"Network should not be null\");\n+            Objects.requireNonNull(workingStateId, \"WorkingVariantId should not be null\");\n+            Objects.requireNonNull(detector, \"LimitViolation detector should not be null\");\n+            Objects.requireNonNull(filter, \"LimitViolation filter should not be null\");\n+            Objects.requireNonNull(computationManager, \"ComputationManager should not be null\");\n+            Objects.requireNonNull(contingenciesProvider, \"Contingencies provider should not be null\");\n+            Objects.requireNonNull(parameters, \"Sensitivity analysis parameters should not be null\");\n+            Objects.requireNonNull(interceptors, \"Interceptor list should not be null\");\n+            return provider.runWithLog(network, workingStateId, detector, filter, computationManager, parameters, contingenciesProvider, interceptors);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk0NTIwMA=="}, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 100}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwMzEzMjU2", "url": "https://github.com/powsybl/powsybl-core/pull/1585#pullrequestreview-570313256", "createdAt": "2021-01-18T09:35:30Z", "commit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwOTozNTozMFrOIVg1ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxMDowODo0OFrOIViLFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQyOTAyNw==", "bodyText": "Be careful to also update javadoc before merging (sensitivity --> security)", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r559429027", "createdAt": "2021-01-18T09:35:30Z", "author": {"login": "sylvlecl"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysis2.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfig;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.computation.local.LocalComputationManagerFactory;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.contingency.EmptyContingencyListProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.detectors.DefaultLimitViolationDetector;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ *\n+ * Sensitivity analysis main API. It is a utility class (so with only static methods) used as an entry point for running", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQzMjQ0NA==", "bodyText": "I have a design interrogation since the LimitViolationDetector was introduced : I think there is an overlap between the roles of the detector and of the filter. Maybe the filter should only be implemented inside the detection (for instance as a detector wrapping another one).\nI just raise this for further thought, I guess it should be part of a PR on its own.", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r559432444", "createdAt": "2021-01-18T09:40:37Z", "author": {"login": "sylvlecl"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysis2.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfig;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.computation.local.LocalComputationManagerFactory;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.contingency.EmptyContingencyListProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.detectors.DefaultLimitViolationDetector;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ *\n+ * Sensitivity analysis main API. It is a utility class (so with only static methods) used as an entry point for running\n+ * a sensitivity analysis allowing to choose either a specific implementation or just to rely on the default one.\n+ *\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+public final class SecurityAnalysis2 {\n+\n+    private SecurityAnalysis2() {\n+        throw new AssertionError(\"Utility class should not been instantiated\");\n+    }\n+\n+    /**\n+     * A sensitivity analysis runner is responsible for providing convenient methods on top of {@link SecurityAnalysisProvider}:\n+     * several variants of synchronous and asynchronous run with default parameters.\n+     */\n+    public static final class Runner implements Versionable {\n+\n+        private final SecurityAnalysisProvider provider;\n+\n+        private Runner(SecurityAnalysisProvider provider) {\n+            this.provider = Objects.requireNonNull(provider);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network,\n+                                                                  String workingStateId,\n+                                                                  LimitViolationDetector detector,\n+                                                                  LimitViolationFilter filter,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQzNzQ0Ng==", "bodyText": "javadoc to be updated here too", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r559437446", "createdAt": "2021-01-18T09:48:04Z", "author": {"login": "sylvlecl"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysis2.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfig;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.computation.local.LocalComputationManagerFactory;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.contingency.EmptyContingencyListProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.detectors.DefaultLimitViolationDetector;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ *\n+ * Sensitivity analysis main API. It is a utility class (so with only static methods) used as an entry point for running\n+ * a sensitivity analysis allowing to choose either a specific implementation or just to rely on the default one.\n+ *\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+public final class SecurityAnalysis2 {\n+\n+    private SecurityAnalysis2() {\n+        throw new AssertionError(\"Utility class should not been instantiated\");\n+    }\n+\n+    /**\n+     * A sensitivity analysis runner is responsible for providing convenient methods on top of {@link SecurityAnalysisProvider}:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQzNzk5Mw==", "bodyText": "message to be adapted (\"sensitivity\")", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r559437993", "createdAt": "2021-01-18T09:48:53Z", "author": {"login": "sylvlecl"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysis2.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfig;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.computation.local.LocalComputationManagerFactory;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.contingency.EmptyContingencyListProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.detectors.DefaultLimitViolationDetector;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ *\n+ * Sensitivity analysis main API. It is a utility class (so with only static methods) used as an entry point for running\n+ * a sensitivity analysis allowing to choose either a specific implementation or just to rely on the default one.\n+ *\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+public final class SecurityAnalysis2 {\n+\n+    private SecurityAnalysis2() {\n+        throw new AssertionError(\"Utility class should not been instantiated\");\n+    }\n+\n+    /**\n+     * A sensitivity analysis runner is responsible for providing convenient methods on top of {@link SecurityAnalysisProvider}:\n+     * several variants of synchronous and asynchronous run with default parameters.\n+     */\n+    public static final class Runner implements Versionable {\n+\n+        private final SecurityAnalysisProvider provider;\n+\n+        private Runner(SecurityAnalysisProvider provider) {\n+            this.provider = Objects.requireNonNull(provider);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network,\n+                                                                  String workingStateId,\n+                                                                  LimitViolationDetector detector,\n+                                                                  LimitViolationFilter filter,\n+                                                                  ComputationManager computationManager,\n+                                                                  SecurityAnalysisParameters parameters,\n+                                                                  ContingenciesProvider contingenciesProvider,\n+                                                                  List<SecurityAnalysisInterceptor> interceptors) {\n+            Objects.requireNonNull(network, \"Network should not be null\");\n+            Objects.requireNonNull(workingStateId, \"WorkingVariantId should not be null\");\n+            Objects.requireNonNull(detector, \"LimitViolation detector should not be null\");\n+            Objects.requireNonNull(filter, \"LimitViolation filter should not be null\");\n+            Objects.requireNonNull(computationManager, \"ComputationManager should not be null\");\n+            Objects.requireNonNull(contingenciesProvider, \"Contingencies provider should not be null\");\n+            Objects.requireNonNull(parameters, \"Sensitivity analysis parameters should not be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ0MjAxMw==", "bodyText": "Should we seize this opportunity to rename the SecurityAnalysisImpl to something more meaningful, like DefaultSecurityAnalysis or even more explicit LoadFlowBasedSecurityAnalysis  ?\nThe \"impl\" suffix does not seem appropriate if the target is to have multiple implementations (even more when this \"impl\" is not suitable for most users).", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r559442013", "createdAt": "2021-01-18T09:55:17Z", "author": {"login": "sylvlecl"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisImplProvider.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+@AutoService(SecurityAnalysisProvider.class)\n+public class SecurityAnalysisImplProvider implements SecurityAnalysisProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ0MjI2Ng==", "bodyText": "See comment about naming", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r559442266", "createdAt": "2021-01-18T09:55:37Z", "author": {"login": "sylvlecl"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisImplProvider.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+@AutoService(SecurityAnalysisProvider.class)\n+public class SecurityAnalysisImplProvider implements SecurityAnalysisProvider {\n+\n+    private static final String PROVIDER_NAME = \"SecurityAnalysisImpl\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ0NzQ1Mw==", "bodyText": "Also, is it OK to leave it in the security-analysis-api module ?\nThe consequence is the following: you will always have that implementation in the classpath, which means that if you add another implementation you want to use, you will not be able to rely on the behaviour which allows to configure nothing to use the only implementation in the classpath.", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r559447453", "createdAt": "2021-01-18T10:03:35Z", "author": {"login": "sylvlecl"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisImplProvider.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+@AutoService(SecurityAnalysisProvider.class)\n+public class SecurityAnalysisImplProvider implements SecurityAnalysisProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ0MjAxMw=="}, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ1MDkwMQ==", "bodyText": "There was one question with this approach : how do you handle serialization of this ? Do you want to serialize it in the JSON representing the result or not ?", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r559450901", "createdAt": "2021-01-18T10:08:48Z", "author": {"login": "sylvlecl"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysis2.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfig;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.computation.local.LocalComputationManagerFactory;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.contingency.EmptyContingencyListProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.detectors.DefaultLimitViolationDetector;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ *\n+ * Sensitivity analysis main API. It is a utility class (so with only static methods) used as an entry point for running\n+ * a sensitivity analysis allowing to choose either a specific implementation or just to rely on the default one.\n+ *\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+public final class SecurityAnalysis2 {\n+\n+    private SecurityAnalysis2() {\n+        throw new AssertionError(\"Utility class should not been instantiated\");\n+    }\n+\n+    /**\n+     * A sensitivity analysis runner is responsible for providing convenient methods on top of {@link SecurityAnalysisProvider}:\n+     * several variants of synchronous and asynchronous run with default parameters.\n+     */\n+    public static final class Runner implements Versionable {\n+\n+        private final SecurityAnalysisProvider provider;\n+\n+        private Runner(SecurityAnalysisProvider provider) {\n+            this.provider = Objects.requireNonNull(provider);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network,\n+                                                                  String workingStateId,\n+                                                                  LimitViolationDetector detector,\n+                                                                  LimitViolationFilter filter,\n+                                                                  ComputationManager computationManager,\n+                                                                  SecurityAnalysisParameters parameters,\n+                                                                  ContingenciesProvider contingenciesProvider,\n+                                                                  List<SecurityAnalysisInterceptor> interceptors) {\n+            Objects.requireNonNull(network, \"Network should not be null\");\n+            Objects.requireNonNull(workingStateId, \"WorkingVariantId should not be null\");\n+            Objects.requireNonNull(detector, \"LimitViolation detector should not be null\");\n+            Objects.requireNonNull(filter, \"LimitViolation filter should not be null\");\n+            Objects.requireNonNull(computationManager, \"ComputationManager should not be null\");\n+            Objects.requireNonNull(contingenciesProvider, \"Contingencies provider should not be null\");\n+            Objects.requireNonNull(parameters, \"Sensitivity analysis parameters should not be null\");\n+            Objects.requireNonNull(interceptors, \"Interceptor list should not be null\");\n+            return provider.run(network, workingStateId, detector, filter, computationManager, parameters, contingenciesProvider, interceptors);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network, LimitViolationFilter filter,\n+                                                                  ComputationManager computationManager) {\n+            return runAsync(network, network.getVariantManager().getWorkingVariantId(), new DefaultLimitViolationDetector(), filter, computationManager, SecurityAnalysisParameters.load(), new EmptyContingencyListProvider(), Collections.emptyList());\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network, ComputationManager computationManager) {\n+            return runAsync(network, LimitViolationFilter.load(), computationManager);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network) {\n+            return runAsync(network, new LocalComputationManagerFactory().create());\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResultWithLog> runAsyncWithLog(Network network,\n+                                                                                String workingStateId,\n+                                                                                LimitViolationDetector detector,\n+                                                                                LimitViolationFilter filter,\n+                                                                                ComputationManager computationManager,\n+                                                                                SecurityAnalysisParameters parameters,\n+                                                                                ContingenciesProvider contingenciesProvider,\n+                                                                                List<SecurityAnalysisInterceptor> interceptors) {\n+            Objects.requireNonNull(network, \"Network should not be null\");\n+            Objects.requireNonNull(workingStateId, \"WorkingVariantId should not be null\");\n+            Objects.requireNonNull(detector, \"LimitViolation detector should not be null\");\n+            Objects.requireNonNull(filter, \"LimitViolation filter should not be null\");\n+            Objects.requireNonNull(computationManager, \"ComputationManager should not be null\");\n+            Objects.requireNonNull(contingenciesProvider, \"Contingencies provider should not be null\");\n+            Objects.requireNonNull(parameters, \"Sensitivity analysis parameters should not be null\");\n+            Objects.requireNonNull(interceptors, \"Interceptor list should not be null\");\n+            return provider.runWithLog(network, workingStateId, detector, filter, computationManager, parameters, contingenciesProvider, interceptors);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk0NTIwMA=="}, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 100}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb9952ee5e32ad1e726d48efdb49359357129bd0", "author": {"user": {"login": "tadam50", "name": "Thomas ADAM"}}, "url": "https://github.com/powsybl/powsybl-core/commit/bb9952ee5e32ad1e726d48efdb49359357129bd0", "committedDate": "2021-01-22T14:27:25Z", "message": "Add SecurityAnalysisProvider\n\nSigned-off-by: Thomas ADAM <tadam@silicom.fr>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a", "author": {"user": {"login": "tadam50", "name": "Thomas ADAM"}}, "url": "https://github.com/powsybl/powsybl-core/commit/87052ec9bc8131b9305952c3b74d7c5a11e3549a", "committedDate": "2020-12-22T13:49:51Z", "message": "Add SecurityAnalysisProvider\n\nSigned-off-by: Thomas ADAM <tadam@silicom.fr>"}, "afterCommit": {"oid": "bb9952ee5e32ad1e726d48efdb49359357129bd0", "author": {"user": {"login": "tadam50", "name": "Thomas ADAM"}}, "url": "https://github.com/powsybl/powsybl-core/commit/bb9952ee5e32ad1e726d48efdb49359357129bd0", "committedDate": "2021-01-22T14:27:25Z", "message": "Add SecurityAnalysisProvider\n\nSigned-off-by: Thomas ADAM <tadam@silicom.fr>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1b1121335815e0abc6ffa1c6e8c9f0c8408f5c0", "author": {"user": {"login": "tadam50", "name": "Thomas ADAM"}}, "url": "https://github.com/powsybl/powsybl-core/commit/b1b1121335815e0abc6ffa1c6e8c9f0c8408f5c0", "committedDate": "2021-01-22T16:56:27Z", "message": "Add FIXME to rename later and fix comments issues\n\nSigned-off-by: Thomas ADAM <tadam@silicom.fr>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d7ede2f75d6d3842d4252bac8b59053f3839345", "author": {"user": {"login": "tadam50", "name": "Thomas ADAM"}}, "url": "https://github.com/powsybl/powsybl-core/commit/9d7ede2f75d6d3842d4252bac8b59053f3839345", "committedDate": "2021-01-26T13:18:33Z", "message": "Remove runWithLog method in SecurityAnalysisProvider\n\nSigned-off-by: Thomas ADAM <tadam@silicom.fr>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4094, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}