{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNzU2MjEw", "number": 1155, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNTowNzoyN1rODlFJKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTozNTowOFrODoYvjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjA4MTcxOnYy", "diffSide": "RIGHT", "path": "sensitivity-api/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNTowNzoyN1rOFxw8-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNTowNzoyN1rOFxw8-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcyNjU4NA==", "bodyText": "Replace com.powsybl by ${project.groupId}", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387726584", "createdAt": "2020-03-04T15:07:27Z", "author": {"login": "miovd"}, "path": "sensitivity-api/pom.xml", "diffHunk": "@@ -93,6 +93,12 @@\n             <version>${project.version}</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>com.powsybl</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2290faa3a04182c0ab25a5d66ca37d6a42946def"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjA4MzY4OnYy", "diffSide": "RIGHT", "path": "sensitivity-api/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNTowODowMFrOFxw-OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNTowODowMFrOFxw-OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcyNjkwNQ==", "bodyText": "Why is it in compile scope?", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387726905", "createdAt": "2020-03-04T15:08:00Z", "author": {"login": "miovd"}, "path": "sensitivity-api/pom.xml", "diffHunk": "@@ -93,6 +93,12 @@\n             <version>${project.version}</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>com.powsybl</groupId>\n+            <artifactId>powsybl-contingency-api</artifactId>\n+            <version>${project.version}</version>\n+            <scope>compile</scope>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2290faa3a04182c0ab25a5d66ca37d6a42946def"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjEwMjI1OnYy", "diffSide": "RIGHT", "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNToxMjoxOVrOFxxJtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMDozMjo0OVrOFy0M-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcyOTg0NA==", "bodyText": "add a default implementation to prevent breaking change here", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387729844", "createdAt": "2020-03-04T15:12:19Z", "author": {"login": "miovd"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputation.java", "diffHunk": "@@ -28,12 +29,24 @@\n  */\n public interface SensitivityComputation extends Versionable {\n     /**\n-     * Run an asynchronous sensitivity computation job using given parameters and input provider\n+     * Run an asynchronous systematic sensitivity computation job using given parameters and input provider\n      *\n      * @param factorsProvider sensitivity factors provider for the computation\n+     * @param contingenciesProvider contingencies provider for the computation\n      * @param workingStateId id of the network base state for the computation\n      * @param sensiParameters sensitivity computation parameters\n-     * @return the sensitivity computation results\n+     * @return the sensitivity computation results in N and N-1\n+     */\n+    CompletableFuture<SensitivityComputationResults> run(SensitivityFactorsProvider factorsProvider, ContingenciesProvider contingenciesProvider, String workingStateId, SensitivityComputationParameters sensiParameters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2290faa3a04182c0ab25a5d66ca37d6a42946def"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgyODQxMQ==", "bodyText": "I had thought of handling that on the implementation side, is it wrong?", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r388828411", "createdAt": "2020-03-06T10:32:49Z", "author": {"login": "agnesLeroy"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputation.java", "diffHunk": "@@ -28,12 +29,24 @@\n  */\n public interface SensitivityComputation extends Versionable {\n     /**\n-     * Run an asynchronous sensitivity computation job using given parameters and input provider\n+     * Run an asynchronous systematic sensitivity computation job using given parameters and input provider\n      *\n      * @param factorsProvider sensitivity factors provider for the computation\n+     * @param contingenciesProvider contingencies provider for the computation\n      * @param workingStateId id of the network base state for the computation\n      * @param sensiParameters sensitivity computation parameters\n-     * @return the sensitivity computation results\n+     * @return the sensitivity computation results in N and N-1\n+     */\n+    CompletableFuture<SensitivityComputationResults> run(SensitivityFactorsProvider factorsProvider, ContingenciesProvider contingenciesProvider, String workingStateId, SensitivityComputationParameters sensiParameters);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcyOTg0NA=="}, "originalCommit": {"oid": "2290faa3a04182c0ab25a5d66ca37d6a42946def"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjEzNDMwOnYy", "diffSide": "RIGHT", "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNToxOTo0NlrOFxxeLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNToxOTo0NlrOFxxeLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzczNTA4Nw==", "bodyText": "Not sure having this field is a good idea. It could lead to inconsistent data (e.g. empty contingencies map and contingenciesPresent as true or non-empty contingencies map and contingenciesPresent as false. Why do you need this field? Isn't it enough to check that sensitivityValueContingencies is empty or not?", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387735087", "createdAt": "2020-03-04T15:19:46Z", "author": {"login": "miovd"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "diffHunk": "@@ -41,23 +51,34 @@\n     @JsonProperty(\"values\")\n     private final List<SensitivityValue> sensitivityValues;\n \n+    @JsonProperty(\"contingencies present\")\n+    private final boolean contingenciesPresent;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2290faa3a04182c0ab25a5d66ca37d6a42946def"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjE0MjY0OnYy", "diffSide": "RIGHT", "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNToyMTo0N1rOFxxjlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNToyMTo0N1rOFxxjlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzczNjQ2OQ==", "bodyText": "Same remark as above. This method can return !sensitivityValuesContingencies.isEmpty()", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387736469", "createdAt": "2020-03-04T15:21:47Z", "author": {"login": "miovd"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "diffHunk": "@@ -90,61 +111,142 @@ public String getLogs() {\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values.\n+     * Get a collection of all the sensitivity values in state N.\n      *\n-     * @return a collection of all the sensitivity values.\n+     * @return a collection of all the sensitivity values in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValues() {\n         return Collections.unmodifiableCollection(sensitivityValues);\n     }\n \n+\n     /**\n-     * Get a collection of all the sensitivity values associated with given function.\n+     * Get a collection of all the sensitivity values associated with given function in state N.\n      *\n      * @param function sensitivity function\n-     * @return a collection of all the sensitivity values associated with given function\n+     * @return a collection of all the sensitivity values associated with given function in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function) {\n         return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values associated with given variable\n+     * Get a collection of all the sensitivity values associated with given variable in state N.\n      *\n      * @param variable sensitivity variable\n-     * @return a collection of all the sensitivity values associated with given variable\n+     * @return a collection of all the sensitivity values associated with given variable in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable) {\n         return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Get the sensitivity value associated with given function and given variable\n+     * Get the sensitivity value associated with given function and given variable in state N.\n      *\n      * @param function sensitivity function\n      * @param variable sensitivity variable\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFunction function, SensitivityVariable variable) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n-            && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n+                && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", function.getId(), variable.getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, function.getId(), variable.getId()));\n         }\n         return returnValue.get();\n     }\n \n     /**\n-     * Get the sensitivity value associated with given factor\n+     * Get the sensitivity value associated with given factor in state N.\n      *\n      * @param factor sensitivity factor\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFactor factor) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().equals(factor)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", factor.getFunction().getId(), factor.getVariable().getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, factor.getFunction().getId(), factor.getVariable().getId()));\n         }\n         return returnValue.get();\n     }\n+\n+    /**\n+     * Get the status of the presence of contingencies\n+     *\n+     * @return true if the computation contains contingencies, false otherwise\n+     */\n+    public boolean contingenciesArePresent() {\n+        return contingenciesPresent;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2290faa3a04182c0ab25a5d66ca37d6a42946def"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjE0NzUzOnYy", "diffSide": "RIGHT", "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNToyMzowNFrOFxxmyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNToyMzowNFrOFxxmyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzczNzI5MQ==", "bodyText": "Return a copy of the map and not the map itself to prevent unsafe changes:\nreturn Collections.unmodifiableMap(sensitivityValuesContingencies);", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387737291", "createdAt": "2020-03-04T15:23:04Z", "author": {"login": "miovd"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "diffHunk": "@@ -90,61 +111,142 @@ public String getLogs() {\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values.\n+     * Get a collection of all the sensitivity values in state N.\n      *\n-     * @return a collection of all the sensitivity values.\n+     * @return a collection of all the sensitivity values in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValues() {\n         return Collections.unmodifiableCollection(sensitivityValues);\n     }\n \n+\n     /**\n-     * Get a collection of all the sensitivity values associated with given function.\n+     * Get a collection of all the sensitivity values associated with given function in state N.\n      *\n      * @param function sensitivity function\n-     * @return a collection of all the sensitivity values associated with given function\n+     * @return a collection of all the sensitivity values associated with given function in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function) {\n         return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values associated with given variable\n+     * Get a collection of all the sensitivity values associated with given variable in state N.\n      *\n      * @param variable sensitivity variable\n-     * @return a collection of all the sensitivity values associated with given variable\n+     * @return a collection of all the sensitivity values associated with given variable in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable) {\n         return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Get the sensitivity value associated with given function and given variable\n+     * Get the sensitivity value associated with given function and given variable in state N.\n      *\n      * @param function sensitivity function\n      * @param variable sensitivity variable\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFunction function, SensitivityVariable variable) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n-            && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n+                && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", function.getId(), variable.getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, function.getId(), variable.getId()));\n         }\n         return returnValue.get();\n     }\n \n     /**\n-     * Get the sensitivity value associated with given factor\n+     * Get the sensitivity value associated with given factor in state N.\n      *\n      * @param factor sensitivity factor\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFactor factor) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().equals(factor)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", factor.getFunction().getId(), factor.getVariable().getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, factor.getFunction().getId(), factor.getVariable().getId()));\n         }\n         return returnValue.get();\n     }\n+\n+    /**\n+     * Get the status of the presence of contingencies\n+     *\n+     * @return true if the computation contains contingencies, false otherwise\n+     */\n+    public boolean contingenciesArePresent() {\n+        return contingenciesPresent;\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values for all contingencies.\n+     *\n+     * @return a collection of all the sensitivity values for all contingencies.\n+     */\n+    public Map<String, List<SensitivityValue>> getSensitivityValuesContingencies() {\n+        return sensitivityValuesContingencies;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2290faa3a04182c0ab25a5d66ca37d6a42946def"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjE1Mzk1OnYy", "diffSide": "RIGHT", "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNToyNDozMVrOFxxqsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNToyNDozMVrOFxxqsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzczODI4OQ==", "bodyText": "Don't set directly the map but set as copy to prevent unsafe changes:\nthis.sensitivityValuesContingencies = Collections.unmodifiableMap(sensitivityValuesContingencies);", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387738289", "createdAt": "2020-03-04T15:24:31Z", "author": {"login": "miovd"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "diffHunk": "@@ -41,23 +51,34 @@\n     @JsonProperty(\"values\")\n     private final List<SensitivityValue> sensitivityValues;\n \n+    @JsonProperty(\"contingencies present\")\n+    private final boolean contingenciesPresent;\n+\n+    @JsonProperty(\"contingencies values\")\n+    private final Map<String, List<SensitivityValue>> sensitivityValuesContingencies;\n+\n     /**\n      * Hades2 sensitivity computation results\n      *\n      * @param ok true if the computation succeeded, false otherwise\n      * @param metrics map of metrics about the computation\n      * @param logs computation logs\n-     * @param values result values of the senstivity computation. Must be non null.\n+     * @param sensitivityValues result values of the senstivity computation in N\n+     * @param sensitivityValuesContingencies result values of the senstivity computation on contingencies\n      */\n     @JsonCreator\n     public SensitivityComputationResults(@JsonProperty(\"ok\") boolean ok,\n                                          @JsonProperty(\"metrics\") Map<String, String> metrics,\n                                          @JsonProperty(\"logs\") String logs,\n-                                         @JsonProperty(\"values\") List<SensitivityValue> values) {\n+                                         @JsonProperty(\"values\") List<SensitivityValue> sensitivityValues,\n+                                         @JsonProperty(\"contingencies present\") boolean contingenciesPresent,\n+                                         @JsonProperty(\"contingencyId values\") Map<String, List<SensitivityValue>> sensitivityValuesContingencies) {\n         this.ok = ok;\n         this.metrics = Objects.requireNonNull(metrics);\n         this.logs = Objects.requireNonNull(logs);\n-        this.sensitivityValues = Objects.requireNonNull(values);\n+        this.sensitivityValues = Objects.requireNonNull(sensitivityValues);\n+        this.contingenciesPresent = contingenciesPresent;\n+        this.sensitivityValuesContingencies = sensitivityValuesContingencies;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2290faa3a04182c0ab25a5d66ca37d6a42946def"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjE1ODM1OnYy", "diffSide": "RIGHT", "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNToyNToyOFrOFxxtew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNToyNToyOFrOFxxtew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzczOTAwMw==", "bodyText": "Indent to make it more readable:\nsensitivityValuesContingencies.get(contingencyId).stream()\n     .filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable))\n     .collect(Collectors.toList());", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387739003", "createdAt": "2020-03-04T15:25:28Z", "author": {"login": "miovd"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "diffHunk": "@@ -90,61 +111,142 @@ public String getLogs() {\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values.\n+     * Get a collection of all the sensitivity values in state N.\n      *\n-     * @return a collection of all the sensitivity values.\n+     * @return a collection of all the sensitivity values in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValues() {\n         return Collections.unmodifiableCollection(sensitivityValues);\n     }\n \n+\n     /**\n-     * Get a collection of all the sensitivity values associated with given function.\n+     * Get a collection of all the sensitivity values associated with given function in state N.\n      *\n      * @param function sensitivity function\n-     * @return a collection of all the sensitivity values associated with given function\n+     * @return a collection of all the sensitivity values associated with given function in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function) {\n         return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values associated with given variable\n+     * Get a collection of all the sensitivity values associated with given variable in state N.\n      *\n      * @param variable sensitivity variable\n-     * @return a collection of all the sensitivity values associated with given variable\n+     * @return a collection of all the sensitivity values associated with given variable in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable) {\n         return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Get the sensitivity value associated with given function and given variable\n+     * Get the sensitivity value associated with given function and given variable in state N.\n      *\n      * @param function sensitivity function\n      * @param variable sensitivity variable\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFunction function, SensitivityVariable variable) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n-            && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n+                && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", function.getId(), variable.getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, function.getId(), variable.getId()));\n         }\n         return returnValue.get();\n     }\n \n     /**\n-     * Get the sensitivity value associated with given factor\n+     * Get the sensitivity value associated with given factor in state N.\n      *\n      * @param factor sensitivity factor\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFactor factor) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().equals(factor)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", factor.getFunction().getId(), factor.getVariable().getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, factor.getFunction().getId(), factor.getVariable().getId()));\n         }\n         return returnValue.get();\n     }\n+\n+    /**\n+     * Get the status of the presence of contingencies\n+     *\n+     * @return true if the computation contains contingencies, false otherwise\n+     */\n+    public boolean contingenciesArePresent() {\n+        return contingenciesPresent;\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values for all contingencies.\n+     *\n+     * @return a collection of all the sensitivity values for all contingencies.\n+     */\n+    public Map<String, List<SensitivityValue>> getSensitivityValuesContingencies() {\n+        return sensitivityValuesContingencies;\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values associated with given function\n+     * for a specific contingency.\n+     *\n+     * @param function sensitivity function\n+     * @param contingencyId the ID of the considered contingency\n+     * @return a collection of all the sensitivity values associated with given function for the given contingencyId\n+     */\n+    public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function, String contingencyId) {\n+        return sensitivityValuesContingencies.get(contingencyId).stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values associated with given variable\n+     * for a specific contingency.\n+     *\n+     * @param variable sensitivity variable\n+     * @param contingencyId the ID of the considered contingency\n+     * @return a collection of all the sensitivity values associated with given variable\n+     */\n+    public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable, String contingencyId) {\n+        return sensitivityValuesContingencies.get(contingencyId).stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable)).collect(Collectors.toList());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2290faa3a04182c0ab25a5d66ca37d6a42946def"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjE2NzQzOnYy", "diffSide": "RIGHT", "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNToyNzoyNFrOFxxzFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNToyNzoyNFrOFxxzFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc0MDQzNw==", "bodyText": "You can simplify this code:\nreturn sensitivityValuesContingencies.get(contingencyId).stream()\n    .filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n                && sensitivityValue.getFactor().getVariable().equals(variable))\n    .findFirst()\n    .orElseThrow(() -> new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s at contingencyId %s.\", function.getId(), variable.getId(), contingencyId)));", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387740437", "createdAt": "2020-03-04T15:27:24Z", "author": {"login": "miovd"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "diffHunk": "@@ -90,61 +111,142 @@ public String getLogs() {\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values.\n+     * Get a collection of all the sensitivity values in state N.\n      *\n-     * @return a collection of all the sensitivity values.\n+     * @return a collection of all the sensitivity values in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValues() {\n         return Collections.unmodifiableCollection(sensitivityValues);\n     }\n \n+\n     /**\n-     * Get a collection of all the sensitivity values associated with given function.\n+     * Get a collection of all the sensitivity values associated with given function in state N.\n      *\n      * @param function sensitivity function\n-     * @return a collection of all the sensitivity values associated with given function\n+     * @return a collection of all the sensitivity values associated with given function in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function) {\n         return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values associated with given variable\n+     * Get a collection of all the sensitivity values associated with given variable in state N.\n      *\n      * @param variable sensitivity variable\n-     * @return a collection of all the sensitivity values associated with given variable\n+     * @return a collection of all the sensitivity values associated with given variable in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable) {\n         return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Get the sensitivity value associated with given function and given variable\n+     * Get the sensitivity value associated with given function and given variable in state N.\n      *\n      * @param function sensitivity function\n      * @param variable sensitivity variable\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFunction function, SensitivityVariable variable) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n-            && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n+                && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", function.getId(), variable.getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, function.getId(), variable.getId()));\n         }\n         return returnValue.get();\n     }\n \n     /**\n-     * Get the sensitivity value associated with given factor\n+     * Get the sensitivity value associated with given factor in state N.\n      *\n      * @param factor sensitivity factor\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFactor factor) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().equals(factor)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", factor.getFunction().getId(), factor.getVariable().getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, factor.getFunction().getId(), factor.getVariable().getId()));\n         }\n         return returnValue.get();\n     }\n+\n+    /**\n+     * Get the status of the presence of contingencies\n+     *\n+     * @return true if the computation contains contingencies, false otherwise\n+     */\n+    public boolean contingenciesArePresent() {\n+        return contingenciesPresent;\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values for all contingencies.\n+     *\n+     * @return a collection of all the sensitivity values for all contingencies.\n+     */\n+    public Map<String, List<SensitivityValue>> getSensitivityValuesContingencies() {\n+        return sensitivityValuesContingencies;\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values associated with given function\n+     * for a specific contingency.\n+     *\n+     * @param function sensitivity function\n+     * @param contingencyId the ID of the considered contingency\n+     * @return a collection of all the sensitivity values associated with given function for the given contingencyId\n+     */\n+    public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function, String contingencyId) {\n+        return sensitivityValuesContingencies.get(contingencyId).stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values associated with given variable\n+     * for a specific contingency.\n+     *\n+     * @param variable sensitivity variable\n+     * @param contingencyId the ID of the considered contingency\n+     * @return a collection of all the sensitivity values associated with given variable\n+     */\n+    public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable, String contingencyId) {\n+        return sensitivityValuesContingencies.get(contingencyId).stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable)).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Get the sensitivity value associated with given function and given variable for a specific contingency.\n+     *\n+     * @param function sensitivity function\n+     * @param variable sensitivity variable\n+     * @param contingencyId the ID of the considered contingency\n+     * @return the sensitivity value associated with given function and given variable\n+     */\n+    public SensitivityValue getSensitivityValue(SensitivityFunction function, SensitivityVariable variable, String contingencyId) {\n+        Optional<SensitivityValue> returnValue;\n+        returnValue = sensitivityValuesContingencies.get(contingencyId).stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n+                && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n+        if (!returnValue.isPresent()) {\n+            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s at contingencyId %s.\", function.getId(), variable.getId(), contingencyId));\n+        }\n+        return returnValue.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2290faa3a04182c0ab25a5d66ca37d6a42946def"}, "originalPosition": 216}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjE2OTk1OnYy", "diffSide": "RIGHT", "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNToyNzo1NFrOFxx0lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNToyNzo1NFrOFxx0lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc0MDgyMg==", "bodyText": "Same as above, this code can be simplified. (Code of other similar methods of this class can be simplified as well)", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387740822", "createdAt": "2020-03-04T15:27:54Z", "author": {"login": "miovd"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "diffHunk": "@@ -90,61 +111,142 @@ public String getLogs() {\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values.\n+     * Get a collection of all the sensitivity values in state N.\n      *\n-     * @return a collection of all the sensitivity values.\n+     * @return a collection of all the sensitivity values in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValues() {\n         return Collections.unmodifiableCollection(sensitivityValues);\n     }\n \n+\n     /**\n-     * Get a collection of all the sensitivity values associated with given function.\n+     * Get a collection of all the sensitivity values associated with given function in state N.\n      *\n      * @param function sensitivity function\n-     * @return a collection of all the sensitivity values associated with given function\n+     * @return a collection of all the sensitivity values associated with given function in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function) {\n         return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values associated with given variable\n+     * Get a collection of all the sensitivity values associated with given variable in state N.\n      *\n      * @param variable sensitivity variable\n-     * @return a collection of all the sensitivity values associated with given variable\n+     * @return a collection of all the sensitivity values associated with given variable in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable) {\n         return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Get the sensitivity value associated with given function and given variable\n+     * Get the sensitivity value associated with given function and given variable in state N.\n      *\n      * @param function sensitivity function\n      * @param variable sensitivity variable\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFunction function, SensitivityVariable variable) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n-            && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n+                && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", function.getId(), variable.getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, function.getId(), variable.getId()));\n         }\n         return returnValue.get();\n     }\n \n     /**\n-     * Get the sensitivity value associated with given factor\n+     * Get the sensitivity value associated with given factor in state N.\n      *\n      * @param factor sensitivity factor\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFactor factor) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().equals(factor)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", factor.getFunction().getId(), factor.getVariable().getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, factor.getFunction().getId(), factor.getVariable().getId()));\n         }\n         return returnValue.get();\n     }\n+\n+    /**\n+     * Get the status of the presence of contingencies\n+     *\n+     * @return true if the computation contains contingencies, false otherwise\n+     */\n+    public boolean contingenciesArePresent() {\n+        return contingenciesPresent;\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values for all contingencies.\n+     *\n+     * @return a collection of all the sensitivity values for all contingencies.\n+     */\n+    public Map<String, List<SensitivityValue>> getSensitivityValuesContingencies() {\n+        return sensitivityValuesContingencies;\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values associated with given function\n+     * for a specific contingency.\n+     *\n+     * @param function sensitivity function\n+     * @param contingencyId the ID of the considered contingency\n+     * @return a collection of all the sensitivity values associated with given function for the given contingencyId\n+     */\n+    public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function, String contingencyId) {\n+        return sensitivityValuesContingencies.get(contingencyId).stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values associated with given variable\n+     * for a specific contingency.\n+     *\n+     * @param variable sensitivity variable\n+     * @param contingencyId the ID of the considered contingency\n+     * @return a collection of all the sensitivity values associated with given variable\n+     */\n+    public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable, String contingencyId) {\n+        return sensitivityValuesContingencies.get(contingencyId).stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable)).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Get the sensitivity value associated with given function and given variable for a specific contingency.\n+     *\n+     * @param function sensitivity function\n+     * @param variable sensitivity variable\n+     * @param contingencyId the ID of the considered contingency\n+     * @return the sensitivity value associated with given function and given variable\n+     */\n+    public SensitivityValue getSensitivityValue(SensitivityFunction function, SensitivityVariable variable, String contingencyId) {\n+        Optional<SensitivityValue> returnValue;\n+        returnValue = sensitivityValuesContingencies.get(contingencyId).stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n+                && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n+        if (!returnValue.isPresent()) {\n+            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s at contingencyId %s.\", function.getId(), variable.getId(), contingencyId));\n+        }\n+        return returnValue.get();\n+    }\n+\n+    /**\n+     * Get the sensitivity value associated with given factor for a specific contingency\n+     *\n+     * @param factor sensitivity factor\n+     * @param contingencyId the ID of the considered contingency\n+     * @return the sensitivity value associated with given function and given variable\n+     */\n+    public SensitivityValue getSensitivityValue(SensitivityFactor factor, String contingencyId) {\n+        Optional<SensitivityValue> returnValue;\n+        returnValue = sensitivityValuesContingencies.get(contingencyId).stream().filter(sensitivityValue -> sensitivityValue.getFactor().equals(factor)).findAny();\n+        if (!returnValue.isPresent()) {\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, factor.getFunction().getId(), factor.getVariable().getId()));\n+        }\n+        return returnValue.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2290faa3a04182c0ab25a5d66ca37d6a42946def"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjE4MjAxOnYy", "diffSide": "RIGHT", "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNTozMDowOVrOFxx78g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNTozMDowOVrOFxx78g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc0MjcwNg==", "bodyText": "Don't set directly the list but set as copy to prevent unsafe changes:\nthis.sensitivityValues = Collections.unmodifiableList(Objects.requireNonNull(sensitivityValues));", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387742706", "createdAt": "2020-03-04T15:30:09Z", "author": {"login": "miovd"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "diffHunk": "@@ -41,23 +51,34 @@\n     @JsonProperty(\"values\")\n     private final List<SensitivityValue> sensitivityValues;\n \n+    @JsonProperty(\"contingencies present\")\n+    private final boolean contingenciesPresent;\n+\n+    @JsonProperty(\"contingencies values\")\n+    private final Map<String, List<SensitivityValue>> sensitivityValuesContingencies;\n+\n     /**\n      * Hades2 sensitivity computation results\n      *\n      * @param ok true if the computation succeeded, false otherwise\n      * @param metrics map of metrics about the computation\n      * @param logs computation logs\n-     * @param values result values of the senstivity computation. Must be non null.\n+     * @param sensitivityValues result values of the senstivity computation in N\n+     * @param sensitivityValuesContingencies result values of the senstivity computation on contingencies\n      */\n     @JsonCreator\n     public SensitivityComputationResults(@JsonProperty(\"ok\") boolean ok,\n                                          @JsonProperty(\"metrics\") Map<String, String> metrics,\n                                          @JsonProperty(\"logs\") String logs,\n-                                         @JsonProperty(\"values\") List<SensitivityValue> values) {\n+                                         @JsonProperty(\"values\") List<SensitivityValue> sensitivityValues,\n+                                         @JsonProperty(\"contingencies present\") boolean contingenciesPresent,\n+                                         @JsonProperty(\"contingencyId values\") Map<String, List<SensitivityValue>> sensitivityValuesContingencies) {\n         this.ok = ok;\n         this.metrics = Objects.requireNonNull(metrics);\n         this.logs = Objects.requireNonNull(logs);\n-        this.sensitivityValues = Objects.requireNonNull(values);\n+        this.sensitivityValues = Objects.requireNonNull(sensitivityValues);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2290faa3a04182c0ab25a5d66ca37d6a42946def"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjIwNTg5OnYy", "diffSide": "RIGHT", "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/converter/SensitivityComputationResultExporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNTozNToxMFrOFxyKLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNTozNToxMFrOFxyKLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc0NjM1MA==", "bodyText": "CsvSensitivityComputationResultExporter implements this interface and seems to be able to export a result of a sensitivity computation with contingencies, why is \"without contingency\" specified here?", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387746350", "createdAt": "2020-03-04T15:35:10Z", "author": {"login": "miovd"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/converter/SensitivityComputationResultExporter.java", "diffHunk": "@@ -30,7 +30,7 @@\n     String getComment();\n \n     /**\n-     * Export a result of a sensitivity computation\n+     * Export a result of a sensitivity computation without contingency", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2290faa3a04182c0ab25a5d66ca37d6a42946def"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjI1NjQzOnYy", "diffSide": "RIGHT", "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNTo0NzowM1rOFxyqow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNTo0NzowM1rOFxyqow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc1NDY1OQ==", "bodyText": "I know that JSON format allows whitespaces in properties but shouldn't we use camel case instead to be consistent with other results serialization?", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387754659", "createdAt": "2020-03-04T15:47:03Z", "author": {"login": "miovd"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "diffHunk": "@@ -41,23 +51,34 @@\n     @JsonProperty(\"values\")\n     private final List<SensitivityValue> sensitivityValues;\n \n+    @JsonProperty(\"contingencies present\")\n+    private final boolean contingenciesPresent;\n+\n+    @JsonProperty(\"contingencies values\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2290faa3a04182c0ab25a5d66ca37d6a42946def"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjc1MDIyOnYy", "diffSide": "RIGHT", "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTozNTowOFrOF25zPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjowODowMFrOF27Okg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzExNDQyOQ==", "bodyText": "Perhaps it could be good to create a constant just like VALUE_NOT_FOUND for the message", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r393114429", "createdAt": "2020-03-16T15:35:08Z", "author": {"login": "murgeyseb"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "diffHunk": "@@ -89,61 +105,144 @@ public String getLogs() {\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values.\n+     * Get a collection of all the sensitivity values in state N.\n      *\n-     * @return a collection of all the sensitivity values.\n+     * @return a collection of all the sensitivity values in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValues() {\n         return Collections.unmodifiableCollection(sensitivityValues);\n     }\n \n+\n     /**\n-     * Get a collection of all the sensitivity values associated with given function.\n+     * Get a collection of all the sensitivity values associated with given function in state N.\n      *\n      * @param function sensitivity function\n-     * @return a collection of all the sensitivity values associated with given function\n+     * @return a collection of all the sensitivity values associated with given function in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function) {\n-        return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n+        return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function))\n+                .collect(Collectors.toList());\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values associated with given variable\n+     * Get a collection of all the sensitivity values associated with given variable in state N.\n      *\n      * @param variable sensitivity variable\n-     * @return a collection of all the sensitivity values associated with given variable\n+     * @return a collection of all the sensitivity values associated with given variable in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable) {\n-        return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable)).collect(Collectors.toList());\n+        return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable))\n+                .collect(Collectors.toList());\n     }\n \n     /**\n-     * Get the sensitivity value associated with given function and given variable\n+     * Get the sensitivity value associated with given function and given variable in state N.\n      *\n      * @param function sensitivity function\n      * @param variable sensitivity variable\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFunction function, SensitivityVariable variable) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n-            && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n+                && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", function.getId(), variable.getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, function.getId(), variable.getId()));\n         }\n         return returnValue.get();\n     }\n \n     /**\n-     * Get the sensitivity value associated with given factor\n+     * Get the sensitivity value associated with given factor in state N.\n      *\n      * @param factor sensitivity factor\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFactor factor) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().equals(factor)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", factor.getFunction().getId(), factor.getVariable().getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, factor.getFunction().getId(), factor.getVariable().getId()));\n         }\n         return returnValue.get();\n     }\n+\n+    /**\n+     * Get the status of the presence of contingencies\n+     *\n+     * @return true if the computation contains contingencies, false otherwise\n+     */\n+    public boolean contingenciesArePresent() {\n+        return !sensitivityValuesContingencies.isEmpty();\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values for all contingencies.\n+     *\n+     * @return a collection of all the sensitivity values for all contingencies.\n+     */\n+    public Map<String, List<SensitivityValue>> getSensitivityValuesContingencies() {\n+        return Collections.unmodifiableMap(sensitivityValuesContingencies);\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values associated with given function\n+     * for a specific contingency.\n+     *\n+     * @param function sensitivity function\n+     * @param contingencyId the ID of the considered contingency\n+     * @return a collection of all the sensitivity values associated with given function for the given contingencyId\n+     */\n+    public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function, String contingencyId) {\n+        return sensitivityValuesContingencies.get(contingencyId).stream()\n+                .filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function))\n+                .collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values associated with given variable\n+     * for a specific contingency.\n+     *\n+     * @param variable sensitivity variable\n+     * @param contingencyId the ID of the considered contingency\n+     * @return a collection of all the sensitivity values associated with given variable\n+     */\n+    public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable, String contingencyId) {\n+        return sensitivityValuesContingencies.get(contingencyId).stream()\n+                .filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable))\n+                .collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Get the sensitivity value associated with given function and given variable for a specific contingency.\n+     *\n+     * @param function sensitivity function\n+     * @param variable sensitivity variable\n+     * @param contingencyId the ID of the considered contingency\n+     * @return the sensitivity value associated with given function and given variable\n+     */\n+    public SensitivityValue getSensitivityValue(SensitivityFunction function, SensitivityVariable variable, String contingencyId) {\n+        return sensitivityValuesContingencies.get(contingencyId).stream()\n+                .filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n+                        && sensitivityValue.getFactor().getVariable().equals(variable))\n+                .findFirst()\n+                .orElseThrow(() -> new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s at contingencyId %s.\", function.getId(), variable.getId(), contingencyId)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "593f43fd6c965e9b4a77be7cde9e6aa80b1386a0"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEzNzgxMA==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r393137810", "createdAt": "2020-03-16T16:08:00Z", "author": {"login": "agnesLeroy"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "diffHunk": "@@ -89,61 +105,144 @@ public String getLogs() {\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values.\n+     * Get a collection of all the sensitivity values in state N.\n      *\n-     * @return a collection of all the sensitivity values.\n+     * @return a collection of all the sensitivity values in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValues() {\n         return Collections.unmodifiableCollection(sensitivityValues);\n     }\n \n+\n     /**\n-     * Get a collection of all the sensitivity values associated with given function.\n+     * Get a collection of all the sensitivity values associated with given function in state N.\n      *\n      * @param function sensitivity function\n-     * @return a collection of all the sensitivity values associated with given function\n+     * @return a collection of all the sensitivity values associated with given function in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function) {\n-        return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n+        return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function))\n+                .collect(Collectors.toList());\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values associated with given variable\n+     * Get a collection of all the sensitivity values associated with given variable in state N.\n      *\n      * @param variable sensitivity variable\n-     * @return a collection of all the sensitivity values associated with given variable\n+     * @return a collection of all the sensitivity values associated with given variable in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable) {\n-        return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable)).collect(Collectors.toList());\n+        return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable))\n+                .collect(Collectors.toList());\n     }\n \n     /**\n-     * Get the sensitivity value associated with given function and given variable\n+     * Get the sensitivity value associated with given function and given variable in state N.\n      *\n      * @param function sensitivity function\n      * @param variable sensitivity variable\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFunction function, SensitivityVariable variable) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n-            && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n+                && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", function.getId(), variable.getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, function.getId(), variable.getId()));\n         }\n         return returnValue.get();\n     }\n \n     /**\n-     * Get the sensitivity value associated with given factor\n+     * Get the sensitivity value associated with given factor in state N.\n      *\n      * @param factor sensitivity factor\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFactor factor) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().equals(factor)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", factor.getFunction().getId(), factor.getVariable().getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, factor.getFunction().getId(), factor.getVariable().getId()));\n         }\n         return returnValue.get();\n     }\n+\n+    /**\n+     * Get the status of the presence of contingencies\n+     *\n+     * @return true if the computation contains contingencies, false otherwise\n+     */\n+    public boolean contingenciesArePresent() {\n+        return !sensitivityValuesContingencies.isEmpty();\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values for all contingencies.\n+     *\n+     * @return a collection of all the sensitivity values for all contingencies.\n+     */\n+    public Map<String, List<SensitivityValue>> getSensitivityValuesContingencies() {\n+        return Collections.unmodifiableMap(sensitivityValuesContingencies);\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values associated with given function\n+     * for a specific contingency.\n+     *\n+     * @param function sensitivity function\n+     * @param contingencyId the ID of the considered contingency\n+     * @return a collection of all the sensitivity values associated with given function for the given contingencyId\n+     */\n+    public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function, String contingencyId) {\n+        return sensitivityValuesContingencies.get(contingencyId).stream()\n+                .filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function))\n+                .collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values associated with given variable\n+     * for a specific contingency.\n+     *\n+     * @param variable sensitivity variable\n+     * @param contingencyId the ID of the considered contingency\n+     * @return a collection of all the sensitivity values associated with given variable\n+     */\n+    public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable, String contingencyId) {\n+        return sensitivityValuesContingencies.get(contingencyId).stream()\n+                .filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable))\n+                .collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Get the sensitivity value associated with given function and given variable for a specific contingency.\n+     *\n+     * @param function sensitivity function\n+     * @param variable sensitivity variable\n+     * @param contingencyId the ID of the considered contingency\n+     * @return the sensitivity value associated with given function and given variable\n+     */\n+    public SensitivityValue getSensitivityValue(SensitivityFunction function, SensitivityVariable variable, String contingencyId) {\n+        return sensitivityValuesContingencies.get(contingencyId).stream()\n+                .filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n+                        && sensitivityValue.getFactor().getVariable().equals(variable))\n+                .findFirst()\n+                .orElseThrow(() -> new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s at contingencyId %s.\", function.getId(), variable.getId(), contingencyId)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzExNDQyOQ=="}, "originalCommit": {"oid": "593f43fd6c965e9b4a77be7cde9e6aa80b1386a0"}, "originalPosition": 217}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 61, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}