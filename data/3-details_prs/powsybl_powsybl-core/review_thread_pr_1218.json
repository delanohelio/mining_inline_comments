{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2MjQyODk0", "number": 1218, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwOToyMjo1NlrODm_pXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwOToyMzo1MVrODm_qyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjE1MjYwOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractVoltageLevel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwOToyMjo1NlrOF0u1JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMDo0NzoyM1rOF0xw4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgzNzU0MA==", "bodyText": "Why do you change FluentIterable into Iterable here?", "url": "https://github.com/powsybl/powsybl-core/pull/1218#discussion_r390837540", "createdAt": "2020-03-11T09:22:56Z", "author": {"login": "agnesLeroy"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractVoltageLevel.java", "diffHunk": "@@ -123,41 +124,45 @@ public VoltageLevel setHighVoltageLimit(double highVoltageLimit) {\n     }\n \n     @Override\n-    public <T extends Connectable> FluentIterable<T> getConnectables(Class<T> clazz) {\n+    public <T extends Connectable> Iterable<T> getConnectables(Class<T> clazz) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "484c4cd8fd1517cae44a388e2d185d8b25c61742"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg4NTYwMA==", "bodyText": "FluentIterable extends Iterable and is more powerful (can chain more easily like streams for example). However, when ensuring its elements are distinct by using toSet(), I am returning a ImmutableSet which extends Iterable too but not FluentIterable", "url": "https://github.com/powsybl/powsybl-core/pull/1218#discussion_r390885600", "createdAt": "2020-03-11T10:47:23Z", "author": {"login": "miovd"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractVoltageLevel.java", "diffHunk": "@@ -123,41 +124,45 @@ public VoltageLevel setHighVoltageLimit(double highVoltageLimit) {\n     }\n \n     @Override\n-    public <T extends Connectable> FluentIterable<T> getConnectables(Class<T> clazz) {\n+    public <T extends Connectable> Iterable<T> getConnectables(Class<T> clazz) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgzNzU0MA=="}, "originalCommit": {"oid": "484c4cd8fd1517cae44a388e2d185d8b25c61742"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjE1NjI2OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractVoltageLevel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwOToyMzo1MVrOF0u3Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMDo0NjowMlrOF0xt6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgzODA3OQ==", "bodyText": "Do I get it right that using count() is a better practice than using size(), and that count() returns a long so you need to cast it to an int?", "url": "https://github.com/powsybl/powsybl-core/pull/1218#discussion_r390838079", "createdAt": "2020-03-11T09:23:51Z", "author": {"login": "agnesLeroy"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractVoltageLevel.java", "diffHunk": "@@ -123,41 +124,45 @@ public VoltageLevel setHighVoltageLimit(double highVoltageLimit) {\n     }\n \n     @Override\n-    public <T extends Connectable> FluentIterable<T> getConnectables(Class<T> clazz) {\n+    public <T extends Connectable> Iterable<T> getConnectables(Class<T> clazz) {\n         Iterable<Terminal> terminals = getTerminals();\n         return FluentIterable.from(terminals)\n                 .transform(Terminal::getConnectable)\n-                .filter(clazz);\n+                .filter(clazz)\n+                .toSet();\n     }\n \n     @Override\n     public <T extends Connectable> Stream<T> getConnectableStream(Class<T> clazz) {\n         return getTerminalStream()\n                 .map(Terminal::getConnectable)\n                 .filter(clazz::isInstance)\n-                .map(clazz::cast);\n+                .map(clazz::cast)\n+                .distinct();\n     }\n \n     @Override\n     public <T extends Connectable> int getConnectableCount(Class<T> clazz) {\n-        return getConnectables(clazz).size();\n+        return Ints.checkedCast(getConnectableStream(clazz).count());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "484c4cd8fd1517cae44a388e2d185d8b25c61742"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg4NDg0Mw==", "bodyText": "No, I only used count() because size() does not exist for streams or for iterables (only for fluentiterables). However, you're right, count() returns a long that I casted.", "url": "https://github.com/powsybl/powsybl-core/pull/1218#discussion_r390884843", "createdAt": "2020-03-11T10:46:02Z", "author": {"login": "miovd"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractVoltageLevel.java", "diffHunk": "@@ -123,41 +124,45 @@ public VoltageLevel setHighVoltageLimit(double highVoltageLimit) {\n     }\n \n     @Override\n-    public <T extends Connectable> FluentIterable<T> getConnectables(Class<T> clazz) {\n+    public <T extends Connectable> Iterable<T> getConnectables(Class<T> clazz) {\n         Iterable<Terminal> terminals = getTerminals();\n         return FluentIterable.from(terminals)\n                 .transform(Terminal::getConnectable)\n-                .filter(clazz);\n+                .filter(clazz)\n+                .toSet();\n     }\n \n     @Override\n     public <T extends Connectable> Stream<T> getConnectableStream(Class<T> clazz) {\n         return getTerminalStream()\n                 .map(Terminal::getConnectable)\n                 .filter(clazz::isInstance)\n-                .map(clazz::cast);\n+                .map(clazz::cast)\n+                .distinct();\n     }\n \n     @Override\n     public <T extends Connectable> int getConnectableCount(Class<T> clazz) {\n-        return getConnectables(clazz).size();\n+        return Ints.checkedCast(getConnectableStream(clazz).count());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgzODA3OQ=="}, "originalCommit": {"oid": "484c4cd8fd1517cae44a388e2d185d8b25c61742"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 104, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}