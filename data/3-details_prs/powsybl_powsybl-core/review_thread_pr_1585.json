{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0MTM5Mzkw", "number": 1585, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMzoyOTo0OFrOFMhL8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwOTo1NTozN1rOFP7nQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NjcwOTYwOnYy", "diffSide": "RIGHT", "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysis2.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMzoyOTo0OFrOIQSC1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMzoyOTo0OFrOIQSC1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk0Mzc2NQ==", "bodyText": "Add a TODO to not forget to rename this class at the end", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r553943765", "createdAt": "2021-01-08T13:29:48Z", "author": {"login": "mathbagu"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysis2.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfig;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.computation.local.LocalComputationManagerFactory;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.contingency.EmptyContingencyListProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.detectors.DefaultLimitViolationDetector;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ *\n+ * Sensitivity analysis main API. It is a utility class (so with only static methods) used as an entry point for running\n+ * a sensitivity analysis allowing to choose either a specific implementation or just to rely on the default one.\n+ *\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+public final class SecurityAnalysis2 {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NjcxNTM2OnYy", "diffSide": "RIGHT", "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysis2.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMzozMTo0M1rOIQSGLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMzozMTo0M1rOIQSGLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk0NDYyMg==", "bodyText": "Use LocalComputationManager.getDefault() instead", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r553944622", "createdAt": "2021-01-08T13:31:43Z", "author": {"login": "mathbagu"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysis2.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfig;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.computation.local.LocalComputationManagerFactory;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.contingency.EmptyContingencyListProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.detectors.DefaultLimitViolationDetector;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ *\n+ * Sensitivity analysis main API. It is a utility class (so with only static methods) used as an entry point for running\n+ * a sensitivity analysis allowing to choose either a specific implementation or just to rely on the default one.\n+ *\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+public final class SecurityAnalysis2 {\n+\n+    private SecurityAnalysis2() {\n+        throw new AssertionError(\"Utility class should not been instantiated\");\n+    }\n+\n+    /**\n+     * A sensitivity analysis runner is responsible for providing convenient methods on top of {@link SecurityAnalysisProvider}:\n+     * several variants of synchronous and asynchronous run with default parameters.\n+     */\n+    public static final class Runner implements Versionable {\n+\n+        private final SecurityAnalysisProvider provider;\n+\n+        private Runner(SecurityAnalysisProvider provider) {\n+            this.provider = Objects.requireNonNull(provider);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network,\n+                                                                  String workingStateId,\n+                                                                  LimitViolationDetector detector,\n+                                                                  LimitViolationFilter filter,\n+                                                                  ComputationManager computationManager,\n+                                                                  SecurityAnalysisParameters parameters,\n+                                                                  ContingenciesProvider contingenciesProvider,\n+                                                                  List<SecurityAnalysisInterceptor> interceptors) {\n+            Objects.requireNonNull(network, \"Network should not be null\");\n+            Objects.requireNonNull(workingStateId, \"WorkingVariantId should not be null\");\n+            Objects.requireNonNull(detector, \"LimitViolation detector should not be null\");\n+            Objects.requireNonNull(filter, \"LimitViolation filter should not be null\");\n+            Objects.requireNonNull(computationManager, \"ComputationManager should not be null\");\n+            Objects.requireNonNull(contingenciesProvider, \"Contingencies provider should not be null\");\n+            Objects.requireNonNull(parameters, \"Sensitivity analysis parameters should not be null\");\n+            Objects.requireNonNull(interceptors, \"Interceptor list should not be null\");\n+            return provider.run(network, workingStateId, detector, filter, computationManager, parameters, contingenciesProvider, interceptors);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network, LimitViolationFilter filter,\n+                                                                  ComputationManager computationManager) {\n+            return runAsync(network, network.getVariantManager().getWorkingVariantId(), new DefaultLimitViolationDetector(), filter, computationManager, SecurityAnalysisParameters.load(), new EmptyContingencyListProvider(), Collections.emptyList());\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network, ComputationManager computationManager) {\n+            return runAsync(network, LimitViolationFilter.load(), computationManager);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network) {\n+            return runAsync(network, new LocalComputationManagerFactory().create());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NjcxOTMwOnYy", "diffSide": "RIGHT", "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysis2.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMzozMzowM1rOIQSIcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNjozMDoxMFrOIYroGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk0NTIwMA==", "bodyText": "I think you should remove all the WithLog method: as proposed last time, we would probably return an object that contain the result of the simulation and a report. To be discussed with the others", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r553945200", "createdAt": "2021-01-08T13:33:03Z", "author": {"login": "mathbagu"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysis2.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfig;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.computation.local.LocalComputationManagerFactory;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.contingency.EmptyContingencyListProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.detectors.DefaultLimitViolationDetector;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ *\n+ * Sensitivity analysis main API. It is a utility class (so with only static methods) used as an entry point for running\n+ * a sensitivity analysis allowing to choose either a specific implementation or just to rely on the default one.\n+ *\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+public final class SecurityAnalysis2 {\n+\n+    private SecurityAnalysis2() {\n+        throw new AssertionError(\"Utility class should not been instantiated\");\n+    }\n+\n+    /**\n+     * A sensitivity analysis runner is responsible for providing convenient methods on top of {@link SecurityAnalysisProvider}:\n+     * several variants of synchronous and asynchronous run with default parameters.\n+     */\n+    public static final class Runner implements Versionable {\n+\n+        private final SecurityAnalysisProvider provider;\n+\n+        private Runner(SecurityAnalysisProvider provider) {\n+            this.provider = Objects.requireNonNull(provider);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network,\n+                                                                  String workingStateId,\n+                                                                  LimitViolationDetector detector,\n+                                                                  LimitViolationFilter filter,\n+                                                                  ComputationManager computationManager,\n+                                                                  SecurityAnalysisParameters parameters,\n+                                                                  ContingenciesProvider contingenciesProvider,\n+                                                                  List<SecurityAnalysisInterceptor> interceptors) {\n+            Objects.requireNonNull(network, \"Network should not be null\");\n+            Objects.requireNonNull(workingStateId, \"WorkingVariantId should not be null\");\n+            Objects.requireNonNull(detector, \"LimitViolation detector should not be null\");\n+            Objects.requireNonNull(filter, \"LimitViolation filter should not be null\");\n+            Objects.requireNonNull(computationManager, \"ComputationManager should not be null\");\n+            Objects.requireNonNull(contingenciesProvider, \"Contingencies provider should not be null\");\n+            Objects.requireNonNull(parameters, \"Sensitivity analysis parameters should not be null\");\n+            Objects.requireNonNull(interceptors, \"Interceptor list should not be null\");\n+            return provider.run(network, workingStateId, detector, filter, computationManager, parameters, contingenciesProvider, interceptors);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network, LimitViolationFilter filter,\n+                                                                  ComputationManager computationManager) {\n+            return runAsync(network, network.getVariantManager().getWorkingVariantId(), new DefaultLimitViolationDetector(), filter, computationManager, SecurityAnalysisParameters.load(), new EmptyContingencyListProvider(), Collections.emptyList());\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network, ComputationManager computationManager) {\n+            return runAsync(network, LimitViolationFilter.load(), computationManager);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network) {\n+            return runAsync(network, new LocalComputationManagerFactory().create());\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResultWithLog> runAsyncWithLog(Network network,\n+                                                                                String workingStateId,\n+                                                                                LimitViolationDetector detector,\n+                                                                                LimitViolationFilter filter,\n+                                                                                ComputationManager computationManager,\n+                                                                                SecurityAnalysisParameters parameters,\n+                                                                                ContingenciesProvider contingenciesProvider,\n+                                                                                List<SecurityAnalysisInterceptor> interceptors) {\n+            Objects.requireNonNull(network, \"Network should not be null\");\n+            Objects.requireNonNull(workingStateId, \"WorkingVariantId should not be null\");\n+            Objects.requireNonNull(detector, \"LimitViolation detector should not be null\");\n+            Objects.requireNonNull(filter, \"LimitViolation filter should not be null\");\n+            Objects.requireNonNull(computationManager, \"ComputationManager should not be null\");\n+            Objects.requireNonNull(contingenciesProvider, \"Contingencies provider should not be null\");\n+            Objects.requireNonNull(parameters, \"Sensitivity analysis parameters should not be null\");\n+            Objects.requireNonNull(interceptors, \"Interceptor list should not be null\");\n+            return provider.runWithLog(network, workingStateId, detector, filter, computationManager, parameters, contingenciesProvider, interceptors);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQzMzkyNg==", "bodyText": "Isn't it already the purpose of SecurityAnalysisResultWithLog?", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r559433926", "createdAt": "2021-01-18T09:42:59Z", "author": {"login": "geofjamg"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysis2.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfig;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.computation.local.LocalComputationManagerFactory;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.contingency.EmptyContingencyListProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.detectors.DefaultLimitViolationDetector;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ *\n+ * Sensitivity analysis main API. It is a utility class (so with only static methods) used as an entry point for running\n+ * a sensitivity analysis allowing to choose either a specific implementation or just to rely on the default one.\n+ *\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+public final class SecurityAnalysis2 {\n+\n+    private SecurityAnalysis2() {\n+        throw new AssertionError(\"Utility class should not been instantiated\");\n+    }\n+\n+    /**\n+     * A sensitivity analysis runner is responsible for providing convenient methods on top of {@link SecurityAnalysisProvider}:\n+     * several variants of synchronous and asynchronous run with default parameters.\n+     */\n+    public static final class Runner implements Versionable {\n+\n+        private final SecurityAnalysisProvider provider;\n+\n+        private Runner(SecurityAnalysisProvider provider) {\n+            this.provider = Objects.requireNonNull(provider);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network,\n+                                                                  String workingStateId,\n+                                                                  LimitViolationDetector detector,\n+                                                                  LimitViolationFilter filter,\n+                                                                  ComputationManager computationManager,\n+                                                                  SecurityAnalysisParameters parameters,\n+                                                                  ContingenciesProvider contingenciesProvider,\n+                                                                  List<SecurityAnalysisInterceptor> interceptors) {\n+            Objects.requireNonNull(network, \"Network should not be null\");\n+            Objects.requireNonNull(workingStateId, \"WorkingVariantId should not be null\");\n+            Objects.requireNonNull(detector, \"LimitViolation detector should not be null\");\n+            Objects.requireNonNull(filter, \"LimitViolation filter should not be null\");\n+            Objects.requireNonNull(computationManager, \"ComputationManager should not be null\");\n+            Objects.requireNonNull(contingenciesProvider, \"Contingencies provider should not be null\");\n+            Objects.requireNonNull(parameters, \"Sensitivity analysis parameters should not be null\");\n+            Objects.requireNonNull(interceptors, \"Interceptor list should not be null\");\n+            return provider.run(network, workingStateId, detector, filter, computationManager, parameters, contingenciesProvider, interceptors);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network, LimitViolationFilter filter,\n+                                                                  ComputationManager computationManager) {\n+            return runAsync(network, network.getVariantManager().getWorkingVariantId(), new DefaultLimitViolationDetector(), filter, computationManager, SecurityAnalysisParameters.load(), new EmptyContingencyListProvider(), Collections.emptyList());\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network, ComputationManager computationManager) {\n+            return runAsync(network, LimitViolationFilter.load(), computationManager);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network) {\n+            return runAsync(network, new LocalComputationManagerFactory().create());\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResultWithLog> runAsyncWithLog(Network network,\n+                                                                                String workingStateId,\n+                                                                                LimitViolationDetector detector,\n+                                                                                LimitViolationFilter filter,\n+                                                                                ComputationManager computationManager,\n+                                                                                SecurityAnalysisParameters parameters,\n+                                                                                ContingenciesProvider contingenciesProvider,\n+                                                                                List<SecurityAnalysisInterceptor> interceptors) {\n+            Objects.requireNonNull(network, \"Network should not be null\");\n+            Objects.requireNonNull(workingStateId, \"WorkingVariantId should not be null\");\n+            Objects.requireNonNull(detector, \"LimitViolation detector should not be null\");\n+            Objects.requireNonNull(filter, \"LimitViolation filter should not be null\");\n+            Objects.requireNonNull(computationManager, \"ComputationManager should not be null\");\n+            Objects.requireNonNull(contingenciesProvider, \"Contingencies provider should not be null\");\n+            Objects.requireNonNull(parameters, \"Sensitivity analysis parameters should not be null\");\n+            Objects.requireNonNull(interceptors, \"Interceptor list should not be null\");\n+            return provider.runWithLog(network, workingStateId, detector, filter, computationManager, parameters, contingenciesProvider, interceptors);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk0NTIwMA=="}, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQzODQ5Nw==", "bodyText": "Maybe we should just remove SecurityAnalysisResultWithLog and move logBytes to SecurityAnalysisResult (and up to an impl to use it or not) so that the API will be cleaner?", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r559438497", "createdAt": "2021-01-18T09:49:42Z", "author": {"login": "geofjamg"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysis2.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfig;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.computation.local.LocalComputationManagerFactory;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.contingency.EmptyContingencyListProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.detectors.DefaultLimitViolationDetector;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ *\n+ * Sensitivity analysis main API. It is a utility class (so with only static methods) used as an entry point for running\n+ * a sensitivity analysis allowing to choose either a specific implementation or just to rely on the default one.\n+ *\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+public final class SecurityAnalysis2 {\n+\n+    private SecurityAnalysis2() {\n+        throw new AssertionError(\"Utility class should not been instantiated\");\n+    }\n+\n+    /**\n+     * A sensitivity analysis runner is responsible for providing convenient methods on top of {@link SecurityAnalysisProvider}:\n+     * several variants of synchronous and asynchronous run with default parameters.\n+     */\n+    public static final class Runner implements Versionable {\n+\n+        private final SecurityAnalysisProvider provider;\n+\n+        private Runner(SecurityAnalysisProvider provider) {\n+            this.provider = Objects.requireNonNull(provider);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network,\n+                                                                  String workingStateId,\n+                                                                  LimitViolationDetector detector,\n+                                                                  LimitViolationFilter filter,\n+                                                                  ComputationManager computationManager,\n+                                                                  SecurityAnalysisParameters parameters,\n+                                                                  ContingenciesProvider contingenciesProvider,\n+                                                                  List<SecurityAnalysisInterceptor> interceptors) {\n+            Objects.requireNonNull(network, \"Network should not be null\");\n+            Objects.requireNonNull(workingStateId, \"WorkingVariantId should not be null\");\n+            Objects.requireNonNull(detector, \"LimitViolation detector should not be null\");\n+            Objects.requireNonNull(filter, \"LimitViolation filter should not be null\");\n+            Objects.requireNonNull(computationManager, \"ComputationManager should not be null\");\n+            Objects.requireNonNull(contingenciesProvider, \"Contingencies provider should not be null\");\n+            Objects.requireNonNull(parameters, \"Sensitivity analysis parameters should not be null\");\n+            Objects.requireNonNull(interceptors, \"Interceptor list should not be null\");\n+            return provider.run(network, workingStateId, detector, filter, computationManager, parameters, contingenciesProvider, interceptors);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network, LimitViolationFilter filter,\n+                                                                  ComputationManager computationManager) {\n+            return runAsync(network, network.getVariantManager().getWorkingVariantId(), new DefaultLimitViolationDetector(), filter, computationManager, SecurityAnalysisParameters.load(), new EmptyContingencyListProvider(), Collections.emptyList());\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network, ComputationManager computationManager) {\n+            return runAsync(network, LimitViolationFilter.load(), computationManager);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network) {\n+            return runAsync(network, new LocalComputationManagerFactory().create());\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResultWithLog> runAsyncWithLog(Network network,\n+                                                                                String workingStateId,\n+                                                                                LimitViolationDetector detector,\n+                                                                                LimitViolationFilter filter,\n+                                                                                ComputationManager computationManager,\n+                                                                                SecurityAnalysisParameters parameters,\n+                                                                                ContingenciesProvider contingenciesProvider,\n+                                                                                List<SecurityAnalysisInterceptor> interceptors) {\n+            Objects.requireNonNull(network, \"Network should not be null\");\n+            Objects.requireNonNull(workingStateId, \"WorkingVariantId should not be null\");\n+            Objects.requireNonNull(detector, \"LimitViolation detector should not be null\");\n+            Objects.requireNonNull(filter, \"LimitViolation filter should not be null\");\n+            Objects.requireNonNull(computationManager, \"ComputationManager should not be null\");\n+            Objects.requireNonNull(contingenciesProvider, \"Contingencies provider should not be null\");\n+            Objects.requireNonNull(parameters, \"Sensitivity analysis parameters should not be null\");\n+            Objects.requireNonNull(interceptors, \"Interceptor list should not be null\");\n+            return provider.runWithLog(network, workingStateId, detector, filter, computationManager, parameters, contingenciesProvider, interceptors);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk0NTIwMA=="}, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ1MDkwMQ==", "bodyText": "There was one question with this approach : how do you handle serialization of this ? Do you want to serialize it in the JSON representing the result or not ?", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r559450901", "createdAt": "2021-01-18T10:08:48Z", "author": {"login": "sylvlecl"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysis2.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfig;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.computation.local.LocalComputationManagerFactory;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.contingency.EmptyContingencyListProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.detectors.DefaultLimitViolationDetector;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ *\n+ * Sensitivity analysis main API. It is a utility class (so with only static methods) used as an entry point for running\n+ * a sensitivity analysis allowing to choose either a specific implementation or just to rely on the default one.\n+ *\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+public final class SecurityAnalysis2 {\n+\n+    private SecurityAnalysis2() {\n+        throw new AssertionError(\"Utility class should not been instantiated\");\n+    }\n+\n+    /**\n+     * A sensitivity analysis runner is responsible for providing convenient methods on top of {@link SecurityAnalysisProvider}:\n+     * several variants of synchronous and asynchronous run with default parameters.\n+     */\n+    public static final class Runner implements Versionable {\n+\n+        private final SecurityAnalysisProvider provider;\n+\n+        private Runner(SecurityAnalysisProvider provider) {\n+            this.provider = Objects.requireNonNull(provider);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network,\n+                                                                  String workingStateId,\n+                                                                  LimitViolationDetector detector,\n+                                                                  LimitViolationFilter filter,\n+                                                                  ComputationManager computationManager,\n+                                                                  SecurityAnalysisParameters parameters,\n+                                                                  ContingenciesProvider contingenciesProvider,\n+                                                                  List<SecurityAnalysisInterceptor> interceptors) {\n+            Objects.requireNonNull(network, \"Network should not be null\");\n+            Objects.requireNonNull(workingStateId, \"WorkingVariantId should not be null\");\n+            Objects.requireNonNull(detector, \"LimitViolation detector should not be null\");\n+            Objects.requireNonNull(filter, \"LimitViolation filter should not be null\");\n+            Objects.requireNonNull(computationManager, \"ComputationManager should not be null\");\n+            Objects.requireNonNull(contingenciesProvider, \"Contingencies provider should not be null\");\n+            Objects.requireNonNull(parameters, \"Sensitivity analysis parameters should not be null\");\n+            Objects.requireNonNull(interceptors, \"Interceptor list should not be null\");\n+            return provider.run(network, workingStateId, detector, filter, computationManager, parameters, contingenciesProvider, interceptors);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network, LimitViolationFilter filter,\n+                                                                  ComputationManager computationManager) {\n+            return runAsync(network, network.getVariantManager().getWorkingVariantId(), new DefaultLimitViolationDetector(), filter, computationManager, SecurityAnalysisParameters.load(), new EmptyContingencyListProvider(), Collections.emptyList());\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network, ComputationManager computationManager) {\n+            return runAsync(network, LimitViolationFilter.load(), computationManager);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network) {\n+            return runAsync(network, new LocalComputationManagerFactory().create());\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResultWithLog> runAsyncWithLog(Network network,\n+                                                                                String workingStateId,\n+                                                                                LimitViolationDetector detector,\n+                                                                                LimitViolationFilter filter,\n+                                                                                ComputationManager computationManager,\n+                                                                                SecurityAnalysisParameters parameters,\n+                                                                                ContingenciesProvider contingenciesProvider,\n+                                                                                List<SecurityAnalysisInterceptor> interceptors) {\n+            Objects.requireNonNull(network, \"Network should not be null\");\n+            Objects.requireNonNull(workingStateId, \"WorkingVariantId should not be null\");\n+            Objects.requireNonNull(detector, \"LimitViolation detector should not be null\");\n+            Objects.requireNonNull(filter, \"LimitViolation filter should not be null\");\n+            Objects.requireNonNull(computationManager, \"ComputationManager should not be null\");\n+            Objects.requireNonNull(contingenciesProvider, \"Contingencies provider should not be null\");\n+            Objects.requireNonNull(parameters, \"Sensitivity analysis parameters should not be null\");\n+            Objects.requireNonNull(interceptors, \"Interceptor list should not be null\");\n+            return provider.runWithLog(network, workingStateId, detector, filter, computationManager, parameters, contingenciesProvider, interceptors);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk0NTIwMA=="}, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjc1MTUxNA==", "bodyText": "Issue #1602 was created to keep these comments", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r562751514", "createdAt": "2021-01-22T16:30:10Z", "author": {"login": "tadam50"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysis2.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfig;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.computation.local.LocalComputationManagerFactory;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.contingency.EmptyContingencyListProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.detectors.DefaultLimitViolationDetector;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ *\n+ * Sensitivity analysis main API. It is a utility class (so with only static methods) used as an entry point for running\n+ * a sensitivity analysis allowing to choose either a specific implementation or just to rely on the default one.\n+ *\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+public final class SecurityAnalysis2 {\n+\n+    private SecurityAnalysis2() {\n+        throw new AssertionError(\"Utility class should not been instantiated\");\n+    }\n+\n+    /**\n+     * A sensitivity analysis runner is responsible for providing convenient methods on top of {@link SecurityAnalysisProvider}:\n+     * several variants of synchronous and asynchronous run with default parameters.\n+     */\n+    public static final class Runner implements Versionable {\n+\n+        private final SecurityAnalysisProvider provider;\n+\n+        private Runner(SecurityAnalysisProvider provider) {\n+            this.provider = Objects.requireNonNull(provider);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network,\n+                                                                  String workingStateId,\n+                                                                  LimitViolationDetector detector,\n+                                                                  LimitViolationFilter filter,\n+                                                                  ComputationManager computationManager,\n+                                                                  SecurityAnalysisParameters parameters,\n+                                                                  ContingenciesProvider contingenciesProvider,\n+                                                                  List<SecurityAnalysisInterceptor> interceptors) {\n+            Objects.requireNonNull(network, \"Network should not be null\");\n+            Objects.requireNonNull(workingStateId, \"WorkingVariantId should not be null\");\n+            Objects.requireNonNull(detector, \"LimitViolation detector should not be null\");\n+            Objects.requireNonNull(filter, \"LimitViolation filter should not be null\");\n+            Objects.requireNonNull(computationManager, \"ComputationManager should not be null\");\n+            Objects.requireNonNull(contingenciesProvider, \"Contingencies provider should not be null\");\n+            Objects.requireNonNull(parameters, \"Sensitivity analysis parameters should not be null\");\n+            Objects.requireNonNull(interceptors, \"Interceptor list should not be null\");\n+            return provider.run(network, workingStateId, detector, filter, computationManager, parameters, contingenciesProvider, interceptors);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network, LimitViolationFilter filter,\n+                                                                  ComputationManager computationManager) {\n+            return runAsync(network, network.getVariantManager().getWorkingVariantId(), new DefaultLimitViolationDetector(), filter, computationManager, SecurityAnalysisParameters.load(), new EmptyContingencyListProvider(), Collections.emptyList());\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network, ComputationManager computationManager) {\n+            return runAsync(network, LimitViolationFilter.load(), computationManager);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network) {\n+            return runAsync(network, new LocalComputationManagerFactory().create());\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResultWithLog> runAsyncWithLog(Network network,\n+                                                                                String workingStateId,\n+                                                                                LimitViolationDetector detector,\n+                                                                                LimitViolationFilter filter,\n+                                                                                ComputationManager computationManager,\n+                                                                                SecurityAnalysisParameters parameters,\n+                                                                                ContingenciesProvider contingenciesProvider,\n+                                                                                List<SecurityAnalysisInterceptor> interceptors) {\n+            Objects.requireNonNull(network, \"Network should not be null\");\n+            Objects.requireNonNull(workingStateId, \"WorkingVariantId should not be null\");\n+            Objects.requireNonNull(detector, \"LimitViolation detector should not be null\");\n+            Objects.requireNonNull(filter, \"LimitViolation filter should not be null\");\n+            Objects.requireNonNull(computationManager, \"ComputationManager should not be null\");\n+            Objects.requireNonNull(contingenciesProvider, \"Contingencies provider should not be null\");\n+            Objects.requireNonNull(parameters, \"Sensitivity analysis parameters should not be null\");\n+            Objects.requireNonNull(interceptors, \"Interceptor list should not be null\");\n+            return provider.runWithLog(network, workingStateId, detector, filter, computationManager, parameters, contingenciesProvider, interceptors);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk0NTIwMA=="}, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NjcyMzM3OnYy", "diffSide": "RIGHT", "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMzozNDoyNFrOIQSKzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxMzoyMDozN1rOIaWkNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk0NTgwNQ==", "bodyText": "Same remark: I think you can remove this method except if it breaks the compilation", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r553945805", "createdAt": "2021-01-08T13:34:24Z", "author": {"login": "mathbagu"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisProvider.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Security analysis provider\n+ *\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+public interface SecurityAnalysisProvider extends Versionable, PlatformConfigNamedProvider {\n+\n+    /**\n+     * Run an asynchronous single security analysis job.\n+     *\n+     * @param network IIDM network on which the security analysis will be performed\n+     * @param workingVariantId network variant ID on which the analysis will be performed\n+     * @param detector\n+     * @param filter\n+     * @param computationManager\n+     * @param parameters specific security analysis parameters\n+     * @param contingenciesProvider provides list of contingencies\n+     * @param interceptors\n+     * @return a {@link CompletableFuture} on {@link SecurityAnalysisResult} that gathers sensitivity factor values\n+     */\n+    CompletableFuture<SecurityAnalysisResult> run(Network network,\n+                                                  String workingVariantId,\n+                                                  LimitViolationDetector detector,\n+                                                  LimitViolationFilter filter,\n+                                                  ComputationManager computationManager,\n+                                                  SecurityAnalysisParameters parameters,\n+                                                  ContingenciesProvider contingenciesProvider,\n+                                                  List<SecurityAnalysisInterceptor> interceptors);\n+\n+    default CompletableFuture<SecurityAnalysisResultWithLog> runWithLog(Network network,\n+                                                                        String workingVariantId,\n+                                                                        LimitViolationDetector detector,\n+                                                                        LimitViolationFilter filter,\n+                                                                        ComputationManager computationManager,\n+                                                                        SecurityAnalysisParameters parameters,\n+                                                                        ContingenciesProvider contingenciesProvider,\n+                                                                        List<SecurityAnalysisInterceptor> interceptors) {\n+        return run(network, workingVariantId, detector, filter, computationManager, parameters, contingenciesProvider, interceptors).thenApply(r -> new SecurityAnalysisResultWithLog(r, null));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDUwMzYwNA==", "bodyText": "Removed waiting fix of Issue #1602", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r564503604", "createdAt": "2021-01-26T13:20:37Z", "author": {"login": "tadam50"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisProvider.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Security analysis provider\n+ *\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+public interface SecurityAnalysisProvider extends Versionable, PlatformConfigNamedProvider {\n+\n+    /**\n+     * Run an asynchronous single security analysis job.\n+     *\n+     * @param network IIDM network on which the security analysis will be performed\n+     * @param workingVariantId network variant ID on which the analysis will be performed\n+     * @param detector\n+     * @param filter\n+     * @param computationManager\n+     * @param parameters specific security analysis parameters\n+     * @param contingenciesProvider provides list of contingencies\n+     * @param interceptors\n+     * @return a {@link CompletableFuture} on {@link SecurityAnalysisResult} that gathers sensitivity factor values\n+     */\n+    CompletableFuture<SecurityAnalysisResult> run(Network network,\n+                                                  String workingVariantId,\n+                                                  LimitViolationDetector detector,\n+                                                  LimitViolationFilter filter,\n+                                                  ComputationManager computationManager,\n+                                                  SecurityAnalysisParameters parameters,\n+                                                  ContingenciesProvider contingenciesProvider,\n+                                                  List<SecurityAnalysisInterceptor> interceptors);\n+\n+    default CompletableFuture<SecurityAnalysisResultWithLog> runWithLog(Network network,\n+                                                                        String workingVariantId,\n+                                                                        LimitViolationDetector detector,\n+                                                                        LimitViolationFilter filter,\n+                                                                        ComputationManager computationManager,\n+                                                                        SecurityAnalysisParameters parameters,\n+                                                                        ContingenciesProvider contingenciesProvider,\n+                                                                        List<SecurityAnalysisInterceptor> interceptors) {\n+        return run(network, workingVariantId, detector, filter, computationManager, parameters, contingenciesProvider, interceptors).thenApply(r -> new SecurityAnalysisResultWithLog(r, null));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk0NTgwNQ=="}, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NjcyNDMwOnYy", "diffSide": "RIGHT", "path": "security-analysis-api/src/test/java/com/powsybl/security/SecurityAnalysis2Test.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMzozNDo0MVrOIQSLYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMzozNDo0MVrOIQSLYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk0NTk1Mg==", "bodyText": "Same remark: add a todo/fixme", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r553945952", "createdAt": "2021-01-08T13:34:41Z", "author": {"login": "mathbagu"}, "path": "security-analysis-api/src/test/java/com/powsybl/security/SecurityAnalysis2Test.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.computation.local.LocalComputationManagerFactory;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.contingency.EmptyContingencyListProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.iidm.network.VariantManager;\n+import com.powsybl.security.detectors.DefaultLimitViolationDetector;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * @author Thomas Adam<tadam at silicom.fr>\n+ */\n+public class SecurityAnalysis2Test {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyMjQxMTMxOnYy", "diffSide": "RIGHT", "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysis2.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwOTozNTozMFrOIVg1ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwOTozNTozMFrOIVg1ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQyOTAyNw==", "bodyText": "Be careful to also update javadoc before merging (sensitivity --> security)", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r559429027", "createdAt": "2021-01-18T09:35:30Z", "author": {"login": "sylvlecl"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysis2.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfig;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.computation.local.LocalComputationManagerFactory;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.contingency.EmptyContingencyListProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.detectors.DefaultLimitViolationDetector;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ *\n+ * Sensitivity analysis main API. It is a utility class (so with only static methods) used as an entry point for running", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyMjQzMzQ1OnYy", "diffSide": "RIGHT", "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysis2.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwOTo0MDozN1rOIVhC_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxMzo0Nzo0MlrOIaXp0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQzMjQ0NA==", "bodyText": "I have a design interrogation since the LimitViolationDetector was introduced : I think there is an overlap between the roles of the detector and of the filter. Maybe the filter should only be implemented inside the detection (for instance as a detector wrapping another one).\nI just raise this for further thought, I guess it should be part of a PR on its own.", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r559432444", "createdAt": "2021-01-18T09:40:37Z", "author": {"login": "sylvlecl"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysis2.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfig;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.computation.local.LocalComputationManagerFactory;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.contingency.EmptyContingencyListProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.detectors.DefaultLimitViolationDetector;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ *\n+ * Sensitivity analysis main API. It is a utility class (so with only static methods) used as an entry point for running\n+ * a sensitivity analysis allowing to choose either a specific implementation or just to rely on the default one.\n+ *\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+public final class SecurityAnalysis2 {\n+\n+    private SecurityAnalysis2() {\n+        throw new AssertionError(\"Utility class should not been instantiated\");\n+    }\n+\n+    /**\n+     * A sensitivity analysis runner is responsible for providing convenient methods on top of {@link SecurityAnalysisProvider}:\n+     * several variants of synchronous and asynchronous run with default parameters.\n+     */\n+    public static final class Runner implements Versionable {\n+\n+        private final SecurityAnalysisProvider provider;\n+\n+        private Runner(SecurityAnalysisProvider provider) {\n+            this.provider = Objects.requireNonNull(provider);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network,\n+                                                                  String workingStateId,\n+                                                                  LimitViolationDetector detector,\n+                                                                  LimitViolationFilter filter,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDUyMTQyNA==", "bodyText": "Issue #1603 was created to keep these comments", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r564521424", "createdAt": "2021-01-26T13:47:42Z", "author": {"login": "tadam50"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysis2.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfig;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.computation.local.LocalComputationManagerFactory;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.contingency.EmptyContingencyListProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.detectors.DefaultLimitViolationDetector;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ *\n+ * Sensitivity analysis main API. It is a utility class (so with only static methods) used as an entry point for running\n+ * a sensitivity analysis allowing to choose either a specific implementation or just to rely on the default one.\n+ *\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+public final class SecurityAnalysis2 {\n+\n+    private SecurityAnalysis2() {\n+        throw new AssertionError(\"Utility class should not been instantiated\");\n+    }\n+\n+    /**\n+     * A sensitivity analysis runner is responsible for providing convenient methods on top of {@link SecurityAnalysisProvider}:\n+     * several variants of synchronous and asynchronous run with default parameters.\n+     */\n+    public static final class Runner implements Versionable {\n+\n+        private final SecurityAnalysisProvider provider;\n+\n+        private Runner(SecurityAnalysisProvider provider) {\n+            this.provider = Objects.requireNonNull(provider);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network,\n+                                                                  String workingStateId,\n+                                                                  LimitViolationDetector detector,\n+                                                                  LimitViolationFilter filter,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQzMjQ0NA=="}, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyMjQ0NTMwOnYy", "diffSide": "RIGHT", "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisImplProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwOTo0MzozOFrOIVhKcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwOTo0MzozOFrOIVhKcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQzNDM1Mw==", "bodyText": "So in the next PR, the plan is to move the code of SecurityAnalysisImpl in this class?", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r559434353", "createdAt": "2021-01-18T09:43:38Z", "author": {"login": "geofjamg"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisImplProvider.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+@AutoService(SecurityAnalysisProvider.class)\n+public class SecurityAnalysisImplProvider implements SecurityAnalysisProvider {\n+\n+    private static final String PROVIDER_NAME = \"SecurityAnalysisImpl\";\n+    private static final String PROVIDER_VERSION = \"1.0\";\n+\n+    @Override\n+    public CompletableFuture<SecurityAnalysisResult> run(Network network,\n+                                                         String workingVariantId,\n+                                                         LimitViolationDetector detector,\n+                                                         LimitViolationFilter filter,\n+                                                         ComputationManager computationManager,\n+                                                         SecurityAnalysisParameters parameters,\n+                                                         ContingenciesProvider contingenciesProvider,\n+                                                         List<SecurityAnalysisInterceptor> interceptors) {\n+        SecurityAnalysisImpl securityAnalysis = new SecurityAnalysisImpl(network, detector, filter, computationManager);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyMjQ2MDA0OnYy", "diffSide": "RIGHT", "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisProvider.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwOTo0Njo1M1rOIVhTJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNjoyOToxOFrOIYrl3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQzNjU4MQ==", "bodyText": "For me LimitViolationDetector has nothing to do in the API, because it supposes that violation detection is done on IIDM model. It is not the case for instance in OLF, because violation detection is  done one a more internal data model to speed up performance. I guess it should be the case too, with hades2.\n@sylvlecl i think this is you who add it to the API, do you really need it?", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r559436581", "createdAt": "2021-01-18T09:46:53Z", "author": {"login": "geofjamg"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisProvider.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Security analysis provider\n+ *\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+public interface SecurityAnalysisProvider extends Versionable, PlatformConfigNamedProvider {\n+\n+    /**\n+     * Run an asynchronous single security analysis job.\n+     *\n+     * @param network IIDM network on which the security analysis will be performed\n+     * @param workingVariantId network variant ID on which the analysis will be performed\n+     * @param detector\n+     * @param filter\n+     * @param computationManager\n+     * @param parameters specific security analysis parameters\n+     * @param contingenciesProvider provides list of contingencies\n+     * @param interceptors\n+     * @return a {@link CompletableFuture} on {@link SecurityAnalysisResult} that gathers sensitivity factor values\n+     */\n+    CompletableFuture<SecurityAnalysisResult> run(Network network,\n+                                                  String workingVariantId,\n+                                                  LimitViolationDetector detector,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ2NzE2NQ==", "bodyText": "Indeed it's an important component for us, to allow custom violation detection, for example taking into account limit reduction factors based on the branch, the contingency, or the limit itself (acceptable duration ... ).\nA goal of the detector was indeed to try to avoid differences in the way violations are created by different implementations, and to provide the same features to different implementations (like this \"limit reduction factors\" feature).\nIf we don't want to use it here anymore, this kind of processing will need to be done \"externally\" by a calling process, in this case :\n\nwe should be very clear in the javadoc how detection violation should be performed by the implementation (for example, should it provide 1 violation for each exceeded limit, or only 1 for the \"worse\")\na detail to be solved is the fact that for voltage violations, for the moment, we lose the \"bus\" information\nitools security-analysis will lose some functionality, except if we add the possibility to plug in some post-processing", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r559467165", "createdAt": "2021-01-18T10:35:11Z", "author": {"login": "sylvlecl"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisProvider.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Security analysis provider\n+ *\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+public interface SecurityAnalysisProvider extends Versionable, PlatformConfigNamedProvider {\n+\n+    /**\n+     * Run an asynchronous single security analysis job.\n+     *\n+     * @param network IIDM network on which the security analysis will be performed\n+     * @param workingVariantId network variant ID on which the analysis will be performed\n+     * @param detector\n+     * @param filter\n+     * @param computationManager\n+     * @param parameters specific security analysis parameters\n+     * @param contingenciesProvider provides list of contingencies\n+     * @param interceptors\n+     * @return a {@link CompletableFuture} on {@link SecurityAnalysisResult} that gathers sensitivity factor values\n+     */\n+    CompletableFuture<SecurityAnalysisResult> run(Network network,\n+                                                  String workingVariantId,\n+                                                  LimitViolationDetector detector,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQzNjU4MQ=="}, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjc1MDk0Mw==", "bodyText": "Issue #1603 was created to keep these comments", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r562750943", "createdAt": "2021-01-22T16:29:18Z", "author": {"login": "tadam50"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisProvider.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Security analysis provider\n+ *\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+public interface SecurityAnalysisProvider extends Versionable, PlatformConfigNamedProvider {\n+\n+    /**\n+     * Run an asynchronous single security analysis job.\n+     *\n+     * @param network IIDM network on which the security analysis will be performed\n+     * @param workingVariantId network variant ID on which the analysis will be performed\n+     * @param detector\n+     * @param filter\n+     * @param computationManager\n+     * @param parameters specific security analysis parameters\n+     * @param contingenciesProvider provides list of contingencies\n+     * @param interceptors\n+     * @return a {@link CompletableFuture} on {@link SecurityAnalysisResult} that gathers sensitivity factor values\n+     */\n+    CompletableFuture<SecurityAnalysisResult> run(Network network,\n+                                                  String workingVariantId,\n+                                                  LimitViolationDetector detector,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQzNjU4MQ=="}, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyMjQ2NTg5OnYy", "diffSide": "RIGHT", "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysis2.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwOTo0ODowNFrOIVhWhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwOTo0ODowNFrOIVhWhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQzNzQ0Ng==", "bodyText": "javadoc to be updated here too", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r559437446", "createdAt": "2021-01-18T09:48:04Z", "author": {"login": "sylvlecl"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysis2.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfig;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.computation.local.LocalComputationManagerFactory;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.contingency.EmptyContingencyListProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.detectors.DefaultLimitViolationDetector;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ *\n+ * Sensitivity analysis main API. It is a utility class (so with only static methods) used as an entry point for running\n+ * a sensitivity analysis allowing to choose either a specific implementation or just to rely on the default one.\n+ *\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+public final class SecurityAnalysis2 {\n+\n+    private SecurityAnalysis2() {\n+        throw new AssertionError(\"Utility class should not been instantiated\");\n+    }\n+\n+    /**\n+     * A sensitivity analysis runner is responsible for providing convenient methods on top of {@link SecurityAnalysisProvider}:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyMjQ2OTI5OnYy", "diffSide": "RIGHT", "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysis2.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwOTo0ODo1M1rOIVhYqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwOTo0ODo1M1rOIVhYqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQzNzk5Mw==", "bodyText": "message to be adapted (\"sensitivity\")", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r559437993", "createdAt": "2021-01-18T09:48:53Z", "author": {"login": "sylvlecl"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysis2.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfig;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.computation.local.LocalComputationManagerFactory;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.contingency.EmptyContingencyListProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.detectors.DefaultLimitViolationDetector;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ *\n+ * Sensitivity analysis main API. It is a utility class (so with only static methods) used as an entry point for running\n+ * a sensitivity analysis allowing to choose either a specific implementation or just to rely on the default one.\n+ *\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+public final class SecurityAnalysis2 {\n+\n+    private SecurityAnalysis2() {\n+        throw new AssertionError(\"Utility class should not been instantiated\");\n+    }\n+\n+    /**\n+     * A sensitivity analysis runner is responsible for providing convenient methods on top of {@link SecurityAnalysisProvider}:\n+     * several variants of synchronous and asynchronous run with default parameters.\n+     */\n+    public static final class Runner implements Versionable {\n+\n+        private final SecurityAnalysisProvider provider;\n+\n+        private Runner(SecurityAnalysisProvider provider) {\n+            this.provider = Objects.requireNonNull(provider);\n+        }\n+\n+        public CompletableFuture<SecurityAnalysisResult> runAsync(Network network,\n+                                                                  String workingStateId,\n+                                                                  LimitViolationDetector detector,\n+                                                                  LimitViolationFilter filter,\n+                                                                  ComputationManager computationManager,\n+                                                                  SecurityAnalysisParameters parameters,\n+                                                                  ContingenciesProvider contingenciesProvider,\n+                                                                  List<SecurityAnalysisInterceptor> interceptors) {\n+            Objects.requireNonNull(network, \"Network should not be null\");\n+            Objects.requireNonNull(workingStateId, \"WorkingVariantId should not be null\");\n+            Objects.requireNonNull(detector, \"LimitViolation detector should not be null\");\n+            Objects.requireNonNull(filter, \"LimitViolation filter should not be null\");\n+            Objects.requireNonNull(computationManager, \"ComputationManager should not be null\");\n+            Objects.requireNonNull(contingenciesProvider, \"Contingencies provider should not be null\");\n+            Objects.requireNonNull(parameters, \"Sensitivity analysis parameters should not be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyMjQ5NDk4OnYy", "diffSide": "RIGHT", "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisImplProvider.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwOTo1NToxN1rOIVhoXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNjo1Mzo0MVrOIYsjIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ0MjAxMw==", "bodyText": "Should we seize this opportunity to rename the SecurityAnalysisImpl to something more meaningful, like DefaultSecurityAnalysis or even more explicit LoadFlowBasedSecurityAnalysis  ?\nThe \"impl\" suffix does not seem appropriate if the target is to have multiple implementations (even more when this \"impl\" is not suitable for most users).", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r559442013", "createdAt": "2021-01-18T09:55:17Z", "author": {"login": "sylvlecl"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisImplProvider.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+@AutoService(SecurityAnalysisProvider.class)\n+public class SecurityAnalysisImplProvider implements SecurityAnalysisProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ0NzQ1Mw==", "bodyText": "Also, is it OK to leave it in the security-analysis-api module ?\nThe consequence is the following: you will always have that implementation in the classpath, which means that if you add another implementation you want to use, you will not be able to rely on the behaviour which allows to configure nothing to use the only implementation in the classpath.", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r559447453", "createdAt": "2021-01-18T10:03:35Z", "author": {"login": "sylvlecl"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisImplProvider.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+@AutoService(SecurityAnalysisProvider.class)\n+public class SecurityAnalysisImplProvider implements SecurityAnalysisProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ0MjAxMw=="}, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ2NzI1NA==", "bodyText": "LoadFlowBasedSecurityAnalysis\n\nDefaultSecurityAnalysis would be fine. LoadFlowBasedSecurityAnalysis is maybe not appropriate as even an optimized security analysis is also based on a load flow.", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r559467254", "createdAt": "2021-01-18T10:35:21Z", "author": {"login": "geofjamg"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisImplProvider.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+@AutoService(SecurityAnalysisProvider.class)\n+public class SecurityAnalysisImplProvider implements SecurityAnalysisProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ0MjAxMw=="}, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ2ODE2MA==", "bodyText": "Also, is it OK to leave it in the security-analysis-api module ?\nThe consequence is the following: you will always have that implementation in the classpath, which means that if you add another implementation you want to use, you will not be able to rely on the behaviour which allows to configure nothing to use the only implementation in the classpath.\n\nYou are right, it would break the new api design, as it would require to always have the default impl in the config.yml or use .find(\"h2\")", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r559468160", "createdAt": "2021-01-18T10:36:43Z", "author": {"login": "geofjamg"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisImplProvider.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+@AutoService(SecurityAnalysisProvider.class)\n+public class SecurityAnalysisImplProvider implements SecurityAnalysisProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ0MjAxMw=="}, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjY0Njk5NA==", "bodyText": "ManyLoadflowSecurityAnalysis ?", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r562646994", "createdAt": "2021-01-22T13:56:22Z", "author": {"login": "jonenst"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisImplProvider.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+@AutoService(SecurityAnalysisProvider.class)\n+public class SecurityAnalysisImplProvider implements SecurityAnalysisProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ0MjAxMw=="}, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjc2NjYyNw==", "bodyText": "Issue #1604 was created to keep these comments", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r562766627", "createdAt": "2021-01-22T16:53:41Z", "author": {"login": "tadam50"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisImplProvider.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+@AutoService(SecurityAnalysisProvider.class)\n+public class SecurityAnalysisImplProvider implements SecurityAnalysisProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ0MjAxMw=="}, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyMjQ5NjY1OnYy", "diffSide": "RIGHT", "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisImplProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwOTo1NTozN1rOIVhpWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwOTo1NTozN1rOIVhpWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ0MjI2Ng==", "bodyText": "See comment about naming", "url": "https://github.com/powsybl/powsybl-core/pull/1585#discussion_r559442266", "createdAt": "2021-01-18T09:55:37Z", "author": {"login": "sylvlecl"}, "path": "security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisImplProvider.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.security.interceptors.SecurityAnalysisInterceptor;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * @author Thomas Adam <tadam at silicom.fr>\n+ */\n+@AutoService(SecurityAnalysisProvider.class)\n+public class SecurityAnalysisImplProvider implements SecurityAnalysisProvider {\n+\n+    private static final String PROVIDER_NAME = \"SecurityAnalysisImpl\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87052ec9bc8131b9305952c3b74d7c5a11e3549a"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4950, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}