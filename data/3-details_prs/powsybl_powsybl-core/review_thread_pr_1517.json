{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNDY2Mjg2", "number": 1517, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMDo0NTowOVrOExXplw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMDo0Njo0N1rOExXrUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjAzMTU5OnYy", "diffSide": "RIGHT", "path": "loadflow/loadflow-api/src/main/java/com/powsybl/loadflow/json/LoadFlowResultJsonModule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMDo0NTowOVrOHnd8mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwODoyNjowN1rOHoE6xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE0NzE2Mw==", "bodyText": "Please update the copyright year. Is the copyright iTesla or RTE btw?", "url": "https://github.com/powsybl/powsybl-core/pull/1517#discussion_r511147163", "createdAt": "2020-10-23T20:45:09Z", "author": {"login": "flo-dup"}, "path": "loadflow/loadflow-api/src/main/java/com/powsybl/loadflow/json/LoadFlowResultJsonModule.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/**\n+ * Copyright (c) 2018, All partners of the iTesla project (http://www.itesla-project.eu/consortium)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0910384b739ba021186c11c5d458eb16ef911234"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc4NTY3MQ==", "bodyText": "Copyright (c) 2020, RTE (https://ww.rte-france.com)", "url": "https://github.com/powsybl/powsybl-core/pull/1517#discussion_r511785671", "createdAt": "2020-10-26T08:26:07Z", "author": {"login": "mathbagu"}, "path": "loadflow/loadflow-api/src/main/java/com/powsybl/loadflow/json/LoadFlowResultJsonModule.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/**\n+ * Copyright (c) 2018, All partners of the iTesla project (http://www.itesla-project.eu/consortium)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE0NzE2Mw=="}, "originalCommit": {"oid": "0910384b739ba021186c11c5d458eb16ef911234"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjAzNjAwOnYy", "diffSide": "RIGHT", "path": "loadflow/loadflow-api/src/test/java/com/powsybl/loadflow/json/LoadFlowResultJsonTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMDo0Njo0N1rOHnd_RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwODoyOToyMVrOHoFBhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE0Nzg0NQ==", "bodyText": "You should also test that you can deserialize the string properly through an ObjectReader.", "url": "https://github.com/powsybl/powsybl-core/pull/1517#discussion_r511147845", "createdAt": "2020-10-23T20:46:47Z", "author": {"login": "flo-dup"}, "path": "loadflow/loadflow-api/src/test/java/com/powsybl/loadflow/json/LoadFlowResultJsonTest.java", "diffHunk": "@@ -62,4 +67,17 @@ public void handleErrorTest() throws IOException {\n         LoadFlowResultDeserializer.read(getClass().getResourceAsStream(\"/LoadFlowResultVersion10Error.json\"));\n     }\n \n+    @Test\n+    public void loadFlowResultJsonModuleTest() throws IOException {\n+        ObjectMapper objectMapper = JsonUtil.createObjectMapper()\n+                .registerModule(new LoadFlowResultJsonModule());\n+        ObjectWriter writer = objectMapper.writerWithDefaultPrettyPrinter();\n+        ByteArrayOutputStream os = new ByteArrayOutputStream();\n+\n+        writer.writeValue(os, createVersion11());\n+        String result = new String(os.toByteArray(), StandardCharsets.UTF_8);\n+\n+        compareTxt(getClass().getResourceAsStream(\"/LoadFlowResultVersion11.json\"), result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0910384b739ba021186c11c5d458eb16ef911234"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc4NzM5Ng==", "bodyText": "Agree: a good and complete test will do a complete round-trip. I think you should also update the LoadFlowResultSerializer::write and LoadFlowResultDeserializer::read. In these two methods we create manually the module: if you replace this part by the module you have just created you will cover your new code.", "url": "https://github.com/powsybl/powsybl-core/pull/1517#discussion_r511787396", "createdAt": "2020-10-26T08:29:21Z", "author": {"login": "mathbagu"}, "path": "loadflow/loadflow-api/src/test/java/com/powsybl/loadflow/json/LoadFlowResultJsonTest.java", "diffHunk": "@@ -62,4 +67,17 @@ public void handleErrorTest() throws IOException {\n         LoadFlowResultDeserializer.read(getClass().getResourceAsStream(\"/LoadFlowResultVersion10Error.json\"));\n     }\n \n+    @Test\n+    public void loadFlowResultJsonModuleTest() throws IOException {\n+        ObjectMapper objectMapper = JsonUtil.createObjectMapper()\n+                .registerModule(new LoadFlowResultJsonModule());\n+        ObjectWriter writer = objectMapper.writerWithDefaultPrettyPrinter();\n+        ByteArrayOutputStream os = new ByteArrayOutputStream();\n+\n+        writer.writeValue(os, createVersion11());\n+        String result = new String(os.toByteArray(), StandardCharsets.UTF_8);\n+\n+        compareTxt(getClass().getResourceAsStream(\"/LoadFlowResultVersion11.json\"), result);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE0Nzg0NQ=="}, "originalCommit": {"oid": "0910384b739ba021186c11c5d458eb16ef911234"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4905, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}