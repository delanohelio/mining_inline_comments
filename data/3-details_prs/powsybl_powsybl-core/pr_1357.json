{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NDk2NzUx", "number": 1357, "title": "DanglingLine with generation attributes", "bodyText": "Signed-off-by: Anne Tilloy anne.tilloy@rte-france.com\nPlease check if the PR fulfills these requirements (please use '[x]' to check the checkboxes, or submit the PR and then click the checkboxes)\n\n The commit message follows our guidelines\n Tests for the changes have been added (for bug fixes / features)\n Docs have been added / updated (for bug fixes / features)\n\nDoes this PR already have an issue describing the problem ? If so, link to this issue using '#XXX' and skip the rest\nIn UCTE format, Xnode, that are buses at boundary, can have voltage regulating capabilities. They can have a P and a Q for the load part and an other P and Q for the generator part (@murgeyseb for more details).\nIn CGMES format, Equivalent Injection are used in IGM to described boundaries. They usually don't have voltage regulating capabilities excpect for HVDC modeling.\nDanglingLine can not support this.\nWhat kind of change does this PR introduce? (Bug fix, feature, docs update, ...)\nWe will be able to model PV node at boundary with the new DanglingLine attributes, when running a powerflow on the IGM. No change on the CGM model at this stage.\nWhat is the current behavior? (You can also link to an open issue here)\nWe only support PQ nodes.\nWhat is the new behavior (if this is a feature change)?\nWe will support PV nodes in the bounadries, but we will need to support this in the open loadflow.\nDoes this PR introduce a breaking change or deprecate an API? If yes, check the following:\n\n The Breaking Change or Deprecated label has been added\n The migration guide has been updated in the github wiki (What changes might users need to make in their application due to this PR?)\n\nOther information:\n(if any of the questions/checkboxes don't apply, please delete them entirely)", "createdAt": "2020-06-18T14:05:11Z", "url": "https://github.com/powsybl/powsybl-core/pull/1357", "merged": true, "mergeCommit": {"oid": "f55b23c15d32af857bd646ee61ac7c7d60e9f8d6"}, "closed": true, "closedAt": "2020-07-17T20:45:51Z", "author": {"login": "annetill"}, "timelineItems": {"totalCount": 41, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsey3wAH2gAyNDM2NDk2NzUxOmMwYTJkY2M5ZjU1NzY3NjM3OTg5NDIxN2I1YjM0MGU2NzVhNGQ4M2E=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc16Ew9AFqTQ1MDk0NjI3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c0a2dcc9f557676379894217b5b340e675a4d83a", "author": {"user": {"login": "annetill", "name": "Anne Tilloy"}}, "url": "https://github.com/powsybl/powsybl-core/commit/c0a2dcc9f557676379894217b5b340e675a4d83a", "committedDate": "2020-06-18T13:51:28Z", "message": "First import of new DanglingLine API + Impl to support voltage regulation.\n\nSigned-off-by: Anne Tilloy <anne.tilloy@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "034dfba7d4a491cdd0bd68dbd820b882a4e248e4", "author": {"user": {"login": "annetill", "name": "Anne Tilloy"}}, "url": "https://github.com/powsybl/powsybl-core/commit/034dfba7d4a491cdd0bd68dbd820b882a4e248e4", "committedDate": "2020-06-18T14:09:48Z", "message": "Fix comments.\n\nSigned-off-by: Anne Tilloy <anne.tilloy@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9371b0d83ac3a751ea0ddd9e8d7a6fa736d01937", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/9371b0d83ac3a751ea0ddd9e8d7a6fa736d01937", "committedDate": "2020-06-19T09:28:13Z", "message": "add default implementations (prevent breaking changes)\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzOTMyNzc2", "url": "https://github.com/powsybl/powsybl-core/pull/1357#pullrequestreview-433932776", "createdAt": "2020-06-19T09:29:47Z", "commit": {"oid": "9371b0d83ac3a751ea0ddd9e8d7a6fa736d01937"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwOToyOTo0N1rOGmOS9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwOToyOTo0N1rOGmOS9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjczMzMwMg==", "bodyText": "Just a question, why do we use this and not something like regulationType that can be OFF, VOLTAGE and REACTIVE? Here when there is no voltage regulation, how can we know if there is an active or reactive regulation or not at all?", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r442733302", "createdAt": "2020-06-19T09:29:47Z", "author": {"login": "MioRtia"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/DanglingLine.java", "diffHunk": "@@ -92,6 +92,79 @@\n      */\n     DanglingLine setB(double b);\n \n+    /**\n+     * <p>Get the active power setpoint in MW.</p>\n+     * <p>The active power setpoint follows a load sign convention.</p>\n+     * <p>Depends on the working variant.</p>\n+     * @return the reactive power setpoint\n+     */\n+    default double getActivePowerSetpoint() {\n+        return Double.NaN;\n+    }\n+\n+    /**\n+     * <p>Set the active power setpoint in MW.</p>\n+     * <p>Depends on the working variant.</p>\n+     * @param activePowerSetpoint the active power setpoint\n+     * @return this to allow method chaining\n+     */\n+    default DanglingLine setActivePowerSetpoint(double activePowerSetpoint) {\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Get the reactive power setpoint in MVAR.</p>\n+     * <p>The reactive power setpoint follows a load sign convention.</p>\n+     * <p>Depends on the working variant.</p>\n+     * @return the reactive power setpoint\n+     */\n+    default double getReactivePowerSetpoint() {\n+        return Double.NaN;\n+    }\n+\n+    /**\n+     * <p>Set the reactive power setpoint in MVAR.</p>\n+     * <p>Depends on the working variant.</p>\n+     * @param reactivePowerSetpoint the reactive power setpoint\n+     * @return this to allow method chaining\n+     */\n+    default DanglingLine setReactivePowerSetpoint(double reactivePowerSetpoint) {\n+        return this;\n+    }\n+\n+    /**\n+     * Get the voltage regulation status.\n+     */\n+    default boolean isVoltageRegulationOn() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9371b0d83ac3a751ea0ddd9e8d7a6fa736d01937"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81eb0f0665d9dab2bcb00b384b1e5272d72156f2", "author": {"user": {"login": "annetill", "name": "Anne Tilloy"}}, "url": "https://github.com/powsybl/powsybl-core/commit/81eb0f0665d9dab2bcb00b384b1e5272d72156f2", "committedDate": "2020-06-22T13:00:40Z", "message": "New proposal after review.\n\nSigned-off-by: Anne Tilloy <anne.tilloy@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b38ce7cbfd9be3a3c341d666664fb49289b5d041", "author": {"user": {"login": "annetill", "name": "Anne Tilloy"}}, "url": "https://github.com/powsybl/powsybl-core/commit/b38ce7cbfd9be3a3c341d666664fb49289b5d041", "committedDate": "2020-06-22T13:12:56Z", "message": "Merge branch 'xnode-with-regulating-capability' of https://github.com/powsybl/powsybl-core into xnode-with-regulating-capability"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "370bc22fe0ffcfdd449ce93ca56334c077bab63c", "author": {"user": {"login": "annetill", "name": "Anne Tilloy"}}, "url": "https://github.com/powsybl/powsybl-core/commit/370bc22fe0ffcfdd449ce93ca56334c077bab63c", "committedDate": "2020-06-22T15:43:27Z", "message": "Fix API.\nFirst import of the UCTE conversion.\n\nSigned-off-by: Anne Tilloy <anne.tilloy@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d26648d1bb53b4b188b7c4d324bffa47924b849", "author": {"user": {"login": "annetill", "name": "Anne Tilloy"}}, "url": "https://github.com/powsybl/powsybl-core/commit/7d26648d1bb53b4b188b7c4d324bffa47924b849", "committedDate": "2020-06-22T16:35:52Z", "message": "Fix.\nImprove UCTE import.\n\nSigned-off-by: Anne Tilloy <anne.tilloy@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39f7e1d9bbfb271156ceddd7192e06fc1187da2c", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/39f7e1d9bbfb271156ceddd7192e06fc1187da2c", "committedDate": "2020-06-22T18:28:29Z", "message": "consider equivalent injections regulating voltage: define generator-like properties for dangling lines\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d1c815ffddc50ff882d1ff79b87ea0ae317c4b2", "author": {"user": {"login": "annetill", "name": "Anne Tilloy"}}, "url": "https://github.com/powsybl/powsybl-core/commit/0d1c815ffddc50ff882d1ff79b87ea0ae317c4b2", "committedDate": "2020-06-24T06:34:38Z", "message": "Add maxP and mixP attributes to the generation part of the DanglingLine.\nFix UCTE importer.\nFix CGMES conversion.\n\nSigned-off-by: Anne Tilloy <anne.tilloy@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "088a70431d47578af825cda7dd4c608876859f33", "author": {"user": {"login": "annetill", "name": "Anne Tilloy"}}, "url": "https://github.com/powsybl/powsybl-core/commit/088a70431d47578af825cda7dd4c608876859f33", "committedDate": "2020-06-24T07:55:47Z", "message": "Fix UCTE export.\n\nSigned-off-by: Anne Tilloy <anne.tilloy@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "228963aafced5eeee347860f7b37924c27ce06f8", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/228963aafced5eeee347860f7b37924c27ce06f8", "committedDate": "2020-06-25T12:07:09Z", "message": "Merge branch 'master' into xnode-with-regulating-capability\n\nSigned-off-by: Luma <zamarrenolm@aia.es>\n\n# Conflicts:\n#\tcgmes/cgmes-conformity/src/test/java/com/powsybl/cgmes/conformity/test/CgmesConformity1ModifiedCatalog.java\n#\tcgmes/cgmes-conversion/src/test/java/com/powsybl/cgmes/conversion/test/conformity/modified/CgmesConformity1ModifiedConversionTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "696fd2e53a88f90efb95f8eae39b6b38f837f7b9", "author": {"user": {"login": "annetill", "name": "Anne Tilloy"}}, "url": "https://github.com/powsybl/powsybl-core/commit/696fd2e53a88f90efb95f8eae39b6b38f837f7b9", "committedDate": "2020-06-26T14:17:10Z", "message": "Merge branch 'master' into xnode-with-regulating-capability"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7a3a4b6ee47b5fdf5cbe55748f872c981f79cf3", "author": {"user": {"login": "annetill", "name": "Anne Tilloy"}}, "url": "https://github.com/powsybl/powsybl-core/commit/c7a3a4b6ee47b5fdf5cbe55748f872c981f79cf3", "committedDate": "2020-06-26T14:25:10Z", "message": "Increase unit test.\n\nSigned-off-by: Anne Tilloy <anne.tilloy@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b737c3b46d04aae44765122ce8e7323183ede0e0", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/b737c3b46d04aae44765122ce8e7323183ede0e0", "committedDate": "2020-06-30T08:19:28Z", "message": "Some corrections: delete zip package + generatorMinP and generatorMaxP defined in DL adder used in DL + added check in DL adder + assert in DL test\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc8ed33da6b2955a0aa2e592da942ca3827dec5d", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/cc8ed33da6b2955a0aa2e592da942ca3827dec5d", "committedDate": "2020-07-07T15:55:52Z", "message": "Refactoring: sub element \"Generation\" in DanglingLine\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2475c41e8966a81bb01c81285e72dc98eb49d2e", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/c2475c41e8966a81bb01c81285e72dc98eb49d2e", "committedDate": "2020-07-07T15:58:10Z", "message": "Merge branch 'master' into xnode-with-regulating-capability\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\n\n# Conflicts:\n#\tcgmes/cgmes-conformity/src/test/java/com/powsybl/cgmes/conformity/test/CgmesConformity1ModifiedCatalog.java\n#\tcgmes/cgmes-conversion/src/test/java/com/powsybl/cgmes/conversion/test/conformity/modified/CgmesConformity1ModifiedConversionTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57058d01d381201113543e202d5ff7fc7b84c081", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/57058d01d381201113543e202d5ff7fc7b84c081", "committedDate": "2020-07-07T16:33:37Z", "message": "Implement XIIDM serialization\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0NjQ2ODMy", "url": "https://github.com/powsybl/powsybl-core/pull/1357#pullrequestreview-444646832", "createdAt": "2020-07-08T11:18:58Z", "commit": {"oid": "57058d01d381201113543e202d5ff7fc7b84c081"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMToxODo1OFrOGujWeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMTozMzowMlrOGujxZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ2Njg3Mg==", "bodyText": "Could be write in a single line: nodesEquivalentInjections.computeIfAbsent(node, ls -> new ArrayList<>(2)).add(equivalentInjection);\nWhy do you set the capacity to 2?", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r451466872", "createdAt": "2020-07-08T11:18:58Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Boundary.java", "diffHunk": "@@ -70,6 +71,12 @@ public void addLineAtNode(PropertyBag line, String node) {\n         lines.add(line);\n     }\n \n+    public void addEquivalentInjectionAtNode(PropertyBag equivalentInjection, String node) {\n+        List<PropertyBag> equivalentInjections;\n+        equivalentInjections = nodesEquivalentInjections.computeIfAbsent(node, ls -> new ArrayList<>(2));\n+        equivalentInjections.add(equivalentInjection);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57058d01d381201113543e202d5ff7fc7b84c081"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ2NzcyNQ==", "bodyText": "You should move this line at line 156.", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r451467725", "createdAt": "2020-07-08T11:20:42Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ACLineSegmentConversion.java", "diffHunk": "@@ -131,26 +131,43 @@ private void convertDanglingLine(int boundarySide) {\n         // _5150a037-e241-421f-98b2-fe60e5c90303 XQ1-N1\n         // ends in a boundary node where there is no other line,\n         // does not have energy consumer or equivalent injection\n-        if (terminalConnected(boundarySide) && !context.boundary().hasPowerFlow(boundaryNode)) {\n+        if (terminalConnected(boundarySide)\n+                && !context.boundary().hasPowerFlow(boundaryNode)\n+                && context.boundary().equivalentInjectionsAtNode(boundaryNode).isEmpty()) {\n             missing(\"Equipment for modeling consumption/injection at boundary node\");\n         }\n \n         double r = p.asDouble(\"r\");\n         double x = p.asDouble(\"x\");\n         double bch = p.asDouble(\"bch\");\n         double gch = p.asDouble(\"gch\", 0.0);\n-        DanglingLineAdder adder = voltageLevel(modelSide).newDanglingLine()\n+        DanglingLineAdder dlAdder = voltageLevel(modelSide).newDanglingLine()\n                 .setEnsureIdUnicity(false)\n                 .setR(r)\n                 .setX(x)\n                 .setG(gch)\n                 .setB(bch)\n-                .setUcteXnodeCode(findUcteXnodeCode(boundaryNode))\n-                .setP0(f.p())\n-                .setQ0(f.q());\n-        identify(adder);\n-        connect(adder, modelSide);\n-        DanglingLine dl = adder.add();\n+                .setUcteXnodeCode(findUcteXnodeCode(boundaryNode));\n+        identify(dlAdder);\n+        connect(dlAdder, modelSide);\n+        EquivalentInjectionConversion equivalentInjectionConversion = getEquivalentInjectionConversionForDanglingLine(boundaryNode);\n+        DanglingLine dl;\n+        if (equivalentInjectionConversion != null) {\n+            dl = equivalentInjectionConversion.convertOverDanglingLine(dlAdder, f);\n+        } else {\n+            dl = dlAdder.setP0(f.p())\n+                    .setQ0(f.q())\n+                    .add();\n+            dl.newGeneration()\n+                    .setTargetP(0.0)\n+                    .setTargetQ(0.0)\n+                    .setTargetV(Double.NaN)\n+                    .setVoltageRegulationOn(false)\n+                    .add();\n+        }\n+        if (equivalentInjectionConversion != null) {\n+            equivalentInjectionConversion.convertReactiveLimits(dl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57058d01d381201113543e202d5ff7fc7b84c081"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ2OTA4Nw==", "bodyText": "It's a bit weird: why the generation is not created using the adder, but using the DanglingLine?", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r451469087", "createdAt": "2020-07-08T11:23:33Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/EquivalentInjectionConversion.java", "diffHunk": "@@ -21,55 +19,128 @@\n \n     private static final String REGULATION_TARGET = \"regulationTarget\";\n \n-    public EquivalentInjectionConversion(PropertyBag sm, Context context) {\n-        super(\"EquivalentInjection\", sm, context);\n+    public EquivalentInjectionConversion(PropertyBag ei, Context context) {\n+        super(\"EquivalentInjection\", ei, context);\n+    }\n+\n+    @Override\n+    public void convertInsideBoundary() {\n+        if (context.config().convertBoundary()) {\n+            if (valid()) {\n+                convert();\n+            }\n+        } else {\n+            // If we find an Equivalent Injection at a boundary\n+            // we will decide later what to do with it\n+            //\n+            // If finally a dangling line is created at the boundary node\n+            // and the equivalent injection is regulating voltage\n+            // we will have to transfer regulating voltage data\n+            // from the equivalent injection to the dangling line\n+            context.boundary().addEquivalentInjectionAtNode(this.p, nodeId());\n+        }\n     }\n \n     @Override\n     public void convert() {\n+        // An equivalent injection found inside a modeling authority data\n+        // will be mapped to a Generator\n+        convertToGenerator();\n+    }\n+\n+    // A dangling line has been created at the boundary node of the equivalent injection\n+    public DanglingLine convertOverDanglingLine(DanglingLineAdder adder, PowerFlow fother) {\n+        Regulation regulation = getRegulation();\n+        DanglingLine dl;\n+        if (regulation.status) {\n+            // If this equivalent injection is regulating voltage,\n+            // map it over the dangling line 'virtual generator'\n+            dl = adder\n+                    .setP0(fother.p())\n+                    .setQ0(fother.q())\n+                    .add();\n+            dl.newGeneration()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57058d01d381201113543e202d5ff7fc7b84c081"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ2OTkxNw==", "bodyText": "This class should be moved into the DanglingLineAdder?", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r451469917", "createdAt": "2020-07-08T11:25:14Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/DanglingLine.java", "diffHunk": "@@ -20,9 +20,106 @@\n  * <p>To create a dangling line, see {@link DanglingLineAdder}\n  *\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ * @author Anne Tilloy <anne.tilloy at rte-france.com>\n  * @see DanglingLineAdder\n  */\n-public interface DanglingLine extends Injection<DanglingLine> {\n+public interface DanglingLine extends Injection<DanglingLine>, ReactiveLimitsHolder {\n+\n+    interface Generation {\n+        /**\n+         * <p>Get the generator active power target in MW.</p>\n+         * <p>The active power target follows a generator sign convention.</p>\n+         * <p>Depends on the working variant.</p>\n+         * @return the generator active power target\n+         */\n+        double getTargetP();\n+\n+        /**\n+         * <p>Set the generator active power target in MW.</p>\n+         * <p>Depends on the working variant.</p>\n+         * @param targetP the generator active power target\n+         * @return this to allow method chaining\n+         */\n+        Generation setTargetP(double targetP);\n+\n+        /**\n+         * Get the generator maximal active power in MW.\n+         */\n+        double getMaxP();\n+\n+        /**\n+         * Set the generator maximal active power in MW.\n+         */\n+        Generation setMaxP(double maxP);\n+\n+        /**\n+         * Get the generator minimal active power in MW.\n+         */\n+        double getMinP();\n+\n+        /**\n+         * Set the generator minimal active power in MW.\n+         */\n+        Generation setMinP(double minP);\n+\n+        /**\n+         * <p>Get the generator reactive power target in MVAR.</p>\n+         * <p>The generator reactive power target follows a generator sign convention.</p>\n+         * <p>Depends on the working variant.</p>\n+         * @return the generator reactive power target\n+         */\n+        double getTargetQ();\n+\n+        /**\n+         * <p>Set the generator reactive power target in MVAR.</p>\n+         * <p>Depends on the working variant.</p>\n+         * @param targetQ the generator reactive power target\n+         * @return this to allow method chaining\n+         */\n+        Generation setTargetQ(double targetQ);\n+\n+        /**\n+         * Get the generator voltage regulation status.\n+         */\n+        boolean isVoltageRegulationOn();\n+\n+        /**\n+         * Set the generator voltage regulation status.\n+         */\n+        Generation setVoltageRegulationOn(boolean voltageRegulationOn);\n+\n+        /**\n+         * <p>Get the generator voltage target in Kv.</p>\n+         * <p>Depends on the working variant.</p>\n+         * @return the generator voltage target\n+         */\n+        double getTargetV();\n+\n+        /**\n+         * <p>Set the generator voltage target in Kv.</p>\n+         * <p>Depends on the working variant.</p>\n+         * @param targetV the generator voltage target\n+         * @return this to allow method chaining\n+         */\n+        Generation setTargetV(double targetV);\n+    }\n+\n+    interface GenerationAdder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57058d01d381201113543e202d5ff7fc7b84c081"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ3MDM2Mg==", "bodyText": "To be reverted if you do not make any change", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r451470362", "createdAt": "2020-07-08T11:26:07Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/DanglingLineAdder.java", "diffHunk": "@@ -21,6 +21,7 @@\n  *</pre>\n  *\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ * @author Anne Tilloy <anne.tilloy at rte-france.com>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57058d01d381201113543e202d5ff7fc7b84c081"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ3MDQyNg==", "bodyText": "Same remark", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r451470426", "createdAt": "2020-07-08T11:26:15Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineAdderImpl.java", "diffHunk": "@@ -12,6 +12,8 @@\n /**\n  *\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ * @author Anne Tilloy <anne.tilloy at rte-france.com>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57058d01d381201113543e202d5ff7fc7b84c081"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ3MDk1Mg==", "bodyText": "I think it's not necessary to inherit from MultiVariantObject. If the enclosing object is alreay a MultiVariantObject it could be ok", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r451470952", "createdAt": "2020-07-08T11:27:17Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineImpl.java", "diffHunk": "@@ -6,18 +6,226 @@\n  */\n package com.powsybl.iidm.network.impl;\n \n-import com.powsybl.iidm.network.CurrentLimitsAdder;\n-import com.powsybl.iidm.network.ConnectableType;\n-import com.powsybl.iidm.network.DanglingLine;\n-import com.powsybl.iidm.network.ValidationUtil;\n+import com.powsybl.commons.util.trove.TBooleanArrayList;\n+import com.powsybl.iidm.network.*;\n import com.powsybl.iidm.network.impl.util.Ref;\n import gnu.trove.list.array.TDoubleArrayList;\n \n /**\n  *\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n  */\n-class DanglingLineImpl extends AbstractConnectable<DanglingLine> implements DanglingLine, CurrentLimitsOwner<Void> {\n+class DanglingLineImpl extends AbstractConnectable<DanglingLine> implements DanglingLine, CurrentLimitsOwner<Void>, ReactiveLimitsOwner {\n+\n+    class GenerationImpl implements Generation, MultiVariantObject {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57058d01d381201113543e202d5ff7fc7b84c081"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ3MTMwNg==", "bodyText": "To be moved into DanglingAdderImpl", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r451471306", "createdAt": "2020-07-08T11:27:55Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineImpl.java", "diffHunk": "@@ -6,18 +6,226 @@\n  */\n package com.powsybl.iidm.network.impl;\n \n-import com.powsybl.iidm.network.CurrentLimitsAdder;\n-import com.powsybl.iidm.network.ConnectableType;\n-import com.powsybl.iidm.network.DanglingLine;\n-import com.powsybl.iidm.network.ValidationUtil;\n+import com.powsybl.commons.util.trove.TBooleanArrayList;\n+import com.powsybl.iidm.network.*;\n import com.powsybl.iidm.network.impl.util.Ref;\n import gnu.trove.list.array.TDoubleArrayList;\n \n /**\n  *\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n  */\n-class DanglingLineImpl extends AbstractConnectable<DanglingLine> implements DanglingLine, CurrentLimitsOwner<Void> {\n+class DanglingLineImpl extends AbstractConnectable<DanglingLine> implements DanglingLine, CurrentLimitsOwner<Void>, ReactiveLimitsOwner {\n+\n+    class GenerationImpl implements Generation, MultiVariantObject {\n+\n+        private double minP;\n+\n+        private double maxP;\n+\n+        // attributes depending on the variant\n+\n+        private final TDoubleArrayList targetP;\n+\n+        private final TDoubleArrayList targetQ;\n+\n+        private final TBooleanArrayList voltageRegulationOn;\n+\n+        private final TDoubleArrayList targetV;\n+\n+        GenerationImpl(double minP, double maxP, double targetP, double targetQ, boolean voltageRegulationOn, double targetV) {\n+            int variantArraySize = network.get().getVariantManager().getVariantArraySize();\n+            this.targetP = new TDoubleArrayList(variantArraySize);\n+            this.targetQ = new TDoubleArrayList(variantArraySize);\n+            this.voltageRegulationOn = new TBooleanArrayList(variantArraySize);\n+            this.targetV = new TDoubleArrayList(variantArraySize);\n+            this.minP = minP;\n+            this.maxP = maxP;\n+            for (int i = 0; i < variantArraySize; i++) {\n+                this.targetP.add(targetP);\n+                this.targetQ.add(targetQ);\n+                this.voltageRegulationOn.add(voltageRegulationOn);\n+                this.targetV.add(targetV);\n+            }\n+        }\n+\n+        @Override\n+        public double getTargetP() {\n+            return targetP.get(getNetwork().getVariantIndex());\n+        }\n+\n+        @Override\n+        public GenerationImpl setTargetP(double targetP) {\n+            int variantIndex = network.get().getVariantIndex();\n+            double oldValue = this.targetP.set(variantIndex, targetP);\n+            String variantId = network.get().getVariantManager().getVariantId(variantIndex);\n+            notifyUpdate(\"targetP\", variantId, oldValue, targetP);\n+            return this;\n+        }\n+\n+        @Override\n+        public double getMaxP() {\n+            return maxP;\n+        }\n+\n+        @Override\n+        public GenerationImpl setMaxP(double maxP) {\n+            ValidationUtil.checkMaxP(DanglingLineImpl.this, maxP);\n+            ValidationUtil.checkActivePowerLimits(DanglingLineImpl.this, minP, maxP);\n+            double oldValue = this.maxP;\n+            this.maxP = maxP;\n+            notifyUpdate(\"maxP\", oldValue, maxP);\n+            return this;\n+        }\n+\n+        @Override\n+        public double getMinP() {\n+            return minP;\n+        }\n+\n+        @Override\n+        public GenerationImpl setMinP(double minP) {\n+            ValidationUtil.checkMinP(DanglingLineImpl.this, minP);\n+            ValidationUtil.checkActivePowerLimits(DanglingLineImpl.this, minP, maxP);\n+            double oldValue = this.minP;\n+            this.minP = minP;\n+            notifyUpdate(\"minP\", oldValue, minP);\n+            return this;\n+        }\n+\n+        @Override\n+        public double getTargetQ() {\n+            return targetQ.get(getNetwork().getVariantIndex());\n+        }\n+\n+        @Override\n+        public GenerationImpl setTargetQ(double targetQ) {\n+            int variantIndex = network.get().getVariantIndex();\n+            double oldValue = this.targetQ.set(variantIndex, targetQ);\n+            String variantId = network.get().getVariantManager().getVariantId(variantIndex);\n+            notifyUpdate(\"targetQ\", variantId, oldValue, targetQ);\n+            return this;\n+        }\n+\n+        @Override\n+        public boolean isVoltageRegulationOn() {\n+            return voltageRegulationOn.get(getNetwork().getVariantIndex());\n+        }\n+\n+        @Override\n+        public GenerationImpl setVoltageRegulationOn(boolean voltageRegulationOn) {\n+            int variantIndex = getNetwork().getVariantIndex();\n+            boolean oldValue = this.voltageRegulationOn.get(variantIndex);\n+            this.voltageRegulationOn.set(variantIndex, voltageRegulationOn);\n+            String variantId = getNetwork().getVariantManager().getVariantId(variantIndex);\n+            notifyUpdate(\"voltageRegulationOn\", variantId, oldValue, voltageRegulationOn);\n+            return this;\n+        }\n+\n+        @Override\n+        public double getTargetV() {\n+            return this.targetV.get(getNetwork().getVariantIndex());\n+        }\n+\n+        @Override\n+        public GenerationImpl setTargetV(double targetV) {\n+            int variantIndex = getNetwork().getVariantIndex();\n+            double oldValue = this.targetV.set(variantIndex, targetV);\n+            String variantId = getNetwork().getVariantManager().getVariantId(variantIndex);\n+            notifyUpdate(\"targetV\", variantId, oldValue, targetV);\n+            return this;\n+        }\n+\n+        @Override\n+        public void extendVariantArraySize(int initVariantArraySize, int number, int sourceIndex) {\n+            targetP.ensureCapacity(targetP.size() + number);\n+            targetQ.ensureCapacity(targetQ.size() + number);\n+            voltageRegulationOn.ensureCapacity(voltageRegulationOn.size() + number);\n+            targetV.ensureCapacity(targetV.size() + number);\n+            for (int i = 0; i < number; i++) {\n+                targetP.add(targetP.get(sourceIndex));\n+                targetQ.add(targetQ.get(sourceIndex));\n+                voltageRegulationOn.add(voltageRegulationOn.get(sourceIndex));\n+                targetV.add(targetV.get(sourceIndex));\n+            }\n+        }\n+\n+        @Override\n+        public void reduceVariantArraySize(int number) {\n+            targetP.remove(targetP.size() - number, number);\n+            targetQ.remove(targetQ.size() - number, number);\n+            voltageRegulationOn.remove(voltageRegulationOn.size() - number, number);\n+            targetV.remove(targetV.size() - number, number);\n+        }\n+\n+        @Override\n+        public void deleteVariantArrayElement(int index) {\n+            // nothing to do\n+        }\n+\n+        @Override\n+        public void allocateVariantArrayElement(int[] indexes, int sourceIndex) {\n+            for (int index : indexes) {\n+                targetP.set(index, targetP.get(sourceIndex));\n+                targetQ.set(index, targetQ.get(sourceIndex));\n+                voltageRegulationOn.set(index, voltageRegulationOn.get(sourceIndex));\n+                targetV.set(index, targetV.get(sourceIndex));\n+            }\n+        }\n+    }\n+\n+    class GenerationAdderImpl implements GenerationAdder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57058d01d381201113543e202d5ff7fc7b84c081"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ3MjMyMQ==", "bodyText": "Maybe the reactiveLimits should be hold by the generation object: does it make sense to have no generation but a reactiveLimits?", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r451472321", "createdAt": "2020-07-08T11:30:06Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineImpl.java", "diffHunk": "@@ -31,15 +239,20 @@\n \n     private final String ucteXnodeCode;\n \n+    private GenerationImpl generation;\n+\n     private CurrentLimitsImpl limits;\n \n+    private final ReactiveLimitsHolderImpl reactiveLimits;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57058d01d381201113543e202d5ff7fc7b84c081"}, "originalPosition": 240}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ3Mzc2NA==", "bodyText": "You should create a generation only if necessary: i.e there is a voltage setpoint or a power generation?", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r451473764", "createdAt": "2020-07-08T11:33:02Z", "author": {"login": "mathbagu"}, "path": "ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java", "diffHunk": "@@ -257,6 +247,23 @@ private static void createDanglingLine(UcteLine ucteLine, boolean connected,\n                 .setQ0(q0)\n                 .setUcteXnodeCode(xnode.getCode().toString())\n                 .add();\n+        dl.newGeneration()\n+                .setTargetP(-targetP)\n+                .setTargetQ(-targetQ)\n+                .add();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57058d01d381201113543e202d5ff7fc7b84c081"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b083a1d90e86ec46b9debe6ca0c6f640edb8df2", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/2b083a1d90e86ec46b9debe6ca0c6f640edb8df2", "committedDate": "2020-07-08T14:27:12Z", "message": "Move reactive limits to DL.generation + small modifications of implementations\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d061939a03e42f0adc0b3f78bb88369bd4235dd", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/8d061939a03e42f0adc0b3f78bb88369bd4235dd", "committedDate": "2020-07-15T07:46:43Z", "message": "Make code more synthetic\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38a012d038a4fb0285e0ae01563f8df0fbad61d8", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/38a012d038a4fb0285e0ae01563f8df0fbad61d8", "committedDate": "2020-07-15T07:53:23Z", "message": "Small enhancement\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "482bcd2a1620cd541e91920138e216290d6802a5", "author": {"user": {"login": "annetill", "name": "Anne Tilloy"}}, "url": "https://github.com/powsybl/powsybl-core/commit/482bcd2a1620cd541e91920138e216290d6802a5", "committedDate": "2020-07-15T12:03:24Z", "message": "Merge branch 'master' into xnode-with-regulating-capability"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b68d4ed28becab9544fa7e4fab0214daf4e72330", "author": {"user": {"login": "annetill", "name": "Anne Tilloy"}}, "url": "https://github.com/powsybl/powsybl-core/commit/b68d4ed28becab9544fa7e4fab0214daf4e72330", "committedDate": "2020-07-15T12:53:26Z", "message": "Add a unit test in the UCTE importer.\n\nSigned-off-by: Anne Tilloy <anne.tilloy@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f1d6e45135ccd70543f4931daed04250ac5045b", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/6f1d6e45135ccd70543f4931daed04250ac5045b", "committedDate": "2020-07-15T15:30:15Z", "message": "Move GenerationAdder inside DanglingLineAdder\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ff6d985e439c8d7924d0fbd33f2c260a908e84f", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/1ff6d985e439c8d7924d0fbd33f2c260a908e84f", "committedDate": "2020-07-16T07:54:08Z", "message": "Write reactive limits of generation\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9bba1f919de7cddccdc37217170497871efbcb4", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/c9bba1f919de7cddccdc37217170497871efbcb4", "committedDate": "2020-07-16T08:30:13Z", "message": "Correction in serialization of reactive limits of dangling line's generation\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c5a58180db110d122de2b2fcb4ee45a92925ef9", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/2c5a58180db110d122de2b2fcb4ee45a92925ef9", "committedDate": "2020-07-16T08:41:19Z", "message": "Add tests\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9afe9a74659545986366546622f92c642c311a27", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/9afe9a74659545986366546622f92c642c311a27", "committedDate": "2020-07-16T08:55:18Z", "message": "Refactor (code smells)\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcab7d06b95af527efa738b53e993174e69a08d9", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/fcab7d06b95af527efa738b53e993174e69a08d9", "committedDate": "2020-07-16T09:13:10Z", "message": "Add tests\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5Njg5NjQ5", "url": "https://github.com/powsybl/powsybl-core/pull/1357#pullrequestreview-449689649", "createdAt": "2020-07-16T09:45:01Z", "commit": {"oid": "fcab7d06b95af527efa738b53e993174e69a08d9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTo0NTowMVrOGyjZWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTo1Nzo0NVrOGyj2-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2MTkxMw==", "bodyText": "In GeneratorAdderImpl, we check a lot of thing I would expect to find here such as:\n\nValidationUtil.checkMinP(this, minP);\nValidationUtil.checkMaxP(this, maxP);\nValidationUtil.checkActivePowerSetpoint(this, targetP);\nValidationUtil.checkVoltageControl(this, voltageRegulatorOn, targetV, targetQ);", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r455661913", "createdAt": "2020-07-16T09:45:01Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineAdderImpl.java", "diffHunk": "@@ -12,9 +12,64 @@\n /**\n  *\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ * @author Anne Tilloy <anne.tilloy at rte-france.com>\n+ *\n  */\n class DanglingLineAdderImpl extends AbstractInjectionAdder<DanglingLineAdderImpl> implements DanglingLineAdder {\n \n+    class GenerationAdderImpl implements GenerationAdder {\n+\n+        double minP;\n+        double maxP;\n+        double targetP;\n+        double targetQ;\n+        boolean voltageRegulationOn;\n+        double targetV;\n+\n+        @Override\n+        public GenerationAdder setTargetP(double targetP) {\n+            this.targetP = targetP;\n+            return this;\n+        }\n+\n+        @Override\n+        public GenerationAdder setMaxP(double maxP) {\n+            this.maxP = maxP;\n+            return this;\n+        }\n+\n+        @Override\n+        public GenerationAdder setMinP(double minP) {\n+            this.minP = minP;\n+            return this;\n+        }\n+\n+        @Override\n+        public GenerationAdder setTargetQ(double targetQ) {\n+            this.targetQ = targetQ;\n+            return this;\n+        }\n+\n+        @Override\n+        public GenerationAdder setVoltageRegulationOn(boolean voltageRegulationOn) {\n+            this.voltageRegulationOn = voltageRegulationOn;\n+            return this;\n+        }\n+\n+        @Override\n+        public GenerationAdder setTargetV(double targetV) {\n+            this.targetV = targetV;\n+            return this;\n+        }\n+\n+        @Override\n+        public DanglingLineAdder add() {\n+            ValidationUtil.checkActivePowerLimits(DanglingLineAdderImpl.this, minP, maxP);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcab7d06b95af527efa738b53e993174e69a08d9"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2MjQ1OA==", "bodyText": "Same king of remark: why there is no integrity checks in the different setters?", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r455662458", "createdAt": "2020-07-16T09:45:52Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineImpl.java", "diffHunk": "@@ -19,6 +17,166 @@\n  */\n class DanglingLineImpl extends AbstractConnectable<DanglingLine> implements DanglingLine, CurrentLimitsOwner<Void> {\n \n+    public static class GenerationImpl implements Generation, ReactiveLimitsOwner, Validable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcab7d06b95af527efa738b53e993174e69a08d9"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2MzEyNA==", "bodyText": "That's strange: the constructor should have a Generation parameter instead of mixing data and adder?", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r455663124", "createdAt": "2020-07-16T09:46:58Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineImpl.java", "diffHunk": "@@ -54,6 +215,11 @@\n         this.g = g;\n         this.b = b;\n         this.ucteXnodeCode = ucteXnodeCode;\n+        if (generationAdder != null) {\n+            generation = new GenerationImpl(generationAdder, this);\n+        } else {\n+            generation = null;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcab7d06b95af527efa738b53e993174e69a08d9"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2Mzc5Ng==", "bodyText": "This is not a good design: you should keep only the second constructor. Remove the DanglingLineImpl and male the generation class not static to be able to access to the DanglingLine.", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r455663796", "createdAt": "2020-07-16T09:48:03Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineImpl.java", "diffHunk": "@@ -19,6 +17,166 @@\n  */\n class DanglingLineImpl extends AbstractConnectable<DanglingLine> implements DanglingLine, CurrentLimitsOwner<Void> {\n \n+    public static class GenerationImpl implements Generation, ReactiveLimitsOwner, Validable {\n+\n+        private final DanglingLineImpl danglingLine;\n+\n+        private final ReactiveLimitsHolderImpl reactiveLimits;\n+\n+        private double minP;\n+\n+        private double maxP;\n+\n+        // attributes depending on the variant\n+\n+        private final TDoubleArrayList targetP;\n+\n+        private final TDoubleArrayList targetQ;\n+\n+        private final TBooleanArrayList voltageRegulationOn;\n+\n+        private final TDoubleArrayList targetV;\n+\n+        GenerationImpl(DanglingLineAdderImpl.GenerationAdderImpl adder, DanglingLineImpl danglingLine) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcab7d06b95af527efa738b53e993174e69a08d9"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2NDQ3Mw==", "bodyText": "Move the variant management in the generation: this is an encapsulation issue, the generation should be in charge of its data.", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r455664473", "createdAt": "2020-07-16T09:49:18Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineImpl.java", "diffHunk": "@@ -188,13 +359,31 @@ public void extendVariantArraySize(int initVariantArraySize, int number, int sou\n             p0.add(p0.get(sourceIndex));\n             q0.add(q0.get(sourceIndex));\n         }\n+        if (generation != null) {\n+            generation.targetP.ensureCapacity(generation.targetP.size() + number);\n+            generation.targetQ.ensureCapacity(generation.targetQ.size() + number);\n+            generation.voltageRegulationOn.ensureCapacity(generation.voltageRegulationOn.size() + number);\n+            generation.targetV.ensureCapacity(generation.targetV.size() + number);\n+            for (int i = 0; i < number; i++) {\n+                generation.targetP.add(generation.targetP.get(sourceIndex));\n+                generation.targetQ.add(generation.targetQ.get(sourceIndex));\n+                generation.voltageRegulationOn.add(generation.voltageRegulationOn.get(sourceIndex));\n+                generation.targetV.add(generation.targetV.get(sourceIndex));\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcab7d06b95af527efa738b53e993174e69a08d9"}, "originalPosition": 238}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2NjM5MQ==", "bodyText": "Is it correct?", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r455666391", "createdAt": "2020-07-16T09:52:29Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/DanglingLineXml.java", "diffHunk": "@@ -62,6 +84,11 @@ protected DanglingLineAdder createAdder(VoltageLevel vl) {\n \n     @Override\n     protected DanglingLine readRootElementAttributes(DanglingLineAdder adder, NetworkXmlReaderContext context) {\n+        throw new UnsupportedOperationException();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcab7d06b95af527efa738b53e993174e69a08d9"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2ODA0NQ==", "bodyText": "I'm surprised: this piece of code change a lot. To be checked, but maybe there is a design issue that makes this code complex.", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r455668045", "createdAt": "2020-07-16T09:55:18Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/DanglingLineXml.java", "diffHunk": "@@ -70,26 +97,106 @@ protected DanglingLine readRootElementAttributes(DanglingLineAdder adder, Networ\n         double b = XmlUtil.readDoubleAttribute(context.getReader(), \"b\");\n         String ucteXnodeCode = context.getReader().getAttributeValue(null, \"ucteXnodeCode\");\n         readNodeOrBus(adder, context);\n-        DanglingLine dl = adder.setP0(p0)\n+        adder.setP0(p0)\n                 .setQ0(q0)\n                 .setR(r)\n                 .setX(x)\n                 .setG(g)\n                 .setB(b)\n-                .setUcteXnodeCode(ucteXnodeCode)\n-                .add();\n-        readPQ(null, dl.getTerminal(), context.getReader());\n-        return dl;\n+                .setUcteXnodeCode(ucteXnodeCode);\n+        Map<String, String> properties = new HashMap<>();\n+        double p = XmlUtil.readOptionalDoubleAttribute(context.getReader(), \"p\");\n+        double q = XmlUtil.readOptionalDoubleAttribute(context.getReader(), \"q\");\n+        double[] permanentLimit = new double[1];\n+        permanentLimit[0] = Double.NaN;\n+        Map<Integer, TemporaryLimitXml> temporaryLimits = new HashMap<>();\n+        DanglingLine[] danglingLine = new DanglingLine[1];\n+        boolean[] hasGeneration = new boolean[1];\n+        readUntilEndRootElement(context.getReader(), () -> {\n+            switch (context.getReader().getLocalName()) {\n+                case \"property\":\n+                    String name = context.getReader().getAttributeValue(null, \"name\");\n+                    String value = context.getReader().getAttributeValue(null, \"value\");\n+                    properties.put(name, value);\n+                    break;\n+                case \"currentLimits\":\n+                    permanentLimit[0] = XmlUtil.readOptionalDoubleAttribute(context.getReader(), \"permanentLimit\");\n+                    XmlUtil.readUntilEndElement(\"currentLimits\", context.getReader(), () -> {\n+                        if (\"temporaryLimit\".equals(context.getReader().getLocalName())) {\n+                            String tlName = context.getReader().getAttributeValue(null, \"name\");\n+                            int acceptableDuration = XmlUtil.readOptionalIntegerAttribute(context.getReader(), \"acceptableDuration\", Integer.MAX_VALUE);\n+                            double tlValue = XmlUtil.readOptionalDoubleAttribute(context.getReader(), \"value\", Double.MAX_VALUE);\n+                            boolean fictitious = XmlUtil.readOptionalBoolAttribute(context.getReader(), \"fictitious\", false);\n+                            temporaryLimits.put(acceptableDuration, new TemporaryLimitXml(tlName, tlValue, fictitious));\n+                        }\n+                    });\n+                    break;\n+                case GENERATION:\n+                    IidmXmlUtil.assertMinimumVersion(ROOT_ELEMENT_NAME, GENERATION, IidmXmlUtil.ErrorMessage.NOT_NULL_NOT_SUPPORTED, IidmXmlVersion.V_1_3, context);\n+                    hasGeneration[0] = true;\n+                    danglingLine[0] = readGeneration(adder, context.getReader(), context);\n+                    break;\n+                default:\n+                    throw new PowsyblException(\"Unknown element name <\" + context.getReader().getLocalName() + \"> in <\" + id + \">\");\n+            }\n+        });\n+        if (!hasGeneration[0]) {\n+            danglingLine[0] = adder.add();\n+        }\n+        properties.forEach(danglingLine[0]::setProperty);\n+        danglingLine[0].getTerminal().setP(p).setQ(q);\n+        if (!Double.isNaN(permanentLimit[0]) || !temporaryLimits.isEmpty()) {\n+            CurrentLimitsAdder limitsAdder = danglingLine[0].newCurrentLimits()\n+                    .setPermanentLimit(permanentLimit[0]);\n+            temporaryLimits\n+                    .forEach((acceptableDuration, tl) -> limitsAdder.beginTemporaryLimit()\n+                    .setAcceptableDuration(acceptableDuration)\n+                    .setName(tl.name)\n+                    .setValue(tl.value)\n+                    .setFictitious(tl.fictitious)\n+                    .endTemporaryLimit());\n+            limitsAdder.add();\n+        }\n     }\n \n-    @Override\n-    protected void readSubElements(DanglingLine dl, NetworkXmlReaderContext context) throws XMLStreamException {\n-        readUntilEndRootElement(context.getReader(), () -> {\n-            if (\"currentLimits\".equals(context.getReader().getLocalName())) {\n-                readCurrentLimits(null, dl::newCurrentLimits, context.getReader());\n-            } else {\n-                super.readSubElements(dl, context);\n+    private DanglingLine readGeneration(DanglingLineAdder adder, XMLStreamReader reader, NetworkXmlReaderContext context) throws XMLStreamException {\n+        double minP = XmlUtil.readOptionalDoubleAttribute(reader, \"minP\");\n+        double maxP = XmlUtil.readOptionalDoubleAttribute(reader, \"maxP\");\n+        boolean voltageRegulationOn = XmlUtil.readBoolAttribute(reader, \"voltageRegulationOn\");\n+        double targetP = XmlUtil.readOptionalDoubleAttribute(reader, \"targetP\");\n+        double targetV = XmlUtil.readOptionalDoubleAttribute(reader, \"targetV\");\n+        double targetQ = XmlUtil.readOptionalDoubleAttribute(reader, \"targetQ\");\n+        adder.newGeneration()\n+                .setMinP(minP)\n+                .setMaxP(maxP)\n+                .setVoltageRegulationOn(voltageRegulationOn)\n+                .setTargetP(targetP)\n+                .setTargetV(targetV)\n+                .setTargetQ(targetQ)\n+                .add();\n+        DanglingLine danglingLine = adder.add();\n+        XmlUtil.readUntilEndElement(GENERATION, reader, () -> {\n+            switch (context.getReader().getLocalName()) {\n+                case \"reactiveCapabilityCurve\":\n+                case \"minMaxReactiveLimits\":\n+                    ReactiveLimitsXml.INSTANCE.read(danglingLine.getGeneration(), context);\n+                    break;\n+                default:\n+                    throw new PowsyblException(\"Unknown element name <\" + context.getReader().getLocalName() + \"> in <\" + danglingLine.getId() + \".generation>\");\n             }\n         });\n+        return danglingLine;\n+    }\n+\n+    class TemporaryLimitXml {\n+        private final String name;\n+        private final double value;\n+        private final boolean fictitious;\n+\n+        TemporaryLimitXml(String name, double value, boolean fictitious) {\n+            this.name = name;\n+            this.value = value;\n+            this.fictitious = fictitious;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcab7d06b95af527efa738b53e993174e69a08d9"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2OTQ5Nw==", "bodyText": "Should we export the reactive limits even if the voltage regulation is OFF?", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r455669497", "createdAt": "2020-07-16T09:57:45Z", "author": {"login": "mathbagu"}, "path": "ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteExporter.java", "diffHunk": "@@ -282,6 +282,29 @@ private static void convertXNode(UcteNetwork ucteNetwork, DanglingLine danglingL\n         UcteNode ucteNode = convertXNode(ucteNetwork, xnodeCode, geographicalName, ucteNodeStatus);\n         ucteNode.setActiveLoad((float) danglingLine.getP0());\n         ucteNode.setReactiveLoad((float) danglingLine.getQ0());\n+        double generatorTargetP = danglingLine.getGeneration().getTargetP();\n+        ucteNode.setActivePowerGeneration(Double.isNaN(generatorTargetP) ? 0 : (float) -generatorTargetP);\n+        double generatorTargetQ = danglingLine.getGeneration().getTargetQ();\n+        ucteNode.setReactivePowerGeneration(Double.isNaN(generatorTargetQ) ? 0 : (float) -generatorTargetQ);\n+        if (danglingLine.getGeneration().isVoltageRegulationOn()) {\n+            ucteNode.setVoltageReference((float) danglingLine.getGeneration().getTargetV());\n+            float minP = (float) danglingLine.getGeneration().getMinP();\n+            float maxP = (float) danglingLine.getGeneration().getMaxP();\n+            float minQ = (float) danglingLine.getGeneration().getReactiveLimits().getMinQ(danglingLine.getGeneration().getTargetP());\n+            float maxQ = (float) danglingLine.getGeneration().getReactiveLimits().getMaxQ(danglingLine.getGeneration().getTargetP());\n+            if (minP != -DEFAULT_POWER_LIMIT) {\n+                ucteNode.setMinimumPermissibleActivePowerGeneration(-minP);\n+            }\n+            if (maxP != DEFAULT_POWER_LIMIT) {\n+                ucteNode.setMaximumPermissibleActivePowerGeneration(-maxP);\n+            }\n+            if (minQ != -DEFAULT_POWER_LIMIT) {\n+                ucteNode.setMinimumPermissibleReactivePowerGeneration(-minQ);\n+            }\n+            if (maxQ != DEFAULT_POWER_LIMIT) {\n+                ucteNode.setMaximumPermissibleReactivePowerGeneration(-maxQ);\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcab7d06b95af527efa738b53e993174e69a08d9"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83bdd1124d31d94ddee9373a7a87430b31520f16", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/83bdd1124d31d94ddee9373a7a87430b31520f16", "committedDate": "2020-07-16T12:47:07Z", "message": "Change implementation: GenerationImpl is only created with attributes\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85a7fde19b84a2cf264db64970345b6070fe3ae6", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/85a7fde19b84a2cf264db64970345b6070fe3ae6", "committedDate": "2020-07-16T14:49:44Z", "message": "Change serialization\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15eb255e53393e6ddb36b648078dafdf1476774f", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/15eb255e53393e6ddb36b648078dafdf1476774f", "committedDate": "2020-07-16T15:09:08Z", "message": "Add checks\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c0b94b316271f33cdcfbf35c808fd51b5c42fc0", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/2c0b94b316271f33cdcfbf35c808fd51b5c42fc0", "committedDate": "2020-07-16T15:19:57Z", "message": "move variant management in generation\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26eafbea5efbdf18f8ea90e1afbe08fe746b25a8", "author": {"user": {"login": "annetill", "name": "Anne Tilloy"}}, "url": "https://github.com/powsybl/powsybl-core/commit/26eafbea5efbdf18f8ea90e1afbe08fe746b25a8", "committedDate": "2020-07-17T08:01:52Z", "message": "Merge branch 'master' into xnode-with-regulating-capability"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc37501bd3b12828233b020e93f273427ed353ec", "author": {"user": {"login": "annetill", "name": "Anne Tilloy"}}, "url": "https://github.com/powsybl/powsybl-core/commit/fc37501bd3b12828233b020e93f273427ed353ec", "committedDate": "2020-07-17T08:37:46Z", "message": "Merge branch 'master' into xnode-with-regulating-capability"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "551bebc90e740abc1dd3511d74bb05ec6170b8ea", "author": {"user": {"login": "mathbagu", "name": "Mathieu BAGUE"}}, "url": "https://github.com/powsybl/powsybl-core/commit/551bebc90e740abc1dd3511d74bb05ec6170b8ea", "committedDate": "2020-07-17T14:01:37Z", "message": "Merge branch 'master' into xnode-with-regulating-capability"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60e74796bf3471f20076bf772bc534753195a060", "author": {"user": {"login": "annetill", "name": "Anne Tilloy"}}, "url": "https://github.com/powsybl/powsybl-core/commit/60e74796bf3471f20076bf772bc534753195a060", "committedDate": "2020-07-17T15:05:42Z", "message": "Fix UCTE exporter.\nAdd unit test.\n\nSigned-off-by: Anne Tilloy <anne.tilloy@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "495debad37625f346ca213bc0e7d5668aae73c91", "author": {"user": {"login": "annetill", "name": "Anne Tilloy"}}, "url": "https://github.com/powsybl/powsybl-core/commit/495debad37625f346ca213bc0e7d5668aae73c91", "committedDate": "2020-07-17T16:24:17Z", "message": "Merge branch 'xnode-with-regulating-capability' of https://github.com/powsybl/powsybl-core into xnode-with-regulating-capability"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwOTQ2Mjcw", "url": "https://github.com/powsybl/powsybl-core/pull/1357#pullrequestreview-450946270", "createdAt": "2020-07-17T20:43:46Z", "commit": {"oid": "495debad37625f346ca213bc0e7d5668aae73c91"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4335, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}