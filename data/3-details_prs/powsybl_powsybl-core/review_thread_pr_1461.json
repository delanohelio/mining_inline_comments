{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwNTQ3OTEx", "number": 1461, "reviewThreads": {"totalCount": 40, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjo0MTozOVrOE7CG-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOTo1ODoyN1rOFHHclw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzM1OTk1OnYy", "diffSide": "RIGHT", "path": "psse/psse-converter/src/test/java/com/powsybl/psse/converter/PsseImporterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjo0MTozOVrOH2cYtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODoxOToxMlrOH3FA-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg1MDIyOQ==", "bodyText": "I don't know if it would be useful but I would create an assertThrows custom version that also assert the message:\n PsseException x = assertThrows(PsseException.class, expectedMessage, () -> {\n            psseImporter.importData(dataSource, networkFactory, null);\n        });", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r526850229", "createdAt": "2020-11-19T12:41:39Z", "author": {"login": "mathbagu"}, "path": "psse/psse-converter/src/test/java/com/powsybl/psse/converter/PsseImporterTest.java", "diffHunk": "@@ -107,15 +112,36 @@ public void importTestT3W() throws IOException {\n         importTest(\"ThreeMIB_T3W_modified\", \"ThreeMIB_T3W_modified.RAW\", true);\n     }\n \n-    @Test(expected = PsseException.class)\n-    public void badVersionTest() {\n+    @Test()\n+    public void badModeTest() {\n         ReadOnlyDataSource dataSource = new ResourceDataSource(\"case-flag-not-supported\", new ResourceSet(\"/\", \"case-flag-not-supported.raw\"));\n-        new PsseImporter().importData(dataSource, new NetworkFactoryImpl(), null);\n+        PsseImporter psseImporter = new PsseImporter();\n+        NetworkFactory networkFactory = new NetworkFactoryImpl();\n+        PsseException x = assertThrows(PsseException.class, () -> {\n+            psseImporter.importData(dataSource, networkFactory, null);\n+        });\n+        assertEquals(\"Incremental load of data option (IC = 1) is not supported\", x.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUxNTg5Nw==", "bodyText": "I like the way this can be expressed using assertj. Even people from junit recommend it (junit-team/junit5#2128). And we already have assertj in the project, is not a new dependency.", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527515897", "createdAt": "2020-11-20T08:19:12Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-converter/src/test/java/com/powsybl/psse/converter/PsseImporterTest.java", "diffHunk": "@@ -107,15 +112,36 @@ public void importTestT3W() throws IOException {\n         importTest(\"ThreeMIB_T3W_modified\", \"ThreeMIB_T3W_modified.RAW\", true);\n     }\n \n-    @Test(expected = PsseException.class)\n-    public void badVersionTest() {\n+    @Test()\n+    public void badModeTest() {\n         ReadOnlyDataSource dataSource = new ResourceDataSource(\"case-flag-not-supported\", new ResourceSet(\"/\", \"case-flag-not-supported.raw\"));\n-        new PsseImporter().importData(dataSource, new NetworkFactoryImpl(), null);\n+        PsseImporter psseImporter = new PsseImporter();\n+        NetworkFactory networkFactory = new NetworkFactoryImpl();\n+        PsseException x = assertThrows(PsseException.class, () -> {\n+            psseImporter.importData(dataSource, networkFactory, null);\n+        });\n+        assertEquals(\"Incremental load of data option (IC = 1) is not supported\", x.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg1MDIyOQ=="}, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzM2MjUyOnYy", "diffSide": "RIGHT", "path": "psse/psse-model/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjo0MjoxOVrOH2caNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODoyMzo1N1rOH3FKrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg1MDYxMw==", "bodyText": "We prefer to sort dependencies by groupId:artifactId and regroup dependencies by scope", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r526850613", "createdAt": "2020-11-19T12:42:19Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/pom.xml", "diffHunk": "@@ -48,6 +48,10 @@\n         <dependency>\n             <groupId>com.univocity</groupId>\n             <artifactId>univocity-parsers</artifactId>\n+        </dependency>\n+\t\t<dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-databind</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUxODM4Mw==", "bodyText": "adjusted", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527518383", "createdAt": "2020-11-20T08:23:57Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/pom.xml", "diffHunk": "@@ -48,6 +48,10 @@\n         <dependency>\n             <groupId>com.univocity</groupId>\n             <artifactId>univocity-parsers</artifactId>\n+        </dependency>\n+\t\t<dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-databind</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg1MDYxMw=="}, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzM2NjE4OnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseCaseIdentification.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjo0MzozM1rOH2ccjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMTo0MzoxM1rOH3MZKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg1MTIxMg==", "bodyText": "Would be more pretty to wrtie PsseVersion.isSupported(rev) or maybe a PsseVersion.checkVersion(rev) method", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r526851212", "createdAt": "2020-11-19T12:43:33Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseCaseIdentification.java", "diffHunk": "@@ -101,4 +104,21 @@ public String getTitle2() {\n     public void setTitle2(String title2) {\n         this.title2 = title2;\n     }\n+\n+    public void validate() {\n+        if (ic == 1) {\n+            throw new PsseException(\"Incremental load of data option (IC = 1) is not supported\");\n+        }\n+        if (!PsseVersion.supportedVersions().contains(rev)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYzNjc3Nw==", "bodyText": "Like it. PsseVersion now answers isVersionSupported(rev) and returns a string with all supportedVersions().", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527636777", "createdAt": "2020-11-20T11:43:13Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseCaseIdentification.java", "diffHunk": "@@ -101,4 +104,21 @@ public String getTitle2() {\n     public void setTitle2(String title2) {\n         this.title2 = title2;\n     }\n+\n+    public void validate() {\n+        if (ic == 1) {\n+            throw new PsseException(\"Incremental load of data option (IC = 1) is not supported\");\n+        }\n+        if (!PsseVersion.supportedVersions().contains(rev)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg1MTIxMg=="}, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzM5MzA3OnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjo1MDoxNVrOH2cs-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODozMzozOVrOH3FfZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg1NTQxNw==", "bodyText": "I don't know if it's recommanded or not to use static initializer. Maybe we can replace by an initialization like this:\nprivate static final Map<Integer, PsseVersion> BY_NUMBER = Arrays.stream(values()).collect(Collectors.toMap(...));", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r526855417", "createdAt": "2020-11-19T12:50:15Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseConstants.java", "diffHunk": "@@ -6,14 +6,45 @@\n  */\n package com.powsybl.psse.model;\n \n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n /**\n- *\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n  */\n public final class PsseConstants {\n \n     private PsseConstants() {\n     }\n \n-    public static final int SUPPORTED_VERSION = 33;\n+    public enum PsseVersion {\n+        VERSION_33(33),\n+        VERSION_35(35);\n+\n+        private final int number;\n+        private static final Map<Integer, PsseVersion> BY_NUMBER = new HashMap<>();\n+\n+        static {\n+            for (PsseVersion v : PsseVersion.values()) {\n+                BY_NUMBER.put(v.getNumber(), v);\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUyMzY4Nw==", "bodyText": "Agree, static initializer blocks makes sense only when more complex code is required.", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527523687", "createdAt": "2020-11-20T08:33:39Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseConstants.java", "diffHunk": "@@ -6,14 +6,45 @@\n  */\n package com.powsybl.psse.model;\n \n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n /**\n- *\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n  */\n public final class PsseConstants {\n \n     private PsseConstants() {\n     }\n \n-    public static final int SUPPORTED_VERSION = 33;\n+    public enum PsseVersion {\n+        VERSION_33(33),\n+        VERSION_35(35);\n+\n+        private final int number;\n+        private static final Map<Integer, PsseVersion> BY_NUMBER = new HashMap<>();\n+\n+        static {\n+            for (PsseVersion v : PsseVersion.values()) {\n+                BY_NUMBER.put(v.getNumber(), v);\n+            }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg1NTQxNw=="}, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzM5OTEzOnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseConstants.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjo1MTo0OFrOH2cwtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMTo1MTowOFrOH3MoXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg1NjM3NA==", "bodyText": "If you follow my advice, maybe the BY_NUMBER map is not needed anymore.", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r526856374", "createdAt": "2020-11-19T12:51:48Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseConstants.java", "diffHunk": "@@ -6,14 +6,45 @@\n  */\n package com.powsybl.psse.model;\n \n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n /**\n- *\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n  */\n public final class PsseConstants {\n \n     private PsseConstants() {\n     }\n \n-    public static final int SUPPORTED_VERSION = 33;\n+    public enum PsseVersion {\n+        VERSION_33(33),\n+        VERSION_35(35);\n+\n+        private final int number;\n+        private static final Map<Integer, PsseVersion> BY_NUMBER = new HashMap<>();\n+\n+        static {\n+            for (PsseVersion v : PsseVersion.values()) {\n+                BY_NUMBER.put(v.getNumber(), v);\n+            }\n+        }\n+\n+        private PsseVersion(int number) {\n+            this.number = number;\n+        }\n+\n+        public static PsseVersion fromNumber(int number) {\n+            return BY_NUMBER.get(number);\n+        }\n+\n+        public static Set<Integer> supportedVersions() {\n+            return BY_NUMBER.keySet();\n+        }\n+\n+        public int getNumber() {\n+            return number;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY0MDY3MQ==", "bodyText": "It is required to obtain the proper Enum value given an integer value read from the case. We want the version to be passed along the different methods that will manage the conversion using a specific type instead of a generic int.", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527640671", "createdAt": "2020-11-20T11:51:08Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseConstants.java", "diffHunk": "@@ -6,14 +6,45 @@\n  */\n package com.powsybl.psse.model;\n \n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n /**\n- *\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n  */\n public final class PsseConstants {\n \n     private PsseConstants() {\n     }\n \n-    public static final int SUPPORTED_VERSION = 33;\n+    public enum PsseVersion {\n+        VERSION_33(33),\n+        VERSION_35(35);\n+\n+        private final int number;\n+        private static final Map<Integer, PsseVersion> BY_NUMBER = new HashMap<>();\n+\n+        static {\n+            for (PsseVersion v : PsseVersion.values()) {\n+                BY_NUMBER.put(v.getNumber(), v);\n+            }\n+        }\n+\n+        private PsseVersion(int number) {\n+            this.number = number;\n+        }\n+\n+        public static PsseVersion fromNumber(int number) {\n+            return BY_NUMBER.get(number);\n+        }\n+\n+        public static Set<Integer> supportedVersions() {\n+            return BY_NUMBER.keySet();\n+        }\n+\n+        public int getNumber() {\n+            return number;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg1NjM3NA=="}, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzQxNDIzOnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseNonTransformerBranch35.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjo1NTozOVrOH2c53w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjo1NTozOVrOH2c53w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg1ODcxOQ==", "bodyText": "To be discussed: I notice that you create sub classes to support the v35 model. Maybe we should consider to have a single class for both version, but have access to the model version to throw exception when some getters/setters are not available. Something equivalent to what we have in the XIIDM parser", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r526858719", "createdAt": "2020-11-19T12:55:39Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseNonTransformerBranch35.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.univocity.parsers.annotations.Parsed;\n+\n+/**\n+ *\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+\n+@JsonIgnoreProperties({ \"ratea\", \"rateb\", \"ratec\" })\n+\n+public class PsseNonTransformerBranch35 extends PsseNonTransformerBranch {\n+\n+    @Parsed(defaultNullRead = \" \")\n+    private String name;\n+\n+    @Parsed\n+    private double rate1 = 0;\n+\n+    @Parsed\n+    private double rate2 = 0;\n+\n+    @Parsed\n+    private double rate3 = 0;\n+\n+    @Parsed\n+    private double rate4 = 0;\n+\n+    @Parsed\n+    private double rate5 = 0;\n+\n+    @Parsed\n+    private double rate6 = 0;\n+\n+    @Parsed\n+    private double rate7 = 0;\n+\n+    @Parsed\n+    private double rate8 = 0;\n+\n+    @Parsed\n+    private double rate9 = 0;\n+\n+    @Parsed\n+    private double rate10 = 0;\n+\n+    @Parsed\n+    private double rate11 = 0;\n+\n+    @Parsed\n+    private double rate12 = 0;\n+\n+    @Override\n+    public double getRatea() {\n+        throw new PsseException(\"Ratea not available in version 35\");\n+    }\n+\n+    @Override\n+    public void setRatea(double ratea) {\n+        throw new PsseException(\"Ratea not available in version 35\");\n+    }\n+\n+    @Override\n+    public double getRateb() {\n+        throw new PsseException(\"Rateb not available in version 35\");\n+    }\n+\n+    @Override\n+    public void setRateb(double rateb) {\n+        throw new PsseException(\"Rateb not available in version 35\");\n+    }\n+\n+    @Override\n+    public double getRatec() {\n+        throw new PsseException(\"Ratec not available in version 35\");\n+    }\n+\n+    @Override\n+    public void setRatec(double ratec) {\n+        throw new PsseException(\"Ratec not available in version 35\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzQxNTQzOnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseNonTransformerBranch35.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjo1NTo1OFrOH2c6nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMTo1NzoxM1rOH3M0AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg1ODkwOA==", "bodyText": "Could it be null?", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r526858908", "createdAt": "2020-11-19T12:55:58Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseNonTransformerBranch35.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.univocity.parsers.annotations.Parsed;\n+\n+/**\n+ *\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+\n+@JsonIgnoreProperties({ \"ratea\", \"rateb\", \"ratec\" })\n+\n+public class PsseNonTransformerBranch35 extends PsseNonTransformerBranch {\n+\n+    @Parsed(defaultNullRead = \" \")\n+    private String name;\n+\n+    @Parsed\n+    private double rate1 = 0;\n+\n+    @Parsed\n+    private double rate2 = 0;\n+\n+    @Parsed\n+    private double rate3 = 0;\n+\n+    @Parsed\n+    private double rate4 = 0;\n+\n+    @Parsed\n+    private double rate5 = 0;\n+\n+    @Parsed\n+    private double rate6 = 0;\n+\n+    @Parsed\n+    private double rate7 = 0;\n+\n+    @Parsed\n+    private double rate8 = 0;\n+\n+    @Parsed\n+    private double rate9 = 0;\n+\n+    @Parsed\n+    private double rate10 = 0;\n+\n+    @Parsed\n+    private double rate11 = 0;\n+\n+    @Parsed\n+    private double rate12 = 0;\n+\n+    @Override\n+    public double getRatea() {\n+        throw new PsseException(\"Ratea not available in version 35\");\n+    }\n+\n+    @Override\n+    public void setRatea(double ratea) {\n+        throw new PsseException(\"Ratea not available in version 35\");\n+    }\n+\n+    @Override\n+    public double getRateb() {\n+        throw new PsseException(\"Rateb not available in version 35\");\n+    }\n+\n+    @Override\n+    public void setRateb(double rateb) {\n+        throw new PsseException(\"Rateb not available in version 35\");\n+    }\n+\n+    @Override\n+    public double getRatec() {\n+        throw new PsseException(\"Ratec not available in version 35\");\n+    }\n+\n+    @Override\n+    public void setRatec(double ratec) {\n+        throw new PsseException(\"Ratec not available in version 35\");\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY0MzY0OQ==", "bodyText": "No, it never should be null. Parser should provide an empty string. Added Objects.requireNonNull.", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527643649", "createdAt": "2020-11-20T11:57:13Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseNonTransformerBranch35.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.univocity.parsers.annotations.Parsed;\n+\n+/**\n+ *\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+\n+@JsonIgnoreProperties({ \"ratea\", \"rateb\", \"ratec\" })\n+\n+public class PsseNonTransformerBranch35 extends PsseNonTransformerBranch {\n+\n+    @Parsed(defaultNullRead = \" \")\n+    private String name;\n+\n+    @Parsed\n+    private double rate1 = 0;\n+\n+    @Parsed\n+    private double rate2 = 0;\n+\n+    @Parsed\n+    private double rate3 = 0;\n+\n+    @Parsed\n+    private double rate4 = 0;\n+\n+    @Parsed\n+    private double rate5 = 0;\n+\n+    @Parsed\n+    private double rate6 = 0;\n+\n+    @Parsed\n+    private double rate7 = 0;\n+\n+    @Parsed\n+    private double rate8 = 0;\n+\n+    @Parsed\n+    private double rate9 = 0;\n+\n+    @Parsed\n+    private double rate10 = 0;\n+\n+    @Parsed\n+    private double rate11 = 0;\n+\n+    @Parsed\n+    private double rate12 = 0;\n+\n+    @Override\n+    public double getRatea() {\n+        throw new PsseException(\"Ratea not available in version 35\");\n+    }\n+\n+    @Override\n+    public void setRatea(double ratea) {\n+        throw new PsseException(\"Ratea not available in version 35\");\n+    }\n+\n+    @Override\n+    public double getRateb() {\n+        throw new PsseException(\"Rateb not available in version 35\");\n+    }\n+\n+    @Override\n+    public void setRateb(double rateb) {\n+        throw new PsseException(\"Rateb not available in version 35\");\n+    }\n+\n+    @Override\n+    public double getRatec() {\n+        throw new PsseException(\"Ratec not available in version 35\");\n+    }\n+\n+    @Override\n+    public void setRatec(double ratec) {\n+        throw new PsseException(\"Ratec not available in version 35\");\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg1ODkwOA=="}, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzQyMzc1OnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/AreaInterchangeData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjo1ODowM1rOH2c_gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNToxMDoxMFrOH3Tp9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg2MDE2Mw==", "bodyText": "Replace by a switch case to prepare to support additional versions. The default case should throw an exception", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r526860163", "createdAt": "2020-11-19T12:58:03Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/AreaInterchangeData.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.powsybl.psse.model.PsseArea;\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+class AreaInterchangeData extends AbstractRecordGroup<PsseArea> {\n+\n+    private static final String[] FIELD_NAMES_35 = {\"iarea\", \"isw\", \"pdes\", \"ptol\", \"arname\"};\n+    private static final String[] FIELD_NAMES_33 = {\"i\", \"isw\", \"pdes\", \"ptol\", \"arname\"};\n+\n+    AreaInterchangeData() {\n+        super(PsseRecordGroup.AREA_INTERCHANGE_DATA);\n+    }\n+\n+    @Override\n+    public Class<PsseArea> psseTypeClass(PsseVersion version) {\n+        return PsseArea.class;\n+    }\n+\n+    @Override\n+    public String[] fieldNames(PsseVersion version) {\n+        if (version == PsseVersion.VERSION_35) {\n+            return FIELD_NAMES_35;\n+        } else {\n+            return FIELD_NAMES_33;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc1NTc2Ng==", "bodyText": "Fixed", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527755766", "createdAt": "2020-11-20T15:10:10Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/AreaInterchangeData.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.powsybl.psse.model.PsseArea;\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+class AreaInterchangeData extends AbstractRecordGroup<PsseArea> {\n+\n+    private static final String[] FIELD_NAMES_35 = {\"iarea\", \"isw\", \"pdes\", \"ptol\", \"arname\"};\n+    private static final String[] FIELD_NAMES_33 = {\"i\", \"isw\", \"pdes\", \"ptol\", \"arname\"};\n+\n+    AreaInterchangeData() {\n+        super(PsseRecordGroup.AREA_INTERCHANGE_DATA);\n+    }\n+\n+    @Override\n+    public Class<PsseArea> psseTypeClass(PsseVersion version) {\n+        return PsseArea.class;\n+    }\n+\n+    @Override\n+    public String[] fieldNames(PsseVersion version) {\n+        if (version == PsseVersion.VERSION_35) {\n+            return FIELD_NAMES_35;\n+        } else {\n+            return FIELD_NAMES_33;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg2MDE2Mw=="}, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzQyNDQzOnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/BusData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjo1ODoxNVrOH2c_6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNToxMDoxOFrOH3TqOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg2MDI2Ng==", "bodyText": "Same remark", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r526860266", "createdAt": "2020-11-19T12:58:15Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/BusData.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.powsybl.psse.model.PsseBus;\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+class BusData extends AbstractRecordGroup<PsseBus> {\n+\n+    private static final String[] FIELD_NAMES_35 = {\"ibus\", \"name\", \"baskv\", \"ide\", \"area\", \"zone\", \"owner\", \"vm\", \"va\", \"nvhi\", \"nvlo\", \"evhi\", \"evlo\"};\n+    private static final String[] FIELD_NAMES_33 = {\"i\", \"name\", \"baskv\", \"ide\", \"area\", \"zone\", \"owner\", \"vm\", \"va\", \"nvhi\", \"nvlo\", \"evhi\", \"evlo\"};\n+\n+    BusData() {\n+        super(PsseRecordGroup.BUS_DATA);\n+    }\n+\n+    @Override\n+    public Class<PsseBus> psseTypeClass(PsseVersion version) {\n+        return PsseBus.class;\n+    }\n+\n+    @Override\n+    public String[] fieldNames(PsseVersion version) {\n+        if (version == PsseVersion.VERSION_35) {\n+            return FIELD_NAMES_35;\n+        } else {\n+            return FIELD_NAMES_33;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc1NTgzMw==", "bodyText": "Fixed", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527755833", "createdAt": "2020-11-20T15:10:18Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/BusData.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.powsybl.psse.model.PsseBus;\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+class BusData extends AbstractRecordGroup<PsseBus> {\n+\n+    private static final String[] FIELD_NAMES_35 = {\"ibus\", \"name\", \"baskv\", \"ide\", \"area\", \"zone\", \"owner\", \"vm\", \"va\", \"nvhi\", \"nvlo\", \"evhi\", \"evlo\"};\n+    private static final String[] FIELD_NAMES_33 = {\"i\", \"name\", \"baskv\", \"ide\", \"area\", \"zone\", \"owner\", \"vm\", \"va\", \"nvhi\", \"nvlo\", \"evhi\", \"evlo\"};\n+\n+    BusData() {\n+        super(PsseRecordGroup.BUS_DATA);\n+    }\n+\n+    @Override\n+    public Class<PsseBus> psseTypeClass(PsseVersion version) {\n+        return PsseBus.class;\n+    }\n+\n+    @Override\n+    public String[] fieldNames(PsseVersion version) {\n+        if (version == PsseVersion.VERSION_35) {\n+            return FIELD_NAMES_35;\n+        } else {\n+            return FIELD_NAMES_33;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg2MDI2Ng=="}, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzQyODMwOnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/CaseIdentificationData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjo1OToxMVrOH2dCQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMjoxMDoxN1rOH3NOZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg2MDg2Nw==", "bodyText": "Not sure that the super is needed", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r526860867", "createdAt": "2020-11-19T12:59:11Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/CaseIdentificationData.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.powsybl.psse.model.PsseCaseIdentification;\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+class CaseIdentificationData extends AbstractRecordGroup<PsseCaseIdentification> {\n+\n+    private static final String[] FIELD_NAMES = {\"ic\", \"sbase\", \"rev\", \"xfrrat\", \"nxfrat\", \"basfrq\", \"title1\", \"title2\"};\n+\n+    CaseIdentificationData() {\n+        super(PsseRecordGroup.CASE_IDENTIFICATION_DATA);\n+    }\n+\n+    public PsseCaseIdentification read1(BufferedReader reader, Context context) throws IOException {\n+        String line = Util.readLineAndRemoveComment(reader);\n+        context.detectDelimiter(line);\n+\n+        String[] headers = fieldNames(context.getVersion());\n+        PsseCaseIdentification caseIdentification = parseSingleRecord(line, headers, context);\n+        caseIdentification.setTitle1(reader.readLine());\n+        caseIdentification.setTitle2(reader.readLine());\n+\n+        context.setFieldNames(getRecordGroup(), headers);\n+        context.setVersion(PsseVersion.fromNumber(caseIdentification.getRev()));\n+        return caseIdentification;\n+    }\n+\n+    PsseCaseIdentification read1(JsonNode networkNode, Context context) {\n+        context.setDelimiter(\",\");\n+        PsseCaseIdentification caseIdentification = super.read(networkNode, context).get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY1MDQwNg==", "bodyText": "Fixed", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527650406", "createdAt": "2020-11-20T12:10:17Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/CaseIdentificationData.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.powsybl.psse.model.PsseCaseIdentification;\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+class CaseIdentificationData extends AbstractRecordGroup<PsseCaseIdentification> {\n+\n+    private static final String[] FIELD_NAMES = {\"ic\", \"sbase\", \"rev\", \"xfrrat\", \"nxfrat\", \"basfrq\", \"title1\", \"title2\"};\n+\n+    CaseIdentificationData() {\n+        super(PsseRecordGroup.CASE_IDENTIFICATION_DATA);\n+    }\n+\n+    public PsseCaseIdentification read1(BufferedReader reader, Context context) throws IOException {\n+        String line = Util.readLineAndRemoveComment(reader);\n+        context.detectDelimiter(line);\n+\n+        String[] headers = fieldNames(context.getVersion());\n+        PsseCaseIdentification caseIdentification = parseSingleRecord(line, headers, context);\n+        caseIdentification.setTitle1(reader.readLine());\n+        caseIdentification.setTitle2(reader.readLine());\n+\n+        context.setFieldNames(getRecordGroup(), headers);\n+        context.setVersion(PsseVersion.fromNumber(caseIdentification.getRev()));\n+        return caseIdentification;\n+    }\n+\n+    PsseCaseIdentification read1(JsonNode networkNode, Context context) {\n+        context.setDelimiter(\",\");\n+        PsseCaseIdentification caseIdentification = super.read(networkNode, context).get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg2MDg2Nw=="}, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzQzMDAzOnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/CaseIdentificationData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjo1OTozNFrOH2dDQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMjoxMDoyNVrOH3NOmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg2MTEyMA==", "bodyText": "Why this method is private package and the other one public?", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r526861120", "createdAt": "2020-11-19T12:59:34Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/CaseIdentificationData.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.powsybl.psse.model.PsseCaseIdentification;\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+class CaseIdentificationData extends AbstractRecordGroup<PsseCaseIdentification> {\n+\n+    private static final String[] FIELD_NAMES = {\"ic\", \"sbase\", \"rev\", \"xfrrat\", \"nxfrat\", \"basfrq\", \"title1\", \"title2\"};\n+\n+    CaseIdentificationData() {\n+        super(PsseRecordGroup.CASE_IDENTIFICATION_DATA);\n+    }\n+\n+    public PsseCaseIdentification read1(BufferedReader reader, Context context) throws IOException {\n+        String line = Util.readLineAndRemoveComment(reader);\n+        context.detectDelimiter(line);\n+\n+        String[] headers = fieldNames(context.getVersion());\n+        PsseCaseIdentification caseIdentification = parseSingleRecord(line, headers, context);\n+        caseIdentification.setTitle1(reader.readLine());\n+        caseIdentification.setTitle2(reader.readLine());\n+\n+        context.setFieldNames(getRecordGroup(), headers);\n+        context.setVersion(PsseVersion.fromNumber(caseIdentification.getRev()));\n+        return caseIdentification;\n+    }\n+\n+    PsseCaseIdentification read1(JsonNode networkNode, Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY1MDQ1OA==", "bodyText": "Fixed. Both read1 methods should be private package. Not expected to be used outside.", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527650458", "createdAt": "2020-11-20T12:10:25Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/CaseIdentificationData.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.powsybl.psse.model.PsseCaseIdentification;\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+class CaseIdentificationData extends AbstractRecordGroup<PsseCaseIdentification> {\n+\n+    private static final String[] FIELD_NAMES = {\"ic\", \"sbase\", \"rev\", \"xfrrat\", \"nxfrat\", \"basfrq\", \"title1\", \"title2\"};\n+\n+    CaseIdentificationData() {\n+        super(PsseRecordGroup.CASE_IDENTIFICATION_DATA);\n+    }\n+\n+    public PsseCaseIdentification read1(BufferedReader reader, Context context) throws IOException {\n+        String line = Util.readLineAndRemoveComment(reader);\n+        context.detectDelimiter(line);\n+\n+        String[] headers = fieldNames(context.getVersion());\n+        PsseCaseIdentification caseIdentification = parseSingleRecord(line, headers, context);\n+        caseIdentification.setTitle1(reader.readLine());\n+        caseIdentification.setTitle2(reader.readLine());\n+\n+        context.setFieldNames(getRecordGroup(), headers);\n+        context.setVersion(PsseVersion.fromNumber(caseIdentification.getRev()));\n+        return caseIdentification;\n+    }\n+\n+    PsseCaseIdentification read1(JsonNode networkNode, Context context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg2MTEyMA=="}, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzQzNTA5OnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/CaseIdentificationData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMzowMDo0OVrOH2dGbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMjoxMDo0M1rOH3NPPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg2MTkzMg==", "bodyText": "Why this method is private package and the other one public?", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r526861932", "createdAt": "2020-11-19T13:00:49Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/CaseIdentificationData.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.powsybl.psse.model.PsseCaseIdentification;\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+class CaseIdentificationData extends AbstractRecordGroup<PsseCaseIdentification> {\n+\n+    private static final String[] FIELD_NAMES = {\"ic\", \"sbase\", \"rev\", \"xfrrat\", \"nxfrat\", \"basfrq\", \"title1\", \"title2\"};\n+\n+    CaseIdentificationData() {\n+        super(PsseRecordGroup.CASE_IDENTIFICATION_DATA);\n+    }\n+\n+    public PsseCaseIdentification read1(BufferedReader reader, Context context) throws IOException {\n+        String line = Util.readLineAndRemoveComment(reader);\n+        context.detectDelimiter(line);\n+\n+        String[] headers = fieldNames(context.getVersion());\n+        PsseCaseIdentification caseIdentification = parseSingleRecord(line, headers, context);\n+        caseIdentification.setTitle1(reader.readLine());\n+        caseIdentification.setTitle2(reader.readLine());\n+\n+        context.setFieldNames(getRecordGroup(), headers);\n+        context.setVersion(PsseVersion.fromNumber(caseIdentification.getRev()));\n+        return caseIdentification;\n+    }\n+\n+    PsseCaseIdentification read1(JsonNode networkNode, Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY1MDYyMg==", "bodyText": "Fixed", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527650622", "createdAt": "2020-11-20T12:10:43Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/CaseIdentificationData.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.powsybl.psse.model.PsseCaseIdentification;\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+class CaseIdentificationData extends AbstractRecordGroup<PsseCaseIdentification> {\n+\n+    private static final String[] FIELD_NAMES = {\"ic\", \"sbase\", \"rev\", \"xfrrat\", \"nxfrat\", \"basfrq\", \"title1\", \"title2\"};\n+\n+    CaseIdentificationData() {\n+        super(PsseRecordGroup.CASE_IDENTIFICATION_DATA);\n+    }\n+\n+    public PsseCaseIdentification read1(BufferedReader reader, Context context) throws IOException {\n+        String line = Util.readLineAndRemoveComment(reader);\n+        context.detectDelimiter(line);\n+\n+        String[] headers = fieldNames(context.getVersion());\n+        PsseCaseIdentification caseIdentification = parseSingleRecord(line, headers, context);\n+        caseIdentification.setTitle1(reader.readLine());\n+        caseIdentification.setTitle2(reader.readLine());\n+\n+        context.setFieldNames(getRecordGroup(), headers);\n+        context.setVersion(PsseVersion.fromNumber(caseIdentification.getRev()));\n+        return caseIdentification;\n+    }\n+\n+    PsseCaseIdentification read1(JsonNode networkNode, Context context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg2MTkzMg=="}, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzQzNzE3OnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/Context.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMzowMToyMVrOH2dHsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMjoxMDo1MVrOH3NPZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg2MjI1Ng==", "bodyText": "Remove the this prefix", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r526862256", "createdAt": "2020-11-19T13:01:21Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/Context.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+import com.univocity.parsers.common.DataProcessingException;\n+import com.univocity.parsers.common.ParsingContext;\n+import com.univocity.parsers.common.RetryableErrorHandler;\n+import com.univocity.parsers.csv.CsvParser;\n+import com.univocity.parsers.csv.CsvParserSettings;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.EnumMap;\n+import java.util.Map;\n+\n+import static com.powsybl.psse.model.data.AbstractRecordGroup.PsseRecordGroup;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class Context {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Context.class);\n+\n+    private final Map<PsseRecordGroup, String[]> fieldNames = new EnumMap<>(PsseRecordGroup.class);\n+    private final CsvParserSettings csvParserSettings;\n+    private String delimiter;\n+    private PsseVersion version;\n+    private int currentRecordGroupMaxNumFields;\n+\n+    public Context() {\n+        csvParserSettings = new CsvParserSettings();\n+        csvParserSettings.setHeaderExtractionEnabled(false);\n+        csvParserSettings.setQuoteDetectionEnabled(true);\n+        csvParserSettings.setProcessorErrorHandler(new RetryableErrorHandler<ParsingContext>() {\n+            @Override\n+            public void handleError(DataProcessingException error, Object[] inputRow, ParsingContext context) {\n+                LOGGER.error(error.getMessage());\n+            }\n+        });\n+    }\n+\n+    public PsseVersion getVersion() {\n+        return this.version;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY1MDY2MQ==", "bodyText": "Fixed", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527650661", "createdAt": "2020-11-20T12:10:51Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/Context.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+import com.univocity.parsers.common.DataProcessingException;\n+import com.univocity.parsers.common.ParsingContext;\n+import com.univocity.parsers.common.RetryableErrorHandler;\n+import com.univocity.parsers.csv.CsvParser;\n+import com.univocity.parsers.csv.CsvParserSettings;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.EnumMap;\n+import java.util.Map;\n+\n+import static com.powsybl.psse.model.data.AbstractRecordGroup.PsseRecordGroup;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class Context {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Context.class);\n+\n+    private final Map<PsseRecordGroup, String[]> fieldNames = new EnumMap<>(PsseRecordGroup.class);\n+    private final CsvParserSettings csvParserSettings;\n+    private String delimiter;\n+    private PsseVersion version;\n+    private int currentRecordGroupMaxNumFields;\n+\n+    public Context() {\n+        csvParserSettings = new CsvParserSettings();\n+        csvParserSettings.setHeaderExtractionEnabled(false);\n+        csvParserSettings.setQuoteDetectionEnabled(true);\n+        csvParserSettings.setProcessorErrorHandler(new RetryableErrorHandler<ParsingContext>() {\n+            @Override\n+            public void handleError(DataProcessingException error, Object[] inputRow, ParsingContext context) {\n+                LOGGER.error(error.getMessage());\n+            }\n+        });\n+    }\n+\n+    public PsseVersion getVersion() {\n+        return this.version;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg2MjI1Ng=="}, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzQ0MDg0OnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/Context.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMzowMjoxMFrOH2dJuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMjoxMjoyNlrOH3NSQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg2Mjc3Nw==", "bodyText": "Consider toString vs getMessage", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r526862777", "createdAt": "2020-11-19T13:02:10Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/Context.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+import com.univocity.parsers.common.DataProcessingException;\n+import com.univocity.parsers.common.ParsingContext;\n+import com.univocity.parsers.common.RetryableErrorHandler;\n+import com.univocity.parsers.csv.CsvParser;\n+import com.univocity.parsers.csv.CsvParserSettings;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.EnumMap;\n+import java.util.Map;\n+\n+import static com.powsybl.psse.model.data.AbstractRecordGroup.PsseRecordGroup;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class Context {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Context.class);\n+\n+    private final Map<PsseRecordGroup, String[]> fieldNames = new EnumMap<>(PsseRecordGroup.class);\n+    private final CsvParserSettings csvParserSettings;\n+    private String delimiter;\n+    private PsseVersion version;\n+    private int currentRecordGroupMaxNumFields;\n+\n+    public Context() {\n+        csvParserSettings = new CsvParserSettings();\n+        csvParserSettings.setHeaderExtractionEnabled(false);\n+        csvParserSettings.setQuoteDetectionEnabled(true);\n+        csvParserSettings.setProcessorErrorHandler(new RetryableErrorHandler<ParsingContext>() {\n+            @Override\n+            public void handleError(DataProcessingException error, Object[] inputRow, ParsingContext context) {\n+                LOGGER.error(error.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY1MTM5NA==", "bodyText": "Adjusted, we log the ParsingContext and the Throwable error for easier identification of the potential problems.", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527651394", "createdAt": "2020-11-20T12:12:26Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/Context.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+import com.univocity.parsers.common.DataProcessingException;\n+import com.univocity.parsers.common.ParsingContext;\n+import com.univocity.parsers.common.RetryableErrorHandler;\n+import com.univocity.parsers.csv.CsvParser;\n+import com.univocity.parsers.csv.CsvParserSettings;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.EnumMap;\n+import java.util.Map;\n+\n+import static com.powsybl.psse.model.data.AbstractRecordGroup.PsseRecordGroup;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class Context {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Context.class);\n+\n+    private final Map<PsseRecordGroup, String[]> fieldNames = new EnumMap<>(PsseRecordGroup.class);\n+    private final CsvParserSettings csvParserSettings;\n+    private String delimiter;\n+    private PsseVersion version;\n+    private int currentRecordGroupMaxNumFields;\n+\n+    public Context() {\n+        csvParserSettings = new CsvParserSettings();\n+        csvParserSettings.setHeaderExtractionEnabled(false);\n+        csvParserSettings.setQuoteDetectionEnabled(true);\n+        csvParserSettings.setProcessorErrorHandler(new RetryableErrorHandler<ParsingContext>() {\n+            @Override\n+            public void handleError(DataProcessingException error, Object[] inputRow, ParsingContext context) {\n+                LOGGER.error(error.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg2Mjc3Nw=="}, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNDg4MjQ0OnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/Context.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxODowNjowOFrOH2rMiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMjoxNDoyNVrOH3NVhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5Mjg3NQ==", "bodyText": "Remove extra this prefix", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527092875", "createdAt": "2020-11-19T18:06:08Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/Context.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+import com.univocity.parsers.common.DataProcessingException;\n+import com.univocity.parsers.common.ParsingContext;\n+import com.univocity.parsers.common.RetryableErrorHandler;\n+import com.univocity.parsers.csv.CsvParser;\n+import com.univocity.parsers.csv.CsvParserSettings;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.EnumMap;\n+import java.util.Map;\n+\n+import static com.powsybl.psse.model.data.AbstractRecordGroup.PsseRecordGroup;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class Context {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Context.class);\n+\n+    private final Map<PsseRecordGroup, String[]> fieldNames = new EnumMap<>(PsseRecordGroup.class);\n+    private final CsvParserSettings csvParserSettings;\n+    private String delimiter;\n+    private PsseVersion version;\n+    private int currentRecordGroupMaxNumFields;\n+\n+    public Context() {\n+        csvParserSettings = new CsvParserSettings();\n+        csvParserSettings.setHeaderExtractionEnabled(false);\n+        csvParserSettings.setQuoteDetectionEnabled(true);\n+        csvParserSettings.setProcessorErrorHandler(new RetryableErrorHandler<ParsingContext>() {\n+            @Override\n+            public void handleError(DataProcessingException error, Object[] inputRow, ParsingContext context) {\n+                LOGGER.error(error.getMessage());\n+            }\n+        });\n+    }\n+\n+    public PsseVersion getVersion() {\n+        return this.version;\n+    }\n+\n+    public Context setVersion(PsseVersion version) {\n+        this.version = version;\n+        return this;\n+    }\n+\n+    public String getDelimiter() {\n+        return this.delimiter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY1MjIzMA==", "bodyText": "Fixed", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527652230", "createdAt": "2020-11-20T12:14:25Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/Context.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+import com.univocity.parsers.common.DataProcessingException;\n+import com.univocity.parsers.common.ParsingContext;\n+import com.univocity.parsers.common.RetryableErrorHandler;\n+import com.univocity.parsers.csv.CsvParser;\n+import com.univocity.parsers.csv.CsvParserSettings;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.EnumMap;\n+import java.util.Map;\n+\n+import static com.powsybl.psse.model.data.AbstractRecordGroup.PsseRecordGroup;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class Context {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Context.class);\n+\n+    private final Map<PsseRecordGroup, String[]> fieldNames = new EnumMap<>(PsseRecordGroup.class);\n+    private final CsvParserSettings csvParserSettings;\n+    private String delimiter;\n+    private PsseVersion version;\n+    private int currentRecordGroupMaxNumFields;\n+\n+    public Context() {\n+        csvParserSettings = new CsvParserSettings();\n+        csvParserSettings.setHeaderExtractionEnabled(false);\n+        csvParserSettings.setQuoteDetectionEnabled(true);\n+        csvParserSettings.setProcessorErrorHandler(new RetryableErrorHandler<ParsingContext>() {\n+            @Override\n+            public void handleError(DataProcessingException error, Object[] inputRow, ParsingContext context) {\n+                LOGGER.error(error.getMessage());\n+            }\n+        });\n+    }\n+\n+    public PsseVersion getVersion() {\n+        return this.version;\n+    }\n+\n+    public Context setVersion(PsseVersion version) {\n+        this.version = version;\n+        return this;\n+    }\n+\n+    public String getDelimiter() {\n+        return this.delimiter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5Mjg3NQ=="}, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNDg4MzYyOnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/Context.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxODowNjozMFrOH2rNYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMjoxNDozMlrOH3NVwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5MzA4OA==", "bodyText": "Remove extra this prefix", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527093088", "createdAt": "2020-11-19T18:06:30Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/Context.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+import com.univocity.parsers.common.DataProcessingException;\n+import com.univocity.parsers.common.ParsingContext;\n+import com.univocity.parsers.common.RetryableErrorHandler;\n+import com.univocity.parsers.csv.CsvParser;\n+import com.univocity.parsers.csv.CsvParserSettings;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.EnumMap;\n+import java.util.Map;\n+\n+import static com.powsybl.psse.model.data.AbstractRecordGroup.PsseRecordGroup;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class Context {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Context.class);\n+\n+    private final Map<PsseRecordGroup, String[]> fieldNames = new EnumMap<>(PsseRecordGroup.class);\n+    private final CsvParserSettings csvParserSettings;\n+    private String delimiter;\n+    private PsseVersion version;\n+    private int currentRecordGroupMaxNumFields;\n+\n+    public Context() {\n+        csvParserSettings = new CsvParserSettings();\n+        csvParserSettings.setHeaderExtractionEnabled(false);\n+        csvParserSettings.setQuoteDetectionEnabled(true);\n+        csvParserSettings.setProcessorErrorHandler(new RetryableErrorHandler<ParsingContext>() {\n+            @Override\n+            public void handleError(DataProcessingException error, Object[] inputRow, ParsingContext context) {\n+                LOGGER.error(error.getMessage());\n+            }\n+        });\n+    }\n+\n+    public PsseVersion getVersion() {\n+        return this.version;\n+    }\n+\n+    public Context setVersion(PsseVersion version) {\n+        this.version = version;\n+        return this;\n+    }\n+\n+    public String getDelimiter() {\n+        return this.delimiter;\n+    }\n+\n+    public void setDelimiter(String delimiter) {\n+        this.delimiter = delimiter;\n+    }\n+\n+    public void detectDelimiter(String record) {\n+        // The order of delimiters is relevant\n+        csvParserSettings.setDelimiterDetectionEnabled(true, ',', ' ');\n+        CsvParser parser = new CsvParser(csvParserSettings);\n+        parser.parseLine(record);\n+        csvParserSettings.setFormat(parser.getDetectedFormat());\n+        csvParserSettings.setDelimiterDetectionEnabled(false);\n+        this.delimiter = parser.getDetectedFormat().getDelimiterString();\n+    }\n+\n+    public void setFieldNames(PsseRecordGroup recordGroup, String[] fieldNames) {\n+        this.fieldNames.put(recordGroup, fieldNames);\n+    }\n+\n+    public String[] getFieldNames(PsseRecordGroup recordGroup) {\n+        return this.fieldNames.get(recordGroup);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY1MjI4OQ==", "bodyText": "Fixed", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527652289", "createdAt": "2020-11-20T12:14:32Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/Context.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+import com.univocity.parsers.common.DataProcessingException;\n+import com.univocity.parsers.common.ParsingContext;\n+import com.univocity.parsers.common.RetryableErrorHandler;\n+import com.univocity.parsers.csv.CsvParser;\n+import com.univocity.parsers.csv.CsvParserSettings;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.EnumMap;\n+import java.util.Map;\n+\n+import static com.powsybl.psse.model.data.AbstractRecordGroup.PsseRecordGroup;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class Context {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Context.class);\n+\n+    private final Map<PsseRecordGroup, String[]> fieldNames = new EnumMap<>(PsseRecordGroup.class);\n+    private final CsvParserSettings csvParserSettings;\n+    private String delimiter;\n+    private PsseVersion version;\n+    private int currentRecordGroupMaxNumFields;\n+\n+    public Context() {\n+        csvParserSettings = new CsvParserSettings();\n+        csvParserSettings.setHeaderExtractionEnabled(false);\n+        csvParserSettings.setQuoteDetectionEnabled(true);\n+        csvParserSettings.setProcessorErrorHandler(new RetryableErrorHandler<ParsingContext>() {\n+            @Override\n+            public void handleError(DataProcessingException error, Object[] inputRow, ParsingContext context) {\n+                LOGGER.error(error.getMessage());\n+            }\n+        });\n+    }\n+\n+    public PsseVersion getVersion() {\n+        return this.version;\n+    }\n+\n+    public Context setVersion(PsseVersion version) {\n+        this.version = version;\n+        return this;\n+    }\n+\n+    public String getDelimiter() {\n+        return this.delimiter;\n+    }\n+\n+    public void setDelimiter(String delimiter) {\n+        this.delimiter = delimiter;\n+    }\n+\n+    public void detectDelimiter(String record) {\n+        // The order of delimiters is relevant\n+        csvParserSettings.setDelimiterDetectionEnabled(true, ',', ' ');\n+        CsvParser parser = new CsvParser(csvParserSettings);\n+        parser.parseLine(record);\n+        csvParserSettings.setFormat(parser.getDetectedFormat());\n+        csvParserSettings.setDelimiterDetectionEnabled(false);\n+        this.delimiter = parser.getDetectedFormat().getDelimiterString();\n+    }\n+\n+    public void setFieldNames(PsseRecordGroup recordGroup, String[] fieldNames) {\n+        this.fieldNames.put(recordGroup, fieldNames);\n+    }\n+\n+    public String[] getFieldNames(PsseRecordGroup recordGroup) {\n+        return this.fieldNames.get(recordGroup);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5MzA4OA=="}, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNDg4NDgxOnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/FixedBusShuntData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxODowNjo1MFrOH2rOJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNToxMDo0NFrOH3TraQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5MzI4Nw==", "bodyText": "Same remark", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527093287", "createdAt": "2020-11-19T18:06:50Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/FixedBusShuntData.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+import com.powsybl.psse.model.PsseFixedShunt;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+class FixedBusShuntData extends AbstractRecordGroup<PsseFixedShunt> {\n+\n+    private static final String[] FIELD_NAMES_35 = {\"ibus\", \"shntid\", \"stat\", \"gl\", \"bl\"};\n+    private static final String[] FIELD_NAMES_33 = {\"i\", \"id\", \"status\", \"gl\", \"bl\"};\n+\n+    public FixedBusShuntData() {\n+        super(PsseRecordGroup.FIXED_BUS_SHUNT_DATA);\n+    }\n+\n+    @Override\n+    public Class<PsseFixedShunt> psseTypeClass(PsseVersion version) {\n+        return PsseFixedShunt.class;\n+    }\n+\n+    @Override\n+    public String[] fieldNames(PsseVersion version) {\n+        if (version == PsseVersion.VERSION_35) {\n+            return FIELD_NAMES_35;\n+        } else {\n+            return FIELD_NAMES_33;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc1NjEzNw==", "bodyText": "Fixed", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527756137", "createdAt": "2020-11-20T15:10:44Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/FixedBusShuntData.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+import com.powsybl.psse.model.PsseFixedShunt;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+class FixedBusShuntData extends AbstractRecordGroup<PsseFixedShunt> {\n+\n+    private static final String[] FIELD_NAMES_35 = {\"ibus\", \"shntid\", \"stat\", \"gl\", \"bl\"};\n+    private static final String[] FIELD_NAMES_33 = {\"i\", \"id\", \"status\", \"gl\", \"bl\"};\n+\n+    public FixedBusShuntData() {\n+        super(PsseRecordGroup.FIXED_BUS_SHUNT_DATA);\n+    }\n+\n+    @Override\n+    public Class<PsseFixedShunt> psseTypeClass(PsseVersion version) {\n+        return PsseFixedShunt.class;\n+    }\n+\n+    @Override\n+    public String[] fieldNames(PsseVersion version) {\n+        if (version == PsseVersion.VERSION_35) {\n+            return FIELD_NAMES_35;\n+        } else {\n+            return FIELD_NAMES_33;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5MzI4Nw=="}, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNDg4NTkwOnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/GeneratorData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxODowNzowNVrOH2rOyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNToxMDo1NVrOH3Tr0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5MzQ0OA==", "bodyText": "Same remark", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527093448", "createdAt": "2020-11-19T18:07:05Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/GeneratorData.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+import com.powsybl.psse.model.PsseGenerator;\n+import com.powsybl.psse.model.PsseGenerator35;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+class GeneratorData extends AbstractRecordGroup<PsseGenerator> {\n+\n+    private static final String[] FIELD_NAMES_35 = {\"ibus\", \"machid\", \"pg\", \"qg\", \"qt\", \"qb\", \"vs\", \"ireg\", \"nreg\", \"mbase\", \"zr\", \"zx\", \"rt\", \"xt\", \"gtap\", \"stat\", \"rmpct\", \"pt\", \"pb\", \"baslod\", \"o1\", \"f1\", \"o2\", \"f2\", \"o3\", \"f3\", \"o4\", \"f4\", \"wmod\", \"wpf\"};\n+    private static final String[] FIELD_NAMES_33 = {\"i\", \"id\", \"pg\", \"qg\", \"qt\", \"qb\", \"vs\", \"ireg\", \"mbase\", \"zr\", \"zx\", \"rt\", \"xt\", \"gtap\", \"stat\", \"rmpct\", \"pt\", \"pb\", \"o1\", \"f1\", \"o2\", \"f2\", \"o3\", \"f3\", \"o4\", \"f4\", \"wmod\", \"wpf\"};\n+\n+    GeneratorData() {\n+        super(PsseRecordGroup.GENERATOR_DATA);\n+    }\n+\n+    @Override\n+    public String[] fieldNames(PsseVersion version) {\n+        if (version == PsseVersion.VERSION_35) {\n+            return FIELD_NAMES_35;\n+        } else {\n+            return FIELD_NAMES_33;\n+        }\n+    }\n+\n+    @Override\n+    public Class<? extends PsseGenerator> psseTypeClass(PsseVersion version) {\n+        if (version == PsseVersion.VERSION_35) {\n+            return PsseGenerator35.class;\n+        } else {\n+            return PsseGenerator.class;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc1NjI0Mg==", "bodyText": "Fixed", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527756242", "createdAt": "2020-11-20T15:10:55Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/GeneratorData.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+import com.powsybl.psse.model.PsseGenerator;\n+import com.powsybl.psse.model.PsseGenerator35;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+class GeneratorData extends AbstractRecordGroup<PsseGenerator> {\n+\n+    private static final String[] FIELD_NAMES_35 = {\"ibus\", \"machid\", \"pg\", \"qg\", \"qt\", \"qb\", \"vs\", \"ireg\", \"nreg\", \"mbase\", \"zr\", \"zx\", \"rt\", \"xt\", \"gtap\", \"stat\", \"rmpct\", \"pt\", \"pb\", \"baslod\", \"o1\", \"f1\", \"o2\", \"f2\", \"o3\", \"f3\", \"o4\", \"f4\", \"wmod\", \"wpf\"};\n+    private static final String[] FIELD_NAMES_33 = {\"i\", \"id\", \"pg\", \"qg\", \"qt\", \"qb\", \"vs\", \"ireg\", \"mbase\", \"zr\", \"zx\", \"rt\", \"xt\", \"gtap\", \"stat\", \"rmpct\", \"pt\", \"pb\", \"o1\", \"f1\", \"o2\", \"f2\", \"o3\", \"f3\", \"o4\", \"f4\", \"wmod\", \"wpf\"};\n+\n+    GeneratorData() {\n+        super(PsseRecordGroup.GENERATOR_DATA);\n+    }\n+\n+    @Override\n+    public String[] fieldNames(PsseVersion version) {\n+        if (version == PsseVersion.VERSION_35) {\n+            return FIELD_NAMES_35;\n+        } else {\n+            return FIELD_NAMES_33;\n+        }\n+    }\n+\n+    @Override\n+    public Class<? extends PsseGenerator> psseTypeClass(PsseVersion version) {\n+        if (version == PsseVersion.VERSION_35) {\n+            return PsseGenerator35.class;\n+        } else {\n+            return PsseGenerator.class;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5MzQ0OA=="}, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNDg4Njc0OnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/LoadData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxODowNzoxNVrOH2rPSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxODowNzoxNVrOH2rPSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5MzU3Ng==", "bodyText": "Same remark", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527093576", "createdAt": "2020-11-19T18:07:15Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/LoadData.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+import com.powsybl.psse.model.PsseLoad;\n+import com.powsybl.psse.model.PsseLoad35;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+class LoadData extends AbstractRecordGroup<PsseLoad> {\n+\n+    private static final String[] FIELD_NAMES_35 = {\"ibus\", \"loadid\", \"stat\", \"area\", \"zone\", \"pl\", \"ql\", \"ip\", \"iq\", \"yp\", \"yq\", \"owner\", \"scale\", \"intrpt\", \"dgenp\", \"dgenq\", \"dgenm\", \"loadtype\"};\n+    private static final String[] FIELD_NAMES_33 = {\"i\", \"id\", \"status\", \"area\", \"zone\", \"pl\", \"ql\", \"ip\", \"iq\", \"yp\", \"yq\", \"owner\", \"scale\", \"intrpt\"};\n+\n+    LoadData() {\n+        super(PsseRecordGroup.LOAD_DATA);\n+    }\n+\n+    @Override\n+    public String[] fieldNames(PsseVersion version) {\n+        if (version == PsseVersion.VERSION_35) {\n+            return FIELD_NAMES_35;\n+        } else {\n+            return FIELD_NAMES_33;\n+        }\n+    }\n+\n+    @Override\n+    public Class<? extends PsseLoad> psseTypeClass(PsseVersion version) {\n+        if (version == PsseVersion.VERSION_35) {\n+            return PsseLoad35.class;\n+        } else {\n+            return PsseLoad.class;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNDg4NzM4OnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/NonTransformerBranchData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxODowNzoyNlrOH2rPrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNToxMTowN1rOH3TsVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5MzY3Nw==", "bodyText": "Same remark", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527093677", "createdAt": "2020-11-19T18:07:26Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/NonTransformerBranchData.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+import com.powsybl.psse.model.PsseNonTransformerBranch;\n+import com.powsybl.psse.model.PsseNonTransformerBranch35;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+class NonTransformerBranchData extends AbstractRecordGroup<PsseNonTransformerBranch> {\n+\n+    private static final String[] FIELD_NAMES_35 = {\"ibus\", \"jbus\", \"ckt\", \"rpu\", \"xpu\", \"bpu\", \"name\", \"rate1\", \"rate2\", \"rate3\", \"rate4\", \"rate5\",\n+        \"rate6\", \"rate7\", \"rate8\", \"rate9\", \"rate10\", \"rate11\", \"rate12\", \"gi\", \"bi\", \"gj\", \"bj\",\n+        \"stat\", \"met\", \"len\", \"o1\", \"f1\", \"o2\", \"f2\", \"o3\", \"f3\", \"o4\", \"f4\"};\n+    private static final String[] FIELD_NAMES_33 = {\"i\", \"j\", \"ckt\", \"r\", \"x\", \"b\", \"ratea\", \"rateb\", \"ratec\", \"gi\", \"bi\", \"gj\", \"bj\",\n+        \"st\", \"met\", \"len\", \"o1\", \"f1\", \"o2\", \"f2\", \"o3\", \"f3\", \"o4\", \"f4\"};\n+\n+    NonTransformerBranchData() {\n+        super(PsseRecordGroup.NON_TRANSFORMER_BRANCH_DATA);\n+    }\n+\n+    @Override\n+    public Class<? extends PsseNonTransformerBranch> psseTypeClass(PsseVersion version) {\n+        if (version == PsseVersion.VERSION_35) {\n+            return PsseNonTransformerBranch35.class;\n+        } else {\n+            return PsseNonTransformerBranch.class;\n+        }\n+    }\n+\n+    @Override\n+    public String[] fieldNames(PsseVersion version) {\n+        if (version == PsseVersion.VERSION_35) {\n+            return FIELD_NAMES_35;\n+        } else {\n+            return FIELD_NAMES_33;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc1NjM3NA==", "bodyText": "Fixed", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527756374", "createdAt": "2020-11-20T15:11:07Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/NonTransformerBranchData.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+import com.powsybl.psse.model.PsseNonTransformerBranch;\n+import com.powsybl.psse.model.PsseNonTransformerBranch35;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+class NonTransformerBranchData extends AbstractRecordGroup<PsseNonTransformerBranch> {\n+\n+    private static final String[] FIELD_NAMES_35 = {\"ibus\", \"jbus\", \"ckt\", \"rpu\", \"xpu\", \"bpu\", \"name\", \"rate1\", \"rate2\", \"rate3\", \"rate4\", \"rate5\",\n+        \"rate6\", \"rate7\", \"rate8\", \"rate9\", \"rate10\", \"rate11\", \"rate12\", \"gi\", \"bi\", \"gj\", \"bj\",\n+        \"stat\", \"met\", \"len\", \"o1\", \"f1\", \"o2\", \"f2\", \"o3\", \"f3\", \"o4\", \"f4\"};\n+    private static final String[] FIELD_NAMES_33 = {\"i\", \"j\", \"ckt\", \"r\", \"x\", \"b\", \"ratea\", \"rateb\", \"ratec\", \"gi\", \"bi\", \"gj\", \"bj\",\n+        \"st\", \"met\", \"len\", \"o1\", \"f1\", \"o2\", \"f2\", \"o3\", \"f3\", \"o4\", \"f4\"};\n+\n+    NonTransformerBranchData() {\n+        super(PsseRecordGroup.NON_TRANSFORMER_BRANCH_DATA);\n+    }\n+\n+    @Override\n+    public Class<? extends PsseNonTransformerBranch> psseTypeClass(PsseVersion version) {\n+        if (version == PsseVersion.VERSION_35) {\n+            return PsseNonTransformerBranch35.class;\n+        } else {\n+            return PsseNonTransformerBranch.class;\n+        }\n+    }\n+\n+    @Override\n+    public String[] fieldNames(PsseVersion version) {\n+        if (version == PsseVersion.VERSION_35) {\n+            return FIELD_NAMES_35;\n+        } else {\n+            return FIELD_NAMES_33;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5MzY3Nw=="}, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNDg4ODUxOnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/OwnerData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxODowNzozOVrOH2rQUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNToxMToxNFrOH3Tsng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5Mzg0Mg==", "bodyText": "Same remark", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527093842", "createdAt": "2020-11-19T18:07:39Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/OwnerData.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+import com.powsybl.psse.model.PsseOwner;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+class OwnerData extends AbstractRecordGroup<PsseOwner> {\n+\n+    private static final String[] FIELD_NAMES_35 = {\"iowner\", \"owname\"};\n+    private static final String[] FIELD_NAMES_33 = {\"i\", \"owname\"};\n+\n+    OwnerData() {\n+        super(PsseRecordGroup.OWNER_DATA);\n+    }\n+\n+    @Override\n+    public Class<PsseOwner> psseTypeClass(PsseVersion version) {\n+        return PsseOwner.class;\n+    }\n+\n+    @Override\n+    public String[] fieldNames(PsseVersion version) {\n+        if (version == PsseVersion.VERSION_35) {\n+            return FIELD_NAMES_35;\n+        } else {\n+            return FIELD_NAMES_33;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc1NjQ0Ng==", "bodyText": "Fixed", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527756446", "createdAt": "2020-11-20T15:11:14Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/OwnerData.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+import com.powsybl.psse.model.PsseOwner;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+class OwnerData extends AbstractRecordGroup<PsseOwner> {\n+\n+    private static final String[] FIELD_NAMES_35 = {\"iowner\", \"owname\"};\n+    private static final String[] FIELD_NAMES_33 = {\"i\", \"owname\"};\n+\n+    OwnerData() {\n+        super(PsseRecordGroup.OWNER_DATA);\n+    }\n+\n+    @Override\n+    public Class<PsseOwner> psseTypeClass(PsseVersion version) {\n+        return PsseOwner.class;\n+    }\n+\n+    @Override\n+    public String[] fieldNames(PsseVersion version) {\n+        if (version == PsseVersion.VERSION_35) {\n+            return FIELD_NAMES_35;\n+        } else {\n+            return FIELD_NAMES_33;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5Mzg0Mg=="}, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNDg5NDYyOnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/RawDataFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxODowOToxMFrOH2rT-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNTozMDoyNVrOH3UezQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5NDc3Ng==", "bodyText": "As explain previously, I would prefer to throw an exception instead of having a fall back. This would prepare the code for another version.", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527094776", "createdAt": "2020-11-19T18:09:10Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/RawDataFactory.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public final class RawDataFactory {\n+\n+    private RawDataFactory() {\n+    }\n+\n+    public static RawData create(String extension) {\n+        // When only extension is given,\n+        // We create Raw Data objects that are able to read the case identification\n+        // To determine if the file is valid and get its version\n+        if (extension.equalsIgnoreCase(\"rawx\")) {\n+            return new RawXDataCommon();\n+        } else {\n+            return new RawDataCommon();\n+        }\n+    }\n+\n+    public static RawData create(String extension, PsseVersion version) {\n+        if (extension.equalsIgnoreCase(\"rawx\")) {\n+            return new RawXData35();\n+        } else {\n+            if (version == PsseVersion.VERSION_35) {\n+                return new RawData35();\n+            }\n+            return new RawData33();\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc2OTI5Mw==", "bodyText": "Fixed", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527769293", "createdAt": "2020-11-20T15:30:25Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/RawDataFactory.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public final class RawDataFactory {\n+\n+    private RawDataFactory() {\n+    }\n+\n+    public static RawData create(String extension) {\n+        // When only extension is given,\n+        // We create Raw Data objects that are able to read the case identification\n+        // To determine if the file is valid and get its version\n+        if (extension.equalsIgnoreCase(\"rawx\")) {\n+            return new RawXDataCommon();\n+        } else {\n+            return new RawDataCommon();\n+        }\n+    }\n+\n+    public static RawData create(String extension, PsseVersion version) {\n+        if (extension.equalsIgnoreCase(\"rawx\")) {\n+            return new RawXData35();\n+        } else {\n+            if (version == PsseVersion.VERSION_35) {\n+                return new RawData35();\n+            }\n+            return new RawData33();\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5NDc3Ng=="}, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNDkwMzEzOnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/RawXData35.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxODoxMTowM1rOH2rZCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNTowMjozN1rOH6e9Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5NjA3NQ==", "bodyText": "The name of this variable is not ok: it's more a content than a file. I wonder if it's a good idea to put the content in a string and if it's possible to read the input stream directly. Moreover, the input stream should be closed.", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527096075", "createdAt": "2020-11-19T18:11:03Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/RawXData35.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.io.ByteStreams;\n+import com.powsybl.commons.datasource.ReadOnlyDataSource;\n+import com.powsybl.psse.model.PsseCaseIdentification;\n+import com.powsybl.psse.model.PsseRawModel;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class RawXData35 extends RawXDataCommon {\n+\n+    @Override\n+    public PsseRawModel read(ReadOnlyDataSource dataSource, String ext, Context context) throws IOException {\n+        String jsonFile = new String(ByteStreams.toByteArray(dataSource.newInputStream(null, ext)), StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY1OTY4MQ==", "bodyText": "Agree. Changed the name of the variable. Used try-with-resources statement.\nWe were already investigating how to obtain json content without having to read the entire file. Current approach is valid only for the small test files we have now, but will fix it in separate PR, if you accept it.", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527659681", "createdAt": "2020-11-20T12:29:51Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/RawXData35.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.io.ByteStreams;\n+import com.powsybl.commons.datasource.ReadOnlyDataSource;\n+import com.powsybl.psse.model.PsseCaseIdentification;\n+import com.powsybl.psse.model.PsseRawModel;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class RawXData35 extends RawXDataCommon {\n+\n+    @Override\n+    public PsseRawModel read(ReadOnlyDataSource dataSource, String ext, Context context) throws IOException {\n+        String jsonFile = new String(ByteStreams.toByteArray(dataSource.newInputStream(null, ext)), StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5NjA3NQ=="}, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA4NjY3NA==", "bodyText": "I change the code to pass the stream directly to the ObjectMapper().readTree() method instead of storing the content in a String. I'm pretty sure it doesn't change anything but it should be more efficient because the file won't be read twice (one time to fill the string, and one time by the parser).", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r531086674", "createdAt": "2020-11-26T15:02:37Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/RawXData35.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.google.common.io.ByteStreams;\n+import com.powsybl.commons.datasource.ReadOnlyDataSource;\n+import com.powsybl.psse.model.PsseCaseIdentification;\n+import com.powsybl.psse.model.PsseRawModel;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class RawXData35 extends RawXDataCommon {\n+\n+    @Override\n+    public PsseRawModel read(ReadOnlyDataSource dataSource, String ext, Context context) throws IOException {\n+        String jsonFile = new String(ByteStreams.toByteArray(dataSource.newInputStream(null, ext)), StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5NjA3NQ=="}, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNDkwNDgzOnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/RawXDataCommon.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxODoxMTozMVrOH2raMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMjozMDowMlrOH3Ny6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5NjM2OQ==", "bodyText": "Same remark", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527096369", "createdAt": "2020-11-19T18:11:31Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/RawXDataCommon.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.io.ByteStreams;\n+import com.powsybl.commons.datasource.ReadOnlyDataSource;\n+import com.powsybl.psse.model.PsseCaseIdentification;\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+import com.powsybl.psse.model.PsseException;\n+import com.powsybl.psse.model.PsseRawModel;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+\n+/**\n+ * PSSE raw data common to all versions\n+ * Should be able to read the case identification to obtain the version (case identification \"rev\" attribute)\n+ *\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class RawXDataCommon implements RawData {\n+\n+    @Override\n+    public boolean isValidFile(ReadOnlyDataSource dataSource, String ext) throws IOException {\n+        String jsonFile = new String(ByteStreams.toByteArray(dataSource.newInputStream(null, ext)), StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY1OTc1Mw==", "bodyText": "Fixed", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527659753", "createdAt": "2020-11-20T12:30:02Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/RawXDataCommon.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.io.ByteStreams;\n+import com.powsybl.commons.datasource.ReadOnlyDataSource;\n+import com.powsybl.psse.model.PsseCaseIdentification;\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+import com.powsybl.psse.model.PsseException;\n+import com.powsybl.psse.model.PsseRawModel;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+\n+/**\n+ * PSSE raw data common to all versions\n+ * Should be able to read the case identification to obtain the version (case identification \"rev\" attribute)\n+ *\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class RawXDataCommon implements RawData {\n+\n+    @Override\n+    public boolean isValidFile(ReadOnlyDataSource dataSource, String ext) throws IOException {\n+        String jsonFile = new String(ByteStreams.toByteArray(dataSource.newInputStream(null, ext)), StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5NjM2OQ=="}, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNDkwNTczOnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/RawXDataCommon.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxODoxMTo0M1rOH2ratQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMjozMDoxMFrOH3NzHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5NjUwMQ==", "bodyText": "Same remark", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527096501", "createdAt": "2020-11-19T18:11:43Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/RawXDataCommon.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.io.ByteStreams;\n+import com.powsybl.commons.datasource.ReadOnlyDataSource;\n+import com.powsybl.psse.model.PsseCaseIdentification;\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+import com.powsybl.psse.model.PsseException;\n+import com.powsybl.psse.model.PsseRawModel;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+\n+/**\n+ * PSSE raw data common to all versions\n+ * Should be able to read the case identification to obtain the version (case identification \"rev\" attribute)\n+ *\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class RawXDataCommon implements RawData {\n+\n+    @Override\n+    public boolean isValidFile(ReadOnlyDataSource dataSource, String ext) throws IOException {\n+        String jsonFile = new String(ByteStreams.toByteArray(dataSource.newInputStream(null, ext)), StandardCharsets.UTF_8);\n+        PsseCaseIdentification caseIdentification = new CaseIdentificationData().read1(networkNode(jsonFile), new Context());\n+        caseIdentification.validate();\n+        return true;\n+    }\n+\n+    @Override\n+    public PsseVersion readVersion(ReadOnlyDataSource dataSource, String ext) throws IOException {\n+        String jsonFile = new String(ByteStreams.toByteArray(dataSource.newInputStream(null, ext)), StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY1OTgwNg==", "bodyText": "Fixed", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527659806", "createdAt": "2020-11-20T12:30:10Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/RawXDataCommon.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.io.ByteStreams;\n+import com.powsybl.commons.datasource.ReadOnlyDataSource;\n+import com.powsybl.psse.model.PsseCaseIdentification;\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+import com.powsybl.psse.model.PsseException;\n+import com.powsybl.psse.model.PsseRawModel;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+\n+/**\n+ * PSSE raw data common to all versions\n+ * Should be able to read the case identification to obtain the version (case identification \"rev\" attribute)\n+ *\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class RawXDataCommon implements RawData {\n+\n+    @Override\n+    public boolean isValidFile(ReadOnlyDataSource dataSource, String ext) throws IOException {\n+        String jsonFile = new String(ByteStreams.toByteArray(dataSource.newInputStream(null, ext)), StandardCharsets.UTF_8);\n+        PsseCaseIdentification caseIdentification = new CaseIdentificationData().read1(networkNode(jsonFile), new Context());\n+        caseIdentification.validate();\n+        return true;\n+    }\n+\n+    @Override\n+    public PsseVersion readVersion(ReadOnlyDataSource dataSource, String ext) throws IOException {\n+        String jsonFile = new String(ByteStreams.toByteArray(dataSource.newInputStream(null, ext)), StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5NjUwMQ=="}, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNDkwODA0OnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/SwitchedShuntData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxODoxMjoxOFrOH2rcJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNTozMDozN1rOH3UfWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5Njg3MQ==", "bodyText": "Same remark", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527096871", "createdAt": "2020-11-19T18:12:18Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/SwitchedShuntData.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+import com.powsybl.psse.model.PsseSwitchedShunt;\n+import com.powsybl.psse.model.PsseSwitchedShunt35;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+class SwitchedShuntData extends AbstractRecordGroup<PsseSwitchedShunt> {\n+\n+    private static final String[] FIELD_NAMES_35 = {\"i\", \"id\", \"modsw\", \"adjm\", \"stat\", \"vswhi\", \"vswlo\", \"swreg\", \"nreg\", \"rmpct\", \"rmidnt\", \"binit\",\n+        \"s1\", \"n1\", \"b1\", \"s2\", \"n2\", \"b2\", \"s3\", \"n3\", \"b3\", \"s4\", \"n4\", \"b4\", \"s5\", \"n5\", \"b5\", \"s6\", \"n6\", \"b6\",\n+        \"s7\", \"n7\", \"b7\", \"s8\", \"n8\", \"b8\"};\n+    private static final String[] FIELD_NAMES_33 = {\"i\", \"modsw\", \"adjm\", \"stat\", \"vswhi\", \"vswlo\", \"swrem\", \"rmpct\", \"rmidnt\", \"binit\",\n+        \"n1\", \"b1\", \"n2\", \"b2\", \"n3\", \"b3\", \"n4\", \"b4\", \"n5\", \"b5\", \"n6\", \"b6\", \"n7\", \"b7\", \"n8\", \"b8\"};\n+\n+    SwitchedShuntData() {\n+        super(PsseRecordGroup.SWITCHED_SHUNT_DATA);\n+    }\n+\n+    @Override\n+    public Class<? extends PsseSwitchedShunt> psseTypeClass(PsseVersion version) {\n+        if (version == PsseVersion.VERSION_35) {\n+            return PsseSwitchedShunt35.class;\n+        } else {\n+            return PsseSwitchedShunt.class;\n+        }\n+    }\n+\n+    @Override\n+    public String[] fieldNames(PsseVersion version) {\n+        if (version == PsseVersion.VERSION_35) {\n+            return FIELD_NAMES_35;\n+        } else {\n+            return FIELD_NAMES_33;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc2OTQzMg==", "bodyText": "Fixed", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527769432", "createdAt": "2020-11-20T15:30:37Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/SwitchedShuntData.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+import com.powsybl.psse.model.PsseSwitchedShunt;\n+import com.powsybl.psse.model.PsseSwitchedShunt35;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+class SwitchedShuntData extends AbstractRecordGroup<PsseSwitchedShunt> {\n+\n+    private static final String[] FIELD_NAMES_35 = {\"i\", \"id\", \"modsw\", \"adjm\", \"stat\", \"vswhi\", \"vswlo\", \"swreg\", \"nreg\", \"rmpct\", \"rmidnt\", \"binit\",\n+        \"s1\", \"n1\", \"b1\", \"s2\", \"n2\", \"b2\", \"s3\", \"n3\", \"b3\", \"s4\", \"n4\", \"b4\", \"s5\", \"n5\", \"b5\", \"s6\", \"n6\", \"b6\",\n+        \"s7\", \"n7\", \"b7\", \"s8\", \"n8\", \"b8\"};\n+    private static final String[] FIELD_NAMES_33 = {\"i\", \"modsw\", \"adjm\", \"stat\", \"vswhi\", \"vswlo\", \"swrem\", \"rmpct\", \"rmidnt\", \"binit\",\n+        \"n1\", \"b1\", \"n2\", \"b2\", \"n3\", \"b3\", \"n4\", \"b4\", \"n5\", \"b5\", \"n6\", \"b6\", \"n7\", \"b7\", \"n8\", \"b8\"};\n+\n+    SwitchedShuntData() {\n+        super(PsseRecordGroup.SWITCHED_SHUNT_DATA);\n+    }\n+\n+    @Override\n+    public Class<? extends PsseSwitchedShunt> psseTypeClass(PsseVersion version) {\n+        if (version == PsseVersion.VERSION_35) {\n+            return PsseSwitchedShunt35.class;\n+        } else {\n+            return PsseSwitchedShunt.class;\n+        }\n+    }\n+\n+    @Override\n+    public String[] fieldNames(PsseVersion version) {\n+        if (version == PsseVersion.VERSION_35) {\n+            return FIELD_NAMES_35;\n+        } else {\n+            return FIELD_NAMES_33;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5Njg3MQ=="}, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNDkwOTk4OnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/TransformerData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxODoxMjo0MlrOH2rdOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNTozMDo0NlrOH3Ufww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5NzE0NA==", "bodyText": "Same remark", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527097144", "createdAt": "2020-11-19T18:12:42Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/TransformerData.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+import com.powsybl.psse.model.PsseException;\n+import com.powsybl.psse.model.PsseTransformer;\n+import com.powsybl.psse.model.PsseTransformer35;\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+class TransformerData extends AbstractRecordGroup<PsseTransformer> {\n+\n+    private static final String[][] FIELD_NAMES_3_35 = {\n+        {\"ibus\", \"jbus\", \"kbus\", \"ckt\", \"cw\", \"cz\", \"cm\", \"mag1\", \"mag2\", \"nmet\", \"name\", \"stat\", \"o1\", \"f1\", \"o2\", \"f2\", \"o3\", \"f3\", \"o4\", \"f4\", \"vecgrp\", \"zcod\"},\n+        {\"r1_2\", \"x1_2\", \"sbase1_2\", \"r2_3\", \"x2_3\", \"sbase2_3\", \"r3_1\", \"x3_1\", \"sbase3_1\", \"vmstar\", \"anstar\"},\n+        {\"windv1\", \"nomv1\", \"ang1\", \"wdg1rate1\", \"wdg1rate2\", \"wdg1rate3\", \"wdg1rate4\", \"wdg1rate5\", \"wdg1rate6\", \"wdg1rate7\", \"wdg1rate8\", \"wdg1rate9\", \"wdg1rate10\", \"wdg1rate11\", \"wdg1rate12\", \"cod1\", \"cont1\", \"node1\", \"rma1\", \"rmi1\", \"vma1\", \"vmi1\", \"ntp1\", \"tab1\", \"cr1\", \"cx1\", \"cnxa1\"},\n+        {\"windv2\", \"nomv2\", \"ang2\", \"wdg2rate1\", \"wdg2rate2\", \"wdg2rate3\", \"wdg2rate4\", \"wdg2rate5\", \"wdg2rate6\", \"wdg2rate7\", \"wdg2rate8\", \"wdg2rate9\", \"wdg2rate10\", \"wdg2rate11\", \"wdg2rate12\", \"cod2\", \"cont2\", \"node2\", \"rma2\", \"rmi2\", \"vma2\", \"vmi2\", \"ntp2\", \"tab2\", \"cr2\", \"cx2\", \"cnxa2\"},\n+        {\"windv3\", \"nomv3\", \"ang3\", \"wdg3rate1\", \"wdg3rate2\", \"wdg3rate3\", \"wdg3rate4\", \"wdg3rate5\", \"wdg3rate6\", \"wdg3rate7\", \"wdg3rate8\", \"wdg3rate9\", \"wdg3rate10\", \"wdg3rate11\", \"wdg3rate12\", \"cod3\", \"cont3\", \"node3\", \"rma3\", \"rmi3\", \"vma3\", \"vmi3\", \"ntp3\", \"tab3\", \"cr3\", \"cx3\", \"cnxa3\"}\n+    };\n+    private static final String[][] FIELD_NAMES_3_33 = {\n+        {\"i\", \"j\", \"k\", \"ckt\", \"cw\", \"cz\", \"cm\", \"mag1\", \"mag2\", \"nmetr\", \"name\", \"stat\", \"o1\", \"f1\", \"o2\", \"f2\", \"o3\", \"f3\", \"o4\", \"f4\", \"vecgrp\"},\n+        {\"r12\", \"x12\", \"sbase12\", \"r23\", \"x23\", \"sbase23\", \"r31\", \"x31\", \"sbase31\", \"vmstar\", \"anstar\"},\n+        {\"windv1\", \"nomv1\", \"ang1\", \"rata1\", \"ratb1\", \"ratc1\", \"cod1\", \"cont1\", \"rma1\", \"rmi1\", \"vma1\", \"vmi1\", \"ntp1\", \"tab1\", \"cr1\", \"cx1\", \"cnxa1\"},\n+        {\"windv2\", \"nomv2\", \"ang2\", \"rata2\", \"ratb2\", \"ratc2\", \"cod2\", \"cont2\", \"rma2\", \"rmi2\", \"vma2\", \"vmi2\", \"ntp2\", \"tab2\", \"cr2\", \"cx2\", \"cnxa2\"},\n+        {\"windv3\", \"nomv3\", \"ang3\", \"rata3\", \"ratb3\", \"ratc3\", \"cod3\", \"cont3\", \"rma3\", \"rmi3\", \"vma3\", \"vmi3\", \"ntp3\", \"tab3\", \"cr3\", \"cx3\", \"cnxa3\"}\n+    };\n+    private static final String[][] FIELD_NAMES_2_35 = {\n+        {\"ibus\", \"jbus\", \"kbus\", \"ckt\", \"cw\", \"cz\", \"cm\", \"mag1\", \"mag2\", \"nmet\", \"name\", \"stat\", \"o1\", \"f1\", \"o2\", \"f2\", \"o3\", \"f3\", \"o4\", \"f4\", \"vecgrp\"},\n+        {\"r1_2\", \"x1_2\", \"sbase1_2\"},\n+        {\"windv1\", \"nomv1\", \"ang1\", \"wdg1rate1\", \"wdg1rate2\", \"wdg1rate3\", \"wdg1rate4\", \"wdg1rate5\", \"wdg1rate6\", \"wdg1rate7\", \"wdg1rate8\", \"wdg1rate9\", \"wdg1rate10\", \"wdg1rate11\", \"wdg1rate12\", \"cod1\", \"cont1\", \"node1\", \"rma1\", \"rmi1\", \"vma1\", \"vmi1\", \"ntp1\", \"tab1\", \"cr1\", \"cx1\", \"cnxa1\"},\n+        {\"windv2\", \"nomv2\"}\n+    };\n+    private static final String[][] FIELD_NAMES_2_33 = {\n+        {\"i\", \"j\", \"k\", \"ckt\", \"cw\", \"cz\", \"cm\", \"mag1\", \"mag2\", \"nmetr\", \"name\", \"stat\", \"o1\", \"f1\", \"o2\", \"f2\", \"o3\", \"f3\", \"o4\", \"f4\", \"vecgrp\"},\n+        {\"r12\", \"x12\", \"sbase12\"},\n+        {\"windv1\", \"nomv1\", \"ang1\", \"rata1\", \"ratb1\", \"ratc1\", \"cod1\", \"cont1\", \"rma1\", \"rmi1\", \"vma1\", \"vmi1\", \"ntp1\", \"tab1\", \"cr1\", \"cx1\", \"cnxa1\"},\n+        {\"windv2\", \"nomv2\"}\n+    };\n+\n+    TransformerData() {\n+        super(PsseRecordGroup.TRANSFORMER_DATA);\n+    }\n+\n+    private static boolean is3winding(String record, String delimiter) {\n+        String[] tokens = record.split(delimiter);\n+        if (tokens.length < 3) {\n+            return false;\n+        }\n+        return Integer.parseInt(tokens[2].trim()) != 0;\n+    }\n+\n+    @Override\n+    public String[] fieldNames(PsseVersion version) {\n+        throw new PsseException(\"Should not occur\");\n+    }\n+\n+    public String[][] fieldNames3(PsseVersion version) {\n+        if (version == PsseVersion.VERSION_35) {\n+            return FIELD_NAMES_3_35;\n+        } else {\n+            return FIELD_NAMES_3_33;\n+        }\n+    }\n+\n+    public String[][] fieldNames2(PsseVersion version) {\n+        if (version == PsseVersion.VERSION_35) {\n+            return FIELD_NAMES_2_35;\n+        } else {\n+            return FIELD_NAMES_2_33;\n+        }\n+    }\n+\n+    @Override\n+    public Class<? extends PsseTransformer> psseTypeClass(PsseVersion version) {\n+        if (version == PsseVersion.VERSION_35) {\n+            return PsseTransformer35.class;\n+        } else {\n+            return PsseTransformer.class;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc2OTUzOQ==", "bodyText": "Fixed", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527769539", "createdAt": "2020-11-20T15:30:46Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/TransformerData.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+import com.powsybl.psse.model.PsseException;\n+import com.powsybl.psse.model.PsseTransformer;\n+import com.powsybl.psse.model.PsseTransformer35;\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+class TransformerData extends AbstractRecordGroup<PsseTransformer> {\n+\n+    private static final String[][] FIELD_NAMES_3_35 = {\n+        {\"ibus\", \"jbus\", \"kbus\", \"ckt\", \"cw\", \"cz\", \"cm\", \"mag1\", \"mag2\", \"nmet\", \"name\", \"stat\", \"o1\", \"f1\", \"o2\", \"f2\", \"o3\", \"f3\", \"o4\", \"f4\", \"vecgrp\", \"zcod\"},\n+        {\"r1_2\", \"x1_2\", \"sbase1_2\", \"r2_3\", \"x2_3\", \"sbase2_3\", \"r3_1\", \"x3_1\", \"sbase3_1\", \"vmstar\", \"anstar\"},\n+        {\"windv1\", \"nomv1\", \"ang1\", \"wdg1rate1\", \"wdg1rate2\", \"wdg1rate3\", \"wdg1rate4\", \"wdg1rate5\", \"wdg1rate6\", \"wdg1rate7\", \"wdg1rate8\", \"wdg1rate9\", \"wdg1rate10\", \"wdg1rate11\", \"wdg1rate12\", \"cod1\", \"cont1\", \"node1\", \"rma1\", \"rmi1\", \"vma1\", \"vmi1\", \"ntp1\", \"tab1\", \"cr1\", \"cx1\", \"cnxa1\"},\n+        {\"windv2\", \"nomv2\", \"ang2\", \"wdg2rate1\", \"wdg2rate2\", \"wdg2rate3\", \"wdg2rate4\", \"wdg2rate5\", \"wdg2rate6\", \"wdg2rate7\", \"wdg2rate8\", \"wdg2rate9\", \"wdg2rate10\", \"wdg2rate11\", \"wdg2rate12\", \"cod2\", \"cont2\", \"node2\", \"rma2\", \"rmi2\", \"vma2\", \"vmi2\", \"ntp2\", \"tab2\", \"cr2\", \"cx2\", \"cnxa2\"},\n+        {\"windv3\", \"nomv3\", \"ang3\", \"wdg3rate1\", \"wdg3rate2\", \"wdg3rate3\", \"wdg3rate4\", \"wdg3rate5\", \"wdg3rate6\", \"wdg3rate7\", \"wdg3rate8\", \"wdg3rate9\", \"wdg3rate10\", \"wdg3rate11\", \"wdg3rate12\", \"cod3\", \"cont3\", \"node3\", \"rma3\", \"rmi3\", \"vma3\", \"vmi3\", \"ntp3\", \"tab3\", \"cr3\", \"cx3\", \"cnxa3\"}\n+    };\n+    private static final String[][] FIELD_NAMES_3_33 = {\n+        {\"i\", \"j\", \"k\", \"ckt\", \"cw\", \"cz\", \"cm\", \"mag1\", \"mag2\", \"nmetr\", \"name\", \"stat\", \"o1\", \"f1\", \"o2\", \"f2\", \"o3\", \"f3\", \"o4\", \"f4\", \"vecgrp\"},\n+        {\"r12\", \"x12\", \"sbase12\", \"r23\", \"x23\", \"sbase23\", \"r31\", \"x31\", \"sbase31\", \"vmstar\", \"anstar\"},\n+        {\"windv1\", \"nomv1\", \"ang1\", \"rata1\", \"ratb1\", \"ratc1\", \"cod1\", \"cont1\", \"rma1\", \"rmi1\", \"vma1\", \"vmi1\", \"ntp1\", \"tab1\", \"cr1\", \"cx1\", \"cnxa1\"},\n+        {\"windv2\", \"nomv2\", \"ang2\", \"rata2\", \"ratb2\", \"ratc2\", \"cod2\", \"cont2\", \"rma2\", \"rmi2\", \"vma2\", \"vmi2\", \"ntp2\", \"tab2\", \"cr2\", \"cx2\", \"cnxa2\"},\n+        {\"windv3\", \"nomv3\", \"ang3\", \"rata3\", \"ratb3\", \"ratc3\", \"cod3\", \"cont3\", \"rma3\", \"rmi3\", \"vma3\", \"vmi3\", \"ntp3\", \"tab3\", \"cr3\", \"cx3\", \"cnxa3\"}\n+    };\n+    private static final String[][] FIELD_NAMES_2_35 = {\n+        {\"ibus\", \"jbus\", \"kbus\", \"ckt\", \"cw\", \"cz\", \"cm\", \"mag1\", \"mag2\", \"nmet\", \"name\", \"stat\", \"o1\", \"f1\", \"o2\", \"f2\", \"o3\", \"f3\", \"o4\", \"f4\", \"vecgrp\"},\n+        {\"r1_2\", \"x1_2\", \"sbase1_2\"},\n+        {\"windv1\", \"nomv1\", \"ang1\", \"wdg1rate1\", \"wdg1rate2\", \"wdg1rate3\", \"wdg1rate4\", \"wdg1rate5\", \"wdg1rate6\", \"wdg1rate7\", \"wdg1rate8\", \"wdg1rate9\", \"wdg1rate10\", \"wdg1rate11\", \"wdg1rate12\", \"cod1\", \"cont1\", \"node1\", \"rma1\", \"rmi1\", \"vma1\", \"vmi1\", \"ntp1\", \"tab1\", \"cr1\", \"cx1\", \"cnxa1\"},\n+        {\"windv2\", \"nomv2\"}\n+    };\n+    private static final String[][] FIELD_NAMES_2_33 = {\n+        {\"i\", \"j\", \"k\", \"ckt\", \"cw\", \"cz\", \"cm\", \"mag1\", \"mag2\", \"nmetr\", \"name\", \"stat\", \"o1\", \"f1\", \"o2\", \"f2\", \"o3\", \"f3\", \"o4\", \"f4\", \"vecgrp\"},\n+        {\"r12\", \"x12\", \"sbase12\"},\n+        {\"windv1\", \"nomv1\", \"ang1\", \"rata1\", \"ratb1\", \"ratc1\", \"cod1\", \"cont1\", \"rma1\", \"rmi1\", \"vma1\", \"vmi1\", \"ntp1\", \"tab1\", \"cr1\", \"cx1\", \"cnxa1\"},\n+        {\"windv2\", \"nomv2\"}\n+    };\n+\n+    TransformerData() {\n+        super(PsseRecordGroup.TRANSFORMER_DATA);\n+    }\n+\n+    private static boolean is3winding(String record, String delimiter) {\n+        String[] tokens = record.split(delimiter);\n+        if (tokens.length < 3) {\n+            return false;\n+        }\n+        return Integer.parseInt(tokens[2].trim()) != 0;\n+    }\n+\n+    @Override\n+    public String[] fieldNames(PsseVersion version) {\n+        throw new PsseException(\"Should not occur\");\n+    }\n+\n+    public String[][] fieldNames3(PsseVersion version) {\n+        if (version == PsseVersion.VERSION_35) {\n+            return FIELD_NAMES_3_35;\n+        } else {\n+            return FIELD_NAMES_3_33;\n+        }\n+    }\n+\n+    public String[][] fieldNames2(PsseVersion version) {\n+        if (version == PsseVersion.VERSION_35) {\n+            return FIELD_NAMES_2_35;\n+        } else {\n+            return FIELD_NAMES_2_33;\n+        }\n+    }\n+\n+    @Override\n+    public Class<? extends PsseTransformer> psseTypeClass(PsseVersion version) {\n+        if (version == PsseVersion.VERSION_35) {\n+            return PsseTransformer35.class;\n+        } else {\n+            return PsseTransformer.class;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5NzE0NA=="}, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNDkxNTgwOnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/ZoneData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxODoxNDowOVrOH2rgxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNTozMDo1M1rOH3UgAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5ODA1NQ==", "bodyText": "Same remark", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527098055", "createdAt": "2020-11-19T18:14:09Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/ZoneData.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+import com.powsybl.psse.model.PsseZone;\n+\n+/**\n+ *\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+class ZoneData extends AbstractRecordGroup<PsseZone> {\n+\n+    private static final String[] FIELD_NAMES_35 = {\"izone\", \"zoname\"};\n+    private static final String[] FIELD_NAMES_33 = {\"i\", \"zoname\"};\n+\n+    ZoneData() {\n+        super(PsseRecordGroup.ZONE_DATA);\n+    }\n+\n+    @Override\n+    public Class<PsseZone> psseTypeClass(PsseVersion version) {\n+        return PsseZone.class;\n+    }\n+\n+    @Override\n+    public String[] fieldNames(PsseVersion version) {\n+        if (version == PsseVersion.VERSION_35) {\n+            return FIELD_NAMES_35;\n+        } else {\n+            return FIELD_NAMES_33;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc2OTYwMg==", "bodyText": "Fixed", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r527769602", "createdAt": "2020-11-20T15:30:53Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/data/ZoneData.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.data;\n+\n+import com.powsybl.psse.model.PsseConstants.PsseVersion;\n+import com.powsybl.psse.model.PsseZone;\n+\n+/**\n+ *\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+class ZoneData extends AbstractRecordGroup<PsseZone> {\n+\n+    private static final String[] FIELD_NAMES_35 = {\"izone\", \"zoname\"};\n+    private static final String[] FIELD_NAMES_33 = {\"i\", \"zoname\"};\n+\n+    ZoneData() {\n+        super(PsseRecordGroup.ZONE_DATA);\n+    }\n+\n+    @Override\n+    public Class<PsseZone> psseTypeClass(PsseVersion version) {\n+        return PsseZone.class;\n+    }\n+\n+    @Override\n+    public String[] fieldNames(PsseVersion version) {\n+        if (version == PsseVersion.VERSION_35) {\n+            return FIELD_NAMES_35;\n+        } else {\n+            return FIELD_NAMES_33;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5ODA1NQ=="}, "originalCommit": {"oid": "7a2ef89edd308aca87073c8263a6144317c3657d"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNjY2OTU1OnYy", "diffSide": "RIGHT", "path": "psse/psse-converter/src/test/java/com/powsybl/psse/converter/PsseImporterTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNjoyNjo1NlrOIH91Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzozNToyOFrOIIWHSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIyMzk2Mg==", "bodyText": "I think that adding the PsseVersionFilter annotation on each subclass of the PsseVersioned is error prone. It seems sufficient to add it once on PsseVersioned.\nI'm not a big fan to add annotations that are used only for testing, but I suppose we cannot do anything else.", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r545223962", "createdAt": "2020-12-17T16:26:56Z", "author": {"login": "mathbagu"}, "path": "psse/psse-converter/src/test/java/com/powsybl/psse/converter/PsseImporterTest.java", "diffHunk": "@@ -107,15 +126,75 @@ public void importTestT3W() throws IOException {\n         importTest(\"ThreeMIB_T3W_modified\", \"ThreeMIB_T3W_modified.RAW\", true);\n     }\n \n-    @Test(expected = PsseException.class)\n-    public void badVersionTest() {\n-        ReadOnlyDataSource dataSource = new ResourceDataSource(\"case-flag-not-supported\", new ResourceSet(\"/\", \"case-flag-not-supported.raw\"));\n-        new PsseImporter().importData(dataSource, new NetworkFactoryImpl(), null);\n+    @Test\n+    public void testRates() throws IOException {\n+        Context context = new Context();\n+        ReadOnlyDataSource ds = new ResourceDataSource(\"ThreeMIB_T3W_modified\", new ResourceSet(\"/\", \"ThreeMIB_T3W_modified.RAW\"));\n+        PssePowerFlowModel model = new PowerFlowRawData33().read(ds, \"RAW\", context);\n+        assertEquals(10451.0, model.getNonTransformerBranches().get(0).getRates().getRatea(), 0);\n+        assertEquals(10452.0, model.getNonTransformerBranches().get(0).getRates().getRateb(), 0);\n+        assertEquals(10453.0, model.getNonTransformerBranches().get(0).getRates().getRatec(), 0);\n+        assertEquals(10561.0, model.getNonTransformerBranches().get(1).getRates().getRatea(), 0);\n+        assertEquals(10562.0, model.getNonTransformerBranches().get(1).getRates().getRateb(), 0);\n+        assertEquals(10563.0, model.getNonTransformerBranches().get(1).getRates().getRatec(), 0);\n+        assertEquals(10140.0, model.getTransformers().get(0).getWinding1Rates().getRatea(), 0);\n+        assertEquals(10141.0, model.getTransformers().get(0).getWinding1Rates().getRateb(), 0);\n+        assertEquals(10142.0, model.getTransformers().get(0).getWinding1Rates().getRatec(), 0);\n+        assertEquals(101.0, model.getTransformers().get(1).getWinding1Rates().getRatea(), 0);\n+        assertEquals(102.0, model.getTransformers().get(1).getWinding1Rates().getRateb(), 0);\n+        assertEquals(103.0, model.getTransformers().get(1).getWinding1Rates().getRatec(), 0);\n+        assertEquals(201.0, model.getTransformers().get(1).getWinding2Rates().getRatea(), 0);\n+        assertEquals(202.0, model.getTransformers().get(1).getWinding2Rates().getRateb(), 0);\n+        assertEquals(203.0, model.getTransformers().get(1).getWinding2Rates().getRatec(), 0);\n+        assertEquals(301.0, model.getTransformers().get(1).getWinding3Rates().getRatea(), 0);\n+        assertEquals(302.0, model.getTransformers().get(1).getWinding3Rates().getRateb(), 0);\n+        assertEquals(303.0, model.getTransformers().get(1).getWinding3Rates().getRatec(), 0);\n     }\n \n-    @Test(expected = PsseException.class)\n+    private static String toJson(PssePowerFlowModel model) throws JsonProcessingException {\n+        PsseVersion version = fromRevision(model.getCaseIdentification().getRev());\n+        SimpleBeanPropertyFilter filter = new SimpleBeanPropertyFilter() {\n+            @Override\n+            protected boolean include(PropertyWriter writer) {\n+                Revision rev = writer.getAnnotation(Revision.class);\n+                return rev == null || PsseVersioned.isValidVersion(version, rev);\n+            }\n+        };\n+        FilterProvider filters = new SimpleFilterProvider().addFilter(\"PsseVersionFilter\", filter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1b57e1e61f537d5f070857277f8e0084f4099d9"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyMTgzNQ==", "bodyText": "Agree, adding the annotation at the PsseVersioned level is the right thing. You are right this annotation is only used for testing, but having it only once doesn't hurt and will ease the development and testing when we add support for new versions.", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r545621835", "createdAt": "2020-12-18T07:35:28Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-converter/src/test/java/com/powsybl/psse/converter/PsseImporterTest.java", "diffHunk": "@@ -107,15 +126,75 @@ public void importTestT3W() throws IOException {\n         importTest(\"ThreeMIB_T3W_modified\", \"ThreeMIB_T3W_modified.RAW\", true);\n     }\n \n-    @Test(expected = PsseException.class)\n-    public void badVersionTest() {\n-        ReadOnlyDataSource dataSource = new ResourceDataSource(\"case-flag-not-supported\", new ResourceSet(\"/\", \"case-flag-not-supported.raw\"));\n-        new PsseImporter().importData(dataSource, new NetworkFactoryImpl(), null);\n+    @Test\n+    public void testRates() throws IOException {\n+        Context context = new Context();\n+        ReadOnlyDataSource ds = new ResourceDataSource(\"ThreeMIB_T3W_modified\", new ResourceSet(\"/\", \"ThreeMIB_T3W_modified.RAW\"));\n+        PssePowerFlowModel model = new PowerFlowRawData33().read(ds, \"RAW\", context);\n+        assertEquals(10451.0, model.getNonTransformerBranches().get(0).getRates().getRatea(), 0);\n+        assertEquals(10452.0, model.getNonTransformerBranches().get(0).getRates().getRateb(), 0);\n+        assertEquals(10453.0, model.getNonTransformerBranches().get(0).getRates().getRatec(), 0);\n+        assertEquals(10561.0, model.getNonTransformerBranches().get(1).getRates().getRatea(), 0);\n+        assertEquals(10562.0, model.getNonTransformerBranches().get(1).getRates().getRateb(), 0);\n+        assertEquals(10563.0, model.getNonTransformerBranches().get(1).getRates().getRatec(), 0);\n+        assertEquals(10140.0, model.getTransformers().get(0).getWinding1Rates().getRatea(), 0);\n+        assertEquals(10141.0, model.getTransformers().get(0).getWinding1Rates().getRateb(), 0);\n+        assertEquals(10142.0, model.getTransformers().get(0).getWinding1Rates().getRatec(), 0);\n+        assertEquals(101.0, model.getTransformers().get(1).getWinding1Rates().getRatea(), 0);\n+        assertEquals(102.0, model.getTransformers().get(1).getWinding1Rates().getRateb(), 0);\n+        assertEquals(103.0, model.getTransformers().get(1).getWinding1Rates().getRatec(), 0);\n+        assertEquals(201.0, model.getTransformers().get(1).getWinding2Rates().getRatea(), 0);\n+        assertEquals(202.0, model.getTransformers().get(1).getWinding2Rates().getRateb(), 0);\n+        assertEquals(203.0, model.getTransformers().get(1).getWinding2Rates().getRatec(), 0);\n+        assertEquals(301.0, model.getTransformers().get(1).getWinding3Rates().getRatea(), 0);\n+        assertEquals(302.0, model.getTransformers().get(1).getWinding3Rates().getRateb(), 0);\n+        assertEquals(303.0, model.getTransformers().get(1).getWinding3Rates().getRatec(), 0);\n     }\n \n-    @Test(expected = PsseException.class)\n+    private static String toJson(PssePowerFlowModel model) throws JsonProcessingException {\n+        PsseVersion version = fromRevision(model.getCaseIdentification().getRev());\n+        SimpleBeanPropertyFilter filter = new SimpleBeanPropertyFilter() {\n+            @Override\n+            protected boolean include(PropertyWriter writer) {\n+                Revision rev = writer.getAnnotation(Revision.class);\n+                return rev == null || PsseVersioned.isValidVersion(version, rev);\n+            }\n+        };\n+        FilterProvider filters = new SimpleFilterProvider().addFilter(\"PsseVersionFilter\", filter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIyMzk2Mg=="}, "originalCommit": {"oid": "c1b57e1e61f537d5f070857277f8e0084f4099d9"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNjczNjk1OnYy", "diffSide": "RIGHT", "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNjo0MDo0MVrOIH-dpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzoyNDo0OFrOIIV3kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIzNDM0MA==", "bodyText": "Could probably be improved by introducing a PsseBranch interface with all the required getters (getI(), getJ(), getK(), getR() and getX())", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r545234340", "createdAt": "2020-12-17T16:40:41Z", "author": {"login": "mathbagu"}, "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -624,98 +499,235 @@ private static void createTransformer(PsseTransformer psseTfo, ContainersMapping\n         }\n     }\n \n+    @Override\n+    public String getFormat() {\n+        return FORMAT;\n+    }\n+\n+    @Override\n+    public List<Parameter> getParameters() {\n+        return Collections.singletonList(IGNORE_BASE_VOLTAGE_PARAMETER);\n+    }\n+\n+    @Override\n+    public String getComment() {\n+        return \"PSS/E Format to IIDM converter\";\n+    }\n+\n+    @Override\n+    public boolean exists(ReadOnlyDataSource dataSource) {\n+        try {\n+            String ext = findExtension(dataSource);\n+            return exists(dataSource, ext);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n     @Override\n     public Network importData(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters) {\n         Objects.requireNonNull(dataSource);\n         Objects.requireNonNull(networkFactory);\n+        try {\n+            String ext = findExtension(dataSource);\n+            if (ext == null) {\n+                throw new PsseException(String.format(\"No Power Flow Data file found. Basename: %s, supported extensions: %s\",\n+                        dataSource.getBaseName(),\n+                        String.join(\"|\", EXTENSIONS)));\n+            }\n+            PsseVersion version = PowerFlowDataFactory.create(ext).readVersion(dataSource, ext);\n+            Context context = new Context();\n+            PssePowerFlowModel pssePowerFlowModel = PowerFlowDataFactory.create(ext, version).read(dataSource, ext, context);\n+            pssePowerFlowModel.getCaseIdentification().validate();\n+\n+            Network network = networkFactory.createNetwork(dataSource.getBaseName(), FORMAT);\n+            // TODO store the PsseContext with the Network to be able to export back using its information\n+            convert(pssePowerFlowModel, network, parameters);\n+            return network;\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    private String findExtension(ReadOnlyDataSource dataSource) throws IOException {\n+        for (String ext : EXTENSIONS) {\n+            if (dataSource.exists(null, ext)) {\n+                return ext;\n+            }\n+        }\n+        return null;\n+    }\n \n-        Network network = networkFactory.createNetwork(dataSource.getBaseName(), FORMAT);\n+    private boolean exists(ReadOnlyDataSource dataSource, String ext) throws IOException {\n+        if (ext != null) {\n+            try {\n+                return PowerFlowDataFactory.create(ext).isValidFile(dataSource, ext);\n+            } catch (PsseException | IOException e) {\n+                LOGGER.error(String.format(\"Invalid content in filename %s.%s: %s\",\n+                        dataSource.getBaseName(),\n+                        ext,\n+                        e.getMessage()));\n+            }\n+        }\n+        return false;\n+    }\n \n+    @Override\n+    public void copy(ReadOnlyDataSource fromDataSource, DataSource toDataSource) {\n+        Objects.requireNonNull(fromDataSource);\n+        Objects.requireNonNull(toDataSource);\n         try {\n-            String ext = findExtension(dataSource, true);\n-            try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, ext)))) {\n+            String ext = findExtension(fromDataSource);\n+            if (!exists(fromDataSource, ext)) {\n+                throw new PowsyblException(\"From data source is not importable\");\n+            }\n+            try (InputStream is = fromDataSource.newInputStream(null, ext);\n+                 OutputStream os = toDataSource.newOutputStream(null, ext, false)) {\n+                ByteStreams.copy(is, os);\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n \n-                // parse file\n-                PsseRawModel psseModel = new PsseRawReader().read(reader);\n+    private void createSwitchedShuntBlockMap(PssePowerFlowModel psseModel, Map<PsseSwitchedShunt, ShuntBlockTab> stoBlockiTab) {\n \n-                // check version\n-                if (psseModel.getCaseIdentification().getRev() > PsseConstants.SUPPORTED_VERSION) {\n-                    throw new PsseException(\"PSS/E version higher than \" + PsseConstants.SUPPORTED_VERSION + \" not supported\");\n-                }\n-                if (psseModel.getCaseIdentification().getIc() == 1) {\n-                    throw new PsseException(\"Incremental load of PSS/E data option (IC = 1) not supported\");\n-                }\n+        /* Creates a map between the PSSE switched shunt and the blocks info of this shunt\n+        A switched shunt may contain up to 8 blocks and each block may contain up to 9 steps of the same value (in MVAR)\n+        A block may be capacitive or inductive */\n+        for (PsseSwitchedShunt psseSwShunt : psseModel.getSwitchedShunts()) {\n+            ShuntBlockTab sbt = new ShuntBlockTab();\n \n-                // set date and time\n-                // TODO\n-\n-                // build container to fit IIDM requirements\n-                List<Object> branches = ImmutableList.builder()\n-                        .addAll(psseModel.getNonTransformerBranches())\n-                        .addAll(psseModel.getTransformers())\n-                        .build();\n-                ToIntFunction<Object> branchToNum1 = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getI() : ((PsseTransformer) branch).getI();\n-                ToIntFunction<Object> branchToNum2 = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getJ() : ((PsseTransformer) branch).getJ();\n-                ToIntFunction<Object> branchToNum3 = branch -> branch instanceof PsseNonTransformerBranch ? 0 : ((PsseTransformer) branch).getK();\n-                ToDoubleFunction<Object> branchToResistance = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getR() : ((PsseTransformer) branch).getR12();\n-                ToDoubleFunction<Object> branchToReactance = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getX() : ((PsseTransformer) branch).getX12();\n-                Predicate<Object> branchToIsTransformer = branch -> branch instanceof PsseTransformer;\n-                ContainersMapping containerMapping = ContainersMapping.create(psseModel.getBuses(), branches, PsseBus::getI, branchToNum1,\n-                    branchToNum2, branchToNum3, branchToResistance, branchToReactance, branchToIsTransformer,\n-                    busNums -> \"VL\" + busNums.iterator().next(), substationNum -> \"S\" + substationNum++);\n-\n-                boolean ignoreBaseVoltage = ConversionParameters.readBooleanParameter(FORMAT, parameters, IGNORE_BASE_VOLTAGE_PARAMETER,\n-                        ParameterDefaultValueConfig.INSTANCE);\n-                PerUnitContext perUnitContext = new PerUnitContext(psseModel.getCaseIdentification().getSbase(), ignoreBaseVoltage);\n-\n-                //The map gives access to PsseBus object with the int bus Number\n-                Map<Integer, PsseBus> busNumToPsseBus = new HashMap<>();\n-\n-                // create buses\n-                createBuses(psseModel, containerMapping, perUnitContext, network, busNumToPsseBus);\n-\n-                //Create loads\n-                for (PsseLoad psseLoad : psseModel.getLoads()) {\n-                    createLoad(psseLoad, containerMapping, network);\n-                }\n+            int[] ni = {\n+                    psseSwShunt.getN1(), psseSwShunt.getN2(), psseSwShunt.getN3(), psseSwShunt.getN4(),\n+                    psseSwShunt.getN5(), psseSwShunt.getN6(), psseSwShunt.getN7(), psseSwShunt.getN8()\n+            };\n \n-                //Create fixed shunts\n-                for (PsseFixedShunt psseShunt : psseModel.getFixedShunts()) {\n-                    createShuntCompensator(psseShunt, containerMapping, network);\n-                }\n+            double[] bi = {\n+                    psseSwShunt.getB1(), psseSwShunt.getB2(), psseSwShunt.getB3(), psseSwShunt.getB4(),\n+                    psseSwShunt.getB5(), psseSwShunt.getB6(), psseSwShunt.getB7(), psseSwShunt.getB8()\n+            };\n \n-                //Create switched shunts\n-                Map<PsseSwitchedShunt, ShuntBlockTab > stoBlockiTab = new HashMap<>();\n-                createSwitchedShuntBlockMap(psseModel, stoBlockiTab);\n-                for (PsseSwitchedShunt psseSwShunt : psseModel.getSwitchedShunts()) {\n-                    createSwitchedShunt(psseSwShunt, perUnitContext, containerMapping, network, stoBlockiTab);\n-                }\n+            int i = 0;\n+            while (i <= 7 && ni[i] > 0) {\n+                sbt.add(i + 1, ni[i], bi[i]);\n+                i++;\n+            }\n \n-                for (PsseGenerator psseGen : psseModel.getGenerators()) {\n-                    createGenerator(psseGen, busNumToPsseBus.get(psseGen.getI()), containerMapping, network);\n-                }\n+            stoBlockiTab.put(psseSwShunt, sbt);\n+        }\n+    }\n \n-                for (PsseNonTransformerBranch psseLine : psseModel.getNonTransformerBranches()) {\n-                    createLine(psseLine, containerMapping, perUnitContext, network);\n-                }\n+    private Network convert(PssePowerFlowModel psseModel, Network network, Properties parameters) {\n+        // set date and time\n+        // TODO\n+\n+        // build container to fit IIDM requirements\n+        List<Object> branches = ImmutableList.builder()\n+                .addAll(psseModel.getNonTransformerBranches())\n+                .addAll(psseModel.getTransformers())\n+                .build();\n+        ToIntFunction<Object> branchToNum1 = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getI() : ((PsseTransformer) branch).getI();\n+        ToIntFunction<Object> branchToNum2 = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getJ() : ((PsseTransformer) branch).getJ();\n+        ToIntFunction<Object> branchToNum3 = branch -> branch instanceof PsseNonTransformerBranch ? 0 : ((PsseTransformer) branch).getK();\n+        ToDoubleFunction<Object> branchToResistance = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getR() : ((PsseTransformer) branch).getR12();\n+        ToDoubleFunction<Object> branchToReactance = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getX() : ((PsseTransformer) branch).getX12();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1b57e1e61f537d5f070857277f8e0084f4099d9"}, "originalPosition": 476}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYxNzgxMA==", "bodyText": "The ContainersMapping object that is using these functions is located in the iidm-api util package, and it is used to process in a generic way objects from different network models: IEEE CDF, Matpower, PSSE. An interface like this should be introduced at iidm-api level, and these external network models should implement it (adding a dependency to iidm).", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r545617810", "createdAt": "2020-12-18T07:24:48Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -624,98 +499,235 @@ private static void createTransformer(PsseTransformer psseTfo, ContainersMapping\n         }\n     }\n \n+    @Override\n+    public String getFormat() {\n+        return FORMAT;\n+    }\n+\n+    @Override\n+    public List<Parameter> getParameters() {\n+        return Collections.singletonList(IGNORE_BASE_VOLTAGE_PARAMETER);\n+    }\n+\n+    @Override\n+    public String getComment() {\n+        return \"PSS/E Format to IIDM converter\";\n+    }\n+\n+    @Override\n+    public boolean exists(ReadOnlyDataSource dataSource) {\n+        try {\n+            String ext = findExtension(dataSource);\n+            return exists(dataSource, ext);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n     @Override\n     public Network importData(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters) {\n         Objects.requireNonNull(dataSource);\n         Objects.requireNonNull(networkFactory);\n+        try {\n+            String ext = findExtension(dataSource);\n+            if (ext == null) {\n+                throw new PsseException(String.format(\"No Power Flow Data file found. Basename: %s, supported extensions: %s\",\n+                        dataSource.getBaseName(),\n+                        String.join(\"|\", EXTENSIONS)));\n+            }\n+            PsseVersion version = PowerFlowDataFactory.create(ext).readVersion(dataSource, ext);\n+            Context context = new Context();\n+            PssePowerFlowModel pssePowerFlowModel = PowerFlowDataFactory.create(ext, version).read(dataSource, ext, context);\n+            pssePowerFlowModel.getCaseIdentification().validate();\n+\n+            Network network = networkFactory.createNetwork(dataSource.getBaseName(), FORMAT);\n+            // TODO store the PsseContext with the Network to be able to export back using its information\n+            convert(pssePowerFlowModel, network, parameters);\n+            return network;\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    private String findExtension(ReadOnlyDataSource dataSource) throws IOException {\n+        for (String ext : EXTENSIONS) {\n+            if (dataSource.exists(null, ext)) {\n+                return ext;\n+            }\n+        }\n+        return null;\n+    }\n \n-        Network network = networkFactory.createNetwork(dataSource.getBaseName(), FORMAT);\n+    private boolean exists(ReadOnlyDataSource dataSource, String ext) throws IOException {\n+        if (ext != null) {\n+            try {\n+                return PowerFlowDataFactory.create(ext).isValidFile(dataSource, ext);\n+            } catch (PsseException | IOException e) {\n+                LOGGER.error(String.format(\"Invalid content in filename %s.%s: %s\",\n+                        dataSource.getBaseName(),\n+                        ext,\n+                        e.getMessage()));\n+            }\n+        }\n+        return false;\n+    }\n \n+    @Override\n+    public void copy(ReadOnlyDataSource fromDataSource, DataSource toDataSource) {\n+        Objects.requireNonNull(fromDataSource);\n+        Objects.requireNonNull(toDataSource);\n         try {\n-            String ext = findExtension(dataSource, true);\n-            try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, ext)))) {\n+            String ext = findExtension(fromDataSource);\n+            if (!exists(fromDataSource, ext)) {\n+                throw new PowsyblException(\"From data source is not importable\");\n+            }\n+            try (InputStream is = fromDataSource.newInputStream(null, ext);\n+                 OutputStream os = toDataSource.newOutputStream(null, ext, false)) {\n+                ByteStreams.copy(is, os);\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n \n-                // parse file\n-                PsseRawModel psseModel = new PsseRawReader().read(reader);\n+    private void createSwitchedShuntBlockMap(PssePowerFlowModel psseModel, Map<PsseSwitchedShunt, ShuntBlockTab> stoBlockiTab) {\n \n-                // check version\n-                if (psseModel.getCaseIdentification().getRev() > PsseConstants.SUPPORTED_VERSION) {\n-                    throw new PsseException(\"PSS/E version higher than \" + PsseConstants.SUPPORTED_VERSION + \" not supported\");\n-                }\n-                if (psseModel.getCaseIdentification().getIc() == 1) {\n-                    throw new PsseException(\"Incremental load of PSS/E data option (IC = 1) not supported\");\n-                }\n+        /* Creates a map between the PSSE switched shunt and the blocks info of this shunt\n+        A switched shunt may contain up to 8 blocks and each block may contain up to 9 steps of the same value (in MVAR)\n+        A block may be capacitive or inductive */\n+        for (PsseSwitchedShunt psseSwShunt : psseModel.getSwitchedShunts()) {\n+            ShuntBlockTab sbt = new ShuntBlockTab();\n \n-                // set date and time\n-                // TODO\n-\n-                // build container to fit IIDM requirements\n-                List<Object> branches = ImmutableList.builder()\n-                        .addAll(psseModel.getNonTransformerBranches())\n-                        .addAll(psseModel.getTransformers())\n-                        .build();\n-                ToIntFunction<Object> branchToNum1 = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getI() : ((PsseTransformer) branch).getI();\n-                ToIntFunction<Object> branchToNum2 = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getJ() : ((PsseTransformer) branch).getJ();\n-                ToIntFunction<Object> branchToNum3 = branch -> branch instanceof PsseNonTransformerBranch ? 0 : ((PsseTransformer) branch).getK();\n-                ToDoubleFunction<Object> branchToResistance = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getR() : ((PsseTransformer) branch).getR12();\n-                ToDoubleFunction<Object> branchToReactance = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getX() : ((PsseTransformer) branch).getX12();\n-                Predicate<Object> branchToIsTransformer = branch -> branch instanceof PsseTransformer;\n-                ContainersMapping containerMapping = ContainersMapping.create(psseModel.getBuses(), branches, PsseBus::getI, branchToNum1,\n-                    branchToNum2, branchToNum3, branchToResistance, branchToReactance, branchToIsTransformer,\n-                    busNums -> \"VL\" + busNums.iterator().next(), substationNum -> \"S\" + substationNum++);\n-\n-                boolean ignoreBaseVoltage = ConversionParameters.readBooleanParameter(FORMAT, parameters, IGNORE_BASE_VOLTAGE_PARAMETER,\n-                        ParameterDefaultValueConfig.INSTANCE);\n-                PerUnitContext perUnitContext = new PerUnitContext(psseModel.getCaseIdentification().getSbase(), ignoreBaseVoltage);\n-\n-                //The map gives access to PsseBus object with the int bus Number\n-                Map<Integer, PsseBus> busNumToPsseBus = new HashMap<>();\n-\n-                // create buses\n-                createBuses(psseModel, containerMapping, perUnitContext, network, busNumToPsseBus);\n-\n-                //Create loads\n-                for (PsseLoad psseLoad : psseModel.getLoads()) {\n-                    createLoad(psseLoad, containerMapping, network);\n-                }\n+            int[] ni = {\n+                    psseSwShunt.getN1(), psseSwShunt.getN2(), psseSwShunt.getN3(), psseSwShunt.getN4(),\n+                    psseSwShunt.getN5(), psseSwShunt.getN6(), psseSwShunt.getN7(), psseSwShunt.getN8()\n+            };\n \n-                //Create fixed shunts\n-                for (PsseFixedShunt psseShunt : psseModel.getFixedShunts()) {\n-                    createShuntCompensator(psseShunt, containerMapping, network);\n-                }\n+            double[] bi = {\n+                    psseSwShunt.getB1(), psseSwShunt.getB2(), psseSwShunt.getB3(), psseSwShunt.getB4(),\n+                    psseSwShunt.getB5(), psseSwShunt.getB6(), psseSwShunt.getB7(), psseSwShunt.getB8()\n+            };\n \n-                //Create switched shunts\n-                Map<PsseSwitchedShunt, ShuntBlockTab > stoBlockiTab = new HashMap<>();\n-                createSwitchedShuntBlockMap(psseModel, stoBlockiTab);\n-                for (PsseSwitchedShunt psseSwShunt : psseModel.getSwitchedShunts()) {\n-                    createSwitchedShunt(psseSwShunt, perUnitContext, containerMapping, network, stoBlockiTab);\n-                }\n+            int i = 0;\n+            while (i <= 7 && ni[i] > 0) {\n+                sbt.add(i + 1, ni[i], bi[i]);\n+                i++;\n+            }\n \n-                for (PsseGenerator psseGen : psseModel.getGenerators()) {\n-                    createGenerator(psseGen, busNumToPsseBus.get(psseGen.getI()), containerMapping, network);\n-                }\n+            stoBlockiTab.put(psseSwShunt, sbt);\n+        }\n+    }\n \n-                for (PsseNonTransformerBranch psseLine : psseModel.getNonTransformerBranches()) {\n-                    createLine(psseLine, containerMapping, perUnitContext, network);\n-                }\n+    private Network convert(PssePowerFlowModel psseModel, Network network, Properties parameters) {\n+        // set date and time\n+        // TODO\n+\n+        // build container to fit IIDM requirements\n+        List<Object> branches = ImmutableList.builder()\n+                .addAll(psseModel.getNonTransformerBranches())\n+                .addAll(psseModel.getTransformers())\n+                .build();\n+        ToIntFunction<Object> branchToNum1 = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getI() : ((PsseTransformer) branch).getI();\n+        ToIntFunction<Object> branchToNum2 = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getJ() : ((PsseTransformer) branch).getJ();\n+        ToIntFunction<Object> branchToNum3 = branch -> branch instanceof PsseNonTransformerBranch ? 0 : ((PsseTransformer) branch).getK();\n+        ToDoubleFunction<Object> branchToResistance = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getR() : ((PsseTransformer) branch).getR12();\n+        ToDoubleFunction<Object> branchToReactance = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getX() : ((PsseTransformer) branch).getX12();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIzNDM0MA=="}, "originalCommit": {"oid": "c1b57e1e61f537d5f070857277f8e0084f4099d9"}, "originalPosition": 476}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNjk4MzgzOnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseVersioned.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzozMzoxNlrOIIAwng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzozODoxMVrOIIWLmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI3MTk2Ng==", "bodyText": "This method is not used: will you use in a future pull request?", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r545271966", "createdAt": "2020-12-17T17:33:16Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseVersioned.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model;\n+\n+import com.powsybl.psse.model.pf.PssePowerFlowModel;\n+\n+import java.lang.reflect.Field;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.powsybl.psse.model.PsseVersion.MAX_VERSION;\n+import static com.powsybl.psse.model.PsseVersion.fromRevision;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class PsseVersioned {\n+    private PssePowerFlowModel model = null;\n+\n+    public void setModel(PssePowerFlowModel model) {\n+        this.model = model;\n+    }\n+\n+    public void checkVersion(String fieldName) {\n+        // If we do not have a reference back to a model\n+        // We can not obtain current version and we can not perform checks\n+        if (model == null) {\n+            return;\n+        }\n+        Field field = null;\n+        try {\n+            field = this.getClass().getDeclaredField(fieldName);\n+        } catch (NoSuchFieldException e) {\n+            throw new PsseException(\"Wrong field name \" + fieldName, e);\n+        }\n+\n+        checkVersionField(field, fieldName);\n+    }\n+\n+    public void checkVersion(String innerClassName, String fieldName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1b57e1e61f537d5f070857277f8e0084f4099d9"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyMjkzOQ==", "bodyText": "It is not needed. It was used in a previous stage of the refactoring. I have removed it.", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r545622939", "createdAt": "2020-12-18T07:38:11Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseVersioned.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model;\n+\n+import com.powsybl.psse.model.pf.PssePowerFlowModel;\n+\n+import java.lang.reflect.Field;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.powsybl.psse.model.PsseVersion.MAX_VERSION;\n+import static com.powsybl.psse.model.PsseVersion.fromRevision;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class PsseVersioned {\n+    private PssePowerFlowModel model = null;\n+\n+    public void setModel(PssePowerFlowModel model) {\n+        this.model = model;\n+    }\n+\n+    public void checkVersion(String fieldName) {\n+        // If we do not have a reference back to a model\n+        // We can not obtain current version and we can not perform checks\n+        if (model == null) {\n+            return;\n+        }\n+        Field field = null;\n+        try {\n+            field = this.getClass().getDeclaredField(fieldName);\n+        } catch (NoSuchFieldException e) {\n+            throw new PsseException(\"Wrong field name \" + fieldName, e);\n+        }\n+\n+        checkVersionField(field, fieldName);\n+    }\n+\n+    public void checkVersion(String innerClassName, String fieldName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI3MTk2Ng=="}, "originalCommit": {"oid": "c1b57e1e61f537d5f070857277f8e0084f4099d9"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzE0NTI1OnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/io/AbstractRecordGroup.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODowOTozMlrOIICSaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo0NDo1OFrOIIWWDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5NzAwMA==", "bodyText": "I wonder if we should split this interface in two different interfaces. I think the implementation will result in huge files", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r545297000", "createdAt": "2020-12-17T18:09:32Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/io/AbstractRecordGroup.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.io;\n+\n+import com.powsybl.psse.model.PsseException;\n+import com.powsybl.psse.model.PsseVersion;\n+import com.univocity.parsers.common.processor.BeanListProcessor;\n+import com.univocity.parsers.common.processor.BeanWriterProcessor;\n+import com.univocity.parsers.csv.CsvParser;\n+import com.univocity.parsers.csv.CsvParserSettings;\n+import com.univocity.parsers.csv.CsvWriter;\n+import com.univocity.parsers.csv.CsvWriterSettings;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.*;\n+\n+import static com.powsybl.psse.model.io.FileFormat.JSON;\n+import static com.powsybl.psse.model.io.FileFormat.LEGACY_TEXT;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public abstract class AbstractRecordGroup<T> {\n+\n+    protected final RecordGroupIdentification identification;\n+    private final String[] fieldNames;\n+    private final Map<PsseVersion.Major, String[]> fieldNamesByVersionMajor = new EnumMap<>(PsseVersion.Major.class);\n+    private String[] quotedFields;\n+    private final Map<FileFormat, RecordGroupReaderWriter<T>> readersWriters = new EnumMap<>(FileFormat.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1b57e1e61f537d5f070857277f8e0084f4099d9"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyNTYxMg==", "bodyText": "I am not sure we have to split readers and writers. The implementation of read/write methods are quite compact, and seeing them together in the same class helps understanding the processing.", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r545625612", "createdAt": "2020-12-18T07:44:58Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/io/AbstractRecordGroup.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.io;\n+\n+import com.powsybl.psse.model.PsseException;\n+import com.powsybl.psse.model.PsseVersion;\n+import com.univocity.parsers.common.processor.BeanListProcessor;\n+import com.univocity.parsers.common.processor.BeanWriterProcessor;\n+import com.univocity.parsers.csv.CsvParser;\n+import com.univocity.parsers.csv.CsvParserSettings;\n+import com.univocity.parsers.csv.CsvWriter;\n+import com.univocity.parsers.csv.CsvWriterSettings;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.*;\n+\n+import static com.powsybl.psse.model.io.FileFormat.JSON;\n+import static com.powsybl.psse.model.io.FileFormat.LEGACY_TEXT;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public abstract class AbstractRecordGroup<T> {\n+\n+    protected final RecordGroupIdentification identification;\n+    private final String[] fieldNames;\n+    private final Map<PsseVersion.Major, String[]> fieldNamesByVersionMajor = new EnumMap<>(PsseVersion.Major.class);\n+    private String[] quotedFields;\n+    private final Map<FileFormat, RecordGroupReaderWriter<T>> readersWriters = new EnumMap<>(FileFormat.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5NzAwMA=="}, "originalCommit": {"oid": "c1b57e1e61f537d5f070857277f8e0084f4099d9"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzE1MDI5OnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/io/RecordGroupReaderWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODoxMDo1M1rOIICVig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo0NzozN1rOIIWaUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5NzgwMg==", "bodyText": "I dislike this interface name: I think we should split this interface in two different interfaces.", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r545297802", "createdAt": "2020-12-17T18:10:53Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/io/RecordGroupReaderWriter.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.io;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.List;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+interface RecordGroupReaderWriter<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1b57e1e61f537d5f070857277f8e0084f4099d9"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyNjcwNw==", "bodyText": "Ok, I am not against splitting readers and writers.", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r545626707", "createdAt": "2020-12-18T07:47:37Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/io/RecordGroupReaderWriter.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.io;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.List;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+interface RecordGroupReaderWriter<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5NzgwMg=="}, "originalCommit": {"oid": "c1b57e1e61f537d5f070857277f8e0084f4099d9"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzE2MDQ5OnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/io/Util.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODoxMzowN1rOIICbZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwODoyNjoyN1rOIIXl8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5OTMwMA==", "bodyText": "Could maybe lead to a performance issue: I would implement this using sets, but not sure if it's interesting here", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r545299300", "createdAt": "2020-12-17T18:13:07Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/io/Util.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.io;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public final class Util {\n+\n+    private Util() {\n+    }\n+\n+    public static String[] intersection(String[] strings1, String[] strings2) {\n+        return ArrayUtils.removeElements(strings1, ArrayUtils.removeElements(strings1, strings2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1b57e1e61f537d5f070857277f8e0084f4099d9"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYzMTYxMg==", "bodyText": "The arrays used here are quite small, and the method is called only once per record group during write. But I will profile it using a big input file.", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r545631612", "createdAt": "2020-12-18T07:59:01Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/io/Util.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.io;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public final class Util {\n+\n+    private Util() {\n+    }\n+\n+    public static String[] intersection(String[] strings1, String[] strings2) {\n+        return ArrayUtils.removeElements(strings1, ArrayUtils.removeElements(strings1, strings2));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5OTMwMA=="}, "originalCommit": {"oid": "c1b57e1e61f537d5f070857277f8e0084f4099d9"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTY0NjA2NQ==", "bodyText": "We have to keep in mind that order of elements in first array must be preserved. It is not really a set intersection, maybe the name of the method should be changed to keep(strings, stringsToKeep).\nAgree that a possible optimisation would be to build  a Set from stringsToKeep and iterate over strings, keeping each item only if it is found in the stringsToKeep set.", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r545646065", "createdAt": "2020-12-18T08:26:27Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/io/Util.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.io;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public final class Util {\n+\n+    private Util() {\n+    }\n+\n+    public static String[] intersection(String[] strings1, String[] strings2) {\n+        return ArrayUtils.removeElements(strings1, ArrayUtils.removeElements(strings1, strings2));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5OTMwMA=="}, "originalCommit": {"oid": "c1b57e1e61f537d5f070857277f8e0084f4099d9"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzIyNTI5OnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/pf/io/PowerFlowDataFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODoyODowOVrOIIDBMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwODo0MDowOVrOIIYbXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwODk3OA==", "bodyText": "I we can prepare the design for newer version?", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r545308978", "createdAt": "2020-12-17T18:28:09Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/pf/io/PowerFlowDataFactory.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.pf.io;\n+\n+import com.powsybl.psse.model.PsseException;\n+import com.powsybl.psse.model.PsseVersion;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public final class PowerFlowDataFactory {\n+\n+    private PowerFlowDataFactory() {\n+    }\n+\n+    public static PowerFlowData create(String extension) {\n+        // When only extension is given,\n+        // We create PowerFlowData objects that are able to read the case identification\n+        // To determine if the file is valid and get its version\n+        if (extension.equalsIgnoreCase(\"rawx\")) {\n+            return new PowerFlowRawxDataAllVersions();\n+        } else {\n+            return new PowerFlowRawDataAllVersions();\n+        }\n+    }\n+\n+    public static PowerFlowData create(String extension, PsseVersion version) {\n+        if (extension.equalsIgnoreCase(\"rawx\")) {\n+            return new PowerFlowRawxData35();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1b57e1e61f537d5f070857277f8e0084f4099d9"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTY1OTc0Mg==", "bodyText": "Not sure if this is what you were suggesting: I added a switch clause with explicit V35 case. Rest of versions are unsupported at the moment.", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r545659742", "createdAt": "2020-12-18T08:40:09Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/pf/io/PowerFlowDataFactory.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.pf.io;\n+\n+import com.powsybl.psse.model.PsseException;\n+import com.powsybl.psse.model.PsseVersion;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public final class PowerFlowDataFactory {\n+\n+    private PowerFlowDataFactory() {\n+    }\n+\n+    public static PowerFlowData create(String extension) {\n+        // When only extension is given,\n+        // We create PowerFlowData objects that are able to read the case identification\n+        // To determine if the file is valid and get its version\n+        if (extension.equalsIgnoreCase(\"rawx\")) {\n+            return new PowerFlowRawxDataAllVersions();\n+        } else {\n+            return new PowerFlowRawDataAllVersions();\n+        }\n+    }\n+\n+    public static PowerFlowData create(String extension, PsseVersion version) {\n+        if (extension.equalsIgnoreCase(\"rawx\")) {\n+            return new PowerFlowRawxData35();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwODk3OA=="}, "originalCommit": {"oid": "c1b57e1e61f537d5f070857277f8e0084f4099d9"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzIzNTQxOnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/pf/io/TransformerData.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODozMDozMVrOIIDHBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwODowMzowOFrOIIW0Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMDQ2OA==", "bodyText": "Do you forgot something or is planned later? The mapping is filled but not used.", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r545310468", "createdAt": "2020-12-17T18:30:31Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/pf/io/TransformerData.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.pf.io;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.powsybl.psse.model.PsseException;\n+import com.powsybl.psse.model.PsseVersion;\n+import com.powsybl.psse.model.io.*;\n+import com.powsybl.psse.model.pf.PsseTransformer;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Scanner;\n+import java.util.stream.Collectors;\n+\n+import static com.powsybl.psse.model.io.FileFormat.VALID_DELIMITERS;\n+import static com.powsybl.psse.model.pf.io.PowerFlowRecordGroup.*;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+class TransformerData extends AbstractRecordGroup<PsseTransformer> {\n+\n+    TransformerData() {\n+        super(TRANSFORMER);\n+        withQuotedFields(\"ckt\", \"name\", \"vecgrp\");\n+        withReaderWriter(FileFormat.LEGACY_TEXT, new TransformersLegacyText(this));\n+        withReaderWriter(FileFormat.JSON, new TransformersJson(this));\n+        // Fix mappings in nested beans that Univocity did not recognize from annotations\n+        // The same mappings are specified in PsseTransformer class\n+        // using a headerTransformer processing for @Nested annotation\n+        Map<String, String> mapping = new HashMap<>(12 * 3 + 3);\n+        for (int k = 1; k <= 12; k++) {\n+            mapping.put(\"winding1Rates.rate\" + k, \"wdg1rate\" + k);\n+            mapping.put(\"winding2Rates.rate\" + k, \"wdg2rate\" + k);\n+            mapping.put(\"winding3Rates.rate\" + k, \"wdg3rate\" + k);\n+        }\n+        for (char x = 'a'; x <= 'c'; x++) {\n+            mapping.put(\"winding1Rates.rate\" + x, \"rat\" + x + \"1\");\n+            mapping.put(\"winding2Rates.rate\" + x, \"rat\" + x + \"2\");\n+            mapping.put(\"winding3Rates.rate\" + x, \"rat\" + x + \"3\");\n+        }\n+        //withAttributesToColumnNamesForBeanWriterProcessor(mapping);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1b57e1e61f537d5f070857277f8e0084f4099d9"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYzMzMwNw==", "bodyText": "Sorry, I wrote the code to try to fix an issue with Univocity when using Rates as a nested object in TransformerWinding that is nested in Transformer. Finally I decided to move the Rates directly as nested objects in Transformer to avoid the problem. I have removed the mapping, it is not needed.", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r545633307", "createdAt": "2020-12-18T08:03:08Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/pf/io/TransformerData.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.pf.io;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.powsybl.psse.model.PsseException;\n+import com.powsybl.psse.model.PsseVersion;\n+import com.powsybl.psse.model.io.*;\n+import com.powsybl.psse.model.pf.PsseTransformer;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Scanner;\n+import java.util.stream.Collectors;\n+\n+import static com.powsybl.psse.model.io.FileFormat.VALID_DELIMITERS;\n+import static com.powsybl.psse.model.pf.io.PowerFlowRecordGroup.*;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+class TransformerData extends AbstractRecordGroup<PsseTransformer> {\n+\n+    TransformerData() {\n+        super(TRANSFORMER);\n+        withQuotedFields(\"ckt\", \"name\", \"vecgrp\");\n+        withReaderWriter(FileFormat.LEGACY_TEXT, new TransformersLegacyText(this));\n+        withReaderWriter(FileFormat.JSON, new TransformersJson(this));\n+        // Fix mappings in nested beans that Univocity did not recognize from annotations\n+        // The same mappings are specified in PsseTransformer class\n+        // using a headerTransformer processing for @Nested annotation\n+        Map<String, String> mapping = new HashMap<>(12 * 3 + 3);\n+        for (int k = 1; k <= 12; k++) {\n+            mapping.put(\"winding1Rates.rate\" + k, \"wdg1rate\" + k);\n+            mapping.put(\"winding2Rates.rate\" + k, \"wdg2rate\" + k);\n+            mapping.put(\"winding3Rates.rate\" + k, \"wdg3rate\" + k);\n+        }\n+        for (char x = 'a'; x <= 'c'; x++) {\n+            mapping.put(\"winding1Rates.rate\" + x, \"rat\" + x + \"1\");\n+            mapping.put(\"winding2Rates.rate\" + x, \"rat\" + x + \"2\");\n+            mapping.put(\"winding3Rates.rate\" + x, \"rat\" + x + \"3\");\n+        }\n+        //withAttributesToColumnNamesForBeanWriterProcessor(mapping);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMDQ2OA=="}, "originalCommit": {"oid": "c1b57e1e61f537d5f070857277f8e0084f4099d9"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzI2NTE4OnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/pf/PsseTransformer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODozNzo1MFrOIIDYpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwODozNDowN1rOIIYDgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxNDk4MQ==", "bodyText": "We should extract WindingHeaderTransformer and WindingRatesHeaderTransformer from this class because they are related to I/O", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r545314981", "createdAt": "2020-12-17T18:37:50Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/pf/PsseTransformer.java", "diffHunk": "@@ -0,0 +1,406 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.pf;\n+\n+import com.fasterxml.jackson.annotation.JsonFilter;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import com.powsybl.psse.model.PsseVersioned;\n+import com.powsybl.psse.model.Revision;\n+import com.univocity.parsers.annotations.HeaderTransformer;\n+import com.univocity.parsers.annotations.Nested;\n+import com.univocity.parsers.annotations.Parsed;\n+\n+import java.lang.reflect.Field;\n+\n+/**\n+ *\n+ * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ */\n+\n+@JsonPropertyOrder(alphabetic = true)\n+@JsonFilter(\"PsseVersionFilter\")\n+public class PsseTransformer extends PsseVersioned {\n+\n+    @Override\n+    public void setModel(PssePowerFlowModel model) {\n+        super.setModel(model);\n+        ownership.setModel(model);\n+        winding1.setModel(model);\n+        winding2.setModel(model);\n+        winding3.setModel(model);\n+        winding1Rates.setModel(model);\n+        winding2Rates.setModel(model);\n+        winding3Rates.setModel(model);\n+    }\n+\n+    @Parsed(field = {\"i\", \"ibus\"})\n+    private int i;\n+\n+    @Parsed(field = {\"j\", \"jbus\"})\n+    private int j;\n+\n+    @Parsed(field = {\"k\", \"kbus\"})\n+    private int k = 0;\n+\n+    @Parsed(defaultNullRead = \"1\")\n+    private String ckt;\n+\n+    @Parsed\n+    private int cw = 1;\n+\n+    @Parsed\n+    private int cz = 1;\n+\n+    @Parsed\n+    private int cm = 1;\n+\n+    @Parsed\n+    private double mag1 = 0;\n+\n+    @Parsed\n+    private double mag2 = 0;\n+\n+    @Parsed(field = {\"nmetr\", \"nmet\"})\n+    private int nmetr = 2;\n+\n+    @Parsed(defaultNullRead = \"            \")\n+    private String name;\n+\n+    @Parsed\n+    private int stat = 1;\n+\n+    @Nested\n+    private PsseOwnership ownership;\n+\n+    @Parsed(defaultNullRead = \"            \")\n+    // If the issue 432 in Univocity is fixed,\n+    // the previous annotation will be correctly processed\n+    // and there would be no need to initialize vecgrp with default value\n+    // (https://github.com/uniVocity/univocity-parsers/issues/432)\n+    private String vecgrp = \"            \";\n+\n+    @Parsed\n+    @Revision(since = 35)\n+    private int zcod = 0;\n+\n+    @Parsed(field = {\"r12\", \"r1_2\"})\n+    private double r12 = 0;\n+\n+    @Parsed(field = {\"x12\", \"x1_2\"})\n+    private double x12;\n+\n+    @Parsed(field = {\"sbase12\", \"sbase1_2\"})\n+    private double sbase12 = Double.NaN;\n+\n+    @Parsed(field = {\"r23\", \"r2_3\"})\n+    private double r23 = 0;\n+\n+    @Parsed(field = {\"x23\", \"x2_3\"})\n+    private double x23 = Double.NaN;\n+\n+    @Parsed(field = {\"sbase23\", \"sbase2_3\"})\n+    private double sbase23 = Double.NaN;\n+\n+    @Parsed(field = {\"r31\", \"r3_1\"})\n+    private double r31 = 0;\n+\n+    @Parsed(field = {\"x31\", \"x3_1\"})\n+    private double x31 = Double.NaN;\n+\n+    @Parsed(field = {\"sbase31\", \"sbase3_1\"})\n+    private double sbase31 = Double.NaN;\n+\n+    @Parsed\n+    private double vmstar = 1;\n+\n+    @Parsed\n+    private double anstar = 0;\n+\n+    @Nested(headerTransformer = WindingHeaderTransformer.class, args = \"1\")\n+    private PsseTransformerWinding winding1;\n+\n+    @Nested(headerTransformer = WindingRatesHeaderTransformer.class, args = \"1\")\n+    private PsseRates winding1Rates;\n+\n+    @Nested(headerTransformer = WindingHeaderTransformer.class, args = \"2\")\n+    private PsseTransformerWinding winding2;\n+\n+    @Nested(headerTransformer = WindingRatesHeaderTransformer.class, args = \"2\")\n+    private PsseRates winding2Rates;\n+\n+    @Nested(headerTransformer = WindingHeaderTransformer.class, args = \"3\")\n+    private PsseTransformerWinding winding3;\n+\n+    @Nested(headerTransformer = WindingRatesHeaderTransformer.class, args = \"3\")\n+    private PsseRates winding3Rates;\n+\n+    public static class WindingHeaderTransformer extends HeaderTransformer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1b57e1e61f537d5f070857277f8e0084f4099d9"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTY1MzYzNQ==", "bodyText": "Moved", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r545653635", "createdAt": "2020-12-18T08:34:07Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/pf/PsseTransformer.java", "diffHunk": "@@ -0,0 +1,406 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.pf;\n+\n+import com.fasterxml.jackson.annotation.JsonFilter;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import com.powsybl.psse.model.PsseVersioned;\n+import com.powsybl.psse.model.Revision;\n+import com.univocity.parsers.annotations.HeaderTransformer;\n+import com.univocity.parsers.annotations.Nested;\n+import com.univocity.parsers.annotations.Parsed;\n+\n+import java.lang.reflect.Field;\n+\n+/**\n+ *\n+ * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ */\n+\n+@JsonPropertyOrder(alphabetic = true)\n+@JsonFilter(\"PsseVersionFilter\")\n+public class PsseTransformer extends PsseVersioned {\n+\n+    @Override\n+    public void setModel(PssePowerFlowModel model) {\n+        super.setModel(model);\n+        ownership.setModel(model);\n+        winding1.setModel(model);\n+        winding2.setModel(model);\n+        winding3.setModel(model);\n+        winding1Rates.setModel(model);\n+        winding2Rates.setModel(model);\n+        winding3Rates.setModel(model);\n+    }\n+\n+    @Parsed(field = {\"i\", \"ibus\"})\n+    private int i;\n+\n+    @Parsed(field = {\"j\", \"jbus\"})\n+    private int j;\n+\n+    @Parsed(field = {\"k\", \"kbus\"})\n+    private int k = 0;\n+\n+    @Parsed(defaultNullRead = \"1\")\n+    private String ckt;\n+\n+    @Parsed\n+    private int cw = 1;\n+\n+    @Parsed\n+    private int cz = 1;\n+\n+    @Parsed\n+    private int cm = 1;\n+\n+    @Parsed\n+    private double mag1 = 0;\n+\n+    @Parsed\n+    private double mag2 = 0;\n+\n+    @Parsed(field = {\"nmetr\", \"nmet\"})\n+    private int nmetr = 2;\n+\n+    @Parsed(defaultNullRead = \"            \")\n+    private String name;\n+\n+    @Parsed\n+    private int stat = 1;\n+\n+    @Nested\n+    private PsseOwnership ownership;\n+\n+    @Parsed(defaultNullRead = \"            \")\n+    // If the issue 432 in Univocity is fixed,\n+    // the previous annotation will be correctly processed\n+    // and there would be no need to initialize vecgrp with default value\n+    // (https://github.com/uniVocity/univocity-parsers/issues/432)\n+    private String vecgrp = \"            \";\n+\n+    @Parsed\n+    @Revision(since = 35)\n+    private int zcod = 0;\n+\n+    @Parsed(field = {\"r12\", \"r1_2\"})\n+    private double r12 = 0;\n+\n+    @Parsed(field = {\"x12\", \"x1_2\"})\n+    private double x12;\n+\n+    @Parsed(field = {\"sbase12\", \"sbase1_2\"})\n+    private double sbase12 = Double.NaN;\n+\n+    @Parsed(field = {\"r23\", \"r2_3\"})\n+    private double r23 = 0;\n+\n+    @Parsed(field = {\"x23\", \"x2_3\"})\n+    private double x23 = Double.NaN;\n+\n+    @Parsed(field = {\"sbase23\", \"sbase2_3\"})\n+    private double sbase23 = Double.NaN;\n+\n+    @Parsed(field = {\"r31\", \"r3_1\"})\n+    private double r31 = 0;\n+\n+    @Parsed(field = {\"x31\", \"x3_1\"})\n+    private double x31 = Double.NaN;\n+\n+    @Parsed(field = {\"sbase31\", \"sbase3_1\"})\n+    private double sbase31 = Double.NaN;\n+\n+    @Parsed\n+    private double vmstar = 1;\n+\n+    @Parsed\n+    private double anstar = 0;\n+\n+    @Nested(headerTransformer = WindingHeaderTransformer.class, args = \"1\")\n+    private PsseTransformerWinding winding1;\n+\n+    @Nested(headerTransformer = WindingRatesHeaderTransformer.class, args = \"1\")\n+    private PsseRates winding1Rates;\n+\n+    @Nested(headerTransformer = WindingHeaderTransformer.class, args = \"2\")\n+    private PsseTransformerWinding winding2;\n+\n+    @Nested(headerTransformer = WindingRatesHeaderTransformer.class, args = \"2\")\n+    private PsseRates winding2Rates;\n+\n+    @Nested(headerTransformer = WindingHeaderTransformer.class, args = \"3\")\n+    private PsseTransformerWinding winding3;\n+\n+    @Nested(headerTransformer = WindingRatesHeaderTransformer.class, args = \"3\")\n+    private PsseRates winding3Rates;\n+\n+    public static class WindingHeaderTransformer extends HeaderTransformer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxNDk4MQ=="}, "originalCommit": {"oid": "c1b57e1e61f537d5f070857277f8e0084f4099d9"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzI3MDkyOnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/pf/io/PowerFlowRecordGroup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODozOToyMVrOIIDcRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwODozNDoxOVrOIIYD8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxNTkxMA==", "bodyText": "License header is missing", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r545315910", "createdAt": "2020-12-17T18:39:21Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/pf/io/PowerFlowRecordGroup.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.powsybl.psse.model.pf.io;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1b57e1e61f537d5f070857277f8e0084f4099d9"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTY1Mzc0Nw==", "bodyText": "Added", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r545653747", "createdAt": "2020-12-18T08:34:19Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/pf/io/PowerFlowRecordGroup.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.powsybl.psse.model.pf.io;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxNTkxMA=="}, "originalCommit": {"oid": "c1b57e1e61f537d5f070857277f8e0084f4099d9"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMDAwNzI3OnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/io/RecordGroupIOJson.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOTo0NDoxMFrOIIb6VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMDowNjowMlrOIIcp1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxNjgyMA==", "bodyText": "Add an assertion here", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r545716820", "createdAt": "2020-12-18T09:44:10Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/io/RecordGroupIOJson.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.io;\n+\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.util.DefaultIndenter;\n+import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.psse.model.PsseException;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static com.powsybl.psse.model.io.RecordGroupIdentification.JsonObjectType.DATA_TABLE;\n+import static com.powsybl.psse.model.io.RecordGroupIdentification.JsonObjectType.PARAMETER_SET;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class RecordGroupIOJson<T> implements RecordGroupIO<T> {\n+    private final AbstractRecordGroup<T> recordGroup;\n+\n+    public RecordGroupIOJson(AbstractRecordGroup<T> recordGroup) {\n+        this.recordGroup = recordGroup;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "040c17adfc90accdb24ade36de57c90f052a0c93"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcyODk4Mw==", "bodyText": "Done. Also for RecordGroupIOLegacyText", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r545728983", "createdAt": "2020-12-18T10:06:02Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/io/RecordGroupIOJson.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.io;\n+\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.util.DefaultIndenter;\n+import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.psse.model.PsseException;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static com.powsybl.psse.model.io.RecordGroupIdentification.JsonObjectType.DATA_TABLE;\n+import static com.powsybl.psse.model.io.RecordGroupIdentification.JsonObjectType.PARAMETER_SET;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class RecordGroupIOJson<T> implements RecordGroupIO<T> {\n+    private final AbstractRecordGroup<T> recordGroup;\n+\n+    public RecordGroupIOJson(AbstractRecordGroup<T> recordGroup) {\n+        this.recordGroup = recordGroup;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxNjgyMA=="}, "originalCommit": {"oid": "040c17adfc90accdb24ade36de57c90f052a0c93"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMDA2MzU5OnYy", "diffSide": "RIGHT", "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/pf/PsseTransformerWinding.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOTo1ODoyN1rOIIca9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMDowNzozM1rOIIctKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcyNTE3Mw==", "bodyText": "To be removed", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r545725173", "createdAt": "2020-12-18T09:58:27Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/pf/PsseTransformerWinding.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.pf;\n+\n+import com.powsybl.psse.model.PsseVersioned;\n+import com.powsybl.psse.model.Revision;\n+import com.univocity.parsers.annotations.Parsed;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class PsseTransformerWinding extends PsseVersioned {\n+    @Override\n+    public void setModel(PssePowerFlowModel model) {\n+        super.setModel(model);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "040c17adfc90accdb24ade36de57c90f052a0c93"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcyOTgzMg==", "bodyText": "Done. Override was needed when trying to use Rates nested in each TransformerWinding instead of a Transformer level. Now it is not required.", "url": "https://github.com/powsybl/powsybl-core/pull/1461#discussion_r545729832", "createdAt": "2020-12-18T10:07:33Z", "author": {"login": "zamarrenolm"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/pf/PsseTransformerWinding.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model.pf;\n+\n+import com.powsybl.psse.model.PsseVersioned;\n+import com.powsybl.psse.model.Revision;\n+import com.univocity.parsers.annotations.Parsed;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class PsseTransformerWinding extends PsseVersioned {\n+    @Override\n+    public void setModel(PssePowerFlowModel model) {\n+        super.setModel(model);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcyNTE3Mw=="}, "originalCommit": {"oid": "040c17adfc90accdb24ade36de57c90f052a0c93"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 29, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}