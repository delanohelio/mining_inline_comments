{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5MjEyODE4", "number": 1261, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODozOTo1MVrODvdVfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo0NDoyMVrODvdcJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDkwMzAxOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-reducer/src/main/java/com/powsybl/iidm/reducer/SubNetworkPredicate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODozOTo1MVrOGB5Fhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODozOTo1MVrOGB5Fhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzNzA2Mg==", "bodyText": "Declare these variables final.", "url": "https://github.com/powsybl/powsybl-core/pull/1261#discussion_r404637062", "createdAt": "2020-04-07T08:39:51Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-reducer/src/main/java/com/powsybl/iidm/reducer/SubNetworkPredicate.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.reducer;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.iidm.network.*;\n+\n+import java.util.LinkedHashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * A network reducer predicate that allow reduction based on a center voltage level and all other voltage level neighbors\n+ * within a specified depth.\n+ *\n+ * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ */\n+public class SubNetworkPredicate implements NetworkPredicate {\n+\n+    private String voltageLevelId;\n+\n+    private int maxDepth;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "015782610ad037105c577ac3588f2a26590b6cfe"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDkxNTk1OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-reducer/src/main/java/com/powsybl/iidm/reducer/SubNetworkPredicate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo0MzoxN1rOGB5Nyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMToyNToyMFrOGB_CqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzOTE3OA==", "bodyText": "I think it's not a good design: the delegate is in fact final (you skip this part if the delegate is already initialized), but initialized after the constructor. I propose to make it delegate final, and initialize the SubNetworkPredicate using a VoltageLevel instead of its ID.\nIf you want to reuse the SubAreaNetwork for different VL or networks, the init() method should return the predicate and you should use a local variable.", "url": "https://github.com/powsybl/powsybl-core/pull/1261#discussion_r404639178", "createdAt": "2020-04-07T08:43:17Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-reducer/src/main/java/com/powsybl/iidm/reducer/SubNetworkPredicate.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.reducer;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.iidm.network.*;\n+\n+import java.util.LinkedHashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * A network reducer predicate that allow reduction based on a center voltage level and all other voltage level neighbors\n+ * within a specified depth.\n+ *\n+ * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ */\n+public class SubNetworkPredicate implements NetworkPredicate {\n+\n+    private String voltageLevelId;\n+\n+    private int maxDepth;\n+\n+    private IdentifierNetworkPredicate delegate;\n+\n+    public SubNetworkPredicate(String voltageLevelId, int maxDepth) {\n+        this.voltageLevelId = Objects.requireNonNull(voltageLevelId);\n+        if (maxDepth < 0) {\n+            throw new IllegalArgumentException(\"Invalid max depth value: \" + maxDepth);\n+        }\n+        this.maxDepth = maxDepth;\n+    }\n+\n+    private void init(Network network) {\n+        if (delegate != null) {\n+            return;\n+        }\n+        VoltageLevel vl = network.getVoltageLevel(voltageLevelId);\n+        if (vl == null) {\n+            throw new PowsyblException(\"Voltage level '\" + voltageLevelId + \"' not found\");\n+        }\n+        Set<String> voltageLevelIds = new LinkedHashSet<>();\n+        traverse(vl, 0, maxDepth, voltageLevelIds);\n+        delegate = new IdentifierNetworkPredicate(voltageLevelIds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "015782610ad037105c577ac3588f2a26590b6cfe"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDczNDYzMw==", "bodyText": "Ok done", "url": "https://github.com/powsybl/powsybl-core/pull/1261#discussion_r404734633", "createdAt": "2020-04-07T11:25:20Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-reducer/src/main/java/com/powsybl/iidm/reducer/SubNetworkPredicate.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.reducer;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.iidm.network.*;\n+\n+import java.util.LinkedHashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * A network reducer predicate that allow reduction based on a center voltage level and all other voltage level neighbors\n+ * within a specified depth.\n+ *\n+ * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ */\n+public class SubNetworkPredicate implements NetworkPredicate {\n+\n+    private String voltageLevelId;\n+\n+    private int maxDepth;\n+\n+    private IdentifierNetworkPredicate delegate;\n+\n+    public SubNetworkPredicate(String voltageLevelId, int maxDepth) {\n+        this.voltageLevelId = Objects.requireNonNull(voltageLevelId);\n+        if (maxDepth < 0) {\n+            throw new IllegalArgumentException(\"Invalid max depth value: \" + maxDepth);\n+        }\n+        this.maxDepth = maxDepth;\n+    }\n+\n+    private void init(Network network) {\n+        if (delegate != null) {\n+            return;\n+        }\n+        VoltageLevel vl = network.getVoltageLevel(voltageLevelId);\n+        if (vl == null) {\n+            throw new PowsyblException(\"Voltage level '\" + voltageLevelId + \"' not found\");\n+        }\n+        Set<String> voltageLevelIds = new LinkedHashSet<>();\n+        traverse(vl, 0, maxDepth, voltageLevelIds);\n+        delegate = new IdentifierNetworkPredicate(voltageLevelIds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzOTE3OA=="}, "originalCommit": {"oid": "015782610ad037105c577ac3588f2a26590b6cfe"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDkxODYyOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-reducer/src/main/java/com/powsybl/iidm/reducer/SubNetworkPredicate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo0NDowMFrOGB5Pdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMToyNToyN1rOGB_C6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzOTYwNw==", "bodyText": "Make this method private", "url": "https://github.com/powsybl/powsybl-core/pull/1261#discussion_r404639607", "createdAt": "2020-04-07T08:44:00Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-reducer/src/main/java/com/powsybl/iidm/reducer/SubNetworkPredicate.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.reducer;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.iidm.network.*;\n+\n+import java.util.LinkedHashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * A network reducer predicate that allow reduction based on a center voltage level and all other voltage level neighbors\n+ * within a specified depth.\n+ *\n+ * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ */\n+public class SubNetworkPredicate implements NetworkPredicate {\n+\n+    private String voltageLevelId;\n+\n+    private int maxDepth;\n+\n+    private IdentifierNetworkPredicate delegate;\n+\n+    public SubNetworkPredicate(String voltageLevelId, int maxDepth) {\n+        this.voltageLevelId = Objects.requireNonNull(voltageLevelId);\n+        if (maxDepth < 0) {\n+            throw new IllegalArgumentException(\"Invalid max depth value: \" + maxDepth);\n+        }\n+        this.maxDepth = maxDepth;\n+    }\n+\n+    private void init(Network network) {\n+        if (delegate != null) {\n+            return;\n+        }\n+        VoltageLevel vl = network.getVoltageLevel(voltageLevelId);\n+        if (vl == null) {\n+            throw new PowsyblException(\"Voltage level '\" + voltageLevelId + \"' not found\");\n+        }\n+        Set<String> voltageLevelIds = new LinkedHashSet<>();\n+        traverse(vl, 0, maxDepth, voltageLevelIds);\n+        delegate = new IdentifierNetworkPredicate(voltageLevelIds);\n+    }\n+\n+    private static void traverse(VoltageLevel vl, int depth, int maxDepth, Set<String> voltageLevelIds) {\n+        if (voltageLevelIds.contains(vl.getId()) || depth > maxDepth) {\n+            return;\n+        }\n+\n+        voltageLevelIds.add(vl.getId());\n+\n+        vl.visitEquipments(new DefaultTopologyVisitor() {\n+            public void visitBranch(Branch branch, Branch.Side side) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "015782610ad037105c577ac3588f2a26590b6cfe"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDczNDY5OQ==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1261#discussion_r404734699", "createdAt": "2020-04-07T11:25:27Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-reducer/src/main/java/com/powsybl/iidm/reducer/SubNetworkPredicate.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.reducer;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.iidm.network.*;\n+\n+import java.util.LinkedHashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * A network reducer predicate that allow reduction based on a center voltage level and all other voltage level neighbors\n+ * within a specified depth.\n+ *\n+ * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ */\n+public class SubNetworkPredicate implements NetworkPredicate {\n+\n+    private String voltageLevelId;\n+\n+    private int maxDepth;\n+\n+    private IdentifierNetworkPredicate delegate;\n+\n+    public SubNetworkPredicate(String voltageLevelId, int maxDepth) {\n+        this.voltageLevelId = Objects.requireNonNull(voltageLevelId);\n+        if (maxDepth < 0) {\n+            throw new IllegalArgumentException(\"Invalid max depth value: \" + maxDepth);\n+        }\n+        this.maxDepth = maxDepth;\n+    }\n+\n+    private void init(Network network) {\n+        if (delegate != null) {\n+            return;\n+        }\n+        VoltageLevel vl = network.getVoltageLevel(voltageLevelId);\n+        if (vl == null) {\n+            throw new PowsyblException(\"Voltage level '\" + voltageLevelId + \"' not found\");\n+        }\n+        Set<String> voltageLevelIds = new LinkedHashSet<>();\n+        traverse(vl, 0, maxDepth, voltageLevelIds);\n+        delegate = new IdentifierNetworkPredicate(voltageLevelIds);\n+    }\n+\n+    private static void traverse(VoltageLevel vl, int depth, int maxDepth, Set<String> voltageLevelIds) {\n+        if (voltageLevelIds.contains(vl.getId()) || depth > maxDepth) {\n+            return;\n+        }\n+\n+        voltageLevelIds.add(vl.getId());\n+\n+        vl.visitEquipments(new DefaultTopologyVisitor() {\n+            public void visitBranch(Branch branch, Branch.Side side) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzOTYwNw=="}, "originalCommit": {"oid": "015782610ad037105c577ac3588f2a26590b6cfe"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDkyMDA2OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-reducer/src/main/java/com/powsybl/iidm/reducer/SubNetworkPredicate.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo0NDoyMVrOGB5QWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzozMzo0N1rOGCih7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzOTgzNQ==", "bodyText": "You should visit HVDC lines also?", "url": "https://github.com/powsybl/powsybl-core/pull/1261#discussion_r404639835", "createdAt": "2020-04-07T08:44:21Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-reducer/src/main/java/com/powsybl/iidm/reducer/SubNetworkPredicate.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.reducer;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.iidm.network.*;\n+\n+import java.util.LinkedHashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * A network reducer predicate that allow reduction based on a center voltage level and all other voltage level neighbors\n+ * within a specified depth.\n+ *\n+ * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ */\n+public class SubNetworkPredicate implements NetworkPredicate {\n+\n+    private String voltageLevelId;\n+\n+    private int maxDepth;\n+\n+    private IdentifierNetworkPredicate delegate;\n+\n+    public SubNetworkPredicate(String voltageLevelId, int maxDepth) {\n+        this.voltageLevelId = Objects.requireNonNull(voltageLevelId);\n+        if (maxDepth < 0) {\n+            throw new IllegalArgumentException(\"Invalid max depth value: \" + maxDepth);\n+        }\n+        this.maxDepth = maxDepth;\n+    }\n+\n+    private void init(Network network) {\n+        if (delegate != null) {\n+            return;\n+        }\n+        VoltageLevel vl = network.getVoltageLevel(voltageLevelId);\n+        if (vl == null) {\n+            throw new PowsyblException(\"Voltage level '\" + voltageLevelId + \"' not found\");\n+        }\n+        Set<String> voltageLevelIds = new LinkedHashSet<>();\n+        traverse(vl, 0, maxDepth, voltageLevelIds);\n+        delegate = new IdentifierNetworkPredicate(voltageLevelIds);\n+    }\n+\n+    private static void traverse(VoltageLevel vl, int depth, int maxDepth, Set<String> voltageLevelIds) {\n+        if (voltageLevelIds.contains(vl.getId()) || depth > maxDepth) {\n+            return;\n+        }\n+\n+        voltageLevelIds.add(vl.getId());\n+\n+        vl.visitEquipments(new DefaultTopologyVisitor() {\n+            public void visitBranch(Branch branch, Branch.Side side) {\n+                switch (side) {\n+                    case ONE:\n+                        traverse(branch.getTerminal2().getVoltageLevel(), depth + 1, maxDepth, voltageLevelIds);\n+                        break;\n+                    case TWO:\n+                        traverse(branch.getTerminal1().getVoltageLevel(), depth + 1, maxDepth, voltageLevelIds);\n+                        break;\n+                    default:\n+                        throw new IllegalStateException(\"Unknown side: \" + side);\n+                }\n+            }\n+\n+            @Override\n+            public void visitLine(Line line, Line.Side side) {\n+                visitBranch(line, side);\n+            }\n+\n+            @Override\n+            public void visitTwoWindingsTransformer(TwoWindingsTransformer transformer, TwoWindingsTransformer.Side side) {\n+                visitBranch(transformer, side);\n+            }\n+\n+            @Override\n+            public void visitThreeWindingsTransformer(ThreeWindingsTransformer transformer, ThreeWindingsTransformer.Side side) {\n+                switch (side) {\n+                    case ONE:\n+                        traverse(transformer.getLeg2().getTerminal().getVoltageLevel(), depth + 1, maxDepth, voltageLevelIds);\n+                        traverse(transformer.getLeg3().getTerminal().getVoltageLevel(), depth + 1, maxDepth, voltageLevelIds);\n+                        break;\n+                    case TWO:\n+                        traverse(transformer.getLeg1().getTerminal().getVoltageLevel(), depth + 1, maxDepth, voltageLevelIds);\n+                        traverse(transformer.getLeg3().getTerminal().getVoltageLevel(), depth + 1, maxDepth, voltageLevelIds);\n+                        break;\n+                    case THREE:\n+                        traverse(transformer.getLeg1().getTerminal().getVoltageLevel(), depth + 1, maxDepth, voltageLevelIds);\n+                        traverse(transformer.getLeg2().getTerminal().getVoltageLevel(), depth + 1, maxDepth, voltageLevelIds);\n+                        break;\n+                    default:\n+                        throw new IllegalStateException(\"Unknown side: \" + side);\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "015782610ad037105c577ac3588f2a26590b6cfe"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDczNjQ0MQ==", "bodyText": "Good question. In my own use case, I didn't want to traverse HVDC lines. I can imagine in some other use case, it would make sense.\nWhat should I do?\n\nlet as it is and if somebody wants one day, we will consider to add it.\noptionally add it right now", "url": "https://github.com/powsybl/powsybl-core/pull/1261#discussion_r404736441", "createdAt": "2020-04-07T11:28:32Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-reducer/src/main/java/com/powsybl/iidm/reducer/SubNetworkPredicate.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.reducer;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.iidm.network.*;\n+\n+import java.util.LinkedHashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * A network reducer predicate that allow reduction based on a center voltage level and all other voltage level neighbors\n+ * within a specified depth.\n+ *\n+ * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ */\n+public class SubNetworkPredicate implements NetworkPredicate {\n+\n+    private String voltageLevelId;\n+\n+    private int maxDepth;\n+\n+    private IdentifierNetworkPredicate delegate;\n+\n+    public SubNetworkPredicate(String voltageLevelId, int maxDepth) {\n+        this.voltageLevelId = Objects.requireNonNull(voltageLevelId);\n+        if (maxDepth < 0) {\n+            throw new IllegalArgumentException(\"Invalid max depth value: \" + maxDepth);\n+        }\n+        this.maxDepth = maxDepth;\n+    }\n+\n+    private void init(Network network) {\n+        if (delegate != null) {\n+            return;\n+        }\n+        VoltageLevel vl = network.getVoltageLevel(voltageLevelId);\n+        if (vl == null) {\n+            throw new PowsyblException(\"Voltage level '\" + voltageLevelId + \"' not found\");\n+        }\n+        Set<String> voltageLevelIds = new LinkedHashSet<>();\n+        traverse(vl, 0, maxDepth, voltageLevelIds);\n+        delegate = new IdentifierNetworkPredicate(voltageLevelIds);\n+    }\n+\n+    private static void traverse(VoltageLevel vl, int depth, int maxDepth, Set<String> voltageLevelIds) {\n+        if (voltageLevelIds.contains(vl.getId()) || depth > maxDepth) {\n+            return;\n+        }\n+\n+        voltageLevelIds.add(vl.getId());\n+\n+        vl.visitEquipments(new DefaultTopologyVisitor() {\n+            public void visitBranch(Branch branch, Branch.Side side) {\n+                switch (side) {\n+                    case ONE:\n+                        traverse(branch.getTerminal2().getVoltageLevel(), depth + 1, maxDepth, voltageLevelIds);\n+                        break;\n+                    case TWO:\n+                        traverse(branch.getTerminal1().getVoltageLevel(), depth + 1, maxDepth, voltageLevelIds);\n+                        break;\n+                    default:\n+                        throw new IllegalStateException(\"Unknown side: \" + side);\n+                }\n+            }\n+\n+            @Override\n+            public void visitLine(Line line, Line.Side side) {\n+                visitBranch(line, side);\n+            }\n+\n+            @Override\n+            public void visitTwoWindingsTransformer(TwoWindingsTransformer transformer, TwoWindingsTransformer.Side side) {\n+                visitBranch(transformer, side);\n+            }\n+\n+            @Override\n+            public void visitThreeWindingsTransformer(ThreeWindingsTransformer transformer, ThreeWindingsTransformer.Side side) {\n+                switch (side) {\n+                    case ONE:\n+                        traverse(transformer.getLeg2().getTerminal().getVoltageLevel(), depth + 1, maxDepth, voltageLevelIds);\n+                        traverse(transformer.getLeg3().getTerminal().getVoltageLevel(), depth + 1, maxDepth, voltageLevelIds);\n+                        break;\n+                    case TWO:\n+                        traverse(transformer.getLeg1().getTerminal().getVoltageLevel(), depth + 1, maxDepth, voltageLevelIds);\n+                        traverse(transformer.getLeg3().getTerminal().getVoltageLevel(), depth + 1, maxDepth, voltageLevelIds);\n+                        break;\n+                    case THREE:\n+                        traverse(transformer.getLeg1().getTerminal().getVoltageLevel(), depth + 1, maxDepth, voltageLevelIds);\n+                        traverse(transformer.getLeg2().getTerminal().getVoltageLevel(), depth + 1, maxDepth, voltageLevelIds);\n+                        break;\n+                    default:\n+                        throw new IllegalStateException(\"Unknown side: \" + side);\n+                }\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzOTgzNQ=="}, "originalCommit": {"oid": "015782610ad037105c577ac3588f2a26590b6cfe"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxNjA3Ng==", "bodyText": "It makes sense to do it now. Do we consider it's an option enabled by a boolean or do we consider it always traverse the HVDC lines\nDepending on what we chose to do, we can merge it, or do it later (an issue has to be filled)", "url": "https://github.com/powsybl/powsybl-core/pull/1261#discussion_r405316076", "createdAt": "2020-04-08T07:33:47Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-reducer/src/main/java/com/powsybl/iidm/reducer/SubNetworkPredicate.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.reducer;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.iidm.network.*;\n+\n+import java.util.LinkedHashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * A network reducer predicate that allow reduction based on a center voltage level and all other voltage level neighbors\n+ * within a specified depth.\n+ *\n+ * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ */\n+public class SubNetworkPredicate implements NetworkPredicate {\n+\n+    private String voltageLevelId;\n+\n+    private int maxDepth;\n+\n+    private IdentifierNetworkPredicate delegate;\n+\n+    public SubNetworkPredicate(String voltageLevelId, int maxDepth) {\n+        this.voltageLevelId = Objects.requireNonNull(voltageLevelId);\n+        if (maxDepth < 0) {\n+            throw new IllegalArgumentException(\"Invalid max depth value: \" + maxDepth);\n+        }\n+        this.maxDepth = maxDepth;\n+    }\n+\n+    private void init(Network network) {\n+        if (delegate != null) {\n+            return;\n+        }\n+        VoltageLevel vl = network.getVoltageLevel(voltageLevelId);\n+        if (vl == null) {\n+            throw new PowsyblException(\"Voltage level '\" + voltageLevelId + \"' not found\");\n+        }\n+        Set<String> voltageLevelIds = new LinkedHashSet<>();\n+        traverse(vl, 0, maxDepth, voltageLevelIds);\n+        delegate = new IdentifierNetworkPredicate(voltageLevelIds);\n+    }\n+\n+    private static void traverse(VoltageLevel vl, int depth, int maxDepth, Set<String> voltageLevelIds) {\n+        if (voltageLevelIds.contains(vl.getId()) || depth > maxDepth) {\n+            return;\n+        }\n+\n+        voltageLevelIds.add(vl.getId());\n+\n+        vl.visitEquipments(new DefaultTopologyVisitor() {\n+            public void visitBranch(Branch branch, Branch.Side side) {\n+                switch (side) {\n+                    case ONE:\n+                        traverse(branch.getTerminal2().getVoltageLevel(), depth + 1, maxDepth, voltageLevelIds);\n+                        break;\n+                    case TWO:\n+                        traverse(branch.getTerminal1().getVoltageLevel(), depth + 1, maxDepth, voltageLevelIds);\n+                        break;\n+                    default:\n+                        throw new IllegalStateException(\"Unknown side: \" + side);\n+                }\n+            }\n+\n+            @Override\n+            public void visitLine(Line line, Line.Side side) {\n+                visitBranch(line, side);\n+            }\n+\n+            @Override\n+            public void visitTwoWindingsTransformer(TwoWindingsTransformer transformer, TwoWindingsTransformer.Side side) {\n+                visitBranch(transformer, side);\n+            }\n+\n+            @Override\n+            public void visitThreeWindingsTransformer(ThreeWindingsTransformer transformer, ThreeWindingsTransformer.Side side) {\n+                switch (side) {\n+                    case ONE:\n+                        traverse(transformer.getLeg2().getTerminal().getVoltageLevel(), depth + 1, maxDepth, voltageLevelIds);\n+                        traverse(transformer.getLeg3().getTerminal().getVoltageLevel(), depth + 1, maxDepth, voltageLevelIds);\n+                        break;\n+                    case TWO:\n+                        traverse(transformer.getLeg1().getTerminal().getVoltageLevel(), depth + 1, maxDepth, voltageLevelIds);\n+                        traverse(transformer.getLeg3().getTerminal().getVoltageLevel(), depth + 1, maxDepth, voltageLevelIds);\n+                        break;\n+                    case THREE:\n+                        traverse(transformer.getLeg1().getTerminal().getVoltageLevel(), depth + 1, maxDepth, voltageLevelIds);\n+                        traverse(transformer.getLeg2().getTerminal().getVoltageLevel(), depth + 1, maxDepth, voltageLevelIds);\n+                        break;\n+                    default:\n+                        throw new IllegalStateException(\"Unknown side: \" + side);\n+                }\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzOTgzNQ=="}, "originalCommit": {"oid": "015782610ad037105c577ac3588f2a26590b6cfe"}, "originalPosition": 100}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 77, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}