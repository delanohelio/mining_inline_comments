{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzOTE3ODU0", "number": 1377, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODoyMzozN1rOELlo7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODoyMzozN1rOELlo7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTg2NDc2OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/LoadDetailXmlSerializer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODoyMzozN1rOGtNjAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODoyOToyMVrOGtNwBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA2MTA1Nw==", "bodyText": "Maybe we should invert the order to read the new attribute in priority.", "url": "https://github.com/powsybl/powsybl-core/pull/1377#discussion_r450061057", "createdAt": "2020-07-06T08:23:37Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/LoadDetailXmlSerializer.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.extensions;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.extensions.AbstractExtensionXmlSerializer;\n+import com.powsybl.commons.extensions.ExtensionXmlSerializer;\n+import com.powsybl.commons.xml.XmlReaderContext;\n+import com.powsybl.commons.xml.XmlUtil;\n+import com.powsybl.commons.xml.XmlWriterContext;\n+import com.powsybl.iidm.network.Load;\n+\n+import javax.xml.stream.XMLStreamException;\n+\n+/**\n+ * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ */\n+@AutoService(ExtensionXmlSerializer.class)\n+public class LoadDetailXmlSerializer extends AbstractExtensionXmlSerializer<Load, LoadDetail> {\n+\n+    public LoadDetailXmlSerializer() {\n+        super(\"detail\", \"network\", LoadDetail.class,\n+                false, \"loadDetail.xsd\",\n+                \"http://www.itesla_project.eu/schema/iidm/ext/load_detail/1_0\",\n+                \"ld\");\n+    }\n+\n+    @Override\n+    public void write(LoadDetail detail, XmlWriterContext context) throws XMLStreamException {\n+        XmlUtil.writeFloat(\"fixedActivePower\", detail.getFixedActivePower(), context.getExtensionsWriter());\n+        XmlUtil.writeFloat(\"fixedReactivePower\", detail.getFixedReactivePower(), context.getExtensionsWriter());\n+        XmlUtil.writeFloat(\"variableActivePower\", detail.getVariableActivePower(), context.getExtensionsWriter());\n+        XmlUtil.writeFloat(\"variableReactivePower\", detail.getVariableReactivePower(), context.getExtensionsWriter());\n+    }\n+\n+    @Override\n+    public LoadDetail read(Load load, XmlReaderContext context) throws XMLStreamException {\n+        float fixedActivePower = XmlUtil.readOptionalFloatAttribute(context.getReader(), \"subLoad1ActivePower\");\n+        if (Float.isNaN(fixedActivePower)) {\n+            fixedActivePower = XmlUtil.readFloatAttribute(context.getReader(), \"fixedActivePower\");\n+        }\n+        float fixedReactivePower = XmlUtil.readOptionalFloatAttribute(context.getReader(), \"subLoad1ReactivePower\");\n+        if (Float.isNaN(fixedReactivePower)) {\n+            fixedReactivePower = XmlUtil.readFloatAttribute(context.getReader(), \"fixedReactivePower\");\n+        }\n+        float variableActivePower = XmlUtil.readOptionalFloatAttribute(context.getReader(), \"subLoad2ActivePower\");\n+        if (Float.isNaN(variableActivePower)) {\n+            variableActivePower = XmlUtil.readFloatAttribute(context.getReader(), \"variableActivePower\");\n+        }\n+        float variableReactivePower = XmlUtil.readOptionalFloatAttribute(context.getReader(), \"subLoad2ReactivePower\");\n+        if (Float.isNaN(variableReactivePower)) {\n+            variableReactivePower = XmlUtil.readFloatAttribute(context.getReader(), \"variableReactivePower\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe6087df6a5943afb65498966590f5856f690ae"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA2NDM5MQ==", "bodyText": "I agree. Changing that and then I will merge it.", "url": "https://github.com/powsybl/powsybl-core/pull/1377#discussion_r450064391", "createdAt": "2020-07-06T08:29:21Z", "author": {"login": "miovd"}, "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/LoadDetailXmlSerializer.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.extensions;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.extensions.AbstractExtensionXmlSerializer;\n+import com.powsybl.commons.extensions.ExtensionXmlSerializer;\n+import com.powsybl.commons.xml.XmlReaderContext;\n+import com.powsybl.commons.xml.XmlUtil;\n+import com.powsybl.commons.xml.XmlWriterContext;\n+import com.powsybl.iidm.network.Load;\n+\n+import javax.xml.stream.XMLStreamException;\n+\n+/**\n+ * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ */\n+@AutoService(ExtensionXmlSerializer.class)\n+public class LoadDetailXmlSerializer extends AbstractExtensionXmlSerializer<Load, LoadDetail> {\n+\n+    public LoadDetailXmlSerializer() {\n+        super(\"detail\", \"network\", LoadDetail.class,\n+                false, \"loadDetail.xsd\",\n+                \"http://www.itesla_project.eu/schema/iidm/ext/load_detail/1_0\",\n+                \"ld\");\n+    }\n+\n+    @Override\n+    public void write(LoadDetail detail, XmlWriterContext context) throws XMLStreamException {\n+        XmlUtil.writeFloat(\"fixedActivePower\", detail.getFixedActivePower(), context.getExtensionsWriter());\n+        XmlUtil.writeFloat(\"fixedReactivePower\", detail.getFixedReactivePower(), context.getExtensionsWriter());\n+        XmlUtil.writeFloat(\"variableActivePower\", detail.getVariableActivePower(), context.getExtensionsWriter());\n+        XmlUtil.writeFloat(\"variableReactivePower\", detail.getVariableReactivePower(), context.getExtensionsWriter());\n+    }\n+\n+    @Override\n+    public LoadDetail read(Load load, XmlReaderContext context) throws XMLStreamException {\n+        float fixedActivePower = XmlUtil.readOptionalFloatAttribute(context.getReader(), \"subLoad1ActivePower\");\n+        if (Float.isNaN(fixedActivePower)) {\n+            fixedActivePower = XmlUtil.readFloatAttribute(context.getReader(), \"fixedActivePower\");\n+        }\n+        float fixedReactivePower = XmlUtil.readOptionalFloatAttribute(context.getReader(), \"subLoad1ReactivePower\");\n+        if (Float.isNaN(fixedReactivePower)) {\n+            fixedReactivePower = XmlUtil.readFloatAttribute(context.getReader(), \"fixedReactivePower\");\n+        }\n+        float variableActivePower = XmlUtil.readOptionalFloatAttribute(context.getReader(), \"subLoad2ActivePower\");\n+        if (Float.isNaN(variableActivePower)) {\n+            variableActivePower = XmlUtil.readFloatAttribute(context.getReader(), \"variableActivePower\");\n+        }\n+        float variableReactivePower = XmlUtil.readOptionalFloatAttribute(context.getReader(), \"subLoad2ReactivePower\");\n+        if (Float.isNaN(variableReactivePower)) {\n+            variableReactivePower = XmlUtil.readFloatAttribute(context.getReader(), \"variableReactivePower\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA2MTA1Nw=="}, "originalCommit": {"oid": "5fe6087df6a5943afb65498966590f5856f690ae"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4957, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}