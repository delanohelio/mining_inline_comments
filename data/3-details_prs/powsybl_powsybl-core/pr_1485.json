{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyODU2Mjg0", "number": 1485, "title": "Prepare for integration: CGMES SSH export using only Network data", "bodyText": "Please check if the PR fulfills these requirements (please use '[x]' to check the checkboxes, or submit the PR and then click the checkboxes)\n\n The commit message follows our guidelines\n Tests for the changes have been added (for bug fixes / features)\n Docs have been added / updated (for bug fixes / features)\n\nDoes this PR already have an issue describing the problem ? If so, link to this issue using '#XXX' and skip the rest\nNo\nWhat kind of change does this PR introduce? (Bug fix, feature, docs update, ...)\nFeature\nWhat is the current behavior? (You can also link to an open issue here)\nCurrent CGMES export requires the CGMES model in memory (access to the original triplestore).\nWhat is the new behavior (if this is a feature change)?\nCGMES export of the SSH (Steady State Hypothesis) can be made only using IIDM Network.\nDoes this PR introduce a breaking change or deprecate an API? If yes, check the following:\nNo", "createdAt": "2020-09-25T06:08:53Z", "url": "https://github.com/powsybl/powsybl-core/pull/1485", "merged": true, "mergeCommit": {"oid": "81293bf755dab72a35996b66e4fe50faf0b75d75"}, "closed": true, "closedAt": "2020-12-11T10:23:45Z", "author": {"login": "zamarrenolm"}, "timelineItems": {"totalCount": 82, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLTvWXgH2gAyNDkyODU2Mjg0OjNjNjNhYTRiZDQyMDBjMDI1M2VjZjUwZjdkNTI3Yzg5N2MzNTMxMTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdlFAY5gH2gAyNDkyODU2Mjg0OjIxZTNkNTQ3MjkzN2ZjZmY5M2Q5NTgzN2U1YjA2ZTU4N2EzMWQ4Njk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3c63aa4bd4200c0253ecf50f7d527c897c353116", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/3c63aa4bd4200c0253ecf50f7d527c897c353116", "committedDate": "2020-09-22T08:30:19Z", "message": "Implement CgmesExportContext\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd88f62e3a3fa1ac0622f57704bf8c6f6dc5d047", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/fd88f62e3a3fa1ac0622f57704bf8c6f6dc5d047", "committedDate": "2020-09-22T09:06:11Z", "message": "Implement StateVariablesExport\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6154eeb1de7c1bf69d72dcca938b811b100f44f5", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/6154eeb1de7c1bf69d72dcca938b811b100f44f5", "committedDate": "2020-09-22T11:24:45Z", "message": "Rename dangling line's aliases in order to know which terminal is the boundary terminal\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37ae2603545d39ee25ab4415ead5e6bc9e8efc08", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/37ae2603545d39ee25ab4415ead5e6bc9e8efc08", "committedDate": "2020-09-22T11:41:11Z", "message": "Add SV injections\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec0f554b399fa04bf1fda46ac5a0aeecc66afe6e", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/ec0f554b399fa04bf1fda46ac5a0aeecc66afe6e", "committedDate": "2020-09-22T11:47:49Z", "message": "SvInjection are set as fictitious\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1952939d9687e087dc699fac1dddb95685256ced", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/1952939d9687e087dc699fac1dddb95685256ced", "committedDate": "2020-09-22T12:12:07Z", "message": "Refactor complexity of writeTopologicalIslands\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "364dfd34f7ba9075d4e2e94ca41cddf67abbb395", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/364dfd34f7ba9075d4e2e94ca41cddf67abbb395", "committedDate": "2020-09-22T13:59:59Z", "message": "Add test + small correction\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94dbdc2341c2a205a1de8a41411eb495adbe689c", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/94dbdc2341c2a205a1de8a41411eb495adbe689c", "committedDate": "2020-09-22T14:47:46Z", "message": "Add test\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2127dc461711b0bda6ad04f2529ac4f6acf2cb0c", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/2127dc461711b0bda6ad04f2529ac4f6acf2cb0c", "committedDate": "2020-09-22T14:50:27Z", "message": "Don't use deprecated method\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd36bb4cee107edd7cfe1e61897bbf4fb2e1e12c", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/bd36bb4cee107edd7cfe1e61897bbf4fb2e1e12c", "committedDate": "2020-09-23T07:48:25Z", "message": "Add test for CgmesExportContext\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62c4fa768c1583d6665fdf892673559fc02661b1", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/62c4fa768c1583d6665fdf892673559fc02661b1", "committedDate": "2020-09-24T10:34:21Z", "message": "reorganize constants and helper methods to prepare for reuse by next Steady State Hypothesis export\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47381979f5aafe3867eff5fc28c34ba5dfdfdd88", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/47381979f5aafe3867eff5fc28c34ba5dfdfdd88", "committedDate": "2020-09-24T10:51:55Z", "message": "use constant for CGMES prefix in alias\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc865c391d17e184c3ec0672d74723b513e68662", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/fc865c391d17e184c3ec0672d74723b513e68662", "committedDate": "2020-09-24T11:01:23Z", "message": "fix SV export for dangling lines\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43545252d73964db171de5a1969f2e9519b02b2f", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/43545252d73964db171de5a1969f2e9519b02b2f", "committedDate": "2020-09-24T19:18:52Z", "message": "prepare SSH export for integration\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82bc7e5f010e034fa4909dd35b60c1b9744dc5a0", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/82bc7e5f010e034fa4909dd35b60c1b9744dc5a0", "committedDate": "2020-09-25T06:27:06Z", "message": "annotate missing object in export (static var compensator)\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dc8fa716de35bc36e48883b924883c4c4a83d12", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/2dc8fa716de35bc36e48883b924883c4c4a83d12", "committedDate": "2020-09-28T17:46:29Z", "message": "Merge branch 'master' into integration_cgmes_new_ssh_export\n\nSigned-off-by: Luma <zamarrenolm@aia.es>\n\n# Conflicts:\n#\tcgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/CgmesExportContext.java\n#\tcgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesExport.java\n#\tcgmes/cgmes-conversion/src/test/java/com/powsybl/cgmes/conversion/test/update/CgmesExportContextTest.java\n#\tcgmes/cgmes-conversion/src/test/java/com/powsybl/cgmes/conversion/test/update/StateVariablesExportTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b038c7431f3881280ff578ee12fc088368de05e3", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/b038c7431f3881280ff578ee12fc088368de05e3", "committedDate": "2020-09-28T18:31:45Z", "message": "updates after merge with master\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97ea6925f4aea35a9753412b7e1cf5c04163ab25", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/97ea6925f4aea35a9753412b7e1cf5c04163ab25", "committedDate": "2020-09-29T10:28:01Z", "message": "regulating controls, control areas and metadata (duplicated metadata extensions, duplicated test code)\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e400e06ead586448da6d46df176249b74a435ccb", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/e400e06ead586448da6d46df176249b74a435ccb", "committedDate": "2020-09-29T11:18:17Z", "message": "remove intermediate inner class Property\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13563e28489a277d13928cd350fa9dc81f8f6182", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/13563e28489a277d13928cd350fa9dc81f8f6182", "committedDate": "2020-09-29T11:28:28Z", "message": "revert local test changes in abstract converter test\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25a6537d97933151d492d846b1c300c8476a95eb", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/25a6537d97933151d492d846b1c300c8476a95eb", "committedDate": "2020-09-29T11:29:05Z", "message": "fix imports\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "833589017b009fa876611bb4e31a7ac0d3d9591d", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/833589017b009fa876611bb4e31a7ac0d3d9591d", "committedDate": "2020-09-29T12:37:26Z", "message": "comment local tests\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10ae2109523359d8c02949c0e04271e1bee4b0de", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/10ae2109523359d8c02949c0e04271e1bee4b0de", "committedDate": "2020-09-29T14:52:57Z", "message": "export static var compensators (with test unit) and fix type name for nonlinear shunt compensators\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c2db2b89a5d048746a3274ef5d3359c8250683f", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/5c2db2b89a5d048746a3274ef5d3359c8250683f", "committedDate": "2020-09-30T06:31:43Z", "message": "export test package; common code for xml comparison\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0f30bf45a95eae80c0186e3ba75addcd365e21c", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/a0f30bf45a95eae80c0186e3ba75addcd365e21c", "committedDate": "2020-09-30T07:10:51Z", "message": "Merge branch 'master' into integration_cgmes_new_ssh_export"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5d62356cd7a80f856681331add2e43514fd013f", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/b5d62356cd7a80f856681331add2e43514fd013f", "committedDate": "2020-09-30T11:26:08Z", "message": "Merge branch 'master' into integration_cgmes_new_ssh_export"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "474484d3252b1836e0483376e89100e1f32c248f", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/474484d3252b1836e0483376e89100e1f32c248f", "committedDate": "2020-09-30T11:31:33Z", "message": "export package\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f315983a55846018b0b4a1357ff35d3b49f32c1", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/4f315983a55846018b0b4a1357ff35d3b49f32c1", "committedDate": "2020-09-30T15:01:52Z", "message": "all diff xml with numeric difference evaluator\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aab1d8888b86d30444c2fd4057a4ae008e743e50", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/aab1d8888b86d30444c2fd4057a4ae008e743e50", "committedDate": "2020-09-30T15:04:07Z", "message": "remove local testing\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f8f580efa21779ad86f0c8c1f0a92c6f2d03d1e", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/4f8f580efa21779ad86f0c8c1f0a92c6f2d03d1e", "committedDate": "2020-09-30T16:11:16Z", "message": "refactor code common to SV and SSH export tests\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f38c277b5e8cf17fdbcdb5c10635f07bdaaeced0", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/f38c277b5e8cf17fdbcdb5c10635f07bdaaeced0", "committedDate": "2020-09-30T16:27:26Z", "message": "remove fixme labels in comments\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09ce80a1de3a918cc5a8699c619612eb5c2b6474", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/09ce80a1de3a918cc5a8699c619612eb5c2b6474", "committedDate": "2020-09-30T16:46:29Z", "message": "fix xmlunit dependency explicit version redefinition\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3d79eeabdcab324f9dae814399832746e3e2e00", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/c3d79eeabdcab324f9dae814399832746e3e2e00", "committedDate": "2020-09-30T18:40:10Z", "message": "fixes in SSH export and tests after review of real-world test cases\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47974b48f6c7d10fea0b22cacfbe5af7d5862be1", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/47974b48f6c7d10fea0b22cacfbe5af7d5862be1", "committedDate": "2020-09-30T18:49:16Z", "message": "use numerical comparison\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4e3a891c42f23f1d36d066cac55369ce9b850de", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/d4e3a891c42f23f1d36d066cac55369ce9b850de", "committedDate": "2020-09-30T19:05:06Z", "message": "fix bug detected by sonar\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMTY5MzUw", "url": "https://github.com/powsybl/powsybl-core/pull/1485#pullrequestreview-501169350", "createdAt": "2020-10-02T14:09:53Z", "commit": {"oid": "d4e3a891c42f23f1d36d066cac55369ce9b850de"}, "state": "COMMENTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDowOTo1M1rOHbvH-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDo1MTowMVrOHbwpag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0NTY4OA==", "bodyText": "params is never null. Furthermore, you should use  ConversionParameters.readBooleanParameter here.", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498845688", "createdAt": "2020-10-02T14:09:53Z", "author": {"login": "MioRtia"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java", "diffHunk": "@@ -27,22 +38,50 @@\n \n     @Override\n     public void export(Network network, Properties params, DataSource ds) {\n-\n-        // Right now the network must contain the original CgmesModel\n-        // In the future it should be possible to export to CGMES\n-        // directly from an IIDM Network,\n-        // without the need for the original CgmesModel\n+        Objects.requireNonNull(network);\n         CgmesModelExtension ext = network.getExtension(CgmesModelExtension.class);\n-        if (ext == null) {\n-            throw new CgmesModelException(\"No extension for CGMES model found in Network\");\n+        if (params != null && Boolean.valueOf(params.getProperty(\"cgmes.export.usingOnlyNetwork\"))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e3a891c42f23f1d36d066cac55369ce9b850de"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0NjEwMA==", "bodyText": "Not sure why an exception is thrown? We could just ignore it.", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498846100", "createdAt": "2020-10-02T14:10:34Z", "author": {"login": "MioRtia"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java", "diffHunk": "@@ -27,22 +38,50 @@\n \n     @Override\n     public void export(Network network, Properties params, DataSource ds) {\n-\n-        // Right now the network must contain the original CgmesModel\n-        // In the future it should be possible to export to CGMES\n-        // directly from an IIDM Network,\n-        // without the need for the original CgmesModel\n+        Objects.requireNonNull(network);\n         CgmesModelExtension ext = network.getExtension(CgmesModelExtension.class);\n-        if (ext == null) {\n-            throw new CgmesModelException(\"No extension for CGMES model found in Network\");\n+        if (params != null && Boolean.valueOf(params.getProperty(\"cgmes.export.usingOnlyNetwork\"))) {\n+            if (ext != null) {\n+                CgmesModel cgmesSource = ext.getCgmesModel();\n+                if (cgmesSource != null) {\n+                    throw new CgmesModelException(\"CGMES model should not be available as Network extension\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e3a891c42f23f1d36d066cac55369ce9b850de"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0NzYyMA==", "bodyText": "Don't really think it should be a property? I think it should use a parameter cgmes.export.base-name (if not filled, use network.getNameOrId()). Ideally, it should also be a field in CgmesExportContext but I will probably do it in a later PR.", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498847620", "createdAt": "2020-10-02T14:13:08Z", "author": {"login": "MioRtia"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java", "diffHunk": "@@ -27,22 +38,50 @@\n \n     @Override\n     public void export(Network network, Properties params, DataSource ds) {\n-\n-        // Right now the network must contain the original CgmesModel\n-        // In the future it should be possible to export to CGMES\n-        // directly from an IIDM Network,\n-        // without the need for the original CgmesModel\n+        Objects.requireNonNull(network);\n         CgmesModelExtension ext = network.getExtension(CgmesModelExtension.class);\n-        if (ext == null) {\n-            throw new CgmesModelException(\"No extension for CGMES model found in Network\");\n+        if (params != null && Boolean.valueOf(params.getProperty(\"cgmes.export.usingOnlyNetwork\"))) {\n+            if (ext != null) {\n+                CgmesModel cgmesSource = ext.getCgmesModel();\n+                if (cgmesSource != null) {\n+                    throw new CgmesModelException(\"CGMES model should not be available as Network extension\");\n+                }\n+            }\n+            exportUsingOnlyNetwork(network, ds);\n+        } else {\n+            if (ext == null) {\n+                throw new CgmesModelException(\"CGMES model is required and not found in Network extension\");\n+            }\n+            exportUsingOriginalCgmesModel(network, ds, ext);\n         }\n-        CgmesUpdate cgmesUpdate = ext.getCgmesUpdate();\n+    }\n \n+    private void exportUsingOnlyNetwork(Network network, DataSource ds) {\n+        // At this point only SSH, SV can be exported when relying only in Network data\n+        // (minimum amount of CGMES references are expected as aliases/properties/extensions)\n+        String baseName = network.hasProperty(\"baseName\") ? network.getProperty(\"baseName\") : network.getNameOrId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e3a891c42f23f1d36d066cac55369ce9b850de"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1MDc3Mg==", "bodyText": "I don't really agree with throwing a PowsyblException in any case. You should do:\ncatch (IOException e) {\n   throw new UncheckedIOException(e);\n} catch (XMLStreamException e) {\n    throw new UncheckedXmlStreamException(e);\n}\nYou can write this only once at the end of the method (not twice)", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498850772", "createdAt": "2020-10-02T14:18:29Z", "author": {"login": "MioRtia"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java", "diffHunk": "@@ -27,22 +38,50 @@\n \n     @Override\n     public void export(Network network, Properties params, DataSource ds) {\n-\n-        // Right now the network must contain the original CgmesModel\n-        // In the future it should be possible to export to CGMES\n-        // directly from an IIDM Network,\n-        // without the need for the original CgmesModel\n+        Objects.requireNonNull(network);\n         CgmesModelExtension ext = network.getExtension(CgmesModelExtension.class);\n-        if (ext == null) {\n-            throw new CgmesModelException(\"No extension for CGMES model found in Network\");\n+        if (params != null && Boolean.valueOf(params.getProperty(\"cgmes.export.usingOnlyNetwork\"))) {\n+            if (ext != null) {\n+                CgmesModel cgmesSource = ext.getCgmesModel();\n+                if (cgmesSource != null) {\n+                    throw new CgmesModelException(\"CGMES model should not be available as Network extension\");\n+                }\n+            }\n+            exportUsingOnlyNetwork(network, ds);\n+        } else {\n+            if (ext == null) {\n+                throw new CgmesModelException(\"CGMES model is required and not found in Network extension\");\n+            }\n+            exportUsingOriginalCgmesModel(network, ds, ext);\n         }\n-        CgmesUpdate cgmesUpdate = ext.getCgmesUpdate();\n+    }\n \n+    private void exportUsingOnlyNetwork(Network network, DataSource ds) {\n+        // At this point only SSH, SV can be exported when relying only in Network data\n+        // (minimum amount of CGMES references are expected as aliases/properties/extensions)\n+        String baseName = network.hasProperty(\"baseName\") ? network.getProperty(\"baseName\") : network.getNameOrId();\n+        String filenameSv = baseName + \"_SV.xml\";\n+        String filenameSsh = baseName + \"_SSH.xml\";\n+        CgmesExportContext context = new CgmesExportContext(network);\n+        try (OutputStream os = ds.newOutputStream(filenameSv, false)) {\n+            XMLStreamWriter writer = XmlUtil.initializeWriter(true, \"    \", os);\n+            StateVariablesExport.write(network, writer, context);\n+        } catch (IOException | XMLStreamException x) {\n+            throw new PowsyblException(\"Exporting to CGMES using only Network\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e3a891c42f23f1d36d066cac55369ce9b850de"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1MjE2OA==", "bodyText": "To confirm, but maybe it might be a good idea to use the extension in powsybl-balance-adjustements . I will look into it.", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498852168", "createdAt": "2020-10-02T14:20:53Z", "author": {"login": "MioRtia"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Conversion.java", "diffHunk": "@@ -306,6 +311,34 @@ private void addCgmesSvMetadata(Network network) {\n         }\n     }\n \n+    private void addCgmesSshMetadata(Network network) {\n+        PropertyBags sshDescription = cgmes.fullModel(CgmesSubset.STEADY_STATE_HYPOTHESIS.getProfile());\n+        if (sshDescription != null && !sshDescription.isEmpty()) {\n+            CgmesSshMetadataAdder adder = network.newExtension(CgmesSshMetadataAdder.class)\n+                    .setDescription(sshDescription.get(0).getId(\"description\"))\n+                    .setSshVersion(sshDescription.get(0).asInt(\"version\"))\n+                    .setModelingAuthoritySet(sshDescription.get(0).getId(\"modelingAuthoritySet\"));\n+            sshDescription.pluckLocals(\"DependentOn\").forEach(adder::addDependency);\n+            adder.add();\n+        }\n+    }\n+\n+    private void addCgmesSshControlAreas(Network network) {\n+        PropertyBags sshControlAreas = cgmes.controlAreas();\n+        if (sshControlAreas != null && !sshControlAreas.isEmpty()) {\n+            CgmesSshControlAreasAdder adder = network.newExtension(CgmesSshControlAreasAdder.class);\n+\n+            sshControlAreas.forEach(sshControlArea -> {\n+                String id = sshControlArea.getId(\"ControlArea\");\n+                double netInterchange = sshControlArea.asDouble(\"netInterchange\");\n+                double pTolerance = sshControlArea.asDouble(\"pTolerance\");\n+                ControlArea controlArea = new ControlArea(id, netInterchange, pTolerance);\n+                adder.addControlArea(controlArea);\n+            });\n+            adder.add();\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e3a891c42f23f1d36d066cac55369ce9b850de"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1MjkyMA==", "bodyText": "Is it useful? If the RegulatingControl only regulates generators, we can put the targetDeadband as 0.", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498852920", "createdAt": "2020-10-02T14:22:04Z", "author": {"login": "MioRtia"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForGenerators.java", "diffHunk": "@@ -117,6 +117,9 @@ private boolean setRegulatingControlVoltage(String controlId,\n                     .add();\n         }\n \n+        gen.setProperty(\"RegulatingControl\", controlId);\n+        gen.setProperty(\"targetDeadBand\", String.valueOf(control.getTargetDeadBand()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e3a891c42f23f1d36d066cac55369ce9b850de"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1NDU1OA==", "bodyText": "Just for me, the modifications in this class regards the updating of the original SSH export? If yes, it may be easier to review in another PR...", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498854558", "createdAt": "2020-10-02T14:24:53Z", "author": {"login": "MioRtia"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMapping.java", "diffHunk": "@@ -58,7 +58,7 @@ public RegulatingControlMappingForStaticVarCompensators forStaticVarCompensators\n         return regulatingControlMappingForStaticVarCompensators;\n     }\n \n-    static class RegulatingControl {\n+    public static class RegulatingControl {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e3a891c42f23f1d36d066cac55369ce9b850de"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1NzE1OQ==", "bodyText": "Not sure it is warranted. Is it useful to keep information that are not consistent? I understand it is useful for debug purposes but is there another usecase where this information is meaningful?", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498857159", "createdAt": "2020-10-02T14:29:02Z", "author": {"login": "MioRtia"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForShuntCompensators.java", "diffHunk": "@@ -57,10 +57,15 @@ private void apply(ShuntCompensator shuntCompensator, CgmesRegulatingControlForS\n         if (cgmesRc == null) {\n             return;\n         }\n+        String rcId = cgmesRc.regulatingControlId;\n+\n+        // We are saving the relationship with the\n+        // original regulating control even if it is not enabled\n+        // or if we are not able to set it properly in IIDM\n         if (!cgmesRc.controlEnabled) {\n+            setAdditionalProperties(shuntCompensator, rcId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e3a891c42f23f1d36d066cac55369ce9b850de"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1NzM5Nw==", "bodyText": "Does it happen when this method is called?", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498857397", "createdAt": "2020-10-02T14:29:20Z", "author": {"login": "MioRtia"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForShuntCompensators.java", "diffHunk": "@@ -95,6 +100,21 @@ private void setRegulatingControl(ShuntCompensator shuntCompensator, RegulatingC\n         }\n         // Take default terminal if it has not been defined in CGMES files (it is never null)\n         shuntCompensator.setRegulatingTerminal(parent.getRegulatingTerminal(shuntCompensator, rc.cgmesTerminal));\n+\n+        shuntCompensator.setProperty(\"RegulatingControl\", rcId);\n+    }\n+\n+    private void setAdditionalProperties(ShuntCompensator shuntCompensator, String rcId) {\n+        if (rcId == null) {\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e3a891c42f23f1d36d066cac55369ce9b850de"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1Nzc4MQ==", "bodyText": "Does it happen when this method is called?", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498857781", "createdAt": "2020-10-02T14:29:54Z", "author": {"login": "MioRtia"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForShuntCompensators.java", "diffHunk": "@@ -95,6 +100,21 @@ private void setRegulatingControl(ShuntCompensator shuntCompensator, RegulatingC\n         }\n         // Take default terminal if it has not been defined in CGMES files (it is never null)\n         shuntCompensator.setRegulatingTerminal(parent.getRegulatingTerminal(shuntCompensator, rc.cgmesTerminal));\n+\n+        shuntCompensator.setProperty(\"RegulatingControl\", rcId);\n+    }\n+\n+    private void setAdditionalProperties(ShuntCompensator shuntCompensator, String rcId) {\n+        if (rcId == null) {\n+            return;\n+        }\n+        RegulatingControl rc = parent.cachedRegulatingControls().get(rcId);\n+        if (rc == null) {\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e3a891c42f23f1d36d066cac55369ce9b850de"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1NzkzNg==", "bodyText": "See questions above", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498857936", "createdAt": "2020-10-02T14:30:07Z", "author": {"login": "MioRtia"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForShuntCompensators.java", "diffHunk": "@@ -95,6 +100,21 @@ private void setRegulatingControl(ShuntCompensator shuntCompensator, RegulatingC\n         }\n         // Take default terminal if it has not been defined in CGMES files (it is never null)\n         shuntCompensator.setRegulatingTerminal(parent.getRegulatingTerminal(shuntCompensator, rc.cgmesTerminal));\n+\n+        shuntCompensator.setProperty(\"RegulatingControl\", rcId);\n+    }\n+\n+    private void setAdditionalProperties(ShuntCompensator shuntCompensator, String rcId) {\n+        if (rcId == null) {\n+            return;\n+        }\n+        RegulatingControl rc = parent.cachedRegulatingControls().get(rcId);\n+        if (rc == null) {\n+            return;\n+        }\n+        shuntCompensator.setProperty(\"RegulatingControl\", rcId);\n+        shuntCompensator.setProperty(\"targetValue\", String.valueOf(rc.targetValue));\n+        shuntCompensator.setProperty(\"targetDeadBand\", String.valueOf(rc.targetDeadband));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e3a891c42f23f1d36d066cac55369ce9b850de"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1ODU3Nw==", "bodyText": "Same remark as for generators: if a regulating control only regulates svc, maybe we can considerate the deadband is 0 and not keep this information from the CGMES file.", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498858577", "createdAt": "2020-10-02T14:31:05Z", "author": {"login": "MioRtia"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForStaticVarCompensators.java", "diffHunk": "@@ -123,6 +123,8 @@ private boolean setRegulatingControl(CgmesRegulatingControlForStaticVarCompensat\n         }\n         svc.setRegulatingTerminal(terminal);\n \n+        svc.setProperty(\"RegulatingControl\", rc.regulatingControlId);\n+        svc.setProperty(\"targetDeadBand\", String.valueOf(control.getTargetDeadBand()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e3a891c42f23f1d36d066cac55369ce9b850de"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1OTI3Ng==", "bodyText": "Just for me, can a generating unit be linked to several synchronous machines?", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498859276", "createdAt": "2020-10-02T14:32:17Z", "author": {"login": "MioRtia"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/SynchronousMachineConversion.java", "diffHunk": "@@ -60,6 +60,14 @@ public void convert() {\n         if (p.asInt(\"referencePriority\", 0) > 0) {\n             SlackTerminal.reset(g.getTerminal().getVoltageLevel(), g.getTerminal());\n         }\n+        if (p.containsKey(\"normalPF\")) {\n+            // Convert to double then to string to have canonical representation of number\n+            g.setProperty(\"GeneratingUnit.normalPF\", Double.valueOf(p.get(\"normalPF\")).toString());\n+        }\n+        String generatingUnit = p.getId(\"GeneratingUnit\");\n+        if (generatingUnit != null) {\n+            g.setProperty(\"GeneratingUnit\", generatingUnit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e3a891c42f23f1d36d066cac55369ce9b850de"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg2MDA5OQ==", "bodyText": "This method is private. If we are sure the regulatingControlId is not null when the method is called, it is not useful for me to check it.", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498860099", "createdAt": "2020-10-02T14:33:43Z", "author": {"login": "MioRtia"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractTransformerConversion.java", "diffHunk": "@@ -120,4 +122,81 @@ protected void addAliases(Identifiable<?> identifiable) {\n             }\n         }\n     }\n+\n+    private static RegulatingControl getRegulatingControl(Context context, String regulatingControlId) {\n+        Objects.requireNonNull(regulatingControlId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e3a891c42f23f1d36d066cac55369ce9b850de"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg2MzcyOQ==", "bodyText": "Do you need this because it is done after combination? Can't it be done the same way for hidden and non hidden tap changers?", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498863729", "createdAt": "2020-10-02T14:39:59Z", "author": {"login": "MioRtia"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractTransformerConversion.java", "diffHunk": "@@ -120,4 +122,81 @@ protected void addAliases(Identifiable<?> identifiable) {\n             }\n         }\n     }\n+\n+    private static RegulatingControl getRegulatingControl(Context context, String regulatingControlId) {\n+        Objects.requireNonNull(regulatingControlId);\n+        return context.regulatingControlMapping().cachedRegulatingControls().get(regulatingControlId);\n+    }\n+\n+    protected void addCgmesDataAsProperties(Identifiable<?> transformer, TapChanger rtc, TapChanger ptc, Context context) {\n+        addRatioTapChangerProperties(transformer, rtc, context);\n+        addPhaseTapChangerProperties(transformer, ptc, context);\n+    }\n+\n+    private static void  addRatioTapChangerProperties(Identifiable<?> transformer, TapChanger rtc, Context context) {\n+        if (rtc == null || rtc.getId() == null) {\n+            return;\n+        }\n+\n+        if (rtc.getRegulatingControlId() != null) {\n+            String key = String.format(\"RatioTapChanger.%s.TapChangerControl\", rtc.getId());\n+            transformer.setProperty(key, rtc.getRegulatingControlId());\n+        }\n+\n+        if (rtc.getHiddenCombinedTapChanger() != null) {\n+            defineHiddenTapChangerProperties(transformer, rtc, rtc.getHiddenCombinedTapChanger(), \"RatioTapChanger\", context);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e3a891c42f23f1d36d066cac55369ce9b850de"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg2NTQ3Ng==", "bodyText": "Can you explain this comment to me?", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498865476", "createdAt": "2020-10-02T14:42:54Z", "author": {"login": "MioRtia"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/CgmesExportContext.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.cgmes.conversion.export;\n+\n+import com.powsybl.cgmes.conversion.elements.CgmesTopologyKind;\n+import com.powsybl.cgmes.conversion.extensions.CgmesSshMetadata;\n+import com.powsybl.cgmes.conversion.extensions.CgmesSvMetadata;\n+import com.powsybl.cgmes.conversion.extensions.CimCharacteristics;\n+import com.powsybl.cgmes.model.CgmesNamespace;\n+\n+import com.powsybl.iidm.network.Network;\n+import org.joda.time.DateTime;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public class CgmesExportContext {\n+\n+    private int cimVersion = 16;\n+    private CgmesTopologyKind topologyKind = CgmesTopologyKind.BUS_BRANCH;\n+    private DateTime scenarioTime = DateTime.now();\n+\n+    private ModelDescription svModelDescription = new ModelDescription(\"SV Model\", CgmesNamespace.SV_PROFILE);\n+    private ModelDescription sshModelDescription = new ModelDescription(\"SSH Model\", CgmesNamespace.SSH_PROFILE);\n+\n+    private boolean exportBoundaryPowerFlows = false;\n+\n+    public static final class ModelDescription {\n+\n+        private String description = \"Model\";\n+        private int version = 1;\n+        private final List<String> dependencies = new ArrayList<>();\n+        private String modelingAuthoritySet = \"powsybl.org\";\n+        // TODO Each model may have a list of profiles, not only one", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e3a891c42f23f1d36d066cac55369ce9b850de"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg3MDYzNA==", "bodyText": "Delete this empty line", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498870634", "createdAt": "2020-10-02T14:51:01Z", "author": {"login": "MioRtia"}, "path": "commons/src/test/java/com/powsybl/commons/AbstractConverterTest.java", "diffHunk": "@@ -9,6 +9,7 @@\n import com.google.common.io.ByteStreams;\n import com.google.common.jimfs.Configuration;\n import com.google.common.jimfs.Jimfs;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e3a891c42f23f1d36d066cac55369ce9b850de"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a0b2e8b8187fb90416fdca388dedd69989fa758", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/9a0b2e8b8187fb90416fdca388dedd69989fa758", "committedDate": "2020-10-08T09:01:28Z", "message": "add conversion parameter to export to use only Network data and not original CGMES model\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62546bf5abd0f7e079bcffdae9652ee1695f57e2", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/62546bf5abd0f7e079bcffdae9652ee1695f57e2", "committedDate": "2020-10-08T09:05:00Z", "message": "remove unneeded check\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b01a19d905258c07d037122764766627e124afa6", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/b01a19d905258c07d037122764766627e124afa6", "committedDate": "2020-10-08T09:32:32Z", "message": "base-name of export as a conversion parameter; fix read parameter call\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dca3e41f6d6c77fe426473239ba2cda32dc4f09d", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/dca3e41f6d6c77fe426473239ba2cda32dc4f09d", "committedDate": "2020-10-08T09:39:15Z", "message": "specific unchecked exceptions, single block try-with-resources for SV and SSH files\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7db5818eff3650c88dece67eed65d208e4b41345", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/7db5818eff3650c88dece67eed65d208e4b41345", "committedDate": "2020-10-08T09:47:03Z", "message": "remove unneeded import\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc63ef485403f229712f098a5c1e6575834af450", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/dc63ef485403f229712f098a5c1e6575834af450", "committedDate": "2020-10-08T10:08:41Z", "message": "minor edits: remove non-required non-null check, remove empty line\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a483c426ab51c1c5d9e2e9c4843e53138633819c", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/a483c426ab51c1c5d9e2e9c4843e53138633819c", "committedDate": "2020-10-08T10:40:31Z", "message": "Merge branch 'master' into integration_cgmes_new_ssh_export"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a338f37b32967ea02668fb9fe1f8f5112826d9c9", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/a338f37b32967ea02668fb9fe1f8f5112826d9c9", "committedDate": "2020-10-09T06:31:03Z", "message": "Merge branch 'master' into integration_cgmes_new_ssh_export"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwMzk1MzE3", "url": "https://github.com/powsybl/powsybl-core/pull/1485#pullrequestreview-510395317", "createdAt": "2020-10-16T11:47:50Z", "commit": {"oid": "a338f37b32967ea02668fb9fe1f8f5112826d9c9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTo0Nzo1MFrOHi4GUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMjoxNTo0NVrOHi5ZFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMzMjc1Mw==", "bodyText": "The RegulatingControlId is not stored as an alias in the generator ? I think that maybe we have two options :\n\nWith the option USING_ONLY_NETWORK_PARAMETER, we should introduce default values and not relying too much on properties ;\nWith the option that use the CGMES model, you retriev all the information.\n@MioRtia and @mathbagu what do you think ?", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r506332753", "createdAt": "2020-10-16T11:47:50Z", "author": {"login": "annetill"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForGenerators.java", "diffHunk": "@@ -117,6 +117,9 @@ private boolean setRegulatingControlVoltage(String controlId,\n                     .add();\n         }\n \n+        gen.setProperty(\"RegulatingControl\", controlId);\n+        gen.setProperty(\"targetDeadBand\", String.valueOf(control.getTargetDeadBand()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1MjkyMA=="}, "originalCommit": {"oid": "d4e3a891c42f23f1d36d066cac55369ce9b850de"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMzNzAwMQ==", "bodyText": "I am not sure we have to support this as we don't have the use-case (or the workflow) because it could lead to bad choices for the extension CgmesSshControlAreas. It could be a generic extension shared by UCTE and CGMES workflows. This extension can be an extension of a voltage level or a substation, that only say in which control area the voltage levl or the substation belong. And then, we will have a processing to compute the net position each time, without storing it.", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r506337001", "createdAt": "2020-10-16T11:53:26Z", "author": {"login": "annetill"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Conversion.java", "diffHunk": "@@ -306,6 +311,34 @@ private void addCgmesSvMetadata(Network network) {\n         }\n     }\n \n+    private void addCgmesSshMetadata(Network network) {\n+        PropertyBags sshDescription = cgmes.fullModel(CgmesSubset.STEADY_STATE_HYPOTHESIS.getProfile());\n+        if (sshDescription != null && !sshDescription.isEmpty()) {\n+            CgmesSshMetadataAdder adder = network.newExtension(CgmesSshMetadataAdder.class)\n+                    .setDescription(sshDescription.get(0).getId(\"description\"))\n+                    .setSshVersion(sshDescription.get(0).asInt(\"version\"))\n+                    .setModelingAuthoritySet(sshDescription.get(0).getId(\"modelingAuthoritySet\"));\n+            sshDescription.pluckLocals(\"DependentOn\").forEach(adder::addDependency);\n+            adder.add();\n+        }\n+    }\n+\n+    private void addCgmesSshControlAreas(Network network) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a338f37b32967ea02668fb9fe1f8f5112826d9c9"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMzOTQ3Mw==", "bodyText": "Why do we need the targetValue as property as we have it in IIDM ?", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r506339473", "createdAt": "2020-10-16T11:56:22Z", "author": {"login": "annetill"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForShuntCompensators.java", "diffHunk": "@@ -95,6 +100,21 @@ private void setRegulatingControl(ShuntCompensator shuntCompensator, RegulatingC\n         }\n         // Take default terminal if it has not been defined in CGMES files (it is never null)\n         shuntCompensator.setRegulatingTerminal(parent.getRegulatingTerminal(shuntCompensator, rc.cgmesTerminal));\n+\n+        shuntCompensator.setProperty(\"RegulatingControl\", rcId);\n+    }\n+\n+    private void setAdditionalProperties(ShuntCompensator shuntCompensator, String rcId) {\n+        if (rcId == null) {\n+            return;\n+        }\n+        RegulatingControl rc = parent.cachedRegulatingControls().get(rcId);\n+        if (rc == null) {\n+            return;\n+        }\n+        shuntCompensator.setProperty(\"RegulatingControl\", rcId);\n+        shuntCompensator.setProperty(\"targetValue\", String.valueOf(rc.targetValue));\n+        shuntCompensator.setProperty(\"targetDeadBand\", String.valueOf(rc.targetDeadband));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1NzkzNg=="}, "originalCommit": {"oid": "d4e3a891c42f23f1d36d066cac55369ce9b850de"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM0MjU2OA==", "bodyText": "We don't have an extension for that ? What is the difference with ActivePowerControl ?", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r506342568", "createdAt": "2020-10-16T12:00:07Z", "author": {"login": "annetill"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/SynchronousMachineConversion.java", "diffHunk": "@@ -60,6 +60,14 @@ public void convert() {\n         if (p.asInt(\"referencePriority\", 0) > 0) {\n             SlackTerminal.reset(g.getTerminal().getVoltageLevel(), g.getTerminal());\n         }\n+        if (p.containsKey(\"normalPF\")) {\n+            // Convert to double then to string to have canonical representation of number\n+            g.setProperty(\"GeneratingUnit.normalPF\", Double.valueOf(p.get(\"normalPF\")).toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a338f37b32967ea02668fb9fe1f8f5112826d9c9"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM0MzIzMw==", "bodyText": "Do we really need a property ? Increase an extension ?", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r506343233", "createdAt": "2020-10-16T12:01:04Z", "author": {"login": "annetill"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/SynchronousMachineConversion.java", "diffHunk": "@@ -60,6 +60,14 @@ public void convert() {\n         if (p.asInt(\"referencePriority\", 0) > 0) {\n             SlackTerminal.reset(g.getTerminal().getVoltageLevel(), g.getTerminal());\n         }\n+        if (p.containsKey(\"normalPF\")) {\n+            // Convert to double then to string to have canonical representation of number\n+            g.setProperty(\"GeneratingUnit.normalPF\", Double.valueOf(p.get(\"normalPF\")).toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM0MjU2OA=="}, "originalCommit": {"oid": "a338f37b32967ea02668fb9fe1f8f5112826d9c9"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM0NTE2MA==", "bodyText": "Why do we need all these properties ? We have most of these information in IIDM tap changer, no ?", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r506345160", "createdAt": "2020-10-16T12:03:46Z", "author": {"login": "annetill"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractTransformerConversion.java", "diffHunk": "@@ -120,4 +121,80 @@ protected void addAliases(Identifiable<?> identifiable) {\n             }\n         }\n     }\n+\n+    private static RegulatingControl getRegulatingControl(Context context, String regulatingControlId) {\n+        return context.regulatingControlMapping().cachedRegulatingControls().get(regulatingControlId);\n+    }\n+\n+    protected void addCgmesDataAsProperties(Identifiable<?> transformer, TapChanger rtc, TapChanger ptc, Context context) {\n+        addRatioTapChangerProperties(transformer, rtc, context);\n+        addPhaseTapChangerProperties(transformer, ptc, context);\n+    }\n+\n+    private static void  addRatioTapChangerProperties(Identifiable<?> transformer, TapChanger rtc, Context context) {\n+        if (rtc == null || rtc.getId() == null) {\n+            return;\n+        }\n+\n+        if (rtc.getRegulatingControlId() != null) {\n+            String key = String.format(\"RatioTapChanger.%s.TapChangerControl\", rtc.getId());\n+            transformer.setProperty(key, rtc.getRegulatingControlId());\n+        }\n+\n+        if (rtc.getHiddenCombinedTapChanger() != null) {\n+            defineHiddenTapChangerProperties(transformer, rtc, rtc.getHiddenCombinedTapChanger(), \"RatioTapChanger\", context);\n+        }\n+    }\n+\n+    private static void  addPhaseTapChangerProperties(Identifiable<?> transformer, TapChanger ptc, Context context) {\n+        if (ptc == null || ptc.getId() == null) {\n+            return;\n+        }\n+\n+        if (ptc.getRegulatingControlId() != null) {\n+            String key = String.format(\"PhaseTapChanger.%s.TapChangerControl\", ptc.getId());\n+            transformer.setProperty(key, ptc.getRegulatingControlId());\n+        }\n+        if (ptc.getType() != null) {\n+            String key = String.format(\"PhaseTapChanger.%s.type\", ptc.getId());\n+            transformer.setProperty(key, ptc.getType());\n+        }\n+\n+        if (ptc.getHiddenCombinedTapChanger() != null) {\n+            defineHiddenTapChangerProperties(transformer, ptc, ptc.getHiddenCombinedTapChanger(), \"PhaseTapChanger\", context);\n+\n+            String key = String.format(\"PhaseTapChanger.%s.type\", ptc.getHiddenCombinedTapChanger().getId());\n+            transformer.setProperty(key, ptc.getHiddenCombinedTapChanger().getType());\n+        }\n+    }\n+\n+    private static void defineHiddenTapChangerProperties(Identifiable<?> transformer, TapChanger tc, TapChanger hiddenTc, String propertyTag, Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a338f37b32967ea02668fb9fe1f8f5112826d9c9"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM0NTc4OQ==", "bodyText": "We have to use IIDM model in priority.", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r506345789", "createdAt": "2020-10-16T12:04:32Z", "author": {"login": "annetill"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractTransformerConversion.java", "diffHunk": "@@ -120,4 +121,80 @@ protected void addAliases(Identifiable<?> identifiable) {\n             }\n         }\n     }\n+\n+    private static RegulatingControl getRegulatingControl(Context context, String regulatingControlId) {\n+        return context.regulatingControlMapping().cachedRegulatingControls().get(regulatingControlId);\n+    }\n+\n+    protected void addCgmesDataAsProperties(Identifiable<?> transformer, TapChanger rtc, TapChanger ptc, Context context) {\n+        addRatioTapChangerProperties(transformer, rtc, context);\n+        addPhaseTapChangerProperties(transformer, ptc, context);\n+    }\n+\n+    private static void  addRatioTapChangerProperties(Identifiable<?> transformer, TapChanger rtc, Context context) {\n+        if (rtc == null || rtc.getId() == null) {\n+            return;\n+        }\n+\n+        if (rtc.getRegulatingControlId() != null) {\n+            String key = String.format(\"RatioTapChanger.%s.TapChangerControl\", rtc.getId());\n+            transformer.setProperty(key, rtc.getRegulatingControlId());\n+        }\n+\n+        if (rtc.getHiddenCombinedTapChanger() != null) {\n+            defineHiddenTapChangerProperties(transformer, rtc, rtc.getHiddenCombinedTapChanger(), \"RatioTapChanger\", context);\n+        }\n+    }\n+\n+    private static void  addPhaseTapChangerProperties(Identifiable<?> transformer, TapChanger ptc, Context context) {\n+        if (ptc == null || ptc.getId() == null) {\n+            return;\n+        }\n+\n+        if (ptc.getRegulatingControlId() != null) {\n+            String key = String.format(\"PhaseTapChanger.%s.TapChangerControl\", ptc.getId());\n+            transformer.setProperty(key, ptc.getRegulatingControlId());\n+        }\n+        if (ptc.getType() != null) {\n+            String key = String.format(\"PhaseTapChanger.%s.type\", ptc.getId());\n+            transformer.setProperty(key, ptc.getType());\n+        }\n+\n+        if (ptc.getHiddenCombinedTapChanger() != null) {\n+            defineHiddenTapChangerProperties(transformer, ptc, ptc.getHiddenCombinedTapChanger(), \"PhaseTapChanger\", context);\n+\n+            String key = String.format(\"PhaseTapChanger.%s.type\", ptc.getHiddenCombinedTapChanger().getId());\n+            transformer.setProperty(key, ptc.getHiddenCombinedTapChanger().getType());\n+        }\n+    }\n+\n+    private static void defineHiddenTapChangerProperties(Identifiable<?> transformer, TapChanger tc, TapChanger hiddenTc, String propertyTag, Context context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM0NTE2MA=="}, "originalCommit": {"oid": "a338f37b32967ea02668fb9fe1f8f5112826d9c9"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM1MTQ2OA==", "bodyText": "For hidden combined tap changer: see my comment about the two modes of the conversion. I am not sure we have to support that in the mode USING_ONLY_NETWORK_PARAMETER.", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r506351468", "createdAt": "2020-10-16T12:12:17Z", "author": {"login": "annetill"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/TapChanger.java", "diffHunk": "@@ -173,6 +180,11 @@ public TapChanger setTapChangerControlEnabled(boolean tapChangerControlEnabled)\n         return this;\n     }\n \n+    public TapChanger setHiddenCombinedTapChanger(TapChanger hiddenCombinedTapChanger) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a338f37b32967ea02668fb9fe1f8f5112826d9c9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM1Mzk0Mw==", "bodyText": "I am really not sure about this extension as we don't have the use case.Maybe we have to accept to not support these fields in the beginning.", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r506353943", "createdAt": "2020-10-16T12:15:45Z", "author": {"login": "annetill"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/extensions/CgmesSshControlAreas.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.cgmes.conversion.extensions;\n+\n+import com.powsybl.cgmes.conversion.extensions.CgmesSshControlAreasImpl.ControlArea;\n+import com.powsybl.commons.extensions.Extension;\n+import com.powsybl.iidm.network.Network;\n+\n+import java.util.List;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public interface CgmesSshControlAreas extends Extension<Network> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a338f37b32967ea02668fb9fe1f8f5112826d9c9"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNTEyMTI4", "url": "https://github.com/powsybl/powsybl-core/pull/1485#pullrequestreview-511512128", "createdAt": "2020-10-19T08:14:03Z", "commit": {"oid": "a338f37b32967ea02668fb9fe1f8f5112826d9c9"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "daa24e9ca44d97f1168dfe3befd37aadfb74b125", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/daa24e9ca44d97f1168dfe3befd37aadfb74b125", "committedDate": "2020-10-27T09:59:49Z", "message": "Merge branch 'master' into integration_cgmes_new_ssh_export"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f5757632bf32333390ee33f6966ad0fbc296e45", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/0f5757632bf32333390ee33f6966ad0fbc296e45", "committedDate": "2020-10-27T11:26:07Z", "message": "remove support for control areas\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5680e64a5fa33b674d97fafc0109f699a789709a", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/5680e64a5fa33b674d97fafc0109f699a789709a", "committedDate": "2020-10-27T14:24:55Z", "message": "Map CGMES generating unit normalPF to participation factor (droop) in IIDM active power control extension\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0df9017afba27a41ef1323d82c0e7e6b6133c424", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/0df9017afba27a41ef1323d82c0e7e6b6133c424", "committedDate": "2020-10-27T14:41:32Z", "message": "avoid unneeded boxing (sonar)\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8dfe3e3e1c2c377da5fa070ed1f0ae25479d86a6", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/8dfe3e3e1c2c377da5fa070ed1f0ae25479d86a6", "committedDate": "2020-10-28T16:20:05Z", "message": "write scenario time preserving time zone\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed424e10168b2fb08f8ebf1a67d53357cdf9387c", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/ed424e10168b2fb08f8ebf1a67d53357cdf9387c", "committedDate": "2020-10-28T22:57:46Z", "message": "parse scenario time preserving time zone, use UTC if no zone provided, fix tests\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1eb453ca70812eddde237c34050afd931ba862b2", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/1eb453ca70812eddde237c34050afd931ba862b2", "committedDate": "2020-10-29T15:39:53Z", "message": "store minimum data for combined hidden tap changers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd2ecb8e4057fb964fdf79a15984a938cc117848", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/bd2ecb8e4057fb964fdf79a15984a938cc117848", "committedDate": "2020-10-30T10:48:48Z", "message": "simplify code, avoid duplications\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3a94575061e5ac9a7f61e3c2dbdfe53cb47e754", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/f3a94575061e5ac9a7f61e3c2dbdfe53cb47e754", "committedDate": "2020-10-30T16:04:09Z", "message": "simplify code, avoid duplications\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "656de608cdc46c42c3a34140c054b4ae75e189e1", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/656de608cdc46c42c3a34140c054b4ae75e189e1", "committedDate": "2020-11-02T11:43:21Z", "message": "fix style\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf145a62de700fd07db3dda08dd33db5d8190aa6", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/bf145a62de700fd07db3dda08dd33db5d8190aa6", "committedDate": "2020-11-16T06:55:57Z", "message": "Merge branch 'master' into integration_cgmes_new_ssh_export"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13a598e5bbe8f552b25bac848908da82af05f42d", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/13a598e5bbe8f552b25bac848908da82af05f42d", "committedDate": "2020-11-16T08:45:08Z", "message": "for regulating controls the only property stored in network is the CGMES identifier (pending adjustment of unit tests)\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a44a5a5f3f48d11e3252538448704815a4381d2", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/9a44a5a5f3f48d11e3252538448704815a4381d2", "committedDate": "2020-11-16T15:02:08Z", "message": "store shunt regulating control data even if equipment does not participate (keeping shunt voltage regulation as off)\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1fc667f2fc4e0b8a9de799e7e4f23bf15dbbf3d", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/a1fc667f2fc4e0b8a9de799e7e4f23bf15dbbf3d", "committedDate": "2020-11-16T15:50:38Z", "message": "combine shared regulating control data from multiple equipment when exporting to SSH\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4f38f0f6a8c31ce920e457b21b2c68265ce54e7", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/f4f38f0f6a8c31ce920e457b21b2c68265ce54e7", "committedDate": "2020-11-16T18:54:36Z", "message": "Merge branch 'master' into integration_cgmes_new_ssh_export\n\nSigned-off-by: Luma <zamarrenolm@aia.es>\n\n# Conflicts:\n#\tcgmes/cgmes-conversion/src/test/java/com/powsybl/cgmes/conversion/test/update/StateVariablesExportTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ff6740f70728b8436124927ef68d6461db704cb", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/3ff6740f70728b8436124927ef68d6461db704cb", "committedDate": "2020-11-16T19:23:01Z", "message": "fix tests; ensure filenames follow required filename convention\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8b6a783de1222ce8136f1387a966fd633eb37a2", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/b8b6a783de1222ce8136f1387a966fd633eb37a2", "committedDate": "2020-11-17T14:14:03Z", "message": "adjust tests\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MzYzMTA0", "url": "https://github.com/powsybl/powsybl-core/pull/1485#pullrequestreview-537363104", "createdAt": "2020-11-24T10:42:50Z", "commit": {"oid": "b8b6a783de1222ce8136f1387a966fd633eb37a2"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDo0Mjo1MFrOH46PHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMzo0MToyOVrOH5BVsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQzNjQ0Ng==", "bodyText": "Just a question, why did you remove the version?", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r529436446", "createdAt": "2020-11-24T10:42:50Z", "author": {"login": "MioRtia"}, "path": "cgmes/cgmes-conversion/pom.xml", "diffHunk": "@@ -193,7 +193,6 @@\n         <dependency>\n             <groupId>org.xmlunit</groupId>\n             <artifactId>xmlunit-core</artifactId>\n-            <version>${xmlunit.version}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8b6a783de1222ce8136f1387a966fd633eb37a2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQzODMyNQ==", "bodyText": "params is never supposed to be null, I think it is okay to throw a NullPointerException if it happens (otherwise, it would have a different behavior than the other exporters and that might be weird)", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r529438325", "createdAt": "2020-11-24T10:44:26Z", "author": {"login": "MioRtia"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java", "diffHunk": "@@ -7,42 +7,91 @@\n \n package com.powsybl.cgmes.conversion;\n \n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.UncheckedIOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n import java.util.Properties;\n \n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+\n import com.google.auto.service.AutoService;\n+import com.google.common.collect.ImmutableList;\n+import com.powsybl.cgmes.conversion.export.CgmesExportContext;\n+import com.powsybl.cgmes.conversion.export.StateVariablesAdder;\n+import com.powsybl.cgmes.conversion.export.StateVariablesExport;\n+import com.powsybl.cgmes.conversion.export.SteadyStateHypothesisExport;\n import com.powsybl.cgmes.conversion.update.CgmesUpdate;\n-import com.powsybl.cgmes.conversion.update.StateVariablesAdder;\n import com.powsybl.cgmes.model.CgmesModel;\n import com.powsybl.cgmes.model.CgmesModelException;\n import com.powsybl.cgmes.model.CgmesModelFactory;\n import com.powsybl.commons.datasource.DataSource;\n+import com.powsybl.commons.exceptions.UncheckedXmlStreamException;\n+import com.powsybl.commons.xml.XmlUtil;\n+import com.powsybl.iidm.ConversionParameters;\n import com.powsybl.iidm.export.Exporter;\n import com.powsybl.iidm.network.Network;\n+import com.powsybl.iidm.parameters.Parameter;\n+import com.powsybl.iidm.parameters.ParameterType;\n \n /**\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n  */\n @AutoService(Exporter.class)\n public class CgmesExport implements Exporter {\n \n+    public List<Parameter> getParameters() {\n+        return Collections.unmodifiableList(STATIC_PARAMETERS);\n+    }\n+\n     @Override\n     public void export(Network network, Properties params, DataSource ds) {\n+        Objects.requireNonNull(network);\n+        if (params != null && ConversionParameters.readBooleanParameter(getFormat(), params, USING_ONLY_NETWORK_PARAMETER)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8b6a783de1222ce8136f1387a966fd633eb37a2"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NDU0Mw==", "bodyText": "I think this method can be static", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r529474543", "createdAt": "2020-11-24T11:29:03Z", "author": {"login": "MioRtia"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java", "diffHunk": "@@ -7,42 +7,91 @@\n \n package com.powsybl.cgmes.conversion;\n \n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.UncheckedIOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n import java.util.Properties;\n \n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+\n import com.google.auto.service.AutoService;\n+import com.google.common.collect.ImmutableList;\n+import com.powsybl.cgmes.conversion.export.CgmesExportContext;\n+import com.powsybl.cgmes.conversion.export.StateVariablesAdder;\n+import com.powsybl.cgmes.conversion.export.StateVariablesExport;\n+import com.powsybl.cgmes.conversion.export.SteadyStateHypothesisExport;\n import com.powsybl.cgmes.conversion.update.CgmesUpdate;\n-import com.powsybl.cgmes.conversion.update.StateVariablesAdder;\n import com.powsybl.cgmes.model.CgmesModel;\n import com.powsybl.cgmes.model.CgmesModelException;\n import com.powsybl.cgmes.model.CgmesModelFactory;\n import com.powsybl.commons.datasource.DataSource;\n+import com.powsybl.commons.exceptions.UncheckedXmlStreamException;\n+import com.powsybl.commons.xml.XmlUtil;\n+import com.powsybl.iidm.ConversionParameters;\n import com.powsybl.iidm.export.Exporter;\n import com.powsybl.iidm.network.Network;\n+import com.powsybl.iidm.parameters.Parameter;\n+import com.powsybl.iidm.parameters.ParameterType;\n \n /**\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n  */\n @AutoService(Exporter.class)\n public class CgmesExport implements Exporter {\n \n+    public List<Parameter> getParameters() {\n+        return Collections.unmodifiableList(STATIC_PARAMETERS);\n+    }\n+\n     @Override\n     public void export(Network network, Properties params, DataSource ds) {\n+        Objects.requireNonNull(network);\n+        if (params != null && ConversionParameters.readBooleanParameter(getFormat(), params, USING_ONLY_NETWORK_PARAMETER)) {\n+            exportUsingOnlyNetwork(network, params, ds);\n+        } else {\n+            CgmesModelExtension ext = network.getExtension(CgmesModelExtension.class);\n+            if (ext == null) {\n+                throw new CgmesModelException(\"CGMES model is required and not found in Network extension\");\n+            }\n+            exportUsingOriginalCgmesModel(network, ds, ext);\n+        }\n+    }\n+\n+    private String baseName(Network network, Properties params) {\n+        String baseName = ConversionParameters.readStringParameter(getFormat(), params, BASE_NAME_PARAMETER);\n+        return baseName != null ? baseName : network.getNameOrId();\n+    }\n \n-        // Right now the network must contain the original CgmesModel\n-        // In the future it should be possible to export to CGMES\n-        // directly from an IIDM Network,\n-        // without the need for the original CgmesModel\n-        CgmesModelExtension ext = network.getExtension(CgmesModelExtension.class);\n-        if (ext == null) {\n-            throw new CgmesModelException(\"No extension for CGMES model found in Network\");\n+    private void exportUsingOnlyNetwork(Network network, Properties params, DataSource ds) {\n+        // At this point only SSH, SV can be exported when relying only in Network data\n+        // (minimum amount of CGMES references are expected as aliases/properties/extensions)\n+        String baseName = baseName(network, params);\n+        String filenameSv = baseName + \"_SV.xml\";\n+        String filenameSsh = baseName + \"_SSH.xml\";\n+        CgmesExportContext context = new CgmesExportContext(network);\n+        try (OutputStream osv = ds.newOutputStream(filenameSv, false);\n+                OutputStream ossh = ds.newOutputStream(filenameSsh, false)) {\n+            XMLStreamWriter writer;\n+            writer = XmlUtil.initializeWriter(true, \"    \", osv);\n+            StateVariablesExport.write(network, writer, context);\n+            writer = XmlUtil.initializeWriter(true, \"    \", ossh);\n+            SteadyStateHypothesisExport.write(network, writer, context);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        } catch (XMLStreamException e) {\n+            throw new UncheckedXmlStreamException(e);\n         }\n-        CgmesUpdate cgmesUpdate = ext.getCgmesUpdate();\n+    }\n \n+    private void exportUsingOriginalCgmesModel(Network network, DataSource ds, CgmesModelExtension ext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8b6a783de1222ce8136f1387a966fd633eb37a2"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NjE1Nw==", "bodyText": "Maybe add a TODO comment", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r529476157", "createdAt": "2020-11-24T11:31:46Z", "author": {"login": "MioRtia"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Conversion.java", "diffHunk": "@@ -306,6 +309,25 @@ private void addCgmesSvMetadata(Network network) {\n         }\n     }\n \n+    private void addCgmesSshMetadata(Network network) {\n+        PropertyBags sshDescription = cgmes.fullModel(CgmesSubset.STEADY_STATE_HYPOTHESIS.getProfile());\n+        if (sshDescription != null && !sshDescription.isEmpty()) {\n+            CgmesSshMetadataAdder adder = network.newExtension(CgmesSshMetadataAdder.class)\n+                    .setDescription(sshDescription.get(0).getId(\"description\"))\n+                    .setSshVersion(sshDescription.get(0).asInt(\"version\"))\n+                    .setModelingAuthoritySet(sshDescription.get(0).getId(\"modelingAuthoritySet\"));\n+            sshDescription.pluckLocals(\"DependentOn\").forEach(adder::addDependency);\n+            adder.add();\n+        }\n+    }\n+\n+    private void addCgmesSshControlAreas(Network network, Context context) {\n+        PropertyBags sshControlAreas = cgmes.controlAreas();\n+        if (sshControlAreas != null && !sshControlAreas.isEmpty()) {\n+            context.ignored(\"ControlAreas\", \"Unsupported in current version\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8b6a783de1222ce8136f1387a966fd633eb37a2"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU0Nzc3MA==", "bodyText": "Why is it necessary?", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r529547770", "createdAt": "2020-11-24T13:34:00Z", "author": {"login": "MioRtia"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractTransformerConversion.java", "diffHunk": "@@ -109,15 +109,41 @@ protected void addAliases(Identifiable<?> identifiable) {\n         if (ptcs != null) {\n             for (int  i = 0; i < ptcs.size(); i++) {\n                 int index = i + 1;\n-                Optional.ofNullable(ptcs.get(i)).ifPresent(ptc -> identifiable.addAlias(ptc, Conversion.CGMES_PREFIX_ALIAS + CgmesNames.PHASE_TAP_CHANGER + index));\n+                Optional.ofNullable(ptcs.get(i)).ifPresent(ptc -> identifiable.addAlias(ptc, Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + index));\n             }\n         }\n         List<String> rtcs = context.cgmes().ratioTapChangerListForPowerTransformer(identifiable.getId());\n         if (rtcs != null) {\n             for (int i = 0; i < rtcs.size(); i++) {\n                 int index = i + 1;\n-                Optional.ofNullable(rtcs.get(i)).ifPresent(rtc -> identifiable.addAlias(rtc, Conversion.CGMES_PREFIX_ALIAS + CgmesNames.RATIO_TAP_CHANGER + index));\n+                Optional.ofNullable(rtcs.get(i)).ifPresent(rtc -> identifiable.addAlias(rtc, Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + index));\n             }\n         }\n     }\n+\n+    protected static void addCgmesReferences(Identifiable<?> transformer, TapChanger tc) {\n+        if (tc == null || tc.getId() == null) {\n+            return;\n+        }\n+        if (tc.getRegulatingControlId() != null) {\n+            transformer.setProperty(cgmesReferenceKey(tc.getId(), \"TapChangerControl\"), tc.getRegulatingControlId());\n+        }\n+        if (tc.getType() != null) {\n+            transformer.setProperty(cgmesReferenceKey(tc.getId(), \"type\"), tc.getType());\n+        }\n+        TapChanger tch = tc.getHiddenCombinedTapChanger();\n+        if (tch != null) {\n+            // All the tap changers have already been added as aliases,\n+            // Through properties we only label which one has been combined and kept hidden\n+            transformer.setProperty(cgmesReferenceKey(tc.getId(), \"hiddenTapChangerId\"), tch.getId());\n+            transformer.setProperty(cgmesReferenceKey(tch.getId(), \"step\"), String.valueOf(tch.getTapPosition()));\n+            if (tch.getType() != null) {\n+                transformer.setProperty(cgmesReferenceKey(tch.getId(), \"type\"), tch.getType());\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8b6a783de1222ce8136f1387a966fd633eb37a2"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU0OTAyOA==", "bodyText": "I didn't find out where you added the regulatingControlId of transformers?", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r529549028", "createdAt": "2020-11-24T13:35:51Z", "author": {"login": "MioRtia"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForTransformers.java", "diffHunk": "@@ -64,9 +64,10 @@ public CgmesRegulatingControlRatio buildRegulatingControlRatio(String id, String\n         return rtc;\n     }\n \n-    public CgmesRegulatingControlPhase buildRegulatingControlPhase(String regulatingControlId,\n+    public CgmesRegulatingControlPhase buildRegulatingControlPhase(String id, String regulatingControlId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8b6a783de1222ce8136f1387a966fd633eb37a2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1MDQ1Mg==", "bodyText": "Is this case supposed to happen? If not, throw an AssertionError", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r529550452", "createdAt": "2020-11-24T13:37:56Z", "author": {"login": "MioRtia"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.cgmes.conversion.export;\n+\n+import com.powsybl.cgmes.conversion.Conversion;\n+import com.powsybl.cgmes.model.CgmesNames;\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.exceptions.UncheckedXmlStreamException;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.extensions.ActivePowerControl;\n+import com.powsybl.iidm.network.extensions.LoadDetail;\n+import com.powsybl.iidm.network.extensions.SlackTerminal;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+import java.util.*;\n+\n+import static com.powsybl.cgmes.model.CgmesNamespace.RDF_NAMESPACE;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ */\n+public final class SteadyStateHypothesisExport {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SteadyStateHypothesisExport.class);\n+\n+    private static final String REGULATING_CONTROL_PROPERTY = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"RegulatingControl\";\n+    private static final String GENERATING_UNIT_PROPERTY = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"GeneratingUnit\";\n+\n+    private SteadyStateHypothesisExport() {\n+    }\n+\n+    public static void write(Network network, XMLStreamWriter writer, CgmesExportContext context) {\n+        final Map<String, List<RegulatingControlView>> regulatingControlViews = new HashMap<>();\n+        String cimNamespace = context.getCimNamespace();\n+\n+        try {\n+            CgmesExportUtil.writeRdfRoot(context.getCimVersion(), writer);\n+\n+            if (context.getCimVersion() == 16) {\n+                CgmesExportUtil.writeModelDescription(writer, context.getSshModelDescription(), context);\n+            }\n+\n+            writeEnergyConsumers(network, cimNamespace, writer);\n+            writeEquivalentInjections(network, cimNamespace, writer);\n+            writeTapChangers(network, cimNamespace, regulatingControlViews, writer);\n+            writeSynchronousMachines(network, cimNamespace, regulatingControlViews, writer);\n+            writeShuntCompensators(network, cimNamespace, regulatingControlViews, writer);\n+            writeStaticVarCompensators(network, cimNamespace, regulatingControlViews, writer);\n+            writeRegulatingControls(regulatingControlViews, cimNamespace, writer);\n+            writeGeneratingUnitsParticitationFactors(network, cimNamespace, writer);\n+            // TODO writeControlAreas\n+            writeTerminals(network, cimNamespace, writer);\n+\n+            writer.writeEndDocument();\n+        } catch (XMLStreamException e) {\n+            throw new UncheckedXmlStreamException(e);\n+        }\n+    }\n+\n+    private static void writeTerminals(Network network, String cimNamespace, XMLStreamWriter writer) {\n+        for (Connectable<?> c : network.getConnectables()) {\n+            for (Terminal t : c.getTerminals()) {\n+                writeTerminal(t, c, cimNamespace, writer);\n+            }\n+        }\n+        for (DanglingLine dl : network.getDanglingLines()) {\n+            // Terminal for equivalent injection at boundary is always connected\n+            dl.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"EquivalentInjectionTerminal\")\n+                    .ifPresent(tid -> writeTerminal(tid, true, cimNamespace, writer));\n+            // Terminal for boundary side of original line/switch is always connected\n+            dl.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"Terminal_Boundary\")\n+                    .ifPresent(tid -> writeTerminal(tid, true, cimNamespace, writer));\n+        }\n+    }\n+\n+    private static void writeEquivalentInjections(Network network, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        // One equivalent injection for every dangling line\n+        for (DanglingLine dl : network.getDanglingLines()) {\n+            writeEquivalentInjection(dl, cimNamespace, writer);\n+        }\n+    }\n+\n+    private static void writeTapChangers(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (TwoWindingsTransformer twt : network.getTwoWindingsTransformers()) {\n+            if (twt.hasPhaseTapChanger()) {\n+                String ptcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + 1)\n+                        .orElseGet(() -> twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + 2).orElseThrow(PowsyblException::new));\n+                writeTapChanger(twt, ptcId, twt.getPhaseTapChanger(), CgmesNames.PHASE_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+            } else if (twt.hasRatioTapChanger()) {\n+                String rtcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + 1)\n+                        .orElseGet(() -> twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + 2).orElseThrow(PowsyblException::new));\n+                writeTapChanger(twt, rtcId, twt.getRatioTapChanger(), CgmesNames.RATIO_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+            }\n+        }\n+\n+        for (ThreeWindingsTransformer twt : network.getThreeWindingsTransformers()) {\n+            int i = 1;\n+            for (ThreeWindingsTransformer.Leg leg : Arrays.asList(twt.getLeg1(), twt.getLeg2(), twt.getLeg3())) {\n+                if (leg.hasPhaseTapChanger()) {\n+                    String ptcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + i).orElseThrow(PowsyblException::new);\n+                    writeTapChanger(twt, ptcId, leg.getPhaseTapChanger(), CgmesNames.PHASE_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+                } else if (leg.hasRatioTapChanger()) {\n+                    String rtcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + i).orElseThrow(PowsyblException::new);\n+                    writeTapChanger(twt, rtcId, leg.getRatioTapChanger(), CgmesNames.RATIO_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+                }\n+                i++;\n+            }\n+        }\n+    }\n+\n+    private static void writeTapChanger(Identifiable<?> eq, String tcId, TapChanger<?, ?> tc, String defaultType, Map<String, List<RegulatingControlView>> regulatingControlViews, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        String type = eq.getProperty(cgmesTapChangerReferenceKey(tcId, \"type\"), defaultType);\n+        writeTapChanger(type, tcId, tc, cimNamespace, writer);\n+        addRegulatingControlView(tc, tcId, eq, regulatingControlViews);\n+        writeHiddenTapChanger(eq, tcId, defaultType, cimNamespace, writer);\n+    }\n+\n+    private static void writeShuntCompensators(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (ShuntCompensator s : network.getShuntCompensators()) {\n+            String linearNonlinear;\n+            switch (s.getModelType()) {\n+                case LINEAR:\n+                    linearNonlinear = \"Linear\";\n+                    break;\n+                case NON_LINEAR:\n+                    linearNonlinear = \"Nonlinear\";\n+                    break;\n+                default:\n+                    linearNonlinear = \"\";\n+                    break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8b6a783de1222ce8136f1387a966fd633eb37a2"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1MDY3NA==", "bodyText": "Maybe call it shuntType?", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r529550674", "createdAt": "2020-11-24T13:38:18Z", "author": {"login": "MioRtia"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.cgmes.conversion.export;\n+\n+import com.powsybl.cgmes.conversion.Conversion;\n+import com.powsybl.cgmes.model.CgmesNames;\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.exceptions.UncheckedXmlStreamException;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.extensions.ActivePowerControl;\n+import com.powsybl.iidm.network.extensions.LoadDetail;\n+import com.powsybl.iidm.network.extensions.SlackTerminal;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+import java.util.*;\n+\n+import static com.powsybl.cgmes.model.CgmesNamespace.RDF_NAMESPACE;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ */\n+public final class SteadyStateHypothesisExport {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SteadyStateHypothesisExport.class);\n+\n+    private static final String REGULATING_CONTROL_PROPERTY = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"RegulatingControl\";\n+    private static final String GENERATING_UNIT_PROPERTY = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"GeneratingUnit\";\n+\n+    private SteadyStateHypothesisExport() {\n+    }\n+\n+    public static void write(Network network, XMLStreamWriter writer, CgmesExportContext context) {\n+        final Map<String, List<RegulatingControlView>> regulatingControlViews = new HashMap<>();\n+        String cimNamespace = context.getCimNamespace();\n+\n+        try {\n+            CgmesExportUtil.writeRdfRoot(context.getCimVersion(), writer);\n+\n+            if (context.getCimVersion() == 16) {\n+                CgmesExportUtil.writeModelDescription(writer, context.getSshModelDescription(), context);\n+            }\n+\n+            writeEnergyConsumers(network, cimNamespace, writer);\n+            writeEquivalentInjections(network, cimNamespace, writer);\n+            writeTapChangers(network, cimNamespace, regulatingControlViews, writer);\n+            writeSynchronousMachines(network, cimNamespace, regulatingControlViews, writer);\n+            writeShuntCompensators(network, cimNamespace, regulatingControlViews, writer);\n+            writeStaticVarCompensators(network, cimNamespace, regulatingControlViews, writer);\n+            writeRegulatingControls(regulatingControlViews, cimNamespace, writer);\n+            writeGeneratingUnitsParticitationFactors(network, cimNamespace, writer);\n+            // TODO writeControlAreas\n+            writeTerminals(network, cimNamespace, writer);\n+\n+            writer.writeEndDocument();\n+        } catch (XMLStreamException e) {\n+            throw new UncheckedXmlStreamException(e);\n+        }\n+    }\n+\n+    private static void writeTerminals(Network network, String cimNamespace, XMLStreamWriter writer) {\n+        for (Connectable<?> c : network.getConnectables()) {\n+            for (Terminal t : c.getTerminals()) {\n+                writeTerminal(t, c, cimNamespace, writer);\n+            }\n+        }\n+        for (DanglingLine dl : network.getDanglingLines()) {\n+            // Terminal for equivalent injection at boundary is always connected\n+            dl.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"EquivalentInjectionTerminal\")\n+                    .ifPresent(tid -> writeTerminal(tid, true, cimNamespace, writer));\n+            // Terminal for boundary side of original line/switch is always connected\n+            dl.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"Terminal_Boundary\")\n+                    .ifPresent(tid -> writeTerminal(tid, true, cimNamespace, writer));\n+        }\n+    }\n+\n+    private static void writeEquivalentInjections(Network network, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        // One equivalent injection for every dangling line\n+        for (DanglingLine dl : network.getDanglingLines()) {\n+            writeEquivalentInjection(dl, cimNamespace, writer);\n+        }\n+    }\n+\n+    private static void writeTapChangers(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (TwoWindingsTransformer twt : network.getTwoWindingsTransformers()) {\n+            if (twt.hasPhaseTapChanger()) {\n+                String ptcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + 1)\n+                        .orElseGet(() -> twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + 2).orElseThrow(PowsyblException::new));\n+                writeTapChanger(twt, ptcId, twt.getPhaseTapChanger(), CgmesNames.PHASE_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+            } else if (twt.hasRatioTapChanger()) {\n+                String rtcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + 1)\n+                        .orElseGet(() -> twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + 2).orElseThrow(PowsyblException::new));\n+                writeTapChanger(twt, rtcId, twt.getRatioTapChanger(), CgmesNames.RATIO_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+            }\n+        }\n+\n+        for (ThreeWindingsTransformer twt : network.getThreeWindingsTransformers()) {\n+            int i = 1;\n+            for (ThreeWindingsTransformer.Leg leg : Arrays.asList(twt.getLeg1(), twt.getLeg2(), twt.getLeg3())) {\n+                if (leg.hasPhaseTapChanger()) {\n+                    String ptcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + i).orElseThrow(PowsyblException::new);\n+                    writeTapChanger(twt, ptcId, leg.getPhaseTapChanger(), CgmesNames.PHASE_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+                } else if (leg.hasRatioTapChanger()) {\n+                    String rtcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + i).orElseThrow(PowsyblException::new);\n+                    writeTapChanger(twt, rtcId, leg.getRatioTapChanger(), CgmesNames.RATIO_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+                }\n+                i++;\n+            }\n+        }\n+    }\n+\n+    private static void writeTapChanger(Identifiable<?> eq, String tcId, TapChanger<?, ?> tc, String defaultType, Map<String, List<RegulatingControlView>> regulatingControlViews, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        String type = eq.getProperty(cgmesTapChangerReferenceKey(tcId, \"type\"), defaultType);\n+        writeTapChanger(type, tcId, tc, cimNamespace, writer);\n+        addRegulatingControlView(tc, tcId, eq, regulatingControlViews);\n+        writeHiddenTapChanger(eq, tcId, defaultType, cimNamespace, writer);\n+    }\n+\n+    private static void writeShuntCompensators(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (ShuntCompensator s : network.getShuntCompensators()) {\n+            String linearNonlinear;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8b6a783de1222ce8136f1387a966fd633eb37a2"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1MjcxOA==", "bodyText": "Add default case and throw an exception", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r529552718", "createdAt": "2020-11-24T13:41:21Z", "author": {"login": "MioRtia"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.cgmes.conversion.export;\n+\n+import com.powsybl.cgmes.conversion.Conversion;\n+import com.powsybl.cgmes.model.CgmesNames;\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.exceptions.UncheckedXmlStreamException;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.extensions.ActivePowerControl;\n+import com.powsybl.iidm.network.extensions.LoadDetail;\n+import com.powsybl.iidm.network.extensions.SlackTerminal;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+import java.util.*;\n+\n+import static com.powsybl.cgmes.model.CgmesNamespace.RDF_NAMESPACE;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ */\n+public final class SteadyStateHypothesisExport {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SteadyStateHypothesisExport.class);\n+\n+    private static final String REGULATING_CONTROL_PROPERTY = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"RegulatingControl\";\n+    private static final String GENERATING_UNIT_PROPERTY = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"GeneratingUnit\";\n+\n+    private SteadyStateHypothesisExport() {\n+    }\n+\n+    public static void write(Network network, XMLStreamWriter writer, CgmesExportContext context) {\n+        final Map<String, List<RegulatingControlView>> regulatingControlViews = new HashMap<>();\n+        String cimNamespace = context.getCimNamespace();\n+\n+        try {\n+            CgmesExportUtil.writeRdfRoot(context.getCimVersion(), writer);\n+\n+            if (context.getCimVersion() == 16) {\n+                CgmesExportUtil.writeModelDescription(writer, context.getSshModelDescription(), context);\n+            }\n+\n+            writeEnergyConsumers(network, cimNamespace, writer);\n+            writeEquivalentInjections(network, cimNamespace, writer);\n+            writeTapChangers(network, cimNamespace, regulatingControlViews, writer);\n+            writeSynchronousMachines(network, cimNamespace, regulatingControlViews, writer);\n+            writeShuntCompensators(network, cimNamespace, regulatingControlViews, writer);\n+            writeStaticVarCompensators(network, cimNamespace, regulatingControlViews, writer);\n+            writeRegulatingControls(regulatingControlViews, cimNamespace, writer);\n+            writeGeneratingUnitsParticitationFactors(network, cimNamespace, writer);\n+            // TODO writeControlAreas\n+            writeTerminals(network, cimNamespace, writer);\n+\n+            writer.writeEndDocument();\n+        } catch (XMLStreamException e) {\n+            throw new UncheckedXmlStreamException(e);\n+        }\n+    }\n+\n+    private static void writeTerminals(Network network, String cimNamespace, XMLStreamWriter writer) {\n+        for (Connectable<?> c : network.getConnectables()) {\n+            for (Terminal t : c.getTerminals()) {\n+                writeTerminal(t, c, cimNamespace, writer);\n+            }\n+        }\n+        for (DanglingLine dl : network.getDanglingLines()) {\n+            // Terminal for equivalent injection at boundary is always connected\n+            dl.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"EquivalentInjectionTerminal\")\n+                    .ifPresent(tid -> writeTerminal(tid, true, cimNamespace, writer));\n+            // Terminal for boundary side of original line/switch is always connected\n+            dl.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"Terminal_Boundary\")\n+                    .ifPresent(tid -> writeTerminal(tid, true, cimNamespace, writer));\n+        }\n+    }\n+\n+    private static void writeEquivalentInjections(Network network, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        // One equivalent injection for every dangling line\n+        for (DanglingLine dl : network.getDanglingLines()) {\n+            writeEquivalentInjection(dl, cimNamespace, writer);\n+        }\n+    }\n+\n+    private static void writeTapChangers(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (TwoWindingsTransformer twt : network.getTwoWindingsTransformers()) {\n+            if (twt.hasPhaseTapChanger()) {\n+                String ptcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + 1)\n+                        .orElseGet(() -> twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + 2).orElseThrow(PowsyblException::new));\n+                writeTapChanger(twt, ptcId, twt.getPhaseTapChanger(), CgmesNames.PHASE_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+            } else if (twt.hasRatioTapChanger()) {\n+                String rtcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + 1)\n+                        .orElseGet(() -> twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + 2).orElseThrow(PowsyblException::new));\n+                writeTapChanger(twt, rtcId, twt.getRatioTapChanger(), CgmesNames.RATIO_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+            }\n+        }\n+\n+        for (ThreeWindingsTransformer twt : network.getThreeWindingsTransformers()) {\n+            int i = 1;\n+            for (ThreeWindingsTransformer.Leg leg : Arrays.asList(twt.getLeg1(), twt.getLeg2(), twt.getLeg3())) {\n+                if (leg.hasPhaseTapChanger()) {\n+                    String ptcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + i).orElseThrow(PowsyblException::new);\n+                    writeTapChanger(twt, ptcId, leg.getPhaseTapChanger(), CgmesNames.PHASE_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+                } else if (leg.hasRatioTapChanger()) {\n+                    String rtcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + i).orElseThrow(PowsyblException::new);\n+                    writeTapChanger(twt, rtcId, leg.getRatioTapChanger(), CgmesNames.RATIO_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+                }\n+                i++;\n+            }\n+        }\n+    }\n+\n+    private static void writeTapChanger(Identifiable<?> eq, String tcId, TapChanger<?, ?> tc, String defaultType, Map<String, List<RegulatingControlView>> regulatingControlViews, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        String type = eq.getProperty(cgmesTapChangerReferenceKey(tcId, \"type\"), defaultType);\n+        writeTapChanger(type, tcId, tc, cimNamespace, writer);\n+        addRegulatingControlView(tc, tcId, eq, regulatingControlViews);\n+        writeHiddenTapChanger(eq, tcId, defaultType, cimNamespace, writer);\n+    }\n+\n+    private static void writeShuntCompensators(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (ShuntCompensator s : network.getShuntCompensators()) {\n+            String linearNonlinear;\n+            switch (s.getModelType()) {\n+                case LINEAR:\n+                    linearNonlinear = \"Linear\";\n+                    break;\n+                case NON_LINEAR:\n+                    linearNonlinear = \"Nonlinear\";\n+                    break;\n+                default:\n+                    linearNonlinear = \"\";\n+                    break;\n+            }\n+            boolean controlEnabled = s.isVoltageRegulatorOn();\n+            writer.writeStartElement(cimNamespace, linearNonlinear + \"ShuntCompensator\");\n+            writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + s.getId());\n+            writer.writeStartElement(cimNamespace, \"ShuntCompensator.sections\");\n+            writer.writeCharacters(CgmesExportUtil.format(s.getSectionCount()));\n+            writer.writeEndElement();\n+            writer.writeStartElement(cimNamespace, \"RegulatingCondEq.controlEnabled\");\n+            writer.writeCharacters(Boolean.toString(controlEnabled));\n+            writer.writeEndElement();\n+            writer.writeEndElement();\n+            addRegulatingControlView(s, regulatingControlViews);\n+        }\n+    }\n+\n+    private static void addRegulatingControlView(ShuntCompensator s, Map<String, List<RegulatingControlView>> regulatingControlViews) {\n+        if (s.hasProperty(REGULATING_CONTROL_PROPERTY)) {\n+            // PowSyBl has considered the control as discrete, with a certain targetDeadband\n+            // The target value is stored in kV by PowSyBl, so unit multiplier is \"k\"\n+            String rcid = s.getProperty(REGULATING_CONTROL_PROPERTY);\n+            RegulatingControlView rcv = new RegulatingControlView(rcid, RegulatingControlType.REGULATING_CONTROL, true,\n+                s.isVoltageRegulatorOn(), s.getTargetDeadband(), s.getTargetV(), \"k\");\n+            regulatingControlViews.computeIfAbsent(rcid, k -> new ArrayList<>()).add(rcv);\n+        }\n+    }\n+\n+    private static void writeSynchronousMachines(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (Generator g : network.getGenerators()) {\n+            boolean controlEnabled = g.isVoltageRegulatorOn();\n+            writer.writeStartElement(cimNamespace, \"SynchronousMachine\");\n+            writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + g.getId());\n+            writer.writeStartElement(cimNamespace, \"RegulatingCondEq.controlEnabled\");\n+            writer.writeCharacters(Boolean.toString(controlEnabled));\n+            writer.writeEndElement();\n+            writer.writeStartElement(cimNamespace, \"RotatingMachine.p\");\n+            writer.writeCharacters(CgmesExportUtil.format(g.getTerminal().getP()));\n+            writer.writeEndElement();\n+            writer.writeStartElement(cimNamespace, \"RotatingMachine.q\");\n+            writer.writeCharacters(CgmesExportUtil.format(g.getTerminal().getQ()));\n+            writer.writeEndElement();\n+            writer.writeStartElement(cimNamespace, \"SynchronousMachine.referencePriority\");\n+            // reference priority is used for angle reference selection (slack)\n+            writer.writeCharacters(isInSlackBus(g) ? \"1\" : \"0\");\n+            writer.writeEndElement();\n+            writer.writeEmptyElement(cimNamespace, \"SynchronousMachine.operatingMode\");\n+            // All generators in PowSyBl are considered as generator, not motor\n+            writer.writeAttribute(RDF_NAMESPACE, CgmesNames.RESOURCE, cimNamespace + \"SynchronousMachineOperatingMode.generator\");\n+            writer.writeEndElement();\n+\n+            addRegulatingControlView(g, regulatingControlViews);\n+        }\n+    }\n+\n+    private static void addRegulatingControlView(Generator g, Map<String, List<RegulatingControlView>> regulatingControlViews) {\n+        if (g.hasProperty(REGULATING_CONTROL_PROPERTY)) {\n+            // PowSyBl has considered the control as continuous and with targetDeadband of size 0\n+            // The target value is stored in kV by PowSyBl, so unit multiplier is \"k\"\n+            String rcid = g.getProperty(REGULATING_CONTROL_PROPERTY);\n+            double targetDeadband = 0;\n+            RegulatingControlView rcv = new RegulatingControlView(rcid, RegulatingControlType.REGULATING_CONTROL, false,\n+                g.isVoltageRegulatorOn(), targetDeadband, g.getTargetV(), \"k\");\n+            regulatingControlViews.computeIfAbsent(rcid, k -> new ArrayList<>()).add(rcv);\n+        }\n+    }\n+\n+    private static void writeStaticVarCompensators(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (StaticVarCompensator svc : network.getStaticVarCompensators()) {\n+            StaticVarCompensator.RegulationMode regulationMode = svc.getRegulationMode();\n+            boolean controlEnabled = regulationMode != StaticVarCompensator.RegulationMode.OFF;\n+            writer.writeStartElement(cimNamespace, \"StaticVarCompensator\");\n+            writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + svc.getId());\n+            writer.writeStartElement(cimNamespace, \"RegulatingCondEq.controlEnabled\");\n+            writer.writeCharacters(Boolean.toString(controlEnabled));\n+            writer.writeEndElement();\n+            writer.writeStartElement(cimNamespace, \"StaticVarCompensator.q\");\n+            writer.writeCharacters(CgmesExportUtil.format(svc.getTerminal().getQ()));\n+            writer.writeEndElement();\n+            writer.writeEndElement();\n+\n+            if (svc.hasProperty(REGULATING_CONTROL_PROPERTY)) {\n+                String rcid = svc.getProperty(REGULATING_CONTROL_PROPERTY);\n+                double targetDeadband = 0;\n+                // Regulating control could be reactive power or voltage\n+                double targetValue;\n+                String multiplier;\n+                if (regulationMode == StaticVarCompensator.RegulationMode.VOLTAGE) {\n+                    targetValue = svc.getVoltageSetpoint();\n+                    multiplier = \"k\";\n+                } else if (regulationMode == StaticVarCompensator.RegulationMode.REACTIVE_POWER) {\n+                    targetValue = svc.getReactivePowerSetpoint();\n+                    multiplier = \"M\";\n+                } else {\n+                    targetValue = 0;\n+                    multiplier = \"k\";\n+                }\n+                RegulatingControlView rcv = new RegulatingControlView(rcid, RegulatingControlType.REGULATING_CONTROL, false,\n+                        controlEnabled, targetDeadband, targetValue, multiplier);\n+                regulatingControlViews.computeIfAbsent(rcid, k -> new ArrayList<>()).add(rcv);\n+            }\n+        }\n+    }\n+\n+    private static boolean isInSlackBus(Generator g) {\n+        VoltageLevel vl = g.getTerminal().getVoltageLevel();\n+        SlackTerminal slackTerminal = vl.getExtension(SlackTerminal.class);\n+        if (slackTerminal != null) {\n+            Bus slackBus = slackTerminal.getTerminal().getBusBreakerView().getBus();\n+            if (slackBus == g.getTerminal().getBusBreakerView().getBus()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private static void writeTapChanger(String type, String id, TapChanger<?, ?> tc, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        writeTapChanger(type, id, tc.isRegulating(), tc.getTapPosition(), cimNamespace, writer);\n+    }\n+\n+    private static void writeTapChanger(String type, String id, boolean controlEnabled, int step, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        writer.writeStartElement(cimNamespace, type);\n+        writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + id);\n+        writer.writeStartElement(cimNamespace, \"TapChanger.controlEnabled\");\n+        writer.writeCharacters(Boolean.toString(controlEnabled));\n+        writer.writeEndElement();\n+        writer.writeStartElement(cimNamespace, \"TapChanger.step\");\n+        writer.writeCharacters(CgmesExportUtil.format(step));\n+        writer.writeEndElement();\n+        writer.writeEndElement();\n+    }\n+\n+    private static void addRegulatingControlView(TapChanger tc, String tcId, Identifiable<?> eq, Map<String, List<RegulatingControlView>> regulatingControlViews) {\n+        // Multiple tap changers can be stored at the same equipment\n+        // We use the tap changer id as part of the key for storing the tap changer control id\n+        String key = String.format(\"%s%s.TapChangerControl\", Conversion.CGMES_PREFIX_ALIAS_PROPERTIES, tcId);\n+        if (eq.hasProperty(key)) {\n+            String controlId = eq.getProperty(key);\n+            RegulatingControlView rcv = null;\n+            if (tc instanceof RatioTapChanger) {\n+                rcv = new RegulatingControlView(controlId,\n+                        RegulatingControlType.TAP_CHANGER_CONTROL,\n+                        true,\n+                        tc.isRegulating(),\n+                        tc.getTargetDeadband(),\n+                        ((RatioTapChanger) tc).getTargetV(),\n+                        // Unit multiplier is k for ratio tap changers (regulation value is a voltage in kV)\n+                        \"k\");\n+            } else if (tc instanceof PhaseTapChanger) {\n+                rcv = new RegulatingControlView(controlId,\n+                        RegulatingControlType.TAP_CHANGER_CONTROL,\n+                        true,\n+                        tc.isRegulating(),\n+                        tc.getTargetDeadband(),\n+                        ((PhaseTapChanger) tc).getRegulationValue(),\n+                        // Unit multiplier is M for phase tap changers (regulation value is an active power flow in MW)\n+                        \"M\");\n+            }\n+            if (rcv != null) {\n+                regulatingControlViews.computeIfAbsent(controlId, k -> new ArrayList<>()).add(rcv);\n+            }\n+        }\n+    }\n+\n+    private static String cgmesTapChangerReferenceKey(String tcId, String property) {\n+        return String.format(\"%s%s.%s\", Conversion.CGMES_PREFIX_ALIAS_PROPERTIES, tcId, property);\n+    }\n+\n+    private static void writeHiddenTapChanger(Identifiable<?> eq, String tcId, String defaultType, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        String key = cgmesTapChangerReferenceKey(tcId, \"hiddenTapChangerId\");\n+        if (!eq.hasProperty(key)) {\n+            return;\n+        }\n+        String hiddenTcId = eq.getProperty(key);\n+        int step = Integer.parseInt(eq.getProperty(cgmesTapChangerReferenceKey(hiddenTcId, \"step\")));\n+        String type = eq.getProperty(cgmesTapChangerReferenceKey(hiddenTcId, \"type\"), defaultType);\n+        writeTapChanger(type, hiddenTcId, false, step, cimNamespace, writer);\n+    }\n+\n+    private static void writeRegulatingControls(Map<String, List<RegulatingControlView>> regulatingControlViews, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        for (List<RegulatingControlView> views : regulatingControlViews.values()) {\n+            writeRegulatingControl(combineRegulatingControlViews(views), cimNamespace, writer);\n+        }\n+    }\n+\n+    private static RegulatingControlView combineRegulatingControlViews(List<RegulatingControlView> rcs) {\n+        RegulatingControlView combined = rcs.get(0);\n+        if (rcs.size() > 1) {\n+            LOG.warn(\"Multiple views ({}) for regulating control {} are combined\", rcs.size(), rcs.get(0).id);\n+        }\n+        for (int k = 1; k < rcs.size(); k++) {\n+            RegulatingControlView current = rcs.get(k);\n+            if (combined.targetDeadband == 0 && current.targetDeadband > 0) {\n+                combined.targetDeadband = current.targetDeadband;\n+            }\n+            if (!combined.discrete && current.discrete) {\n+                combined.discrete = true;\n+            }\n+            if (!combined.controlEnabled && current.controlEnabled) {\n+                combined.controlEnabled = true;\n+            }\n+        }\n+        return combined;\n+    }\n+\n+    private static void writeRegulatingControl(RegulatingControlView rc, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        writer.writeStartElement(cimNamespace, regulatingControlClassname(rc.type));\n+        writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + rc.id);\n+        writer.writeStartElement(cimNamespace, \"RegulatingControl.discrete\");\n+        writer.writeCharacters(Boolean.toString(rc.discrete));\n+        writer.writeEndElement();\n+        writer.writeStartElement(cimNamespace, \"RegulatingControl.enabled\");\n+        writer.writeCharacters(Boolean.toString(rc.controlEnabled));\n+        writer.writeEndElement();\n+        writer.writeStartElement(cimNamespace, \"RegulatingControl.targetDeadband\");\n+        writer.writeCharacters(CgmesExportUtil.format(rc.targetDeadband));\n+        writer.writeEndElement();\n+        writer.writeStartElement(cimNamespace, \"RegulatingControl.targetValue\");\n+        writer.writeCharacters(CgmesExportUtil.format(rc.targetValue));\n+        writer.writeEndElement();\n+        writer.writeEmptyElement(cimNamespace, \"RegulatingControl.targetValueUnitMultiplier\");\n+        writer.writeAttribute(RDF_NAMESPACE, \"resource\", cimNamespace + \"UnitMultiplier.\" + rc.targetValueUnitMultiplier);\n+        writer.writeEndElement();\n+    }\n+\n+    private static String regulatingControlClassname(RegulatingControlType type) {\n+        if (type == RegulatingControlType.TAP_CHANGER_CONTROL) {\n+            return \"TapChangerControl\";\n+        } else {\n+            return \"RegulatingControl\";\n+        }\n+    }\n+\n+    private static void writeTerminal(Terminal t, Connectable<?> c, String cimNamespace, XMLStreamWriter writer) {\n+        Optional<String> tid;\n+        if (c instanceof DanglingLine) {\n+            tid = c.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"Terminal_Network\");\n+        } else {\n+            int numt = 0;\n+            if (c.getTerminals().size() == 1) {\n+                numt = 1;\n+            } else {\n+                if (c instanceof Injection) {\n+                    // An injection should have only one terminal\n+                } else if (c instanceof Branch) {\n+                    switch (((Branch<?>) c).getSide(t)) {\n+                        case ONE:\n+                            numt = 1;\n+                            break;\n+                        case TWO:\n+                            numt = 2;\n+                            break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8b6a783de1222ce8136f1387a966fd633eb37a2"}, "originalPosition": 388}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1MjgxOQ==", "bodyText": "Same remark", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r529552819", "createdAt": "2020-11-24T13:41:29Z", "author": {"login": "MioRtia"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.cgmes.conversion.export;\n+\n+import com.powsybl.cgmes.conversion.Conversion;\n+import com.powsybl.cgmes.model.CgmesNames;\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.exceptions.UncheckedXmlStreamException;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.extensions.ActivePowerControl;\n+import com.powsybl.iidm.network.extensions.LoadDetail;\n+import com.powsybl.iidm.network.extensions.SlackTerminal;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+import java.util.*;\n+\n+import static com.powsybl.cgmes.model.CgmesNamespace.RDF_NAMESPACE;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ */\n+public final class SteadyStateHypothesisExport {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SteadyStateHypothesisExport.class);\n+\n+    private static final String REGULATING_CONTROL_PROPERTY = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"RegulatingControl\";\n+    private static final String GENERATING_UNIT_PROPERTY = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"GeneratingUnit\";\n+\n+    private SteadyStateHypothesisExport() {\n+    }\n+\n+    public static void write(Network network, XMLStreamWriter writer, CgmesExportContext context) {\n+        final Map<String, List<RegulatingControlView>> regulatingControlViews = new HashMap<>();\n+        String cimNamespace = context.getCimNamespace();\n+\n+        try {\n+            CgmesExportUtil.writeRdfRoot(context.getCimVersion(), writer);\n+\n+            if (context.getCimVersion() == 16) {\n+                CgmesExportUtil.writeModelDescription(writer, context.getSshModelDescription(), context);\n+            }\n+\n+            writeEnergyConsumers(network, cimNamespace, writer);\n+            writeEquivalentInjections(network, cimNamespace, writer);\n+            writeTapChangers(network, cimNamespace, regulatingControlViews, writer);\n+            writeSynchronousMachines(network, cimNamespace, regulatingControlViews, writer);\n+            writeShuntCompensators(network, cimNamespace, regulatingControlViews, writer);\n+            writeStaticVarCompensators(network, cimNamespace, regulatingControlViews, writer);\n+            writeRegulatingControls(regulatingControlViews, cimNamespace, writer);\n+            writeGeneratingUnitsParticitationFactors(network, cimNamespace, writer);\n+            // TODO writeControlAreas\n+            writeTerminals(network, cimNamespace, writer);\n+\n+            writer.writeEndDocument();\n+        } catch (XMLStreamException e) {\n+            throw new UncheckedXmlStreamException(e);\n+        }\n+    }\n+\n+    private static void writeTerminals(Network network, String cimNamespace, XMLStreamWriter writer) {\n+        for (Connectable<?> c : network.getConnectables()) {\n+            for (Terminal t : c.getTerminals()) {\n+                writeTerminal(t, c, cimNamespace, writer);\n+            }\n+        }\n+        for (DanglingLine dl : network.getDanglingLines()) {\n+            // Terminal for equivalent injection at boundary is always connected\n+            dl.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"EquivalentInjectionTerminal\")\n+                    .ifPresent(tid -> writeTerminal(tid, true, cimNamespace, writer));\n+            // Terminal for boundary side of original line/switch is always connected\n+            dl.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"Terminal_Boundary\")\n+                    .ifPresent(tid -> writeTerminal(tid, true, cimNamespace, writer));\n+        }\n+    }\n+\n+    private static void writeEquivalentInjections(Network network, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        // One equivalent injection for every dangling line\n+        for (DanglingLine dl : network.getDanglingLines()) {\n+            writeEquivalentInjection(dl, cimNamespace, writer);\n+        }\n+    }\n+\n+    private static void writeTapChangers(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (TwoWindingsTransformer twt : network.getTwoWindingsTransformers()) {\n+            if (twt.hasPhaseTapChanger()) {\n+                String ptcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + 1)\n+                        .orElseGet(() -> twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + 2).orElseThrow(PowsyblException::new));\n+                writeTapChanger(twt, ptcId, twt.getPhaseTapChanger(), CgmesNames.PHASE_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+            } else if (twt.hasRatioTapChanger()) {\n+                String rtcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + 1)\n+                        .orElseGet(() -> twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + 2).orElseThrow(PowsyblException::new));\n+                writeTapChanger(twt, rtcId, twt.getRatioTapChanger(), CgmesNames.RATIO_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+            }\n+        }\n+\n+        for (ThreeWindingsTransformer twt : network.getThreeWindingsTransformers()) {\n+            int i = 1;\n+            for (ThreeWindingsTransformer.Leg leg : Arrays.asList(twt.getLeg1(), twt.getLeg2(), twt.getLeg3())) {\n+                if (leg.hasPhaseTapChanger()) {\n+                    String ptcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + i).orElseThrow(PowsyblException::new);\n+                    writeTapChanger(twt, ptcId, leg.getPhaseTapChanger(), CgmesNames.PHASE_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+                } else if (leg.hasRatioTapChanger()) {\n+                    String rtcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + i).orElseThrow(PowsyblException::new);\n+                    writeTapChanger(twt, rtcId, leg.getRatioTapChanger(), CgmesNames.RATIO_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+                }\n+                i++;\n+            }\n+        }\n+    }\n+\n+    private static void writeTapChanger(Identifiable<?> eq, String tcId, TapChanger<?, ?> tc, String defaultType, Map<String, List<RegulatingControlView>> regulatingControlViews, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        String type = eq.getProperty(cgmesTapChangerReferenceKey(tcId, \"type\"), defaultType);\n+        writeTapChanger(type, tcId, tc, cimNamespace, writer);\n+        addRegulatingControlView(tc, tcId, eq, regulatingControlViews);\n+        writeHiddenTapChanger(eq, tcId, defaultType, cimNamespace, writer);\n+    }\n+\n+    private static void writeShuntCompensators(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (ShuntCompensator s : network.getShuntCompensators()) {\n+            String linearNonlinear;\n+            switch (s.getModelType()) {\n+                case LINEAR:\n+                    linearNonlinear = \"Linear\";\n+                    break;\n+                case NON_LINEAR:\n+                    linearNonlinear = \"Nonlinear\";\n+                    break;\n+                default:\n+                    linearNonlinear = \"\";\n+                    break;\n+            }\n+            boolean controlEnabled = s.isVoltageRegulatorOn();\n+            writer.writeStartElement(cimNamespace, linearNonlinear + \"ShuntCompensator\");\n+            writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + s.getId());\n+            writer.writeStartElement(cimNamespace, \"ShuntCompensator.sections\");\n+            writer.writeCharacters(CgmesExportUtil.format(s.getSectionCount()));\n+            writer.writeEndElement();\n+            writer.writeStartElement(cimNamespace, \"RegulatingCondEq.controlEnabled\");\n+            writer.writeCharacters(Boolean.toString(controlEnabled));\n+            writer.writeEndElement();\n+            writer.writeEndElement();\n+            addRegulatingControlView(s, regulatingControlViews);\n+        }\n+    }\n+\n+    private static void addRegulatingControlView(ShuntCompensator s, Map<String, List<RegulatingControlView>> regulatingControlViews) {\n+        if (s.hasProperty(REGULATING_CONTROL_PROPERTY)) {\n+            // PowSyBl has considered the control as discrete, with a certain targetDeadband\n+            // The target value is stored in kV by PowSyBl, so unit multiplier is \"k\"\n+            String rcid = s.getProperty(REGULATING_CONTROL_PROPERTY);\n+            RegulatingControlView rcv = new RegulatingControlView(rcid, RegulatingControlType.REGULATING_CONTROL, true,\n+                s.isVoltageRegulatorOn(), s.getTargetDeadband(), s.getTargetV(), \"k\");\n+            regulatingControlViews.computeIfAbsent(rcid, k -> new ArrayList<>()).add(rcv);\n+        }\n+    }\n+\n+    private static void writeSynchronousMachines(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (Generator g : network.getGenerators()) {\n+            boolean controlEnabled = g.isVoltageRegulatorOn();\n+            writer.writeStartElement(cimNamespace, \"SynchronousMachine\");\n+            writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + g.getId());\n+            writer.writeStartElement(cimNamespace, \"RegulatingCondEq.controlEnabled\");\n+            writer.writeCharacters(Boolean.toString(controlEnabled));\n+            writer.writeEndElement();\n+            writer.writeStartElement(cimNamespace, \"RotatingMachine.p\");\n+            writer.writeCharacters(CgmesExportUtil.format(g.getTerminal().getP()));\n+            writer.writeEndElement();\n+            writer.writeStartElement(cimNamespace, \"RotatingMachine.q\");\n+            writer.writeCharacters(CgmesExportUtil.format(g.getTerminal().getQ()));\n+            writer.writeEndElement();\n+            writer.writeStartElement(cimNamespace, \"SynchronousMachine.referencePriority\");\n+            // reference priority is used for angle reference selection (slack)\n+            writer.writeCharacters(isInSlackBus(g) ? \"1\" : \"0\");\n+            writer.writeEndElement();\n+            writer.writeEmptyElement(cimNamespace, \"SynchronousMachine.operatingMode\");\n+            // All generators in PowSyBl are considered as generator, not motor\n+            writer.writeAttribute(RDF_NAMESPACE, CgmesNames.RESOURCE, cimNamespace + \"SynchronousMachineOperatingMode.generator\");\n+            writer.writeEndElement();\n+\n+            addRegulatingControlView(g, regulatingControlViews);\n+        }\n+    }\n+\n+    private static void addRegulatingControlView(Generator g, Map<String, List<RegulatingControlView>> regulatingControlViews) {\n+        if (g.hasProperty(REGULATING_CONTROL_PROPERTY)) {\n+            // PowSyBl has considered the control as continuous and with targetDeadband of size 0\n+            // The target value is stored in kV by PowSyBl, so unit multiplier is \"k\"\n+            String rcid = g.getProperty(REGULATING_CONTROL_PROPERTY);\n+            double targetDeadband = 0;\n+            RegulatingControlView rcv = new RegulatingControlView(rcid, RegulatingControlType.REGULATING_CONTROL, false,\n+                g.isVoltageRegulatorOn(), targetDeadband, g.getTargetV(), \"k\");\n+            regulatingControlViews.computeIfAbsent(rcid, k -> new ArrayList<>()).add(rcv);\n+        }\n+    }\n+\n+    private static void writeStaticVarCompensators(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (StaticVarCompensator svc : network.getStaticVarCompensators()) {\n+            StaticVarCompensator.RegulationMode regulationMode = svc.getRegulationMode();\n+            boolean controlEnabled = regulationMode != StaticVarCompensator.RegulationMode.OFF;\n+            writer.writeStartElement(cimNamespace, \"StaticVarCompensator\");\n+            writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + svc.getId());\n+            writer.writeStartElement(cimNamespace, \"RegulatingCondEq.controlEnabled\");\n+            writer.writeCharacters(Boolean.toString(controlEnabled));\n+            writer.writeEndElement();\n+            writer.writeStartElement(cimNamespace, \"StaticVarCompensator.q\");\n+            writer.writeCharacters(CgmesExportUtil.format(svc.getTerminal().getQ()));\n+            writer.writeEndElement();\n+            writer.writeEndElement();\n+\n+            if (svc.hasProperty(REGULATING_CONTROL_PROPERTY)) {\n+                String rcid = svc.getProperty(REGULATING_CONTROL_PROPERTY);\n+                double targetDeadband = 0;\n+                // Regulating control could be reactive power or voltage\n+                double targetValue;\n+                String multiplier;\n+                if (regulationMode == StaticVarCompensator.RegulationMode.VOLTAGE) {\n+                    targetValue = svc.getVoltageSetpoint();\n+                    multiplier = \"k\";\n+                } else if (regulationMode == StaticVarCompensator.RegulationMode.REACTIVE_POWER) {\n+                    targetValue = svc.getReactivePowerSetpoint();\n+                    multiplier = \"M\";\n+                } else {\n+                    targetValue = 0;\n+                    multiplier = \"k\";\n+                }\n+                RegulatingControlView rcv = new RegulatingControlView(rcid, RegulatingControlType.REGULATING_CONTROL, false,\n+                        controlEnabled, targetDeadband, targetValue, multiplier);\n+                regulatingControlViews.computeIfAbsent(rcid, k -> new ArrayList<>()).add(rcv);\n+            }\n+        }\n+    }\n+\n+    private static boolean isInSlackBus(Generator g) {\n+        VoltageLevel vl = g.getTerminal().getVoltageLevel();\n+        SlackTerminal slackTerminal = vl.getExtension(SlackTerminal.class);\n+        if (slackTerminal != null) {\n+            Bus slackBus = slackTerminal.getTerminal().getBusBreakerView().getBus();\n+            if (slackBus == g.getTerminal().getBusBreakerView().getBus()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private static void writeTapChanger(String type, String id, TapChanger<?, ?> tc, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        writeTapChanger(type, id, tc.isRegulating(), tc.getTapPosition(), cimNamespace, writer);\n+    }\n+\n+    private static void writeTapChanger(String type, String id, boolean controlEnabled, int step, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        writer.writeStartElement(cimNamespace, type);\n+        writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + id);\n+        writer.writeStartElement(cimNamespace, \"TapChanger.controlEnabled\");\n+        writer.writeCharacters(Boolean.toString(controlEnabled));\n+        writer.writeEndElement();\n+        writer.writeStartElement(cimNamespace, \"TapChanger.step\");\n+        writer.writeCharacters(CgmesExportUtil.format(step));\n+        writer.writeEndElement();\n+        writer.writeEndElement();\n+    }\n+\n+    private static void addRegulatingControlView(TapChanger tc, String tcId, Identifiable<?> eq, Map<String, List<RegulatingControlView>> regulatingControlViews) {\n+        // Multiple tap changers can be stored at the same equipment\n+        // We use the tap changer id as part of the key for storing the tap changer control id\n+        String key = String.format(\"%s%s.TapChangerControl\", Conversion.CGMES_PREFIX_ALIAS_PROPERTIES, tcId);\n+        if (eq.hasProperty(key)) {\n+            String controlId = eq.getProperty(key);\n+            RegulatingControlView rcv = null;\n+            if (tc instanceof RatioTapChanger) {\n+                rcv = new RegulatingControlView(controlId,\n+                        RegulatingControlType.TAP_CHANGER_CONTROL,\n+                        true,\n+                        tc.isRegulating(),\n+                        tc.getTargetDeadband(),\n+                        ((RatioTapChanger) tc).getTargetV(),\n+                        // Unit multiplier is k for ratio tap changers (regulation value is a voltage in kV)\n+                        \"k\");\n+            } else if (tc instanceof PhaseTapChanger) {\n+                rcv = new RegulatingControlView(controlId,\n+                        RegulatingControlType.TAP_CHANGER_CONTROL,\n+                        true,\n+                        tc.isRegulating(),\n+                        tc.getTargetDeadband(),\n+                        ((PhaseTapChanger) tc).getRegulationValue(),\n+                        // Unit multiplier is M for phase tap changers (regulation value is an active power flow in MW)\n+                        \"M\");\n+            }\n+            if (rcv != null) {\n+                regulatingControlViews.computeIfAbsent(controlId, k -> new ArrayList<>()).add(rcv);\n+            }\n+        }\n+    }\n+\n+    private static String cgmesTapChangerReferenceKey(String tcId, String property) {\n+        return String.format(\"%s%s.%s\", Conversion.CGMES_PREFIX_ALIAS_PROPERTIES, tcId, property);\n+    }\n+\n+    private static void writeHiddenTapChanger(Identifiable<?> eq, String tcId, String defaultType, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        String key = cgmesTapChangerReferenceKey(tcId, \"hiddenTapChangerId\");\n+        if (!eq.hasProperty(key)) {\n+            return;\n+        }\n+        String hiddenTcId = eq.getProperty(key);\n+        int step = Integer.parseInt(eq.getProperty(cgmesTapChangerReferenceKey(hiddenTcId, \"step\")));\n+        String type = eq.getProperty(cgmesTapChangerReferenceKey(hiddenTcId, \"type\"), defaultType);\n+        writeTapChanger(type, hiddenTcId, false, step, cimNamespace, writer);\n+    }\n+\n+    private static void writeRegulatingControls(Map<String, List<RegulatingControlView>> regulatingControlViews, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        for (List<RegulatingControlView> views : regulatingControlViews.values()) {\n+            writeRegulatingControl(combineRegulatingControlViews(views), cimNamespace, writer);\n+        }\n+    }\n+\n+    private static RegulatingControlView combineRegulatingControlViews(List<RegulatingControlView> rcs) {\n+        RegulatingControlView combined = rcs.get(0);\n+        if (rcs.size() > 1) {\n+            LOG.warn(\"Multiple views ({}) for regulating control {} are combined\", rcs.size(), rcs.get(0).id);\n+        }\n+        for (int k = 1; k < rcs.size(); k++) {\n+            RegulatingControlView current = rcs.get(k);\n+            if (combined.targetDeadband == 0 && current.targetDeadband > 0) {\n+                combined.targetDeadband = current.targetDeadband;\n+            }\n+            if (!combined.discrete && current.discrete) {\n+                combined.discrete = true;\n+            }\n+            if (!combined.controlEnabled && current.controlEnabled) {\n+                combined.controlEnabled = true;\n+            }\n+        }\n+        return combined;\n+    }\n+\n+    private static void writeRegulatingControl(RegulatingControlView rc, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        writer.writeStartElement(cimNamespace, regulatingControlClassname(rc.type));\n+        writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + rc.id);\n+        writer.writeStartElement(cimNamespace, \"RegulatingControl.discrete\");\n+        writer.writeCharacters(Boolean.toString(rc.discrete));\n+        writer.writeEndElement();\n+        writer.writeStartElement(cimNamespace, \"RegulatingControl.enabled\");\n+        writer.writeCharacters(Boolean.toString(rc.controlEnabled));\n+        writer.writeEndElement();\n+        writer.writeStartElement(cimNamespace, \"RegulatingControl.targetDeadband\");\n+        writer.writeCharacters(CgmesExportUtil.format(rc.targetDeadband));\n+        writer.writeEndElement();\n+        writer.writeStartElement(cimNamespace, \"RegulatingControl.targetValue\");\n+        writer.writeCharacters(CgmesExportUtil.format(rc.targetValue));\n+        writer.writeEndElement();\n+        writer.writeEmptyElement(cimNamespace, \"RegulatingControl.targetValueUnitMultiplier\");\n+        writer.writeAttribute(RDF_NAMESPACE, \"resource\", cimNamespace + \"UnitMultiplier.\" + rc.targetValueUnitMultiplier);\n+        writer.writeEndElement();\n+    }\n+\n+    private static String regulatingControlClassname(RegulatingControlType type) {\n+        if (type == RegulatingControlType.TAP_CHANGER_CONTROL) {\n+            return \"TapChangerControl\";\n+        } else {\n+            return \"RegulatingControl\";\n+        }\n+    }\n+\n+    private static void writeTerminal(Terminal t, Connectable<?> c, String cimNamespace, XMLStreamWriter writer) {\n+        Optional<String> tid;\n+        if (c instanceof DanglingLine) {\n+            tid = c.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"Terminal_Network\");\n+        } else {\n+            int numt = 0;\n+            if (c.getTerminals().size() == 1) {\n+                numt = 1;\n+            } else {\n+                if (c instanceof Injection) {\n+                    // An injection should have only one terminal\n+                } else if (c instanceof Branch) {\n+                    switch (((Branch<?>) c).getSide(t)) {\n+                        case ONE:\n+                            numt = 1;\n+                            break;\n+                        case TWO:\n+                            numt = 2;\n+                            break;\n+                    }\n+                } else if (c instanceof ThreeWindingsTransformer) {\n+                    switch (((ThreeWindingsTransformer) c).getSide(t)) {\n+                        case ONE:\n+                            numt = 1;\n+                            break;\n+                        case TWO:\n+                            numt = 2;\n+                            break;\n+                        case THREE:\n+                            numt = 3;\n+                            break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8b6a783de1222ce8136f1387a966fd633eb37a2"}, "originalPosition": 400}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "991cb69ac2bf2780c1ac4e0eb1775e350253ea3e", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/991cb69ac2bf2780c1ac4e0eb1775e350253ea3e", "committedDate": "2020-11-24T15:56:45Z", "message": "after reviewer feedback\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MjMxNzk2", "url": "https://github.com/powsybl/powsybl-core/pull/1485#pullrequestreview-538231796", "createdAt": "2020-11-25T07:55:12Z", "commit": {"oid": "991cb69ac2bf2780c1ac4e0eb1775e350253ea3e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzo1NToxMlrOH5m7bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzo1NToxMlrOH5m7bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE2ODY4NQ==", "bodyText": "I think it is not the case when this method is called but the defaultType should be tabular", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r530168685", "createdAt": "2020-11-25T07:55:12Z", "author": {"login": "MioRtia"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java", "diffHunk": "@@ -0,0 +1,580 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.cgmes.conversion.export;\n+\n+import com.powsybl.cgmes.conversion.Conversion;\n+import com.powsybl.cgmes.model.CgmesNames;\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.exceptions.UncheckedXmlStreamException;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.extensions.ActivePowerControl;\n+import com.powsybl.iidm.network.extensions.LoadDetail;\n+import com.powsybl.iidm.network.extensions.SlackTerminal;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+import java.util.*;\n+\n+import static com.powsybl.cgmes.model.CgmesNamespace.RDF_NAMESPACE;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ */\n+public final class SteadyStateHypothesisExport {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SteadyStateHypothesisExport.class);\n+\n+    private static final String REGULATING_CONTROL_PROPERTY = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"RegulatingControl\";\n+    private static final String GENERATING_UNIT_PROPERTY = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"GeneratingUnit\";\n+\n+    private SteadyStateHypothesisExport() {\n+    }\n+\n+    public static void write(Network network, XMLStreamWriter writer, CgmesExportContext context) {\n+        final Map<String, List<RegulatingControlView>> regulatingControlViews = new HashMap<>();\n+        String cimNamespace = context.getCimNamespace();\n+\n+        try {\n+            CgmesExportUtil.writeRdfRoot(context.getCimVersion(), writer);\n+\n+            if (context.getCimVersion() == 16) {\n+                CgmesExportUtil.writeModelDescription(writer, context.getSshModelDescription(), context);\n+            }\n+\n+            writeEnergyConsumers(network, cimNamespace, writer);\n+            writeEquivalentInjections(network, cimNamespace, writer);\n+            writeTapChangers(network, cimNamespace, regulatingControlViews, writer);\n+            writeSynchronousMachines(network, cimNamespace, regulatingControlViews, writer);\n+            writeShuntCompensators(network, cimNamespace, regulatingControlViews, writer);\n+            writeStaticVarCompensators(network, cimNamespace, regulatingControlViews, writer);\n+            writeRegulatingControls(regulatingControlViews, cimNamespace, writer);\n+            writeGeneratingUnitsParticitationFactors(network, cimNamespace, writer);\n+            // TODO writeControlAreas\n+            writeTerminals(network, cimNamespace, writer);\n+\n+            writer.writeEndDocument();\n+        } catch (XMLStreamException e) {\n+            throw new UncheckedXmlStreamException(e);\n+        }\n+    }\n+\n+    private static void writeTerminals(Network network, String cimNamespace, XMLStreamWriter writer) {\n+        for (Connectable<?> c : network.getConnectables()) {\n+            for (Terminal t : c.getTerminals()) {\n+                writeTerminal(t, c, cimNamespace, writer);\n+            }\n+        }\n+        for (DanglingLine dl : network.getDanglingLines()) {\n+            // Terminal for equivalent injection at boundary is always connected\n+            dl.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"EquivalentInjectionTerminal\")\n+                    .ifPresent(tid -> writeTerminal(tid, true, cimNamespace, writer));\n+            // Terminal for boundary side of original line/switch is always connected\n+            dl.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"Terminal_Boundary\")\n+                    .ifPresent(tid -> writeTerminal(tid, true, cimNamespace, writer));\n+        }\n+    }\n+\n+    private static void writeEquivalentInjections(Network network, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        // One equivalent injection for every dangling line\n+        for (DanglingLine dl : network.getDanglingLines()) {\n+            writeEquivalentInjection(dl, cimNamespace, writer);\n+        }\n+    }\n+\n+    private static void writeTapChangers(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (TwoWindingsTransformer twt : network.getTwoWindingsTransformers()) {\n+            if (twt.hasPhaseTapChanger()) {\n+                String ptcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + 1)\n+                        .orElseGet(() -> twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + 2).orElseThrow(PowsyblException::new));\n+                writeTapChanger(twt, ptcId, twt.getPhaseTapChanger(), CgmesNames.PHASE_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+            } else if (twt.hasRatioTapChanger()) {\n+                String rtcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + 1)\n+                        .orElseGet(() -> twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + 2).orElseThrow(PowsyblException::new));\n+                writeTapChanger(twt, rtcId, twt.getRatioTapChanger(), CgmesNames.RATIO_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+            }\n+        }\n+\n+        for (ThreeWindingsTransformer twt : network.getThreeWindingsTransformers()) {\n+            int i = 1;\n+            for (ThreeWindingsTransformer.Leg leg : Arrays.asList(twt.getLeg1(), twt.getLeg2(), twt.getLeg3())) {\n+                if (leg.hasPhaseTapChanger()) {\n+                    String ptcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + i).orElseThrow(PowsyblException::new);\n+                    writeTapChanger(twt, ptcId, leg.getPhaseTapChanger(), CgmesNames.PHASE_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+                } else if (leg.hasRatioTapChanger()) {\n+                    String rtcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + i).orElseThrow(PowsyblException::new);\n+                    writeTapChanger(twt, rtcId, leg.getRatioTapChanger(), CgmesNames.RATIO_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+                }\n+                i++;\n+            }\n+        }\n+    }\n+\n+    private static void writeTapChanger(Identifiable<?> eq, String tcId, TapChanger<?, ?> tc, String defaultType, Map<String, List<RegulatingControlView>> regulatingControlViews, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "991cb69ac2bf2780c1ac4e0eb1775e350253ea3e"}, "originalPosition": 119}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d42d56291029534d5c2d32a4524617d6ce21562", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/0d42d56291029534d5c2d32a4524617d6ce21562", "committedDate": "2020-11-25T08:31:56Z", "message": "params can be null, ConversionParameters will read parameter from module config\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd0cdee3dfe3054eca2e6cb37b6a07486bea3334", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/dd0cdee3dfe3054eca2e6cb37b6a07486bea3334", "committedDate": "2020-11-25T09:05:40Z", "message": "default phase tap changer type is tabular\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e9c570894ee6322cd2a13205a5b868c49bc101c", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/9e9c570894ee6322cd2a13205a5b868c49bc101c", "committedDate": "2020-11-26T17:13:25Z", "message": "Merge branch 'master' into integration_cgmes_new_ssh_export"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "051d3cdaf92b36c88d23367eeaba76ba7de48603", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/051d3cdaf92b36c88d23367eeaba76ba7de48603", "committedDate": "2020-11-26T17:20:31Z", "message": "consider switches and its terminals\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61afdfad732dd14312a1597d7a146588444c064c", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/61afdfad732dd14312a1597d7a146588444c064c", "committedDate": "2020-11-27T11:58:03Z", "message": "transformers may have a phase tap changer and a ratio tap changer\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a8d7e12477c86dc8384890485c7b629fa626ba7", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/8a8d7e12477c86dc8384890485c7b629fa626ba7", "committedDate": "2020-11-27T12:19:47Z", "message": "Merge branch 'master' into integration_cgmes_new_ssh_export\n\nSigned-off-by: Luma <zamarrenolm@aia.es>\n\n# Conflicts:\n#\tcgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/AbstractConductingEquipmentConversion.java\n#\tcgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractTransformerConversion.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0ff7fcf423a970a242221e29ddb86c427d80b22", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/a0ff7fcf423a970a242221e29ddb86c427d80b22", "committedDate": "2020-12-04T11:52:31Z", "message": "Merge branch 'master' into integration_cgmes_new_ssh_export\n\nSigned-off-by: Luma <zamarrenolm@aia.es>\n\n# Conflicts:\n#\tcgmes/cgmes-conversion/src/test/java/com/powsybl/cgmes/conversion/test/update/StateVariablesExportTest.java\n#\tcgmes/cgmes-model/src/main/resources/CIM16.sparql"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0OTUxOTQ2", "url": "https://github.com/powsybl/powsybl-core/pull/1485#pullrequestreview-544951946", "createdAt": "2020-12-04T13:20:30Z", "commit": {"oid": "a0ff7fcf423a970a242221e29ddb86c427d80b22"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b03be2d1e2d38912d1a01f686403a088c7d4ef07", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/b03be2d1e2d38912d1a01f686403a088c7d4ef07", "committedDate": "2020-12-04T13:40:32Z", "message": "Merge branch 'master' into integration_cgmes_new_ssh_export"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38b2967f085ecdf9db35727b4be50c063a5fecb3", "author": {"user": {"login": "annetill", "name": "Anne Tilloy"}}, "url": "https://github.com/powsybl/powsybl-core/commit/38b2967f085ecdf9db35727b4be50c063a5fecb3", "committedDate": "2020-12-04T15:43:04Z", "message": "Merge branch 'master' into integration_cgmes_new_ssh_export"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MDY3NTI3", "url": "https://github.com/powsybl/powsybl-core/pull/1485#pullrequestreview-545067527", "createdAt": "2020-12-04T15:39:14Z", "commit": {"oid": "b03be2d1e2d38912d1a01f686403a088c7d4ef07"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTozOToxNVrOH_WUmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjoxMDo0N1rOH_XqJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE4ODA1Ng==", "bodyText": "I think that to be coherent with the other parameters, it is better to choose use-only-network. Documentation has to be updated. I can make it if you want.", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r536188056", "createdAt": "2020-12-04T15:39:15Z", "author": {"login": "annetill"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java", "diffHunk": "@@ -59,4 +107,22 @@ public String getComment() {\n     public String getFormat() {\n         return \"CGMES\";\n     }\n+\n+    public static final String USING_ONLY_NETWORK = \"iidm.export.cgmes.using-only-network\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b03be2d1e2d38912d1a01f686403a088c7d4ef07"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NjY1NQ==", "bodyText": "Indeed this could lead to strong differences during the import, as you did for generators and tap changers. It would be better to have this in a separate PR. If not, for sure I have to perform functional tests to evalaute the impact on the import.", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r536196655", "createdAt": "2020-12-04T15:51:26Z", "author": {"login": "annetill"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForShuntCompensators.java", "diffHunk": "@@ -85,16 +100,20 @@ private void setDefaultRegulatingControl(ShuntCompensator shuntCompensator) {\n                 .setVoltageRegulatorOn(true); // SSH controlEnabled attribute is true when this method is called\n     }\n \n-    private void setRegulatingControl(ShuntCompensator shuntCompensator, RegulatingControl rc) {\n+    private void setRegulatingControl(ShuntCompensator shuntCompensator, String rcId, RegulatingControl rc, boolean controlEnabled) {\n         shuntCompensator.setTargetV(rc.targetValue)\n                 .setTargetDeadband(rc.targetDeadband);\n         if (rc.targetValue > 0) {\n-            shuntCompensator.setVoltageRegulatorOn(rc.enabled);\n+            // For the IIDM regulating control to be enabled\n+            // both the equipment participation in the control and\n+            // the regulating control itself should be enabled\n+            shuntCompensator.setVoltageRegulatorOn(rc.enabled && controlEnabled);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38b2967f085ecdf9db35727b4be50c063a5fecb3"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NzQwNA==", "bodyText": "I think that I have to test that to be sure that the normalPF is what we expect as droop.", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r536197404", "createdAt": "2020-12-04T15:52:24Z", "author": {"login": "annetill"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/SynchronousMachineConversion.java", "diffHunk": "@@ -60,6 +62,19 @@ public void convert() {\n         if (p.asInt(\"referencePriority\", 0) > 0) {\n             SlackTerminal.reset(g.getTerminal().getVoltageLevel(), g.getTerminal());\n         }\n+        if (p.containsKey(\"normalPF\")) {\n+            // Extension power control adder attribute \"droop\"\n+            // is documented as the participation factor when distributed slack is enabled\n+            // We map the normal participation factor from CGMES to droop\n+            g.newExtension(ActivePowerControlAdder.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38b2967f085ecdf9db35727b4be50c063a5fecb3"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwNDA0OQ==", "bodyText": "I am not sure to get how we should model an open switch. Do we have to modify only the status and keep the terminals connected?", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r536204049", "createdAt": "2020-12-04T16:01:51Z", "author": {"login": "annetill"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java", "diffHunk": "@@ -0,0 +1,629 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.cgmes.conversion.export;\n+\n+import com.powsybl.cgmes.conversion.Conversion;\n+import com.powsybl.cgmes.model.CgmesNames;\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.exceptions.UncheckedXmlStreamException;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.extensions.ActivePowerControl;\n+import com.powsybl.iidm.network.extensions.LoadDetail;\n+import com.powsybl.iidm.network.extensions.SlackTerminal;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+import java.util.*;\n+\n+import static com.powsybl.cgmes.model.CgmesNamespace.RDF_NAMESPACE;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ */\n+public final class SteadyStateHypothesisExport {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SteadyStateHypothesisExport.class);\n+\n+    private static final String REGULATING_CONTROL_PROPERTY = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"RegulatingControl\";\n+    private static final String GENERATING_UNIT_PROPERTY = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"GeneratingUnit\";\n+\n+    private SteadyStateHypothesisExport() {\n+    }\n+\n+    public static void write(Network network, XMLStreamWriter writer, CgmesExportContext context) {\n+        final Map<String, List<RegulatingControlView>> regulatingControlViews = new HashMap<>();\n+        String cimNamespace = context.getCimNamespace();\n+\n+        try {\n+            CgmesExportUtil.writeRdfRoot(context.getCimVersion(), writer);\n+\n+            if (context.getCimVersion() == 16) {\n+                CgmesExportUtil.writeModelDescription(writer, context.getSshModelDescription(), context);\n+            }\n+\n+            writeEnergyConsumers(network, cimNamespace, writer);\n+            writeEquivalentInjections(network, cimNamespace, writer);\n+            writeTapChangers(network, cimNamespace, regulatingControlViews, writer);\n+            writeSynchronousMachines(network, cimNamespace, regulatingControlViews, writer);\n+            writeShuntCompensators(network, cimNamespace, regulatingControlViews, writer);\n+            writeStaticVarCompensators(network, cimNamespace, regulatingControlViews, writer);\n+            writeRegulatingControls(regulatingControlViews, cimNamespace, writer);\n+            writeGeneratingUnitsParticitationFactors(network, cimNamespace, writer);\n+            // FIXME open status of retained switches in bus-branch models\n+            writeSwitches(network, cimNamespace, writer);\n+            // TODO writeControlAreas\n+            writeTerminals(network, cimNamespace, writer);\n+\n+            writer.writeEndDocument();\n+        } catch (XMLStreamException e) {\n+            throw new UncheckedXmlStreamException(e);\n+        }\n+    }\n+\n+    private static void writeSwitches(Network network, String cimNamespace, XMLStreamWriter writer) {\n+        for (Switch sw : network.getSwitches()) {\n+            writeSwitch(sw, cimNamespace, writer);\n+        }\n+    }\n+\n+    private static final String ALIAS_TYPE_TERMINAL_1 = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.TERMINAL + \"1\";\n+    private static final String ALIAS_TYPE_TERMINAL_2 = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.TERMINAL + \"2\";\n+\n+    private static void writeTerminals(Network network, String cimNamespace, XMLStreamWriter writer) {\n+        for (Connectable<?> c : network.getConnectables()) {\n+            for (Terminal t : c.getTerminals()) {\n+                writeTerminal(t, c, cimNamespace, writer);\n+            }\n+        }\n+        for (Switch sw : network.getSwitches()) {\n+            // Terminals for switches are exported as always connected\n+            // The status of the switch is \"open\" if any of the original terminals were not connected\n+            // An original \"closed\" switch with any terminal disconnected\n+            // will be exported as \"open\" with terminals connected\n+            sw.getAliasFromType(ALIAS_TYPE_TERMINAL_1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38b2967f085ecdf9db35727b4be50c063a5fecb3"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwOTk1Ng==", "bodyText": "Is it working if the generator is not connected?", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r536209956", "createdAt": "2020-12-04T16:10:47Z", "author": {"login": "annetill"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java", "diffHunk": "@@ -0,0 +1,629 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.cgmes.conversion.export;\n+\n+import com.powsybl.cgmes.conversion.Conversion;\n+import com.powsybl.cgmes.model.CgmesNames;\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.exceptions.UncheckedXmlStreamException;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.extensions.ActivePowerControl;\n+import com.powsybl.iidm.network.extensions.LoadDetail;\n+import com.powsybl.iidm.network.extensions.SlackTerminal;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+import java.util.*;\n+\n+import static com.powsybl.cgmes.model.CgmesNamespace.RDF_NAMESPACE;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ */\n+public final class SteadyStateHypothesisExport {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SteadyStateHypothesisExport.class);\n+\n+    private static final String REGULATING_CONTROL_PROPERTY = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"RegulatingControl\";\n+    private static final String GENERATING_UNIT_PROPERTY = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"GeneratingUnit\";\n+\n+    private SteadyStateHypothesisExport() {\n+    }\n+\n+    public static void write(Network network, XMLStreamWriter writer, CgmesExportContext context) {\n+        final Map<String, List<RegulatingControlView>> regulatingControlViews = new HashMap<>();\n+        String cimNamespace = context.getCimNamespace();\n+\n+        try {\n+            CgmesExportUtil.writeRdfRoot(context.getCimVersion(), writer);\n+\n+            if (context.getCimVersion() == 16) {\n+                CgmesExportUtil.writeModelDescription(writer, context.getSshModelDescription(), context);\n+            }\n+\n+            writeEnergyConsumers(network, cimNamespace, writer);\n+            writeEquivalentInjections(network, cimNamespace, writer);\n+            writeTapChangers(network, cimNamespace, regulatingControlViews, writer);\n+            writeSynchronousMachines(network, cimNamespace, regulatingControlViews, writer);\n+            writeShuntCompensators(network, cimNamespace, regulatingControlViews, writer);\n+            writeStaticVarCompensators(network, cimNamespace, regulatingControlViews, writer);\n+            writeRegulatingControls(regulatingControlViews, cimNamespace, writer);\n+            writeGeneratingUnitsParticitationFactors(network, cimNamespace, writer);\n+            // FIXME open status of retained switches in bus-branch models\n+            writeSwitches(network, cimNamespace, writer);\n+            // TODO writeControlAreas\n+            writeTerminals(network, cimNamespace, writer);\n+\n+            writer.writeEndDocument();\n+        } catch (XMLStreamException e) {\n+            throw new UncheckedXmlStreamException(e);\n+        }\n+    }\n+\n+    private static void writeSwitches(Network network, String cimNamespace, XMLStreamWriter writer) {\n+        for (Switch sw : network.getSwitches()) {\n+            writeSwitch(sw, cimNamespace, writer);\n+        }\n+    }\n+\n+    private static final String ALIAS_TYPE_TERMINAL_1 = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.TERMINAL + \"1\";\n+    private static final String ALIAS_TYPE_TERMINAL_2 = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.TERMINAL + \"2\";\n+\n+    private static void writeTerminals(Network network, String cimNamespace, XMLStreamWriter writer) {\n+        for (Connectable<?> c : network.getConnectables()) {\n+            for (Terminal t : c.getTerminals()) {\n+                writeTerminal(t, c, cimNamespace, writer);\n+            }\n+        }\n+        for (Switch sw : network.getSwitches()) {\n+            // Terminals for switches are exported as always connected\n+            // The status of the switch is \"open\" if any of the original terminals were not connected\n+            // An original \"closed\" switch with any terminal disconnected\n+            // will be exported as \"open\" with terminals connected\n+            sw.getAliasFromType(ALIAS_TYPE_TERMINAL_1)\n+                .ifPresent(tid1 -> writeTerminal(tid1, true, cimNamespace, writer));\n+            sw.getAliasFromType(ALIAS_TYPE_TERMINAL_2)\n+                .ifPresent(tid2 -> writeTerminal(tid2, true, cimNamespace, writer));\n+        }\n+        for (DanglingLine dl : network.getDanglingLines()) {\n+            // Terminal for equivalent injection at boundary is always connected\n+            dl.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"EquivalentInjectionTerminal\")\n+                    .ifPresent(tid -> writeTerminal(tid, true, cimNamespace, writer));\n+            // Terminal for boundary side of original line/switch is always connected\n+            dl.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"Terminal_Boundary\")\n+                    .ifPresent(tid -> writeTerminal(tid, true, cimNamespace, writer));\n+        }\n+    }\n+\n+    private static void writeEquivalentInjections(Network network, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        // One equivalent injection for every dangling line\n+        for (DanglingLine dl : network.getDanglingLines()) {\n+            writeEquivalentInjection(dl, cimNamespace, writer);\n+        }\n+    }\n+\n+    private static void writeTapChangers(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (TwoWindingsTransformer twt : network.getTwoWindingsTransformers()) {\n+            if (twt.hasPhaseTapChanger()) {\n+                String ptcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + 1)\n+                        .orElseGet(() -> twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + 2).orElseThrow(PowsyblException::new));\n+                writeTapChanger(twt, ptcId, twt.getPhaseTapChanger(), CgmesNames.PHASE_TAP_CHANGER_TABULAR, regulatingControlViews, cimNamespace, writer);\n+            }\n+            if (twt.hasRatioTapChanger()) {\n+                String rtcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + 1)\n+                        .orElseGet(() -> twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + 2).orElseThrow(PowsyblException::new));\n+                writeTapChanger(twt, rtcId, twt.getRatioTapChanger(), CgmesNames.RATIO_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+            }\n+        }\n+\n+        for (ThreeWindingsTransformer twt : network.getThreeWindingsTransformers()) {\n+            int i = 1;\n+            for (ThreeWindingsTransformer.Leg leg : Arrays.asList(twt.getLeg1(), twt.getLeg2(), twt.getLeg3())) {\n+                if (leg.hasPhaseTapChanger()) {\n+                    String ptcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + i).orElseThrow(PowsyblException::new);\n+                    writeTapChanger(twt, ptcId, leg.getPhaseTapChanger(), CgmesNames.PHASE_TAP_CHANGER_TABULAR, regulatingControlViews, cimNamespace, writer);\n+                }\n+                if (leg.hasRatioTapChanger()) {\n+                    String rtcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + i).orElseThrow(PowsyblException::new);\n+                    writeTapChanger(twt, rtcId, leg.getRatioTapChanger(), CgmesNames.RATIO_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+                }\n+                i++;\n+            }\n+        }\n+    }\n+\n+    private static void writeTapChanger(Identifiable<?> eq, String tcId, TapChanger<?, ?> tc, String defaultType, Map<String, List<RegulatingControlView>> regulatingControlViews, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        String type = eq.getProperty(cgmesTapChangerReferenceKey(tcId, \"type\"), defaultType);\n+        writeTapChanger(type, tcId, tc, cimNamespace, writer);\n+        addRegulatingControlView(tc, tcId, eq, regulatingControlViews);\n+        writeHiddenTapChanger(eq, tcId, defaultType, cimNamespace, writer);\n+    }\n+\n+    private static void writeShuntCompensators(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (ShuntCompensator s : network.getShuntCompensators()) {\n+            String shuntType;\n+            switch (s.getModelType()) {\n+                case LINEAR:\n+                    shuntType = \"Linear\";\n+                    break;\n+                case NON_LINEAR:\n+                    shuntType = \"Nonlinear\";\n+                    break;\n+                default:\n+                    throw new AssertionError(\"Unexpected shunt model type: \" + s.getModelType());\n+            }\n+            boolean controlEnabled = s.isVoltageRegulatorOn();\n+            writer.writeStartElement(cimNamespace, shuntType + \"ShuntCompensator\");\n+            writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + s.getId());\n+            writer.writeStartElement(cimNamespace, \"ShuntCompensator.sections\");\n+            writer.writeCharacters(CgmesExportUtil.format(s.getSectionCount()));\n+            writer.writeEndElement();\n+            writer.writeStartElement(cimNamespace, \"RegulatingCondEq.controlEnabled\");\n+            writer.writeCharacters(Boolean.toString(controlEnabled));\n+            writer.writeEndElement();\n+            writer.writeEndElement();\n+            addRegulatingControlView(s, regulatingControlViews);\n+        }\n+    }\n+\n+    private static void addRegulatingControlView(ShuntCompensator s, Map<String, List<RegulatingControlView>> regulatingControlViews) {\n+        if (s.hasProperty(REGULATING_CONTROL_PROPERTY)) {\n+            // PowSyBl has considered the control as discrete, with a certain targetDeadband\n+            // The target value is stored in kV by PowSyBl, so unit multiplier is \"k\"\n+            String rcid = s.getProperty(REGULATING_CONTROL_PROPERTY);\n+            RegulatingControlView rcv = new RegulatingControlView(rcid, RegulatingControlType.REGULATING_CONTROL, true,\n+                s.isVoltageRegulatorOn(), s.getTargetDeadband(), s.getTargetV(), \"k\");\n+            regulatingControlViews.computeIfAbsent(rcid, k -> new ArrayList<>()).add(rcv);\n+        }\n+    }\n+\n+    private static void writeSynchronousMachines(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (Generator g : network.getGenerators()) {\n+            boolean controlEnabled = g.isVoltageRegulatorOn();\n+            writer.writeStartElement(cimNamespace, \"SynchronousMachine\");\n+            writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + g.getId());\n+            writer.writeStartElement(cimNamespace, \"RegulatingCondEq.controlEnabled\");\n+            writer.writeCharacters(Boolean.toString(controlEnabled));\n+            writer.writeEndElement();\n+            writer.writeStartElement(cimNamespace, \"RotatingMachine.p\");\n+            writer.writeCharacters(CgmesExportUtil.format(g.getTerminal().getP()));\n+            writer.writeEndElement();\n+            writer.writeStartElement(cimNamespace, \"RotatingMachine.q\");\n+            writer.writeCharacters(CgmesExportUtil.format(g.getTerminal().getQ()));\n+            writer.writeEndElement();\n+            writer.writeStartElement(cimNamespace, \"SynchronousMachine.referencePriority\");\n+            // reference priority is used for angle reference selection (slack)\n+            writer.writeCharacters(isInSlackBus(g) ? \"1\" : \"0\");\n+            writer.writeEndElement();\n+            writer.writeEmptyElement(cimNamespace, \"SynchronousMachine.operatingMode\");\n+            // All generators in PowSyBl are considered as generator, not motor\n+            writer.writeAttribute(RDF_NAMESPACE, CgmesNames.RESOURCE, cimNamespace + \"SynchronousMachineOperatingMode.generator\");\n+            writer.writeEndElement();\n+\n+            addRegulatingControlView(g, regulatingControlViews);\n+        }\n+    }\n+\n+    private static void addRegulatingControlView(Generator g, Map<String, List<RegulatingControlView>> regulatingControlViews) {\n+        if (g.hasProperty(REGULATING_CONTROL_PROPERTY)) {\n+            // PowSyBl has considered the control as continuous and with targetDeadband of size 0\n+            // The target value is stored in kV by PowSyBl, so unit multiplier is \"k\"\n+            String rcid = g.getProperty(REGULATING_CONTROL_PROPERTY);\n+            double targetDeadband = 0;\n+            RegulatingControlView rcv = new RegulatingControlView(rcid, RegulatingControlType.REGULATING_CONTROL, false,\n+                g.isVoltageRegulatorOn(), targetDeadband, g.getTargetV(), \"k\");\n+            regulatingControlViews.computeIfAbsent(rcid, k -> new ArrayList<>()).add(rcv);\n+        }\n+    }\n+\n+    private static void writeStaticVarCompensators(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (StaticVarCompensator svc : network.getStaticVarCompensators()) {\n+            StaticVarCompensator.RegulationMode regulationMode = svc.getRegulationMode();\n+            boolean controlEnabled = regulationMode != StaticVarCompensator.RegulationMode.OFF;\n+            writer.writeStartElement(cimNamespace, \"StaticVarCompensator\");\n+            writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + svc.getId());\n+            writer.writeStartElement(cimNamespace, \"RegulatingCondEq.controlEnabled\");\n+            writer.writeCharacters(Boolean.toString(controlEnabled));\n+            writer.writeEndElement();\n+            writer.writeStartElement(cimNamespace, \"StaticVarCompensator.q\");\n+            writer.writeCharacters(CgmesExportUtil.format(svc.getTerminal().getQ()));\n+            writer.writeEndElement();\n+            writer.writeEndElement();\n+\n+            if (svc.hasProperty(REGULATING_CONTROL_PROPERTY)) {\n+                String rcid = svc.getProperty(REGULATING_CONTROL_PROPERTY);\n+                double targetDeadband = 0;\n+                // Regulating control could be reactive power or voltage\n+                double targetValue;\n+                String multiplier;\n+                if (regulationMode == StaticVarCompensator.RegulationMode.VOLTAGE) {\n+                    targetValue = svc.getVoltageSetpoint();\n+                    multiplier = \"k\";\n+                } else if (regulationMode == StaticVarCompensator.RegulationMode.REACTIVE_POWER) {\n+                    targetValue = svc.getReactivePowerSetpoint();\n+                    multiplier = \"M\";\n+                } else {\n+                    targetValue = 0;\n+                    multiplier = \"k\";\n+                }\n+                RegulatingControlView rcv = new RegulatingControlView(rcid, RegulatingControlType.REGULATING_CONTROL, false,\n+                        controlEnabled, targetDeadband, targetValue, multiplier);\n+                regulatingControlViews.computeIfAbsent(rcid, k -> new ArrayList<>()).add(rcv);\n+            }\n+        }\n+    }\n+\n+    private static boolean isInSlackBus(Generator g) {\n+        VoltageLevel vl = g.getTerminal().getVoltageLevel();\n+        SlackTerminal slackTerminal = vl.getExtension(SlackTerminal.class);\n+        if (slackTerminal != null) {\n+            Bus slackBus = slackTerminal.getTerminal().getBusBreakerView().getBus();\n+            if (slackBus == g.getTerminal().getBusBreakerView().getBus()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38b2967f085ecdf9db35727b4be50c063a5fecb3"}, "originalPosition": 268}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5OTQzODc5", "url": "https://github.com/powsybl/powsybl-core/pull/1485#pullrequestreview-549943879", "createdAt": "2020-12-11T09:43:57Z", "commit": {"oid": "38b2967f085ecdf9db35727b4be50c063a5fecb3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "880c0cc4a38a8f12a5cbb2ca1bb6f5d162ac51bd", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/880c0cc4a38a8f12a5cbb2ca1bb6f5d162ac51bd", "committedDate": "2020-12-11T10:00:27Z", "message": "Small modification\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecb67faf0f1d74b4996691f563128fc9745333a3", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/ecb67faf0f1d74b4996691f563128fc9745333a3", "committedDate": "2020-12-11T10:00:55Z", "message": "Always write model description dates referred to UTC\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56c9f12cafecb0f1f50a28e4fb73512856320940", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/56c9f12cafecb0f1f50a28e4fb73512856320940", "committedDate": "2020-12-11T10:02:03Z", "message": "Revert \"always write model description dates referred to UTC (#1563)\"\n\nThis reverts commit 125c085\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21e3d5472937fcff93d95837e5b06e587a31d869", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/21e3d5472937fcff93d95837e5b06e587a31d869", "committedDate": "2020-12-11T10:02:23Z", "message": "Merge branch 'master' into integration_cgmes_new_ssh_export"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4196, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}