{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwNTQwMjcx", "number": 1460, "title": "Psse parser by field", "bodyText": "Please check if the PR fulfills these requirements (please use '[x]' to check the checkboxes, or submit the PR and then click the checkboxes)\n\n The commit message follows our guidelines\n Tests for the changes have been added (for bug fixes / features)\n Docs have been added / updated (for bug fixes / features)\n\nDoes this PR already have an issue describing the problem ? If so, link to this issue using '#XXX' and skip the rest\nWhat kind of change does this PR introduce? (Bug fix, feature, docs update, ...)\nFeature\nWhat is the current behavior? (You can also link to an open issue here)\nRecords are parsed by index\nPsseTransformer attributes are organized by records (FirstRecord, SecondRecord, ThirdRecord1, ThirdRecord2, ThirdRecord3)\nWhat is the new behavior (if this is a feature change)?\nRecords are parsed by field. Necessary to support version 35 (raw and rawx formats)\nPsseTransformer attributes are organized as general attributes and winding attributes.\nWhitespace delimiter has been supported (Psse allow  data items separated by a comma or one or more blanks)\nRead fields have been recorded to export only these fields\nDoes this PR introduce a breaking change or deprecate an API? If yes, check the following:\n\n The Breaking Change or Deprecated label has been added\n The migration guide has been updated in the github wiki (What changes might users need to make in their application due to this PR?)\n\nOther information:\n(if any of the questions/checkboxes don't apply, please delete them entirely)\nPsse development is organized in the following branches:\npsse_parserByField. Branch associated with this PR.\npsse_Version33Version35. Extend the importer to support version 35, raw and rawx formats. Ready to create PR.\npsse_exporter. Exporter for versions 33 and 35 (both formats raw and rawx). Ready to create PR.\npsse_switchedShuntData. Support switchedShuntData. Ready to create PR.\npsse_TransformerImpedanceCorrectionTables. Support transformer impedance correction tables. Working in progress", "createdAt": "2020-09-05T15:55:24Z", "url": "https://github.com/powsybl/powsybl-core/pull/1460", "merged": true, "mergeCommit": {"oid": "f3af23ef7d431d133eee248084499558f4785a9a"}, "closed": true, "closedAt": "2020-11-09T13:39:38Z", "author": {"login": "marqueslanauja"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcyMaOWAH2gAyNDgwNTQwMjcxOmE4ZmJlZThjM2QwMzU1ZWZiMzBjYzhkMmQ4NGFmMmY5NzFkMzY1Y2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZ4IQxgH2gAyNDgwNTQwMjcxOjY4MDY0OGUwODcxNDFhNjkzYjBlYWUyZWYxZjEwMjYyOTk2ZmNkZTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a8fbee8c3d0355efb30cc8d2d84af2f971d365cd", "author": {"user": {"login": "marqueslanauja", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/a8fbee8c3d0355efb30cc8d2d84af2f971d365cd", "committedDate": "2020-07-06T07:49:48Z", "message": "Parser by fields. Read fields. Support whitespace delimiter.\n\nSigned-off-by: Jos\u00e9 Antonio Marqu\u00e9s <marquesja@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62931aebcb3ec8a332deb8185e236355f9f7e83e", "author": {"user": {"login": "marqueslanauja", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/62931aebcb3ec8a332deb8185e236355f9f7e83e", "committedDate": "2020-07-07T22:05:27Z", "message": "Merge branch 'master' into psse_parserByField\n\nSigned-off-by: Jos\u00e9 Antonio Marqu\u00e9s <marquesja@aia.es>\n\n# Conflicts:\n#\tpsse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0553714036fd1838244530677b4276437a12391", "author": {"user": {"login": "marqueslanauja", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/d0553714036fd1838244530677b4276437a12391", "committedDate": "2020-07-07T22:29:03Z", "message": "Delete duplicated code\n\nSigned-off-by: Jos\u00e9 Antonio Marqu\u00e9s <marquesja@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fc583d02b7653c81291f81238cc3b1328432769", "author": {"user": {"login": "zamarrenolm", "name": "Luma"}}, "url": "https://github.com/powsybl/powsybl-core/commit/0fc583d02b7653c81291f81238cc3b1328432769", "committedDate": "2020-07-13T11:57:35Z", "message": "Merge branch 'master' into psse_parserByField\n\nSigned-off-by: Luma <zamarrenolm@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7e786082816f26b537ec9e283261436dce05020", "author": {"user": {"login": "marqueslanauja", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/e7e786082816f26b537ec9e283261436dce05020", "committedDate": "2020-07-17T06:05:05Z", "message": "Add unitary tests\n\nSigned-off-by: Jos\u00e9 Antonio Marqu\u00e9s <marquesja@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4a8d74686e3d22b660ac94f62e8831fa7f6db4d", "author": {"user": {"login": "marqueslanauja", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/b4a8d74686e3d22b660ac94f62e8831fa7f6db4d", "committedDate": "2020-07-19T18:07:38Z", "message": "Merge branch 'master' into psse_parserByField"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5c8f6f353086e80fc030f2852b0dac61a804dc1", "author": {"user": {"login": "marqueslanauja", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/d5c8f6f353086e80fc030f2852b0dac61a804dc1", "committedDate": "2020-07-26T15:30:17Z", "message": "Merge branch 'master' into psse_parserByField"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f773fa2745e23bd94502d45c629f8be41f348aef", "author": {"user": {"login": "marqueslanauja", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/f773fa2745e23bd94502d45c629f8be41f348aef", "committedDate": "2020-07-30T00:59:59Z", "message": "Merge branch 'master' into psse_parserByField"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aacfde6c9677728ecc2bf936112b0d1cf73587f0", "author": {"user": {"login": "marqueslanauja", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/aacfde6c9677728ecc2bf936112b0d1cf73587f0", "committedDate": "2020-08-04T14:33:11Z", "message": "Merge branch 'master' into psse_parserByField"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6a5ac4bae9bdd4ef99b21aac1a80ac19f944699", "author": {"user": {"login": "marqueslanauja", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/d6a5ac4bae9bdd4ef99b21aac1a80ac19f944699", "committedDate": "2020-08-29T16:35:07Z", "message": "Merge branch 'master' into psse_parserByField"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "040885123ee6de4f18d9e8f70d993f05b0dd105a", "author": {"user": {"login": "marqueslanauja", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/040885123ee6de4f18d9e8f70d993f05b0dd105a", "committedDate": "2020-09-03T16:45:57Z", "message": "Merge branch 'master' into psse_parserByField"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "baaf176f20b03589071ddf93c7abdf2006469a5b", "author": {"user": {"login": "marqueslanauja", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/baaf176f20b03589071ddf93c7abdf2006469a5b", "committedDate": "2020-09-05T14:39:10Z", "message": "Merge branch 'master' into psse_parserByField"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bff9296bbc9f1e5a3e6af0d7d5bb5d5cbb93d08", "author": {"user": {"login": "annetill", "name": "Anne Tilloy"}}, "url": "https://github.com/powsybl/powsybl-core/commit/1bff9296bbc9f1e5a3e6af0d7d5bb5d5cbb93d08", "committedDate": "2020-10-26T11:27:42Z", "message": "Merge branch 'master' into psse_parserByField"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NDQ5Nzc3", "url": "https://github.com/powsybl/powsybl-core/pull/1460#pullrequestreview-518449777", "createdAt": "2020-10-28T09:07:52Z", "commit": {"oid": "1bff9296bbc9f1e5a3e6af0d7d5bb5d5cbb93d08"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwODQxNDky", "url": "https://github.com/powsybl/powsybl-core/pull/1460#pullrequestreview-520841492", "createdAt": "2020-10-30T16:36:29Z", "commit": {"oid": "1bff9296bbc9f1e5a3e6af0d7d5bb5d5cbb93d08"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjozNjoyOVrOHrXAfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjo1Njo1OFrOHrXynA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIyNzc3Mw==", "bodyText": "As nothing is public is that class, maybe this class should also be private package", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r515227773", "createdAt": "2020-10-30T16:36:29Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseContext.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.psse.model;\n+\n+/**\n+ *\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class PsseContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bff9296bbc9f1e5a3e6af0d7d5bb5d5cbb93d08"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIyOTg4NA==", "bodyText": "Why don't you use AssertArrayEquals?\nYou can probably also use Arrays.equals if you want to use your logging method", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r515229884", "createdAt": "2020-10-30T16:40:09Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/test/java/com/powsybl/psse/model/PsseRawReaderTest.java", "diffHunk": "@@ -33,4 +36,88 @@ public void ieee14BusTest() throws IOException {\n             assertEquals(jsonRef, json);\n         }\n     }\n+\n+    @Test\n+    public void ieee14BusReadFieldsTest() throws IOException {\n+        try (BufferedReader reader = new BufferedReader(new InputStreamReader(getClass().getResourceAsStream(\"/IEEE_14_bus.raw\")))) {\n+            PsseContext context = new PsseContext();\n+            PsseRawModel rawData = new PsseRawReader().read(reader, context);\n+            assertNotNull(rawData);\n+\n+            String[] expectedCaseIdentificationDataReadFields = new String[] {\"ic\", \"sbase\", \"rev\", \"xfrrat\", \"nxfrat\", \"basfrq\", \"title1\", \"title2\"};\n+            String[] actualCaseIdentificationDataReadFields = context.getCaseIdentificationDataReadFields();\n+            assertTrue(compareReadFields(expectedCaseIdentificationDataReadFields, actualCaseIdentificationDataReadFields));\n+\n+            String[] expectedBusDataReadFields = new String[] {\"i\", \"name\", \"baskv\", \"ide\", \"area\", \"zone\", \"owner\", \"vm\", \"va\"};\n+            String[] actualBusDataReadFields = context.getBusDataReadFields();\n+            assertTrue(compareReadFields(expectedBusDataReadFields, actualBusDataReadFields));\n+\n+            String[] expectedLoadDataReadFields = new String[] {\"i\", \"id\", \"status\", \"area\", \"zone\", \"pl\", \"ql\", \"ip\", \"iq\", \"yp\", \"yq\", \"owner\", \"scale\"};\n+            String[] actualLoadDataReadFields = context.getLoadDataReadFields();\n+            assertTrue(compareReadFields(expectedLoadDataReadFields, actualLoadDataReadFields));\n+\n+            String[] expectedFixedBusShuntDataReadFields = new String[] {\"i\", \"id\", \"status\", \"gl\", \"bl\"};\n+            String[] actualFixedBusShuntDataReadFields = context.getFixedBusShuntDataReadFields();\n+            assertTrue(compareReadFields(expectedFixedBusShuntDataReadFields, actualFixedBusShuntDataReadFields));\n+\n+            String[] expectedGeneratorDataReadFields = new String[] {\"i\", \"id\", \"pg\", \"qg\", \"qt\", \"qb\", \"vs\", \"ireg\",\n+                \"mbase\", \"zr\", \"zx\", \"rt\", \"xt\", \"gtap\", \"stat\", \"rmpct\", \"pt\", \"pb\", \"o1\", \"f1\", \"o2\", \"f2\", \"o3\",\n+                \"f3\", \"o4\", \"f4\", \"wmod\", \"wpf\"};\n+            String[] actualGeneratorDataReadFields = context.getGeneratorDataReadFields();\n+            assertTrue(compareReadFields(expectedGeneratorDataReadFields, actualGeneratorDataReadFields));\n+\n+            String[] expectedNonTransformerBranchDataReadFields = new String[] {\"i\", \"j\", \"ckt\", \"r\", \"x\", \"b\",\n+                \"ratea\", \"rateb\", \"ratec\", \"gi\", \"bi\", \"gj\", \"bj\", \"st\", \"met\", \"len\", \"o1\", \"f1\", \"o2\", \"f2\", \"o3\",\n+                \"f3\", \"o4\", \"f4\"};\n+            String[] actualNonTransformerBranchDataReadFields = context.getNonTransformerBranchDataReadFields();\n+            assertTrue(compareReadFields(expectedNonTransformerBranchDataReadFields, actualNonTransformerBranchDataReadFields));\n+\n+            String[] expected2wTransformerDataReadFields = new String[] {\"i\", \"j\", \"k\", \"ckt\", \"cw\", \"cz\", \"cm\",\n+                \"mag1\", \"mag2\", \"nmetr\", \"name\", \"stat\", \"o1\", \"f1\", \"o2\", \"f2\", \"o3\", \"f3\", \"o4\", \"f4\", \"r12\", \"x12\", \"sbase12\"};\n+            String[] actual2wTransformerDataReadFields = context.get2wTransformerDataReadFields();\n+            assertTrue(compareReadFields(expected2wTransformerDataReadFields, actual2wTransformerDataReadFields));\n+\n+            String[] expected2wTransformerW1DataReadFields = new String[] {\"windv\", \"nomv\", \"ang\", \"rata\", \"ratb\",\n+                \"ratc\", \"cod\", \"cont\", \"rma\", \"rmi\", \"vma\", \"vmi\", \"ntp\", \"tab\", \"cr\", \"cx\"};\n+            String[] actual2wTransformerW1DataReadFields = context.get2wTransformerDataWinding1ReadFields();\n+            assertTrue(compareReadFields(expected2wTransformerW1DataReadFields, actual2wTransformerW1DataReadFields));\n+\n+            String[] expected2wTransformerW2DataReadFields = new String[] {\"windv\", \"nomv\"};\n+            String[] actual2wTransformerW2DataReadFields = context.get2wTransformerDataWinding2ReadFields();\n+            assertTrue(compareReadFields(expected2wTransformerW2DataReadFields, actual2wTransformerW2DataReadFields));\n+\n+            String[] expectedAreaInterchangeDataReadFields = new String[] {\"i\", \"isw\", \"pdes\", \"ptol\", \"arname\"};\n+            String[] actualAreaInterchangeDataReadFields = context.getAreaInterchangeDataReadFields();\n+            assertTrue(compareReadFields(expectedAreaInterchangeDataReadFields, actualAreaInterchangeDataReadFields));\n+\n+            String[] expectedZoneDataReadFields = new String[] {\"i\", \"zoname\"};\n+            String[] actualZoneDataReadFields = context.getZoneDataReadFields();\n+            assertTrue(compareReadFields(expectedZoneDataReadFields, actualZoneDataReadFields));\n+\n+            String[] expectedOwnerDataReadFields = new String[] {\"i\", \"owname\"};\n+            String[] actualOwnerDataReadFields = context.getOwnerDataReadFields();\n+            assertTrue(compareReadFields(expectedOwnerDataReadFields, actualOwnerDataReadFields));\n+        }\n+    }\n+\n+    private boolean compareReadFields(String[] expected, String[] actual) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bff9296bbc9f1e5a3e6af0d7d5bb5d5cbb93d08"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzMDUxMw==", "bodyText": "Not sure that this should be public. If you make this method private, you don't have to check that reader is not null: this will be done by another public method", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r515230513", "createdAt": "2020-10-30T16:41:13Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseRawReader.java", "diffHunk": "@@ -21,39 +23,255 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n /**\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n public class PsseRawReader {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(PsseRawReader.class);\n \n-    private static String removeComment(String line) {\n-        int slashIndex = line.lastIndexOf('/');\n-        if (slashIndex == -1) {\n-            return line;\n+    public boolean checkCaseIdentification(BufferedReader reader) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bff9296bbc9f1e5a3e6af0d7d5bb5d5cbb93d08"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzMTMyOA==", "bodyText": "Should we log the exception?", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r515231328", "createdAt": "2020-10-30T16:42:34Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseRawReader.java", "diffHunk": "@@ -21,39 +23,255 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n /**\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n public class PsseRawReader {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(PsseRawReader.class);\n \n-    private static String removeComment(String line) {\n-        int slashIndex = line.lastIndexOf('/');\n-        if (slashIndex == -1) {\n-            return line;\n+    public boolean checkCaseIdentification(BufferedReader reader) throws IOException {\n+        Objects.requireNonNull(reader);\n+\n+        // just check the first record if this file is in PSS/E format\n+        PsseCaseIdentification caseIdentification;\n+        try {\n+            caseIdentification = readCaseIdentificationData(reader);\n+        } catch (PsseException e) {\n+            return false; // invalid PSS/E content", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bff9296bbc9f1e5a3e6af0d7d5bb5d5cbb93d08"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzMjQ1Mw==", "bodyText": "I think we should at least log which assertion is not true, specially if the version is not supported.", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r515232453", "createdAt": "2020-10-30T16:44:23Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseRawReader.java", "diffHunk": "@@ -21,39 +23,255 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n /**\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n public class PsseRawReader {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(PsseRawReader.class);\n \n-    private static String removeComment(String line) {\n-        int slashIndex = line.lastIndexOf('/');\n-        if (slashIndex == -1) {\n-            return line;\n+    public boolean checkCaseIdentification(BufferedReader reader) throws IOException {\n+        Objects.requireNonNull(reader);\n+\n+        // just check the first record if this file is in PSS/E format\n+        PsseCaseIdentification caseIdentification;\n+        try {\n+            caseIdentification = readCaseIdentificationData(reader);\n+        } catch (PsseException e) {\n+            return false; // invalid PSS/E content\n         }\n-        return line.substring(0, slashIndex);\n+\n+        int ic = caseIdentification.getIc();\n+        double sbase = caseIdentification.getSbase();\n+        int rev = caseIdentification.getRev();\n+        double basfrq = caseIdentification.getBasfrq();\n+\n+        if (ic == 0 && sbase > 0. && rev <= PsseConstants.SUPPORTED_VERSION && basfrq > 0.) {\n+            return true;\n+        }\n+\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bff9296bbc9f1e5a3e6af0d7d5bb5d5cbb93d08"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzMzAyMg==", "bodyText": "String line = Objects.requireNonNull(readLineAndRemoveComment(reader));\n\nCan the readLineAndRemoveComment really return null?\nSame remark for all occurrences below", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r515233022", "createdAt": "2020-10-30T16:45:17Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseRawReader.java", "diffHunk": "@@ -21,39 +23,255 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n /**\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n public class PsseRawReader {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(PsseRawReader.class);\n \n-    private static String removeComment(String line) {\n-        int slashIndex = line.lastIndexOf('/');\n-        if (slashIndex == -1) {\n-            return line;\n+    public boolean checkCaseIdentification(BufferedReader reader) throws IOException {\n+        Objects.requireNonNull(reader);\n+\n+        // just check the first record if this file is in PSS/E format\n+        PsseCaseIdentification caseIdentification;\n+        try {\n+            caseIdentification = readCaseIdentificationData(reader);\n+        } catch (PsseException e) {\n+            return false; // invalid PSS/E content\n         }\n-        return line.substring(0, slashIndex);\n+\n+        int ic = caseIdentification.getIc();\n+        double sbase = caseIdentification.getSbase();\n+        int rev = caseIdentification.getRev();\n+        double basfrq = caseIdentification.getBasfrq();\n+\n+        if (ic == 0 && sbase > 0. && rev <= PsseConstants.SUPPORTED_VERSION && basfrq > 0.) {\n+            return true;\n+        }\n+\n+        return false;\n     }\n \n-    private static String readLineAndRemoveComment(BufferedReader reader) throws IOException {\n-        String line = reader.readLine();\n-        if (line == null) {\n-            return null;\n+    public PsseRawModel read(BufferedReader reader) throws IOException {\n+        PsseContext context = new PsseContext();\n+        return read(reader, context);\n+    }\n+\n+    public PsseRawModel read(BufferedReader reader, PsseContext context) throws IOException {\n+        Objects.requireNonNull(reader);\n+        Objects.requireNonNull(context);\n+\n+        PsseCaseIdentification caseIdentification = readCaseIdentificationData(reader, context);\n+        PsseRawModel model = new PsseRawModel(caseIdentification);\n+\n+        model.getBuses().addAll(readBusData(reader, context));\n+        model.getLoads().addAll(readLoadData(reader, context));\n+        model.getFixedShunts().addAll(readFixedBusShuntData(reader, context));\n+        model.getGenerators().addAll(readGeneratorData(reader, context));\n+        model.getNonTransformerBranches().addAll(readNonTransformerBranchData(reader, context));\n+        model.getTransformers().addAll(readTransformerData(reader, context));\n+        model.getAreas().addAll(readAreaInterchangeData(reader, context));\n+\n+        // 2-terminal DC data\n+        readRecordBlock(reader); // TODO\n+\n+        // voltage source converter data\n+        readRecordBlock(reader); // TODO\n+\n+        // impedance correction data\n+        readRecordBlock(reader); // TODO\n+\n+        // multi-terminal DC data\n+        readRecordBlock(reader); // TODO\n+\n+        // multi-section line data\n+        readRecordBlock(reader); // TODO\n+\n+        model.getZones().addAll(readZoneData(reader, context));\n+\n+        // inter-area transfer data\n+        readRecordBlock(reader); // TODO\n+\n+        model.getOwners().addAll(readOwnerData(reader, context));\n+\n+        // facts control device data\n+        readRecordBlock(reader); // TODO\n+\n+        model.getSwitchedShunts().addAll(readSwitchedShuntData(reader, context));\n+\n+        // gne device data\n+        readRecordBlock(reader); // TODO\n+\n+        // q record (nothing to do)\n+        readRecordBlock(reader);\n+\n+        return model;\n+    }\n+\n+    // Read blocks\n+\n+    private static PsseCaseIdentification readCaseIdentificationData(BufferedReader reader, PsseContext context) throws IOException {\n+        String line = readLineAndRemoveComment(reader);\n+        Objects.requireNonNull(line);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bff9296bbc9f1e5a3e6af0d7d5bb5d5cbb93d08"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzNDU1Mw==", "bodyText": "From my point of view, if readLine returns null, that means we are at the end of the file, whereas we wanted to read more data. Maybe a premature end of file? In that case, should we throw an exception?", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r515234553", "createdAt": "2020-10-30T16:47:29Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseRawReader.java", "diffHunk": "@@ -85,122 +321,108 @@ public void handleError(DataProcessingException error, Object[] inputRow, Parsin\n         return records;\n     }\n \n-    private PsseCaseIdentification readCaseIdentification(BufferedReader reader) throws IOException {\n-        String line = readLineAndRemoveComment(reader);\n-        PsseCaseIdentification caseIdentification = parseRecord(line, PsseCaseIdentification.class);\n-        caseIdentification.setTitle1(reader.readLine());\n-        caseIdentification.setTitle2(reader.readLine());\n-        return caseIdentification;\n+    private static String removeComment(String line) {\n+        int slashIndex = line.lastIndexOf('/');\n+        if (slashIndex == -1) {\n+            return line;\n+        }\n+        return line.substring(0, slashIndex);\n     }\n \n-    private List<PsseTransformer> readTransformers(BufferedReader reader) throws IOException {\n-        List<PsseTransformer> transformers = new ArrayList<>();\n-\n-        List<String> records = readRecordBlock(reader);\n-        int i = 0;\n-        while (i < records.size()) {\n-            PsseTransformer transformer = new PsseTransformer();\n-            transformer.setFirstRecord(parseRecord(records.get(i++), PsseTransformer.FirstRecord.class));\n-            transformer.setSecondRecord(parseRecord(records.get(i++), PsseTransformer.SecondRecord.class));\n-            transformer.setThirdRecord1(parseRecord(records.get(i++), PsseTransformer.ThirdRecord.class));\n-            transformer.setThirdRecord2(parseRecord(records.get(i++), PsseTransformer.ThirdRecord.class));\n-            if (transformer.getFirstRecord().getK() != 0) {\n-                transformer.setThirdRecord3(parseRecord(records.get(i++), PsseTransformer.ThirdRecord.class));\n+    private static String readLineAndRemoveComment(BufferedReader reader) throws IOException {\n+        String line = reader.readLine();\n+        if (line == null) {\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bff9296bbc9f1e5a3e6af0d7d5bb5d5cbb93d08"}, "originalPosition": 337}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzNjA0Ng==", "bodyText": "Are you really sure this is correct: I wonder if the lastIndexOf is correct, or if you should find the first occurence of / ? What if I have a comment that contain a slash?", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r515236046", "createdAt": "2020-10-30T16:49:54Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseRawReader.java", "diffHunk": "@@ -85,122 +321,108 @@ public void handleError(DataProcessingException error, Object[] inputRow, Parsin\n         return records;\n     }\n \n-    private PsseCaseIdentification readCaseIdentification(BufferedReader reader) throws IOException {\n-        String line = readLineAndRemoveComment(reader);\n-        PsseCaseIdentification caseIdentification = parseRecord(line, PsseCaseIdentification.class);\n-        caseIdentification.setTitle1(reader.readLine());\n-        caseIdentification.setTitle2(reader.readLine());\n-        return caseIdentification;\n+    private static String removeComment(String line) {\n+        int slashIndex = line.lastIndexOf('/');\n+        if (slashIndex == -1) {\n+            return line;\n+        }\n+        return line.substring(0, slashIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bff9296bbc9f1e5a3e6af0d7d5bb5d5cbb93d08"}, "originalPosition": 318}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzNzY3NA==", "bodyText": "This comment is useless", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r515237674", "createdAt": "2020-10-30T16:52:23Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseRawReader.java", "diffHunk": "@@ -21,39 +23,255 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n /**\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n public class PsseRawReader {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(PsseRawReader.class);\n \n-    private static String removeComment(String line) {\n-        int slashIndex = line.lastIndexOf('/');\n-        if (slashIndex == -1) {\n-            return line;\n+    public boolean checkCaseIdentification(BufferedReader reader) throws IOException {\n+        Objects.requireNonNull(reader);\n+\n+        // just check the first record if this file is in PSS/E format\n+        PsseCaseIdentification caseIdentification;\n+        try {\n+            caseIdentification = readCaseIdentificationData(reader);\n+        } catch (PsseException e) {\n+            return false; // invalid PSS/E content\n         }\n-        return line.substring(0, slashIndex);\n+\n+        int ic = caseIdentification.getIc();\n+        double sbase = caseIdentification.getSbase();\n+        int rev = caseIdentification.getRev();\n+        double basfrq = caseIdentification.getBasfrq();\n+\n+        if (ic == 0 && sbase > 0. && rev <= PsseConstants.SUPPORTED_VERSION && basfrq > 0.) {\n+            return true;\n+        }\n+\n+        return false;\n     }\n \n-    private static String readLineAndRemoveComment(BufferedReader reader) throws IOException {\n-        String line = reader.readLine();\n-        if (line == null) {\n-            return null;\n+    public PsseRawModel read(BufferedReader reader) throws IOException {\n+        PsseContext context = new PsseContext();\n+        return read(reader, context);\n+    }\n+\n+    public PsseRawModel read(BufferedReader reader, PsseContext context) throws IOException {\n+        Objects.requireNonNull(reader);\n+        Objects.requireNonNull(context);\n+\n+        PsseCaseIdentification caseIdentification = readCaseIdentificationData(reader, context);\n+        PsseRawModel model = new PsseRawModel(caseIdentification);\n+\n+        model.getBuses().addAll(readBusData(reader, context));\n+        model.getLoads().addAll(readLoadData(reader, context));\n+        model.getFixedShunts().addAll(readFixedBusShuntData(reader, context));\n+        model.getGenerators().addAll(readGeneratorData(reader, context));\n+        model.getNonTransformerBranches().addAll(readNonTransformerBranchData(reader, context));\n+        model.getTransformers().addAll(readTransformerData(reader, context));\n+        model.getAreas().addAll(readAreaInterchangeData(reader, context));\n+\n+        // 2-terminal DC data\n+        readRecordBlock(reader); // TODO\n+\n+        // voltage source converter data\n+        readRecordBlock(reader); // TODO\n+\n+        // impedance correction data\n+        readRecordBlock(reader); // TODO\n+\n+        // multi-terminal DC data\n+        readRecordBlock(reader); // TODO\n+\n+        // multi-section line data\n+        readRecordBlock(reader); // TODO\n+\n+        model.getZones().addAll(readZoneData(reader, context));\n+\n+        // inter-area transfer data\n+        readRecordBlock(reader); // TODO\n+\n+        model.getOwners().addAll(readOwnerData(reader, context));\n+\n+        // facts control device data\n+        readRecordBlock(reader); // TODO\n+\n+        model.getSwitchedShunts().addAll(readSwitchedShuntData(reader, context));\n+\n+        // gne device data\n+        readRecordBlock(reader); // TODO\n+\n+        // q record (nothing to do)\n+        readRecordBlock(reader);\n+\n+        return model;\n+    }\n+\n+    // Read blocks\n+\n+    private static PsseCaseIdentification readCaseIdentificationData(BufferedReader reader, PsseContext context) throws IOException {\n+        String line = readLineAndRemoveComment(reader);\n+        Objects.requireNonNull(line);\n+\n+        context.setDelimiter(detectDelimiter(line));\n+\n+        String[] headers = caseIdentificationDataHeaders(line.split(context.getDelimiter()).length);\n+        PsseCaseIdentification caseIdentification = parseRecordHeader(line, PsseCaseIdentification.class, headers);\n+        caseIdentification.setTitle1(reader.readLine());\n+        caseIdentification.setTitle2(reader.readLine());\n+\n+        context.setCaseIdentificationDataReadFields(headers);\n+        return caseIdentification;\n+    }\n+\n+    private static PsseCaseIdentification readCaseIdentificationData(BufferedReader reader) throws IOException {\n+        String line = readLineAndRemoveComment(reader);\n+        Objects.requireNonNull(line);\n+\n+        String[] headers = caseIdentificationDataHeaders();\n+        PsseCaseIdentification caseIdentification = parseRecordHeader(line, PsseCaseIdentification.class, headers);\n+        caseIdentification.setTitle1(reader.readLine());\n+        caseIdentification.setTitle2(reader.readLine());\n+\n+        return caseIdentification;\n+    }\n+\n+    private static List<PsseBus> readBusData(BufferedReader reader, PsseContext context) throws IOException {\n+        String[] headers = busDataHeaders();\n+        List<String> records = readRecordBlock(reader);\n+\n+        context.setBusDataReadFields(readFields(records, headers, context.getDelimiter()));\n+        return parseRecordsHeader(records, PsseBus.class, headers);\n+    }\n+\n+    private static List<PsseLoad> readLoadData(BufferedReader reader, PsseContext context) throws IOException {\n+        String[] headers = loadDataHeaders();\n+        List<String> records = readRecordBlock(reader);\n+\n+        context.setLoadDataReadFields(readFields(records, headers, context.getDelimiter()));\n+        return parseRecordsHeader(records, PsseLoad.class, headers);\n+    }\n+\n+    private static List<PsseFixedShunt> readFixedBusShuntData(BufferedReader reader, PsseContext context) throws IOException {\n+        String[] headers = fixedBusShuntDataHeaders();\n+        List<String> records = readRecordBlock(reader);\n+\n+        context.setFixedBusShuntDataReadFields(readFields(records, headers, context.getDelimiter()));\n+        return parseRecordsHeader(records, PsseFixedShunt.class, headers);\n+    }\n+\n+    private static List<PsseGenerator> readGeneratorData(BufferedReader reader, PsseContext context) throws IOException {\n+        String[] headers = generatorDataHeaders();\n+        List<String> records = readRecordBlock(reader);\n+\n+        context.setGeneratorDataReadFields(readFields(records, headers, context.getDelimiter()));\n+        return parseRecordsHeader(records, PsseGenerator.class, headers);\n+    }\n+\n+    private static List<PsseNonTransformerBranch> readNonTransformerBranchData(BufferedReader reader, PsseContext context) throws IOException {\n+        String[] headers = nonTransformerBranchDataHeaders();\n+        List<String> records = readRecordBlock(reader);\n+\n+        context.setNonTransformerBranchDataReadFields(readFields(records, headers, context.getDelimiter()));\n+        return parseRecordsHeader(records, PsseNonTransformerBranch.class, headers);\n+    }\n+\n+    private static List<PsseTransformer> readTransformerData(BufferedReader reader, PsseContext context) throws IOException {\n+\n+        String[] windingHeaders = transformerWindingDataHeaders();\n+        List<PsseTransformer> transformers = new ArrayList<>();\n+\n+        List<String> records = readRecordBlock(reader);\n+        int i = 0;\n+        while (i < records.size()) {\n+            String record1 = records.get(i++);\n+            String record2 = records.get(i++);\n+            String record3 = records.get(i++);\n+            String record4 = records.get(i++);\n+            String twtRecord = String.join(context.getDelimiter(), record1, record2);\n+\n+            String[] headers = transformerDataHeaders(record1.split(context.getDelimiter()).length);\n+            PsseTransformer transformer = parseRecordHeader(twtRecord, PsseTransformer.class, headers);\n+\n+            transformer.setWindingRecord1(parseRecordHeader(record3, PsseTransformer.WindingRecord.class, windingHeaders));\n+            transformer.setWindingRecord2(parseRecordHeader(record4, PsseTransformer.WindingRecord.class, windingHeaders));\n+\n+            if (transformer.getK() != 0) {\n+                String record5 = records.get(i++);\n+                transformer\n+                    .setWindingRecord3(parseRecordHeader(record5, PsseTransformer.WindingRecord.class, windingHeaders));\n+\n+                if (context.is3wTransformerDataReadFieldsEmpty()) {\n+                    context.set3wTransformerDataReadFields(readFields(twtRecord, headers, context.getDelimiter()),\n+                        readFields(record3, windingHeaders, context.getDelimiter()),\n+                        readFields(record4, windingHeaders, context.getDelimiter()),\n+                        readFields(record5, windingHeaders, context.getDelimiter()));\n+                }\n+            } else {\n+                if (context.is2wTransformerDataReadFieldsEmpty()) {\n+                    context.set2wTransformerDataReadFields(readFields(twtRecord, headers, context.getDelimiter()),\n+                        readFields(record3, windingHeaders, context.getDelimiter()),\n+                        readFields(record4, windingHeaders, context.getDelimiter()));\n+                }\n+            }\n+            transformers.add(transformer);\n         }\n-        return removeComment(line);\n+\n+        return transformers;\n+    }\n+\n+    private static List<PsseArea> readAreaInterchangeData(BufferedReader reader, PsseContext context) throws IOException {\n+        String[] headers = areaInterchangeDataHeaders();\n+        List<String> records = readRecordBlock(reader);\n+\n+        context.setAreaInterchangeDataReadFields(readFields(records, headers, context.getDelimiter()));\n+        return parseRecordsHeader(records, PsseArea.class, headers);\n     }\n \n-    private static <T> T parseRecord(String record, Class<T> aClass) {\n-        List<T> beans = parseRecords(Collections.singletonList(record), aClass);\n+    private static List<PsseZone> readZoneData(BufferedReader reader, PsseContext context) throws IOException {\n+        String[] headers = zoneDataHeaders();\n+        List<String> records = readRecordBlock(reader);\n+\n+        context.setZoneDataReadFields(readFields(records, headers, context.getDelimiter()));\n+        return parseRecordsHeader(records, PsseZone.class, headers);\n+    }\n+\n+    private static List<PsseOwner> readOwnerData(BufferedReader reader, PsseContext context) throws IOException {\n+        String[] headers = ownerDataHeaders();\n+        List<String> records = readRecordBlock(reader);\n+\n+        context.setOwnerDataReadFields(readFields(records, headers, context.getDelimiter()));\n+        return parseRecordsHeader(records, PsseOwner.class, headers);\n+    }\n+\n+    private static List<PsseSwitchedShunt> readSwitchedShuntData(BufferedReader reader, PsseContext context) throws IOException {\n+        String[] headers = switchedShuntDataHeaders();\n+        List<String> records = readRecordBlock(reader);\n+\n+        context.setSwitchedShuntDataReadFields(readFields(records, headers, context.getDelimiter()));\n+        return parseRecordsHeader(records, PsseSwitchedShunt.class, headers);\n+    }\n+\n+    // Parse", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bff9296bbc9f1e5a3e6af0d7d5bb5d5cbb93d08"}, "originalPosition": 261}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzODIwOQ==", "bodyText": "Should we extract these lines into a method to avoid duplication (see parseRecordsHeader above)", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r515238209", "createdAt": "2020-10-30T16:53:17Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseRawReader.java", "diffHunk": "@@ -73,6 +291,24 @@ public void handleError(DataProcessingException error, Object[] inputRow, Parsin\n         return beans;\n     }\n \n+    private static String detectDelimiter(String record) {\n+        CsvParserSettings settings = new CsvParserSettings();\n+        settings.setHeaderExtractionEnabled(false);\n+        settings.setQuoteDetectionEnabled(true);\n+        settings.setDelimiterDetectionEnabled(true, ',', ' '); // sequence order is relevant\n+        settings.setProcessorErrorHandler(new RetryableErrorHandler<ParsingContext>() {\n+            @Override\n+            public void handleError(DataProcessingException error, Object[] inputRow, ParsingContext context) {\n+                LOGGER.error(error.getMessage());\n+            }\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bff9296bbc9f1e5a3e6af0d7d5bb5d5cbb93d08"}, "originalPosition": 292}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI0MDYwNA==", "bodyText": "Since you use ArrayUtils, why don't use ArrayUtils.EMPTY_STRING_ARRAY?", "url": "https://github.com/powsybl/powsybl-core/pull/1460#discussion_r515240604", "createdAt": "2020-10-30T16:56:58Z", "author": {"login": "mathbagu"}, "path": "psse/psse-model/src/main/java/com/powsybl/psse/model/PsseRawReader.java", "diffHunk": "@@ -85,122 +321,108 @@ public void handleError(DataProcessingException error, Object[] inputRow, Parsin\n         return records;\n     }\n \n-    private PsseCaseIdentification readCaseIdentification(BufferedReader reader) throws IOException {\n-        String line = readLineAndRemoveComment(reader);\n-        PsseCaseIdentification caseIdentification = parseRecord(line, PsseCaseIdentification.class);\n-        caseIdentification.setTitle1(reader.readLine());\n-        caseIdentification.setTitle2(reader.readLine());\n-        return caseIdentification;\n+    private static String removeComment(String line) {\n+        int slashIndex = line.lastIndexOf('/');\n+        if (slashIndex == -1) {\n+            return line;\n+        }\n+        return line.substring(0, slashIndex);\n     }\n \n-    private List<PsseTransformer> readTransformers(BufferedReader reader) throws IOException {\n-        List<PsseTransformer> transformers = new ArrayList<>();\n-\n-        List<String> records = readRecordBlock(reader);\n-        int i = 0;\n-        while (i < records.size()) {\n-            PsseTransformer transformer = new PsseTransformer();\n-            transformer.setFirstRecord(parseRecord(records.get(i++), PsseTransformer.FirstRecord.class));\n-            transformer.setSecondRecord(parseRecord(records.get(i++), PsseTransformer.SecondRecord.class));\n-            transformer.setThirdRecord1(parseRecord(records.get(i++), PsseTransformer.ThirdRecord.class));\n-            transformer.setThirdRecord2(parseRecord(records.get(i++), PsseTransformer.ThirdRecord.class));\n-            if (transformer.getFirstRecord().getK() != 0) {\n-                transformer.setThirdRecord3(parseRecord(records.get(i++), PsseTransformer.ThirdRecord.class));\n+    private static String readLineAndRemoveComment(BufferedReader reader) throws IOException {\n+        String line = reader.readLine();\n+        if (line == null) {\n+            return null;\n+        }\n+        StringBuffer newLine = new StringBuffer();\n+        Pattern p = Pattern.compile(\"('[^']+')|( )+\");\n+        Matcher m = p.matcher(removeComment(line));\n+        while (m.find()) {\n+            if (m.group().contains(\"'\")) {\n+                m.appendReplacement(newLine, m.group());\n+            } else {\n+                m.appendReplacement(newLine, \" \");\n             }\n-            transformers.add(transformer);\n         }\n-\n-        return transformers;\n+        m.appendTail(newLine);\n+        return newLine.toString().trim();\n     }\n \n-    public PsseRawModel read(BufferedReader reader) throws IOException {\n-        Objects.requireNonNull(reader);\n-\n-        // case identification\n-        PsseCaseIdentification caseIdentification = readCaseIdentification(reader);\n-\n-        PsseRawModel model = new PsseRawModel(caseIdentification);\n-\n-        // bus data\n-        model.getBuses().addAll(parseRecords(readRecordBlock(reader), PsseBus.class));\n-\n-        // load data\n-        model.getLoads().addAll(parseRecords(readRecordBlock(reader), PsseLoad.class));\n-\n-        // fixed shunt data\n-        model.getFixedShunts().addAll(parseRecords(readRecordBlock(reader), PsseFixedShunt.class));\n-\n-        // generator data\n-        model.getGenerators().addAll(parseRecords(readRecordBlock(reader), PsseGenerator.class));\n-\n-        // non transformer data\n-        model.getNonTransformerBranches().addAll(parseRecords(readRecordBlock(reader), PsseNonTransformerBranch.class));\n-\n-        // transformer data\n-        model.getTransformers().addAll(readTransformers(reader));\n-\n-        // area data\n-        model.getAreas().addAll(parseRecords(readRecordBlock(reader), PsseArea.class));\n+    // Read fields\n \n-        // 2-terminal DC data\n-        readRecordBlock(reader); // TODO\n-\n-        // voltage source converter data\n-        readRecordBlock(reader); // TODO\n+    private static String[] readFields(List<String> records, String[] headers, String delimiter) {\n+        if (records.isEmpty()) {\n+            return new String[] {};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bff9296bbc9f1e5a3e6af0d7d5bb5d5cbb93d08"}, "originalPosition": 393}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df880e165cd8374d86f7ee0e65467a703893a5bf", "author": {"user": {"login": "marqueslanauja", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/df880e165cd8374d86f7ee0e65467a703893a5bf", "committedDate": "2020-11-02T16:52:10Z", "message": "Apply reviewer comments\n\nSigned-off-by: Jos\u00e9 Antonio Marqu\u00e9s <marquesja@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44e5279d9d73c906bc2a6aed5ede7a40dabe540c", "author": {"user": {"login": "marqueslanauja", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/44e5279d9d73c906bc2a6aed5ede7a40dabe540c", "committedDate": "2020-11-02T17:08:05Z", "message": "Merge branch 'master' into psse_parserByField"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1560b0dcaec2adfa041d6731a956c7646f8292b", "author": {"user": {"login": "marqueslanauja", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/f1560b0dcaec2adfa041d6731a956c7646f8292b", "committedDate": "2020-11-02T17:52:06Z", "message": "Fix code smells\n\nSigned-off-by: Jos\u00e9 Antonio Marqu\u00e9s <marquesja@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25e86c66cac2f2a56f94a86256f1918a65683c5b", "author": {"user": {"login": "marqueslanauja", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/25e86c66cac2f2a56f94a86256f1918a65683c5b", "committedDate": "2020-11-02T18:19:52Z", "message": "Fix code smells\n\nSigned-off-by: Jos\u00e9 Antonio Marqu\u00e9s <marquesja@aia.es>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e12b4cfd947946b6309819803694aba40948b240", "author": {"user": {"login": "mathbagu", "name": "Mathieu BAGUE"}}, "url": "https://github.com/powsybl/powsybl-core/commit/e12b4cfd947946b6309819803694aba40948b240", "committedDate": "2020-11-06T14:48:11Z", "message": "Review fixes\n\nSigned-off-by: Mathieu BAGUE <mathieu.bague@rte-france.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1MjIwOTAx", "url": "https://github.com/powsybl/powsybl-core/pull/1460#pullrequestreview-525220901", "createdAt": "2020-11-06T14:48:54Z", "commit": {"oid": "e12b4cfd947946b6309819803694aba40948b240"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "680648e087141a693b0eae2ef1f10262996fcde3", "author": {"user": {"login": "mathbagu", "name": "Mathieu BAGUE"}}, "url": "https://github.com/powsybl/powsybl-core/commit/680648e087141a693b0eae2ef1f10262996fcde3", "committedDate": "2020-11-06T14:49:03Z", "message": "Merge branch 'master' into psse_parserByField"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4152, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}