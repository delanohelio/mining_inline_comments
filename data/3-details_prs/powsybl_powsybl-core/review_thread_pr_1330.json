{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MDA1OTU4", "number": 1330, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODo0NTo1M1rOEAOtyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMDozNTowNlrOEC56Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4Njc2NTU0OnYy", "diffSide": "RIGHT", "path": "dynamic-simulation/dynamic-simulation-api/src/main/java/com/powsybl/dynamicsimulation/Provider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODo0NTo1M1rOGbYb8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOTo1NToyMFrOGba8cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM2NTEwNw==", "bodyText": "What about naming this class as DynamicSimulationDataProvider or DynamicSimulationInputsProvider ?", "url": "https://github.com/powsybl/powsybl-core/pull/1330#discussion_r431365107", "createdAt": "2020-05-27T18:45:53Z", "author": {"login": "zamarrenolm"}, "path": "dynamic-simulation/dynamic-simulation-api/src/main/java/com/powsybl/dynamicsimulation/Provider.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+\n+package com.powsybl.dynamicsimulation;\n+\n+import com.powsybl.iidm.network.Network;\n+\n+import java.util.List;\n+\n+/**\n+ * @author Mathieu Bague <mathieu.bague@rte-france.com>\n+ */\n+public interface Provider<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4096bf7a67e092fb48daa0b3d607f973ef2b92ba"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwNjE5NA==", "bodyText": "With @agnesLeroy we think this could be moved in a more common module, so we wouldn't add a Dynamic prefix. Looking to the Javadoc, the good name should be Supplier. The Supplier class is a generic class that have only one method get. In our case, it's the same concept, except that the get method takes one argument.", "url": "https://github.com/powsybl/powsybl-core/pull/1330#discussion_r431406194", "createdAt": "2020-05-27T19:55:20Z", "author": {"login": "mathbagu"}, "path": "dynamic-simulation/dynamic-simulation-api/src/main/java/com/powsybl/dynamicsimulation/Provider.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+\n+package com.powsybl.dynamicsimulation;\n+\n+import com.powsybl.iidm.network.Network;\n+\n+import java.util.List;\n+\n+/**\n+ * @author Mathieu Bague <mathieu.bague@rte-france.com>\n+ */\n+public interface Provider<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM2NTEwNw=="}, "originalCommit": {"oid": "4096bf7a67e092fb48daa0b3d607f973ef2b92ba"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODUxMTI2OnYy", "diffSide": "RIGHT", "path": "dynamic-simulation/dynamic-simulation-tool/src/main/java/com/powsybl/dynamicsimulation/tool/DynamicSimulationTool.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNzo0NTowNFrOGbpa-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODo0MzowN1rOGbrcNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY0MzM4Ng==", "bodyText": "We should fix this TODO before merging this PR. @mathbagu did you leave it for @marcosmc to complete?", "url": "https://github.com/powsybl/powsybl-core/pull/1330#discussion_r431643386", "createdAt": "2020-05-28T07:45:04Z", "author": {"login": "agnesLeroy"}, "path": "dynamic-simulation/dynamic-simulation-tool/src/main/java/com/powsybl/dynamicsimulation/tool/DynamicSimulationTool.java", "diffHunk": "@@ -118,22 +120,30 @@ public void run(CommandLine line, ToolRunningContext context) throws Exception {\n         }\n \n         context.getOutputStream().println(\"Loading network '\" + caseFile + \"'\");\n-        Properties inputParams = readProperties(line, ConversionToolUtils.OptionType.IMPORT, context);\n+        Properties inputParams = ConversionToolUtils.readProperties(line, ConversionToolUtils.OptionType.IMPORT, context);\n         ImportConfig importConfig = (!skipPostProc) ? ImportConfig.load() : new ImportConfig();\n         Network network = Importers.loadNetwork(caseFile, context.getShortTimeExecutionComputationManager(),\n             importConfig, inputParams);\n         if (network == null) {\n             throw new PowsyblException(\"Case '\" + caseFile + \"' not found\");\n         }\n \n+        DynamicSimulation.Runner runner = DynamicSimulation.find();\n+\n+        CurvesProvider curvesProvider = CurvesProvider.empty();\n+        if (line.hasOption(CURVES_FILE)) {\n+            Path curvesFile = context.getFileSystem().getPath(line.getOptionValue(CURVES_FILE));\n+            curvesProvider = createCurvesProvider(curvesFile, runner.getName());\n+        }\n+\n         DynamicSimulationParameters params = DynamicSimulationParameters.load();\n         if (line.hasOption(PARAMETERS_FILE)) {\n             Path parametersFile = context.getFileSystem().getPath(line.getOptionValue(PARAMETERS_FILE));\n             JsonDynamicSimulationParameters.update(params, parametersFile);\n         }\n \n-        DynamicSimulationResult result = DynamicSimulation.run(network,\n-            context.getShortTimeExecutionComputationManager(), params);\n+        // TODO: use the curvesProvider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a21533259797c2eeaeec5d536ba5bc76823af1ec"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY3NjQ3MA==", "bodyText": "Done.", "url": "https://github.com/powsybl/powsybl-core/pull/1330#discussion_r431676470", "createdAt": "2020-05-28T08:43:07Z", "author": {"login": "marcosmc"}, "path": "dynamic-simulation/dynamic-simulation-tool/src/main/java/com/powsybl/dynamicsimulation/tool/DynamicSimulationTool.java", "diffHunk": "@@ -118,22 +120,30 @@ public void run(CommandLine line, ToolRunningContext context) throws Exception {\n         }\n \n         context.getOutputStream().println(\"Loading network '\" + caseFile + \"'\");\n-        Properties inputParams = readProperties(line, ConversionToolUtils.OptionType.IMPORT, context);\n+        Properties inputParams = ConversionToolUtils.readProperties(line, ConversionToolUtils.OptionType.IMPORT, context);\n         ImportConfig importConfig = (!skipPostProc) ? ImportConfig.load() : new ImportConfig();\n         Network network = Importers.loadNetwork(caseFile, context.getShortTimeExecutionComputationManager(),\n             importConfig, inputParams);\n         if (network == null) {\n             throw new PowsyblException(\"Case '\" + caseFile + \"' not found\");\n         }\n \n+        DynamicSimulation.Runner runner = DynamicSimulation.find();\n+\n+        CurvesProvider curvesProvider = CurvesProvider.empty();\n+        if (line.hasOption(CURVES_FILE)) {\n+            Path curvesFile = context.getFileSystem().getPath(line.getOptionValue(CURVES_FILE));\n+            curvesProvider = createCurvesProvider(curvesFile, runner.getName());\n+        }\n+\n         DynamicSimulationParameters params = DynamicSimulationParameters.load();\n         if (line.hasOption(PARAMETERS_FILE)) {\n             Path parametersFile = context.getFileSystem().getPath(line.getOptionValue(PARAMETERS_FILE));\n             JsonDynamicSimulationParameters.update(params, parametersFile);\n         }\n \n-        DynamicSimulationResult result = DynamicSimulation.run(network,\n-            context.getShortTimeExecutionComputationManager(), params);\n+        // TODO: use the curvesProvider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY0MzM4Ng=="}, "originalCommit": {"oid": "a21533259797c2eeaeec5d536ba5bc76823af1ec"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODk0MjkyOnYy", "diffSide": "RIGHT", "path": "dynamic-simulation/dynamic-simulation-api/src/main/java/com/powsybl/dynamicsimulation/DynamicSimulation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOTo0OToyM1rOGbtymw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzoyMDozMFrOGb0vaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcxNDk3MQ==", "bodyText": "@marcosmc In this class we would like to have all the combinations of possible calls of run and runAsync. Could you add them? There are 11 possibilities aside from the one you've done here to provide. Let me know if it's unclear to you.", "url": "https://github.com/powsybl/powsybl-core/pull/1330#discussion_r431714971", "createdAt": "2020-05-28T09:49:23Z", "author": {"login": "agnesLeroy"}, "path": "dynamic-simulation/dynamic-simulation-api/src/main/java/com/powsybl/dynamicsimulation/DynamicSimulation.java", "diffHunk": "@@ -71,6 +71,11 @@ public DynamicSimulationResult run(Network network, CurvesProvider curvesProvide\n             return runAsync(network, curvesProvider, workingVariantId, computationManager, parameters).join();\n         }\n \n+        public DynamicSimulationResult run(Network network, CurvesProvider curvesProvider, ComputationManager computationManager,\n+            DynamicSimulationParameters parameters) {\n+            return run(network, curvesProvider, network.getVariantManager().getWorkingVariantId(), computationManager, parameters);\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5d89351d2032fe909bbf15b0739c29111043f60"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgyODg0MA==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1330#discussion_r431828840", "createdAt": "2020-05-28T13:20:30Z", "author": {"login": "marcosmc"}, "path": "dynamic-simulation/dynamic-simulation-api/src/main/java/com/powsybl/dynamicsimulation/DynamicSimulation.java", "diffHunk": "@@ -71,6 +71,11 @@ public DynamicSimulationResult run(Network network, CurvesProvider curvesProvide\n             return runAsync(network, curvesProvider, workingVariantId, computationManager, parameters).join();\n         }\n \n+        public DynamicSimulationResult run(Network network, CurvesProvider curvesProvider, ComputationManager computationManager,\n+            DynamicSimulationParameters parameters) {\n+            return run(network, curvesProvider, network.getVariantManager().getWorkingVariantId(), computationManager, parameters);\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcxNDk3MQ=="}, "originalCommit": {"oid": "c5d89351d2032fe909bbf15b0739c29111043f60"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjk3NDgzOnYy", "diffSide": "RIGHT", "path": "dynamic-simulation/dynamic-simulation-api/src/main/java/com/powsybl/dynamicsimulation/DynamicSimulation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzozOTowMVrOGecPcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzozOTowMVrOGecPcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU3MzE2OA==", "bodyText": "Here it seems computationManager and workingVariantId are inverted", "url": "https://github.com/powsybl/powsybl-core/pull/1330#discussion_r434573168", "createdAt": "2020-06-03T13:39:01Z", "author": {"login": "agnesLeroy"}, "path": "dynamic-simulation/dynamic-simulation-api/src/main/java/com/powsybl/dynamicsimulation/DynamicSimulation.java", "diffHunk": "@@ -32,43 +32,70 @@ public Runner(DynamicSimulationProvider provider) {\n             this.provider = Objects.requireNonNull(provider);\n         }\n \n-        public CompletableFuture<DynamicSimulationResult> runAsync(Network network, String workingStateId,\n-            ComputationManager computationManager, DynamicSimulationParameters parameters) {\n-            Objects.requireNonNull(workingStateId);\n-            Objects.requireNonNull(parameters);\n-            return provider.run(network, computationManager, workingStateId, parameters);\n+        public CompletableFuture<DynamicSimulationResult> runAsync(Network network, CurvesSupplier curvesSupplier, String workingVariantId,\n+                                                                   ComputationManager computationManager, DynamicSimulationParameters parameters) {\n+            return provider.run(network, curvesSupplier, computationManager, workingVariantId, parameters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03501fff117c402fc404686506c83f7f99409338"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjk4ODMwOnYy", "diffSide": "RIGHT", "path": "dynamic-simulation/dynamic-simulation-api/src/main/java/com/powsybl/dynamicsimulation/DynamicSimulation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo0MToyNVrOGecXwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo0MToyNVrOGecXwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU3NTI5OA==", "bodyText": "Here shouldn't we return run(network, CurvesSuplier.empty(), workingVariantId, computationManager, parameters) instead?", "url": "https://github.com/powsybl/powsybl-core/pull/1330#discussion_r434575298", "createdAt": "2020-06-03T13:41:25Z", "author": {"login": "agnesLeroy"}, "path": "dynamic-simulation/dynamic-simulation-api/src/main/java/com/powsybl/dynamicsimulation/DynamicSimulation.java", "diffHunk": "@@ -32,43 +32,70 @@ public Runner(DynamicSimulationProvider provider) {\n             this.provider = Objects.requireNonNull(provider);\n         }\n \n-        public CompletableFuture<DynamicSimulationResult> runAsync(Network network, String workingStateId,\n-            ComputationManager computationManager, DynamicSimulationParameters parameters) {\n-            Objects.requireNonNull(workingStateId);\n-            Objects.requireNonNull(parameters);\n-            return provider.run(network, computationManager, workingStateId, parameters);\n+        public CompletableFuture<DynamicSimulationResult> runAsync(Network network, CurvesSupplier curvesSupplier, String workingVariantId,\n+                                                                   ComputationManager computationManager, DynamicSimulationParameters parameters) {\n+            return provider.run(network, curvesSupplier, computationManager, workingVariantId, parameters);\n         }\n \n-        public CompletableFuture<DynamicSimulationResult> runAsync(Network network,\n-            ComputationManager computationManager, DynamicSimulationParameters parameters) {\n+        public CompletableFuture<DynamicSimulationResult> runAsync(Network network, String workingVariantId, ComputationManager computationManager,\n+                                                                   DynamicSimulationParameters parameters) {\n+            return runAsync(network, CurvesSupplier.empty(), workingVariantId, computationManager, parameters);\n+        }\n+\n+        public CompletableFuture<DynamicSimulationResult> runAsync(Network network, CurvesSupplier curvesSupplier, ComputationManager computationManager,\n+                                                                   DynamicSimulationParameters parameters) {\n+            return runAsync(network, curvesSupplier, network.getVariantManager().getWorkingVariantId(), computationManager, parameters);\n+        }\n+\n+        public CompletableFuture<DynamicSimulationResult> runAsync(Network network, ComputationManager computationManager, DynamicSimulationParameters parameters) {\n             return runAsync(network, network.getVariantManager().getWorkingVariantId(), computationManager, parameters);\n         }\n \n-        public CompletableFuture<DynamicSimulationResult> runAsync(Network network,\n-            DynamicSimulationParameters parameters) {\n+        public CompletableFuture<DynamicSimulationResult> runAsync(Network network, CurvesSupplier curvesSupplier, DynamicSimulationParameters parameters) {\n+            return runAsync(network, curvesSupplier, LocalComputationManager.getDefault(), parameters);\n+        }\n+\n+        public CompletableFuture<DynamicSimulationResult> runAsync(Network network, DynamicSimulationParameters parameters) {\n             return runAsync(network, LocalComputationManager.getDefault(), parameters);\n         }\n \n+        public CompletableFuture<DynamicSimulationResult> runAsync(Network network, CurvesSupplier curvesSupplier) {\n+            return runAsync(network, curvesSupplier, DynamicSimulationParameters.load());\n+        }\n+\n         public CompletableFuture<DynamicSimulationResult> runAsync(Network network) {\n             return runAsync(network, DynamicSimulationParameters.load());\n         }\n \n-        public DynamicSimulationResult run(Network network, String workingStateId,\n-            ComputationManager computationManager, DynamicSimulationParameters parameters) {\n-            Objects.requireNonNull(workingStateId);\n-            Objects.requireNonNull(parameters);\n-            return provider.run(network, computationManager, workingStateId, parameters).join();\n+        public DynamicSimulationResult run(Network network, CurvesSupplier curvesSupplier, String workingVariantId, ComputationManager computationManager,\n+                                           DynamicSimulationParameters parameters) {\n+            return runAsync(network, curvesSupplier, workingVariantId, computationManager, parameters).join();\n         }\n \n-        public DynamicSimulationResult run(Network network, ComputationManager computationManager,\n-            DynamicSimulationParameters parameters) {\n+        public DynamicSimulationResult run(Network network, String workingVariantId, ComputationManager computationManager, DynamicSimulationParameters parameters) {\n+            return runAsync(network, workingVariantId, computationManager, parameters).join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03501fff117c402fc404686506c83f7f99409338"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzAwMzI4OnYy", "diffSide": "RIGHT", "path": "dynamic-simulation/dynamic-simulation-api/src/main/java/com/powsybl/dynamicsimulation/DynamicSimulation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo0NDo1N1rOGechxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo0NDo1N1rOGechxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU3Nzg2MQ==", "bodyText": "We also need all the run and runAsync combinations in this part of the file please.", "url": "https://github.com/powsybl/powsybl-core/pull/1330#discussion_r434577861", "createdAt": "2020-06-03T13:44:57Z", "author": {"login": "agnesLeroy"}, "path": "dynamic-simulation/dynamic-simulation-api/src/main/java/com/powsybl/dynamicsimulation/DynamicSimulation.java", "diffHunk": "@@ -113,9 +140,9 @@ public static Runner find() {\n         return find().runAsync(network);\n     }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03501fff117c402fc404686506c83f7f99409338"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDgxMzk0OnYy", "diffSide": "RIGHT", "path": "dynamic-simulation/dynamic-simulation-api/src/main/java/com/powsybl/dynamicsimulation/DynamicSimulationProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMDozNTowNlrOGfpWhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzo0MDo1NVrOGfu8tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgzNjU1MA==", "bodyText": "Just a question about the semantics of the Versionable interface.\nI assume the name and version strings returned by a DynamicSimulationProvider should be interpreted as the name and version of the external simulator that this provider is integrating in PowSyBl ?\nFor example for Dynawo, getName() would return \"Dynawo\" and getVersion() \"1.1.0\".\nOr should it be related to a specific version of the provider, internal to powsybl, and used consistently for later potential updates of the same \"kind\" of provider ?\nAs an example: we start with a Dynawo provider with version \"1\" that connects only with Dynawo 1.1.0. Later we create an updated Dynawo provider, version \"2\", that is able to connect with multiple versions of Dynawo, starting from 1.1.x and up to Dynawo 2.0.0.\nHow the version attribute is planned to be used in PowSyBl ?", "url": "https://github.com/powsybl/powsybl-core/pull/1330#discussion_r435836550", "createdAt": "2020-06-05T10:35:06Z", "author": {"login": "zamarrenolm"}, "path": "dynamic-simulation/dynamic-simulation-api/src/main/java/com/powsybl/dynamicsimulation/DynamicSimulationProvider.java", "diffHunk": "@@ -18,6 +18,6 @@\n  */\n public interface DynamicSimulationProvider extends Versionable, PlatformConfigNamedProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91c86db42ccb58503ace0ffa4dd1defac5c1d8bf"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyODI0NA==", "bodyText": "No idea how we'll use it in powsybl. From my point of view, the provider should use this to ensure that it is compatible with the binary it will run. It's how we use it in RTE for Hades2.\nBut I don't know if we already discuss (and agree) on how it will be used. Versionable is a really old interface... coming from iTesla project.", "url": "https://github.com/powsybl/powsybl-core/pull/1330#discussion_r435928244", "createdAt": "2020-06-05T13:40:55Z", "author": {"login": "mathbagu"}, "path": "dynamic-simulation/dynamic-simulation-api/src/main/java/com/powsybl/dynamicsimulation/DynamicSimulationProvider.java", "diffHunk": "@@ -18,6 +18,6 @@\n  */\n public interface DynamicSimulationProvider extends Versionable, PlatformConfigNamedProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgzNjU1MA=="}, "originalCommit": {"oid": "91c86db42ccb58503ace0ffa4dd1defac5c1d8bf"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 129, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}