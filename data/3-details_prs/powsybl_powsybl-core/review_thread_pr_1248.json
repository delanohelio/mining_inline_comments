{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NjU3NTk1", "number": 1248, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDoxNTozOVrODtd7oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDoyOTozN1rODvJ7cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDAyOTEzOnYy", "diffSide": "RIGHT", "path": "commons/src/main/java/com/powsybl/commons/extensions/ExtensionJsonSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDoxNTozOVrOF-6B8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDoxNTozOVrOF-6B8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUwNjgwMQ==", "bodyText": "I think it would be slightly better to do the same thing as before here:\njust call the deserialize() method which will read the json and overwrite the extension", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r401506801", "createdAt": "2020-04-01T10:15:39Z", "author": {"login": "sylvlecl"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/ExtensionJsonSerializer.java", "diffHunk": "@@ -23,4 +23,8 @@\n     void serialize(E extension, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException;\n \n     E deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException;\n+\n+    default E deserializeAndUpdate(JsonParser jsonParser, DeserializationContext deserializationContext, E parameters) throws IOException {\n+        return parameters;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e787289fed303da6e9b41dd8d7bbdabb2b867383"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDA1NDc2OnYy", "diffSide": "RIGHT", "path": "commons/src/main/java/com/powsybl/commons/json/JsonUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDoyMjozOVrOF-6Rtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDoyMzoyM1rOF-6TRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxMDgzOQ==", "bodyText": "I think here there will be an issue if you have multiple extensions : the one you get is not necessarily of type E !\nMaybe what you can do is use getExtensionByName instead of iterating on all extensions.", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r401510839", "createdAt": "2020-04-01T10:22:39Z", "author": {"login": "sylvlecl"}, "path": "commons/src/main/java/com/powsybl/commons/json/JsonUtil.java", "diffHunk": "@@ -216,6 +216,51 @@ public static void writeOptionalIntegerField(JsonGenerator jsonGenerator, String\n         return notFound;\n     }\n \n+    public static <T extends Extendable> List<Extension<T>> updateExtensions(JsonParser parser, DeserializationContext context,\n+                                                                             ExtensionProviders<? extends ExtensionJsonSerializer> supplier, T toUpdatedParameters) throws IOException {\n+        return updateExtensions(parser, context, SUPPLIER.get(), null, toUpdatedParameters);\n+    }\n+\n+    public static <T extends Extendable> List<Extension<T>> updateExtensions(JsonParser parser, DeserializationContext context,\n+                                                                             ExtensionProviders<? extends ExtensionJsonSerializer> supplier, Set<String> extensionsNotFound, T toUpdateExtension) throws IOException {\n+        Objects.requireNonNull(parser);\n+        Objects.requireNonNull(context);\n+        Objects.requireNonNull(supplier);\n+        Objects.requireNonNull(toUpdateExtension);\n+\n+        List<Extension<T>> extensions = new ArrayList<>();\n+        while (parser.nextToken() != JsonToken.END_OBJECT) {\n+            Extension<T> extension = updateExtension(parser, context, supplier, extensionsNotFound, toUpdateExtension);\n+            if (extension != null) {\n+                extensions.add(extension);\n+            }\n+        }\n+        return extensions;\n+    }\n+\n+    public static <T extends Extendable, E extends Extension<T>> E updateExtension(JsonParser parser, DeserializationContext context,\n+                                                                                   ExtensionProviders<? extends ExtensionJsonSerializer> supplier, Set<String> extensionsNotFound, T toUpdateExtensions) throws IOException {\n+        String extensionName = parser.getCurrentName();\n+        ExtensionJsonSerializer<T, E> extensionJsonSerializer = supplier.findProvider(extensionName);\n+        if (extensionJsonSerializer != null) {\n+            parser.nextToken();\n+            for (Object ext : toUpdateExtensions.getExtensions()) {\n+                if (ext != null) {\n+                    E toUpdateExtension = (E) ext;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e787289fed303da6e9b41dd8d7bbdabb2b867383"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxMTIzNw==", "bodyText": "Note: you could check this with a unit test with 2 extensions.", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r401511237", "createdAt": "2020-04-01T10:23:23Z", "author": {"login": "sylvlecl"}, "path": "commons/src/main/java/com/powsybl/commons/json/JsonUtil.java", "diffHunk": "@@ -216,6 +216,51 @@ public static void writeOptionalIntegerField(JsonGenerator jsonGenerator, String\n         return notFound;\n     }\n \n+    public static <T extends Extendable> List<Extension<T>> updateExtensions(JsonParser parser, DeserializationContext context,\n+                                                                             ExtensionProviders<? extends ExtensionJsonSerializer> supplier, T toUpdatedParameters) throws IOException {\n+        return updateExtensions(parser, context, SUPPLIER.get(), null, toUpdatedParameters);\n+    }\n+\n+    public static <T extends Extendable> List<Extension<T>> updateExtensions(JsonParser parser, DeserializationContext context,\n+                                                                             ExtensionProviders<? extends ExtensionJsonSerializer> supplier, Set<String> extensionsNotFound, T toUpdateExtension) throws IOException {\n+        Objects.requireNonNull(parser);\n+        Objects.requireNonNull(context);\n+        Objects.requireNonNull(supplier);\n+        Objects.requireNonNull(toUpdateExtension);\n+\n+        List<Extension<T>> extensions = new ArrayList<>();\n+        while (parser.nextToken() != JsonToken.END_OBJECT) {\n+            Extension<T> extension = updateExtension(parser, context, supplier, extensionsNotFound, toUpdateExtension);\n+            if (extension != null) {\n+                extensions.add(extension);\n+            }\n+        }\n+        return extensions;\n+    }\n+\n+    public static <T extends Extendable, E extends Extension<T>> E updateExtension(JsonParser parser, DeserializationContext context,\n+                                                                                   ExtensionProviders<? extends ExtensionJsonSerializer> supplier, Set<String> extensionsNotFound, T toUpdateExtensions) throws IOException {\n+        String extensionName = parser.getCurrentName();\n+        ExtensionJsonSerializer<T, E> extensionJsonSerializer = supplier.findProvider(extensionName);\n+        if (extensionJsonSerializer != null) {\n+            parser.nextToken();\n+            for (Object ext : toUpdateExtensions.getExtensions()) {\n+                if (ext != null) {\n+                    E toUpdateExtension = (E) ext;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxMDgzOQ=="}, "originalCommit": {"oid": "e787289fed303da6e9b41dd8d7bbdabb2b867383"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDA2MDYxOnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/com/powsybl/commons/extensions/BarExtSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDoyNDoxOFrOF-6VTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDoyNDoxOFrOF-6VTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxMTc1OA==", "bodyText": "I suggest to leave the default implementation for those extensions where it's not really useful to implement it, it will save some lines of code :)", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r401511758", "createdAt": "2020-04-01T10:24:18Z", "author": {"login": "sylvlecl"}, "path": "commons/src/test/java/com/powsybl/commons/extensions/BarExtSerializer.java", "diffHunk": "@@ -33,6 +37,28 @@ public BarExt deserialize(JsonParser parser, DeserializationContext deserializat\n         return null;\n     }\n \n+    private interface SerializationSpec {\n+\n+        @JsonIgnore\n+        String getName();\n+\n+        @JsonIgnore\n+        Foo getExtendable();\n+    }\n+\n+    private static ObjectMapper createMapper() {\n+        return JsonUtil.createObjectMapper()\n+                .addMixIn(BarExt.class, SerializationSpec.class);\n+    }\n+\n+    @Override\n+    public BarExt deserializeAndUpdate(JsonParser jsonParser, DeserializationContext deserializationContext, BarExt parameters) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e787289fed303da6e9b41dd8d7bbdabb2b867383"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDA3MTYxOnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDoyNzozNlrOF-6cIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDoyNzozNlrOF-6cIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxMzUwNA==", "bodyText": "Maybe for this test we should add a second parameter, like you did in loadflow tests, because here we don't check if other parameters still have their initial value.", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r401513504", "createdAt": "2020-04-01T10:27:36Z", "author": {"login": "sylvlecl"}, "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java", "diffHunk": "@@ -109,4 +108,15 @@ public void testWriteJson() throws IOException {\n             assertTrue(notFound.contains(\"BarExt\"));\n         }\n     }\n+\n+    @Test\n+    public void testUpdateAndDeserialize() throws IOException {\n+        Foo foo = new Foo();\n+        FooExt fooExt = new FooExt(false);\n+        foo.addExtension(FooExt.class, fooExt);\n+        boolean initValue = foo.getExtension(FooExt.class).getValue();\n+        FooDeserializer.update(getClass().getResourceAsStream(\"/extensionsUpdate.json\"), foo);\n+        assertNotEquals(initValue, foo.getExtension(FooExt.class).getValue());\n+        assertEquals(foo.getExtension(FooExt.class).getValue(), true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e787289fed303da6e9b41dd8d7bbdabb2b867383"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDI0OTkzOnYy", "diffSide": "RIGHT", "path": "contingency/contingency-api/src/test/java/com/powsybl/contingency/json/ContingencyJsonTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMToyMjo0NlrOF-8LkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMToyMjo0NlrOF-8LkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0MjAzMw==", "bodyText": "I think it's better to leave the default implementation here.", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r401542033", "createdAt": "2020-04-01T11:22:46Z", "author": {"login": "sylvlecl"}, "path": "contingency/contingency-api/src/test/java/com/powsybl/contingency/json/ContingencyJsonTest.java", "diffHunk": "@@ -123,6 +123,11 @@ public DummyExtension deserialize(JsonParser jsonParser, DeserializationContext\n             return new DummyExtension();\n         }\n \n+        @Override\n+        public DummyExtension deserializeAndUpdate(JsonParser jsonParser, DeserializationContext deserializationContext, DummyExtension parameters) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e787289fed303da6e9b41dd8d7bbdabb2b867383"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDI1NzA3OnYy", "diffSide": "RIGHT", "path": "loadflow/loadflow-api/src/main/java/com/powsybl/loadflow/json/LoadFlowParametersDeserializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMToyNDo1MVrOF-8P2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMToyNDo1MVrOF-8P2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0MzEyOQ==", "bodyText": "As we are in an update operation here (since we have an initial value of parameters, I think it's simpler to call updateExtensions in any case. If there is no extension, it will have the same behaviour anyway.", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r401543129", "createdAt": "2020-04-01T11:24:51Z", "author": {"login": "sylvlecl"}, "path": "loadflow/loadflow-api/src/main/java/com/powsybl/loadflow/json/LoadFlowParametersDeserializer.java", "diffHunk": "@@ -71,16 +69,18 @@ public LoadFlowParameters deserialize(JsonParser parser, DeserializationContext\n \n                 case \"extensions\":\n                     parser.nextToken();\n-                    extensions = JsonUtil.readExtensions(parser, deserializationContext, JsonLoadFlowParameters.getExtensionSerializers());\n+                    if (parameters.getExtensions().size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e787289fed303da6e9b41dd8d7bbdabb2b867383"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDI1ODI2OnYy", "diffSide": "RIGHT", "path": "loadflow/loadflow-api/src/main/java/com/powsybl/loadflow/tools/RunLoadFlowTool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMToyNToxNlrOF-8QmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMToyNToxNlrOF-8QmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0MzMyMQ==", "bodyText": "Don't forget to delete it ;)", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r401543321", "createdAt": "2020-04-01T11:25:16Z", "author": {"login": "sylvlecl"}, "path": "loadflow/loadflow-api/src/main/java/com/powsybl/loadflow/tools/RunLoadFlowTool.java", "diffHunk": "@@ -160,6 +161,7 @@ public void run(CommandLine line, ToolRunningContext context) throws Exception {\n         }\n \n         LoadFlowParameters params = LoadFlowParameters.load();\n+        // System.out.print(\"parametre avant fusion : \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e787289fed303da6e9b41dd8d7bbdabb2b867383"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDI2NjYzOnYy", "diffSide": "RIGHT", "path": "security-analysis/security-analysis-api/src/main/java/com/powsybl/security/json/SecurityAnalysisParametersDeserializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMToyNzo0OFrOF-8V1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMToyNzo0OFrOF-8V1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0NDY2Mg==", "bodyText": "Same as for load flow parameters : I think it's simpler to call the \"update\" event when there is no extension.", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r401544662", "createdAt": "2020-04-01T11:27:48Z", "author": {"login": "sylvlecl"}, "path": "security-analysis/security-analysis-api/src/main/java/com/powsybl/security/json/SecurityAnalysisParametersDeserializer.java", "diffHunk": "@@ -51,16 +49,17 @@ public SecurityAnalysisParameters deserialize(JsonParser parser, Deserialization\n \n                 case \"extensions\":\n                     parser.nextToken();\n-                    extensions = JsonUtil.readExtensions(parser, deserializationContext, JsonSecurityAnalysisParameters.getExtensionSerializers());\n+                    if (parameters.getExtensions().size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e787289fed303da6e9b41dd8d7bbdabb2b867383"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDI3MjA2OnYy", "diffSide": "RIGHT", "path": "security-analysis/security-analysis-api/src/test/resources/ActivePowerExtension.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMToyOToyNFrOF-8ZEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMToyOToyNFrOF-8ZEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0NTQ4OQ==", "bodyText": "(I think you probably committed this by mistake)", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r401545489", "createdAt": "2020-04-01T11:29:24Z", "author": {"login": "sylvlecl"}, "path": "security-analysis/security-analysis-api/src/test/resources/ActivePowerExtension.json", "diffHunk": "@@ -0,0 +1,11 @@\n+{\n+  \"version\" : \"1.0\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e787289fed303da6e9b41dd8d7bbdabb2b867383"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDI3MzY0OnYy", "diffSide": "RIGHT", "path": "sensitivity-api/src/test/java/com/powsybl/sensitivity/json/JsonSensitivityComputationParametersTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMToyOTo0OVrOF-8Z9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMToyOTo0OVrOF-8Z9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0NTcxOA==", "bodyText": "Probably better to leave the default implementation instead.", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r401545718", "createdAt": "2020-04-01T11:29:49Z", "author": {"login": "sylvlecl"}, "path": "sensitivity-api/src/test/java/com/powsybl/sensitivity/json/JsonSensitivityComputationParametersTest.java", "diffHunk": "@@ -89,6 +89,11 @@ public DummyExtension deserialize(JsonParser jsonParser, DeserializationContext\n             return new DummyExtension();\n         }\n \n+        @Override\n+        public DummyExtension deserializeAndUpdate(JsonParser jsonParser, DeserializationContext deserializationContext, DummyExtension parameters) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e787289fed303da6e9b41dd8d7bbdabb2b867383"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDI3NDQ4OnYy", "diffSide": "RIGHT", "path": "dynamic-simulation/dynamic-simulation-api/src/test/java/com/powsybl/dynamicsimulation/json/JsonDynamicSimulationParametersTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTozMDowNlrOF-8afw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTozMDowNlrOF-8afw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0NTg1NQ==", "bodyText": "Same : I think it's better to leave the default implementation here.", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r401545855", "createdAt": "2020-04-01T11:30:06Z", "author": {"login": "sylvlecl"}, "path": "dynamic-simulation/dynamic-simulation-api/src/test/java/com/powsybl/dynamicsimulation/json/JsonDynamicSimulationParametersTest.java", "diffHunk": "@@ -89,6 +89,11 @@ public DummyExtension deserialize(JsonParser jsonParser, DeserializationContext\n             return new DummyExtension();\n         }\n \n+        @Override\n+        public DummyExtension deserializeAndUpdate(JsonParser jsonParser, DeserializationContext deserializationContext, DummyExtension parameters) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e787289fed303da6e9b41dd8d7bbdabb2b867383"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDI5MTU0OnYy", "diffSide": "RIGHT", "path": "security-analysis/security-analysis-api/src/test/java/com/powsybl/security/json/JsonSecurityAnalysisParametersTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTozNToyNlrOF-8k7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTozNToyNlrOF-8k7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0ODUyNw==", "bodyText": "Detail for the assertions:\nthe first parameter should be the \"expected\" value, so here it would be more logical to invert the 2 parameters (same for other assertions).", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r401548527", "createdAt": "2020-04-01T11:35:26Z", "author": {"login": "sylvlecl"}, "path": "security-analysis/security-analysis-api/src/test/java/com/powsybl/security/json/JsonSecurityAnalysisParametersTest.java", "diffHunk": "@@ -61,12 +63,61 @@ public void readError() throws IOException {\n         }\n     }\n \n+    @Test\n+    public void updateExtensions() {\n+        SecurityAnalysisParameters parameters = new SecurityAnalysisParameters();\n+        DummyExtension extension = new DummyExtension();\n+        extension.setParameterBoolean(false);\n+        extension.setParameterString(\"Bonjour\");\n+        extension.setParameterDouble(2.8);\n+        DummyExtension oldExtension = new DummyExtension(extension);\n+        parameters.addExtension(DummyExtension.class, extension);\n+        JsonSecurityAnalysisParameters.update(parameters, getClass().getResourceAsStream(\"/SecurityAnalysisParametersExtensionUpdate.json\"));\n+        DummyExtension updatedExtension = parameters.getExtension(DummyExtension.class);\n+        assertEquals(updatedExtension.isParameterBoolean(), oldExtension.isParameterBoolean());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e787289fed303da6e9b41dd8d7bbdabb2b867383"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNjczMDMwOnYy", "diffSide": "RIGHT", "path": "commons/src/main/java/com/powsybl/commons/extensions/ExtensionJsonSerializer.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDoxNTowNVrOGBQ8GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTozNToxM1rOGFUnJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3OTI4OA==", "bodyText": "@sylvlecl I agree that this should be the default implementation if we want to prevent breaking the API but isn't it a bit error-prone?", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r403979288", "createdAt": "2020-04-06T10:15:05Z", "author": {"login": "miovd"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/ExtensionJsonSerializer.java", "diffHunk": "@@ -23,4 +23,8 @@\n     void serialize(E extension, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException;\n \n     E deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException;\n+\n+    default E deserializeAndUpdate(JsonParser jsonParser, DeserializationContext deserializationContext, E parameters) throws IOException {\n+        return deserialize(jsonParser, deserializationContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "564b518698ec568d1bb4101361b801f6af8875ea"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE4NjM2MA==", "bodyText": "You're right that it's error-prone. I think the options are:\n\ndo it this way, and existing extensions will keep behaving as today, BUT new extensions could \"forget\" to actually implement this\nthrow an exception as default implementation, but I think it's not a good option since it will compile but fail at runtime\ndo not implement it, and make it a breaking change, but in that case it's gonna be inconvenient for users\n\nMaybe the best option is to keep the current approach but insist in javadoc that the method must be implemented for updates to work correctly ?", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r404186360", "createdAt": "2020-04-06T15:33:52Z", "author": {"login": "sylvlecl"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/ExtensionJsonSerializer.java", "diffHunk": "@@ -23,4 +23,8 @@\n     void serialize(E extension, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException;\n \n     E deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException;\n+\n+    default E deserializeAndUpdate(JsonParser jsonParser, DeserializationContext deserializationContext, E parameters) throws IOException {\n+        return deserialize(jsonParser, deserializationContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3OTI4OA=="}, "originalCommit": {"oid": "564b518698ec568d1bb4101361b801f6af8875ea"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM5NzI0OQ==", "bodyText": "I added some javadoc to insist on the need to implement the method for the feature to work properly.", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r405397249", "createdAt": "2020-04-08T09:45:38Z", "author": {"login": "sylvlecl"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/ExtensionJsonSerializer.java", "diffHunk": "@@ -23,4 +23,8 @@\n     void serialize(E extension, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException;\n \n     E deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException;\n+\n+    default E deserializeAndUpdate(JsonParser jsonParser, DeserializationContext deserializationContext, E parameters) throws IOException {\n+        return deserialize(jsonParser, deserializationContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3OTI4OA=="}, "originalCommit": {"oid": "564b518698ec568d1bb4101361b801f6af8875ea"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0OTQ1MA==", "bodyText": "I agree it should also be documented in the migration guide for people/projects with custom extensions in my opinion.", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r406049450", "createdAt": "2020-04-09T08:43:08Z", "author": {"login": "miovd"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/ExtensionJsonSerializer.java", "diffHunk": "@@ -23,4 +23,8 @@\n     void serialize(E extension, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException;\n \n     E deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException;\n+\n+    default E deserializeAndUpdate(JsonParser jsonParser, DeserializationContext deserializationContext, E parameters) throws IOException {\n+        return deserialize(jsonParser, deserializationContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3OTI4OA=="}, "originalCommit": {"oid": "564b518698ec568d1bb4101361b801f6af8875ea"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzMzc2NQ==", "bodyText": "I have added a section in the migration guide !", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r408233765", "createdAt": "2020-04-14T15:35:13Z", "author": {"login": "sylvlecl"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/ExtensionJsonSerializer.java", "diffHunk": "@@ -23,4 +23,8 @@\n     void serialize(E extension, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException;\n \n     E deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException;\n+\n+    default E deserializeAndUpdate(JsonParser jsonParser, DeserializationContext deserializationContext, E parameters) throws IOException {\n+        return deserialize(jsonParser, deserializationContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3OTI4OA=="}, "originalCommit": {"oid": "564b518698ec568d1bb4101361b801f6af8875ea"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNjc3NjkzOnYy", "diffSide": "RIGHT", "path": "commons/src/main/java/com/powsybl/commons/json/JsonUtil.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDoyODowOVrOGBRZjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNToxMjo0MFrOGBck8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk4NjgyOA==", "bodyText": "Since this method is public, you should maybe call Objects.requireNonNull for parameters which must be not null", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r403986828", "createdAt": "2020-04-06T10:28:09Z", "author": {"login": "miovd"}, "path": "commons/src/main/java/com/powsybl/commons/json/JsonUtil.java", "diffHunk": "@@ -217,6 +217,48 @@ public static void writeOptionalIntegerField(JsonGenerator jsonGenerator, String\n         return notFound;\n     }\n \n+    public static <T extends Extendable> List<Extension<T>> updateExtensions(JsonParser parser, DeserializationContext context,\n+                                                                             ExtensionProviders<? extends ExtensionJsonSerializer> supplier, T toUpdatedParameters) throws IOException {\n+        return updateExtensions(parser, context, SUPPLIER.get(), null, toUpdatedParameters);\n+    }\n+\n+    public static <T extends Extendable> List<Extension<T>> updateExtensions(JsonParser parser, DeserializationContext context,\n+                                                                             ExtensionProviders<? extends ExtensionJsonSerializer> supplier, Set<String> extensionsNotFound, T toUpdatedParameters) throws IOException {\n+        Objects.requireNonNull(parser);\n+        Objects.requireNonNull(context);\n+        Objects.requireNonNull(supplier);\n+        Objects.requireNonNull(toUpdatedParameters);\n+\n+        List<Extension<T>> extensions = new ArrayList<>();\n+        while (parser.nextToken() != JsonToken.END_OBJECT) {\n+            Extension<T> extension = updateExtension(parser, context, supplier, extensionsNotFound, toUpdatedParameters);\n+            if (extension != null) {\n+                extensions.add(extension);\n+            }\n+        }\n+        return extensions;\n+    }\n+\n+    public static <T extends Extendable, E extends Extension<T>> E updateExtension(JsonParser parser, DeserializationContext context,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "564b518698ec568d1bb4101361b801f6af8875ea"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE2NzQ4OA==", "bodyText": "the only method calling this one have already the requirements (non null) and there is no require non null on the method \"readExtension\" which is similar, maybe requirements can be add to both methods ?", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r404167488", "createdAt": "2020-04-06T15:09:13Z", "author": {"login": "EtienneLt"}, "path": "commons/src/main/java/com/powsybl/commons/json/JsonUtil.java", "diffHunk": "@@ -217,6 +217,48 @@ public static void writeOptionalIntegerField(JsonGenerator jsonGenerator, String\n         return notFound;\n     }\n \n+    public static <T extends Extendable> List<Extension<T>> updateExtensions(JsonParser parser, DeserializationContext context,\n+                                                                             ExtensionProviders<? extends ExtensionJsonSerializer> supplier, T toUpdatedParameters) throws IOException {\n+        return updateExtensions(parser, context, SUPPLIER.get(), null, toUpdatedParameters);\n+    }\n+\n+    public static <T extends Extendable> List<Extension<T>> updateExtensions(JsonParser parser, DeserializationContext context,\n+                                                                             ExtensionProviders<? extends ExtensionJsonSerializer> supplier, Set<String> extensionsNotFound, T toUpdatedParameters) throws IOException {\n+        Objects.requireNonNull(parser);\n+        Objects.requireNonNull(context);\n+        Objects.requireNonNull(supplier);\n+        Objects.requireNonNull(toUpdatedParameters);\n+\n+        List<Extension<T>> extensions = new ArrayList<>();\n+        while (parser.nextToken() != JsonToken.END_OBJECT) {\n+            Extension<T> extension = updateExtension(parser, context, supplier, extensionsNotFound, toUpdatedParameters);\n+            if (extension != null) {\n+                extensions.add(extension);\n+            }\n+        }\n+        return extensions;\n+    }\n+\n+    public static <T extends Extendable, E extends Extension<T>> E updateExtension(JsonParser parser, DeserializationContext context,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk4NjgyOA=="}, "originalCommit": {"oid": "564b518698ec568d1bb4101361b801f6af8875ea"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE2ODAwMQ==", "bodyText": "Or both methods can be private ?", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r404168001", "createdAt": "2020-04-06T15:09:56Z", "author": {"login": "EtienneLt"}, "path": "commons/src/main/java/com/powsybl/commons/json/JsonUtil.java", "diffHunk": "@@ -217,6 +217,48 @@ public static void writeOptionalIntegerField(JsonGenerator jsonGenerator, String\n         return notFound;\n     }\n \n+    public static <T extends Extendable> List<Extension<T>> updateExtensions(JsonParser parser, DeserializationContext context,\n+                                                                             ExtensionProviders<? extends ExtensionJsonSerializer> supplier, T toUpdatedParameters) throws IOException {\n+        return updateExtensions(parser, context, SUPPLIER.get(), null, toUpdatedParameters);\n+    }\n+\n+    public static <T extends Extendable> List<Extension<T>> updateExtensions(JsonParser parser, DeserializationContext context,\n+                                                                             ExtensionProviders<? extends ExtensionJsonSerializer> supplier, Set<String> extensionsNotFound, T toUpdatedParameters) throws IOException {\n+        Objects.requireNonNull(parser);\n+        Objects.requireNonNull(context);\n+        Objects.requireNonNull(supplier);\n+        Objects.requireNonNull(toUpdatedParameters);\n+\n+        List<Extension<T>> extensions = new ArrayList<>();\n+        while (parser.nextToken() != JsonToken.END_OBJECT) {\n+            Extension<T> extension = updateExtension(parser, context, supplier, extensionsNotFound, toUpdatedParameters);\n+            if (extension != null) {\n+                extensions.add(extension);\n+            }\n+        }\n+        return extensions;\n+    }\n+\n+    public static <T extends Extendable, E extends Extension<T>> E updateExtension(JsonParser parser, DeserializationContext context,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk4NjgyOA=="}, "originalCommit": {"oid": "564b518698ec568d1bb4101361b801f6af8875ea"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE2OTk3MQ==", "bodyText": "Yes, if this method is only called in updateExtensions, it might be better to keep it private. I think readExtension is public because it is called elsewhere (not in this repository but in another project using powsybl-core) but if Objects.requireNonNull is not called then, it is by mistake I think.", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r404169971", "createdAt": "2020-04-06T15:12:40Z", "author": {"login": "miovd"}, "path": "commons/src/main/java/com/powsybl/commons/json/JsonUtil.java", "diffHunk": "@@ -217,6 +217,48 @@ public static void writeOptionalIntegerField(JsonGenerator jsonGenerator, String\n         return notFound;\n     }\n \n+    public static <T extends Extendable> List<Extension<T>> updateExtensions(JsonParser parser, DeserializationContext context,\n+                                                                             ExtensionProviders<? extends ExtensionJsonSerializer> supplier, T toUpdatedParameters) throws IOException {\n+        return updateExtensions(parser, context, SUPPLIER.get(), null, toUpdatedParameters);\n+    }\n+\n+    public static <T extends Extendable> List<Extension<T>> updateExtensions(JsonParser parser, DeserializationContext context,\n+                                                                             ExtensionProviders<? extends ExtensionJsonSerializer> supplier, Set<String> extensionsNotFound, T toUpdatedParameters) throws IOException {\n+        Objects.requireNonNull(parser);\n+        Objects.requireNonNull(context);\n+        Objects.requireNonNull(supplier);\n+        Objects.requireNonNull(toUpdatedParameters);\n+\n+        List<Extension<T>> extensions = new ArrayList<>();\n+        while (parser.nextToken() != JsonToken.END_OBJECT) {\n+            Extension<T> extension = updateExtension(parser, context, supplier, extensionsNotFound, toUpdatedParameters);\n+            if (extension != null) {\n+                extensions.add(extension);\n+            }\n+        }\n+        return extensions;\n+    }\n+\n+    public static <T extends Extendable, E extends Extension<T>> E updateExtension(JsonParser parser, DeserializationContext context,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk4NjgyOA=="}, "originalCommit": {"oid": "564b518698ec568d1bb4101361b801f6af8875ea"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzIwMzM4OnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjozMTo0NlrOGBVeUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDozNzowM1rOGBa49w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA1MzU4NA==", "bodyText": "I would avoid using french words (even in tests)", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r404053584", "createdAt": "2020-04-06T12:31:46Z", "author": {"login": "miovd"}, "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java", "diffHunk": "@@ -109,4 +108,27 @@ public void testWriteJson() throws IOException {\n             assertTrue(notFound.contains(\"BarExt\"));\n         }\n     }\n+\n+    @Test\n+    public void testUpdateAndDeserialize() throws IOException {\n+        Foo foo = new Foo();\n+        FooExt fooExt = new FooExt(false, \"Bonjour\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "564b518698ec568d1bb4101361b801f6af8875ea"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE0MjMyNw==", "bodyText": "Ok I'll change that", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r404142327", "createdAt": "2020-04-06T14:37:03Z", "author": {"login": "EtienneLt"}, "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java", "diffHunk": "@@ -109,4 +108,27 @@ public void testWriteJson() throws IOException {\n             assertTrue(notFound.contains(\"BarExt\"));\n         }\n     }\n+\n+    @Test\n+    public void testUpdateAndDeserialize() throws IOException {\n+        Foo foo = new Foo();\n+        FooExt fooExt = new FooExt(false, \"Bonjour\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA1MzU4NA=="}, "originalCommit": {"oid": "564b518698ec568d1bb4101361b801f6af8875ea"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzIwMzkzOnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjozMTo1NFrOGBVenA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjozMTo1NFrOGBVenA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA1MzY2MA==", "bodyText": "Same remark", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r404053660", "createdAt": "2020-04-06T12:31:54Z", "author": {"login": "miovd"}, "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java", "diffHunk": "@@ -109,4 +108,27 @@ public void testWriteJson() throws IOException {\n             assertTrue(notFound.contains(\"BarExt\"));\n         }\n     }\n+\n+    @Test\n+    public void testUpdateAndDeserialize() throws IOException {\n+        Foo foo = new Foo();\n+        FooExt fooExt = new FooExt(false, \"Bonjour\");\n+        foo.addExtension(FooExt.class, fooExt);\n+        FooDeserializer.update(getClass().getResourceAsStream(\"/extensionsUpdate.json\"), foo);\n+        assertEquals(true, foo.getExtension(FooExt.class).getValue());\n+        assertEquals(\"Bonjour\", foo.getExtension(FooExt.class).getValue2());\n+    }\n+\n+    @Test\n+    public void testUpdateWith2Extensions() throws IOException {\n+        Foo foo = new Foo();\n+        FooExt fooExt = new FooExt(false, \"Bonjour\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "564b518698ec568d1bb4101361b801f6af8875ea"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzIwNDQ2OnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjozMjowNVrOGBVe8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjozMjowNVrOGBVe8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA1Mzc0Ng==", "bodyText": "Same remark", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r404053746", "createdAt": "2020-04-06T12:32:05Z", "author": {"login": "miovd"}, "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java", "diffHunk": "@@ -109,4 +108,27 @@ public void testWriteJson() throws IOException {\n             assertTrue(notFound.contains(\"BarExt\"));\n         }\n     }\n+\n+    @Test\n+    public void testUpdateAndDeserialize() throws IOException {\n+        Foo foo = new Foo();\n+        FooExt fooExt = new FooExt(false, \"Bonjour\");\n+        foo.addExtension(FooExt.class, fooExt);\n+        FooDeserializer.update(getClass().getResourceAsStream(\"/extensionsUpdate.json\"), foo);\n+        assertEquals(true, foo.getExtension(FooExt.class).getValue());\n+        assertEquals(\"Bonjour\", foo.getExtension(FooExt.class).getValue2());\n+    }\n+\n+    @Test\n+    public void testUpdateWith2Extensions() throws IOException {\n+        Foo foo = new Foo();\n+        FooExt fooExt = new FooExt(false, \"Bonjour\");\n+        BarExt barExt = new BarExt(true);\n+        foo.addExtension(FooExt.class, fooExt);\n+        foo.addExtension(BarExt.class, barExt);\n+        FooDeserializer.update(getClass().getResourceAsStream(\"/extensions.json\"), foo);\n+        assertEquals(true, foo.getExtension(FooExt.class).getValue());\n+        assertEquals(\"Bonjour\", foo.getExtension(FooExt.class).getValue2());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "564b518698ec568d1bb4101361b801f6af8875ea"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzIwNDg3OnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjozMjoxMVrOGBVfNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjozMjoxMVrOGBVfNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA1MzgxNA==", "bodyText": "Same remark", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r404053814", "createdAt": "2020-04-06T12:32:11Z", "author": {"login": "miovd"}, "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java", "diffHunk": "@@ -109,4 +108,27 @@ public void testWriteJson() throws IOException {\n             assertTrue(notFound.contains(\"BarExt\"));\n         }\n     }\n+\n+    @Test\n+    public void testUpdateAndDeserialize() throws IOException {\n+        Foo foo = new Foo();\n+        FooExt fooExt = new FooExt(false, \"Bonjour\");\n+        foo.addExtension(FooExt.class, fooExt);\n+        FooDeserializer.update(getClass().getResourceAsStream(\"/extensionsUpdate.json\"), foo);\n+        assertEquals(true, foo.getExtension(FooExt.class).getValue());\n+        assertEquals(\"Bonjour\", foo.getExtension(FooExt.class).getValue2());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "564b518698ec568d1bb4101361b801f6af8875ea"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzIxNTQ0OnYy", "diffSide": "RIGHT", "path": "security-analysis/security-analysis-api/src/test/java/com/powsybl/security/json/JsonSecurityAnalysisParametersTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjozNDo1OVrOGBVlgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjozNDo1OVrOGBVlgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA1NTQyNg==", "bodyText": "Same remark", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r404055426", "createdAt": "2020-04-06T12:34:59Z", "author": {"login": "miovd"}, "path": "security-analysis/security-analysis-api/src/test/java/com/powsybl/security/json/JsonSecurityAnalysisParametersTest.java", "diffHunk": "@@ -61,12 +62,61 @@ public void readError() throws IOException {\n         }\n     }\n \n+    @Test\n+    public void updateExtensions() {\n+        SecurityAnalysisParameters parameters = new SecurityAnalysisParameters();\n+        DummyExtension extension = new DummyExtension();\n+        extension.setParameterBoolean(false);\n+        extension.setParameterString(\"Bonjour\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "564b518698ec568d1bb4101361b801f6af8875ea"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzcyMzM4OnYy", "diffSide": "RIGHT", "path": "commons/src/main/java/com/powsybl/commons/json/JsonUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDoyOTozN1rOGBah5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDoyOTozN1rOGBah5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEzNjQyMg==", "bodyText": "I think it can be refactored with readExtensions and readExtension, it looks similar.", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r404136422", "createdAt": "2020-04-06T14:29:37Z", "author": {"login": "miovd"}, "path": "commons/src/main/java/com/powsybl/commons/json/JsonUtil.java", "diffHunk": "@@ -217,6 +217,52 @@ public static void writeOptionalIntegerField(JsonGenerator jsonGenerator, String\n         return notFound;\n     }\n \n+    public static <T extends Extendable> List<Extension<T>> updateExtensions(JsonParser parser, DeserializationContext context, T toUpdatedParameters) throws IOException {\n+        return updateExtensions(parser, context, SUPPLIER.get(), null, toUpdatedParameters);\n+    }\n+\n+    public static <T extends Extendable> List<Extension<T>> updateExtensions(JsonParser parser, DeserializationContext context,\n+                                                                             ExtensionProviders<? extends ExtensionJsonSerializer> supplier, T toUpdatedParameters) throws IOException {\n+        return updateExtensions(parser, context, supplier, null, toUpdatedParameters);\n+    }\n+\n+    public static <T extends Extendable> List<Extension<T>> updateExtensions(JsonParser parser, DeserializationContext context,\n+                                                                             ExtensionProviders<? extends ExtensionJsonSerializer> supplier, Set<String> extensionsNotFound, T toUpdatedParameters) throws IOException {\n+        Objects.requireNonNull(parser);\n+        Objects.requireNonNull(context);\n+        Objects.requireNonNull(supplier);\n+        Objects.requireNonNull(toUpdatedParameters);\n+\n+        List<Extension<T>> extensions = new ArrayList<>();\n+        while (parser.nextToken() != JsonToken.END_OBJECT) {\n+            Extension<T> extension = updateExtension(parser, context, supplier, extensionsNotFound, toUpdatedParameters);\n+            if (extension != null) {\n+                extensions.add(extension);\n+            }\n+        }\n+        return extensions;\n+    }\n+\n+    public static <T extends Extendable, E extends Extension<T>> E updateExtension(JsonParser parser, DeserializationContext context,\n+                                                                                   ExtensionProviders<? extends ExtensionJsonSerializer> supplier, Set<String> extensionsNotFound, T toUpdateExtensions) throws IOException {\n+        String extensionName = parser.getCurrentName();\n+        ExtensionJsonSerializer<T, E> extensionJsonSerializer = supplier.findProvider(extensionName);\n+        if (extensionJsonSerializer != null) {\n+            parser.nextToken();\n+            if (toUpdateExtensions.getExtensionByName(extensionName) != null) {\n+                return extensionJsonSerializer.deserializeAndUpdate(parser, context, (E) toUpdateExtensions.getExtensionByName(extensionName));\n+            } else {\n+                return extensionJsonSerializer.deserialize(parser, context);\n+            }\n+        } else {\n+            if (extensionsNotFound != null) {\n+                extensionsNotFound.add(extensionName);\n+            }\n+            skip(parser);\n+            return null;\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6254d117b6a34bcb5f8e0ba77320582aeac47e5"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 144, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}