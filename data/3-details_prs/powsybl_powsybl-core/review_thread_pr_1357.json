{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NDk2NzUx", "number": 1357, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwOToyOTo0N1rOEHDW2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTo1Nzo0NVrOEPDzKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODMwNDkwOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/DanglingLine.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwOToyOTo0N1rOGmOS9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDo0MjozN1rOGnD22g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjczMzMwMg==", "bodyText": "Just a question, why do we use this and not something like regulationType that can be OFF, VOLTAGE and REACTIVE? Here when there is no voltage regulation, how can we know if there is an active or reactive regulation or not at all?", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r442733302", "createdAt": "2020-06-19T09:29:47Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/DanglingLine.java", "diffHunk": "@@ -92,6 +92,79 @@\n      */\n     DanglingLine setB(double b);\n \n+    /**\n+     * <p>Get the active power setpoint in MW.</p>\n+     * <p>The active power setpoint follows a load sign convention.</p>\n+     * <p>Depends on the working variant.</p>\n+     * @return the reactive power setpoint\n+     */\n+    default double getActivePowerSetpoint() {\n+        return Double.NaN;\n+    }\n+\n+    /**\n+     * <p>Set the active power setpoint in MW.</p>\n+     * <p>Depends on the working variant.</p>\n+     * @param activePowerSetpoint the active power setpoint\n+     * @return this to allow method chaining\n+     */\n+    default DanglingLine setActivePowerSetpoint(double activePowerSetpoint) {\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Get the reactive power setpoint in MVAR.</p>\n+     * <p>The reactive power setpoint follows a load sign convention.</p>\n+     * <p>Depends on the working variant.</p>\n+     * @return the reactive power setpoint\n+     */\n+    default double getReactivePowerSetpoint() {\n+        return Double.NaN;\n+    }\n+\n+    /**\n+     * <p>Set the reactive power setpoint in MVAR.</p>\n+     * <p>Depends on the working variant.</p>\n+     * @param reactivePowerSetpoint the reactive power setpoint\n+     * @return this to allow method chaining\n+     */\n+    default DanglingLine setReactivePowerSetpoint(double reactivePowerSetpoint) {\n+        return this;\n+    }\n+\n+    /**\n+     * Get the voltage regulation status.\n+     */\n+    default boolean isVoltageRegulationOn() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9371b0d83ac3a751ea0ddd9e8d7a6fa736d01937"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwMTc4Ng==", "bodyText": "@zamarrenolm What do you think?", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r442801786", "createdAt": "2020-06-19T12:06:26Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/DanglingLine.java", "diffHunk": "@@ -92,6 +92,79 @@\n      */\n     DanglingLine setB(double b);\n \n+    /**\n+     * <p>Get the active power setpoint in MW.</p>\n+     * <p>The active power setpoint follows a load sign convention.</p>\n+     * <p>Depends on the working variant.</p>\n+     * @return the reactive power setpoint\n+     */\n+    default double getActivePowerSetpoint() {\n+        return Double.NaN;\n+    }\n+\n+    /**\n+     * <p>Set the active power setpoint in MW.</p>\n+     * <p>Depends on the working variant.</p>\n+     * @param activePowerSetpoint the active power setpoint\n+     * @return this to allow method chaining\n+     */\n+    default DanglingLine setActivePowerSetpoint(double activePowerSetpoint) {\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Get the reactive power setpoint in MVAR.</p>\n+     * <p>The reactive power setpoint follows a load sign convention.</p>\n+     * <p>Depends on the working variant.</p>\n+     * @return the reactive power setpoint\n+     */\n+    default double getReactivePowerSetpoint() {\n+        return Double.NaN;\n+    }\n+\n+    /**\n+     * <p>Set the reactive power setpoint in MVAR.</p>\n+     * <p>Depends on the working variant.</p>\n+     * @param reactivePowerSetpoint the reactive power setpoint\n+     * @return this to allow method chaining\n+     */\n+    default DanglingLine setReactivePowerSetpoint(double reactivePowerSetpoint) {\n+        return this;\n+    }\n+\n+    /**\n+     * Get the voltage regulation status.\n+     */\n+    default boolean isVoltageRegulationOn() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjczMzMwMg=="}, "originalCommit": {"oid": "9371b0d83ac3a751ea0ddd9e8d7a6fa736d01937"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYxMDg0Mg==", "bodyText": "I think for dangling lines we should consider only voltage regulation, like in generators. In fact, we should duplicate the attributes from the IIDM generator into the dangling line, to highlight the fact that we are adding just an implicit/fictitious generator at the boundary end of the dangling line.", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r443610842", "createdAt": "2020-06-22T14:42:37Z", "author": {"login": "zamarrenolm"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/DanglingLine.java", "diffHunk": "@@ -92,6 +92,79 @@\n      */\n     DanglingLine setB(double b);\n \n+    /**\n+     * <p>Get the active power setpoint in MW.</p>\n+     * <p>The active power setpoint follows a load sign convention.</p>\n+     * <p>Depends on the working variant.</p>\n+     * @return the reactive power setpoint\n+     */\n+    default double getActivePowerSetpoint() {\n+        return Double.NaN;\n+    }\n+\n+    /**\n+     * <p>Set the active power setpoint in MW.</p>\n+     * <p>Depends on the working variant.</p>\n+     * @param activePowerSetpoint the active power setpoint\n+     * @return this to allow method chaining\n+     */\n+    default DanglingLine setActivePowerSetpoint(double activePowerSetpoint) {\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Get the reactive power setpoint in MVAR.</p>\n+     * <p>The reactive power setpoint follows a load sign convention.</p>\n+     * <p>Depends on the working variant.</p>\n+     * @return the reactive power setpoint\n+     */\n+    default double getReactivePowerSetpoint() {\n+        return Double.NaN;\n+    }\n+\n+    /**\n+     * <p>Set the reactive power setpoint in MVAR.</p>\n+     * <p>Depends on the working variant.</p>\n+     * @param reactivePowerSetpoint the reactive power setpoint\n+     * @return this to allow method chaining\n+     */\n+    default DanglingLine setReactivePowerSetpoint(double reactivePowerSetpoint) {\n+        return this;\n+    }\n+\n+    /**\n+     * Get the voltage regulation status.\n+     */\n+    default boolean isVoltageRegulationOn() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjczMzMwMg=="}, "originalCommit": {"oid": "9371b0d83ac3a751ea0ddd9e8d7a6fa736d01937"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDgxOTg3OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Boundary.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMToxODo1OFrOGujWeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODozNDo1MVrOGvHPZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ2Njg3Mg==", "bodyText": "Could be write in a single line: nodesEquivalentInjections.computeIfAbsent(node, ls -> new ArrayList<>(2)).add(equivalentInjection);\nWhy do you set the capacity to 2?", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r451466872", "createdAt": "2020-07-08T11:18:58Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Boundary.java", "diffHunk": "@@ -70,6 +71,12 @@ public void addLineAtNode(PropertyBag line, String node) {\n         lines.add(line);\n     }\n \n+    public void addEquivalentInjectionAtNode(PropertyBag equivalentInjection, String node) {\n+        List<PropertyBag> equivalentInjections;\n+        equivalentInjections = nodesEquivalentInjections.computeIfAbsent(node, ls -> new ArrayList<>(2));\n+        equivalentInjections.add(equivalentInjection);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57058d01d381201113543e202d5ff7fc7b84c081"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ5MTU3MA==", "bodyText": "@annetill Is there a reason? I didn't touch your code here.", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r451491570", "createdAt": "2020-07-08T12:08:20Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Boundary.java", "diffHunk": "@@ -70,6 +71,12 @@ public void addLineAtNode(PropertyBag line, String node) {\n         lines.add(line);\n     }\n \n+    public void addEquivalentInjectionAtNode(PropertyBag equivalentInjection, String node) {\n+        List<PropertyBag> equivalentInjections;\n+        equivalentInjections = nodesEquivalentInjections.computeIfAbsent(node, ls -> new ArrayList<>(2));\n+        equivalentInjections.add(equivalentInjection);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ2Njg3Mg=="}, "originalCommit": {"oid": "57058d01d381201113543e202d5ff7fc7b84c081"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYxMzA5Ng==", "bodyText": "Rectification: it seems to be @zamarrenolm's code. @zamarrenolm can you tell us why the list capacity is at 2 please?", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r451613096", "createdAt": "2020-07-08T15:00:33Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Boundary.java", "diffHunk": "@@ -70,6 +71,12 @@ public void addLineAtNode(PropertyBag line, String node) {\n         lines.add(line);\n     }\n \n+    public void addEquivalentInjectionAtNode(PropertyBag equivalentInjection, String node) {\n+        List<PropertyBag> equivalentInjections;\n+        equivalentInjections = nodesEquivalentInjections.computeIfAbsent(node, ls -> new ArrayList<>(2));\n+        equivalentInjections.add(equivalentInjection);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ2Njg3Mg=="}, "originalCommit": {"oid": "57058d01d381201113543e202d5ff7fc7b84c081"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA1NDg4Nw==", "bodyText": "Because in a boundary TN, you have 2 EquivalentInjections, one for each IGM.", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r452054887", "createdAt": "2020-07-09T08:34:51Z", "author": {"login": "annetill"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Boundary.java", "diffHunk": "@@ -70,6 +71,12 @@ public void addLineAtNode(PropertyBag line, String node) {\n         lines.add(line);\n     }\n \n+    public void addEquivalentInjectionAtNode(PropertyBag equivalentInjection, String node) {\n+        List<PropertyBag> equivalentInjections;\n+        equivalentInjections = nodesEquivalentInjections.computeIfAbsent(node, ls -> new ArrayList<>(2));\n+        equivalentInjections.add(equivalentInjection);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ2Njg3Mg=="}, "originalCommit": {"oid": "57058d01d381201113543e202d5ff7fc7b84c081"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDgyNTIxOnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ACLineSegmentConversion.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMToyMDo0MlrOGujZzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMToyMDo0MlrOGujZzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ2NzcyNQ==", "bodyText": "You should move this line at line 156.", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r451467725", "createdAt": "2020-07-08T11:20:42Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ACLineSegmentConversion.java", "diffHunk": "@@ -131,26 +131,43 @@ private void convertDanglingLine(int boundarySide) {\n         // _5150a037-e241-421f-98b2-fe60e5c90303 XQ1-N1\n         // ends in a boundary node where there is no other line,\n         // does not have energy consumer or equivalent injection\n-        if (terminalConnected(boundarySide) && !context.boundary().hasPowerFlow(boundaryNode)) {\n+        if (terminalConnected(boundarySide)\n+                && !context.boundary().hasPowerFlow(boundaryNode)\n+                && context.boundary().equivalentInjectionsAtNode(boundaryNode).isEmpty()) {\n             missing(\"Equipment for modeling consumption/injection at boundary node\");\n         }\n \n         double r = p.asDouble(\"r\");\n         double x = p.asDouble(\"x\");\n         double bch = p.asDouble(\"bch\");\n         double gch = p.asDouble(\"gch\", 0.0);\n-        DanglingLineAdder adder = voltageLevel(modelSide).newDanglingLine()\n+        DanglingLineAdder dlAdder = voltageLevel(modelSide).newDanglingLine()\n                 .setEnsureIdUnicity(false)\n                 .setR(r)\n                 .setX(x)\n                 .setG(gch)\n                 .setB(bch)\n-                .setUcteXnodeCode(findUcteXnodeCode(boundaryNode))\n-                .setP0(f.p())\n-                .setQ0(f.q());\n-        identify(adder);\n-        connect(adder, modelSide);\n-        DanglingLine dl = adder.add();\n+                .setUcteXnodeCode(findUcteXnodeCode(boundaryNode));\n+        identify(dlAdder);\n+        connect(dlAdder, modelSide);\n+        EquivalentInjectionConversion equivalentInjectionConversion = getEquivalentInjectionConversionForDanglingLine(boundaryNode);\n+        DanglingLine dl;\n+        if (equivalentInjectionConversion != null) {\n+            dl = equivalentInjectionConversion.convertOverDanglingLine(dlAdder, f);\n+        } else {\n+            dl = dlAdder.setP0(f.p())\n+                    .setQ0(f.q())\n+                    .add();\n+            dl.newGeneration()\n+                    .setTargetP(0.0)\n+                    .setTargetQ(0.0)\n+                    .setTargetV(Double.NaN)\n+                    .setVoltageRegulationOn(false)\n+                    .add();\n+        }\n+        if (equivalentInjectionConversion != null) {\n+            equivalentInjectionConversion.convertReactiveLimits(dl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57058d01d381201113543e202d5ff7fc7b84c081"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDgzMzU3OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/EquivalentInjectionConversion.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMToyMzozM1rOGujfHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMjowNjoxNlrOGukyzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ2OTA4Nw==", "bodyText": "It's a bit weird: why the generation is not created using the adder, but using the DanglingLine?", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r451469087", "createdAt": "2020-07-08T11:23:33Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/EquivalentInjectionConversion.java", "diffHunk": "@@ -21,55 +19,128 @@\n \n     private static final String REGULATION_TARGET = \"regulationTarget\";\n \n-    public EquivalentInjectionConversion(PropertyBag sm, Context context) {\n-        super(\"EquivalentInjection\", sm, context);\n+    public EquivalentInjectionConversion(PropertyBag ei, Context context) {\n+        super(\"EquivalentInjection\", ei, context);\n+    }\n+\n+    @Override\n+    public void convertInsideBoundary() {\n+        if (context.config().convertBoundary()) {\n+            if (valid()) {\n+                convert();\n+            }\n+        } else {\n+            // If we find an Equivalent Injection at a boundary\n+            // we will decide later what to do with it\n+            //\n+            // If finally a dangling line is created at the boundary node\n+            // and the equivalent injection is regulating voltage\n+            // we will have to transfer regulating voltage data\n+            // from the equivalent injection to the dangling line\n+            context.boundary().addEquivalentInjectionAtNode(this.p, nodeId());\n+        }\n     }\n \n     @Override\n     public void convert() {\n+        // An equivalent injection found inside a modeling authority data\n+        // will be mapped to a Generator\n+        convertToGenerator();\n+    }\n+\n+    // A dangling line has been created at the boundary node of the equivalent injection\n+    public DanglingLine convertOverDanglingLine(DanglingLineAdder adder, PowerFlow fother) {\n+        Regulation regulation = getRegulation();\n+        DanglingLine dl;\n+        if (regulation.status) {\n+            // If this equivalent injection is regulating voltage,\n+            // map it over the dangling line 'virtual generator'\n+            dl = adder\n+                    .setP0(fother.p())\n+                    .setQ0(fother.q())\n+                    .add();\n+            dl.newGeneration()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57058d01d381201113543e202d5ff7fc7b84c081"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ5MDUxMA==", "bodyText": "I used this design (similar to reactive limits for example) because the dangling line object can be consistent without it (contrary to shunt model or T3W's legs for example). Do you think it would be better to put it in DLAdder?", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r451490510", "createdAt": "2020-07-08T12:06:16Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/EquivalentInjectionConversion.java", "diffHunk": "@@ -21,55 +19,128 @@\n \n     private static final String REGULATION_TARGET = \"regulationTarget\";\n \n-    public EquivalentInjectionConversion(PropertyBag sm, Context context) {\n-        super(\"EquivalentInjection\", sm, context);\n+    public EquivalentInjectionConversion(PropertyBag ei, Context context) {\n+        super(\"EquivalentInjection\", ei, context);\n+    }\n+\n+    @Override\n+    public void convertInsideBoundary() {\n+        if (context.config().convertBoundary()) {\n+            if (valid()) {\n+                convert();\n+            }\n+        } else {\n+            // If we find an Equivalent Injection at a boundary\n+            // we will decide later what to do with it\n+            //\n+            // If finally a dangling line is created at the boundary node\n+            // and the equivalent injection is regulating voltage\n+            // we will have to transfer regulating voltage data\n+            // from the equivalent injection to the dangling line\n+            context.boundary().addEquivalentInjectionAtNode(this.p, nodeId());\n+        }\n     }\n \n     @Override\n     public void convert() {\n+        // An equivalent injection found inside a modeling authority data\n+        // will be mapped to a Generator\n+        convertToGenerator();\n+    }\n+\n+    // A dangling line has been created at the boundary node of the equivalent injection\n+    public DanglingLine convertOverDanglingLine(DanglingLineAdder adder, PowerFlow fother) {\n+        Regulation regulation = getRegulation();\n+        DanglingLine dl;\n+        if (regulation.status) {\n+            // If this equivalent injection is regulating voltage,\n+            // map it over the dangling line 'virtual generator'\n+            dl = adder\n+                    .setP0(fother.p())\n+                    .setQ0(fother.q())\n+                    .add();\n+            dl.newGeneration()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ2OTA4Nw=="}, "originalCommit": {"oid": "57058d01d381201113543e202d5ff7fc7b84c081"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDgzODY2OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/DanglingLine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMToyNToxNFrOGujiXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMToyNToxNFrOGujiXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ2OTkxNw==", "bodyText": "This class should be moved into the DanglingLineAdder?", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r451469917", "createdAt": "2020-07-08T11:25:14Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/DanglingLine.java", "diffHunk": "@@ -20,9 +20,106 @@\n  * <p>To create a dangling line, see {@link DanglingLineAdder}\n  *\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ * @author Anne Tilloy <anne.tilloy at rte-france.com>\n  * @see DanglingLineAdder\n  */\n-public interface DanglingLine extends Injection<DanglingLine> {\n+public interface DanglingLine extends Injection<DanglingLine>, ReactiveLimitsHolder {\n+\n+    interface Generation {\n+        /**\n+         * <p>Get the generator active power target in MW.</p>\n+         * <p>The active power target follows a generator sign convention.</p>\n+         * <p>Depends on the working variant.</p>\n+         * @return the generator active power target\n+         */\n+        double getTargetP();\n+\n+        /**\n+         * <p>Set the generator active power target in MW.</p>\n+         * <p>Depends on the working variant.</p>\n+         * @param targetP the generator active power target\n+         * @return this to allow method chaining\n+         */\n+        Generation setTargetP(double targetP);\n+\n+        /**\n+         * Get the generator maximal active power in MW.\n+         */\n+        double getMaxP();\n+\n+        /**\n+         * Set the generator maximal active power in MW.\n+         */\n+        Generation setMaxP(double maxP);\n+\n+        /**\n+         * Get the generator minimal active power in MW.\n+         */\n+        double getMinP();\n+\n+        /**\n+         * Set the generator minimal active power in MW.\n+         */\n+        Generation setMinP(double minP);\n+\n+        /**\n+         * <p>Get the generator reactive power target in MVAR.</p>\n+         * <p>The generator reactive power target follows a generator sign convention.</p>\n+         * <p>Depends on the working variant.</p>\n+         * @return the generator reactive power target\n+         */\n+        double getTargetQ();\n+\n+        /**\n+         * <p>Set the generator reactive power target in MVAR.</p>\n+         * <p>Depends on the working variant.</p>\n+         * @param targetQ the generator reactive power target\n+         * @return this to allow method chaining\n+         */\n+        Generation setTargetQ(double targetQ);\n+\n+        /**\n+         * Get the generator voltage regulation status.\n+         */\n+        boolean isVoltageRegulationOn();\n+\n+        /**\n+         * Set the generator voltage regulation status.\n+         */\n+        Generation setVoltageRegulationOn(boolean voltageRegulationOn);\n+\n+        /**\n+         * <p>Get the generator voltage target in Kv.</p>\n+         * <p>Depends on the working variant.</p>\n+         * @return the generator voltage target\n+         */\n+        double getTargetV();\n+\n+        /**\n+         * <p>Set the generator voltage target in Kv.</p>\n+         * <p>Depends on the working variant.</p>\n+         * @param targetV the generator voltage target\n+         * @return this to allow method chaining\n+         */\n+        Generation setTargetV(double targetV);\n+    }\n+\n+    interface GenerationAdder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57058d01d381201113543e202d5ff7fc7b84c081"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDg0MTQxOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/DanglingLineAdder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMToyNjowN1rOGujkGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMToyNjowN1rOGujkGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ3MDM2Mg==", "bodyText": "To be reverted if you do not make any change", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r451470362", "createdAt": "2020-07-08T11:26:07Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/DanglingLineAdder.java", "diffHunk": "@@ -21,6 +21,7 @@\n  *</pre>\n  *\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ * @author Anne Tilloy <anne.tilloy at rte-france.com>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57058d01d381201113543e202d5ff7fc7b84c081"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDg0MTc4OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineAdderImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMToyNjoxNVrOGujkWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMToyNjoxNVrOGujkWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ3MDQyNg==", "bodyText": "Same remark", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r451470426", "createdAt": "2020-07-08T11:26:15Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineAdderImpl.java", "diffHunk": "@@ -12,6 +12,8 @@\n /**\n  *\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ * @author Anne Tilloy <anne.tilloy at rte-france.com>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57058d01d381201113543e202d5ff7fc7b84c081"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDg0NTA5OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMToyNzoxN1rOGujmaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMjowODo0MVrOGuk3kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ3MDk1Mg==", "bodyText": "I think it's not necessary to inherit from MultiVariantObject. If the enclosing object is alreay a MultiVariantObject it could be ok", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r451470952", "createdAt": "2020-07-08T11:27:17Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineImpl.java", "diffHunk": "@@ -6,18 +6,226 @@\n  */\n package com.powsybl.iidm.network.impl;\n \n-import com.powsybl.iidm.network.CurrentLimitsAdder;\n-import com.powsybl.iidm.network.ConnectableType;\n-import com.powsybl.iidm.network.DanglingLine;\n-import com.powsybl.iidm.network.ValidationUtil;\n+import com.powsybl.commons.util.trove.TBooleanArrayList;\n+import com.powsybl.iidm.network.*;\n import com.powsybl.iidm.network.impl.util.Ref;\n import gnu.trove.list.array.TDoubleArrayList;\n \n /**\n  *\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n  */\n-class DanglingLineImpl extends AbstractConnectable<DanglingLine> implements DanglingLine, CurrentLimitsOwner<Void> {\n+class DanglingLineImpl extends AbstractConnectable<DanglingLine> implements DanglingLine, CurrentLimitsOwner<Void>, ReactiveLimitsOwner {\n+\n+    class GenerationImpl implements Generation, MultiVariantObject {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57058d01d381201113543e202d5ff7fc7b84c081"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ5MTcyOQ==", "bodyText": "I'll change it", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r451491729", "createdAt": "2020-07-08T12:08:41Z", "author": {"login": "miovd"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineImpl.java", "diffHunk": "@@ -6,18 +6,226 @@\n  */\n package com.powsybl.iidm.network.impl;\n \n-import com.powsybl.iidm.network.CurrentLimitsAdder;\n-import com.powsybl.iidm.network.ConnectableType;\n-import com.powsybl.iidm.network.DanglingLine;\n-import com.powsybl.iidm.network.ValidationUtil;\n+import com.powsybl.commons.util.trove.TBooleanArrayList;\n+import com.powsybl.iidm.network.*;\n import com.powsybl.iidm.network.impl.util.Ref;\n import gnu.trove.list.array.TDoubleArrayList;\n \n /**\n  *\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n  */\n-class DanglingLineImpl extends AbstractConnectable<DanglingLine> implements DanglingLine, CurrentLimitsOwner<Void> {\n+class DanglingLineImpl extends AbstractConnectable<DanglingLine> implements DanglingLine, CurrentLimitsOwner<Void>, ReactiveLimitsOwner {\n+\n+    class GenerationImpl implements Generation, MultiVariantObject {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ3MDk1Mg=="}, "originalCommit": {"oid": "57058d01d381201113543e202d5ff7fc7b84c081"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDg0NzI3OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMToyNzo1NVrOGujnyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMToyNzo1NVrOGujnyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ3MTMwNg==", "bodyText": "To be moved into DanglingAdderImpl", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r451471306", "createdAt": "2020-07-08T11:27:55Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineImpl.java", "diffHunk": "@@ -6,18 +6,226 @@\n  */\n package com.powsybl.iidm.network.impl;\n \n-import com.powsybl.iidm.network.CurrentLimitsAdder;\n-import com.powsybl.iidm.network.ConnectableType;\n-import com.powsybl.iidm.network.DanglingLine;\n-import com.powsybl.iidm.network.ValidationUtil;\n+import com.powsybl.commons.util.trove.TBooleanArrayList;\n+import com.powsybl.iidm.network.*;\n import com.powsybl.iidm.network.impl.util.Ref;\n import gnu.trove.list.array.TDoubleArrayList;\n \n /**\n  *\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n  */\n-class DanglingLineImpl extends AbstractConnectable<DanglingLine> implements DanglingLine, CurrentLimitsOwner<Void> {\n+class DanglingLineImpl extends AbstractConnectable<DanglingLine> implements DanglingLine, CurrentLimitsOwner<Void>, ReactiveLimitsOwner {\n+\n+    class GenerationImpl implements Generation, MultiVariantObject {\n+\n+        private double minP;\n+\n+        private double maxP;\n+\n+        // attributes depending on the variant\n+\n+        private final TDoubleArrayList targetP;\n+\n+        private final TDoubleArrayList targetQ;\n+\n+        private final TBooleanArrayList voltageRegulationOn;\n+\n+        private final TDoubleArrayList targetV;\n+\n+        GenerationImpl(double minP, double maxP, double targetP, double targetQ, boolean voltageRegulationOn, double targetV) {\n+            int variantArraySize = network.get().getVariantManager().getVariantArraySize();\n+            this.targetP = new TDoubleArrayList(variantArraySize);\n+            this.targetQ = new TDoubleArrayList(variantArraySize);\n+            this.voltageRegulationOn = new TBooleanArrayList(variantArraySize);\n+            this.targetV = new TDoubleArrayList(variantArraySize);\n+            this.minP = minP;\n+            this.maxP = maxP;\n+            for (int i = 0; i < variantArraySize; i++) {\n+                this.targetP.add(targetP);\n+                this.targetQ.add(targetQ);\n+                this.voltageRegulationOn.add(voltageRegulationOn);\n+                this.targetV.add(targetV);\n+            }\n+        }\n+\n+        @Override\n+        public double getTargetP() {\n+            return targetP.get(getNetwork().getVariantIndex());\n+        }\n+\n+        @Override\n+        public GenerationImpl setTargetP(double targetP) {\n+            int variantIndex = network.get().getVariantIndex();\n+            double oldValue = this.targetP.set(variantIndex, targetP);\n+            String variantId = network.get().getVariantManager().getVariantId(variantIndex);\n+            notifyUpdate(\"targetP\", variantId, oldValue, targetP);\n+            return this;\n+        }\n+\n+        @Override\n+        public double getMaxP() {\n+            return maxP;\n+        }\n+\n+        @Override\n+        public GenerationImpl setMaxP(double maxP) {\n+            ValidationUtil.checkMaxP(DanglingLineImpl.this, maxP);\n+            ValidationUtil.checkActivePowerLimits(DanglingLineImpl.this, minP, maxP);\n+            double oldValue = this.maxP;\n+            this.maxP = maxP;\n+            notifyUpdate(\"maxP\", oldValue, maxP);\n+            return this;\n+        }\n+\n+        @Override\n+        public double getMinP() {\n+            return minP;\n+        }\n+\n+        @Override\n+        public GenerationImpl setMinP(double minP) {\n+            ValidationUtil.checkMinP(DanglingLineImpl.this, minP);\n+            ValidationUtil.checkActivePowerLimits(DanglingLineImpl.this, minP, maxP);\n+            double oldValue = this.minP;\n+            this.minP = minP;\n+            notifyUpdate(\"minP\", oldValue, minP);\n+            return this;\n+        }\n+\n+        @Override\n+        public double getTargetQ() {\n+            return targetQ.get(getNetwork().getVariantIndex());\n+        }\n+\n+        @Override\n+        public GenerationImpl setTargetQ(double targetQ) {\n+            int variantIndex = network.get().getVariantIndex();\n+            double oldValue = this.targetQ.set(variantIndex, targetQ);\n+            String variantId = network.get().getVariantManager().getVariantId(variantIndex);\n+            notifyUpdate(\"targetQ\", variantId, oldValue, targetQ);\n+            return this;\n+        }\n+\n+        @Override\n+        public boolean isVoltageRegulationOn() {\n+            return voltageRegulationOn.get(getNetwork().getVariantIndex());\n+        }\n+\n+        @Override\n+        public GenerationImpl setVoltageRegulationOn(boolean voltageRegulationOn) {\n+            int variantIndex = getNetwork().getVariantIndex();\n+            boolean oldValue = this.voltageRegulationOn.get(variantIndex);\n+            this.voltageRegulationOn.set(variantIndex, voltageRegulationOn);\n+            String variantId = getNetwork().getVariantManager().getVariantId(variantIndex);\n+            notifyUpdate(\"voltageRegulationOn\", variantId, oldValue, voltageRegulationOn);\n+            return this;\n+        }\n+\n+        @Override\n+        public double getTargetV() {\n+            return this.targetV.get(getNetwork().getVariantIndex());\n+        }\n+\n+        @Override\n+        public GenerationImpl setTargetV(double targetV) {\n+            int variantIndex = getNetwork().getVariantIndex();\n+            double oldValue = this.targetV.set(variantIndex, targetV);\n+            String variantId = getNetwork().getVariantManager().getVariantId(variantIndex);\n+            notifyUpdate(\"targetV\", variantId, oldValue, targetV);\n+            return this;\n+        }\n+\n+        @Override\n+        public void extendVariantArraySize(int initVariantArraySize, int number, int sourceIndex) {\n+            targetP.ensureCapacity(targetP.size() + number);\n+            targetQ.ensureCapacity(targetQ.size() + number);\n+            voltageRegulationOn.ensureCapacity(voltageRegulationOn.size() + number);\n+            targetV.ensureCapacity(targetV.size() + number);\n+            for (int i = 0; i < number; i++) {\n+                targetP.add(targetP.get(sourceIndex));\n+                targetQ.add(targetQ.get(sourceIndex));\n+                voltageRegulationOn.add(voltageRegulationOn.get(sourceIndex));\n+                targetV.add(targetV.get(sourceIndex));\n+            }\n+        }\n+\n+        @Override\n+        public void reduceVariantArraySize(int number) {\n+            targetP.remove(targetP.size() - number, number);\n+            targetQ.remove(targetQ.size() - number, number);\n+            voltageRegulationOn.remove(voltageRegulationOn.size() - number, number);\n+            targetV.remove(targetV.size() - number, number);\n+        }\n+\n+        @Override\n+        public void deleteVariantArrayElement(int index) {\n+            // nothing to do\n+        }\n+\n+        @Override\n+        public void allocateVariantArrayElement(int[] indexes, int sourceIndex) {\n+            for (int index : indexes) {\n+                targetP.set(index, targetP.get(sourceIndex));\n+                targetQ.set(index, targetQ.get(sourceIndex));\n+                voltageRegulationOn.set(index, voltageRegulationOn.get(sourceIndex));\n+                targetV.set(index, targetV.get(sourceIndex));\n+            }\n+        }\n+    }\n+\n+    class GenerationAdderImpl implements GenerationAdder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57058d01d381201113543e202d5ff7fc7b84c081"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDg1MzMxOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMTozMDowNlrOGujrwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMjowNzoyOVrOGuk1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ3MjMyMQ==", "bodyText": "Maybe the reactiveLimits should be hold by the generation object: does it make sense to have no generation but a reactiveLimits?", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r451472321", "createdAt": "2020-07-08T11:30:06Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineImpl.java", "diffHunk": "@@ -31,15 +239,20 @@\n \n     private final String ucteXnodeCode;\n \n+    private GenerationImpl generation;\n+\n     private CurrentLimitsImpl limits;\n \n+    private final ReactiveLimitsHolderImpl reactiveLimits;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57058d01d381201113543e202d5ff7fc7b84c081"}, "originalPosition": 240}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ5MTEyOQ==", "bodyText": "No, you are right, I am changing it", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r451491129", "createdAt": "2020-07-08T12:07:29Z", "author": {"login": "miovd"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineImpl.java", "diffHunk": "@@ -31,15 +239,20 @@\n \n     private final String ucteXnodeCode;\n \n+    private GenerationImpl generation;\n+\n     private CurrentLimitsImpl limits;\n \n+    private final ReactiveLimitsHolderImpl reactiveLimits;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ3MjMyMQ=="}, "originalCommit": {"oid": "57058d01d381201113543e202d5ff7fc7b84c081"}, "originalPosition": 240}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDg2MjM1OnYy", "diffSide": "RIGHT", "path": "ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMTozMzowMlrOGujxZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNzozNDoxOFrOGydxWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ3Mzc2NA==", "bodyText": "You should create a generation only if necessary: i.e there is a voltage setpoint or a power generation?", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r451473764", "createdAt": "2020-07-08T11:33:02Z", "author": {"login": "mathbagu"}, "path": "ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java", "diffHunk": "@@ -257,6 +247,23 @@ private static void createDanglingLine(UcteLine ucteLine, boolean connected,\n                 .setQ0(q0)\n                 .setUcteXnodeCode(xnode.getCode().toString())\n                 .add();\n+        dl.newGeneration()\n+                .setTargetP(-targetP)\n+                .setTargetQ(-targetQ)\n+                .add();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57058d01d381201113543e202d5ff7fc7b84c081"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2Mzg0OQ==", "bodyText": "@annetill Are these values used in loadflow even when there is no voltage setpoint and/or power generation?", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r455063849", "createdAt": "2020-07-15T13:46:23Z", "author": {"login": "miovd"}, "path": "ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java", "diffHunk": "@@ -257,6 +247,23 @@ private static void createDanglingLine(UcteLine ucteLine, boolean connected,\n                 .setQ0(q0)\n                 .setUcteXnodeCode(xnode.getCode().toString())\n                 .add();\n+        dl.newGeneration()\n+                .setTargetP(-targetP)\n+                .setTargetQ(-targetQ)\n+                .add();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ3Mzc2NA=="}, "originalCommit": {"oid": "57058d01d381201113543e202d5ff7fc7b84c081"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2OTc1NA==", "bodyText": "If the generator is regulating voltage, I use the voltage setpoint, otherwise I use the generator targetQ. From CGMES files, I will most of the time use only P0 and Q0. From UCTE file, I will most of the time have both load part and generation part, as it is described in the input data.", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r455569754", "createdAt": "2020-07-16T07:34:18Z", "author": {"login": "annetill"}, "path": "ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java", "diffHunk": "@@ -257,6 +247,23 @@ private static void createDanglingLine(UcteLine ucteLine, boolean connected,\n                 .setQ0(q0)\n                 .setUcteXnodeCode(xnode.getCode().toString())\n                 .add();\n+        dl.newGeneration()\n+                .setTargetP(-targetP)\n+                .setTargetQ(-targetQ)\n+                .add();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ3Mzc2NA=="}, "originalCommit": {"oid": "57058d01d381201113543e202d5ff7fc7b84c081"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjIxNjE4OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineAdderImpl.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTo0NTowMVrOGyjZWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMjozMDozOFrOGyovQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2MTkxMw==", "bodyText": "In GeneratorAdderImpl, we check a lot of thing I would expect to find here such as:\n\nValidationUtil.checkMinP(this, minP);\nValidationUtil.checkMaxP(this, maxP);\nValidationUtil.checkActivePowerSetpoint(this, targetP);\nValidationUtil.checkVoltageControl(this, voltageRegulatorOn, targetV, targetQ);", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r455661913", "createdAt": "2020-07-16T09:45:01Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineAdderImpl.java", "diffHunk": "@@ -12,9 +12,64 @@\n /**\n  *\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ * @author Anne Tilloy <anne.tilloy at rte-france.com>\n+ *\n  */\n class DanglingLineAdderImpl extends AbstractInjectionAdder<DanglingLineAdderImpl> implements DanglingLineAdder {\n \n+    class GenerationAdderImpl implements GenerationAdder {\n+\n+        double minP;\n+        double maxP;\n+        double targetP;\n+        double targetQ;\n+        boolean voltageRegulationOn;\n+        double targetV;\n+\n+        @Override\n+        public GenerationAdder setTargetP(double targetP) {\n+            this.targetP = targetP;\n+            return this;\n+        }\n+\n+        @Override\n+        public GenerationAdder setMaxP(double maxP) {\n+            this.maxP = maxP;\n+            return this;\n+        }\n+\n+        @Override\n+        public GenerationAdder setMinP(double minP) {\n+            this.minP = minP;\n+            return this;\n+        }\n+\n+        @Override\n+        public GenerationAdder setTargetQ(double targetQ) {\n+            this.targetQ = targetQ;\n+            return this;\n+        }\n+\n+        @Override\n+        public GenerationAdder setVoltageRegulationOn(boolean voltageRegulationOn) {\n+            this.voltageRegulationOn = voltageRegulationOn;\n+            return this;\n+        }\n+\n+        @Override\n+        public GenerationAdder setTargetV(double targetV) {\n+            this.targetV = targetV;\n+            return this;\n+        }\n+\n+        @Override\n+        public DanglingLineAdder add() {\n+            ValidationUtil.checkActivePowerLimits(DanglingLineAdderImpl.this, minP, maxP);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcab7d06b95af527efa738b53e993174e69a08d9"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTczNjM1NQ==", "bodyText": "Yes but in this case minP/maxP are not mandatory (which leads to no check), same goes for targets.", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r455736355", "createdAt": "2020-07-16T12:06:26Z", "author": {"login": "miovd"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineAdderImpl.java", "diffHunk": "@@ -12,9 +12,64 @@\n /**\n  *\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ * @author Anne Tilloy <anne.tilloy at rte-france.com>\n+ *\n  */\n class DanglingLineAdderImpl extends AbstractInjectionAdder<DanglingLineAdderImpl> implements DanglingLineAdder {\n \n+    class GenerationAdderImpl implements GenerationAdder {\n+\n+        double minP;\n+        double maxP;\n+        double targetP;\n+        double targetQ;\n+        boolean voltageRegulationOn;\n+        double targetV;\n+\n+        @Override\n+        public GenerationAdder setTargetP(double targetP) {\n+            this.targetP = targetP;\n+            return this;\n+        }\n+\n+        @Override\n+        public GenerationAdder setMaxP(double maxP) {\n+            this.maxP = maxP;\n+            return this;\n+        }\n+\n+        @Override\n+        public GenerationAdder setMinP(double minP) {\n+            this.minP = minP;\n+            return this;\n+        }\n+\n+        @Override\n+        public GenerationAdder setTargetQ(double targetQ) {\n+            this.targetQ = targetQ;\n+            return this;\n+        }\n+\n+        @Override\n+        public GenerationAdder setVoltageRegulationOn(boolean voltageRegulationOn) {\n+            this.voltageRegulationOn = voltageRegulationOn;\n+            return this;\n+        }\n+\n+        @Override\n+        public GenerationAdder setTargetV(double targetV) {\n+            this.targetV = targetV;\n+            return this;\n+        }\n+\n+        @Override\n+        public DanglingLineAdder add() {\n+            ValidationUtil.checkActivePowerLimits(DanglingLineAdderImpl.this, minP, maxP);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2MTkxMw=="}, "originalCommit": {"oid": "fcab7d06b95af527efa738b53e993174e69a08d9"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTczODg2Mw==", "bodyText": "I am not sure how generation data is actually used in CGMES/UCTE, @annetill do you have any input on this?", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r455738863", "createdAt": "2020-07-16T12:11:10Z", "author": {"login": "miovd"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineAdderImpl.java", "diffHunk": "@@ -12,9 +12,64 @@\n /**\n  *\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ * @author Anne Tilloy <anne.tilloy at rte-france.com>\n+ *\n  */\n class DanglingLineAdderImpl extends AbstractInjectionAdder<DanglingLineAdderImpl> implements DanglingLineAdder {\n \n+    class GenerationAdderImpl implements GenerationAdder {\n+\n+        double minP;\n+        double maxP;\n+        double targetP;\n+        double targetQ;\n+        boolean voltageRegulationOn;\n+        double targetV;\n+\n+        @Override\n+        public GenerationAdder setTargetP(double targetP) {\n+            this.targetP = targetP;\n+            return this;\n+        }\n+\n+        @Override\n+        public GenerationAdder setMaxP(double maxP) {\n+            this.maxP = maxP;\n+            return this;\n+        }\n+\n+        @Override\n+        public GenerationAdder setMinP(double minP) {\n+            this.minP = minP;\n+            return this;\n+        }\n+\n+        @Override\n+        public GenerationAdder setTargetQ(double targetQ) {\n+            this.targetQ = targetQ;\n+            return this;\n+        }\n+\n+        @Override\n+        public GenerationAdder setVoltageRegulationOn(boolean voltageRegulationOn) {\n+            this.voltageRegulationOn = voltageRegulationOn;\n+            return this;\n+        }\n+\n+        @Override\n+        public GenerationAdder setTargetV(double targetV) {\n+            this.targetV = targetV;\n+            return this;\n+        }\n+\n+        @Override\n+        public DanglingLineAdder add() {\n+            ValidationUtil.checkActivePowerLimits(DanglingLineAdderImpl.this, minP, maxP);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2MTkxMw=="}, "originalCommit": {"oid": "fcab7d06b95af527efa738b53e993174e69a08d9"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc0OTQ0MQ==", "bodyText": "Indeed from CGMES and from UCTE, we will create minimal generation part of a dangling line:\n\nSometimes a generation that has only targetQ and targetP ;\nSometimes a generation that has only targetP, targetV and voltageRegulationOn.", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r455749441", "createdAt": "2020-07-16T12:30:38Z", "author": {"login": "annetill"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineAdderImpl.java", "diffHunk": "@@ -12,9 +12,64 @@\n /**\n  *\n  * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+ * @author Anne Tilloy <anne.tilloy at rte-france.com>\n+ *\n  */\n class DanglingLineAdderImpl extends AbstractInjectionAdder<DanglingLineAdderImpl> implements DanglingLineAdder {\n \n+    class GenerationAdderImpl implements GenerationAdder {\n+\n+        double minP;\n+        double maxP;\n+        double targetP;\n+        double targetQ;\n+        boolean voltageRegulationOn;\n+        double targetV;\n+\n+        @Override\n+        public GenerationAdder setTargetP(double targetP) {\n+            this.targetP = targetP;\n+            return this;\n+        }\n+\n+        @Override\n+        public GenerationAdder setMaxP(double maxP) {\n+            this.maxP = maxP;\n+            return this;\n+        }\n+\n+        @Override\n+        public GenerationAdder setMinP(double minP) {\n+            this.minP = minP;\n+            return this;\n+        }\n+\n+        @Override\n+        public GenerationAdder setTargetQ(double targetQ) {\n+            this.targetQ = targetQ;\n+            return this;\n+        }\n+\n+        @Override\n+        public GenerationAdder setVoltageRegulationOn(boolean voltageRegulationOn) {\n+            this.voltageRegulationOn = voltageRegulationOn;\n+            return this;\n+        }\n+\n+        @Override\n+        public GenerationAdder setTargetV(double targetV) {\n+            this.targetV = targetV;\n+            return this;\n+        }\n+\n+        @Override\n+        public DanglingLineAdder add() {\n+            ValidationUtil.checkActivePowerLimits(DanglingLineAdderImpl.this, minP, maxP);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2MTkxMw=="}, "originalCommit": {"oid": "fcab7d06b95af527efa738b53e993174e69a08d9"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjIxOTQ5OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTo0NTo1MlrOGyjbeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTo0NTo1MlrOGyjbeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2MjQ1OA==", "bodyText": "Same king of remark: why there is no integrity checks in the different setters?", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r455662458", "createdAt": "2020-07-16T09:45:52Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineImpl.java", "diffHunk": "@@ -19,6 +17,166 @@\n  */\n class DanglingLineImpl extends AbstractConnectable<DanglingLine> implements DanglingLine, CurrentLimitsOwner<Void> {\n \n+    public static class GenerationImpl implements Generation, ReactiveLimitsOwner, Validable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcab7d06b95af527efa738b53e993174e69a08d9"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjIyMzQ3OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTo0Njo1OFrOGyjeFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMjo0ODoxM1rOGypWHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2MzEyNA==", "bodyText": "That's strange: the constructor should have a Generation parameter instead of mixing data and adder?", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r455663124", "createdAt": "2020-07-16T09:46:58Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineImpl.java", "diffHunk": "@@ -54,6 +215,11 @@\n         this.g = g;\n         this.b = b;\n         this.ucteXnodeCode = ucteXnodeCode;\n+        if (generationAdder != null) {\n+            generation = new GenerationImpl(generationAdder, this);\n+        } else {\n+            generation = null;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcab7d06b95af527efa738b53e993174e69a08d9"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTczNzEyNQ==", "bodyText": "The issue is GenerationImpl cannot be created if the DanglingLineImpl object has not being created... I am a bit bothered by it too but I did not have any better idea.", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r455737125", "createdAt": "2020-07-16T12:07:54Z", "author": {"login": "miovd"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineImpl.java", "diffHunk": "@@ -54,6 +215,11 @@\n         this.g = g;\n         this.b = b;\n         this.ucteXnodeCode = ucteXnodeCode;\n+        if (generationAdder != null) {\n+            generation = new GenerationImpl(generationAdder, this);\n+        } else {\n+            generation = null;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2MzEyNA=="}, "originalCommit": {"oid": "fcab7d06b95af527efa738b53e993174e69a08d9"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc1OTM4OA==", "bodyText": "Okay, I changed a bit the implementation in my last commit and put the same mecanism that with T3W's leg: a generation without a set danglingline is created at first and danglingLine is set when the object is created. It is a bit cleaner.", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r455759388", "createdAt": "2020-07-16T12:48:13Z", "author": {"login": "miovd"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineImpl.java", "diffHunk": "@@ -54,6 +215,11 @@\n         this.g = g;\n         this.b = b;\n         this.ucteXnodeCode = ucteXnodeCode;\n+        if (generationAdder != null) {\n+            generation = new GenerationImpl(generationAdder, this);\n+        } else {\n+            generation = null;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2MzEyNA=="}, "originalCommit": {"oid": "fcab7d06b95af527efa738b53e993174e69a08d9"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjIyNzY1OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTo0ODowM1rOGyjgtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMjoxMTozNFrOGyoGxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2Mzc5Ng==", "bodyText": "This is not a good design: you should keep only the second constructor. Remove the DanglingLineImpl and male the generation class not static to be able to access to the DanglingLine.", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r455663796", "createdAt": "2020-07-16T09:48:03Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineImpl.java", "diffHunk": "@@ -19,6 +17,166 @@\n  */\n class DanglingLineImpl extends AbstractConnectable<DanglingLine> implements DanglingLine, CurrentLimitsOwner<Void> {\n \n+    public static class GenerationImpl implements Generation, ReactiveLimitsOwner, Validable {\n+\n+        private final DanglingLineImpl danglingLine;\n+\n+        private final ReactiveLimitsHolderImpl reactiveLimits;\n+\n+        private double minP;\n+\n+        private double maxP;\n+\n+        // attributes depending on the variant\n+\n+        private final TDoubleArrayList targetP;\n+\n+        private final TDoubleArrayList targetQ;\n+\n+        private final TBooleanArrayList voltageRegulationOn;\n+\n+        private final TDoubleArrayList targetV;\n+\n+        GenerationImpl(DanglingLineAdderImpl.GenerationAdderImpl adder, DanglingLineImpl danglingLine) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcab7d06b95af527efa738b53e993174e69a08d9"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTczOTA3OQ==", "bodyText": "See my remark on the comment above", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r455739079", "createdAt": "2020-07-16T12:11:34Z", "author": {"login": "miovd"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineImpl.java", "diffHunk": "@@ -19,6 +17,166 @@\n  */\n class DanglingLineImpl extends AbstractConnectable<DanglingLine> implements DanglingLine, CurrentLimitsOwner<Void> {\n \n+    public static class GenerationImpl implements Generation, ReactiveLimitsOwner, Validable {\n+\n+        private final DanglingLineImpl danglingLine;\n+\n+        private final ReactiveLimitsHolderImpl reactiveLimits;\n+\n+        private double minP;\n+\n+        private double maxP;\n+\n+        // attributes depending on the variant\n+\n+        private final TDoubleArrayList targetP;\n+\n+        private final TDoubleArrayList targetQ;\n+\n+        private final TBooleanArrayList voltageRegulationOn;\n+\n+        private final TDoubleArrayList targetV;\n+\n+        GenerationImpl(DanglingLineAdderImpl.GenerationAdderImpl adder, DanglingLineImpl danglingLine) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2Mzc5Ng=="}, "originalCommit": {"oid": "fcab7d06b95af527efa738b53e993174e69a08d9"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjIzMTU4OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTo0OToxOFrOGyjjWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMjowODozNlrOGyoAZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2NDQ3Mw==", "bodyText": "Move the variant management in the generation: this is an encapsulation issue, the generation should be in charge of its data.", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r455664473", "createdAt": "2020-07-16T09:49:18Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineImpl.java", "diffHunk": "@@ -188,13 +359,31 @@ public void extendVariantArraySize(int initVariantArraySize, int number, int sou\n             p0.add(p0.get(sourceIndex));\n             q0.add(q0.get(sourceIndex));\n         }\n+        if (generation != null) {\n+            generation.targetP.ensureCapacity(generation.targetP.size() + number);\n+            generation.targetQ.ensureCapacity(generation.targetQ.size() + number);\n+            generation.voltageRegulationOn.ensureCapacity(generation.voltageRegulationOn.size() + number);\n+            generation.targetV.ensureCapacity(generation.targetV.size() + number);\n+            for (int i = 0; i < number; i++) {\n+                generation.targetP.add(generation.targetP.get(sourceIndex));\n+                generation.targetQ.add(generation.targetQ.get(sourceIndex));\n+                generation.voltageRegulationOn.add(generation.voltageRegulationOn.get(sourceIndex));\n+                generation.targetV.add(generation.targetV.get(sourceIndex));\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcab7d06b95af527efa738b53e993174e69a08d9"}, "originalPosition": 238}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTczNzQ0NA==", "bodyText": "Hm, this was what was done at first but I think you told me to change it? Did I miss something?", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r455737444", "createdAt": "2020-07-16T12:08:36Z", "author": {"login": "miovd"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineImpl.java", "diffHunk": "@@ -188,13 +359,31 @@ public void extendVariantArraySize(int initVariantArraySize, int number, int sou\n             p0.add(p0.get(sourceIndex));\n             q0.add(q0.get(sourceIndex));\n         }\n+        if (generation != null) {\n+            generation.targetP.ensureCapacity(generation.targetP.size() + number);\n+            generation.targetQ.ensureCapacity(generation.targetQ.size() + number);\n+            generation.voltageRegulationOn.ensureCapacity(generation.voltageRegulationOn.size() + number);\n+            generation.targetV.ensureCapacity(generation.targetV.size() + number);\n+            for (int i = 0; i < number; i++) {\n+                generation.targetP.add(generation.targetP.get(sourceIndex));\n+                generation.targetQ.add(generation.targetQ.get(sourceIndex));\n+                generation.voltageRegulationOn.add(generation.voltageRegulationOn.get(sourceIndex));\n+                generation.targetV.add(generation.targetV.get(sourceIndex));\n+            }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2NDQ3Mw=="}, "originalCommit": {"oid": "fcab7d06b95af527efa738b53e993174e69a08d9"}, "originalPosition": 238}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjI0MzcyOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/DanglingLineXml.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTo1MjoyOVrOGyjq1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTo1MjoyOVrOGyjq1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2NjM5MQ==", "bodyText": "Is it correct?", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r455666391", "createdAt": "2020-07-16T09:52:29Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/DanglingLineXml.java", "diffHunk": "@@ -62,6 +84,11 @@ protected DanglingLineAdder createAdder(VoltageLevel vl) {\n \n     @Override\n     protected DanglingLine readRootElementAttributes(DanglingLineAdder adder, NetworkXmlReaderContext context) {\n+        throw new UnsupportedOperationException();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcab7d06b95af527efa738b53e993174e69a08d9"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjI1NDAzOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/DanglingLineXml.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTo1NToxOFrOGyjxTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMjoyOTo1NFrOGyotng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2ODA0NQ==", "bodyText": "I'm surprised: this piece of code change a lot. To be checked, but maybe there is a design issue that makes this code complex.", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r455668045", "createdAt": "2020-07-16T09:55:18Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/DanglingLineXml.java", "diffHunk": "@@ -70,26 +97,106 @@ protected DanglingLine readRootElementAttributes(DanglingLineAdder adder, Networ\n         double b = XmlUtil.readDoubleAttribute(context.getReader(), \"b\");\n         String ucteXnodeCode = context.getReader().getAttributeValue(null, \"ucteXnodeCode\");\n         readNodeOrBus(adder, context);\n-        DanglingLine dl = adder.setP0(p0)\n+        adder.setP0(p0)\n                 .setQ0(q0)\n                 .setR(r)\n                 .setX(x)\n                 .setG(g)\n                 .setB(b)\n-                .setUcteXnodeCode(ucteXnodeCode)\n-                .add();\n-        readPQ(null, dl.getTerminal(), context.getReader());\n-        return dl;\n+                .setUcteXnodeCode(ucteXnodeCode);\n+        Map<String, String> properties = new HashMap<>();\n+        double p = XmlUtil.readOptionalDoubleAttribute(context.getReader(), \"p\");\n+        double q = XmlUtil.readOptionalDoubleAttribute(context.getReader(), \"q\");\n+        double[] permanentLimit = new double[1];\n+        permanentLimit[0] = Double.NaN;\n+        Map<Integer, TemporaryLimitXml> temporaryLimits = new HashMap<>();\n+        DanglingLine[] danglingLine = new DanglingLine[1];\n+        boolean[] hasGeneration = new boolean[1];\n+        readUntilEndRootElement(context.getReader(), () -> {\n+            switch (context.getReader().getLocalName()) {\n+                case \"property\":\n+                    String name = context.getReader().getAttributeValue(null, \"name\");\n+                    String value = context.getReader().getAttributeValue(null, \"value\");\n+                    properties.put(name, value);\n+                    break;\n+                case \"currentLimits\":\n+                    permanentLimit[0] = XmlUtil.readOptionalDoubleAttribute(context.getReader(), \"permanentLimit\");\n+                    XmlUtil.readUntilEndElement(\"currentLimits\", context.getReader(), () -> {\n+                        if (\"temporaryLimit\".equals(context.getReader().getLocalName())) {\n+                            String tlName = context.getReader().getAttributeValue(null, \"name\");\n+                            int acceptableDuration = XmlUtil.readOptionalIntegerAttribute(context.getReader(), \"acceptableDuration\", Integer.MAX_VALUE);\n+                            double tlValue = XmlUtil.readOptionalDoubleAttribute(context.getReader(), \"value\", Double.MAX_VALUE);\n+                            boolean fictitious = XmlUtil.readOptionalBoolAttribute(context.getReader(), \"fictitious\", false);\n+                            temporaryLimits.put(acceptableDuration, new TemporaryLimitXml(tlName, tlValue, fictitious));\n+                        }\n+                    });\n+                    break;\n+                case GENERATION:\n+                    IidmXmlUtil.assertMinimumVersion(ROOT_ELEMENT_NAME, GENERATION, IidmXmlUtil.ErrorMessage.NOT_NULL_NOT_SUPPORTED, IidmXmlVersion.V_1_3, context);\n+                    hasGeneration[0] = true;\n+                    danglingLine[0] = readGeneration(adder, context.getReader(), context);\n+                    break;\n+                default:\n+                    throw new PowsyblException(\"Unknown element name <\" + context.getReader().getLocalName() + \"> in <\" + id + \">\");\n+            }\n+        });\n+        if (!hasGeneration[0]) {\n+            danglingLine[0] = adder.add();\n+        }\n+        properties.forEach(danglingLine[0]::setProperty);\n+        danglingLine[0].getTerminal().setP(p).setQ(q);\n+        if (!Double.isNaN(permanentLimit[0]) || !temporaryLimits.isEmpty()) {\n+            CurrentLimitsAdder limitsAdder = danglingLine[0].newCurrentLimits()\n+                    .setPermanentLimit(permanentLimit[0]);\n+            temporaryLimits\n+                    .forEach((acceptableDuration, tl) -> limitsAdder.beginTemporaryLimit()\n+                    .setAcceptableDuration(acceptableDuration)\n+                    .setName(tl.name)\n+                    .setValue(tl.value)\n+                    .setFictitious(tl.fictitious)\n+                    .endTemporaryLimit());\n+            limitsAdder.add();\n+        }\n     }\n \n-    @Override\n-    protected void readSubElements(DanglingLine dl, NetworkXmlReaderContext context) throws XMLStreamException {\n-        readUntilEndRootElement(context.getReader(), () -> {\n-            if (\"currentLimits\".equals(context.getReader().getLocalName())) {\n-                readCurrentLimits(null, dl::newCurrentLimits, context.getReader());\n-            } else {\n-                super.readSubElements(dl, context);\n+    private DanglingLine readGeneration(DanglingLineAdder adder, XMLStreamReader reader, NetworkXmlReaderContext context) throws XMLStreamException {\n+        double minP = XmlUtil.readOptionalDoubleAttribute(reader, \"minP\");\n+        double maxP = XmlUtil.readOptionalDoubleAttribute(reader, \"maxP\");\n+        boolean voltageRegulationOn = XmlUtil.readBoolAttribute(reader, \"voltageRegulationOn\");\n+        double targetP = XmlUtil.readOptionalDoubleAttribute(reader, \"targetP\");\n+        double targetV = XmlUtil.readOptionalDoubleAttribute(reader, \"targetV\");\n+        double targetQ = XmlUtil.readOptionalDoubleAttribute(reader, \"targetQ\");\n+        adder.newGeneration()\n+                .setMinP(minP)\n+                .setMaxP(maxP)\n+                .setVoltageRegulationOn(voltageRegulationOn)\n+                .setTargetP(targetP)\n+                .setTargetV(targetV)\n+                .setTargetQ(targetQ)\n+                .add();\n+        DanglingLine danglingLine = adder.add();\n+        XmlUtil.readUntilEndElement(GENERATION, reader, () -> {\n+            switch (context.getReader().getLocalName()) {\n+                case \"reactiveCapabilityCurve\":\n+                case \"minMaxReactiveLimits\":\n+                    ReactiveLimitsXml.INSTANCE.read(danglingLine.getGeneration(), context);\n+                    break;\n+                default:\n+                    throw new PowsyblException(\"Unknown element name <\" + context.getReader().getLocalName() + \"> in <\" + danglingLine.getId() + \".generation>\");\n             }\n         });\n+        return danglingLine;\n+    }\n+\n+    class TemporaryLimitXml {\n+        private final String name;\n+        private final double value;\n+        private final boolean fictitious;\n+\n+        TemporaryLimitXml(String name, double value, boolean fictitious) {\n+            this.name = name;\n+            this.value = value;\n+            this.fictitious = fictitious;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcab7d06b95af527efa738b53e993174e69a08d9"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTczODEwNA==", "bodyText": "It changes a lot because by moving GenerationAdder in DanglingLineAdder, we now cannot call add() before reading sub elements (similar to what is done in ShuntXml)", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r455738104", "createdAt": "2020-07-16T12:09:48Z", "author": {"login": "miovd"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/DanglingLineXml.java", "diffHunk": "@@ -70,26 +97,106 @@ protected DanglingLine readRootElementAttributes(DanglingLineAdder adder, Networ\n         double b = XmlUtil.readDoubleAttribute(context.getReader(), \"b\");\n         String ucteXnodeCode = context.getReader().getAttributeValue(null, \"ucteXnodeCode\");\n         readNodeOrBus(adder, context);\n-        DanglingLine dl = adder.setP0(p0)\n+        adder.setP0(p0)\n                 .setQ0(q0)\n                 .setR(r)\n                 .setX(x)\n                 .setG(g)\n                 .setB(b)\n-                .setUcteXnodeCode(ucteXnodeCode)\n-                .add();\n-        readPQ(null, dl.getTerminal(), context.getReader());\n-        return dl;\n+                .setUcteXnodeCode(ucteXnodeCode);\n+        Map<String, String> properties = new HashMap<>();\n+        double p = XmlUtil.readOptionalDoubleAttribute(context.getReader(), \"p\");\n+        double q = XmlUtil.readOptionalDoubleAttribute(context.getReader(), \"q\");\n+        double[] permanentLimit = new double[1];\n+        permanentLimit[0] = Double.NaN;\n+        Map<Integer, TemporaryLimitXml> temporaryLimits = new HashMap<>();\n+        DanglingLine[] danglingLine = new DanglingLine[1];\n+        boolean[] hasGeneration = new boolean[1];\n+        readUntilEndRootElement(context.getReader(), () -> {\n+            switch (context.getReader().getLocalName()) {\n+                case \"property\":\n+                    String name = context.getReader().getAttributeValue(null, \"name\");\n+                    String value = context.getReader().getAttributeValue(null, \"value\");\n+                    properties.put(name, value);\n+                    break;\n+                case \"currentLimits\":\n+                    permanentLimit[0] = XmlUtil.readOptionalDoubleAttribute(context.getReader(), \"permanentLimit\");\n+                    XmlUtil.readUntilEndElement(\"currentLimits\", context.getReader(), () -> {\n+                        if (\"temporaryLimit\".equals(context.getReader().getLocalName())) {\n+                            String tlName = context.getReader().getAttributeValue(null, \"name\");\n+                            int acceptableDuration = XmlUtil.readOptionalIntegerAttribute(context.getReader(), \"acceptableDuration\", Integer.MAX_VALUE);\n+                            double tlValue = XmlUtil.readOptionalDoubleAttribute(context.getReader(), \"value\", Double.MAX_VALUE);\n+                            boolean fictitious = XmlUtil.readOptionalBoolAttribute(context.getReader(), \"fictitious\", false);\n+                            temporaryLimits.put(acceptableDuration, new TemporaryLimitXml(tlName, tlValue, fictitious));\n+                        }\n+                    });\n+                    break;\n+                case GENERATION:\n+                    IidmXmlUtil.assertMinimumVersion(ROOT_ELEMENT_NAME, GENERATION, IidmXmlUtil.ErrorMessage.NOT_NULL_NOT_SUPPORTED, IidmXmlVersion.V_1_3, context);\n+                    hasGeneration[0] = true;\n+                    danglingLine[0] = readGeneration(adder, context.getReader(), context);\n+                    break;\n+                default:\n+                    throw new PowsyblException(\"Unknown element name <\" + context.getReader().getLocalName() + \"> in <\" + id + \">\");\n+            }\n+        });\n+        if (!hasGeneration[0]) {\n+            danglingLine[0] = adder.add();\n+        }\n+        properties.forEach(danglingLine[0]::setProperty);\n+        danglingLine[0].getTerminal().setP(p).setQ(q);\n+        if (!Double.isNaN(permanentLimit[0]) || !temporaryLimits.isEmpty()) {\n+            CurrentLimitsAdder limitsAdder = danglingLine[0].newCurrentLimits()\n+                    .setPermanentLimit(permanentLimit[0]);\n+            temporaryLimits\n+                    .forEach((acceptableDuration, tl) -> limitsAdder.beginTemporaryLimit()\n+                    .setAcceptableDuration(acceptableDuration)\n+                    .setName(tl.name)\n+                    .setValue(tl.value)\n+                    .setFictitious(tl.fictitious)\n+                    .endTemporaryLimit());\n+            limitsAdder.add();\n+        }\n     }\n \n-    @Override\n-    protected void readSubElements(DanglingLine dl, NetworkXmlReaderContext context) throws XMLStreamException {\n-        readUntilEndRootElement(context.getReader(), () -> {\n-            if (\"currentLimits\".equals(context.getReader().getLocalName())) {\n-                readCurrentLimits(null, dl::newCurrentLimits, context.getReader());\n-            } else {\n-                super.readSubElements(dl, context);\n+    private DanglingLine readGeneration(DanglingLineAdder adder, XMLStreamReader reader, NetworkXmlReaderContext context) throws XMLStreamException {\n+        double minP = XmlUtil.readOptionalDoubleAttribute(reader, \"minP\");\n+        double maxP = XmlUtil.readOptionalDoubleAttribute(reader, \"maxP\");\n+        boolean voltageRegulationOn = XmlUtil.readBoolAttribute(reader, \"voltageRegulationOn\");\n+        double targetP = XmlUtil.readOptionalDoubleAttribute(reader, \"targetP\");\n+        double targetV = XmlUtil.readOptionalDoubleAttribute(reader, \"targetV\");\n+        double targetQ = XmlUtil.readOptionalDoubleAttribute(reader, \"targetQ\");\n+        adder.newGeneration()\n+                .setMinP(minP)\n+                .setMaxP(maxP)\n+                .setVoltageRegulationOn(voltageRegulationOn)\n+                .setTargetP(targetP)\n+                .setTargetV(targetV)\n+                .setTargetQ(targetQ)\n+                .add();\n+        DanglingLine danglingLine = adder.add();\n+        XmlUtil.readUntilEndElement(GENERATION, reader, () -> {\n+            switch (context.getReader().getLocalName()) {\n+                case \"reactiveCapabilityCurve\":\n+                case \"minMaxReactiveLimits\":\n+                    ReactiveLimitsXml.INSTANCE.read(danglingLine.getGeneration(), context);\n+                    break;\n+                default:\n+                    throw new PowsyblException(\"Unknown element name <\" + context.getReader().getLocalName() + \"> in <\" + danglingLine.getId() + \".generation>\");\n             }\n         });\n+        return danglingLine;\n+    }\n+\n+    class TemporaryLimitXml {\n+        private final String name;\n+        private final double value;\n+        private final boolean fictitious;\n+\n+        TemporaryLimitXml(String name, double value, boolean fictitious) {\n+            this.name = name;\n+            this.value = value;\n+            this.fictitious = fictitious;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2ODA0NQ=="}, "originalCommit": {"oid": "fcab7d06b95af527efa738b53e993174e69a08d9"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc0OTAyMg==", "bodyText": "Do you prefer using attributes in danglingline like for threewindingstransformers?", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r455749022", "createdAt": "2020-07-16T12:29:54Z", "author": {"login": "miovd"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/DanglingLineXml.java", "diffHunk": "@@ -70,26 +97,106 @@ protected DanglingLine readRootElementAttributes(DanglingLineAdder adder, Networ\n         double b = XmlUtil.readDoubleAttribute(context.getReader(), \"b\");\n         String ucteXnodeCode = context.getReader().getAttributeValue(null, \"ucteXnodeCode\");\n         readNodeOrBus(adder, context);\n-        DanglingLine dl = adder.setP0(p0)\n+        adder.setP0(p0)\n                 .setQ0(q0)\n                 .setR(r)\n                 .setX(x)\n                 .setG(g)\n                 .setB(b)\n-                .setUcteXnodeCode(ucteXnodeCode)\n-                .add();\n-        readPQ(null, dl.getTerminal(), context.getReader());\n-        return dl;\n+                .setUcteXnodeCode(ucteXnodeCode);\n+        Map<String, String> properties = new HashMap<>();\n+        double p = XmlUtil.readOptionalDoubleAttribute(context.getReader(), \"p\");\n+        double q = XmlUtil.readOptionalDoubleAttribute(context.getReader(), \"q\");\n+        double[] permanentLimit = new double[1];\n+        permanentLimit[0] = Double.NaN;\n+        Map<Integer, TemporaryLimitXml> temporaryLimits = new HashMap<>();\n+        DanglingLine[] danglingLine = new DanglingLine[1];\n+        boolean[] hasGeneration = new boolean[1];\n+        readUntilEndRootElement(context.getReader(), () -> {\n+            switch (context.getReader().getLocalName()) {\n+                case \"property\":\n+                    String name = context.getReader().getAttributeValue(null, \"name\");\n+                    String value = context.getReader().getAttributeValue(null, \"value\");\n+                    properties.put(name, value);\n+                    break;\n+                case \"currentLimits\":\n+                    permanentLimit[0] = XmlUtil.readOptionalDoubleAttribute(context.getReader(), \"permanentLimit\");\n+                    XmlUtil.readUntilEndElement(\"currentLimits\", context.getReader(), () -> {\n+                        if (\"temporaryLimit\".equals(context.getReader().getLocalName())) {\n+                            String tlName = context.getReader().getAttributeValue(null, \"name\");\n+                            int acceptableDuration = XmlUtil.readOptionalIntegerAttribute(context.getReader(), \"acceptableDuration\", Integer.MAX_VALUE);\n+                            double tlValue = XmlUtil.readOptionalDoubleAttribute(context.getReader(), \"value\", Double.MAX_VALUE);\n+                            boolean fictitious = XmlUtil.readOptionalBoolAttribute(context.getReader(), \"fictitious\", false);\n+                            temporaryLimits.put(acceptableDuration, new TemporaryLimitXml(tlName, tlValue, fictitious));\n+                        }\n+                    });\n+                    break;\n+                case GENERATION:\n+                    IidmXmlUtil.assertMinimumVersion(ROOT_ELEMENT_NAME, GENERATION, IidmXmlUtil.ErrorMessage.NOT_NULL_NOT_SUPPORTED, IidmXmlVersion.V_1_3, context);\n+                    hasGeneration[0] = true;\n+                    danglingLine[0] = readGeneration(adder, context.getReader(), context);\n+                    break;\n+                default:\n+                    throw new PowsyblException(\"Unknown element name <\" + context.getReader().getLocalName() + \"> in <\" + id + \">\");\n+            }\n+        });\n+        if (!hasGeneration[0]) {\n+            danglingLine[0] = adder.add();\n+        }\n+        properties.forEach(danglingLine[0]::setProperty);\n+        danglingLine[0].getTerminal().setP(p).setQ(q);\n+        if (!Double.isNaN(permanentLimit[0]) || !temporaryLimits.isEmpty()) {\n+            CurrentLimitsAdder limitsAdder = danglingLine[0].newCurrentLimits()\n+                    .setPermanentLimit(permanentLimit[0]);\n+            temporaryLimits\n+                    .forEach((acceptableDuration, tl) -> limitsAdder.beginTemporaryLimit()\n+                    .setAcceptableDuration(acceptableDuration)\n+                    .setName(tl.name)\n+                    .setValue(tl.value)\n+                    .setFictitious(tl.fictitious)\n+                    .endTemporaryLimit());\n+            limitsAdder.add();\n+        }\n     }\n \n-    @Override\n-    protected void readSubElements(DanglingLine dl, NetworkXmlReaderContext context) throws XMLStreamException {\n-        readUntilEndRootElement(context.getReader(), () -> {\n-            if (\"currentLimits\".equals(context.getReader().getLocalName())) {\n-                readCurrentLimits(null, dl::newCurrentLimits, context.getReader());\n-            } else {\n-                super.readSubElements(dl, context);\n+    private DanglingLine readGeneration(DanglingLineAdder adder, XMLStreamReader reader, NetworkXmlReaderContext context) throws XMLStreamException {\n+        double minP = XmlUtil.readOptionalDoubleAttribute(reader, \"minP\");\n+        double maxP = XmlUtil.readOptionalDoubleAttribute(reader, \"maxP\");\n+        boolean voltageRegulationOn = XmlUtil.readBoolAttribute(reader, \"voltageRegulationOn\");\n+        double targetP = XmlUtil.readOptionalDoubleAttribute(reader, \"targetP\");\n+        double targetV = XmlUtil.readOptionalDoubleAttribute(reader, \"targetV\");\n+        double targetQ = XmlUtil.readOptionalDoubleAttribute(reader, \"targetQ\");\n+        adder.newGeneration()\n+                .setMinP(minP)\n+                .setMaxP(maxP)\n+                .setVoltageRegulationOn(voltageRegulationOn)\n+                .setTargetP(targetP)\n+                .setTargetV(targetV)\n+                .setTargetQ(targetQ)\n+                .add();\n+        DanglingLine danglingLine = adder.add();\n+        XmlUtil.readUntilEndElement(GENERATION, reader, () -> {\n+            switch (context.getReader().getLocalName()) {\n+                case \"reactiveCapabilityCurve\":\n+                case \"minMaxReactiveLimits\":\n+                    ReactiveLimitsXml.INSTANCE.read(danglingLine.getGeneration(), context);\n+                    break;\n+                default:\n+                    throw new PowsyblException(\"Unknown element name <\" + context.getReader().getLocalName() + \"> in <\" + danglingLine.getId() + \".generation>\");\n             }\n         });\n+        return danglingLine;\n+    }\n+\n+    class TemporaryLimitXml {\n+        private final String name;\n+        private final double value;\n+        private final boolean fictitious;\n+\n+        TemporaryLimitXml(String name, double value, boolean fictitious) {\n+            this.name = name;\n+            this.value = value;\n+            this.fictitious = fictitious;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2ODA0NQ=="}, "originalCommit": {"oid": "fcab7d06b95af527efa738b53e993174e69a08d9"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjI2MzQ2OnYy", "diffSide": "RIGHT", "path": "ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteExporter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTo1Nzo0NVrOGyj2-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTo1Nzo0NVrOGyj2-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2OTQ5Nw==", "bodyText": "Should we export the reactive limits even if the voltage regulation is OFF?", "url": "https://github.com/powsybl/powsybl-core/pull/1357#discussion_r455669497", "createdAt": "2020-07-16T09:57:45Z", "author": {"login": "mathbagu"}, "path": "ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteExporter.java", "diffHunk": "@@ -282,6 +282,29 @@ private static void convertXNode(UcteNetwork ucteNetwork, DanglingLine danglingL\n         UcteNode ucteNode = convertXNode(ucteNetwork, xnodeCode, geographicalName, ucteNodeStatus);\n         ucteNode.setActiveLoad((float) danglingLine.getP0());\n         ucteNode.setReactiveLoad((float) danglingLine.getQ0());\n+        double generatorTargetP = danglingLine.getGeneration().getTargetP();\n+        ucteNode.setActivePowerGeneration(Double.isNaN(generatorTargetP) ? 0 : (float) -generatorTargetP);\n+        double generatorTargetQ = danglingLine.getGeneration().getTargetQ();\n+        ucteNode.setReactivePowerGeneration(Double.isNaN(generatorTargetQ) ? 0 : (float) -generatorTargetQ);\n+        if (danglingLine.getGeneration().isVoltageRegulationOn()) {\n+            ucteNode.setVoltageReference((float) danglingLine.getGeneration().getTargetV());\n+            float minP = (float) danglingLine.getGeneration().getMinP();\n+            float maxP = (float) danglingLine.getGeneration().getMaxP();\n+            float minQ = (float) danglingLine.getGeneration().getReactiveLimits().getMinQ(danglingLine.getGeneration().getTargetP());\n+            float maxQ = (float) danglingLine.getGeneration().getReactiveLimits().getMaxQ(danglingLine.getGeneration().getTargetP());\n+            if (minP != -DEFAULT_POWER_LIMIT) {\n+                ucteNode.setMinimumPermissibleActivePowerGeneration(-minP);\n+            }\n+            if (maxP != DEFAULT_POWER_LIMIT) {\n+                ucteNode.setMaximumPermissibleActivePowerGeneration(-maxP);\n+            }\n+            if (minQ != -DEFAULT_POWER_LIMIT) {\n+                ucteNode.setMinimumPermissibleReactivePowerGeneration(-minQ);\n+            }\n+            if (maxQ != DEFAULT_POWER_LIMIT) {\n+                ucteNode.setMaximumPermissibleReactivePowerGeneration(-maxQ);\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcab7d06b95af527efa738b53e993174e69a08d9"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 14, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}