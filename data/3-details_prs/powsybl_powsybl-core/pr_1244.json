{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNjU0NzM4", "number": 1244, "title": "Support XIIDM serialization/deserialization with new shunt API", "bodyText": "Please check if the PR fulfills these requirements (please use '[x]' to check the checkboxes, or submit the PR and then click the checkboxes)\n\n The commit message follows our guidelines\n Tests for the changes have been added (for bug fixes / features)\n Docs have been added / updated (for bug fixes / features)\n\nDoes this PR already have an issue describing the problem ?\nNo\nWhat kind of change does this PR introduce? (Bug fix, feature, docs update, ...)\nSupport new shunt API IIDM-XML serialization\nWhat is the current behavior? (You can also link to an open issue here)\nOnly linear shunts IIDM-XML serialization is supported\nWhat is the new behavior (if this is a feature change)?\nLinear and non linear shunts IIDM-XML serialization should be supported\nDoes this PR introduce a breaking change or deprecate an API? If yes, check the following:\n\n The Breaking Change or Deprecated label has been added\n The migration guide has been updated in the github wiki (What changes might users need to make in their application due to this PR?)\n\nOther information:\nI am not sure this is how we want to do things...", "createdAt": "2020-03-25T15:25:25Z", "url": "https://github.com/powsybl/powsybl-core/pull/1244", "merged": true, "mergeCommit": {"oid": "aec13a376906836be8cdc7c4668ee28436375fa0"}, "closed": true, "closedAt": "2020-04-08T07:42:14Z", "author": {"login": "MioRtia"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRctHggBqjMxNjg0MjA5ODI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVivxxgH2gAyMzkzNjU0NzM4OjVmNWMzNTA4ZDYzZWE2M2YwMTg5ZTkwMDQ1ZWNiM2FjZDkwZGIxZGE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a81b4ba41de0d70ef82d16f52e61cbe050da71e7", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/a81b4ba41de0d70ef82d16f52e61cbe050da71e7", "committedDate": "2020-03-25T15:00:21Z", "message": "correct tests\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}, "afterCommit": {"oid": "38a7b203caa52ef9378678ba8fcaf1c12581c6fe", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/38a7b203caa52ef9378678ba8fcaf1c12581c6fe", "committedDate": "2020-03-26T14:09:03Z", "message": "add basic test for non linear shunts\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNjIwNzU3", "url": "https://github.com/powsybl/powsybl-core/pull/1244#pullrequestreview-383620757", "createdAt": "2020-03-30T08:12:34Z", "commit": {"oid": "8e99d3eee05d614ed6e3ed9e40212eebe5297be3"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoxMjozNVrOF9eP5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoxNToxOFrOF9eWew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwMzA0NA==", "bodyText": "I think I wouldn't serialize the type: it's a redundant information with the model you will have to check. As you do not use the same XML element name, it's not necessary.", "url": "https://github.com/powsybl/powsybl-core/pull/1244#discussion_r400003044", "createdAt": "2020-03-30T08:12:35Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/ShuntXml.java", "diffHunk": "@@ -34,13 +40,30 @@ protected boolean hasSubElements(ShuntCompensator sc) {\n         return sc != sc.getRegulatingTerminal().getConnectable();\n     }\n \n+    @Override\n+    protected boolean hasSubElements(ShuntCompensator sc, NetworkXmlWriterContext context) {\n+        return context.getVersion().compareTo(IidmXmlVersion.V_1_2) >= 0 || hasSubElements(sc);\n+    }\n+\n     @Override\n     protected void writeRootElementAttributes(ShuntCompensator sc, VoltageLevel vl, NetworkXmlWriterContext context) throws XMLStreamException {\n-        if (ShuntCompensatorModelType.NON_LINEAR.equals(sc.getModelType())) {\n-            throw new PowsyblException(\"Non linear shunt not yet supported\");\n-        }\n-        XmlUtil.writeDouble(\"bPerSection\", sc.getModel(ShuntCompensatorLinearModel.class).getbPerSection(), context.getWriter());\n-        context.getWriter().writeAttribute(\"maximumSectionCount\", Integer.toString(sc.getMaximumSectionCount()));\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(ShuntCompensatorModelType.NON_LINEAR.equals(sc.getModelType()), ROOT_ELEMENT_NAME,\n+                NON_LINEAR_MODEL, IidmXmlUtil.ErrorMessage.NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n+        IidmXmlUtil.runUntilMaximumVersion(IidmXmlVersion.V_1_1, context, () -> {\n+            try {\n+                XmlUtil.writeDouble(B_PER_SECTION, sc.getModel(ShuntCompensatorLinearModel.class).getbPerSection(), context.getWriter());\n+                context.getWriter().writeAttribute(MAXIMUM_SECTION_COUNT, Integer.toString(sc.getMaximumSectionCount()));\n+            } catch (XMLStreamException e) {\n+                throw new UncheckedXmlStreamException(e);\n+            }\n+        });\n+        IidmXmlUtil.runFromMinimumVersion(IidmXmlVersion.V_1_2, context, () -> {\n+            try {\n+                context.getWriter().writeAttribute(MODEL, sc.getModelType().name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e99d3eee05d614ed6e3ed9e40212eebe5297be3"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwMzUzNA==", "bodyText": "To make the code simpler, maybe you should move the try catch in the writeModel method.", "url": "https://github.com/powsybl/powsybl-core/pull/1244#discussion_r400003534", "createdAt": "2020-03-30T08:13:21Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/ShuntXml.java", "diffHunk": "@@ -54,35 +77,84 @@ protected void writeRootElementAttributes(ShuntCompensator sc, VoltageLevel vl,\n \n     @Override\n     protected void writeSubElements(ShuntCompensator sc, VoltageLevel vl, NetworkXmlWriterContext context) throws XMLStreamException {\n+        IidmXmlUtil.runFromMinimumVersion(IidmXmlVersion.V_1_2, context, () -> {\n+            try {\n+                writeModel(sc, context);\n+            } catch (XMLStreamException e) {\n+                throw new UncheckedXmlStreamException(e);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e99d3eee05d614ed6e3ed9e40212eebe5297be3"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwNDczMQ==", "bodyText": "Is it a bit strange? Maybe we should create a default Linear Model, like we did for ReactiveLimits? And allow to change the model of a shunt after its creation.", "url": "https://github.com/powsybl/powsybl-core/pull/1244#discussion_r400004731", "createdAt": "2020-03-30T08:15:18Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/ShuntXml.java", "diffHunk": "@@ -54,35 +77,84 @@ protected void writeRootElementAttributes(ShuntCompensator sc, VoltageLevel vl,\n \n     @Override\n     protected void writeSubElements(ShuntCompensator sc, VoltageLevel vl, NetworkXmlWriterContext context) throws XMLStreamException {\n+        IidmXmlUtil.runFromMinimumVersion(IidmXmlVersion.V_1_2, context, () -> {\n+            try {\n+                writeModel(sc, context);\n+            } catch (XMLStreamException e) {\n+                throw new UncheckedXmlStreamException(e);\n+            }\n+        });\n         if (sc != sc.getRegulatingTerminal().getConnectable()) {\n             IidmXmlUtil.assertMinimumVersion(ROOT_ELEMENT_NAME, REGULATING_TERMINAL, IidmXmlUtil.ErrorMessage.NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n             TerminalRefXml.writeTerminalRef(sc.getRegulatingTerminal(), context, REGULATING_TERMINAL);\n         }\n     }\n \n+    private static void writeModel(ShuntCompensator sc, NetworkXmlWriterContext context) throws XMLStreamException {\n+        if (ShuntCompensatorModelType.LINEAR.equals(sc.getModelType())) {\n+            context.getWriter().writeEmptyElement(context.getVersion().getNamespaceURI(), LINEAR_MODEL);\n+            XmlUtil.writeDouble(B_PER_SECTION, sc.getModel(ShuntCompensatorLinearModel.class).getbPerSection(), context.getWriter());\n+            XmlUtil.writeDouble(\"gPerSection\", sc.getModel(ShuntCompensatorLinearModel.class).getgPerSection(), context.getWriter());\n+            context.getWriter().writeAttribute(MAXIMUM_SECTION_COUNT, Integer.toString(sc.getMaximumSectionCount()));\n+        } else if (ShuntCompensatorModelType.NON_LINEAR.equals(sc.getModelType())) {\n+            context.getWriter().writeStartElement(context.getVersion().getNamespaceURI(), NON_LINEAR_MODEL);\n+            sc.getModel(ShuntCompensatorNonLinearModel.class).getSections().forEach((sectionNum, section) -> {\n+                try {\n+                    context.getWriter().writeEmptyElement(context.getVersion().getNamespaceURI(), \"section\");\n+                    context.getWriter().writeAttribute(\"num\", Integer.toString(sectionNum));\n+                    XmlUtil.writeDouble(\"b\", section.getB(), context.getWriter());\n+                    XmlUtil.writeDouble(\"g\", section.getG(), context.getWriter());\n+                } catch (XMLStreamException e) {\n+                    throw new UncheckedXmlStreamException(e);\n+                }\n+            });\n+            context.getWriter().writeEndElement();\n+        } else {\n+            throw new PowsyblException(String.format(\"Unexpected shunt model type for %s: %s\", sc.getId(), sc.getModelType().name()));\n+        }\n+    }\n+\n     @Override\n     protected ShuntCompensatorAdder createAdder(VoltageLevel vl) {\n         return vl.newShuntCompensator();\n     }\n \n     @Override\n     protected ShuntCompensator readRootElementAttributes(ShuntCompensatorAdder adder, NetworkXmlReaderContext context) {\n-        double bPerSection = XmlUtil.readDoubleAttribute(context.getReader(), \"bPerSection\");\n-        int maximumSectionCount = XmlUtil.readIntAttribute(context.getReader(), \"maximumSectionCount\");\n         int currentSectionCount = XmlUtil.readIntAttribute(context.getReader(), \"currentSectionCount\");\n+        IidmXmlUtil.runUntilMaximumVersion(IidmXmlVersion.V_1_1, context, () -> {\n+            double bPerSection = XmlUtil.readDoubleAttribute(context.getReader(), B_PER_SECTION);\n+            int maximumSectionCount = XmlUtil.readIntAttribute(context.getReader(), MAXIMUM_SECTION_COUNT);\n+            adder.newLinearModel()\n+                    .setMaximumSectionCount(maximumSectionCount)\n+                    .setbPerSection(bPerSection)\n+                    .add();\n+        });\n         IidmXmlUtil.runFromMinimumVersion(IidmXmlVersion.V_1_2, context, () -> {\n             boolean voltageRegulatorOn = XmlUtil.readBoolAttribute(context.getReader(), \"voltageRegulatorOn\");\n             double targetV = XmlUtil.readOptionalDoubleAttribute(context.getReader(), \"targetV\");\n             double targetDeadband = XmlUtil.readOptionalDoubleAttribute(context.getReader(), \"targetDeadband\");\n             adder.setVoltageRegulatorOn(voltageRegulatorOn)\n                     .setTargetV(targetV)\n                     .setTargetDeadband(targetDeadband);\n+            ShuntCompensatorModelType modelType = ShuntCompensatorModelType.valueOf(context.getReader().getAttributeValue(null, MODEL));\n+            if (ShuntCompensatorModelType.LINEAR.equals(modelType)) { // default value for linear shunt (always overwritten)\n+                adder.newLinearModel()\n+                        .setMaximumSectionCount(currentSectionCount + 1) // maximumSectionCount must be > 0\n+                        .setbPerSection(Double.MIN_VALUE)\n+                        .add();\n+            } else if (ShuntCompensatorModelType.NON_LINEAR.equals(modelType)) { // default value for non linear shunt (always overwritten)\n+                adder.newNonLinearModel()\n+                        .beginSection()\n+                            .setSectionNum(currentSectionCount)\n+                            .setB(Double.MIN_VALUE)\n+                        .endSection()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e99d3eee05d614ed6e3ed9e40212eebe5297be3"}, "originalPosition": 133}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4ODQ1NTYx", "url": "https://github.com/powsybl/powsybl-core/pull/1244#pullrequestreview-388845561", "createdAt": "2020-04-07T07:19:49Z", "commit": {"oid": "608d6a339c0375845ef47e9a710666b25566a2f6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzoxOTo0OVrOGB2IUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODoyNzoyNlrOGB4m9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4ODYyNg==", "bodyText": "General advice: sometimes a simple for-loop is fine :)", "url": "https://github.com/powsybl/powsybl-core/pull/1244#discussion_r404588626", "createdAt": "2020-04-07T07:19:49Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/NonLinearShuntXml.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.xml;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.exceptions.UncheckedXmlStreamException;\n+import com.powsybl.commons.xml.XmlUtil;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.xml.util.IidmXmlUtil;\n+\n+import javax.xml.stream.XMLStreamException;\n+import java.util.*;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public class NonLinearShuntXml extends AbstractConnectableXml<ShuntCompensator, ShuntCompensatorAdder, VoltageLevel> {\n+\n+    static final NonLinearShuntXml INSTANCE = new NonLinearShuntXml();\n+\n+    static final String ROOT_ELEMENT_NAME = \"nonLinearShunt\";\n+\n+    @Override\n+    protected String getRootElementName() {\n+        return ROOT_ELEMENT_NAME;\n+    }\n+\n+    @Override\n+    protected boolean hasSubElements(ShuntCompensator sc) {\n+        return true;\n+    }\n+\n+    @Override\n+    protected void writeRootElementAttributes(ShuntCompensator sc, VoltageLevel parent, NetworkXmlWriterContext context) throws XMLStreamException {\n+        context.getWriter().writeAttribute(\"currentSectionCount\", Integer.toString(sc.getCurrentSectionCount()));\n+        context.getWriter().writeAttribute(\"voltageRegulatorOn\", Boolean.toString(sc.isVoltageRegulatorOn()));\n+        XmlUtil.writeDouble(\"targetV\", sc.getTargetV(), context.getWriter());\n+        XmlUtil.writeDouble(\"targetDeadband\", sc.getTargetDeadband(), context.getWriter());\n+        writeNodeOrBus(null, sc.getTerminal(), context);\n+        writePQ(null, sc.getTerminal(), context.getWriter());\n+    }\n+\n+    @Override\n+    protected void writeSubElements(ShuntCompensator sc, VoltageLevel vl, NetworkXmlWriterContext context) throws XMLStreamException {\n+        writeSections(sc, context);\n+        if (sc != sc.getRegulatingTerminal().getConnectable()) {\n+            TerminalRefXml.writeTerminalRef(sc.getRegulatingTerminal(), context, \"regulatingTerminal\");\n+        }\n+    }\n+\n+    private static void writeSections(ShuntCompensator sc, NetworkXmlWriterContext context) {\n+        sc.getModel(ShuntCompensatorNonLinearModel.class).getSections().forEach((sectionNum, section) -> {\n+            try {\n+                context.getWriter().writeEmptyElement(context.getVersion().getNamespaceURI(), \"section\");\n+                context.getWriter().writeAttribute(\"num\", Integer.toString(sectionNum));\n+                XmlUtil.writeDouble(\"b\", section.getB(), context.getWriter());\n+                XmlUtil.writeDouble(\"g\", section.getG(), context.getWriter());\n+            } catch (XMLStreamException e) {\n+                throw new UncheckedXmlStreamException(e);\n+            }\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608d6a339c0375845ef47e9a710666b25566a2f6"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyNzUyNQ==", "bodyText": "Is there a bug there (and elsewhere)? If an identifiable has properties, then he has sub elements.", "url": "https://github.com/powsybl/powsybl-core/pull/1244#discussion_r404627525", "createdAt": "2020-04-07T08:24:48Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/ShuntXml.java", "diffHunk": "@@ -22,67 +22,53 @@\n \n     static final String ROOT_ELEMENT_NAME = \"shunt\";\n \n-    private static final String REGULATING_TERMINAL = \"regulatingTerminal\";\n-\n     @Override\n     protected String getRootElementName() {\n         return ROOT_ELEMENT_NAME;\n     }\n \n     @Override\n     protected boolean hasSubElements(ShuntCompensator sc) {\n-        return sc != sc.getRegulatingTerminal().getConnectable();\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608d6a339c0375845ef47e9a710666b25566a2f6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyNzk3NQ==", "bodyText": "Everytime we writeSubElements, we should write properties. I think we make this bug everywhere?", "url": "https://github.com/powsybl/powsybl-core/pull/1244#discussion_r404627975", "createdAt": "2020-04-07T08:25:28Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/ShuntXml.java", "diffHunk": "@@ -22,67 +22,53 @@\n \n     static final String ROOT_ELEMENT_NAME = \"shunt\";\n \n-    private static final String REGULATING_TERMINAL = \"regulatingTerminal\";\n-\n     @Override\n     protected String getRootElementName() {\n         return ROOT_ELEMENT_NAME;\n     }\n \n     @Override\n     protected boolean hasSubElements(ShuntCompensator sc) {\n-        return sc != sc.getRegulatingTerminal().getConnectable();\n+        return false;\n     }\n \n     @Override\n     protected void writeRootElementAttributes(ShuntCompensator sc, VoltageLevel vl, NetworkXmlWriterContext context) throws XMLStreamException {\n         if (ShuntCompensatorModelType.NON_LINEAR.equals(sc.getModelType())) {\n-            throw new PowsyblException(\"Non linear shunt not yet supported\");\n+            throw new PowsyblException(\"Non linear shunts are not supported for IIDM-XML version \" + context.getVersion().toString(\".\")\n+                    + \". IIDM-XML version should be >= 1.2\");\n         }\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(sc.isVoltageRegulatorOn(), ROOT_ELEMENT_NAME, \"voltageRegulatorOn\",\n+                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(!Double.isNaN(sc.getTargetV()), ROOT_ELEMENT_NAME, \"targetV\",\n+                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(!Double.isNaN(sc.getTargetDeadband()), ROOT_ELEMENT_NAME, \"targetDeadband\",\n+                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(sc.getRegulatingTerminal().getConnectable() != sc, ROOT_ELEMENT_NAME, \"regulatingTerminal\",\n+                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n         XmlUtil.writeDouble(\"bPerSection\", sc.getModel(ShuntCompensatorLinearModel.class).getbPerSection(), context.getWriter());\n         context.getWriter().writeAttribute(\"maximumSectionCount\", Integer.toString(sc.getMaximumSectionCount()));\n         context.getWriter().writeAttribute(\"currentSectionCount\", Integer.toString(sc.getCurrentSectionCount()));\n-        IidmXmlUtil.writeBooleanAttributeFromMinimumVersion(ROOT_ELEMENT_NAME, \"voltageRegulatorOn\", sc.isVoltageRegulatorOn(), false,\n-                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n-        IidmXmlUtil.writeDoubleAttributeFromMinimumVersion(ROOT_ELEMENT_NAME, \"targetV\", sc.getTargetV(),\n-                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n-        IidmXmlUtil.writeDoubleAttributeFromMinimumVersion(ROOT_ELEMENT_NAME, \"targetDeadband\",\n-                sc.getTargetDeadband(), IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n         writeNodeOrBus(null, sc.getTerminal(), context);\n         writePQ(null, sc.getTerminal(), context.getWriter());\n     }\n \n-    @Override\n-    protected void writeSubElements(ShuntCompensator sc, VoltageLevel vl, NetworkXmlWriterContext context) throws XMLStreamException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608d6a339c0375845ef47e9a710666b25566a2f6"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyODMyMQ==", "bodyText": "in IIDM v1.2, we should not use this class anymore?", "url": "https://github.com/powsybl/powsybl-core/pull/1244#discussion_r404628321", "createdAt": "2020-04-07T08:26:01Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/ShuntXml.java", "diffHunk": "@@ -22,67 +22,53 @@\n \n     static final String ROOT_ELEMENT_NAME = \"shunt\";\n \n-    private static final String REGULATING_TERMINAL = \"regulatingTerminal\";\n-\n     @Override\n     protected String getRootElementName() {\n         return ROOT_ELEMENT_NAME;\n     }\n \n     @Override\n     protected boolean hasSubElements(ShuntCompensator sc) {\n-        return sc != sc.getRegulatingTerminal().getConnectable();\n+        return false;\n     }\n \n     @Override\n     protected void writeRootElementAttributes(ShuntCompensator sc, VoltageLevel vl, NetworkXmlWriterContext context) throws XMLStreamException {\n         if (ShuntCompensatorModelType.NON_LINEAR.equals(sc.getModelType())) {\n-            throw new PowsyblException(\"Non linear shunt not yet supported\");\n+            throw new PowsyblException(\"Non linear shunts are not supported for IIDM-XML version \" + context.getVersion().toString(\".\")\n+                    + \". IIDM-XML version should be >= 1.2\");\n         }\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(sc.isVoltageRegulatorOn(), ROOT_ELEMENT_NAME, \"voltageRegulatorOn\",\n+                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(!Double.isNaN(sc.getTargetV()), ROOT_ELEMENT_NAME, \"targetV\",\n+                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(!Double.isNaN(sc.getTargetDeadband()), ROOT_ELEMENT_NAME, \"targetDeadband\",\n+                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(sc.getRegulatingTerminal().getConnectable() != sc, ROOT_ELEMENT_NAME, \"regulatingTerminal\",\n+                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608d6a339c0375845ef47e9a710666b25566a2f6"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyOTIzNw==", "bodyText": "As this class doesn't exist in Java, we should remove it from the XSD. What do you think?", "url": "https://github.com/powsybl/powsybl-core/pull/1244#discussion_r404629237", "createdAt": "2020-04-07T08:27:26Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/resources/xsd/iidm_V1_2.xsd", "diffHunk": "@@ -260,21 +261,43 @@\n             </xs:extension>\n         </xs:complexContent>\n     </xs:complexType>\n-    <xs:complexType name=\"ShuntCompensator\">\n+    <xs:complexType name=\"AbstractShuntCompensator\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608d6a339c0375845ef47e9a710666b25566a2f6"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93265f586c39b3494cadc4027dcc460be1d474a7", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/93265f586c39b3494cadc4027dcc460be1d474a7", "committedDate": "2020-04-07T15:29:11Z", "message": "First try: write/read new shunts\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\n\ncorrection\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\n\ncorrection non linear shunt\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\n\ncorrect message error\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cf43ac98dc0a5709060070a7688f19f79bc6b23", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/4cf43ac98dc0a5709060070a7688f19f79bc6b23", "committedDate": "2020-04-07T15:29:11Z", "message": "correct tests\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da26741e45b058b231e0c7d26728cf8118fa6923", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/da26741e45b058b231e0c7d26728cf8118fa6923", "committedDate": "2020-04-07T15:29:11Z", "message": "add basic test for non linear shunts\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b47690c07bce56123912d621b47b075594f20b73", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/b47690c07bce56123912d621b47b075594f20b73", "committedDate": "2020-04-07T15:29:11Z", "message": "add tests for faulty shunt files\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bed1cb2535acd802a8e3286648278d30448b68f", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/5bed1cb2535acd802a8e3286648278d30448b68f", "committedDate": "2020-04-07T15:29:11Z", "message": "writeModel() throws uncheckedxmlstreamexception\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae629fb096868196e9b8985762090a80fd746c2c", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/ae629fb096868196e9b8985762090a80fd746c2c", "committedDate": "2020-04-07T15:29:11Z", "message": "Second proposition for shunt serialisation\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad1f51ee3631b959da18e63843f1cb7b927cccc3", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/ad1f51ee3631b959da18e63843f1cb7b927cccc3", "committedDate": "2020-04-07T15:29:11Z", "message": "correct tests\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6438bc2396ee67764b1523c07f0e20c38574075a", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/6438bc2396ee67764b1523c07f0e20c38574075a", "committedDate": "2020-04-07T15:29:11Z", "message": "Third proposition for shunt XIIDM serializations\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "485c0b2d1a801b95e414082af07d244af6d5f07c", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/485c0b2d1a801b95e414082af07d244af6d5f07c", "committedDate": "2020-04-07T15:29:11Z", "message": "correct tests\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe5f242b9f117d911214419b5c10cec90dd97f47", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/fe5f242b9f117d911214419b5c10cec90dd97f47", "committedDate": "2020-04-07T15:29:11Z", "message": "apply reviewer comments\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "608d6a339c0375845ef47e9a710666b25566a2f6", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/608d6a339c0375845ef47e9a710666b25566a2f6", "committedDate": "2020-04-03T08:33:06Z", "message": "correct tests\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}, "afterCommit": {"oid": "fe5f242b9f117d911214419b5c10cec90dd97f47", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/fe5f242b9f117d911214419b5c10cec90dd97f47", "committedDate": "2020-04-07T15:29:11Z", "message": "apply reviewer comments\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NzE1NzAy", "url": "https://github.com/powsybl/powsybl-core/pull/1244#pullrequestreview-389715702", "createdAt": "2020-04-08T07:27:20Z", "commit": {"oid": "fe5f242b9f117d911214419b5c10cec90dd97f47"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f5c3508d63ea63f0189e90045ecb3acd90db1da", "author": {"user": {"login": "mathbagu", "name": "Mathieu BAGUE"}}, "url": "https://github.com/powsybl/powsybl-core/commit/5f5c3508d63ea63f0189e90045ecb3acd90db1da", "committedDate": "2020-04-08T07:27:27Z", "message": "Merge branch 'master' into new_shunt_xml"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4494, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}