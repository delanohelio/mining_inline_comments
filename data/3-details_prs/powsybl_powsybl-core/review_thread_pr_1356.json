{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MDc0OTg5", "number": 1356, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNTozMDo0N1rOEHXpwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNToyOToxMlrOEHn2kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTYzMDA4OnYy", "diffSide": "RIGHT", "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNTozMDo0N1rOGmsqOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOToxNToyMFrOGngkyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzMDc3OQ==", "bodyText": "Have you tried what you get in the case of a *.raw|RAW file but the content is not a raw file?", "url": "https://github.com/powsybl/powsybl-core/pull/1356#discussion_r443230779", "createdAt": "2020-06-21T15:30:47Z", "author": {"login": "geofjamg"}, "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -65,15 +66,31 @@ public String getComment() {\n         return \"PSS/E Format to IIDM converter\";\n     }\n \n+    private String findExtension(ReadOnlyDataSource dataSource, boolean throwException) throws IOException {\n+        for (String ext : EXTS) {\n+            if (dataSource.exists(null, ext)) {\n+                return ext;\n+            }\n+        }\n+        if (throwException) {\n+            throw new PsseException(\"File \" + dataSource.getBaseName()\n+                    + \".\" + Joiner.on(\"|\").join(EXTS) + \" not found\");\n+        }\n+        return null;\n+    }\n+\n     @Override\n     public boolean exists(ReadOnlyDataSource dataSource) {\n         try {\n-            if (dataSource.exists(null, EXT)) {\n-                try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, EXT)))) {\n-                    String titleLine = reader.readLine();\n-                    if (titleLine != null) {\n-                        return titleLine.length() >= 38\n-                                && titleLine.charAt(37) == '/';\n+            String ext = findExtension(dataSource, false);\n+            if (ext != null) {\n+                try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, ext)))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20abc9339d6273467d5617aca9786b65c7dc61d5"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzMTA5NA==", "bodyText": "Ideally we should had unit tests to cover the different cases (real raw or RAW, fake one)", "url": "https://github.com/powsybl/powsybl-core/pull/1356#discussion_r443231094", "createdAt": "2020-06-21T15:34:37Z", "author": {"login": "geofjamg"}, "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -65,15 +66,31 @@ public String getComment() {\n         return \"PSS/E Format to IIDM converter\";\n     }\n \n+    private String findExtension(ReadOnlyDataSource dataSource, boolean throwException) throws IOException {\n+        for (String ext : EXTS) {\n+            if (dataSource.exists(null, ext)) {\n+                return ext;\n+            }\n+        }\n+        if (throwException) {\n+            throw new PsseException(\"File \" + dataSource.getBaseName()\n+                    + \".\" + Joiner.on(\"|\").join(EXTS) + \" not found\");\n+        }\n+        return null;\n+    }\n+\n     @Override\n     public boolean exists(ReadOnlyDataSource dataSource) {\n         try {\n-            if (dataSource.exists(null, EXT)) {\n-                try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, EXT)))) {\n-                    String titleLine = reader.readLine();\n-                    if (titleLine != null) {\n-                        return titleLine.length() >= 38\n-                                && titleLine.charAt(37) == '/';\n+            String ext = findExtension(dataSource, false);\n+            if (ext != null) {\n+                try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, ext)))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzMDc3OQ=="}, "originalCommit": {"oid": "20abc9339d6273467d5617aca9786b65c7dc61d5"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0MTI0MA==", "bodyText": "raw is a really common extension, used for instance in photography. I think it's a good idea to check if the file is valid or not.", "url": "https://github.com/powsybl/powsybl-core/pull/1356#discussion_r443641240", "createdAt": "2020-06-22T15:25:05Z", "author": {"login": "mathbagu"}, "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -65,15 +66,31 @@ public String getComment() {\n         return \"PSS/E Format to IIDM converter\";\n     }\n \n+    private String findExtension(ReadOnlyDataSource dataSource, boolean throwException) throws IOException {\n+        for (String ext : EXTS) {\n+            if (dataSource.exists(null, ext)) {\n+                return ext;\n+            }\n+        }\n+        if (throwException) {\n+            throw new PsseException(\"File \" + dataSource.getBaseName()\n+                    + \".\" + Joiner.on(\"|\").join(EXTS) + \" not found\");\n+        }\n+        return null;\n+    }\n+\n     @Override\n     public boolean exists(ReadOnlyDataSource dataSource) {\n         try {\n-            if (dataSource.exists(null, EXT)) {\n-                try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, EXT)))) {\n-                    String titleLine = reader.readLine();\n-                    if (titleLine != null) {\n-                        return titleLine.length() >= 38\n-                                && titleLine.charAt(37) == '/';\n+            String ext = findExtension(dataSource, false);\n+            if (ext != null) {\n+                try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, ext)))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzMDc3OQ=="}, "originalCommit": {"oid": "20abc9339d6273467d5617aca9786b65c7dc61d5"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwNTk4Mw==", "bodyText": "I have added a test for a better check of the header", "url": "https://github.com/powsybl/powsybl-core/pull/1356#discussion_r444005983", "createdAt": "2020-06-23T07:06:26Z", "author": {"login": "JB-H"}, "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -65,15 +66,31 @@ public String getComment() {\n         return \"PSS/E Format to IIDM converter\";\n     }\n \n+    private String findExtension(ReadOnlyDataSource dataSource, boolean throwException) throws IOException {\n+        for (String ext : EXTS) {\n+            if (dataSource.exists(null, ext)) {\n+                return ext;\n+            }\n+        }\n+        if (throwException) {\n+            throw new PsseException(\"File \" + dataSource.getBaseName()\n+                    + \".\" + Joiner.on(\"|\").join(EXTS) + \" not found\");\n+        }\n+        return null;\n+    }\n+\n     @Override\n     public boolean exists(ReadOnlyDataSource dataSource) {\n         try {\n-            if (dataSource.exists(null, EXT)) {\n-                try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, EXT)))) {\n-                    String titleLine = reader.readLine();\n-                    if (titleLine != null) {\n-                        return titleLine.length() >= 38\n-                                && titleLine.charAt(37) == '/';\n+            String ext = findExtension(dataSource, false);\n+            if (ext != null) {\n+                try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, ext)))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzMDc3OQ=="}, "originalCommit": {"oid": "20abc9339d6273467d5617aca9786b65c7dc61d5"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA4MTM1NQ==", "bodyText": "I added an additional unit test to cover @mathbagu use case so a \"fake\" .raw file.", "url": "https://github.com/powsybl/powsybl-core/pull/1356#discussion_r444081355", "createdAt": "2020-06-23T09:15:20Z", "author": {"login": "geofjamg"}, "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -65,15 +66,31 @@ public String getComment() {\n         return \"PSS/E Format to IIDM converter\";\n     }\n \n+    private String findExtension(ReadOnlyDataSource dataSource, boolean throwException) throws IOException {\n+        for (String ext : EXTS) {\n+            if (dataSource.exists(null, ext)) {\n+                return ext;\n+            }\n+        }\n+        if (throwException) {\n+            throw new PsseException(\"File \" + dataSource.getBaseName()\n+                    + \".\" + Joiner.on(\"|\").join(EXTS) + \" not found\");\n+        }\n+        return null;\n+    }\n+\n     @Override\n     public boolean exists(ReadOnlyDataSource dataSource) {\n         try {\n-            if (dataSource.exists(null, EXT)) {\n-                try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, EXT)))) {\n-                    String titleLine = reader.readLine();\n-                    if (titleLine != null) {\n-                        return titleLine.length() >= 38\n-                                && titleLine.charAt(37) == '/';\n+            String ext = findExtension(dataSource, false);\n+            if (ext != null) {\n+                try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, ext)))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzMDc3OQ=="}, "originalCommit": {"oid": "20abc9339d6273467d5617aca9786b65c7dc61d5"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDI1Njk0OnYy", "diffSide": "RIGHT", "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNToyMjo1N1rOGnFnnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzoxODowM1rOGncVSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYzOTcxMQ==", "bodyText": "Use String.join(\"|\", EXTS) instead of Joiner.on?", "url": "https://github.com/powsybl/powsybl-core/pull/1356#discussion_r443639711", "createdAt": "2020-06-22T15:22:57Z", "author": {"login": "mathbagu"}, "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -65,15 +66,31 @@ public String getComment() {\n         return \"PSS/E Format to IIDM converter\";\n     }\n \n+    private String findExtension(ReadOnlyDataSource dataSource, boolean throwException) throws IOException {\n+        for (String ext : EXTS) {\n+            if (dataSource.exists(null, ext)) {\n+                return ext;\n+            }\n+        }\n+        if (throwException) {\n+            throw new PsseException(\"File \" + dataSource.getBaseName()\n+                    + \".\" + Joiner.on(\"|\").join(EXTS) + \" not found\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20abc9339d6273467d5617aca9786b65c7dc61d5"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAxMTg0OA==", "bodyText": "I modified PSSE and UCT import since they were using the same approach", "url": "https://github.com/powsybl/powsybl-core/pull/1356#discussion_r444011848", "createdAt": "2020-06-23T07:18:03Z", "author": {"login": "JB-H"}, "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -65,15 +66,31 @@ public String getComment() {\n         return \"PSS/E Format to IIDM converter\";\n     }\n \n+    private String findExtension(ReadOnlyDataSource dataSource, boolean throwException) throws IOException {\n+        for (String ext : EXTS) {\n+            if (dataSource.exists(null, ext)) {\n+                return ext;\n+            }\n+        }\n+        if (throwException) {\n+            throw new PsseException(\"File \" + dataSource.getBaseName()\n+                    + \".\" + Joiner.on(\"|\").join(EXTS) + \" not found\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYzOTcxMQ=="}, "originalCommit": {"oid": "20abc9339d6273467d5617aca9786b65c7dc61d5"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDI4NDMyOnYy", "diffSide": "RIGHT", "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNToyOToxMlrOGnF46Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzoyMzo1M1rOGnchBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0NDEzNw==", "bodyText": "Is this catch OK? There is probably to many try/catch level where only one is sufficient?", "url": "https://github.com/powsybl/powsybl-core/pull/1356#discussion_r443644137", "createdAt": "2020-06-22T15:29:12Z", "author": {"login": "mathbagu"}, "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -300,62 +339,67 @@ public Network importData(ReadOnlyDataSource dataSource, NetworkFactory networkF\n \n         Network network = networkFactory.createNetwork(dataSource.getBaseName(), FORMAT);\n \n-        try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, EXT)))) {\n-\n-            // parse file\n-            PsseRawModel psseModel = new PsseRawReader().read(reader);\n-\n-            // set date and time\n-            // TODO\n-\n-            // build container to fit IIDM requirements\n-            List<Object> branches = ImmutableList.builder()\n-                    .addAll(psseModel.getNonTransformerBranches())\n-                    .addAll(psseModel.getTransformers())\n-                    .build();\n-            ToIntFunction<Object> branchToNum1 = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getI() : ((PsseTransformer) branch).getFirstRecord().getI();\n-            ToIntFunction<Object> branchToNum2 = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getJ() : ((PsseTransformer) branch).getFirstRecord().getJ();\n-            ToDoubleFunction<Object> branchToResistance = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getR() : ((PsseTransformer) branch).getSecondRecord().getR12();\n-            ToDoubleFunction<Object> branchToReactance = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getX() : ((PsseTransformer) branch).getSecondRecord().getX12();\n-            Predicate<Object> branchToIsTransformer = branch -> branch instanceof PsseTransformer;\n-            ContainersMapping containerMapping = ContainersMapping.create(psseModel.getBuses(), branches, PsseBus::getI, branchToNum1,\n-                branchToNum2, branchToResistance, branchToReactance, branchToIsTransformer,\n-                busNums -> \"VL\" + busNums.iterator().next(), substationNum -> \"S\" + substationNum++);\n-\n-            boolean ignoreBaseVoltage = ConversionParameters.readBooleanParameter(FORMAT, parameters, IGNORE_BASE_VOLTAGE_PARAMETER,\n-                    ParameterDefaultValueConfig.INSTANCE);\n-            PerUnitContext perUnitContext = new PerUnitContext(psseModel.getCaseIdentification().getSbase(), ignoreBaseVoltage);\n-\n-            // create buses\n-            createBuses(psseModel, containerMapping, perUnitContext, network);\n-\n-            //Create loads\n-            for (PsseLoad psseLoad : psseModel.getLoads()) {\n-                createLoad(psseLoad, containerMapping, network);\n-            }\n+        try {\n+            String ext = findExtension(dataSource, true);\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, ext)))) {\n+\n+                // parse file\n+                PsseRawModel psseModel = new PsseRawReader().read(reader);\n+\n+                // set date and time\n+                // TODO\n+\n+                // build container to fit IIDM requirements\n+                List<Object> branches = ImmutableList.builder()\n+                        .addAll(psseModel.getNonTransformerBranches())\n+                        .addAll(psseModel.getTransformers())\n+                        .build();\n+                ToIntFunction<Object> branchToNum1 = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getI() : ((PsseTransformer) branch).getFirstRecord().getI();\n+                ToIntFunction<Object> branchToNum2 = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getJ() : ((PsseTransformer) branch).getFirstRecord().getJ();\n+                ToDoubleFunction<Object> branchToResistance = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getR() : ((PsseTransformer) branch).getSecondRecord().getR12();\n+                ToDoubleFunction<Object> branchToReactance = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getX() : ((PsseTransformer) branch).getSecondRecord().getX12();\n+                Predicate<Object> branchToIsTransformer = branch -> branch instanceof PsseTransformer;\n+                ContainersMapping containerMapping = ContainersMapping.create(psseModel.getBuses(), branches, PsseBus::getI, branchToNum1,\n+                    branchToNum2, branchToResistance, branchToReactance, branchToIsTransformer,\n+                    busNums -> \"VL\" + busNums.iterator().next(), substationNum -> \"S\" + substationNum++);\n+\n+                boolean ignoreBaseVoltage = ConversionParameters.readBooleanParameter(FORMAT, parameters, IGNORE_BASE_VOLTAGE_PARAMETER,\n+                        ParameterDefaultValueConfig.INSTANCE);\n+                PerUnitContext perUnitContext = new PerUnitContext(psseModel.getCaseIdentification().getSbase(), ignoreBaseVoltage);\n+\n+                // create buses\n+                createBuses(psseModel, containerMapping, perUnitContext, network);\n+\n+                //Create loads\n+                for (PsseLoad psseLoad : psseModel.getLoads()) {\n+                    createLoad(psseLoad, containerMapping, network);\n+                }\n \n-            //Create shunts\n-            for (PsseFixedShunt psseShunt : psseModel.getFixedShunts()) {\n-                createShuntCompensator(psseShunt, perUnitContext, containerMapping, network);\n-            }\n+                //Create shunts\n+                for (PsseFixedShunt psseShunt : psseModel.getFixedShunts()) {\n+                    createShuntCompensator(psseShunt, perUnitContext, containerMapping, network);\n+                }\n \n-            for (PsseGenerator psseGen : psseModel.getGenerators()) {\n-                createGenerator(psseGen, containerMapping, network);\n-            }\n+                for (PsseGenerator psseGen : psseModel.getGenerators()) {\n+                    createGenerator(psseGen, containerMapping, network);\n+                }\n \n-            for (PsseNonTransformerBranch psseLine : psseModel.getNonTransformerBranches()) {\n-                createLine(psseLine, containerMapping, perUnitContext, network);\n-            }\n+                for (PsseNonTransformerBranch psseLine : psseModel.getNonTransformerBranches()) {\n+                    createLine(psseLine, containerMapping, perUnitContext, network);\n+                }\n \n-            for (PsseTransformer psseTfo : psseModel.getTransformers()) {\n-                createTransformer(psseTfo, containerMapping, perUnitContext, network);\n+                for (PsseTransformer psseTfo : psseModel.getTransformers()) {\n+                    createTransformer(psseTfo, containerMapping, perUnitContext, network);\n+                }\n+\n+            } catch (IOException e) {\n+                throw new UncheckedIOException(e);\n             }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20abc9339d6273467d5617aca9786b65c7dc61d5"}, "originalPosition": 297}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAxNDg1NQ==", "bodyText": "proposition of modification done", "url": "https://github.com/powsybl/powsybl-core/pull/1356#discussion_r444014855", "createdAt": "2020-06-23T07:23:53Z", "author": {"login": "JB-H"}, "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -300,62 +339,67 @@ public Network importData(ReadOnlyDataSource dataSource, NetworkFactory networkF\n \n         Network network = networkFactory.createNetwork(dataSource.getBaseName(), FORMAT);\n \n-        try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, EXT)))) {\n-\n-            // parse file\n-            PsseRawModel psseModel = new PsseRawReader().read(reader);\n-\n-            // set date and time\n-            // TODO\n-\n-            // build container to fit IIDM requirements\n-            List<Object> branches = ImmutableList.builder()\n-                    .addAll(psseModel.getNonTransformerBranches())\n-                    .addAll(psseModel.getTransformers())\n-                    .build();\n-            ToIntFunction<Object> branchToNum1 = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getI() : ((PsseTransformer) branch).getFirstRecord().getI();\n-            ToIntFunction<Object> branchToNum2 = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getJ() : ((PsseTransformer) branch).getFirstRecord().getJ();\n-            ToDoubleFunction<Object> branchToResistance = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getR() : ((PsseTransformer) branch).getSecondRecord().getR12();\n-            ToDoubleFunction<Object> branchToReactance = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getX() : ((PsseTransformer) branch).getSecondRecord().getX12();\n-            Predicate<Object> branchToIsTransformer = branch -> branch instanceof PsseTransformer;\n-            ContainersMapping containerMapping = ContainersMapping.create(psseModel.getBuses(), branches, PsseBus::getI, branchToNum1,\n-                branchToNum2, branchToResistance, branchToReactance, branchToIsTransformer,\n-                busNums -> \"VL\" + busNums.iterator().next(), substationNum -> \"S\" + substationNum++);\n-\n-            boolean ignoreBaseVoltage = ConversionParameters.readBooleanParameter(FORMAT, parameters, IGNORE_BASE_VOLTAGE_PARAMETER,\n-                    ParameterDefaultValueConfig.INSTANCE);\n-            PerUnitContext perUnitContext = new PerUnitContext(psseModel.getCaseIdentification().getSbase(), ignoreBaseVoltage);\n-\n-            // create buses\n-            createBuses(psseModel, containerMapping, perUnitContext, network);\n-\n-            //Create loads\n-            for (PsseLoad psseLoad : psseModel.getLoads()) {\n-                createLoad(psseLoad, containerMapping, network);\n-            }\n+        try {\n+            String ext = findExtension(dataSource, true);\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, ext)))) {\n+\n+                // parse file\n+                PsseRawModel psseModel = new PsseRawReader().read(reader);\n+\n+                // set date and time\n+                // TODO\n+\n+                // build container to fit IIDM requirements\n+                List<Object> branches = ImmutableList.builder()\n+                        .addAll(psseModel.getNonTransformerBranches())\n+                        .addAll(psseModel.getTransformers())\n+                        .build();\n+                ToIntFunction<Object> branchToNum1 = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getI() : ((PsseTransformer) branch).getFirstRecord().getI();\n+                ToIntFunction<Object> branchToNum2 = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getJ() : ((PsseTransformer) branch).getFirstRecord().getJ();\n+                ToDoubleFunction<Object> branchToResistance = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getR() : ((PsseTransformer) branch).getSecondRecord().getR12();\n+                ToDoubleFunction<Object> branchToReactance = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getX() : ((PsseTransformer) branch).getSecondRecord().getX12();\n+                Predicate<Object> branchToIsTransformer = branch -> branch instanceof PsseTransformer;\n+                ContainersMapping containerMapping = ContainersMapping.create(psseModel.getBuses(), branches, PsseBus::getI, branchToNum1,\n+                    branchToNum2, branchToResistance, branchToReactance, branchToIsTransformer,\n+                    busNums -> \"VL\" + busNums.iterator().next(), substationNum -> \"S\" + substationNum++);\n+\n+                boolean ignoreBaseVoltage = ConversionParameters.readBooleanParameter(FORMAT, parameters, IGNORE_BASE_VOLTAGE_PARAMETER,\n+                        ParameterDefaultValueConfig.INSTANCE);\n+                PerUnitContext perUnitContext = new PerUnitContext(psseModel.getCaseIdentification().getSbase(), ignoreBaseVoltage);\n+\n+                // create buses\n+                createBuses(psseModel, containerMapping, perUnitContext, network);\n+\n+                //Create loads\n+                for (PsseLoad psseLoad : psseModel.getLoads()) {\n+                    createLoad(psseLoad, containerMapping, network);\n+                }\n \n-            //Create shunts\n-            for (PsseFixedShunt psseShunt : psseModel.getFixedShunts()) {\n-                createShuntCompensator(psseShunt, perUnitContext, containerMapping, network);\n-            }\n+                //Create shunts\n+                for (PsseFixedShunt psseShunt : psseModel.getFixedShunts()) {\n+                    createShuntCompensator(psseShunt, perUnitContext, containerMapping, network);\n+                }\n \n-            for (PsseGenerator psseGen : psseModel.getGenerators()) {\n-                createGenerator(psseGen, containerMapping, network);\n-            }\n+                for (PsseGenerator psseGen : psseModel.getGenerators()) {\n+                    createGenerator(psseGen, containerMapping, network);\n+                }\n \n-            for (PsseNonTransformerBranch psseLine : psseModel.getNonTransformerBranches()) {\n-                createLine(psseLine, containerMapping, perUnitContext, network);\n-            }\n+                for (PsseNonTransformerBranch psseLine : psseModel.getNonTransformerBranches()) {\n+                    createLine(psseLine, containerMapping, perUnitContext, network);\n+                }\n \n-            for (PsseTransformer psseTfo : psseModel.getTransformers()) {\n-                createTransformer(psseTfo, containerMapping, perUnitContext, network);\n+                for (PsseTransformer psseTfo : psseModel.getTransformers()) {\n+                    createTransformer(psseTfo, containerMapping, perUnitContext, network);\n+                }\n+\n+            } catch (IOException e) {\n+                throw new UncheckedIOException(e);\n             }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0NDEzNw=="}, "originalCommit": {"oid": "20abc9339d6273467d5617aca9786b65c7dc61d5"}, "originalPosition": 297}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 10, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}