{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3MDczNzU0", "number": 1332, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDowNDo1OVrOECKzeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOToyODo0OVrOEx0NLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzA5NjI0OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDowNDo1OVrOGedcZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjoyNzoxMFrOGsU_Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU5Mjg3MQ==", "bodyText": "typo substationIsMapped", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r434592871", "createdAt": "2020-06-03T14:04:59Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -31,49 +30,233 @@\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean subStationIsMapped(String cgmesIdentifier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13b23d017e21375bba807b7d52e89f527927a5bd"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEzNDQyMg==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r449134422", "createdAt": "2020-07-02T16:27:10Z", "author": {"login": "marqueslanauja"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -31,49 +30,233 @@\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean subStationIsMapped(String cgmesIdentifier) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU5Mjg3MQ=="}, "originalCommit": {"oid": "13b23d017e21375bba807b7d52e89f527927a5bd"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODU3MTIwOnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMzoxNzoyN1rOGsMclw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjoyNzoyOVrOGsVAEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk5NDQ1NQ==", "bodyText": "Maybe rename getVoltageLevelFromNode it is more understandable", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r448994455", "createdAt": "2020-07-02T13:17:27Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -31,49 +30,233 @@\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean subStationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // CGMES standard:\n+    // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n+    // another Substation\"\n+    // Ends of transformers need to be in the same substation in the IIDM model.\n+    // We will map some CGMES substations to a single IIDM substation\n+    // when they are connected by transformers,\n+    // that is, when there are at least one power transformer that has terminals on both\n+    // substations\n+    // Ends of switches need to be in the same voltageLevel in the IIDM model.\n+    // We will map some CGMES voltageLevels to a single IIDM voltageLevel\n+    // when they are connected by switches\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        UndirectedGraph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSwitch(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, PropertyBag sw) {\n+        CgmesTerminal t1 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 1));\n+        String node1 = context.nodeBreaker() ? t1.connectivityNode() : t1.topologicalNode();\n+\n+        String voltageLevelId1 = nodeGetVoltageLevel(node1, t1);\n+        if (voltageLevelId1 == null) {\n+            return;\n+        }\n+\n+        CgmesTerminal t2 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 2));\n+        String node2 = context.nodeBreaker() ? t2.connectivityNode() : t2.topologicalNode();\n+        String voltageLevelId2 = nodeGetVoltageLevel(node2, t2);\n+        if (voltageLevelId2 == null) {\n+            return;\n+        }\n+\n+        addSwitchAdjacency(voltageLevelAdjacency, substationAdjacency, t1, t2, voltageLevelId1, voltageLevelId2);\n+    }\n+\n+    private String nodeGetVoltageLevel(String node, CgmesTerminal t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13b23d017e21375bba807b7d52e89f527927a5bd"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEzNDYwOA==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r449134608", "createdAt": "2020-07-02T16:27:29Z", "author": {"login": "marqueslanauja"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -31,49 +30,233 @@\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean subStationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // CGMES standard:\n+    // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n+    // another Substation\"\n+    // Ends of transformers need to be in the same substation in the IIDM model.\n+    // We will map some CGMES substations to a single IIDM substation\n+    // when they are connected by transformers,\n+    // that is, when there are at least one power transformer that has terminals on both\n+    // substations\n+    // Ends of switches need to be in the same voltageLevel in the IIDM model.\n+    // We will map some CGMES voltageLevels to a single IIDM voltageLevel\n+    // when they are connected by switches\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        UndirectedGraph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSwitch(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, PropertyBag sw) {\n+        CgmesTerminal t1 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 1));\n+        String node1 = context.nodeBreaker() ? t1.connectivityNode() : t1.topologicalNode();\n+\n+        String voltageLevelId1 = nodeGetVoltageLevel(node1, t1);\n+        if (voltageLevelId1 == null) {\n+            return;\n+        }\n+\n+        CgmesTerminal t2 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 2));\n+        String node2 = context.nodeBreaker() ? t2.connectivityNode() : t2.topologicalNode();\n+        String voltageLevelId2 = nodeGetVoltageLevel(node2, t2);\n+        if (voltageLevelId2 == null) {\n+            return;\n+        }\n+\n+        addSwitchAdjacency(voltageLevelAdjacency, substationAdjacency, t1, t2, voltageLevelId1, voltageLevelId2);\n+    }\n+\n+    private String nodeGetVoltageLevel(String node, CgmesTerminal t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk5NDQ1NQ=="}, "originalCommit": {"oid": "13b23d017e21375bba807b7d52e89f527927a5bd"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODU3NDE3OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMzoxODoxMlrOGsMecA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTo0MDoxMlrOHVXGgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk5NDkyOA==", "bodyText": "When does this case happen? In boundaries?", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r448994928", "createdAt": "2020-07-02T13:18:12Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -31,49 +30,233 @@\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean subStationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // CGMES standard:\n+    // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n+    // another Substation\"\n+    // Ends of transformers need to be in the same substation in the IIDM model.\n+    // We will map some CGMES substations to a single IIDM substation\n+    // when they are connected by transformers,\n+    // that is, when there are at least one power transformer that has terminals on both\n+    // substations\n+    // Ends of switches need to be in the same voltageLevel in the IIDM model.\n+    // We will map some CGMES voltageLevels to a single IIDM voltageLevel\n+    // when they are connected by switches\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        UndirectedGraph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSwitch(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, PropertyBag sw) {\n+        CgmesTerminal t1 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 1));\n+        String node1 = context.nodeBreaker() ? t1.connectivityNode() : t1.topologicalNode();\n+\n+        String voltageLevelId1 = nodeGetVoltageLevel(node1, t1);\n+        if (voltageLevelId1 == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13b23d017e21375bba807b7d52e89f527927a5bd"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEzNTMyMg==", "bodyText": "you are right, in boundaries.", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r449135322", "createdAt": "2020-07-02T16:28:44Z", "author": {"login": "marqueslanauja"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -31,49 +30,233 @@\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean subStationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // CGMES standard:\n+    // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n+    // another Substation\"\n+    // Ends of transformers need to be in the same substation in the IIDM model.\n+    // We will map some CGMES substations to a single IIDM substation\n+    // when they are connected by transformers,\n+    // that is, when there are at least one power transformer that has terminals on both\n+    // substations\n+    // Ends of switches need to be in the same voltageLevel in the IIDM model.\n+    // We will map some CGMES voltageLevels to a single IIDM voltageLevel\n+    // when they are connected by switches\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        UndirectedGraph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSwitch(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, PropertyBag sw) {\n+        CgmesTerminal t1 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 1));\n+        String node1 = context.nodeBreaker() ? t1.connectivityNode() : t1.topologicalNode();\n+\n+        String voltageLevelId1 = nodeGetVoltageLevel(node1, t1);\n+        if (voltageLevelId1 == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk5NDkyOA=="}, "originalCommit": {"oid": "13b23d017e21375bba807b7d52e89f527927a5bd"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2MDY0MA==", "bodyText": "It could be nice to add a comment in the code to explain it. Because, it's not really explicit\nSame remark below", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r492160640", "createdAt": "2020-09-21T15:40:12Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -31,49 +30,233 @@\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean subStationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // CGMES standard:\n+    // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n+    // another Substation\"\n+    // Ends of transformers need to be in the same substation in the IIDM model.\n+    // We will map some CGMES substations to a single IIDM substation\n+    // when they are connected by transformers,\n+    // that is, when there are at least one power transformer that has terminals on both\n+    // substations\n+    // Ends of switches need to be in the same voltageLevel in the IIDM model.\n+    // We will map some CGMES voltageLevels to a single IIDM voltageLevel\n+    // when they are connected by switches\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        UndirectedGraph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSwitch(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, PropertyBag sw) {\n+        CgmesTerminal t1 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 1));\n+        String node1 = context.nodeBreaker() ? t1.connectivityNode() : t1.topologicalNode();\n+\n+        String voltageLevelId1 = nodeGetVoltageLevel(node1, t1);\n+        if (voltageLevelId1 == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk5NDkyOA=="}, "originalCommit": {"oid": "13b23d017e21375bba807b7d52e89f527927a5bd"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODU3NTIxOnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMzoxODozMFrOGsMfGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjoyOToxMlrOGsVD8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk5NTA5OA==", "bodyText": "Same question", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r448995098", "createdAt": "2020-07-02T13:18:30Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -31,49 +30,233 @@\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean subStationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // CGMES standard:\n+    // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n+    // another Substation\"\n+    // Ends of transformers need to be in the same substation in the IIDM model.\n+    // We will map some CGMES substations to a single IIDM substation\n+    // when they are connected by transformers,\n+    // that is, when there are at least one power transformer that has terminals on both\n+    // substations\n+    // Ends of switches need to be in the same voltageLevel in the IIDM model.\n+    // We will map some CGMES voltageLevels to a single IIDM voltageLevel\n+    // when they are connected by switches\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        UndirectedGraph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSwitch(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, PropertyBag sw) {\n+        CgmesTerminal t1 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 1));\n+        String node1 = context.nodeBreaker() ? t1.connectivityNode() : t1.topologicalNode();\n+\n+        String voltageLevelId1 = nodeGetVoltageLevel(node1, t1);\n+        if (voltageLevelId1 == null) {\n+            return;\n+        }\n+\n+        CgmesTerminal t2 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 2));\n+        String node2 = context.nodeBreaker() ? t2.connectivityNode() : t2.topologicalNode();\n+        String voltageLevelId2 = nodeGetVoltageLevel(node2, t2);\n+        if (voltageLevelId2 == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13b23d017e21375bba807b7d52e89f527927a5bd"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEzNTYwMw==", "bodyText": "you are right, in boundaries", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r449135603", "createdAt": "2020-07-02T16:29:12Z", "author": {"login": "marqueslanauja"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -31,49 +30,233 @@\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean subStationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // CGMES standard:\n+    // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n+    // another Substation\"\n+    // Ends of transformers need to be in the same substation in the IIDM model.\n+    // We will map some CGMES substations to a single IIDM substation\n+    // when they are connected by transformers,\n+    // that is, when there are at least one power transformer that has terminals on both\n+    // substations\n+    // Ends of switches need to be in the same voltageLevel in the IIDM model.\n+    // We will map some CGMES voltageLevels to a single IIDM voltageLevel\n+    // when they are connected by switches\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        UndirectedGraph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSwitch(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, PropertyBag sw) {\n+        CgmesTerminal t1 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 1));\n+        String node1 = context.nodeBreaker() ? t1.connectivityNode() : t1.topologicalNode();\n+\n+        String voltageLevelId1 = nodeGetVoltageLevel(node1, t1);\n+        if (voltageLevelId1 == null) {\n+            return;\n+        }\n+\n+        CgmesTerminal t2 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 2));\n+        String node2 = context.nodeBreaker() ? t2.connectivityNode() : t2.topologicalNode();\n+        String voltageLevelId2 = nodeGetVoltageLevel(node2, t2);\n+        if (voltageLevelId2 == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk5NTA5OA=="}, "originalCommit": {"oid": "13b23d017e21375bba807b7d52e89f527927a5bd"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODYyNzgwOnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMzozMTozNlrOGsNAVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjoyOToyMlrOGsVEWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwMzYwNw==", "bodyText": "Same question: in which case does it happen?", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r449003607", "createdAt": "2020-07-02T13:31:36Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -31,49 +30,233 @@\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean subStationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // CGMES standard:\n+    // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n+    // another Substation\"\n+    // Ends of transformers need to be in the same substation in the IIDM model.\n+    // We will map some CGMES substations to a single IIDM substation\n+    // when they are connected by transformers,\n+    // that is, when there are at least one power transformer that has terminals on both\n+    // substations\n+    // Ends of switches need to be in the same voltageLevel in the IIDM model.\n+    // We will map some CGMES voltageLevels to a single IIDM voltageLevel\n+    // when they are connected by switches\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        UndirectedGraph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSwitch(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, PropertyBag sw) {\n+        CgmesTerminal t1 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 1));\n+        String node1 = context.nodeBreaker() ? t1.connectivityNode() : t1.topologicalNode();\n+\n+        String voltageLevelId1 = nodeGetVoltageLevel(node1, t1);\n+        if (voltageLevelId1 == null) {\n+            return;\n+        }\n+\n+        CgmesTerminal t2 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 2));\n+        String node2 = context.nodeBreaker() ? t2.connectivityNode() : t2.topologicalNode();\n+        String voltageLevelId2 = nodeGetVoltageLevel(node2, t2);\n+        if (voltageLevelId2 == null) {\n+            return;\n+        }\n+\n+        addSwitchAdjacency(voltageLevelAdjacency, substationAdjacency, t1, t2, voltageLevelId1, voltageLevelId2);\n+    }\n+\n+    private String nodeGetVoltageLevel(String node, CgmesTerminal t) {\n+        String voltageLevelId = null;\n+        if (node != null && !context.boundary().containsNode(node)) {\n+            voltageLevelId = context.cgmes().voltageLevel(t, context.nodeBreaker());\n+        }\n+        return voltageLevelId;\n+    }\n+\n+    private void addSwitchAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, CgmesTerminal t1, CgmesTerminal t2, String voltageLevelId1,\n+        String voltageLevelId2) {\n+        if (voltageLevelId1.equals(voltageLevelId2)) {\n+            return;\n+        }\n+        List<String> ad1 = voltageLevelAdjacency.get(voltageLevelId1);\n+        if (ad1 != null) {\n+            ad1.add(voltageLevelId2);\n+        }\n+        List<String> ad2 = voltageLevelAdjacency.get(voltageLevelId2);\n+        if (ad2 != null) {\n+            ad2.add(voltageLevelId1);\n+        }\n+\n+        String substationId1 = context.cgmes().substation(t1, context.nodeBreaker());\n+        if (substationId1 == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13b23d017e21375bba807b7d52e89f527927a5bd"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEzNTcwNA==", "bodyText": "you are right, in boundaries", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r449135704", "createdAt": "2020-07-02T16:29:22Z", "author": {"login": "marqueslanauja"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -31,49 +30,233 @@\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean subStationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // CGMES standard:\n+    // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n+    // another Substation\"\n+    // Ends of transformers need to be in the same substation in the IIDM model.\n+    // We will map some CGMES substations to a single IIDM substation\n+    // when they are connected by transformers,\n+    // that is, when there are at least one power transformer that has terminals on both\n+    // substations\n+    // Ends of switches need to be in the same voltageLevel in the IIDM model.\n+    // We will map some CGMES voltageLevels to a single IIDM voltageLevel\n+    // when they are connected by switches\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        UndirectedGraph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSwitch(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, PropertyBag sw) {\n+        CgmesTerminal t1 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 1));\n+        String node1 = context.nodeBreaker() ? t1.connectivityNode() : t1.topologicalNode();\n+\n+        String voltageLevelId1 = nodeGetVoltageLevel(node1, t1);\n+        if (voltageLevelId1 == null) {\n+            return;\n+        }\n+\n+        CgmesTerminal t2 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 2));\n+        String node2 = context.nodeBreaker() ? t2.connectivityNode() : t2.topologicalNode();\n+        String voltageLevelId2 = nodeGetVoltageLevel(node2, t2);\n+        if (voltageLevelId2 == null) {\n+            return;\n+        }\n+\n+        addSwitchAdjacency(voltageLevelAdjacency, substationAdjacency, t1, t2, voltageLevelId1, voltageLevelId2);\n+    }\n+\n+    private String nodeGetVoltageLevel(String node, CgmesTerminal t) {\n+        String voltageLevelId = null;\n+        if (node != null && !context.boundary().containsNode(node)) {\n+            voltageLevelId = context.cgmes().voltageLevel(t, context.nodeBreaker());\n+        }\n+        return voltageLevelId;\n+    }\n+\n+    private void addSwitchAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, CgmesTerminal t1, CgmesTerminal t2, String voltageLevelId1,\n+        String voltageLevelId2) {\n+        if (voltageLevelId1.equals(voltageLevelId2)) {\n+            return;\n+        }\n+        List<String> ad1 = voltageLevelAdjacency.get(voltageLevelId1);\n+        if (ad1 != null) {\n+            ad1.add(voltageLevelId2);\n+        }\n+        List<String> ad2 = voltageLevelAdjacency.get(voltageLevelId2);\n+        if (ad2 != null) {\n+            ad2.add(voltageLevelId1);\n+        }\n+\n+        String substationId1 = context.cgmes().substation(t1, context.nodeBreaker());\n+        if (substationId1 == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwMzYwNw=="}, "originalCommit": {"oid": "13b23d017e21375bba807b7d52e89f527927a5bd"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODYyODM5OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMzozMTo0NFrOGsNAtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjoyOTozM1rOGsVEsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwMzcwMA==", "bodyText": "Same question", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r449003700", "createdAt": "2020-07-02T13:31:44Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -31,49 +30,233 @@\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean subStationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // CGMES standard:\n+    // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n+    // another Substation\"\n+    // Ends of transformers need to be in the same substation in the IIDM model.\n+    // We will map some CGMES substations to a single IIDM substation\n+    // when they are connected by transformers,\n+    // that is, when there are at least one power transformer that has terminals on both\n+    // substations\n+    // Ends of switches need to be in the same voltageLevel in the IIDM model.\n+    // We will map some CGMES voltageLevels to a single IIDM voltageLevel\n+    // when they are connected by switches\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        UndirectedGraph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSwitch(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, PropertyBag sw) {\n+        CgmesTerminal t1 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 1));\n+        String node1 = context.nodeBreaker() ? t1.connectivityNode() : t1.topologicalNode();\n+\n+        String voltageLevelId1 = nodeGetVoltageLevel(node1, t1);\n+        if (voltageLevelId1 == null) {\n+            return;\n+        }\n+\n+        CgmesTerminal t2 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 2));\n+        String node2 = context.nodeBreaker() ? t2.connectivityNode() : t2.topologicalNode();\n+        String voltageLevelId2 = nodeGetVoltageLevel(node2, t2);\n+        if (voltageLevelId2 == null) {\n+            return;\n+        }\n+\n+        addSwitchAdjacency(voltageLevelAdjacency, substationAdjacency, t1, t2, voltageLevelId1, voltageLevelId2);\n+    }\n+\n+    private String nodeGetVoltageLevel(String node, CgmesTerminal t) {\n+        String voltageLevelId = null;\n+        if (node != null && !context.boundary().containsNode(node)) {\n+            voltageLevelId = context.cgmes().voltageLevel(t, context.nodeBreaker());\n+        }\n+        return voltageLevelId;\n+    }\n+\n+    private void addSwitchAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, CgmesTerminal t1, CgmesTerminal t2, String voltageLevelId1,\n+        String voltageLevelId2) {\n+        if (voltageLevelId1.equals(voltageLevelId2)) {\n+            return;\n+        }\n+        List<String> ad1 = voltageLevelAdjacency.get(voltageLevelId1);\n+        if (ad1 != null) {\n+            ad1.add(voltageLevelId2);\n+        }\n+        List<String> ad2 = voltageLevelAdjacency.get(voltageLevelId2);\n+        if (ad2 != null) {\n+            ad2.add(voltageLevelId1);\n+        }\n+\n+        String substationId1 = context.cgmes().substation(t1, context.nodeBreaker());\n+        if (substationId1 == null) {\n+            return;\n+        }\n+        String substationId2 = context.cgmes().substation(t2, context.nodeBreaker());\n+        if (substationId2 == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13b23d017e21375bba807b7d52e89f527927a5bd"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEzNTc5NQ==", "bodyText": "you are right, in boundaries", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r449135795", "createdAt": "2020-07-02T16:29:33Z", "author": {"login": "marqueslanauja"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -31,49 +30,233 @@\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean subStationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // CGMES standard:\n+    // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n+    // another Substation\"\n+    // Ends of transformers need to be in the same substation in the IIDM model.\n+    // We will map some CGMES substations to a single IIDM substation\n+    // when they are connected by transformers,\n+    // that is, when there are at least one power transformer that has terminals on both\n+    // substations\n+    // Ends of switches need to be in the same voltageLevel in the IIDM model.\n+    // We will map some CGMES voltageLevels to a single IIDM voltageLevel\n+    // when they are connected by switches\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        UndirectedGraph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSwitch(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, PropertyBag sw) {\n+        CgmesTerminal t1 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 1));\n+        String node1 = context.nodeBreaker() ? t1.connectivityNode() : t1.topologicalNode();\n+\n+        String voltageLevelId1 = nodeGetVoltageLevel(node1, t1);\n+        if (voltageLevelId1 == null) {\n+            return;\n+        }\n+\n+        CgmesTerminal t2 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 2));\n+        String node2 = context.nodeBreaker() ? t2.connectivityNode() : t2.topologicalNode();\n+        String voltageLevelId2 = nodeGetVoltageLevel(node2, t2);\n+        if (voltageLevelId2 == null) {\n+            return;\n+        }\n+\n+        addSwitchAdjacency(voltageLevelAdjacency, substationAdjacency, t1, t2, voltageLevelId1, voltageLevelId2);\n+    }\n+\n+    private String nodeGetVoltageLevel(String node, CgmesTerminal t) {\n+        String voltageLevelId = null;\n+        if (node != null && !context.boundary().containsNode(node)) {\n+            voltageLevelId = context.cgmes().voltageLevel(t, context.nodeBreaker());\n+        }\n+        return voltageLevelId;\n+    }\n+\n+    private void addSwitchAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, CgmesTerminal t1, CgmesTerminal t2, String voltageLevelId1,\n+        String voltageLevelId2) {\n+        if (voltageLevelId1.equals(voltageLevelId2)) {\n+            return;\n+        }\n+        List<String> ad1 = voltageLevelAdjacency.get(voltageLevelId1);\n+        if (ad1 != null) {\n+            ad1.add(voltageLevelId2);\n+        }\n+        List<String> ad2 = voltageLevelAdjacency.get(voltageLevelId2);\n+        if (ad2 != null) {\n+            ad2.add(voltageLevelId1);\n+        }\n+\n+        String substationId1 = context.cgmes().substation(t1, context.nodeBreaker());\n+        if (substationId1 == null) {\n+            return;\n+        }\n+        String substationId2 = context.cgmes().substation(t2, context.nodeBreaker());\n+        if (substationId2 == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwMzcwMA=="}, "originalCommit": {"oid": "13b23d017e21375bba807b7d52e89f527927a5bd"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODg1NjY5OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/AbstractConductingEquipmentConversion.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDoyNToxNlrOGsPRMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjozMDoyMVrOGsVGlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA0MDY4OQ==", "bodyText": "Is terminalData.voltageLevel still used? If not, you can delete the field in the TerminalData object.", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r449040689", "createdAt": "2020-07-02T14:25:16Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/AbstractConductingEquipmentConversion.java", "diffHunk": "@@ -202,16 +202,24 @@ String iidmVoltageLevelId(int n) {\n     }\n \n     protected VoltageLevel voltageLevel() {\n-        return terminals[0].voltageLevel;\n+        if (terminals[0].iidmVoltageLevelId != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "928231c0d11ae29e9cebd023585e53a2f2754854"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEzNjI3Nw==", "bodyText": "It is used.", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r449136277", "createdAt": "2020-07-02T16:30:21Z", "author": {"login": "marqueslanauja"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/AbstractConductingEquipmentConversion.java", "diffHunk": "@@ -202,16 +202,24 @@ String iidmVoltageLevelId(int n) {\n     }\n \n     protected VoltageLevel voltageLevel() {\n-        return terminals[0].voltageLevel;\n+        if (terminals[0].iidmVoltageLevelId != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA0MDY4OQ=="}, "originalCommit": {"oid": "928231c0d11ae29e9cebd023585e53a2f2754854"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTkzMzAzOnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTozNTo1MFrOHVW7Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMjoxOTozNFrOHWOViQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE1NzcyNg==", "bodyText": "Honestly I don't understand what this code does, just because the name of the variables are not well chosen. Could you please rename substationMapping and voltageMapping to something more explicit or explain in comment what is the key, what is the value of these maps?\nIs it a BiMap, to associate a voltageLevel to a substation?", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r492157726", "createdAt": "2020-09-21T15:35:50Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -31,47 +31,243 @@\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90aa9a5823076c8b3664113c414da857c0457b0a"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2NDMzNA==", "bodyText": "Can not be a BiMap as the values are not unique. The code has been commented and a small example has been added", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r493064334", "createdAt": "2020-09-22T22:16:16Z", "author": {"login": "marqueslanauja"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -31,47 +31,243 @@\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE1NzcyNg=="}, "originalCommit": {"oid": "90aa9a5823076c8b3664113c414da857c0457b0a"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2NTYwOQ==", "bodyText": "Some code has been refact to improve readability", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r493065609", "createdAt": "2020-09-22T22:19:34Z", "author": {"login": "marqueslanauja"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -31,47 +31,243 @@\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE1NzcyNg=="}, "originalCommit": {"oid": "90aa9a5823076c8b3664113c414da857c0457b0a"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTk2NzM4OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTo0Mzo0N1rOHVXQMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOTo0NzozNlrOHgeipg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2MzEyMg==", "bodyText": "Are you sure that all these test are necessary? You should explain in which case it happens, the code is really hard to maintain because there is a lot of things in your head :)", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r492163122", "createdAt": "2020-09-21T15:43:47Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -31,47 +31,243 @@\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    public List<String> mergedVoltageLevels(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.entrySet().stream().filter(record -> record.getValue().equals(vlid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    // CGMES standard:\n+    // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n+    // another Substation\"\n+    // Ends of transformers need to be in the same substation in the IIDM model.\n+    // We will map some CGMES substations to a single IIDM substation\n+    // when they are connected by transformers,\n+    // that is, when there are at least one power transformer that has terminals on both\n+    // substations\n+    // Ends of switches need to be in the same voltageLevel in the IIDM model.\n+    // We will map some CGMES voltageLevels to a single IIDM voltageLevel\n+    // when they are connected by switches\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        Graph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSwitch(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, PropertyBag sw) {\n+        CgmesTerminal t1 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 1));\n+        String node1 = context.nodeBreaker() ? t1.connectivityNode() : t1.topologicalNode();\n+\n+        String voltageLevelId1 = getVoltageLevelFromNode(node1, t1);\n+        if (voltageLevelId1 == null) {\n+            return;\n+        }\n+\n+        CgmesTerminal t2 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 2));\n+        String node2 = context.nodeBreaker() ? t2.connectivityNode() : t2.topologicalNode();\n+        String voltageLevelId2 = getVoltageLevelFromNode(node2, t2);\n+        if (voltageLevelId2 == null) {\n+            return;\n+        }\n+\n+        addSwitchAdjacency(voltageLevelAdjacency, substationAdjacency, t1, t2, voltageLevelId1, voltageLevelId2);\n+    }\n+\n+    private String getVoltageLevelFromNode(String node, CgmesTerminal t) {\n+        String voltageLevelId = null;\n+        if (node != null && !context.boundary().containsNode(node)) {\n+            voltageLevelId = context.cgmes().voltageLevel(t, context.nodeBreaker());\n+        }\n+        return voltageLevelId;\n+    }\n+\n+    private void addSwitchAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, CgmesTerminal t1, CgmesTerminal t2, String voltageLevelId1,\n+        String voltageLevelId2) {\n+        if (voltageLevelId1.equals(voltageLevelId2)) {\n+            return;\n+        }\n+        List<String> ad1 = voltageLevelAdjacency.get(voltageLevelId1);\n+        if (ad1 != null) {\n+            ad1.add(voltageLevelId2);\n+        }\n+        List<String> ad2 = voltageLevelAdjacency.get(voltageLevelId2);\n+        if (ad2 != null) {\n+            ad2.add(voltageLevelId1);\n+        }\n+\n+        String substationId1 = context.cgmes().substation(t1, context.nodeBreaker());\n+        if (substationId1 == null) {\n+            return;\n+        }\n+        String substationId2 = context.cgmes().substation(t2, context.nodeBreaker());\n+        if (substationId2 == null) {\n+            return;\n+        }\n+        if (substationId1.equals(substationId2)) {\n+            return;\n+        }\n+\n+        ad1 = substationAdjacency.get(substationId1);\n+        if (ad1 != null) {\n+            ad1.add(substationId2);\n+        }\n+        ad2 = substationAdjacency.get(substationId2);\n+        if (ad2 != null) {\n+            ad2.add(substationId1);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90aa9a5823076c8b3664113c414da857c0457b0a"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2Mjg4MA==", "bodyText": "Has been changed to Objects.requireNonNull(ad2)", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r493062880", "createdAt": "2020-09-22T22:12:26Z", "author": {"login": "marqueslanauja"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -31,47 +31,243 @@\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    public List<String> mergedVoltageLevels(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.entrySet().stream().filter(record -> record.getValue().equals(vlid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    // CGMES standard:\n+    // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n+    // another Substation\"\n+    // Ends of transformers need to be in the same substation in the IIDM model.\n+    // We will map some CGMES substations to a single IIDM substation\n+    // when they are connected by transformers,\n+    // that is, when there are at least one power transformer that has terminals on both\n+    // substations\n+    // Ends of switches need to be in the same voltageLevel in the IIDM model.\n+    // We will map some CGMES voltageLevels to a single IIDM voltageLevel\n+    // when they are connected by switches\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        Graph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSwitch(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, PropertyBag sw) {\n+        CgmesTerminal t1 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 1));\n+        String node1 = context.nodeBreaker() ? t1.connectivityNode() : t1.topologicalNode();\n+\n+        String voltageLevelId1 = getVoltageLevelFromNode(node1, t1);\n+        if (voltageLevelId1 == null) {\n+            return;\n+        }\n+\n+        CgmesTerminal t2 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 2));\n+        String node2 = context.nodeBreaker() ? t2.connectivityNode() : t2.topologicalNode();\n+        String voltageLevelId2 = getVoltageLevelFromNode(node2, t2);\n+        if (voltageLevelId2 == null) {\n+            return;\n+        }\n+\n+        addSwitchAdjacency(voltageLevelAdjacency, substationAdjacency, t1, t2, voltageLevelId1, voltageLevelId2);\n+    }\n+\n+    private String getVoltageLevelFromNode(String node, CgmesTerminal t) {\n+        String voltageLevelId = null;\n+        if (node != null && !context.boundary().containsNode(node)) {\n+            voltageLevelId = context.cgmes().voltageLevel(t, context.nodeBreaker());\n+        }\n+        return voltageLevelId;\n+    }\n+\n+    private void addSwitchAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, CgmesTerminal t1, CgmesTerminal t2, String voltageLevelId1,\n+        String voltageLevelId2) {\n+        if (voltageLevelId1.equals(voltageLevelId2)) {\n+            return;\n+        }\n+        List<String> ad1 = voltageLevelAdjacency.get(voltageLevelId1);\n+        if (ad1 != null) {\n+            ad1.add(voltageLevelId2);\n+        }\n+        List<String> ad2 = voltageLevelAdjacency.get(voltageLevelId2);\n+        if (ad2 != null) {\n+            ad2.add(voltageLevelId1);\n+        }\n+\n+        String substationId1 = context.cgmes().substation(t1, context.nodeBreaker());\n+        if (substationId1 == null) {\n+            return;\n+        }\n+        String substationId2 = context.cgmes().substation(t2, context.nodeBreaker());\n+        if (substationId2 == null) {\n+            return;\n+        }\n+        if (substationId1.equals(substationId2)) {\n+            return;\n+        }\n+\n+        ad1 = substationAdjacency.get(substationId1);\n+        if (ad1 != null) {\n+            ad1.add(substationId2);\n+        }\n+        ad2 = substationAdjacency.get(substationId2);\n+        if (ad2 != null) {\n+            ad2.add(substationId1);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2MzEyMg=="}, "originalCommit": {"oid": "90aa9a5823076c8b3664113c414da857c0457b0a"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2ODM0Mg==", "bodyText": "Even in this case, can you add a comment about in which case it can be null? If it never happens, it can not be checked (the method is private)", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r501568342", "createdAt": "2020-10-08T09:14:37Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -31,47 +31,243 @@\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    public List<String> mergedVoltageLevels(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.entrySet().stream().filter(record -> record.getValue().equals(vlid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    // CGMES standard:\n+    // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n+    // another Substation\"\n+    // Ends of transformers need to be in the same substation in the IIDM model.\n+    // We will map some CGMES substations to a single IIDM substation\n+    // when they are connected by transformers,\n+    // that is, when there are at least one power transformer that has terminals on both\n+    // substations\n+    // Ends of switches need to be in the same voltageLevel in the IIDM model.\n+    // We will map some CGMES voltageLevels to a single IIDM voltageLevel\n+    // when they are connected by switches\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        Graph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSwitch(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, PropertyBag sw) {\n+        CgmesTerminal t1 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 1));\n+        String node1 = context.nodeBreaker() ? t1.connectivityNode() : t1.topologicalNode();\n+\n+        String voltageLevelId1 = getVoltageLevelFromNode(node1, t1);\n+        if (voltageLevelId1 == null) {\n+            return;\n+        }\n+\n+        CgmesTerminal t2 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 2));\n+        String node2 = context.nodeBreaker() ? t2.connectivityNode() : t2.topologicalNode();\n+        String voltageLevelId2 = getVoltageLevelFromNode(node2, t2);\n+        if (voltageLevelId2 == null) {\n+            return;\n+        }\n+\n+        addSwitchAdjacency(voltageLevelAdjacency, substationAdjacency, t1, t2, voltageLevelId1, voltageLevelId2);\n+    }\n+\n+    private String getVoltageLevelFromNode(String node, CgmesTerminal t) {\n+        String voltageLevelId = null;\n+        if (node != null && !context.boundary().containsNode(node)) {\n+            voltageLevelId = context.cgmes().voltageLevel(t, context.nodeBreaker());\n+        }\n+        return voltageLevelId;\n+    }\n+\n+    private void addSwitchAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, CgmesTerminal t1, CgmesTerminal t2, String voltageLevelId1,\n+        String voltageLevelId2) {\n+        if (voltageLevelId1.equals(voltageLevelId2)) {\n+            return;\n+        }\n+        List<String> ad1 = voltageLevelAdjacency.get(voltageLevelId1);\n+        if (ad1 != null) {\n+            ad1.add(voltageLevelId2);\n+        }\n+        List<String> ad2 = voltageLevelAdjacency.get(voltageLevelId2);\n+        if (ad2 != null) {\n+            ad2.add(voltageLevelId1);\n+        }\n+\n+        String substationId1 = context.cgmes().substation(t1, context.nodeBreaker());\n+        if (substationId1 == null) {\n+            return;\n+        }\n+        String substationId2 = context.cgmes().substation(t2, context.nodeBreaker());\n+        if (substationId2 == null) {\n+            return;\n+        }\n+        if (substationId1.equals(substationId2)) {\n+            return;\n+        }\n+\n+        ad1 = substationAdjacency.get(substationId1);\n+        if (ad1 != null) {\n+            ad1.add(substationId2);\n+        }\n+        ad2 = substationAdjacency.get(substationId2);\n+        if (ad2 != null) {\n+            ad2.add(substationId1);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2MzEyMg=="}, "originalCommit": {"oid": "90aa9a5823076c8b3664113c414da857c0457b0a"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgxNjg3MA==", "bodyText": "I throw an exception that gives more information and clarifies when this situation can happen.", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r503816870", "createdAt": "2020-10-13T09:47:36Z", "author": {"login": "marqueslanauja"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -31,47 +31,243 @@\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    public List<String> mergedVoltageLevels(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.entrySet().stream().filter(record -> record.getValue().equals(vlid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    // CGMES standard:\n+    // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n+    // another Substation\"\n+    // Ends of transformers need to be in the same substation in the IIDM model.\n+    // We will map some CGMES substations to a single IIDM substation\n+    // when they are connected by transformers,\n+    // that is, when there are at least one power transformer that has terminals on both\n+    // substations\n+    // Ends of switches need to be in the same voltageLevel in the IIDM model.\n+    // We will map some CGMES voltageLevels to a single IIDM voltageLevel\n+    // when they are connected by switches\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        Graph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSwitch(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, PropertyBag sw) {\n+        CgmesTerminal t1 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 1));\n+        String node1 = context.nodeBreaker() ? t1.connectivityNode() : t1.topologicalNode();\n+\n+        String voltageLevelId1 = getVoltageLevelFromNode(node1, t1);\n+        if (voltageLevelId1 == null) {\n+            return;\n+        }\n+\n+        CgmesTerminal t2 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 2));\n+        String node2 = context.nodeBreaker() ? t2.connectivityNode() : t2.topologicalNode();\n+        String voltageLevelId2 = getVoltageLevelFromNode(node2, t2);\n+        if (voltageLevelId2 == null) {\n+            return;\n+        }\n+\n+        addSwitchAdjacency(voltageLevelAdjacency, substationAdjacency, t1, t2, voltageLevelId1, voltageLevelId2);\n+    }\n+\n+    private String getVoltageLevelFromNode(String node, CgmesTerminal t) {\n+        String voltageLevelId = null;\n+        if (node != null && !context.boundary().containsNode(node)) {\n+            voltageLevelId = context.cgmes().voltageLevel(t, context.nodeBreaker());\n+        }\n+        return voltageLevelId;\n+    }\n+\n+    private void addSwitchAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, CgmesTerminal t1, CgmesTerminal t2, String voltageLevelId1,\n+        String voltageLevelId2) {\n+        if (voltageLevelId1.equals(voltageLevelId2)) {\n+            return;\n+        }\n+        List<String> ad1 = voltageLevelAdjacency.get(voltageLevelId1);\n+        if (ad1 != null) {\n+            ad1.add(voltageLevelId2);\n+        }\n+        List<String> ad2 = voltageLevelAdjacency.get(voltageLevelId2);\n+        if (ad2 != null) {\n+            ad2.add(voltageLevelId1);\n+        }\n+\n+        String substationId1 = context.cgmes().substation(t1, context.nodeBreaker());\n+        if (substationId1 == null) {\n+            return;\n+        }\n+        String substationId2 = context.cgmes().substation(t2, context.nodeBreaker());\n+        if (substationId2 == null) {\n+            return;\n+        }\n+        if (substationId1.equals(substationId2)) {\n+            return;\n+        }\n+\n+        ad1 = substationAdjacency.get(substationId1);\n+        if (ad1 != null) {\n+            ad1.add(substationId2);\n+        }\n+        ad2 = substationAdjacency.get(substationId2);\n+        if (ad2 != null) {\n+            ad2.add(substationId1);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2MzEyMg=="}, "originalCommit": {"oid": "90aa9a5823076c8b3664113c414da857c0457b0a"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDAyNzAyOnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTo1NzozN1rOHVX1gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMjowOTozOFrOHWOGbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE3MjY3NA==", "bodyText": "I think the else never happens. If the voltageLevelIds is empty, this will throw an error. Why don't throw it directly with an explicit message", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r492172674", "createdAt": "2020-09-21T15:57:37Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -31,47 +31,243 @@\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    public List<String> mergedVoltageLevels(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.entrySet().stream().filter(record -> record.getValue().equals(vlid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    // CGMES standard:\n+    // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n+    // another Substation\"\n+    // Ends of transformers need to be in the same substation in the IIDM model.\n+    // We will map some CGMES substations to a single IIDM substation\n+    // when they are connected by transformers,\n+    // that is, when there are at least one power transformer that has terminals on both\n+    // substations\n+    // Ends of switches need to be in the same voltageLevel in the IIDM model.\n+    // We will map some CGMES voltageLevels to a single IIDM voltageLevel\n+    // when they are connected by switches\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        Graph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSwitch(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, PropertyBag sw) {\n+        CgmesTerminal t1 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 1));\n+        String node1 = context.nodeBreaker() ? t1.connectivityNode() : t1.topologicalNode();\n+\n+        String voltageLevelId1 = getVoltageLevelFromNode(node1, t1);\n+        if (voltageLevelId1 == null) {\n+            return;\n+        }\n+\n+        CgmesTerminal t2 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 2));\n+        String node2 = context.nodeBreaker() ? t2.connectivityNode() : t2.topologicalNode();\n+        String voltageLevelId2 = getVoltageLevelFromNode(node2, t2);\n+        if (voltageLevelId2 == null) {\n+            return;\n+        }\n+\n+        addSwitchAdjacency(voltageLevelAdjacency, substationAdjacency, t1, t2, voltageLevelId1, voltageLevelId2);\n+    }\n+\n+    private String getVoltageLevelFromNode(String node, CgmesTerminal t) {\n+        String voltageLevelId = null;\n+        if (node != null && !context.boundary().containsNode(node)) {\n+            voltageLevelId = context.cgmes().voltageLevel(t, context.nodeBreaker());\n+        }\n+        return voltageLevelId;\n+    }\n+\n+    private void addSwitchAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, CgmesTerminal t1, CgmesTerminal t2, String voltageLevelId1,\n+        String voltageLevelId2) {\n+        if (voltageLevelId1.equals(voltageLevelId2)) {\n+            return;\n+        }\n+        List<String> ad1 = voltageLevelAdjacency.get(voltageLevelId1);\n+        if (ad1 != null) {\n+            ad1.add(voltageLevelId2);\n+        }\n+        List<String> ad2 = voltageLevelAdjacency.get(voltageLevelId2);\n+        if (ad2 != null) {\n+            ad2.add(voltageLevelId1);\n+        }\n+\n+        String substationId1 = context.cgmes().substation(t1, context.nodeBreaker());\n+        if (substationId1 == null) {\n+            return;\n+        }\n+        String substationId2 = context.cgmes().substation(t2, context.nodeBreaker());\n+        if (substationId2 == null) {\n+            return;\n+        }\n+        if (substationId1.equals(substationId2)) {\n+            return;\n+        }\n+\n+        ad1 = substationAdjacency.get(substationId1);\n+        if (ad1 != null) {\n+            ad1.add(substationId2);\n+        }\n+        ad2 = substationAdjacency.get(substationId2);\n+        if (ad2 != null) {\n+            ad2.add(substationId1);\n+        }\n+    }\n+\n+    private void addEnds(Map<String, List<String>> substationAdjacency, PropertyBags tends) {\n+        List<String> substationsIds = substationsIds(tends);\n+        if (substationsIds.size() <= 1) {\n+            return;\n+        }\n+        String sub0 = substationsIds.get(0);\n+        for (int i = 1; i < substationsIds.size(); i++) {\n+            String subi = substationsIds.get(i);\n+            if (sub0.contentEquals(subi)) {\n+                continue;\n+            }\n+            List<String> ad0 = substationAdjacency.get(sub0);\n+            if (ad0 != null) {\n+                ad0.add(subi);\n+            }\n+            List<String> adi = substationAdjacency.get(subi);\n+            if (adi != null) {\n+                adi.add(sub0);\n+            }\n+        }\n+    }\n+\n+    private void buildVoltageLevel(Map<String, List<String>> voltageLevelAdjacency) {\n+        Set<String> visitedVoltageLevels = new HashSet<>();\n+        voltageLevelAdjacency.keySet().forEach(vl -> {\n+            if (!visitedVoltageLevels.contains(vl)) {\n+                ArrayList<String> vlAds = adjacents(voltageLevelAdjacency, visitedVoltageLevels, vl);\n+                String selectedVoltageLevelId = representativeVoltageLevelId(vlAds);\n+                for (String voltageLevelId : vlAds) {\n+                    if (!voltageLevelId.equals(selectedVoltageLevelId)) {\n+                        voltageLevelMapping.put(voltageLevelId, selectedVoltageLevelId);\n                     }\n-                });\n-        if (!mapping.isEmpty()) {\n+                }\n+            }\n+        });\n+        if (!voltageLevelMapping.isEmpty()) {\n+            LOG.warn(\"VoltageLevel id mapping needed for {} voltageLevels: {}\",\n+                voltageLevelMapping.size(), voltageLevelMapping);\n+        }\n+    }\n+\n+    private void buildSubstation(Map<String, List<String>> substationAdjacency) {\n+        Set<String> visitedSubstations = new HashSet<>();\n+        substationAdjacency.keySet().forEach(sub -> {\n+            if (!visitedSubstations.contains(sub)) {\n+                ArrayList<String> subAds = adjacents(substationAdjacency, visitedSubstations, sub);\n+\n+                String selectedSubstationId = representativeSubstationId(subAds);\n+                for (String substationId : subAds) {\n+                    if (!substationId.equals(selectedSubstationId)) {\n+                        substationMapping.put(substationId, selectedSubstationId);\n+                    }\n+                }\n+            }\n+        });\n+        if (!substationMapping.isEmpty()) {\n             LOG.warn(\"Substation id mapping needed for {} substations: {}\",\n-                    mapping.size(), mapping);\n+                    substationMapping.size(), substationMapping);\n+        }\n+    }\n+\n+    private static ArrayList<String> adjacents(Map<String, List<String>> adjacency, Set<String> visited, String id) {\n+        ArrayList<String> adjacent = new ArrayList<>();\n+        adjacent.add(id);\n+        visited.add(id);\n+\n+        int k = 0;\n+        while (k < adjacent.size()) {\n+            String vl0 = adjacent.get(k);\n+            if (adjacency.containsKey(vl0)) {\n+                adjacency.get(vl0).forEach(ad -> {\n+                    if (visited.contains(ad)) {\n+                        return;\n+                    }\n+                    adjacent.add(ad);\n+                    visited.add(ad);\n+                });\n+            }\n+            k++;\n         }\n+        return adjacent;\n+    }\n+\n+    private static String representativeVoltageLevelId(Collection<String> voltageLevelIds) {\n+        return voltageLevelIds.stream()\n+                .sorted()\n+                .findFirst()\n+                .orElse(voltageLevelIds.iterator().next());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90aa9a5823076c8b3664113c414da857c0457b0a"}, "originalPosition": 283}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2MTc0MA==", "bodyText": "An error has been thrown. Done", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r493061740", "createdAt": "2020-09-22T22:09:38Z", "author": {"login": "marqueslanauja"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -31,47 +31,243 @@\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    public List<String> mergedVoltageLevels(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.entrySet().stream().filter(record -> record.getValue().equals(vlid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    // CGMES standard:\n+    // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n+    // another Substation\"\n+    // Ends of transformers need to be in the same substation in the IIDM model.\n+    // We will map some CGMES substations to a single IIDM substation\n+    // when they are connected by transformers,\n+    // that is, when there are at least one power transformer that has terminals on both\n+    // substations\n+    // Ends of switches need to be in the same voltageLevel in the IIDM model.\n+    // We will map some CGMES voltageLevels to a single IIDM voltageLevel\n+    // when they are connected by switches\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        Graph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSwitch(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, PropertyBag sw) {\n+        CgmesTerminal t1 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 1));\n+        String node1 = context.nodeBreaker() ? t1.connectivityNode() : t1.topologicalNode();\n+\n+        String voltageLevelId1 = getVoltageLevelFromNode(node1, t1);\n+        if (voltageLevelId1 == null) {\n+            return;\n+        }\n+\n+        CgmesTerminal t2 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 2));\n+        String node2 = context.nodeBreaker() ? t2.connectivityNode() : t2.topologicalNode();\n+        String voltageLevelId2 = getVoltageLevelFromNode(node2, t2);\n+        if (voltageLevelId2 == null) {\n+            return;\n+        }\n+\n+        addSwitchAdjacency(voltageLevelAdjacency, substationAdjacency, t1, t2, voltageLevelId1, voltageLevelId2);\n+    }\n+\n+    private String getVoltageLevelFromNode(String node, CgmesTerminal t) {\n+        String voltageLevelId = null;\n+        if (node != null && !context.boundary().containsNode(node)) {\n+            voltageLevelId = context.cgmes().voltageLevel(t, context.nodeBreaker());\n+        }\n+        return voltageLevelId;\n+    }\n+\n+    private void addSwitchAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, CgmesTerminal t1, CgmesTerminal t2, String voltageLevelId1,\n+        String voltageLevelId2) {\n+        if (voltageLevelId1.equals(voltageLevelId2)) {\n+            return;\n+        }\n+        List<String> ad1 = voltageLevelAdjacency.get(voltageLevelId1);\n+        if (ad1 != null) {\n+            ad1.add(voltageLevelId2);\n+        }\n+        List<String> ad2 = voltageLevelAdjacency.get(voltageLevelId2);\n+        if (ad2 != null) {\n+            ad2.add(voltageLevelId1);\n+        }\n+\n+        String substationId1 = context.cgmes().substation(t1, context.nodeBreaker());\n+        if (substationId1 == null) {\n+            return;\n+        }\n+        String substationId2 = context.cgmes().substation(t2, context.nodeBreaker());\n+        if (substationId2 == null) {\n+            return;\n+        }\n+        if (substationId1.equals(substationId2)) {\n+            return;\n+        }\n+\n+        ad1 = substationAdjacency.get(substationId1);\n+        if (ad1 != null) {\n+            ad1.add(substationId2);\n+        }\n+        ad2 = substationAdjacency.get(substationId2);\n+        if (ad2 != null) {\n+            ad2.add(substationId1);\n+        }\n+    }\n+\n+    private void addEnds(Map<String, List<String>> substationAdjacency, PropertyBags tends) {\n+        List<String> substationsIds = substationsIds(tends);\n+        if (substationsIds.size() <= 1) {\n+            return;\n+        }\n+        String sub0 = substationsIds.get(0);\n+        for (int i = 1; i < substationsIds.size(); i++) {\n+            String subi = substationsIds.get(i);\n+            if (sub0.contentEquals(subi)) {\n+                continue;\n+            }\n+            List<String> ad0 = substationAdjacency.get(sub0);\n+            if (ad0 != null) {\n+                ad0.add(subi);\n+            }\n+            List<String> adi = substationAdjacency.get(subi);\n+            if (adi != null) {\n+                adi.add(sub0);\n+            }\n+        }\n+    }\n+\n+    private void buildVoltageLevel(Map<String, List<String>> voltageLevelAdjacency) {\n+        Set<String> visitedVoltageLevels = new HashSet<>();\n+        voltageLevelAdjacency.keySet().forEach(vl -> {\n+            if (!visitedVoltageLevels.contains(vl)) {\n+                ArrayList<String> vlAds = adjacents(voltageLevelAdjacency, visitedVoltageLevels, vl);\n+                String selectedVoltageLevelId = representativeVoltageLevelId(vlAds);\n+                for (String voltageLevelId : vlAds) {\n+                    if (!voltageLevelId.equals(selectedVoltageLevelId)) {\n+                        voltageLevelMapping.put(voltageLevelId, selectedVoltageLevelId);\n                     }\n-                });\n-        if (!mapping.isEmpty()) {\n+                }\n+            }\n+        });\n+        if (!voltageLevelMapping.isEmpty()) {\n+            LOG.warn(\"VoltageLevel id mapping needed for {} voltageLevels: {}\",\n+                voltageLevelMapping.size(), voltageLevelMapping);\n+        }\n+    }\n+\n+    private void buildSubstation(Map<String, List<String>> substationAdjacency) {\n+        Set<String> visitedSubstations = new HashSet<>();\n+        substationAdjacency.keySet().forEach(sub -> {\n+            if (!visitedSubstations.contains(sub)) {\n+                ArrayList<String> subAds = adjacents(substationAdjacency, visitedSubstations, sub);\n+\n+                String selectedSubstationId = representativeSubstationId(subAds);\n+                for (String substationId : subAds) {\n+                    if (!substationId.equals(selectedSubstationId)) {\n+                        substationMapping.put(substationId, selectedSubstationId);\n+                    }\n+                }\n+            }\n+        });\n+        if (!substationMapping.isEmpty()) {\n             LOG.warn(\"Substation id mapping needed for {} substations: {}\",\n-                    mapping.size(), mapping);\n+                    substationMapping.size(), substationMapping);\n+        }\n+    }\n+\n+    private static ArrayList<String> adjacents(Map<String, List<String>> adjacency, Set<String> visited, String id) {\n+        ArrayList<String> adjacent = new ArrayList<>();\n+        adjacent.add(id);\n+        visited.add(id);\n+\n+        int k = 0;\n+        while (k < adjacent.size()) {\n+            String vl0 = adjacent.get(k);\n+            if (adjacency.containsKey(vl0)) {\n+                adjacency.get(vl0).forEach(ad -> {\n+                    if (visited.contains(ad)) {\n+                        return;\n+                    }\n+                    adjacent.add(ad);\n+                    visited.add(ad);\n+                });\n+            }\n+            k++;\n         }\n+        return adjacent;\n+    }\n+\n+    private static String representativeVoltageLevelId(Collection<String> voltageLevelIds) {\n+        return voltageLevelIds.stream()\n+                .sorted()\n+                .findFirst()\n+                .orElse(voltageLevelIds.iterator().next());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE3MjY3NA=="}, "originalCommit": {"oid": "90aa9a5823076c8b3664113c414da857c0457b0a"}, "originalPosition": 283}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDA0NTY1OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/SwitchConversion.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNjowMTo1OVrOHVYBCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMjowNzo1MFrOHWOD4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE3NTYyNQ==", "bodyText": "Write this in a single line", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r492175625", "createdAt": "2020-09-21T16:01:59Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/SwitchConversion.java", "diffHunk": "@@ -74,29 +69,18 @@ private void convertSwitchAtBoundary(int boundarySide) {\n     private void convertToSwitch() {\n         boolean normalOpen = p.asBoolean(\"normalOpen\", false);\n         boolean open = p.asBoolean(\"open\", normalOpen);\n-        if (convertToLowImpedanceLine()) {\n-            warnLowImpedanceLineCreated();\n-            LineAdder adder = context.network().newLine().setR(context.config().lowImpedanceLineR())\n-                    .setX(context.config().lowImpedanceLineX()).setG1(0).setB1(0).setG2(0).setB2(0);\n+        if (context.nodeBreaker()) {\n+            VoltageLevel.NodeBreakerView.SwitchAdder adder;\n+            adder = voltageLevel().getNodeBreakerView().newSwitch().setKind(kind());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90aa9a5823076c8b3664113c414da857c0457b0a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2MTA5MQ==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r493061091", "createdAt": "2020-09-22T22:07:50Z", "author": {"login": "marqueslanauja"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/SwitchConversion.java", "diffHunk": "@@ -74,29 +69,18 @@ private void convertSwitchAtBoundary(int boundarySide) {\n     private void convertToSwitch() {\n         boolean normalOpen = p.asBoolean(\"normalOpen\", false);\n         boolean open = p.asBoolean(\"open\", normalOpen);\n-        if (convertToLowImpedanceLine()) {\n-            warnLowImpedanceLineCreated();\n-            LineAdder adder = context.network().newLine().setR(context.config().lowImpedanceLineR())\n-                    .setX(context.config().lowImpedanceLineX()).setG1(0).setB1(0).setG2(0).setB2(0);\n+        if (context.nodeBreaker()) {\n+            VoltageLevel.NodeBreakerView.SwitchAdder adder;\n+            adder = voltageLevel().getNodeBreakerView().newSwitch().setKind(kind());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE3NTYyNQ=="}, "originalCommit": {"oid": "90aa9a5823076c8b3664113c414da857c0457b0a"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDA0NTk3OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/SwitchConversion.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNjowMjowNVrOHVYBQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMjowNzozM1rOHWODcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE3NTY4MA==", "bodyText": "Write this in a single line", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r492175680", "createdAt": "2020-09-21T16:02:05Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/SwitchConversion.java", "diffHunk": "@@ -74,29 +69,18 @@ private void convertSwitchAtBoundary(int boundarySide) {\n     private void convertToSwitch() {\n         boolean normalOpen = p.asBoolean(\"normalOpen\", false);\n         boolean open = p.asBoolean(\"open\", normalOpen);\n-        if (convertToLowImpedanceLine()) {\n-            warnLowImpedanceLineCreated();\n-            LineAdder adder = context.network().newLine().setR(context.config().lowImpedanceLineR())\n-                    .setX(context.config().lowImpedanceLineX()).setG1(0).setB1(0).setG2(0).setB2(0);\n+        if (context.nodeBreaker()) {\n+            VoltageLevel.NodeBreakerView.SwitchAdder adder;\n+            adder = voltageLevel().getNodeBreakerView().newSwitch().setKind(kind());\n             identify(adder);\n-            boolean branchIsClosed = !open;\n-            connect(adder, terminalConnected(1), terminalConnected(2), branchIsClosed);\n-            Line line = adder.add();\n-            convertedTerminals(line.getTerminal1(), line.getTerminal2());\n+            connect(adder, open);\n+            adder.add();\n         } else {\n-            if (context.nodeBreaker()) {\n-                VoltageLevel.NodeBreakerView.SwitchAdder adder;\n-                adder = voltageLevel().getNodeBreakerView().newSwitch().setKind(kind());\n-                identify(adder);\n-                connect(adder, open);\n-                adder.add();\n-            } else {\n-                VoltageLevel.BusBreakerView.SwitchAdder adder;\n-                adder = voltageLevel().getBusBreakerView().newSwitch();\n-                identify(adder);\n-                connect(adder, open);\n-                adder.add();\n-            }\n+            VoltageLevel.BusBreakerView.SwitchAdder adder;\n+            adder = voltageLevel().getBusBreakerView().newSwitch();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90aa9a5823076c8b3664113c414da857c0457b0a"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2MDk3OA==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r493060978", "createdAt": "2020-09-22T22:07:33Z", "author": {"login": "marqueslanauja"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/SwitchConversion.java", "diffHunk": "@@ -74,29 +69,18 @@ private void convertSwitchAtBoundary(int boundarySide) {\n     private void convertToSwitch() {\n         boolean normalOpen = p.asBoolean(\"normalOpen\", false);\n         boolean open = p.asBoolean(\"open\", normalOpen);\n-        if (convertToLowImpedanceLine()) {\n-            warnLowImpedanceLineCreated();\n-            LineAdder adder = context.network().newLine().setR(context.config().lowImpedanceLineR())\n-                    .setX(context.config().lowImpedanceLineX()).setG1(0).setB1(0).setG2(0).setB2(0);\n+        if (context.nodeBreaker()) {\n+            VoltageLevel.NodeBreakerView.SwitchAdder adder;\n+            adder = voltageLevel().getNodeBreakerView().newSwitch().setKind(kind());\n             identify(adder);\n-            boolean branchIsClosed = !open;\n-            connect(adder, terminalConnected(1), terminalConnected(2), branchIsClosed);\n-            Line line = adder.add();\n-            convertedTerminals(line.getTerminal1(), line.getTerminal2());\n+            connect(adder, open);\n+            adder.add();\n         } else {\n-            if (context.nodeBreaker()) {\n-                VoltageLevel.NodeBreakerView.SwitchAdder adder;\n-                adder = voltageLevel().getNodeBreakerView().newSwitch().setKind(kind());\n-                identify(adder);\n-                connect(adder, open);\n-                adder.add();\n-            } else {\n-                VoltageLevel.BusBreakerView.SwitchAdder adder;\n-                adder = voltageLevel().getBusBreakerView().newSwitch();\n-                identify(adder);\n-                connect(adder, open);\n-                adder.add();\n-            }\n+            VoltageLevel.BusBreakerView.SwitchAdder adder;\n+            adder = voltageLevel().getBusBreakerView().newSwitch();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE3NTY4MA=="}, "originalCommit": {"oid": "90aa9a5823076c8b3664113c414da857c0457b0a"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjYwODM5OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOTowMjo0N1rOHoGKUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODowMDoxMlrOHob69w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgwNjAzNA==", "bodyText": "I would collect into a set.", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r511806034", "createdAt": "2020-10-26T09:02:47Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -10,70 +10,302 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n-import org.jgrapht.Graph;\n-import org.jgrapht.alg.connectivity.ConnectivityInspector;\n-import org.jgrapht.graph.Pseudograph;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.powsybl.cgmes.model.CgmesNames;\n import com.powsybl.cgmes.model.CgmesTerminal;\n+import com.powsybl.commons.PowsyblException;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n+ * CGMES standard: <br>\n+ * A PowerTransformer is contained in one Substation, but it can connect a Terminal to another different Substation <br>\n+ * A Switch can connect to different voltageLevels\n+ * <p>\n+ * IIDM Model: <br>\n+ * Ends of transformers need to be in the same substation<br>\n+ * Ends of switches need to be in the same voltageLevel\n+ * <p>\n+ * Solution: <br>\n+ * CGMES substations that are connected by transformers will be mapped to a single IIDM substation <br>\n+ * CGMES voltageLevels that are connected by switches will be mapped to a single IIDM voltageLevel\n+ * <p>\n+ * Example: <br>\n+ * We suppose that VL1, VL2, VL3, VL4, VL5, VL6 and VL7 are CGMES voltageLevels, <br>\n+ * Sw23 is a switch connecting voltageLevels VL2 and VL3, <br>\n+ * Sw34 is a switch connecting voltageLevels VL3 and VL4 and <br>\n+ * Sw67 is a switch connecting voltageLevels VL6 and VL7\n+ * <p>\n+ * Steps: <br>\n+ * Fill voltageLevelAdjacency Map <br>\n+ * Two voltageLevels are adjacent if they are connected by a switch <br>\n+ * The voltageLevelAdjacency Map will include the following records <br>\n+ * (VL1, []) <br>\n+ * (VL2, [VL2, VL3]) <br>\n+ * (VL3, [VL2, VL3, VL4]) <br>\n+ * (VL4, [VL3, VL4]) <br>\n+ * (VL5, []) <br>\n+ * (VL6, [VL6, VL7]) <br>\n+ * (VL7, [VL6, VL7]) <br>\n+ * <p>\n+ * For each non-visited VoltageLevel-key of the voltageLevelAdjacency Map all connected voltageLevels will be calculated  <br>\n+ * Two voltageLevels are connected if they are adjacent <br>\n+ * (allConnected method) <br>\n+ * All connected VoltageLevels to VL1 will be [VL1] <br>\n+ * All connected VoltageLevels to VL2 will be [VL2, VL3, VL4] <br>\n+ * All connected VoltageLevels to VL5 will be [VL5] <br>\n+ * All connected VoltageLevels to VL6 will be [VL6, VL7]\n+ * <p>\n+ * So the following voltageLevels should be merged <br>\n+ * [VL2, VL3, VL4] and the representative (IIDM voltageLevel) will be VL2 <br>\n+ * [VL6, VL7] and the representative (IIDM voltageLevel) will be VL6\n+ * <p>\n+ * And finally previous data is recorded in the voltageLevelMapping Map as <br>\n+ * (For each merged voltageLevel a record (merged voltageLevel, representative voltageLevel) is added) <br>\n+ * (VL3, VL2) <br>\n+ * (VL4, VL2) <br>\n+ * (VL7, VL6) <br>\n+ * <p>\n+ * The voltageLevelMapping Map will be used to assign the IIDM voltageLevel during the conversion process\n+ * <p>\n+ * The same algorithm is used to identify the substations that should be merged but: <br>\n+ * Two substations are adjacent if there is a transformer between them. <br>\n+ * The two substations associated with two adjacent voltageLevels, are adjacent if they are different substations.\n+ * <p>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n+\n public class SubstationIdMapping {\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    // All the keys for a given value, all the merged substations that have cgmesIdentifier as representative\n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcd8f2f57cc6d3552cad79800f38addb39c69bcb"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2MjU1MQ==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r512162551", "createdAt": "2020-10-26T18:00:12Z", "author": {"login": "marqueslanauja"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -10,70 +10,302 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n-import org.jgrapht.Graph;\n-import org.jgrapht.alg.connectivity.ConnectivityInspector;\n-import org.jgrapht.graph.Pseudograph;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.powsybl.cgmes.model.CgmesNames;\n import com.powsybl.cgmes.model.CgmesTerminal;\n+import com.powsybl.commons.PowsyblException;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n+ * CGMES standard: <br>\n+ * A PowerTransformer is contained in one Substation, but it can connect a Terminal to another different Substation <br>\n+ * A Switch can connect to different voltageLevels\n+ * <p>\n+ * IIDM Model: <br>\n+ * Ends of transformers need to be in the same substation<br>\n+ * Ends of switches need to be in the same voltageLevel\n+ * <p>\n+ * Solution: <br>\n+ * CGMES substations that are connected by transformers will be mapped to a single IIDM substation <br>\n+ * CGMES voltageLevels that are connected by switches will be mapped to a single IIDM voltageLevel\n+ * <p>\n+ * Example: <br>\n+ * We suppose that VL1, VL2, VL3, VL4, VL5, VL6 and VL7 are CGMES voltageLevels, <br>\n+ * Sw23 is a switch connecting voltageLevels VL2 and VL3, <br>\n+ * Sw34 is a switch connecting voltageLevels VL3 and VL4 and <br>\n+ * Sw67 is a switch connecting voltageLevels VL6 and VL7\n+ * <p>\n+ * Steps: <br>\n+ * Fill voltageLevelAdjacency Map <br>\n+ * Two voltageLevels are adjacent if they are connected by a switch <br>\n+ * The voltageLevelAdjacency Map will include the following records <br>\n+ * (VL1, []) <br>\n+ * (VL2, [VL2, VL3]) <br>\n+ * (VL3, [VL2, VL3, VL4]) <br>\n+ * (VL4, [VL3, VL4]) <br>\n+ * (VL5, []) <br>\n+ * (VL6, [VL6, VL7]) <br>\n+ * (VL7, [VL6, VL7]) <br>\n+ * <p>\n+ * For each non-visited VoltageLevel-key of the voltageLevelAdjacency Map all connected voltageLevels will be calculated  <br>\n+ * Two voltageLevels are connected if they are adjacent <br>\n+ * (allConnected method) <br>\n+ * All connected VoltageLevels to VL1 will be [VL1] <br>\n+ * All connected VoltageLevels to VL2 will be [VL2, VL3, VL4] <br>\n+ * All connected VoltageLevels to VL5 will be [VL5] <br>\n+ * All connected VoltageLevels to VL6 will be [VL6, VL7]\n+ * <p>\n+ * So the following voltageLevels should be merged <br>\n+ * [VL2, VL3, VL4] and the representative (IIDM voltageLevel) will be VL2 <br>\n+ * [VL6, VL7] and the representative (IIDM voltageLevel) will be VL6\n+ * <p>\n+ * And finally previous data is recorded in the voltageLevelMapping Map as <br>\n+ * (For each merged voltageLevel a record (merged voltageLevel, representative voltageLevel) is added) <br>\n+ * (VL3, VL2) <br>\n+ * (VL4, VL2) <br>\n+ * (VL7, VL6) <br>\n+ * <p>\n+ * The voltageLevelMapping Map will be used to assign the IIDM voltageLevel during the conversion process\n+ * <p>\n+ * The same algorithm is used to identify the substations that should be merged but: <br>\n+ * Two substations are adjacent if there is a transformer between them. <br>\n+ * The two substations associated with two adjacent voltageLevels, are adjacent if they are different substations.\n+ * <p>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n+\n public class SubstationIdMapping {\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    // All the keys for a given value, all the merged substations that have cgmesIdentifier as representative\n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgwNjAzNA=="}, "originalCommit": {"oid": "dcd8f2f57cc6d3552cad79800f38addb39c69bcb"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjYwOTA4OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOTowMzowMFrOHoGKww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODowMDoyOVrOHob7tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgwNjE0Nw==", "bodyText": "I would collect to a set.", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r511806147", "createdAt": "2020-10-26T09:03:00Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -10,70 +10,302 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n-import org.jgrapht.Graph;\n-import org.jgrapht.alg.connectivity.ConnectivityInspector;\n-import org.jgrapht.graph.Pseudograph;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.powsybl.cgmes.model.CgmesNames;\n import com.powsybl.cgmes.model.CgmesTerminal;\n+import com.powsybl.commons.PowsyblException;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n+ * CGMES standard: <br>\n+ * A PowerTransformer is contained in one Substation, but it can connect a Terminal to another different Substation <br>\n+ * A Switch can connect to different voltageLevels\n+ * <p>\n+ * IIDM Model: <br>\n+ * Ends of transformers need to be in the same substation<br>\n+ * Ends of switches need to be in the same voltageLevel\n+ * <p>\n+ * Solution: <br>\n+ * CGMES substations that are connected by transformers will be mapped to a single IIDM substation <br>\n+ * CGMES voltageLevels that are connected by switches will be mapped to a single IIDM voltageLevel\n+ * <p>\n+ * Example: <br>\n+ * We suppose that VL1, VL2, VL3, VL4, VL5, VL6 and VL7 are CGMES voltageLevels, <br>\n+ * Sw23 is a switch connecting voltageLevels VL2 and VL3, <br>\n+ * Sw34 is a switch connecting voltageLevels VL3 and VL4 and <br>\n+ * Sw67 is a switch connecting voltageLevels VL6 and VL7\n+ * <p>\n+ * Steps: <br>\n+ * Fill voltageLevelAdjacency Map <br>\n+ * Two voltageLevels are adjacent if they are connected by a switch <br>\n+ * The voltageLevelAdjacency Map will include the following records <br>\n+ * (VL1, []) <br>\n+ * (VL2, [VL2, VL3]) <br>\n+ * (VL3, [VL2, VL3, VL4]) <br>\n+ * (VL4, [VL3, VL4]) <br>\n+ * (VL5, []) <br>\n+ * (VL6, [VL6, VL7]) <br>\n+ * (VL7, [VL6, VL7]) <br>\n+ * <p>\n+ * For each non-visited VoltageLevel-key of the voltageLevelAdjacency Map all connected voltageLevels will be calculated  <br>\n+ * Two voltageLevels are connected if they are adjacent <br>\n+ * (allConnected method) <br>\n+ * All connected VoltageLevels to VL1 will be [VL1] <br>\n+ * All connected VoltageLevels to VL2 will be [VL2, VL3, VL4] <br>\n+ * All connected VoltageLevels to VL5 will be [VL5] <br>\n+ * All connected VoltageLevels to VL6 will be [VL6, VL7]\n+ * <p>\n+ * So the following voltageLevels should be merged <br>\n+ * [VL2, VL3, VL4] and the representative (IIDM voltageLevel) will be VL2 <br>\n+ * [VL6, VL7] and the representative (IIDM voltageLevel) will be VL6\n+ * <p>\n+ * And finally previous data is recorded in the voltageLevelMapping Map as <br>\n+ * (For each merged voltageLevel a record (merged voltageLevel, representative voltageLevel) is added) <br>\n+ * (VL3, VL2) <br>\n+ * (VL4, VL2) <br>\n+ * (VL7, VL6) <br>\n+ * <p>\n+ * The voltageLevelMapping Map will be used to assign the IIDM voltageLevel during the conversion process\n+ * <p>\n+ * The same algorithm is used to identify the substations that should be merged but: <br>\n+ * Two substations are adjacent if there is a transformer between them. <br>\n+ * The two substations associated with two adjacent voltageLevels, are adjacent if they are different substations.\n+ * <p>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n+\n public class SubstationIdMapping {\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    // All the keys for a given value, all the merged substations that have cgmesIdentifier as representative\n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // All the keys for a given value, all the merged voltageLevels that have cgmesIdentifier as representative\n+    public List<String> mergedVoltageLevels(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.entrySet().stream().filter(record -> record.getValue().equals(vlid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcd8f2f57cc6d3552cad79800f38addb39c69bcb"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2Mjc0Mw==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r512162743", "createdAt": "2020-10-26T18:00:29Z", "author": {"login": "marqueslanauja"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -10,70 +10,302 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n-import org.jgrapht.Graph;\n-import org.jgrapht.alg.connectivity.ConnectivityInspector;\n-import org.jgrapht.graph.Pseudograph;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.powsybl.cgmes.model.CgmesNames;\n import com.powsybl.cgmes.model.CgmesTerminal;\n+import com.powsybl.commons.PowsyblException;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n+ * CGMES standard: <br>\n+ * A PowerTransformer is contained in one Substation, but it can connect a Terminal to another different Substation <br>\n+ * A Switch can connect to different voltageLevels\n+ * <p>\n+ * IIDM Model: <br>\n+ * Ends of transformers need to be in the same substation<br>\n+ * Ends of switches need to be in the same voltageLevel\n+ * <p>\n+ * Solution: <br>\n+ * CGMES substations that are connected by transformers will be mapped to a single IIDM substation <br>\n+ * CGMES voltageLevels that are connected by switches will be mapped to a single IIDM voltageLevel\n+ * <p>\n+ * Example: <br>\n+ * We suppose that VL1, VL2, VL3, VL4, VL5, VL6 and VL7 are CGMES voltageLevels, <br>\n+ * Sw23 is a switch connecting voltageLevels VL2 and VL3, <br>\n+ * Sw34 is a switch connecting voltageLevels VL3 and VL4 and <br>\n+ * Sw67 is a switch connecting voltageLevels VL6 and VL7\n+ * <p>\n+ * Steps: <br>\n+ * Fill voltageLevelAdjacency Map <br>\n+ * Two voltageLevels are adjacent if they are connected by a switch <br>\n+ * The voltageLevelAdjacency Map will include the following records <br>\n+ * (VL1, []) <br>\n+ * (VL2, [VL2, VL3]) <br>\n+ * (VL3, [VL2, VL3, VL4]) <br>\n+ * (VL4, [VL3, VL4]) <br>\n+ * (VL5, []) <br>\n+ * (VL6, [VL6, VL7]) <br>\n+ * (VL7, [VL6, VL7]) <br>\n+ * <p>\n+ * For each non-visited VoltageLevel-key of the voltageLevelAdjacency Map all connected voltageLevels will be calculated  <br>\n+ * Two voltageLevels are connected if they are adjacent <br>\n+ * (allConnected method) <br>\n+ * All connected VoltageLevels to VL1 will be [VL1] <br>\n+ * All connected VoltageLevels to VL2 will be [VL2, VL3, VL4] <br>\n+ * All connected VoltageLevels to VL5 will be [VL5] <br>\n+ * All connected VoltageLevels to VL6 will be [VL6, VL7]\n+ * <p>\n+ * So the following voltageLevels should be merged <br>\n+ * [VL2, VL3, VL4] and the representative (IIDM voltageLevel) will be VL2 <br>\n+ * [VL6, VL7] and the representative (IIDM voltageLevel) will be VL6\n+ * <p>\n+ * And finally previous data is recorded in the voltageLevelMapping Map as <br>\n+ * (For each merged voltageLevel a record (merged voltageLevel, representative voltageLevel) is added) <br>\n+ * (VL3, VL2) <br>\n+ * (VL4, VL2) <br>\n+ * (VL7, VL6) <br>\n+ * <p>\n+ * The voltageLevelMapping Map will be used to assign the IIDM voltageLevel during the conversion process\n+ * <p>\n+ * The same algorithm is used to identify the substations that should be merged but: <br>\n+ * Two substations are adjacent if there is a transformer between them. <br>\n+ * The two substations associated with two adjacent voltageLevels, are adjacent if they are different substations.\n+ * <p>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n+\n public class SubstationIdMapping {\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    // All the keys for a given value, all the merged substations that have cgmesIdentifier as representative\n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // All the keys for a given value, all the merged voltageLevels that have cgmesIdentifier as representative\n+    public List<String> mergedVoltageLevels(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.entrySet().stream().filter(record -> record.getValue().equals(vlid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgwNjE0Nw=="}, "originalCommit": {"oid": "dcd8f2f57cc6d3552cad79800f38addb39c69bcb"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjYxOTg3OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOTowNjowNlrOHoGRVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODowMDo0MlrOHob8KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgwNzgzMQ==", "bodyText": "I would write voltageLevelAdjacency.put(vid, new ArrayList<>());\nHere, we are sure that the key is absent, so it's not necessary to check it", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r511807831", "createdAt": "2020-10-26T09:06:06Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -10,70 +10,302 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n-import org.jgrapht.Graph;\n-import org.jgrapht.alg.connectivity.ConnectivityInspector;\n-import org.jgrapht.graph.Pseudograph;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.powsybl.cgmes.model.CgmesNames;\n import com.powsybl.cgmes.model.CgmesTerminal;\n+import com.powsybl.commons.PowsyblException;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n+ * CGMES standard: <br>\n+ * A PowerTransformer is contained in one Substation, but it can connect a Terminal to another different Substation <br>\n+ * A Switch can connect to different voltageLevels\n+ * <p>\n+ * IIDM Model: <br>\n+ * Ends of transformers need to be in the same substation<br>\n+ * Ends of switches need to be in the same voltageLevel\n+ * <p>\n+ * Solution: <br>\n+ * CGMES substations that are connected by transformers will be mapped to a single IIDM substation <br>\n+ * CGMES voltageLevels that are connected by switches will be mapped to a single IIDM voltageLevel\n+ * <p>\n+ * Example: <br>\n+ * We suppose that VL1, VL2, VL3, VL4, VL5, VL6 and VL7 are CGMES voltageLevels, <br>\n+ * Sw23 is a switch connecting voltageLevels VL2 and VL3, <br>\n+ * Sw34 is a switch connecting voltageLevels VL3 and VL4 and <br>\n+ * Sw67 is a switch connecting voltageLevels VL6 and VL7\n+ * <p>\n+ * Steps: <br>\n+ * Fill voltageLevelAdjacency Map <br>\n+ * Two voltageLevels are adjacent if they are connected by a switch <br>\n+ * The voltageLevelAdjacency Map will include the following records <br>\n+ * (VL1, []) <br>\n+ * (VL2, [VL2, VL3]) <br>\n+ * (VL3, [VL2, VL3, VL4]) <br>\n+ * (VL4, [VL3, VL4]) <br>\n+ * (VL5, []) <br>\n+ * (VL6, [VL6, VL7]) <br>\n+ * (VL7, [VL6, VL7]) <br>\n+ * <p>\n+ * For each non-visited VoltageLevel-key of the voltageLevelAdjacency Map all connected voltageLevels will be calculated  <br>\n+ * Two voltageLevels are connected if they are adjacent <br>\n+ * (allConnected method) <br>\n+ * All connected VoltageLevels to VL1 will be [VL1] <br>\n+ * All connected VoltageLevels to VL2 will be [VL2, VL3, VL4] <br>\n+ * All connected VoltageLevels to VL5 will be [VL5] <br>\n+ * All connected VoltageLevels to VL6 will be [VL6, VL7]\n+ * <p>\n+ * So the following voltageLevels should be merged <br>\n+ * [VL2, VL3, VL4] and the representative (IIDM voltageLevel) will be VL2 <br>\n+ * [VL6, VL7] and the representative (IIDM voltageLevel) will be VL6\n+ * <p>\n+ * And finally previous data is recorded in the voltageLevelMapping Map as <br>\n+ * (For each merged voltageLevel a record (merged voltageLevel, representative voltageLevel) is added) <br>\n+ * (VL3, VL2) <br>\n+ * (VL4, VL2) <br>\n+ * (VL7, VL6) <br>\n+ * <p>\n+ * The voltageLevelMapping Map will be used to assign the IIDM voltageLevel during the conversion process\n+ * <p>\n+ * The same algorithm is used to identify the substations that should be merged but: <br>\n+ * Two substations are adjacent if there is a transformer between them. <br>\n+ * The two substations associated with two adjacent voltageLevels, are adjacent if they are different substations.\n+ * <p>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n+\n public class SubstationIdMapping {\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    // All the keys for a given value, all the merged substations that have cgmesIdentifier as representative\n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // All the keys for a given value, all the merged voltageLevels that have cgmesIdentifier as representative\n+    public List<String> mergedVoltageLevels(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.entrySet().stream().filter(record -> record.getValue().equals(vlid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        Graph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcd8f2f57cc6d3552cad79800f38addb39c69bcb"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2Mjg1Ng==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r512162856", "createdAt": "2020-10-26T18:00:42Z", "author": {"login": "marqueslanauja"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -10,70 +10,302 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n-import org.jgrapht.Graph;\n-import org.jgrapht.alg.connectivity.ConnectivityInspector;\n-import org.jgrapht.graph.Pseudograph;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.powsybl.cgmes.model.CgmesNames;\n import com.powsybl.cgmes.model.CgmesTerminal;\n+import com.powsybl.commons.PowsyblException;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n+ * CGMES standard: <br>\n+ * A PowerTransformer is contained in one Substation, but it can connect a Terminal to another different Substation <br>\n+ * A Switch can connect to different voltageLevels\n+ * <p>\n+ * IIDM Model: <br>\n+ * Ends of transformers need to be in the same substation<br>\n+ * Ends of switches need to be in the same voltageLevel\n+ * <p>\n+ * Solution: <br>\n+ * CGMES substations that are connected by transformers will be mapped to a single IIDM substation <br>\n+ * CGMES voltageLevels that are connected by switches will be mapped to a single IIDM voltageLevel\n+ * <p>\n+ * Example: <br>\n+ * We suppose that VL1, VL2, VL3, VL4, VL5, VL6 and VL7 are CGMES voltageLevels, <br>\n+ * Sw23 is a switch connecting voltageLevels VL2 and VL3, <br>\n+ * Sw34 is a switch connecting voltageLevels VL3 and VL4 and <br>\n+ * Sw67 is a switch connecting voltageLevels VL6 and VL7\n+ * <p>\n+ * Steps: <br>\n+ * Fill voltageLevelAdjacency Map <br>\n+ * Two voltageLevels are adjacent if they are connected by a switch <br>\n+ * The voltageLevelAdjacency Map will include the following records <br>\n+ * (VL1, []) <br>\n+ * (VL2, [VL2, VL3]) <br>\n+ * (VL3, [VL2, VL3, VL4]) <br>\n+ * (VL4, [VL3, VL4]) <br>\n+ * (VL5, []) <br>\n+ * (VL6, [VL6, VL7]) <br>\n+ * (VL7, [VL6, VL7]) <br>\n+ * <p>\n+ * For each non-visited VoltageLevel-key of the voltageLevelAdjacency Map all connected voltageLevels will be calculated  <br>\n+ * Two voltageLevels are connected if they are adjacent <br>\n+ * (allConnected method) <br>\n+ * All connected VoltageLevels to VL1 will be [VL1] <br>\n+ * All connected VoltageLevels to VL2 will be [VL2, VL3, VL4] <br>\n+ * All connected VoltageLevels to VL5 will be [VL5] <br>\n+ * All connected VoltageLevels to VL6 will be [VL6, VL7]\n+ * <p>\n+ * So the following voltageLevels should be merged <br>\n+ * [VL2, VL3, VL4] and the representative (IIDM voltageLevel) will be VL2 <br>\n+ * [VL6, VL7] and the representative (IIDM voltageLevel) will be VL6\n+ * <p>\n+ * And finally previous data is recorded in the voltageLevelMapping Map as <br>\n+ * (For each merged voltageLevel a record (merged voltageLevel, representative voltageLevel) is added) <br>\n+ * (VL3, VL2) <br>\n+ * (VL4, VL2) <br>\n+ * (VL7, VL6) <br>\n+ * <p>\n+ * The voltageLevelMapping Map will be used to assign the IIDM voltageLevel during the conversion process\n+ * <p>\n+ * The same algorithm is used to identify the substations that should be merged but: <br>\n+ * Two substations are adjacent if there is a transformer between them. <br>\n+ * The two substations associated with two adjacent voltageLevels, are adjacent if they are different substations.\n+ * <p>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n+\n public class SubstationIdMapping {\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    // All the keys for a given value, all the merged substations that have cgmesIdentifier as representative\n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // All the keys for a given value, all the merged voltageLevels that have cgmesIdentifier as representative\n+    public List<String> mergedVoltageLevels(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.entrySet().stream().filter(record -> record.getValue().equals(vlid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        Graph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgwNzgzMQ=="}, "originalCommit": {"oid": "dcd8f2f57cc6d3552cad79800f38addb39c69bcb"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjYyMDQ1OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOTowNjoxNFrOHoGRsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODowMDo1M1rOHob8kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgwNzkyMA==", "bodyText": "I would write voltageLevelAdjacency.put(vid, new ArrayList<>());\nHere, we are sure that the key is absent, so it's not necessary to check it", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r511807920", "createdAt": "2020-10-26T09:06:14Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -10,70 +10,302 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n-import org.jgrapht.Graph;\n-import org.jgrapht.alg.connectivity.ConnectivityInspector;\n-import org.jgrapht.graph.Pseudograph;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.powsybl.cgmes.model.CgmesNames;\n import com.powsybl.cgmes.model.CgmesTerminal;\n+import com.powsybl.commons.PowsyblException;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n+ * CGMES standard: <br>\n+ * A PowerTransformer is contained in one Substation, but it can connect a Terminal to another different Substation <br>\n+ * A Switch can connect to different voltageLevels\n+ * <p>\n+ * IIDM Model: <br>\n+ * Ends of transformers need to be in the same substation<br>\n+ * Ends of switches need to be in the same voltageLevel\n+ * <p>\n+ * Solution: <br>\n+ * CGMES substations that are connected by transformers will be mapped to a single IIDM substation <br>\n+ * CGMES voltageLevels that are connected by switches will be mapped to a single IIDM voltageLevel\n+ * <p>\n+ * Example: <br>\n+ * We suppose that VL1, VL2, VL3, VL4, VL5, VL6 and VL7 are CGMES voltageLevels, <br>\n+ * Sw23 is a switch connecting voltageLevels VL2 and VL3, <br>\n+ * Sw34 is a switch connecting voltageLevels VL3 and VL4 and <br>\n+ * Sw67 is a switch connecting voltageLevels VL6 and VL7\n+ * <p>\n+ * Steps: <br>\n+ * Fill voltageLevelAdjacency Map <br>\n+ * Two voltageLevels are adjacent if they are connected by a switch <br>\n+ * The voltageLevelAdjacency Map will include the following records <br>\n+ * (VL1, []) <br>\n+ * (VL2, [VL2, VL3]) <br>\n+ * (VL3, [VL2, VL3, VL4]) <br>\n+ * (VL4, [VL3, VL4]) <br>\n+ * (VL5, []) <br>\n+ * (VL6, [VL6, VL7]) <br>\n+ * (VL7, [VL6, VL7]) <br>\n+ * <p>\n+ * For each non-visited VoltageLevel-key of the voltageLevelAdjacency Map all connected voltageLevels will be calculated  <br>\n+ * Two voltageLevels are connected if they are adjacent <br>\n+ * (allConnected method) <br>\n+ * All connected VoltageLevels to VL1 will be [VL1] <br>\n+ * All connected VoltageLevels to VL2 will be [VL2, VL3, VL4] <br>\n+ * All connected VoltageLevels to VL5 will be [VL5] <br>\n+ * All connected VoltageLevels to VL6 will be [VL6, VL7]\n+ * <p>\n+ * So the following voltageLevels should be merged <br>\n+ * [VL2, VL3, VL4] and the representative (IIDM voltageLevel) will be VL2 <br>\n+ * [VL6, VL7] and the representative (IIDM voltageLevel) will be VL6\n+ * <p>\n+ * And finally previous data is recorded in the voltageLevelMapping Map as <br>\n+ * (For each merged voltageLevel a record (merged voltageLevel, representative voltageLevel) is added) <br>\n+ * (VL3, VL2) <br>\n+ * (VL4, VL2) <br>\n+ * (VL7, VL6) <br>\n+ * <p>\n+ * The voltageLevelMapping Map will be used to assign the IIDM voltageLevel during the conversion process\n+ * <p>\n+ * The same algorithm is used to identify the substations that should be merged but: <br>\n+ * Two substations are adjacent if there is a transformer between them. <br>\n+ * The two substations associated with two adjacent voltageLevels, are adjacent if they are different substations.\n+ * <p>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n+\n public class SubstationIdMapping {\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    // All the keys for a given value, all the merged substations that have cgmesIdentifier as representative\n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // All the keys for a given value, all the merged voltageLevels that have cgmesIdentifier as representative\n+    public List<String> mergedVoltageLevels(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.entrySet().stream().filter(record -> record.getValue().equals(vlid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        Graph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcd8f2f57cc6d3552cad79800f38addb39c69bcb"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2Mjk2Mw==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r512162963", "createdAt": "2020-10-26T18:00:53Z", "author": {"login": "marqueslanauja"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -10,70 +10,302 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n-import org.jgrapht.Graph;\n-import org.jgrapht.alg.connectivity.ConnectivityInspector;\n-import org.jgrapht.graph.Pseudograph;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.powsybl.cgmes.model.CgmesNames;\n import com.powsybl.cgmes.model.CgmesTerminal;\n+import com.powsybl.commons.PowsyblException;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n+ * CGMES standard: <br>\n+ * A PowerTransformer is contained in one Substation, but it can connect a Terminal to another different Substation <br>\n+ * A Switch can connect to different voltageLevels\n+ * <p>\n+ * IIDM Model: <br>\n+ * Ends of transformers need to be in the same substation<br>\n+ * Ends of switches need to be in the same voltageLevel\n+ * <p>\n+ * Solution: <br>\n+ * CGMES substations that are connected by transformers will be mapped to a single IIDM substation <br>\n+ * CGMES voltageLevels that are connected by switches will be mapped to a single IIDM voltageLevel\n+ * <p>\n+ * Example: <br>\n+ * We suppose that VL1, VL2, VL3, VL4, VL5, VL6 and VL7 are CGMES voltageLevels, <br>\n+ * Sw23 is a switch connecting voltageLevels VL2 and VL3, <br>\n+ * Sw34 is a switch connecting voltageLevels VL3 and VL4 and <br>\n+ * Sw67 is a switch connecting voltageLevels VL6 and VL7\n+ * <p>\n+ * Steps: <br>\n+ * Fill voltageLevelAdjacency Map <br>\n+ * Two voltageLevels are adjacent if they are connected by a switch <br>\n+ * The voltageLevelAdjacency Map will include the following records <br>\n+ * (VL1, []) <br>\n+ * (VL2, [VL2, VL3]) <br>\n+ * (VL3, [VL2, VL3, VL4]) <br>\n+ * (VL4, [VL3, VL4]) <br>\n+ * (VL5, []) <br>\n+ * (VL6, [VL6, VL7]) <br>\n+ * (VL7, [VL6, VL7]) <br>\n+ * <p>\n+ * For each non-visited VoltageLevel-key of the voltageLevelAdjacency Map all connected voltageLevels will be calculated  <br>\n+ * Two voltageLevels are connected if they are adjacent <br>\n+ * (allConnected method) <br>\n+ * All connected VoltageLevels to VL1 will be [VL1] <br>\n+ * All connected VoltageLevels to VL2 will be [VL2, VL3, VL4] <br>\n+ * All connected VoltageLevels to VL5 will be [VL5] <br>\n+ * All connected VoltageLevels to VL6 will be [VL6, VL7]\n+ * <p>\n+ * So the following voltageLevels should be merged <br>\n+ * [VL2, VL3, VL4] and the representative (IIDM voltageLevel) will be VL2 <br>\n+ * [VL6, VL7] and the representative (IIDM voltageLevel) will be VL6\n+ * <p>\n+ * And finally previous data is recorded in the voltageLevelMapping Map as <br>\n+ * (For each merged voltageLevel a record (merged voltageLevel, representative voltageLevel) is added) <br>\n+ * (VL3, VL2) <br>\n+ * (VL4, VL2) <br>\n+ * (VL7, VL6) <br>\n+ * <p>\n+ * The voltageLevelMapping Map will be used to assign the IIDM voltageLevel during the conversion process\n+ * <p>\n+ * The same algorithm is used to identify the substations that should be merged but: <br>\n+ * Two substations are adjacent if there is a transformer between them. <br>\n+ * The two substations associated with two adjacent voltageLevels, are adjacent if they are different substations.\n+ * <p>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n+\n public class SubstationIdMapping {\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    // All the keys for a given value, all the merged substations that have cgmesIdentifier as representative\n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // All the keys for a given value, all the merged voltageLevels that have cgmesIdentifier as representative\n+    public List<String> mergedVoltageLevels(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.entrySet().stream().filter(record -> record.getValue().equals(vlid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        Graph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgwNzkyMA=="}, "originalCommit": {"oid": "dcd8f2f57cc6d3552cad79800f38addb39c69bcb"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjYyODkxOnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOTowODozMFrOHoGW6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODowMTowNVrOHob9CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgwOTI1Nw==", "bodyText": "From my point of view, to avoid duplicates we should use Map<String, Set<String>>", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r511809257", "createdAt": "2020-10-26T09:08:30Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -10,70 +10,302 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n-import org.jgrapht.Graph;\n-import org.jgrapht.alg.connectivity.ConnectivityInspector;\n-import org.jgrapht.graph.Pseudograph;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.powsybl.cgmes.model.CgmesNames;\n import com.powsybl.cgmes.model.CgmesTerminal;\n+import com.powsybl.commons.PowsyblException;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n+ * CGMES standard: <br>\n+ * A PowerTransformer is contained in one Substation, but it can connect a Terminal to another different Substation <br>\n+ * A Switch can connect to different voltageLevels\n+ * <p>\n+ * IIDM Model: <br>\n+ * Ends of transformers need to be in the same substation<br>\n+ * Ends of switches need to be in the same voltageLevel\n+ * <p>\n+ * Solution: <br>\n+ * CGMES substations that are connected by transformers will be mapped to a single IIDM substation <br>\n+ * CGMES voltageLevels that are connected by switches will be mapped to a single IIDM voltageLevel\n+ * <p>\n+ * Example: <br>\n+ * We suppose that VL1, VL2, VL3, VL4, VL5, VL6 and VL7 are CGMES voltageLevels, <br>\n+ * Sw23 is a switch connecting voltageLevels VL2 and VL3, <br>\n+ * Sw34 is a switch connecting voltageLevels VL3 and VL4 and <br>\n+ * Sw67 is a switch connecting voltageLevels VL6 and VL7\n+ * <p>\n+ * Steps: <br>\n+ * Fill voltageLevelAdjacency Map <br>\n+ * Two voltageLevels are adjacent if they are connected by a switch <br>\n+ * The voltageLevelAdjacency Map will include the following records <br>\n+ * (VL1, []) <br>\n+ * (VL2, [VL2, VL3]) <br>\n+ * (VL3, [VL2, VL3, VL4]) <br>\n+ * (VL4, [VL3, VL4]) <br>\n+ * (VL5, []) <br>\n+ * (VL6, [VL6, VL7]) <br>\n+ * (VL7, [VL6, VL7]) <br>\n+ * <p>\n+ * For each non-visited VoltageLevel-key of the voltageLevelAdjacency Map all connected voltageLevels will be calculated  <br>\n+ * Two voltageLevels are connected if they are adjacent <br>\n+ * (allConnected method) <br>\n+ * All connected VoltageLevels to VL1 will be [VL1] <br>\n+ * All connected VoltageLevels to VL2 will be [VL2, VL3, VL4] <br>\n+ * All connected VoltageLevels to VL5 will be [VL5] <br>\n+ * All connected VoltageLevels to VL6 will be [VL6, VL7]\n+ * <p>\n+ * So the following voltageLevels should be merged <br>\n+ * [VL2, VL3, VL4] and the representative (IIDM voltageLevel) will be VL2 <br>\n+ * [VL6, VL7] and the representative (IIDM voltageLevel) will be VL6\n+ * <p>\n+ * And finally previous data is recorded in the voltageLevelMapping Map as <br>\n+ * (For each merged voltageLevel a record (merged voltageLevel, representative voltageLevel) is added) <br>\n+ * (VL3, VL2) <br>\n+ * (VL4, VL2) <br>\n+ * (VL7, VL6) <br>\n+ * <p>\n+ * The voltageLevelMapping Map will be used to assign the IIDM voltageLevel during the conversion process\n+ * <p>\n+ * The same algorithm is used to identify the substations that should be merged but: <br>\n+ * Two substations are adjacent if there is a transformer between them. <br>\n+ * The two substations associated with two adjacent voltageLevels, are adjacent if they are different substations.\n+ * <p>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n+\n public class SubstationIdMapping {\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    // All the keys for a given value, all the merged substations that have cgmesIdentifier as representative\n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // All the keys for a given value, all the merged voltageLevels that have cgmesIdentifier as representative\n+    public List<String> mergedVoltageLevels(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.entrySet().stream().filter(record -> record.getValue().equals(vlid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        Graph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcd8f2f57cc6d3552cad79800f38addb39c69bcb"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2MzA4MA==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r512163080", "createdAt": "2020-10-26T18:01:05Z", "author": {"login": "marqueslanauja"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -10,70 +10,302 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n-import org.jgrapht.Graph;\n-import org.jgrapht.alg.connectivity.ConnectivityInspector;\n-import org.jgrapht.graph.Pseudograph;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.powsybl.cgmes.model.CgmesNames;\n import com.powsybl.cgmes.model.CgmesTerminal;\n+import com.powsybl.commons.PowsyblException;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n+ * CGMES standard: <br>\n+ * A PowerTransformer is contained in one Substation, but it can connect a Terminal to another different Substation <br>\n+ * A Switch can connect to different voltageLevels\n+ * <p>\n+ * IIDM Model: <br>\n+ * Ends of transformers need to be in the same substation<br>\n+ * Ends of switches need to be in the same voltageLevel\n+ * <p>\n+ * Solution: <br>\n+ * CGMES substations that are connected by transformers will be mapped to a single IIDM substation <br>\n+ * CGMES voltageLevels that are connected by switches will be mapped to a single IIDM voltageLevel\n+ * <p>\n+ * Example: <br>\n+ * We suppose that VL1, VL2, VL3, VL4, VL5, VL6 and VL7 are CGMES voltageLevels, <br>\n+ * Sw23 is a switch connecting voltageLevels VL2 and VL3, <br>\n+ * Sw34 is a switch connecting voltageLevels VL3 and VL4 and <br>\n+ * Sw67 is a switch connecting voltageLevels VL6 and VL7\n+ * <p>\n+ * Steps: <br>\n+ * Fill voltageLevelAdjacency Map <br>\n+ * Two voltageLevels are adjacent if they are connected by a switch <br>\n+ * The voltageLevelAdjacency Map will include the following records <br>\n+ * (VL1, []) <br>\n+ * (VL2, [VL2, VL3]) <br>\n+ * (VL3, [VL2, VL3, VL4]) <br>\n+ * (VL4, [VL3, VL4]) <br>\n+ * (VL5, []) <br>\n+ * (VL6, [VL6, VL7]) <br>\n+ * (VL7, [VL6, VL7]) <br>\n+ * <p>\n+ * For each non-visited VoltageLevel-key of the voltageLevelAdjacency Map all connected voltageLevels will be calculated  <br>\n+ * Two voltageLevels are connected if they are adjacent <br>\n+ * (allConnected method) <br>\n+ * All connected VoltageLevels to VL1 will be [VL1] <br>\n+ * All connected VoltageLevels to VL2 will be [VL2, VL3, VL4] <br>\n+ * All connected VoltageLevels to VL5 will be [VL5] <br>\n+ * All connected VoltageLevels to VL6 will be [VL6, VL7]\n+ * <p>\n+ * So the following voltageLevels should be merged <br>\n+ * [VL2, VL3, VL4] and the representative (IIDM voltageLevel) will be VL2 <br>\n+ * [VL6, VL7] and the representative (IIDM voltageLevel) will be VL6\n+ * <p>\n+ * And finally previous data is recorded in the voltageLevelMapping Map as <br>\n+ * (For each merged voltageLevel a record (merged voltageLevel, representative voltageLevel) is added) <br>\n+ * (VL3, VL2) <br>\n+ * (VL4, VL2) <br>\n+ * (VL7, VL6) <br>\n+ * <p>\n+ * The voltageLevelMapping Map will be used to assign the IIDM voltageLevel during the conversion process\n+ * <p>\n+ * The same algorithm is used to identify the substations that should be merged but: <br>\n+ * Two substations are adjacent if there is a transformer between them. <br>\n+ * The two substations associated with two adjacent voltageLevels, are adjacent if they are different substations.\n+ * <p>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n+\n public class SubstationIdMapping {\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    // All the keys for a given value, all the merged substations that have cgmesIdentifier as representative\n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // All the keys for a given value, all the merged voltageLevels that have cgmesIdentifier as representative\n+    public List<String> mergedVoltageLevels(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.entrySet().stream().filter(record -> record.getValue().equals(vlid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        Graph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgwOTI1Nw=="}, "originalCommit": {"oid": "dcd8f2f57cc6d3552cad79800f38addb39c69bcb"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjYzMzQ3OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOTowOTo0NFrOHoGZsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODowMToyMlrOHob9pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgwOTk3MQ==", "bodyText": "Maybe this utility function is used elsewhere (maybe it already exists). Could we move it outside this class?", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r511809971", "createdAt": "2020-10-26T09:09:44Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -10,70 +10,302 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n-import org.jgrapht.Graph;\n-import org.jgrapht.alg.connectivity.ConnectivityInspector;\n-import org.jgrapht.graph.Pseudograph;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.powsybl.cgmes.model.CgmesNames;\n import com.powsybl.cgmes.model.CgmesTerminal;\n+import com.powsybl.commons.PowsyblException;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n+ * CGMES standard: <br>\n+ * A PowerTransformer is contained in one Substation, but it can connect a Terminal to another different Substation <br>\n+ * A Switch can connect to different voltageLevels\n+ * <p>\n+ * IIDM Model: <br>\n+ * Ends of transformers need to be in the same substation<br>\n+ * Ends of switches need to be in the same voltageLevel\n+ * <p>\n+ * Solution: <br>\n+ * CGMES substations that are connected by transformers will be mapped to a single IIDM substation <br>\n+ * CGMES voltageLevels that are connected by switches will be mapped to a single IIDM voltageLevel\n+ * <p>\n+ * Example: <br>\n+ * We suppose that VL1, VL2, VL3, VL4, VL5, VL6 and VL7 are CGMES voltageLevels, <br>\n+ * Sw23 is a switch connecting voltageLevels VL2 and VL3, <br>\n+ * Sw34 is a switch connecting voltageLevels VL3 and VL4 and <br>\n+ * Sw67 is a switch connecting voltageLevels VL6 and VL7\n+ * <p>\n+ * Steps: <br>\n+ * Fill voltageLevelAdjacency Map <br>\n+ * Two voltageLevels are adjacent if they are connected by a switch <br>\n+ * The voltageLevelAdjacency Map will include the following records <br>\n+ * (VL1, []) <br>\n+ * (VL2, [VL2, VL3]) <br>\n+ * (VL3, [VL2, VL3, VL4]) <br>\n+ * (VL4, [VL3, VL4]) <br>\n+ * (VL5, []) <br>\n+ * (VL6, [VL6, VL7]) <br>\n+ * (VL7, [VL6, VL7]) <br>\n+ * <p>\n+ * For each non-visited VoltageLevel-key of the voltageLevelAdjacency Map all connected voltageLevels will be calculated  <br>\n+ * Two voltageLevels are connected if they are adjacent <br>\n+ * (allConnected method) <br>\n+ * All connected VoltageLevels to VL1 will be [VL1] <br>\n+ * All connected VoltageLevels to VL2 will be [VL2, VL3, VL4] <br>\n+ * All connected VoltageLevels to VL5 will be [VL5] <br>\n+ * All connected VoltageLevels to VL6 will be [VL6, VL7]\n+ * <p>\n+ * So the following voltageLevels should be merged <br>\n+ * [VL2, VL3, VL4] and the representative (IIDM voltageLevel) will be VL2 <br>\n+ * [VL6, VL7] and the representative (IIDM voltageLevel) will be VL6\n+ * <p>\n+ * And finally previous data is recorded in the voltageLevelMapping Map as <br>\n+ * (For each merged voltageLevel a record (merged voltageLevel, representative voltageLevel) is added) <br>\n+ * (VL3, VL2) <br>\n+ * (VL4, VL2) <br>\n+ * (VL7, VL6) <br>\n+ * <p>\n+ * The voltageLevelMapping Map will be used to assign the IIDM voltageLevel during the conversion process\n+ * <p>\n+ * The same algorithm is used to identify the substations that should be merged but: <br>\n+ * Two substations are adjacent if there is a transformer between them. <br>\n+ * The two substations associated with two adjacent voltageLevels, are adjacent if they are different substations.\n+ * <p>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n+\n public class SubstationIdMapping {\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    // All the keys for a given value, all the merged substations that have cgmesIdentifier as representative\n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // All the keys for a given value, all the merged voltageLevels that have cgmesIdentifier as representative\n+    public List<String> mergedVoltageLevels(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.entrySet().stream().filter(record -> record.getValue().equals(vlid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        Graph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());\n+    }\n+\n+    // Two different voltageLevels are adjacent if they are connected by a switch\n+    // If the corresponding substations are different they are also adjacent\n+    private void addSwitch(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, PropertyBag sw) {\n+\n+        CgmesTerminal t1 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 1));\n+        String node1 = context.nodeBreaker() ? t1.connectivityNode() : t1.topologicalNode();\n+        String voltageLevelId1 = getVoltageLevelFromNode(node1, t1);\n+\n+        CgmesTerminal t2 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 2));\n+        String node2 = context.nodeBreaker() ? t2.connectivityNode() : t2.topologicalNode();\n+        String voltageLevelId2 = getVoltageLevelFromNode(node2, t2);\n+\n+        // Null could be received as voltageLevel at the boundary\n+        if (voltageLevelId1 == null || voltageLevelId2 == null || voltageLevelId1.equals(voltageLevelId2)) {\n+            return;\n+        }\n+        addAdjacency(voltageLevelAdjacency, voltageLevelId1, voltageLevelId2);\n+\n+        String substationId1 = context.cgmes().substation(t1, context.nodeBreaker());\n+        String substationId2 = context.cgmes().substation(t2, context.nodeBreaker());\n+\n+        // Null could be received as substation at the boundary\n+        if (substationId1 == null || substationId2 == null || substationId1.equals(substationId2)) {\n+            return;\n+        }\n+        addAdjacency(substationAdjacency, substationId1, substationId2);\n+    }\n+\n+    private String getVoltageLevelFromNode(String node, CgmesTerminal t) {\n+        String voltageLevelId = null;\n+        if (node != null && !context.boundary().containsNode(node)) {\n+            voltageLevelId = context.cgmes().voltageLevel(t, context.nodeBreaker());\n+        }\n+        return voltageLevelId;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcd8f2f57cc6d3552cad79800f38addb39c69bcb"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2MzIzOQ==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r512163239", "createdAt": "2020-10-26T18:01:22Z", "author": {"login": "marqueslanauja"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -10,70 +10,302 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n-import org.jgrapht.Graph;\n-import org.jgrapht.alg.connectivity.ConnectivityInspector;\n-import org.jgrapht.graph.Pseudograph;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.powsybl.cgmes.model.CgmesNames;\n import com.powsybl.cgmes.model.CgmesTerminal;\n+import com.powsybl.commons.PowsyblException;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n+ * CGMES standard: <br>\n+ * A PowerTransformer is contained in one Substation, but it can connect a Terminal to another different Substation <br>\n+ * A Switch can connect to different voltageLevels\n+ * <p>\n+ * IIDM Model: <br>\n+ * Ends of transformers need to be in the same substation<br>\n+ * Ends of switches need to be in the same voltageLevel\n+ * <p>\n+ * Solution: <br>\n+ * CGMES substations that are connected by transformers will be mapped to a single IIDM substation <br>\n+ * CGMES voltageLevels that are connected by switches will be mapped to a single IIDM voltageLevel\n+ * <p>\n+ * Example: <br>\n+ * We suppose that VL1, VL2, VL3, VL4, VL5, VL6 and VL7 are CGMES voltageLevels, <br>\n+ * Sw23 is a switch connecting voltageLevels VL2 and VL3, <br>\n+ * Sw34 is a switch connecting voltageLevels VL3 and VL4 and <br>\n+ * Sw67 is a switch connecting voltageLevels VL6 and VL7\n+ * <p>\n+ * Steps: <br>\n+ * Fill voltageLevelAdjacency Map <br>\n+ * Two voltageLevels are adjacent if they are connected by a switch <br>\n+ * The voltageLevelAdjacency Map will include the following records <br>\n+ * (VL1, []) <br>\n+ * (VL2, [VL2, VL3]) <br>\n+ * (VL3, [VL2, VL3, VL4]) <br>\n+ * (VL4, [VL3, VL4]) <br>\n+ * (VL5, []) <br>\n+ * (VL6, [VL6, VL7]) <br>\n+ * (VL7, [VL6, VL7]) <br>\n+ * <p>\n+ * For each non-visited VoltageLevel-key of the voltageLevelAdjacency Map all connected voltageLevels will be calculated  <br>\n+ * Two voltageLevels are connected if they are adjacent <br>\n+ * (allConnected method) <br>\n+ * All connected VoltageLevels to VL1 will be [VL1] <br>\n+ * All connected VoltageLevels to VL2 will be [VL2, VL3, VL4] <br>\n+ * All connected VoltageLevels to VL5 will be [VL5] <br>\n+ * All connected VoltageLevels to VL6 will be [VL6, VL7]\n+ * <p>\n+ * So the following voltageLevels should be merged <br>\n+ * [VL2, VL3, VL4] and the representative (IIDM voltageLevel) will be VL2 <br>\n+ * [VL6, VL7] and the representative (IIDM voltageLevel) will be VL6\n+ * <p>\n+ * And finally previous data is recorded in the voltageLevelMapping Map as <br>\n+ * (For each merged voltageLevel a record (merged voltageLevel, representative voltageLevel) is added) <br>\n+ * (VL3, VL2) <br>\n+ * (VL4, VL2) <br>\n+ * (VL7, VL6) <br>\n+ * <p>\n+ * The voltageLevelMapping Map will be used to assign the IIDM voltageLevel during the conversion process\n+ * <p>\n+ * The same algorithm is used to identify the substations that should be merged but: <br>\n+ * Two substations are adjacent if there is a transformer between them. <br>\n+ * The two substations associated with two adjacent voltageLevels, are adjacent if they are different substations.\n+ * <p>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n+\n public class SubstationIdMapping {\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    // All the keys for a given value, all the merged substations that have cgmesIdentifier as representative\n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // All the keys for a given value, all the merged voltageLevels that have cgmesIdentifier as representative\n+    public List<String> mergedVoltageLevels(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.entrySet().stream().filter(record -> record.getValue().equals(vlid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        Graph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());\n+    }\n+\n+    // Two different voltageLevels are adjacent if they are connected by a switch\n+    // If the corresponding substations are different they are also adjacent\n+    private void addSwitch(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, PropertyBag sw) {\n+\n+        CgmesTerminal t1 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 1));\n+        String node1 = context.nodeBreaker() ? t1.connectivityNode() : t1.topologicalNode();\n+        String voltageLevelId1 = getVoltageLevelFromNode(node1, t1);\n+\n+        CgmesTerminal t2 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 2));\n+        String node2 = context.nodeBreaker() ? t2.connectivityNode() : t2.topologicalNode();\n+        String voltageLevelId2 = getVoltageLevelFromNode(node2, t2);\n+\n+        // Null could be received as voltageLevel at the boundary\n+        if (voltageLevelId1 == null || voltageLevelId2 == null || voltageLevelId1.equals(voltageLevelId2)) {\n+            return;\n+        }\n+        addAdjacency(voltageLevelAdjacency, voltageLevelId1, voltageLevelId2);\n+\n+        String substationId1 = context.cgmes().substation(t1, context.nodeBreaker());\n+        String substationId2 = context.cgmes().substation(t2, context.nodeBreaker());\n+\n+        // Null could be received as substation at the boundary\n+        if (substationId1 == null || substationId2 == null || substationId1.equals(substationId2)) {\n+            return;\n+        }\n+        addAdjacency(substationAdjacency, substationId1, substationId2);\n+    }\n+\n+    private String getVoltageLevelFromNode(String node, CgmesTerminal t) {\n+        String voltageLevelId = null;\n+        if (node != null && !context.boundary().containsNode(node)) {\n+            voltageLevelId = context.cgmes().voltageLevel(t, context.nodeBreaker());\n+        }\n+        return voltageLevelId;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgwOTk3MQ=="}, "originalCommit": {"oid": "dcd8f2f57cc6d3552cad79800f38addb39c69bcb"}, "originalPosition": 218}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjY5MzA5OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOToyNDozOVrOHoG9Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODowNTozMFrOHocHaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxOTAxOQ==", "bodyText": "If sub(0)'s content is equal to sub(i)'s content, that means the two substations are the same? Why isn't sufficient enough to put the substations IDs in a set and call addAdjacency for all couple?\nWhen substationsIds contains three different values (3WT), I'm not sure your proposal works well: it creates the following association (0,1), (1, 0), (0, 2) and (2, 0) but not (1, 2) and (2, 1). Is it correct?", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r511819019", "createdAt": "2020-10-26T09:24:39Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -10,70 +10,302 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n-import org.jgrapht.Graph;\n-import org.jgrapht.alg.connectivity.ConnectivityInspector;\n-import org.jgrapht.graph.Pseudograph;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.powsybl.cgmes.model.CgmesNames;\n import com.powsybl.cgmes.model.CgmesTerminal;\n+import com.powsybl.commons.PowsyblException;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n+ * CGMES standard: <br>\n+ * A PowerTransformer is contained in one Substation, but it can connect a Terminal to another different Substation <br>\n+ * A Switch can connect to different voltageLevels\n+ * <p>\n+ * IIDM Model: <br>\n+ * Ends of transformers need to be in the same substation<br>\n+ * Ends of switches need to be in the same voltageLevel\n+ * <p>\n+ * Solution: <br>\n+ * CGMES substations that are connected by transformers will be mapped to a single IIDM substation <br>\n+ * CGMES voltageLevels that are connected by switches will be mapped to a single IIDM voltageLevel\n+ * <p>\n+ * Example: <br>\n+ * We suppose that VL1, VL2, VL3, VL4, VL5, VL6 and VL7 are CGMES voltageLevels, <br>\n+ * Sw23 is a switch connecting voltageLevels VL2 and VL3, <br>\n+ * Sw34 is a switch connecting voltageLevels VL3 and VL4 and <br>\n+ * Sw67 is a switch connecting voltageLevels VL6 and VL7\n+ * <p>\n+ * Steps: <br>\n+ * Fill voltageLevelAdjacency Map <br>\n+ * Two voltageLevels are adjacent if they are connected by a switch <br>\n+ * The voltageLevelAdjacency Map will include the following records <br>\n+ * (VL1, []) <br>\n+ * (VL2, [VL2, VL3]) <br>\n+ * (VL3, [VL2, VL3, VL4]) <br>\n+ * (VL4, [VL3, VL4]) <br>\n+ * (VL5, []) <br>\n+ * (VL6, [VL6, VL7]) <br>\n+ * (VL7, [VL6, VL7]) <br>\n+ * <p>\n+ * For each non-visited VoltageLevel-key of the voltageLevelAdjacency Map all connected voltageLevels will be calculated  <br>\n+ * Two voltageLevels are connected if they are adjacent <br>\n+ * (allConnected method) <br>\n+ * All connected VoltageLevels to VL1 will be [VL1] <br>\n+ * All connected VoltageLevels to VL2 will be [VL2, VL3, VL4] <br>\n+ * All connected VoltageLevels to VL5 will be [VL5] <br>\n+ * All connected VoltageLevels to VL6 will be [VL6, VL7]\n+ * <p>\n+ * So the following voltageLevels should be merged <br>\n+ * [VL2, VL3, VL4] and the representative (IIDM voltageLevel) will be VL2 <br>\n+ * [VL6, VL7] and the representative (IIDM voltageLevel) will be VL6\n+ * <p>\n+ * And finally previous data is recorded in the voltageLevelMapping Map as <br>\n+ * (For each merged voltageLevel a record (merged voltageLevel, representative voltageLevel) is added) <br>\n+ * (VL3, VL2) <br>\n+ * (VL4, VL2) <br>\n+ * (VL7, VL6) <br>\n+ * <p>\n+ * The voltageLevelMapping Map will be used to assign the IIDM voltageLevel during the conversion process\n+ * <p>\n+ * The same algorithm is used to identify the substations that should be merged but: <br>\n+ * Two substations are adjacent if there is a transformer between them. <br>\n+ * The two substations associated with two adjacent voltageLevels, are adjacent if they are different substations.\n+ * <p>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n+\n public class SubstationIdMapping {\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    // All the keys for a given value, all the merged substations that have cgmesIdentifier as representative\n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // All the keys for a given value, all the merged voltageLevels that have cgmesIdentifier as representative\n+    public List<String> mergedVoltageLevels(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.entrySet().stream().filter(record -> record.getValue().equals(vlid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        Graph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());\n+    }\n+\n+    // Two different voltageLevels are adjacent if they are connected by a switch\n+    // If the corresponding substations are different they are also adjacent\n+    private void addSwitch(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, PropertyBag sw) {\n+\n+        CgmesTerminal t1 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 1));\n+        String node1 = context.nodeBreaker() ? t1.connectivityNode() : t1.topologicalNode();\n+        String voltageLevelId1 = getVoltageLevelFromNode(node1, t1);\n+\n+        CgmesTerminal t2 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 2));\n+        String node2 = context.nodeBreaker() ? t2.connectivityNode() : t2.topologicalNode();\n+        String voltageLevelId2 = getVoltageLevelFromNode(node2, t2);\n+\n+        // Null could be received as voltageLevel at the boundary\n+        if (voltageLevelId1 == null || voltageLevelId2 == null || voltageLevelId1.equals(voltageLevelId2)) {\n+            return;\n+        }\n+        addAdjacency(voltageLevelAdjacency, voltageLevelId1, voltageLevelId2);\n+\n+        String substationId1 = context.cgmes().substation(t1, context.nodeBreaker());\n+        String substationId2 = context.cgmes().substation(t2, context.nodeBreaker());\n+\n+        // Null could be received as substation at the boundary\n+        if (substationId1 == null || substationId2 == null || substationId1.equals(substationId2)) {\n+            return;\n+        }\n+        addAdjacency(substationAdjacency, substationId1, substationId2);\n+    }\n+\n+    private String getVoltageLevelFromNode(String node, CgmesTerminal t) {\n+        String voltageLevelId = null;\n+        if (node != null && !context.boundary().containsNode(node)) {\n+            voltageLevelId = context.cgmes().voltageLevel(t, context.nodeBreaker());\n+        }\n+        return voltageLevelId;\n+    }\n+\n+    // Two different substations are adjacent if they are connected by a transformer\n+    private void addEnds(Map<String, List<String>> substationAdjacency, PropertyBags tends) {\n+        List<String> substationsIds = substationsIds(tends);\n+        if (substationsIds.size() <= 1) {\n+            return;\n+        }\n+        String sub0 = substationsIds.get(0);\n+        for (int i = 1; i < substationsIds.size(); i++) {\n+            String subi = substationsIds.get(i);\n+\n+            if (sub0.contentEquals(subi)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcd8f2f57cc6d3552cad79800f38addb39c69bcb"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2NTczNw==", "bodyText": "The code is ok. We only need to connect the three substations (0, 1, and 2), so associating the substation 0 with the substations 1 and 2 is enough.", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r512165737", "createdAt": "2020-10-26T18:05:30Z", "author": {"login": "marqueslanauja"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -10,70 +10,302 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n-import org.jgrapht.Graph;\n-import org.jgrapht.alg.connectivity.ConnectivityInspector;\n-import org.jgrapht.graph.Pseudograph;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.powsybl.cgmes.model.CgmesNames;\n import com.powsybl.cgmes.model.CgmesTerminal;\n+import com.powsybl.commons.PowsyblException;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n+ * CGMES standard: <br>\n+ * A PowerTransformer is contained in one Substation, but it can connect a Terminal to another different Substation <br>\n+ * A Switch can connect to different voltageLevels\n+ * <p>\n+ * IIDM Model: <br>\n+ * Ends of transformers need to be in the same substation<br>\n+ * Ends of switches need to be in the same voltageLevel\n+ * <p>\n+ * Solution: <br>\n+ * CGMES substations that are connected by transformers will be mapped to a single IIDM substation <br>\n+ * CGMES voltageLevels that are connected by switches will be mapped to a single IIDM voltageLevel\n+ * <p>\n+ * Example: <br>\n+ * We suppose that VL1, VL2, VL3, VL4, VL5, VL6 and VL7 are CGMES voltageLevels, <br>\n+ * Sw23 is a switch connecting voltageLevels VL2 and VL3, <br>\n+ * Sw34 is a switch connecting voltageLevels VL3 and VL4 and <br>\n+ * Sw67 is a switch connecting voltageLevels VL6 and VL7\n+ * <p>\n+ * Steps: <br>\n+ * Fill voltageLevelAdjacency Map <br>\n+ * Two voltageLevels are adjacent if they are connected by a switch <br>\n+ * The voltageLevelAdjacency Map will include the following records <br>\n+ * (VL1, []) <br>\n+ * (VL2, [VL2, VL3]) <br>\n+ * (VL3, [VL2, VL3, VL4]) <br>\n+ * (VL4, [VL3, VL4]) <br>\n+ * (VL5, []) <br>\n+ * (VL6, [VL6, VL7]) <br>\n+ * (VL7, [VL6, VL7]) <br>\n+ * <p>\n+ * For each non-visited VoltageLevel-key of the voltageLevelAdjacency Map all connected voltageLevels will be calculated  <br>\n+ * Two voltageLevels are connected if they are adjacent <br>\n+ * (allConnected method) <br>\n+ * All connected VoltageLevels to VL1 will be [VL1] <br>\n+ * All connected VoltageLevels to VL2 will be [VL2, VL3, VL4] <br>\n+ * All connected VoltageLevels to VL5 will be [VL5] <br>\n+ * All connected VoltageLevels to VL6 will be [VL6, VL7]\n+ * <p>\n+ * So the following voltageLevels should be merged <br>\n+ * [VL2, VL3, VL4] and the representative (IIDM voltageLevel) will be VL2 <br>\n+ * [VL6, VL7] and the representative (IIDM voltageLevel) will be VL6\n+ * <p>\n+ * And finally previous data is recorded in the voltageLevelMapping Map as <br>\n+ * (For each merged voltageLevel a record (merged voltageLevel, representative voltageLevel) is added) <br>\n+ * (VL3, VL2) <br>\n+ * (VL4, VL2) <br>\n+ * (VL7, VL6) <br>\n+ * <p>\n+ * The voltageLevelMapping Map will be used to assign the IIDM voltageLevel during the conversion process\n+ * <p>\n+ * The same algorithm is used to identify the substations that should be merged but: <br>\n+ * Two substations are adjacent if there is a transformer between them. <br>\n+ * The two substations associated with two adjacent voltageLevels, are adjacent if they are different substations.\n+ * <p>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n+\n public class SubstationIdMapping {\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    // All the keys for a given value, all the merged substations that have cgmesIdentifier as representative\n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // All the keys for a given value, all the merged voltageLevels that have cgmesIdentifier as representative\n+    public List<String> mergedVoltageLevels(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.entrySet().stream().filter(record -> record.getValue().equals(vlid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        Graph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());\n+    }\n+\n+    // Two different voltageLevels are adjacent if they are connected by a switch\n+    // If the corresponding substations are different they are also adjacent\n+    private void addSwitch(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, PropertyBag sw) {\n+\n+        CgmesTerminal t1 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 1));\n+        String node1 = context.nodeBreaker() ? t1.connectivityNode() : t1.topologicalNode();\n+        String voltageLevelId1 = getVoltageLevelFromNode(node1, t1);\n+\n+        CgmesTerminal t2 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 2));\n+        String node2 = context.nodeBreaker() ? t2.connectivityNode() : t2.topologicalNode();\n+        String voltageLevelId2 = getVoltageLevelFromNode(node2, t2);\n+\n+        // Null could be received as voltageLevel at the boundary\n+        if (voltageLevelId1 == null || voltageLevelId2 == null || voltageLevelId1.equals(voltageLevelId2)) {\n+            return;\n+        }\n+        addAdjacency(voltageLevelAdjacency, voltageLevelId1, voltageLevelId2);\n+\n+        String substationId1 = context.cgmes().substation(t1, context.nodeBreaker());\n+        String substationId2 = context.cgmes().substation(t2, context.nodeBreaker());\n+\n+        // Null could be received as substation at the boundary\n+        if (substationId1 == null || substationId2 == null || substationId1.equals(substationId2)) {\n+            return;\n+        }\n+        addAdjacency(substationAdjacency, substationId1, substationId2);\n+    }\n+\n+    private String getVoltageLevelFromNode(String node, CgmesTerminal t) {\n+        String voltageLevelId = null;\n+        if (node != null && !context.boundary().containsNode(node)) {\n+            voltageLevelId = context.cgmes().voltageLevel(t, context.nodeBreaker());\n+        }\n+        return voltageLevelId;\n+    }\n+\n+    // Two different substations are adjacent if they are connected by a transformer\n+    private void addEnds(Map<String, List<String>> substationAdjacency, PropertyBags tends) {\n+        List<String> substationsIds = substationsIds(tends);\n+        if (substationsIds.size() <= 1) {\n+            return;\n+        }\n+        String sub0 = substationsIds.get(0);\n+        for (int i = 1; i < substationsIds.size(); i++) {\n+            String subi = substationsIds.get(i);\n+\n+            if (sub0.contentEquals(subi)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxOTAxOQ=="}, "originalCommit": {"oid": "dcd8f2f57cc6d3552cad79800f38addb39c69bcb"}, "originalPosition": 230}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjY5NzU0OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOToyNTo0M1rOHoG_qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODowNTo1NFrOHocISw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxOTY5MA==", "bodyText": "Using lambda is not necessary here. Replace the forEach by a classic for-loop to increase readability, or use functional code as much as you can.", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r511819690", "createdAt": "2020-10-26T09:25:43Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -10,70 +10,302 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n-import org.jgrapht.Graph;\n-import org.jgrapht.alg.connectivity.ConnectivityInspector;\n-import org.jgrapht.graph.Pseudograph;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.powsybl.cgmes.model.CgmesNames;\n import com.powsybl.cgmes.model.CgmesTerminal;\n+import com.powsybl.commons.PowsyblException;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n+ * CGMES standard: <br>\n+ * A PowerTransformer is contained in one Substation, but it can connect a Terminal to another different Substation <br>\n+ * A Switch can connect to different voltageLevels\n+ * <p>\n+ * IIDM Model: <br>\n+ * Ends of transformers need to be in the same substation<br>\n+ * Ends of switches need to be in the same voltageLevel\n+ * <p>\n+ * Solution: <br>\n+ * CGMES substations that are connected by transformers will be mapped to a single IIDM substation <br>\n+ * CGMES voltageLevels that are connected by switches will be mapped to a single IIDM voltageLevel\n+ * <p>\n+ * Example: <br>\n+ * We suppose that VL1, VL2, VL3, VL4, VL5, VL6 and VL7 are CGMES voltageLevels, <br>\n+ * Sw23 is a switch connecting voltageLevels VL2 and VL3, <br>\n+ * Sw34 is a switch connecting voltageLevels VL3 and VL4 and <br>\n+ * Sw67 is a switch connecting voltageLevels VL6 and VL7\n+ * <p>\n+ * Steps: <br>\n+ * Fill voltageLevelAdjacency Map <br>\n+ * Two voltageLevels are adjacent if they are connected by a switch <br>\n+ * The voltageLevelAdjacency Map will include the following records <br>\n+ * (VL1, []) <br>\n+ * (VL2, [VL2, VL3]) <br>\n+ * (VL3, [VL2, VL3, VL4]) <br>\n+ * (VL4, [VL3, VL4]) <br>\n+ * (VL5, []) <br>\n+ * (VL6, [VL6, VL7]) <br>\n+ * (VL7, [VL6, VL7]) <br>\n+ * <p>\n+ * For each non-visited VoltageLevel-key of the voltageLevelAdjacency Map all connected voltageLevels will be calculated  <br>\n+ * Two voltageLevels are connected if they are adjacent <br>\n+ * (allConnected method) <br>\n+ * All connected VoltageLevels to VL1 will be [VL1] <br>\n+ * All connected VoltageLevels to VL2 will be [VL2, VL3, VL4] <br>\n+ * All connected VoltageLevels to VL5 will be [VL5] <br>\n+ * All connected VoltageLevels to VL6 will be [VL6, VL7]\n+ * <p>\n+ * So the following voltageLevels should be merged <br>\n+ * [VL2, VL3, VL4] and the representative (IIDM voltageLevel) will be VL2 <br>\n+ * [VL6, VL7] and the representative (IIDM voltageLevel) will be VL6\n+ * <p>\n+ * And finally previous data is recorded in the voltageLevelMapping Map as <br>\n+ * (For each merged voltageLevel a record (merged voltageLevel, representative voltageLevel) is added) <br>\n+ * (VL3, VL2) <br>\n+ * (VL4, VL2) <br>\n+ * (VL7, VL6) <br>\n+ * <p>\n+ * The voltageLevelMapping Map will be used to assign the IIDM voltageLevel during the conversion process\n+ * <p>\n+ * The same algorithm is used to identify the substations that should be merged but: <br>\n+ * Two substations are adjacent if there is a transformer between them. <br>\n+ * The two substations associated with two adjacent voltageLevels, are adjacent if they are different substations.\n+ * <p>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n+\n public class SubstationIdMapping {\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    // All the keys for a given value, all the merged substations that have cgmesIdentifier as representative\n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // All the keys for a given value, all the merged voltageLevels that have cgmesIdentifier as representative\n+    public List<String> mergedVoltageLevels(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.entrySet().stream().filter(record -> record.getValue().equals(vlid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        Graph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());\n+    }\n+\n+    // Two different voltageLevels are adjacent if they are connected by a switch\n+    // If the corresponding substations are different they are also adjacent\n+    private void addSwitch(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, PropertyBag sw) {\n+\n+        CgmesTerminal t1 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 1));\n+        String node1 = context.nodeBreaker() ? t1.connectivityNode() : t1.topologicalNode();\n+        String voltageLevelId1 = getVoltageLevelFromNode(node1, t1);\n+\n+        CgmesTerminal t2 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 2));\n+        String node2 = context.nodeBreaker() ? t2.connectivityNode() : t2.topologicalNode();\n+        String voltageLevelId2 = getVoltageLevelFromNode(node2, t2);\n+\n+        // Null could be received as voltageLevel at the boundary\n+        if (voltageLevelId1 == null || voltageLevelId2 == null || voltageLevelId1.equals(voltageLevelId2)) {\n+            return;\n+        }\n+        addAdjacency(voltageLevelAdjacency, voltageLevelId1, voltageLevelId2);\n+\n+        String substationId1 = context.cgmes().substation(t1, context.nodeBreaker());\n+        String substationId2 = context.cgmes().substation(t2, context.nodeBreaker());\n+\n+        // Null could be received as substation at the boundary\n+        if (substationId1 == null || substationId2 == null || substationId1.equals(substationId2)) {\n+            return;\n+        }\n+        addAdjacency(substationAdjacency, substationId1, substationId2);\n+    }\n+\n+    private String getVoltageLevelFromNode(String node, CgmesTerminal t) {\n+        String voltageLevelId = null;\n+        if (node != null && !context.boundary().containsNode(node)) {\n+            voltageLevelId = context.cgmes().voltageLevel(t, context.nodeBreaker());\n+        }\n+        return voltageLevelId;\n+    }\n+\n+    // Two different substations are adjacent if they are connected by a transformer\n+    private void addEnds(Map<String, List<String>> substationAdjacency, PropertyBags tends) {\n+        List<String> substationsIds = substationsIds(tends);\n+        if (substationsIds.size() <= 1) {\n+            return;\n+        }\n+        String sub0 = substationsIds.get(0);\n+        for (int i = 1; i < substationsIds.size(); i++) {\n+            String subi = substationsIds.get(i);\n+\n+            if (sub0.contentEquals(subi)) {\n+                continue;\n+            }\n+            addAdjacency(substationAdjacency, sub0, subi);\n+        }\n+    }\n+\n+    // Record in the adjacency Map that \"id1 is adjacent to id2\" and \"id2 is adjacent to id1\"\n+    private static void addAdjacency(Map<String, List<String>> adjacency, String id1, String id2) {\n+        List<String> ad1 = adjacency.get(id1);\n+        if (ad1 == null) {\n+            throw new PowsyblException(\"Unexpected reference to Substation or voltageLevel \" + id1\n+                + \". It has not been defined in CGMES substations / voltageLevels.\");\n+        }\n+        List<String> ad2 = adjacency.get(id2);\n+        if (ad2 == null) {\n+            throw new PowsyblException(\"Unexpected reference to Substation or voltageLevel \" + id2\n+                + \". It has not been defined in CGMES substations / voltageLevels.\");\n+        }\n+\n+        ad1.add(id2);\n+        ad2.add(id1);\n+    }\n+\n+    private void buildVoltageLevel(Map<String, List<String>> voltageLevelAdjacency) {\n+        Set<String> visitedVoltageLevels = new HashSet<>();\n+        voltageLevelAdjacency.keySet().forEach(vl -> {\n+            if (!visitedVoltageLevels.contains(vl)) {\n+                ArrayList<String> vlAds = allConnected(voltageLevelAdjacency, visitedVoltageLevels, vl);\n+                String selectedVoltageLevelId = representativeVoltageLevelId(vlAds);\n+                for (String voltageLevelId : vlAds) {\n+                    if (!voltageLevelId.equals(selectedVoltageLevelId)) {\n+                        voltageLevelMapping.put(voltageLevelId, selectedVoltageLevelId);\n                     }\n-                });\n-        if (!mapping.isEmpty()) {\n+                }\n+            }\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcd8f2f57cc6d3552cad79800f38addb39c69bcb"}, "originalPosition": 268}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2NTk2Mw==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r512165963", "createdAt": "2020-10-26T18:05:54Z", "author": {"login": "marqueslanauja"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -10,70 +10,302 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n-import org.jgrapht.Graph;\n-import org.jgrapht.alg.connectivity.ConnectivityInspector;\n-import org.jgrapht.graph.Pseudograph;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.powsybl.cgmes.model.CgmesNames;\n import com.powsybl.cgmes.model.CgmesTerminal;\n+import com.powsybl.commons.PowsyblException;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n+ * CGMES standard: <br>\n+ * A PowerTransformer is contained in one Substation, but it can connect a Terminal to another different Substation <br>\n+ * A Switch can connect to different voltageLevels\n+ * <p>\n+ * IIDM Model: <br>\n+ * Ends of transformers need to be in the same substation<br>\n+ * Ends of switches need to be in the same voltageLevel\n+ * <p>\n+ * Solution: <br>\n+ * CGMES substations that are connected by transformers will be mapped to a single IIDM substation <br>\n+ * CGMES voltageLevels that are connected by switches will be mapped to a single IIDM voltageLevel\n+ * <p>\n+ * Example: <br>\n+ * We suppose that VL1, VL2, VL3, VL4, VL5, VL6 and VL7 are CGMES voltageLevels, <br>\n+ * Sw23 is a switch connecting voltageLevels VL2 and VL3, <br>\n+ * Sw34 is a switch connecting voltageLevels VL3 and VL4 and <br>\n+ * Sw67 is a switch connecting voltageLevels VL6 and VL7\n+ * <p>\n+ * Steps: <br>\n+ * Fill voltageLevelAdjacency Map <br>\n+ * Two voltageLevels are adjacent if they are connected by a switch <br>\n+ * The voltageLevelAdjacency Map will include the following records <br>\n+ * (VL1, []) <br>\n+ * (VL2, [VL2, VL3]) <br>\n+ * (VL3, [VL2, VL3, VL4]) <br>\n+ * (VL4, [VL3, VL4]) <br>\n+ * (VL5, []) <br>\n+ * (VL6, [VL6, VL7]) <br>\n+ * (VL7, [VL6, VL7]) <br>\n+ * <p>\n+ * For each non-visited VoltageLevel-key of the voltageLevelAdjacency Map all connected voltageLevels will be calculated  <br>\n+ * Two voltageLevels are connected if they are adjacent <br>\n+ * (allConnected method) <br>\n+ * All connected VoltageLevels to VL1 will be [VL1] <br>\n+ * All connected VoltageLevels to VL2 will be [VL2, VL3, VL4] <br>\n+ * All connected VoltageLevels to VL5 will be [VL5] <br>\n+ * All connected VoltageLevels to VL6 will be [VL6, VL7]\n+ * <p>\n+ * So the following voltageLevels should be merged <br>\n+ * [VL2, VL3, VL4] and the representative (IIDM voltageLevel) will be VL2 <br>\n+ * [VL6, VL7] and the representative (IIDM voltageLevel) will be VL6\n+ * <p>\n+ * And finally previous data is recorded in the voltageLevelMapping Map as <br>\n+ * (For each merged voltageLevel a record (merged voltageLevel, representative voltageLevel) is added) <br>\n+ * (VL3, VL2) <br>\n+ * (VL4, VL2) <br>\n+ * (VL7, VL6) <br>\n+ * <p>\n+ * The voltageLevelMapping Map will be used to assign the IIDM voltageLevel during the conversion process\n+ * <p>\n+ * The same algorithm is used to identify the substations that should be merged but: <br>\n+ * Two substations are adjacent if there is a transformer between them. <br>\n+ * The two substations associated with two adjacent voltageLevels, are adjacent if they are different substations.\n+ * <p>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n+\n public class SubstationIdMapping {\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    // All the keys for a given value, all the merged substations that have cgmesIdentifier as representative\n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // All the keys for a given value, all the merged voltageLevels that have cgmesIdentifier as representative\n+    public List<String> mergedVoltageLevels(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.entrySet().stream().filter(record -> record.getValue().equals(vlid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        Graph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());\n+    }\n+\n+    // Two different voltageLevels are adjacent if they are connected by a switch\n+    // If the corresponding substations are different they are also adjacent\n+    private void addSwitch(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, PropertyBag sw) {\n+\n+        CgmesTerminal t1 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 1));\n+        String node1 = context.nodeBreaker() ? t1.connectivityNode() : t1.topologicalNode();\n+        String voltageLevelId1 = getVoltageLevelFromNode(node1, t1);\n+\n+        CgmesTerminal t2 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 2));\n+        String node2 = context.nodeBreaker() ? t2.connectivityNode() : t2.topologicalNode();\n+        String voltageLevelId2 = getVoltageLevelFromNode(node2, t2);\n+\n+        // Null could be received as voltageLevel at the boundary\n+        if (voltageLevelId1 == null || voltageLevelId2 == null || voltageLevelId1.equals(voltageLevelId2)) {\n+            return;\n+        }\n+        addAdjacency(voltageLevelAdjacency, voltageLevelId1, voltageLevelId2);\n+\n+        String substationId1 = context.cgmes().substation(t1, context.nodeBreaker());\n+        String substationId2 = context.cgmes().substation(t2, context.nodeBreaker());\n+\n+        // Null could be received as substation at the boundary\n+        if (substationId1 == null || substationId2 == null || substationId1.equals(substationId2)) {\n+            return;\n+        }\n+        addAdjacency(substationAdjacency, substationId1, substationId2);\n+    }\n+\n+    private String getVoltageLevelFromNode(String node, CgmesTerminal t) {\n+        String voltageLevelId = null;\n+        if (node != null && !context.boundary().containsNode(node)) {\n+            voltageLevelId = context.cgmes().voltageLevel(t, context.nodeBreaker());\n+        }\n+        return voltageLevelId;\n+    }\n+\n+    // Two different substations are adjacent if they are connected by a transformer\n+    private void addEnds(Map<String, List<String>> substationAdjacency, PropertyBags tends) {\n+        List<String> substationsIds = substationsIds(tends);\n+        if (substationsIds.size() <= 1) {\n+            return;\n+        }\n+        String sub0 = substationsIds.get(0);\n+        for (int i = 1; i < substationsIds.size(); i++) {\n+            String subi = substationsIds.get(i);\n+\n+            if (sub0.contentEquals(subi)) {\n+                continue;\n+            }\n+            addAdjacency(substationAdjacency, sub0, subi);\n+        }\n+    }\n+\n+    // Record in the adjacency Map that \"id1 is adjacent to id2\" and \"id2 is adjacent to id1\"\n+    private static void addAdjacency(Map<String, List<String>> adjacency, String id1, String id2) {\n+        List<String> ad1 = adjacency.get(id1);\n+        if (ad1 == null) {\n+            throw new PowsyblException(\"Unexpected reference to Substation or voltageLevel \" + id1\n+                + \". It has not been defined in CGMES substations / voltageLevels.\");\n+        }\n+        List<String> ad2 = adjacency.get(id2);\n+        if (ad2 == null) {\n+            throw new PowsyblException(\"Unexpected reference to Substation or voltageLevel \" + id2\n+                + \". It has not been defined in CGMES substations / voltageLevels.\");\n+        }\n+\n+        ad1.add(id2);\n+        ad2.add(id1);\n+    }\n+\n+    private void buildVoltageLevel(Map<String, List<String>> voltageLevelAdjacency) {\n+        Set<String> visitedVoltageLevels = new HashSet<>();\n+        voltageLevelAdjacency.keySet().forEach(vl -> {\n+            if (!visitedVoltageLevels.contains(vl)) {\n+                ArrayList<String> vlAds = allConnected(voltageLevelAdjacency, visitedVoltageLevels, vl);\n+                String selectedVoltageLevelId = representativeVoltageLevelId(vlAds);\n+                for (String voltageLevelId : vlAds) {\n+                    if (!voltageLevelId.equals(selectedVoltageLevelId)) {\n+                        voltageLevelMapping.put(voltageLevelId, selectedVoltageLevelId);\n                     }\n-                });\n-        if (!mapping.isEmpty()) {\n+                }\n+            }\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxOTY5MA=="}, "originalCommit": {"oid": "dcd8f2f57cc6d3552cad79800f38addb39c69bcb"}, "originalPosition": 268}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjcwMDY0OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOToyNjozNFrOHoHBlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODowNjowNVrOHocIwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyMDE4Mw==", "bodyText": "Same remark here", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r511820183", "createdAt": "2020-10-26T09:26:34Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -10,70 +10,302 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n-import org.jgrapht.Graph;\n-import org.jgrapht.alg.connectivity.ConnectivityInspector;\n-import org.jgrapht.graph.Pseudograph;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.powsybl.cgmes.model.CgmesNames;\n import com.powsybl.cgmes.model.CgmesTerminal;\n+import com.powsybl.commons.PowsyblException;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n+ * CGMES standard: <br>\n+ * A PowerTransformer is contained in one Substation, but it can connect a Terminal to another different Substation <br>\n+ * A Switch can connect to different voltageLevels\n+ * <p>\n+ * IIDM Model: <br>\n+ * Ends of transformers need to be in the same substation<br>\n+ * Ends of switches need to be in the same voltageLevel\n+ * <p>\n+ * Solution: <br>\n+ * CGMES substations that are connected by transformers will be mapped to a single IIDM substation <br>\n+ * CGMES voltageLevels that are connected by switches will be mapped to a single IIDM voltageLevel\n+ * <p>\n+ * Example: <br>\n+ * We suppose that VL1, VL2, VL3, VL4, VL5, VL6 and VL7 are CGMES voltageLevels, <br>\n+ * Sw23 is a switch connecting voltageLevels VL2 and VL3, <br>\n+ * Sw34 is a switch connecting voltageLevels VL3 and VL4 and <br>\n+ * Sw67 is a switch connecting voltageLevels VL6 and VL7\n+ * <p>\n+ * Steps: <br>\n+ * Fill voltageLevelAdjacency Map <br>\n+ * Two voltageLevels are adjacent if they are connected by a switch <br>\n+ * The voltageLevelAdjacency Map will include the following records <br>\n+ * (VL1, []) <br>\n+ * (VL2, [VL2, VL3]) <br>\n+ * (VL3, [VL2, VL3, VL4]) <br>\n+ * (VL4, [VL3, VL4]) <br>\n+ * (VL5, []) <br>\n+ * (VL6, [VL6, VL7]) <br>\n+ * (VL7, [VL6, VL7]) <br>\n+ * <p>\n+ * For each non-visited VoltageLevel-key of the voltageLevelAdjacency Map all connected voltageLevels will be calculated  <br>\n+ * Two voltageLevels are connected if they are adjacent <br>\n+ * (allConnected method) <br>\n+ * All connected VoltageLevels to VL1 will be [VL1] <br>\n+ * All connected VoltageLevels to VL2 will be [VL2, VL3, VL4] <br>\n+ * All connected VoltageLevels to VL5 will be [VL5] <br>\n+ * All connected VoltageLevels to VL6 will be [VL6, VL7]\n+ * <p>\n+ * So the following voltageLevels should be merged <br>\n+ * [VL2, VL3, VL4] and the representative (IIDM voltageLevel) will be VL2 <br>\n+ * [VL6, VL7] and the representative (IIDM voltageLevel) will be VL6\n+ * <p>\n+ * And finally previous data is recorded in the voltageLevelMapping Map as <br>\n+ * (For each merged voltageLevel a record (merged voltageLevel, representative voltageLevel) is added) <br>\n+ * (VL3, VL2) <br>\n+ * (VL4, VL2) <br>\n+ * (VL7, VL6) <br>\n+ * <p>\n+ * The voltageLevelMapping Map will be used to assign the IIDM voltageLevel during the conversion process\n+ * <p>\n+ * The same algorithm is used to identify the substations that should be merged but: <br>\n+ * Two substations are adjacent if there is a transformer between them. <br>\n+ * The two substations associated with two adjacent voltageLevels, are adjacent if they are different substations.\n+ * <p>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n+\n public class SubstationIdMapping {\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    // All the keys for a given value, all the merged substations that have cgmesIdentifier as representative\n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // All the keys for a given value, all the merged voltageLevels that have cgmesIdentifier as representative\n+    public List<String> mergedVoltageLevels(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.entrySet().stream().filter(record -> record.getValue().equals(vlid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        Graph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());\n+    }\n+\n+    // Two different voltageLevels are adjacent if they are connected by a switch\n+    // If the corresponding substations are different they are also adjacent\n+    private void addSwitch(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, PropertyBag sw) {\n+\n+        CgmesTerminal t1 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 1));\n+        String node1 = context.nodeBreaker() ? t1.connectivityNode() : t1.topologicalNode();\n+        String voltageLevelId1 = getVoltageLevelFromNode(node1, t1);\n+\n+        CgmesTerminal t2 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 2));\n+        String node2 = context.nodeBreaker() ? t2.connectivityNode() : t2.topologicalNode();\n+        String voltageLevelId2 = getVoltageLevelFromNode(node2, t2);\n+\n+        // Null could be received as voltageLevel at the boundary\n+        if (voltageLevelId1 == null || voltageLevelId2 == null || voltageLevelId1.equals(voltageLevelId2)) {\n+            return;\n+        }\n+        addAdjacency(voltageLevelAdjacency, voltageLevelId1, voltageLevelId2);\n+\n+        String substationId1 = context.cgmes().substation(t1, context.nodeBreaker());\n+        String substationId2 = context.cgmes().substation(t2, context.nodeBreaker());\n+\n+        // Null could be received as substation at the boundary\n+        if (substationId1 == null || substationId2 == null || substationId1.equals(substationId2)) {\n+            return;\n+        }\n+        addAdjacency(substationAdjacency, substationId1, substationId2);\n+    }\n+\n+    private String getVoltageLevelFromNode(String node, CgmesTerminal t) {\n+        String voltageLevelId = null;\n+        if (node != null && !context.boundary().containsNode(node)) {\n+            voltageLevelId = context.cgmes().voltageLevel(t, context.nodeBreaker());\n+        }\n+        return voltageLevelId;\n+    }\n+\n+    // Two different substations are adjacent if they are connected by a transformer\n+    private void addEnds(Map<String, List<String>> substationAdjacency, PropertyBags tends) {\n+        List<String> substationsIds = substationsIds(tends);\n+        if (substationsIds.size() <= 1) {\n+            return;\n+        }\n+        String sub0 = substationsIds.get(0);\n+        for (int i = 1; i < substationsIds.size(); i++) {\n+            String subi = substationsIds.get(i);\n+\n+            if (sub0.contentEquals(subi)) {\n+                continue;\n+            }\n+            addAdjacency(substationAdjacency, sub0, subi);\n+        }\n+    }\n+\n+    // Record in the adjacency Map that \"id1 is adjacent to id2\" and \"id2 is adjacent to id1\"\n+    private static void addAdjacency(Map<String, List<String>> adjacency, String id1, String id2) {\n+        List<String> ad1 = adjacency.get(id1);\n+        if (ad1 == null) {\n+            throw new PowsyblException(\"Unexpected reference to Substation or voltageLevel \" + id1\n+                + \". It has not been defined in CGMES substations / voltageLevels.\");\n+        }\n+        List<String> ad2 = adjacency.get(id2);\n+        if (ad2 == null) {\n+            throw new PowsyblException(\"Unexpected reference to Substation or voltageLevel \" + id2\n+                + \". It has not been defined in CGMES substations / voltageLevels.\");\n+        }\n+\n+        ad1.add(id2);\n+        ad2.add(id1);\n+    }\n+\n+    private void buildVoltageLevel(Map<String, List<String>> voltageLevelAdjacency) {\n+        Set<String> visitedVoltageLevels = new HashSet<>();\n+        voltageLevelAdjacency.keySet().forEach(vl -> {\n+            if (!visitedVoltageLevels.contains(vl)) {\n+                ArrayList<String> vlAds = allConnected(voltageLevelAdjacency, visitedVoltageLevels, vl);\n+                String selectedVoltageLevelId = representativeVoltageLevelId(vlAds);\n+                for (String voltageLevelId : vlAds) {\n+                    if (!voltageLevelId.equals(selectedVoltageLevelId)) {\n+                        voltageLevelMapping.put(voltageLevelId, selectedVoltageLevelId);\n                     }\n-                });\n-        if (!mapping.isEmpty()) {\n+                }\n+            }\n+        });\n+        if (!voltageLevelMapping.isEmpty()) {\n+            LOG.warn(\"VoltageLevel id mapping needed for {} voltageLevels: {}\",\n+                voltageLevelMapping.size(), voltageLevelMapping);\n+        }\n+    }\n+\n+    private void buildSubstation(Map<String, List<String>> substationAdjacency) {\n+        Set<String> visitedSubstations = new HashSet<>();\n+        substationAdjacency.keySet().forEach(sub -> {\n+            if (!visitedSubstations.contains(sub)) {\n+                ArrayList<String> subAds = allConnected(substationAdjacency, visitedSubstations, sub);\n+\n+                String selectedSubstationId = representativeSubstationId(subAds);\n+                for (String substationId : subAds) {\n+                    if (!substationId.equals(selectedSubstationId)) {\n+                        substationMapping.put(substationId, selectedSubstationId);\n+                    }\n+                }\n+            }\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcd8f2f57cc6d3552cad79800f38addb39c69bcb"}, "originalPosition": 288}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2NjA4MQ==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r512166081", "createdAt": "2020-10-26T18:06:05Z", "author": {"login": "marqueslanauja"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -10,70 +10,302 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n-import org.jgrapht.Graph;\n-import org.jgrapht.alg.connectivity.ConnectivityInspector;\n-import org.jgrapht.graph.Pseudograph;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.powsybl.cgmes.model.CgmesNames;\n import com.powsybl.cgmes.model.CgmesTerminal;\n+import com.powsybl.commons.PowsyblException;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n+ * CGMES standard: <br>\n+ * A PowerTransformer is contained in one Substation, but it can connect a Terminal to another different Substation <br>\n+ * A Switch can connect to different voltageLevels\n+ * <p>\n+ * IIDM Model: <br>\n+ * Ends of transformers need to be in the same substation<br>\n+ * Ends of switches need to be in the same voltageLevel\n+ * <p>\n+ * Solution: <br>\n+ * CGMES substations that are connected by transformers will be mapped to a single IIDM substation <br>\n+ * CGMES voltageLevels that are connected by switches will be mapped to a single IIDM voltageLevel\n+ * <p>\n+ * Example: <br>\n+ * We suppose that VL1, VL2, VL3, VL4, VL5, VL6 and VL7 are CGMES voltageLevels, <br>\n+ * Sw23 is a switch connecting voltageLevels VL2 and VL3, <br>\n+ * Sw34 is a switch connecting voltageLevels VL3 and VL4 and <br>\n+ * Sw67 is a switch connecting voltageLevels VL6 and VL7\n+ * <p>\n+ * Steps: <br>\n+ * Fill voltageLevelAdjacency Map <br>\n+ * Two voltageLevels are adjacent if they are connected by a switch <br>\n+ * The voltageLevelAdjacency Map will include the following records <br>\n+ * (VL1, []) <br>\n+ * (VL2, [VL2, VL3]) <br>\n+ * (VL3, [VL2, VL3, VL4]) <br>\n+ * (VL4, [VL3, VL4]) <br>\n+ * (VL5, []) <br>\n+ * (VL6, [VL6, VL7]) <br>\n+ * (VL7, [VL6, VL7]) <br>\n+ * <p>\n+ * For each non-visited VoltageLevel-key of the voltageLevelAdjacency Map all connected voltageLevels will be calculated  <br>\n+ * Two voltageLevels are connected if they are adjacent <br>\n+ * (allConnected method) <br>\n+ * All connected VoltageLevels to VL1 will be [VL1] <br>\n+ * All connected VoltageLevels to VL2 will be [VL2, VL3, VL4] <br>\n+ * All connected VoltageLevels to VL5 will be [VL5] <br>\n+ * All connected VoltageLevels to VL6 will be [VL6, VL7]\n+ * <p>\n+ * So the following voltageLevels should be merged <br>\n+ * [VL2, VL3, VL4] and the representative (IIDM voltageLevel) will be VL2 <br>\n+ * [VL6, VL7] and the representative (IIDM voltageLevel) will be VL6\n+ * <p>\n+ * And finally previous data is recorded in the voltageLevelMapping Map as <br>\n+ * (For each merged voltageLevel a record (merged voltageLevel, representative voltageLevel) is added) <br>\n+ * (VL3, VL2) <br>\n+ * (VL4, VL2) <br>\n+ * (VL7, VL6) <br>\n+ * <p>\n+ * The voltageLevelMapping Map will be used to assign the IIDM voltageLevel during the conversion process\n+ * <p>\n+ * The same algorithm is used to identify the substations that should be merged but: <br>\n+ * Two substations are adjacent if there is a transformer between them. <br>\n+ * The two substations associated with two adjacent voltageLevels, are adjacent if they are different substations.\n+ * <p>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n+\n public class SubstationIdMapping {\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    // All the keys for a given value, all the merged substations that have cgmesIdentifier as representative\n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // All the keys for a given value, all the merged voltageLevels that have cgmesIdentifier as representative\n+    public List<String> mergedVoltageLevels(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.entrySet().stream().filter(record -> record.getValue().equals(vlid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        Graph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());\n+    }\n+\n+    // Two different voltageLevels are adjacent if they are connected by a switch\n+    // If the corresponding substations are different they are also adjacent\n+    private void addSwitch(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, PropertyBag sw) {\n+\n+        CgmesTerminal t1 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 1));\n+        String node1 = context.nodeBreaker() ? t1.connectivityNode() : t1.topologicalNode();\n+        String voltageLevelId1 = getVoltageLevelFromNode(node1, t1);\n+\n+        CgmesTerminal t2 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 2));\n+        String node2 = context.nodeBreaker() ? t2.connectivityNode() : t2.topologicalNode();\n+        String voltageLevelId2 = getVoltageLevelFromNode(node2, t2);\n+\n+        // Null could be received as voltageLevel at the boundary\n+        if (voltageLevelId1 == null || voltageLevelId2 == null || voltageLevelId1.equals(voltageLevelId2)) {\n+            return;\n+        }\n+        addAdjacency(voltageLevelAdjacency, voltageLevelId1, voltageLevelId2);\n+\n+        String substationId1 = context.cgmes().substation(t1, context.nodeBreaker());\n+        String substationId2 = context.cgmes().substation(t2, context.nodeBreaker());\n+\n+        // Null could be received as substation at the boundary\n+        if (substationId1 == null || substationId2 == null || substationId1.equals(substationId2)) {\n+            return;\n+        }\n+        addAdjacency(substationAdjacency, substationId1, substationId2);\n+    }\n+\n+    private String getVoltageLevelFromNode(String node, CgmesTerminal t) {\n+        String voltageLevelId = null;\n+        if (node != null && !context.boundary().containsNode(node)) {\n+            voltageLevelId = context.cgmes().voltageLevel(t, context.nodeBreaker());\n+        }\n+        return voltageLevelId;\n+    }\n+\n+    // Two different substations are adjacent if they are connected by a transformer\n+    private void addEnds(Map<String, List<String>> substationAdjacency, PropertyBags tends) {\n+        List<String> substationsIds = substationsIds(tends);\n+        if (substationsIds.size() <= 1) {\n+            return;\n+        }\n+        String sub0 = substationsIds.get(0);\n+        for (int i = 1; i < substationsIds.size(); i++) {\n+            String subi = substationsIds.get(i);\n+\n+            if (sub0.contentEquals(subi)) {\n+                continue;\n+            }\n+            addAdjacency(substationAdjacency, sub0, subi);\n+        }\n+    }\n+\n+    // Record in the adjacency Map that \"id1 is adjacent to id2\" and \"id2 is adjacent to id1\"\n+    private static void addAdjacency(Map<String, List<String>> adjacency, String id1, String id2) {\n+        List<String> ad1 = adjacency.get(id1);\n+        if (ad1 == null) {\n+            throw new PowsyblException(\"Unexpected reference to Substation or voltageLevel \" + id1\n+                + \". It has not been defined in CGMES substations / voltageLevels.\");\n+        }\n+        List<String> ad2 = adjacency.get(id2);\n+        if (ad2 == null) {\n+            throw new PowsyblException(\"Unexpected reference to Substation or voltageLevel \" + id2\n+                + \". It has not been defined in CGMES substations / voltageLevels.\");\n+        }\n+\n+        ad1.add(id2);\n+        ad2.add(id1);\n+    }\n+\n+    private void buildVoltageLevel(Map<String, List<String>> voltageLevelAdjacency) {\n+        Set<String> visitedVoltageLevels = new HashSet<>();\n+        voltageLevelAdjacency.keySet().forEach(vl -> {\n+            if (!visitedVoltageLevels.contains(vl)) {\n+                ArrayList<String> vlAds = allConnected(voltageLevelAdjacency, visitedVoltageLevels, vl);\n+                String selectedVoltageLevelId = representativeVoltageLevelId(vlAds);\n+                for (String voltageLevelId : vlAds) {\n+                    if (!voltageLevelId.equals(selectedVoltageLevelId)) {\n+                        voltageLevelMapping.put(voltageLevelId, selectedVoltageLevelId);\n                     }\n-                });\n-        if (!mapping.isEmpty()) {\n+                }\n+            }\n+        });\n+        if (!voltageLevelMapping.isEmpty()) {\n+            LOG.warn(\"VoltageLevel id mapping needed for {} voltageLevels: {}\",\n+                voltageLevelMapping.size(), voltageLevelMapping);\n+        }\n+    }\n+\n+    private void buildSubstation(Map<String, List<String>> substationAdjacency) {\n+        Set<String> visitedSubstations = new HashSet<>();\n+        substationAdjacency.keySet().forEach(sub -> {\n+            if (!visitedSubstations.contains(sub)) {\n+                ArrayList<String> subAds = allConnected(substationAdjacency, visitedSubstations, sub);\n+\n+                String selectedSubstationId = representativeSubstationId(subAds);\n+                for (String substationId : subAds) {\n+                    if (!substationId.equals(selectedSubstationId)) {\n+                        substationMapping.put(substationId, selectedSubstationId);\n+                    }\n+                }\n+            }\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyMDE4Mw=="}, "originalCommit": {"oid": "dcd8f2f57cc6d3552cad79800f38addb39c69bcb"}, "originalPosition": 288}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjcwNDI5OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOToyNzoyN1rOHoHDtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODoxMTowOVrOHocVNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyMDcyNQ==", "bodyText": "See my previous comment: using a set instead of a list will make this algorithm more efficient", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r511820725", "createdAt": "2020-10-26T09:27:27Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -10,70 +10,302 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n-import org.jgrapht.Graph;\n-import org.jgrapht.alg.connectivity.ConnectivityInspector;\n-import org.jgrapht.graph.Pseudograph;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.powsybl.cgmes.model.CgmesNames;\n import com.powsybl.cgmes.model.CgmesTerminal;\n+import com.powsybl.commons.PowsyblException;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n+ * CGMES standard: <br>\n+ * A PowerTransformer is contained in one Substation, but it can connect a Terminal to another different Substation <br>\n+ * A Switch can connect to different voltageLevels\n+ * <p>\n+ * IIDM Model: <br>\n+ * Ends of transformers need to be in the same substation<br>\n+ * Ends of switches need to be in the same voltageLevel\n+ * <p>\n+ * Solution: <br>\n+ * CGMES substations that are connected by transformers will be mapped to a single IIDM substation <br>\n+ * CGMES voltageLevels that are connected by switches will be mapped to a single IIDM voltageLevel\n+ * <p>\n+ * Example: <br>\n+ * We suppose that VL1, VL2, VL3, VL4, VL5, VL6 and VL7 are CGMES voltageLevels, <br>\n+ * Sw23 is a switch connecting voltageLevels VL2 and VL3, <br>\n+ * Sw34 is a switch connecting voltageLevels VL3 and VL4 and <br>\n+ * Sw67 is a switch connecting voltageLevels VL6 and VL7\n+ * <p>\n+ * Steps: <br>\n+ * Fill voltageLevelAdjacency Map <br>\n+ * Two voltageLevels are adjacent if they are connected by a switch <br>\n+ * The voltageLevelAdjacency Map will include the following records <br>\n+ * (VL1, []) <br>\n+ * (VL2, [VL2, VL3]) <br>\n+ * (VL3, [VL2, VL3, VL4]) <br>\n+ * (VL4, [VL3, VL4]) <br>\n+ * (VL5, []) <br>\n+ * (VL6, [VL6, VL7]) <br>\n+ * (VL7, [VL6, VL7]) <br>\n+ * <p>\n+ * For each non-visited VoltageLevel-key of the voltageLevelAdjacency Map all connected voltageLevels will be calculated  <br>\n+ * Two voltageLevels are connected if they are adjacent <br>\n+ * (allConnected method) <br>\n+ * All connected VoltageLevels to VL1 will be [VL1] <br>\n+ * All connected VoltageLevels to VL2 will be [VL2, VL3, VL4] <br>\n+ * All connected VoltageLevels to VL5 will be [VL5] <br>\n+ * All connected VoltageLevels to VL6 will be [VL6, VL7]\n+ * <p>\n+ * So the following voltageLevels should be merged <br>\n+ * [VL2, VL3, VL4] and the representative (IIDM voltageLevel) will be VL2 <br>\n+ * [VL6, VL7] and the representative (IIDM voltageLevel) will be VL6\n+ * <p>\n+ * And finally previous data is recorded in the voltageLevelMapping Map as <br>\n+ * (For each merged voltageLevel a record (merged voltageLevel, representative voltageLevel) is added) <br>\n+ * (VL3, VL2) <br>\n+ * (VL4, VL2) <br>\n+ * (VL7, VL6) <br>\n+ * <p>\n+ * The voltageLevelMapping Map will be used to assign the IIDM voltageLevel during the conversion process\n+ * <p>\n+ * The same algorithm is used to identify the substations that should be merged but: <br>\n+ * Two substations are adjacent if there is a transformer between them. <br>\n+ * The two substations associated with two adjacent voltageLevels, are adjacent if they are different substations.\n+ * <p>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n+\n public class SubstationIdMapping {\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    // All the keys for a given value, all the merged substations that have cgmesIdentifier as representative\n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // All the keys for a given value, all the merged voltageLevels that have cgmesIdentifier as representative\n+    public List<String> mergedVoltageLevels(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.entrySet().stream().filter(record -> record.getValue().equals(vlid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        Graph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());\n+    }\n+\n+    // Two different voltageLevels are adjacent if they are connected by a switch\n+    // If the corresponding substations are different they are also adjacent\n+    private void addSwitch(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, PropertyBag sw) {\n+\n+        CgmesTerminal t1 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 1));\n+        String node1 = context.nodeBreaker() ? t1.connectivityNode() : t1.topologicalNode();\n+        String voltageLevelId1 = getVoltageLevelFromNode(node1, t1);\n+\n+        CgmesTerminal t2 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 2));\n+        String node2 = context.nodeBreaker() ? t2.connectivityNode() : t2.topologicalNode();\n+        String voltageLevelId2 = getVoltageLevelFromNode(node2, t2);\n+\n+        // Null could be received as voltageLevel at the boundary\n+        if (voltageLevelId1 == null || voltageLevelId2 == null || voltageLevelId1.equals(voltageLevelId2)) {\n+            return;\n+        }\n+        addAdjacency(voltageLevelAdjacency, voltageLevelId1, voltageLevelId2);\n+\n+        String substationId1 = context.cgmes().substation(t1, context.nodeBreaker());\n+        String substationId2 = context.cgmes().substation(t2, context.nodeBreaker());\n+\n+        // Null could be received as substation at the boundary\n+        if (substationId1 == null || substationId2 == null || substationId1.equals(substationId2)) {\n+            return;\n+        }\n+        addAdjacency(substationAdjacency, substationId1, substationId2);\n+    }\n+\n+    private String getVoltageLevelFromNode(String node, CgmesTerminal t) {\n+        String voltageLevelId = null;\n+        if (node != null && !context.boundary().containsNode(node)) {\n+            voltageLevelId = context.cgmes().voltageLevel(t, context.nodeBreaker());\n+        }\n+        return voltageLevelId;\n+    }\n+\n+    // Two different substations are adjacent if they are connected by a transformer\n+    private void addEnds(Map<String, List<String>> substationAdjacency, PropertyBags tends) {\n+        List<String> substationsIds = substationsIds(tends);\n+        if (substationsIds.size() <= 1) {\n+            return;\n+        }\n+        String sub0 = substationsIds.get(0);\n+        for (int i = 1; i < substationsIds.size(); i++) {\n+            String subi = substationsIds.get(i);\n+\n+            if (sub0.contentEquals(subi)) {\n+                continue;\n+            }\n+            addAdjacency(substationAdjacency, sub0, subi);\n+        }\n+    }\n+\n+    // Record in the adjacency Map that \"id1 is adjacent to id2\" and \"id2 is adjacent to id1\"\n+    private static void addAdjacency(Map<String, List<String>> adjacency, String id1, String id2) {\n+        List<String> ad1 = adjacency.get(id1);\n+        if (ad1 == null) {\n+            throw new PowsyblException(\"Unexpected reference to Substation or voltageLevel \" + id1\n+                + \". It has not been defined in CGMES substations / voltageLevels.\");\n+        }\n+        List<String> ad2 = adjacency.get(id2);\n+        if (ad2 == null) {\n+            throw new PowsyblException(\"Unexpected reference to Substation or voltageLevel \" + id2\n+                + \". It has not been defined in CGMES substations / voltageLevels.\");\n+        }\n+\n+        ad1.add(id2);\n+        ad2.add(id1);\n+    }\n+\n+    private void buildVoltageLevel(Map<String, List<String>> voltageLevelAdjacency) {\n+        Set<String> visitedVoltageLevels = new HashSet<>();\n+        voltageLevelAdjacency.keySet().forEach(vl -> {\n+            if (!visitedVoltageLevels.contains(vl)) {\n+                ArrayList<String> vlAds = allConnected(voltageLevelAdjacency, visitedVoltageLevels, vl);\n+                String selectedVoltageLevelId = representativeVoltageLevelId(vlAds);\n+                for (String voltageLevelId : vlAds) {\n+                    if (!voltageLevelId.equals(selectedVoltageLevelId)) {\n+                        voltageLevelMapping.put(voltageLevelId, selectedVoltageLevelId);\n                     }\n-                });\n-        if (!mapping.isEmpty()) {\n+                }\n+            }\n+        });\n+        if (!voltageLevelMapping.isEmpty()) {\n+            LOG.warn(\"VoltageLevel id mapping needed for {} voltageLevels: {}\",\n+                voltageLevelMapping.size(), voltageLevelMapping);\n+        }\n+    }\n+\n+    private void buildSubstation(Map<String, List<String>> substationAdjacency) {\n+        Set<String> visitedSubstations = new HashSet<>();\n+        substationAdjacency.keySet().forEach(sub -> {\n+            if (!visitedSubstations.contains(sub)) {\n+                ArrayList<String> subAds = allConnected(substationAdjacency, visitedSubstations, sub);\n+\n+                String selectedSubstationId = representativeSubstationId(subAds);\n+                for (String substationId : subAds) {\n+                    if (!substationId.equals(selectedSubstationId)) {\n+                        substationMapping.put(substationId, selectedSubstationId);\n+                    }\n+                }\n+            }\n+        });\n+        if (!substationMapping.isEmpty()) {\n             LOG.warn(\"Substation id mapping needed for {} substations: {}\",\n-                    mapping.size(), mapping);\n+                    substationMapping.size(), substationMapping);\n         }\n     }\n \n+    // Given an id (substation / voltageLevel) returns all connected ids (substations / voltageLevels)\n+    // Two ids are connected if they are adjacent in the adjacency Map\n+    private static ArrayList<String> allConnected(Map<String, List<String>> adjacency, Set<String> visited, String id) {\n+        ArrayList<String> allConnected = new ArrayList<>();\n+\n+        // Insert id in the allConnected list and record it as visited\n+        allConnected.add(id);\n+        visited.add(id);\n+\n+        // Expand, adding in each step all non-visited adjacent ids\"\n+        int k = 0;\n+        while (k < allConnected.size()) {\n+            String vl0 = allConnected.get(k);\n+            if (adjacency.containsKey(vl0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcd8f2f57cc6d3552cad79800f38addb39c69bcb"}, "originalPosition": 309}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2OTI3MQ==", "bodyText": "To expand, we need to process the List by index as we are increasing it, so we prefer a List rather than a Set.", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r512169271", "createdAt": "2020-10-26T18:11:09Z", "author": {"login": "marqueslanauja"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -10,70 +10,302 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n-import org.jgrapht.Graph;\n-import org.jgrapht.alg.connectivity.ConnectivityInspector;\n-import org.jgrapht.graph.Pseudograph;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.powsybl.cgmes.model.CgmesNames;\n import com.powsybl.cgmes.model.CgmesTerminal;\n+import com.powsybl.commons.PowsyblException;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n+ * CGMES standard: <br>\n+ * A PowerTransformer is contained in one Substation, but it can connect a Terminal to another different Substation <br>\n+ * A Switch can connect to different voltageLevels\n+ * <p>\n+ * IIDM Model: <br>\n+ * Ends of transformers need to be in the same substation<br>\n+ * Ends of switches need to be in the same voltageLevel\n+ * <p>\n+ * Solution: <br>\n+ * CGMES substations that are connected by transformers will be mapped to a single IIDM substation <br>\n+ * CGMES voltageLevels that are connected by switches will be mapped to a single IIDM voltageLevel\n+ * <p>\n+ * Example: <br>\n+ * We suppose that VL1, VL2, VL3, VL4, VL5, VL6 and VL7 are CGMES voltageLevels, <br>\n+ * Sw23 is a switch connecting voltageLevels VL2 and VL3, <br>\n+ * Sw34 is a switch connecting voltageLevels VL3 and VL4 and <br>\n+ * Sw67 is a switch connecting voltageLevels VL6 and VL7\n+ * <p>\n+ * Steps: <br>\n+ * Fill voltageLevelAdjacency Map <br>\n+ * Two voltageLevels are adjacent if they are connected by a switch <br>\n+ * The voltageLevelAdjacency Map will include the following records <br>\n+ * (VL1, []) <br>\n+ * (VL2, [VL2, VL3]) <br>\n+ * (VL3, [VL2, VL3, VL4]) <br>\n+ * (VL4, [VL3, VL4]) <br>\n+ * (VL5, []) <br>\n+ * (VL6, [VL6, VL7]) <br>\n+ * (VL7, [VL6, VL7]) <br>\n+ * <p>\n+ * For each non-visited VoltageLevel-key of the voltageLevelAdjacency Map all connected voltageLevels will be calculated  <br>\n+ * Two voltageLevels are connected if they are adjacent <br>\n+ * (allConnected method) <br>\n+ * All connected VoltageLevels to VL1 will be [VL1] <br>\n+ * All connected VoltageLevels to VL2 will be [VL2, VL3, VL4] <br>\n+ * All connected VoltageLevels to VL5 will be [VL5] <br>\n+ * All connected VoltageLevels to VL6 will be [VL6, VL7]\n+ * <p>\n+ * So the following voltageLevels should be merged <br>\n+ * [VL2, VL3, VL4] and the representative (IIDM voltageLevel) will be VL2 <br>\n+ * [VL6, VL7] and the representative (IIDM voltageLevel) will be VL6\n+ * <p>\n+ * And finally previous data is recorded in the voltageLevelMapping Map as <br>\n+ * (For each merged voltageLevel a record (merged voltageLevel, representative voltageLevel) is added) <br>\n+ * (VL3, VL2) <br>\n+ * (VL4, VL2) <br>\n+ * (VL7, VL6) <br>\n+ * <p>\n+ * The voltageLevelMapping Map will be used to assign the IIDM voltageLevel during the conversion process\n+ * <p>\n+ * The same algorithm is used to identify the substations that should be merged but: <br>\n+ * Two substations are adjacent if there is a transformer between them. <br>\n+ * The two substations associated with two adjacent voltageLevels, are adjacent if they are different substations.\n+ * <p>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n+\n public class SubstationIdMapping {\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    // All the keys for a given value, all the merged substations that have cgmesIdentifier as representative\n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // All the keys for a given value, all the merged voltageLevels that have cgmesIdentifier as representative\n+    public List<String> mergedVoltageLevels(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.entrySet().stream().filter(record -> record.getValue().equals(vlid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        Graph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());\n+    }\n+\n+    // Two different voltageLevels are adjacent if they are connected by a switch\n+    // If the corresponding substations are different they are also adjacent\n+    private void addSwitch(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, PropertyBag sw) {\n+\n+        CgmesTerminal t1 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 1));\n+        String node1 = context.nodeBreaker() ? t1.connectivityNode() : t1.topologicalNode();\n+        String voltageLevelId1 = getVoltageLevelFromNode(node1, t1);\n+\n+        CgmesTerminal t2 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 2));\n+        String node2 = context.nodeBreaker() ? t2.connectivityNode() : t2.topologicalNode();\n+        String voltageLevelId2 = getVoltageLevelFromNode(node2, t2);\n+\n+        // Null could be received as voltageLevel at the boundary\n+        if (voltageLevelId1 == null || voltageLevelId2 == null || voltageLevelId1.equals(voltageLevelId2)) {\n+            return;\n+        }\n+        addAdjacency(voltageLevelAdjacency, voltageLevelId1, voltageLevelId2);\n+\n+        String substationId1 = context.cgmes().substation(t1, context.nodeBreaker());\n+        String substationId2 = context.cgmes().substation(t2, context.nodeBreaker());\n+\n+        // Null could be received as substation at the boundary\n+        if (substationId1 == null || substationId2 == null || substationId1.equals(substationId2)) {\n+            return;\n+        }\n+        addAdjacency(substationAdjacency, substationId1, substationId2);\n+    }\n+\n+    private String getVoltageLevelFromNode(String node, CgmesTerminal t) {\n+        String voltageLevelId = null;\n+        if (node != null && !context.boundary().containsNode(node)) {\n+            voltageLevelId = context.cgmes().voltageLevel(t, context.nodeBreaker());\n+        }\n+        return voltageLevelId;\n+    }\n+\n+    // Two different substations are adjacent if they are connected by a transformer\n+    private void addEnds(Map<String, List<String>> substationAdjacency, PropertyBags tends) {\n+        List<String> substationsIds = substationsIds(tends);\n+        if (substationsIds.size() <= 1) {\n+            return;\n+        }\n+        String sub0 = substationsIds.get(0);\n+        for (int i = 1; i < substationsIds.size(); i++) {\n+            String subi = substationsIds.get(i);\n+\n+            if (sub0.contentEquals(subi)) {\n+                continue;\n+            }\n+            addAdjacency(substationAdjacency, sub0, subi);\n+        }\n+    }\n+\n+    // Record in the adjacency Map that \"id1 is adjacent to id2\" and \"id2 is adjacent to id1\"\n+    private static void addAdjacency(Map<String, List<String>> adjacency, String id1, String id2) {\n+        List<String> ad1 = adjacency.get(id1);\n+        if (ad1 == null) {\n+            throw new PowsyblException(\"Unexpected reference to Substation or voltageLevel \" + id1\n+                + \". It has not been defined in CGMES substations / voltageLevels.\");\n+        }\n+        List<String> ad2 = adjacency.get(id2);\n+        if (ad2 == null) {\n+            throw new PowsyblException(\"Unexpected reference to Substation or voltageLevel \" + id2\n+                + \". It has not been defined in CGMES substations / voltageLevels.\");\n+        }\n+\n+        ad1.add(id2);\n+        ad2.add(id1);\n+    }\n+\n+    private void buildVoltageLevel(Map<String, List<String>> voltageLevelAdjacency) {\n+        Set<String> visitedVoltageLevels = new HashSet<>();\n+        voltageLevelAdjacency.keySet().forEach(vl -> {\n+            if (!visitedVoltageLevels.contains(vl)) {\n+                ArrayList<String> vlAds = allConnected(voltageLevelAdjacency, visitedVoltageLevels, vl);\n+                String selectedVoltageLevelId = representativeVoltageLevelId(vlAds);\n+                for (String voltageLevelId : vlAds) {\n+                    if (!voltageLevelId.equals(selectedVoltageLevelId)) {\n+                        voltageLevelMapping.put(voltageLevelId, selectedVoltageLevelId);\n                     }\n-                });\n-        if (!mapping.isEmpty()) {\n+                }\n+            }\n+        });\n+        if (!voltageLevelMapping.isEmpty()) {\n+            LOG.warn(\"VoltageLevel id mapping needed for {} voltageLevels: {}\",\n+                voltageLevelMapping.size(), voltageLevelMapping);\n+        }\n+    }\n+\n+    private void buildSubstation(Map<String, List<String>> substationAdjacency) {\n+        Set<String> visitedSubstations = new HashSet<>();\n+        substationAdjacency.keySet().forEach(sub -> {\n+            if (!visitedSubstations.contains(sub)) {\n+                ArrayList<String> subAds = allConnected(substationAdjacency, visitedSubstations, sub);\n+\n+                String selectedSubstationId = representativeSubstationId(subAds);\n+                for (String substationId : subAds) {\n+                    if (!substationId.equals(selectedSubstationId)) {\n+                        substationMapping.put(substationId, selectedSubstationId);\n+                    }\n+                }\n+            }\n+        });\n+        if (!substationMapping.isEmpty()) {\n             LOG.warn(\"Substation id mapping needed for {} substations: {}\",\n-                    mapping.size(), mapping);\n+                    substationMapping.size(), substationMapping);\n         }\n     }\n \n+    // Given an id (substation / voltageLevel) returns all connected ids (substations / voltageLevels)\n+    // Two ids are connected if they are adjacent in the adjacency Map\n+    private static ArrayList<String> allConnected(Map<String, List<String>> adjacency, Set<String> visited, String id) {\n+        ArrayList<String> allConnected = new ArrayList<>();\n+\n+        // Insert id in the allConnected list and record it as visited\n+        allConnected.add(id);\n+        visited.add(id);\n+\n+        // Expand, adding in each step all non-visited adjacent ids\"\n+        int k = 0;\n+        while (k < allConnected.size()) {\n+            String vl0 = allConnected.get(k);\n+            if (adjacency.containsKey(vl0)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyMDcyNQ=="}, "originalCommit": {"oid": "dcd8f2f57cc6d3552cad79800f38addb39c69bcb"}, "originalPosition": 309}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjcwNTkzOnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOToyNzo1MlrOHoHEtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODowNjo0MVrOHocKOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyMDk4Mw==", "bodyText": "This is probably a Set too", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r511820983", "createdAt": "2020-10-26T09:27:52Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -10,70 +10,302 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n-import org.jgrapht.Graph;\n-import org.jgrapht.alg.connectivity.ConnectivityInspector;\n-import org.jgrapht.graph.Pseudograph;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.powsybl.cgmes.model.CgmesNames;\n import com.powsybl.cgmes.model.CgmesTerminal;\n+import com.powsybl.commons.PowsyblException;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n+ * CGMES standard: <br>\n+ * A PowerTransformer is contained in one Substation, but it can connect a Terminal to another different Substation <br>\n+ * A Switch can connect to different voltageLevels\n+ * <p>\n+ * IIDM Model: <br>\n+ * Ends of transformers need to be in the same substation<br>\n+ * Ends of switches need to be in the same voltageLevel\n+ * <p>\n+ * Solution: <br>\n+ * CGMES substations that are connected by transformers will be mapped to a single IIDM substation <br>\n+ * CGMES voltageLevels that are connected by switches will be mapped to a single IIDM voltageLevel\n+ * <p>\n+ * Example: <br>\n+ * We suppose that VL1, VL2, VL3, VL4, VL5, VL6 and VL7 are CGMES voltageLevels, <br>\n+ * Sw23 is a switch connecting voltageLevels VL2 and VL3, <br>\n+ * Sw34 is a switch connecting voltageLevels VL3 and VL4 and <br>\n+ * Sw67 is a switch connecting voltageLevels VL6 and VL7\n+ * <p>\n+ * Steps: <br>\n+ * Fill voltageLevelAdjacency Map <br>\n+ * Two voltageLevels are adjacent if they are connected by a switch <br>\n+ * The voltageLevelAdjacency Map will include the following records <br>\n+ * (VL1, []) <br>\n+ * (VL2, [VL2, VL3]) <br>\n+ * (VL3, [VL2, VL3, VL4]) <br>\n+ * (VL4, [VL3, VL4]) <br>\n+ * (VL5, []) <br>\n+ * (VL6, [VL6, VL7]) <br>\n+ * (VL7, [VL6, VL7]) <br>\n+ * <p>\n+ * For each non-visited VoltageLevel-key of the voltageLevelAdjacency Map all connected voltageLevels will be calculated  <br>\n+ * Two voltageLevels are connected if they are adjacent <br>\n+ * (allConnected method) <br>\n+ * All connected VoltageLevels to VL1 will be [VL1] <br>\n+ * All connected VoltageLevels to VL2 will be [VL2, VL3, VL4] <br>\n+ * All connected VoltageLevels to VL5 will be [VL5] <br>\n+ * All connected VoltageLevels to VL6 will be [VL6, VL7]\n+ * <p>\n+ * So the following voltageLevels should be merged <br>\n+ * [VL2, VL3, VL4] and the representative (IIDM voltageLevel) will be VL2 <br>\n+ * [VL6, VL7] and the representative (IIDM voltageLevel) will be VL6\n+ * <p>\n+ * And finally previous data is recorded in the voltageLevelMapping Map as <br>\n+ * (For each merged voltageLevel a record (merged voltageLevel, representative voltageLevel) is added) <br>\n+ * (VL3, VL2) <br>\n+ * (VL4, VL2) <br>\n+ * (VL7, VL6) <br>\n+ * <p>\n+ * The voltageLevelMapping Map will be used to assign the IIDM voltageLevel during the conversion process\n+ * <p>\n+ * The same algorithm is used to identify the substations that should be merged but: <br>\n+ * Two substations are adjacent if there is a transformer between them. <br>\n+ * The two substations associated with two adjacent voltageLevels, are adjacent if they are different substations.\n+ * <p>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n+\n public class SubstationIdMapping {\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    // All the keys for a given value, all the merged substations that have cgmesIdentifier as representative\n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // All the keys for a given value, all the merged voltageLevels that have cgmesIdentifier as representative\n+    public List<String> mergedVoltageLevels(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.entrySet().stream().filter(record -> record.getValue().equals(vlid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        Graph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());\n+    }\n+\n+    // Two different voltageLevels are adjacent if they are connected by a switch\n+    // If the corresponding substations are different they are also adjacent\n+    private void addSwitch(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, PropertyBag sw) {\n+\n+        CgmesTerminal t1 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 1));\n+        String node1 = context.nodeBreaker() ? t1.connectivityNode() : t1.topologicalNode();\n+        String voltageLevelId1 = getVoltageLevelFromNode(node1, t1);\n+\n+        CgmesTerminal t2 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 2));\n+        String node2 = context.nodeBreaker() ? t2.connectivityNode() : t2.topologicalNode();\n+        String voltageLevelId2 = getVoltageLevelFromNode(node2, t2);\n+\n+        // Null could be received as voltageLevel at the boundary\n+        if (voltageLevelId1 == null || voltageLevelId2 == null || voltageLevelId1.equals(voltageLevelId2)) {\n+            return;\n+        }\n+        addAdjacency(voltageLevelAdjacency, voltageLevelId1, voltageLevelId2);\n+\n+        String substationId1 = context.cgmes().substation(t1, context.nodeBreaker());\n+        String substationId2 = context.cgmes().substation(t2, context.nodeBreaker());\n+\n+        // Null could be received as substation at the boundary\n+        if (substationId1 == null || substationId2 == null || substationId1.equals(substationId2)) {\n+            return;\n+        }\n+        addAdjacency(substationAdjacency, substationId1, substationId2);\n+    }\n+\n+    private String getVoltageLevelFromNode(String node, CgmesTerminal t) {\n+        String voltageLevelId = null;\n+        if (node != null && !context.boundary().containsNode(node)) {\n+            voltageLevelId = context.cgmes().voltageLevel(t, context.nodeBreaker());\n+        }\n+        return voltageLevelId;\n+    }\n+\n+    // Two different substations are adjacent if they are connected by a transformer\n+    private void addEnds(Map<String, List<String>> substationAdjacency, PropertyBags tends) {\n+        List<String> substationsIds = substationsIds(tends);\n+        if (substationsIds.size() <= 1) {\n+            return;\n+        }\n+        String sub0 = substationsIds.get(0);\n+        for (int i = 1; i < substationsIds.size(); i++) {\n+            String subi = substationsIds.get(i);\n+\n+            if (sub0.contentEquals(subi)) {\n+                continue;\n+            }\n+            addAdjacency(substationAdjacency, sub0, subi);\n+        }\n+    }\n+\n+    // Record in the adjacency Map that \"id1 is adjacent to id2\" and \"id2 is adjacent to id1\"\n+    private static void addAdjacency(Map<String, List<String>> adjacency, String id1, String id2) {\n+        List<String> ad1 = adjacency.get(id1);\n+        if (ad1 == null) {\n+            throw new PowsyblException(\"Unexpected reference to Substation or voltageLevel \" + id1\n+                + \". It has not been defined in CGMES substations / voltageLevels.\");\n+        }\n+        List<String> ad2 = adjacency.get(id2);\n+        if (ad2 == null) {\n+            throw new PowsyblException(\"Unexpected reference to Substation or voltageLevel \" + id2\n+                + \". It has not been defined in CGMES substations / voltageLevels.\");\n+        }\n+\n+        ad1.add(id2);\n+        ad2.add(id1);\n+    }\n+\n+    private void buildVoltageLevel(Map<String, List<String>> voltageLevelAdjacency) {\n+        Set<String> visitedVoltageLevels = new HashSet<>();\n+        voltageLevelAdjacency.keySet().forEach(vl -> {\n+            if (!visitedVoltageLevels.contains(vl)) {\n+                ArrayList<String> vlAds = allConnected(voltageLevelAdjacency, visitedVoltageLevels, vl);\n+                String selectedVoltageLevelId = representativeVoltageLevelId(vlAds);\n+                for (String voltageLevelId : vlAds) {\n+                    if (!voltageLevelId.equals(selectedVoltageLevelId)) {\n+                        voltageLevelMapping.put(voltageLevelId, selectedVoltageLevelId);\n                     }\n-                });\n-        if (!mapping.isEmpty()) {\n+                }\n+            }\n+        });\n+        if (!voltageLevelMapping.isEmpty()) {\n+            LOG.warn(\"VoltageLevel id mapping needed for {} voltageLevels: {}\",\n+                voltageLevelMapping.size(), voltageLevelMapping);\n+        }\n+    }\n+\n+    private void buildSubstation(Map<String, List<String>> substationAdjacency) {\n+        Set<String> visitedSubstations = new HashSet<>();\n+        substationAdjacency.keySet().forEach(sub -> {\n+            if (!visitedSubstations.contains(sub)) {\n+                ArrayList<String> subAds = allConnected(substationAdjacency, visitedSubstations, sub);\n+\n+                String selectedSubstationId = representativeSubstationId(subAds);\n+                for (String substationId : subAds) {\n+                    if (!substationId.equals(selectedSubstationId)) {\n+                        substationMapping.put(substationId, selectedSubstationId);\n+                    }\n+                }\n+            }\n+        });\n+        if (!substationMapping.isEmpty()) {\n             LOG.warn(\"Substation id mapping needed for {} substations: {}\",\n-                    mapping.size(), mapping);\n+                    substationMapping.size(), substationMapping);\n         }\n     }\n \n+    // Given an id (substation / voltageLevel) returns all connected ids (substations / voltageLevels)\n+    // Two ids are connected if they are adjacent in the adjacency Map\n+    private static ArrayList<String> allConnected(Map<String, List<String>> adjacency, Set<String> visited, String id) {\n+        ArrayList<String> allConnected = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcd8f2f57cc6d3552cad79800f38addb39c69bcb"}, "originalPosition": 299}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2NjQ1OA==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r512166458", "createdAt": "2020-10-26T18:06:41Z", "author": {"login": "marqueslanauja"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -10,70 +10,302 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n-import org.jgrapht.Graph;\n-import org.jgrapht.alg.connectivity.ConnectivityInspector;\n-import org.jgrapht.graph.Pseudograph;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.powsybl.cgmes.model.CgmesNames;\n import com.powsybl.cgmes.model.CgmesTerminal;\n+import com.powsybl.commons.PowsyblException;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n+ * CGMES standard: <br>\n+ * A PowerTransformer is contained in one Substation, but it can connect a Terminal to another different Substation <br>\n+ * A Switch can connect to different voltageLevels\n+ * <p>\n+ * IIDM Model: <br>\n+ * Ends of transformers need to be in the same substation<br>\n+ * Ends of switches need to be in the same voltageLevel\n+ * <p>\n+ * Solution: <br>\n+ * CGMES substations that are connected by transformers will be mapped to a single IIDM substation <br>\n+ * CGMES voltageLevels that are connected by switches will be mapped to a single IIDM voltageLevel\n+ * <p>\n+ * Example: <br>\n+ * We suppose that VL1, VL2, VL3, VL4, VL5, VL6 and VL7 are CGMES voltageLevels, <br>\n+ * Sw23 is a switch connecting voltageLevels VL2 and VL3, <br>\n+ * Sw34 is a switch connecting voltageLevels VL3 and VL4 and <br>\n+ * Sw67 is a switch connecting voltageLevels VL6 and VL7\n+ * <p>\n+ * Steps: <br>\n+ * Fill voltageLevelAdjacency Map <br>\n+ * Two voltageLevels are adjacent if they are connected by a switch <br>\n+ * The voltageLevelAdjacency Map will include the following records <br>\n+ * (VL1, []) <br>\n+ * (VL2, [VL2, VL3]) <br>\n+ * (VL3, [VL2, VL3, VL4]) <br>\n+ * (VL4, [VL3, VL4]) <br>\n+ * (VL5, []) <br>\n+ * (VL6, [VL6, VL7]) <br>\n+ * (VL7, [VL6, VL7]) <br>\n+ * <p>\n+ * For each non-visited VoltageLevel-key of the voltageLevelAdjacency Map all connected voltageLevels will be calculated  <br>\n+ * Two voltageLevels are connected if they are adjacent <br>\n+ * (allConnected method) <br>\n+ * All connected VoltageLevels to VL1 will be [VL1] <br>\n+ * All connected VoltageLevels to VL2 will be [VL2, VL3, VL4] <br>\n+ * All connected VoltageLevels to VL5 will be [VL5] <br>\n+ * All connected VoltageLevels to VL6 will be [VL6, VL7]\n+ * <p>\n+ * So the following voltageLevels should be merged <br>\n+ * [VL2, VL3, VL4] and the representative (IIDM voltageLevel) will be VL2 <br>\n+ * [VL6, VL7] and the representative (IIDM voltageLevel) will be VL6\n+ * <p>\n+ * And finally previous data is recorded in the voltageLevelMapping Map as <br>\n+ * (For each merged voltageLevel a record (merged voltageLevel, representative voltageLevel) is added) <br>\n+ * (VL3, VL2) <br>\n+ * (VL4, VL2) <br>\n+ * (VL7, VL6) <br>\n+ * <p>\n+ * The voltageLevelMapping Map will be used to assign the IIDM voltageLevel during the conversion process\n+ * <p>\n+ * The same algorithm is used to identify the substations that should be merged but: <br>\n+ * Two substations are adjacent if there is a transformer between them. <br>\n+ * The two substations associated with two adjacent voltageLevels, are adjacent if they are different substations.\n+ * <p>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n+\n public class SubstationIdMapping {\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    // All the keys for a given value, all the merged substations that have cgmesIdentifier as representative\n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // All the keys for a given value, all the merged voltageLevels that have cgmesIdentifier as representative\n+    public List<String> mergedVoltageLevels(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.entrySet().stream().filter(record -> record.getValue().equals(vlid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        Graph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());\n+    }\n+\n+    // Two different voltageLevels are adjacent if they are connected by a switch\n+    // If the corresponding substations are different they are also adjacent\n+    private void addSwitch(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, PropertyBag sw) {\n+\n+        CgmesTerminal t1 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 1));\n+        String node1 = context.nodeBreaker() ? t1.connectivityNode() : t1.topologicalNode();\n+        String voltageLevelId1 = getVoltageLevelFromNode(node1, t1);\n+\n+        CgmesTerminal t2 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 2));\n+        String node2 = context.nodeBreaker() ? t2.connectivityNode() : t2.topologicalNode();\n+        String voltageLevelId2 = getVoltageLevelFromNode(node2, t2);\n+\n+        // Null could be received as voltageLevel at the boundary\n+        if (voltageLevelId1 == null || voltageLevelId2 == null || voltageLevelId1.equals(voltageLevelId2)) {\n+            return;\n+        }\n+        addAdjacency(voltageLevelAdjacency, voltageLevelId1, voltageLevelId2);\n+\n+        String substationId1 = context.cgmes().substation(t1, context.nodeBreaker());\n+        String substationId2 = context.cgmes().substation(t2, context.nodeBreaker());\n+\n+        // Null could be received as substation at the boundary\n+        if (substationId1 == null || substationId2 == null || substationId1.equals(substationId2)) {\n+            return;\n+        }\n+        addAdjacency(substationAdjacency, substationId1, substationId2);\n+    }\n+\n+    private String getVoltageLevelFromNode(String node, CgmesTerminal t) {\n+        String voltageLevelId = null;\n+        if (node != null && !context.boundary().containsNode(node)) {\n+            voltageLevelId = context.cgmes().voltageLevel(t, context.nodeBreaker());\n+        }\n+        return voltageLevelId;\n+    }\n+\n+    // Two different substations are adjacent if they are connected by a transformer\n+    private void addEnds(Map<String, List<String>> substationAdjacency, PropertyBags tends) {\n+        List<String> substationsIds = substationsIds(tends);\n+        if (substationsIds.size() <= 1) {\n+            return;\n+        }\n+        String sub0 = substationsIds.get(0);\n+        for (int i = 1; i < substationsIds.size(); i++) {\n+            String subi = substationsIds.get(i);\n+\n+            if (sub0.contentEquals(subi)) {\n+                continue;\n+            }\n+            addAdjacency(substationAdjacency, sub0, subi);\n+        }\n+    }\n+\n+    // Record in the adjacency Map that \"id1 is adjacent to id2\" and \"id2 is adjacent to id1\"\n+    private static void addAdjacency(Map<String, List<String>> adjacency, String id1, String id2) {\n+        List<String> ad1 = adjacency.get(id1);\n+        if (ad1 == null) {\n+            throw new PowsyblException(\"Unexpected reference to Substation or voltageLevel \" + id1\n+                + \". It has not been defined in CGMES substations / voltageLevels.\");\n+        }\n+        List<String> ad2 = adjacency.get(id2);\n+        if (ad2 == null) {\n+            throw new PowsyblException(\"Unexpected reference to Substation or voltageLevel \" + id2\n+                + \". It has not been defined in CGMES substations / voltageLevels.\");\n+        }\n+\n+        ad1.add(id2);\n+        ad2.add(id1);\n+    }\n+\n+    private void buildVoltageLevel(Map<String, List<String>> voltageLevelAdjacency) {\n+        Set<String> visitedVoltageLevels = new HashSet<>();\n+        voltageLevelAdjacency.keySet().forEach(vl -> {\n+            if (!visitedVoltageLevels.contains(vl)) {\n+                ArrayList<String> vlAds = allConnected(voltageLevelAdjacency, visitedVoltageLevels, vl);\n+                String selectedVoltageLevelId = representativeVoltageLevelId(vlAds);\n+                for (String voltageLevelId : vlAds) {\n+                    if (!voltageLevelId.equals(selectedVoltageLevelId)) {\n+                        voltageLevelMapping.put(voltageLevelId, selectedVoltageLevelId);\n                     }\n-                });\n-        if (!mapping.isEmpty()) {\n+                }\n+            }\n+        });\n+        if (!voltageLevelMapping.isEmpty()) {\n+            LOG.warn(\"VoltageLevel id mapping needed for {} voltageLevels: {}\",\n+                voltageLevelMapping.size(), voltageLevelMapping);\n+        }\n+    }\n+\n+    private void buildSubstation(Map<String, List<String>> substationAdjacency) {\n+        Set<String> visitedSubstations = new HashSet<>();\n+        substationAdjacency.keySet().forEach(sub -> {\n+            if (!visitedSubstations.contains(sub)) {\n+                ArrayList<String> subAds = allConnected(substationAdjacency, visitedSubstations, sub);\n+\n+                String selectedSubstationId = representativeSubstationId(subAds);\n+                for (String substationId : subAds) {\n+                    if (!substationId.equals(selectedSubstationId)) {\n+                        substationMapping.put(substationId, selectedSubstationId);\n+                    }\n+                }\n+            }\n+        });\n+        if (!substationMapping.isEmpty()) {\n             LOG.warn(\"Substation id mapping needed for {} substations: {}\",\n-                    mapping.size(), mapping);\n+                    substationMapping.size(), substationMapping);\n         }\n     }\n \n+    // Given an id (substation / voltageLevel) returns all connected ids (substations / voltageLevels)\n+    // Two ids are connected if they are adjacent in the adjacency Map\n+    private static ArrayList<String> allConnected(Map<String, List<String>> adjacency, Set<String> visited, String id) {\n+        ArrayList<String> allConnected = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyMDk4Mw=="}, "originalCommit": {"oid": "dcd8f2f57cc6d3552cad79800f38addb39c69bcb"}, "originalPosition": 299}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjcxMDIyOnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOToyODo0OVrOHoHHXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODowNjo1NVrOHocK2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyMTY2MA==", "bodyText": "You should throw an AssertionError if this list is expected to never be empty", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r511821660", "createdAt": "2020-10-26T09:28:49Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -10,70 +10,302 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n-import org.jgrapht.Graph;\n-import org.jgrapht.alg.connectivity.ConnectivityInspector;\n-import org.jgrapht.graph.Pseudograph;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.powsybl.cgmes.model.CgmesNames;\n import com.powsybl.cgmes.model.CgmesTerminal;\n+import com.powsybl.commons.PowsyblException;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n+ * CGMES standard: <br>\n+ * A PowerTransformer is contained in one Substation, but it can connect a Terminal to another different Substation <br>\n+ * A Switch can connect to different voltageLevels\n+ * <p>\n+ * IIDM Model: <br>\n+ * Ends of transformers need to be in the same substation<br>\n+ * Ends of switches need to be in the same voltageLevel\n+ * <p>\n+ * Solution: <br>\n+ * CGMES substations that are connected by transformers will be mapped to a single IIDM substation <br>\n+ * CGMES voltageLevels that are connected by switches will be mapped to a single IIDM voltageLevel\n+ * <p>\n+ * Example: <br>\n+ * We suppose that VL1, VL2, VL3, VL4, VL5, VL6 and VL7 are CGMES voltageLevels, <br>\n+ * Sw23 is a switch connecting voltageLevels VL2 and VL3, <br>\n+ * Sw34 is a switch connecting voltageLevels VL3 and VL4 and <br>\n+ * Sw67 is a switch connecting voltageLevels VL6 and VL7\n+ * <p>\n+ * Steps: <br>\n+ * Fill voltageLevelAdjacency Map <br>\n+ * Two voltageLevels are adjacent if they are connected by a switch <br>\n+ * The voltageLevelAdjacency Map will include the following records <br>\n+ * (VL1, []) <br>\n+ * (VL2, [VL2, VL3]) <br>\n+ * (VL3, [VL2, VL3, VL4]) <br>\n+ * (VL4, [VL3, VL4]) <br>\n+ * (VL5, []) <br>\n+ * (VL6, [VL6, VL7]) <br>\n+ * (VL7, [VL6, VL7]) <br>\n+ * <p>\n+ * For each non-visited VoltageLevel-key of the voltageLevelAdjacency Map all connected voltageLevels will be calculated  <br>\n+ * Two voltageLevels are connected if they are adjacent <br>\n+ * (allConnected method) <br>\n+ * All connected VoltageLevels to VL1 will be [VL1] <br>\n+ * All connected VoltageLevels to VL2 will be [VL2, VL3, VL4] <br>\n+ * All connected VoltageLevels to VL5 will be [VL5] <br>\n+ * All connected VoltageLevels to VL6 will be [VL6, VL7]\n+ * <p>\n+ * So the following voltageLevels should be merged <br>\n+ * [VL2, VL3, VL4] and the representative (IIDM voltageLevel) will be VL2 <br>\n+ * [VL6, VL7] and the representative (IIDM voltageLevel) will be VL6\n+ * <p>\n+ * And finally previous data is recorded in the voltageLevelMapping Map as <br>\n+ * (For each merged voltageLevel a record (merged voltageLevel, representative voltageLevel) is added) <br>\n+ * (VL3, VL2) <br>\n+ * (VL4, VL2) <br>\n+ * (VL7, VL6) <br>\n+ * <p>\n+ * The voltageLevelMapping Map will be used to assign the IIDM voltageLevel during the conversion process\n+ * <p>\n+ * The same algorithm is used to identify the substations that should be merged but: <br>\n+ * Two substations are adjacent if there is a transformer between them. <br>\n+ * The two substations associated with two adjacent voltageLevels, are adjacent if they are different substations.\n+ * <p>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n+\n public class SubstationIdMapping {\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    // All the keys for a given value, all the merged substations that have cgmesIdentifier as representative\n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // All the keys for a given value, all the merged voltageLevels that have cgmesIdentifier as representative\n+    public List<String> mergedVoltageLevels(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.entrySet().stream().filter(record -> record.getValue().equals(vlid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        Graph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());\n+    }\n+\n+    // Two different voltageLevels are adjacent if they are connected by a switch\n+    // If the corresponding substations are different they are also adjacent\n+    private void addSwitch(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, PropertyBag sw) {\n+\n+        CgmesTerminal t1 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 1));\n+        String node1 = context.nodeBreaker() ? t1.connectivityNode() : t1.topologicalNode();\n+        String voltageLevelId1 = getVoltageLevelFromNode(node1, t1);\n+\n+        CgmesTerminal t2 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 2));\n+        String node2 = context.nodeBreaker() ? t2.connectivityNode() : t2.topologicalNode();\n+        String voltageLevelId2 = getVoltageLevelFromNode(node2, t2);\n+\n+        // Null could be received as voltageLevel at the boundary\n+        if (voltageLevelId1 == null || voltageLevelId2 == null || voltageLevelId1.equals(voltageLevelId2)) {\n+            return;\n+        }\n+        addAdjacency(voltageLevelAdjacency, voltageLevelId1, voltageLevelId2);\n+\n+        String substationId1 = context.cgmes().substation(t1, context.nodeBreaker());\n+        String substationId2 = context.cgmes().substation(t2, context.nodeBreaker());\n+\n+        // Null could be received as substation at the boundary\n+        if (substationId1 == null || substationId2 == null || substationId1.equals(substationId2)) {\n+            return;\n+        }\n+        addAdjacency(substationAdjacency, substationId1, substationId2);\n+    }\n+\n+    private String getVoltageLevelFromNode(String node, CgmesTerminal t) {\n+        String voltageLevelId = null;\n+        if (node != null && !context.boundary().containsNode(node)) {\n+            voltageLevelId = context.cgmes().voltageLevel(t, context.nodeBreaker());\n+        }\n+        return voltageLevelId;\n+    }\n+\n+    // Two different substations are adjacent if they are connected by a transformer\n+    private void addEnds(Map<String, List<String>> substationAdjacency, PropertyBags tends) {\n+        List<String> substationsIds = substationsIds(tends);\n+        if (substationsIds.size() <= 1) {\n+            return;\n+        }\n+        String sub0 = substationsIds.get(0);\n+        for (int i = 1; i < substationsIds.size(); i++) {\n+            String subi = substationsIds.get(i);\n+\n+            if (sub0.contentEquals(subi)) {\n+                continue;\n+            }\n+            addAdjacency(substationAdjacency, sub0, subi);\n+        }\n+    }\n+\n+    // Record in the adjacency Map that \"id1 is adjacent to id2\" and \"id2 is adjacent to id1\"\n+    private static void addAdjacency(Map<String, List<String>> adjacency, String id1, String id2) {\n+        List<String> ad1 = adjacency.get(id1);\n+        if (ad1 == null) {\n+            throw new PowsyblException(\"Unexpected reference to Substation or voltageLevel \" + id1\n+                + \". It has not been defined in CGMES substations / voltageLevels.\");\n+        }\n+        List<String> ad2 = adjacency.get(id2);\n+        if (ad2 == null) {\n+            throw new PowsyblException(\"Unexpected reference to Substation or voltageLevel \" + id2\n+                + \". It has not been defined in CGMES substations / voltageLevels.\");\n+        }\n+\n+        ad1.add(id2);\n+        ad2.add(id1);\n+    }\n+\n+    private void buildVoltageLevel(Map<String, List<String>> voltageLevelAdjacency) {\n+        Set<String> visitedVoltageLevels = new HashSet<>();\n+        voltageLevelAdjacency.keySet().forEach(vl -> {\n+            if (!visitedVoltageLevels.contains(vl)) {\n+                ArrayList<String> vlAds = allConnected(voltageLevelAdjacency, visitedVoltageLevels, vl);\n+                String selectedVoltageLevelId = representativeVoltageLevelId(vlAds);\n+                for (String voltageLevelId : vlAds) {\n+                    if (!voltageLevelId.equals(selectedVoltageLevelId)) {\n+                        voltageLevelMapping.put(voltageLevelId, selectedVoltageLevelId);\n                     }\n-                });\n-        if (!mapping.isEmpty()) {\n+                }\n+            }\n+        });\n+        if (!voltageLevelMapping.isEmpty()) {\n+            LOG.warn(\"VoltageLevel id mapping needed for {} voltageLevels: {}\",\n+                voltageLevelMapping.size(), voltageLevelMapping);\n+        }\n+    }\n+\n+    private void buildSubstation(Map<String, List<String>> substationAdjacency) {\n+        Set<String> visitedSubstations = new HashSet<>();\n+        substationAdjacency.keySet().forEach(sub -> {\n+            if (!visitedSubstations.contains(sub)) {\n+                ArrayList<String> subAds = allConnected(substationAdjacency, visitedSubstations, sub);\n+\n+                String selectedSubstationId = representativeSubstationId(subAds);\n+                for (String substationId : subAds) {\n+                    if (!substationId.equals(selectedSubstationId)) {\n+                        substationMapping.put(substationId, selectedSubstationId);\n+                    }\n+                }\n+            }\n+        });\n+        if (!substationMapping.isEmpty()) {\n             LOG.warn(\"Substation id mapping needed for {} substations: {}\",\n-                    mapping.size(), mapping);\n+                    substationMapping.size(), substationMapping);\n         }\n     }\n \n+    // Given an id (substation / voltageLevel) returns all connected ids (substations / voltageLevels)\n+    // Two ids are connected if they are adjacent in the adjacency Map\n+    private static ArrayList<String> allConnected(Map<String, List<String>> adjacency, Set<String> visited, String id) {\n+        ArrayList<String> allConnected = new ArrayList<>();\n+\n+        // Insert id in the allConnected list and record it as visited\n+        allConnected.add(id);\n+        visited.add(id);\n+\n+        // Expand, adding in each step all non-visited adjacent ids\"\n+        int k = 0;\n+        while (k < allConnected.size()) {\n+            String vl0 = allConnected.get(k);\n+            if (adjacency.containsKey(vl0)) {\n+                adjacency.get(vl0).forEach(ad -> {\n+                    if (visited.contains(ad)) {\n+                        return;\n+                    }\n+                    allConnected.add(ad);\n+                    visited.add(ad);\n+                });\n+            }\n+            k++;\n+        }\n+        return allConnected;\n+    }\n+\n+    private static String representativeVoltageLevelId(Collection<String> voltageLevelIds) {\n+        return voltageLevelIds.stream()\n+                .sorted()\n+                .findFirst()\n+                .orElseThrow(() -> new PowsyblException(\"Unexpected: voltageLevelIds list is empty\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcd8f2f57cc6d3552cad79800f38addb39c69bcb"}, "originalPosition": 327}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2NjYxOQ==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1332#discussion_r512166619", "createdAt": "2020-10-26T18:06:55Z", "author": {"login": "marqueslanauja"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/SubstationIdMapping.java", "diffHunk": "@@ -10,70 +10,302 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n-import org.jgrapht.Graph;\n-import org.jgrapht.alg.connectivity.ConnectivityInspector;\n-import org.jgrapht.graph.Pseudograph;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.powsybl.cgmes.model.CgmesNames;\n import com.powsybl.cgmes.model.CgmesTerminal;\n+import com.powsybl.commons.PowsyblException;\n import com.powsybl.triplestore.api.PropertyBag;\n import com.powsybl.triplestore.api.PropertyBags;\n \n /**\n+ * CGMES standard: <br>\n+ * A PowerTransformer is contained in one Substation, but it can connect a Terminal to another different Substation <br>\n+ * A Switch can connect to different voltageLevels\n+ * <p>\n+ * IIDM Model: <br>\n+ * Ends of transformers need to be in the same substation<br>\n+ * Ends of switches need to be in the same voltageLevel\n+ * <p>\n+ * Solution: <br>\n+ * CGMES substations that are connected by transformers will be mapped to a single IIDM substation <br>\n+ * CGMES voltageLevels that are connected by switches will be mapped to a single IIDM voltageLevel\n+ * <p>\n+ * Example: <br>\n+ * We suppose that VL1, VL2, VL3, VL4, VL5, VL6 and VL7 are CGMES voltageLevels, <br>\n+ * Sw23 is a switch connecting voltageLevels VL2 and VL3, <br>\n+ * Sw34 is a switch connecting voltageLevels VL3 and VL4 and <br>\n+ * Sw67 is a switch connecting voltageLevels VL6 and VL7\n+ * <p>\n+ * Steps: <br>\n+ * Fill voltageLevelAdjacency Map <br>\n+ * Two voltageLevels are adjacent if they are connected by a switch <br>\n+ * The voltageLevelAdjacency Map will include the following records <br>\n+ * (VL1, []) <br>\n+ * (VL2, [VL2, VL3]) <br>\n+ * (VL3, [VL2, VL3, VL4]) <br>\n+ * (VL4, [VL3, VL4]) <br>\n+ * (VL5, []) <br>\n+ * (VL6, [VL6, VL7]) <br>\n+ * (VL7, [VL6, VL7]) <br>\n+ * <p>\n+ * For each non-visited VoltageLevel-key of the voltageLevelAdjacency Map all connected voltageLevels will be calculated  <br>\n+ * Two voltageLevels are connected if they are adjacent <br>\n+ * (allConnected method) <br>\n+ * All connected VoltageLevels to VL1 will be [VL1] <br>\n+ * All connected VoltageLevels to VL2 will be [VL2, VL3, VL4] <br>\n+ * All connected VoltageLevels to VL5 will be [VL5] <br>\n+ * All connected VoltageLevels to VL6 will be [VL6, VL7]\n+ * <p>\n+ * So the following voltageLevels should be merged <br>\n+ * [VL2, VL3, VL4] and the representative (IIDM voltageLevel) will be VL2 <br>\n+ * [VL6, VL7] and the representative (IIDM voltageLevel) will be VL6\n+ * <p>\n+ * And finally previous data is recorded in the voltageLevelMapping Map as <br>\n+ * (For each merged voltageLevel a record (merged voltageLevel, representative voltageLevel) is added) <br>\n+ * (VL3, VL2) <br>\n+ * (VL4, VL2) <br>\n+ * (VL7, VL6) <br>\n+ * <p>\n+ * The voltageLevelMapping Map will be used to assign the IIDM voltageLevel during the conversion process\n+ * <p>\n+ * The same algorithm is used to identify the substations that should be merged but: <br>\n+ * Two substations are adjacent if there is a transformer between them. <br>\n+ * The two substations associated with two adjacent voltageLevels, are adjacent if they are different substations.\n+ * <p>\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n  */\n+\n public class SubstationIdMapping {\n \n     public SubstationIdMapping(Context context) {\n         this.context = context;\n-        this.mapping = new HashMap<>();\n+        this.substationMapping = new HashMap<>();\n+        this.voltageLevelMapping = new HashMap<>();\n     }\n \n-    public boolean isMapped(String cgmesIdentifier) {\n+    public boolean substationIsMapped(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        return mapping.containsKey(sid);\n+        return substationMapping.containsKey(sid);\n     }\n \n-    public String iidm(String cgmesIdentifier) {\n+    public String substationIidm(String cgmesIdentifier) {\n         String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n-        if (mapping.containsKey(sid)) {\n-            return mapping.get(sid);\n+        if (substationMapping.containsKey(sid)) {\n+            return substationMapping.get(sid);\n         }\n         return sid;\n     }\n \n+    // All the keys for a given value, all the merged substations that have cgmesIdentifier as representative\n+    public List<String> mergedSubstations(String cgmesIdentifier) {\n+        String sid = context.namingStrategy().getId(CgmesNames.SUBSTATION, cgmesIdentifier);\n+        return substationMapping.entrySet().stream().filter(record -> record.getValue().equals(sid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n+    public boolean voltageLevelIsMapped(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.containsKey(vlid);\n+    }\n+\n+    public String voltageLevelIidm(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        if (voltageLevelMapping.containsKey(vlid)) {\n+            return voltageLevelMapping.get(vlid);\n+        }\n+        return vlid;\n+    }\n+\n+    // All the keys for a given value, all the merged voltageLevels that have cgmesIdentifier as representative\n+    public List<String> mergedVoltageLevels(String cgmesIdentifier) {\n+        String vlid = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, cgmesIdentifier);\n+        return voltageLevelMapping.entrySet().stream().filter(record -> record.getValue().equals(vlid))\n+            .map(Map.Entry::getKey).collect(Collectors.toList());\n+    }\n+\n     public void build() {\n-        // CGMES standard:\n-        // \"a PowerTransformer is contained in one Substation but it can connect a Terminal to\n-        // another Substation\"\n-        // Ends of transformers need to be in the same substation in the IIDM model.\n-        // We will map some CGMES substations to a single IIDM substation\n-        // when they are connected by transformers,\n-        // that is, when there are at least one power transformer that has terminals on both\n-        // substations\n-\n-        Graph<String, Object> g = graphSubstationsTransformers();\n-        new ConnectivityInspector<>(g).connectedSets().stream()\n-                .filter(substationIds -> substationIds.size() > 1)\n-                .forEach(substationIds -> {\n-                    String selectedSubstationId = representativeSubstationId(substationIds);\n-                    for (String substationId : substationIds) {\n-                        if (!substationId.equals(selectedSubstationId)) {\n-                            mapping.put(substationId, selectedSubstationId);\n-                        }\n+        Map<String, List<String>> voltageLevelAdjacency = new HashMap<>();\n+        Map<String, List<String>> substationAdjacency = new HashMap<>();\n+\n+        buildAdjacency(voltageLevelAdjacency, substationAdjacency);\n+        buildVoltageLevel(voltageLevelAdjacency);\n+        buildSubstation(substationAdjacency);\n+    }\n+\n+    private void buildAdjacency(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency) {\n+        context.cgmes().voltageLevels().forEach(vl -> addVoltageLevel(voltageLevelAdjacency, vl));\n+        context.cgmes().substations().forEach(st -> addSubstation(substationAdjacency, st));\n+\n+        context.cgmes().switches().forEach(sw -> addSwitch(voltageLevelAdjacency, substationAdjacency, sw));\n+        context.cgmes().groupedTransformerEnds().forEach((t, tends) -> addEnds(substationAdjacency, tends));\n+    }\n+\n+    private void addVoltageLevel(Map<String, List<String>> voltageLevelAdjacency, PropertyBag vl) {\n+        String voltageLevelId = vl.getId(CgmesNames.VOLTAGE_LEVEL);\n+        String vId = context.namingStrategy().getId(CgmesNames.VOLTAGE_LEVEL, voltageLevelId);\n+        voltageLevelAdjacency.computeIfAbsent(vId, k -> new ArrayList<>());\n+    }\n+\n+    private void addSubstation(Map<String, List<String>> substationAdjacency, PropertyBag sub) {\n+        String substationlId = sub.getId(CgmesNames.SUBSTATION);\n+        String subId = context.namingStrategy().getId(CgmesNames.SUBSTATION, substationlId);\n+        substationAdjacency.computeIfAbsent(subId, k -> new ArrayList<>());\n+    }\n+\n+    // Two different voltageLevels are adjacent if they are connected by a switch\n+    // If the corresponding substations are different they are also adjacent\n+    private void addSwitch(Map<String, List<String>> voltageLevelAdjacency,\n+        Map<String, List<String>> substationAdjacency, PropertyBag sw) {\n+\n+        CgmesTerminal t1 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 1));\n+        String node1 = context.nodeBreaker() ? t1.connectivityNode() : t1.topologicalNode();\n+        String voltageLevelId1 = getVoltageLevelFromNode(node1, t1);\n+\n+        CgmesTerminal t2 = context.cgmes().terminal(sw.getId(CgmesNames.TERMINAL + 2));\n+        String node2 = context.nodeBreaker() ? t2.connectivityNode() : t2.topologicalNode();\n+        String voltageLevelId2 = getVoltageLevelFromNode(node2, t2);\n+\n+        // Null could be received as voltageLevel at the boundary\n+        if (voltageLevelId1 == null || voltageLevelId2 == null || voltageLevelId1.equals(voltageLevelId2)) {\n+            return;\n+        }\n+        addAdjacency(voltageLevelAdjacency, voltageLevelId1, voltageLevelId2);\n+\n+        String substationId1 = context.cgmes().substation(t1, context.nodeBreaker());\n+        String substationId2 = context.cgmes().substation(t2, context.nodeBreaker());\n+\n+        // Null could be received as substation at the boundary\n+        if (substationId1 == null || substationId2 == null || substationId1.equals(substationId2)) {\n+            return;\n+        }\n+        addAdjacency(substationAdjacency, substationId1, substationId2);\n+    }\n+\n+    private String getVoltageLevelFromNode(String node, CgmesTerminal t) {\n+        String voltageLevelId = null;\n+        if (node != null && !context.boundary().containsNode(node)) {\n+            voltageLevelId = context.cgmes().voltageLevel(t, context.nodeBreaker());\n+        }\n+        return voltageLevelId;\n+    }\n+\n+    // Two different substations are adjacent if they are connected by a transformer\n+    private void addEnds(Map<String, List<String>> substationAdjacency, PropertyBags tends) {\n+        List<String> substationsIds = substationsIds(tends);\n+        if (substationsIds.size() <= 1) {\n+            return;\n+        }\n+        String sub0 = substationsIds.get(0);\n+        for (int i = 1; i < substationsIds.size(); i++) {\n+            String subi = substationsIds.get(i);\n+\n+            if (sub0.contentEquals(subi)) {\n+                continue;\n+            }\n+            addAdjacency(substationAdjacency, sub0, subi);\n+        }\n+    }\n+\n+    // Record in the adjacency Map that \"id1 is adjacent to id2\" and \"id2 is adjacent to id1\"\n+    private static void addAdjacency(Map<String, List<String>> adjacency, String id1, String id2) {\n+        List<String> ad1 = adjacency.get(id1);\n+        if (ad1 == null) {\n+            throw new PowsyblException(\"Unexpected reference to Substation or voltageLevel \" + id1\n+                + \". It has not been defined in CGMES substations / voltageLevels.\");\n+        }\n+        List<String> ad2 = adjacency.get(id2);\n+        if (ad2 == null) {\n+            throw new PowsyblException(\"Unexpected reference to Substation or voltageLevel \" + id2\n+                + \". It has not been defined in CGMES substations / voltageLevels.\");\n+        }\n+\n+        ad1.add(id2);\n+        ad2.add(id1);\n+    }\n+\n+    private void buildVoltageLevel(Map<String, List<String>> voltageLevelAdjacency) {\n+        Set<String> visitedVoltageLevels = new HashSet<>();\n+        voltageLevelAdjacency.keySet().forEach(vl -> {\n+            if (!visitedVoltageLevels.contains(vl)) {\n+                ArrayList<String> vlAds = allConnected(voltageLevelAdjacency, visitedVoltageLevels, vl);\n+                String selectedVoltageLevelId = representativeVoltageLevelId(vlAds);\n+                for (String voltageLevelId : vlAds) {\n+                    if (!voltageLevelId.equals(selectedVoltageLevelId)) {\n+                        voltageLevelMapping.put(voltageLevelId, selectedVoltageLevelId);\n                     }\n-                });\n-        if (!mapping.isEmpty()) {\n+                }\n+            }\n+        });\n+        if (!voltageLevelMapping.isEmpty()) {\n+            LOG.warn(\"VoltageLevel id mapping needed for {} voltageLevels: {}\",\n+                voltageLevelMapping.size(), voltageLevelMapping);\n+        }\n+    }\n+\n+    private void buildSubstation(Map<String, List<String>> substationAdjacency) {\n+        Set<String> visitedSubstations = new HashSet<>();\n+        substationAdjacency.keySet().forEach(sub -> {\n+            if (!visitedSubstations.contains(sub)) {\n+                ArrayList<String> subAds = allConnected(substationAdjacency, visitedSubstations, sub);\n+\n+                String selectedSubstationId = representativeSubstationId(subAds);\n+                for (String substationId : subAds) {\n+                    if (!substationId.equals(selectedSubstationId)) {\n+                        substationMapping.put(substationId, selectedSubstationId);\n+                    }\n+                }\n+            }\n+        });\n+        if (!substationMapping.isEmpty()) {\n             LOG.warn(\"Substation id mapping needed for {} substations: {}\",\n-                    mapping.size(), mapping);\n+                    substationMapping.size(), substationMapping);\n         }\n     }\n \n+    // Given an id (substation / voltageLevel) returns all connected ids (substations / voltageLevels)\n+    // Two ids are connected if they are adjacent in the adjacency Map\n+    private static ArrayList<String> allConnected(Map<String, List<String>> adjacency, Set<String> visited, String id) {\n+        ArrayList<String> allConnected = new ArrayList<>();\n+\n+        // Insert id in the allConnected list and record it as visited\n+        allConnected.add(id);\n+        visited.add(id);\n+\n+        // Expand, adding in each step all non-visited adjacent ids\"\n+        int k = 0;\n+        while (k < allConnected.size()) {\n+            String vl0 = allConnected.get(k);\n+            if (adjacency.containsKey(vl0)) {\n+                adjacency.get(vl0).forEach(ad -> {\n+                    if (visited.contains(ad)) {\n+                        return;\n+                    }\n+                    allConnected.add(ad);\n+                    visited.add(ad);\n+                });\n+            }\n+            k++;\n+        }\n+        return allConnected;\n+    }\n+\n+    private static String representativeVoltageLevelId(Collection<String> voltageLevelIds) {\n+        return voltageLevelIds.stream()\n+                .sorted()\n+                .findFirst()\n+                .orElseThrow(() -> new PowsyblException(\"Unexpected: voltageLevelIds list is empty\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyMTY2MA=="}, "originalCommit": {"oid": "dcd8f2f57cc6d3552cad79800f38addb39c69bcb"}, "originalPosition": 327}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 132, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}