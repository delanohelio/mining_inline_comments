{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5NjgyOTY2", "number": 1573, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOTowMzoxOFrOFFJwRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOTozNzoyNFrOFFLLkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTQ3MDE1OnYy", "diffSide": "RIGHT", "path": "ucte/ucte-converter/src/test/java/com/powsybl/ucte/converter/UcteImporterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOTowMzoxOFrOIFg-5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODowNDozMlrOIF908A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY1NDE4Mw==", "bodyText": "Use IntStream.range(0, 100) instead of IntStream.iterate(0, i -> i + 1).limit(100)", "url": "https://github.com/powsybl/powsybl-core/pull/1573#discussion_r542654183", "createdAt": "2020-12-14T19:03:18Z", "author": {"login": "mathbagu"}, "path": "ucte/ucte-converter/src/test/java/com/powsybl/ucte/converter/UcteImporterTest.java", "diffHunk": "@@ -176,5 +179,16 @@ public void testVoltageRegulatingXnode() {\n         assertEquals(1.0, dl.getGeneration().getReactiveLimits().getMaxQ(dl.getGeneration().getTargetP()), 0.01);\n         assertEquals(-1.0, dl.getGeneration().getReactiveLimits().getMinQ(dl.getGeneration().getTargetP()), 0.01);\n     }\n+\n+    @Test\n+    public void substationNameInvariance() {\n+        ResourceDataSource dataSource = new ResourceDataSource(\"VLsCreationIssue\", new ResourceSet(\"/\", \"VLsCreationIssue.uct\"));\n+\n+        IntStream.iterate(0, i -> i + 1).limit(100).forEach(i -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "145881dcf3bbe063d57fedf156b846e4d54cd72e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEyNjc2OA==", "bodyText": "Done", "url": "https://github.com/powsybl/powsybl-core/pull/1573#discussion_r543126768", "createdAt": "2020-12-15T08:04:32Z", "author": {"login": "SlimaneAmar"}, "path": "ucte/ucte-converter/src/test/java/com/powsybl/ucte/converter/UcteImporterTest.java", "diffHunk": "@@ -176,5 +179,16 @@ public void testVoltageRegulatingXnode() {\n         assertEquals(1.0, dl.getGeneration().getReactiveLimits().getMaxQ(dl.getGeneration().getTargetP()), 0.01);\n         assertEquals(-1.0, dl.getGeneration().getReactiveLimits().getMinQ(dl.getGeneration().getTargetP()), 0.01);\n     }\n+\n+    @Test\n+    public void substationNameInvariance() {\n+        ResourceDataSource dataSource = new ResourceDataSource(\"VLsCreationIssue\", new ResourceSet(\"/\", \"VLsCreationIssue.uct\"));\n+\n+        IntStream.iterate(0, i -> i + 1).limit(100).forEach(i -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY1NDE4Mw=="}, "originalCommit": {"oid": "145881dcf3bbe063d57fedf156b846e4d54cd72e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTcwMzg0OnYy", "diffSide": "RIGHT", "path": "ucte/ucte-network/src/main/java/com/powsybl/ucte/network/ext/UcteNetworkExt.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOTozNzoyNFrOIFjTXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOTowODoxNFrOIGbhXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY5MjE4OA==", "bodyText": "Looking to the code, this algorithm doesn't return the first node in the alphabetic order. I change your unit test like this:\n##C 2007.05.01\nTest case for UCTE import issue in PowSyBl core package\nWhen multiples VLs with the same nominal voltage are present in a substation, only one is created\ncontact : slimane.amar@rte-france.com\n\n##N\n##ZFR\nF1TEST11 1TEST11 1    0 0        0.15546 72.7296 0.00000 0.00000\nF1TEST21 1TEST21 1    0 0        0.15546 72.7296 0.00000 0.00000\nF1TEST2A 1TEST2A 1    0 0        0.15546 72.7296 0.00000 0.00000\nFTESTA11 TESTAP7      0 0        0.00000 0.00000 0.00000 0.00000\nFTESTU11 TESTUP7 1-2  0 0        0.00000 0.00000 0.00000 0.00000\n\n##T\nF1TEST11 FTESTU11 1 0 380.0 380.0 1186. 0.1280 44.280 0.000000 0.0000   1803 TESTUY771\nFTESTA11 FTESTU11 1 0 380.0 380.0 1186. 0.1280 44.280 0.000000 0.0000   1803 TESTAY771\n\nWith your proposal, it returns FTESTU11 but the first node in alphabetical order is F1TEST11. I think you have to fix the implementation to be simpler to understand or to explain what you expect.\nThis is my proposal:\n\nfirst, extract this lambda to a well named method and replace the sorted + findfirst by a min()\nthen change the implementation of the lambda:\n\nPrefer the real node rather than an XNODE (line 196-201 of the current implementation)\nPrefer the highest voltage level (line 178)\nPrefer the first busbar number: numbers before letters (line 181 has to be fixed)\nPrefer the first nodeCode : use the alphabetical order", "url": "https://github.com/powsybl/powsybl-core/pull/1573#discussion_r542692188", "createdAt": "2020-12-14T19:37:24Z", "author": {"login": "mathbagu"}, "path": "ucte/ucte-network/src/main/java/com/powsybl/ucte/network/ext/UcteNetworkExt.java", "diffHunk": "@@ -201,7 +200,8 @@ private void updateSubstation() {\n                                     nodeCode2.getUcteCountryCode() == UcteCountryCode.XX) {\n                                 return -1;\n                             } else {\n-                                return compareVoltageLevelThenBusbar(nodeCode1, nodeCode2);\n+                                int c = compareVoltageLevelThenBusbar(nodeCode1, nodeCode2);\n+                                return (c != 0) ? c : nodeCode2.compareTo(nodeCode1); // Alphabetical order to always have the same main node (invariant)\n                             }\n                         })\n                         .findFirst()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "145881dcf3bbe063d57fedf156b846e4d54cd72e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEzMTQ5Mw==", "bodyText": "In the description above it is the lexicographically greater therefore the last and not the first.", "url": "https://github.com/powsybl/powsybl-core/pull/1573#discussion_r543131493", "createdAt": "2020-12-15T08:13:09Z", "author": {"login": "SlimaneAmar"}, "path": "ucte/ucte-network/src/main/java/com/powsybl/ucte/network/ext/UcteNetworkExt.java", "diffHunk": "@@ -201,7 +200,8 @@ private void updateSubstation() {\n                                     nodeCode2.getUcteCountryCode() == UcteCountryCode.XX) {\n                                 return -1;\n                             } else {\n-                                return compareVoltageLevelThenBusbar(nodeCode1, nodeCode2);\n+                                int c = compareVoltageLevelThenBusbar(nodeCode1, nodeCode2);\n+                                return (c != 0) ? c : nodeCode2.compareTo(nodeCode1); // Alphabetical order to always have the same main node (invariant)\n                             }\n                         })\n                         .findFirst()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY5MjE4OA=="}, "originalCommit": {"oid": "145881dcf3bbe063d57fedf156b846e4d54cd72e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE3OTY1Ng==", "bodyText": "This choice is to give preference to a name that does not contain a number or with a right most number.\nBut it's not necessary.", "url": "https://github.com/powsybl/powsybl-core/pull/1573#discussion_r543179656", "createdAt": "2020-12-15T09:25:36Z", "author": {"login": "SlimaneAmar"}, "path": "ucte/ucte-network/src/main/java/com/powsybl/ucte/network/ext/UcteNetworkExt.java", "diffHunk": "@@ -201,7 +200,8 @@ private void updateSubstation() {\n                                     nodeCode2.getUcteCountryCode() == UcteCountryCode.XX) {\n                                 return -1;\n                             } else {\n-                                return compareVoltageLevelThenBusbar(nodeCode1, nodeCode2);\n+                                int c = compareVoltageLevelThenBusbar(nodeCode1, nodeCode2);\n+                                return (c != 0) ? c : nodeCode2.compareTo(nodeCode1); // Alphabetical order to always have the same main node (invariant)\n                             }\n                         })\n                         .findFirst()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY5MjE4OA=="}, "originalCommit": {"oid": "145881dcf3bbe063d57fedf156b846e4d54cd72e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE4MDQzNA==", "bodyText": "I let you decide.", "url": "https://github.com/powsybl/powsybl-core/pull/1573#discussion_r543180434", "createdAt": "2020-12-15T09:26:38Z", "author": {"login": "SlimaneAmar"}, "path": "ucte/ucte-network/src/main/java/com/powsybl/ucte/network/ext/UcteNetworkExt.java", "diffHunk": "@@ -201,7 +200,8 @@ private void updateSubstation() {\n                                     nodeCode2.getUcteCountryCode() == UcteCountryCode.XX) {\n                                 return -1;\n                             } else {\n-                                return compareVoltageLevelThenBusbar(nodeCode1, nodeCode2);\n+                                int c = compareVoltageLevelThenBusbar(nodeCode1, nodeCode2);\n+                                return (c != 0) ? c : nodeCode2.compareTo(nodeCode1); // Alphabetical order to always have the same main node (invariant)\n                             }\n                         })\n                         .findFirst()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY5MjE4OA=="}, "originalCommit": {"oid": "145881dcf3bbe063d57fedf156b846e4d54cd72e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU2NTM1OQ==", "bodyText": "What is the requirements: to have a deterministic order whatever how it is implemented? If it's the case, your proposal wouldn't return the first VL for that example.\nA UCTE node code is constituted of:\n\na geographical spot (2nd-6th character)\na voltage level (7th character)\na busbar code (8th character)\n\nIn that case, I propose to change the implementation again to:\n\nget the highest voltage level\nget the lower geographical spot (lexicographic order)\nget the lower busbar code\n\nDo you agree?", "url": "https://github.com/powsybl/powsybl-core/pull/1573#discussion_r543565359", "createdAt": "2020-12-15T18:00:40Z", "author": {"login": "mathbagu"}, "path": "ucte/ucte-network/src/main/java/com/powsybl/ucte/network/ext/UcteNetworkExt.java", "diffHunk": "@@ -201,7 +200,8 @@ private void updateSubstation() {\n                                     nodeCode2.getUcteCountryCode() == UcteCountryCode.XX) {\n                                 return -1;\n                             } else {\n-                                return compareVoltageLevelThenBusbar(nodeCode1, nodeCode2);\n+                                int c = compareVoltageLevelThenBusbar(nodeCode1, nodeCode2);\n+                                return (c != 0) ? c : nodeCode2.compareTo(nodeCode1); // Alphabetical order to always have the same main node (invariant)\n                             }\n                         })\n                         .findFirst()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY5MjE4OA=="}, "originalCommit": {"oid": "145881dcf3bbe063d57fedf156b846e4d54cd72e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYxMzI3Ng==", "bodyText": "The only requirement is to generate a name of a susbstation in a deterministic way in order to be able to perform comparison tests of 2 imports.\nSo i think your fix is a sufficient solution.", "url": "https://github.com/powsybl/powsybl-core/pull/1573#discussion_r543613276", "createdAt": "2020-12-15T19:08:14Z", "author": {"login": "SlimaneAmar"}, "path": "ucte/ucte-network/src/main/java/com/powsybl/ucte/network/ext/UcteNetworkExt.java", "diffHunk": "@@ -201,7 +200,8 @@ private void updateSubstation() {\n                                     nodeCode2.getUcteCountryCode() == UcteCountryCode.XX) {\n                                 return -1;\n                             } else {\n-                                return compareVoltageLevelThenBusbar(nodeCode1, nodeCode2);\n+                                int c = compareVoltageLevelThenBusbar(nodeCode1, nodeCode2);\n+                                return (c != 0) ? c : nodeCode2.compareTo(nodeCode1); // Alphabetical order to always have the same main node (invariant)\n                             }\n                         })\n                         .findFirst()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY5MjE4OA=="}, "originalCommit": {"oid": "145881dcf3bbe063d57fedf156b846e4d54cd72e"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4945, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}