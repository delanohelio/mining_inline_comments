{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MDc0OTg5", "number": 1356, "title": "Improvements of PSS/E importer:", "bodyText": "supporting both raw and RAW file extensions\nsupporting STATUS = 0 of equipments\nmodification of header detection\nreading Qmin and Qmax of generating units\nmodification of targetQ setter\nbetter check of the number of windings of transformers\n\nPlease check if the PR fulfills these requirements (please use '[x]' to check the checkboxes, or submit the PR and then click the checkboxes)\n\n[ x] The commit message follows our guidelines\n Tests for the changes have been added (for bug fixes / features)\n Docs have been added / updated (for bug fixes / features)\n\nDoes this PR already have an issue describing the problem ? If so, link to this issue using '#XXX' and skip the rest\nNo\nWhat kind of change does this PR introduce? (Bug fix, feature, docs update, ...)\nfeature\nWhat is the current behavior? (You can also link to an open issue here)\nWhat is the new behavior (if this is a feature change)?\n\nsupporting both raw and RAW file extensions\nsupporting STATUS = 0 of equipments\nmodification of header detection\nreading Qmin and Qmax of generating units\nmodification of targetQ setter\nbetter check of the number of windings of transformers\n\nDoes this PR introduce a breaking change or deprecate an API? If yes, check the following:\n\n The Breaking Change or Deprecated label has been added\n The migration guide has been updated in the github wiki (What changes might users need to make in their application due to this PR?)\n\nOther information:\n(if any of the questions/checkboxes don't apply, please delete them entirely)", "createdAt": "2020-06-17T20:21:20Z", "url": "https://github.com/powsybl/powsybl-core/pull/1356", "merged": true, "mergeCommit": {"oid": "60882dc21010e643fede316e648bfc084f6c8640"}, "closed": true, "closedAt": "2020-06-23T14:43:24Z", "author": {"login": "JB-H"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsPrZyAH2gAyNDM2MDc0OTg5OjIwYWJjOTMzOWQ2MjczNDY3ZDU2MTdhY2E5Nzg2YjY1YzdkYzYxZDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuGfEjAFqTQzNTg1MjkxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "20abc9339d6273467d5617aca9786b65c7dc61d5", "author": {"user": {"login": "JB-H", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/20abc9339d6273467d5617aca9786b65c7dc61d5", "committedDate": "2020-06-17T20:14:44Z", "message": "Improvements of PSS/E importer:\n- supporting both raw and RAW file extensions\n- supporting STATUS = 0 of equipments\n- modification of header detection\n- reading Qmin and Qmax of generating units\n- modification of targetQ setter\n- better check of the number of windings of transformers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NTExMDcw", "url": "https://github.com/powsybl/powsybl-core/pull/1356#pullrequestreview-434511070", "createdAt": "2020-06-21T15:30:47Z", "commit": {"oid": "20abc9339d6273467d5617aca9786b65c7dc61d5"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNTozMDo0N1rOGmsqOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNTozNDozN1rOGmsrdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzMDc3OQ==", "bodyText": "Have you tried what you get in the case of a *.raw|RAW file but the content is not a raw file?", "url": "https://github.com/powsybl/powsybl-core/pull/1356#discussion_r443230779", "createdAt": "2020-06-21T15:30:47Z", "author": {"login": "geofjamg"}, "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -65,15 +66,31 @@ public String getComment() {\n         return \"PSS/E Format to IIDM converter\";\n     }\n \n+    private String findExtension(ReadOnlyDataSource dataSource, boolean throwException) throws IOException {\n+        for (String ext : EXTS) {\n+            if (dataSource.exists(null, ext)) {\n+                return ext;\n+            }\n+        }\n+        if (throwException) {\n+            throw new PsseException(\"File \" + dataSource.getBaseName()\n+                    + \".\" + Joiner.on(\"|\").join(EXTS) + \" not found\");\n+        }\n+        return null;\n+    }\n+\n     @Override\n     public boolean exists(ReadOnlyDataSource dataSource) {\n         try {\n-            if (dataSource.exists(null, EXT)) {\n-                try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, EXT)))) {\n-                    String titleLine = reader.readLine();\n-                    if (titleLine != null) {\n-                        return titleLine.length() >= 38\n-                                && titleLine.charAt(37) == '/';\n+            String ext = findExtension(dataSource, false);\n+            if (ext != null) {\n+                try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, ext)))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20abc9339d6273467d5617aca9786b65c7dc61d5"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzMTA5NA==", "bodyText": "Ideally we should had unit tests to cover the different cases (real raw or RAW, fake one)", "url": "https://github.com/powsybl/powsybl-core/pull/1356#discussion_r443231094", "createdAt": "2020-06-21T15:34:37Z", "author": {"login": "geofjamg"}, "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -65,15 +66,31 @@ public String getComment() {\n         return \"PSS/E Format to IIDM converter\";\n     }\n \n+    private String findExtension(ReadOnlyDataSource dataSource, boolean throwException) throws IOException {\n+        for (String ext : EXTS) {\n+            if (dataSource.exists(null, ext)) {\n+                return ext;\n+            }\n+        }\n+        if (throwException) {\n+            throw new PsseException(\"File \" + dataSource.getBaseName()\n+                    + \".\" + Joiner.on(\"|\").join(EXTS) + \" not found\");\n+        }\n+        return null;\n+    }\n+\n     @Override\n     public boolean exists(ReadOnlyDataSource dataSource) {\n         try {\n-            if (dataSource.exists(null, EXT)) {\n-                try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, EXT)))) {\n-                    String titleLine = reader.readLine();\n-                    if (titleLine != null) {\n-                        return titleLine.length() >= 38\n-                                && titleLine.charAt(37) == '/';\n+            String ext = findExtension(dataSource, false);\n+            if (ext != null) {\n+                try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, ext)))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzMDc3OQ=="}, "originalCommit": {"oid": "20abc9339d6273467d5617aca9786b65c7dc61d5"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDMyMDc5", "url": "https://github.com/powsybl/powsybl-core/pull/1356#pullrequestreview-435032079", "createdAt": "2020-06-22T15:22:57Z", "commit": {"oid": "20abc9339d6273467d5617aca9786b65c7dc61d5"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNToyMjo1N1rOGnFnnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNToyOToxMlrOGnF46Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYzOTcxMQ==", "bodyText": "Use String.join(\"|\", EXTS) instead of Joiner.on?", "url": "https://github.com/powsybl/powsybl-core/pull/1356#discussion_r443639711", "createdAt": "2020-06-22T15:22:57Z", "author": {"login": "mathbagu"}, "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -65,15 +66,31 @@ public String getComment() {\n         return \"PSS/E Format to IIDM converter\";\n     }\n \n+    private String findExtension(ReadOnlyDataSource dataSource, boolean throwException) throws IOException {\n+        for (String ext : EXTS) {\n+            if (dataSource.exists(null, ext)) {\n+                return ext;\n+            }\n+        }\n+        if (throwException) {\n+            throw new PsseException(\"File \" + dataSource.getBaseName()\n+                    + \".\" + Joiner.on(\"|\").join(EXTS) + \" not found\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20abc9339d6273467d5617aca9786b65c7dc61d5"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0MTI0MA==", "bodyText": "raw is a really common extension, used for instance in photography. I think it's a good idea to check if the file is valid or not.", "url": "https://github.com/powsybl/powsybl-core/pull/1356#discussion_r443641240", "createdAt": "2020-06-22T15:25:05Z", "author": {"login": "mathbagu"}, "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -65,15 +66,31 @@ public String getComment() {\n         return \"PSS/E Format to IIDM converter\";\n     }\n \n+    private String findExtension(ReadOnlyDataSource dataSource, boolean throwException) throws IOException {\n+        for (String ext : EXTS) {\n+            if (dataSource.exists(null, ext)) {\n+                return ext;\n+            }\n+        }\n+        if (throwException) {\n+            throw new PsseException(\"File \" + dataSource.getBaseName()\n+                    + \".\" + Joiner.on(\"|\").join(EXTS) + \" not found\");\n+        }\n+        return null;\n+    }\n+\n     @Override\n     public boolean exists(ReadOnlyDataSource dataSource) {\n         try {\n-            if (dataSource.exists(null, EXT)) {\n-                try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, EXT)))) {\n-                    String titleLine = reader.readLine();\n-                    if (titleLine != null) {\n-                        return titleLine.length() >= 38\n-                                && titleLine.charAt(37) == '/';\n+            String ext = findExtension(dataSource, false);\n+            if (ext != null) {\n+                try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, ext)))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzMDc3OQ=="}, "originalCommit": {"oid": "20abc9339d6273467d5617aca9786b65c7dc61d5"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0NDEzNw==", "bodyText": "Is this catch OK? There is probably to many try/catch level where only one is sufficient?", "url": "https://github.com/powsybl/powsybl-core/pull/1356#discussion_r443644137", "createdAt": "2020-06-22T15:29:12Z", "author": {"login": "mathbagu"}, "path": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java", "diffHunk": "@@ -300,62 +339,67 @@ public Network importData(ReadOnlyDataSource dataSource, NetworkFactory networkF\n \n         Network network = networkFactory.createNetwork(dataSource.getBaseName(), FORMAT);\n \n-        try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, EXT)))) {\n-\n-            // parse file\n-            PsseRawModel psseModel = new PsseRawReader().read(reader);\n-\n-            // set date and time\n-            // TODO\n-\n-            // build container to fit IIDM requirements\n-            List<Object> branches = ImmutableList.builder()\n-                    .addAll(psseModel.getNonTransformerBranches())\n-                    .addAll(psseModel.getTransformers())\n-                    .build();\n-            ToIntFunction<Object> branchToNum1 = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getI() : ((PsseTransformer) branch).getFirstRecord().getI();\n-            ToIntFunction<Object> branchToNum2 = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getJ() : ((PsseTransformer) branch).getFirstRecord().getJ();\n-            ToDoubleFunction<Object> branchToResistance = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getR() : ((PsseTransformer) branch).getSecondRecord().getR12();\n-            ToDoubleFunction<Object> branchToReactance = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getX() : ((PsseTransformer) branch).getSecondRecord().getX12();\n-            Predicate<Object> branchToIsTransformer = branch -> branch instanceof PsseTransformer;\n-            ContainersMapping containerMapping = ContainersMapping.create(psseModel.getBuses(), branches, PsseBus::getI, branchToNum1,\n-                branchToNum2, branchToResistance, branchToReactance, branchToIsTransformer,\n-                busNums -> \"VL\" + busNums.iterator().next(), substationNum -> \"S\" + substationNum++);\n-\n-            boolean ignoreBaseVoltage = ConversionParameters.readBooleanParameter(FORMAT, parameters, IGNORE_BASE_VOLTAGE_PARAMETER,\n-                    ParameterDefaultValueConfig.INSTANCE);\n-            PerUnitContext perUnitContext = new PerUnitContext(psseModel.getCaseIdentification().getSbase(), ignoreBaseVoltage);\n-\n-            // create buses\n-            createBuses(psseModel, containerMapping, perUnitContext, network);\n-\n-            //Create loads\n-            for (PsseLoad psseLoad : psseModel.getLoads()) {\n-                createLoad(psseLoad, containerMapping, network);\n-            }\n+        try {\n+            String ext = findExtension(dataSource, true);\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, ext)))) {\n+\n+                // parse file\n+                PsseRawModel psseModel = new PsseRawReader().read(reader);\n+\n+                // set date and time\n+                // TODO\n+\n+                // build container to fit IIDM requirements\n+                List<Object> branches = ImmutableList.builder()\n+                        .addAll(psseModel.getNonTransformerBranches())\n+                        .addAll(psseModel.getTransformers())\n+                        .build();\n+                ToIntFunction<Object> branchToNum1 = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getI() : ((PsseTransformer) branch).getFirstRecord().getI();\n+                ToIntFunction<Object> branchToNum2 = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getJ() : ((PsseTransformer) branch).getFirstRecord().getJ();\n+                ToDoubleFunction<Object> branchToResistance = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getR() : ((PsseTransformer) branch).getSecondRecord().getR12();\n+                ToDoubleFunction<Object> branchToReactance = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getX() : ((PsseTransformer) branch).getSecondRecord().getX12();\n+                Predicate<Object> branchToIsTransformer = branch -> branch instanceof PsseTransformer;\n+                ContainersMapping containerMapping = ContainersMapping.create(psseModel.getBuses(), branches, PsseBus::getI, branchToNum1,\n+                    branchToNum2, branchToResistance, branchToReactance, branchToIsTransformer,\n+                    busNums -> \"VL\" + busNums.iterator().next(), substationNum -> \"S\" + substationNum++);\n+\n+                boolean ignoreBaseVoltage = ConversionParameters.readBooleanParameter(FORMAT, parameters, IGNORE_BASE_VOLTAGE_PARAMETER,\n+                        ParameterDefaultValueConfig.INSTANCE);\n+                PerUnitContext perUnitContext = new PerUnitContext(psseModel.getCaseIdentification().getSbase(), ignoreBaseVoltage);\n+\n+                // create buses\n+                createBuses(psseModel, containerMapping, perUnitContext, network);\n+\n+                //Create loads\n+                for (PsseLoad psseLoad : psseModel.getLoads()) {\n+                    createLoad(psseLoad, containerMapping, network);\n+                }\n \n-            //Create shunts\n-            for (PsseFixedShunt psseShunt : psseModel.getFixedShunts()) {\n-                createShuntCompensator(psseShunt, perUnitContext, containerMapping, network);\n-            }\n+                //Create shunts\n+                for (PsseFixedShunt psseShunt : psseModel.getFixedShunts()) {\n+                    createShuntCompensator(psseShunt, perUnitContext, containerMapping, network);\n+                }\n \n-            for (PsseGenerator psseGen : psseModel.getGenerators()) {\n-                createGenerator(psseGen, containerMapping, network);\n-            }\n+                for (PsseGenerator psseGen : psseModel.getGenerators()) {\n+                    createGenerator(psseGen, containerMapping, network);\n+                }\n \n-            for (PsseNonTransformerBranch psseLine : psseModel.getNonTransformerBranches()) {\n-                createLine(psseLine, containerMapping, perUnitContext, network);\n-            }\n+                for (PsseNonTransformerBranch psseLine : psseModel.getNonTransformerBranches()) {\n+                    createLine(psseLine, containerMapping, perUnitContext, network);\n+                }\n \n-            for (PsseTransformer psseTfo : psseModel.getTransformers()) {\n-                createTransformer(psseTfo, containerMapping, perUnitContext, network);\n+                for (PsseTransformer psseTfo : psseModel.getTransformers()) {\n+                    createTransformer(psseTfo, containerMapping, perUnitContext, network);\n+                }\n+\n+            } catch (IOException e) {\n+                throw new UncheckedIOException(e);\n             }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20abc9339d6273467d5617aca9786b65c7dc61d5"}, "originalPosition": 297}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3736ed48368414a532bddd505ab3c7eca98e82e", "author": {"user": {"login": "JB-H", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/f3736ed48368414a532bddd505ab3c7eca98e82e", "committedDate": "2020-06-22T20:00:16Z", "message": "Improvements of PSS/E importer:\n- supporting both raw and RAW file extensions\n- supporting STATUS = 0 of equipments\n- modification of header detection\n- reading Qmin and Qmax of generating units\n- modification of targetQ setter\n- better check of the number of windings of transformers\n\nSigned-off-by: Jean-Baptiste Heyberger <jbheyberger@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de47296411e82eb40f01a9e806015e61a255ba74", "author": {"user": {"login": "JB-H", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/de47296411e82eb40f01a9e806015e61a255ba74", "committedDate": "2020-06-22T20:00:50Z", "message": "Improvements of PSS/E importer:\n- supporting both raw and RAW file extensions\n- supporting STATUS = 0 of equipments\n- modification of header detection\n- reading Qmin and Qmax of generating units\n- modification of targetQ setter\n- better check of the number of windings of transformers\n\nSigned-off-by: Jean-Baptiste Heyberger <jbheyberger@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "676d79c46077c2ac11d5981fecd2975793306673", "author": {"user": {"login": "JB-H", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/676d79c46077c2ac11d5981fecd2975793306673", "committedDate": "2020-06-23T07:16:49Z", "message": "use of String.join(\"|\", EXTS) to handle extensions of uct and raw files\n\nSigned-off-by: Jean-Baptiste Heyberger <jbheyberger@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d122daca1131ba90d5ebcf99bbaff187c373d89f", "author": {"user": {"login": "JB-H", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/d122daca1131ba90d5ebcf99bbaff187c373d89f", "committedDate": "2020-06-23T07:23:24Z", "message": "Improvements of PSS/E importer:\n- supporting both raw and RAW file extensions\n- supporting STATUS = 0 of equipments\n- modification of header detection\n- reading Qmin and Qmax of generating units\n- modification of targetQ setter\n- better check of the number of windings of transformers\n\nSigned-off-by: Jean-Baptiste Heyberger <jbheyberger@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df0f259b95397566d10ac473a75b9a6dc61e34f8", "author": {"user": {"login": "geofjamg", "name": "Geoffroy Jamgotchian"}}, "url": "https://github.com/powsybl/powsybl-core/commit/df0f259b95397566d10ac473a75b9a6dc61e34f8", "committedDate": "2020-06-23T09:13:10Z", "message": "Add fake raw file unit test\n\nSigned-off-by: Geoffroy Jamgotchian <geoffroy.jamgotchian@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "035ccea84594508bbaf6a08208354a76ecb332f5", "author": {"user": {"login": "geofjamg", "name": "Geoffroy Jamgotchian"}}, "url": "https://github.com/powsybl/powsybl-core/commit/035ccea84594508bbaf6a08208354a76ecb332f5", "committedDate": "2020-06-23T09:17:15Z", "message": "Merge branch 'master' into psse-converter-b2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "643e521e503b593cc508ea918f5d4d8192f16f8d", "author": {"user": {"login": "geofjamg", "name": "Geoffroy Jamgotchian"}}, "url": "https://github.com/powsybl/powsybl-core/commit/643e521e503b593cc508ea918f5d4d8192f16f8d", "committedDate": "2020-06-23T13:30:16Z", "message": "Add more unit tests\n\nSigned-off-by: Geoffroy Jamgotchian <geoffroy.jamgotchian@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f08eb4a009903ab1964895ab29eb16b16f3b5a1f", "author": {"user": {"login": "geofjamg", "name": "Geoffroy Jamgotchian"}}, "url": "https://github.com/powsybl/powsybl-core/commit/f08eb4a009903ab1964895ab29eb16b16f3b5a1f", "committedDate": "2020-06-23T13:30:27Z", "message": "Merge remote-tracking branch 'origin/psse-converter-b2' into psse-converter-b2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c16bf68e7ab7f85531305acebfbedb8d320896ad", "author": {"user": {"login": "geofjamg", "name": "Geoffroy Jamgotchian"}}, "url": "https://github.com/powsybl/powsybl-core/commit/c16bf68e7ab7f85531305acebfbedb8d320896ad", "committedDate": "2020-06-23T13:31:52Z", "message": "Merge branch 'master' into psse-converter-b2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1ODAzNjQ1", "url": "https://github.com/powsybl/powsybl-core/pull/1356#pullrequestreview-435803645", "createdAt": "2020-06-23T13:51:19Z", "commit": {"oid": "c16bf68e7ab7f85531305acebfbedb8d320896ad"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1ODUyOTEw", "url": "https://github.com/powsybl/powsybl-core/pull/1356#pullrequestreview-435852910", "createdAt": "2020-06-23T14:39:58Z", "commit": {"oid": "c16bf68e7ab7f85531305acebfbedb8d320896ad"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4332, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}