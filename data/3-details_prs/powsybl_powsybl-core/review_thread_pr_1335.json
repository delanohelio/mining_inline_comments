{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4NDcxNDc2", "number": 1335, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMTo1MjoxMVrOEEQqHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMTo1Mjo1OFrOEEQrGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTAyNjg3OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergingView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMTo1MjoxMVrOGhxQ9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMTo1MjoxMVrOGhxQ9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA2MzM1MA==", "bodyText": "Is it the optimize way to implement this? Could we simply sum the lineCount of the underlying networks and add the number of mergedLine? I don't know if it's really better, but it avoids to iterate over all the lines", "url": "https://github.com/powsybl/powsybl-core/pull/1335#discussion_r438063350", "createdAt": "2020-06-10T11:52:11Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergingView.java", "diffHunk": "@@ -693,17 +693,17 @@ public LineAdder newLine() {\n \n     @Override\n     public Iterable<Line> getLines() {\n-        return Collections.unmodifiableCollection(index.getLines());\n+        return index.getLines();\n     }\n \n     @Override\n     public Stream<Line> getLineStream() {\n-        return index.getLines().stream();\n+        return index.getLineStream();\n     }\n \n     @Override\n     public int getLineCount() {\n-        return index.getLines().size();\n+        return (int) index.getLineStream().count();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dda62c2b036822295b267072c9cf3ca01b831d4"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTAyOTM4OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergingView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMTo1Mjo1OFrOGhxSew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMTo1Mjo1OFrOGhxSew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA2MzczOQ==", "bodyText": "Same kind of remark: we could sum the danglingLine count, avec remove 2 times the mergedLine. (1 merged Line = 2 danglingLine).", "url": "https://github.com/powsybl/powsybl-core/pull/1335#discussion_r438063739", "createdAt": "2020-06-10T11:52:58Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/MergingView.java", "diffHunk": "@@ -714,17 +714,17 @@ public Line getLine(final String id) {\n     // DanglingLines\n     @Override\n     public Iterable<DanglingLine> getDanglingLines() {\n-        return Collections.unmodifiableCollection(index.getDanglingLines());\n+        return index.getDanglingLines();\n     }\n \n     @Override\n     public Stream<DanglingLine> getDanglingLineStream() {\n-        return index.getDanglingLines().stream();\n+        return index.getDanglingLineStream();\n     }\n \n     @Override\n     public int getDanglingLineCount() {\n-        return index.getDanglingLines().size();\n+        return (int) index.getDanglingLineStream().count();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dda62c2b036822295b267072c9cf3ca01b831d4"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 135, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}