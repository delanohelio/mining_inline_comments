{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NzEwNzA4", "number": 1474, "title": "Refactor sensitivity computation API", "bodyText": "Please check if the PR fulfills these requirements (please use '[x]' to check the checkboxes, or submit the PR and then click the checkboxes)\n\n The commit message follows our guidelines\n Tests for the changes have been added (for bug fixes / features)\n Docs have been added / updated (for bug fixes / features)\n\nWhat kind of change does this PR introduce? (Bug fix, feature, docs update, ...)\nBreaking change in sensitivity computation API\nWhat is the current behavior? (You can also link to an open issue here)\nFor now the computation is created by a factory that has to be specified in the platform configuration\nWhat is the new behavior (if this is a feature change)?\nIt is made consistent with other computation modules as loadflow. The single entry point of the API is a static class which enables to find a runtime implementation of the sensitivity computation and to run it through different synchronous and asynchronous methods.\nDoes this PR introduce a breaking change or deprecate an API? If yes, check the following:\n\n The Breaking Change or Deprecated label has been added\n The migration guide has been updated in the github wiki (What changes might users need to make in their application due to this PR?)\n\nOther information:\n(if any of the questions/checkboxes don't apply, please delete them entirely)", "createdAt": "2020-09-17T14:26:03Z", "url": "https://github.com/powsybl/powsybl-core/pull/1474", "merged": true, "mergeCommit": {"oid": "cdf83b38d61aad868fd78ecb402b6183970ac84f"}, "closed": true, "closedAt": "2020-09-29T14:36:18Z", "author": {"login": "TheMaskedTurtle"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJxvJeAH2gAyNDg4NzEwNzA4OjhiNmJkMGQ1OTIxMjQwY2E0YjlkYTE5MTBkNmI0OWNhODNlZThlOGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdNo_6oAH2gAyNDg4NzEwNzA4OjFiZDIwMTA4OWFlYjY4ZTI1NjMxMTlmNjQwNGQ2YTNmYzJjNzMzN2Y=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8b6bd0d5921240ca4b9da1910d6b49ca83ee8e8d", "author": {"user": {"login": "TheMaskedTurtle", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/8b6bd0d5921240ca4b9da1910d6b49ca83ee8e8d", "committedDate": "2020-09-17T14:19:24Z", "message": "Refactor sensitivity computation API\n- Provider interface\n- SensitivityComputation static class as single entry point for sensitivity computation\n\nSigned-off-by: Joris Mancini <joris.mancini@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b306f494b905b1601ad1cb10d03753858b80f35", "author": {"user": {"login": "TheMaskedTurtle", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/1b306f494b905b1601ad1cb10d03753858b80f35", "committedDate": "2020-09-17T14:31:48Z", "message": "checkstyle fix\n\nSigned-off-by: Joris Mancini <joris.mancini@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "194c2f47703b6602a96e7fa3349c72f0b81ab48b", "author": {"user": {"login": "TheMaskedTurtle", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/194c2f47703b6602a96e7fa3349c72f0b81ab48b", "committedDate": "2020-09-17T15:25:47Z", "message": "Adapt SensitivityComputationProvider interface\n\nSigned-off-by: Joris Mancini <joris.mancini@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6a3d90330ff9ad3145999e6c39c1da43f4a83c5", "author": {"user": {"login": "TheMaskedTurtle", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/a6a3d90330ff9ad3145999e6c39c1da43f4a83c5", "committedDate": "2020-09-17T15:47:58Z", "message": "Remove redundant methods\n\nSigned-off-by: Joris Mancini <joris.mancini@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82055da70d0828ac22877208054f2abe56fc5351", "author": {"user": {"login": "TheMaskedTurtle", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/82055da70d0828ac22877208054f2abe56fc5351", "committedDate": "2020-09-17T15:58:20Z", "message": "Fix copyright and unwanted renaming\n\nSigned-off-by: Joris Mancini <joris.mancini@rte-france.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNDAyNjY2", "url": "https://github.com/powsybl/powsybl-core/pull/1474#pullrequestreview-491402666", "createdAt": "2020-09-18T12:03:15Z", "commit": {"oid": "82055da70d0828ac22877208054f2abe56fc5351"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjowNDoyM1rOHUKUrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjowNDoyM1rOHUKUrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkwMjcwMw==", "bodyText": "Maybe since we're breaking the API this would be an opportunity to rename SensitivityComputation into SensitivityAnalysis everywhere, since this is the standard name for it in English it seems?", "url": "https://github.com/powsybl/powsybl-core/pull/1474#discussion_r490902703", "createdAt": "2020-09-18T12:04:23Z", "author": {"login": "agnesLeroy"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputation.java", "diffHunk": "@@ -1,53 +1,266 @@\n-/**\n+/*\n  * Copyright (c) 2018, RTE (http://www.rte-france.com)\n  * This Source Code Form is subject to the terms of the Mozilla Public\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n package com.powsybl.sensitivity;\n \n+import com.google.common.base.Suppliers;\n+import com.powsybl.commons.PowsyblException;\n import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfig;\n+import com.powsybl.commons.util.ServiceLoaderCache;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.computation.DefaultComputationManagerConfig;\n import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.iidm.network.Network;\n \n+import java.util.List;\n+import java.util.Objects;\n import java.util.concurrent.CompletableFuture;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n \n /**\n- * Sensitivity computation interface\n+ * Sensitivity computation main API. It is a utility class (so with only static methods) used as an entry point for running\n+ * a sensitivity computation allowing to choose either a specific implementation or just to rely on default one.\n  *\n- * <p>\n- *     Sensitivity computation is used to assess the impact of a small modification\n- *     of a network variables on the value of network functions.\n- *     This computation can be assimilated to a partial derivative computed on a given\n- *     network state and on that state modified based on a list of contingencies, if specified.\n- * </p>\n- * <p>\n- *     PTDFs used in Flowbased methodology for example are sensitivity computation\n- *     results. The sensitivity variables are the GSK shift and the sensitivity function\n- *     are the monitored lines/transformers flows.\n- * </p>\n- * @author Sebastien Murgey {@literal <sebastien.murgey at rte-france.com>}\n+ * @author Joris Mancini {@literal <joris.mancini at rte-france.com>}\n  */\n-public interface SensitivityComputation extends Versionable {\n+public final class SensitivityComputation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82055da70d0828ac22877208054f2abe56fc5351"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNDExOTUz", "url": "https://github.com/powsybl/powsybl-core/pull/1474#pullrequestreview-491411953", "createdAt": "2020-09-18T12:17:58Z", "commit": {"oid": "82055da70d0828ac22877208054f2abe56fc5351"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjoxNzo1OFrOHUKuZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjoxNzo1OFrOHUKuZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkwOTI4Ng==", "bodyText": "Here the copyright should be 2020", "url": "https://github.com/powsybl/powsybl-core/pull/1474#discussion_r490909286", "createdAt": "2020-09-18T12:17:58Z", "author": {"login": "agnesLeroy"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationProvider.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright (c) 2018, RTE (http://www.rte-france.com)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82055da70d0828ac22877208054f2abe56fc5351"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNDM2NTc2", "url": "https://github.com/powsybl/powsybl-core/pull/1474#pullrequestreview-491436576", "createdAt": "2020-09-18T12:54:00Z", "commit": {"oid": "82055da70d0828ac22877208054f2abe56fc5351"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjo1NDowMFrOHUL4Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjo1NDoyMVrOHUL5Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkyODIxOQ==", "bodyText": "Here the copyright should be 2020", "url": "https://github.com/powsybl/powsybl-core/pull/1474#discussion_r490928219", "createdAt": "2020-09-18T12:54:00Z", "author": {"login": "agnesLeroy"}, "path": "sensitivity-api/src/test/java/com/powsybl/sensitivity/SensitivityComputationTest.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright (c) 2018, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82055da70d0828ac22877208054f2abe56fc5351"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkyODM1Mg==", "bodyText": "Here the copyright should be 2020", "url": "https://github.com/powsybl/powsybl-core/pull/1474#discussion_r490928352", "createdAt": "2020-09-18T12:54:15Z", "author": {"login": "agnesLeroy"}, "path": "sensitivity-api/src/test/java/com/powsybl/sensitivity/mocks/AnotherSensitivityComputationProviderMock.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c) 2018, RTE (http://www.rte-france.com)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82055da70d0828ac22877208054f2abe56fc5351"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkyODQyMg==", "bodyText": "Here the copyright should be 2020", "url": "https://github.com/powsybl/powsybl-core/pull/1474#discussion_r490928422", "createdAt": "2020-09-18T12:54:21Z", "author": {"login": "agnesLeroy"}, "path": "sensitivity-api/src/test/java/com/powsybl/sensitivity/mocks/SensitivityComputationProviderMock.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c) 2018, RTE (http://www.rte-france.com)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82055da70d0828ac22877208054f2abe56fc5351"}, "originalPosition": 2}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78b6bdabdfc612b3e42e65a5dbce8f89d7eba85c", "author": {"user": null}, "url": "https://github.com/powsybl/powsybl-core/commit/78b6bdabdfc612b3e42e65a5dbce8f89d7eba85c", "committedDate": "2020-09-18T14:35:10Z", "message": "Use the existing find function to select the provider, update deprecated call in the LoadFlow, update unit tests\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNTI2OTUx", "url": "https://github.com/powsybl/powsybl-core/pull/1474#pullrequestreview-491526951", "createdAt": "2020-09-18T14:38:55Z", "commit": {"oid": "78b6bdabdfc612b3e42e65a5dbce8f89d7eba85c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c07d6ac95e45ffe356253f9adab86c7b7948deb", "author": {"user": {"login": "TheMaskedTurtle", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/1c07d6ac95e45ffe356253f9adab86c7b7948deb", "committedDate": "2020-09-21T07:45:49Z", "message": "Fix year in the copyright\n\nSigned-off-by: Joris Mancini <joris.mancini@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3d15166491126213e105b37638efce71ff4f8fa", "author": {"user": {"login": "TheMaskedTurtle", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/e3d15166491126213e105b37638efce71ff4f8fa", "committedDate": "2020-09-21T07:59:40Z", "message": "Merge branch 'refactor-sensi-api' of https://github.com/powsybl/powsybl-core into refactor-sensi-api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1186b627c02b4b4bd8b689934e4c2462e9a517ca", "author": {"user": {"login": "TheMaskedTurtle", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/1186b627c02b4b4bd8b689934e4c2462e9a517ca", "committedDate": "2020-09-21T08:38:23Z", "message": "Rename computation into analysis\n\nSigned-off-by: Joris Mancini <joris.mancini@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49409a4de74afd5bfa0383e06f0c9beeae0cc29a", "author": {"user": {"login": "TheMaskedTurtle", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/49409a4de74afd5bfa0383e06f0c9beeae0cc29a", "committedDate": "2020-09-21T08:50:17Z", "message": "Fix missing renaming\n\nSigned-off-by: Joris Mancini <joris.mancini@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cebe8d8b44772f122e6922a5d390e47174b339b", "author": {"user": {"login": "TheMaskedTurtle", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/0cebe8d8b44772f122e6922a5d390e47174b339b", "committedDate": "2020-09-21T09:10:44Z", "message": "Add tests on sensitivity analysis\n\nSigned-off-by: Joris Mancini <joris.mancini@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7a767bab7f9f0bed283cd7bc474ecc484a948be", "author": {"user": {"login": "TheMaskedTurtle", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/f7a767bab7f9f0bed283cd7bc474ecc484a948be", "committedDate": "2020-09-21T11:45:57Z", "message": "Add tests on sensitivity analysis\n\nSigned-off-by: Joris Mancini <joris.mancini@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "926a675652c517fbf688e6c0b8aa2567a2848d87", "author": {"user": {"login": "TheMaskedTurtle", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/926a675652c517fbf688e6c0b8aa2567a2848d87", "committedDate": "2020-09-21T11:58:00Z", "message": "Merge branch 'master' into refactor-sensi-api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e22366b8098c7b13ab685daffe602621903b93af", "author": {"user": {"login": "TheMaskedTurtle", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/e22366b8098c7b13ab685daffe602621903b93af", "committedDate": "2020-09-23T13:27:24Z", "message": "Merge branch 'master' into refactor-sensi-api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NjQyODQ4", "url": "https://github.com/powsybl/powsybl-core/pull/1474#pullrequestreview-495642848", "createdAt": "2020-09-24T14:37:06Z", "commit": {"oid": "e22366b8098c7b13ab685daffe602621903b93af"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDozNzowN1rOHXeGEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTowMzozNlrOHXfWuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM3MjM3MQ==", "bodyText": "I think you should not change this line: in the first implementation of the new loadflow API, we used the default property key instead of default-impl-name. I think changing this could be considered as a regression.\n@MioRtia what do you think? I don't remember if the default property could be forgotten...", "url": "https://github.com/powsybl/powsybl-core/pull/1474#discussion_r494372371", "createdAt": "2020-09-24T14:37:07Z", "author": {"login": "mathbagu"}, "path": "loadflow/loadflow-api/src/main/java/com/powsybl/loadflow/LoadFlow.java", "diffHunk": "@@ -96,7 +96,7 @@ public String getVersion() {\n      */\n     public static Runner find(String name) {\n         return new Runner(PlatformConfigNamedProvider.Finder\n-                .findBackwardsCompatible(name, \"load-flow\", LoadFlowProvider.class,\n+                .find(name, \"load-flow\", LoadFlowProvider.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e22366b8098c7b13ab685daffe602621903b93af"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM3Mzc4Ng==", "bodyText": "Question: should we also change the name of the module? If yes, don't forget to change the name of the automatic module. If we do it, we probably also have to change the name of the packages... For FARAO, it could have a huge impact", "url": "https://github.com/powsybl/powsybl-core/pull/1474#discussion_r494373786", "createdAt": "2020-09-24T14:38:57Z", "author": {"login": "mathbagu"}, "path": "sensitivity-api/pom.xml", "diffHunk": "@@ -19,8 +19,8 @@\n     </parent>\n \n     <artifactId>powsybl-sensitivity-api</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e22366b8098c7b13ab685daffe602621903b93af"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM3NDM5MA==", "bodyText": "typo: on the default one", "url": "https://github.com/powsybl/powsybl-core/pull/1474#discussion_r494374390", "createdAt": "2020-09-24T14:39:42Z", "author": {"login": "mathbagu"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityAnalysis.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.sensitivity;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfig;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.computation.DefaultComputationManagerConfig;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.iidm.network.Network;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Sensitivity analysis main API. It is a utility class (so with only static methods) used as an entry point for running\n+ * a sensitivity analysis allowing to choose either a specific implementation or just to rely on default one.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e22366b8098c7b13ab685daffe602621903b93af"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM3ODA5OQ==", "bodyText": "I think it's not necessary to distinguish analysis with and without contingencies. Maybe it's sufficient to accept null for ContingencyProvider.\nDepending on what we decide, you can simply move this code in the runAsync method with all the parameters.", "url": "https://github.com/powsybl/powsybl-core/pull/1474#discussion_r494378099", "createdAt": "2020-09-24T14:44:27Z", "author": {"login": "mathbagu"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityAnalysis.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.sensitivity;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfig;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.computation.DefaultComputationManagerConfig;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.iidm.network.Network;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Sensitivity analysis main API. It is a utility class (so with only static methods) used as an entry point for running\n+ * a sensitivity analysis allowing to choose either a specific implementation or just to rely on default one.\n+ *\n+ * @author Joris Mancini {@literal <joris.mancini at rte-france.com>}\n+ */\n+public final class SensitivityAnalysis {\n+\n+    private SensitivityAnalysis() {\n+        throw new AssertionError(\"Utility class should not been instantiated\");\n+    }\n+\n+    /**\n+     * A sensitivity analysis runner is responsible for providing convenient methods on top of {@link SensitivityAnalysisProvider}:\n+     * several variants of synchronous and asynchronous run with default parameters.\n+     */\n+    public static final class Runner implements Versionable {\n+\n+        private final SensitivityAnalysisProvider provider;\n+\n+        private Runner(SensitivityAnalysisProvider provider) {\n+            this.provider = Objects.requireNonNull(provider);\n+        }\n+\n+        private void checkInputs(Network network,\n+                                 String workingStateId,\n+                                 SensitivityFactorsProvider factorsProvider,\n+                                 ContingenciesProvider contingenciesProvider,\n+                                 SensitivityAnalysisParameters parameters,\n+                                 ComputationManager computationManager) {\n+            checkInputs(network, workingStateId, factorsProvider, parameters, computationManager);\n+            Objects.requireNonNull(contingenciesProvider, \"Contingencies provider should not be null\");\n+        }\n+\n+        private void checkInputs(Network network,\n+                                 String workingStateId,\n+                                 SensitivityFactorsProvider factorsProvider,\n+                                 SensitivityAnalysisParameters parameters,\n+                                 ComputationManager computationManager) {\n+            Objects.requireNonNull(network, \"Network should not be null\");\n+            Objects.requireNonNull(workingStateId, \"Parameters should not be null\");\n+            Objects.requireNonNull(factorsProvider, \"Sensitivity factors provider should not be null\");\n+            Objects.requireNonNull(parameters, \"Sensitivity analysis parameters should not be null\");\n+            Objects.requireNonNull(computationManager, \"Computation manager should not be null\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e22366b8098c7b13ab685daffe602621903b93af"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM3OTY1Nw==", "bodyText": "I would prefer call the async method instead of the provider.run() method.", "url": "https://github.com/powsybl/powsybl-core/pull/1474#discussion_r494379657", "createdAt": "2020-09-24T14:46:28Z", "author": {"login": "mathbagu"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityAnalysis.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.sensitivity;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfig;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.computation.DefaultComputationManagerConfig;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.iidm.network.Network;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Sensitivity analysis main API. It is a utility class (so with only static methods) used as an entry point for running\n+ * a sensitivity analysis allowing to choose either a specific implementation or just to rely on default one.\n+ *\n+ * @author Joris Mancini {@literal <joris.mancini at rte-france.com>}\n+ */\n+public final class SensitivityAnalysis {\n+\n+    private SensitivityAnalysis() {\n+        throw new AssertionError(\"Utility class should not been instantiated\");\n+    }\n+\n+    /**\n+     * A sensitivity analysis runner is responsible for providing convenient methods on top of {@link SensitivityAnalysisProvider}:\n+     * several variants of synchronous and asynchronous run with default parameters.\n+     */\n+    public static final class Runner implements Versionable {\n+\n+        private final SensitivityAnalysisProvider provider;\n+\n+        private Runner(SensitivityAnalysisProvider provider) {\n+            this.provider = Objects.requireNonNull(provider);\n+        }\n+\n+        private void checkInputs(Network network,\n+                                 String workingStateId,\n+                                 SensitivityFactorsProvider factorsProvider,\n+                                 ContingenciesProvider contingenciesProvider,\n+                                 SensitivityAnalysisParameters parameters,\n+                                 ComputationManager computationManager) {\n+            checkInputs(network, workingStateId, factorsProvider, parameters, computationManager);\n+            Objects.requireNonNull(contingenciesProvider, \"Contingencies provider should not be null\");\n+        }\n+\n+        private void checkInputs(Network network,\n+                                 String workingStateId,\n+                                 SensitivityFactorsProvider factorsProvider,\n+                                 SensitivityAnalysisParameters parameters,\n+                                 ComputationManager computationManager) {\n+            Objects.requireNonNull(network, \"Network should not be null\");\n+            Objects.requireNonNull(workingStateId, \"Parameters should not be null\");\n+            Objects.requireNonNull(factorsProvider, \"Sensitivity factors provider should not be null\");\n+            Objects.requireNonNull(parameters, \"Sensitivity analysis parameters should not be null\");\n+            Objects.requireNonNull(computationManager, \"Computation manager should not be null\");\n+        }\n+\n+        public CompletableFuture<SensitivityAnalysisResults> runAsync(Network network,\n+                                                                      String workingStateId,\n+                                                                      SensitivityFactorsProvider factorsProvider,\n+                                                                      ContingenciesProvider contingenciesProvider,\n+                                                                      SensitivityAnalysisParameters parameters,\n+                                                                      ComputationManager computationManager) {\n+            checkInputs(network, workingStateId, factorsProvider, contingenciesProvider, parameters, computationManager);\n+            return provider.run(network, workingStateId, factorsProvider, contingenciesProvider, parameters, computationManager);\n+        }\n+\n+        public CompletableFuture<SensitivityAnalysisResults> runAsync(Network network,\n+                                                                      String workingStateId,\n+                                                                      SensitivityFactorsProvider factorsProvider,\n+                                                                      ContingenciesProvider contingenciesProvider,\n+                                                                      SensitivityAnalysisParameters parameters) {\n+            return runAsync(network, workingStateId, factorsProvider, contingenciesProvider, parameters, DefaultComputationManagerConfig.load().createLongTimeExecutionComputationManager());\n+        }\n+\n+        public CompletableFuture<SensitivityAnalysisResults> runAsync(Network network,\n+                                                                      SensitivityFactorsProvider factorsProvider,\n+                                                                      ContingenciesProvider contingenciesProvider,\n+                                                                      SensitivityAnalysisParameters parameters) {\n+            return runAsync(network, network.getVariantManager().getWorkingVariantId(), factorsProvider, contingenciesProvider, parameters);\n+        }\n+\n+        public CompletableFuture<SensitivityAnalysisResults> runAsync(Network network,\n+                                                                      SensitivityFactorsProvider factorsProvider,\n+                                                                      ContingenciesProvider contingenciesProvider) {\n+            return runAsync(network, factorsProvider, contingenciesProvider, SensitivityAnalysisParameters.load());\n+        }\n+\n+        public CompletableFuture<SensitivityAnalysisResults> runAsync(Network network,\n+                                                                      String workingStateId,\n+                                                                      SensitivityFactorsProvider factorsProvider,\n+                                                                      SensitivityAnalysisParameters parameters,\n+                                                                      ComputationManager computationManager) {\n+            checkInputs(network, workingStateId, factorsProvider, parameters, computationManager);\n+            return provider.run(network, workingStateId, factorsProvider, parameters, computationManager);\n+        }\n+\n+        public CompletableFuture<SensitivityAnalysisResults> runAsync(Network network,\n+                                                                      String workingStateId,\n+                                                                      SensitivityFactorsProvider factorsProvider,\n+                                                                      SensitivityAnalysisParameters parameters) {\n+            return runAsync(network, workingStateId, factorsProvider, parameters, DefaultComputationManagerConfig.load().createLongTimeExecutionComputationManager());\n+        }\n+\n+        public CompletableFuture<SensitivityAnalysisResults> runAsync(Network network,\n+                                                                      SensitivityFactorsProvider factorsProvider,\n+                                                                      SensitivityAnalysisParameters parameters) {\n+            return runAsync(network, network.getVariantManager().getWorkingVariantId(), factorsProvider, parameters);\n+        }\n+\n+        public CompletableFuture<SensitivityAnalysisResults> runAsync(Network network,\n+                                                                      SensitivityFactorsProvider factorsProvider) {\n+            return runAsync(network, factorsProvider, SensitivityAnalysisParameters.load());\n+        }\n+\n+        public SensitivityAnalysisResults run(Network network,\n+                                              String workingStateId,\n+                                              SensitivityFactorsProvider factorsProvider,\n+                                              ContingenciesProvider contingenciesProvider,\n+                                              SensitivityAnalysisParameters parameters,\n+                                              ComputationManager computationManager) {\n+            checkInputs(network, workingStateId, factorsProvider, contingenciesProvider, parameters, computationManager);\n+            return provider.run(network, workingStateId, factorsProvider, contingenciesProvider, parameters, computationManager).join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e22366b8098c7b13ab685daffe602621903b93af"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM4MTI1NQ==", "bodyText": "I think you should add static method to hide the usage of the runner class, like it's done in the LoadFlow or DynamicSimulation classes. To avoid too many methods, we could only consider some of them.", "url": "https://github.com/powsybl/powsybl-core/pull/1474#discussion_r494381255", "createdAt": "2020-09-24T14:48:25Z", "author": {"login": "mathbagu"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityAnalysis.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.sensitivity;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfig;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.computation.DefaultComputationManagerConfig;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.iidm.network.Network;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Sensitivity analysis main API. It is a utility class (so with only static methods) used as an entry point for running\n+ * a sensitivity analysis allowing to choose either a specific implementation or just to rely on default one.\n+ *\n+ * @author Joris Mancini {@literal <joris.mancini at rte-france.com>}\n+ */\n+public final class SensitivityAnalysis {\n+\n+    private SensitivityAnalysis() {\n+        throw new AssertionError(\"Utility class should not been instantiated\");\n+    }\n+\n+    /**\n+     * A sensitivity analysis runner is responsible for providing convenient methods on top of {@link SensitivityAnalysisProvider}:\n+     * several variants of synchronous and asynchronous run with default parameters.\n+     */\n+    public static final class Runner implements Versionable {\n+\n+        private final SensitivityAnalysisProvider provider;\n+\n+        private Runner(SensitivityAnalysisProvider provider) {\n+            this.provider = Objects.requireNonNull(provider);\n+        }\n+\n+        private void checkInputs(Network network,\n+                                 String workingStateId,\n+                                 SensitivityFactorsProvider factorsProvider,\n+                                 ContingenciesProvider contingenciesProvider,\n+                                 SensitivityAnalysisParameters parameters,\n+                                 ComputationManager computationManager) {\n+            checkInputs(network, workingStateId, factorsProvider, parameters, computationManager);\n+            Objects.requireNonNull(contingenciesProvider, \"Contingencies provider should not be null\");\n+        }\n+\n+        private void checkInputs(Network network,\n+                                 String workingStateId,\n+                                 SensitivityFactorsProvider factorsProvider,\n+                                 SensitivityAnalysisParameters parameters,\n+                                 ComputationManager computationManager) {\n+            Objects.requireNonNull(network, \"Network should not be null\");\n+            Objects.requireNonNull(workingStateId, \"Parameters should not be null\");\n+            Objects.requireNonNull(factorsProvider, \"Sensitivity factors provider should not be null\");\n+            Objects.requireNonNull(parameters, \"Sensitivity analysis parameters should not be null\");\n+            Objects.requireNonNull(computationManager, \"Computation manager should not be null\");\n+        }\n+\n+        public CompletableFuture<SensitivityAnalysisResults> runAsync(Network network,\n+                                                                      String workingStateId,\n+                                                                      SensitivityFactorsProvider factorsProvider,\n+                                                                      ContingenciesProvider contingenciesProvider,\n+                                                                      SensitivityAnalysisParameters parameters,\n+                                                                      ComputationManager computationManager) {\n+            checkInputs(network, workingStateId, factorsProvider, contingenciesProvider, parameters, computationManager);\n+            return provider.run(network, workingStateId, factorsProvider, contingenciesProvider, parameters, computationManager);\n+        }\n+\n+        public CompletableFuture<SensitivityAnalysisResults> runAsync(Network network,\n+                                                                      String workingStateId,\n+                                                                      SensitivityFactorsProvider factorsProvider,\n+                                                                      ContingenciesProvider contingenciesProvider,\n+                                                                      SensitivityAnalysisParameters parameters) {\n+            return runAsync(network, workingStateId, factorsProvider, contingenciesProvider, parameters, DefaultComputationManagerConfig.load().createLongTimeExecutionComputationManager());\n+        }\n+\n+        public CompletableFuture<SensitivityAnalysisResults> runAsync(Network network,\n+                                                                      SensitivityFactorsProvider factorsProvider,\n+                                                                      ContingenciesProvider contingenciesProvider,\n+                                                                      SensitivityAnalysisParameters parameters) {\n+            return runAsync(network, network.getVariantManager().getWorkingVariantId(), factorsProvider, contingenciesProvider, parameters);\n+        }\n+\n+        public CompletableFuture<SensitivityAnalysisResults> runAsync(Network network,\n+                                                                      SensitivityFactorsProvider factorsProvider,\n+                                                                      ContingenciesProvider contingenciesProvider) {\n+            return runAsync(network, factorsProvider, contingenciesProvider, SensitivityAnalysisParameters.load());\n+        }\n+\n+        public CompletableFuture<SensitivityAnalysisResults> runAsync(Network network,\n+                                                                      String workingStateId,\n+                                                                      SensitivityFactorsProvider factorsProvider,\n+                                                                      SensitivityAnalysisParameters parameters,\n+                                                                      ComputationManager computationManager) {\n+            checkInputs(network, workingStateId, factorsProvider, parameters, computationManager);\n+            return provider.run(network, workingStateId, factorsProvider, parameters, computationManager);\n+        }\n+\n+        public CompletableFuture<SensitivityAnalysisResults> runAsync(Network network,\n+                                                                      String workingStateId,\n+                                                                      SensitivityFactorsProvider factorsProvider,\n+                                                                      SensitivityAnalysisParameters parameters) {\n+            return runAsync(network, workingStateId, factorsProvider, parameters, DefaultComputationManagerConfig.load().createLongTimeExecutionComputationManager());\n+        }\n+\n+        public CompletableFuture<SensitivityAnalysisResults> runAsync(Network network,\n+                                                                      SensitivityFactorsProvider factorsProvider,\n+                                                                      SensitivityAnalysisParameters parameters) {\n+            return runAsync(network, network.getVariantManager().getWorkingVariantId(), factorsProvider, parameters);\n+        }\n+\n+        public CompletableFuture<SensitivityAnalysisResults> runAsync(Network network,\n+                                                                      SensitivityFactorsProvider factorsProvider) {\n+            return runAsync(network, factorsProvider, SensitivityAnalysisParameters.load());\n+        }\n+\n+        public SensitivityAnalysisResults run(Network network,\n+                                              String workingStateId,\n+                                              SensitivityFactorsProvider factorsProvider,\n+                                              ContingenciesProvider contingenciesProvider,\n+                                              SensitivityAnalysisParameters parameters,\n+                                              ComputationManager computationManager) {\n+            checkInputs(network, workingStateId, factorsProvider, contingenciesProvider, parameters, computationManager);\n+            return provider.run(network, workingStateId, factorsProvider, contingenciesProvider, parameters, computationManager).join();\n+        }\n+\n+        public SensitivityAnalysisResults run(Network network,\n+                                              String workingStateId,\n+                                              SensitivityFactorsProvider factorsProvider,\n+                                              ContingenciesProvider contingenciesProvider,\n+                                              SensitivityAnalysisParameters parameters) {\n+            return run(network, workingStateId, factorsProvider, contingenciesProvider, parameters, DefaultComputationManagerConfig.load().createLongTimeExecutionComputationManager());\n+        }\n+\n+        public SensitivityAnalysisResults run(Network network,\n+                                              SensitivityFactorsProvider factorsProvider,\n+                                              ContingenciesProvider contingenciesProvider,\n+                                              SensitivityAnalysisParameters parameters) {\n+            return run(network, network.getVariantManager().getWorkingVariantId(), factorsProvider, contingenciesProvider, parameters);\n+        }\n+\n+        public SensitivityAnalysisResults run(Network network,\n+                                              SensitivityFactorsProvider factorsProvider,\n+                                              ContingenciesProvider contingenciesProvider) {\n+            return run(network, factorsProvider, contingenciesProvider, SensitivityAnalysisParameters.load());\n+        }\n+\n+        public SensitivityAnalysisResults run(Network network,\n+                                              String workingStateId,\n+                                              SensitivityFactorsProvider factorsProvider,\n+                                              SensitivityAnalysisParameters parameters,\n+                                              ComputationManager computationManager) {\n+            checkInputs(network, workingStateId, factorsProvider, parameters, computationManager);\n+            return provider.run(network, workingStateId, factorsProvider, parameters, computationManager).join();\n+        }\n+\n+        public SensitivityAnalysisResults run(Network network,\n+                                              String workingStateId,\n+                                              SensitivityFactorsProvider factorsProvider,\n+                                              SensitivityAnalysisParameters parameters) {\n+            return run(network, workingStateId, factorsProvider, parameters, DefaultComputationManagerConfig.load().createLongTimeExecutionComputationManager());\n+        }\n+\n+        public SensitivityAnalysisResults run(Network network,\n+                                              SensitivityFactorsProvider factorsProvider,\n+                                              SensitivityAnalysisParameters parameters) {\n+            return run(network, network.getVariantManager().getWorkingVariantId(), factorsProvider, parameters);\n+        }\n+\n+        public SensitivityAnalysisResults run(Network network,\n+                                              SensitivityFactorsProvider factorsProvider) {\n+            return run(network, factorsProvider, SensitivityAnalysisParameters.load());\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return provider.getName();\n+        }\n+\n+        @Override\n+        public String getVersion() {\n+            return provider.getVersion();\n+        }\n+    }\n+\n+    /**\n+     * Get a runner for sensitivity analysis implementation named {@code name}. In the case of a null {@code name}, default\n+     * implementation is used.\n+     *\n+     * @param name name of the sensitivity analysis implementation, null if we want to use default one\n+     * @return a runner for sensitivity analysis implementation named {@code name}\n+     */\n+    public static Runner find(String name) {\n+        return new Runner(PlatformConfigNamedProvider.Finder\n+                .find(name, \"sensitivity-analysis\", SensitivityAnalysisProvider.class,\n+                        PlatformConfig.defaultConfig()));\n+    }\n+\n+    /**\n+     * Get a runner for default sensitivity analysis implementation.\n+     *\n+     * @throws PowsyblException in case we cannot find a default implementation\n+     * @return a runner for default sensitivity analysis implementation\n+     */\n+    public static Runner find() {\n+        return find(null);\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e22366b8098c7b13ab685daffe602621903b93af"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM4NTM4Mw==", "bodyText": "I think this interface should only have one method. ContingencyProvider could be nullable. It could also be managed by the runner and null value can be replaced by an empty contingency list like it's done here", "url": "https://github.com/powsybl/powsybl-core/pull/1474#discussion_r494385383", "createdAt": "2020-09-24T14:53:40Z", "author": {"login": "mathbagu"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityAnalysisProvider.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.sensitivity;\n+\n+import com.powsybl.commons.Versionable;\n+import com.powsybl.commons.config.PlatformConfigNamedProvider;\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.contingency.EmptyContingencyListProvider;\n+import com.powsybl.iidm.network.Network;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Sensitivity analysis provider\n+ *\n+ * <p>\n+ *     Sensitivity analysis is used to assess the impact of a small modification\n+ *     of a network variables on the value of network functions.\n+ *     This analysis can be assimilated to a partial derivative computed on a given\n+ *     network state and on that state modified based on a list of contingencies, if specified.\n+ * </p>\n+ * <p>\n+ *     PTDFs used in Flowbased methodology for example are sensitivity analysis\n+ *     results. The sensitivity variables are the GSK shift and the sensitivity function\n+ *     are the monitored lines/transformers flows.\n+ * </p>\n+ * @author Sebastien Murgey {@literal <sebastien.murgey at rte-france.com>}\n+ */\n+public interface SensitivityAnalysisProvider extends Versionable, PlatformConfigNamedProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e22366b8098c7b13ab685daffe602621903b93af"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM4NzU1Mw==", "bodyText": "I think for the loadflow and dynamic simulation, we use Result instead of Results", "url": "https://github.com/powsybl/powsybl-core/pull/1474#discussion_r494387553", "createdAt": "2020-09-24T14:56:29Z", "author": {"login": "mathbagu"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityAnalysisResults.java", "diffHunk": "@@ -35,7 +35,7 @@\n  * @author Sebastien Murgey {@literal <sebastien.murgey at rte-france.com>}\n  * @see SensitivityValue\n  */\n-public class SensitivityComputationResults {\n+public class SensitivityAnalysisResults {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e22366b8098c7b13ab685daffe602621903b93af"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM4ODAwMg==", "bodyText": "Arguable: the copyright date should be 2018 or 2018-2020", "url": "https://github.com/powsybl/powsybl-core/pull/1474#discussion_r494388002", "createdAt": "2020-09-24T14:57:04Z", "author": {"login": "mathbagu"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityAnalysisTool.java", "diffHunk": "@@ -1,5 +1,5 @@\n-/**\n- * Copyright (c) 2018, RTE (http://www.rte-france.com)\n+/*\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e22366b8098c7b13ab685daffe602621903b93af"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM4OTA3Ng==", "bodyText": "With the new expected static methods in the SensitivityAnalysis class, the call to the find method has to be removed.", "url": "https://github.com/powsybl/powsybl-core/pull/1474#discussion_r494389076", "createdAt": "2020-09-24T14:58:27Z", "author": {"login": "mathbagu"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityAnalysisTool.java", "diffHunk": "@@ -135,37 +135,35 @@ public void run(CommandLine line, ToolRunningContext context) throws Exception {\n         if (network == null) {\n             throw new PowsyblException(\"Case '\" + caseFile + \"' not found\");\n         }\n-        SensitivityComputation sensitivityComputation = defaultConfig.newFactoryImpl(SensitivityComputationFactory.class).create(network, context.getShortTimeExecutionComputationManager(), 0);\n \n-        SensitivityComputationParameters params = SensitivityComputationParameters.load();\n+        SensitivityAnalysisParameters params = SensitivityAnalysisParameters.load();\n \n         if (line.hasOption(PARAMETERS_FILE)) {\n             Path parametersFile = context.getFileSystem().getPath(line.getOptionValue(PARAMETERS_FILE));\n-            JsonSensitivityComputationParameters.update(params, parametersFile);\n+            JsonSensitivityAnalysisParameters.update(params, parametersFile);\n         }\n-        String workingStateId = network.getVariantManager().getWorkingVariantId();\n         SensitivityFactorsProviderFactory factorsProviderFactory = defaultConfig.newFactoryImpl(SensitivityFactorsProviderFactory.class);\n         SensitivityFactorsProvider factorsProvider = factorsProviderFactory.create(sensitivityFactorsFile);\n \n-        SensitivityComputationResults result;\n+        SensitivityAnalysisResults result;\n         if (line.hasOption(CONTINGENCIES_FILE_OPTION)) {\n             ContingenciesProviderFactory contingenciesProviderFactory = defaultConfig.newFactoryImpl(ContingenciesProviderFactory.class);\n             ContingenciesProvider contingenciesProvider = contingenciesProviderFactory.create(context.getFileSystem().getPath(line.getOptionValue(CONTINGENCIES_FILE_OPTION)));\n-            result = sensitivityComputation.run(factorsProvider, contingenciesProvider, workingStateId, params).join();\n+            result = SensitivityAnalysis.find().run(network, factorsProvider, contingenciesProvider, params);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e22366b8098c7b13ab685daffe602621903b93af"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM5MDEyMQ==", "bodyText": "From my point of view, this code could be simpler: by default, create an EmptyContingencyList, and if the option is used, load the contingency list. The rest of the code is common.\nFrom my point of view, we could consider that the API always have a NotNullable contingencyList then?", "url": "https://github.com/powsybl/powsybl-core/pull/1474#discussion_r494390121", "createdAt": "2020-09-24T14:59:45Z", "author": {"login": "mathbagu"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityAnalysisTool.java", "diffHunk": "@@ -135,37 +135,35 @@ public void run(CommandLine line, ToolRunningContext context) throws Exception {\n         if (network == null) {\n             throw new PowsyblException(\"Case '\" + caseFile + \"' not found\");\n         }\n-        SensitivityComputation sensitivityComputation = defaultConfig.newFactoryImpl(SensitivityComputationFactory.class).create(network, context.getShortTimeExecutionComputationManager(), 0);\n \n-        SensitivityComputationParameters params = SensitivityComputationParameters.load();\n+        SensitivityAnalysisParameters params = SensitivityAnalysisParameters.load();\n \n         if (line.hasOption(PARAMETERS_FILE)) {\n             Path parametersFile = context.getFileSystem().getPath(line.getOptionValue(PARAMETERS_FILE));\n-            JsonSensitivityComputationParameters.update(params, parametersFile);\n+            JsonSensitivityAnalysisParameters.update(params, parametersFile);\n         }\n-        String workingStateId = network.getVariantManager().getWorkingVariantId();\n         SensitivityFactorsProviderFactory factorsProviderFactory = defaultConfig.newFactoryImpl(SensitivityFactorsProviderFactory.class);\n         SensitivityFactorsProvider factorsProvider = factorsProviderFactory.create(sensitivityFactorsFile);\n \n-        SensitivityComputationResults result;\n+        SensitivityAnalysisResults result;\n         if (line.hasOption(CONTINGENCIES_FILE_OPTION)) {\n             ContingenciesProviderFactory contingenciesProviderFactory = defaultConfig.newFactoryImpl(ContingenciesProviderFactory.class);\n             ContingenciesProvider contingenciesProvider = contingenciesProviderFactory.create(context.getFileSystem().getPath(line.getOptionValue(CONTINGENCIES_FILE_OPTION)));\n-            result = sensitivityComputation.run(factorsProvider, contingenciesProvider, workingStateId, params).join();\n+            result = SensitivityAnalysis.find().run(network, factorsProvider, contingenciesProvider, params);\n         } else {\n-            result = sensitivityComputation.run(factorsProvider, workingStateId, params).join();\n+            result = SensitivityAnalysis.find().run(network, factorsProvider, params);\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e22366b8098c7b13ab685daffe602621903b93af"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM5MTMzOQ==", "bodyText": "Question: should we make this constructor public?", "url": "https://github.com/powsybl/powsybl-core/pull/1474#discussion_r494391339", "createdAt": "2020-09-24T15:01:15Z", "author": {"login": "mathbagu"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/json/SensitivityAnalysisParametersSerializer.java", "diffHunk": "@@ -11,32 +11,32 @@\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n import com.powsybl.commons.json.JsonUtil;\n import com.powsybl.loadflow.json.JsonLoadFlowParameters;\n-import com.powsybl.sensitivity.SensitivityComputationParameters;\n+import com.powsybl.sensitivity.SensitivityAnalysisParameters;\n \n import java.io.IOException;\n \n /**\n- * Json serializer for sensitivity computation parameters\n+ * Json serializer for sensitivity analysis parameters\n  *\n  * @author Sebastien Murgey <sebastien.murgey at rte-france.com>\n  */\n-public class SensitivityComputationParametersSerializer extends StdSerializer<SensitivityComputationParameters> {\n+public class SensitivityAnalysisParametersSerializer extends StdSerializer<SensitivityAnalysisParameters> {\n \n-    SensitivityComputationParametersSerializer() {\n-        super(SensitivityComputationParameters.class);\n+    SensitivityAnalysisParametersSerializer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e22366b8098c7b13ab685daffe602621903b93af"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM5MjI5Mw==", "bodyText": "Is this comment useful (3 times)", "url": "https://github.com/powsybl/powsybl-core/pull/1474#discussion_r494392293", "createdAt": "2020-09-24T15:02:34Z", "author": {"login": "mathbagu"}, "path": "sensitivity-api/src/test/java/com/powsybl/sensitivity/SensitivityAnalysisTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.sensitivity;\n+\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.iidm.network.VariantManager;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * @author Joris Mancini {@literal <joris.mancini at rte-france.com>}\n+ */\n+public class SensitivityAnalysisTest {\n+\n+    private static final String DEFAULT_PROVIDER_NAME = \"SensitivityAnalysisMock\";\n+\n+    private Network network;\n+    private ComputationManager computationManager;\n+    private SensitivityFactorsProvider sensitivityFactorsProvider;\n+    private ContingenciesProvider contingenciesProvider;\n+\n+    @Before\n+    public void setUp() {\n+        network = Mockito.mock(Network.class);\n+        VariantManager variantManager = Mockito.mock(VariantManager.class);\n+        Mockito.when(network.getVariantManager()).thenReturn(variantManager);\n+        Mockito.when(variantManager.getWorkingVariantId()).thenReturn(\"v\");\n+        computationManager = Mockito.mock(ComputationManager.class);\n+        sensitivityFactorsProvider = Mockito.mock(SensitivityFactorsProvider.class);\n+        contingenciesProvider = Mockito.mock(ContingenciesProvider.class);\n+    }\n+\n+    @Test\n+    public void testDefaultProvider() {\n+        SensitivityAnalysis.Runner defaultSensitivityAnalysisRunner = SensitivityAnalysis.find();\n+        assertEquals(DEFAULT_PROVIDER_NAME, defaultSensitivityAnalysisRunner.getName());\n+        SensitivityAnalysisResults results = defaultSensitivityAnalysisRunner.run(network, sensitivityFactorsProvider, contingenciesProvider);\n+        assertNotNull(results);\n+        assertTrue(results.isOk());\n+        assertEquals(\"1.0\", defaultSensitivityAnalysisRunner.getVersion());\n+    }\n+\n+    @Test\n+    public void testAsyncNamedProvider() throws InterruptedException, ExecutionException {\n+        // named provider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e22366b8098c7b13ab685daffe602621903b93af"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM5MzAxNg==", "bodyText": "Do you forget the @AutoService?", "url": "https://github.com/powsybl/powsybl-core/pull/1474#discussion_r494393016", "createdAt": "2020-09-24T15:03:36Z", "author": {"login": "mathbagu"}, "path": "sensitivity-api/src/test/java/com/powsybl/sensitivity/mocks/AnotherSensitivityAnalysisProviderMock.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.sensitivity.mocks;\n+\n+import com.powsybl.computation.ComputationManager;\n+import com.powsybl.contingency.ContingenciesProvider;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.sensitivity.SensitivityAnalysisParameters;\n+import com.powsybl.sensitivity.SensitivityAnalysisProvider;\n+import com.powsybl.sensitivity.SensitivityAnalysisResults;\n+import com.powsybl.sensitivity.SensitivityFactorsProvider;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * @author Joris Mancini {@literal <joris.mancini at rte-france.com>}\n+ */\n+public class AnotherSensitivityAnalysisProviderMock implements SensitivityAnalysisProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e22366b8098c7b13ab685daffe602621903b93af"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63207ecb3336d84afa9b5bd0b8045cace02c09b9", "author": {"user": {"login": "TheMaskedTurtle", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/63207ecb3336d84afa9b5bd0b8045cace02c09b9", "committedDate": "2020-09-24T15:58:50Z", "message": "Minor fixes after code review\n\nSigned-off-by: Joris Mancini <joris.mancini@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3917541c7f06a9c63dc49105ed71460e0d59d0ee", "author": {"user": {"login": "TheMaskedTurtle", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/3917541c7f06a9c63dc49105ed71460e0d59d0ee", "committedDate": "2020-09-24T16:26:44Z", "message": "Only one method in SensitivityAnalysisProvider and add static methods in SensitivityAnalysis\n\nSigned-off-by: Joris Mancini <joris.mancini@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "774ba9c8924ca1430ff16b12cf81cc18c038b070", "author": {"user": {"login": "TheMaskedTurtle", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/774ba9c8924ca1430ff16b12cf81cc18c038b070", "committedDate": "2020-09-25T07:43:14Z", "message": "Add tests on sensitivity analysis results\n\nSigned-off-by: Joris Mancini <joris.mancini@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0aae1686b4f497a75c8aae8c9c7897c12bf17ef1", "author": {"user": {"login": "TheMaskedTurtle", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/0aae1686b4f497a75c8aae8c9c7897c12bf17ef1", "committedDate": "2020-09-25T07:54:42Z", "message": "Remove method with no contingencies from API and adapt tool\n\nSigned-off-by: Joris Mancini <joris.mancini@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fac0b0019fec85d2d97f0d0cdfead4b61f02bc79", "author": {"user": {"login": "TheMaskedTurtle", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/fac0b0019fec85d2d97f0d0cdfead4b61f02bc79", "committedDate": "2020-09-25T07:58:27Z", "message": "Fix test method name\n\nSigned-off-by: Joris Mancini <joris.mancini@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc2e527e379691d883ed79fbded37be6313e8960", "author": {"user": {"login": "TheMaskedTurtle", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/bc2e527e379691d883ed79fbded37be6313e8960", "committedDate": "2020-09-25T08:30:35Z", "message": "Add test coverage\n\nSigned-off-by: Joris Mancini <joris.mancini@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0658a7f1a53cfbe2872540282b403a51f485fab", "author": {"user": {"login": "TheMaskedTurtle", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/a0658a7f1a53cfbe2872540282b403a51f485fab", "committedDate": "2020-09-25T08:50:28Z", "message": "Refactor maven module and package name\n\nSigned-off-by: Joris Mancini <joris.mancini@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c76683cdcd8a1864febcf8fbffc511ca6090841", "author": {"user": {"login": "TheMaskedTurtle", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/4c76683cdcd8a1864febcf8fbffc511ca6090841", "committedDate": "2020-09-25T12:02:16Z", "message": "Merge branch 'master' into refactor-sensi-api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8470c442acd7c38b680b909ae7b44c26e528ad6", "author": {"user": {"login": "TheMaskedTurtle", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/c8470c442acd7c38b680b909ae7b44c26e528ad6", "committedDate": "2020-09-25T17:13:20Z", "message": "Merge branch 'master' into refactor-sensi-api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MzUwODIw", "url": "https://github.com/powsybl/powsybl-core/pull/1474#pullrequestreview-497350820", "createdAt": "2020-09-28T09:44:43Z", "commit": {"oid": "c8470c442acd7c38b680b909ae7b44c26e528ad6"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwOTo0NDo0NFrOHY2NoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwOTo0ODo0MFrOHY2XKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgxNjA5Nw==", "bodyText": "Should the copyright be 2020? Or is it a moved file?", "url": "https://github.com/powsybl/powsybl-core/pull/1474#discussion_r495816097", "createdAt": "2020-09-28T09:44:44Z", "author": {"login": "MioRtia"}, "path": "sensitivity-analysis-api/src/main/java/com/powsybl/sensitivity/analysis/json/SensitivityAnalysisParametersJsonModule.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/**\n+ * Copyright (c) 2018, RTE (http://www.rte-france.com)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8470c442acd7c38b680b909ae7b44c26e528ad6"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgxODUzNw==", "bodyText": "Same question", "url": "https://github.com/powsybl/powsybl-core/pull/1474#discussion_r495818537", "createdAt": "2020-09-28T09:48:40Z", "author": {"login": "MioRtia"}, "path": "sensitivity-analysis-api/src/test/java/com/powsybl/sensitivity/analysis/converter/SensitivityAnalysisResultExportersTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright (c) 2018, RTE (http://www.rte-france.com)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8470c442acd7c38b680b909ae7b44c26e528ad6"}, "originalPosition": 2}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c441ca8b4524d8925c241e95a2a780108ce0bcb2", "author": {"user": {"login": "murgeyseb", "name": "S\u00e9bastien Murgey"}}, "url": "https://github.com/powsybl/powsybl-core/commit/c441ca8b4524d8925c241e95a2a780108ce0bcb2", "committedDate": "2020-09-28T11:13:37Z", "message": "Merge branch 'master' into refactor-sensi-api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5864709e2f788443e7005f7d9586b93770dc2c64", "author": {"user": {"login": "murgeyseb", "name": "S\u00e9bastien Murgey"}}, "url": "https://github.com/powsybl/powsybl-core/commit/5864709e2f788443e7005f7d9586b93770dc2c64", "committedDate": "2020-09-28T11:26:19Z", "message": "Merge branch 'master' into refactor-sensi-api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bd201089aeb68e2563119f6404d6a3fc2c7337f", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/1bd201089aeb68e2563119f6404d6a3fc2c7337f", "committedDate": "2020-09-29T14:24:16Z", "message": "Merge branch 'master' into refactor-sensi-api"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4175, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}