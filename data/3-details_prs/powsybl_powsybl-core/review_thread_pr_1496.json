{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2ODA1OTcy", "number": 1496, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNzowODowMVrOEqL1xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNDoxNzowNFrOEsEUmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjY5NjM2OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-tck/src/test/java/com/powsybl/iidm/network/tck/AbstractDanglingLineTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNzowODowMVrOHcP46A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNzowODowMVrOHcP46A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4MjUwNA==", "bodyText": "assertNotSame? Both could be equal (you're lucky because of the default implementation, but I could consider two generations equals if the have the same characteristics, but not attached to the same danglingLine).", "url": "https://github.com/powsybl/powsybl-core/pull/1496#discussion_r499382504", "createdAt": "2020-10-05T07:08:01Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-tck/src/test/java/com/powsybl/iidm/network/tck/AbstractDanglingLineTest.java", "diffHunk": "@@ -274,6 +274,10 @@ public void withRegulatingCapabilityTests() {\n                 .add();\n         assertNotNull(generation.getReactiveLimits());\n         assertTrue(generation.getReactiveLimits() instanceof MinMaxReactiveLimits);\n+\n+        // Test if new Generation is instantiate at each add\n+        DanglingLine dl2 = adder.setId(id + \"_2\").add();\n+        assertNotEquals(dl.getGeneration(), dl2.getGeneration());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a227bf9e4383b76a8d70da6bb9972d955cc313b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjcwMDM2OnYy", "diffSide": "LEFT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineAdderImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNzowOToyN1rOHcP7UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNzozOToxNFrOHcQxLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4MzEyMA==", "bodyText": "This is arguable: I think we should keep the tests here: It's not possible to update the GenerationAdder after you have called the add(). So you should be noticed that it's not complete when we consider it should be fully completed.\n@MioRtia @tadam50 What do you think?", "url": "https://github.com/powsybl/powsybl-core/pull/1496#discussion_r499383120", "createdAt": "2020-10-05T07:09:27Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineAdderImpl.java", "diffHunk": "@@ -64,10 +64,6 @@ public GenerationAdder setTargetV(double targetV) {\n \n         @Override\n         public DanglingLineAdder add() {\n-            ValidationUtil.checkActivePowerLimits(DanglingLineAdderImpl.this, minP, maxP);\n-            ValidationUtil.checkActivePowerSetpoint(DanglingLineAdderImpl.this, targetP);\n-            ValidationUtil.checkVoltageControl(DanglingLineAdderImpl.this, voltageRegulationOn, targetV, targetQ);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a227bf9e4383b76a8d70da6bb9972d955cc313b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM5NjkxMA==", "bodyText": "My mistake. I'm agree with you. I think validation checks must be done as soon as possible.", "url": "https://github.com/powsybl/powsybl-core/pull/1496#discussion_r499396910", "createdAt": "2020-10-05T07:39:14Z", "author": {"login": "tadam50"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineAdderImpl.java", "diffHunk": "@@ -64,10 +64,6 @@ public GenerationAdder setTargetV(double targetV) {\n \n         @Override\n         public DanglingLineAdder add() {\n-            ValidationUtil.checkActivePowerLimits(DanglingLineAdderImpl.this, minP, maxP);\n-            ValidationUtil.checkActivePowerSetpoint(DanglingLineAdderImpl.this, targetP);\n-            ValidationUtil.checkVoltageControl(DanglingLineAdderImpl.this, voltageRegulationOn, targetV, targetQ);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4MzEyMA=="}, "originalCommit": {"oid": "7a227bf9e4383b76a8d70da6bb9972d955cc313b"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NjQzNjExOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineAdderImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNDoxNzowNFrOHfLqUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwODo0ODozM1rOHf1C2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ1ODk2Mw==", "bodyText": "not sure this is correct: I would write\nreturn new GenerationAdderImpl(this);\n\nAnd in the GenerationAdder::add method, I would set the generationAdder of the parent. I don't know if it changes something, but it's seems better to me that the DanglingLineAdder is modified only once the GenerationAdder has been filled.", "url": "https://github.com/powsybl/powsybl-core/pull/1496#discussion_r502458963", "createdAt": "2020-10-09T14:17:04Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineAdderImpl.java", "diffHunk": "@@ -148,7 +147,8 @@ public DanglingLineAdder setUcteXnodeCode(String ucteXnodeCode) {\n \n     @Override\n     public GenerationAdder newGeneration() {\n-        return new GenerationAdderImpl();\n+        generationAdder = new GenerationAdderImpl();\n+        return generationAdder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32fdc3479e89b26e7c5fa36d96a885bae3c2cbd0"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ4NTA5OA==", "bodyText": "Regarding what you did for three windings transformers, it's coherent", "url": "https://github.com/powsybl/powsybl-core/pull/1496#discussion_r502485098", "createdAt": "2020-10-09T14:52:03Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineAdderImpl.java", "diffHunk": "@@ -148,7 +147,8 @@ public DanglingLineAdder setUcteXnodeCode(String ucteXnodeCode) {\n \n     @Override\n     public GenerationAdder newGeneration() {\n-        return new GenerationAdderImpl();\n+        generationAdder = new GenerationAdderImpl();\n+        return generationAdder;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ1ODk2Mw=="}, "originalCommit": {"oid": "32fdc3479e89b26e7c5fa36d96a885bae3c2cbd0"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzEzNjk4NQ==", "bodyText": "Indeed, set the generationAdder in GenerationAdder::add, after validity checks, seems a better solution.\nDanglingLineAdder will be set only with a GenerationAdder well filled", "url": "https://github.com/powsybl/powsybl-core/pull/1496#discussion_r503136985", "createdAt": "2020-10-12T08:48:33Z", "author": {"login": "tadam50"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineAdderImpl.java", "diffHunk": "@@ -148,7 +147,8 @@ public DanglingLineAdder setUcteXnodeCode(String ucteXnodeCode) {\n \n     @Override\n     public GenerationAdder newGeneration() {\n-        return new GenerationAdderImpl();\n+        generationAdder = new GenerationAdderImpl();\n+        return generationAdder;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ1ODk2Mw=="}, "originalCommit": {"oid": "32fdc3479e89b26e7c5fa36d96a885bae3c2cbd0"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4881, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}