{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMjE2MTg2", "number": 1152, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzoxOTozNVrODezJ7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTo0MToyMFrODioSgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjIxOTk3OnYy", "diffSide": "RIGHT", "path": "commons/src/main/java/com/powsybl/commons/extensions/AbstractExtensionAdder.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzoxOTozNVrOFoIlVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMDoxMjoyM1rOFqe8kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYyNzk4OQ==", "bodyText": "2 questions: do we allow null values and is extendable final?", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r377627989", "createdAt": "2020-02-11T13:19:35Z", "author": {"login": "mathbagu"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/AbstractExtensionAdder.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+/**\n+ * A base class for implementations of {@link ExtensionAdder} that holds the\n+ * extendable to be able build and then add the extension to the extendable.\n+ * This class calls {@link Extendable#createExtension} that must be overriden by\n+ * subclasses to create the extension.\n+ *\n+ * @author Jon Harper <jon.harper at rte-france.com>\n+ */\n+//TODO can we use T extends Extendable<T> here ? Then we can remove the cast in add()\n+public abstract class AbstractExtensionAdder<T, E extends Extension<T>> implements ExtensionAdder<T, E> {\n+\n+    protected T extendable;\n+\n+    protected AbstractExtensionAdder(T extendable) {\n+        this.extendable = extendable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3306a819ba844912f1b2552dc397b53608a8b0"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwMTQ0Mw==", "bodyText": "There is no problem with forbidding null values (this is always called by doing extendable.newExtensionAdder(..)) so the extendable is never null.\nWe can also make the extendable final, even private if we want (and pass it to the createExtension method.\nYou think we should do these changes ?", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r377801443", "createdAt": "2020-02-11T17:58:20Z", "author": {"login": "jonenst"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/AbstractExtensionAdder.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+/**\n+ * A base class for implementations of {@link ExtensionAdder} that holds the\n+ * extendable to be able build and then add the extension to the extendable.\n+ * This class calls {@link Extendable#createExtension} that must be overriden by\n+ * subclasses to create the extension.\n+ *\n+ * @author Jon Harper <jon.harper at rte-france.com>\n+ */\n+//TODO can we use T extends Extendable<T> here ? Then we can remove the cast in add()\n+public abstract class AbstractExtensionAdder<T, E extends Extension<T>> implements ExtensionAdder<T, E> {\n+\n+    protected T extendable;\n+\n+    protected AbstractExtensionAdder(T extendable) {\n+        this.extendable = extendable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYyNzk4OQ=="}, "originalCommit": {"oid": "3d3306a819ba844912f1b2552dc397b53608a8b0"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA5MTUzOA==", "bodyText": "I think it's cleaner if you declare it private, final and if you assert the extendable is not null", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r380091538", "createdAt": "2020-02-17T10:12:23Z", "author": {"login": "mathbagu"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/AbstractExtensionAdder.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+/**\n+ * A base class for implementations of {@link ExtensionAdder} that holds the\n+ * extendable to be able build and then add the extension to the extendable.\n+ * This class calls {@link Extendable#createExtension} that must be overriden by\n+ * subclasses to create the extension.\n+ *\n+ * @author Jon Harper <jon.harper at rte-france.com>\n+ */\n+//TODO can we use T extends Extendable<T> here ? Then we can remove the cast in add()\n+public abstract class AbstractExtensionAdder<T, E extends Extension<T>> implements ExtensionAdder<T, E> {\n+\n+    protected T extendable;\n+\n+    protected AbstractExtensionAdder(T extendable) {\n+        this.extendable = extendable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYyNzk4OQ=="}, "originalCommit": {"oid": "3d3306a819ba844912f1b2552dc397b53608a8b0"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjIyMzg4OnYy", "diffSide": "RIGHT", "path": "commons/src/main/java/com/powsybl/commons/extensions/Extendable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzoyMDozOVrOFoInjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzo1NDozOFrOFoTC_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYyODU1Ng==", "bodyText": "It's strange to have this in commons. Is it specific to IIDM extensions?", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r377628556", "createdAt": "2020-02-11T13:20:39Z", "author": {"login": "mathbagu"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/Extendable.java", "diffHunk": "@@ -49,4 +49,39 @@\n      * @return all extensions associated to this extendable object.\n      */\n     <E extends Extension<O>> Collection<E> getExtensions();\n+\n+    /**\n+     * Returns a name that is used to find matching {@link ExtensionAdderProvider}s\n+     * when selecting implementations of extensions in {@link #newExtension}. This\n+     * is meant to be overriden by extendables when multiple implementations exist.\n+     *\n+     * @return the name\n+     */\n+    default String getImplementationName() {\n+        return \"Default\";\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3306a819ba844912f1b2552dc397b53608a8b0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5OTQyMg==", "bodyText": "Not particularly. The getImplementationName method is only compared to the getImplementationName method of an ExtensionAdderProvider (when you call Extendable#newExtensionAdder). It's never compared to the NetworkFactoryServiceImpl from the iidm default implementation (although it happens to be the same constant \"Default\")\nThis is used when you have multiple implementations of an extendable, and you want the matching implementation of the extension. So this means that for all existing extendables today where we want multiple implementations, we can just create a Provider with the name \"Default\". But if we want we can also give the existing extendable an implementation name and create a Provider with this name.  For new extendable implementations we have to override and choose a new name (and use it in their providers).", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r377799422", "createdAt": "2020-02-11T17:54:38Z", "author": {"login": "jonenst"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/Extendable.java", "diffHunk": "@@ -49,4 +49,39 @@\n      * @return all extensions associated to this extendable object.\n      */\n     <E extends Extension<O>> Collection<E> getExtensions();\n+\n+    /**\n+     * Returns a name that is used to find matching {@link ExtensionAdderProvider}s\n+     * when selecting implementations of extensions in {@link #newExtension}. This\n+     * is meant to be overriden by extendables when multiple implementations exist.\n+     *\n+     * @return the name\n+     */\n+    default String getImplementationName() {\n+        return \"Default\";\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYyODU1Ng=="}, "originalCommit": {"oid": "3d3306a819ba844912f1b2552dc397b53608a8b0"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjIyODA4OnYy", "diffSide": "RIGHT", "path": "commons/src/main/java/com/powsybl/commons/extensions/Extendable.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzoyMTo0MVrOFoIpzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMDoxMDozNlrOFqe5Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYyOTEzMg==", "bodyText": "Could you declare this method final?", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r377629132", "createdAt": "2020-02-11T13:21:41Z", "author": {"login": "mathbagu"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/Extendable.java", "diffHunk": "@@ -49,4 +49,39 @@\n      * @return all extensions associated to this extendable object.\n      */\n     <E extends Extension<O>> Collection<E> getExtensions();\n+\n+    /**\n+     * Returns a name that is used to find matching {@link ExtensionAdderProvider}s\n+     * when selecting implementations of extensions in {@link #newExtension}. This\n+     * is meant to be overriden by extendables when multiple implementations exist.\n+     *\n+     * @return the name\n+     */\n+    default String getImplementationName() {\n+        return \"Default\";\n+    }\n+\n+    /**\n+     * Returns an extensionAdder to build and add an extension for this extendable.\n+     *\n+     * The extension implementation is selected at runtime based on matching the\n+     * {@link #getImplementationName} of this extendable to the\n+     * {@link ExtensionAdderProvider#getImplementationName} of a provider.\n+     * Implementations are loaded with java's {@link java.util.ServiceLoader} using\n+     * the ExtensionAdderProvider interface.\n+     *\n+     * This is not meant to be overriden.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3306a819ba844912f1b2552dc397b53608a8b0"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5MzI5Mg==", "bodyText": "No, you can't have a final method in an interface", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r377793292", "createdAt": "2020-02-11T17:43:23Z", "author": {"login": "jonenst"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/Extendable.java", "diffHunk": "@@ -49,4 +49,39 @@\n      * @return all extensions associated to this extendable object.\n      */\n     <E extends Extension<O>> Collection<E> getExtensions();\n+\n+    /**\n+     * Returns a name that is used to find matching {@link ExtensionAdderProvider}s\n+     * when selecting implementations of extensions in {@link #newExtension}. This\n+     * is meant to be overriden by extendables when multiple implementations exist.\n+     *\n+     * @return the name\n+     */\n+    default String getImplementationName() {\n+        return \"Default\";\n+    }\n+\n+    /**\n+     * Returns an extensionAdder to build and add an extension for this extendable.\n+     *\n+     * The extension implementation is selected at runtime based on matching the\n+     * {@link #getImplementationName} of this extendable to the\n+     * {@link ExtensionAdderProvider#getImplementationName} of a provider.\n+     * Implementations are loaded with java's {@link java.util.ServiceLoader} using\n+     * the ExtensionAdderProvider interface.\n+     *\n+     * This is not meant to be overriden.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYyOTEzMg=="}, "originalCommit": {"oid": "3d3306a819ba844912f1b2552dc397b53608a8b0"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA5MDYzMA==", "bodyText": "But you agree that we do not want someone to overwrite it?", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r380090630", "createdAt": "2020-02-17T10:10:36Z", "author": {"login": "mathbagu"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/Extendable.java", "diffHunk": "@@ -49,4 +49,39 @@\n      * @return all extensions associated to this extendable object.\n      */\n     <E extends Extension<O>> Collection<E> getExtensions();\n+\n+    /**\n+     * Returns a name that is used to find matching {@link ExtensionAdderProvider}s\n+     * when selecting implementations of extensions in {@link #newExtension}. This\n+     * is meant to be overriden by extendables when multiple implementations exist.\n+     *\n+     * @return the name\n+     */\n+    default String getImplementationName() {\n+        return \"Default\";\n+    }\n+\n+    /**\n+     * Returns an extensionAdder to build and add an extension for this extendable.\n+     *\n+     * The extension implementation is selected at runtime based on matching the\n+     * {@link #getImplementationName} of this extendable to the\n+     * {@link ExtensionAdderProvider#getImplementationName} of a provider.\n+     * Implementations are loaded with java's {@link java.util.ServiceLoader} using\n+     * the ExtensionAdderProvider interface.\n+     *\n+     * This is not meant to be overriden.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYyOTEzMg=="}, "originalCommit": {"oid": "3d3306a819ba844912f1b2552dc397b53608a8b0"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjIzNDM1OnYy", "diffSide": "RIGHT", "path": "commons/src/main/java/com/powsybl/commons/extensions/ExtensionAdderProviders.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzoyMzozMFrOFoItog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzo1OToyN1rOFoTNTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYzMDExNA==", "bodyText": "License is missing", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r377630114", "createdAt": "2020-02-11T13:23:30Z", "author": {"login": "mathbagu"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/ExtensionAdderProviders.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.powsybl.commons.extensions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3306a819ba844912f1b2552dc397b53608a8b0"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwMjA2Mg==", "bodyText": "Oops good catch", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r377802062", "createdAt": "2020-02-11T17:59:27Z", "author": {"login": "jonenst"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/ExtensionAdderProviders.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.powsybl.commons.extensions;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYzMDExNA=="}, "originalCommit": {"oid": "3d3306a819ba844912f1b2552dc397b53608a8b0"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjIzNjk3OnYy", "diffSide": "RIGHT", "path": "commons/src/main/java/com/powsybl/commons/extensions/ExtensionAdderProviders.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzoyNDoxNlrOFoIvKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoxMToxNFrOFpcT4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYzMDUwNw==", "bodyText": "Sonar should warn, but static variables should be declared before this constructor", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r377630507", "createdAt": "2020-02-11T13:24:16Z", "author": {"login": "mathbagu"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/ExtensionAdderProviders.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.powsybl.commons.extensions;\n+\n+import java.util.List;\n+import java.util.ServiceLoader;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Suppliers;\n+import com.powsybl.commons.PowsyblException;\n+\n+/**\n+ * A utility class to help finding providers using ServiceLoader.\n+ *\n+ * @author Jon Harper <jon.harper at rte-france.com>\n+ *\n+ */\n+//Don't bother with generics because serviceloader doesn't return them\n+//and we put them in a cache where we can't propagate the generic types.\n+@SuppressWarnings(\"rawtypes\")\n+final class ExtensionAdderProviders {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExtensionAdderProviders.class);\n+\n+    private ExtensionAdderProviders() {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3306a819ba844912f1b2552dc397b53608a8b0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5OTc3OA==", "bodyText": "done", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r378999778", "createdAt": "2020-02-13T17:11:14Z", "author": {"login": "jonenst"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/ExtensionAdderProviders.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.powsybl.commons.extensions;\n+\n+import java.util.List;\n+import java.util.ServiceLoader;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Suppliers;\n+import com.powsybl.commons.PowsyblException;\n+\n+/**\n+ * A utility class to help finding providers using ServiceLoader.\n+ *\n+ * @author Jon Harper <jon.harper at rte-france.com>\n+ *\n+ */\n+//Don't bother with generics because serviceloader doesn't return them\n+//and we put them in a cache where we can't propagate the generic types.\n+@SuppressWarnings(\"rawtypes\")\n+final class ExtensionAdderProviders {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExtensionAdderProviders.class);\n+\n+    private ExtensionAdderProviders() {\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYzMDUwNw=="}, "originalCommit": {"oid": "3d3306a819ba844912f1b2552dc397b53608a8b0"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjMyODgyOnYy", "diffSide": "RIGHT", "path": "commons/src/main/java/com/powsybl/commons/extensions/AbstractExtensionAdder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMDoxNTozMVrOFqfCzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMDoxNTozMVrOFqfCzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA5MzEzNQ==", "bodyText": "Make a decision: if you can, do it", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r380093135", "createdAt": "2020-02-17T10:15:31Z", "author": {"login": "mathbagu"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/AbstractExtensionAdder.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+/**\n+ * A base class for implementations of {@link ExtensionAdder} that holds the\n+ * extendable to be able build and then add the extension to the extendable.\n+ * This class calls {@link Extendable#createExtension} that must be overriden by\n+ * subclasses to create the extension.\n+ *\n+ * @author Jon Harper <jon.harper at rte-france.com>\n+ */\n+//TODO can we use T extends Extendable<T> here ? Then we can remove the cast in add()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba49e7ea4db5036652a4b5e138b7cf7c46defae"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjM0NTIyOnYy", "diffSide": "RIGHT", "path": "commons/src/main/java/com/powsybl/commons/extensions/ExtensionAdderProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMDoxOTo1MVrOFqfMYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMDoxOTo1MVrOFqfMYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA5NTU4NA==", "bodyText": "Same remark", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r380095584", "createdAt": "2020-02-17T10:19:51Z", "author": {"login": "mathbagu"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/ExtensionAdderProvider.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+/**\n+ * A provider used through java's {@link java.util.ServiceLoader}. It will\n+ * provide an {@link ExtensionAdder} to add an extension to an extendable.\n+ * {@link #getImplementationName} is used to find providers corresponding to the\n+ * implementation of the {@link Extendable}. {@link #getAdderClass} is used to\n+ * specify the adder class.\n+ *\n+ * @author Jon Harper <jon.harper at rte-france.com>\n+ *\n+ * @param <T> The extendable\n+ * @param <E> The extension\n+ * @param <B> The extensionBuilder\n+ */\n+//TODO can we use T extends Extendable<T> here ? It would make calling newAdder safer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba49e7ea4db5036652a4b5e138b7cf7c46defae"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjM1MTM4OnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMDoyMTo0M1rOFqfQHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMDoyMTo0M1rOFqfQHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA5NjU0Mg==", "bodyText": "It's dirty but I assume we can write dirty code in tests... Default should not be used to avoid duplications", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r380096542", "createdAt": "2020-02-17T10:21:43Z", "author": {"login": "mathbagu"}, "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Test;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.PowsyblException;\n+\n+public class ExtensionAdderProvidersTest {\n+\n+    private static interface SimpleExtendable extends Extendable<SimpleExtendable> {\n+    }\n+\n+    private static class SimpleExtendableImpl2\n+            extends AbstractExtendable<SimpleExtendable> implements SimpleExtendable {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SimpleExtension extends Extension<SimpleExtendable> {\n+        default String getName() {\n+            return \"SimpleExtension\";\n+        }\n+    }\n+\n+    private static class SimpleExtensionImpl extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static class SimpleExtensionImpl2 extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static interface SimpleExtensionAdder extends ExtensionAdder<SimpleExtendable, SimpleExtension> {\n+        default Class<SimpleExtension> getExtensionClass() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba49e7ea4db5036652a4b5e138b7cf7c46defae"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzgyNjMzOnYy", "diffSide": "RIGHT", "path": "commons/src/main/java/com/powsybl/commons/extensions/AbstractExtensionAdder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjoxMzoxOVrOFtmiEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODowMTo1MFrOFtqUfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2MTU1Mg==", "bodyText": "#createExtension ?", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r383361552", "createdAt": "2020-02-24T16:13:19Z", "author": {"login": "geofjamg"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/AbstractExtensionAdder.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A base class for implementations of {@link ExtensionAdder} that holds the\n+ * extendable to be able build and then add the extension to the extendable.\n+ * This class calls {@link Extendable#createExtension} that must be overriden by", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c90cb091fc5430517c21dccfd950262f27caf342"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyMzYxNA==", "bodyText": "yes good catch", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r383423614", "createdAt": "2020-02-24T18:01:50Z", "author": {"login": "jonenst"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/AbstractExtensionAdder.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A base class for implementations of {@link ExtensionAdder} that holds the\n+ * extendable to be able build and then add the extension to the extendable.\n+ * This class calls {@link Extendable#createExtension} that must be overriden by", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2MTU1Mg=="}, "originalCommit": {"oid": "c90cb091fc5430517c21dccfd950262f27caf342"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Mzg0NTk4OnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjoxODowMVrOFtmt9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjoxODowMVrOFtmt9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2NDU5Nw==", "bodyText": "useless static?", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r383364597", "createdAt": "2020-02-24T16:18:01Z", "author": {"login": "geofjamg"}, "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Test;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.PowsyblException;\n+\n+public class ExtensionAdderProvidersTest {\n+\n+    private static interface SimpleExtendable extends Extendable<SimpleExtendable> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c90cb091fc5430517c21dccfd950262f27caf342"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Mzg0Njg5OnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjoxODoxMlrOFtmufQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjoxODoxMlrOFtmufQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2NDczMw==", "bodyText": "useless static?", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r383364733", "createdAt": "2020-02-24T16:18:12Z", "author": {"login": "geofjamg"}, "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Test;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.PowsyblException;\n+\n+public class ExtensionAdderProvidersTest {\n+\n+    private static interface SimpleExtendable extends Extendable<SimpleExtendable> {\n+    }\n+\n+    private static class SimpleExtendableImpl2\n+            extends AbstractExtendable<SimpleExtendable> implements SimpleExtendable {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SimpleExtension extends Extension<SimpleExtendable> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c90cb091fc5430517c21dccfd950262f27caf342"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Mzg0NzczOnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjoxODoyMlrOFtmu8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjoxODoyMlrOFtmu8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2NDg1MA==", "bodyText": "useless static?", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r383364850", "createdAt": "2020-02-24T16:18:22Z", "author": {"login": "geofjamg"}, "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Test;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.PowsyblException;\n+\n+public class ExtensionAdderProvidersTest {\n+\n+    private static interface SimpleExtendable extends Extendable<SimpleExtendable> {\n+    }\n+\n+    private static class SimpleExtendableImpl2\n+            extends AbstractExtendable<SimpleExtendable> implements SimpleExtendable {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SimpleExtension extends Extension<SimpleExtendable> {\n+        default String getName() {\n+            return \"SimpleExtension\";\n+        }\n+    }\n+\n+    private static class SimpleExtensionImpl extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static class SimpleExtensionImpl2 extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static interface SimpleExtensionAdder extends ExtensionAdder<SimpleExtendable, SimpleExtension> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c90cb091fc5430517c21dccfd950262f27caf342"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Mzg1MDcwOnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjoxOTowM1rOFtmwqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjoxOTowM1rOFtmwqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2NTI5MQ==", "bodyText": "useless static?", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r383365291", "createdAt": "2020-02-24T16:19:03Z", "author": {"login": "geofjamg"}, "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Test;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.PowsyblException;\n+\n+public class ExtensionAdderProvidersTest {\n+\n+    private static interface SimpleExtendable extends Extendable<SimpleExtendable> {\n+    }\n+\n+    private static class SimpleExtendableImpl2\n+            extends AbstractExtendable<SimpleExtendable> implements SimpleExtendable {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SimpleExtension extends Extension<SimpleExtendable> {\n+        default String getName() {\n+            return \"SimpleExtension\";\n+        }\n+    }\n+\n+    private static class SimpleExtensionImpl extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static class SimpleExtensionImpl2 extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static interface SimpleExtensionAdder extends ExtensionAdder<SimpleExtendable, SimpleExtension> {\n+        default Class<SimpleExtension> getExtensionClass() {\n+            return SimpleExtension.class;\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImpl\n+            extends AbstractExtensionAdder<SimpleExtendable, SimpleExtension>\n+            implements SimpleExtensionAdder {\n+        protected SimpleExtensionAdderImpl(SimpleExtendable extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected SimpleExtensionImpl createExtension(SimpleExtendable extendable) {\n+            return new SimpleExtensionImpl();\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImpl2\n+            extends AbstractExtensionAdder<SimpleExtendable, SimpleExtension>\n+            implements SimpleExtensionAdder {\n+        protected SimpleExtensionAdderImpl2(SimpleExtendable extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected SimpleExtensionImpl2 createExtension(SimpleExtendable extendable) {\n+            return new SimpleExtensionImpl2();\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImplProvider\n+            implements\n+            ExtensionAdderProvider<SimpleExtendable, SimpleExtension, SimpleExtensionAdderImpl> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Default\";\n+        }\n+\n+        @Override\n+        public Class<SimpleExtensionAdderImpl> getAdderClass() {\n+            return SimpleExtensionAdderImpl.class;\n+        }\n+\n+        @Override\n+        public SimpleExtensionAdderImpl newAdder(SimpleExtendable extendable) {\n+            return new SimpleExtensionAdderImpl(extendable);\n+        }\n+    }\n+\n+    @AutoService(ExtensionAdderProvider.class)\n+    public static class SimpleExtensionAdderImpl2Provider implements\n+            ExtensionAdderProvider<SimpleExtendable, SimpleExtension, SimpleExtensionAdderImpl2> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+\n+        @Override\n+        public Class<SimpleExtensionAdderImpl2> getAdderClass() {\n+            return SimpleExtensionAdderImpl2.class;\n+        }\n+\n+        @Override\n+        public SimpleExtensionAdderImpl2 newAdder(SimpleExtendable extendable) {\n+            return new SimpleExtensionAdderImpl2(extendable);\n+        }\n+    }\n+\n+    private static interface GenericExtendable<G extends GenericExtendable<G>> extends Extendable<G> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c90cb091fc5430517c21dccfd950262f27caf342"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Mzg1MzI5OnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjoxOTo0MFrOFtmyKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODowOTozOVrOFtqjSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2NTY3Mg==", "bodyText": "Is it used somewhere?", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r383365672", "createdAt": "2020-02-24T16:19:40Z", "author": {"login": "geofjamg"}, "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Test;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.PowsyblException;\n+\n+public class ExtensionAdderProvidersTest {\n+\n+    private static interface SimpleExtendable extends Extendable<SimpleExtendable> {\n+    }\n+\n+    private static class SimpleExtendableImpl2\n+            extends AbstractExtendable<SimpleExtendable> implements SimpleExtendable {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SimpleExtension extends Extension<SimpleExtendable> {\n+        default String getName() {\n+            return \"SimpleExtension\";\n+        }\n+    }\n+\n+    private static class SimpleExtensionImpl extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static class SimpleExtensionImpl2 extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static interface SimpleExtensionAdder extends ExtensionAdder<SimpleExtendable, SimpleExtension> {\n+        default Class<SimpleExtension> getExtensionClass() {\n+            return SimpleExtension.class;\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImpl\n+            extends AbstractExtensionAdder<SimpleExtendable, SimpleExtension>\n+            implements SimpleExtensionAdder {\n+        protected SimpleExtensionAdderImpl(SimpleExtendable extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected SimpleExtensionImpl createExtension(SimpleExtendable extendable) {\n+            return new SimpleExtensionImpl();\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImpl2\n+            extends AbstractExtensionAdder<SimpleExtendable, SimpleExtension>\n+            implements SimpleExtensionAdder {\n+        protected SimpleExtensionAdderImpl2(SimpleExtendable extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected SimpleExtensionImpl2 createExtension(SimpleExtendable extendable) {\n+            return new SimpleExtensionImpl2();\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImplProvider\n+            implements\n+            ExtensionAdderProvider<SimpleExtendable, SimpleExtension, SimpleExtensionAdderImpl> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Default\";\n+        }\n+\n+        @Override\n+        public Class<SimpleExtensionAdderImpl> getAdderClass() {\n+            return SimpleExtensionAdderImpl.class;\n+        }\n+\n+        @Override\n+        public SimpleExtensionAdderImpl newAdder(SimpleExtendable extendable) {\n+            return new SimpleExtensionAdderImpl(extendable);\n+        }\n+    }\n+\n+    @AutoService(ExtensionAdderProvider.class)\n+    public static class SimpleExtensionAdderImpl2Provider implements\n+            ExtensionAdderProvider<SimpleExtendable, SimpleExtension, SimpleExtensionAdderImpl2> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+\n+        @Override\n+        public Class<SimpleExtensionAdderImpl2> getAdderClass() {\n+            return SimpleExtensionAdderImpl2.class;\n+        }\n+\n+        @Override\n+        public SimpleExtensionAdderImpl2 newAdder(SimpleExtendable extendable) {\n+            return new SimpleExtensionAdderImpl2(extendable);\n+        }\n+    }\n+\n+    private static interface GenericExtendable<G extends GenericExtendable<G>> extends Extendable<G> {\n+    }\n+\n+    private static class GenericExtendableImpl2<G extends GenericExtendable<G>>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c90cb091fc5430517c21dccfd950262f27caf342"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyNzQwMw==", "bodyText": "Good catch added a test", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r383427403", "createdAt": "2020-02-24T18:09:39Z", "author": {"login": "jonenst"}, "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Test;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.PowsyblException;\n+\n+public class ExtensionAdderProvidersTest {\n+\n+    private static interface SimpleExtendable extends Extendable<SimpleExtendable> {\n+    }\n+\n+    private static class SimpleExtendableImpl2\n+            extends AbstractExtendable<SimpleExtendable> implements SimpleExtendable {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SimpleExtension extends Extension<SimpleExtendable> {\n+        default String getName() {\n+            return \"SimpleExtension\";\n+        }\n+    }\n+\n+    private static class SimpleExtensionImpl extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static class SimpleExtensionImpl2 extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static interface SimpleExtensionAdder extends ExtensionAdder<SimpleExtendable, SimpleExtension> {\n+        default Class<SimpleExtension> getExtensionClass() {\n+            return SimpleExtension.class;\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImpl\n+            extends AbstractExtensionAdder<SimpleExtendable, SimpleExtension>\n+            implements SimpleExtensionAdder {\n+        protected SimpleExtensionAdderImpl(SimpleExtendable extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected SimpleExtensionImpl createExtension(SimpleExtendable extendable) {\n+            return new SimpleExtensionImpl();\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImpl2\n+            extends AbstractExtensionAdder<SimpleExtendable, SimpleExtension>\n+            implements SimpleExtensionAdder {\n+        protected SimpleExtensionAdderImpl2(SimpleExtendable extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected SimpleExtensionImpl2 createExtension(SimpleExtendable extendable) {\n+            return new SimpleExtensionImpl2();\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImplProvider\n+            implements\n+            ExtensionAdderProvider<SimpleExtendable, SimpleExtension, SimpleExtensionAdderImpl> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Default\";\n+        }\n+\n+        @Override\n+        public Class<SimpleExtensionAdderImpl> getAdderClass() {\n+            return SimpleExtensionAdderImpl.class;\n+        }\n+\n+        @Override\n+        public SimpleExtensionAdderImpl newAdder(SimpleExtendable extendable) {\n+            return new SimpleExtensionAdderImpl(extendable);\n+        }\n+    }\n+\n+    @AutoService(ExtensionAdderProvider.class)\n+    public static class SimpleExtensionAdderImpl2Provider implements\n+            ExtensionAdderProvider<SimpleExtendable, SimpleExtension, SimpleExtensionAdderImpl2> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+\n+        @Override\n+        public Class<SimpleExtensionAdderImpl2> getAdderClass() {\n+            return SimpleExtensionAdderImpl2.class;\n+        }\n+\n+        @Override\n+        public SimpleExtensionAdderImpl2 newAdder(SimpleExtendable extendable) {\n+            return new SimpleExtensionAdderImpl2(extendable);\n+        }\n+    }\n+\n+    private static interface GenericExtendable<G extends GenericExtendable<G>> extends Extendable<G> {\n+    }\n+\n+    private static class GenericExtendableImpl2<G extends GenericExtendable<G>>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2NTY3Mg=="}, "originalCommit": {"oid": "c90cb091fc5430517c21dccfd950262f27caf342"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Mzg1NDA3OnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjoxOTo1MVrOFtmyoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODowMTozNlrOFtqT_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2NTc5Mw==", "bodyText": "useless static?", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r383365793", "createdAt": "2020-02-24T16:19:51Z", "author": {"login": "geofjamg"}, "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Test;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.PowsyblException;\n+\n+public class ExtensionAdderProvidersTest {\n+\n+    private static interface SimpleExtendable extends Extendable<SimpleExtendable> {\n+    }\n+\n+    private static class SimpleExtendableImpl2\n+            extends AbstractExtendable<SimpleExtendable> implements SimpleExtendable {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SimpleExtension extends Extension<SimpleExtendable> {\n+        default String getName() {\n+            return \"SimpleExtension\";\n+        }\n+    }\n+\n+    private static class SimpleExtensionImpl extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static class SimpleExtensionImpl2 extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static interface SimpleExtensionAdder extends ExtensionAdder<SimpleExtendable, SimpleExtension> {\n+        default Class<SimpleExtension> getExtensionClass() {\n+            return SimpleExtension.class;\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImpl\n+            extends AbstractExtensionAdder<SimpleExtendable, SimpleExtension>\n+            implements SimpleExtensionAdder {\n+        protected SimpleExtensionAdderImpl(SimpleExtendable extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected SimpleExtensionImpl createExtension(SimpleExtendable extendable) {\n+            return new SimpleExtensionImpl();\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImpl2\n+            extends AbstractExtensionAdder<SimpleExtendable, SimpleExtension>\n+            implements SimpleExtensionAdder {\n+        protected SimpleExtensionAdderImpl2(SimpleExtendable extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected SimpleExtensionImpl2 createExtension(SimpleExtendable extendable) {\n+            return new SimpleExtensionImpl2();\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImplProvider\n+            implements\n+            ExtensionAdderProvider<SimpleExtendable, SimpleExtension, SimpleExtensionAdderImpl> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Default\";\n+        }\n+\n+        @Override\n+        public Class<SimpleExtensionAdderImpl> getAdderClass() {\n+            return SimpleExtensionAdderImpl.class;\n+        }\n+\n+        @Override\n+        public SimpleExtensionAdderImpl newAdder(SimpleExtendable extendable) {\n+            return new SimpleExtensionAdderImpl(extendable);\n+        }\n+    }\n+\n+    @AutoService(ExtensionAdderProvider.class)\n+    public static class SimpleExtensionAdderImpl2Provider implements\n+            ExtensionAdderProvider<SimpleExtendable, SimpleExtension, SimpleExtensionAdderImpl2> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+\n+        @Override\n+        public Class<SimpleExtensionAdderImpl2> getAdderClass() {\n+            return SimpleExtensionAdderImpl2.class;\n+        }\n+\n+        @Override\n+        public SimpleExtensionAdderImpl2 newAdder(SimpleExtendable extendable) {\n+            return new SimpleExtensionAdderImpl2(extendable);\n+        }\n+    }\n+\n+    private static interface GenericExtendable<G extends GenericExtendable<G>> extends Extendable<G> {\n+    }\n+\n+    private static class GenericExtendableImpl2<G extends GenericExtendable<G>>\n+            extends AbstractExtendable<G> implements GenericExtendable<G> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SpecificExtendable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c90cb091fc5430517c21dccfd950262f27caf342"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyMzQ4NQ==", "bodyText": "Yes", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r383423485", "createdAt": "2020-02-24T18:01:36Z", "author": {"login": "jonenst"}, "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Test;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.PowsyblException;\n+\n+public class ExtensionAdderProvidersTest {\n+\n+    private static interface SimpleExtendable extends Extendable<SimpleExtendable> {\n+    }\n+\n+    private static class SimpleExtendableImpl2\n+            extends AbstractExtendable<SimpleExtendable> implements SimpleExtendable {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SimpleExtension extends Extension<SimpleExtendable> {\n+        default String getName() {\n+            return \"SimpleExtension\";\n+        }\n+    }\n+\n+    private static class SimpleExtensionImpl extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static class SimpleExtensionImpl2 extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static interface SimpleExtensionAdder extends ExtensionAdder<SimpleExtendable, SimpleExtension> {\n+        default Class<SimpleExtension> getExtensionClass() {\n+            return SimpleExtension.class;\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImpl\n+            extends AbstractExtensionAdder<SimpleExtendable, SimpleExtension>\n+            implements SimpleExtensionAdder {\n+        protected SimpleExtensionAdderImpl(SimpleExtendable extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected SimpleExtensionImpl createExtension(SimpleExtendable extendable) {\n+            return new SimpleExtensionImpl();\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImpl2\n+            extends AbstractExtensionAdder<SimpleExtendable, SimpleExtension>\n+            implements SimpleExtensionAdder {\n+        protected SimpleExtensionAdderImpl2(SimpleExtendable extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected SimpleExtensionImpl2 createExtension(SimpleExtendable extendable) {\n+            return new SimpleExtensionImpl2();\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImplProvider\n+            implements\n+            ExtensionAdderProvider<SimpleExtendable, SimpleExtension, SimpleExtensionAdderImpl> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Default\";\n+        }\n+\n+        @Override\n+        public Class<SimpleExtensionAdderImpl> getAdderClass() {\n+            return SimpleExtensionAdderImpl.class;\n+        }\n+\n+        @Override\n+        public SimpleExtensionAdderImpl newAdder(SimpleExtendable extendable) {\n+            return new SimpleExtensionAdderImpl(extendable);\n+        }\n+    }\n+\n+    @AutoService(ExtensionAdderProvider.class)\n+    public static class SimpleExtensionAdderImpl2Provider implements\n+            ExtensionAdderProvider<SimpleExtendable, SimpleExtension, SimpleExtensionAdderImpl2> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+\n+        @Override\n+        public Class<SimpleExtensionAdderImpl2> getAdderClass() {\n+            return SimpleExtensionAdderImpl2.class;\n+        }\n+\n+        @Override\n+        public SimpleExtensionAdderImpl2 newAdder(SimpleExtendable extendable) {\n+            return new SimpleExtensionAdderImpl2(extendable);\n+        }\n+    }\n+\n+    private static interface GenericExtendable<G extends GenericExtendable<G>> extends Extendable<G> {\n+    }\n+\n+    private static class GenericExtendableImpl2<G extends GenericExtendable<G>>\n+            extends AbstractExtendable<G> implements GenericExtendable<G> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SpecificExtendable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2NTc5Mw=="}, "originalCommit": {"oid": "c90cb091fc5430517c21dccfd950262f27caf342"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Mzg1NTE5OnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjoyMDowNlrOFtmzUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjoyMDowNlrOFtmzUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2NTk3MA==", "bodyText": "useless static?", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r383365970", "createdAt": "2020-02-24T16:20:06Z", "author": {"login": "geofjamg"}, "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Test;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.PowsyblException;\n+\n+public class ExtensionAdderProvidersTest {\n+\n+    private static interface SimpleExtendable extends Extendable<SimpleExtendable> {\n+    }\n+\n+    private static class SimpleExtendableImpl2\n+            extends AbstractExtendable<SimpleExtendable> implements SimpleExtendable {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SimpleExtension extends Extension<SimpleExtendable> {\n+        default String getName() {\n+            return \"SimpleExtension\";\n+        }\n+    }\n+\n+    private static class SimpleExtensionImpl extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static class SimpleExtensionImpl2 extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static interface SimpleExtensionAdder extends ExtensionAdder<SimpleExtendable, SimpleExtension> {\n+        default Class<SimpleExtension> getExtensionClass() {\n+            return SimpleExtension.class;\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImpl\n+            extends AbstractExtensionAdder<SimpleExtendable, SimpleExtension>\n+            implements SimpleExtensionAdder {\n+        protected SimpleExtensionAdderImpl(SimpleExtendable extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected SimpleExtensionImpl createExtension(SimpleExtendable extendable) {\n+            return new SimpleExtensionImpl();\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImpl2\n+            extends AbstractExtensionAdder<SimpleExtendable, SimpleExtension>\n+            implements SimpleExtensionAdder {\n+        protected SimpleExtensionAdderImpl2(SimpleExtendable extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected SimpleExtensionImpl2 createExtension(SimpleExtendable extendable) {\n+            return new SimpleExtensionImpl2();\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImplProvider\n+            implements\n+            ExtensionAdderProvider<SimpleExtendable, SimpleExtension, SimpleExtensionAdderImpl> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Default\";\n+        }\n+\n+        @Override\n+        public Class<SimpleExtensionAdderImpl> getAdderClass() {\n+            return SimpleExtensionAdderImpl.class;\n+        }\n+\n+        @Override\n+        public SimpleExtensionAdderImpl newAdder(SimpleExtendable extendable) {\n+            return new SimpleExtensionAdderImpl(extendable);\n+        }\n+    }\n+\n+    @AutoService(ExtensionAdderProvider.class)\n+    public static class SimpleExtensionAdderImpl2Provider implements\n+            ExtensionAdderProvider<SimpleExtendable, SimpleExtension, SimpleExtensionAdderImpl2> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+\n+        @Override\n+        public Class<SimpleExtensionAdderImpl2> getAdderClass() {\n+            return SimpleExtensionAdderImpl2.class;\n+        }\n+\n+        @Override\n+        public SimpleExtensionAdderImpl2 newAdder(SimpleExtendable extendable) {\n+            return new SimpleExtensionAdderImpl2(extendable);\n+        }\n+    }\n+\n+    private static interface GenericExtendable<G extends GenericExtendable<G>> extends Extendable<G> {\n+    }\n+\n+    private static class GenericExtendableImpl2<G extends GenericExtendable<G>>\n+            extends AbstractExtendable<G> implements GenericExtendable<G> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SpecificExtendable\n+            extends GenericExtendable<SpecificExtendable> {\n+    }\n+\n+    private static class SpecificExtendableImpl2\n+            extends AbstractExtendable<SpecificExtendable>\n+            implements SpecificExtendable {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface GenericExtension<G extends GenericExtendable<G>> extends Extension<G> {\n+\n+        static <G extends GenericExtendable<G>> Class<GenericExtension<G>> clazz() {\n+            return (Class<GenericExtension<G>>) (Class) GenericExtension.class;\n+        }\n+\n+        default String getName() {\n+            return \"SimpleExtension\";\n+        }\n+    }\n+\n+    private static class GenericExtensionImpl<G extends GenericExtendable<G>>\n+            extends AbstractExtension<G>\n+            implements GenericExtension<G> {\n+    }\n+\n+    private static class GenericExtensionImpl2<G extends GenericExtendable<G>>\n+            extends AbstractExtension<G>\n+            implements GenericExtension<G> {\n+    }\n+\n+    private static interface GenericExtensionAdder<G extends GenericExtendable<G>> extends ExtensionAdder<G, GenericExtension<G>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c90cb091fc5430517c21dccfd950262f27caf342"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Mzg1OTE2OnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjoyMTowM1rOFtm1zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODowOToxNlrOFtqing==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2NjYwNA==", "bodyText": "Unused variable?", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r383366604", "createdAt": "2020-02-24T16:21:03Z", "author": {"login": "geofjamg"}, "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Test;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.PowsyblException;\n+\n+public class ExtensionAdderProvidersTest {\n+\n+    private static interface SimpleExtendable extends Extendable<SimpleExtendable> {\n+    }\n+\n+    private static class SimpleExtendableImpl2\n+            extends AbstractExtendable<SimpleExtendable> implements SimpleExtendable {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SimpleExtension extends Extension<SimpleExtendable> {\n+        default String getName() {\n+            return \"SimpleExtension\";\n+        }\n+    }\n+\n+    private static class SimpleExtensionImpl extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static class SimpleExtensionImpl2 extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static interface SimpleExtensionAdder extends ExtensionAdder<SimpleExtendable, SimpleExtension> {\n+        default Class<SimpleExtension> getExtensionClass() {\n+            return SimpleExtension.class;\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImpl\n+            extends AbstractExtensionAdder<SimpleExtendable, SimpleExtension>\n+            implements SimpleExtensionAdder {\n+        protected SimpleExtensionAdderImpl(SimpleExtendable extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected SimpleExtensionImpl createExtension(SimpleExtendable extendable) {\n+            return new SimpleExtensionImpl();\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImpl2\n+            extends AbstractExtensionAdder<SimpleExtendable, SimpleExtension>\n+            implements SimpleExtensionAdder {\n+        protected SimpleExtensionAdderImpl2(SimpleExtendable extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected SimpleExtensionImpl2 createExtension(SimpleExtendable extendable) {\n+            return new SimpleExtensionImpl2();\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImplProvider\n+            implements\n+            ExtensionAdderProvider<SimpleExtendable, SimpleExtension, SimpleExtensionAdderImpl> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Default\";\n+        }\n+\n+        @Override\n+        public Class<SimpleExtensionAdderImpl> getAdderClass() {\n+            return SimpleExtensionAdderImpl.class;\n+        }\n+\n+        @Override\n+        public SimpleExtensionAdderImpl newAdder(SimpleExtendable extendable) {\n+            return new SimpleExtensionAdderImpl(extendable);\n+        }\n+    }\n+\n+    @AutoService(ExtensionAdderProvider.class)\n+    public static class SimpleExtensionAdderImpl2Provider implements\n+            ExtensionAdderProvider<SimpleExtendable, SimpleExtension, SimpleExtensionAdderImpl2> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+\n+        @Override\n+        public Class<SimpleExtensionAdderImpl2> getAdderClass() {\n+            return SimpleExtensionAdderImpl2.class;\n+        }\n+\n+        @Override\n+        public SimpleExtensionAdderImpl2 newAdder(SimpleExtendable extendable) {\n+            return new SimpleExtensionAdderImpl2(extendable);\n+        }\n+    }\n+\n+    private static interface GenericExtendable<G extends GenericExtendable<G>> extends Extendable<G> {\n+    }\n+\n+    private static class GenericExtendableImpl2<G extends GenericExtendable<G>>\n+            extends AbstractExtendable<G> implements GenericExtendable<G> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SpecificExtendable\n+            extends GenericExtendable<SpecificExtendable> {\n+    }\n+\n+    private static class SpecificExtendableImpl2\n+            extends AbstractExtendable<SpecificExtendable>\n+            implements SpecificExtendable {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface GenericExtension<G extends GenericExtendable<G>> extends Extension<G> {\n+\n+        static <G extends GenericExtendable<G>> Class<GenericExtension<G>> clazz() {\n+            return (Class<GenericExtension<G>>) (Class) GenericExtension.class;\n+        }\n+\n+        default String getName() {\n+            return \"SimpleExtension\";\n+        }\n+    }\n+\n+    private static class GenericExtensionImpl<G extends GenericExtendable<G>>\n+            extends AbstractExtension<G>\n+            implements GenericExtension<G> {\n+    }\n+\n+    private static class GenericExtensionImpl2<G extends GenericExtendable<G>>\n+            extends AbstractExtension<G>\n+            implements GenericExtension<G> {\n+    }\n+\n+    private static interface GenericExtensionAdder<G extends GenericExtendable<G>> extends ExtensionAdder<G, GenericExtension<G>> {\n+        static <G extends GenericExtendable<G>> Class<GenericExtensionAdder<G>> clazz() {\n+            return (Class<GenericExtensionAdder<G>>) (Class) GenericExtensionAdder.class;\n+        }\n+\n+        default Class<GenericExtension> getExtensionClass() {\n+            return GenericExtension.class;\n+        }\n+    }\n+\n+    private static class GenericExtensionAdderImpl<G extends GenericExtendable<G>>\n+            extends AbstractExtensionAdder<G, GenericExtension<G>>\n+            implements GenericExtensionAdder<G> {\n+        protected GenericExtensionAdderImpl(G extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected GenericExtensionImpl<G> createExtension(G genericExtendable) {\n+            return new GenericExtensionImpl<>();\n+        }\n+    }\n+\n+    private static class GenericExtensionAdderImpl2<G extends GenericExtendable<G>>\n+            extends AbstractExtensionAdder<G, GenericExtension<G>>\n+            implements GenericExtensionAdder<G> {\n+        protected GenericExtensionAdderImpl2(G extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected GenericExtensionImpl2<G> createExtension(G genericExtendable) {\n+            return new GenericExtensionImpl2<>();\n+        }\n+    }\n+\n+    private static class GenericExtensionAdderImplProvider<G extends GenericExtendable<G>>\n+            implements\n+            ExtensionAdderProvider<G, GenericExtension<G>, GenericExtensionAdderImpl<G>> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Default\";\n+        }\n+\n+        @Override\n+        public Class<GenericExtensionAdderImpl> getAdderClass() {\n+            return GenericExtensionAdderImpl.class;\n+        }\n+\n+        @Override\n+        public GenericExtensionAdderImpl<G> newAdder(G extendable) {\n+            return new GenericExtensionAdderImpl<>(extendable);\n+        }\n+    }\n+\n+    @AutoService(ExtensionAdderProvider.class)\n+    public static class GenericExtensionAdderImpl2Provider<G extends GenericExtendable<G>>\n+            implements\n+            ExtensionAdderProvider<G, GenericExtension<G>, GenericExtensionAdderImpl2<G>> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+\n+        @Override\n+        public Class<GenericExtensionAdderImpl2> getAdderClass() {\n+            return GenericExtensionAdderImpl2.class;\n+        }\n+\n+        @Override\n+        public GenericExtensionAdderImpl2<G> newAdder(G extendable) {\n+            return new GenericExtensionAdderImpl2<>(extendable);\n+        }\n+    }\n+\n+    @Test\n+    public void test() {\n+        List<ExtensionAdderProvider> listProviders = Arrays.asList(\n+                new SimpleExtensionAdderImplProvider(),\n+                new SimpleExtensionAdderImpl2Provider(),\n+                new GenericExtensionAdderImplProvider(),\n+                new GenericExtensionAdderImpl2Provider());\n+        ConcurrentMap<Pair<String, Class>, ExtensionAdderProvider> cache = new ConcurrentHashMap<>();\n+        ConcurrentMap<String, List<ExtensionAdderProvider>> mapProviders = ExtensionAdderProviders.groupProvidersByName(listProviders);\n+        ExtensionAdderProvider a = ExtensionAdderProviders.findCachedProvider(\"Default\",\n+                SimpleExtensionAdder.class, mapProviders, cache);\n+        assertEquals(\"Default\", a.getImplementationName());\n+        assertEquals(SimpleExtensionAdderImplProvider.class, a.getClass());\n+        assertEquals(1, cache.size());\n+        ExtensionAdderProvider b = ExtensionAdderProviders.findCachedProvider(\"Custom\",\n+                SimpleExtensionAdder.class, mapProviders, cache);\n+        assertEquals(\"Custom\", b.getImplementationName());\n+        assertEquals(SimpleExtensionAdderImpl2Provider.class, b.getClass());\n+        assertEquals(2, cache.size());\n+\n+        // Do it again, it should work from the cache\n+        assertEquals(\"Default\", ExtensionAdderProviders.findCachedProvider(\"Default\", SimpleExtensionAdder.class,\n+                new ConcurrentHashMap<>(), cache).getImplementationName());\n+        assertEquals(\"Custom\", ExtensionAdderProviders.findCachedProvider(\"Custom\", SimpleExtensionAdder.class,\n+                                new ConcurrentHashMap<>(), cache)\n+                        .getImplementationName());\n+    }\n+\n+    @Test\n+    public void testMissing() {\n+        try {\n+            ExtensionAdderProviders.findCachedProvider(\"Default\",\n+                    SimpleExtensionAdder.class, new ConcurrentHashMap<>(),\n+                    new ConcurrentHashMap<>());\n+            fail(\"Should throw Missing Provider exception\");\n+        } catch (PowsyblException e) {\n+            assertTrue(\"Should throw Missing Provider exception\",\n+                    e.getMessage().contains(\"not found\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testMissingAlternate() {\n+        try {\n+            List<ExtensionAdderProvider> listProviders = Arrays", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c90cb091fc5430517c21dccfd950262f27caf342"}, "originalPosition": 283}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyNzIzMA==", "bodyText": "Good catch the test was not testing what I wanted to test", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r383427230", "createdAt": "2020-02-24T18:09:16Z", "author": {"login": "jonenst"}, "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Test;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.PowsyblException;\n+\n+public class ExtensionAdderProvidersTest {\n+\n+    private static interface SimpleExtendable extends Extendable<SimpleExtendable> {\n+    }\n+\n+    private static class SimpleExtendableImpl2\n+            extends AbstractExtendable<SimpleExtendable> implements SimpleExtendable {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SimpleExtension extends Extension<SimpleExtendable> {\n+        default String getName() {\n+            return \"SimpleExtension\";\n+        }\n+    }\n+\n+    private static class SimpleExtensionImpl extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static class SimpleExtensionImpl2 extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static interface SimpleExtensionAdder extends ExtensionAdder<SimpleExtendable, SimpleExtension> {\n+        default Class<SimpleExtension> getExtensionClass() {\n+            return SimpleExtension.class;\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImpl\n+            extends AbstractExtensionAdder<SimpleExtendable, SimpleExtension>\n+            implements SimpleExtensionAdder {\n+        protected SimpleExtensionAdderImpl(SimpleExtendable extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected SimpleExtensionImpl createExtension(SimpleExtendable extendable) {\n+            return new SimpleExtensionImpl();\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImpl2\n+            extends AbstractExtensionAdder<SimpleExtendable, SimpleExtension>\n+            implements SimpleExtensionAdder {\n+        protected SimpleExtensionAdderImpl2(SimpleExtendable extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected SimpleExtensionImpl2 createExtension(SimpleExtendable extendable) {\n+            return new SimpleExtensionImpl2();\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImplProvider\n+            implements\n+            ExtensionAdderProvider<SimpleExtendable, SimpleExtension, SimpleExtensionAdderImpl> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Default\";\n+        }\n+\n+        @Override\n+        public Class<SimpleExtensionAdderImpl> getAdderClass() {\n+            return SimpleExtensionAdderImpl.class;\n+        }\n+\n+        @Override\n+        public SimpleExtensionAdderImpl newAdder(SimpleExtendable extendable) {\n+            return new SimpleExtensionAdderImpl(extendable);\n+        }\n+    }\n+\n+    @AutoService(ExtensionAdderProvider.class)\n+    public static class SimpleExtensionAdderImpl2Provider implements\n+            ExtensionAdderProvider<SimpleExtendable, SimpleExtension, SimpleExtensionAdderImpl2> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+\n+        @Override\n+        public Class<SimpleExtensionAdderImpl2> getAdderClass() {\n+            return SimpleExtensionAdderImpl2.class;\n+        }\n+\n+        @Override\n+        public SimpleExtensionAdderImpl2 newAdder(SimpleExtendable extendable) {\n+            return new SimpleExtensionAdderImpl2(extendable);\n+        }\n+    }\n+\n+    private static interface GenericExtendable<G extends GenericExtendable<G>> extends Extendable<G> {\n+    }\n+\n+    private static class GenericExtendableImpl2<G extends GenericExtendable<G>>\n+            extends AbstractExtendable<G> implements GenericExtendable<G> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SpecificExtendable\n+            extends GenericExtendable<SpecificExtendable> {\n+    }\n+\n+    private static class SpecificExtendableImpl2\n+            extends AbstractExtendable<SpecificExtendable>\n+            implements SpecificExtendable {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface GenericExtension<G extends GenericExtendable<G>> extends Extension<G> {\n+\n+        static <G extends GenericExtendable<G>> Class<GenericExtension<G>> clazz() {\n+            return (Class<GenericExtension<G>>) (Class) GenericExtension.class;\n+        }\n+\n+        default String getName() {\n+            return \"SimpleExtension\";\n+        }\n+    }\n+\n+    private static class GenericExtensionImpl<G extends GenericExtendable<G>>\n+            extends AbstractExtension<G>\n+            implements GenericExtension<G> {\n+    }\n+\n+    private static class GenericExtensionImpl2<G extends GenericExtendable<G>>\n+            extends AbstractExtension<G>\n+            implements GenericExtension<G> {\n+    }\n+\n+    private static interface GenericExtensionAdder<G extends GenericExtendable<G>> extends ExtensionAdder<G, GenericExtension<G>> {\n+        static <G extends GenericExtendable<G>> Class<GenericExtensionAdder<G>> clazz() {\n+            return (Class<GenericExtensionAdder<G>>) (Class) GenericExtensionAdder.class;\n+        }\n+\n+        default Class<GenericExtension> getExtensionClass() {\n+            return GenericExtension.class;\n+        }\n+    }\n+\n+    private static class GenericExtensionAdderImpl<G extends GenericExtendable<G>>\n+            extends AbstractExtensionAdder<G, GenericExtension<G>>\n+            implements GenericExtensionAdder<G> {\n+        protected GenericExtensionAdderImpl(G extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected GenericExtensionImpl<G> createExtension(G genericExtendable) {\n+            return new GenericExtensionImpl<>();\n+        }\n+    }\n+\n+    private static class GenericExtensionAdderImpl2<G extends GenericExtendable<G>>\n+            extends AbstractExtensionAdder<G, GenericExtension<G>>\n+            implements GenericExtensionAdder<G> {\n+        protected GenericExtensionAdderImpl2(G extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected GenericExtensionImpl2<G> createExtension(G genericExtendable) {\n+            return new GenericExtensionImpl2<>();\n+        }\n+    }\n+\n+    private static class GenericExtensionAdderImplProvider<G extends GenericExtendable<G>>\n+            implements\n+            ExtensionAdderProvider<G, GenericExtension<G>, GenericExtensionAdderImpl<G>> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Default\";\n+        }\n+\n+        @Override\n+        public Class<GenericExtensionAdderImpl> getAdderClass() {\n+            return GenericExtensionAdderImpl.class;\n+        }\n+\n+        @Override\n+        public GenericExtensionAdderImpl<G> newAdder(G extendable) {\n+            return new GenericExtensionAdderImpl<>(extendable);\n+        }\n+    }\n+\n+    @AutoService(ExtensionAdderProvider.class)\n+    public static class GenericExtensionAdderImpl2Provider<G extends GenericExtendable<G>>\n+            implements\n+            ExtensionAdderProvider<G, GenericExtension<G>, GenericExtensionAdderImpl2<G>> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+\n+        @Override\n+        public Class<GenericExtensionAdderImpl2> getAdderClass() {\n+            return GenericExtensionAdderImpl2.class;\n+        }\n+\n+        @Override\n+        public GenericExtensionAdderImpl2<G> newAdder(G extendable) {\n+            return new GenericExtensionAdderImpl2<>(extendable);\n+        }\n+    }\n+\n+    @Test\n+    public void test() {\n+        List<ExtensionAdderProvider> listProviders = Arrays.asList(\n+                new SimpleExtensionAdderImplProvider(),\n+                new SimpleExtensionAdderImpl2Provider(),\n+                new GenericExtensionAdderImplProvider(),\n+                new GenericExtensionAdderImpl2Provider());\n+        ConcurrentMap<Pair<String, Class>, ExtensionAdderProvider> cache = new ConcurrentHashMap<>();\n+        ConcurrentMap<String, List<ExtensionAdderProvider>> mapProviders = ExtensionAdderProviders.groupProvidersByName(listProviders);\n+        ExtensionAdderProvider a = ExtensionAdderProviders.findCachedProvider(\"Default\",\n+                SimpleExtensionAdder.class, mapProviders, cache);\n+        assertEquals(\"Default\", a.getImplementationName());\n+        assertEquals(SimpleExtensionAdderImplProvider.class, a.getClass());\n+        assertEquals(1, cache.size());\n+        ExtensionAdderProvider b = ExtensionAdderProviders.findCachedProvider(\"Custom\",\n+                SimpleExtensionAdder.class, mapProviders, cache);\n+        assertEquals(\"Custom\", b.getImplementationName());\n+        assertEquals(SimpleExtensionAdderImpl2Provider.class, b.getClass());\n+        assertEquals(2, cache.size());\n+\n+        // Do it again, it should work from the cache\n+        assertEquals(\"Default\", ExtensionAdderProviders.findCachedProvider(\"Default\", SimpleExtensionAdder.class,\n+                new ConcurrentHashMap<>(), cache).getImplementationName());\n+        assertEquals(\"Custom\", ExtensionAdderProviders.findCachedProvider(\"Custom\", SimpleExtensionAdder.class,\n+                                new ConcurrentHashMap<>(), cache)\n+                        .getImplementationName());\n+    }\n+\n+    @Test\n+    public void testMissing() {\n+        try {\n+            ExtensionAdderProviders.findCachedProvider(\"Default\",\n+                    SimpleExtensionAdder.class, new ConcurrentHashMap<>(),\n+                    new ConcurrentHashMap<>());\n+            fail(\"Should throw Missing Provider exception\");\n+        } catch (PowsyblException e) {\n+            assertTrue(\"Should throw Missing Provider exception\",\n+                    e.getMessage().contains(\"not found\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testMissingAlternate() {\n+        try {\n+            List<ExtensionAdderProvider> listProviders = Arrays", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2NjYwNA=="}, "originalCommit": {"oid": "c90cb091fc5430517c21dccfd950262f27caf342"}, "originalPosition": 283}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Mzg2MTI3OnYy", "diffSide": "RIGHT", "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjoyMTozNVrOFtm3MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODowOToxOVrOFtqitg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2Njk2MA==", "bodyText": "Unused variable?", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r383366960", "createdAt": "2020-02-24T16:21:35Z", "author": {"login": "geofjamg"}, "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Test;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.PowsyblException;\n+\n+public class ExtensionAdderProvidersTest {\n+\n+    private static interface SimpleExtendable extends Extendable<SimpleExtendable> {\n+    }\n+\n+    private static class SimpleExtendableImpl2\n+            extends AbstractExtendable<SimpleExtendable> implements SimpleExtendable {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SimpleExtension extends Extension<SimpleExtendable> {\n+        default String getName() {\n+            return \"SimpleExtension\";\n+        }\n+    }\n+\n+    private static class SimpleExtensionImpl extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static class SimpleExtensionImpl2 extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static interface SimpleExtensionAdder extends ExtensionAdder<SimpleExtendable, SimpleExtension> {\n+        default Class<SimpleExtension> getExtensionClass() {\n+            return SimpleExtension.class;\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImpl\n+            extends AbstractExtensionAdder<SimpleExtendable, SimpleExtension>\n+            implements SimpleExtensionAdder {\n+        protected SimpleExtensionAdderImpl(SimpleExtendable extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected SimpleExtensionImpl createExtension(SimpleExtendable extendable) {\n+            return new SimpleExtensionImpl();\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImpl2\n+            extends AbstractExtensionAdder<SimpleExtendable, SimpleExtension>\n+            implements SimpleExtensionAdder {\n+        protected SimpleExtensionAdderImpl2(SimpleExtendable extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected SimpleExtensionImpl2 createExtension(SimpleExtendable extendable) {\n+            return new SimpleExtensionImpl2();\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImplProvider\n+            implements\n+            ExtensionAdderProvider<SimpleExtendable, SimpleExtension, SimpleExtensionAdderImpl> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Default\";\n+        }\n+\n+        @Override\n+        public Class<SimpleExtensionAdderImpl> getAdderClass() {\n+            return SimpleExtensionAdderImpl.class;\n+        }\n+\n+        @Override\n+        public SimpleExtensionAdderImpl newAdder(SimpleExtendable extendable) {\n+            return new SimpleExtensionAdderImpl(extendable);\n+        }\n+    }\n+\n+    @AutoService(ExtensionAdderProvider.class)\n+    public static class SimpleExtensionAdderImpl2Provider implements\n+            ExtensionAdderProvider<SimpleExtendable, SimpleExtension, SimpleExtensionAdderImpl2> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+\n+        @Override\n+        public Class<SimpleExtensionAdderImpl2> getAdderClass() {\n+            return SimpleExtensionAdderImpl2.class;\n+        }\n+\n+        @Override\n+        public SimpleExtensionAdderImpl2 newAdder(SimpleExtendable extendable) {\n+            return new SimpleExtensionAdderImpl2(extendable);\n+        }\n+    }\n+\n+    private static interface GenericExtendable<G extends GenericExtendable<G>> extends Extendable<G> {\n+    }\n+\n+    private static class GenericExtendableImpl2<G extends GenericExtendable<G>>\n+            extends AbstractExtendable<G> implements GenericExtendable<G> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SpecificExtendable\n+            extends GenericExtendable<SpecificExtendable> {\n+    }\n+\n+    private static class SpecificExtendableImpl2\n+            extends AbstractExtendable<SpecificExtendable>\n+            implements SpecificExtendable {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface GenericExtension<G extends GenericExtendable<G>> extends Extension<G> {\n+\n+        static <G extends GenericExtendable<G>> Class<GenericExtension<G>> clazz() {\n+            return (Class<GenericExtension<G>>) (Class) GenericExtension.class;\n+        }\n+\n+        default String getName() {\n+            return \"SimpleExtension\";\n+        }\n+    }\n+\n+    private static class GenericExtensionImpl<G extends GenericExtendable<G>>\n+            extends AbstractExtension<G>\n+            implements GenericExtension<G> {\n+    }\n+\n+    private static class GenericExtensionImpl2<G extends GenericExtendable<G>>\n+            extends AbstractExtension<G>\n+            implements GenericExtension<G> {\n+    }\n+\n+    private static interface GenericExtensionAdder<G extends GenericExtendable<G>> extends ExtensionAdder<G, GenericExtension<G>> {\n+        static <G extends GenericExtendable<G>> Class<GenericExtensionAdder<G>> clazz() {\n+            return (Class<GenericExtensionAdder<G>>) (Class) GenericExtensionAdder.class;\n+        }\n+\n+        default Class<GenericExtension> getExtensionClass() {\n+            return GenericExtension.class;\n+        }\n+    }\n+\n+    private static class GenericExtensionAdderImpl<G extends GenericExtendable<G>>\n+            extends AbstractExtensionAdder<G, GenericExtension<G>>\n+            implements GenericExtensionAdder<G> {\n+        protected GenericExtensionAdderImpl(G extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected GenericExtensionImpl<G> createExtension(G genericExtendable) {\n+            return new GenericExtensionImpl<>();\n+        }\n+    }\n+\n+    private static class GenericExtensionAdderImpl2<G extends GenericExtendable<G>>\n+            extends AbstractExtensionAdder<G, GenericExtension<G>>\n+            implements GenericExtensionAdder<G> {\n+        protected GenericExtensionAdderImpl2(G extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected GenericExtensionImpl2<G> createExtension(G genericExtendable) {\n+            return new GenericExtensionImpl2<>();\n+        }\n+    }\n+\n+    private static class GenericExtensionAdderImplProvider<G extends GenericExtendable<G>>\n+            implements\n+            ExtensionAdderProvider<G, GenericExtension<G>, GenericExtensionAdderImpl<G>> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Default\";\n+        }\n+\n+        @Override\n+        public Class<GenericExtensionAdderImpl> getAdderClass() {\n+            return GenericExtensionAdderImpl.class;\n+        }\n+\n+        @Override\n+        public GenericExtensionAdderImpl<G> newAdder(G extendable) {\n+            return new GenericExtensionAdderImpl<>(extendable);\n+        }\n+    }\n+\n+    @AutoService(ExtensionAdderProvider.class)\n+    public static class GenericExtensionAdderImpl2Provider<G extends GenericExtendable<G>>\n+            implements\n+            ExtensionAdderProvider<G, GenericExtension<G>, GenericExtensionAdderImpl2<G>> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+\n+        @Override\n+        public Class<GenericExtensionAdderImpl2> getAdderClass() {\n+            return GenericExtensionAdderImpl2.class;\n+        }\n+\n+        @Override\n+        public GenericExtensionAdderImpl2<G> newAdder(G extendable) {\n+            return new GenericExtensionAdderImpl2<>(extendable);\n+        }\n+    }\n+\n+    @Test\n+    public void test() {\n+        List<ExtensionAdderProvider> listProviders = Arrays.asList(\n+                new SimpleExtensionAdderImplProvider(),\n+                new SimpleExtensionAdderImpl2Provider(),\n+                new GenericExtensionAdderImplProvider(),\n+                new GenericExtensionAdderImpl2Provider());\n+        ConcurrentMap<Pair<String, Class>, ExtensionAdderProvider> cache = new ConcurrentHashMap<>();\n+        ConcurrentMap<String, List<ExtensionAdderProvider>> mapProviders = ExtensionAdderProviders.groupProvidersByName(listProviders);\n+        ExtensionAdderProvider a = ExtensionAdderProviders.findCachedProvider(\"Default\",\n+                SimpleExtensionAdder.class, mapProviders, cache);\n+        assertEquals(\"Default\", a.getImplementationName());\n+        assertEquals(SimpleExtensionAdderImplProvider.class, a.getClass());\n+        assertEquals(1, cache.size());\n+        ExtensionAdderProvider b = ExtensionAdderProviders.findCachedProvider(\"Custom\",\n+                SimpleExtensionAdder.class, mapProviders, cache);\n+        assertEquals(\"Custom\", b.getImplementationName());\n+        assertEquals(SimpleExtensionAdderImpl2Provider.class, b.getClass());\n+        assertEquals(2, cache.size());\n+\n+        // Do it again, it should work from the cache\n+        assertEquals(\"Default\", ExtensionAdderProviders.findCachedProvider(\"Default\", SimpleExtensionAdder.class,\n+                new ConcurrentHashMap<>(), cache).getImplementationName());\n+        assertEquals(\"Custom\", ExtensionAdderProviders.findCachedProvider(\"Custom\", SimpleExtensionAdder.class,\n+                                new ConcurrentHashMap<>(), cache)\n+                        .getImplementationName());\n+    }\n+\n+    @Test\n+    public void testMissing() {\n+        try {\n+            ExtensionAdderProviders.findCachedProvider(\"Default\",\n+                    SimpleExtensionAdder.class, new ConcurrentHashMap<>(),\n+                    new ConcurrentHashMap<>());\n+            fail(\"Should throw Missing Provider exception\");\n+        } catch (PowsyblException e) {\n+            assertTrue(\"Should throw Missing Provider exception\",\n+                    e.getMessage().contains(\"not found\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testMissingAlternate() {\n+        try {\n+            List<ExtensionAdderProvider> listProviders = Arrays\n+                    .asList(new SimpleExtensionAdderImplProvider());\n+            ExtensionAdderProviders.findCachedProvider(\"Custom\",\n+                    SimpleExtensionAdder.class, new ConcurrentHashMap<>(),\n+                    new ConcurrentHashMap<>());\n+            fail(\"Should throw Missing Provider exception\");\n+        } catch (PowsyblException e) {\n+            assertTrue(\"Should throw Missing Provider exception\",\n+                    e.getMessage().contains(\"not found\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testMissingAlternate2() {\n+        try {\n+            List<ExtensionAdderProvider> listProviders = Arrays", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c90cb091fc5430517c21dccfd950262f27caf342"}, "originalPosition": 298}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyNzI1NA==", "bodyText": "Good catch the test was not testing what I wanted to test", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r383427254", "createdAt": "2020-02-24T18:09:19Z", "author": {"login": "jonenst"}, "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Test;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.PowsyblException;\n+\n+public class ExtensionAdderProvidersTest {\n+\n+    private static interface SimpleExtendable extends Extendable<SimpleExtendable> {\n+    }\n+\n+    private static class SimpleExtendableImpl2\n+            extends AbstractExtendable<SimpleExtendable> implements SimpleExtendable {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SimpleExtension extends Extension<SimpleExtendable> {\n+        default String getName() {\n+            return \"SimpleExtension\";\n+        }\n+    }\n+\n+    private static class SimpleExtensionImpl extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static class SimpleExtensionImpl2 extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static interface SimpleExtensionAdder extends ExtensionAdder<SimpleExtendable, SimpleExtension> {\n+        default Class<SimpleExtension> getExtensionClass() {\n+            return SimpleExtension.class;\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImpl\n+            extends AbstractExtensionAdder<SimpleExtendable, SimpleExtension>\n+            implements SimpleExtensionAdder {\n+        protected SimpleExtensionAdderImpl(SimpleExtendable extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected SimpleExtensionImpl createExtension(SimpleExtendable extendable) {\n+            return new SimpleExtensionImpl();\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImpl2\n+            extends AbstractExtensionAdder<SimpleExtendable, SimpleExtension>\n+            implements SimpleExtensionAdder {\n+        protected SimpleExtensionAdderImpl2(SimpleExtendable extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected SimpleExtensionImpl2 createExtension(SimpleExtendable extendable) {\n+            return new SimpleExtensionImpl2();\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImplProvider\n+            implements\n+            ExtensionAdderProvider<SimpleExtendable, SimpleExtension, SimpleExtensionAdderImpl> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Default\";\n+        }\n+\n+        @Override\n+        public Class<SimpleExtensionAdderImpl> getAdderClass() {\n+            return SimpleExtensionAdderImpl.class;\n+        }\n+\n+        @Override\n+        public SimpleExtensionAdderImpl newAdder(SimpleExtendable extendable) {\n+            return new SimpleExtensionAdderImpl(extendable);\n+        }\n+    }\n+\n+    @AutoService(ExtensionAdderProvider.class)\n+    public static class SimpleExtensionAdderImpl2Provider implements\n+            ExtensionAdderProvider<SimpleExtendable, SimpleExtension, SimpleExtensionAdderImpl2> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+\n+        @Override\n+        public Class<SimpleExtensionAdderImpl2> getAdderClass() {\n+            return SimpleExtensionAdderImpl2.class;\n+        }\n+\n+        @Override\n+        public SimpleExtensionAdderImpl2 newAdder(SimpleExtendable extendable) {\n+            return new SimpleExtensionAdderImpl2(extendable);\n+        }\n+    }\n+\n+    private static interface GenericExtendable<G extends GenericExtendable<G>> extends Extendable<G> {\n+    }\n+\n+    private static class GenericExtendableImpl2<G extends GenericExtendable<G>>\n+            extends AbstractExtendable<G> implements GenericExtendable<G> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SpecificExtendable\n+            extends GenericExtendable<SpecificExtendable> {\n+    }\n+\n+    private static class SpecificExtendableImpl2\n+            extends AbstractExtendable<SpecificExtendable>\n+            implements SpecificExtendable {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface GenericExtension<G extends GenericExtendable<G>> extends Extension<G> {\n+\n+        static <G extends GenericExtendable<G>> Class<GenericExtension<G>> clazz() {\n+            return (Class<GenericExtension<G>>) (Class) GenericExtension.class;\n+        }\n+\n+        default String getName() {\n+            return \"SimpleExtension\";\n+        }\n+    }\n+\n+    private static class GenericExtensionImpl<G extends GenericExtendable<G>>\n+            extends AbstractExtension<G>\n+            implements GenericExtension<G> {\n+    }\n+\n+    private static class GenericExtensionImpl2<G extends GenericExtendable<G>>\n+            extends AbstractExtension<G>\n+            implements GenericExtension<G> {\n+    }\n+\n+    private static interface GenericExtensionAdder<G extends GenericExtendable<G>> extends ExtensionAdder<G, GenericExtension<G>> {\n+        static <G extends GenericExtendable<G>> Class<GenericExtensionAdder<G>> clazz() {\n+            return (Class<GenericExtensionAdder<G>>) (Class) GenericExtensionAdder.class;\n+        }\n+\n+        default Class<GenericExtension> getExtensionClass() {\n+            return GenericExtension.class;\n+        }\n+    }\n+\n+    private static class GenericExtensionAdderImpl<G extends GenericExtendable<G>>\n+            extends AbstractExtensionAdder<G, GenericExtension<G>>\n+            implements GenericExtensionAdder<G> {\n+        protected GenericExtensionAdderImpl(G extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected GenericExtensionImpl<G> createExtension(G genericExtendable) {\n+            return new GenericExtensionImpl<>();\n+        }\n+    }\n+\n+    private static class GenericExtensionAdderImpl2<G extends GenericExtendable<G>>\n+            extends AbstractExtensionAdder<G, GenericExtension<G>>\n+            implements GenericExtensionAdder<G> {\n+        protected GenericExtensionAdderImpl2(G extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected GenericExtensionImpl2<G> createExtension(G genericExtendable) {\n+            return new GenericExtensionImpl2<>();\n+        }\n+    }\n+\n+    private static class GenericExtensionAdderImplProvider<G extends GenericExtendable<G>>\n+            implements\n+            ExtensionAdderProvider<G, GenericExtension<G>, GenericExtensionAdderImpl<G>> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Default\";\n+        }\n+\n+        @Override\n+        public Class<GenericExtensionAdderImpl> getAdderClass() {\n+            return GenericExtensionAdderImpl.class;\n+        }\n+\n+        @Override\n+        public GenericExtensionAdderImpl<G> newAdder(G extendable) {\n+            return new GenericExtensionAdderImpl<>(extendable);\n+        }\n+    }\n+\n+    @AutoService(ExtensionAdderProvider.class)\n+    public static class GenericExtensionAdderImpl2Provider<G extends GenericExtendable<G>>\n+            implements\n+            ExtensionAdderProvider<G, GenericExtension<G>, GenericExtensionAdderImpl2<G>> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+\n+        @Override\n+        public Class<GenericExtensionAdderImpl2> getAdderClass() {\n+            return GenericExtensionAdderImpl2.class;\n+        }\n+\n+        @Override\n+        public GenericExtensionAdderImpl2<G> newAdder(G extendable) {\n+            return new GenericExtensionAdderImpl2<>(extendable);\n+        }\n+    }\n+\n+    @Test\n+    public void test() {\n+        List<ExtensionAdderProvider> listProviders = Arrays.asList(\n+                new SimpleExtensionAdderImplProvider(),\n+                new SimpleExtensionAdderImpl2Provider(),\n+                new GenericExtensionAdderImplProvider(),\n+                new GenericExtensionAdderImpl2Provider());\n+        ConcurrentMap<Pair<String, Class>, ExtensionAdderProvider> cache = new ConcurrentHashMap<>();\n+        ConcurrentMap<String, List<ExtensionAdderProvider>> mapProviders = ExtensionAdderProviders.groupProvidersByName(listProviders);\n+        ExtensionAdderProvider a = ExtensionAdderProviders.findCachedProvider(\"Default\",\n+                SimpleExtensionAdder.class, mapProviders, cache);\n+        assertEquals(\"Default\", a.getImplementationName());\n+        assertEquals(SimpleExtensionAdderImplProvider.class, a.getClass());\n+        assertEquals(1, cache.size());\n+        ExtensionAdderProvider b = ExtensionAdderProviders.findCachedProvider(\"Custom\",\n+                SimpleExtensionAdder.class, mapProviders, cache);\n+        assertEquals(\"Custom\", b.getImplementationName());\n+        assertEquals(SimpleExtensionAdderImpl2Provider.class, b.getClass());\n+        assertEquals(2, cache.size());\n+\n+        // Do it again, it should work from the cache\n+        assertEquals(\"Default\", ExtensionAdderProviders.findCachedProvider(\"Default\", SimpleExtensionAdder.class,\n+                new ConcurrentHashMap<>(), cache).getImplementationName());\n+        assertEquals(\"Custom\", ExtensionAdderProviders.findCachedProvider(\"Custom\", SimpleExtensionAdder.class,\n+                                new ConcurrentHashMap<>(), cache)\n+                        .getImplementationName());\n+    }\n+\n+    @Test\n+    public void testMissing() {\n+        try {\n+            ExtensionAdderProviders.findCachedProvider(\"Default\",\n+                    SimpleExtensionAdder.class, new ConcurrentHashMap<>(),\n+                    new ConcurrentHashMap<>());\n+            fail(\"Should throw Missing Provider exception\");\n+        } catch (PowsyblException e) {\n+            assertTrue(\"Should throw Missing Provider exception\",\n+                    e.getMessage().contains(\"not found\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testMissingAlternate() {\n+        try {\n+            List<ExtensionAdderProvider> listProviders = Arrays\n+                    .asList(new SimpleExtensionAdderImplProvider());\n+            ExtensionAdderProviders.findCachedProvider(\"Custom\",\n+                    SimpleExtensionAdder.class, new ConcurrentHashMap<>(),\n+                    new ConcurrentHashMap<>());\n+            fail(\"Should throw Missing Provider exception\");\n+        } catch (PowsyblException e) {\n+            assertTrue(\"Should throw Missing Provider exception\",\n+                    e.getMessage().contains(\"not found\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testMissingAlternate2() {\n+        try {\n+            List<ExtensionAdderProvider> listProviders = Arrays", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2Njk2MA=="}, "originalCommit": {"oid": "c90cb091fc5430517c21dccfd950262f27caf342"}, "originalPosition": 298}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjM4Mjc1OnYy", "diffSide": "RIGHT", "path": "commons/src/main/java/com/powsybl/commons/extensions/ExtensionAdderProviders.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTo0MToyMFrOFt--oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTo1MzozNFrOFt_frg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc2MjA4MA==", "bodyText": "Maybe a copy/past error: are you sure about this message?", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r383762080", "createdAt": "2020-02-25T09:41:20Z", "author": {"login": "mathbagu"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/ExtensionAdderProviders.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.ServiceLoader;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Suppliers;\n+import com.powsybl.commons.PowsyblException;\n+\n+/**\n+ * A utility class to help finding providers using ServiceLoader.\n+ *\n+ * @author Jon Harper <jon.harper at rte-france.com>\n+ *\n+ */\n+//Don't bother with generics because serviceloader doesn't return them\n+//and we put them in a cache where we can't propagate the generic types.\n+@SuppressWarnings(\"rawtypes\")\n+public final class ExtensionAdderProviders {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExtensionAdderProviders.class);\n+\n+    private static final Supplier<ConcurrentMap<String, List<ExtensionAdderProvider>>> ADDER_PROVIDERS = Suppliers\n+            .memoize(() -> groupProvidersByName(ServiceLoader.load(ExtensionAdderProvider.class)))::get;\n+\n+    private static final ConcurrentMap<Pair<String, Class>, ExtensionAdderProvider> CACHE = new ConcurrentHashMap<>();\n+\n+    //package private for tests\n+    static ConcurrentMap<String, List<ExtensionAdderProvider>> groupProvidersByName(Iterable<ExtensionAdderProvider> i) {\n+        return StreamSupport.stream(i.spliterator(), false).collect(Collectors\n+                .groupingByConcurrent(ExtensionAdderProvider::getImplementationName));\n+    }\n+\n+    private ExtensionAdderProviders() {\n+    }\n+\n+    private static <O, E extends Extension<O>, B extends ExtensionAdder<O, E>> ExtensionAdderProvider findProvider(\n+            String name, Class<B> type,\n+            ConcurrentMap<String, List<ExtensionAdderProvider>> providersMap) {\n+\n+        List<ExtensionAdderProvider> providersForName = providersMap.get(name);\n+        if (providersForName == null) {\n+            providersForName = Collections.emptyList();\n+        }\n+        List<ExtensionAdderProvider> providers = providersForName.stream()\n+                .filter(s -> type.isAssignableFrom(s.getAdderClass()))\n+                .collect(Collectors.toList());\n+\n+        if (providers.isEmpty()) {\n+            LOGGER.error(\n+                    \"ExtensionAdderProvider not found for ExtensionAdder {} for implementation {}\",\n+                    type.getSimpleName(), name);\n+            throw new PowsyblException(\"ExtensionAdderProvider not found\");\n+        }\n+\n+        if (providers.size() > 1) {\n+            LOGGER.error(\n+                    \"Multiple ExtensionAdderProviders found for ExtensionAdder {} for implementation {} : {}\",\n+                    type.getSimpleName(), name, providers);\n+            throw new PowsyblException(\n+                    \"Multiple platform configuration providers found\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c49faed9ae314ed693031aab747f9fc0a9bf5ff0"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc2NjYyMw==", "bodyText": "Oops yes", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r383766623", "createdAt": "2020-02-25T09:47:04Z", "author": {"login": "jonenst"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/ExtensionAdderProviders.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.ServiceLoader;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Suppliers;\n+import com.powsybl.commons.PowsyblException;\n+\n+/**\n+ * A utility class to help finding providers using ServiceLoader.\n+ *\n+ * @author Jon Harper <jon.harper at rte-france.com>\n+ *\n+ */\n+//Don't bother with generics because serviceloader doesn't return them\n+//and we put them in a cache where we can't propagate the generic types.\n+@SuppressWarnings(\"rawtypes\")\n+public final class ExtensionAdderProviders {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExtensionAdderProviders.class);\n+\n+    private static final Supplier<ConcurrentMap<String, List<ExtensionAdderProvider>>> ADDER_PROVIDERS = Suppliers\n+            .memoize(() -> groupProvidersByName(ServiceLoader.load(ExtensionAdderProvider.class)))::get;\n+\n+    private static final ConcurrentMap<Pair<String, Class>, ExtensionAdderProvider> CACHE = new ConcurrentHashMap<>();\n+\n+    //package private for tests\n+    static ConcurrentMap<String, List<ExtensionAdderProvider>> groupProvidersByName(Iterable<ExtensionAdderProvider> i) {\n+        return StreamSupport.stream(i.spliterator(), false).collect(Collectors\n+                .groupingByConcurrent(ExtensionAdderProvider::getImplementationName));\n+    }\n+\n+    private ExtensionAdderProviders() {\n+    }\n+\n+    private static <O, E extends Extension<O>, B extends ExtensionAdder<O, E>> ExtensionAdderProvider findProvider(\n+            String name, Class<B> type,\n+            ConcurrentMap<String, List<ExtensionAdderProvider>> providersMap) {\n+\n+        List<ExtensionAdderProvider> providersForName = providersMap.get(name);\n+        if (providersForName == null) {\n+            providersForName = Collections.emptyList();\n+        }\n+        List<ExtensionAdderProvider> providers = providersForName.stream()\n+                .filter(s -> type.isAssignableFrom(s.getAdderClass()))\n+                .collect(Collectors.toList());\n+\n+        if (providers.isEmpty()) {\n+            LOGGER.error(\n+                    \"ExtensionAdderProvider not found for ExtensionAdder {} for implementation {}\",\n+                    type.getSimpleName(), name);\n+            throw new PowsyblException(\"ExtensionAdderProvider not found\");\n+        }\n+\n+        if (providers.size() > 1) {\n+            LOGGER.error(\n+                    \"Multiple ExtensionAdderProviders found for ExtensionAdder {} for implementation {} : {}\",\n+                    type.getSimpleName(), name, providers);\n+            throw new PowsyblException(\n+                    \"Multiple platform configuration providers found\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc2MjA4MA=="}, "originalCommit": {"oid": "c49faed9ae314ed693031aab747f9fc0a9bf5ff0"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc3MDU0Mg==", "bodyText": "fixed", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r383770542", "createdAt": "2020-02-25T09:53:34Z", "author": {"login": "jonenst"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/ExtensionAdderProviders.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.ServiceLoader;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Suppliers;\n+import com.powsybl.commons.PowsyblException;\n+\n+/**\n+ * A utility class to help finding providers using ServiceLoader.\n+ *\n+ * @author Jon Harper <jon.harper at rte-france.com>\n+ *\n+ */\n+//Don't bother with generics because serviceloader doesn't return them\n+//and we put them in a cache where we can't propagate the generic types.\n+@SuppressWarnings(\"rawtypes\")\n+public final class ExtensionAdderProviders {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExtensionAdderProviders.class);\n+\n+    private static final Supplier<ConcurrentMap<String, List<ExtensionAdderProvider>>> ADDER_PROVIDERS = Suppliers\n+            .memoize(() -> groupProvidersByName(ServiceLoader.load(ExtensionAdderProvider.class)))::get;\n+\n+    private static final ConcurrentMap<Pair<String, Class>, ExtensionAdderProvider> CACHE = new ConcurrentHashMap<>();\n+\n+    //package private for tests\n+    static ConcurrentMap<String, List<ExtensionAdderProvider>> groupProvidersByName(Iterable<ExtensionAdderProvider> i) {\n+        return StreamSupport.stream(i.spliterator(), false).collect(Collectors\n+                .groupingByConcurrent(ExtensionAdderProvider::getImplementationName));\n+    }\n+\n+    private ExtensionAdderProviders() {\n+    }\n+\n+    private static <O, E extends Extension<O>, B extends ExtensionAdder<O, E>> ExtensionAdderProvider findProvider(\n+            String name, Class<B> type,\n+            ConcurrentMap<String, List<ExtensionAdderProvider>> providersMap) {\n+\n+        List<ExtensionAdderProvider> providersForName = providersMap.get(name);\n+        if (providersForName == null) {\n+            providersForName = Collections.emptyList();\n+        }\n+        List<ExtensionAdderProvider> providers = providersForName.stream()\n+                .filter(s -> type.isAssignableFrom(s.getAdderClass()))\n+                .collect(Collectors.toList());\n+\n+        if (providers.isEmpty()) {\n+            LOGGER.error(\n+                    \"ExtensionAdderProvider not found for ExtensionAdder {} for implementation {}\",\n+                    type.getSimpleName(), name);\n+            throw new PowsyblException(\"ExtensionAdderProvider not found\");\n+        }\n+\n+        if (providers.size() > 1) {\n+            LOGGER.error(\n+                    \"Multiple ExtensionAdderProviders found for ExtensionAdder {} for implementation {} : {}\",\n+                    type.getSimpleName(), name, providers);\n+            throw new PowsyblException(\n+                    \"Multiple platform configuration providers found\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc2MjA4MA=="}, "originalCommit": {"oid": "c49faed9ae314ed693031aab747f9fc0a9bf5ff0"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 57, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}