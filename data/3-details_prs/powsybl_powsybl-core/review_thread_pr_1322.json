{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMDQ2MjA3", "number": 1322, "reviewThreads": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODoyMDo0NlrOD_kiww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMjozOToyMVrOEIKFcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTg1NjAzOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensatorModel.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODoyMDo0N1rOGaToFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMDowMTowMlrOGe-q5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzNzcxOA==", "bodyText": "This function will be shared by ShuntCompensatorLinearModel and ShuntCompensatorNonLinearModel, right ? Why cannot we have simply getbPerSection(int sectionIndex) ?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r430237718", "createdAt": "2020-05-26T08:20:47Z", "author": {"login": "annetill"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensatorModel.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public interface ShuntCompensatorModel {\n+\n+    /**\n+     * Get the section susceptance in S of the section with a given section number if it exists.\n+     * Return 0 if sectionIndex is equal to 0 (disconnected state).\n+     * Throw an exception if such a section does not exist.\n+     */\n+    double getBSection(int sectionIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM1ODU2OA==", "bodyText": "Do you have any other idea ?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r431358568", "createdAt": "2020-05-27T18:33:55Z", "author": {"login": "annetill"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensatorModel.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public interface ShuntCompensatorModel {\n+\n+    /**\n+     * Get the section susceptance in S of the section with a given section number if it exists.\n+     * Return 0 if sectionIndex is equal to 0 (disconnected state).\n+     * Throw an exception if such a section does not exist.\n+     */\n+    double getBSection(int sectionIndex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzNzcxOA=="}, "originalCommit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEzNzI1Mg==", "bodyText": "Yes, I agree with your proposition. It will probably be clearer.", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r435137252", "createdAt": "2020-06-04T10:01:02Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensatorModel.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public interface ShuntCompensatorModel {\n+\n+    /**\n+     * Get the section susceptance in S of the section with a given section number if it exists.\n+     * Return 0 if sectionIndex is equal to 0 (disconnected state).\n+     * Throw an exception if such a section does not exist.\n+     */\n+    double getBSection(int sectionIndex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzNzcxOA=="}, "originalCommit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTg1ODU5OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensatorLinearModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODoyMTozMlrOGaTpvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMDowMjowOFrOGe-tTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzODE0MA==", "bodyText": "getbPerSection or getBPerSection ?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r430238140", "createdAt": "2020-05-26T08:21:32Z", "author": {"login": "annetill"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensatorLinearModel.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public interface ShuntCompensatorLinearModel extends ShuntCompensatorModel {\n+\n+    /**\n+     * Get the susceptance per section in S.\n+     */\n+    double getbPerSection();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEzNzg3MQ==", "bodyText": "For consistence, we might as well rename as getBPerSection", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r435137871", "createdAt": "2020-06-04T10:02:08Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensatorLinearModel.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public interface ShuntCompensatorLinearModel extends ShuntCompensatorModel {\n+\n+    /**\n+     * Get the susceptance per section in S.\n+     */\n+    double getbPerSection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzODE0MA=="}, "originalCommit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTg2NDA4OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensatorNonLinearModel.java", "isResolved": false, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODoyMzowN1rOGaTtNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoyODowM1rOGghOrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzOTAyOQ==", "bodyText": "Why do you need this function ?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r430239029", "createdAt": "2020-05-26T08:23:07Z", "author": {"login": "annetill"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensatorNonLinearModel.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public interface ShuntCompensatorNonLinearModel extends ShuntCompensatorModel {\n+\n+    interface Section {\n+\n+        /**\n+         * Get the susceptance in S of the section.\n+         */\n+        double getB();\n+\n+        /**\n+         * Get the conductance in S of the section.\n+         */\n+        double getG();\n+    }\n+\n+    /**\n+     * Get an optional of the section associated with a given section number if it exists.\n+     * If such a section does not exist, return an empty optional.\n+     *\n+     */\n+    Optional<Section> getSection(int sectionIndex);\n+\n+    /**\n+     * Get all the sections associated with their section number.\n+     */\n+    List<Section> getSections();\n+\n+    /**\n+     * For a given section number, add a section with a given susceptance and conductance in S to the model.\n+     * If a section already exists for this section number, respectively replace its susceptance and conductance with the given susceptance and conductance.\n+     * Throw an exception if the section index equals to 0 (corresponds to disconnected state).\n+     */\n+    ShuntCompensatorNonLinearModel addOrReplaceSection(int sectionIndex, double b, double g);\n+\n+    /**\n+     * Remove the section associated with a given section number if it exists <b>and</b> the current section count is different of the given section number.\n+     * Else, throw an exception.\n+     */\n+    ShuntCompensatorNonLinearModel removeLastSection();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEzODM3OA==", "bodyText": "Otherwise, it would be impossible to remove shunt section in non linear shunt (for development purposes for example)", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r435138378", "createdAt": "2020-06-04T10:02:56Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensatorNonLinearModel.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public interface ShuntCompensatorNonLinearModel extends ShuntCompensatorModel {\n+\n+    interface Section {\n+\n+        /**\n+         * Get the susceptance in S of the section.\n+         */\n+        double getB();\n+\n+        /**\n+         * Get the conductance in S of the section.\n+         */\n+        double getG();\n+    }\n+\n+    /**\n+     * Get an optional of the section associated with a given section number if it exists.\n+     * If such a section does not exist, return an empty optional.\n+     *\n+     */\n+    Optional<Section> getSection(int sectionIndex);\n+\n+    /**\n+     * Get all the sections associated with their section number.\n+     */\n+    List<Section> getSections();\n+\n+    /**\n+     * For a given section number, add a section with a given susceptance and conductance in S to the model.\n+     * If a section already exists for this section number, respectively replace its susceptance and conductance with the given susceptance and conductance.\n+     * Throw an exception if the section index equals to 0 (corresponds to disconnected state).\n+     */\n+    ShuntCompensatorNonLinearModel addOrReplaceSection(int sectionIndex, double b, double g);\n+\n+    /**\n+     * Remove the section associated with a given section number if it exists <b>and</b> the current section count is different of the given section number.\n+     * Else, throw an exception.\n+     */\n+    ShuntCompensatorNonLinearModel removeLastSection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzOTAyOQ=="}, "originalCommit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE3NTA0Mw==", "bodyText": "I am not sure to get what you mean :-) The function is not to remove a given section, just the last one.", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r435175043", "createdAt": "2020-06-04T11:11:45Z", "author": {"login": "annetill"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensatorNonLinearModel.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public interface ShuntCompensatorNonLinearModel extends ShuntCompensatorModel {\n+\n+    interface Section {\n+\n+        /**\n+         * Get the susceptance in S of the section.\n+         */\n+        double getB();\n+\n+        /**\n+         * Get the conductance in S of the section.\n+         */\n+        double getG();\n+    }\n+\n+    /**\n+     * Get an optional of the section associated with a given section number if it exists.\n+     * If such a section does not exist, return an empty optional.\n+     *\n+     */\n+    Optional<Section> getSection(int sectionIndex);\n+\n+    /**\n+     * Get all the sections associated with their section number.\n+     */\n+    List<Section> getSections();\n+\n+    /**\n+     * For a given section number, add a section with a given susceptance and conductance in S to the model.\n+     * If a section already exists for this section number, respectively replace its susceptance and conductance with the given susceptance and conductance.\n+     * Throw an exception if the section index equals to 0 (corresponds to disconnected state).\n+     */\n+    ShuntCompensatorNonLinearModel addOrReplaceSection(int sectionIndex, double b, double g);\n+\n+    /**\n+     * Remove the section associated with a given section number if it exists <b>and</b> the current section count is different of the given section number.\n+     * Else, throw an exception.\n+     */\n+    ShuntCompensatorNonLinearModel removeLastSection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzOTAyOQ=="}, "originalCommit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIxNjg2OA==", "bodyText": "When you have a non linear shunt, what you can want to do is:\n\nadding a new section\nreplacing the value of an existing section\nremoving an existing section\n\nHowever, when you remove an existing section, it cannot be one in the middle (you cannot have a \"hole\" in your section list), so it is necessarily the last section. It occurs to me that a method can however be added to remove the last 2, 3, etc sections of a non linear shunt and not only the last one... (for now, to do that we have to call removeLastSection 2, 3, etc times)", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r435216868", "createdAt": "2020-06-04T12:32:54Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensatorNonLinearModel.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public interface ShuntCompensatorNonLinearModel extends ShuntCompensatorModel {\n+\n+    interface Section {\n+\n+        /**\n+         * Get the susceptance in S of the section.\n+         */\n+        double getB();\n+\n+        /**\n+         * Get the conductance in S of the section.\n+         */\n+        double getG();\n+    }\n+\n+    /**\n+     * Get an optional of the section associated with a given section number if it exists.\n+     * If such a section does not exist, return an empty optional.\n+     *\n+     */\n+    Optional<Section> getSection(int sectionIndex);\n+\n+    /**\n+     * Get all the sections associated with their section number.\n+     */\n+    List<Section> getSections();\n+\n+    /**\n+     * For a given section number, add a section with a given susceptance and conductance in S to the model.\n+     * If a section already exists for this section number, respectively replace its susceptance and conductance with the given susceptance and conductance.\n+     * Throw an exception if the section index equals to 0 (corresponds to disconnected state).\n+     */\n+    ShuntCompensatorNonLinearModel addOrReplaceSection(int sectionIndex, double b, double g);\n+\n+    /**\n+     * Remove the section associated with a given section number if it exists <b>and</b> the current section count is different of the given section number.\n+     * Else, throw an exception.\n+     */\n+    ShuntCompensatorNonLinearModel removeLastSection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzOTAyOQ=="}, "originalCommit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIxNzU4Mw==", "bodyText": "Side note, it is the same for adding a new section, you cannot add a section with a index strictly superior to the last index + 1 to avoid \"holes\"", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r435217583", "createdAt": "2020-06-04T12:34:10Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensatorNonLinearModel.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public interface ShuntCompensatorNonLinearModel extends ShuntCompensatorModel {\n+\n+    interface Section {\n+\n+        /**\n+         * Get the susceptance in S of the section.\n+         */\n+        double getB();\n+\n+        /**\n+         * Get the conductance in S of the section.\n+         */\n+        double getG();\n+    }\n+\n+    /**\n+     * Get an optional of the section associated with a given section number if it exists.\n+     * If such a section does not exist, return an empty optional.\n+     *\n+     */\n+    Optional<Section> getSection(int sectionIndex);\n+\n+    /**\n+     * Get all the sections associated with their section number.\n+     */\n+    List<Section> getSections();\n+\n+    /**\n+     * For a given section number, add a section with a given susceptance and conductance in S to the model.\n+     * If a section already exists for this section number, respectively replace its susceptance and conductance with the given susceptance and conductance.\n+     * Throw an exception if the section index equals to 0 (corresponds to disconnected state).\n+     */\n+    ShuntCompensatorNonLinearModel addOrReplaceSection(int sectionIndex, double b, double g);\n+\n+    /**\n+     * Remove the section associated with a given section number if it exists <b>and</b> the current section count is different of the given section number.\n+     * Else, throw an exception.\n+     */\n+    ShuntCompensatorNonLinearModel removeLastSection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzOTAyOQ=="}, "originalCommit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0MTgzMQ==", "bodyText": "Thanks so Indeed this remove function is using by the function addOrReplace ? Why have you decided to put it in the interface and not just in the implementation?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r435341831", "createdAt": "2020-06-04T15:20:34Z", "author": {"login": "annetill"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensatorNonLinearModel.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public interface ShuntCompensatorNonLinearModel extends ShuntCompensatorModel {\n+\n+    interface Section {\n+\n+        /**\n+         * Get the susceptance in S of the section.\n+         */\n+        double getB();\n+\n+        /**\n+         * Get the conductance in S of the section.\n+         */\n+        double getG();\n+    }\n+\n+    /**\n+     * Get an optional of the section associated with a given section number if it exists.\n+     * If such a section does not exist, return an empty optional.\n+     *\n+     */\n+    Optional<Section> getSection(int sectionIndex);\n+\n+    /**\n+     * Get all the sections associated with their section number.\n+     */\n+    List<Section> getSections();\n+\n+    /**\n+     * For a given section number, add a section with a given susceptance and conductance in S to the model.\n+     * If a section already exists for this section number, respectively replace its susceptance and conductance with the given susceptance and conductance.\n+     * Throw an exception if the section index equals to 0 (corresponds to disconnected state).\n+     */\n+    ShuntCompensatorNonLinearModel addOrReplaceSection(int sectionIndex, double b, double g);\n+\n+    /**\n+     * Remove the section associated with a given section number if it exists <b>and</b> the current section count is different of the given section number.\n+     * Else, throw an exception.\n+     */\n+    ShuntCompensatorNonLinearModel removeLastSection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzOTAyOQ=="}, "originalCommit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc0NjkzNw==", "bodyText": "No it is used when we really want to remove a section! addOrReplace can not remove a section, only replacing a value or adding a section.", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r435746937", "createdAt": "2020-06-05T07:46:34Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensatorNonLinearModel.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public interface ShuntCompensatorNonLinearModel extends ShuntCompensatorModel {\n+\n+    interface Section {\n+\n+        /**\n+         * Get the susceptance in S of the section.\n+         */\n+        double getB();\n+\n+        /**\n+         * Get the conductance in S of the section.\n+         */\n+        double getG();\n+    }\n+\n+    /**\n+     * Get an optional of the section associated with a given section number if it exists.\n+     * If such a section does not exist, return an empty optional.\n+     *\n+     */\n+    Optional<Section> getSection(int sectionIndex);\n+\n+    /**\n+     * Get all the sections associated with their section number.\n+     */\n+    List<Section> getSections();\n+\n+    /**\n+     * For a given section number, add a section with a given susceptance and conductance in S to the model.\n+     * If a section already exists for this section number, respectively replace its susceptance and conductance with the given susceptance and conductance.\n+     * Throw an exception if the section index equals to 0 (corresponds to disconnected state).\n+     */\n+    ShuntCompensatorNonLinearModel addOrReplaceSection(int sectionIndex, double b, double g);\n+\n+    /**\n+     * Remove the section associated with a given section number if it exists <b>and</b> the current section count is different of the given section number.\n+     * Else, throw an exception.\n+     */\n+    ShuntCompensatorNonLinearModel removeLastSection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzOTAyOQ=="}, "originalCommit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNDA1MQ==", "bodyText": "I don't understand why is a problem to remove a section that is not the last.\nIn any case if you remove a section it doesn't make sense anymore to update back the original model so we can allow everything.", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436404051", "createdAt": "2020-06-07T21:35:22Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensatorNonLinearModel.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public interface ShuntCompensatorNonLinearModel extends ShuntCompensatorModel {\n+\n+    interface Section {\n+\n+        /**\n+         * Get the susceptance in S of the section.\n+         */\n+        double getB();\n+\n+        /**\n+         * Get the conductance in S of the section.\n+         */\n+        double getG();\n+    }\n+\n+    /**\n+     * Get an optional of the section associated with a given section number if it exists.\n+     * If such a section does not exist, return an empty optional.\n+     *\n+     */\n+    Optional<Section> getSection(int sectionIndex);\n+\n+    /**\n+     * Get all the sections associated with their section number.\n+     */\n+    List<Section> getSections();\n+\n+    /**\n+     * For a given section number, add a section with a given susceptance and conductance in S to the model.\n+     * If a section already exists for this section number, respectively replace its susceptance and conductance with the given susceptance and conductance.\n+     * Throw an exception if the section index equals to 0 (corresponds to disconnected state).\n+     */\n+    ShuntCompensatorNonLinearModel addOrReplaceSection(int sectionIndex, double b, double g);\n+\n+    /**\n+     * Remove the section associated with a given section number if it exists <b>and</b> the current section count is different of the given section number.\n+     * Else, throw an exception.\n+     */\n+    ShuntCompensatorNonLinearModel removeLastSection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzOTAyOQ=="}, "originalCommit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0OTY3Mg==", "bodyText": "Okay, just a question: when a section is removed, should all the cumulated susceptances and admittances of following sections be calculated again or does it just mean it will not be possible anymore to activate a certain section count to access a given cumulated susceptance and admittance?\nFor example, if we have:\n<shunt id=\"SHUNT\">\n  <shuntNonLinearModel>\n    <section b=\"1.0\" g=\"1.0\"/>\n    <section b=\"2.0\" g=\"2.0\"/>\n    <section b=\"4.0\" g=\"5.0\"/>\n  </shuntNonLinearModel>\n</shunt>\nIf the section section is removed, should we have:\n<shunt id=\"SHUNT\">\n  <shuntNonLinearModel>\n    <section b=\"1.0\" g=\"1.0\"/>\n    <section b=\"4.0\" g=\"5.0\"/>\n  </shuntNonLinearModel>\n</shunt>\nor:\n<shunt id=\"SHUNT\">\n  <shuntNonLinearModel>\n    <section b=\"1.0\" g=\"1.0\"/>\n    <section b=\"3.0\" g=\"4.0\"/>\n  </shuntNonLinearModel>\n</shunt>\n?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436749672", "createdAt": "2020-06-08T14:25:05Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensatorNonLinearModel.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public interface ShuntCompensatorNonLinearModel extends ShuntCompensatorModel {\n+\n+    interface Section {\n+\n+        /**\n+         * Get the susceptance in S of the section.\n+         */\n+        double getB();\n+\n+        /**\n+         * Get the conductance in S of the section.\n+         */\n+        double getG();\n+    }\n+\n+    /**\n+     * Get an optional of the section associated with a given section number if it exists.\n+     * If such a section does not exist, return an empty optional.\n+     *\n+     */\n+    Optional<Section> getSection(int sectionIndex);\n+\n+    /**\n+     * Get all the sections associated with their section number.\n+     */\n+    List<Section> getSections();\n+\n+    /**\n+     * For a given section number, add a section with a given susceptance and conductance in S to the model.\n+     * If a section already exists for this section number, respectively replace its susceptance and conductance with the given susceptance and conductance.\n+     * Throw an exception if the section index equals to 0 (corresponds to disconnected state).\n+     */\n+    ShuntCompensatorNonLinearModel addOrReplaceSection(int sectionIndex, double b, double g);\n+\n+    /**\n+     * Remove the section associated with a given section number if it exists <b>and</b> the current section count is different of the given section number.\n+     * Else, throw an exception.\n+     */\n+    ShuntCompensatorNonLinearModel removeLastSection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzOTAyOQ=="}, "originalCommit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1MjA0Nw==", "bodyText": "I guess my question should be: do you know the use case where a section is \"removed\" (for maintenance, etc) and what is the behavior of the shunt in this case?\nEdit: If there is no real use case, this method might not be useful", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436752047", "createdAt": "2020-06-08T14:28:03Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensatorNonLinearModel.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public interface ShuntCompensatorNonLinearModel extends ShuntCompensatorModel {\n+\n+    interface Section {\n+\n+        /**\n+         * Get the susceptance in S of the section.\n+         */\n+        double getB();\n+\n+        /**\n+         * Get the conductance in S of the section.\n+         */\n+        double getG();\n+    }\n+\n+    /**\n+     * Get an optional of the section associated with a given section number if it exists.\n+     * If such a section does not exist, return an empty optional.\n+     *\n+     */\n+    Optional<Section> getSection(int sectionIndex);\n+\n+    /**\n+     * Get all the sections associated with their section number.\n+     */\n+    List<Section> getSections();\n+\n+    /**\n+     * For a given section number, add a section with a given susceptance and conductance in S to the model.\n+     * If a section already exists for this section number, respectively replace its susceptance and conductance with the given susceptance and conductance.\n+     * Throw an exception if the section index equals to 0 (corresponds to disconnected state).\n+     */\n+    ShuntCompensatorNonLinearModel addOrReplaceSection(int sectionIndex, double b, double g);\n+\n+    /**\n+     * Remove the section associated with a given section number if it exists <b>and</b> the current section count is different of the given section number.\n+     * Else, throw an exception.\n+     */\n+    ShuntCompensatorNonLinearModel removeLastSection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzOTAyOQ=="}, "originalCommit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTg2NzEwOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ValidationUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODoyMzo1NlrOGaTvFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODoyMzo1NlrOGaTvFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzOTUwOQ==", "bodyText": "The name chosen is not so clear. See remark above.", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r430239509", "createdAt": "2020-05-26T08:23:56Z", "author": {"login": "annetill"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ValidationUtil.java", "diffHunk": "@@ -228,26 +228,42 @@ public static void checkForecastDistance(Validable validable, int forecastDistan\n         }\n     }\n \n-    public static void checkbPerSection(Validable validable, double bPerSection) {\n-        if (Double.isNaN(bPerSection)) {\n-            throw new ValidationException(validable, \"susceptance per section is invalid\");\n+    public static void checkSectionNumber(Validable validable, int sectionNum) {\n+        if (sectionNum < 0) {\n+            throw new ValidationException(validable,\n+                    \"this number of section (\" + sectionNum\n+                            + \") should be greater than or equal to 0\");\n         }\n+    }\n+\n+    public static void checkbPerSection(Validable validable, double bPerSection) {\n+        checkSectionB(validable, bPerSection);\n         if (bPerSection == 0) {\n             throw new ValidationException(validable, \"susceptance per section is equal to zero\");\n         }\n     }\n \n+    public static void checkSectionB(Validable validable, double sectionB) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDE2ODQ4OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ValidationUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwOTo0NToyMFrOGaWu-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMDowMzozM1rOGe-wvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI4ODYzNQ==", "bodyText": "I fall in this exception on some TSOs, included for our French network !", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r430288635", "createdAt": "2020-05-26T09:45:20Z", "author": {"login": "annetill"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ValidationUtil.java", "diffHunk": "@@ -228,26 +228,42 @@ public static void checkForecastDistance(Validable validable, int forecastDistan\n         }\n     }\n \n-    public static void checkbPerSection(Validable validable, double bPerSection) {\n-        if (Double.isNaN(bPerSection)) {\n-            throw new ValidationException(validable, \"susceptance per section is invalid\");\n+    public static void checkSectionNumber(Validable validable, int sectionNum) {\n+        if (sectionNum < 0) {\n+            throw new ValidationException(validable,\n+                    \"this number of section (\" + sectionNum\n+                            + \") should be greater than or equal to 0\");\n         }\n+    }\n+\n+    public static void checkbPerSection(Validable validable, double bPerSection) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEzODc1MQ==", "bodyText": "Corrected in CGMES conversion", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r435138751", "createdAt": "2020-06-04T10:03:33Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ValidationUtil.java", "diffHunk": "@@ -228,26 +228,42 @@ public static void checkForecastDistance(Validable validable, int forecastDistan\n         }\n     }\n \n-    public static void checkbPerSection(Validable validable, double bPerSection) {\n-        if (Double.isNaN(bPerSection)) {\n-            throw new ValidationException(validable, \"susceptance per section is invalid\");\n+    public static void checkSectionNumber(Validable validable, int sectionNum) {\n+        if (sectionNum < 0) {\n+            throw new ValidationException(validable,\n+                    \"this number of section (\" + sectionNum\n+                            + \") should be greater than or equal to 0\");\n         }\n+    }\n+\n+    public static void checkbPerSection(Validable validable, double bPerSection) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI4ODYzNQ=="}, "originalCommit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDUxMjI2OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ShuntCompensatorAdderImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMTozMjoyN1rOGaaJqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMDowNDoyNFrOGe-yjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM0NDYxNw==", "bodyText": "I fall in this exception with NGESO network.", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r430344617", "createdAt": "2020-05-26T11:32:27Z", "author": {"login": "annetill"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ShuntCompensatorAdderImpl.java", "diffHunk": "@@ -46,16 +45,120 @@ protected String getTypeDescription() {\n         return \"Shunt compensator\";\n     }\n \n+    class ShuntCompensatorLinearModelAdderImpl implements ShuntCompensatorLinearModelAdder {\n+\n+        private double bPerSection = Double.NaN;\n+\n+        private double gPerSection = Double.NaN;\n+\n+        private int maximumSectionCount = -1;\n+\n+        @Override\n+        public ShuntCompensatorLinearModelAdder setbPerSection(double bPerSection) {\n+            this.bPerSection = bPerSection;\n+            return this;\n+        }\n+\n+        @Override\n+        public ShuntCompensatorLinearModelAdder setgPerSection(double gPerSection) {\n+            this.gPerSection = gPerSection;\n+            return this;\n+        }\n+\n+        @Override\n+        public ShuntCompensatorLinearModelAdder setMaximumSectionCount(int maximumSectionCount) {\n+            this.maximumSectionCount = maximumSectionCount;\n+            return this;\n+        }\n+\n+        @Override\n+        public ShuntCompensatorAdder add() {\n+            ValidationUtil.checkbPerSection(ShuntCompensatorAdderImpl.this, bPerSection);\n+            ValidationUtil.checkMaximumSectionCount(ShuntCompensatorAdderImpl.this, maximumSectionCount);\n+            model = new ShuntCompensatorLinearModelImpl(bPerSection, gPerSection, maximumSectionCount);\n+            return ShuntCompensatorAdderImpl.this;\n+        }\n+    }\n+\n+    class ShuntCompensatorNonLinearModelAdderImpl implements ShuntCompensatorNonLinearModelAdder {\n+\n+        private final TreeMap<Integer, ShuntCompensatorNonLinearModelImpl.SectionImpl> sectionsMap = new TreeMap<>();\n+        private boolean hasDefinedG = false;\n+\n+        class SectionAdderImpl implements SectionAdder {\n+\n+            private int sectionIndex = -1;\n+\n+            private double b = Double.NaN;\n+\n+            private double g = Double.NaN;\n+\n+            @Override\n+            public SectionAdder setSectionIndex(int sectionIndex) {\n+                this.sectionIndex = sectionIndex;\n+                return this;\n+            }\n+\n+            @Override\n+            public SectionAdder setB(double b) {\n+                this.b = b;\n+                return this;\n+            }\n+\n+            @Override\n+            public SectionAdder setG(double g) {\n+                this.g = g;\n+                return this;\n+            }\n+\n+            @Override\n+            public ShuntCompensatorNonLinearModelAdder endSection() {\n+                if (sectionIndex == 0) {\n+                    throw new ValidationException(ShuntCompensatorAdderImpl.this, \"section 0 (b = 0.0, g = 0.0) should not be written, it corresponds to disconnected state\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEzOTIxNQ==", "bodyText": "I will check but I think I will add a fix on CGMES converter here.", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r435139215", "createdAt": "2020-06-04T10:04:24Z", "author": {"login": "miovd"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ShuntCompensatorAdderImpl.java", "diffHunk": "@@ -46,16 +45,120 @@ protected String getTypeDescription() {\n         return \"Shunt compensator\";\n     }\n \n+    class ShuntCompensatorLinearModelAdderImpl implements ShuntCompensatorLinearModelAdder {\n+\n+        private double bPerSection = Double.NaN;\n+\n+        private double gPerSection = Double.NaN;\n+\n+        private int maximumSectionCount = -1;\n+\n+        @Override\n+        public ShuntCompensatorLinearModelAdder setbPerSection(double bPerSection) {\n+            this.bPerSection = bPerSection;\n+            return this;\n+        }\n+\n+        @Override\n+        public ShuntCompensatorLinearModelAdder setgPerSection(double gPerSection) {\n+            this.gPerSection = gPerSection;\n+            return this;\n+        }\n+\n+        @Override\n+        public ShuntCompensatorLinearModelAdder setMaximumSectionCount(int maximumSectionCount) {\n+            this.maximumSectionCount = maximumSectionCount;\n+            return this;\n+        }\n+\n+        @Override\n+        public ShuntCompensatorAdder add() {\n+            ValidationUtil.checkbPerSection(ShuntCompensatorAdderImpl.this, bPerSection);\n+            ValidationUtil.checkMaximumSectionCount(ShuntCompensatorAdderImpl.this, maximumSectionCount);\n+            model = new ShuntCompensatorLinearModelImpl(bPerSection, gPerSection, maximumSectionCount);\n+            return ShuntCompensatorAdderImpl.this;\n+        }\n+    }\n+\n+    class ShuntCompensatorNonLinearModelAdderImpl implements ShuntCompensatorNonLinearModelAdder {\n+\n+        private final TreeMap<Integer, ShuntCompensatorNonLinearModelImpl.SectionImpl> sectionsMap = new TreeMap<>();\n+        private boolean hasDefinedG = false;\n+\n+        class SectionAdderImpl implements SectionAdder {\n+\n+            private int sectionIndex = -1;\n+\n+            private double b = Double.NaN;\n+\n+            private double g = Double.NaN;\n+\n+            @Override\n+            public SectionAdder setSectionIndex(int sectionIndex) {\n+                this.sectionIndex = sectionIndex;\n+                return this;\n+            }\n+\n+            @Override\n+            public SectionAdder setB(double b) {\n+                this.b = b;\n+                return this;\n+            }\n+\n+            @Override\n+            public SectionAdder setG(double g) {\n+                this.g = g;\n+                return this;\n+            }\n+\n+            @Override\n+            public ShuntCompensatorNonLinearModelAdder endSection() {\n+                if (sectionIndex == 0) {\n+                    throw new ValidationException(ShuntCompensatorAdderImpl.this, \"section 0 (b = 0.0, g = 0.0) should not be written, it corresponds to disconnected state\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM0NDYxNw=="}, "originalCommit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTA3MTEyOnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ShuntConversion.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjo1OTowOVrOGfEf4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOTowNTo1OFrOGgVK5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzMjczOQ==", "bodyText": "Is it in the CGMES documentation that section 0 should have a b equal to zero ?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r435232739", "createdAt": "2020-06-04T12:59:09Z", "author": {"login": "annetill"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ShuntConversion.java", "diffHunk": "@@ -43,31 +46,48 @@ public void convert() {\n         int sections = getSections(p, normalSections);\n         sections = Math.abs(sections);\n         maximumSections = Math.max(maximumSections, sections);\n-        double bPerSection = 0;\n-        if (p.containsKey(CgmesNames.B_PER_SECTION)) {\n-            bPerSection = p.asDouble(CgmesNames.B_PER_SECTION, 0.0);\n-        } else {\n+        ShuntCompensatorAdder adder = voltageLevel().newShuntCompensator().setCurrentSectionCount(sections);\n+        String shuntType = p.getId(\"type\");\n+        if (\"LinearShuntCompensator\".equals(shuntType)) {\n+            double bPerSection = p.asDouble(CgmesNames.B_PER_SECTION, Float.MIN_VALUE);\n+            if (bPerSection == 0) {\n+                double bPerSectionFixed = Double.MIN_VALUE;\n+                fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n+                bPerSection = bPerSectionFixed;\n+            }\n+            double gPerSection = p.asDouble(\"gPerSection\", Double.NaN);\n+            adder.newLinearModel()\n+                    .setBPerSection(bPerSection)\n+                    .setGPerSection(gPerSection)\n+                    .setMaximumSectionCount(maximumSections)\n+                    .add();\n+        } else if (\"NonlinearShuntCompensator\".equals(shuntType)) {\n+            ShuntCompensatorNonLinearModelAdder modelAdder = adder.newNonLinearModel();\n             PropertyBags ss = context.cgmes().nonlinearShuntCompensatorPoints(id);\n-            final int nlsections = sections;\n-            double sumSections = ss.stream()\n-                    .filter(s -> s.asInt(\"sectionNumber\") <= nlsections)\n-                    .map(s -> s.asDouble(\"b\"))\n-                    .reduce(0.0, Double::sum);\n-            // Convert to a shunt compensator with a single section\n-            maximumSections = 1;\n-            sections = 1;\n-            bPerSection = sumSections;\n-        }\n-        if (bPerSection == 0) {\n-            float bPerSectionFixed = Float.MIN_VALUE;\n-            fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n-            bPerSection = bPerSectionFixed;\n+            for (PropertyBag sp : ss) {\n+                int sectionNumber = sp.asInt(SECTION_NUMBER);\n+                double b = ss.stream().filter(s -> s.asInt(SECTION_NUMBER) <= sectionNumber).map(s -> s.asDouble(\"b\")).reduce(0.0, Double::sum);\n+                if (sectionNumber == 0) {\n+                    if (b != 0) {\n+                        fixed(\"Shunt.section0\", \"Susceptance of section 0 should always be zero (disconnected state)\", b, 0.);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dfa58bac0f8c83700cab9c188ed9141badcab7f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI1MzQ3Nw==", "bodyText": "It doesn't but I don't know if it makes sense?\nActually I think it is linked to your other remark: to be \"realistic\", it doesn't really matter if b is 0 at section 0 as long as there is a section where b is 0 (a section where the shunt can be considered as disconnected). Maybe we should go in that sense? However in CGMES datasets, even in explicit section 0, the susceptance is always 0 from what I've seen.", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r435253477", "createdAt": "2020-06-04T13:29:15Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ShuntConversion.java", "diffHunk": "@@ -43,31 +46,48 @@ public void convert() {\n         int sections = getSections(p, normalSections);\n         sections = Math.abs(sections);\n         maximumSections = Math.max(maximumSections, sections);\n-        double bPerSection = 0;\n-        if (p.containsKey(CgmesNames.B_PER_SECTION)) {\n-            bPerSection = p.asDouble(CgmesNames.B_PER_SECTION, 0.0);\n-        } else {\n+        ShuntCompensatorAdder adder = voltageLevel().newShuntCompensator().setCurrentSectionCount(sections);\n+        String shuntType = p.getId(\"type\");\n+        if (\"LinearShuntCompensator\".equals(shuntType)) {\n+            double bPerSection = p.asDouble(CgmesNames.B_PER_SECTION, Float.MIN_VALUE);\n+            if (bPerSection == 0) {\n+                double bPerSectionFixed = Double.MIN_VALUE;\n+                fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n+                bPerSection = bPerSectionFixed;\n+            }\n+            double gPerSection = p.asDouble(\"gPerSection\", Double.NaN);\n+            adder.newLinearModel()\n+                    .setBPerSection(bPerSection)\n+                    .setGPerSection(gPerSection)\n+                    .setMaximumSectionCount(maximumSections)\n+                    .add();\n+        } else if (\"NonlinearShuntCompensator\".equals(shuntType)) {\n+            ShuntCompensatorNonLinearModelAdder modelAdder = adder.newNonLinearModel();\n             PropertyBags ss = context.cgmes().nonlinearShuntCompensatorPoints(id);\n-            final int nlsections = sections;\n-            double sumSections = ss.stream()\n-                    .filter(s -> s.asInt(\"sectionNumber\") <= nlsections)\n-                    .map(s -> s.asDouble(\"b\"))\n-                    .reduce(0.0, Double::sum);\n-            // Convert to a shunt compensator with a single section\n-            maximumSections = 1;\n-            sections = 1;\n-            bPerSection = sumSections;\n-        }\n-        if (bPerSection == 0) {\n-            float bPerSectionFixed = Float.MIN_VALUE;\n-            fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n-            bPerSection = bPerSectionFixed;\n+            for (PropertyBag sp : ss) {\n+                int sectionNumber = sp.asInt(SECTION_NUMBER);\n+                double b = ss.stream().filter(s -> s.asInt(SECTION_NUMBER) <= sectionNumber).map(s -> s.asDouble(\"b\")).reduce(0.0, Double::sum);\n+                if (sectionNumber == 0) {\n+                    if (b != 0) {\n+                        fixed(\"Shunt.section0\", \"Susceptance of section 0 should always be zero (disconnected state)\", b, 0.);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzMjczOQ=="}, "originalCommit": {"oid": "8dfa58bac0f8c83700cab9c188ed9141badcab7f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMyODg5OA==", "bodyText": "From Implementation guide:\nUse the cim:ShuntCompensator.sections to control the impedance where cim:ShuntCompensator.sections=0 means zero admittance. For linear shunt this means multiplying with the per section admittance results in zero impedance. For nonlinear shunts the cim:NonlinearShuntCompensatorPoint.sectionNumber=0 shall have the corresponding admittance values equal zero.\nIt means that we should leave it to zero in IIDM...", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r435328898", "createdAt": "2020-06-04T15:02:54Z", "author": {"login": "annetill"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ShuntConversion.java", "diffHunk": "@@ -43,31 +46,48 @@ public void convert() {\n         int sections = getSections(p, normalSections);\n         sections = Math.abs(sections);\n         maximumSections = Math.max(maximumSections, sections);\n-        double bPerSection = 0;\n-        if (p.containsKey(CgmesNames.B_PER_SECTION)) {\n-            bPerSection = p.asDouble(CgmesNames.B_PER_SECTION, 0.0);\n-        } else {\n+        ShuntCompensatorAdder adder = voltageLevel().newShuntCompensator().setCurrentSectionCount(sections);\n+        String shuntType = p.getId(\"type\");\n+        if (\"LinearShuntCompensator\".equals(shuntType)) {\n+            double bPerSection = p.asDouble(CgmesNames.B_PER_SECTION, Float.MIN_VALUE);\n+            if (bPerSection == 0) {\n+                double bPerSectionFixed = Double.MIN_VALUE;\n+                fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n+                bPerSection = bPerSectionFixed;\n+            }\n+            double gPerSection = p.asDouble(\"gPerSection\", Double.NaN);\n+            adder.newLinearModel()\n+                    .setBPerSection(bPerSection)\n+                    .setGPerSection(gPerSection)\n+                    .setMaximumSectionCount(maximumSections)\n+                    .add();\n+        } else if (\"NonlinearShuntCompensator\".equals(shuntType)) {\n+            ShuntCompensatorNonLinearModelAdder modelAdder = adder.newNonLinearModel();\n             PropertyBags ss = context.cgmes().nonlinearShuntCompensatorPoints(id);\n-            final int nlsections = sections;\n-            double sumSections = ss.stream()\n-                    .filter(s -> s.asInt(\"sectionNumber\") <= nlsections)\n-                    .map(s -> s.asDouble(\"b\"))\n-                    .reduce(0.0, Double::sum);\n-            // Convert to a shunt compensator with a single section\n-            maximumSections = 1;\n-            sections = 1;\n-            bPerSection = sumSections;\n-        }\n-        if (bPerSection == 0) {\n-            float bPerSectionFixed = Float.MIN_VALUE;\n-            fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n-            bPerSection = bPerSectionFixed;\n+            for (PropertyBag sp : ss) {\n+                int sectionNumber = sp.asInt(SECTION_NUMBER);\n+                double b = ss.stream().filter(s -> s.asInt(SECTION_NUMBER) <= sectionNumber).map(s -> s.asDouble(\"b\")).reduce(0.0, Double::sum);\n+                if (sectionNumber == 0) {\n+                    if (b != 0) {\n+                        fixed(\"Shunt.section0\", \"Susceptance of section 0 should always be zero (disconnected state)\", b, 0.);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzMjczOQ=="}, "originalCommit": {"oid": "8dfa58bac0f8c83700cab9c188ed9141badcab7f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM4OTQyNA==", "bodyText": "Okay, so we keep ignoring it then?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r435389424", "createdAt": "2020-06-04T16:27:01Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ShuntConversion.java", "diffHunk": "@@ -43,31 +46,48 @@ public void convert() {\n         int sections = getSections(p, normalSections);\n         sections = Math.abs(sections);\n         maximumSections = Math.max(maximumSections, sections);\n-        double bPerSection = 0;\n-        if (p.containsKey(CgmesNames.B_PER_SECTION)) {\n-            bPerSection = p.asDouble(CgmesNames.B_PER_SECTION, 0.0);\n-        } else {\n+        ShuntCompensatorAdder adder = voltageLevel().newShuntCompensator().setCurrentSectionCount(sections);\n+        String shuntType = p.getId(\"type\");\n+        if (\"LinearShuntCompensator\".equals(shuntType)) {\n+            double bPerSection = p.asDouble(CgmesNames.B_PER_SECTION, Float.MIN_VALUE);\n+            if (bPerSection == 0) {\n+                double bPerSectionFixed = Double.MIN_VALUE;\n+                fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n+                bPerSection = bPerSectionFixed;\n+            }\n+            double gPerSection = p.asDouble(\"gPerSection\", Double.NaN);\n+            adder.newLinearModel()\n+                    .setBPerSection(bPerSection)\n+                    .setGPerSection(gPerSection)\n+                    .setMaximumSectionCount(maximumSections)\n+                    .add();\n+        } else if (\"NonlinearShuntCompensator\".equals(shuntType)) {\n+            ShuntCompensatorNonLinearModelAdder modelAdder = adder.newNonLinearModel();\n             PropertyBags ss = context.cgmes().nonlinearShuntCompensatorPoints(id);\n-            final int nlsections = sections;\n-            double sumSections = ss.stream()\n-                    .filter(s -> s.asInt(\"sectionNumber\") <= nlsections)\n-                    .map(s -> s.asDouble(\"b\"))\n-                    .reduce(0.0, Double::sum);\n-            // Convert to a shunt compensator with a single section\n-            maximumSections = 1;\n-            sections = 1;\n-            bPerSection = sumSections;\n-        }\n-        if (bPerSection == 0) {\n-            float bPerSectionFixed = Float.MIN_VALUE;\n-            fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n-            bPerSection = bPerSectionFixed;\n+            for (PropertyBag sp : ss) {\n+                int sectionNumber = sp.asInt(SECTION_NUMBER);\n+                double b = ss.stream().filter(s -> s.asInt(SECTION_NUMBER) <= sectionNumber).map(s -> s.asDouble(\"b\")).reduce(0.0, Double::sum);\n+                if (sectionNumber == 0) {\n+                    if (b != 0) {\n+                        fixed(\"Shunt.section0\", \"Susceptance of section 0 should always be zero (disconnected state)\", b, 0.);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzMjczOQ=="}, "originalCommit": {"oid": "8dfa58bac0f8c83700cab9c188ed9141badcab7f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMzI3MQ==", "bodyText": "I don't understand the meaning of a zero admittance section. For me this should not be a requirement in IIDM but we need to accept it in order to keep the same number of section between CGMES and IIDM and then be able to update back the current section in case of regulation.\nWhy having a special meaning for section 0? section 0 is just the first one and could have an admittance. Also the shunt should accept 0 sections activated.", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436403271", "createdAt": "2020-06-07T21:24:49Z", "author": {"login": "geofjamg"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ShuntConversion.java", "diffHunk": "@@ -43,31 +46,48 @@ public void convert() {\n         int sections = getSections(p, normalSections);\n         sections = Math.abs(sections);\n         maximumSections = Math.max(maximumSections, sections);\n-        double bPerSection = 0;\n-        if (p.containsKey(CgmesNames.B_PER_SECTION)) {\n-            bPerSection = p.asDouble(CgmesNames.B_PER_SECTION, 0.0);\n-        } else {\n+        ShuntCompensatorAdder adder = voltageLevel().newShuntCompensator().setCurrentSectionCount(sections);\n+        String shuntType = p.getId(\"type\");\n+        if (\"LinearShuntCompensator\".equals(shuntType)) {\n+            double bPerSection = p.asDouble(CgmesNames.B_PER_SECTION, Float.MIN_VALUE);\n+            if (bPerSection == 0) {\n+                double bPerSectionFixed = Double.MIN_VALUE;\n+                fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n+                bPerSection = bPerSectionFixed;\n+            }\n+            double gPerSection = p.asDouble(\"gPerSection\", Double.NaN);\n+            adder.newLinearModel()\n+                    .setBPerSection(bPerSection)\n+                    .setGPerSection(gPerSection)\n+                    .setMaximumSectionCount(maximumSections)\n+                    .add();\n+        } else if (\"NonlinearShuntCompensator\".equals(shuntType)) {\n+            ShuntCompensatorNonLinearModelAdder modelAdder = adder.newNonLinearModel();\n             PropertyBags ss = context.cgmes().nonlinearShuntCompensatorPoints(id);\n-            final int nlsections = sections;\n-            double sumSections = ss.stream()\n-                    .filter(s -> s.asInt(\"sectionNumber\") <= nlsections)\n-                    .map(s -> s.asDouble(\"b\"))\n-                    .reduce(0.0, Double::sum);\n-            // Convert to a shunt compensator with a single section\n-            maximumSections = 1;\n-            sections = 1;\n-            bPerSection = sumSections;\n-        }\n-        if (bPerSection == 0) {\n-            float bPerSectionFixed = Float.MIN_VALUE;\n-            fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n-            bPerSection = bPerSectionFixed;\n+            for (PropertyBag sp : ss) {\n+                int sectionNumber = sp.asInt(SECTION_NUMBER);\n+                double b = ss.stream().filter(s -> s.asInt(SECTION_NUMBER) <= sectionNumber).map(s -> s.asDouble(\"b\")).reduce(0.0, Double::sum);\n+                if (sectionNumber == 0) {\n+                    if (b != 0) {\n+                        fixed(\"Shunt.section0\", \"Susceptance of section 0 should always be zero (disconnected state)\", b, 0.);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzMjczOQ=="}, "originalCommit": {"oid": "8dfa58bac0f8c83700cab9c188ed9141badcab7f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU1NDQ2OQ==", "bodyText": "In what I implemented, section 0 is in fact the disconnected state (like linear shunts: when sectionIndex == 0 , b and g are also at 0 because they are proportional to sectionIndex ; this is also the convention adopted in CGMES). We can not do things like this but this would imply:\n\nthat a load-flow can disconnect the shunt's terminal or we create a parameter to indicate if the shunt is in disconnected state or not (and in which case, we do not consider its b and g)\nhaving different definitions of what section 0 is for linear and non linear shunts (that might be leading to different behaviors after a load-flow)", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436554469", "createdAt": "2020-06-08T09:05:58Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ShuntConversion.java", "diffHunk": "@@ -43,31 +46,48 @@ public void convert() {\n         int sections = getSections(p, normalSections);\n         sections = Math.abs(sections);\n         maximumSections = Math.max(maximumSections, sections);\n-        double bPerSection = 0;\n-        if (p.containsKey(CgmesNames.B_PER_SECTION)) {\n-            bPerSection = p.asDouble(CgmesNames.B_PER_SECTION, 0.0);\n-        } else {\n+        ShuntCompensatorAdder adder = voltageLevel().newShuntCompensator().setCurrentSectionCount(sections);\n+        String shuntType = p.getId(\"type\");\n+        if (\"LinearShuntCompensator\".equals(shuntType)) {\n+            double bPerSection = p.asDouble(CgmesNames.B_PER_SECTION, Float.MIN_VALUE);\n+            if (bPerSection == 0) {\n+                double bPerSectionFixed = Double.MIN_VALUE;\n+                fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n+                bPerSection = bPerSectionFixed;\n+            }\n+            double gPerSection = p.asDouble(\"gPerSection\", Double.NaN);\n+            adder.newLinearModel()\n+                    .setBPerSection(bPerSection)\n+                    .setGPerSection(gPerSection)\n+                    .setMaximumSectionCount(maximumSections)\n+                    .add();\n+        } else if (\"NonlinearShuntCompensator\".equals(shuntType)) {\n+            ShuntCompensatorNonLinearModelAdder modelAdder = adder.newNonLinearModel();\n             PropertyBags ss = context.cgmes().nonlinearShuntCompensatorPoints(id);\n-            final int nlsections = sections;\n-            double sumSections = ss.stream()\n-                    .filter(s -> s.asInt(\"sectionNumber\") <= nlsections)\n-                    .map(s -> s.asDouble(\"b\"))\n-                    .reduce(0.0, Double::sum);\n-            // Convert to a shunt compensator with a single section\n-            maximumSections = 1;\n-            sections = 1;\n-            bPerSection = sumSections;\n-        }\n-        if (bPerSection == 0) {\n-            float bPerSectionFixed = Float.MIN_VALUE;\n-            fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n-            bPerSection = bPerSectionFixed;\n+            for (PropertyBag sp : ss) {\n+                int sectionNumber = sp.asInt(SECTION_NUMBER);\n+                double b = ss.stream().filter(s -> s.asInt(SECTION_NUMBER) <= sectionNumber).map(s -> s.asDouble(\"b\")).reduce(0.0, Double::sum);\n+                if (sectionNumber == 0) {\n+                    if (b != 0) {\n+                        fixed(\"Shunt.section0\", \"Susceptance of section 0 should always be zero (disconnected state)\", b, 0.);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzMjczOQ=="}, "originalCommit": {"oid": "8dfa58bac0f8c83700cab9c188ed9141badcab7f"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTA4MDI5OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ShuntConversion.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzowMTowNFrOGfElfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNTowNDoyNlrOGfKcBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzNDE3Mw==", "bodyText": "It is wierd that CGMES requires a b equal to zero and that we don't allow it in IIDM. No?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r435234173", "createdAt": "2020-06-04T13:01:04Z", "author": {"login": "annetill"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ShuntConversion.java", "diffHunk": "@@ -43,31 +46,48 @@ public void convert() {\n         int sections = getSections(p, normalSections);\n         sections = Math.abs(sections);\n         maximumSections = Math.max(maximumSections, sections);\n-        double bPerSection = 0;\n-        if (p.containsKey(CgmesNames.B_PER_SECTION)) {\n-            bPerSection = p.asDouble(CgmesNames.B_PER_SECTION, 0.0);\n-        } else {\n+        ShuntCompensatorAdder adder = voltageLevel().newShuntCompensator().setCurrentSectionCount(sections);\n+        String shuntType = p.getId(\"type\");\n+        if (\"LinearShuntCompensator\".equals(shuntType)) {\n+            double bPerSection = p.asDouble(CgmesNames.B_PER_SECTION, Float.MIN_VALUE);\n+            if (bPerSection == 0) {\n+                double bPerSectionFixed = Double.MIN_VALUE;\n+                fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n+                bPerSection = bPerSectionFixed;\n+            }\n+            double gPerSection = p.asDouble(\"gPerSection\", Double.NaN);\n+            adder.newLinearModel()\n+                    .setBPerSection(bPerSection)\n+                    .setGPerSection(gPerSection)\n+                    .setMaximumSectionCount(maximumSections)\n+                    .add();\n+        } else if (\"NonlinearShuntCompensator\".equals(shuntType)) {\n+            ShuntCompensatorNonLinearModelAdder modelAdder = adder.newNonLinearModel();\n             PropertyBags ss = context.cgmes().nonlinearShuntCompensatorPoints(id);\n-            final int nlsections = sections;\n-            double sumSections = ss.stream()\n-                    .filter(s -> s.asInt(\"sectionNumber\") <= nlsections)\n-                    .map(s -> s.asDouble(\"b\"))\n-                    .reduce(0.0, Double::sum);\n-            // Convert to a shunt compensator with a single section\n-            maximumSections = 1;\n-            sections = 1;\n-            bPerSection = sumSections;\n-        }\n-        if (bPerSection == 0) {\n-            float bPerSectionFixed = Float.MIN_VALUE;\n-            fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n-            bPerSection = bPerSectionFixed;\n+            for (PropertyBag sp : ss) {\n+                int sectionNumber = sp.asInt(SECTION_NUMBER);\n+                double b = ss.stream().filter(s -> s.asInt(SECTION_NUMBER) <= sectionNumber).map(s -> s.asDouble(\"b\")).reduce(0.0, Double::sum);\n+                if (sectionNumber == 0) {\n+                    if (b != 0) {\n+                        fixed(\"Shunt.section0\", \"Susceptance of section 0 should always be zero (disconnected state)\", b, 0.);\n+                    }\n+                    continue;\n+                }\n+                if (b == 0) {\n+                    double bFixed = Double.MIN_VALUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dfa58bac0f8c83700cab9c188ed9141badcab7f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI1NDg5MA==", "bodyText": "This check might actually not be useful for non linear shunt (see above). Maybe there are shunt that can be considered as disconnected in several positions.", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r435254890", "createdAt": "2020-06-04T13:31:16Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ShuntConversion.java", "diffHunk": "@@ -43,31 +46,48 @@ public void convert() {\n         int sections = getSections(p, normalSections);\n         sections = Math.abs(sections);\n         maximumSections = Math.max(maximumSections, sections);\n-        double bPerSection = 0;\n-        if (p.containsKey(CgmesNames.B_PER_SECTION)) {\n-            bPerSection = p.asDouble(CgmesNames.B_PER_SECTION, 0.0);\n-        } else {\n+        ShuntCompensatorAdder adder = voltageLevel().newShuntCompensator().setCurrentSectionCount(sections);\n+        String shuntType = p.getId(\"type\");\n+        if (\"LinearShuntCompensator\".equals(shuntType)) {\n+            double bPerSection = p.asDouble(CgmesNames.B_PER_SECTION, Float.MIN_VALUE);\n+            if (bPerSection == 0) {\n+                double bPerSectionFixed = Double.MIN_VALUE;\n+                fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n+                bPerSection = bPerSectionFixed;\n+            }\n+            double gPerSection = p.asDouble(\"gPerSection\", Double.NaN);\n+            adder.newLinearModel()\n+                    .setBPerSection(bPerSection)\n+                    .setGPerSection(gPerSection)\n+                    .setMaximumSectionCount(maximumSections)\n+                    .add();\n+        } else if (\"NonlinearShuntCompensator\".equals(shuntType)) {\n+            ShuntCompensatorNonLinearModelAdder modelAdder = adder.newNonLinearModel();\n             PropertyBags ss = context.cgmes().nonlinearShuntCompensatorPoints(id);\n-            final int nlsections = sections;\n-            double sumSections = ss.stream()\n-                    .filter(s -> s.asInt(\"sectionNumber\") <= nlsections)\n-                    .map(s -> s.asDouble(\"b\"))\n-                    .reduce(0.0, Double::sum);\n-            // Convert to a shunt compensator with a single section\n-            maximumSections = 1;\n-            sections = 1;\n-            bPerSection = sumSections;\n-        }\n-        if (bPerSection == 0) {\n-            float bPerSectionFixed = Float.MIN_VALUE;\n-            fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n-            bPerSection = bPerSectionFixed;\n+            for (PropertyBag sp : ss) {\n+                int sectionNumber = sp.asInt(SECTION_NUMBER);\n+                double b = ss.stream().filter(s -> s.asInt(SECTION_NUMBER) <= sectionNumber).map(s -> s.asDouble(\"b\")).reduce(0.0, Double::sum);\n+                if (sectionNumber == 0) {\n+                    if (b != 0) {\n+                        fixed(\"Shunt.section0\", \"Susceptance of section 0 should always be zero (disconnected state)\", b, 0.);\n+                    }\n+                    continue;\n+                }\n+                if (b == 0) {\n+                    double bFixed = Double.MIN_VALUE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzNDE3Mw=="}, "originalCommit": {"oid": "8dfa58bac0f8c83700cab9c188ed9141badcab7f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMzMDA1Mg==", "bodyText": "The check has to be removed (see above).", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r435330052", "createdAt": "2020-06-04T15:04:26Z", "author": {"login": "annetill"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ShuntConversion.java", "diffHunk": "@@ -43,31 +46,48 @@ public void convert() {\n         int sections = getSections(p, normalSections);\n         sections = Math.abs(sections);\n         maximumSections = Math.max(maximumSections, sections);\n-        double bPerSection = 0;\n-        if (p.containsKey(CgmesNames.B_PER_SECTION)) {\n-            bPerSection = p.asDouble(CgmesNames.B_PER_SECTION, 0.0);\n-        } else {\n+        ShuntCompensatorAdder adder = voltageLevel().newShuntCompensator().setCurrentSectionCount(sections);\n+        String shuntType = p.getId(\"type\");\n+        if (\"LinearShuntCompensator\".equals(shuntType)) {\n+            double bPerSection = p.asDouble(CgmesNames.B_PER_SECTION, Float.MIN_VALUE);\n+            if (bPerSection == 0) {\n+                double bPerSectionFixed = Double.MIN_VALUE;\n+                fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n+                bPerSection = bPerSectionFixed;\n+            }\n+            double gPerSection = p.asDouble(\"gPerSection\", Double.NaN);\n+            adder.newLinearModel()\n+                    .setBPerSection(bPerSection)\n+                    .setGPerSection(gPerSection)\n+                    .setMaximumSectionCount(maximumSections)\n+                    .add();\n+        } else if (\"NonlinearShuntCompensator\".equals(shuntType)) {\n+            ShuntCompensatorNonLinearModelAdder modelAdder = adder.newNonLinearModel();\n             PropertyBags ss = context.cgmes().nonlinearShuntCompensatorPoints(id);\n-            final int nlsections = sections;\n-            double sumSections = ss.stream()\n-                    .filter(s -> s.asInt(\"sectionNumber\") <= nlsections)\n-                    .map(s -> s.asDouble(\"b\"))\n-                    .reduce(0.0, Double::sum);\n-            // Convert to a shunt compensator with a single section\n-            maximumSections = 1;\n-            sections = 1;\n-            bPerSection = sumSections;\n-        }\n-        if (bPerSection == 0) {\n-            float bPerSectionFixed = Float.MIN_VALUE;\n-            fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n-            bPerSection = bPerSectionFixed;\n+            for (PropertyBag sp : ss) {\n+                int sectionNumber = sp.asInt(SECTION_NUMBER);\n+                double b = ss.stream().filter(s -> s.asInt(SECTION_NUMBER) <= sectionNumber).map(s -> s.asDouble(\"b\")).reduce(0.0, Double::sum);\n+                if (sectionNumber == 0) {\n+                    if (b != 0) {\n+                        fixed(\"Shunt.section0\", \"Susceptance of section 0 should always be zero (disconnected state)\", b, 0.);\n+                    }\n+                    continue;\n+                }\n+                if (b == 0) {\n+                    double bFixed = Double.MIN_VALUE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzNDE3Mw=="}, "originalCommit": {"oid": "8dfa58bac0f8c83700cab9c188ed9141badcab7f"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTc1MjU0OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ValidationUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyMzo0MFrOGfLS8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyMzo0MFrOGfLS8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0NDExNA==", "bodyText": "Yes great, so we can leave the check!", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r435344114", "createdAt": "2020-06-04T15:23:40Z", "author": {"login": "annetill"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ValidationUtil.java", "diffHunk": "@@ -228,26 +228,42 @@ public static void checkForecastDistance(Validable validable, int forecastDistan\n         }\n     }\n \n-    public static void checkbPerSection(Validable validable, double bPerSection) {\n-        if (Double.isNaN(bPerSection)) {\n-            throw new ValidationException(validable, \"susceptance per section is invalid\");\n+    public static void checkSectionNumber(Validable validable, int sectionNum) {\n+        if (sectionNum < 0) {\n+            throw new ValidationException(validable,\n+                    \"this number of section (\" + sectionNum\n+                            + \") should be greater than or equal to 0\");\n         }\n+    }\n+\n+    public static void checkLinearBPerSection(Validable validable, double bPerSection) {\n+        checkBPerSection(validable, bPerSection);\n         if (bPerSection == 0) {\n             throw new ValidationException(validable, \"susceptance per section is equal to zero\");\n         }\n     }\n \n+    public static void checkBPerSection(Validable validable, double sectionB) {\n+        if (Double.isNaN(sectionB)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dfa58bac0f8c83700cab9c188ed9141badcab7f"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTc2NzE3OnYy", "diffSide": "RIGHT", "path": "loadflow/loadflow-api/src/main/java/com/powsybl/loadflow/LoadFlowParameters.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyNjo0NlrOGfLcOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyNjo0NlrOGfLcOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0NjQ5MA==", "bodyText": "Great!", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r435346490", "createdAt": "2020-06-04T15:26:46Z", "author": {"login": "annetill"}, "path": "loadflow/loadflow-api/src/main/java/com/powsybl/loadflow/LoadFlowParameters.java", "diffHunk": "@@ -52,6 +52,7 @@\n     public static final boolean DEFAULT_NO_GENERATOR_REACTIVE_LIMITS = false;\n     public static final boolean DEFAULT_PHASE_SHIFTER_REGULATION_ON = false;\n     public static final boolean DEFAULT_T2WT_SPLIT_SHUNT_ADMITTANCE = false;\n+    public static final boolean DEFAULT_SIMUL_SHUNT = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dfa58bac0f8c83700cab9c188ed9141badcab7f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODU3ODcyOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMTowNTo1MlrOGgL2xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOToyNzo0MlrOGnhCIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMTg2Mg==", "bodyText": "Why? It should be possible to have 0 section activated?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436401862", "createdAt": "2020-06-07T21:05:52Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensator.java", "diffHunk": "@@ -17,71 +17,79 @@\n public interface ShuntCompensator extends Injection<ShuntCompensator> {\n \n     /**\n-     * Get the maximum section count.\n+     * Get the current count of sections in service.\n+     * Please note sections can only be sequentially in service i.e. all sections from section 1 to section currentSectionCount are in service.\n+     * <p>\n+     * It is expected to be greater than one and lesser than or equal to the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU1OTgzOA==", "bodyText": "By default for me when 0 section is activated, it means that there is zero susceptance and admittance (cf. answer above)", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436559838", "createdAt": "2020-06-08T09:15:03Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensator.java", "diffHunk": "@@ -17,71 +17,79 @@\n public interface ShuntCompensator extends Injection<ShuntCompensator> {\n \n     /**\n-     * Get the maximum section count.\n+     * Get the current count of sections in service.\n+     * Please note sections can only be sequentially in service i.e. all sections from section 1 to section currentSectionCount are in service.\n+     * <p>\n+     * It is expected to be greater than one and lesser than or equal to the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMTg2Mg=="}, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA4ODg2Nw==", "bodyText": "doc should be updated?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r444088867", "createdAt": "2020-06-23T09:27:42Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensator.java", "diffHunk": "@@ -17,71 +17,79 @@\n public interface ShuntCompensator extends Injection<ShuntCompensator> {\n \n     /**\n-     * Get the maximum section count.\n+     * Get the current count of sections in service.\n+     * Please note sections can only be sequentially in service i.e. all sections from section 1 to section currentSectionCount are in service.\n+     * <p>\n+     * It is expected to be greater than one and lesser than or equal to the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMTg2Mg=="}, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODU3OTY5OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMTowNzo0NFrOGgL3SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDo0Nzo1OFrOGgiF3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMTk5Mw==", "bodyText": "Maybe we could try to find a better naming than current. What I don't like with current is that in power system it is also a unit.", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436401993", "createdAt": "2020-06-07T21:07:44Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensator.java", "diffHunk": "@@ -17,71 +17,79 @@\n public interface ShuntCompensator extends Injection<ShuntCompensator> {\n \n     /**\n-     * Get the maximum section count.\n+     * Get the current count of sections in service.\n+     * Please note sections can only be sequentially in service i.e. all sections from section 1 to section currentSectionCount are in service.\n+     * <p>\n+     * It is expected to be greater than one and lesser than or equal to the\n+     * maximum section count.\n+     * <p>\n+     * Depends on the working variant.\n+     * @see VariantManager\n+     */\n+    int getCurrentSectionCount();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU2MDgzOA==", "bodyText": "Maybe getActivatedSectionCount()?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436560838", "createdAt": "2020-06-08T09:16:53Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensator.java", "diffHunk": "@@ -17,71 +17,79 @@\n public interface ShuntCompensator extends Injection<ShuntCompensator> {\n \n     /**\n-     * Get the maximum section count.\n+     * Get the current count of sections in service.\n+     * Please note sections can only be sequentially in service i.e. all sections from section 1 to section currentSectionCount are in service.\n+     * <p>\n+     * It is expected to be greater than one and lesser than or equal to the\n+     * maximum section count.\n+     * <p>\n+     * Depends on the working variant.\n+     * @see VariantManager\n+     */\n+    int getCurrentSectionCount();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMTk5Mw=="}, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc2NjE3NQ==", "bodyText": "Should we also rename getCurrentB() and getCurrentG()? What do you propose for those?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436766175", "createdAt": "2020-06-08T14:47:58Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensator.java", "diffHunk": "@@ -17,71 +17,79 @@\n public interface ShuntCompensator extends Injection<ShuntCompensator> {\n \n     /**\n-     * Get the maximum section count.\n+     * Get the current count of sections in service.\n+     * Please note sections can only be sequentially in service i.e. all sections from section 1 to section currentSectionCount are in service.\n+     * <p>\n+     * It is expected to be greater than one and lesser than or equal to the\n+     * maximum section count.\n+     * <p>\n+     * Depends on the working variant.\n+     * @see VariantManager\n+     */\n+    int getCurrentSectionCount();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMTk5Mw=="}, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODU4MjUyOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensatorModel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMToxMjozOVrOGgL41w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOToxNzozNlrOGgVlkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMjM5MQ==", "bodyText": "If first section is section 0, we must have a non zero value as all section should have a b or g?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436402391", "createdAt": "2020-06-07T21:12:39Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensatorModel.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public interface ShuntCompensatorModel {\n+\n+    /**\n+     * Get the section susceptance in S of the section with a given section number if it exists.\n+     * Return 0 if sectionIndex is equal to 0 (disconnected state).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU2MTI5OQ==", "bodyText": "cf answer above", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436561299", "createdAt": "2020-06-08T09:17:36Z", "author": {"login": "miovd"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensatorModel.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public interface ShuntCompensatorModel {\n+\n+    /**\n+     * Get the section susceptance in S of the section with a given section number if it exists.\n+     * Return 0 if sectionIndex is equal to 0 (disconnected state).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMjM5MQ=="}, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODU4MjkyOnYy", "diffSide": "RIGHT", "path": "ampl-converter/src/main/java/com/powsybl/ampl/converter/AmplNetworkReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMToxMzoyOVrOGgL5DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMToxMzoyOVrOGgL5DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMjQ0NA==", "bodyText": "You should use == for an enum", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436402444", "createdAt": "2020-06-07T21:13:29Z", "author": {"login": "geofjamg"}, "path": "ampl-converter/src/main/java/com/powsybl/ampl/converter/AmplNetworkReader.java", "diffHunk": "@@ -277,6 +278,9 @@ private Void readShunt(String[] tokens) {\n             throw new AmplException(\"Invalid shunt compensator id '\" + id + \"'\");\n         }\n \n+        if (ShuntCompensatorModelType.NON_LINEAR.equals(sc.getModelType())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODU4MzA0OnYy", "diffSide": "RIGHT", "path": "ampl-converter/src/main/java/com/powsybl/ampl/converter/AmplNetworkWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMToxMzo0M1rOGgL5Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMToxMzo0M1rOGgL5Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMjQ2Mw==", "bodyText": "Same", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436402463", "createdAt": "2020-06-07T21:13:43Z", "author": {"login": "geofjamg"}, "path": "ampl-converter/src/main/java/com/powsybl/ampl/converter/AmplNetworkWriter.java", "diffHunk": "@@ -1310,6 +1311,9 @@ private void writeShunts(AmplExportContext context) throws IOException {\n                      new Column(\"sections count\"))) {\n             List<String> skipped = new ArrayList<>();\n             for (ShuntCompensator sc : network.getShuntCompensators()) {\n+                if (ShuntCompensatorModelType.NON_LINEAR.equals(sc.getModelType())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODU4NDE2OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conformity/src/test/java/com/powsybl/cgmes/conformity/test/CgmesConformity1NetworkCatalog.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMToxNTo1M1rOGgL5vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDo0MToyNVrOGghzRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMjYyMg==", "bodyText": "Is it really need to specify an index? It could be implicit (builder order)", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436402622", "createdAt": "2020-06-07T21:15:53Z", "author": {"login": "geofjamg"}, "path": "cgmes/cgmes-conformity/src/test/java/com/powsybl/cgmes/conformity/test/CgmesConformity1NetworkCatalog.java", "diffHunk": "@@ -1028,6 +1034,42 @@ public static Network microType4BE() {\n                 .setP0(-11.518776)\n                 .setQ0(67.377544);\n \n+        network.getShuntCompensator(\"_002b0a40-3957-46db-b84a-30420083558f\").remove();\n+        network.getVoltageLevel(\"_469df5f7-058f-4451-a998-57a48e8a56fe\")\n+                .newShuntCompensator()\n+                    .setId(\"_002b0a40-3957-46db-b84a-30420083558f\")\n+                    .setName(\"BE_S2\")\n+                    .setConnectableBus(busBrussels380.getId())\n+                    .setBus(busBrussels380.getId())\n+                    .setCurrentSectionCount(1)\n+                    .newNonLinearModel()\n+                        .beginSection()\n+                            .setSectionIndex(1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc2MTQxMw==", "bodyText": "cf answer below", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436761413", "createdAt": "2020-06-08T14:41:25Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conformity/src/test/java/com/powsybl/cgmes/conformity/test/CgmesConformity1NetworkCatalog.java", "diffHunk": "@@ -1028,6 +1034,42 @@ public static Network microType4BE() {\n                 .setP0(-11.518776)\n                 .setQ0(67.377544);\n \n+        network.getShuntCompensator(\"_002b0a40-3957-46db-b84a-30420083558f\").remove();\n+        network.getVoltageLevel(\"_469df5f7-058f-4451-a998-57a48e8a56fe\")\n+                .newShuntCompensator()\n+                    .setId(\"_002b0a40-3957-46db-b84a-30420083558f\")\n+                    .setName(\"BE_S2\")\n+                    .setConnectableBus(busBrussels380.getId())\n+                    .setBus(busBrussels380.getId())\n+                    .setCurrentSectionCount(1)\n+                    .newNonLinearModel()\n+                        .beginSection()\n+                            .setSectionIndex(1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMjYyMg=="}, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODU4OTczOnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ShuntConversion.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMToyNTo0OVrOGgL8qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOToyMDozNVrOGgVsJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMzM3MQ==", "bodyText": "Is it really necessary to keep the number, if we keep all of them in the right order?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436403371", "createdAt": "2020-06-07T21:25:49Z", "author": {"login": "geofjamg"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ShuntConversion.java", "diffHunk": "@@ -43,31 +46,43 @@ public void convert() {\n         int sections = getSections(p, normalSections);\n         sections = Math.abs(sections);\n         maximumSections = Math.max(maximumSections, sections);\n-        double bPerSection = 0;\n-        if (p.containsKey(CgmesNames.B_PER_SECTION)) {\n-            bPerSection = p.asDouble(CgmesNames.B_PER_SECTION, 0.0);\n-        } else {\n+        ShuntCompensatorAdder adder = voltageLevel().newShuntCompensator().setCurrentSectionCount(sections);\n+        String shuntType = p.getId(\"type\");\n+        if (\"LinearShuntCompensator\".equals(shuntType)) {\n+            double bPerSection = p.asDouble(CgmesNames.B_PER_SECTION, Float.MIN_VALUE);\n+            if (bPerSection == 0) {\n+                double bPerSectionFixed = Double.MIN_VALUE;\n+                fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n+                bPerSection = bPerSectionFixed;\n+            }\n+            double gPerSection = p.asDouble(\"gPerSection\", Double.NaN);\n+            adder.newLinearModel()\n+                    .setBPerSection(bPerSection)\n+                    .setGPerSection(gPerSection)\n+                    .setMaximumSectionCount(maximumSections)\n+                    .add();\n+        } else if (\"NonlinearShuntCompensator\".equals(shuntType)) {\n+            ShuntCompensatorNonLinearModelAdder modelAdder = adder.newNonLinearModel();\n             PropertyBags ss = context.cgmes().nonlinearShuntCompensatorPoints(id);\n-            final int nlsections = sections;\n-            double sumSections = ss.stream()\n-                    .filter(s -> s.asInt(\"sectionNumber\") <= nlsections)\n-                    .map(s -> s.asDouble(\"b\"))\n-                    .reduce(0.0, Double::sum);\n-            // Convert to a shunt compensator with a single section\n-            maximumSections = 1;\n-            sections = 1;\n-            bPerSection = sumSections;\n-        }\n-        if (bPerSection == 0) {\n-            float bPerSectionFixed = Float.MIN_VALUE;\n-            fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n-            bPerSection = bPerSectionFixed;\n+            for (PropertyBag sp : ss) {\n+                int sectionNumber = sp.asInt(SECTION_NUMBER);\n+                double b = ss.stream().filter(s -> s.asInt(SECTION_NUMBER) <= sectionNumber).map(s -> s.asDouble(\"b\")).reduce(0.0, Double::sum);\n+                if (sectionNumber == 0) {\n+                    if (b != 0) {\n+                        fixed(\"Shunt.section0\", \"Susceptance of section 0 should always be zero (disconnected state)\", b, 0.);\n+                    }\n+                    continue;\n+                }\n+                modelAdder.beginSection()\n+                        .setB(b)\n+                        .setG(ss.stream().filter(s -> s.asInt(SECTION_NUMBER) <= sectionNumber).map(s -> s.asDouble(\"g\")).reduce(0.0, Double::sum))\n+                        .setSectionIndex(sp.asInt(SECTION_NUMBER))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU2Mjk4Mg==", "bodyText": "In my opinion, it makes it less efficient in cases when we are not sure in which order we receive the sections during the building (typically the case in CGMES). However, it makes the implementation less heavy (no need to use a map), what do you think?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436562982", "createdAt": "2020-06-08T09:20:35Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ShuntConversion.java", "diffHunk": "@@ -43,31 +46,43 @@ public void convert() {\n         int sections = getSections(p, normalSections);\n         sections = Math.abs(sections);\n         maximumSections = Math.max(maximumSections, sections);\n-        double bPerSection = 0;\n-        if (p.containsKey(CgmesNames.B_PER_SECTION)) {\n-            bPerSection = p.asDouble(CgmesNames.B_PER_SECTION, 0.0);\n-        } else {\n+        ShuntCompensatorAdder adder = voltageLevel().newShuntCompensator().setCurrentSectionCount(sections);\n+        String shuntType = p.getId(\"type\");\n+        if (\"LinearShuntCompensator\".equals(shuntType)) {\n+            double bPerSection = p.asDouble(CgmesNames.B_PER_SECTION, Float.MIN_VALUE);\n+            if (bPerSection == 0) {\n+                double bPerSectionFixed = Double.MIN_VALUE;\n+                fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n+                bPerSection = bPerSectionFixed;\n+            }\n+            double gPerSection = p.asDouble(\"gPerSection\", Double.NaN);\n+            adder.newLinearModel()\n+                    .setBPerSection(bPerSection)\n+                    .setGPerSection(gPerSection)\n+                    .setMaximumSectionCount(maximumSections)\n+                    .add();\n+        } else if (\"NonlinearShuntCompensator\".equals(shuntType)) {\n+            ShuntCompensatorNonLinearModelAdder modelAdder = adder.newNonLinearModel();\n             PropertyBags ss = context.cgmes().nonlinearShuntCompensatorPoints(id);\n-            final int nlsections = sections;\n-            double sumSections = ss.stream()\n-                    .filter(s -> s.asInt(\"sectionNumber\") <= nlsections)\n-                    .map(s -> s.asDouble(\"b\"))\n-                    .reduce(0.0, Double::sum);\n-            // Convert to a shunt compensator with a single section\n-            maximumSections = 1;\n-            sections = 1;\n-            bPerSection = sumSections;\n-        }\n-        if (bPerSection == 0) {\n-            float bPerSectionFixed = Float.MIN_VALUE;\n-            fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n-            bPerSection = bPerSectionFixed;\n+            for (PropertyBag sp : ss) {\n+                int sectionNumber = sp.asInt(SECTION_NUMBER);\n+                double b = ss.stream().filter(s -> s.asInt(SECTION_NUMBER) <= sectionNumber).map(s -> s.asDouble(\"b\")).reduce(0.0, Double::sum);\n+                if (sectionNumber == 0) {\n+                    if (b != 0) {\n+                        fixed(\"Shunt.section0\", \"Susceptance of section 0 should always be zero (disconnected state)\", b, 0.);\n+                    }\n+                    continue;\n+                }\n+                modelAdder.beginSection()\n+                        .setB(b)\n+                        .setG(ss.stream().filter(s -> s.asInt(SECTION_NUMBER) <= sectionNumber).map(s -> s.asDouble(\"g\")).reduce(0.0, Double::sum))\n+                        .setSectionIndex(sp.asInt(SECTION_NUMBER))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMzM3MQ=="}, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODU5MTQxOnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/test/resources/cim14/nordic32.xiidm", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMToyODo0N1rOGgL9hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOToyMzowM1rOGgVxyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMzU5MA==", "bodyText": "I would not change the top level equipment name. This is really confusing.\nWhy not:\n<iidm:shunt ...>\n    <iidm:shuntLinearModel ... />", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436403590", "createdAt": "2020-06-07T21:28:47Z", "author": {"login": "geofjamg"}, "path": "cgmes/cgmes-conversion/src/test/resources/cim14/nordic32.xiidm", "diffHunk": "@@ -90,7 +90,7 @@\n                 <iidm:bus id=\"_N1022____TN\" v=\"110.60600280761719\" angle=\"-17.621028900146484\"/>\n             </iidm:busBreakerTopology>\n             <iidm:load id=\"_N1022____EC\" name=\"N1022   \" loadType=\"UNDEFINED\" p0=\"280.0\" q0=\"95.0\" bus=\"_N1022____TN\" connectableBus=\"_N1022____TN\" p=\"280.0\" q=\"95.0\"/>\n-            <iidm:shunt id=\"_N1022____SC\" name=\"N1022   \" bPerSection=\"0.002958579920232296\" maximumSectionCount=\"1\" currentSectionCount=\"1\" voltageRegulatorOn=\"false\" bus=\"_N1022____TN\" connectableBus=\"_N1022____TN\"/>\n+            <iidm:linearShunt id=\"_N1022____SC\" name=\"N1022   \" bPerSection=\"0.002958579920232296\" gPerSection=\"0.0\" maximumSectionCount=\"1\" currentSectionCount=\"1\" voltageRegulatorOn=\"false\" bus=\"_N1022____TN\" connectableBus=\"_N1022____TN\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU2NDQyNQ==", "bodyText": "I started like this but it made the file bigger and less understandable? (particularly for linear shunts, it really make the XML object bigger and I didn't really think it was justified)", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436564425", "createdAt": "2020-06-08T09:23:03Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/test/resources/cim14/nordic32.xiidm", "diffHunk": "@@ -90,7 +90,7 @@\n                 <iidm:bus id=\"_N1022____TN\" v=\"110.60600280761719\" angle=\"-17.621028900146484\"/>\n             </iidm:busBreakerTopology>\n             <iidm:load id=\"_N1022____EC\" name=\"N1022   \" loadType=\"UNDEFINED\" p0=\"280.0\" q0=\"95.0\" bus=\"_N1022____TN\" connectableBus=\"_N1022____TN\" p=\"280.0\" q=\"95.0\"/>\n-            <iidm:shunt id=\"_N1022____SC\" name=\"N1022   \" bPerSection=\"0.002958579920232296\" maximumSectionCount=\"1\" currentSectionCount=\"1\" voltageRegulatorOn=\"false\" bus=\"_N1022____TN\" connectableBus=\"_N1022____TN\"/>\n+            <iidm:linearShunt id=\"_N1022____SC\" name=\"N1022   \" bPerSection=\"0.002958579920232296\" gPerSection=\"0.0\" maximumSectionCount=\"1\" currentSectionCount=\"1\" voltageRegulatorOn=\"false\" bus=\"_N1022____TN\" connectableBus=\"_N1022____TN\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMzU5MA=="}, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODU5Mjg0OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensatorNonLinearModel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMTozMTozN1rOGgL-SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMTozMTozN1rOGgL-SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMzc4NQ==", "bodyText": "I would model section in IIDM as a [0, maxSectionCount[ array and here avoid the optional.", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436403785", "createdAt": "2020-06-07T21:31:37Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensatorNonLinearModel.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public interface ShuntCompensatorNonLinearModel extends ShuntCompensatorModel {\n+\n+    interface Section {\n+\n+        /**\n+         * Get the susceptance in S of the section.\n+         */\n+        double getB();\n+\n+        /**\n+         * Get the conductance in S of the section.\n+         */\n+        double getG();\n+    }\n+\n+    /**\n+     * Get an optional of the section associated with a given section number if it exists.\n+     * If such a section does not exist, return an empty optional.\n+     *\n+     */\n+    Optional<Section> getSection(int sectionIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODU5NjI2OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ShuntCompensatorModelWrapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMTozNzo0OVrOGgMABw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwOTo0MToxN1rOGgWYkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNDIzMQ==", "bodyText": "It is not really a wrapper?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436404231", "createdAt": "2020-06-07T21:37:49Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ShuntCompensatorModelWrapper.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.impl;\n+\n+import com.powsybl.iidm.network.ShuntCompensatorModel;\n+import com.powsybl.iidm.network.ShuntCompensatorModelType;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+interface ShuntCompensatorModelWrapper extends ShuntCompensatorModel {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU3NDM1Mg==", "bodyText": "Yes, I'm not really sure how to name this interface...", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436574352", "createdAt": "2020-06-08T09:41:17Z", "author": {"login": "miovd"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ShuntCompensatorModelWrapper.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.impl;\n+\n+import com.powsybl.iidm.network.ShuntCompensatorModel;\n+import com.powsybl.iidm.network.ShuntCompensatorModelType;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+interface ShuntCompensatorModelWrapper extends ShuntCompensatorModel {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNDIzMQ=="}, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODU5Nzk1OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/LinearShuntXml.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMTo0MTozNFrOGgMBAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMTo0MTozNFrOGgMBAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNDQ4MA==", "bodyText": "As I said before, it seems to me very confusing to have a different root name when just changing the model. It is still a shunt compensator.", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436404480", "createdAt": "2020-06-07T21:41:34Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/LinearShuntXml.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.xml;\n+\n+import com.powsybl.commons.xml.XmlUtil;\n+import com.powsybl.iidm.network.ShuntCompensator;\n+import com.powsybl.iidm.network.ShuntCompensatorAdder;\n+import com.powsybl.iidm.network.ShuntCompensatorLinearModel;\n+import com.powsybl.iidm.network.VoltageLevel;\n+import com.powsybl.iidm.xml.util.IidmXmlUtil;\n+\n+import javax.xml.stream.XMLStreamException;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public class LinearShuntXml extends AbstractConnectableXml<ShuntCompensator, ShuntCompensatorAdder, VoltageLevel> {\n+\n+    static final LinearShuntXml INSTANCE = new LinearShuntXml();\n+\n+    static final String ROOT_ELEMENT_NAME = \"linearShunt\";\n+\n+    @Override\n+    protected String getRootElementName() {\n+        return ROOT_ELEMENT_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODU5ODk3OnYy", "diffSide": "RIGHT", "path": "loadflow/loadflow-api/src/main/java/com/powsybl/loadflow/LoadFlowParameters.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMTo0MzoyMFrOGgMBhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMTo0MzoyMFrOGgMBhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNDYxNQ==", "bodyText": "Be careful, you forgot to take into account this new attribute in many places in this class.", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436404615", "createdAt": "2020-06-07T21:43:20Z", "author": {"login": "geofjamg"}, "path": "loadflow/loadflow-api/src/main/java/com/powsybl/loadflow/LoadFlowParameters.java", "diffHunk": "@@ -104,13 +105,20 @@ protected static void load(LoadFlowParameters parameters, PlatformConfig platfor\n \n     private boolean t2wtSplitShuntAdmittance;\n \n-    public LoadFlowParameters(VoltageInitMode voltageInitMode, boolean transformerVoltageControlOn,\n-                              boolean noGeneratorReactiveLimits, boolean phaseShifterRegulationOn, boolean t2wtSplitShuntAdmittance) {\n+    private boolean simulShunt;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODU5OTE2OnYy", "diffSide": "RIGHT", "path": "loadflow/loadflow-validation/src/main/java/com/powsybl/loadflow/validation/ShuntCompensatorsValidation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMTo0Mzo0OVrOGgMBnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMTo0Mzo0OVrOGgMBnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNDYzOQ==", "bodyText": "== is more common for enum", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436404639", "createdAt": "2020-06-07T21:43:49Z", "author": {"login": "geofjamg"}, "path": "loadflow/loadflow-validation/src/main/java/com/powsybl/loadflow/validation/ShuntCompensatorsValidation.java", "diffHunk": "@@ -85,11 +84,15 @@ public boolean checkShunts(ShuntCompensator shunt, ValidationConfig config, Vali\n         Objects.requireNonNull(config);\n         Objects.requireNonNull(shuntsWriter);\n \n+        if (ShuntCompensatorModelType.NON_LINEAR.equals(shunt.getModelType())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzA3NzU0OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOToyODoxM1rOGnhDVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOToyODoxM1rOGnhDVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA4OTE3NA==", "bodyText": "Same?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r444089174", "createdAt": "2020-06-23T09:28:13Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensator.java", "diffHunk": "@@ -17,71 +17,83 @@\n public interface ShuntCompensator extends Injection<ShuntCompensator> {\n \n     /**\n-     * Get the maximum section count.\n+     * Get the count of sections in service.\n+     * Please note sections can only be sequentially in service i.e. all sections from section 1 to section currentSectionCount are in service.\n+     * <p>\n+     * It is expected to be greater than one and lesser than or equal to the\n+     * maximum section count.\n+     * <p>\n+     * Depends on the working variant.\n+     * @see VariantManager\n+     */\n+    int getSectionCount();\n+\n+    /**\n+     * Get the maximum number of sections that can be in service\n      */\n     int getMaximumSectionCount();\n \n     /**\n-     * Set the maximum number of section.\n+     * Change the count of sections in service.\n+     * Please note sections can only be sequentially in service i.e. all section from section 1 to section currentSectionCount are in service.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "206b208ef8515dd455b5b0041473dde3f086e981"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzA5NDc5OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensatorNonLinearModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTozMjo0NlrOGnhNxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTozMjo0NlrOGnhNxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5MTg0Nw==", "bodyText": "sectionCount?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r444091847", "createdAt": "2020-06-23T09:32:46Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensatorNonLinearModel.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network;\n+\n+import java.util.List;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public interface ShuntCompensatorNonLinearModel extends ShuntCompensatorModel {\n+\n+    interface Section {\n+\n+        /**\n+         * Get the accumulated susceptance in S if this section and all the previous ones are activated.\n+         */\n+        double getB();\n+\n+        /**\n+         * Set the accumulated susceptance in S if this section and all the previous ones are activated.\n+         */\n+        Section setB(double b);\n+\n+        /**\n+         * Get the accumulated conductance in S if this section and all the previous ones are activated.\n+         */\n+        double getG();\n+\n+        /**\n+         * Set the accumulated conductance in S if this section and all the previous ones are activated.\n+         */\n+        Section setG(double g);\n+    }\n+\n+    /**\n+     * Get an optional of the section associated with a given section index if it exists.\n+     *\n+     * @param sectionIndex the index of the wanted section. Must be in [1;maximumSectionCount]. Else, throws a {@link ValidationException}.\n+     *\n+     */\n+    Section getSection(int sectionIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "206b208ef8515dd455b5b0041473dde3f086e981"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzEwMDY4OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ShuntCompensatorAdderImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTozNDozMlrOGnhRlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzo0Njo0MVrOGnqCkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5MjgyMQ==", "bodyText": "Is it just for debugging?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r444092821", "createdAt": "2020-06-23T09:34:32Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ShuntCompensatorAdderImpl.java", "diffHunk": "@@ -46,21 +44,106 @@ protected String getTypeDescription() {\n         return \"Shunt compensator\";\n     }\n \n+    class ShuntCompensatorLinearModelAdderImpl implements ShuntCompensatorLinearModelAdder {\n+\n+        private double bPerSection = Double.NaN;\n+\n+        private double gPerSection = Double.NaN;\n+\n+        private int maximumSectionCount = -1;\n+\n+        @Override\n+        public ShuntCompensatorLinearModelAdder setBPerSection(double bPerSection) {\n+            this.bPerSection = bPerSection;\n+            return this;\n+        }\n+\n+        @Override\n+        public ShuntCompensatorLinearModelAdder setGPerSection(double gPerSection) {\n+            this.gPerSection = gPerSection;\n+            return this;\n+        }\n+\n+        @Override\n+        public ShuntCompensatorLinearModelAdder setMaximumSectionCount(int maximumSectionCount) {\n+            this.maximumSectionCount = maximumSectionCount;\n+            return this;\n+        }\n+\n+        @Override\n+        public ShuntCompensatorAdder add() {\n+            ValidationUtil.checkLinearBPerSection(ShuntCompensatorAdderImpl.this, bPerSection);\n+            ValidationUtil.checkMaximumSectionCount(ShuntCompensatorAdderImpl.this, maximumSectionCount);\n+            model = new ShuntCompensatorLinearModelImpl(bPerSection, gPerSection, maximumSectionCount);\n+            return ShuntCompensatorAdderImpl.this;\n+        }\n+    }\n+\n+    class ShuntCompensatorNonLinearModelAdderImpl implements ShuntCompensatorNonLinearModelAdder {\n+\n+        private final List<ShuntCompensatorNonLinearModelImpl.SectionImpl> sections = new ArrayList<>();\n+        private boolean hasDefinedG = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "206b208ef8515dd455b5b0041473dde3f086e981"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIzNjQzMg==", "bodyText": "No, this is a bit complicated for what it does, but it is to check that if the conductance of one section has been defined, all sections must have defined conductance (and vice versa, if a section with an undefined conductance has been added, all sections must have undefined conductances).", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r444236432", "createdAt": "2020-06-23T13:46:41Z", "author": {"login": "miovd"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ShuntCompensatorAdderImpl.java", "diffHunk": "@@ -46,21 +44,106 @@ protected String getTypeDescription() {\n         return \"Shunt compensator\";\n     }\n \n+    class ShuntCompensatorLinearModelAdderImpl implements ShuntCompensatorLinearModelAdder {\n+\n+        private double bPerSection = Double.NaN;\n+\n+        private double gPerSection = Double.NaN;\n+\n+        private int maximumSectionCount = -1;\n+\n+        @Override\n+        public ShuntCompensatorLinearModelAdder setBPerSection(double bPerSection) {\n+            this.bPerSection = bPerSection;\n+            return this;\n+        }\n+\n+        @Override\n+        public ShuntCompensatorLinearModelAdder setGPerSection(double gPerSection) {\n+            this.gPerSection = gPerSection;\n+            return this;\n+        }\n+\n+        @Override\n+        public ShuntCompensatorLinearModelAdder setMaximumSectionCount(int maximumSectionCount) {\n+            this.maximumSectionCount = maximumSectionCount;\n+            return this;\n+        }\n+\n+        @Override\n+        public ShuntCompensatorAdder add() {\n+            ValidationUtil.checkLinearBPerSection(ShuntCompensatorAdderImpl.this, bPerSection);\n+            ValidationUtil.checkMaximumSectionCount(ShuntCompensatorAdderImpl.this, maximumSectionCount);\n+            model = new ShuntCompensatorLinearModelImpl(bPerSection, gPerSection, maximumSectionCount);\n+            return ShuntCompensatorAdderImpl.this;\n+        }\n+    }\n+\n+    class ShuntCompensatorNonLinearModelAdderImpl implements ShuntCompensatorNonLinearModelAdder {\n+\n+        private final List<ShuntCompensatorNonLinearModelImpl.SectionImpl> sections = new ArrayList<>();\n+        private boolean hasDefinedG = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5MjgyMQ=="}, "originalCommit": {"oid": "206b208ef8515dd455b5b0041473dde3f086e981"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzEwMzEyOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ShuntCompensatorAdderImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTozNToxMVrOGnhTIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTozNToxMVrOGnhTIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5MzIxNw==", "bodyText": "currentSectionCount => currentSectionCount", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r444093217", "createdAt": "2020-06-23T09:35:11Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ShuntCompensatorAdderImpl.java", "diffHunk": "@@ -46,21 +44,106 @@ protected String getTypeDescription() {\n         return \"Shunt compensator\";\n     }\n \n+    class ShuntCompensatorLinearModelAdderImpl implements ShuntCompensatorLinearModelAdder {\n+\n+        private double bPerSection = Double.NaN;\n+\n+        private double gPerSection = Double.NaN;\n+\n+        private int maximumSectionCount = -1;\n+\n+        @Override\n+        public ShuntCompensatorLinearModelAdder setBPerSection(double bPerSection) {\n+            this.bPerSection = bPerSection;\n+            return this;\n+        }\n+\n+        @Override\n+        public ShuntCompensatorLinearModelAdder setGPerSection(double gPerSection) {\n+            this.gPerSection = gPerSection;\n+            return this;\n+        }\n+\n+        @Override\n+        public ShuntCompensatorLinearModelAdder setMaximumSectionCount(int maximumSectionCount) {\n+            this.maximumSectionCount = maximumSectionCount;\n+            return this;\n+        }\n+\n+        @Override\n+        public ShuntCompensatorAdder add() {\n+            ValidationUtil.checkLinearBPerSection(ShuntCompensatorAdderImpl.this, bPerSection);\n+            ValidationUtil.checkMaximumSectionCount(ShuntCompensatorAdderImpl.this, maximumSectionCount);\n+            model = new ShuntCompensatorLinearModelImpl(bPerSection, gPerSection, maximumSectionCount);\n+            return ShuntCompensatorAdderImpl.this;\n+        }\n+    }\n+\n+    class ShuntCompensatorNonLinearModelAdderImpl implements ShuntCompensatorNonLinearModelAdder {\n+\n+        private final List<ShuntCompensatorNonLinearModelImpl.SectionImpl> sections = new ArrayList<>();\n+        private boolean hasDefinedG = false;\n+        private int index = 1;\n+\n+        class SectionAdderImpl implements SectionAdder {\n+\n+            private double b = Double.NaN;\n+\n+            private double g = Double.NaN;\n+\n+            @Override\n+            public SectionAdder setB(double b) {\n+                this.b = b;\n+                return this;\n+            }\n+\n+            @Override\n+            public SectionAdder setG(double g) {\n+                this.g = g;\n+                return this;\n+            }\n+\n+            @Override\n+            public ShuntCompensatorNonLinearModelAdder endSection() {\n+                ValidationUtil.checkBPerSection(ShuntCompensatorAdderImpl.this, b);\n+                if ((Double.isNaN(g) && hasDefinedG) || (!Double.isNaN(g) && !hasDefinedG && !sections.isEmpty())) {\n+                    throw new ValidationException(ShuntCompensatorAdderImpl.this, \"if conductance has been defined for a section, it must be defined for all sections.\");\n+                }\n+                hasDefinedG = hasDefinedG || !Double.isNaN(g);\n+                sections.add(new ShuntCompensatorNonLinearModelImpl.SectionImpl(index, b, g));\n+                index++;\n+                return ShuntCompensatorNonLinearModelAdderImpl.this;\n+            }\n+        }\n+\n+        @Override\n+        public SectionAdder beginSection() {\n+            return new SectionAdderImpl();\n+        }\n+\n+        @Override\n+        public ShuntCompensatorAdder add() {\n+            if (sections.isEmpty()) {\n+                throw new ValidationException(ShuntCompensatorAdderImpl.this, \"a shunt compensator must have at least one section\");\n+            }\n+            model = new ShuntCompensatorNonLinearModelImpl(sections);\n+            return ShuntCompensatorAdderImpl.this;\n+        }\n+    }\n+\n     @Override\n-    public ShuntCompensatorAdder setbPerSection(double bPerSection) {\n-        this.bPerSection = bPerSection;\n-        return this;\n+    public ShuntCompensatorLinearModelAdder newLinearModel() {\n+        return new ShuntCompensatorLinearModelAdderImpl();\n     }\n \n     @Override\n-    public ShuntCompensatorAdder setMaximumSectionCount(int maximumSectionCount) {\n-        this.maximumSectionCount = maximumSectionCount;\n-        return this;\n+    public ShuntCompensatorNonLinearModelAdder newNonLinearModel() {\n+        return new ShuntCompensatorNonLinearModelAdderImpl();\n     }\n \n     @Override\n-    public ShuntCompensatorAdder setCurrentSectionCount(int currentSectionCount) {\n-        this.currentSectionCount = currentSectionCount;\n+    public ShuntCompensatorAdder setSectionCount(int sectionCount) {\n+        this.currentSectionCount = sectionCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "206b208ef8515dd455b5b0041473dde3f086e981"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzEwNDczOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ShuntCompensatorImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTozNTozOFrOGnhUOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTozNTozOFrOGnhUOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5MzQ5OQ==", "bodyText": "currentSectionCount => sectionCount", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r444093499", "createdAt": "2020-06-23T09:35:38Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ShuntCompensatorImpl.java", "diffHunk": "@@ -47,13 +39,12 @@\n     private final TDoubleArrayList targetDeadband;\n \n     ShuntCompensatorImpl(Ref<? extends VariantManagerHolder> network,\n-                         String id, String name, boolean fictitious, double bPerSection, int maximumSectionCount,\n+                         String id, String name, boolean fictitious, ShuntCompensatorModelWrapper model,\n                          int currentSectionCount, TerminalExt regulatingTerminal, boolean voltageRegulatorOn,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "206b208ef8515dd455b5b0041473dde3f086e981"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzEwNTY1OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ShuntCompensatorImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTozNTo1MVrOGnhUxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTozNTo1MVrOGnhUxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5MzYzNw==", "bodyText": "currentSectionCount => sectionCount", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r444093637", "createdAt": "2020-06-23T09:35:51Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ShuntCompensatorImpl.java", "diffHunk": "@@ -79,51 +75,68 @@ public TerminalExt getTerminal() {\n     }\n \n     @Override\n-    public double getbPerSection() {\n-        return bPerSection;\n+    public int getSectionCount() {\n+        return currentSectionCount.get(network.get().getVariantIndex());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "206b208ef8515dd455b5b0041473dde3f086e981"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzE0Mjg0OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ShuntCompensatorNonLinearModelImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTo0NjoxNFrOGnhsXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzo0MjoyOVrOGnp2RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5OTY3Nw==", "bodyText": "I still do not understand why section index start from 1, it is a bad convention.\nOr we want in some use cases (like CGMES) manage an offset, we just have to add a lowSectionIndex (default to zero), but it should not be the default (and mandatory) behaviour.", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r444099677", "createdAt": "2020-06-23T09:46:14Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ShuntCompensatorNonLinearModelImpl.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.impl;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.iidm.network.*;\n+\n+import java.util.*;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+class ShuntCompensatorNonLinearModelImpl extends AbstractShuntCompensatorModel implements ShuntCompensatorNonLinearModel {\n+\n+    static class SectionImpl implements Section {\n+\n+        private ShuntCompensatorImpl shuntCompensator = null;\n+\n+        private final int index;\n+\n+        private double b;\n+\n+        private double g;\n+\n+        SectionImpl(int index, double b, double g) {\n+            this.index = index;\n+            this.b = b;\n+            this.g = g;\n+        }\n+\n+        @Override\n+        public double getB() {\n+            return b;\n+        }\n+\n+        @Override\n+        public Section setB(double b) {\n+            ValidationUtil.checkB(shuntCompensator, b);\n+            double oldValue = this.b;\n+            this.b = b;\n+            shuntCompensator.notifyUpdate(notifyUpdateSection(index, \"b\"), oldValue, this.b);\n+            return this;\n+        }\n+\n+        @Override\n+        public double getG() {\n+            return g;\n+        }\n+\n+        @Override\n+        public Section setG(double g) {\n+            ValidationUtil.checkG(shuntCompensator, g);\n+            double oldValue = this.g;\n+            this.g = g;\n+            shuntCompensator.notifyUpdate(notifyUpdateSection(index, \"g\"), oldValue, this.g);\n+            return this;\n+        }\n+\n+        private static String notifyUpdateSection(int sectionNum, String attribute) {\n+            return \"section\" + sectionNum + \".\" + attribute;\n+        }\n+\n+        void setShuntCompensator(ShuntCompensatorImpl shuntCompensator) {\n+            if (this.shuntCompensator != null) {\n+                throw new PowsyblException(\"Shunt compensator \" + shuntCompensator.getId() + \" has been set twice for the section \" + index);\n+            }\n+            this.shuntCompensator = shuntCompensator;\n+        }\n+    }\n+\n+    private final List<SectionImpl> sections;\n+\n+    ShuntCompensatorNonLinearModelImpl(List<SectionImpl> sections) {\n+        this.sections = sections;\n+    }\n+\n+    @Override\n+    public Section getSection(int sectionIndex) {\n+        if (sectionIndex < 1 || sectionIndex > sections.size()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "206b208ef8515dd455b5b0041473dde3f086e981"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIzMzI4NA==", "bodyText": "Method deleted (as every method using sectionIndex concept)", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r444233284", "createdAt": "2020-06-23T13:42:29Z", "author": {"login": "miovd"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ShuntCompensatorNonLinearModelImpl.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.impl;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.iidm.network.*;\n+\n+import java.util.*;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+class ShuntCompensatorNonLinearModelImpl extends AbstractShuntCompensatorModel implements ShuntCompensatorNonLinearModel {\n+\n+    static class SectionImpl implements Section {\n+\n+        private ShuntCompensatorImpl shuntCompensator = null;\n+\n+        private final int index;\n+\n+        private double b;\n+\n+        private double g;\n+\n+        SectionImpl(int index, double b, double g) {\n+            this.index = index;\n+            this.b = b;\n+            this.g = g;\n+        }\n+\n+        @Override\n+        public double getB() {\n+            return b;\n+        }\n+\n+        @Override\n+        public Section setB(double b) {\n+            ValidationUtil.checkB(shuntCompensator, b);\n+            double oldValue = this.b;\n+            this.b = b;\n+            shuntCompensator.notifyUpdate(notifyUpdateSection(index, \"b\"), oldValue, this.b);\n+            return this;\n+        }\n+\n+        @Override\n+        public double getG() {\n+            return g;\n+        }\n+\n+        @Override\n+        public Section setG(double g) {\n+            ValidationUtil.checkG(shuntCompensator, g);\n+            double oldValue = this.g;\n+            this.g = g;\n+            shuntCompensator.notifyUpdate(notifyUpdateSection(index, \"g\"), oldValue, this.g);\n+            return this;\n+        }\n+\n+        private static String notifyUpdateSection(int sectionNum, String attribute) {\n+            return \"section\" + sectionNum + \".\" + attribute;\n+        }\n+\n+        void setShuntCompensator(ShuntCompensatorImpl shuntCompensator) {\n+            if (this.shuntCompensator != null) {\n+                throw new PowsyblException(\"Shunt compensator \" + shuntCompensator.getId() + \" has been set twice for the section \" + index);\n+            }\n+            this.shuntCompensator = shuntCompensator;\n+        }\n+    }\n+\n+    private final List<SectionImpl> sections;\n+\n+    ShuntCompensatorNonLinearModelImpl(List<SectionImpl> sections) {\n+        this.sections = sections;\n+    }\n+\n+    @Override\n+    public Section getSection(int sectionIndex) {\n+        if (sectionIndex < 1 || sectionIndex > sections.size()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5OTY3Nw=="}, "originalCommit": {"oid": "206b208ef8515dd455b5b0041473dde3f086e981"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzE0NTY1OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ShuntCompensatorNonLinearModelImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTo0Njo1OVrOGnhuFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzo0MjozNVrOGnp2mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEwMDExNg==", "bodyText": "This is very dirty code just because of index > 0 convention ?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r444100116", "createdAt": "2020-06-23T09:46:59Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ShuntCompensatorNonLinearModelImpl.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.impl;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.iidm.network.*;\n+\n+import java.util.*;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+class ShuntCompensatorNonLinearModelImpl extends AbstractShuntCompensatorModel implements ShuntCompensatorNonLinearModel {\n+\n+    static class SectionImpl implements Section {\n+\n+        private ShuntCompensatorImpl shuntCompensator = null;\n+\n+        private final int index;\n+\n+        private double b;\n+\n+        private double g;\n+\n+        SectionImpl(int index, double b, double g) {\n+            this.index = index;\n+            this.b = b;\n+            this.g = g;\n+        }\n+\n+        @Override\n+        public double getB() {\n+            return b;\n+        }\n+\n+        @Override\n+        public Section setB(double b) {\n+            ValidationUtil.checkB(shuntCompensator, b);\n+            double oldValue = this.b;\n+            this.b = b;\n+            shuntCompensator.notifyUpdate(notifyUpdateSection(index, \"b\"), oldValue, this.b);\n+            return this;\n+        }\n+\n+        @Override\n+        public double getG() {\n+            return g;\n+        }\n+\n+        @Override\n+        public Section setG(double g) {\n+            ValidationUtil.checkG(shuntCompensator, g);\n+            double oldValue = this.g;\n+            this.g = g;\n+            shuntCompensator.notifyUpdate(notifyUpdateSection(index, \"g\"), oldValue, this.g);\n+            return this;\n+        }\n+\n+        private static String notifyUpdateSection(int sectionNum, String attribute) {\n+            return \"section\" + sectionNum + \".\" + attribute;\n+        }\n+\n+        void setShuntCompensator(ShuntCompensatorImpl shuntCompensator) {\n+            if (this.shuntCompensator != null) {\n+                throw new PowsyblException(\"Shunt compensator \" + shuntCompensator.getId() + \" has been set twice for the section \" + index);\n+            }\n+            this.shuntCompensator = shuntCompensator;\n+        }\n+    }\n+\n+    private final List<SectionImpl> sections;\n+\n+    ShuntCompensatorNonLinearModelImpl(List<SectionImpl> sections) {\n+        this.sections = sections;\n+    }\n+\n+    @Override\n+    public Section getSection(int sectionIndex) {\n+        if (sectionIndex < 1 || sectionIndex > sections.size()) {\n+            throw new ValidationException(shuntCompensator, \"invalid section index (must be in [1;maximumSectionCount]\");\n+        }\n+        return sections.get(sectionIndex - 1);\n+    }\n+\n+    @Override\n+    public List<Section> getAllSections() {\n+        return Collections.unmodifiableList(sections);\n+    }\n+\n+    @Override\n+    public ShuntCompensatorModelType getType() {\n+        return ShuntCompensatorModelType.NON_LINEAR;\n+    }\n+\n+    @Override\n+    public int getMaximumSectionCount() {\n+        return sections.size();\n+    }\n+\n+    @Override\n+    public double getB(int sectionCount) {\n+        if (sectionCount < 0 || sectionCount > sections.size()) {\n+            throw new ValidationException(shuntCompensator, \"invalid section count (must be in [0;maximumSectionCount]\");\n+        }\n+        return sectionCount == 0 ? 0 : sections.get(sectionCount - 1).getB();\n+    }\n+\n+    @Override\n+    public double getG(int sectionCount) {\n+        if (sectionCount < 0 || sectionCount > sections.size()) {\n+            throw new ValidationException(shuntCompensator, \"invalid section count (must be in [0;maximumSectionCount]\");\n+        }\n+        return sectionCount == 0 || Double.isNaN(sections.get(sectionCount - 1).getG()) ? 0 : sections.get(sectionCount - 1).getG();\n+    }\n+\n+    @Override\n+    public double getBPerSection(int sectionIndex) {\n+        if (sectionIndex < 1 || sectionIndex > sections.size()) {\n+            throw new ValidationException(shuntCompensator, \"invalid section index (must be in [1;maximumSectionCount]\");\n+        }\n+        return sectionIndex == 1 ? sections.get(0).getB() : sections.get(sectionIndex - 1).getB() - sections.get(sectionIndex - 2).getB();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "206b208ef8515dd455b5b0041473dde3f086e981"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIzMzM2OA==", "bodyText": "Method deleted (as every method using sectionIndex concept)", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r444233368", "createdAt": "2020-06-23T13:42:35Z", "author": {"login": "miovd"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ShuntCompensatorNonLinearModelImpl.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.impl;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.iidm.network.*;\n+\n+import java.util.*;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+class ShuntCompensatorNonLinearModelImpl extends AbstractShuntCompensatorModel implements ShuntCompensatorNonLinearModel {\n+\n+    static class SectionImpl implements Section {\n+\n+        private ShuntCompensatorImpl shuntCompensator = null;\n+\n+        private final int index;\n+\n+        private double b;\n+\n+        private double g;\n+\n+        SectionImpl(int index, double b, double g) {\n+            this.index = index;\n+            this.b = b;\n+            this.g = g;\n+        }\n+\n+        @Override\n+        public double getB() {\n+            return b;\n+        }\n+\n+        @Override\n+        public Section setB(double b) {\n+            ValidationUtil.checkB(shuntCompensator, b);\n+            double oldValue = this.b;\n+            this.b = b;\n+            shuntCompensator.notifyUpdate(notifyUpdateSection(index, \"b\"), oldValue, this.b);\n+            return this;\n+        }\n+\n+        @Override\n+        public double getG() {\n+            return g;\n+        }\n+\n+        @Override\n+        public Section setG(double g) {\n+            ValidationUtil.checkG(shuntCompensator, g);\n+            double oldValue = this.g;\n+            this.g = g;\n+            shuntCompensator.notifyUpdate(notifyUpdateSection(index, \"g\"), oldValue, this.g);\n+            return this;\n+        }\n+\n+        private static String notifyUpdateSection(int sectionNum, String attribute) {\n+            return \"section\" + sectionNum + \".\" + attribute;\n+        }\n+\n+        void setShuntCompensator(ShuntCompensatorImpl shuntCompensator) {\n+            if (this.shuntCompensator != null) {\n+                throw new PowsyblException(\"Shunt compensator \" + shuntCompensator.getId() + \" has been set twice for the section \" + index);\n+            }\n+            this.shuntCompensator = shuntCompensator;\n+        }\n+    }\n+\n+    private final List<SectionImpl> sections;\n+\n+    ShuntCompensatorNonLinearModelImpl(List<SectionImpl> sections) {\n+        this.sections = sections;\n+    }\n+\n+    @Override\n+    public Section getSection(int sectionIndex) {\n+        if (sectionIndex < 1 || sectionIndex > sections.size()) {\n+            throw new ValidationException(shuntCompensator, \"invalid section index (must be in [1;maximumSectionCount]\");\n+        }\n+        return sections.get(sectionIndex - 1);\n+    }\n+\n+    @Override\n+    public List<Section> getAllSections() {\n+        return Collections.unmodifiableList(sections);\n+    }\n+\n+    @Override\n+    public ShuntCompensatorModelType getType() {\n+        return ShuntCompensatorModelType.NON_LINEAR;\n+    }\n+\n+    @Override\n+    public int getMaximumSectionCount() {\n+        return sections.size();\n+    }\n+\n+    @Override\n+    public double getB(int sectionCount) {\n+        if (sectionCount < 0 || sectionCount > sections.size()) {\n+            throw new ValidationException(shuntCompensator, \"invalid section count (must be in [0;maximumSectionCount]\");\n+        }\n+        return sectionCount == 0 ? 0 : sections.get(sectionCount - 1).getB();\n+    }\n+\n+    @Override\n+    public double getG(int sectionCount) {\n+        if (sectionCount < 0 || sectionCount > sections.size()) {\n+            throw new ValidationException(shuntCompensator, \"invalid section count (must be in [0;maximumSectionCount]\");\n+        }\n+        return sectionCount == 0 || Double.isNaN(sections.get(sectionCount - 1).getG()) ? 0 : sections.get(sectionCount - 1).getG();\n+    }\n+\n+    @Override\n+    public double getBPerSection(int sectionIndex) {\n+        if (sectionIndex < 1 || sectionIndex > sections.size()) {\n+            throw new ValidationException(shuntCompensator, \"invalid section index (must be in [1;maximumSectionCount]\");\n+        }\n+        return sectionIndex == 1 ? sections.get(0).getB() : sections.get(sectionIndex - 1).getB() - sections.get(sectionIndex - 2).getB();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEwMDExNg=="}, "originalCommit": {"oid": "206b208ef8515dd455b5b0041473dde3f086e981"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTg5Mjk5OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-tck/src/test/java/com/powsybl/iidm/network/tck/AbstractShuntCompensatorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMjozOToyMVrOGn8_Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMjozOToyMVrOGn8_Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU0Njg5MQ==", "bodyText": "Maybe change CurrentSectionCount to be coherent", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r444546891", "createdAt": "2020-06-23T22:39:21Z", "author": {"login": "marqueslanauja"}, "path": "iidm/iidm-tck/src/test/java/com/powsybl/iidm/network/tck/AbstractShuntCompensatorTest.java", "diffHunk": "@@ -268,18 +471,25 @@ public void testSetterGetterInMultiVariants() {\n         }\n     }\n \n-    private void createShunt(String id, String name, double bPerSection, int currentSectionCount, int maxSectionCount, Terminal regulatingTerminal, boolean voltageRegulatorOn, double targetV, double targetDeadband) {\n-        voltageLevel.newShuntCompensator()\n+    private ShuntCompensator createLinearShunt(String id, String name, double bPerSection, double gPerSection, int currentSectionCount, int maxSectionCount, Terminal regulatingTerminal, boolean voltageRegulatorOn, double targetV, double targetDeadband) {\n+        return createShuntAdder(id, name, currentSectionCount, regulatingTerminal, voltageRegulatorOn, targetV, targetDeadband)\n+                .newLinearModel()\n+                .setBPerSection(bPerSection)\n+                .setGPerSection(gPerSection)\n+                .setMaximumSectionCount(maxSectionCount)\n+                .add()\n+                .add();\n+    }\n+\n+    private ShuntCompensatorAdder createShuntAdder(String id, String name, int currentSectionCount, Terminal regulatingTerminal, boolean voltageRegulatorOn, double targetV, double targetDeadband) {\n+        return voltageLevel.newShuntCompensator()\n                 .setId(id)\n                 .setName(name)\n                 .setConnectableBus(\"busA\")\n-                .setbPerSection(bPerSection)\n-                .setCurrentSectionCount(currentSectionCount)\n-                .setMaximumSectionCount(maxSectionCount)\n+                .setSectionCount(currentSectionCount)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a3e22c4dd4e26ce87b74cea24fa454aaad97524"}, "originalPosition": 497}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 117, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}