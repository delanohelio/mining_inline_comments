{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNjU0NzM4", "number": 1244, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoxMjozNVrODsjwmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODoyNzoyNlrODvdCiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDQ5ODE3OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/ShuntXml.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoxMjozNVrOF9eP5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNToyMjo1OFrOF_F3Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwMzA0NA==", "bodyText": "I think I wouldn't serialize the type: it's a redundant information with the model you will have to check. As you do not use the same XML element name, it's not necessary.", "url": "https://github.com/powsybl/powsybl-core/pull/1244#discussion_r400003044", "createdAt": "2020-03-30T08:12:35Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/ShuntXml.java", "diffHunk": "@@ -34,13 +40,30 @@ protected boolean hasSubElements(ShuntCompensator sc) {\n         return sc != sc.getRegulatingTerminal().getConnectable();\n     }\n \n+    @Override\n+    protected boolean hasSubElements(ShuntCompensator sc, NetworkXmlWriterContext context) {\n+        return context.getVersion().compareTo(IidmXmlVersion.V_1_2) >= 0 || hasSubElements(sc);\n+    }\n+\n     @Override\n     protected void writeRootElementAttributes(ShuntCompensator sc, VoltageLevel vl, NetworkXmlWriterContext context) throws XMLStreamException {\n-        if (ShuntCompensatorModelType.NON_LINEAR.equals(sc.getModelType())) {\n-            throw new PowsyblException(\"Non linear shunt not yet supported\");\n-        }\n-        XmlUtil.writeDouble(\"bPerSection\", sc.getModel(ShuntCompensatorLinearModel.class).getbPerSection(), context.getWriter());\n-        context.getWriter().writeAttribute(\"maximumSectionCount\", Integer.toString(sc.getMaximumSectionCount()));\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(ShuntCompensatorModelType.NON_LINEAR.equals(sc.getModelType()), ROOT_ELEMENT_NAME,\n+                NON_LINEAR_MODEL, IidmXmlUtil.ErrorMessage.NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n+        IidmXmlUtil.runUntilMaximumVersion(IidmXmlVersion.V_1_1, context, () -> {\n+            try {\n+                XmlUtil.writeDouble(B_PER_SECTION, sc.getModel(ShuntCompensatorLinearModel.class).getbPerSection(), context.getWriter());\n+                context.getWriter().writeAttribute(MAXIMUM_SECTION_COUNT, Integer.toString(sc.getMaximumSectionCount()));\n+            } catch (XMLStreamException e) {\n+                throw new UncheckedXmlStreamException(e);\n+            }\n+        });\n+        IidmXmlUtil.runFromMinimumVersion(IidmXmlVersion.V_1_2, context, () -> {\n+            try {\n+                context.getWriter().writeAttribute(MODEL, sc.getModelType().name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e99d3eee05d614ed6e3ed9e40212eebe5297be3"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwMDYzMQ==", "bodyText": "I changed linearModel and nonLinearModel rather than this attribute (it simplifies the file)", "url": "https://github.com/powsybl/powsybl-core/pull/1244#discussion_r401700631", "createdAt": "2020-04-01T15:22:58Z", "author": {"login": "miovd"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/ShuntXml.java", "diffHunk": "@@ -34,13 +40,30 @@ protected boolean hasSubElements(ShuntCompensator sc) {\n         return sc != sc.getRegulatingTerminal().getConnectable();\n     }\n \n+    @Override\n+    protected boolean hasSubElements(ShuntCompensator sc, NetworkXmlWriterContext context) {\n+        return context.getVersion().compareTo(IidmXmlVersion.V_1_2) >= 0 || hasSubElements(sc);\n+    }\n+\n     @Override\n     protected void writeRootElementAttributes(ShuntCompensator sc, VoltageLevel vl, NetworkXmlWriterContext context) throws XMLStreamException {\n-        if (ShuntCompensatorModelType.NON_LINEAR.equals(sc.getModelType())) {\n-            throw new PowsyblException(\"Non linear shunt not yet supported\");\n-        }\n-        XmlUtil.writeDouble(\"bPerSection\", sc.getModel(ShuntCompensatorLinearModel.class).getbPerSection(), context.getWriter());\n-        context.getWriter().writeAttribute(\"maximumSectionCount\", Integer.toString(sc.getMaximumSectionCount()));\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(ShuntCompensatorModelType.NON_LINEAR.equals(sc.getModelType()), ROOT_ELEMENT_NAME,\n+                NON_LINEAR_MODEL, IidmXmlUtil.ErrorMessage.NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n+        IidmXmlUtil.runUntilMaximumVersion(IidmXmlVersion.V_1_1, context, () -> {\n+            try {\n+                XmlUtil.writeDouble(B_PER_SECTION, sc.getModel(ShuntCompensatorLinearModel.class).getbPerSection(), context.getWriter());\n+                context.getWriter().writeAttribute(MAXIMUM_SECTION_COUNT, Integer.toString(sc.getMaximumSectionCount()));\n+            } catch (XMLStreamException e) {\n+                throw new UncheckedXmlStreamException(e);\n+            }\n+        });\n+        IidmXmlUtil.runFromMinimumVersion(IidmXmlVersion.V_1_2, context, () -> {\n+            try {\n+                context.getWriter().writeAttribute(MODEL, sc.getModelType().name());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwMzA0NA=="}, "originalCommit": {"oid": "8e99d3eee05d614ed6e3ed9e40212eebe5297be3"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDUwMTM2OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/ShuntXml.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoxMzoyMVrOF9eRzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoxMzoyMVrOF9eRzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwMzUzNA==", "bodyText": "To make the code simpler, maybe you should move the try catch in the writeModel method.", "url": "https://github.com/powsybl/powsybl-core/pull/1244#discussion_r400003534", "createdAt": "2020-03-30T08:13:21Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/ShuntXml.java", "diffHunk": "@@ -54,35 +77,84 @@ protected void writeRootElementAttributes(ShuntCompensator sc, VoltageLevel vl,\n \n     @Override\n     protected void writeSubElements(ShuntCompensator sc, VoltageLevel vl, NetworkXmlWriterContext context) throws XMLStreamException {\n+        IidmXmlUtil.runFromMinimumVersion(IidmXmlVersion.V_1_2, context, () -> {\n+            try {\n+                writeModel(sc, context);\n+            } catch (XMLStreamException e) {\n+                throw new UncheckedXmlStreamException(e);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e99d3eee05d614ed6e3ed9e40212eebe5297be3"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDUwOTUxOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/ShuntXml.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoxNToxOFrOF9eWew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNDozOTowMVrOF_Dz_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwNDczMQ==", "bodyText": "Is it a bit strange? Maybe we should create a default Linear Model, like we did for ReactiveLimits? And allow to change the model of a shunt after its creation.", "url": "https://github.com/powsybl/powsybl-core/pull/1244#discussion_r400004731", "createdAt": "2020-03-30T08:15:18Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/ShuntXml.java", "diffHunk": "@@ -54,35 +77,84 @@ protected void writeRootElementAttributes(ShuntCompensator sc, VoltageLevel vl,\n \n     @Override\n     protected void writeSubElements(ShuntCompensator sc, VoltageLevel vl, NetworkXmlWriterContext context) throws XMLStreamException {\n+        IidmXmlUtil.runFromMinimumVersion(IidmXmlVersion.V_1_2, context, () -> {\n+            try {\n+                writeModel(sc, context);\n+            } catch (XMLStreamException e) {\n+                throw new UncheckedXmlStreamException(e);\n+            }\n+        });\n         if (sc != sc.getRegulatingTerminal().getConnectable()) {\n             IidmXmlUtil.assertMinimumVersion(ROOT_ELEMENT_NAME, REGULATING_TERMINAL, IidmXmlUtil.ErrorMessage.NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n             TerminalRefXml.writeTerminalRef(sc.getRegulatingTerminal(), context, REGULATING_TERMINAL);\n         }\n     }\n \n+    private static void writeModel(ShuntCompensator sc, NetworkXmlWriterContext context) throws XMLStreamException {\n+        if (ShuntCompensatorModelType.LINEAR.equals(sc.getModelType())) {\n+            context.getWriter().writeEmptyElement(context.getVersion().getNamespaceURI(), LINEAR_MODEL);\n+            XmlUtil.writeDouble(B_PER_SECTION, sc.getModel(ShuntCompensatorLinearModel.class).getbPerSection(), context.getWriter());\n+            XmlUtil.writeDouble(\"gPerSection\", sc.getModel(ShuntCompensatorLinearModel.class).getgPerSection(), context.getWriter());\n+            context.getWriter().writeAttribute(MAXIMUM_SECTION_COUNT, Integer.toString(sc.getMaximumSectionCount()));\n+        } else if (ShuntCompensatorModelType.NON_LINEAR.equals(sc.getModelType())) {\n+            context.getWriter().writeStartElement(context.getVersion().getNamespaceURI(), NON_LINEAR_MODEL);\n+            sc.getModel(ShuntCompensatorNonLinearModel.class).getSections().forEach((sectionNum, section) -> {\n+                try {\n+                    context.getWriter().writeEmptyElement(context.getVersion().getNamespaceURI(), \"section\");\n+                    context.getWriter().writeAttribute(\"num\", Integer.toString(sectionNum));\n+                    XmlUtil.writeDouble(\"b\", section.getB(), context.getWriter());\n+                    XmlUtil.writeDouble(\"g\", section.getG(), context.getWriter());\n+                } catch (XMLStreamException e) {\n+                    throw new UncheckedXmlStreamException(e);\n+                }\n+            });\n+            context.getWriter().writeEndElement();\n+        } else {\n+            throw new PowsyblException(String.format(\"Unexpected shunt model type for %s: %s\", sc.getId(), sc.getModelType().name()));\n+        }\n+    }\n+\n     @Override\n     protected ShuntCompensatorAdder createAdder(VoltageLevel vl) {\n         return vl.newShuntCompensator();\n     }\n \n     @Override\n     protected ShuntCompensator readRootElementAttributes(ShuntCompensatorAdder adder, NetworkXmlReaderContext context) {\n-        double bPerSection = XmlUtil.readDoubleAttribute(context.getReader(), \"bPerSection\");\n-        int maximumSectionCount = XmlUtil.readIntAttribute(context.getReader(), \"maximumSectionCount\");\n         int currentSectionCount = XmlUtil.readIntAttribute(context.getReader(), \"currentSectionCount\");\n+        IidmXmlUtil.runUntilMaximumVersion(IidmXmlVersion.V_1_1, context, () -> {\n+            double bPerSection = XmlUtil.readDoubleAttribute(context.getReader(), B_PER_SECTION);\n+            int maximumSectionCount = XmlUtil.readIntAttribute(context.getReader(), MAXIMUM_SECTION_COUNT);\n+            adder.newLinearModel()\n+                    .setMaximumSectionCount(maximumSectionCount)\n+                    .setbPerSection(bPerSection)\n+                    .add();\n+        });\n         IidmXmlUtil.runFromMinimumVersion(IidmXmlVersion.V_1_2, context, () -> {\n             boolean voltageRegulatorOn = XmlUtil.readBoolAttribute(context.getReader(), \"voltageRegulatorOn\");\n             double targetV = XmlUtil.readOptionalDoubleAttribute(context.getReader(), \"targetV\");\n             double targetDeadband = XmlUtil.readOptionalDoubleAttribute(context.getReader(), \"targetDeadband\");\n             adder.setVoltageRegulatorOn(voltageRegulatorOn)\n                     .setTargetV(targetV)\n                     .setTargetDeadband(targetDeadband);\n+            ShuntCompensatorModelType modelType = ShuntCompensatorModelType.valueOf(context.getReader().getAttributeValue(null, MODEL));\n+            if (ShuntCompensatorModelType.LINEAR.equals(modelType)) { // default value for linear shunt (always overwritten)\n+                adder.newLinearModel()\n+                        .setMaximumSectionCount(currentSectionCount + 1) // maximumSectionCount must be > 0\n+                        .setbPerSection(Double.MIN_VALUE)\n+                        .add();\n+            } else if (ShuntCompensatorModelType.NON_LINEAR.equals(modelType)) { // default value for non linear shunt (always overwritten)\n+                adder.newNonLinearModel()\n+                        .beginSection()\n+                            .setSectionNum(currentSectionCount)\n+                            .setB(Double.MIN_VALUE)\n+                        .endSection()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e99d3eee05d614ed6e3ed9e40212eebe5297be3"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEwMDkyMw==", "bodyText": "It may be a good solution but there are two questions:\n\nWhat default value for bPerSection do we want?\nDoes that mean that we are allowing to modify the shunt model of a built shunt? (we wanted to prevent that at first, given that a modification of shunt model may not really make sense...)", "url": "https://github.com/powsybl/powsybl-core/pull/1244#discussion_r400100923", "createdAt": "2020-03-30T10:55:05Z", "author": {"login": "miovd"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/ShuntXml.java", "diffHunk": "@@ -54,35 +77,84 @@ protected void writeRootElementAttributes(ShuntCompensator sc, VoltageLevel vl,\n \n     @Override\n     protected void writeSubElements(ShuntCompensator sc, VoltageLevel vl, NetworkXmlWriterContext context) throws XMLStreamException {\n+        IidmXmlUtil.runFromMinimumVersion(IidmXmlVersion.V_1_2, context, () -> {\n+            try {\n+                writeModel(sc, context);\n+            } catch (XMLStreamException e) {\n+                throw new UncheckedXmlStreamException(e);\n+            }\n+        });\n         if (sc != sc.getRegulatingTerminal().getConnectable()) {\n             IidmXmlUtil.assertMinimumVersion(ROOT_ELEMENT_NAME, REGULATING_TERMINAL, IidmXmlUtil.ErrorMessage.NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n             TerminalRefXml.writeTerminalRef(sc.getRegulatingTerminal(), context, REGULATING_TERMINAL);\n         }\n     }\n \n+    private static void writeModel(ShuntCompensator sc, NetworkXmlWriterContext context) throws XMLStreamException {\n+        if (ShuntCompensatorModelType.LINEAR.equals(sc.getModelType())) {\n+            context.getWriter().writeEmptyElement(context.getVersion().getNamespaceURI(), LINEAR_MODEL);\n+            XmlUtil.writeDouble(B_PER_SECTION, sc.getModel(ShuntCompensatorLinearModel.class).getbPerSection(), context.getWriter());\n+            XmlUtil.writeDouble(\"gPerSection\", sc.getModel(ShuntCompensatorLinearModel.class).getgPerSection(), context.getWriter());\n+            context.getWriter().writeAttribute(MAXIMUM_SECTION_COUNT, Integer.toString(sc.getMaximumSectionCount()));\n+        } else if (ShuntCompensatorModelType.NON_LINEAR.equals(sc.getModelType())) {\n+            context.getWriter().writeStartElement(context.getVersion().getNamespaceURI(), NON_LINEAR_MODEL);\n+            sc.getModel(ShuntCompensatorNonLinearModel.class).getSections().forEach((sectionNum, section) -> {\n+                try {\n+                    context.getWriter().writeEmptyElement(context.getVersion().getNamespaceURI(), \"section\");\n+                    context.getWriter().writeAttribute(\"num\", Integer.toString(sectionNum));\n+                    XmlUtil.writeDouble(\"b\", section.getB(), context.getWriter());\n+                    XmlUtil.writeDouble(\"g\", section.getG(), context.getWriter());\n+                } catch (XMLStreamException e) {\n+                    throw new UncheckedXmlStreamException(e);\n+                }\n+            });\n+            context.getWriter().writeEndElement();\n+        } else {\n+            throw new PowsyblException(String.format(\"Unexpected shunt model type for %s: %s\", sc.getId(), sc.getModelType().name()));\n+        }\n+    }\n+\n     @Override\n     protected ShuntCompensatorAdder createAdder(VoltageLevel vl) {\n         return vl.newShuntCompensator();\n     }\n \n     @Override\n     protected ShuntCompensator readRootElementAttributes(ShuntCompensatorAdder adder, NetworkXmlReaderContext context) {\n-        double bPerSection = XmlUtil.readDoubleAttribute(context.getReader(), \"bPerSection\");\n-        int maximumSectionCount = XmlUtil.readIntAttribute(context.getReader(), \"maximumSectionCount\");\n         int currentSectionCount = XmlUtil.readIntAttribute(context.getReader(), \"currentSectionCount\");\n+        IidmXmlUtil.runUntilMaximumVersion(IidmXmlVersion.V_1_1, context, () -> {\n+            double bPerSection = XmlUtil.readDoubleAttribute(context.getReader(), B_PER_SECTION);\n+            int maximumSectionCount = XmlUtil.readIntAttribute(context.getReader(), MAXIMUM_SECTION_COUNT);\n+            adder.newLinearModel()\n+                    .setMaximumSectionCount(maximumSectionCount)\n+                    .setbPerSection(bPerSection)\n+                    .add();\n+        });\n         IidmXmlUtil.runFromMinimumVersion(IidmXmlVersion.V_1_2, context, () -> {\n             boolean voltageRegulatorOn = XmlUtil.readBoolAttribute(context.getReader(), \"voltageRegulatorOn\");\n             double targetV = XmlUtil.readOptionalDoubleAttribute(context.getReader(), \"targetV\");\n             double targetDeadband = XmlUtil.readOptionalDoubleAttribute(context.getReader(), \"targetDeadband\");\n             adder.setVoltageRegulatorOn(voltageRegulatorOn)\n                     .setTargetV(targetV)\n                     .setTargetDeadband(targetDeadband);\n+            ShuntCompensatorModelType modelType = ShuntCompensatorModelType.valueOf(context.getReader().getAttributeValue(null, MODEL));\n+            if (ShuntCompensatorModelType.LINEAR.equals(modelType)) { // default value for linear shunt (always overwritten)\n+                adder.newLinearModel()\n+                        .setMaximumSectionCount(currentSectionCount + 1) // maximumSectionCount must be > 0\n+                        .setbPerSection(Double.MIN_VALUE)\n+                        .add();\n+            } else if (ShuntCompensatorModelType.NON_LINEAR.equals(modelType)) { // default value for non linear shunt (always overwritten)\n+                adder.newNonLinearModel()\n+                        .beginSection()\n+                            .setSectionNum(currentSectionCount)\n+                            .setB(Double.MIN_VALUE)\n+                        .endSection()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwNDczMQ=="}, "originalCommit": {"oid": "8e99d3eee05d614ed6e3ed9e40212eebe5297be3"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY2NzA2OA==", "bodyText": "Ok, I put another solution that only requires default values for non linear shunt.... what do you think?", "url": "https://github.com/powsybl/powsybl-core/pull/1244#discussion_r401667068", "createdAt": "2020-04-01T14:39:01Z", "author": {"login": "miovd"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/ShuntXml.java", "diffHunk": "@@ -54,35 +77,84 @@ protected void writeRootElementAttributes(ShuntCompensator sc, VoltageLevel vl,\n \n     @Override\n     protected void writeSubElements(ShuntCompensator sc, VoltageLevel vl, NetworkXmlWriterContext context) throws XMLStreamException {\n+        IidmXmlUtil.runFromMinimumVersion(IidmXmlVersion.V_1_2, context, () -> {\n+            try {\n+                writeModel(sc, context);\n+            } catch (XMLStreamException e) {\n+                throw new UncheckedXmlStreamException(e);\n+            }\n+        });\n         if (sc != sc.getRegulatingTerminal().getConnectable()) {\n             IidmXmlUtil.assertMinimumVersion(ROOT_ELEMENT_NAME, REGULATING_TERMINAL, IidmXmlUtil.ErrorMessage.NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n             TerminalRefXml.writeTerminalRef(sc.getRegulatingTerminal(), context, REGULATING_TERMINAL);\n         }\n     }\n \n+    private static void writeModel(ShuntCompensator sc, NetworkXmlWriterContext context) throws XMLStreamException {\n+        if (ShuntCompensatorModelType.LINEAR.equals(sc.getModelType())) {\n+            context.getWriter().writeEmptyElement(context.getVersion().getNamespaceURI(), LINEAR_MODEL);\n+            XmlUtil.writeDouble(B_PER_SECTION, sc.getModel(ShuntCompensatorLinearModel.class).getbPerSection(), context.getWriter());\n+            XmlUtil.writeDouble(\"gPerSection\", sc.getModel(ShuntCompensatorLinearModel.class).getgPerSection(), context.getWriter());\n+            context.getWriter().writeAttribute(MAXIMUM_SECTION_COUNT, Integer.toString(sc.getMaximumSectionCount()));\n+        } else if (ShuntCompensatorModelType.NON_LINEAR.equals(sc.getModelType())) {\n+            context.getWriter().writeStartElement(context.getVersion().getNamespaceURI(), NON_LINEAR_MODEL);\n+            sc.getModel(ShuntCompensatorNonLinearModel.class).getSections().forEach((sectionNum, section) -> {\n+                try {\n+                    context.getWriter().writeEmptyElement(context.getVersion().getNamespaceURI(), \"section\");\n+                    context.getWriter().writeAttribute(\"num\", Integer.toString(sectionNum));\n+                    XmlUtil.writeDouble(\"b\", section.getB(), context.getWriter());\n+                    XmlUtil.writeDouble(\"g\", section.getG(), context.getWriter());\n+                } catch (XMLStreamException e) {\n+                    throw new UncheckedXmlStreamException(e);\n+                }\n+            });\n+            context.getWriter().writeEndElement();\n+        } else {\n+            throw new PowsyblException(String.format(\"Unexpected shunt model type for %s: %s\", sc.getId(), sc.getModelType().name()));\n+        }\n+    }\n+\n     @Override\n     protected ShuntCompensatorAdder createAdder(VoltageLevel vl) {\n         return vl.newShuntCompensator();\n     }\n \n     @Override\n     protected ShuntCompensator readRootElementAttributes(ShuntCompensatorAdder adder, NetworkXmlReaderContext context) {\n-        double bPerSection = XmlUtil.readDoubleAttribute(context.getReader(), \"bPerSection\");\n-        int maximumSectionCount = XmlUtil.readIntAttribute(context.getReader(), \"maximumSectionCount\");\n         int currentSectionCount = XmlUtil.readIntAttribute(context.getReader(), \"currentSectionCount\");\n+        IidmXmlUtil.runUntilMaximumVersion(IidmXmlVersion.V_1_1, context, () -> {\n+            double bPerSection = XmlUtil.readDoubleAttribute(context.getReader(), B_PER_SECTION);\n+            int maximumSectionCount = XmlUtil.readIntAttribute(context.getReader(), MAXIMUM_SECTION_COUNT);\n+            adder.newLinearModel()\n+                    .setMaximumSectionCount(maximumSectionCount)\n+                    .setbPerSection(bPerSection)\n+                    .add();\n+        });\n         IidmXmlUtil.runFromMinimumVersion(IidmXmlVersion.V_1_2, context, () -> {\n             boolean voltageRegulatorOn = XmlUtil.readBoolAttribute(context.getReader(), \"voltageRegulatorOn\");\n             double targetV = XmlUtil.readOptionalDoubleAttribute(context.getReader(), \"targetV\");\n             double targetDeadband = XmlUtil.readOptionalDoubleAttribute(context.getReader(), \"targetDeadband\");\n             adder.setVoltageRegulatorOn(voltageRegulatorOn)\n                     .setTargetV(targetV)\n                     .setTargetDeadband(targetDeadband);\n+            ShuntCompensatorModelType modelType = ShuntCompensatorModelType.valueOf(context.getReader().getAttributeValue(null, MODEL));\n+            if (ShuntCompensatorModelType.LINEAR.equals(modelType)) { // default value for linear shunt (always overwritten)\n+                adder.newLinearModel()\n+                        .setMaximumSectionCount(currentSectionCount + 1) // maximumSectionCount must be > 0\n+                        .setbPerSection(Double.MIN_VALUE)\n+                        .add();\n+            } else if (ShuntCompensatorModelType.NON_LINEAR.equals(modelType)) { // default value for non linear shunt (always overwritten)\n+                adder.newNonLinearModel()\n+                        .beginSection()\n+                            .setSectionNum(currentSectionCount)\n+                            .setB(Double.MIN_VALUE)\n+                        .endSection()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwNDczMQ=="}, "originalCommit": {"oid": "8e99d3eee05d614ed6e3ed9e40212eebe5297be3"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDU5OTg0OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/NonLinearShuntXml.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzoxOTo0OVrOGB2IUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzoxOTo0OVrOGB2IUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4ODYyNg==", "bodyText": "General advice: sometimes a simple for-loop is fine :)", "url": "https://github.com/powsybl/powsybl-core/pull/1244#discussion_r404588626", "createdAt": "2020-04-07T07:19:49Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/NonLinearShuntXml.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.xml;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.exceptions.UncheckedXmlStreamException;\n+import com.powsybl.commons.xml.XmlUtil;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.xml.util.IidmXmlUtil;\n+\n+import javax.xml.stream.XMLStreamException;\n+import java.util.*;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public class NonLinearShuntXml extends AbstractConnectableXml<ShuntCompensator, ShuntCompensatorAdder, VoltageLevel> {\n+\n+    static final NonLinearShuntXml INSTANCE = new NonLinearShuntXml();\n+\n+    static final String ROOT_ELEMENT_NAME = \"nonLinearShunt\";\n+\n+    @Override\n+    protected String getRootElementName() {\n+        return ROOT_ELEMENT_NAME;\n+    }\n+\n+    @Override\n+    protected boolean hasSubElements(ShuntCompensator sc) {\n+        return true;\n+    }\n+\n+    @Override\n+    protected void writeRootElementAttributes(ShuntCompensator sc, VoltageLevel parent, NetworkXmlWriterContext context) throws XMLStreamException {\n+        context.getWriter().writeAttribute(\"currentSectionCount\", Integer.toString(sc.getCurrentSectionCount()));\n+        context.getWriter().writeAttribute(\"voltageRegulatorOn\", Boolean.toString(sc.isVoltageRegulatorOn()));\n+        XmlUtil.writeDouble(\"targetV\", sc.getTargetV(), context.getWriter());\n+        XmlUtil.writeDouble(\"targetDeadband\", sc.getTargetDeadband(), context.getWriter());\n+        writeNodeOrBus(null, sc.getTerminal(), context);\n+        writePQ(null, sc.getTerminal(), context.getWriter());\n+    }\n+\n+    @Override\n+    protected void writeSubElements(ShuntCompensator sc, VoltageLevel vl, NetworkXmlWriterContext context) throws XMLStreamException {\n+        writeSections(sc, context);\n+        if (sc != sc.getRegulatingTerminal().getConnectable()) {\n+            TerminalRefXml.writeTerminalRef(sc.getRegulatingTerminal(), context, \"regulatingTerminal\");\n+        }\n+    }\n+\n+    private static void writeSections(ShuntCompensator sc, NetworkXmlWriterContext context) {\n+        sc.getModel(ShuntCompensatorNonLinearModel.class).getSections().forEach((sectionNum, section) -> {\n+            try {\n+                context.getWriter().writeEmptyElement(context.getVersion().getNamespaceURI(), \"section\");\n+                context.getWriter().writeAttribute(\"num\", Integer.toString(sectionNum));\n+                XmlUtil.writeDouble(\"b\", section.getB(), context.getWriter());\n+                XmlUtil.writeDouble(\"g\", section.getG(), context.getWriter());\n+            } catch (XMLStreamException e) {\n+                throw new UncheckedXmlStreamException(e);\n+            }\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608d6a339c0375845ef47e9a710666b25566a2f6"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDg0Mzk3OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/ShuntXml.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODoyNDo0OFrOGB4gRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDowMjo0NlrOGCFFvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyNzUyNQ==", "bodyText": "Is there a bug there (and elsewhere)? If an identifiable has properties, then he has sub elements.", "url": "https://github.com/powsybl/powsybl-core/pull/1244#discussion_r404627525", "createdAt": "2020-04-07T08:24:48Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/ShuntXml.java", "diffHunk": "@@ -22,67 +22,53 @@\n \n     static final String ROOT_ELEMENT_NAME = \"shunt\";\n \n-    private static final String REGULATING_TERMINAL = \"regulatingTerminal\";\n-\n     @Override\n     protected String getRootElementName() {\n         return ROOT_ELEMENT_NAME;\n     }\n \n     @Override\n     protected boolean hasSubElements(ShuntCompensator sc) {\n-        return sc != sc.getRegulatingTerminal().getConnectable();\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608d6a339c0375845ef47e9a710666b25566a2f6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgzMzcyNQ==", "bodyText": "No, in AbstractIdentifiableXml, we have it checks if (hasSubElements || identifiable.hasProperty()), not only what hasSubElements returns.", "url": "https://github.com/powsybl/powsybl-core/pull/1244#discussion_r404833725", "createdAt": "2020-04-07T14:02:46Z", "author": {"login": "miovd"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/ShuntXml.java", "diffHunk": "@@ -22,67 +22,53 @@\n \n     static final String ROOT_ELEMENT_NAME = \"shunt\";\n \n-    private static final String REGULATING_TERMINAL = \"regulatingTerminal\";\n-\n     @Override\n     protected String getRootElementName() {\n         return ROOT_ELEMENT_NAME;\n     }\n \n     @Override\n     protected boolean hasSubElements(ShuntCompensator sc) {\n-        return sc != sc.getRegulatingTerminal().getConnectable();\n+        return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyNzUyNQ=="}, "originalCommit": {"oid": "608d6a339c0375845ef47e9a710666b25566a2f6"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDg0NjY2OnYy", "diffSide": "LEFT", "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/ShuntXml.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODoyNToyOFrOGB4iBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDowMzozN1rOGCFIPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyNzk3NQ==", "bodyText": "Everytime we writeSubElements, we should write properties. I think we make this bug everywhere?", "url": "https://github.com/powsybl/powsybl-core/pull/1244#discussion_r404627975", "createdAt": "2020-04-07T08:25:28Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/ShuntXml.java", "diffHunk": "@@ -22,67 +22,53 @@\n \n     static final String ROOT_ELEMENT_NAME = \"shunt\";\n \n-    private static final String REGULATING_TERMINAL = \"regulatingTerminal\";\n-\n     @Override\n     protected String getRootElementName() {\n         return ROOT_ELEMENT_NAME;\n     }\n \n     @Override\n     protected boolean hasSubElements(ShuntCompensator sc) {\n-        return sc != sc.getRegulatingTerminal().getConnectable();\n+        return false;\n     }\n \n     @Override\n     protected void writeRootElementAttributes(ShuntCompensator sc, VoltageLevel vl, NetworkXmlWriterContext context) throws XMLStreamException {\n         if (ShuntCompensatorModelType.NON_LINEAR.equals(sc.getModelType())) {\n-            throw new PowsyblException(\"Non linear shunt not yet supported\");\n+            throw new PowsyblException(\"Non linear shunts are not supported for IIDM-XML version \" + context.getVersion().toString(\".\")\n+                    + \". IIDM-XML version should be >= 1.2\");\n         }\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(sc.isVoltageRegulatorOn(), ROOT_ELEMENT_NAME, \"voltageRegulatorOn\",\n+                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(!Double.isNaN(sc.getTargetV()), ROOT_ELEMENT_NAME, \"targetV\",\n+                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(!Double.isNaN(sc.getTargetDeadband()), ROOT_ELEMENT_NAME, \"targetDeadband\",\n+                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(sc.getRegulatingTerminal().getConnectable() != sc, ROOT_ELEMENT_NAME, \"regulatingTerminal\",\n+                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n         XmlUtil.writeDouble(\"bPerSection\", sc.getModel(ShuntCompensatorLinearModel.class).getbPerSection(), context.getWriter());\n         context.getWriter().writeAttribute(\"maximumSectionCount\", Integer.toString(sc.getMaximumSectionCount()));\n         context.getWriter().writeAttribute(\"currentSectionCount\", Integer.toString(sc.getCurrentSectionCount()));\n-        IidmXmlUtil.writeBooleanAttributeFromMinimumVersion(ROOT_ELEMENT_NAME, \"voltageRegulatorOn\", sc.isVoltageRegulatorOn(), false,\n-                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n-        IidmXmlUtil.writeDoubleAttributeFromMinimumVersion(ROOT_ELEMENT_NAME, \"targetV\", sc.getTargetV(),\n-                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n-        IidmXmlUtil.writeDoubleAttributeFromMinimumVersion(ROOT_ELEMENT_NAME, \"targetDeadband\",\n-                sc.getTargetDeadband(), IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n         writeNodeOrBus(null, sc.getTerminal(), context);\n         writePQ(null, sc.getTerminal(), context.getWriter());\n     }\n \n-    @Override\n-    protected void writeSubElements(ShuntCompensator sc, VoltageLevel vl, NetworkXmlWriterContext context) throws XMLStreamException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608d6a339c0375845ef47e9a710666b25566a2f6"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgzNDM2NQ==", "bodyText": "It is written in super.readSubElements(...) from AbstractIdentifiableXml", "url": "https://github.com/powsybl/powsybl-core/pull/1244#discussion_r404834365", "createdAt": "2020-04-07T14:03:37Z", "author": {"login": "miovd"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/ShuntXml.java", "diffHunk": "@@ -22,67 +22,53 @@\n \n     static final String ROOT_ELEMENT_NAME = \"shunt\";\n \n-    private static final String REGULATING_TERMINAL = \"regulatingTerminal\";\n-\n     @Override\n     protected String getRootElementName() {\n         return ROOT_ELEMENT_NAME;\n     }\n \n     @Override\n     protected boolean hasSubElements(ShuntCompensator sc) {\n-        return sc != sc.getRegulatingTerminal().getConnectable();\n+        return false;\n     }\n \n     @Override\n     protected void writeRootElementAttributes(ShuntCompensator sc, VoltageLevel vl, NetworkXmlWriterContext context) throws XMLStreamException {\n         if (ShuntCompensatorModelType.NON_LINEAR.equals(sc.getModelType())) {\n-            throw new PowsyblException(\"Non linear shunt not yet supported\");\n+            throw new PowsyblException(\"Non linear shunts are not supported for IIDM-XML version \" + context.getVersion().toString(\".\")\n+                    + \". IIDM-XML version should be >= 1.2\");\n         }\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(sc.isVoltageRegulatorOn(), ROOT_ELEMENT_NAME, \"voltageRegulatorOn\",\n+                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(!Double.isNaN(sc.getTargetV()), ROOT_ELEMENT_NAME, \"targetV\",\n+                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(!Double.isNaN(sc.getTargetDeadband()), ROOT_ELEMENT_NAME, \"targetDeadband\",\n+                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(sc.getRegulatingTerminal().getConnectable() != sc, ROOT_ELEMENT_NAME, \"regulatingTerminal\",\n+                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n         XmlUtil.writeDouble(\"bPerSection\", sc.getModel(ShuntCompensatorLinearModel.class).getbPerSection(), context.getWriter());\n         context.getWriter().writeAttribute(\"maximumSectionCount\", Integer.toString(sc.getMaximumSectionCount()));\n         context.getWriter().writeAttribute(\"currentSectionCount\", Integer.toString(sc.getCurrentSectionCount()));\n-        IidmXmlUtil.writeBooleanAttributeFromMinimumVersion(ROOT_ELEMENT_NAME, \"voltageRegulatorOn\", sc.isVoltageRegulatorOn(), false,\n-                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n-        IidmXmlUtil.writeDoubleAttributeFromMinimumVersion(ROOT_ELEMENT_NAME, \"targetV\", sc.getTargetV(),\n-                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n-        IidmXmlUtil.writeDoubleAttributeFromMinimumVersion(ROOT_ELEMENT_NAME, \"targetDeadband\",\n-                sc.getTargetDeadband(), IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n         writeNodeOrBus(null, sc.getTerminal(), context);\n         writePQ(null, sc.getTerminal(), context.getWriter());\n     }\n \n-    @Override\n-    protected void writeSubElements(ShuntCompensator sc, VoltageLevel vl, NetworkXmlWriterContext context) throws XMLStreamException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyNzk3NQ=="}, "originalCommit": {"oid": "608d6a339c0375845ef47e9a710666b25566a2f6"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDg0ODkwOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/ShuntXml.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODoyNjowMVrOGB4jYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTowMjo1M1rOGCH-gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyODMyMQ==", "bodyText": "in IIDM v1.2, we should not use this class anymore?", "url": "https://github.com/powsybl/powsybl-core/pull/1244#discussion_r404628321", "createdAt": "2020-04-07T08:26:01Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/ShuntXml.java", "diffHunk": "@@ -22,67 +22,53 @@\n \n     static final String ROOT_ELEMENT_NAME = \"shunt\";\n \n-    private static final String REGULATING_TERMINAL = \"regulatingTerminal\";\n-\n     @Override\n     protected String getRootElementName() {\n         return ROOT_ELEMENT_NAME;\n     }\n \n     @Override\n     protected boolean hasSubElements(ShuntCompensator sc) {\n-        return sc != sc.getRegulatingTerminal().getConnectable();\n+        return false;\n     }\n \n     @Override\n     protected void writeRootElementAttributes(ShuntCompensator sc, VoltageLevel vl, NetworkXmlWriterContext context) throws XMLStreamException {\n         if (ShuntCompensatorModelType.NON_LINEAR.equals(sc.getModelType())) {\n-            throw new PowsyblException(\"Non linear shunt not yet supported\");\n+            throw new PowsyblException(\"Non linear shunts are not supported for IIDM-XML version \" + context.getVersion().toString(\".\")\n+                    + \". IIDM-XML version should be >= 1.2\");\n         }\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(sc.isVoltageRegulatorOn(), ROOT_ELEMENT_NAME, \"voltageRegulatorOn\",\n+                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(!Double.isNaN(sc.getTargetV()), ROOT_ELEMENT_NAME, \"targetV\",\n+                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(!Double.isNaN(sc.getTargetDeadband()), ROOT_ELEMENT_NAME, \"targetDeadband\",\n+                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(sc.getRegulatingTerminal().getConnectable() != sc, ROOT_ELEMENT_NAME, \"regulatingTerminal\",\n+                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608d6a339c0375845ef47e9a710666b25566a2f6"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgzNTY5NA==", "bodyText": "These lines do not check the version, they check if the shunt is regulating/has a target value/has a regulating terminal/etc... and if it does, it throws an exception because it is not supported in serialization in version older than v1.2.", "url": "https://github.com/powsybl/powsybl-core/pull/1244#discussion_r404835694", "createdAt": "2020-04-07T14:05:31Z", "author": {"login": "miovd"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/ShuntXml.java", "diffHunk": "@@ -22,67 +22,53 @@\n \n     static final String ROOT_ELEMENT_NAME = \"shunt\";\n \n-    private static final String REGULATING_TERMINAL = \"regulatingTerminal\";\n-\n     @Override\n     protected String getRootElementName() {\n         return ROOT_ELEMENT_NAME;\n     }\n \n     @Override\n     protected boolean hasSubElements(ShuntCompensator sc) {\n-        return sc != sc.getRegulatingTerminal().getConnectable();\n+        return false;\n     }\n \n     @Override\n     protected void writeRootElementAttributes(ShuntCompensator sc, VoltageLevel vl, NetworkXmlWriterContext context) throws XMLStreamException {\n         if (ShuntCompensatorModelType.NON_LINEAR.equals(sc.getModelType())) {\n-            throw new PowsyblException(\"Non linear shunt not yet supported\");\n+            throw new PowsyblException(\"Non linear shunts are not supported for IIDM-XML version \" + context.getVersion().toString(\".\")\n+                    + \". IIDM-XML version should be >= 1.2\");\n         }\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(sc.isVoltageRegulatorOn(), ROOT_ELEMENT_NAME, \"voltageRegulatorOn\",\n+                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(!Double.isNaN(sc.getTargetV()), ROOT_ELEMENT_NAME, \"targetV\",\n+                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(!Double.isNaN(sc.getTargetDeadband()), ROOT_ELEMENT_NAME, \"targetDeadband\",\n+                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(sc.getRegulatingTerminal().getConnectable() != sc, ROOT_ELEMENT_NAME, \"regulatingTerminal\",\n+                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyODMyMQ=="}, "originalCommit": {"oid": "608d6a339c0375845ef47e9a710666b25566a2f6"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg0Mjc2OA==", "bodyText": "Hum... So you check that the Shunt (in V1.2) is compatible with an old version (the new attributes have the default value)? Do I understand well?", "url": "https://github.com/powsybl/powsybl-core/pull/1244#discussion_r404842768", "createdAt": "2020-04-07T14:14:56Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/ShuntXml.java", "diffHunk": "@@ -22,67 +22,53 @@\n \n     static final String ROOT_ELEMENT_NAME = \"shunt\";\n \n-    private static final String REGULATING_TERMINAL = \"regulatingTerminal\";\n-\n     @Override\n     protected String getRootElementName() {\n         return ROOT_ELEMENT_NAME;\n     }\n \n     @Override\n     protected boolean hasSubElements(ShuntCompensator sc) {\n-        return sc != sc.getRegulatingTerminal().getConnectable();\n+        return false;\n     }\n \n     @Override\n     protected void writeRootElementAttributes(ShuntCompensator sc, VoltageLevel vl, NetworkXmlWriterContext context) throws XMLStreamException {\n         if (ShuntCompensatorModelType.NON_LINEAR.equals(sc.getModelType())) {\n-            throw new PowsyblException(\"Non linear shunt not yet supported\");\n+            throw new PowsyblException(\"Non linear shunts are not supported for IIDM-XML version \" + context.getVersion().toString(\".\")\n+                    + \". IIDM-XML version should be >= 1.2\");\n         }\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(sc.isVoltageRegulatorOn(), ROOT_ELEMENT_NAME, \"voltageRegulatorOn\",\n+                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(!Double.isNaN(sc.getTargetV()), ROOT_ELEMENT_NAME, \"targetV\",\n+                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(!Double.isNaN(sc.getTargetDeadband()), ROOT_ELEMENT_NAME, \"targetDeadband\",\n+                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(sc.getRegulatingTerminal().getConnectable() != sc, ROOT_ELEMENT_NAME, \"regulatingTerminal\",\n+                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyODMyMQ=="}, "originalCommit": {"oid": "608d6a339c0375845ef47e9a710666b25566a2f6"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg4MTAyNA==", "bodyText": "Yes!", "url": "https://github.com/powsybl/powsybl-core/pull/1244#discussion_r404881024", "createdAt": "2020-04-07T15:02:53Z", "author": {"login": "miovd"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/ShuntXml.java", "diffHunk": "@@ -22,67 +22,53 @@\n \n     static final String ROOT_ELEMENT_NAME = \"shunt\";\n \n-    private static final String REGULATING_TERMINAL = \"regulatingTerminal\";\n-\n     @Override\n     protected String getRootElementName() {\n         return ROOT_ELEMENT_NAME;\n     }\n \n     @Override\n     protected boolean hasSubElements(ShuntCompensator sc) {\n-        return sc != sc.getRegulatingTerminal().getConnectable();\n+        return false;\n     }\n \n     @Override\n     protected void writeRootElementAttributes(ShuntCompensator sc, VoltageLevel vl, NetworkXmlWriterContext context) throws XMLStreamException {\n         if (ShuntCompensatorModelType.NON_LINEAR.equals(sc.getModelType())) {\n-            throw new PowsyblException(\"Non linear shunt not yet supported\");\n+            throw new PowsyblException(\"Non linear shunts are not supported for IIDM-XML version \" + context.getVersion().toString(\".\")\n+                    + \". IIDM-XML version should be >= 1.2\");\n         }\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(sc.isVoltageRegulatorOn(), ROOT_ELEMENT_NAME, \"voltageRegulatorOn\",\n+                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(!Double.isNaN(sc.getTargetV()), ROOT_ELEMENT_NAME, \"targetV\",\n+                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(!Double.isNaN(sc.getTargetDeadband()), ROOT_ELEMENT_NAME, \"targetDeadband\",\n+                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);\n+        IidmXmlUtil.assertMinimumVersionIfNotDefault(sc.getRegulatingTerminal().getConnectable() != sc, ROOT_ELEMENT_NAME, \"regulatingTerminal\",\n+                IidmXmlUtil.ErrorMessage.NOT_DEFAULT_NOT_SUPPORTED, IidmXmlVersion.V_1_2, context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyODMyMQ=="}, "originalCommit": {"oid": "608d6a339c0375845ef47e9a710666b25566a2f6"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDg1NDUxOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-xml-converter/src/main/resources/xsd/iidm_V1_2.xsd", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODoyNzoyNlrOGB4m9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDoxNTozM1rOGCFq8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyOTIzNw==", "bodyText": "As this class doesn't exist in Java, we should remove it from the XSD. What do you think?", "url": "https://github.com/powsybl/powsybl-core/pull/1244#discussion_r404629237", "createdAt": "2020-04-07T08:27:26Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/resources/xsd/iidm_V1_2.xsd", "diffHunk": "@@ -260,21 +261,43 @@\n             </xs:extension>\n         </xs:complexContent>\n     </xs:complexType>\n-    <xs:complexType name=\"ShuntCompensator\">\n+    <xs:complexType name=\"AbstractShuntCompensator\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608d6a339c0375845ef47e9a710666b25566a2f6"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgzNzMxNw==", "bodyText": "I can simply call it ShuntCompensator? On the other hand, the xsd is not equivalent to Java structure (the Java classes NonLinearShuntCompensator and LinearShuntCompensator do not exist for example). I called it abstract to make it clear it is not to be used directly as an XML object.", "url": "https://github.com/powsybl/powsybl-core/pull/1244#discussion_r404837317", "createdAt": "2020-04-07T14:07:47Z", "author": {"login": "miovd"}, "path": "iidm/iidm-xml-converter/src/main/resources/xsd/iidm_V1_2.xsd", "diffHunk": "@@ -260,21 +261,43 @@\n             </xs:extension>\n         </xs:complexContent>\n     </xs:complexType>\n-    <xs:complexType name=\"ShuntCompensator\">\n+    <xs:complexType name=\"AbstractShuntCompensator\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyOTIzNw=="}, "originalCommit": {"oid": "608d6a339c0375845ef47e9a710666b25566a2f6"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg0MzI0OA==", "bodyText": "ShuntCompensator seems more user friendly: keep in mind that the XSD is for the human.", "url": "https://github.com/powsybl/powsybl-core/pull/1244#discussion_r404843248", "createdAt": "2020-04-07T14:15:33Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/resources/xsd/iidm_V1_2.xsd", "diffHunk": "@@ -260,21 +261,43 @@\n             </xs:extension>\n         </xs:complexContent>\n     </xs:complexType>\n-    <xs:complexType name=\"ShuntCompensator\">\n+    <xs:complexType name=\"AbstractShuntCompensator\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyOTIzNw=="}, "originalCommit": {"oid": "608d6a339c0375845ef47e9a710666b25566a2f6"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 134, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}