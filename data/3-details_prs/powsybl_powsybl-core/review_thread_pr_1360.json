{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MTMzMDU4", "number": 1360, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzoyMzozNlrOEHdJiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDoyNjozNVrOEHg9Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjUzMDY0OnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CurrentLimitsMapping.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzoyMzozNlrOGm0uYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzo1MDowNlrOGm1hbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MjkxMg==", "bodyText": "The PATL seems to be mandatory in CGMES for all transformers and at both ends for a AC line. So I am not sure that it is safe just to replace them by infinite values. What do you think ?", "url": "https://github.com/powsybl/powsybl-core/pull/1360#discussion_r443362912", "createdAt": "2020-06-22T07:23:36Z", "author": {"login": "annetill"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CurrentLimitsMapping.java", "diffHunk": "@@ -32,10 +32,12 @@ public CurrentLimitsAdder getCurrentLimitsAdder(String id, Supplier<CurrentLimit\n     void addAll() {\n         for (Map.Entry<String, CurrentLimitsAdder> entry : adders.entrySet()) {\n             if (Double.isNaN(entry.getValue().getPermanentLimit())) {\n-                context.ignored(\"Operational Limit Set of \" + entry.getKey(), \"An operational limit set must at least contain one value for permanent limit.\");\n-            } else {\n-                entry.getValue().add();\n+                context.fixed(\"Operational Limit Set of \" + entry.getKey(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3672af0ac5b25057df97f5c87ac753ff2715cbd9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM3MDc1Ng==", "bodyText": "In theory, this is true, but it seems that in French networks, current TATL are assigned without PATL...", "url": "https://github.com/powsybl/powsybl-core/pull/1360#discussion_r443370756", "createdAt": "2020-06-22T07:39:58Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CurrentLimitsMapping.java", "diffHunk": "@@ -32,10 +32,12 @@ public CurrentLimitsAdder getCurrentLimitsAdder(String id, Supplier<CurrentLimit\n     void addAll() {\n         for (Map.Entry<String, CurrentLimitsAdder> entry : adders.entrySet()) {\n             if (Double.isNaN(entry.getValue().getPermanentLimit())) {\n-                context.ignored(\"Operational Limit Set of \" + entry.getKey(), \"An operational limit set must at least contain one value for permanent limit.\");\n-            } else {\n-                entry.getValue().add();\n+                context.fixed(\"Operational Limit Set of \" + entry.getKey(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MjkxMg=="}, "originalCommit": {"oid": "3672af0ac5b25057df97f5c87ac753ff2715cbd9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM3MTUxOQ==", "bodyText": "We can take the highest value of TATL as PATL though? It may be more correct that putting an infinite PATL", "url": "https://github.com/powsybl/powsybl-core/pull/1360#discussion_r443371519", "createdAt": "2020-06-22T07:41:28Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CurrentLimitsMapping.java", "diffHunk": "@@ -32,10 +32,12 @@ public CurrentLimitsAdder getCurrentLimitsAdder(String id, Supplier<CurrentLimit\n     void addAll() {\n         for (Map.Entry<String, CurrentLimitsAdder> entry : adders.entrySet()) {\n             if (Double.isNaN(entry.getValue().getPermanentLimit())) {\n-                context.ignored(\"Operational Limit Set of \" + entry.getKey(), \"An operational limit set must at least contain one value for permanent limit.\");\n-            } else {\n-                entry.getValue().add();\n+                context.fixed(\"Operational Limit Set of \" + entry.getKey(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MjkxMg=="}, "originalCommit": {"oid": "3672af0ac5b25057df97f5c87ac753ff2715cbd9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM3NTk4Mw==", "bodyText": "No, I was more thinking about a warning.", "url": "https://github.com/powsybl/powsybl-core/pull/1360#discussion_r443375983", "createdAt": "2020-06-22T07:50:06Z", "author": {"login": "annetill"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CurrentLimitsMapping.java", "diffHunk": "@@ -32,10 +32,12 @@ public CurrentLimitsAdder getCurrentLimitsAdder(String id, Supplier<CurrentLimit\n     void addAll() {\n         for (Map.Entry<String, CurrentLimitsAdder> entry : adders.entrySet()) {\n             if (Double.isNaN(entry.getValue().getPermanentLimit())) {\n-                context.ignored(\"Operational Limit Set of \" + entry.getKey(), \"An operational limit set must at least contain one value for permanent limit.\");\n-            } else {\n-                entry.getValue().add();\n+                context.fixed(\"Operational Limit Set of \" + entry.getKey(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MjkxMg=="}, "originalCommit": {"oid": "3672af0ac5b25057df97f5c87ac753ff2715cbd9"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzE1NDMxOnYy", "diffSide": "RIGHT", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CurrentLimitsMapping.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDoyNjozNVrOGm61pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTozNzo1MFrOGnhZZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ2MzA3OA==", "bodyText": "Are you sure this is a good workaround, specially if the CurrentLimits has TATL: The PATL has to be lesser or equal to the minimal TATL. Putting MAX_VALUE whould lead to never have violations on that equipment. From my point of view, if there are no TATL, we should not add a CurrentLimit for this object, and if there are TATL, we should pick the lowest one.", "url": "https://github.com/powsybl/powsybl-core/pull/1360#discussion_r443463078", "createdAt": "2020-06-22T10:26:35Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CurrentLimitsMapping.java", "diffHunk": "@@ -32,10 +32,12 @@ public CurrentLimitsAdder getCurrentLimitsAdder(String id, Supplier<CurrentLimit\n     void addAll() {\n         for (Map.Entry<String, CurrentLimitsAdder> entry : adders.entrySet()) {\n             if (Double.isNaN(entry.getValue().getPermanentLimit())) {\n-                context.ignored(\"Operational Limit Set of \" + entry.getKey(), \"An operational limit set must at least contain one value for permanent limit.\");\n-            } else {\n-                entry.getValue().add();\n+                context.fixed(\"Operational Limit Set of \" + entry.getKey(),\n+                        \"An operational limit set without permanent limit is considered with infinite limit.\",\n+                        Double.NaN, Double.MAX_VALUE);\n+                entry.getValue().setPermanentLimit(Double.MAX_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3672af0ac5b25057df97f5c87ac753ff2715cbd9"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ4ODc3Mg==", "bodyText": "The PATL has to be lesser or equal to the minimal TATL\n\nYes, I was wondering that as well... For most current limits in the French networks, the PATL seems to be equals to the minimal TATL. Maybe we should do that? But I'm not sure about putting an arbitrary value, I would prefer to put an undefined/infinite value (even if it has no electrical sense).", "url": "https://github.com/powsybl/powsybl-core/pull/1360#discussion_r443488772", "createdAt": "2020-06-22T11:19:40Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CurrentLimitsMapping.java", "diffHunk": "@@ -32,10 +32,12 @@ public CurrentLimitsAdder getCurrentLimitsAdder(String id, Supplier<CurrentLimit\n     void addAll() {\n         for (Map.Entry<String, CurrentLimitsAdder> entry : adders.entrySet()) {\n             if (Double.isNaN(entry.getValue().getPermanentLimit())) {\n-                context.ignored(\"Operational Limit Set of \" + entry.getKey(), \"An operational limit set must at least contain one value for permanent limit.\");\n-            } else {\n-                entry.getValue().add();\n+                context.fixed(\"Operational Limit Set of \" + entry.getKey(),\n+                        \"An operational limit set without permanent limit is considered with infinite limit.\",\n+                        Double.NaN, Double.MAX_VALUE);\n+                entry.getValue().setPermanentLimit(Double.MAX_VALUE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ2MzA3OA=="}, "originalCommit": {"oid": "3672af0ac5b25057df97f5c87ac753ff2715cbd9"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYzNzY4MQ==", "bodyText": "This is the definition of PATL and TATL, but maybe it's not strictly respected. Honestly, instead of setting an infinite value, don't create a currentLimits: the behavior would be the same, and you don't create non sense data :)", "url": "https://github.com/powsybl/powsybl-core/pull/1360#discussion_r443637681", "createdAt": "2020-06-22T15:19:55Z", "author": {"login": "mathbagu"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CurrentLimitsMapping.java", "diffHunk": "@@ -32,10 +32,12 @@ public CurrentLimitsAdder getCurrentLimitsAdder(String id, Supplier<CurrentLimit\n     void addAll() {\n         for (Map.Entry<String, CurrentLimitsAdder> entry : adders.entrySet()) {\n             if (Double.isNaN(entry.getValue().getPermanentLimit())) {\n-                context.ignored(\"Operational Limit Set of \" + entry.getKey(), \"An operational limit set must at least contain one value for permanent limit.\");\n-            } else {\n-                entry.getValue().add();\n+                context.fixed(\"Operational Limit Set of \" + entry.getKey(),\n+                        \"An operational limit set without permanent limit is considered with infinite limit.\",\n+                        Double.NaN, Double.MAX_VALUE);\n+                entry.getValue().setPermanentLimit(Double.MAX_VALUE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ2MzA3OA=="}, "originalCommit": {"oid": "3672af0ac5b25057df97f5c87ac753ff2715cbd9"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5NDgyMQ==", "bodyText": "I modified to take the lowest available TATL when no PATL is defined (when there is no TATL and no PATL, no current limit is created). Is it okay for you?", "url": "https://github.com/powsybl/powsybl-core/pull/1360#discussion_r444094821", "createdAt": "2020-06-23T09:37:50Z", "author": {"login": "miovd"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CurrentLimitsMapping.java", "diffHunk": "@@ -32,10 +32,12 @@ public CurrentLimitsAdder getCurrentLimitsAdder(String id, Supplier<CurrentLimit\n     void addAll() {\n         for (Map.Entry<String, CurrentLimitsAdder> entry : adders.entrySet()) {\n             if (Double.isNaN(entry.getValue().getPermanentLimit())) {\n-                context.ignored(\"Operational Limit Set of \" + entry.getKey(), \"An operational limit set must at least contain one value for permanent limit.\");\n-            } else {\n-                entry.getValue().add();\n+                context.fixed(\"Operational Limit Set of \" + entry.getKey(),\n+                        \"An operational limit set without permanent limit is considered with infinite limit.\",\n+                        Double.NaN, Double.MAX_VALUE);\n+                entry.getValue().setPermanentLimit(Double.MAX_VALUE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ2MzA3OA=="}, "originalCommit": {"oid": "3672af0ac5b25057df97f5c87ac753ff2715cbd9"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 27, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}