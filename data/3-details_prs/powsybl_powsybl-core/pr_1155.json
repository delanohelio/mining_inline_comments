{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNzU2MjEw", "number": 1155, "title": "Modify the sensitivity API to allow for post-contingency sensitivity analyses", "bodyText": "Please check if the PR fulfills these requirements\n\n The commit message follows our guidelines\n Tests for the changes have been added (for bug fixes / features)\n Docs have been added / updated (for bug fixes / features)\n\nWhat kind of change does this PR introduce?\nNew feature: modification of the sensitivity api to make it possible to perform post-contingency sensitivity analyses based on Hades2. The HADES2 sensitivity provider used with Powsybl offers the possibility to calculate the sensitivity on a set of contingencies besides the N state. The computation is launched only once, but the solver itself modifies the matrix for each state of the network to output a full set of results.\nWhat is the current behavior?\nAt the moment it is only possible to run single sensitivity analyses through Powsybl. It returns, besides its status and some stats on the computation itself, all the sensitivity values for each factor (combination of a monitoredBranch and a specific equipment or group of equipments) on the network in state N.\nWhat is the new behavior (if this is a feature change)?\nWith this change it is possible to run sensitivity analyses on state N and post-contingency states, based on the Hades2 provider, by passing a list of contingencies as an additional argument. It runs a single calculation, but that calculation will compute the sensitivity factors for the N state and on a set of N-1 network states. The full set of results then consists of :\n\nthe list of sensitivity values in N\nthe lists of sensitivity values for each N-1 situation\nsome metadata (status, stats, logs)", "createdAt": "2020-02-11T16:29:27Z", "url": "https://github.com/powsybl/powsybl-core/pull/1155", "merged": true, "mergeCommit": {"oid": "065014a799ff4483a94fa02a8e538575a4ff5296"}, "closed": true, "closedAt": "2020-03-19T15:08:05Z", "author": {"login": "agnesLeroy"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIbBQSgBqjMwNzc4MTM3NDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPM8negBqjMxNDU4NDM5OTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "36fa75dc16ea91338d4056093a3f9e9f7e6dac25", "author": {"user": null}, "url": "https://github.com/powsybl/powsybl-core/commit/36fa75dc16ea91338d4056093a3f9e9f7e6dac25", "committedDate": "2020-02-11T16:20:50Z", "message": "Change sensi back to what it was, and create systematic sensi\n\nThey are identical except that the systematic sensi takes contingencies as an input\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>"}, "afterCommit": {"oid": "8ecf28768b2008b2d29fbaab27e7a53d5e6bc533", "author": {"user": null}, "url": "https://github.com/powsybl/powsybl-core/commit/8ecf28768b2008b2d29fbaab27e7a53d5e6bc533", "committedDate": "2020-02-27T13:05:11Z", "message": "Try to ensure backward compatibility of the sensi api\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8ecf28768b2008b2d29fbaab27e7a53d5e6bc533", "author": {"user": null}, "url": "https://github.com/powsybl/powsybl-core/commit/8ecf28768b2008b2d29fbaab27e7a53d5e6bc533", "committedDate": "2020-02-27T13:05:11Z", "message": "Try to ensure backward compatibility of the sensi api\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>"}, "afterCommit": {"oid": "b7ee0d89644b7c54d0dcc448a9c4321f4c4268be", "author": {"user": null}, "url": "https://github.com/powsybl/powsybl-core/commit/b7ee0d89644b7c54d0dcc448a9c4321f4c4268be", "committedDate": "2020-02-27T13:08:01Z", "message": "Try to ensure backward compatibility of the sensi api\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ff035d84b4e4d53c0704a9199a30ef4e68c3954d", "author": {"user": null}, "url": "https://github.com/powsybl/powsybl-core/commit/ff035d84b4e4d53c0704a9199a30ef4e68c3954d", "committedDate": "2020-02-27T17:01:35Z", "message": "Fix checkstyle errors\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>"}, "afterCommit": {"oid": "c00a0304e7d791f14e9b8f5a374f2e5c043836ec", "author": {"user": null}, "url": "https://github.com/powsybl/powsybl-core/commit/c00a0304e7d791f14e9b8f5a374f2e5c043836ec", "committedDate": "2020-02-28T10:32:45Z", "message": "Modify the sensitivity results to output the sensitivity values for each contingency\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c00a0304e7d791f14e9b8f5a374f2e5c043836ec", "author": {"user": null}, "url": "https://github.com/powsybl/powsybl-core/commit/c00a0304e7d791f14e9b8f5a374f2e5c043836ec", "committedDate": "2020-02-28T10:32:45Z", "message": "Modify the sensitivity results to output the sensitivity values for each contingency\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>"}, "afterCommit": {"oid": "ba6bcdba1112434ccec229cc263daf9b9bf3a9b3", "author": {"user": null}, "url": "https://github.com/powsybl/powsybl-core/commit/ba6bcdba1112434ccec229cc263daf9b9bf3a9b3", "committedDate": "2020-02-28T10:34:53Z", "message": "Modify the sensitivity results to output the sensitivity values for each contingency\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ba6bcdba1112434ccec229cc263daf9b9bf3a9b3", "author": {"user": null}, "url": "https://github.com/powsybl/powsybl-core/commit/ba6bcdba1112434ccec229cc263daf9b9bf3a9b3", "committedDate": "2020-02-28T10:34:53Z", "message": "Modify the sensitivity results to output the sensitivity values for each contingency\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>"}, "afterCommit": {"oid": "e2e45b9f0f4ca15892f5e6191e307210d71f0d82", "author": {"user": null}, "url": "https://github.com/powsybl/powsybl-core/commit/e2e45b9f0f4ca15892f5e6191e307210d71f0d82", "committedDate": "2020-03-02T14:08:10Z", "message": "Add a systematic sensitivity test\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e2e45b9f0f4ca15892f5e6191e307210d71f0d82", "author": {"user": null}, "url": "https://github.com/powsybl/powsybl-core/commit/e2e45b9f0f4ca15892f5e6191e307210d71f0d82", "committedDate": "2020-03-02T14:08:10Z", "message": "Add a systematic sensitivity test\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>"}, "afterCommit": {"oid": "76d007a4eb878fc5c1d1d38ae81686d988a1c040", "author": {"user": null}, "url": "https://github.com/powsybl/powsybl-core/commit/76d007a4eb878fc5c1d1d38ae81686d988a1c040", "committedDate": "2020-03-02T14:29:53Z", "message": "Add a systematic sensitivity test\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "76d007a4eb878fc5c1d1d38ae81686d988a1c040", "author": {"user": null}, "url": "https://github.com/powsybl/powsybl-core/commit/76d007a4eb878fc5c1d1d38ae81686d988a1c040", "committedDate": "2020-03-02T14:29:53Z", "message": "Add a systematic sensitivity test\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>"}, "afterCommit": {"oid": "319b97a8f7009bd4e6f19f722082c0af03058211", "author": {"user": null}, "url": "https://github.com/powsybl/powsybl-core/commit/319b97a8f7009bd4e6f19f722082c0af03058211", "committedDate": "2020-03-02T14:40:23Z", "message": "Add a systematic sensitivity test\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "83e8782f523c24294f1d01005bc29663d3876799", "author": {"user": null}, "url": "https://github.com/powsybl/powsybl-core/commit/83e8782f523c24294f1d01005bc29663d3876799", "committedDate": "2020-03-02T16:49:34Z", "message": "Remove wrongly used Deprecated annotation\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>"}, "afterCommit": {"oid": "2290faa3a04182c0ab25a5d66ca37d6a42946def", "author": {"user": null}, "url": "https://github.com/powsybl/powsybl-core/commit/2290faa3a04182c0ab25a5d66ca37d6a42946def", "committedDate": "2020-03-02T17:02:29Z", "message": "Refactor the CSV exporter: add tests on contingency results, avoid duplicated code, and fix the getComment function\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4ODU2MjIw", "url": "https://github.com/powsybl/powsybl-core/pull/1155#pullrequestreview-368856220", "createdAt": "2020-03-04T15:07:27Z", "commit": {"oid": "2290faa3a04182c0ab25a5d66ca37d6a42946def"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNTowNzoyN1rOFxw8-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNTo0NzowM1rOFxyqow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcyNjU4NA==", "bodyText": "Replace com.powsybl by ${project.groupId}", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387726584", "createdAt": "2020-03-04T15:07:27Z", "author": {"login": "MioRtia"}, "path": "sensitivity-api/pom.xml", "diffHunk": "@@ -93,6 +93,12 @@\n             <version>${project.version}</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>com.powsybl</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2290faa3a04182c0ab25a5d66ca37d6a42946def"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcyNjkwNQ==", "bodyText": "Why is it in compile scope?", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387726905", "createdAt": "2020-03-04T15:08:00Z", "author": {"login": "MioRtia"}, "path": "sensitivity-api/pom.xml", "diffHunk": "@@ -93,6 +93,12 @@\n             <version>${project.version}</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>com.powsybl</groupId>\n+            <artifactId>powsybl-contingency-api</artifactId>\n+            <version>${project.version}</version>\n+            <scope>compile</scope>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2290faa3a04182c0ab25a5d66ca37d6a42946def"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcyOTg0NA==", "bodyText": "add a default implementation to prevent breaking change here", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387729844", "createdAt": "2020-03-04T15:12:19Z", "author": {"login": "MioRtia"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputation.java", "diffHunk": "@@ -28,12 +29,24 @@\n  */\n public interface SensitivityComputation extends Versionable {\n     /**\n-     * Run an asynchronous sensitivity computation job using given parameters and input provider\n+     * Run an asynchronous systematic sensitivity computation job using given parameters and input provider\n      *\n      * @param factorsProvider sensitivity factors provider for the computation\n+     * @param contingenciesProvider contingencies provider for the computation\n      * @param workingStateId id of the network base state for the computation\n      * @param sensiParameters sensitivity computation parameters\n-     * @return the sensitivity computation results\n+     * @return the sensitivity computation results in N and N-1\n+     */\n+    CompletableFuture<SensitivityComputationResults> run(SensitivityFactorsProvider factorsProvider, ContingenciesProvider contingenciesProvider, String workingStateId, SensitivityComputationParameters sensiParameters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2290faa3a04182c0ab25a5d66ca37d6a42946def"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzczNTA4Nw==", "bodyText": "Not sure having this field is a good idea. It could lead to inconsistent data (e.g. empty contingencies map and contingenciesPresent as true or non-empty contingencies map and contingenciesPresent as false. Why do you need this field? Isn't it enough to check that sensitivityValueContingencies is empty or not?", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387735087", "createdAt": "2020-03-04T15:19:46Z", "author": {"login": "MioRtia"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "diffHunk": "@@ -41,23 +51,34 @@\n     @JsonProperty(\"values\")\n     private final List<SensitivityValue> sensitivityValues;\n \n+    @JsonProperty(\"contingencies present\")\n+    private final boolean contingenciesPresent;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2290faa3a04182c0ab25a5d66ca37d6a42946def"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzczNjQ2OQ==", "bodyText": "Same remark as above. This method can return !sensitivityValuesContingencies.isEmpty()", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387736469", "createdAt": "2020-03-04T15:21:47Z", "author": {"login": "MioRtia"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "diffHunk": "@@ -90,61 +111,142 @@ public String getLogs() {\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values.\n+     * Get a collection of all the sensitivity values in state N.\n      *\n-     * @return a collection of all the sensitivity values.\n+     * @return a collection of all the sensitivity values in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValues() {\n         return Collections.unmodifiableCollection(sensitivityValues);\n     }\n \n+\n     /**\n-     * Get a collection of all the sensitivity values associated with given function.\n+     * Get a collection of all the sensitivity values associated with given function in state N.\n      *\n      * @param function sensitivity function\n-     * @return a collection of all the sensitivity values associated with given function\n+     * @return a collection of all the sensitivity values associated with given function in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function) {\n         return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values associated with given variable\n+     * Get a collection of all the sensitivity values associated with given variable in state N.\n      *\n      * @param variable sensitivity variable\n-     * @return a collection of all the sensitivity values associated with given variable\n+     * @return a collection of all the sensitivity values associated with given variable in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable) {\n         return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Get the sensitivity value associated with given function and given variable\n+     * Get the sensitivity value associated with given function and given variable in state N.\n      *\n      * @param function sensitivity function\n      * @param variable sensitivity variable\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFunction function, SensitivityVariable variable) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n-            && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n+                && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", function.getId(), variable.getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, function.getId(), variable.getId()));\n         }\n         return returnValue.get();\n     }\n \n     /**\n-     * Get the sensitivity value associated with given factor\n+     * Get the sensitivity value associated with given factor in state N.\n      *\n      * @param factor sensitivity factor\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFactor factor) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().equals(factor)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", factor.getFunction().getId(), factor.getVariable().getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, factor.getFunction().getId(), factor.getVariable().getId()));\n         }\n         return returnValue.get();\n     }\n+\n+    /**\n+     * Get the status of the presence of contingencies\n+     *\n+     * @return true if the computation contains contingencies, false otherwise\n+     */\n+    public boolean contingenciesArePresent() {\n+        return contingenciesPresent;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2290faa3a04182c0ab25a5d66ca37d6a42946def"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzczNzI5MQ==", "bodyText": "Return a copy of the map and not the map itself to prevent unsafe changes:\nreturn Collections.unmodifiableMap(sensitivityValuesContingencies);", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387737291", "createdAt": "2020-03-04T15:23:04Z", "author": {"login": "MioRtia"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "diffHunk": "@@ -90,61 +111,142 @@ public String getLogs() {\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values.\n+     * Get a collection of all the sensitivity values in state N.\n      *\n-     * @return a collection of all the sensitivity values.\n+     * @return a collection of all the sensitivity values in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValues() {\n         return Collections.unmodifiableCollection(sensitivityValues);\n     }\n \n+\n     /**\n-     * Get a collection of all the sensitivity values associated with given function.\n+     * Get a collection of all the sensitivity values associated with given function in state N.\n      *\n      * @param function sensitivity function\n-     * @return a collection of all the sensitivity values associated with given function\n+     * @return a collection of all the sensitivity values associated with given function in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function) {\n         return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values associated with given variable\n+     * Get a collection of all the sensitivity values associated with given variable in state N.\n      *\n      * @param variable sensitivity variable\n-     * @return a collection of all the sensitivity values associated with given variable\n+     * @return a collection of all the sensitivity values associated with given variable in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable) {\n         return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Get the sensitivity value associated with given function and given variable\n+     * Get the sensitivity value associated with given function and given variable in state N.\n      *\n      * @param function sensitivity function\n      * @param variable sensitivity variable\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFunction function, SensitivityVariable variable) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n-            && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n+                && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", function.getId(), variable.getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, function.getId(), variable.getId()));\n         }\n         return returnValue.get();\n     }\n \n     /**\n-     * Get the sensitivity value associated with given factor\n+     * Get the sensitivity value associated with given factor in state N.\n      *\n      * @param factor sensitivity factor\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFactor factor) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().equals(factor)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", factor.getFunction().getId(), factor.getVariable().getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, factor.getFunction().getId(), factor.getVariable().getId()));\n         }\n         return returnValue.get();\n     }\n+\n+    /**\n+     * Get the status of the presence of contingencies\n+     *\n+     * @return true if the computation contains contingencies, false otherwise\n+     */\n+    public boolean contingenciesArePresent() {\n+        return contingenciesPresent;\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values for all contingencies.\n+     *\n+     * @return a collection of all the sensitivity values for all contingencies.\n+     */\n+    public Map<String, List<SensitivityValue>> getSensitivityValuesContingencies() {\n+        return sensitivityValuesContingencies;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2290faa3a04182c0ab25a5d66ca37d6a42946def"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzczODI4OQ==", "bodyText": "Don't set directly the map but set as copy to prevent unsafe changes:\nthis.sensitivityValuesContingencies = Collections.unmodifiableMap(sensitivityValuesContingencies);", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387738289", "createdAt": "2020-03-04T15:24:31Z", "author": {"login": "MioRtia"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "diffHunk": "@@ -41,23 +51,34 @@\n     @JsonProperty(\"values\")\n     private final List<SensitivityValue> sensitivityValues;\n \n+    @JsonProperty(\"contingencies present\")\n+    private final boolean contingenciesPresent;\n+\n+    @JsonProperty(\"contingencies values\")\n+    private final Map<String, List<SensitivityValue>> sensitivityValuesContingencies;\n+\n     /**\n      * Hades2 sensitivity computation results\n      *\n      * @param ok true if the computation succeeded, false otherwise\n      * @param metrics map of metrics about the computation\n      * @param logs computation logs\n-     * @param values result values of the senstivity computation. Must be non null.\n+     * @param sensitivityValues result values of the senstivity computation in N\n+     * @param sensitivityValuesContingencies result values of the senstivity computation on contingencies\n      */\n     @JsonCreator\n     public SensitivityComputationResults(@JsonProperty(\"ok\") boolean ok,\n                                          @JsonProperty(\"metrics\") Map<String, String> metrics,\n                                          @JsonProperty(\"logs\") String logs,\n-                                         @JsonProperty(\"values\") List<SensitivityValue> values) {\n+                                         @JsonProperty(\"values\") List<SensitivityValue> sensitivityValues,\n+                                         @JsonProperty(\"contingencies present\") boolean contingenciesPresent,\n+                                         @JsonProperty(\"contingencyId values\") Map<String, List<SensitivityValue>> sensitivityValuesContingencies) {\n         this.ok = ok;\n         this.metrics = Objects.requireNonNull(metrics);\n         this.logs = Objects.requireNonNull(logs);\n-        this.sensitivityValues = Objects.requireNonNull(values);\n+        this.sensitivityValues = Objects.requireNonNull(sensitivityValues);\n+        this.contingenciesPresent = contingenciesPresent;\n+        this.sensitivityValuesContingencies = sensitivityValuesContingencies;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2290faa3a04182c0ab25a5d66ca37d6a42946def"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzczOTAwMw==", "bodyText": "Indent to make it more readable:\nsensitivityValuesContingencies.get(contingencyId).stream()\n     .filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable))\n     .collect(Collectors.toList());", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387739003", "createdAt": "2020-03-04T15:25:28Z", "author": {"login": "MioRtia"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "diffHunk": "@@ -90,61 +111,142 @@ public String getLogs() {\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values.\n+     * Get a collection of all the sensitivity values in state N.\n      *\n-     * @return a collection of all the sensitivity values.\n+     * @return a collection of all the sensitivity values in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValues() {\n         return Collections.unmodifiableCollection(sensitivityValues);\n     }\n \n+\n     /**\n-     * Get a collection of all the sensitivity values associated with given function.\n+     * Get a collection of all the sensitivity values associated with given function in state N.\n      *\n      * @param function sensitivity function\n-     * @return a collection of all the sensitivity values associated with given function\n+     * @return a collection of all the sensitivity values associated with given function in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function) {\n         return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values associated with given variable\n+     * Get a collection of all the sensitivity values associated with given variable in state N.\n      *\n      * @param variable sensitivity variable\n-     * @return a collection of all the sensitivity values associated with given variable\n+     * @return a collection of all the sensitivity values associated with given variable in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable) {\n         return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Get the sensitivity value associated with given function and given variable\n+     * Get the sensitivity value associated with given function and given variable in state N.\n      *\n      * @param function sensitivity function\n      * @param variable sensitivity variable\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFunction function, SensitivityVariable variable) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n-            && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n+                && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", function.getId(), variable.getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, function.getId(), variable.getId()));\n         }\n         return returnValue.get();\n     }\n \n     /**\n-     * Get the sensitivity value associated with given factor\n+     * Get the sensitivity value associated with given factor in state N.\n      *\n      * @param factor sensitivity factor\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFactor factor) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().equals(factor)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", factor.getFunction().getId(), factor.getVariable().getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, factor.getFunction().getId(), factor.getVariable().getId()));\n         }\n         return returnValue.get();\n     }\n+\n+    /**\n+     * Get the status of the presence of contingencies\n+     *\n+     * @return true if the computation contains contingencies, false otherwise\n+     */\n+    public boolean contingenciesArePresent() {\n+        return contingenciesPresent;\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values for all contingencies.\n+     *\n+     * @return a collection of all the sensitivity values for all contingencies.\n+     */\n+    public Map<String, List<SensitivityValue>> getSensitivityValuesContingencies() {\n+        return sensitivityValuesContingencies;\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values associated with given function\n+     * for a specific contingency.\n+     *\n+     * @param function sensitivity function\n+     * @param contingencyId the ID of the considered contingency\n+     * @return a collection of all the sensitivity values associated with given function for the given contingencyId\n+     */\n+    public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function, String contingencyId) {\n+        return sensitivityValuesContingencies.get(contingencyId).stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values associated with given variable\n+     * for a specific contingency.\n+     *\n+     * @param variable sensitivity variable\n+     * @param contingencyId the ID of the considered contingency\n+     * @return a collection of all the sensitivity values associated with given variable\n+     */\n+    public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable, String contingencyId) {\n+        return sensitivityValuesContingencies.get(contingencyId).stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable)).collect(Collectors.toList());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2290faa3a04182c0ab25a5d66ca37d6a42946def"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc0MDQzNw==", "bodyText": "You can simplify this code:\nreturn sensitivityValuesContingencies.get(contingencyId).stream()\n    .filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n                && sensitivityValue.getFactor().getVariable().equals(variable))\n    .findFirst()\n    .orElseThrow(() -> new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s at contingencyId %s.\", function.getId(), variable.getId(), contingencyId)));", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387740437", "createdAt": "2020-03-04T15:27:24Z", "author": {"login": "MioRtia"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "diffHunk": "@@ -90,61 +111,142 @@ public String getLogs() {\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values.\n+     * Get a collection of all the sensitivity values in state N.\n      *\n-     * @return a collection of all the sensitivity values.\n+     * @return a collection of all the sensitivity values in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValues() {\n         return Collections.unmodifiableCollection(sensitivityValues);\n     }\n \n+\n     /**\n-     * Get a collection of all the sensitivity values associated with given function.\n+     * Get a collection of all the sensitivity values associated with given function in state N.\n      *\n      * @param function sensitivity function\n-     * @return a collection of all the sensitivity values associated with given function\n+     * @return a collection of all the sensitivity values associated with given function in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function) {\n         return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values associated with given variable\n+     * Get a collection of all the sensitivity values associated with given variable in state N.\n      *\n      * @param variable sensitivity variable\n-     * @return a collection of all the sensitivity values associated with given variable\n+     * @return a collection of all the sensitivity values associated with given variable in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable) {\n         return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Get the sensitivity value associated with given function and given variable\n+     * Get the sensitivity value associated with given function and given variable in state N.\n      *\n      * @param function sensitivity function\n      * @param variable sensitivity variable\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFunction function, SensitivityVariable variable) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n-            && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n+                && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", function.getId(), variable.getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, function.getId(), variable.getId()));\n         }\n         return returnValue.get();\n     }\n \n     /**\n-     * Get the sensitivity value associated with given factor\n+     * Get the sensitivity value associated with given factor in state N.\n      *\n      * @param factor sensitivity factor\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFactor factor) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().equals(factor)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", factor.getFunction().getId(), factor.getVariable().getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, factor.getFunction().getId(), factor.getVariable().getId()));\n         }\n         return returnValue.get();\n     }\n+\n+    /**\n+     * Get the status of the presence of contingencies\n+     *\n+     * @return true if the computation contains contingencies, false otherwise\n+     */\n+    public boolean contingenciesArePresent() {\n+        return contingenciesPresent;\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values for all contingencies.\n+     *\n+     * @return a collection of all the sensitivity values for all contingencies.\n+     */\n+    public Map<String, List<SensitivityValue>> getSensitivityValuesContingencies() {\n+        return sensitivityValuesContingencies;\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values associated with given function\n+     * for a specific contingency.\n+     *\n+     * @param function sensitivity function\n+     * @param contingencyId the ID of the considered contingency\n+     * @return a collection of all the sensitivity values associated with given function for the given contingencyId\n+     */\n+    public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function, String contingencyId) {\n+        return sensitivityValuesContingencies.get(contingencyId).stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values associated with given variable\n+     * for a specific contingency.\n+     *\n+     * @param variable sensitivity variable\n+     * @param contingencyId the ID of the considered contingency\n+     * @return a collection of all the sensitivity values associated with given variable\n+     */\n+    public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable, String contingencyId) {\n+        return sensitivityValuesContingencies.get(contingencyId).stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable)).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Get the sensitivity value associated with given function and given variable for a specific contingency.\n+     *\n+     * @param function sensitivity function\n+     * @param variable sensitivity variable\n+     * @param contingencyId the ID of the considered contingency\n+     * @return the sensitivity value associated with given function and given variable\n+     */\n+    public SensitivityValue getSensitivityValue(SensitivityFunction function, SensitivityVariable variable, String contingencyId) {\n+        Optional<SensitivityValue> returnValue;\n+        returnValue = sensitivityValuesContingencies.get(contingencyId).stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n+                && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n+        if (!returnValue.isPresent()) {\n+            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s at contingencyId %s.\", function.getId(), variable.getId(), contingencyId));\n+        }\n+        return returnValue.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2290faa3a04182c0ab25a5d66ca37d6a42946def"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc0MDgyMg==", "bodyText": "Same as above, this code can be simplified. (Code of other similar methods of this class can be simplified as well)", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387740822", "createdAt": "2020-03-04T15:27:54Z", "author": {"login": "MioRtia"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "diffHunk": "@@ -90,61 +111,142 @@ public String getLogs() {\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values.\n+     * Get a collection of all the sensitivity values in state N.\n      *\n-     * @return a collection of all the sensitivity values.\n+     * @return a collection of all the sensitivity values in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValues() {\n         return Collections.unmodifiableCollection(sensitivityValues);\n     }\n \n+\n     /**\n-     * Get a collection of all the sensitivity values associated with given function.\n+     * Get a collection of all the sensitivity values associated with given function in state N.\n      *\n      * @param function sensitivity function\n-     * @return a collection of all the sensitivity values associated with given function\n+     * @return a collection of all the sensitivity values associated with given function in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function) {\n         return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values associated with given variable\n+     * Get a collection of all the sensitivity values associated with given variable in state N.\n      *\n      * @param variable sensitivity variable\n-     * @return a collection of all the sensitivity values associated with given variable\n+     * @return a collection of all the sensitivity values associated with given variable in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable) {\n         return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Get the sensitivity value associated with given function and given variable\n+     * Get the sensitivity value associated with given function and given variable in state N.\n      *\n      * @param function sensitivity function\n      * @param variable sensitivity variable\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFunction function, SensitivityVariable variable) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n-            && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n+                && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", function.getId(), variable.getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, function.getId(), variable.getId()));\n         }\n         return returnValue.get();\n     }\n \n     /**\n-     * Get the sensitivity value associated with given factor\n+     * Get the sensitivity value associated with given factor in state N.\n      *\n      * @param factor sensitivity factor\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFactor factor) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().equals(factor)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", factor.getFunction().getId(), factor.getVariable().getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, factor.getFunction().getId(), factor.getVariable().getId()));\n         }\n         return returnValue.get();\n     }\n+\n+    /**\n+     * Get the status of the presence of contingencies\n+     *\n+     * @return true if the computation contains contingencies, false otherwise\n+     */\n+    public boolean contingenciesArePresent() {\n+        return contingenciesPresent;\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values for all contingencies.\n+     *\n+     * @return a collection of all the sensitivity values for all contingencies.\n+     */\n+    public Map<String, List<SensitivityValue>> getSensitivityValuesContingencies() {\n+        return sensitivityValuesContingencies;\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values associated with given function\n+     * for a specific contingency.\n+     *\n+     * @param function sensitivity function\n+     * @param contingencyId the ID of the considered contingency\n+     * @return a collection of all the sensitivity values associated with given function for the given contingencyId\n+     */\n+    public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function, String contingencyId) {\n+        return sensitivityValuesContingencies.get(contingencyId).stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values associated with given variable\n+     * for a specific contingency.\n+     *\n+     * @param variable sensitivity variable\n+     * @param contingencyId the ID of the considered contingency\n+     * @return a collection of all the sensitivity values associated with given variable\n+     */\n+    public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable, String contingencyId) {\n+        return sensitivityValuesContingencies.get(contingencyId).stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable)).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Get the sensitivity value associated with given function and given variable for a specific contingency.\n+     *\n+     * @param function sensitivity function\n+     * @param variable sensitivity variable\n+     * @param contingencyId the ID of the considered contingency\n+     * @return the sensitivity value associated with given function and given variable\n+     */\n+    public SensitivityValue getSensitivityValue(SensitivityFunction function, SensitivityVariable variable, String contingencyId) {\n+        Optional<SensitivityValue> returnValue;\n+        returnValue = sensitivityValuesContingencies.get(contingencyId).stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n+                && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n+        if (!returnValue.isPresent()) {\n+            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s at contingencyId %s.\", function.getId(), variable.getId(), contingencyId));\n+        }\n+        return returnValue.get();\n+    }\n+\n+    /**\n+     * Get the sensitivity value associated with given factor for a specific contingency\n+     *\n+     * @param factor sensitivity factor\n+     * @param contingencyId the ID of the considered contingency\n+     * @return the sensitivity value associated with given function and given variable\n+     */\n+    public SensitivityValue getSensitivityValue(SensitivityFactor factor, String contingencyId) {\n+        Optional<SensitivityValue> returnValue;\n+        returnValue = sensitivityValuesContingencies.get(contingencyId).stream().filter(sensitivityValue -> sensitivityValue.getFactor().equals(factor)).findAny();\n+        if (!returnValue.isPresent()) {\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, factor.getFunction().getId(), factor.getVariable().getId()));\n+        }\n+        return returnValue.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2290faa3a04182c0ab25a5d66ca37d6a42946def"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc0MjcwNg==", "bodyText": "Don't set directly the list but set as copy to prevent unsafe changes:\nthis.sensitivityValues = Collections.unmodifiableList(Objects.requireNonNull(sensitivityValues));", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387742706", "createdAt": "2020-03-04T15:30:09Z", "author": {"login": "MioRtia"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "diffHunk": "@@ -41,23 +51,34 @@\n     @JsonProperty(\"values\")\n     private final List<SensitivityValue> sensitivityValues;\n \n+    @JsonProperty(\"contingencies present\")\n+    private final boolean contingenciesPresent;\n+\n+    @JsonProperty(\"contingencies values\")\n+    private final Map<String, List<SensitivityValue>> sensitivityValuesContingencies;\n+\n     /**\n      * Hades2 sensitivity computation results\n      *\n      * @param ok true if the computation succeeded, false otherwise\n      * @param metrics map of metrics about the computation\n      * @param logs computation logs\n-     * @param values result values of the senstivity computation. Must be non null.\n+     * @param sensitivityValues result values of the senstivity computation in N\n+     * @param sensitivityValuesContingencies result values of the senstivity computation on contingencies\n      */\n     @JsonCreator\n     public SensitivityComputationResults(@JsonProperty(\"ok\") boolean ok,\n                                          @JsonProperty(\"metrics\") Map<String, String> metrics,\n                                          @JsonProperty(\"logs\") String logs,\n-                                         @JsonProperty(\"values\") List<SensitivityValue> values) {\n+                                         @JsonProperty(\"values\") List<SensitivityValue> sensitivityValues,\n+                                         @JsonProperty(\"contingencies present\") boolean contingenciesPresent,\n+                                         @JsonProperty(\"contingencyId values\") Map<String, List<SensitivityValue>> sensitivityValuesContingencies) {\n         this.ok = ok;\n         this.metrics = Objects.requireNonNull(metrics);\n         this.logs = Objects.requireNonNull(logs);\n-        this.sensitivityValues = Objects.requireNonNull(values);\n+        this.sensitivityValues = Objects.requireNonNull(sensitivityValues);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2290faa3a04182c0ab25a5d66ca37d6a42946def"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc0NjM1MA==", "bodyText": "CsvSensitivityComputationResultExporter implements this interface and seems to be able to export a result of a sensitivity computation with contingencies, why is \"without contingency\" specified here?", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387746350", "createdAt": "2020-03-04T15:35:10Z", "author": {"login": "MioRtia"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/converter/SensitivityComputationResultExporter.java", "diffHunk": "@@ -30,7 +30,7 @@\n     String getComment();\n \n     /**\n-     * Export a result of a sensitivity computation\n+     * Export a result of a sensitivity computation without contingency", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2290faa3a04182c0ab25a5d66ca37d6a42946def"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc1NDY1OQ==", "bodyText": "I know that JSON format allows whitespaces in properties but shouldn't we use camel case instead to be consistent with other results serialization?", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387754659", "createdAt": "2020-03-04T15:47:03Z", "author": {"login": "MioRtia"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "diffHunk": "@@ -41,23 +51,34 @@\n     @JsonProperty(\"values\")\n     private final List<SensitivityValue> sensitivityValues;\n \n+    @JsonProperty(\"contingencies present\")\n+    private final boolean contingenciesPresent;\n+\n+    @JsonProperty(\"contingencies values\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2290faa3a04182c0ab25a5d66ca37d6a42946def"}, "originalPosition": 52}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d3a0ddd08ebd827778ecc089b8ab142640eca30e", "author": {"user": null}, "url": "https://github.com/powsybl/powsybl-core/commit/d3a0ddd08ebd827778ecc089b8ab142640eca30e", "committedDate": "2020-03-09T13:18:24Z", "message": "Modify some comments\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>"}, "afterCommit": {"oid": "ddc84f1c9536cbba445a59702db2f3199ff9aee3", "author": {"user": null}, "url": "https://github.com/powsybl/powsybl-core/commit/ddc84f1c9536cbba445a59702db2f3199ff9aee3", "committedDate": "2020-03-11T10:03:08Z", "message": "Modify some comments\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ddc84f1c9536cbba445a59702db2f3199ff9aee3", "author": {"user": null}, "url": "https://github.com/powsybl/powsybl-core/commit/ddc84f1c9536cbba445a59702db2f3199ff9aee3", "committedDate": "2020-03-11T10:03:08Z", "message": "Modify some comments\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>"}, "afterCommit": {"oid": "593f43fd6c965e9b4a77be7cde9e6aa80b1386a0", "author": {"user": null}, "url": "https://github.com/powsybl/powsybl-core/commit/593f43fd6c965e9b4a77be7cde9e6aa80b1386a0", "committedDate": "2020-03-12T16:01:12Z", "message": "Modify some comments\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MzMyODQx", "url": "https://github.com/powsybl/powsybl-core/pull/1155#pullrequestreview-375332841", "createdAt": "2020-03-16T15:35:08Z", "commit": {"oid": "593f43fd6c965e9b4a77be7cde9e6aa80b1386a0"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTozNTowOFrOF25zPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTozNTowOFrOF25zPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzExNDQyOQ==", "bodyText": "Perhaps it could be good to create a constant just like VALUE_NOT_FOUND for the message", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r393114429", "createdAt": "2020-03-16T15:35:08Z", "author": {"login": "murgeyseb"}, "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "diffHunk": "@@ -89,61 +105,144 @@ public String getLogs() {\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values.\n+     * Get a collection of all the sensitivity values in state N.\n      *\n-     * @return a collection of all the sensitivity values.\n+     * @return a collection of all the sensitivity values in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValues() {\n         return Collections.unmodifiableCollection(sensitivityValues);\n     }\n \n+\n     /**\n-     * Get a collection of all the sensitivity values associated with given function.\n+     * Get a collection of all the sensitivity values associated with given function in state N.\n      *\n      * @param function sensitivity function\n-     * @return a collection of all the sensitivity values associated with given function\n+     * @return a collection of all the sensitivity values associated with given function in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function) {\n-        return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n+        return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function))\n+                .collect(Collectors.toList());\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values associated with given variable\n+     * Get a collection of all the sensitivity values associated with given variable in state N.\n      *\n      * @param variable sensitivity variable\n-     * @return a collection of all the sensitivity values associated with given variable\n+     * @return a collection of all the sensitivity values associated with given variable in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable) {\n-        return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable)).collect(Collectors.toList());\n+        return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable))\n+                .collect(Collectors.toList());\n     }\n \n     /**\n-     * Get the sensitivity value associated with given function and given variable\n+     * Get the sensitivity value associated with given function and given variable in state N.\n      *\n      * @param function sensitivity function\n      * @param variable sensitivity variable\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFunction function, SensitivityVariable variable) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n-            && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n+                && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", function.getId(), variable.getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, function.getId(), variable.getId()));\n         }\n         return returnValue.get();\n     }\n \n     /**\n-     * Get the sensitivity value associated with given factor\n+     * Get the sensitivity value associated with given factor in state N.\n      *\n      * @param factor sensitivity factor\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFactor factor) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().equals(factor)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", factor.getFunction().getId(), factor.getVariable().getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, factor.getFunction().getId(), factor.getVariable().getId()));\n         }\n         return returnValue.get();\n     }\n+\n+    /**\n+     * Get the status of the presence of contingencies\n+     *\n+     * @return true if the computation contains contingencies, false otherwise\n+     */\n+    public boolean contingenciesArePresent() {\n+        return !sensitivityValuesContingencies.isEmpty();\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values for all contingencies.\n+     *\n+     * @return a collection of all the sensitivity values for all contingencies.\n+     */\n+    public Map<String, List<SensitivityValue>> getSensitivityValuesContingencies() {\n+        return Collections.unmodifiableMap(sensitivityValuesContingencies);\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values associated with given function\n+     * for a specific contingency.\n+     *\n+     * @param function sensitivity function\n+     * @param contingencyId the ID of the considered contingency\n+     * @return a collection of all the sensitivity values associated with given function for the given contingencyId\n+     */\n+    public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function, String contingencyId) {\n+        return sensitivityValuesContingencies.get(contingencyId).stream()\n+                .filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function))\n+                .collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values associated with given variable\n+     * for a specific contingency.\n+     *\n+     * @param variable sensitivity variable\n+     * @param contingencyId the ID of the considered contingency\n+     * @return a collection of all the sensitivity values associated with given variable\n+     */\n+    public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable, String contingencyId) {\n+        return sensitivityValuesContingencies.get(contingencyId).stream()\n+                .filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable))\n+                .collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Get the sensitivity value associated with given function and given variable for a specific contingency.\n+     *\n+     * @param function sensitivity function\n+     * @param variable sensitivity variable\n+     * @param contingencyId the ID of the considered contingency\n+     * @return the sensitivity value associated with given function and given variable\n+     */\n+    public SensitivityValue getSensitivityValue(SensitivityFunction function, SensitivityVariable variable, String contingencyId) {\n+        return sensitivityValuesContingencies.get(contingencyId).stream()\n+                .filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n+                        && sensitivityValue.getFactor().getVariable().equals(variable))\n+                .findFirst()\n+                .orElseThrow(() -> new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s at contingencyId %s.\", function.getId(), variable.getId(), contingencyId)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "593f43fd6c965e9b4a77be7cde9e6aa80b1386a0"}, "originalPosition": 217}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1ODMxNTcy", "url": "https://github.com/powsybl/powsybl-core/pull/1155#pullrequestreview-375831572", "createdAt": "2020-03-17T08:41:02Z", "commit": {"oid": "b951caa8691a57f95f08143568ff0e8b797c1ff6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4d4a3657ef7260e956e51f31270b6ccb1eb34df", "author": {"user": null}, "url": "https://github.com/powsybl/powsybl-core/commit/a4d4a3657ef7260e956e51f31270b6ccb1eb34df", "committedDate": "2020-03-19T14:39:18Z", "message": "Add a list of contingencies as an argument of the sensitivity computation\n\n- This makes it possible to run systematic sensitivity calculations with Hades2\n- We should probably consider modifying the sensitivity API so that it really\n  gives access to a single sensitivity computation, while creating a systematic-sensitivity-api to include\n  a security-analysis-like systematic sensitivity.\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b9c1462954c0553c939dd4aaf9d387f935879a2", "author": {"user": null}, "url": "https://github.com/powsybl/powsybl-core/commit/0b9c1462954c0553c939dd4aaf9d387f935879a2", "committedDate": "2020-03-19T14:39:18Z", "message": "Modify the sensitivity results to output the sensitivity values for each contingency\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00309b69caeae1e32edd29cc47ea4a77eee18e85", "author": {"user": null}, "url": "https://github.com/powsybl/powsybl-core/commit/00309b69caeae1e32edd29cc47ea4a77eee18e85", "committedDate": "2020-03-19T14:39:18Z", "message": "Add systematic sensitivity tests and remove code smells\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37117567e60b640577a838437fda7d95dfb73dd2", "author": {"user": null}, "url": "https://github.com/powsybl/powsybl-core/commit/37117567e60b640577a838437fda7d95dfb73dd2", "committedDate": "2020-03-19T14:39:18Z", "message": "Refactor the CSV exporter: add tests on contingency results, avoid duplicated code, and fix the getComment function\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94bb33dad37c71ea5914cc70081983297b495d0c", "author": {"user": null}, "url": "https://github.com/powsybl/powsybl-core/commit/94bb33dad37c71ea5914cc70081983297b495d0c", "committedDate": "2020-03-19T14:39:18Z", "message": "Fixes based on Miora's review\n\n- Fix pom file\n- Remove useless boolean attribute contingenciesPresent from SensitivityComputationResults\n- Fix JSON parameter case\n- Prevent unsafe changes on sensitivityValues and sensitivityValuesContingencies\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d41c71c638322b800bc69938cc241b1970cbdf8", "author": {"user": null}, "url": "https://github.com/powsybl/powsybl-core/commit/9d41c71c638322b800bc69938cc241b1970cbdf8", "committedDate": "2020-03-19T14:39:18Z", "message": "Add default implementation for the sensitivity run with contingencies to avoid introducing a breaking change\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05ea7fd5a6434323b5f0de75625748cd1ca19535", "author": {"user": null}, "url": "https://github.com/powsybl/powsybl-core/commit/05ea7fd5a6434323b5f0de75625748cd1ca19535", "committedDate": "2020-03-19T14:39:19Z", "message": "Modify some comments\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a97cdc59c9b291e05408722e5c959d512a01405", "author": {"user": null}, "url": "https://github.com/powsybl/powsybl-core/commit/7a97cdc59c9b291e05408722e5c959d512a01405", "committedDate": "2020-03-19T14:39:19Z", "message": "Create variable for error message\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b951caa8691a57f95f08143568ff0e8b797c1ff6", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/b951caa8691a57f95f08143568ff0e8b797c1ff6", "committedDate": "2020-03-16T17:07:17Z", "message": "Merge branch 'master' into systematic-sensitivity"}, "afterCommit": {"oid": "7a97cdc59c9b291e05408722e5c959d512a01405", "author": {"user": null}, "url": "https://github.com/powsybl/powsybl-core/commit/7a97cdc59c9b291e05408722e5c959d512a01405", "committedDate": "2020-03-19T14:39:19Z", "message": "Create variable for error message\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4397, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}