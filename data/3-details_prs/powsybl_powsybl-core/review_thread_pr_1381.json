{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NzYyMDYx", "number": 1381, "reviewThreads": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo1MDozMlrOEL9plQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo1Nzo0NVrOESRtEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTc5ODYxOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/SlackBusAdderImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo1MDozMlrOGty_qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo1MDozMlrOGty_qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3NDYwMg==", "bodyText": "Should be private", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r450674602", "createdAt": "2020-07-07T07:50:32Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/SlackBusAdderImpl.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.powsybl.iidm.network.extensions;\n+\n+import com.powsybl.commons.extensions.AbstractExtensionAdder;\n+import com.powsybl.iidm.network.VoltageLevel;\n+\n+/**\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public class SlackBusAdderImpl extends AbstractExtensionAdder<VoltageLevel, SlackBus> implements SlackBusAdder {\n+\n+    static final int NODE_UNINITIALIZED = -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f98918166ca2d4f0bb794be9e2cd08d037dbb62"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTc5OTgyOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/SlackBusAdderImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo1MDo1NVrOGtzAcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo1MDo1NVrOGtzAcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3NDgwMg==", "bodyText": "return from here", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r450674802", "createdAt": "2020-07-07T07:50:55Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/SlackBusAdderImpl.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.powsybl.iidm.network.extensions;\n+\n+import com.powsybl.commons.extensions.AbstractExtensionAdder;\n+import com.powsybl.iidm.network.VoltageLevel;\n+\n+/**\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public class SlackBusAdderImpl extends AbstractExtensionAdder<VoltageLevel, SlackBus> implements SlackBusAdder {\n+\n+    static final int NODE_UNINITIALIZED = -1;\n+\n+    private String busId;\n+    private int node = NODE_UNINITIALIZED;\n+\n+    public SlackBusAdderImpl(VoltageLevel voltageLevel) {\n+        super(voltageLevel);\n+    }\n+\n+    @Override\n+    public SlackBusAdder setNode(int node) {\n+        this.node = node;\n+        return this;\n+    }\n+\n+    @Override\n+    public SlackBusAdder setBusId(String busId) {\n+        this.busId = busId;\n+        return this;\n+    }\n+\n+    @Override\n+    public SlackBusImpl createExtension(VoltageLevel voltageLevel) {\n+        SlackBusImpl slackBus;\n+        switch (voltageLevel.getTopologyKind()) {\n+            case NODE_BREAKER:\n+                slackBus = new SlackBusImpl(node, voltageLevel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f98918166ca2d4f0bb794be9e2cd08d037dbb62"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTgwMDM1OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/SlackBusAdderImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo1MTowMlrOGtzAvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo1MTowMlrOGtzAvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3NDg3Ng==", "bodyText": "return from here", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r450674876", "createdAt": "2020-07-07T07:51:02Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/SlackBusAdderImpl.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.powsybl.iidm.network.extensions;\n+\n+import com.powsybl.commons.extensions.AbstractExtensionAdder;\n+import com.powsybl.iidm.network.VoltageLevel;\n+\n+/**\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public class SlackBusAdderImpl extends AbstractExtensionAdder<VoltageLevel, SlackBus> implements SlackBusAdder {\n+\n+    static final int NODE_UNINITIALIZED = -1;\n+\n+    private String busId;\n+    private int node = NODE_UNINITIALIZED;\n+\n+    public SlackBusAdderImpl(VoltageLevel voltageLevel) {\n+        super(voltageLevel);\n+    }\n+\n+    @Override\n+    public SlackBusAdder setNode(int node) {\n+        this.node = node;\n+        return this;\n+    }\n+\n+    @Override\n+    public SlackBusAdder setBusId(String busId) {\n+        this.busId = busId;\n+        return this;\n+    }\n+\n+    @Override\n+    public SlackBusImpl createExtension(VoltageLevel voltageLevel) {\n+        SlackBusImpl slackBus;\n+        switch (voltageLevel.getTopologyKind()) {\n+            case NODE_BREAKER:\n+                slackBus = new SlackBusImpl(node, voltageLevel);\n+                break;\n+            case BUS_BREAKER:\n+                slackBus = new SlackBusImpl(busId, voltageLevel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f98918166ca2d4f0bb794be9e2cd08d037dbb62"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTgwMTA4OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/SlackBusAdderImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo1MToxN1rOGtzBQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo1MToxN1rOGtzBQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3NTAwOQ==", "bodyText": "Add a message in this exception", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r450675009", "createdAt": "2020-07-07T07:51:17Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/SlackBusAdderImpl.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.powsybl.iidm.network.extensions;\n+\n+import com.powsybl.commons.extensions.AbstractExtensionAdder;\n+import com.powsybl.iidm.network.VoltageLevel;\n+\n+/**\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public class SlackBusAdderImpl extends AbstractExtensionAdder<VoltageLevel, SlackBus> implements SlackBusAdder {\n+\n+    static final int NODE_UNINITIALIZED = -1;\n+\n+    private String busId;\n+    private int node = NODE_UNINITIALIZED;\n+\n+    public SlackBusAdderImpl(VoltageLevel voltageLevel) {\n+        super(voltageLevel);\n+    }\n+\n+    @Override\n+    public SlackBusAdder setNode(int node) {\n+        this.node = node;\n+        return this;\n+    }\n+\n+    @Override\n+    public SlackBusAdder setBusId(String busId) {\n+        this.busId = busId;\n+        return this;\n+    }\n+\n+    @Override\n+    public SlackBusImpl createExtension(VoltageLevel voltageLevel) {\n+        SlackBusImpl slackBus;\n+        switch (voltageLevel.getTopologyKind()) {\n+            case NODE_BREAKER:\n+                slackBus = new SlackBusImpl(node, voltageLevel);\n+                break;\n+            case BUS_BREAKER:\n+                slackBus = new SlackBusImpl(busId, voltageLevel);\n+                break;\n+            default:\n+                throw new AssertionError();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f98918166ca2d4f0bb794be9e2cd08d037dbb62"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTgwMTU5OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/SlackBusImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo1MToyN1rOGtzBkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo1MToyN1rOGtzBkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3NTA5MQ==", "bodyText": "Add missing license header", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r450675091", "createdAt": "2020-07-07T07:51:27Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/SlackBusImpl.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.powsybl.iidm.network.extensions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f98918166ca2d4f0bb794be9e2cd08d037dbb62"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTgwMjA4OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/SlackBusAdderImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo1MTozNVrOGtzB3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo1MTozNVrOGtzB3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3NTE2Nw==", "bodyText": "Add missing license header", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r450675167", "createdAt": "2020-07-07T07:51:35Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/SlackBusAdderImpl.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.powsybl.iidm.network.extensions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f98918166ca2d4f0bb794be9e2cd08d037dbb62"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTgwNDg3OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/SlackBusXmlSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo1MjozNVrOGtzDvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo1MjozNVrOGtzDvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3NTY0NQ==", "bodyText": "Fix copyright date", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r450675645", "createdAt": "2020-07-07T07:52:35Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/SlackBusXmlSerializer.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/**\n+ * Copyright (c) 2018, RTE (http://www.rte-france.com)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f98918166ca2d4f0bb794be9e2cd08d037dbb62"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTgxMzQzOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-extensions/src/main/resources/xsd/slackBus.xsd", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo1NToxMlrOGtzJZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo1NToxMlrOGtzJZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3NzA5NQ==", "bodyText": "Fix copyright date", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r450677095", "createdAt": "2020-07-07T07:55:12Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-extensions/src/main/resources/xsd/slackBus.xsd", "diffHunk": "@@ -0,0 +1,20 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Copyright (c) 2019, RTE (http://www.rte-france.com)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f98918166ca2d4f0bb794be9e2cd08d037dbb62"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTgxOTQ5OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/SlackBus.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo1NzoxMlrOGtzNew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo1NzoxMlrOGtzNew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3ODEzOQ==", "bodyText": "I think it's not necessary to prefix the return type with SlackBus", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r450678139", "createdAt": "2020-07-07T07:57:12Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/SlackBus.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.extensions;\n+\n+import com.powsybl.commons.extensions.Extension;\n+import com.powsybl.iidm.network.Bus;\n+import com.powsybl.iidm.network.VoltageLevel;\n+\n+/**\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public interface SlackBus extends Extension<VoltageLevel> {\n+\n+    @Override\n+    default String getName() {\n+        return \"slackBus\";\n+    }\n+\n+    interface NodeBreakerView {\n+        int getNode();\n+    }\n+\n+    interface BusBreakerView {\n+        Bus getBus();\n+    }\n+\n+    interface BusView {\n+        Bus getBus();\n+    }\n+\n+    Bus get();\n+\n+    SlackBus.NodeBreakerView getNodeBreakerView();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f98918166ca2d4f0bb794be9e2cd08d037dbb62"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTgyMjEwOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/SlackBus.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo1Nzo1NlrOGtzPOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo1Nzo1NlrOGtzPOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3ODU4Nw==", "bodyText": "Add javadoc to explain this is a shortcut to getBusView().getBus()", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r450678587", "createdAt": "2020-07-07T07:57:56Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/SlackBus.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.extensions;\n+\n+import com.powsybl.commons.extensions.Extension;\n+import com.powsybl.iidm.network.Bus;\n+import com.powsybl.iidm.network.VoltageLevel;\n+\n+/**\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public interface SlackBus extends Extension<VoltageLevel> {\n+\n+    @Override\n+    default String getName() {\n+        return \"slackBus\";\n+    }\n+\n+    interface NodeBreakerView {\n+        int getNode();\n+    }\n+\n+    interface BusBreakerView {\n+        Bus getBus();\n+    }\n+\n+    interface BusView {\n+        Bus getBus();\n+    }\n+\n+    Bus get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f98918166ca2d4f0bb794be9e2cd08d037dbb62"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTgzMjkzOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/SlackBusImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODowMToyOFrOGtzWhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODowMToyOFrOGtzWhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY4MDQ1Mw==", "bodyText": "This is a really bad idea to store the bus in the view: in a Node/Breaker Voltage level, these buses are calculated automatically, so new buses will be created when the topology changes. For Bus/Breaker Voltage Level, the bus of the bus/breaker view is configured, so it could be OK to keep it, but it's not for the bus view.", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r450680453", "createdAt": "2020-07-07T08:01:28Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/SlackBusImpl.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.powsybl.iidm.network.extensions;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.extensions.AbstractExtension;\n+import com.powsybl.iidm.network.Bus;\n+import com.powsybl.iidm.network.Terminal;\n+import com.powsybl.iidm.network.VoltageLevel;\n+\n+/**\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public class SlackBusImpl extends AbstractExtension<VoltageLevel> implements SlackBus {\n+\n+    private final NodeBreakerViewImpl nodeBreakerView;\n+    private final BusBreakerViewImpl busBreakerView;\n+    private final BusViewImpl busView;\n+\n+    private static final class NodeBreakerViewImpl implements SlackBus.NodeBreakerView {\n+        private final int node;\n+\n+        public NodeBreakerViewImpl(int node) {\n+            this.node = node;\n+        }\n+\n+        @Override\n+        public int getNode() {\n+            return this.node;\n+        }\n+    }\n+\n+    private static final class BusBreakerViewImpl implements SlackBus.BusBreakerView {\n+        private final Bus bus;\n+\n+        public BusBreakerViewImpl(Bus busBusBreakerView) {\n+            this.bus = busBusBreakerView;\n+        }\n+\n+        @Override\n+        public Bus getBus() {\n+            return this.bus;\n+        }\n+    }\n+\n+    private static final class BusViewImpl implements SlackBus.BusView {\n+        private final Bus bus;\n+\n+        private BusViewImpl(Bus busBusView) {\n+            this.bus = busBusView;\n+        }\n+\n+        @Override\n+        public Bus getBus() {\n+            return this.bus;\n+        }\n+    }\n+\n+    SlackBusImpl(String busId, VoltageLevel vl) {\n+        super(vl);\n+        if (busId == null) {\n+            throw new PowsyblException(\"busId needs to be set for a SlackBus in VoltageLevel.BusBreakerView\");\n+        }\n+        Bus busBusBreakerView = vl.getBusBreakerView().getBus(busId);\n+        Bus busBusView = vl.getBusView().getMergedBus(busId);\n+        this.nodeBreakerView = null;\n+        this.busBreakerView = new BusBreakerViewImpl(busBusBreakerView);\n+        this.busView = new BusViewImpl(busBusView);\n+    }\n+\n+    SlackBusImpl(int node, VoltageLevel vl) {\n+        super(vl);\n+        if (node == SlackBusAdderImpl.NODE_UNINITIALIZED) {\n+            throw new PowsyblException(\"node needs to be set for a SlackBus in VoltageLevel.NodeBreakerView\");\n+        }\n+        Terminal terminal = vl.getNodeBreakerView().getOptionalTerminal(node).get();\n+        Bus busBusBreakerView = terminal.getBusBreakerView().getBus();\n+        Bus busBusView = terminal.getBusView().getBus();\n+        this.busBreakerView = new BusBreakerViewImpl(busBusBreakerView);\n+        this.nodeBreakerView = new NodeBreakerViewImpl(node);\n+        this.busView = new BusViewImpl(busBusView);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f98918166ca2d4f0bb794be9e2cd08d037dbb62"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjg0MDc3OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/SlackBusAdderImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMTo0MzoxNFrOGuQrWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMTo0MzoxNFrOGuQrWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE2MDkyMQ==", "bodyText": "Optional as a class attribute is often not recommended (https://stackoverflow.com/questions/29033518/is-it-a-good-practice-to-use-optional-as-an-attribute-in-a-class)", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r451160921", "createdAt": "2020-07-07T21:43:14Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/SlackBusAdderImpl.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.extensions;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.extensions.AbstractExtensionAdder;\n+import com.powsybl.iidm.network.Terminal;\n+import com.powsybl.iidm.network.VoltageLevel;\n+\n+import java.util.OptionalInt;\n+\n+/**\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public class SlackBusAdderImpl extends AbstractExtensionAdder<VoltageLevel, SlackBus> implements SlackBusAdder {\n+\n+    private String busId;\n+    private OptionalInt node;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "948e5ad390105e97b14a366628d64db2e2e40dad"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzY0NjE4OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/SlackTerminalNodeBreakerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDoxMjowNVrOGx3hOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDoxMjowNVrOGx3hOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk0MzAzNA==", "bodyText": "This extension should inherit from AbstractMultiVariantConnectableExtension because the slack bus could depend from the variant.", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r454943034", "createdAt": "2020-07-15T10:12:05Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/SlackTerminalNodeBreakerImpl.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.extensions;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.extensions.AbstractExtension;\n+import com.powsybl.iidm.network.Terminal;\n+import com.powsybl.iidm.network.VoltageLevel;\n+\n+/**\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public class SlackTerminalNodeBreakerImpl extends AbstractExtension<VoltageLevel> implements SlackTerminal {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c6d6f0b203dd49cd85cffd2f944a89ffd48e8d"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTk2NDI0OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/SlackTerminalXmlSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMDowOTowNFrOGyOCkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTo1MzowMlrOGyjsGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxMjAxNg==", "bodyText": "I think this utility function already exists somewhere in iidm xml converter module.", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r455312016", "createdAt": "2020-07-15T20:09:04Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/SlackTerminalXmlSerializer.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.extensions;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.extensions.AbstractExtensionXmlSerializer;\n+import com.powsybl.commons.extensions.ExtensionXmlSerializer;\n+import com.powsybl.commons.xml.XmlReaderContext;\n+import com.powsybl.commons.xml.XmlWriterContext;\n+import com.powsybl.iidm.network.*;\n+\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+\n+/**\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+@AutoService(ExtensionXmlSerializer.class)\n+public class SlackTerminalXmlSerializer extends AbstractExtensionXmlSerializer<VoltageLevel, SlackTerminal> {\n+\n+    public SlackTerminalXmlSerializer() {\n+        super(\"slackTerminal\", \"network\", SlackTerminal.class, false, \"slackTerminal.xsd\",\n+            \"http://www.powsybl.org/schema/iidm/ext/slack_bus/1_0\", \"slt\");\n+    }\n+\n+    @Override\n+    public void write(SlackTerminal slackTerminal, XmlWriterContext context) throws XMLStreamException {\n+        writeTerminalRef(slackTerminal.getTerminal(), context.getExtensionsWriter());\n+    }\n+\n+    @Override\n+    public SlackTerminal read(VoltageLevel voltageLevel, XmlReaderContext context) {\n+        Terminal terminal = readTerminalRef(voltageLevel.getNetwork(), context);\n+        if (terminal != null) {\n+            voltageLevel.newExtension(SlackTerminalAdder.class)\n+                .setTerminal(terminal)\n+                .add();\n+            return voltageLevel.getExtension(SlackTerminalAdder.class);\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public static void writeTerminalRef(Terminal t, XMLStreamWriter writer) throws XMLStreamException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08923ffa7beb9c5f883b946991cdb235fbf6ef82"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2NjcxNQ==", "bodyText": "Indeed, in TerminalRefXml. A minor issue blocked the refactoring in the commit so far, but it is in progress!", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r455666715", "createdAt": "2020-07-16T09:53:02Z", "author": {"login": "flo-dup"}, "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/SlackTerminalXmlSerializer.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.extensions;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.extensions.AbstractExtensionXmlSerializer;\n+import com.powsybl.commons.extensions.ExtensionXmlSerializer;\n+import com.powsybl.commons.xml.XmlReaderContext;\n+import com.powsybl.commons.xml.XmlWriterContext;\n+import com.powsybl.iidm.network.*;\n+\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+\n+/**\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+@AutoService(ExtensionXmlSerializer.class)\n+public class SlackTerminalXmlSerializer extends AbstractExtensionXmlSerializer<VoltageLevel, SlackTerminal> {\n+\n+    public SlackTerminalXmlSerializer() {\n+        super(\"slackTerminal\", \"network\", SlackTerminal.class, false, \"slackTerminal.xsd\",\n+            \"http://www.powsybl.org/schema/iidm/ext/slack_bus/1_0\", \"slt\");\n+    }\n+\n+    @Override\n+    public void write(SlackTerminal slackTerminal, XmlWriterContext context) throws XMLStreamException {\n+        writeTerminalRef(slackTerminal.getTerminal(), context.getExtensionsWriter());\n+    }\n+\n+    @Override\n+    public SlackTerminal read(VoltageLevel voltageLevel, XmlReaderContext context) {\n+        Terminal terminal = readTerminalRef(voltageLevel.getNetwork(), context);\n+        if (terminal != null) {\n+            voltageLevel.newExtension(SlackTerminalAdder.class)\n+                .setTerminal(terminal)\n+                .add();\n+            return voltageLevel.getExtension(SlackTerminalAdder.class);\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public static void writeTerminalRef(Terminal t, XMLStreamWriter writer) throws XMLStreamException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxMjAxNg=="}, "originalCommit": {"oid": "08923ffa7beb9c5f883b946991cdb235fbf6ef82"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTk2NDg4OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/SlackTerminalXmlSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMDowOToxNlrOGyOC9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMDowOToxNlrOGyOC9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxMjExNg==", "bodyText": "Same", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r455312116", "createdAt": "2020-07-15T20:09:16Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/SlackTerminalXmlSerializer.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.extensions;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.extensions.AbstractExtensionXmlSerializer;\n+import com.powsybl.commons.extensions.ExtensionXmlSerializer;\n+import com.powsybl.commons.xml.XmlReaderContext;\n+import com.powsybl.commons.xml.XmlWriterContext;\n+import com.powsybl.iidm.network.*;\n+\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+\n+/**\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+@AutoService(ExtensionXmlSerializer.class)\n+public class SlackTerminalXmlSerializer extends AbstractExtensionXmlSerializer<VoltageLevel, SlackTerminal> {\n+\n+    public SlackTerminalXmlSerializer() {\n+        super(\"slackTerminal\", \"network\", SlackTerminal.class, false, \"slackTerminal.xsd\",\n+            \"http://www.powsybl.org/schema/iidm/ext/slack_bus/1_0\", \"slt\");\n+    }\n+\n+    @Override\n+    public void write(SlackTerminal slackTerminal, XmlWriterContext context) throws XMLStreamException {\n+        writeTerminalRef(slackTerminal.getTerminal(), context.getExtensionsWriter());\n+    }\n+\n+    @Override\n+    public SlackTerminal read(VoltageLevel voltageLevel, XmlReaderContext context) {\n+        Terminal terminal = readTerminalRef(voltageLevel.getNetwork(), context);\n+        if (terminal != null) {\n+            voltageLevel.newExtension(SlackTerminalAdder.class)\n+                .setTerminal(terminal)\n+                .add();\n+            return voltageLevel.getExtension(SlackTerminalAdder.class);\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public static void writeTerminalRef(Terminal t, XMLStreamWriter writer) throws XMLStreamException {\n+        Connectable c = t.getConnectable();\n+        writer.writeAttribute(\"connectableId\", c.getId());\n+        if (c.getTerminals().size() > 1) {\n+            if (c instanceof Injection) {\n+                // nothing to do\n+            } else if (c instanceof Branch) {\n+                Branch branch = (Branch) c;\n+                writer.writeAttribute(\"side\", branch.getSide(t).name());\n+            } else if (c instanceof ThreeWindingsTransformer) {\n+                ThreeWindingsTransformer twt = (ThreeWindingsTransformer) c;\n+                writer.writeAttribute(\"side\", twt.getSide(t).name());\n+            } else {\n+                throw new AssertionError(\"Unexpected Connectable instance: \" + c.getClass());\n+            }\n+        }\n+    }\n+\n+    public static Terminal readTerminalRef(Network network, XmlReaderContext context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08923ffa7beb9c5f883b946991cdb235fbf6ef82"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTk3MDU1OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/SlackTerminal.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMDoxMDo1MFrOGyOGZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTo0Nzo0MVrOGyjf3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxMjk5Nw==", "bodyText": "This is an arbitrary choice to return the bus view bus and doc does not really help.\nI would just remove it and force the user to explictly choose the view.", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r455312997", "createdAt": "2020-07-15T20:10:50Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/SlackTerminal.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.extensions;\n+\n+import com.powsybl.commons.extensions.Extension;\n+import com.powsybl.iidm.network.Bus;\n+import com.powsybl.iidm.network.Terminal;\n+import com.powsybl.iidm.network.VoltageLevel;\n+\n+/**\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public interface SlackTerminal extends Extension<VoltageLevel> {\n+\n+    @Override\n+    default String getName() {\n+        return \"slackTerminal\";\n+    }\n+\n+    /**\n+     * Get the terminal pointed by the current SlackTerminal\n+     * @return the corresponding terminal\n+     */\n+    Terminal getTerminal();\n+\n+    /**\n+     * Shortcut to getTerminal().getBusView().getBus()\n+     * @return the corresponding bus in the bus view\n+     */\n+    default Bus getBus() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08923ffa7beb9c5f883b946991cdb235fbf6ef82"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2MzU4MA==", "bodyText": "Removed.", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r455663580", "createdAt": "2020-07-16T09:47:41Z", "author": {"login": "flo-dup"}, "path": "iidm/iidm-extensions/src/main/java/com/powsybl/iidm/network/extensions/SlackTerminal.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.extensions;\n+\n+import com.powsybl.commons.extensions.Extension;\n+import com.powsybl.iidm.network.Bus;\n+import com.powsybl.iidm.network.Terminal;\n+import com.powsybl.iidm.network.VoltageLevel;\n+\n+/**\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public interface SlackTerminal extends Extension<VoltageLevel> {\n+\n+    @Override\n+    default String getName() {\n+        return \"slackTerminal\";\n+    }\n+\n+    /**\n+     * Get the terminal pointed by the current SlackTerminal\n+     * @return the corresponding terminal\n+     */\n+    Terminal getTerminal();\n+\n+    /**\n+     * Shortcut to getTerminal().getBusView().getBus()\n+     * @return the corresponding bus in the bus view\n+     */\n+    default Bus getBus() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxMjk5Nw=="}, "originalCommit": {"oid": "08923ffa7beb9c5f883b946991cdb235fbf6ef82"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTc3MDA2OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/extensions/SlackTerminalAdder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNzoxNToyMVrOG1VtBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNzoxNToyMVrOG1VtBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4MzMwMA==", "bodyText": "If we try to be consistent, the other extension adder use with prefix instead of set. I don't remember why @jonenst did that choice, and I don't know if the consistency is a hard requirement.", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r458583300", "createdAt": "2020-07-22T07:15:21Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/extensions/SlackTerminalAdder.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.extensions;\n+\n+import com.powsybl.commons.extensions.ExtensionAdder;\n+import com.powsybl.iidm.network.Terminal;\n+import com.powsybl.iidm.network.VoltageLevel;\n+\n+/**\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public interface SlackTerminalAdder extends ExtensionAdder<VoltageLevel, SlackTerminal> {\n+\n+    @Override\n+    default Class<SlackTerminal> getExtensionClass() {\n+        return SlackTerminal.class;\n+    }\n+\n+    SlackTerminalAdder setTerminal(Terminal terminal);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de39dee657e079913bc921486b9a3e38eefe187"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTc3Mjc1OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractMultiVariantConnectableExtension.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNzoxNjoxNlrOG1Vurw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOToxMjo1MlrOG1Z3EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4MzcyNw==", "bodyText": "Could you prepare a pull request to adapt the existing code?", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r458583727", "createdAt": "2020-07-22T07:16:16Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractMultiVariantConnectableExtension.java", "diffHunk": "@@ -6,31 +6,21 @@\n  */\n package com.powsybl.iidm.network.impl;\n \n-import com.powsybl.commons.exceptions.UncheckedClassCastExceptionException;\n-import com.powsybl.commons.extensions.AbstractExtension;\n import com.powsybl.iidm.network.Connectable;\n-import com.powsybl.iidm.network.Network;\n \n /**\n+ * Deprecated, use {@link AbstractMultiVariantIdentifiableExtension} instead.\n  * @author Ghiles Abdellah <ghiles.abdellah at rte-france.com>\n  */\n-public abstract class AbstractMultiVariantConnectableExtension<T extends Connectable> extends AbstractExtension<T> implements MultiVariantObject {\n+@Deprecated\n+public abstract class AbstractMultiVariantConnectableExtension<T extends Connectable> extends AbstractMultiVariantIdentifiableExtension<T> {\n \n+    /**\n+     * Deprecated, use {@link AbstractMultiVariantIdentifiableExtension} instead.\n+     */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de39dee657e079913bc921486b9a3e38eefe187"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY1MTQwOA==", "bodyText": "Merge request 526 on rte-core", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r458651408", "createdAt": "2020-07-22T09:12:52Z", "author": {"login": "flo-dup"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractMultiVariantConnectableExtension.java", "diffHunk": "@@ -6,31 +6,21 @@\n  */\n package com.powsybl.iidm.network.impl;\n \n-import com.powsybl.commons.exceptions.UncheckedClassCastExceptionException;\n-import com.powsybl.commons.extensions.AbstractExtension;\n import com.powsybl.iidm.network.Connectable;\n-import com.powsybl.iidm.network.Network;\n \n /**\n+ * Deprecated, use {@link AbstractMultiVariantIdentifiableExtension} instead.\n  * @author Ghiles Abdellah <ghiles.abdellah at rte-france.com>\n  */\n-public abstract class AbstractMultiVariantConnectableExtension<T extends Connectable> extends AbstractExtension<T> implements MultiVariantObject {\n+@Deprecated\n+public abstract class AbstractMultiVariantConnectableExtension<T extends Connectable> extends AbstractMultiVariantIdentifiableExtension<T> {\n \n+    /**\n+     * Deprecated, use {@link AbstractMultiVariantIdentifiableExtension} instead.\n+     */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4MzcyNw=="}, "originalCommit": {"oid": "3de39dee657e079913bc921486b9a3e38eefe187"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTc3NTA0OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractMultiVariantIdentifiableExtension.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNzoxNjo1OVrOG1VwDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNzoxNjo1OVrOG1VwDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4NDA3Nw==", "bodyText": "<T extends Identifiable<T>> ?", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r458584077", "createdAt": "2020-07-22T07:16:59Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/AbstractMultiVariantIdentifiableExtension.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/**\n+ * Copyright (c) 2020, RTE (https://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.impl;\n+\n+import com.powsybl.commons.exceptions.UncheckedClassCastExceptionException;\n+import com.powsybl.commons.extensions.AbstractExtension;\n+import com.powsybl.iidm.network.Identifiable;\n+import com.powsybl.iidm.network.Network;\n+\n+/**\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public abstract class AbstractMultiVariantIdentifiableExtension<T extends Identifiable> extends AbstractExtension<T> implements MultiVariantObject {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de39dee657e079913bc921486b9a3e38eefe187"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTc4MDU2OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/extensions/SlackTerminalAdderImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNzoxODo0MFrOG1VzWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNzoxODo0MFrOG1VzWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4NDkyMw==", "bodyText": "You should switch both parameters to keep the extendable at the first place.", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r458584923", "createdAt": "2020-07-22T07:18:40Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/extensions/SlackTerminalAdderImpl.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.impl.extensions;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.extensions.AbstractExtensionAdder;\n+import com.powsybl.iidm.network.Terminal;\n+import com.powsybl.iidm.network.VoltageLevel;\n+import com.powsybl.iidm.network.extensions.SlackTerminal;\n+import com.powsybl.iidm.network.extensions.SlackTerminalAdder;\n+\n+/**\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public class SlackTerminalAdderImpl extends AbstractExtensionAdder<VoltageLevel, SlackTerminal> implements SlackTerminalAdder {\n+\n+    private Terminal terminal;\n+\n+    public SlackTerminalAdderImpl(VoltageLevel voltageLevel) {\n+        super(voltageLevel);\n+    }\n+\n+    @Override\n+    public SlackTerminalAdder setTerminal(Terminal terminal) {\n+        this.terminal = terminal;\n+        return this;\n+    }\n+\n+    @Override\n+    public SlackTerminal createExtension(VoltageLevel voltageLevel) {\n+        if (terminal == null) {\n+            throw new PowsyblException(\"Terminal needs to be set to create a SlackTerminal extension\");\n+        }\n+        return new SlackTerminalImpl(terminal, voltageLevel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de39dee657e079913bc921486b9a3e38eefe187"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTc4MjgwOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/extensions/SlackTerminalImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNzoxOToxOVrOG1V0qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOTowNzo1NFrOG1Zrag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4NTI1OQ==", "bodyText": "Replace ArrayList by List\n@geofjamg do you think a List is ok, or should we change to a classic array?", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r458585259", "createdAt": "2020-07-22T07:19:19Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/extensions/SlackTerminalImpl.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.impl.extensions;\n+\n+import com.powsybl.iidm.network.Terminal;\n+import com.powsybl.iidm.network.VoltageLevel;\n+import com.powsybl.iidm.network.extensions.SlackTerminal;\n+import com.powsybl.iidm.network.impl.AbstractMultiVariantIdentifiableExtension;\n+\n+import java.util.ArrayList;\n+\n+/**\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public class SlackTerminalImpl extends AbstractMultiVariantIdentifiableExtension<VoltageLevel> implements SlackTerminal {\n+\n+    private final ArrayList<Terminal> terminals;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de39dee657e079913bc921486b9a3e38eefe187"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY0ODQyNg==", "bodyText": "I kept ArrayList here to be able to call ArrayList.ensureCapacity(int) method. I can remove that call to use List instead, but the capacity will be ensured at each add then.", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r458648426", "createdAt": "2020-07-22T09:07:54Z", "author": {"login": "flo-dup"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/extensions/SlackTerminalImpl.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.impl.extensions;\n+\n+import com.powsybl.iidm.network.Terminal;\n+import com.powsybl.iidm.network.VoltageLevel;\n+import com.powsybl.iidm.network.extensions.SlackTerminal;\n+import com.powsybl.iidm.network.impl.AbstractMultiVariantIdentifiableExtension;\n+\n+import java.util.ArrayList;\n+\n+/**\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public class SlackTerminalImpl extends AbstractMultiVariantIdentifiableExtension<VoltageLevel> implements SlackTerminal {\n+\n+    private final ArrayList<Terminal> terminals;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4NTI1OQ=="}, "originalCommit": {"oid": "3de39dee657e079913bc921486b9a3e38eefe187"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTc5MDE3OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/test/java/com/powsybl/iidm/network/impl/extensions/SlackTerminalTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNzoyMTozOVrOG1V5QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNzoyMTozOVrOG1V5QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4NjQzMg==", "bodyText": "Add the license header", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r458586432", "createdAt": "2020-07-22T07:21:39Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/test/java/com/powsybl/iidm/network/impl/extensions/SlackTerminalTest.java", "diffHunk": "@@ -0,0 +1,179 @@\n+package com.powsybl.iidm.network.impl.extensions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de39dee657e079913bc921486b9a3e38eefe187"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTc5Mjc4OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/test/java/com/powsybl/iidm/network/impl/extensions/SlackTerminalTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNzoyMjoxNlrOG1V6xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOTowODowNVrOG1Zr0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4NjgyMg==", "bodyText": "Fix this todo", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r458586822", "createdAt": "2020-07-22T07:22:16Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/test/java/com/powsybl/iidm/network/impl/extensions/SlackTerminalTest.java", "diffHunk": "@@ -0,0 +1,179 @@\n+package com.powsybl.iidm.network.impl.extensions;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.extensions.SlackTerminal;\n+import com.powsybl.iidm.network.extensions.SlackTerminalAdder;\n+import com.powsybl.iidm.network.test.EurostagTutorialExample1Factory;\n+import org.joda.time.DateTime;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import static com.powsybl.iidm.network.VariantManagerConstants.INITIAL_VARIANT_ID;\n+import static org.junit.Assert.*;\n+\n+/**\n+ * @author Anne Tilloy <anne.tilloy at rte-france.com>\n+ */\n+public class SlackTerminalTest {\n+\n+    static Network createBusBreakerNetwork() {\n+        Network network = Network.create(\"test\", \"test\");\n+        network.setCaseDate(DateTime.parse(\"2016-06-27T12:27:58.535+02:00\"));\n+        Substation s = network.newSubstation()\n+            .setId(\"S\")\n+            .setCountry(Country.FR)\n+            .add();\n+        VoltageLevel vl = s.newVoltageLevel()\n+            .setId(\"VL\")\n+            .setNominalV(400)\n+            .setTopologyKind(TopologyKind.BUS_BREAKER)\n+            .add();\n+        vl.getBusBreakerView().newBus()\n+            .setId(\"B\")\n+            .add();\n+        vl.newLoad()\n+            .setId(\"L\")\n+            .setBus(\"B\")\n+            .setConnectableBus(\"B\")\n+            .setP0(100)\n+            .setQ0(50)\n+            .add();\n+\n+        Substation s1 = network.newSubstation()\n+            .setId(\"S1\")\n+            .setCountry(Country.FR)\n+            .add();\n+        VoltageLevel vl1 = s.newVoltageLevel()\n+            .setId(\"VL1\")\n+            .setNominalV(400)\n+            .setTopologyKind(TopologyKind.BUS_BREAKER)\n+            .add();\n+        vl1.getBusBreakerView().newBus()\n+            .setId(\"B1\")\n+            .add();\n+        vl1.newGenerator()\n+            .setId(\"GE\")\n+            .setBus(\"B1\")\n+            .setConnectableBus(\"B1\")\n+            .setTargetP(100)\n+            .setMinP(0)\n+            .setMaxP(110)\n+            .setTargetV(380)\n+            .setVoltageRegulatorOn(true)\n+            .add();\n+\n+        network.newLine()\n+            .setId(\"LI\")\n+            .setR(0.05)\n+            .setX(1.)\n+            .setG1(0.)\n+            .setG2(0.)\n+            .setB1(0.)\n+            .setB2(0.)\n+            .setVoltageLevel1(\"VL\")\n+            .setVoltageLevel2(\"VL1\")\n+            .setBus1(\"B\")\n+            .setBus2(\"B1\")\n+            .add();\n+\n+        return network;\n+    }\n+\n+    private static Terminal getBestTerminal(Network network, String busBusBreaker) {\n+        // TODO: use the utility rules function which decides which terminal to choose from a given bus: see TerminalChooser in iidm-util module\n+        Iterator<? extends Terminal> connectedTerminals =\n+            network.getBusBreakerView().getBus(busBusBreaker).getConnectedTerminals().iterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de39dee657e079913bc921486b9a3e38eefe187"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY0ODUzMA==", "bodyText": "todo removed. The TerminalChooser is not in the scope of that test.", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r458648530", "createdAt": "2020-07-22T09:08:05Z", "author": {"login": "flo-dup"}, "path": "iidm/iidm-impl/src/test/java/com/powsybl/iidm/network/impl/extensions/SlackTerminalTest.java", "diffHunk": "@@ -0,0 +1,179 @@\n+package com.powsybl.iidm.network.impl.extensions;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.extensions.SlackTerminal;\n+import com.powsybl.iidm.network.extensions.SlackTerminalAdder;\n+import com.powsybl.iidm.network.test.EurostagTutorialExample1Factory;\n+import org.joda.time.DateTime;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import static com.powsybl.iidm.network.VariantManagerConstants.INITIAL_VARIANT_ID;\n+import static org.junit.Assert.*;\n+\n+/**\n+ * @author Anne Tilloy <anne.tilloy at rte-france.com>\n+ */\n+public class SlackTerminalTest {\n+\n+    static Network createBusBreakerNetwork() {\n+        Network network = Network.create(\"test\", \"test\");\n+        network.setCaseDate(DateTime.parse(\"2016-06-27T12:27:58.535+02:00\"));\n+        Substation s = network.newSubstation()\n+            .setId(\"S\")\n+            .setCountry(Country.FR)\n+            .add();\n+        VoltageLevel vl = s.newVoltageLevel()\n+            .setId(\"VL\")\n+            .setNominalV(400)\n+            .setTopologyKind(TopologyKind.BUS_BREAKER)\n+            .add();\n+        vl.getBusBreakerView().newBus()\n+            .setId(\"B\")\n+            .add();\n+        vl.newLoad()\n+            .setId(\"L\")\n+            .setBus(\"B\")\n+            .setConnectableBus(\"B\")\n+            .setP0(100)\n+            .setQ0(50)\n+            .add();\n+\n+        Substation s1 = network.newSubstation()\n+            .setId(\"S1\")\n+            .setCountry(Country.FR)\n+            .add();\n+        VoltageLevel vl1 = s.newVoltageLevel()\n+            .setId(\"VL1\")\n+            .setNominalV(400)\n+            .setTopologyKind(TopologyKind.BUS_BREAKER)\n+            .add();\n+        vl1.getBusBreakerView().newBus()\n+            .setId(\"B1\")\n+            .add();\n+        vl1.newGenerator()\n+            .setId(\"GE\")\n+            .setBus(\"B1\")\n+            .setConnectableBus(\"B1\")\n+            .setTargetP(100)\n+            .setMinP(0)\n+            .setMaxP(110)\n+            .setTargetV(380)\n+            .setVoltageRegulatorOn(true)\n+            .add();\n+\n+        network.newLine()\n+            .setId(\"LI\")\n+            .setR(0.05)\n+            .setX(1.)\n+            .setG1(0.)\n+            .setG2(0.)\n+            .setB1(0.)\n+            .setB2(0.)\n+            .setVoltageLevel1(\"VL\")\n+            .setVoltageLevel2(\"VL1\")\n+            .setBus1(\"B\")\n+            .setBus2(\"B1\")\n+            .add();\n+\n+        return network;\n+    }\n+\n+    private static Terminal getBestTerminal(Network network, String busBusBreaker) {\n+        // TODO: use the utility rules function which decides which terminal to choose from a given bus: see TerminalChooser in iidm-util module\n+        Iterator<? extends Terminal> connectedTerminals =\n+            network.getBusBreakerView().getBus(busBusBreaker).getConnectedTerminals().iterator();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4NjgyMg=="}, "originalCommit": {"oid": "3de39dee657e079913bc921486b9a3e38eefe187"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTgwODgwOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/extensions/SlackTerminal.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNzoyNzowMVrOG1WEfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNzoyNzowMVrOG1WEfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4OTMwOQ==", "bodyText": "This extension is in read-only mode: it's not possible to set a terminal. For a multi-variant network, to define a slack terminal for one variant, I will remove all existing extension and lose information about other variants. I think we miss something...\nI also think we have to fix the integration code of load flows", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r458589309", "createdAt": "2020-07-22T07:27:01Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/extensions/SlackTerminal.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.extensions;\n+\n+import com.powsybl.commons.extensions.Extension;\n+import com.powsybl.iidm.network.Terminal;\n+import com.powsybl.iidm.network.VoltageLevel;\n+\n+/**\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public interface SlackTerminal extends Extension<VoltageLevel> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de39dee657e079913bc921486b9a3e38eefe187"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTgxMzQ5OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-impl/src/test/java/com/powsybl/iidm/network/impl/extensions/SlackTerminalTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNzoyODoyOFrOG1WHbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNzoyODoyOFrOG1WHbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU5MDA2Mw==", "bodyText": "Could you please complete this unit-test to expose the design issue I mention above about multi-variant management and the replacement of an existing extension", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r458590063", "createdAt": "2020-07-22T07:28:28Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-impl/src/test/java/com/powsybl/iidm/network/impl/extensions/SlackTerminalTest.java", "diffHunk": "@@ -0,0 +1,179 @@\n+package com.powsybl.iidm.network.impl.extensions;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.extensions.SlackTerminal;\n+import com.powsybl.iidm.network.extensions.SlackTerminalAdder;\n+import com.powsybl.iidm.network.test.EurostagTutorialExample1Factory;\n+import org.joda.time.DateTime;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import static com.powsybl.iidm.network.VariantManagerConstants.INITIAL_VARIANT_ID;\n+import static org.junit.Assert.*;\n+\n+/**\n+ * @author Anne Tilloy <anne.tilloy at rte-france.com>\n+ */\n+public class SlackTerminalTest {\n+\n+    static Network createBusBreakerNetwork() {\n+        Network network = Network.create(\"test\", \"test\");\n+        network.setCaseDate(DateTime.parse(\"2016-06-27T12:27:58.535+02:00\"));\n+        Substation s = network.newSubstation()\n+            .setId(\"S\")\n+            .setCountry(Country.FR)\n+            .add();\n+        VoltageLevel vl = s.newVoltageLevel()\n+            .setId(\"VL\")\n+            .setNominalV(400)\n+            .setTopologyKind(TopologyKind.BUS_BREAKER)\n+            .add();\n+        vl.getBusBreakerView().newBus()\n+            .setId(\"B\")\n+            .add();\n+        vl.newLoad()\n+            .setId(\"L\")\n+            .setBus(\"B\")\n+            .setConnectableBus(\"B\")\n+            .setP0(100)\n+            .setQ0(50)\n+            .add();\n+\n+        Substation s1 = network.newSubstation()\n+            .setId(\"S1\")\n+            .setCountry(Country.FR)\n+            .add();\n+        VoltageLevel vl1 = s.newVoltageLevel()\n+            .setId(\"VL1\")\n+            .setNominalV(400)\n+            .setTopologyKind(TopologyKind.BUS_BREAKER)\n+            .add();\n+        vl1.getBusBreakerView().newBus()\n+            .setId(\"B1\")\n+            .add();\n+        vl1.newGenerator()\n+            .setId(\"GE\")\n+            .setBus(\"B1\")\n+            .setConnectableBus(\"B1\")\n+            .setTargetP(100)\n+            .setMinP(0)\n+            .setMaxP(110)\n+            .setTargetV(380)\n+            .setVoltageRegulatorOn(true)\n+            .add();\n+\n+        network.newLine()\n+            .setId(\"LI\")\n+            .setR(0.05)\n+            .setX(1.)\n+            .setG1(0.)\n+            .setG2(0.)\n+            .setB1(0.)\n+            .setB2(0.)\n+            .setVoltageLevel1(\"VL\")\n+            .setVoltageLevel2(\"VL1\")\n+            .setBus1(\"B\")\n+            .setBus2(\"B1\")\n+            .add();\n+\n+        return network;\n+    }\n+\n+    private static Terminal getBestTerminal(Network network, String busBusBreaker) {\n+        // TODO: use the utility rules function which decides which terminal to choose from a given bus: see TerminalChooser in iidm-util module\n+        Iterator<? extends Terminal> connectedTerminals =\n+            network.getBusBreakerView().getBus(busBusBreaker).getConnectedTerminals().iterator();\n+        return connectedTerminals.next();\n+    }\n+\n+    @Test\n+    public void test() {\n+        Network network = createBusBreakerNetwork();\n+        VoltageLevel vl0 = network.getVoltageLevel(\"VL\");\n+        SlackTerminalAdder adder = vl0.newExtension(SlackTerminalAdder.class);\n+\n+        // error test\n+        try {\n+            adder.add();\n+            fail();\n+        } catch (PowsyblException e) {\n+            assertEquals(\"Terminal needs to be set to create a SlackTerminal extension\", e.getMessage());\n+        }\n+\n+        // extends voltage level\n+        String busBusBreakerId = \"B\";\n+        adder.setTerminal(getBestTerminal(network, busBusBreakerId)).add();\n+\n+        SlackTerminal slackTerminal;\n+        for (VoltageLevel vl : network.getVoltageLevels()) {\n+            slackTerminal = vl.getExtension(SlackTerminal.class);\n+            if (slackTerminal != null) {\n+                assertEquals(busBusBreakerId, slackTerminal.getTerminal().getBusBreakerView().getBus().getId());\n+                assertEquals(\"VL_0\", slackTerminal.getTerminal().getBusView().getBus().getId());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void variantsTest() {\n+        String variant1 = \"variant1\";\n+        String variant2 = \"variant2\";\n+\n+        Network network = EurostagTutorialExample1Factory.create();\n+        VoltageLevel vl = network.getVoltageLevel(\"VLHV1\");\n+        vl.newExtension(SlackTerminalAdder.class)\n+            .setTerminal(getBestTerminal(network, \"NLOAD\"))\n+            .add();\n+\n+        SlackTerminal slackTerminal = vl.getExtension(SlackTerminal.class);\n+        assertNotNull(slackTerminal);\n+\n+        final Terminal t0 = slackTerminal.getTerminal();\n+\n+        VariantManager variantManager = network.getVariantManager();\n+        variantManager.cloneVariant(INITIAL_VARIANT_ID, variant1);\n+\n+        variantManager.setWorkingVariant(variant1);\n+        assertEquals(t0, slackTerminal.getTerminal());\n+\n+        variantManager.setWorkingVariant(INITIAL_VARIANT_ID);\n+        assertEquals(t0, slackTerminal.getTerminal());\n+\n+        variantManager.cloneVariant(variant1, variant2);\n+\n+        variantManager.setWorkingVariant(variant1);\n+        assertEquals(t0, slackTerminal.getTerminal());\n+\n+        variantManager.setWorkingVariant(variant2);\n+        assertEquals(t0, slackTerminal.getTerminal());\n+\n+        variantManager.removeVariant(variant1);\n+        assertEquals(t0, slackTerminal.getTerminal());\n+\n+        variantManager.removeVariant(variant2);\n+        try {\n+            slackTerminal.getTerminal();\n+            fail();\n+        } catch (PowsyblException e) {\n+            assertEquals(\"Variant index not set\", e.getMessage());\n+        }\n+\n+        variantManager.setWorkingVariant(INITIAL_VARIANT_ID);\n+        assertEquals(t0, slackTerminal.getTerminal());\n+\n+        List<String> targetVariantIds = new ArrayList<>();\n+        targetVariantIds.add(variant1);\n+        targetVariantIds.add(variant2);\n+        variantManager.cloneVariant(INITIAL_VARIANT_ID, targetVariantIds);\n+\n+        variantManager.setWorkingVariant(variant1);\n+        assertEquals(t0, slackTerminal.getTerminal());\n+\n+        variantManager.setWorkingVariant(variant2);\n+        assertEquals(t0, slackTerminal.getTerminal());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de39dee657e079913bc921486b9a3e38eefe187"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTgxODY2OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-util/src/main/java/com/powsybl/iidm/network/util/TerminalChooser.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNzozMDowMFrOG1WK1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzozODoyMlrOG3W96w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU5MDkzNA==", "bodyText": "What about branches, T3E or HVDC lines?", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r458590934", "createdAt": "2020-07-22T07:30:00Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-util/src/main/java/com/powsybl/iidm/network/util/TerminalChooser.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.util;\n+\n+import com.powsybl.iidm.network.ConnectableType;\n+import com.powsybl.iidm.network.Injection;\n+import com.powsybl.iidm.network.Terminal;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * A class which allows to choose a terminal, according to given filters, among several terminals\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public final class TerminalChooser {\n+\n+    private final List<Predicate<Terminal>> rules;\n+\n+    public static TerminalChooser getDefaultSlackTerminalChooser() {\n+        List<Predicate<Terminal>> rules = new ArrayList<>();\n+        rules.add(t -> t.getConnectable().getType() == ConnectableType.BUSBAR_SECTION);\n+        rules.add(t -> t.getConnectable() instanceof Injection);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de39dee657e079913bc921486b9a3e38eefe187"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0Mjc0MA==", "bodyText": "They could also be added if you think it makes sense, but @geofjamg would only leave the Busbar predicate... so that's a compromise? Anyway that's only the default chooser, other choosers can be defined and used.", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r460142740", "createdAt": "2020-07-24T15:57:30Z", "author": {"login": "flo-dup"}, "path": "iidm/iidm-util/src/main/java/com/powsybl/iidm/network/util/TerminalChooser.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.util;\n+\n+import com.powsybl.iidm.network.ConnectableType;\n+import com.powsybl.iidm.network.Injection;\n+import com.powsybl.iidm.network.Terminal;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * A class which allows to choose a terminal, according to given filters, among several terminals\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public final class TerminalChooser {\n+\n+    private final List<Predicate<Terminal>> rules;\n+\n+    public static TerminalChooser getDefaultSlackTerminalChooser() {\n+        List<Predicate<Terminal>> rules = new ArrayList<>();\n+        rules.add(t -> t.getConnectable().getType() == ConnectableType.BUSBAR_SECTION);\n+        rules.add(t -> t.getConnectable() instanceof Injection);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU5MDkzNA=="}, "originalCommit": {"oid": "3de39dee657e079913bc921486b9a3e38eefe187"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwMTE2Mw==", "bodyText": "There is a risk that there is no busbar section (Bus/Breaker VoltageLevel) and no injection neither. For instance, if we consider a star-like network, the star bus is a good slack bus, even there is no injection connected to it.\nI would add the 3 other predicates to be sure you can always attach the extension to a terminal.\nCan you please add a unit test using the Eurostag Tutorial 1, and ensure your are able to set the slack terminal", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r460701163", "createdAt": "2020-07-27T07:38:22Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-util/src/main/java/com/powsybl/iidm/network/util/TerminalChooser.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.util;\n+\n+import com.powsybl.iidm.network.ConnectableType;\n+import com.powsybl.iidm.network.Injection;\n+import com.powsybl.iidm.network.Terminal;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * A class which allows to choose a terminal, according to given filters, among several terminals\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public final class TerminalChooser {\n+\n+    private final List<Predicate<Terminal>> rules;\n+\n+    public static TerminalChooser getDefaultSlackTerminalChooser() {\n+        List<Predicate<Terminal>> rules = new ArrayList<>();\n+        rules.add(t -> t.getConnectable().getType() == ConnectableType.BUSBAR_SECTION);\n+        rules.add(t -> t.getConnectable() instanceof Injection);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU5MDkzNA=="}, "originalCommit": {"oid": "3de39dee657e079913bc921486b9a3e38eefe187"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTgyMTYwOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-util/src/main/java/com/powsybl/iidm/network/util/TerminalChooser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNzozMDo0NVrOG1WMlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDowNzo0MlrOG3cGFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU5MTM4Mw==", "bodyText": "Rules cannot be null:\nthis.rules = Objects.requireNonNull(rules);", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r458591383", "createdAt": "2020-07-22T07:30:45Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-util/src/main/java/com/powsybl/iidm/network/util/TerminalChooser.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.util;\n+\n+import com.powsybl.iidm.network.ConnectableType;\n+import com.powsybl.iidm.network.Injection;\n+import com.powsybl.iidm.network.Terminal;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * A class which allows to choose a terminal, according to given filters, among several terminals\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public final class TerminalChooser {\n+\n+    private final List<Predicate<Terminal>> rules;\n+\n+    public static TerminalChooser getDefaultSlackTerminalChooser() {\n+        List<Predicate<Terminal>> rules = new ArrayList<>();\n+        rules.add(t -> t.getConnectable().getType() == ConnectableType.BUSBAR_SECTION);\n+        rules.add(t -> t.getConnectable() instanceof Injection);\n+        return new TerminalChooser(rules);\n+    }\n+\n+    public TerminalChooser(List<Predicate<Terminal>> rules) {\n+        this.rules = rules;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de39dee657e079913bc921486b9a3e38eefe187"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwNDg0MQ==", "bodyText": "I reopen this conversation because it's not fixed", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r460704841", "createdAt": "2020-07-27T07:45:34Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-util/src/main/java/com/powsybl/iidm/network/util/TerminalChooser.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.util;\n+\n+import com.powsybl.iidm.network.ConnectableType;\n+import com.powsybl.iidm.network.Injection;\n+import com.powsybl.iidm.network.Terminal;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * A class which allows to choose a terminal, according to given filters, among several terminals\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public final class TerminalChooser {\n+\n+    private final List<Predicate<Terminal>> rules;\n+\n+    public static TerminalChooser getDefaultSlackTerminalChooser() {\n+        List<Predicate<Terminal>> rules = new ArrayList<>();\n+        rules.add(t -> t.getConnectable().getType() == ConnectableType.BUSBAR_SECTION);\n+        rules.add(t -> t.getConnectable() instanceof Injection);\n+        return new TerminalChooser(rules);\n+    }\n+\n+    public TerminalChooser(List<Predicate<Terminal>> rules) {\n+        this.rules = rules;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU5MTM4Mw=="}, "originalCommit": {"oid": "3de39dee657e079913bc921486b9a3e38eefe187"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4NTE3Mg==", "bodyText": "Correctly corrected this time!", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r460785172", "createdAt": "2020-07-27T10:07:42Z", "author": {"login": "flo-dup"}, "path": "iidm/iidm-util/src/main/java/com/powsybl/iidm/network/util/TerminalChooser.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.util;\n+\n+import com.powsybl.iidm.network.ConnectableType;\n+import com.powsybl.iidm.network.Injection;\n+import com.powsybl.iidm.network.Terminal;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * A class which allows to choose a terminal, according to given filters, among several terminals\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public final class TerminalChooser {\n+\n+    private final List<Predicate<Terminal>> rules;\n+\n+    public static TerminalChooser getDefaultSlackTerminalChooser() {\n+        List<Predicate<Terminal>> rules = new ArrayList<>();\n+        rules.add(t -> t.getConnectable().getType() == ConnectableType.BUSBAR_SECTION);\n+        rules.add(t -> t.getConnectable() instanceof Injection);\n+        return new TerminalChooser(rules);\n+    }\n+\n+    public TerminalChooser(List<Predicate<Terminal>> rules) {\n+        this.rules = rules;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU5MTM4Mw=="}, "originalCommit": {"oid": "3de39dee657e079913bc921486b9a3e38eefe187"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTkzMzMzOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-util/src/main/java/com/powsybl/iidm/network/util/TerminalChooser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwODowMTo0OVrOG1XQvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzozMzozN1rOG1imhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYwODgyOQ==", "bodyText": "I'm not sure it's really efficient: we iterate many times over the list of terminals.", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r458608829", "createdAt": "2020-07-22T08:01:49Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-util/src/main/java/com/powsybl/iidm/network/util/TerminalChooser.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.util;\n+\n+import com.powsybl.iidm.network.ConnectableType;\n+import com.powsybl.iidm.network.Injection;\n+import com.powsybl.iidm.network.Terminal;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * A class which allows to choose a terminal, according to given filters, among several terminals\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public final class TerminalChooser {\n+\n+    private final List<Predicate<Terminal>> rules;\n+\n+    public static TerminalChooser getDefaultSlackTerminalChooser() {\n+        List<Predicate<Terminal>> rules = new ArrayList<>();\n+        rules.add(t -> t.getConnectable().getType() == ConnectableType.BUSBAR_SECTION);\n+        rules.add(t -> t.getConnectable() instanceof Injection);\n+        return new TerminalChooser(rules);\n+    }\n+\n+    public TerminalChooser(List<Predicate<Terminal>> rules) {\n+        this.rules = rules;\n+    }\n+\n+    /**\n+     * @param terminals the terminals among which a terminal has to be chosen\n+     * @return the first terminal satisfying a rule (rules are checked in ascending order)\n+     */\n+    public Terminal choose(Iterable<? extends Terminal> terminals) {\n+        for (Predicate<Terminal> predicate : rules) {\n+            Optional<? extends Terminal> terminal = StreamSupport.stream(terminals.spliterator(), false)\n+                .filter(predicate)\n+                .findFirst();\n+            if (terminal.isPresent()) {\n+                return terminal.get();\n+            }\n+        }\n+        Iterator<? extends Terminal> it = terminals.iterator();\n+        return it.hasNext() ? it.next() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de39dee657e079913bc921486b9a3e38eefe187"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc5NDYyOA==", "bodyText": "Corrected. I thought the number of terminals was too small to bother about efficiency... \ud83d\ude14", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r458794628", "createdAt": "2020-07-22T13:33:37Z", "author": {"login": "flo-dup"}, "path": "iidm/iidm-util/src/main/java/com/powsybl/iidm/network/util/TerminalChooser.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.util;\n+\n+import com.powsybl.iidm.network.ConnectableType;\n+import com.powsybl.iidm.network.Injection;\n+import com.powsybl.iidm.network.Terminal;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * A class which allows to choose a terminal, according to given filters, among several terminals\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public final class TerminalChooser {\n+\n+    private final List<Predicate<Terminal>> rules;\n+\n+    public static TerminalChooser getDefaultSlackTerminalChooser() {\n+        List<Predicate<Terminal>> rules = new ArrayList<>();\n+        rules.add(t -> t.getConnectable().getType() == ConnectableType.BUSBAR_SECTION);\n+        rules.add(t -> t.getConnectable() instanceof Injection);\n+        return new TerminalChooser(rules);\n+    }\n+\n+    public TerminalChooser(List<Predicate<Terminal>> rules) {\n+        this.rules = rules;\n+    }\n+\n+    /**\n+     * @param terminals the terminals among which a terminal has to be chosen\n+     * @return the first terminal satisfying a rule (rules are checked in ascending order)\n+     */\n+    public Terminal choose(Iterable<? extends Terminal> terminals) {\n+        for (Predicate<Terminal> predicate : rules) {\n+            Optional<? extends Terminal> terminal = StreamSupport.stream(terminals.spliterator(), false)\n+                .filter(predicate)\n+                .findFirst();\n+            if (terminal.isPresent()) {\n+                return terminal.get();\n+            }\n+        }\n+        Iterator<? extends Terminal> it = terminals.iterator();\n+        return it.hasNext() ? it.next() : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYwODgyOQ=="}, "originalCommit": {"oid": "3de39dee657e079913bc921486b9a3e38eefe187"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjAzODI1OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-util/src/main/java/com/powsybl/iidm/network/util/TerminalChooser.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwODoyOTo0OFrOG1YQ5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDowNzoxOVrOG3cFUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyNTI1NA==", "bodyText": "Not sure it's really efficient, specially because you iterate over the stream to create the list, and then we iterate several times over the list in the other choose method", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r458625254", "createdAt": "2020-07-22T08:29:48Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-util/src/main/java/com/powsybl/iidm/network/util/TerminalChooser.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.util;\n+\n+import com.powsybl.iidm.network.ConnectableType;\n+import com.powsybl.iidm.network.Injection;\n+import com.powsybl.iidm.network.Terminal;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * A class which allows to choose a terminal, according to given filters, among several terminals\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public final class TerminalChooser {\n+\n+    private final List<Predicate<Terminal>> rules;\n+\n+    public static TerminalChooser getDefaultSlackTerminalChooser() {\n+        List<Predicate<Terminal>> rules = new ArrayList<>();\n+        rules.add(t -> t.getConnectable().getType() == ConnectableType.BUSBAR_SECTION);\n+        rules.add(t -> t.getConnectable() instanceof Injection);\n+        return new TerminalChooser(rules);\n+    }\n+\n+    public TerminalChooser(List<Predicate<Terminal>> rules) {\n+        this.rules = rules;\n+    }\n+\n+    /**\n+     * @param terminals the terminals among which a terminal has to be chosen\n+     * @return the first terminal satisfying a rule (rules are checked in ascending order)\n+     */\n+    public Terminal choose(Iterable<? extends Terminal> terminals) {\n+        for (Predicate<Terminal> predicate : rules) {\n+            Optional<? extends Terminal> terminal = StreamSupport.stream(terminals.spliterator(), false)\n+                .filter(predicate)\n+                .findFirst();\n+            if (terminal.isPresent()) {\n+                return terminal.get();\n+            }\n+        }\n+        Iterator<? extends Terminal> it = terminals.iterator();\n+        return it.hasNext() ? it.next() : null;\n+    }\n+\n+    /**\n+     * @param terminals the terminals among which a terminal has to be chosen\n+     * @return the first terminal satisfying a rule (rules are checked in ascending order)\n+     */\n+    public Terminal choose(Stream<? extends Terminal> terminals) {\n+        return choose(terminals.collect(Collectors.toList()));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "561f812fc39b92d54fc76f526a0986ac8781df0b"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc5NDgzNA==", "bodyText": "Same...", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r458794834", "createdAt": "2020-07-22T13:33:55Z", "author": {"login": "flo-dup"}, "path": "iidm/iidm-util/src/main/java/com/powsybl/iidm/network/util/TerminalChooser.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.util;\n+\n+import com.powsybl.iidm.network.ConnectableType;\n+import com.powsybl.iidm.network.Injection;\n+import com.powsybl.iidm.network.Terminal;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * A class which allows to choose a terminal, according to given filters, among several terminals\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public final class TerminalChooser {\n+\n+    private final List<Predicate<Terminal>> rules;\n+\n+    public static TerminalChooser getDefaultSlackTerminalChooser() {\n+        List<Predicate<Terminal>> rules = new ArrayList<>();\n+        rules.add(t -> t.getConnectable().getType() == ConnectableType.BUSBAR_SECTION);\n+        rules.add(t -> t.getConnectable() instanceof Injection);\n+        return new TerminalChooser(rules);\n+    }\n+\n+    public TerminalChooser(List<Predicate<Terminal>> rules) {\n+        this.rules = rules;\n+    }\n+\n+    /**\n+     * @param terminals the terminals among which a terminal has to be chosen\n+     * @return the first terminal satisfying a rule (rules are checked in ascending order)\n+     */\n+    public Terminal choose(Iterable<? extends Terminal> terminals) {\n+        for (Predicate<Terminal> predicate : rules) {\n+            Optional<? extends Terminal> terminal = StreamSupport.stream(terminals.spliterator(), false)\n+                .filter(predicate)\n+                .findFirst();\n+            if (terminal.isPresent()) {\n+                return terminal.get();\n+            }\n+        }\n+        Iterator<? extends Terminal> it = terminals.iterator();\n+        return it.hasNext() ? it.next() : null;\n+    }\n+\n+    /**\n+     * @param terminals the terminals among which a terminal has to be chosen\n+     * @return the first terminal satisfying a rule (rules are checked in ascending order)\n+     */\n+    public Terminal choose(Stream<? extends Terminal> terminals) {\n+        return choose(terminals.collect(Collectors.toList()));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyNTI1NA=="}, "originalCommit": {"oid": "561f812fc39b92d54fc76f526a0986ac8781df0b"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwNTkyMg==", "bodyText": "Same what?", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r460705922", "createdAt": "2020-07-27T07:47:42Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-util/src/main/java/com/powsybl/iidm/network/util/TerminalChooser.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.util;\n+\n+import com.powsybl.iidm.network.ConnectableType;\n+import com.powsybl.iidm.network.Injection;\n+import com.powsybl.iidm.network.Terminal;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * A class which allows to choose a terminal, according to given filters, among several terminals\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public final class TerminalChooser {\n+\n+    private final List<Predicate<Terminal>> rules;\n+\n+    public static TerminalChooser getDefaultSlackTerminalChooser() {\n+        List<Predicate<Terminal>> rules = new ArrayList<>();\n+        rules.add(t -> t.getConnectable().getType() == ConnectableType.BUSBAR_SECTION);\n+        rules.add(t -> t.getConnectable() instanceof Injection);\n+        return new TerminalChooser(rules);\n+    }\n+\n+    public TerminalChooser(List<Predicate<Terminal>> rules) {\n+        this.rules = rules;\n+    }\n+\n+    /**\n+     * @param terminals the terminals among which a terminal has to be chosen\n+     * @return the first terminal satisfying a rule (rules are checked in ascending order)\n+     */\n+    public Terminal choose(Iterable<? extends Terminal> terminals) {\n+        for (Predicate<Terminal> predicate : rules) {\n+            Optional<? extends Terminal> terminal = StreamSupport.stream(terminals.spliterator(), false)\n+                .filter(predicate)\n+                .findFirst();\n+            if (terminal.isPresent()) {\n+                return terminal.get();\n+            }\n+        }\n+        Iterator<? extends Terminal> it = terminals.iterator();\n+        return it.hasNext() ? it.next() : null;\n+    }\n+\n+    /**\n+     * @param terminals the terminals among which a terminal has to be chosen\n+     * @return the first terminal satisfying a rule (rules are checked in ascending order)\n+     */\n+    public Terminal choose(Stream<? extends Terminal> terminals) {\n+        return choose(terminals.collect(Collectors.toList()));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyNTI1NA=="}, "originalCommit": {"oid": "561f812fc39b92d54fc76f526a0986ac8781df0b"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4NDk3Ng==", "bodyText": "Same as previous conversation: I corrected it.", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r460784976", "createdAt": "2020-07-27T10:07:19Z", "author": {"login": "flo-dup"}, "path": "iidm/iidm-util/src/main/java/com/powsybl/iidm/network/util/TerminalChooser.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.util;\n+\n+import com.powsybl.iidm.network.ConnectableType;\n+import com.powsybl.iidm.network.Injection;\n+import com.powsybl.iidm.network.Terminal;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * A class which allows to choose a terminal, according to given filters, among several terminals\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public final class TerminalChooser {\n+\n+    private final List<Predicate<Terminal>> rules;\n+\n+    public static TerminalChooser getDefaultSlackTerminalChooser() {\n+        List<Predicate<Terminal>> rules = new ArrayList<>();\n+        rules.add(t -> t.getConnectable().getType() == ConnectableType.BUSBAR_SECTION);\n+        rules.add(t -> t.getConnectable() instanceof Injection);\n+        return new TerminalChooser(rules);\n+    }\n+\n+    public TerminalChooser(List<Predicate<Terminal>> rules) {\n+        this.rules = rules;\n+    }\n+\n+    /**\n+     * @param terminals the terminals among which a terminal has to be chosen\n+     * @return the first terminal satisfying a rule (rules are checked in ascending order)\n+     */\n+    public Terminal choose(Iterable<? extends Terminal> terminals) {\n+        for (Predicate<Terminal> predicate : rules) {\n+            Optional<? extends Terminal> terminal = StreamSupport.stream(terminals.spliterator(), false)\n+                .filter(predicate)\n+                .findFirst();\n+            if (terminal.isPresent()) {\n+                return terminal.get();\n+            }\n+        }\n+        Iterator<? extends Terminal> it = terminals.iterator();\n+        return it.hasNext() ? it.next() : null;\n+    }\n+\n+    /**\n+     * @param terminals the terminals among which a terminal has to be chosen\n+     * @return the first terminal satisfying a rule (rules are checked in ascending order)\n+     */\n+    public Terminal choose(Stream<? extends Terminal> terminals) {\n+        return choose(terminals.collect(Collectors.toList()));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyNTI1NA=="}, "originalCommit": {"oid": "561f812fc39b92d54fc76f526a0986ac8781df0b"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjA0NjQ0OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-xml-converter/src/test/resources/slackTerminal.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwODozMTo0OFrOG1YVzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOTowODo1NVrOG1Zt5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyNjUxMQ==", "bodyText": "Do we need to add copyright header in this file too?", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r458626511", "createdAt": "2020-07-22T08:31:48Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/test/resources/slackTerminal.xml", "diffHunk": "@@ -0,0 +1,47 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "561f812fc39b92d54fc76f526a0986ac8781df0b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY0OTA2MQ==", "bodyText": "Maybe not, there is no copyright in the network xml files for the other extensions.", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r458649061", "createdAt": "2020-07-22T09:08:55Z", "author": {"login": "flo-dup"}, "path": "iidm/iidm-xml-converter/src/test/resources/slackTerminal.xml", "diffHunk": "@@ -0,0 +1,47 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyNjUxMQ=="}, "originalCommit": {"oid": "561f812fc39b92d54fc76f526a0986ac8781df0b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTg5NjE2OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/extensions/SlackTerminal.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzoyNjo1NlrOG3WnsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODozMjoyMFrOG3YvFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY5NTQ3Mw==", "bodyText": "I would write the method like this:\n    default SlackTerminal setTerminal(Terminal terminal, boolean cleanIfCleanable) {\n        boolean cleanable = setTerminal(terminal);\n        if (cleanIfCleanable && cleanable) {\n            getExtendable().removeExtension(SlackTerminal.class);\n        }\n        return this;\n    }", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r460695473", "createdAt": "2020-07-27T07:26:56Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/extensions/SlackTerminal.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.extensions;\n+\n+import com.powsybl.commons.extensions.Extension;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.iidm.network.Terminal;\n+import com.powsybl.iidm.network.VoltageLevel;\n+\n+/**\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public interface SlackTerminal extends Extension<VoltageLevel> {\n+\n+    /**\n+     * Remove all SlackTerminal extensions from given network\n+     * @param network the network to remove the slackTerminal extensions from\n+     */\n+    static void removeAllFrom(Network network) {\n+        network.getVoltageLevels().forEach(vl -> vl.removeExtension(SlackTerminal.class));\n+    }\n+\n+    /**\n+     * Reset the slackTerminal extension to the given terminal (may be null)\n+     * @param voltageLevel the voltageLevel to reset the slackTerminal extension from\n+     * @param terminal the terminal to reset the extension to (may be null)\n+     */\n+    static void reset(VoltageLevel voltageLevel, Terminal terminal) {\n+        SlackTerminal st = voltageLevel.getExtension(SlackTerminal.class);\n+        if (st == null) {\n+            voltageLevel.newExtension(SlackTerminalAdder.class)\n+                .withTerminal(terminal)\n+                .add();\n+        } else {\n+            st.setTerminal(terminal, true);\n+        }\n+    }\n+\n+    @Override\n+    default String getName() {\n+        return \"slackTerminal\";\n+    }\n+\n+    /**\n+     * Get the terminal pointed by the current SlackTerminal\n+     * @return the corresponding terminal\n+     */\n+    Terminal getTerminal();\n+\n+    /**\n+     * Set the terminal pointed by the current SlackTerminal\n+     * @param terminal the corresponding terminal\n+     * @return the current SlackTerminal\n+     */\n+    SlackTerminal setTerminal(Terminal terminal);\n+\n+    /**\n+     * Set the terminal pointed by the current SlackTerminal\n+     * @param terminal the corresponding terminal (may be null)\n+     * @param cleanIfCleanable if true and if the slackTerminal is cleanable, removes the SlackTerminal extension from\n+     *                         the corresponding VoltageLevel\n+     * @return the current SlackTerminal\n+     */\n+    default SlackTerminal setTerminal(Terminal terminal, boolean cleanIfCleanable) {\n+        if (cleanIfCleanable) {\n+            if (setTerminal(terminal).isCleanable()) {\n+                getExtendable().removeExtension(SlackTerminal.class);\n+            }\n+        } else {\n+            setTerminal(terminal);\n+        }\n+        return this;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b376562e4351c2e2c8fcd5bc32bc4cf90ceaed6"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcyNzI4MQ==", "bodyText": "Yes it's more compact! but it would be better to check if the slackTerminal is cleanable only if required, so:\ndefault SlackTerminal setTerminal(Terminal terminal, boolean cleanIfCleanable) {\n    setTerminal(terminal);\n    if (cleanIfCleanable && isCleanable()) {\n        getExtendable().removeExtension(SlackTerminal.class);\n    }\n    return this;\n}\n\nOtherwise with the multivariant implementation we iterate over the array for nothing", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r460727281", "createdAt": "2020-07-27T08:27:35Z", "author": {"login": "flo-dup"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/extensions/SlackTerminal.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.extensions;\n+\n+import com.powsybl.commons.extensions.Extension;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.iidm.network.Terminal;\n+import com.powsybl.iidm.network.VoltageLevel;\n+\n+/**\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public interface SlackTerminal extends Extension<VoltageLevel> {\n+\n+    /**\n+     * Remove all SlackTerminal extensions from given network\n+     * @param network the network to remove the slackTerminal extensions from\n+     */\n+    static void removeAllFrom(Network network) {\n+        network.getVoltageLevels().forEach(vl -> vl.removeExtension(SlackTerminal.class));\n+    }\n+\n+    /**\n+     * Reset the slackTerminal extension to the given terminal (may be null)\n+     * @param voltageLevel the voltageLevel to reset the slackTerminal extension from\n+     * @param terminal the terminal to reset the extension to (may be null)\n+     */\n+    static void reset(VoltageLevel voltageLevel, Terminal terminal) {\n+        SlackTerminal st = voltageLevel.getExtension(SlackTerminal.class);\n+        if (st == null) {\n+            voltageLevel.newExtension(SlackTerminalAdder.class)\n+                .withTerminal(terminal)\n+                .add();\n+        } else {\n+            st.setTerminal(terminal, true);\n+        }\n+    }\n+\n+    @Override\n+    default String getName() {\n+        return \"slackTerminal\";\n+    }\n+\n+    /**\n+     * Get the terminal pointed by the current SlackTerminal\n+     * @return the corresponding terminal\n+     */\n+    Terminal getTerminal();\n+\n+    /**\n+     * Set the terminal pointed by the current SlackTerminal\n+     * @param terminal the corresponding terminal\n+     * @return the current SlackTerminal\n+     */\n+    SlackTerminal setTerminal(Terminal terminal);\n+\n+    /**\n+     * Set the terminal pointed by the current SlackTerminal\n+     * @param terminal the corresponding terminal (may be null)\n+     * @param cleanIfCleanable if true and if the slackTerminal is cleanable, removes the SlackTerminal extension from\n+     *                         the corresponding VoltageLevel\n+     * @return the current SlackTerminal\n+     */\n+    default SlackTerminal setTerminal(Terminal terminal, boolean cleanIfCleanable) {\n+        if (cleanIfCleanable) {\n+            if (setTerminal(terminal).isCleanable()) {\n+                getExtendable().removeExtension(SlackTerminal.class);\n+            }\n+        } else {\n+            setTerminal(terminal);\n+        }\n+        return this;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY5NTQ3Mw=="}, "originalCommit": {"oid": "4b376562e4351c2e2c8fcd5bc32bc4cf90ceaed6"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDczMDEzMw==", "bodyText": "If we really want to avoid calling isCleanable when not required, couldn't we also add terminal==null in the condition?", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r460730133", "createdAt": "2020-07-27T08:32:20Z", "author": {"login": "flo-dup"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/extensions/SlackTerminal.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.extensions;\n+\n+import com.powsybl.commons.extensions.Extension;\n+import com.powsybl.iidm.network.Network;\n+import com.powsybl.iidm.network.Terminal;\n+import com.powsybl.iidm.network.VoltageLevel;\n+\n+/**\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public interface SlackTerminal extends Extension<VoltageLevel> {\n+\n+    /**\n+     * Remove all SlackTerminal extensions from given network\n+     * @param network the network to remove the slackTerminal extensions from\n+     */\n+    static void removeAllFrom(Network network) {\n+        network.getVoltageLevels().forEach(vl -> vl.removeExtension(SlackTerminal.class));\n+    }\n+\n+    /**\n+     * Reset the slackTerminal extension to the given terminal (may be null)\n+     * @param voltageLevel the voltageLevel to reset the slackTerminal extension from\n+     * @param terminal the terminal to reset the extension to (may be null)\n+     */\n+    static void reset(VoltageLevel voltageLevel, Terminal terminal) {\n+        SlackTerminal st = voltageLevel.getExtension(SlackTerminal.class);\n+        if (st == null) {\n+            voltageLevel.newExtension(SlackTerminalAdder.class)\n+                .withTerminal(terminal)\n+                .add();\n+        } else {\n+            st.setTerminal(terminal, true);\n+        }\n+    }\n+\n+    @Override\n+    default String getName() {\n+        return \"slackTerminal\";\n+    }\n+\n+    /**\n+     * Get the terminal pointed by the current SlackTerminal\n+     * @return the corresponding terminal\n+     */\n+    Terminal getTerminal();\n+\n+    /**\n+     * Set the terminal pointed by the current SlackTerminal\n+     * @param terminal the corresponding terminal\n+     * @return the current SlackTerminal\n+     */\n+    SlackTerminal setTerminal(Terminal terminal);\n+\n+    /**\n+     * Set the terminal pointed by the current SlackTerminal\n+     * @param terminal the corresponding terminal (may be null)\n+     * @param cleanIfCleanable if true and if the slackTerminal is cleanable, removes the SlackTerminal extension from\n+     *                         the corresponding VoltageLevel\n+     * @return the current SlackTerminal\n+     */\n+    default SlackTerminal setTerminal(Terminal terminal, boolean cleanIfCleanable) {\n+        if (cleanIfCleanable) {\n+            if (setTerminal(terminal).isCleanable()) {\n+                getExtendable().removeExtension(SlackTerminal.class);\n+            }\n+        } else {\n+            setTerminal(terminal);\n+        }\n+        return this;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY5NTQ3Mw=="}, "originalCommit": {"oid": "4b376562e4351c2e2c8fcd5bc32bc4cf90ceaed6"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTk1NjMzOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-util/src/main/java/com/powsybl/iidm/network/util/TerminalChooser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo0NDo1OFrOG3XLEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo0NDo1OFrOG3XLEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwNDUzMA==", "bodyText": "I would rename this method getDefault to avoid redundancy between the name of the class, and the name of this method", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r460704530", "createdAt": "2020-07-27T07:44:58Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-util/src/main/java/com/powsybl/iidm/network/util/TerminalChooser.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.util;\n+\n+import com.powsybl.iidm.network.ConnectableType;\n+import com.powsybl.iidm.network.Injection;\n+import com.powsybl.iidm.network.Terminal;\n+\n+import java.util.*;\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * A class which allows to choose a terminal, according to given filters, among several terminals\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public final class TerminalChooser {\n+\n+    private final List<Predicate<Terminal>> rules;\n+\n+    public static TerminalChooser getDefaultSlackTerminalChooser() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b376562e4351c2e2c8fcd5bc32bc4cf90ceaed6"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTk2MjE3OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-util/src/main/java/com/powsybl/iidm/network/util/TerminalChooser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo0Njo0OFrOG3XOpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo0Njo0OFrOG3XOpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwNTQ0NQ==", "bodyText": "I would rename this class TerminalFinder and the rename the choose method find", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r460705445", "createdAt": "2020-07-27T07:46:48Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-util/src/main/java/com/powsybl/iidm/network/util/TerminalChooser.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.util;\n+\n+import com.powsybl.iidm.network.ConnectableType;\n+import com.powsybl.iidm.network.Injection;\n+import com.powsybl.iidm.network.Terminal;\n+\n+import java.util.*;\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * A class which allows to choose a terminal, according to given filters, among several terminals\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+public final class TerminalChooser {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b376562e4351c2e2c8fcd5bc32bc4cf90ceaed6"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTk5NDI2OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/extensions/SlackTerminalXmlSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo1NjoxOVrOG3XiWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDowNDo0NVrOG3cACA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMDQ4OQ==", "bodyText": "I would check if the terminal is not null. I would also override the hasSubElements: this method should return true if the terminal is set, false otherwise", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r460710489", "createdAt": "2020-07-27T07:56:19Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/extensions/SlackTerminalXmlSerializer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.xml.extensions;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.extensions.AbstractExtensionXmlSerializer;\n+import com.powsybl.commons.extensions.ExtensionXmlSerializer;\n+import com.powsybl.commons.xml.XmlReaderContext;\n+import com.powsybl.commons.xml.XmlUtil;\n+import com.powsybl.commons.xml.XmlWriterContext;\n+import com.powsybl.iidm.network.Terminal;\n+import com.powsybl.iidm.network.VoltageLevel;\n+import com.powsybl.iidm.network.extensions.SlackTerminal;\n+import com.powsybl.iidm.network.extensions.SlackTerminalAdder;\n+import com.powsybl.iidm.xml.NetworkXmlReaderContext;\n+import com.powsybl.iidm.xml.NetworkXmlWriterContext;\n+import com.powsybl.iidm.xml.TerminalRefXml;\n+\n+import javax.xml.stream.XMLStreamException;\n+\n+/**\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+@AutoService(ExtensionXmlSerializer.class)\n+public class SlackTerminalXmlSerializer extends AbstractExtensionXmlSerializer<VoltageLevel, SlackTerminal> {\n+\n+    private static final String ELEM_TERMINAL_REF = \"terminalRef\";\n+\n+    public SlackTerminalXmlSerializer() {\n+        super(\"slackTerminal\", \"network\", SlackTerminal.class, true, \"slackTerminal.xsd\",\n+            \"http://www.powsybl.org/schema/iidm/ext/slack_terminal/1_0\", \"slt\");\n+    }\n+\n+    @Override\n+    public void write(SlackTerminal slackTerminal, XmlWriterContext context) throws XMLStreamException {\n+        TerminalRefXml.writeTerminalRef(slackTerminal.getTerminal(), (NetworkXmlWriterContext) context, getNamespaceUri(), ELEM_TERMINAL_REF);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b376562e4351c2e2c8fcd5bc32bc4cf90ceaed6"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4MzYyNA==", "bodyText": "Corrected. And hasSubElements is now always false, as the attributes are now directly in the slackTerminal (see comment below)", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r460783624", "createdAt": "2020-07-27T10:04:45Z", "author": {"login": "flo-dup"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/extensions/SlackTerminalXmlSerializer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.xml.extensions;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.extensions.AbstractExtensionXmlSerializer;\n+import com.powsybl.commons.extensions.ExtensionXmlSerializer;\n+import com.powsybl.commons.xml.XmlReaderContext;\n+import com.powsybl.commons.xml.XmlUtil;\n+import com.powsybl.commons.xml.XmlWriterContext;\n+import com.powsybl.iidm.network.Terminal;\n+import com.powsybl.iidm.network.VoltageLevel;\n+import com.powsybl.iidm.network.extensions.SlackTerminal;\n+import com.powsybl.iidm.network.extensions.SlackTerminalAdder;\n+import com.powsybl.iidm.xml.NetworkXmlReaderContext;\n+import com.powsybl.iidm.xml.NetworkXmlWriterContext;\n+import com.powsybl.iidm.xml.TerminalRefXml;\n+\n+import javax.xml.stream.XMLStreamException;\n+\n+/**\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+@AutoService(ExtensionXmlSerializer.class)\n+public class SlackTerminalXmlSerializer extends AbstractExtensionXmlSerializer<VoltageLevel, SlackTerminal> {\n+\n+    private static final String ELEM_TERMINAL_REF = \"terminalRef\";\n+\n+    public SlackTerminalXmlSerializer() {\n+        super(\"slackTerminal\", \"network\", SlackTerminal.class, true, \"slackTerminal.xsd\",\n+            \"http://www.powsybl.org/schema/iidm/ext/slack_terminal/1_0\", \"slt\");\n+    }\n+\n+    @Override\n+    public void write(SlackTerminal slackTerminal, XmlWriterContext context) throws XMLStreamException {\n+        TerminalRefXml.writeTerminalRef(slackTerminal.getTerminal(), (NetworkXmlWriterContext) context, getNamespaceUri(), ELEM_TERMINAL_REF);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMDQ4OQ=="}, "originalCommit": {"oid": "4b376562e4351c2e2c8fcd5bc32bc4cf90ceaed6"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTk5NjUwOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/extensions/SlackTerminalXmlSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo1Njo1OVrOG3XjuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDowNToyOVrOG3cBhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMDg0MQ==", "bodyText": "I think if you change a little bit the export, the terminalRef is required, so you can remove this test", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r460710841", "createdAt": "2020-07-27T07:56:59Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/extensions/SlackTerminalXmlSerializer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.xml.extensions;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.extensions.AbstractExtensionXmlSerializer;\n+import com.powsybl.commons.extensions.ExtensionXmlSerializer;\n+import com.powsybl.commons.xml.XmlReaderContext;\n+import com.powsybl.commons.xml.XmlUtil;\n+import com.powsybl.commons.xml.XmlWriterContext;\n+import com.powsybl.iidm.network.Terminal;\n+import com.powsybl.iidm.network.VoltageLevel;\n+import com.powsybl.iidm.network.extensions.SlackTerminal;\n+import com.powsybl.iidm.network.extensions.SlackTerminalAdder;\n+import com.powsybl.iidm.xml.NetworkXmlReaderContext;\n+import com.powsybl.iidm.xml.NetworkXmlWriterContext;\n+import com.powsybl.iidm.xml.TerminalRefXml;\n+\n+import javax.xml.stream.XMLStreamException;\n+\n+/**\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+@AutoService(ExtensionXmlSerializer.class)\n+public class SlackTerminalXmlSerializer extends AbstractExtensionXmlSerializer<VoltageLevel, SlackTerminal> {\n+\n+    private static final String ELEM_TERMINAL_REF = \"terminalRef\";\n+\n+    public SlackTerminalXmlSerializer() {\n+        super(\"slackTerminal\", \"network\", SlackTerminal.class, true, \"slackTerminal.xsd\",\n+            \"http://www.powsybl.org/schema/iidm/ext/slack_terminal/1_0\", \"slt\");\n+    }\n+\n+    @Override\n+    public void write(SlackTerminal slackTerminal, XmlWriterContext context) throws XMLStreamException {\n+        TerminalRefXml.writeTerminalRef(slackTerminal.getTerminal(), (NetworkXmlWriterContext) context, getNamespaceUri(), ELEM_TERMINAL_REF);\n+    }\n+\n+    @Override\n+    public SlackTerminal read(VoltageLevel voltageLevel, XmlReaderContext context) throws XMLStreamException {\n+        NetworkXmlReaderContext networkContext = (NetworkXmlReaderContext) context;\n+        XmlUtil.readUntilEndElement(getExtensionName(), networkContext.getReader(), () -> {\n+            if (networkContext.getReader().getLocalName().equals(ELEM_TERMINAL_REF)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b376562e4351c2e2c8fcd5bc32bc4cf90ceaed6"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4NDAwNg==", "bodyText": "Corrected, no test anymore (attributes directly in the slackTerminal object).", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r460784006", "createdAt": "2020-07-27T10:05:29Z", "author": {"login": "flo-dup"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/extensions/SlackTerminalXmlSerializer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.xml.extensions;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.extensions.AbstractExtensionXmlSerializer;\n+import com.powsybl.commons.extensions.ExtensionXmlSerializer;\n+import com.powsybl.commons.xml.XmlReaderContext;\n+import com.powsybl.commons.xml.XmlUtil;\n+import com.powsybl.commons.xml.XmlWriterContext;\n+import com.powsybl.iidm.network.Terminal;\n+import com.powsybl.iidm.network.VoltageLevel;\n+import com.powsybl.iidm.network.extensions.SlackTerminal;\n+import com.powsybl.iidm.network.extensions.SlackTerminalAdder;\n+import com.powsybl.iidm.xml.NetworkXmlReaderContext;\n+import com.powsybl.iidm.xml.NetworkXmlWriterContext;\n+import com.powsybl.iidm.xml.TerminalRefXml;\n+\n+import javax.xml.stream.XMLStreamException;\n+\n+/**\n+ * @author Florian Dupuy <florian.dupuy at rte-france.com>\n+ */\n+@AutoService(ExtensionXmlSerializer.class)\n+public class SlackTerminalXmlSerializer extends AbstractExtensionXmlSerializer<VoltageLevel, SlackTerminal> {\n+\n+    private static final String ELEM_TERMINAL_REF = \"terminalRef\";\n+\n+    public SlackTerminalXmlSerializer() {\n+        super(\"slackTerminal\", \"network\", SlackTerminal.class, true, \"slackTerminal.xsd\",\n+            \"http://www.powsybl.org/schema/iidm/ext/slack_terminal/1_0\", \"slt\");\n+    }\n+\n+    @Override\n+    public void write(SlackTerminal slackTerminal, XmlWriterContext context) throws XMLStreamException {\n+        TerminalRefXml.writeTerminalRef(slackTerminal.getTerminal(), (NetworkXmlWriterContext) context, getNamespaceUri(), ELEM_TERMINAL_REF);\n+    }\n+\n+    @Override\n+    public SlackTerminal read(VoltageLevel voltageLevel, XmlReaderContext context) throws XMLStreamException {\n+        NetworkXmlReaderContext networkContext = (NetworkXmlReaderContext) context;\n+        XmlUtil.readUntilEndElement(getExtensionName(), networkContext.getReader(), () -> {\n+            if (networkContext.getReader().getLocalName().equals(ELEM_TERMINAL_REF)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMDg0MQ=="}, "originalCommit": {"oid": "4b376562e4351c2e2c8fcd5bc32bc4cf90ceaed6"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTk5ODg4OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-xml-converter/src/main/resources/xsd/slackTerminal.xsd", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo1Nzo0NVrOG3XlTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDowNzowMFrOG3cEtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMTI0NQ==", "bodyText": "Set the min/max occurs: this element is required\nWe could also add attributes directly to the slackTerminal object, to make the XML more compact", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r460711245", "createdAt": "2020-07-27T07:57:45Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/resources/xsd/slackTerminal.xsd", "diffHunk": "@@ -0,0 +1,23 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Copyright (c) 2020, RTE (http://www.rte-france.com)\n+    This Source Code Form is subject to the terms of the Mozilla Public\n+    License, v. 2.0. If a copy of the MPL was not distributed with this\n+    file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+\n+-->\n+<xs:schema version=\"1.0\"\n+           xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n+           xmlns:iidm=\"http://www.powsybl.org/schema/iidm/1_3\"\n+           targetNamespace=\"http://www.powsybl.org/schema/iidm/ext/slack_terminal/1_0\"\n+           elementFormDefault=\"qualified\">\n+    <xs:import namespace=\"http://www.powsybl.org/schema/iidm/1_3\" schemaLocation=\"iidm_V1_3.xsd\"/>\n+    <xs:element name=\"slackTerminal\">\n+        <xs:complexType>\n+            <xs:sequence>\n+                <xs:element name=\"terminalRef\" type=\"iidm:TerminalRef\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b376562e4351c2e2c8fcd5bc32bc4cf90ceaed6"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4NDgyMg==", "bodyText": "Attributes are now directly to the slackTerminal object.", "url": "https://github.com/powsybl/powsybl-core/pull/1381#discussion_r460784822", "createdAt": "2020-07-27T10:07:00Z", "author": {"login": "flo-dup"}, "path": "iidm/iidm-xml-converter/src/main/resources/xsd/slackTerminal.xsd", "diffHunk": "@@ -0,0 +1,23 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Copyright (c) 2020, RTE (http://www.rte-france.com)\n+    This Source Code Form is subject to the terms of the Mozilla Public\n+    License, v. 2.0. If a copy of the MPL was not distributed with this\n+    file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+\n+-->\n+<xs:schema version=\"1.0\"\n+           xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n+           xmlns:iidm=\"http://www.powsybl.org/schema/iidm/1_3\"\n+           targetNamespace=\"http://www.powsybl.org/schema/iidm/ext/slack_terminal/1_0\"\n+           elementFormDefault=\"qualified\">\n+    <xs:import namespace=\"http://www.powsybl.org/schema/iidm/1_3\" schemaLocation=\"iidm_V1_3.xsd\"/>\n+    <xs:element name=\"slackTerminal\">\n+        <xs:complexType>\n+            <xs:sequence>\n+                <xs:element name=\"terminalRef\" type=\"iidm:TerminalRef\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMTI0NQ=="}, "originalCommit": {"oid": "4b376562e4351c2e2c8fcd5bc32bc4cf90ceaed6"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4965, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}