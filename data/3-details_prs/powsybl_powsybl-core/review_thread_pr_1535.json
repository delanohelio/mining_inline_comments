{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0NjI5NzU4", "number": 1535, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMDo1MTozNlrOE2tTjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOToyMzoyMVrOE5V9XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODAwODQ3OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/ShuntXml.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMDo1MTozNlrOHvpCBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMDo1MTozNlrOHvpCBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcxNzM4Mg==", "bodyText": "I'm not totally sure this is OK. The new shunt API wasn't available before XIIDM v1.3. If the model is non-linear, should we throw an exception instead? From my point of view, it's not equivalent and should not be supported", "url": "https://github.com/powsybl/powsybl-core/pull/1535#discussion_r519717382", "createdAt": "2020-11-09T10:51:36Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/ShuntXml.java", "diffHunk": "@@ -51,8 +51,11 @@ protected void writeRootElementAttributes(ShuntCompensator sc, VoltageLevel vl,\n             IidmXmlUtil.assertMinimumVersion(getRootElementName(), SHUNT_NON_LINEAR_MODEL, IidmXmlUtil.ErrorMessage.NOT_SUPPORTED, IidmXmlVersion.V_1_3, context);\n         }\n         IidmXmlUtil.runUntilMaximumVersion(IidmXmlVersion.V_1_2, context, () -> {\n-            XmlUtil.writeDouble(B_PER_SECTION, sc.getModel(ShuntCompensatorLinearModel.class).getBPerSection(), context.getWriter());\n-            context.getWriter().writeAttribute(MAXIMUM_SECTION_COUNT, Integer.toString(sc.getMaximumSectionCount()));\n+            ShuntCompensatorModel model = sc.getModel();\n+            double bPerSection = model instanceof ShuntCompensatorLinearModel ? ((ShuntCompensatorLinearModel) model).getBPerSection() : sc.getB();\n+            XmlUtil.writeDouble(B_PER_SECTION, bPerSection, context.getWriter());\n+            int maximumSectionCount = model instanceof ShuntCompensatorLinearModel ? sc.getMaximumSectionCount() : 1;\n+            context.getWriter().writeAttribute(MAXIMUM_SECTION_COUNT, Integer.toString(maximumSectionCount));\n             context.getWriter().writeAttribute(\"currentSectionCount\", Integer.toString(sc.getSectionCount()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77075d7b534e45d4666056523cfeac6986b5c612"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODAxNjk3OnYy", "diffSide": "RIGHT", "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/ShuntXml.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMDo1Mzo1NFrOHvpHQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjowNzoyM1rOHv171A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcxODcyMQ==", "bodyText": "If we encounter a non linear model, and should export it in a previous version, we silently ignore it. Should we throw an exception? The exported network is not equivalent then.", "url": "https://github.com/powsybl/powsybl-core/pull/1535#discussion_r519718721", "createdAt": "2020-11-09T10:53:54Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/ShuntXml.java", "diffHunk": "@@ -81,13 +84,15 @@ private static void writeModel(ShuntCompensator sc, NetworkXmlWriterContext cont\n             XmlUtil.writeDouble(\"gPerSection\", sc.getModel(ShuntCompensatorLinearModel.class).getGPerSection(), context.getWriter());\n             context.getWriter().writeAttribute(MAXIMUM_SECTION_COUNT, Integer.toString(sc.getMaximumSectionCount()));\n         } else if (sc.getModelType() == ShuntCompensatorModelType.NON_LINEAR) {\n-            context.getWriter().writeStartElement(context.getVersion().getNamespaceURI(), SHUNT_NON_LINEAR_MODEL);\n-            for (ShuntCompensatorNonLinearModel.Section s : sc.getModel(ShuntCompensatorNonLinearModel.class).getAllSections()) {\n-                context.getWriter().writeEmptyElement(context.getVersion().getNamespaceURI(), \"section\");\n-                XmlUtil.writeDouble(\"b\", s.getB(), context.getWriter());\n-                XmlUtil.writeDouble(\"g\", s.getG(), context.getWriter());\n-            }\n-            context.getWriter().writeEndElement();\n+            IidmXmlUtil.runFromMinimumVersion(IidmXmlVersion.V_1_3, context, () -> {\n+                context.getWriter().writeStartElement(context.getVersion().getNamespaceURI(), SHUNT_NON_LINEAR_MODEL);\n+                for (ShuntCompensatorNonLinearModel.Section s : sc.getModel(ShuntCompensatorNonLinearModel.class).getAllSections()) {\n+                    context.getWriter().writeEmptyElement(context.getVersion().getNamespaceURI(), \"section\");\n+                    XmlUtil.writeDouble(\"b\", s.getB(), context.getWriter());\n+                    XmlUtil.writeDouble(\"g\", s.getG(), context.getWriter());\n+                }\n+                context.getWriter().writeEndElement();\n+            });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77075d7b534e45d4666056523cfeac6986b5c612"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkyODc4OA==", "bodyText": "No, we don't, a log is made (l.51) but it is considered a shunt with a unique section which has the current susceptance", "url": "https://github.com/powsybl/powsybl-core/pull/1535#discussion_r519928788", "createdAt": "2020-11-09T16:07:23Z", "author": {"login": "miovd"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/ShuntXml.java", "diffHunk": "@@ -81,13 +84,15 @@ private static void writeModel(ShuntCompensator sc, NetworkXmlWriterContext cont\n             XmlUtil.writeDouble(\"gPerSection\", sc.getModel(ShuntCompensatorLinearModel.class).getGPerSection(), context.getWriter());\n             context.getWriter().writeAttribute(MAXIMUM_SECTION_COUNT, Integer.toString(sc.getMaximumSectionCount()));\n         } else if (sc.getModelType() == ShuntCompensatorModelType.NON_LINEAR) {\n-            context.getWriter().writeStartElement(context.getVersion().getNamespaceURI(), SHUNT_NON_LINEAR_MODEL);\n-            for (ShuntCompensatorNonLinearModel.Section s : sc.getModel(ShuntCompensatorNonLinearModel.class).getAllSections()) {\n-                context.getWriter().writeEmptyElement(context.getVersion().getNamespaceURI(), \"section\");\n-                XmlUtil.writeDouble(\"b\", s.getB(), context.getWriter());\n-                XmlUtil.writeDouble(\"g\", s.getG(), context.getWriter());\n-            }\n-            context.getWriter().writeEndElement();\n+            IidmXmlUtil.runFromMinimumVersion(IidmXmlVersion.V_1_3, context, () -> {\n+                context.getWriter().writeStartElement(context.getVersion().getNamespaceURI(), SHUNT_NON_LINEAR_MODEL);\n+                for (ShuntCompensatorNonLinearModel.Section s : sc.getModel(ShuntCompensatorNonLinearModel.class).getAllSections()) {\n+                    context.getWriter().writeEmptyElement(context.getVersion().getNamespaceURI(), \"section\");\n+                    XmlUtil.writeDouble(\"b\", s.getB(), context.getWriter());\n+                    XmlUtil.writeDouble(\"g\", s.getG(), context.getWriter());\n+                }\n+                context.getWriter().writeEndElement();\n+            });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcxODcyMQ=="}, "originalCommit": {"oid": "77075d7b534e45d4666056523cfeac6986b5c612"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTY0MDYwOnYy", "diffSide": "RIGHT", "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/util/IidmXmlUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOToyMzoyMVrOHzvW7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOToyMzoyMVrOHzvW7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAxNTM0Mg==", "bodyText": "There is no good reason to create a supplier if you always call the get() method. I would replace it by a simple string and check if ERROR level is enabled", "url": "https://github.com/powsybl/powsybl-core/pull/1535#discussion_r524015342", "createdAt": "2020-11-16T09:23:21Z", "author": {"login": "mathbagu"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/util/IidmXmlUtil.java", "diffHunk": "@@ -57,92 +66,196 @@ default void run() {\n         }\n     }\n \n+    private static String message(String elementName, ErrorMessage type, IidmXmlVersion version, IidmXmlVersion contextVersion, String reason) {\n+        return elementName + \" is \" + type.message + \" for IIDM-XML version \" + contextVersion.toString(\".\") + \". \" + reason + version.toString(\".\");\n+    }\n+\n     private static PowsyblException createException(String rootElementName, String elementName, ErrorMessage type, IidmXmlVersion version, IidmXmlVersion contextVersion, String reason) {\n         return createException(rootElementName + \".\" + elementName, type, version, contextVersion, reason);\n     }\n \n     private static PowsyblException createException(String elementName, ErrorMessage type, IidmXmlVersion version, IidmXmlVersion contextVersion, String reason) {\n-        return new PowsyblException(elementName + \" is \" + type.message + \" for IIDM-XML version \" + contextVersion.toString(\".\") + \". \" + reason + version.toString(\".\"));\n+        return new PowsyblException(message(elementName, type, version, contextVersion, reason));\n+    }\n+\n+    private static void createExceptionOrLogError(String rootElementName, String elementName, ErrorMessage type, IidmXmlVersion refVersion, String reason, NetworkXmlWriterContext context) {\n+        createExceptionOrLogError(rootElementName + \".\" + elementName, type, refVersion, reason, context);\n+    }\n+\n+    private static void createExceptionOrLogError(String elementName, ErrorMessage type, IidmXmlVersion refVersion, String reason, NetworkXmlWriterContext context) {\n+        if (context.getOptions().getIidmVersionIncompatibilityBehavior() == ExportOptions.IidmVersionIncompatibilityBehavior.THROW_EXCEPTION) {\n+            throw createException(elementName, type, refVersion, context.getVersion(), reason);\n+        } else if (context.getOptions().getIidmVersionIncompatibilityBehavior() == ExportOptions.IidmVersionIncompatibilityBehavior.LOG_ERROR) {\n+            Supplier<String> message = () -> message(elementName, type, refVersion, context.getVersion(), reason);\n+            LOGGER.error(message.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57f43cae429963fb635ea0acd8ceb7735cbfc110"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4914, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}