{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMDQ2MjA3", "number": 1322, "title": "Redesign IIDM shunt compensator allowing non linear shunts + updated conversions + updated serialization", "bodyText": "Please check if the PR fulfills these requirements (please use '[x]' to check the checkboxes, or submit the PR and then click the checkboxes)\n\n The commit message follows our guidelines\n Tests for the changes have been added (for bug fixes / features)\n Docs have been added / updated (for bug fixes / features)\n\nDoes this PR already have an issue describing the problem ?\nNo\nWhat kind of change does this PR introduce?\nNew feature: integration of non linear shunts + redesign of shunts\nWhat is the current behavior?\nAll shunts are linear.\nWhat is the new behavior (if this is a feature change)?\nThere can be linear and non linear shunts, specified by their model.\nDoes this PR introduce a breaking change or deprecate an API?\nYes\n\n The Breaking Change or Deprecated label has been added\n The migration guide has been updated in the github wiki (What changes might users need to make in their application due to this PR?)", "createdAt": "2020-05-26T07:59:31Z", "url": "https://github.com/powsybl/powsybl-core/pull/1322", "merged": true, "mergeCommit": {"oid": "dddf141e1be70a20a061e5b4c17d9d13bf235b84"}, "closed": true, "closedAt": "2020-06-26T12:36:57Z", "author": {"login": "MioRtia"}, "timelineItems": {"totalCount": 45, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclAR2xgFqTQxODA3MjYyNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuwJWJgFqTQzNzU5NDU4OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MDcyNjI2", "url": "https://github.com/powsybl/powsybl-core/pull/1322#pullrequestreview-418072626", "createdAt": "2020-05-26T08:20:46Z", "commit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODoyMDo0N1rOGaToFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODoyMDo0N1rOGaToFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzNzcxOA==", "bodyText": "This function will be shared by ShuntCompensatorLinearModel and ShuntCompensatorNonLinearModel, right ? Why cannot we have simply getbPerSection(int sectionIndex) ?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r430237718", "createdAt": "2020-05-26T08:20:47Z", "author": {"login": "annetill"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensatorModel.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public interface ShuntCompensatorModel {\n+\n+    /**\n+     * Get the section susceptance in S of the section with a given section number if it exists.\n+     * Return 0 if sectionIndex is equal to 0 (disconnected state).\n+     * Throw an exception if such a section does not exist.\n+     */\n+    double getBSection(int sectionIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MDczMTUx", "url": "https://github.com/powsybl/powsybl-core/pull/1322#pullrequestreview-418073151", "createdAt": "2020-05-26T08:21:32Z", "commit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODoyMTozMlrOGaTpvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODoyMTozMlrOGaTpvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzODE0MA==", "bodyText": "getbPerSection or getBPerSection ?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r430238140", "createdAt": "2020-05-26T08:21:32Z", "author": {"login": "annetill"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensatorLinearModel.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public interface ShuntCompensatorLinearModel extends ShuntCompensatorModel {\n+\n+    /**\n+     * Get the susceptance per section in S.\n+     */\n+    double getbPerSection();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MDc0MzMw", "url": "https://github.com/powsybl/powsybl-core/pull/1322#pullrequestreview-418074330", "createdAt": "2020-05-26T08:23:07Z", "commit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODoyMzowN1rOGaTtNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODoyMzowN1rOGaTtNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzOTAyOQ==", "bodyText": "Why do you need this function ?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r430239029", "createdAt": "2020-05-26T08:23:07Z", "author": {"login": "annetill"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensatorNonLinearModel.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public interface ShuntCompensatorNonLinearModel extends ShuntCompensatorModel {\n+\n+    interface Section {\n+\n+        /**\n+         * Get the susceptance in S of the section.\n+         */\n+        double getB();\n+\n+        /**\n+         * Get the conductance in S of the section.\n+         */\n+        double getG();\n+    }\n+\n+    /**\n+     * Get an optional of the section associated with a given section number if it exists.\n+     * If such a section does not exist, return an empty optional.\n+     *\n+     */\n+    Optional<Section> getSection(int sectionIndex);\n+\n+    /**\n+     * Get all the sections associated with their section number.\n+     */\n+    List<Section> getSections();\n+\n+    /**\n+     * For a given section number, add a section with a given susceptance and conductance in S to the model.\n+     * If a section already exists for this section number, respectively replace its susceptance and conductance with the given susceptance and conductance.\n+     * Throw an exception if the section index equals to 0 (corresponds to disconnected state).\n+     */\n+    ShuntCompensatorNonLinearModel addOrReplaceSection(int sectionIndex, double b, double g);\n+\n+    /**\n+     * Remove the section associated with a given section number if it exists <b>and</b> the current section count is different of the given section number.\n+     * Else, throw an exception.\n+     */\n+    ShuntCompensatorNonLinearModel removeLastSection();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MDc0OTE0", "url": "https://github.com/powsybl/powsybl-core/pull/1322#pullrequestreview-418074914", "createdAt": "2020-05-26T08:23:56Z", "commit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODoyMzo1NlrOGaTvFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODoyMzo1NlrOGaTvFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzOTUwOQ==", "bodyText": "The name chosen is not so clear. See remark above.", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r430239509", "createdAt": "2020-05-26T08:23:56Z", "author": {"login": "annetill"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ValidationUtil.java", "diffHunk": "@@ -228,26 +228,42 @@ public static void checkForecastDistance(Validable validable, int forecastDistan\n         }\n     }\n \n-    public static void checkbPerSection(Validable validable, double bPerSection) {\n-        if (Double.isNaN(bPerSection)) {\n-            throw new ValidationException(validable, \"susceptance per section is invalid\");\n+    public static void checkSectionNumber(Validable validable, int sectionNum) {\n+        if (sectionNum < 0) {\n+            throw new ValidationException(validable,\n+                    \"this number of section (\" + sectionNum\n+                            + \") should be greater than or equal to 0\");\n         }\n+    }\n+\n+    public static void checkbPerSection(Validable validable, double bPerSection) {\n+        checkSectionB(validable, bPerSection);\n         if (bPerSection == 0) {\n             throw new ValidationException(validable, \"susceptance per section is equal to zero\");\n         }\n     }\n \n+    public static void checkSectionB(Validable validable, double sectionB) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MTM3NzEy", "url": "https://github.com/powsybl/powsybl-core/pull/1322#pullrequestreview-418137712", "createdAt": "2020-05-26T09:45:20Z", "commit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwOTo0NToyMFrOGaWu-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwOTo0NToyMFrOGaWu-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI4ODYzNQ==", "bodyText": "I fall in this exception on some TSOs, included for our French network !", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r430288635", "createdAt": "2020-05-26T09:45:20Z", "author": {"login": "annetill"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ValidationUtil.java", "diffHunk": "@@ -228,26 +228,42 @@ public static void checkForecastDistance(Validable validable, int forecastDistan\n         }\n     }\n \n-    public static void checkbPerSection(Validable validable, double bPerSection) {\n-        if (Double.isNaN(bPerSection)) {\n-            throw new ValidationException(validable, \"susceptance per section is invalid\");\n+    public static void checkSectionNumber(Validable validable, int sectionNum) {\n+        if (sectionNum < 0) {\n+            throw new ValidationException(validable,\n+                    \"this number of section (\" + sectionNum\n+                            + \") should be greater than or equal to 0\");\n         }\n+    }\n+\n+    public static void checkbPerSection(Validable validable, double bPerSection) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MjA5MjQ5", "url": "https://github.com/powsybl/powsybl-core/pull/1322#pullrequestreview-418209249", "createdAt": "2020-05-26T11:32:26Z", "commit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMTozMjoyN1rOGaaJqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMTozMjoyN1rOGaaJqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM0NDYxNw==", "bodyText": "I fall in this exception with NGESO network.", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r430344617", "createdAt": "2020-05-26T11:32:27Z", "author": {"login": "annetill"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ShuntCompensatorAdderImpl.java", "diffHunk": "@@ -46,16 +45,120 @@ protected String getTypeDescription() {\n         return \"Shunt compensator\";\n     }\n \n+    class ShuntCompensatorLinearModelAdderImpl implements ShuntCompensatorLinearModelAdder {\n+\n+        private double bPerSection = Double.NaN;\n+\n+        private double gPerSection = Double.NaN;\n+\n+        private int maximumSectionCount = -1;\n+\n+        @Override\n+        public ShuntCompensatorLinearModelAdder setbPerSection(double bPerSection) {\n+            this.bPerSection = bPerSection;\n+            return this;\n+        }\n+\n+        @Override\n+        public ShuntCompensatorLinearModelAdder setgPerSection(double gPerSection) {\n+            this.gPerSection = gPerSection;\n+            return this;\n+        }\n+\n+        @Override\n+        public ShuntCompensatorLinearModelAdder setMaximumSectionCount(int maximumSectionCount) {\n+            this.maximumSectionCount = maximumSectionCount;\n+            return this;\n+        }\n+\n+        @Override\n+        public ShuntCompensatorAdder add() {\n+            ValidationUtil.checkbPerSection(ShuntCompensatorAdderImpl.this, bPerSection);\n+            ValidationUtil.checkMaximumSectionCount(ShuntCompensatorAdderImpl.this, maximumSectionCount);\n+            model = new ShuntCompensatorLinearModelImpl(bPerSection, gPerSection, maximumSectionCount);\n+            return ShuntCompensatorAdderImpl.this;\n+        }\n+    }\n+\n+    class ShuntCompensatorNonLinearModelAdderImpl implements ShuntCompensatorNonLinearModelAdder {\n+\n+        private final TreeMap<Integer, ShuntCompensatorNonLinearModelImpl.SectionImpl> sectionsMap = new TreeMap<>();\n+        private boolean hasDefinedG = false;\n+\n+        class SectionAdderImpl implements SectionAdder {\n+\n+            private int sectionIndex = -1;\n+\n+            private double b = Double.NaN;\n+\n+            private double g = Double.NaN;\n+\n+            @Override\n+            public SectionAdder setSectionIndex(int sectionIndex) {\n+                this.sectionIndex = sectionIndex;\n+                return this;\n+            }\n+\n+            @Override\n+            public SectionAdder setB(double b) {\n+                this.b = b;\n+                return this;\n+            }\n+\n+            @Override\n+            public SectionAdder setG(double g) {\n+                this.g = g;\n+                return this;\n+            }\n+\n+            @Override\n+            public ShuntCompensatorNonLinearModelAdder endSection() {\n+                if (sectionIndex == 0) {\n+                    throw new ValidationException(ShuntCompensatorAdderImpl.this, \"section 0 (b = 0.0, g = 0.0) should not be written, it corresponds to disconnected state\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NDEzODYz", "url": "https://github.com/powsybl/powsybl-core/pull/1322#pullrequestreview-424413863", "createdAt": "2020-06-04T12:59:09Z", "commit": {"oid": "8dfa58bac0f8c83700cab9c188ed9141badcab7f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjo1OTowOVrOGfEf4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjo1OTowOVrOGfEf4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzMjczOQ==", "bodyText": "Is it in the CGMES documentation that section 0 should have a b equal to zero ?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r435232739", "createdAt": "2020-06-04T12:59:09Z", "author": {"login": "annetill"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ShuntConversion.java", "diffHunk": "@@ -43,31 +46,48 @@ public void convert() {\n         int sections = getSections(p, normalSections);\n         sections = Math.abs(sections);\n         maximumSections = Math.max(maximumSections, sections);\n-        double bPerSection = 0;\n-        if (p.containsKey(CgmesNames.B_PER_SECTION)) {\n-            bPerSection = p.asDouble(CgmesNames.B_PER_SECTION, 0.0);\n-        } else {\n+        ShuntCompensatorAdder adder = voltageLevel().newShuntCompensator().setCurrentSectionCount(sections);\n+        String shuntType = p.getId(\"type\");\n+        if (\"LinearShuntCompensator\".equals(shuntType)) {\n+            double bPerSection = p.asDouble(CgmesNames.B_PER_SECTION, Float.MIN_VALUE);\n+            if (bPerSection == 0) {\n+                double bPerSectionFixed = Double.MIN_VALUE;\n+                fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n+                bPerSection = bPerSectionFixed;\n+            }\n+            double gPerSection = p.asDouble(\"gPerSection\", Double.NaN);\n+            adder.newLinearModel()\n+                    .setBPerSection(bPerSection)\n+                    .setGPerSection(gPerSection)\n+                    .setMaximumSectionCount(maximumSections)\n+                    .add();\n+        } else if (\"NonlinearShuntCompensator\".equals(shuntType)) {\n+            ShuntCompensatorNonLinearModelAdder modelAdder = adder.newNonLinearModel();\n             PropertyBags ss = context.cgmes().nonlinearShuntCompensatorPoints(id);\n-            final int nlsections = sections;\n-            double sumSections = ss.stream()\n-                    .filter(s -> s.asInt(\"sectionNumber\") <= nlsections)\n-                    .map(s -> s.asDouble(\"b\"))\n-                    .reduce(0.0, Double::sum);\n-            // Convert to a shunt compensator with a single section\n-            maximumSections = 1;\n-            sections = 1;\n-            bPerSection = sumSections;\n-        }\n-        if (bPerSection == 0) {\n-            float bPerSectionFixed = Float.MIN_VALUE;\n-            fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n-            bPerSection = bPerSectionFixed;\n+            for (PropertyBag sp : ss) {\n+                int sectionNumber = sp.asInt(SECTION_NUMBER);\n+                double b = ss.stream().filter(s -> s.asInt(SECTION_NUMBER) <= sectionNumber).map(s -> s.asDouble(\"b\")).reduce(0.0, Double::sum);\n+                if (sectionNumber == 0) {\n+                    if (b != 0) {\n+                        fixed(\"Shunt.section0\", \"Susceptance of section 0 should always be zero (disconnected state)\", b, 0.);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dfa58bac0f8c83700cab9c188ed9141badcab7f"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NDE1Njk4", "url": "https://github.com/powsybl/powsybl-core/pull/1322#pullrequestreview-424415698", "createdAt": "2020-06-04T13:01:03Z", "commit": {"oid": "8dfa58bac0f8c83700cab9c188ed9141badcab7f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzowMTowNFrOGfElfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzowMTowNFrOGfElfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzNDE3Mw==", "bodyText": "It is wierd that CGMES requires a b equal to zero and that we don't allow it in IIDM. No?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r435234173", "createdAt": "2020-06-04T13:01:04Z", "author": {"login": "annetill"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ShuntConversion.java", "diffHunk": "@@ -43,31 +46,48 @@ public void convert() {\n         int sections = getSections(p, normalSections);\n         sections = Math.abs(sections);\n         maximumSections = Math.max(maximumSections, sections);\n-        double bPerSection = 0;\n-        if (p.containsKey(CgmesNames.B_PER_SECTION)) {\n-            bPerSection = p.asDouble(CgmesNames.B_PER_SECTION, 0.0);\n-        } else {\n+        ShuntCompensatorAdder adder = voltageLevel().newShuntCompensator().setCurrentSectionCount(sections);\n+        String shuntType = p.getId(\"type\");\n+        if (\"LinearShuntCompensator\".equals(shuntType)) {\n+            double bPerSection = p.asDouble(CgmesNames.B_PER_SECTION, Float.MIN_VALUE);\n+            if (bPerSection == 0) {\n+                double bPerSectionFixed = Double.MIN_VALUE;\n+                fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n+                bPerSection = bPerSectionFixed;\n+            }\n+            double gPerSection = p.asDouble(\"gPerSection\", Double.NaN);\n+            adder.newLinearModel()\n+                    .setBPerSection(bPerSection)\n+                    .setGPerSection(gPerSection)\n+                    .setMaximumSectionCount(maximumSections)\n+                    .add();\n+        } else if (\"NonlinearShuntCompensator\".equals(shuntType)) {\n+            ShuntCompensatorNonLinearModelAdder modelAdder = adder.newNonLinearModel();\n             PropertyBags ss = context.cgmes().nonlinearShuntCompensatorPoints(id);\n-            final int nlsections = sections;\n-            double sumSections = ss.stream()\n-                    .filter(s -> s.asInt(\"sectionNumber\") <= nlsections)\n-                    .map(s -> s.asDouble(\"b\"))\n-                    .reduce(0.0, Double::sum);\n-            // Convert to a shunt compensator with a single section\n-            maximumSections = 1;\n-            sections = 1;\n-            bPerSection = sumSections;\n-        }\n-        if (bPerSection == 0) {\n-            float bPerSectionFixed = Float.MIN_VALUE;\n-            fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n-            bPerSection = bPerSectionFixed;\n+            for (PropertyBag sp : ss) {\n+                int sectionNumber = sp.asInt(SECTION_NUMBER);\n+                double b = ss.stream().filter(s -> s.asInt(SECTION_NUMBER) <= sectionNumber).map(s -> s.asDouble(\"b\")).reduce(0.0, Double::sum);\n+                if (sectionNumber == 0) {\n+                    if (b != 0) {\n+                        fixed(\"Shunt.section0\", \"Susceptance of section 0 should always be zero (disconnected state)\", b, 0.);\n+                    }\n+                    continue;\n+                }\n+                if (b == 0) {\n+                    double bFixed = Double.MIN_VALUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dfa58bac0f8c83700cab9c188ed9141badcab7f"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NTYzNjI3", "url": "https://github.com/powsybl/powsybl-core/pull/1322#pullrequestreview-424563627", "createdAt": "2020-06-04T15:23:39Z", "commit": {"oid": "8dfa58bac0f8c83700cab9c188ed9141badcab7f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyMzo0MFrOGfLS8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyMzo0MFrOGfLS8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0NDExNA==", "bodyText": "Yes great, so we can leave the check!", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r435344114", "createdAt": "2020-06-04T15:23:40Z", "author": {"login": "annetill"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ValidationUtil.java", "diffHunk": "@@ -228,26 +228,42 @@ public static void checkForecastDistance(Validable validable, int forecastDistan\n         }\n     }\n \n-    public static void checkbPerSection(Validable validable, double bPerSection) {\n-        if (Double.isNaN(bPerSection)) {\n-            throw new ValidationException(validable, \"susceptance per section is invalid\");\n+    public static void checkSectionNumber(Validable validable, int sectionNum) {\n+        if (sectionNum < 0) {\n+            throw new ValidationException(validable,\n+                    \"this number of section (\" + sectionNum\n+                            + \") should be greater than or equal to 0\");\n         }\n+    }\n+\n+    public static void checkLinearBPerSection(Validable validable, double bPerSection) {\n+        checkBPerSection(validable, bPerSection);\n         if (bPerSection == 0) {\n             throw new ValidationException(validable, \"susceptance per section is equal to zero\");\n         }\n     }\n \n+    public static void checkBPerSection(Validable validable, double sectionB) {\n+        if (Double.isNaN(sectionB)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dfa58bac0f8c83700cab9c188ed9141badcab7f"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NTY2NzI0", "url": "https://github.com/powsybl/powsybl-core/pull/1322#pullrequestreview-424566724", "createdAt": "2020-06-04T15:26:46Z", "commit": {"oid": "8dfa58bac0f8c83700cab9c188ed9141badcab7f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyNjo0NlrOGfLcOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyNjo0NlrOGfLcOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0NjQ5MA==", "bodyText": "Great!", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r435346490", "createdAt": "2020-06-04T15:26:46Z", "author": {"login": "annetill"}, "path": "loadflow/loadflow-api/src/main/java/com/powsybl/loadflow/LoadFlowParameters.java", "diffHunk": "@@ -52,6 +52,7 @@\n     public static final boolean DEFAULT_NO_GENERATOR_REACTIVE_LIMITS = false;\n     public static final boolean DEFAULT_PHASE_SHIFTER_REGULATION_ON = false;\n     public static final boolean DEFAULT_T2WT_SPLIT_SHUNT_ADMITTANCE = false;\n+    public static final boolean DEFAULT_SIMUL_SHUNT = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dfa58bac0f8c83700cab9c188ed9141badcab7f"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1ODUzMzQy", "url": "https://github.com/powsybl/powsybl-core/pull/1322#pullrequestreview-425853342", "createdAt": "2020-06-07T21:05:52Z", "commit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "state": "COMMENTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMTowNTo1MlrOGgL2xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMTo0Mzo0OVrOGgMBnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMTg2Mg==", "bodyText": "Why? It should be possible to have 0 section activated?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436401862", "createdAt": "2020-06-07T21:05:52Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensator.java", "diffHunk": "@@ -17,71 +17,79 @@\n public interface ShuntCompensator extends Injection<ShuntCompensator> {\n \n     /**\n-     * Get the maximum section count.\n+     * Get the current count of sections in service.\n+     * Please note sections can only be sequentially in service i.e. all sections from section 1 to section currentSectionCount are in service.\n+     * <p>\n+     * It is expected to be greater than one and lesser than or equal to the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMTk5Mw==", "bodyText": "Maybe we could try to find a better naming than current. What I don't like with current is that in power system it is also a unit.", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436401993", "createdAt": "2020-06-07T21:07:44Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensator.java", "diffHunk": "@@ -17,71 +17,79 @@\n public interface ShuntCompensator extends Injection<ShuntCompensator> {\n \n     /**\n-     * Get the maximum section count.\n+     * Get the current count of sections in service.\n+     * Please note sections can only be sequentially in service i.e. all sections from section 1 to section currentSectionCount are in service.\n+     * <p>\n+     * It is expected to be greater than one and lesser than or equal to the\n+     * maximum section count.\n+     * <p>\n+     * Depends on the working variant.\n+     * @see VariantManager\n+     */\n+    int getCurrentSectionCount();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMjM5MQ==", "bodyText": "If first section is section 0, we must have a non zero value as all section should have a b or g?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436402391", "createdAt": "2020-06-07T21:12:39Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensatorModel.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public interface ShuntCompensatorModel {\n+\n+    /**\n+     * Get the section susceptance in S of the section with a given section number if it exists.\n+     * Return 0 if sectionIndex is equal to 0 (disconnected state).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMjQ0NA==", "bodyText": "You should use == for an enum", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436402444", "createdAt": "2020-06-07T21:13:29Z", "author": {"login": "geofjamg"}, "path": "ampl-converter/src/main/java/com/powsybl/ampl/converter/AmplNetworkReader.java", "diffHunk": "@@ -277,6 +278,9 @@ private Void readShunt(String[] tokens) {\n             throw new AmplException(\"Invalid shunt compensator id '\" + id + \"'\");\n         }\n \n+        if (ShuntCompensatorModelType.NON_LINEAR.equals(sc.getModelType())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMjQ2Mw==", "bodyText": "Same", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436402463", "createdAt": "2020-06-07T21:13:43Z", "author": {"login": "geofjamg"}, "path": "ampl-converter/src/main/java/com/powsybl/ampl/converter/AmplNetworkWriter.java", "diffHunk": "@@ -1310,6 +1311,9 @@ private void writeShunts(AmplExportContext context) throws IOException {\n                      new Column(\"sections count\"))) {\n             List<String> skipped = new ArrayList<>();\n             for (ShuntCompensator sc : network.getShuntCompensators()) {\n+                if (ShuntCompensatorModelType.NON_LINEAR.equals(sc.getModelType())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMjYyMg==", "bodyText": "Is it really need to specify an index? It could be implicit (builder order)", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436402622", "createdAt": "2020-06-07T21:15:53Z", "author": {"login": "geofjamg"}, "path": "cgmes/cgmes-conformity/src/test/java/com/powsybl/cgmes/conformity/test/CgmesConformity1NetworkCatalog.java", "diffHunk": "@@ -1028,6 +1034,42 @@ public static Network microType4BE() {\n                 .setP0(-11.518776)\n                 .setQ0(67.377544);\n \n+        network.getShuntCompensator(\"_002b0a40-3957-46db-b84a-30420083558f\").remove();\n+        network.getVoltageLevel(\"_469df5f7-058f-4451-a998-57a48e8a56fe\")\n+                .newShuntCompensator()\n+                    .setId(\"_002b0a40-3957-46db-b84a-30420083558f\")\n+                    .setName(\"BE_S2\")\n+                    .setConnectableBus(busBrussels380.getId())\n+                    .setBus(busBrussels380.getId())\n+                    .setCurrentSectionCount(1)\n+                    .newNonLinearModel()\n+                        .beginSection()\n+                            .setSectionIndex(1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMzI3MQ==", "bodyText": "I don't understand the meaning of a zero admittance section. For me this should not be a requirement in IIDM but we need to accept it in order to keep the same number of section between CGMES and IIDM and then be able to update back the current section in case of regulation.\nWhy having a special meaning for section 0? section 0 is just the first one and could have an admittance. Also the shunt should accept 0 sections activated.", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436403271", "createdAt": "2020-06-07T21:24:49Z", "author": {"login": "geofjamg"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ShuntConversion.java", "diffHunk": "@@ -43,31 +46,48 @@ public void convert() {\n         int sections = getSections(p, normalSections);\n         sections = Math.abs(sections);\n         maximumSections = Math.max(maximumSections, sections);\n-        double bPerSection = 0;\n-        if (p.containsKey(CgmesNames.B_PER_SECTION)) {\n-            bPerSection = p.asDouble(CgmesNames.B_PER_SECTION, 0.0);\n-        } else {\n+        ShuntCompensatorAdder adder = voltageLevel().newShuntCompensator().setCurrentSectionCount(sections);\n+        String shuntType = p.getId(\"type\");\n+        if (\"LinearShuntCompensator\".equals(shuntType)) {\n+            double bPerSection = p.asDouble(CgmesNames.B_PER_SECTION, Float.MIN_VALUE);\n+            if (bPerSection == 0) {\n+                double bPerSectionFixed = Double.MIN_VALUE;\n+                fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n+                bPerSection = bPerSectionFixed;\n+            }\n+            double gPerSection = p.asDouble(\"gPerSection\", Double.NaN);\n+            adder.newLinearModel()\n+                    .setBPerSection(bPerSection)\n+                    .setGPerSection(gPerSection)\n+                    .setMaximumSectionCount(maximumSections)\n+                    .add();\n+        } else if (\"NonlinearShuntCompensator\".equals(shuntType)) {\n+            ShuntCompensatorNonLinearModelAdder modelAdder = adder.newNonLinearModel();\n             PropertyBags ss = context.cgmes().nonlinearShuntCompensatorPoints(id);\n-            final int nlsections = sections;\n-            double sumSections = ss.stream()\n-                    .filter(s -> s.asInt(\"sectionNumber\") <= nlsections)\n-                    .map(s -> s.asDouble(\"b\"))\n-                    .reduce(0.0, Double::sum);\n-            // Convert to a shunt compensator with a single section\n-            maximumSections = 1;\n-            sections = 1;\n-            bPerSection = sumSections;\n-        }\n-        if (bPerSection == 0) {\n-            float bPerSectionFixed = Float.MIN_VALUE;\n-            fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n-            bPerSection = bPerSectionFixed;\n+            for (PropertyBag sp : ss) {\n+                int sectionNumber = sp.asInt(SECTION_NUMBER);\n+                double b = ss.stream().filter(s -> s.asInt(SECTION_NUMBER) <= sectionNumber).map(s -> s.asDouble(\"b\")).reduce(0.0, Double::sum);\n+                if (sectionNumber == 0) {\n+                    if (b != 0) {\n+                        fixed(\"Shunt.section0\", \"Susceptance of section 0 should always be zero (disconnected state)\", b, 0.);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzMjczOQ=="}, "originalCommit": {"oid": "8dfa58bac0f8c83700cab9c188ed9141badcab7f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMzM3MQ==", "bodyText": "Is it really necessary to keep the number, if we keep all of them in the right order?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436403371", "createdAt": "2020-06-07T21:25:49Z", "author": {"login": "geofjamg"}, "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ShuntConversion.java", "diffHunk": "@@ -43,31 +46,43 @@ public void convert() {\n         int sections = getSections(p, normalSections);\n         sections = Math.abs(sections);\n         maximumSections = Math.max(maximumSections, sections);\n-        double bPerSection = 0;\n-        if (p.containsKey(CgmesNames.B_PER_SECTION)) {\n-            bPerSection = p.asDouble(CgmesNames.B_PER_SECTION, 0.0);\n-        } else {\n+        ShuntCompensatorAdder adder = voltageLevel().newShuntCompensator().setCurrentSectionCount(sections);\n+        String shuntType = p.getId(\"type\");\n+        if (\"LinearShuntCompensator\".equals(shuntType)) {\n+            double bPerSection = p.asDouble(CgmesNames.B_PER_SECTION, Float.MIN_VALUE);\n+            if (bPerSection == 0) {\n+                double bPerSectionFixed = Double.MIN_VALUE;\n+                fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n+                bPerSection = bPerSectionFixed;\n+            }\n+            double gPerSection = p.asDouble(\"gPerSection\", Double.NaN);\n+            adder.newLinearModel()\n+                    .setBPerSection(bPerSection)\n+                    .setGPerSection(gPerSection)\n+                    .setMaximumSectionCount(maximumSections)\n+                    .add();\n+        } else if (\"NonlinearShuntCompensator\".equals(shuntType)) {\n+            ShuntCompensatorNonLinearModelAdder modelAdder = adder.newNonLinearModel();\n             PropertyBags ss = context.cgmes().nonlinearShuntCompensatorPoints(id);\n-            final int nlsections = sections;\n-            double sumSections = ss.stream()\n-                    .filter(s -> s.asInt(\"sectionNumber\") <= nlsections)\n-                    .map(s -> s.asDouble(\"b\"))\n-                    .reduce(0.0, Double::sum);\n-            // Convert to a shunt compensator with a single section\n-            maximumSections = 1;\n-            sections = 1;\n-            bPerSection = sumSections;\n-        }\n-        if (bPerSection == 0) {\n-            float bPerSectionFixed = Float.MIN_VALUE;\n-            fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n-            bPerSection = bPerSectionFixed;\n+            for (PropertyBag sp : ss) {\n+                int sectionNumber = sp.asInt(SECTION_NUMBER);\n+                double b = ss.stream().filter(s -> s.asInt(SECTION_NUMBER) <= sectionNumber).map(s -> s.asDouble(\"b\")).reduce(0.0, Double::sum);\n+                if (sectionNumber == 0) {\n+                    if (b != 0) {\n+                        fixed(\"Shunt.section0\", \"Susceptance of section 0 should always be zero (disconnected state)\", b, 0.);\n+                    }\n+                    continue;\n+                }\n+                modelAdder.beginSection()\n+                        .setB(b)\n+                        .setG(ss.stream().filter(s -> s.asInt(SECTION_NUMBER) <= sectionNumber).map(s -> s.asDouble(\"g\")).reduce(0.0, Double::sum))\n+                        .setSectionIndex(sp.asInt(SECTION_NUMBER))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMzU5MA==", "bodyText": "I would not change the top level equipment name. This is really confusing.\nWhy not:\n<iidm:shunt ...>\n    <iidm:shuntLinearModel ... />", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436403590", "createdAt": "2020-06-07T21:28:47Z", "author": {"login": "geofjamg"}, "path": "cgmes/cgmes-conversion/src/test/resources/cim14/nordic32.xiidm", "diffHunk": "@@ -90,7 +90,7 @@\n                 <iidm:bus id=\"_N1022____TN\" v=\"110.60600280761719\" angle=\"-17.621028900146484\"/>\n             </iidm:busBreakerTopology>\n             <iidm:load id=\"_N1022____EC\" name=\"N1022   \" loadType=\"UNDEFINED\" p0=\"280.0\" q0=\"95.0\" bus=\"_N1022____TN\" connectableBus=\"_N1022____TN\" p=\"280.0\" q=\"95.0\"/>\n-            <iidm:shunt id=\"_N1022____SC\" name=\"N1022   \" bPerSection=\"0.002958579920232296\" maximumSectionCount=\"1\" currentSectionCount=\"1\" voltageRegulatorOn=\"false\" bus=\"_N1022____TN\" connectableBus=\"_N1022____TN\"/>\n+            <iidm:linearShunt id=\"_N1022____SC\" name=\"N1022   \" bPerSection=\"0.002958579920232296\" gPerSection=\"0.0\" maximumSectionCount=\"1\" currentSectionCount=\"1\" voltageRegulatorOn=\"false\" bus=\"_N1022____TN\" connectableBus=\"_N1022____TN\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMzc4NQ==", "bodyText": "I would model section in IIDM as a [0, maxSectionCount[ array and here avoid the optional.", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436403785", "createdAt": "2020-06-07T21:31:37Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensatorNonLinearModel.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public interface ShuntCompensatorNonLinearModel extends ShuntCompensatorModel {\n+\n+    interface Section {\n+\n+        /**\n+         * Get the susceptance in S of the section.\n+         */\n+        double getB();\n+\n+        /**\n+         * Get the conductance in S of the section.\n+         */\n+        double getG();\n+    }\n+\n+    /**\n+     * Get an optional of the section associated with a given section number if it exists.\n+     * If such a section does not exist, return an empty optional.\n+     *\n+     */\n+    Optional<Section> getSection(int sectionIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNDA1MQ==", "bodyText": "I don't understand why is a problem to remove a section that is not the last.\nIn any case if you remove a section it doesn't make sense anymore to update back the original model so we can allow everything.", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436404051", "createdAt": "2020-06-07T21:35:22Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensatorNonLinearModel.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public interface ShuntCompensatorNonLinearModel extends ShuntCompensatorModel {\n+\n+    interface Section {\n+\n+        /**\n+         * Get the susceptance in S of the section.\n+         */\n+        double getB();\n+\n+        /**\n+         * Get the conductance in S of the section.\n+         */\n+        double getG();\n+    }\n+\n+    /**\n+     * Get an optional of the section associated with a given section number if it exists.\n+     * If such a section does not exist, return an empty optional.\n+     *\n+     */\n+    Optional<Section> getSection(int sectionIndex);\n+\n+    /**\n+     * Get all the sections associated with their section number.\n+     */\n+    List<Section> getSections();\n+\n+    /**\n+     * For a given section number, add a section with a given susceptance and conductance in S to the model.\n+     * If a section already exists for this section number, respectively replace its susceptance and conductance with the given susceptance and conductance.\n+     * Throw an exception if the section index equals to 0 (corresponds to disconnected state).\n+     */\n+    ShuntCompensatorNonLinearModel addOrReplaceSection(int sectionIndex, double b, double g);\n+\n+    /**\n+     * Remove the section associated with a given section number if it exists <b>and</b> the current section count is different of the given section number.\n+     * Else, throw an exception.\n+     */\n+    ShuntCompensatorNonLinearModel removeLastSection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzOTAyOQ=="}, "originalCommit": {"oid": "a7b9c075bd3a072369ad8c3f7dd1eccf58cdff1d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNDIzMQ==", "bodyText": "It is not really a wrapper?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436404231", "createdAt": "2020-06-07T21:37:49Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ShuntCompensatorModelWrapper.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.impl;\n+\n+import com.powsybl.iidm.network.ShuntCompensatorModel;\n+import com.powsybl.iidm.network.ShuntCompensatorModelType;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+interface ShuntCompensatorModelWrapper extends ShuntCompensatorModel {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNDQ4MA==", "bodyText": "As I said before, it seems to me very confusing to have a different root name when just changing the model. It is still a shunt compensator.", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436404480", "createdAt": "2020-06-07T21:41:34Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/LinearShuntXml.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.xml;\n+\n+import com.powsybl.commons.xml.XmlUtil;\n+import com.powsybl.iidm.network.ShuntCompensator;\n+import com.powsybl.iidm.network.ShuntCompensatorAdder;\n+import com.powsybl.iidm.network.ShuntCompensatorLinearModel;\n+import com.powsybl.iidm.network.VoltageLevel;\n+import com.powsybl.iidm.xml.util.IidmXmlUtil;\n+\n+import javax.xml.stream.XMLStreamException;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public class LinearShuntXml extends AbstractConnectableXml<ShuntCompensator, ShuntCompensatorAdder, VoltageLevel> {\n+\n+    static final LinearShuntXml INSTANCE = new LinearShuntXml();\n+\n+    static final String ROOT_ELEMENT_NAME = \"linearShunt\";\n+\n+    @Override\n+    protected String getRootElementName() {\n+        return ROOT_ELEMENT_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNDYxNQ==", "bodyText": "Be careful, you forgot to take into account this new attribute in many places in this class.", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436404615", "createdAt": "2020-06-07T21:43:20Z", "author": {"login": "geofjamg"}, "path": "loadflow/loadflow-api/src/main/java/com/powsybl/loadflow/LoadFlowParameters.java", "diffHunk": "@@ -104,13 +105,20 @@ protected static void load(LoadFlowParameters parameters, PlatformConfig platfor\n \n     private boolean t2wtSplitShuntAdmittance;\n \n-    public LoadFlowParameters(VoltageInitMode voltageInitMode, boolean transformerVoltageControlOn,\n-                              boolean noGeneratorReactiveLimits, boolean phaseShifterRegulationOn, boolean t2wtSplitShuntAdmittance) {\n+    private boolean simulShunt;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNDYzOQ==", "bodyText": "== is more common for enum", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r436404639", "createdAt": "2020-06-07T21:43:49Z", "author": {"login": "geofjamg"}, "path": "loadflow/loadflow-validation/src/main/java/com/powsybl/loadflow/validation/ShuntCompensatorsValidation.java", "diffHunk": "@@ -85,11 +84,15 @@ public boolean checkShunts(ShuntCompensator shunt, ValidationConfig config, Vali\n         Objects.requireNonNull(config);\n         Objects.requireNonNull(shuntsWriter);\n \n+        if (ShuntCompensatorModelType.NON_LINEAR.equals(shunt.getModelType())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 34}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "db95ae6f7b57a5848ef23263838db2d72c3ebb6e", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/db95ae6f7b57a5848ef23263838db2d72c3ebb6e", "committedDate": "2020-06-08T13:54:39Z", "message": "add simulshunt in lf parameters methods + lf paramas deserializer/serializer (and test corrections)\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}, "afterCommit": {"oid": "e0be4c244a89bcdd2970db3108fdef32a5c77f39", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/e0be4c244a89bcdd2970db3108fdef32a5c77f39", "committedDate": "2020-06-11T15:30:55Z", "message": "Update a test file (XIIDM version)\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e0be4c244a89bcdd2970db3108fdef32a5c77f39", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/e0be4c244a89bcdd2970db3108fdef32a5c77f39", "committedDate": "2020-06-11T15:30:55Z", "message": "Update a test file (XIIDM version)\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}, "afterCommit": {"oid": "ee50d5cfcdcad56869572b2c90fd7c4c6e01fca3", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/ee50d5cfcdcad56869572b2c90fd7c4c6e01fca3", "committedDate": "2020-06-12T07:37:24Z", "message": "Change XML serialisation for shunts\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "28077b6d82193b6aef2eea70ec98ab99d6f8be43", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/28077b6d82193b6aef2eea70ec98ab99d6f8be43", "committedDate": "2020-06-12T14:05:58Z", "message": "Change methods name in Shunt API\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}, "afterCommit": {"oid": "9bc99e87a1458bf23c95e0bda39d3ebca8f89796", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/9bc99e87a1458bf23c95e0bda39d3ebca8f89796", "committedDate": "2020-06-12T14:32:23Z", "message": "Change methods name in Shunt API\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjA0ODc1", "url": "https://github.com/powsybl/powsybl-core/pull/1322#pullrequestreview-435604875", "createdAt": "2020-06-23T09:27:42Z", "commit": {"oid": "206b208ef8515dd455b5b0041473dde3f086e981"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOToyNzo0MlrOGnhCIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTo0Njo1OVrOGnhuFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA4ODg2Nw==", "bodyText": "doc should be updated?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r444088867", "createdAt": "2020-06-23T09:27:42Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensator.java", "diffHunk": "@@ -17,71 +17,79 @@\n public interface ShuntCompensator extends Injection<ShuntCompensator> {\n \n     /**\n-     * Get the maximum section count.\n+     * Get the current count of sections in service.\n+     * Please note sections can only be sequentially in service i.e. all sections from section 1 to section currentSectionCount are in service.\n+     * <p>\n+     * It is expected to be greater than one and lesser than or equal to the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMTg2Mg=="}, "originalCommit": {"oid": "12ab6c1c768d0b07d5a4f899c156241915d16f9c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA4OTE3NA==", "bodyText": "Same?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r444089174", "createdAt": "2020-06-23T09:28:13Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensator.java", "diffHunk": "@@ -17,71 +17,83 @@\n public interface ShuntCompensator extends Injection<ShuntCompensator> {\n \n     /**\n-     * Get the maximum section count.\n+     * Get the count of sections in service.\n+     * Please note sections can only be sequentially in service i.e. all sections from section 1 to section currentSectionCount are in service.\n+     * <p>\n+     * It is expected to be greater than one and lesser than or equal to the\n+     * maximum section count.\n+     * <p>\n+     * Depends on the working variant.\n+     * @see VariantManager\n+     */\n+    int getSectionCount();\n+\n+    /**\n+     * Get the maximum number of sections that can be in service\n      */\n     int getMaximumSectionCount();\n \n     /**\n-     * Set the maximum number of section.\n+     * Change the count of sections in service.\n+     * Please note sections can only be sequentially in service i.e. all section from section 1 to section currentSectionCount are in service.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "206b208ef8515dd455b5b0041473dde3f086e981"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5MTg0Nw==", "bodyText": "sectionCount?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r444091847", "createdAt": "2020-06-23T09:32:46Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/ShuntCompensatorNonLinearModel.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network;\n+\n+import java.util.List;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public interface ShuntCompensatorNonLinearModel extends ShuntCompensatorModel {\n+\n+    interface Section {\n+\n+        /**\n+         * Get the accumulated susceptance in S if this section and all the previous ones are activated.\n+         */\n+        double getB();\n+\n+        /**\n+         * Set the accumulated susceptance in S if this section and all the previous ones are activated.\n+         */\n+        Section setB(double b);\n+\n+        /**\n+         * Get the accumulated conductance in S if this section and all the previous ones are activated.\n+         */\n+        double getG();\n+\n+        /**\n+         * Set the accumulated conductance in S if this section and all the previous ones are activated.\n+         */\n+        Section setG(double g);\n+    }\n+\n+    /**\n+     * Get an optional of the section associated with a given section index if it exists.\n+     *\n+     * @param sectionIndex the index of the wanted section. Must be in [1;maximumSectionCount]. Else, throws a {@link ValidationException}.\n+     *\n+     */\n+    Section getSection(int sectionIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "206b208ef8515dd455b5b0041473dde3f086e981"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5MjgyMQ==", "bodyText": "Is it just for debugging?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r444092821", "createdAt": "2020-06-23T09:34:32Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ShuntCompensatorAdderImpl.java", "diffHunk": "@@ -46,21 +44,106 @@ protected String getTypeDescription() {\n         return \"Shunt compensator\";\n     }\n \n+    class ShuntCompensatorLinearModelAdderImpl implements ShuntCompensatorLinearModelAdder {\n+\n+        private double bPerSection = Double.NaN;\n+\n+        private double gPerSection = Double.NaN;\n+\n+        private int maximumSectionCount = -1;\n+\n+        @Override\n+        public ShuntCompensatorLinearModelAdder setBPerSection(double bPerSection) {\n+            this.bPerSection = bPerSection;\n+            return this;\n+        }\n+\n+        @Override\n+        public ShuntCompensatorLinearModelAdder setGPerSection(double gPerSection) {\n+            this.gPerSection = gPerSection;\n+            return this;\n+        }\n+\n+        @Override\n+        public ShuntCompensatorLinearModelAdder setMaximumSectionCount(int maximumSectionCount) {\n+            this.maximumSectionCount = maximumSectionCount;\n+            return this;\n+        }\n+\n+        @Override\n+        public ShuntCompensatorAdder add() {\n+            ValidationUtil.checkLinearBPerSection(ShuntCompensatorAdderImpl.this, bPerSection);\n+            ValidationUtil.checkMaximumSectionCount(ShuntCompensatorAdderImpl.this, maximumSectionCount);\n+            model = new ShuntCompensatorLinearModelImpl(bPerSection, gPerSection, maximumSectionCount);\n+            return ShuntCompensatorAdderImpl.this;\n+        }\n+    }\n+\n+    class ShuntCompensatorNonLinearModelAdderImpl implements ShuntCompensatorNonLinearModelAdder {\n+\n+        private final List<ShuntCompensatorNonLinearModelImpl.SectionImpl> sections = new ArrayList<>();\n+        private boolean hasDefinedG = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "206b208ef8515dd455b5b0041473dde3f086e981"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5MzIxNw==", "bodyText": "currentSectionCount => currentSectionCount", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r444093217", "createdAt": "2020-06-23T09:35:11Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ShuntCompensatorAdderImpl.java", "diffHunk": "@@ -46,21 +44,106 @@ protected String getTypeDescription() {\n         return \"Shunt compensator\";\n     }\n \n+    class ShuntCompensatorLinearModelAdderImpl implements ShuntCompensatorLinearModelAdder {\n+\n+        private double bPerSection = Double.NaN;\n+\n+        private double gPerSection = Double.NaN;\n+\n+        private int maximumSectionCount = -1;\n+\n+        @Override\n+        public ShuntCompensatorLinearModelAdder setBPerSection(double bPerSection) {\n+            this.bPerSection = bPerSection;\n+            return this;\n+        }\n+\n+        @Override\n+        public ShuntCompensatorLinearModelAdder setGPerSection(double gPerSection) {\n+            this.gPerSection = gPerSection;\n+            return this;\n+        }\n+\n+        @Override\n+        public ShuntCompensatorLinearModelAdder setMaximumSectionCount(int maximumSectionCount) {\n+            this.maximumSectionCount = maximumSectionCount;\n+            return this;\n+        }\n+\n+        @Override\n+        public ShuntCompensatorAdder add() {\n+            ValidationUtil.checkLinearBPerSection(ShuntCompensatorAdderImpl.this, bPerSection);\n+            ValidationUtil.checkMaximumSectionCount(ShuntCompensatorAdderImpl.this, maximumSectionCount);\n+            model = new ShuntCompensatorLinearModelImpl(bPerSection, gPerSection, maximumSectionCount);\n+            return ShuntCompensatorAdderImpl.this;\n+        }\n+    }\n+\n+    class ShuntCompensatorNonLinearModelAdderImpl implements ShuntCompensatorNonLinearModelAdder {\n+\n+        private final List<ShuntCompensatorNonLinearModelImpl.SectionImpl> sections = new ArrayList<>();\n+        private boolean hasDefinedG = false;\n+        private int index = 1;\n+\n+        class SectionAdderImpl implements SectionAdder {\n+\n+            private double b = Double.NaN;\n+\n+            private double g = Double.NaN;\n+\n+            @Override\n+            public SectionAdder setB(double b) {\n+                this.b = b;\n+                return this;\n+            }\n+\n+            @Override\n+            public SectionAdder setG(double g) {\n+                this.g = g;\n+                return this;\n+            }\n+\n+            @Override\n+            public ShuntCompensatorNonLinearModelAdder endSection() {\n+                ValidationUtil.checkBPerSection(ShuntCompensatorAdderImpl.this, b);\n+                if ((Double.isNaN(g) && hasDefinedG) || (!Double.isNaN(g) && !hasDefinedG && !sections.isEmpty())) {\n+                    throw new ValidationException(ShuntCompensatorAdderImpl.this, \"if conductance has been defined for a section, it must be defined for all sections.\");\n+                }\n+                hasDefinedG = hasDefinedG || !Double.isNaN(g);\n+                sections.add(new ShuntCompensatorNonLinearModelImpl.SectionImpl(index, b, g));\n+                index++;\n+                return ShuntCompensatorNonLinearModelAdderImpl.this;\n+            }\n+        }\n+\n+        @Override\n+        public SectionAdder beginSection() {\n+            return new SectionAdderImpl();\n+        }\n+\n+        @Override\n+        public ShuntCompensatorAdder add() {\n+            if (sections.isEmpty()) {\n+                throw new ValidationException(ShuntCompensatorAdderImpl.this, \"a shunt compensator must have at least one section\");\n+            }\n+            model = new ShuntCompensatorNonLinearModelImpl(sections);\n+            return ShuntCompensatorAdderImpl.this;\n+        }\n+    }\n+\n     @Override\n-    public ShuntCompensatorAdder setbPerSection(double bPerSection) {\n-        this.bPerSection = bPerSection;\n-        return this;\n+    public ShuntCompensatorLinearModelAdder newLinearModel() {\n+        return new ShuntCompensatorLinearModelAdderImpl();\n     }\n \n     @Override\n-    public ShuntCompensatorAdder setMaximumSectionCount(int maximumSectionCount) {\n-        this.maximumSectionCount = maximumSectionCount;\n-        return this;\n+    public ShuntCompensatorNonLinearModelAdder newNonLinearModel() {\n+        return new ShuntCompensatorNonLinearModelAdderImpl();\n     }\n \n     @Override\n-    public ShuntCompensatorAdder setCurrentSectionCount(int currentSectionCount) {\n-        this.currentSectionCount = currentSectionCount;\n+    public ShuntCompensatorAdder setSectionCount(int sectionCount) {\n+        this.currentSectionCount = sectionCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "206b208ef8515dd455b5b0041473dde3f086e981"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5MzQ5OQ==", "bodyText": "currentSectionCount => sectionCount", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r444093499", "createdAt": "2020-06-23T09:35:38Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ShuntCompensatorImpl.java", "diffHunk": "@@ -47,13 +39,12 @@\n     private final TDoubleArrayList targetDeadband;\n \n     ShuntCompensatorImpl(Ref<? extends VariantManagerHolder> network,\n-                         String id, String name, boolean fictitious, double bPerSection, int maximumSectionCount,\n+                         String id, String name, boolean fictitious, ShuntCompensatorModelWrapper model,\n                          int currentSectionCount, TerminalExt regulatingTerminal, boolean voltageRegulatorOn,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "206b208ef8515dd455b5b0041473dde3f086e981"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5MzYzNw==", "bodyText": "currentSectionCount => sectionCount", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r444093637", "createdAt": "2020-06-23T09:35:51Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ShuntCompensatorImpl.java", "diffHunk": "@@ -79,51 +75,68 @@ public TerminalExt getTerminal() {\n     }\n \n     @Override\n-    public double getbPerSection() {\n-        return bPerSection;\n+    public int getSectionCount() {\n+        return currentSectionCount.get(network.get().getVariantIndex());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "206b208ef8515dd455b5b0041473dde3f086e981"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5OTY3Nw==", "bodyText": "I still do not understand why section index start from 1, it is a bad convention.\nOr we want in some use cases (like CGMES) manage an offset, we just have to add a lowSectionIndex (default to zero), but it should not be the default (and mandatory) behaviour.", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r444099677", "createdAt": "2020-06-23T09:46:14Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ShuntCompensatorNonLinearModelImpl.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.impl;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.iidm.network.*;\n+\n+import java.util.*;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+class ShuntCompensatorNonLinearModelImpl extends AbstractShuntCompensatorModel implements ShuntCompensatorNonLinearModel {\n+\n+    static class SectionImpl implements Section {\n+\n+        private ShuntCompensatorImpl shuntCompensator = null;\n+\n+        private final int index;\n+\n+        private double b;\n+\n+        private double g;\n+\n+        SectionImpl(int index, double b, double g) {\n+            this.index = index;\n+            this.b = b;\n+            this.g = g;\n+        }\n+\n+        @Override\n+        public double getB() {\n+            return b;\n+        }\n+\n+        @Override\n+        public Section setB(double b) {\n+            ValidationUtil.checkB(shuntCompensator, b);\n+            double oldValue = this.b;\n+            this.b = b;\n+            shuntCompensator.notifyUpdate(notifyUpdateSection(index, \"b\"), oldValue, this.b);\n+            return this;\n+        }\n+\n+        @Override\n+        public double getG() {\n+            return g;\n+        }\n+\n+        @Override\n+        public Section setG(double g) {\n+            ValidationUtil.checkG(shuntCompensator, g);\n+            double oldValue = this.g;\n+            this.g = g;\n+            shuntCompensator.notifyUpdate(notifyUpdateSection(index, \"g\"), oldValue, this.g);\n+            return this;\n+        }\n+\n+        private static String notifyUpdateSection(int sectionNum, String attribute) {\n+            return \"section\" + sectionNum + \".\" + attribute;\n+        }\n+\n+        void setShuntCompensator(ShuntCompensatorImpl shuntCompensator) {\n+            if (this.shuntCompensator != null) {\n+                throw new PowsyblException(\"Shunt compensator \" + shuntCompensator.getId() + \" has been set twice for the section \" + index);\n+            }\n+            this.shuntCompensator = shuntCompensator;\n+        }\n+    }\n+\n+    private final List<SectionImpl> sections;\n+\n+    ShuntCompensatorNonLinearModelImpl(List<SectionImpl> sections) {\n+        this.sections = sections;\n+    }\n+\n+    @Override\n+    public Section getSection(int sectionIndex) {\n+        if (sectionIndex < 1 || sectionIndex > sections.size()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "206b208ef8515dd455b5b0041473dde3f086e981"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEwMDExNg==", "bodyText": "This is very dirty code just because of index > 0 convention ?", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r444100116", "createdAt": "2020-06-23T09:46:59Z", "author": {"login": "geofjamg"}, "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/ShuntCompensatorNonLinearModelImpl.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.impl;\n+\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.iidm.network.*;\n+\n+import java.util.*;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+class ShuntCompensatorNonLinearModelImpl extends AbstractShuntCompensatorModel implements ShuntCompensatorNonLinearModel {\n+\n+    static class SectionImpl implements Section {\n+\n+        private ShuntCompensatorImpl shuntCompensator = null;\n+\n+        private final int index;\n+\n+        private double b;\n+\n+        private double g;\n+\n+        SectionImpl(int index, double b, double g) {\n+            this.index = index;\n+            this.b = b;\n+            this.g = g;\n+        }\n+\n+        @Override\n+        public double getB() {\n+            return b;\n+        }\n+\n+        @Override\n+        public Section setB(double b) {\n+            ValidationUtil.checkB(shuntCompensator, b);\n+            double oldValue = this.b;\n+            this.b = b;\n+            shuntCompensator.notifyUpdate(notifyUpdateSection(index, \"b\"), oldValue, this.b);\n+            return this;\n+        }\n+\n+        @Override\n+        public double getG() {\n+            return g;\n+        }\n+\n+        @Override\n+        public Section setG(double g) {\n+            ValidationUtil.checkG(shuntCompensator, g);\n+            double oldValue = this.g;\n+            this.g = g;\n+            shuntCompensator.notifyUpdate(notifyUpdateSection(index, \"g\"), oldValue, this.g);\n+            return this;\n+        }\n+\n+        private static String notifyUpdateSection(int sectionNum, String attribute) {\n+            return \"section\" + sectionNum + \".\" + attribute;\n+        }\n+\n+        void setShuntCompensator(ShuntCompensatorImpl shuntCompensator) {\n+            if (this.shuntCompensator != null) {\n+                throw new PowsyblException(\"Shunt compensator \" + shuntCompensator.getId() + \" has been set twice for the section \" + index);\n+            }\n+            this.shuntCompensator = shuntCompensator;\n+        }\n+    }\n+\n+    private final List<SectionImpl> sections;\n+\n+    ShuntCompensatorNonLinearModelImpl(List<SectionImpl> sections) {\n+        this.sections = sections;\n+    }\n+\n+    @Override\n+    public Section getSection(int sectionIndex) {\n+        if (sectionIndex < 1 || sectionIndex > sections.size()) {\n+            throw new ValidationException(shuntCompensator, \"invalid section index (must be in [1;maximumSectionCount]\");\n+        }\n+        return sections.get(sectionIndex - 1);\n+    }\n+\n+    @Override\n+    public List<Section> getAllSections() {\n+        return Collections.unmodifiableList(sections);\n+    }\n+\n+    @Override\n+    public ShuntCompensatorModelType getType() {\n+        return ShuntCompensatorModelType.NON_LINEAR;\n+    }\n+\n+    @Override\n+    public int getMaximumSectionCount() {\n+        return sections.size();\n+    }\n+\n+    @Override\n+    public double getB(int sectionCount) {\n+        if (sectionCount < 0 || sectionCount > sections.size()) {\n+            throw new ValidationException(shuntCompensator, \"invalid section count (must be in [0;maximumSectionCount]\");\n+        }\n+        return sectionCount == 0 ? 0 : sections.get(sectionCount - 1).getB();\n+    }\n+\n+    @Override\n+    public double getG(int sectionCount) {\n+        if (sectionCount < 0 || sectionCount > sections.size()) {\n+            throw new ValidationException(shuntCompensator, \"invalid section count (must be in [0;maximumSectionCount]\");\n+        }\n+        return sectionCount == 0 || Double.isNaN(sections.get(sectionCount - 1).getG()) ? 0 : sections.get(sectionCount - 1).getG();\n+    }\n+\n+    @Override\n+    public double getBPerSection(int sectionIndex) {\n+        if (sectionIndex < 1 || sectionIndex > sections.size()) {\n+            throw new ValidationException(shuntCompensator, \"invalid section index (must be in [1;maximumSectionCount]\");\n+        }\n+        return sectionIndex == 1 ? sections.get(0).getB() : sections.get(sectionIndex - 1).getB() - sections.get(sectionIndex - 2).getB();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "206b208ef8515dd455b5b0041473dde3f086e981"}, "originalPosition": 125}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MjA4MDQ3", "url": "https://github.com/powsybl/powsybl-core/pull/1322#pullrequestreview-436208047", "createdAt": "2020-06-23T22:39:21Z", "commit": {"oid": "8a3e22c4dd4e26ce87b74cea24fa454aaad97524"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMjozOToyMVrOGn8_Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMjozOToyMVrOGn8_Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU0Njg5MQ==", "bodyText": "Maybe change CurrentSectionCount to be coherent", "url": "https://github.com/powsybl/powsybl-core/pull/1322#discussion_r444546891", "createdAt": "2020-06-23T22:39:21Z", "author": {"login": "marqueslanauja"}, "path": "iidm/iidm-tck/src/test/java/com/powsybl/iidm/network/tck/AbstractShuntCompensatorTest.java", "diffHunk": "@@ -268,18 +471,25 @@ public void testSetterGetterInMultiVariants() {\n         }\n     }\n \n-    private void createShunt(String id, String name, double bPerSection, int currentSectionCount, int maxSectionCount, Terminal regulatingTerminal, boolean voltageRegulatorOn, double targetV, double targetDeadband) {\n-        voltageLevel.newShuntCompensator()\n+    private ShuntCompensator createLinearShunt(String id, String name, double bPerSection, double gPerSection, int currentSectionCount, int maxSectionCount, Terminal regulatingTerminal, boolean voltageRegulatorOn, double targetV, double targetDeadband) {\n+        return createShuntAdder(id, name, currentSectionCount, regulatingTerminal, voltageRegulatorOn, targetV, targetDeadband)\n+                .newLinearModel()\n+                .setBPerSection(bPerSection)\n+                .setGPerSection(gPerSection)\n+                .setMaximumSectionCount(maxSectionCount)\n+                .add()\n+                .add();\n+    }\n+\n+    private ShuntCompensatorAdder createShuntAdder(String id, String name, int currentSectionCount, Terminal regulatingTerminal, boolean voltageRegulatorOn, double targetV, double targetDeadband) {\n+        return voltageLevel.newShuntCompensator()\n                 .setId(id)\n                 .setName(name)\n                 .setConnectableBus(\"busA\")\n-                .setbPerSection(bPerSection)\n-                .setCurrentSectionCount(currentSectionCount)\n-                .setMaximumSectionCount(maxSectionCount)\n+                .setSectionCount(currentSectionCount)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a3e22c4dd4e26ce87b74cea24fa454aaad97524"}, "originalPosition": 497}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MjIzMjgy", "url": "https://github.com/powsybl/powsybl-core/pull/1322#pullrequestreview-436223282", "createdAt": "2020-06-23T23:18:26Z", "commit": {"oid": "8a3e22c4dd4e26ce87b74cea24fa454aaad97524"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eccfa25253a7ccae7e75325acfa8eb3bc99af83c", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/eccfa25253a7ccae7e75325acfa8eb3bc99af83c", "committedDate": "2020-06-24T13:32:52Z", "message": "Rename currentSectionCount parameter\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}, "afterCommit": {"oid": "7f42a520d8b47e097d9938df2bb925523f52a4cc", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/7f42a520d8b47e097d9938df2bb925523f52a4cc", "committedDate": "2020-06-24T13:33:37Z", "message": "Rename currentSectionCount parameter\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51877f1e100e664e162d8d506aec43a19f2bbd29", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/51877f1e100e664e162d8d506aec43a19f2bbd29", "committedDate": "2020-06-25T13:56:20Z", "message": "Revert \"Fix conflicts: correct loss factors values + add test for shunt.getOptionalName()\"\n\nThis reverts commit 2610d2724070bcd9324fddf901d4f0eca06c1c07.\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3d7ca5046c5e7c52a4786880e413833afb2cbe0", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/c3d7ca5046c5e7c52a4786880e413833afb2cbe0", "committedDate": "2020-06-25T13:56:20Z", "message": "Revert \"Revert \"Introduction of non linear shunt compensators (#1202)\"\"\n\nThis reverts commit f60b5da8e9a8c0a8506bb2d6c9b148d3eebcf8af.\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b08f2e46219d07116cbe9d7d00da3e5d9ad993d7", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/b08f2e46219d07116cbe9d7d00da3e5d9ad993d7", "committedDate": "2020-06-25T13:56:20Z", "message": "Revert \"Revert \"Support XIIDM serialization/deserialization with new shunt API (#1244)\"\"\n\nThis reverts commit 0b8b3a8c17bbbd7a368ba9445ce639d3d697ed27.\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d783b6743d998f846f0313e778504b08f43cd0d", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/7d783b6743d998f846f0313e778504b08f43cd0d", "committedDate": "2020-06-25T13:56:20Z", "message": "Bug fix: correct inconsistencies in shunt API and implementation\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\n\nSmall correction: linearShuntModel.getB(0) returns 0 (not bPerSection)\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\n\nAdd coverage test for ShuntCompensatorAdapter\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\n\nAdd coverage test for linear shunts\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\n\nAdd coverage test for non linear shunts\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\n\nRename parameters\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\n\ncorrections implementations\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\n\ncorrections javadoc\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\n\nApply reviewer's remarks\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\n\njavadoc more comprehensive\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\n\nDelete shunt.getMax/MinB/G + rename model.getB/G as model.getB/GSection + introduce shunt.getB/G\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\n\ncheck before getB()\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\n\nrenaming + section 0 corresponds to disconnected state + coverage tests\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\n\nupdate javadoc\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\n\nupdate javadoc\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\n\nsmall correction\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\n\nCorrect CGMES import of non linear shunts\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\n\nRename setSectionNum() as setSectionIndex()\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b54cf29144b805201276a3173ea8c3335d834021", "author": {"user": {"login": "annetill", "name": "Anne Tilloy"}}, "url": "https://github.com/powsybl/powsybl-core/commit/b54cf29144b805201276a3173ea8c3335d834021", "committedDate": "2020-06-25T13:56:20Z", "message": "Section number could be 0 for non linear shunt model.\n\nSigned-off-by: Anne Tilloy <anne.tilloy@rte-france.com>\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e093dfab44a94d9f117fdfb39244cff8810d3f0", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/7e093dfab44a94d9f117fdfb39244cff8810d3f0", "committedDate": "2020-06-25T13:56:21Z", "message": "Add simulShunt in LoadflowParameters\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\n\nChange Shunt API/impl\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\n\nChange ShuntXml conversion\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\n\nChange CGMES Shunt conversion\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\n\nAdd fix in shunt CGMES conversion\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\n\nRenaming methods\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\n\nFix in CGMES shunt conversion: if section number is 0, ignore\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\n\nDelete check CGMES\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\n\nsmall corrections: use == to check equality of shunt types\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\n\nadd simulshunt in lf parameters methods + lf paramas deserializer/serializer (and test corrections)\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\n\nChange Shunt API/impl\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>\n\nCorrect test impl\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b67e623ca4d7c8683ee2a2969bd449fa3d7304d", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/6b67e623ca4d7c8683ee2a2969bd449fa3d7304d", "committedDate": "2020-06-25T13:57:01Z", "message": "Fix compilation errors after rebase\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0845971b35debd054ff28e74e33f326174e6a75", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/e0845971b35debd054ff28e74e33f326174e6a75", "committedDate": "2020-06-25T13:57:01Z", "message": "Revert files XIIDM 1.2\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4040774788da7a9660cdd73979643459cfde06ca", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/4040774788da7a9660cdd73979643459cfde06ca", "committedDate": "2020-06-25T13:57:01Z", "message": "Correct json parameters files\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc561f3299341831dc83db1eecec608c146bf920", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/dc561f3299341831dc83db1eecec608c146bf920", "committedDate": "2020-06-25T13:57:01Z", "message": "Change XML serialisation for shunts\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08aa9814ebfb5b0af41a60b9d7b45439f79e5854", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/08aa9814ebfb5b0af41a60b9d7b45439f79e5854", "committedDate": "2020-06-25T13:57:01Z", "message": "Correct CGMES shunt import\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e03108ca006a9a249f0bae2299114cf7496a59d7", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/e03108ca006a9a249f0bae2299114cf7496a59d7", "committedDate": "2020-06-25T13:57:01Z", "message": "Correct IEEE converter tests\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2de565061fbdf5c1cde8c7c6f67b29a017483e95", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/2de565061fbdf5c1cde8c7c6f67b29a017483e95", "committedDate": "2020-06-25T13:57:01Z", "message": "Correct groovy binding\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5645215b832e733e0c1d3908522b876c260b144", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/e5645215b832e733e0c1d3908522b876c260b144", "committedDate": "2020-06-25T13:57:01Z", "message": "Correct matpower tests\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ac5af538a9f17f6ee777b72d7c39b7da938e4ff", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/7ac5af538a9f17f6ee777b72d7c39b7da938e4ff", "committedDate": "2020-06-25T13:57:01Z", "message": "Correct merging view tests\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a147b69231f149ea9748ac93436227599ae511b2", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/a147b69231f149ea9748ac93436227599ae511b2", "committedDate": "2020-06-25T13:57:01Z", "message": "Correct psse converter tests\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26b7617e9820434297c31c5a9037cfd262468263", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/26b7617e9820434297c31c5a9037cfd262468263", "committedDate": "2020-06-25T13:57:01Z", "message": "Change methods name in Shunt API\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c5018dc10df0bedc6772ccdea59ec35ae028853", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/0c5018dc10df0bedc6772ccdea59ec35ae028853", "committedDate": "2020-06-25T13:57:02Z", "message": "Update sectionCount attribute in XIIDM\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae921747e589d6e28519e0d0cb60e35e15429b0a", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/ae921747e589d6e28519e0d0cb60e35e15429b0a", "committedDate": "2020-06-25T13:57:02Z", "message": "Delete methods for shunts using the concept of sectionIndex\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5330932dd5f435b7a19e695140beddabeeb2275b", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/5330932dd5f435b7a19e695140beddabeeb2275b", "committedDate": "2020-06-25T13:57:02Z", "message": "Replace currentSectionCount parameters/fields by sectionCount\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77eaaab9f8bc7b8ad1c979bd9387776e4a82b016", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/77eaaab9f8bc7b8ad1c979bd9387776e4a82b016", "committedDate": "2020-06-25T13:57:02Z", "message": "Update javadoc\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec48e38f25d4a20194288d0ecd7698fec55b55d7", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/ec48e38f25d4a20194288d0ecd7698fec55b55d7", "committedDate": "2020-06-25T13:57:02Z", "message": "Rename currentSectionCount parameter\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eeea873f701565f174b8b5d8d2c5f38a4fd52f5b", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/eeea873f701565f174b8b5d8d2c5f38a4fd52f5b", "committedDate": "2020-06-25T13:57:02Z", "message": "If the g is undefined in non linear shunt model adder, g per section is considered equal to 0 (g = g of last section)\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4823054b81f59a3ada35ea40febb959836f09f7d", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/4823054b81f59a3ada35ea40febb959836f09f7d", "committedDate": "2020-06-25T14:05:22Z", "message": "Corrections after rebase\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0366db099e1a0bef151842b95f38b388f9cf8c90", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/0366db099e1a0bef151842b95f38b388f9cf8c90", "committedDate": "2020-06-25T09:09:27Z", "message": "If the g is undefined in non linear shunt model adder, g per section is considered equal to 0 (g = g of last section)\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}, "afterCommit": {"oid": "4823054b81f59a3ada35ea40febb959836f09f7d", "author": {"user": {"login": "MioRtia", "name": null}}, "url": "https://github.com/powsybl/powsybl-core/commit/4823054b81f59a3ada35ea40febb959836f09f7d", "committedDate": "2020-06-25T14:05:22Z", "message": "Corrections after rebase\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NTUyNjQ2", "url": "https://github.com/powsybl/powsybl-core/pull/1322#pullrequestreview-437552646", "createdAt": "2020-06-25T14:30:14Z", "commit": {"oid": "4823054b81f59a3ada35ea40febb959836f09f7d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NTk0NTg4", "url": "https://github.com/powsybl/powsybl-core/pull/1322#pullrequestreview-437594588", "createdAt": "2020-06-25T15:12:15Z", "commit": {"oid": "4823054b81f59a3ada35ea40febb959836f09f7d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4283, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}