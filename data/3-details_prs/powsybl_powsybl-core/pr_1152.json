{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMjE2MTg2", "number": 1152, "title": "Allow to have different implementations of extensions", "bodyText": "Signed-off-by: Jon Harper jon.harper87@gmail.com\nPlease check if the PR fulfills these requirements (please use '[x]' to check the checkboxes, or submit the PR and then click the checkboxes)\n\n The commit message follows our guidelines\n Docs have been added / updated (for bug fixes / features)\n\nDoes this PR already have an issue describing the problem ? If so, link to this issue using '#XXX' and skip the rest\n#828\nWhat kind of change does this PR introduce? (Bug fix, feature, docs update, ...)\nFeature\nWhat is the current behavior? (You can also link to an open issue here)\nIt's not possible to have multiple implementations of an extension\nWhat is the new behavior (if this is a feature change)?\nit is possible to have multiple implementations of an extension\nDoes this PR introduce a breaking change or deprecate an API? If yes, check the following:\nNO\nOther information:\n(if any of the questions/checkboxes don't apply, please delete them entirely)", "createdAt": "2020-02-10T16:01:34Z", "url": "https://github.com/powsybl/powsybl-core/pull/1152", "merged": true, "mergeCommit": {"oid": "2a99a79ed7353309bb121a7bf4fd0388adce5909"}, "closed": true, "closedAt": "2020-02-25T15:51:10Z", "author": {"login": "jonenst"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDRs1qgFqTM1NjY0NzkwMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcHz0fvgH2gAyMzczMjE2MTg2OjBiZTliZWI2MWNiMTZlOTlhMDZjNzQzZmQ4YmIwMmFjZmEzMGVhODk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NjQ3OTAx", "url": "https://github.com/powsybl/powsybl-core/pull/1152#pullrequestreview-356647901", "createdAt": "2020-02-11T13:19:35Z", "commit": {"oid": "3d3306a819ba844912f1b2552dc397b53608a8b0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzoxOTozNVrOFoIlVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzoyNDoxNlrOFoIvKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYyNzk4OQ==", "bodyText": "2 questions: do we allow null values and is extendable final?", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r377627989", "createdAt": "2020-02-11T13:19:35Z", "author": {"login": "mathbagu"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/AbstractExtensionAdder.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+/**\n+ * A base class for implementations of {@link ExtensionAdder} that holds the\n+ * extendable to be able build and then add the extension to the extendable.\n+ * This class calls {@link Extendable#createExtension} that must be overriden by\n+ * subclasses to create the extension.\n+ *\n+ * @author Jon Harper <jon.harper at rte-france.com>\n+ */\n+//TODO can we use T extends Extendable<T> here ? Then we can remove the cast in add()\n+public abstract class AbstractExtensionAdder<T, E extends Extension<T>> implements ExtensionAdder<T, E> {\n+\n+    protected T extendable;\n+\n+    protected AbstractExtensionAdder(T extendable) {\n+        this.extendable = extendable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3306a819ba844912f1b2552dc397b53608a8b0"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYyODU1Ng==", "bodyText": "It's strange to have this in commons. Is it specific to IIDM extensions?", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r377628556", "createdAt": "2020-02-11T13:20:39Z", "author": {"login": "mathbagu"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/Extendable.java", "diffHunk": "@@ -49,4 +49,39 @@\n      * @return all extensions associated to this extendable object.\n      */\n     <E extends Extension<O>> Collection<E> getExtensions();\n+\n+    /**\n+     * Returns a name that is used to find matching {@link ExtensionAdderProvider}s\n+     * when selecting implementations of extensions in {@link #newExtension}. This\n+     * is meant to be overriden by extendables when multiple implementations exist.\n+     *\n+     * @return the name\n+     */\n+    default String getImplementationName() {\n+        return \"Default\";\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3306a819ba844912f1b2552dc397b53608a8b0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYyOTEzMg==", "bodyText": "Could you declare this method final?", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r377629132", "createdAt": "2020-02-11T13:21:41Z", "author": {"login": "mathbagu"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/Extendable.java", "diffHunk": "@@ -49,4 +49,39 @@\n      * @return all extensions associated to this extendable object.\n      */\n     <E extends Extension<O>> Collection<E> getExtensions();\n+\n+    /**\n+     * Returns a name that is used to find matching {@link ExtensionAdderProvider}s\n+     * when selecting implementations of extensions in {@link #newExtension}. This\n+     * is meant to be overriden by extendables when multiple implementations exist.\n+     *\n+     * @return the name\n+     */\n+    default String getImplementationName() {\n+        return \"Default\";\n+    }\n+\n+    /**\n+     * Returns an extensionAdder to build and add an extension for this extendable.\n+     *\n+     * The extension implementation is selected at runtime based on matching the\n+     * {@link #getImplementationName} of this extendable to the\n+     * {@link ExtensionAdderProvider#getImplementationName} of a provider.\n+     * Implementations are loaded with java's {@link java.util.ServiceLoader} using\n+     * the ExtensionAdderProvider interface.\n+     *\n+     * This is not meant to be overriden.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3306a819ba844912f1b2552dc397b53608a8b0"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYzMDExNA==", "bodyText": "License is missing", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r377630114", "createdAt": "2020-02-11T13:23:30Z", "author": {"login": "mathbagu"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/ExtensionAdderProviders.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.powsybl.commons.extensions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3306a819ba844912f1b2552dc397b53608a8b0"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYzMDUwNw==", "bodyText": "Sonar should warn, but static variables should be declared before this constructor", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r377630507", "createdAt": "2020-02-11T13:24:16Z", "author": {"login": "mathbagu"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/ExtensionAdderProviders.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.powsybl.commons.extensions;\n+\n+import java.util.List;\n+import java.util.ServiceLoader;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Suppliers;\n+import com.powsybl.commons.PowsyblException;\n+\n+/**\n+ * A utility class to help finding providers using ServiceLoader.\n+ *\n+ * @author Jon Harper <jon.harper at rte-france.com>\n+ *\n+ */\n+//Don't bother with generics because serviceloader doesn't return them\n+//and we put them in a cache where we can't propagate the generic types.\n+@SuppressWarnings(\"rawtypes\")\n+final class ExtensionAdderProviders {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExtensionAdderProviders.class);\n+\n+    private ExtensionAdderProviders() {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3306a819ba844912f1b2552dc397b53608a8b0"}, "originalPosition": 32}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d3306a819ba844912f1b2552dc397b53608a8b0", "author": {"user": {"login": "jonenst", "name": "Jon Harper"}}, "url": "https://github.com/powsybl/powsybl-core/commit/3d3306a819ba844912f1b2552dc397b53608a8b0", "committedDate": "2020-02-10T15:17:12Z", "message": "Allow to have different implementations of extensions\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>"}, "afterCommit": {"oid": "c4c5b97d4ba351b39212d477cfa2c35f0dfc1e4d", "author": {"user": {"login": "jonenst", "name": "Jon Harper"}}, "url": "https://github.com/powsybl/powsybl-core/commit/c4c5b97d4ba351b39212d477cfa2c35f0dfc1e4d", "committedDate": "2020-02-13T17:09:24Z", "message": "Allow to have different implementations of extensions\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c4c5b97d4ba351b39212d477cfa2c35f0dfc1e4d", "author": {"user": {"login": "jonenst", "name": "Jon Harper"}}, "url": "https://github.com/powsybl/powsybl-core/commit/c4c5b97d4ba351b39212d477cfa2c35f0dfc1e4d", "committedDate": "2020-02-13T17:09:24Z", "message": "Allow to have different implementations of extensions\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>"}, "afterCommit": {"oid": "cebfc1ac8bf5500a46fc8b1971b542227bcc439b", "author": {"user": {"login": "jonenst", "name": "Jon Harper"}}, "url": "https://github.com/powsybl/powsybl-core/commit/cebfc1ac8bf5500a46fc8b1971b542227bcc439b", "committedDate": "2020-02-13T17:10:44Z", "message": "Allow to have different implementations of extensions\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cebfc1ac8bf5500a46fc8b1971b542227bcc439b", "author": {"user": {"login": "jonenst", "name": "Jon Harper"}}, "url": "https://github.com/powsybl/powsybl-core/commit/cebfc1ac8bf5500a46fc8b1971b542227bcc439b", "committedDate": "2020-02-13T17:10:44Z", "message": "Allow to have different implementations of extensions\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>"}, "afterCommit": {"oid": "9ba49e7ea4db5036652a4b5e138b7cf7c46defae", "author": {"user": {"login": "jonenst", "name": "Jon Harper"}}, "url": "https://github.com/powsybl/powsybl-core/commit/9ba49e7ea4db5036652a4b5e138b7cf7c46defae", "committedDate": "2020-02-14T14:25:34Z", "message": "Allow to have different implementations of extensions\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NjIzMDgx", "url": "https://github.com/powsybl/powsybl-core/pull/1152#pullrequestreview-359623081", "createdAt": "2020-02-17T10:15:31Z", "commit": {"oid": "9ba49e7ea4db5036652a4b5e138b7cf7c46defae"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMDoxNTozMVrOFqfCzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMDoyMTo0M1rOFqfQHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA5MzEzNQ==", "bodyText": "Make a decision: if you can, do it", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r380093135", "createdAt": "2020-02-17T10:15:31Z", "author": {"login": "mathbagu"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/AbstractExtensionAdder.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+/**\n+ * A base class for implementations of {@link ExtensionAdder} that holds the\n+ * extendable to be able build and then add the extension to the extendable.\n+ * This class calls {@link Extendable#createExtension} that must be overriden by\n+ * subclasses to create the extension.\n+ *\n+ * @author Jon Harper <jon.harper at rte-france.com>\n+ */\n+//TODO can we use T extends Extendable<T> here ? Then we can remove the cast in add()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba49e7ea4db5036652a4b5e138b7cf7c46defae"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA5NTU4NA==", "bodyText": "Same remark", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r380095584", "createdAt": "2020-02-17T10:19:51Z", "author": {"login": "mathbagu"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/ExtensionAdderProvider.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+/**\n+ * A provider used through java's {@link java.util.ServiceLoader}. It will\n+ * provide an {@link ExtensionAdder} to add an extension to an extendable.\n+ * {@link #getImplementationName} is used to find providers corresponding to the\n+ * implementation of the {@link Extendable}. {@link #getAdderClass} is used to\n+ * specify the adder class.\n+ *\n+ * @author Jon Harper <jon.harper at rte-france.com>\n+ *\n+ * @param <T> The extendable\n+ * @param <E> The extension\n+ * @param <B> The extensionBuilder\n+ */\n+//TODO can we use T extends Extendable<T> here ? It would make calling newAdder safer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba49e7ea4db5036652a4b5e138b7cf7c46defae"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA5NjU0Mg==", "bodyText": "It's dirty but I assume we can write dirty code in tests... Default should not be used to avoid duplications", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r380096542", "createdAt": "2020-02-17T10:21:43Z", "author": {"login": "mathbagu"}, "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Test;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.PowsyblException;\n+\n+public class ExtensionAdderProvidersTest {\n+\n+    private static interface SimpleExtendable extends Extendable<SimpleExtendable> {\n+    }\n+\n+    private static class SimpleExtendableImpl2\n+            extends AbstractExtendable<SimpleExtendable> implements SimpleExtendable {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SimpleExtension extends Extension<SimpleExtendable> {\n+        default String getName() {\n+            return \"SimpleExtension\";\n+        }\n+    }\n+\n+    private static class SimpleExtensionImpl extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static class SimpleExtensionImpl2 extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static interface SimpleExtensionAdder extends ExtensionAdder<SimpleExtendable, SimpleExtension> {\n+        default Class<SimpleExtension> getExtensionClass() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba49e7ea4db5036652a4b5e138b7cf7c46defae"}, "originalPosition": 50}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9ba49e7ea4db5036652a4b5e138b7cf7c46defae", "author": {"user": {"login": "jonenst", "name": "Jon Harper"}}, "url": "https://github.com/powsybl/powsybl-core/commit/9ba49e7ea4db5036652a4b5e138b7cf7c46defae", "committedDate": "2020-02-14T14:25:34Z", "message": "Allow to have different implementations of extensions\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>"}, "afterCommit": {"oid": "c90cb091fc5430517c21dccfd950262f27caf342", "author": {"user": {"login": "jonenst", "name": "Jon Harper"}}, "url": "https://github.com/powsybl/powsybl-core/commit/c90cb091fc5430517c21dccfd950262f27caf342", "committedDate": "2020-02-18T17:31:18Z", "message": "Allow to have different implementations of extensions\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTExNTU3", "url": "https://github.com/powsybl/powsybl-core/pull/1152#pullrequestreview-363511557", "createdAt": "2020-02-24T16:13:18Z", "commit": {"oid": "c90cb091fc5430517c21dccfd950262f27caf342"}, "state": "APPROVED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjoxMzoxOVrOFtmiEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjoyMTozNVrOFtm3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2MTU1Mg==", "bodyText": "#createExtension ?", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r383361552", "createdAt": "2020-02-24T16:13:19Z", "author": {"login": "geofjamg"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/AbstractExtensionAdder.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A base class for implementations of {@link ExtensionAdder} that holds the\n+ * extendable to be able build and then add the extension to the extendable.\n+ * This class calls {@link Extendable#createExtension} that must be overriden by", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c90cb091fc5430517c21dccfd950262f27caf342"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2NDU5Nw==", "bodyText": "useless static?", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r383364597", "createdAt": "2020-02-24T16:18:01Z", "author": {"login": "geofjamg"}, "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Test;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.PowsyblException;\n+\n+public class ExtensionAdderProvidersTest {\n+\n+    private static interface SimpleExtendable extends Extendable<SimpleExtendable> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c90cb091fc5430517c21dccfd950262f27caf342"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2NDczMw==", "bodyText": "useless static?", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r383364733", "createdAt": "2020-02-24T16:18:12Z", "author": {"login": "geofjamg"}, "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Test;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.PowsyblException;\n+\n+public class ExtensionAdderProvidersTest {\n+\n+    private static interface SimpleExtendable extends Extendable<SimpleExtendable> {\n+    }\n+\n+    private static class SimpleExtendableImpl2\n+            extends AbstractExtendable<SimpleExtendable> implements SimpleExtendable {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SimpleExtension extends Extension<SimpleExtendable> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c90cb091fc5430517c21dccfd950262f27caf342"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2NDg1MA==", "bodyText": "useless static?", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r383364850", "createdAt": "2020-02-24T16:18:22Z", "author": {"login": "geofjamg"}, "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Test;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.PowsyblException;\n+\n+public class ExtensionAdderProvidersTest {\n+\n+    private static interface SimpleExtendable extends Extendable<SimpleExtendable> {\n+    }\n+\n+    private static class SimpleExtendableImpl2\n+            extends AbstractExtendable<SimpleExtendable> implements SimpleExtendable {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SimpleExtension extends Extension<SimpleExtendable> {\n+        default String getName() {\n+            return \"SimpleExtension\";\n+        }\n+    }\n+\n+    private static class SimpleExtensionImpl extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static class SimpleExtensionImpl2 extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static interface SimpleExtensionAdder extends ExtensionAdder<SimpleExtendable, SimpleExtension> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c90cb091fc5430517c21dccfd950262f27caf342"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2NTI5MQ==", "bodyText": "useless static?", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r383365291", "createdAt": "2020-02-24T16:19:03Z", "author": {"login": "geofjamg"}, "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Test;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.PowsyblException;\n+\n+public class ExtensionAdderProvidersTest {\n+\n+    private static interface SimpleExtendable extends Extendable<SimpleExtendable> {\n+    }\n+\n+    private static class SimpleExtendableImpl2\n+            extends AbstractExtendable<SimpleExtendable> implements SimpleExtendable {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SimpleExtension extends Extension<SimpleExtendable> {\n+        default String getName() {\n+            return \"SimpleExtension\";\n+        }\n+    }\n+\n+    private static class SimpleExtensionImpl extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static class SimpleExtensionImpl2 extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static interface SimpleExtensionAdder extends ExtensionAdder<SimpleExtendable, SimpleExtension> {\n+        default Class<SimpleExtension> getExtensionClass() {\n+            return SimpleExtension.class;\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImpl\n+            extends AbstractExtensionAdder<SimpleExtendable, SimpleExtension>\n+            implements SimpleExtensionAdder {\n+        protected SimpleExtensionAdderImpl(SimpleExtendable extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected SimpleExtensionImpl createExtension(SimpleExtendable extendable) {\n+            return new SimpleExtensionImpl();\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImpl2\n+            extends AbstractExtensionAdder<SimpleExtendable, SimpleExtension>\n+            implements SimpleExtensionAdder {\n+        protected SimpleExtensionAdderImpl2(SimpleExtendable extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected SimpleExtensionImpl2 createExtension(SimpleExtendable extendable) {\n+            return new SimpleExtensionImpl2();\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImplProvider\n+            implements\n+            ExtensionAdderProvider<SimpleExtendable, SimpleExtension, SimpleExtensionAdderImpl> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Default\";\n+        }\n+\n+        @Override\n+        public Class<SimpleExtensionAdderImpl> getAdderClass() {\n+            return SimpleExtensionAdderImpl.class;\n+        }\n+\n+        @Override\n+        public SimpleExtensionAdderImpl newAdder(SimpleExtendable extendable) {\n+            return new SimpleExtensionAdderImpl(extendable);\n+        }\n+    }\n+\n+    @AutoService(ExtensionAdderProvider.class)\n+    public static class SimpleExtensionAdderImpl2Provider implements\n+            ExtensionAdderProvider<SimpleExtendable, SimpleExtension, SimpleExtensionAdderImpl2> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+\n+        @Override\n+        public Class<SimpleExtensionAdderImpl2> getAdderClass() {\n+            return SimpleExtensionAdderImpl2.class;\n+        }\n+\n+        @Override\n+        public SimpleExtensionAdderImpl2 newAdder(SimpleExtendable extendable) {\n+            return new SimpleExtensionAdderImpl2(extendable);\n+        }\n+    }\n+\n+    private static interface GenericExtendable<G extends GenericExtendable<G>> extends Extendable<G> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c90cb091fc5430517c21dccfd950262f27caf342"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2NTY3Mg==", "bodyText": "Is it used somewhere?", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r383365672", "createdAt": "2020-02-24T16:19:40Z", "author": {"login": "geofjamg"}, "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Test;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.PowsyblException;\n+\n+public class ExtensionAdderProvidersTest {\n+\n+    private static interface SimpleExtendable extends Extendable<SimpleExtendable> {\n+    }\n+\n+    private static class SimpleExtendableImpl2\n+            extends AbstractExtendable<SimpleExtendable> implements SimpleExtendable {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SimpleExtension extends Extension<SimpleExtendable> {\n+        default String getName() {\n+            return \"SimpleExtension\";\n+        }\n+    }\n+\n+    private static class SimpleExtensionImpl extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static class SimpleExtensionImpl2 extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static interface SimpleExtensionAdder extends ExtensionAdder<SimpleExtendable, SimpleExtension> {\n+        default Class<SimpleExtension> getExtensionClass() {\n+            return SimpleExtension.class;\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImpl\n+            extends AbstractExtensionAdder<SimpleExtendable, SimpleExtension>\n+            implements SimpleExtensionAdder {\n+        protected SimpleExtensionAdderImpl(SimpleExtendable extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected SimpleExtensionImpl createExtension(SimpleExtendable extendable) {\n+            return new SimpleExtensionImpl();\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImpl2\n+            extends AbstractExtensionAdder<SimpleExtendable, SimpleExtension>\n+            implements SimpleExtensionAdder {\n+        protected SimpleExtensionAdderImpl2(SimpleExtendable extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected SimpleExtensionImpl2 createExtension(SimpleExtendable extendable) {\n+            return new SimpleExtensionImpl2();\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImplProvider\n+            implements\n+            ExtensionAdderProvider<SimpleExtendable, SimpleExtension, SimpleExtensionAdderImpl> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Default\";\n+        }\n+\n+        @Override\n+        public Class<SimpleExtensionAdderImpl> getAdderClass() {\n+            return SimpleExtensionAdderImpl.class;\n+        }\n+\n+        @Override\n+        public SimpleExtensionAdderImpl newAdder(SimpleExtendable extendable) {\n+            return new SimpleExtensionAdderImpl(extendable);\n+        }\n+    }\n+\n+    @AutoService(ExtensionAdderProvider.class)\n+    public static class SimpleExtensionAdderImpl2Provider implements\n+            ExtensionAdderProvider<SimpleExtendable, SimpleExtension, SimpleExtensionAdderImpl2> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+\n+        @Override\n+        public Class<SimpleExtensionAdderImpl2> getAdderClass() {\n+            return SimpleExtensionAdderImpl2.class;\n+        }\n+\n+        @Override\n+        public SimpleExtensionAdderImpl2 newAdder(SimpleExtendable extendable) {\n+            return new SimpleExtensionAdderImpl2(extendable);\n+        }\n+    }\n+\n+    private static interface GenericExtendable<G extends GenericExtendable<G>> extends Extendable<G> {\n+    }\n+\n+    private static class GenericExtendableImpl2<G extends GenericExtendable<G>>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c90cb091fc5430517c21dccfd950262f27caf342"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2NTc5Mw==", "bodyText": "useless static?", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r383365793", "createdAt": "2020-02-24T16:19:51Z", "author": {"login": "geofjamg"}, "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Test;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.PowsyblException;\n+\n+public class ExtensionAdderProvidersTest {\n+\n+    private static interface SimpleExtendable extends Extendable<SimpleExtendable> {\n+    }\n+\n+    private static class SimpleExtendableImpl2\n+            extends AbstractExtendable<SimpleExtendable> implements SimpleExtendable {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SimpleExtension extends Extension<SimpleExtendable> {\n+        default String getName() {\n+            return \"SimpleExtension\";\n+        }\n+    }\n+\n+    private static class SimpleExtensionImpl extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static class SimpleExtensionImpl2 extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static interface SimpleExtensionAdder extends ExtensionAdder<SimpleExtendable, SimpleExtension> {\n+        default Class<SimpleExtension> getExtensionClass() {\n+            return SimpleExtension.class;\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImpl\n+            extends AbstractExtensionAdder<SimpleExtendable, SimpleExtension>\n+            implements SimpleExtensionAdder {\n+        protected SimpleExtensionAdderImpl(SimpleExtendable extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected SimpleExtensionImpl createExtension(SimpleExtendable extendable) {\n+            return new SimpleExtensionImpl();\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImpl2\n+            extends AbstractExtensionAdder<SimpleExtendable, SimpleExtension>\n+            implements SimpleExtensionAdder {\n+        protected SimpleExtensionAdderImpl2(SimpleExtendable extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected SimpleExtensionImpl2 createExtension(SimpleExtendable extendable) {\n+            return new SimpleExtensionImpl2();\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImplProvider\n+            implements\n+            ExtensionAdderProvider<SimpleExtendable, SimpleExtension, SimpleExtensionAdderImpl> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Default\";\n+        }\n+\n+        @Override\n+        public Class<SimpleExtensionAdderImpl> getAdderClass() {\n+            return SimpleExtensionAdderImpl.class;\n+        }\n+\n+        @Override\n+        public SimpleExtensionAdderImpl newAdder(SimpleExtendable extendable) {\n+            return new SimpleExtensionAdderImpl(extendable);\n+        }\n+    }\n+\n+    @AutoService(ExtensionAdderProvider.class)\n+    public static class SimpleExtensionAdderImpl2Provider implements\n+            ExtensionAdderProvider<SimpleExtendable, SimpleExtension, SimpleExtensionAdderImpl2> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+\n+        @Override\n+        public Class<SimpleExtensionAdderImpl2> getAdderClass() {\n+            return SimpleExtensionAdderImpl2.class;\n+        }\n+\n+        @Override\n+        public SimpleExtensionAdderImpl2 newAdder(SimpleExtendable extendable) {\n+            return new SimpleExtensionAdderImpl2(extendable);\n+        }\n+    }\n+\n+    private static interface GenericExtendable<G extends GenericExtendable<G>> extends Extendable<G> {\n+    }\n+\n+    private static class GenericExtendableImpl2<G extends GenericExtendable<G>>\n+            extends AbstractExtendable<G> implements GenericExtendable<G> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SpecificExtendable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c90cb091fc5430517c21dccfd950262f27caf342"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2NTk3MA==", "bodyText": "useless static?", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r383365970", "createdAt": "2020-02-24T16:20:06Z", "author": {"login": "geofjamg"}, "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Test;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.PowsyblException;\n+\n+public class ExtensionAdderProvidersTest {\n+\n+    private static interface SimpleExtendable extends Extendable<SimpleExtendable> {\n+    }\n+\n+    private static class SimpleExtendableImpl2\n+            extends AbstractExtendable<SimpleExtendable> implements SimpleExtendable {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SimpleExtension extends Extension<SimpleExtendable> {\n+        default String getName() {\n+            return \"SimpleExtension\";\n+        }\n+    }\n+\n+    private static class SimpleExtensionImpl extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static class SimpleExtensionImpl2 extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static interface SimpleExtensionAdder extends ExtensionAdder<SimpleExtendable, SimpleExtension> {\n+        default Class<SimpleExtension> getExtensionClass() {\n+            return SimpleExtension.class;\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImpl\n+            extends AbstractExtensionAdder<SimpleExtendable, SimpleExtension>\n+            implements SimpleExtensionAdder {\n+        protected SimpleExtensionAdderImpl(SimpleExtendable extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected SimpleExtensionImpl createExtension(SimpleExtendable extendable) {\n+            return new SimpleExtensionImpl();\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImpl2\n+            extends AbstractExtensionAdder<SimpleExtendable, SimpleExtension>\n+            implements SimpleExtensionAdder {\n+        protected SimpleExtensionAdderImpl2(SimpleExtendable extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected SimpleExtensionImpl2 createExtension(SimpleExtendable extendable) {\n+            return new SimpleExtensionImpl2();\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImplProvider\n+            implements\n+            ExtensionAdderProvider<SimpleExtendable, SimpleExtension, SimpleExtensionAdderImpl> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Default\";\n+        }\n+\n+        @Override\n+        public Class<SimpleExtensionAdderImpl> getAdderClass() {\n+            return SimpleExtensionAdderImpl.class;\n+        }\n+\n+        @Override\n+        public SimpleExtensionAdderImpl newAdder(SimpleExtendable extendable) {\n+            return new SimpleExtensionAdderImpl(extendable);\n+        }\n+    }\n+\n+    @AutoService(ExtensionAdderProvider.class)\n+    public static class SimpleExtensionAdderImpl2Provider implements\n+            ExtensionAdderProvider<SimpleExtendable, SimpleExtension, SimpleExtensionAdderImpl2> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+\n+        @Override\n+        public Class<SimpleExtensionAdderImpl2> getAdderClass() {\n+            return SimpleExtensionAdderImpl2.class;\n+        }\n+\n+        @Override\n+        public SimpleExtensionAdderImpl2 newAdder(SimpleExtendable extendable) {\n+            return new SimpleExtensionAdderImpl2(extendable);\n+        }\n+    }\n+\n+    private static interface GenericExtendable<G extends GenericExtendable<G>> extends Extendable<G> {\n+    }\n+\n+    private static class GenericExtendableImpl2<G extends GenericExtendable<G>>\n+            extends AbstractExtendable<G> implements GenericExtendable<G> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SpecificExtendable\n+            extends GenericExtendable<SpecificExtendable> {\n+    }\n+\n+    private static class SpecificExtendableImpl2\n+            extends AbstractExtendable<SpecificExtendable>\n+            implements SpecificExtendable {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface GenericExtension<G extends GenericExtendable<G>> extends Extension<G> {\n+\n+        static <G extends GenericExtendable<G>> Class<GenericExtension<G>> clazz() {\n+            return (Class<GenericExtension<G>>) (Class) GenericExtension.class;\n+        }\n+\n+        default String getName() {\n+            return \"SimpleExtension\";\n+        }\n+    }\n+\n+    private static class GenericExtensionImpl<G extends GenericExtendable<G>>\n+            extends AbstractExtension<G>\n+            implements GenericExtension<G> {\n+    }\n+\n+    private static class GenericExtensionImpl2<G extends GenericExtendable<G>>\n+            extends AbstractExtension<G>\n+            implements GenericExtension<G> {\n+    }\n+\n+    private static interface GenericExtensionAdder<G extends GenericExtendable<G>> extends ExtensionAdder<G, GenericExtension<G>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c90cb091fc5430517c21dccfd950262f27caf342"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2NjYwNA==", "bodyText": "Unused variable?", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r383366604", "createdAt": "2020-02-24T16:21:03Z", "author": {"login": "geofjamg"}, "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Test;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.PowsyblException;\n+\n+public class ExtensionAdderProvidersTest {\n+\n+    private static interface SimpleExtendable extends Extendable<SimpleExtendable> {\n+    }\n+\n+    private static class SimpleExtendableImpl2\n+            extends AbstractExtendable<SimpleExtendable> implements SimpleExtendable {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SimpleExtension extends Extension<SimpleExtendable> {\n+        default String getName() {\n+            return \"SimpleExtension\";\n+        }\n+    }\n+\n+    private static class SimpleExtensionImpl extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static class SimpleExtensionImpl2 extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static interface SimpleExtensionAdder extends ExtensionAdder<SimpleExtendable, SimpleExtension> {\n+        default Class<SimpleExtension> getExtensionClass() {\n+            return SimpleExtension.class;\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImpl\n+            extends AbstractExtensionAdder<SimpleExtendable, SimpleExtension>\n+            implements SimpleExtensionAdder {\n+        protected SimpleExtensionAdderImpl(SimpleExtendable extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected SimpleExtensionImpl createExtension(SimpleExtendable extendable) {\n+            return new SimpleExtensionImpl();\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImpl2\n+            extends AbstractExtensionAdder<SimpleExtendable, SimpleExtension>\n+            implements SimpleExtensionAdder {\n+        protected SimpleExtensionAdderImpl2(SimpleExtendable extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected SimpleExtensionImpl2 createExtension(SimpleExtendable extendable) {\n+            return new SimpleExtensionImpl2();\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImplProvider\n+            implements\n+            ExtensionAdderProvider<SimpleExtendable, SimpleExtension, SimpleExtensionAdderImpl> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Default\";\n+        }\n+\n+        @Override\n+        public Class<SimpleExtensionAdderImpl> getAdderClass() {\n+            return SimpleExtensionAdderImpl.class;\n+        }\n+\n+        @Override\n+        public SimpleExtensionAdderImpl newAdder(SimpleExtendable extendable) {\n+            return new SimpleExtensionAdderImpl(extendable);\n+        }\n+    }\n+\n+    @AutoService(ExtensionAdderProvider.class)\n+    public static class SimpleExtensionAdderImpl2Provider implements\n+            ExtensionAdderProvider<SimpleExtendable, SimpleExtension, SimpleExtensionAdderImpl2> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+\n+        @Override\n+        public Class<SimpleExtensionAdderImpl2> getAdderClass() {\n+            return SimpleExtensionAdderImpl2.class;\n+        }\n+\n+        @Override\n+        public SimpleExtensionAdderImpl2 newAdder(SimpleExtendable extendable) {\n+            return new SimpleExtensionAdderImpl2(extendable);\n+        }\n+    }\n+\n+    private static interface GenericExtendable<G extends GenericExtendable<G>> extends Extendable<G> {\n+    }\n+\n+    private static class GenericExtendableImpl2<G extends GenericExtendable<G>>\n+            extends AbstractExtendable<G> implements GenericExtendable<G> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SpecificExtendable\n+            extends GenericExtendable<SpecificExtendable> {\n+    }\n+\n+    private static class SpecificExtendableImpl2\n+            extends AbstractExtendable<SpecificExtendable>\n+            implements SpecificExtendable {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface GenericExtension<G extends GenericExtendable<G>> extends Extension<G> {\n+\n+        static <G extends GenericExtendable<G>> Class<GenericExtension<G>> clazz() {\n+            return (Class<GenericExtension<G>>) (Class) GenericExtension.class;\n+        }\n+\n+        default String getName() {\n+            return \"SimpleExtension\";\n+        }\n+    }\n+\n+    private static class GenericExtensionImpl<G extends GenericExtendable<G>>\n+            extends AbstractExtension<G>\n+            implements GenericExtension<G> {\n+    }\n+\n+    private static class GenericExtensionImpl2<G extends GenericExtendable<G>>\n+            extends AbstractExtension<G>\n+            implements GenericExtension<G> {\n+    }\n+\n+    private static interface GenericExtensionAdder<G extends GenericExtendable<G>> extends ExtensionAdder<G, GenericExtension<G>> {\n+        static <G extends GenericExtendable<G>> Class<GenericExtensionAdder<G>> clazz() {\n+            return (Class<GenericExtensionAdder<G>>) (Class) GenericExtensionAdder.class;\n+        }\n+\n+        default Class<GenericExtension> getExtensionClass() {\n+            return GenericExtension.class;\n+        }\n+    }\n+\n+    private static class GenericExtensionAdderImpl<G extends GenericExtendable<G>>\n+            extends AbstractExtensionAdder<G, GenericExtension<G>>\n+            implements GenericExtensionAdder<G> {\n+        protected GenericExtensionAdderImpl(G extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected GenericExtensionImpl<G> createExtension(G genericExtendable) {\n+            return new GenericExtensionImpl<>();\n+        }\n+    }\n+\n+    private static class GenericExtensionAdderImpl2<G extends GenericExtendable<G>>\n+            extends AbstractExtensionAdder<G, GenericExtension<G>>\n+            implements GenericExtensionAdder<G> {\n+        protected GenericExtensionAdderImpl2(G extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected GenericExtensionImpl2<G> createExtension(G genericExtendable) {\n+            return new GenericExtensionImpl2<>();\n+        }\n+    }\n+\n+    private static class GenericExtensionAdderImplProvider<G extends GenericExtendable<G>>\n+            implements\n+            ExtensionAdderProvider<G, GenericExtension<G>, GenericExtensionAdderImpl<G>> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Default\";\n+        }\n+\n+        @Override\n+        public Class<GenericExtensionAdderImpl> getAdderClass() {\n+            return GenericExtensionAdderImpl.class;\n+        }\n+\n+        @Override\n+        public GenericExtensionAdderImpl<G> newAdder(G extendable) {\n+            return new GenericExtensionAdderImpl<>(extendable);\n+        }\n+    }\n+\n+    @AutoService(ExtensionAdderProvider.class)\n+    public static class GenericExtensionAdderImpl2Provider<G extends GenericExtendable<G>>\n+            implements\n+            ExtensionAdderProvider<G, GenericExtension<G>, GenericExtensionAdderImpl2<G>> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+\n+        @Override\n+        public Class<GenericExtensionAdderImpl2> getAdderClass() {\n+            return GenericExtensionAdderImpl2.class;\n+        }\n+\n+        @Override\n+        public GenericExtensionAdderImpl2<G> newAdder(G extendable) {\n+            return new GenericExtensionAdderImpl2<>(extendable);\n+        }\n+    }\n+\n+    @Test\n+    public void test() {\n+        List<ExtensionAdderProvider> listProviders = Arrays.asList(\n+                new SimpleExtensionAdderImplProvider(),\n+                new SimpleExtensionAdderImpl2Provider(),\n+                new GenericExtensionAdderImplProvider(),\n+                new GenericExtensionAdderImpl2Provider());\n+        ConcurrentMap<Pair<String, Class>, ExtensionAdderProvider> cache = new ConcurrentHashMap<>();\n+        ConcurrentMap<String, List<ExtensionAdderProvider>> mapProviders = ExtensionAdderProviders.groupProvidersByName(listProviders);\n+        ExtensionAdderProvider a = ExtensionAdderProviders.findCachedProvider(\"Default\",\n+                SimpleExtensionAdder.class, mapProviders, cache);\n+        assertEquals(\"Default\", a.getImplementationName());\n+        assertEquals(SimpleExtensionAdderImplProvider.class, a.getClass());\n+        assertEquals(1, cache.size());\n+        ExtensionAdderProvider b = ExtensionAdderProviders.findCachedProvider(\"Custom\",\n+                SimpleExtensionAdder.class, mapProviders, cache);\n+        assertEquals(\"Custom\", b.getImplementationName());\n+        assertEquals(SimpleExtensionAdderImpl2Provider.class, b.getClass());\n+        assertEquals(2, cache.size());\n+\n+        // Do it again, it should work from the cache\n+        assertEquals(\"Default\", ExtensionAdderProviders.findCachedProvider(\"Default\", SimpleExtensionAdder.class,\n+                new ConcurrentHashMap<>(), cache).getImplementationName());\n+        assertEquals(\"Custom\", ExtensionAdderProviders.findCachedProvider(\"Custom\", SimpleExtensionAdder.class,\n+                                new ConcurrentHashMap<>(), cache)\n+                        .getImplementationName());\n+    }\n+\n+    @Test\n+    public void testMissing() {\n+        try {\n+            ExtensionAdderProviders.findCachedProvider(\"Default\",\n+                    SimpleExtensionAdder.class, new ConcurrentHashMap<>(),\n+                    new ConcurrentHashMap<>());\n+            fail(\"Should throw Missing Provider exception\");\n+        } catch (PowsyblException e) {\n+            assertTrue(\"Should throw Missing Provider exception\",\n+                    e.getMessage().contains(\"not found\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testMissingAlternate() {\n+        try {\n+            List<ExtensionAdderProvider> listProviders = Arrays", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c90cb091fc5430517c21dccfd950262f27caf342"}, "originalPosition": 283}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2Njk2MA==", "bodyText": "Unused variable?", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r383366960", "createdAt": "2020-02-24T16:21:35Z", "author": {"login": "geofjamg"}, "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionAdderProvidersTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Test;\n+\n+import com.google.auto.service.AutoService;\n+import com.powsybl.commons.PowsyblException;\n+\n+public class ExtensionAdderProvidersTest {\n+\n+    private static interface SimpleExtendable extends Extendable<SimpleExtendable> {\n+    }\n+\n+    private static class SimpleExtendableImpl2\n+            extends AbstractExtendable<SimpleExtendable> implements SimpleExtendable {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SimpleExtension extends Extension<SimpleExtendable> {\n+        default String getName() {\n+            return \"SimpleExtension\";\n+        }\n+    }\n+\n+    private static class SimpleExtensionImpl extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static class SimpleExtensionImpl2 extends AbstractExtension<SimpleExtendable>\n+            implements SimpleExtension {\n+    }\n+\n+    private static interface SimpleExtensionAdder extends ExtensionAdder<SimpleExtendable, SimpleExtension> {\n+        default Class<SimpleExtension> getExtensionClass() {\n+            return SimpleExtension.class;\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImpl\n+            extends AbstractExtensionAdder<SimpleExtendable, SimpleExtension>\n+            implements SimpleExtensionAdder {\n+        protected SimpleExtensionAdderImpl(SimpleExtendable extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected SimpleExtensionImpl createExtension(SimpleExtendable extendable) {\n+            return new SimpleExtensionImpl();\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImpl2\n+            extends AbstractExtensionAdder<SimpleExtendable, SimpleExtension>\n+            implements SimpleExtensionAdder {\n+        protected SimpleExtensionAdderImpl2(SimpleExtendable extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected SimpleExtensionImpl2 createExtension(SimpleExtendable extendable) {\n+            return new SimpleExtensionImpl2();\n+        }\n+    }\n+\n+    private static class SimpleExtensionAdderImplProvider\n+            implements\n+            ExtensionAdderProvider<SimpleExtendable, SimpleExtension, SimpleExtensionAdderImpl> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Default\";\n+        }\n+\n+        @Override\n+        public Class<SimpleExtensionAdderImpl> getAdderClass() {\n+            return SimpleExtensionAdderImpl.class;\n+        }\n+\n+        @Override\n+        public SimpleExtensionAdderImpl newAdder(SimpleExtendable extendable) {\n+            return new SimpleExtensionAdderImpl(extendable);\n+        }\n+    }\n+\n+    @AutoService(ExtensionAdderProvider.class)\n+    public static class SimpleExtensionAdderImpl2Provider implements\n+            ExtensionAdderProvider<SimpleExtendable, SimpleExtension, SimpleExtensionAdderImpl2> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+\n+        @Override\n+        public Class<SimpleExtensionAdderImpl2> getAdderClass() {\n+            return SimpleExtensionAdderImpl2.class;\n+        }\n+\n+        @Override\n+        public SimpleExtensionAdderImpl2 newAdder(SimpleExtendable extendable) {\n+            return new SimpleExtensionAdderImpl2(extendable);\n+        }\n+    }\n+\n+    private static interface GenericExtendable<G extends GenericExtendable<G>> extends Extendable<G> {\n+    }\n+\n+    private static class GenericExtendableImpl2<G extends GenericExtendable<G>>\n+            extends AbstractExtendable<G> implements GenericExtendable<G> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface SpecificExtendable\n+            extends GenericExtendable<SpecificExtendable> {\n+    }\n+\n+    private static class SpecificExtendableImpl2\n+            extends AbstractExtendable<SpecificExtendable>\n+            implements SpecificExtendable {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+    }\n+\n+    private static interface GenericExtension<G extends GenericExtendable<G>> extends Extension<G> {\n+\n+        static <G extends GenericExtendable<G>> Class<GenericExtension<G>> clazz() {\n+            return (Class<GenericExtension<G>>) (Class) GenericExtension.class;\n+        }\n+\n+        default String getName() {\n+            return \"SimpleExtension\";\n+        }\n+    }\n+\n+    private static class GenericExtensionImpl<G extends GenericExtendable<G>>\n+            extends AbstractExtension<G>\n+            implements GenericExtension<G> {\n+    }\n+\n+    private static class GenericExtensionImpl2<G extends GenericExtendable<G>>\n+            extends AbstractExtension<G>\n+            implements GenericExtension<G> {\n+    }\n+\n+    private static interface GenericExtensionAdder<G extends GenericExtendable<G>> extends ExtensionAdder<G, GenericExtension<G>> {\n+        static <G extends GenericExtendable<G>> Class<GenericExtensionAdder<G>> clazz() {\n+            return (Class<GenericExtensionAdder<G>>) (Class) GenericExtensionAdder.class;\n+        }\n+\n+        default Class<GenericExtension> getExtensionClass() {\n+            return GenericExtension.class;\n+        }\n+    }\n+\n+    private static class GenericExtensionAdderImpl<G extends GenericExtendable<G>>\n+            extends AbstractExtensionAdder<G, GenericExtension<G>>\n+            implements GenericExtensionAdder<G> {\n+        protected GenericExtensionAdderImpl(G extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected GenericExtensionImpl<G> createExtension(G genericExtendable) {\n+            return new GenericExtensionImpl<>();\n+        }\n+    }\n+\n+    private static class GenericExtensionAdderImpl2<G extends GenericExtendable<G>>\n+            extends AbstractExtensionAdder<G, GenericExtension<G>>\n+            implements GenericExtensionAdder<G> {\n+        protected GenericExtensionAdderImpl2(G extendable) {\n+            super(extendable);\n+        }\n+\n+        @Override\n+        protected GenericExtensionImpl2<G> createExtension(G genericExtendable) {\n+            return new GenericExtensionImpl2<>();\n+        }\n+    }\n+\n+    private static class GenericExtensionAdderImplProvider<G extends GenericExtendable<G>>\n+            implements\n+            ExtensionAdderProvider<G, GenericExtension<G>, GenericExtensionAdderImpl<G>> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Default\";\n+        }\n+\n+        @Override\n+        public Class<GenericExtensionAdderImpl> getAdderClass() {\n+            return GenericExtensionAdderImpl.class;\n+        }\n+\n+        @Override\n+        public GenericExtensionAdderImpl<G> newAdder(G extendable) {\n+            return new GenericExtensionAdderImpl<>(extendable);\n+        }\n+    }\n+\n+    @AutoService(ExtensionAdderProvider.class)\n+    public static class GenericExtensionAdderImpl2Provider<G extends GenericExtendable<G>>\n+            implements\n+            ExtensionAdderProvider<G, GenericExtension<G>, GenericExtensionAdderImpl2<G>> {\n+        @Override\n+        public String getImplementationName() {\n+            return \"Custom\";\n+        }\n+\n+        @Override\n+        public Class<GenericExtensionAdderImpl2> getAdderClass() {\n+            return GenericExtensionAdderImpl2.class;\n+        }\n+\n+        @Override\n+        public GenericExtensionAdderImpl2<G> newAdder(G extendable) {\n+            return new GenericExtensionAdderImpl2<>(extendable);\n+        }\n+    }\n+\n+    @Test\n+    public void test() {\n+        List<ExtensionAdderProvider> listProviders = Arrays.asList(\n+                new SimpleExtensionAdderImplProvider(),\n+                new SimpleExtensionAdderImpl2Provider(),\n+                new GenericExtensionAdderImplProvider(),\n+                new GenericExtensionAdderImpl2Provider());\n+        ConcurrentMap<Pair<String, Class>, ExtensionAdderProvider> cache = new ConcurrentHashMap<>();\n+        ConcurrentMap<String, List<ExtensionAdderProvider>> mapProviders = ExtensionAdderProviders.groupProvidersByName(listProviders);\n+        ExtensionAdderProvider a = ExtensionAdderProviders.findCachedProvider(\"Default\",\n+                SimpleExtensionAdder.class, mapProviders, cache);\n+        assertEquals(\"Default\", a.getImplementationName());\n+        assertEquals(SimpleExtensionAdderImplProvider.class, a.getClass());\n+        assertEquals(1, cache.size());\n+        ExtensionAdderProvider b = ExtensionAdderProviders.findCachedProvider(\"Custom\",\n+                SimpleExtensionAdder.class, mapProviders, cache);\n+        assertEquals(\"Custom\", b.getImplementationName());\n+        assertEquals(SimpleExtensionAdderImpl2Provider.class, b.getClass());\n+        assertEquals(2, cache.size());\n+\n+        // Do it again, it should work from the cache\n+        assertEquals(\"Default\", ExtensionAdderProviders.findCachedProvider(\"Default\", SimpleExtensionAdder.class,\n+                new ConcurrentHashMap<>(), cache).getImplementationName());\n+        assertEquals(\"Custom\", ExtensionAdderProviders.findCachedProvider(\"Custom\", SimpleExtensionAdder.class,\n+                                new ConcurrentHashMap<>(), cache)\n+                        .getImplementationName());\n+    }\n+\n+    @Test\n+    public void testMissing() {\n+        try {\n+            ExtensionAdderProviders.findCachedProvider(\"Default\",\n+                    SimpleExtensionAdder.class, new ConcurrentHashMap<>(),\n+                    new ConcurrentHashMap<>());\n+            fail(\"Should throw Missing Provider exception\");\n+        } catch (PowsyblException e) {\n+            assertTrue(\"Should throw Missing Provider exception\",\n+                    e.getMessage().contains(\"not found\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testMissingAlternate() {\n+        try {\n+            List<ExtensionAdderProvider> listProviders = Arrays\n+                    .asList(new SimpleExtensionAdderImplProvider());\n+            ExtensionAdderProviders.findCachedProvider(\"Custom\",\n+                    SimpleExtensionAdder.class, new ConcurrentHashMap<>(),\n+                    new ConcurrentHashMap<>());\n+            fail(\"Should throw Missing Provider exception\");\n+        } catch (PowsyblException e) {\n+            assertTrue(\"Should throw Missing Provider exception\",\n+                    e.getMessage().contains(\"not found\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testMissingAlternate2() {\n+        try {\n+            List<ExtensionAdderProvider> listProviders = Arrays", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c90cb091fc5430517c21dccfd950262f27caf342"}, "originalPosition": 298}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "127581413ec987da25326589d523ff805b3efc4e", "author": {"user": {"login": "geofjamg", "name": "Geoffroy Jamgotchian"}}, "url": "https://github.com/powsybl/powsybl-core/commit/127581413ec987da25326589d523ff805b3efc4e", "committedDate": "2020-02-24T15:29:21Z", "message": "Merge branch 'master' into extension2"}, "afterCommit": {"oid": "86e7e43f57cf16576c7db771ebf19340183f8254", "author": {"user": {"login": "jonenst", "name": "Jon Harper"}}, "url": "https://github.com/powsybl/powsybl-core/commit/86e7e43f57cf16576c7db771ebf19340183f8254", "committedDate": "2020-02-24T18:01:10Z", "message": "Allow to have different implementations of extensions\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "86e7e43f57cf16576c7db771ebf19340183f8254", "author": {"user": {"login": "jonenst", "name": "Jon Harper"}}, "url": "https://github.com/powsybl/powsybl-core/commit/86e7e43f57cf16576c7db771ebf19340183f8254", "committedDate": "2020-02-24T18:01:10Z", "message": "Allow to have different implementations of extensions\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>"}, "afterCommit": {"oid": "d6b57197d6d6919dae05e0b43302ce62860a564e", "author": {"user": {"login": "jonenst", "name": "Jon Harper"}}, "url": "https://github.com/powsybl/powsybl-core/commit/d6b57197d6d6919dae05e0b43302ce62860a564e", "committedDate": "2020-02-24T18:13:23Z", "message": "Allow to have different implementations of extensions\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzOTk2MTYx", "url": "https://github.com/powsybl/powsybl-core/pull/1152#pullrequestreview-363996161", "createdAt": "2020-02-25T09:41:20Z", "commit": {"oid": "c49faed9ae314ed693031aab747f9fc0a9bf5ff0"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTo0MToyMFrOFt--oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTo0MToyMFrOFt--oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc2MjA4MA==", "bodyText": "Maybe a copy/past error: are you sure about this message?", "url": "https://github.com/powsybl/powsybl-core/pull/1152#discussion_r383762080", "createdAt": "2020-02-25T09:41:20Z", "author": {"login": "mathbagu"}, "path": "commons/src/main/java/com/powsybl/commons/extensions/ExtensionAdderProviders.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.extensions;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.ServiceLoader;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Suppliers;\n+import com.powsybl.commons.PowsyblException;\n+\n+/**\n+ * A utility class to help finding providers using ServiceLoader.\n+ *\n+ * @author Jon Harper <jon.harper at rte-france.com>\n+ *\n+ */\n+//Don't bother with generics because serviceloader doesn't return them\n+//and we put them in a cache where we can't propagate the generic types.\n+@SuppressWarnings(\"rawtypes\")\n+public final class ExtensionAdderProviders {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExtensionAdderProviders.class);\n+\n+    private static final Supplier<ConcurrentMap<String, List<ExtensionAdderProvider>>> ADDER_PROVIDERS = Suppliers\n+            .memoize(() -> groupProvidersByName(ServiceLoader.load(ExtensionAdderProvider.class)))::get;\n+\n+    private static final ConcurrentMap<Pair<String, Class>, ExtensionAdderProvider> CACHE = new ConcurrentHashMap<>();\n+\n+    //package private for tests\n+    static ConcurrentMap<String, List<ExtensionAdderProvider>> groupProvidersByName(Iterable<ExtensionAdderProvider> i) {\n+        return StreamSupport.stream(i.spliterator(), false).collect(Collectors\n+                .groupingByConcurrent(ExtensionAdderProvider::getImplementationName));\n+    }\n+\n+    private ExtensionAdderProviders() {\n+    }\n+\n+    private static <O, E extends Extension<O>, B extends ExtensionAdder<O, E>> ExtensionAdderProvider findProvider(\n+            String name, Class<B> type,\n+            ConcurrentMap<String, List<ExtensionAdderProvider>> providersMap) {\n+\n+        List<ExtensionAdderProvider> providersForName = providersMap.get(name);\n+        if (providersForName == null) {\n+            providersForName = Collections.emptyList();\n+        }\n+        List<ExtensionAdderProvider> providers = providersForName.stream()\n+                .filter(s -> type.isAssignableFrom(s.getAdderClass()))\n+                .collect(Collectors.toList());\n+\n+        if (providers.isEmpty()) {\n+            LOGGER.error(\n+                    \"ExtensionAdderProvider not found for ExtensionAdder {} for implementation {}\",\n+                    type.getSimpleName(), name);\n+            throw new PowsyblException(\"ExtensionAdderProvider not found\");\n+        }\n+\n+        if (providers.size() > 1) {\n+            LOGGER.error(\n+                    \"Multiple ExtensionAdderProviders found for ExtensionAdder {} for implementation {} : {}\",\n+                    type.getSimpleName(), name, providers);\n+            throw new PowsyblException(\n+                    \"Multiple platform configuration providers found\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c49faed9ae314ed693031aab747f9fc0a9bf5ff0"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edd940e736fb9c37a4e298659181fa7d736da50d", "author": {"user": {"login": "jonenst", "name": "Jon Harper"}}, "url": "https://github.com/powsybl/powsybl-core/commit/edd940e736fb9c37a4e298659181fa7d736da50d", "committedDate": "2020-02-25T09:55:30Z", "message": "Allow to have different implementations of extensions\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c49faed9ae314ed693031aab747f9fc0a9bf5ff0", "author": {"user": {"login": "geofjamg", "name": "Geoffroy Jamgotchian"}}, "url": "https://github.com/powsybl/powsybl-core/commit/c49faed9ae314ed693031aab747f9fc0a9bf5ff0", "committedDate": "2020-02-25T07:46:51Z", "message": "Merge branch 'master' into extension2"}, "afterCommit": {"oid": "edd940e736fb9c37a4e298659181fa7d736da50d", "author": {"user": {"login": "jonenst", "name": "Jon Harper"}}, "url": "https://github.com/powsybl/powsybl-core/commit/edd940e736fb9c37a4e298659181fa7d736da50d", "committedDate": "2020-02-25T09:55:30Z", "message": "Allow to have different implementations of extensions\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0be9beb61cb16e99a06c743fd8bb02acfa30ea89", "author": {"user": {"login": "geofjamg", "name": "Geoffroy Jamgotchian"}}, "url": "https://github.com/powsybl/powsybl-core/commit/0be9beb61cb16e99a06c743fd8bb02acfa30ea89", "committedDate": "2020-02-25T15:26:03Z", "message": "Merge branch 'master' into extension2"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4389, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}