{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5MjU0MTU5", "number": 3358, "title": "HAProxy protocol support", "bodyText": "Signed-off-by: zenios dimitris.zenios@gmail.com\nNotes:\n\n\nHardcoded netty version (4.1.48.Final) for netty-codec-haproxy in order to avoid creating a pull request for vertx-dependencies\n\n\nTests were copied from #1271. That PR can be closed if this one gets merged", "createdAt": "2020-04-05T21:29:43Z", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358", "merged": true, "mergeCommit": {"oid": "3cfe7dc620fb8bd7acf63b61231cebd5a8d3c62c"}, "closed": true, "closedAt": "2020-04-10T11:38:04Z", "author": {"login": "zenios"}, "timelineItems": {"totalCount": 40, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcU-Qc1gFqTM4ODIyMDc4OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcWPhm3AFqTM5MTM5OTMxMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MjIwNzg4", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-388220788", "createdAt": "2020-04-06T12:56:39Z", "commit": {"oid": "1aeccd54b370fad47627232c1e6210432f23a719"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjo1NjozOVrOGBWYEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjo1NjozOVrOGBWYEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2ODM2OA==", "bodyText": "we should have this to optional=true", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404068368", "createdAt": "2020-04-06T12:56:39Z", "author": {"login": "vietj"}, "path": "pom.xml", "diffHunk": "@@ -101,6 +101,11 @@\n       <groupId>io.netty</groupId>\n       <artifactId>netty-codec-http2</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>io.netty</groupId>\n+      <artifactId>netty-codec-haproxy</artifactId>\n+      <version>4.1.48.Final</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1aeccd54b370fad47627232c1e6210432f23a719"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MjIxMzY5", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-388221369", "createdAt": "2020-04-06T12:57:24Z", "commit": {"oid": "1aeccd54b370fad47627232c1e6210432f23a719"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjo1NzoyNFrOGBWZ3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjo1NzoyNFrOGBWZ3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2ODgyOQ==", "bodyText": "we should only add this to the pipeline when the option is configured. pipeline handlers have effect on performance and we should avoid adding them when it is not necessary", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404068829", "createdAt": "2020-04-06T12:57:24Z", "author": {"login": "vietj"}, "path": "src/main/java/io/vertx/core/http/impl/HttpServerChannelInitializer.java", "diffHunk": "@@ -217,6 +218,7 @@ private void configureHttp1OrH2C(ChannelPipeline pipeline, HandlerHolder<? exten\n     if (HttpServerImpl.USE_FLASH_POLICY_HANDLER) {\n       pipeline.addLast(\"flashpolicy\", new FlashPolicyHandler());\n     }\n+    pipeline.addLast(\"optionalHAProxyMessageDecoder\", new OptionalHAProxyMessageDecoder());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1aeccd54b370fad47627232c1e6210432f23a719"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MjI2MjIx", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-388226221", "createdAt": "2020-04-06T13:03:19Z", "commit": {"oid": "1aeccd54b370fad47627232c1e6210432f23a719"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MjQwMDA0", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-388240004", "createdAt": "2020-04-06T13:19:57Z", "commit": {"oid": "4dd5439edd616e1246607851722de29c73dce247"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMzoxOTo1N1rOGBXUdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMzoxOTo1N1rOGBXUdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA4MzgyOQ==", "bodyText": "we need an integration test without the netty-codec-haproxy jar, have a look at failsafe tests where a jar can be removed from the classpath to run the test in pom.xml", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404083829", "createdAt": "2020-04-06T13:19:57Z", "author": {"login": "vietj"}, "path": "pom.xml", "diffHunk": "@@ -105,6 +105,7 @@\n       <groupId>io.netty</groupId>\n       <artifactId>netty-codec-haproxy</artifactId>\n       <version>4.1.48.Final</version>\n+      <optional>true</optional>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dd5439edd616e1246607851722de29c73dce247"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MjcxNzMz", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-388271733", "createdAt": "2020-04-06T13:54:02Z", "commit": {"oid": "c3270115a8b40aa801c50a6cd26866f47d24e294"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMzo1NDowMlrOGBY0lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMzo1NDowMlrOGBY0lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEwODQzOA==", "bodyText": "can you catch Throwable to avoid any class initialisation error", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404108438", "createdAt": "2020-04-06T13:54:02Z", "author": {"login": "vietj"}, "path": "src/main/java/io/vertx/core/http/impl/haproxy/OptionalHAProxyMessageDecoder.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2011-2019 Contributors to the Eclipse Foundation\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0\n+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+ */\n+\n+package io.vertx.core.http.impl.haproxy;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.ByteToMessageDecoder;\n+import io.netty.handler.codec.ProtocolDetectionResult;\n+import io.netty.handler.codec.haproxy.HAProxyMessageDecoder;\n+import io.netty.handler.codec.haproxy.HAProxyProtocolVersion;\n+\n+import java.util.List;\n+\n+public class OptionalHAProxyMessageDecoder extends ByteToMessageDecoder {\n+  private static final boolean hasProxyProtocolSupport;\n+\n+  static {\n+    boolean proxyProtocolCheck = true;\n+    try {\n+      Class.forName(\"io.netty.handler.codec.haproxy.HAProxyMessageDecoder\");\n+    } catch (ClassNotFoundException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3270115a8b40aa801c50a6cd26866f47d24e294"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NjIxOTkz", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-388621993", "createdAt": "2020-04-06T21:14:19Z", "commit": {"oid": "a74f0f717cc48465d74beaae52f7a4041b9aaff8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMToxNDoyMFrOGBqI0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMToxNDoyMFrOGBqI0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM5MjE0NA==", "bodyText": "rename it proxyProtocolSupport instead, proxy is confusing given that the client supports a proxyOptions", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404392144", "createdAt": "2020-04-06T21:14:20Z", "author": {"login": "vietj"}, "path": "src/main/java/io/vertx/core/net/NetServerOptions.java", "diffHunk": "@@ -54,11 +54,17 @@\n    */\n   public static final boolean DEFAULT_SNI = false;\n \n+  /**\n+   * Default value of whether the server supports HA Proxy protocol = false\n+   */\n+  public static final boolean DEFAULT_PROXY_SUPPORT = false;\n+\n   private int port;\n   private String host;\n   private int acceptBacklog;\n   private ClientAuth clientAuth;\n   private boolean sni;\n+  private boolean proxySupport;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a74f0f717cc48465d74beaae52f7a4041b9aaff8"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4ODg0NTk5", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-388884599", "createdAt": "2020-04-07T08:14:16Z", "commit": {"oid": "5c0a8e7b2892571037e0fa95f92ef5fbd142412e"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MDM3ODk0", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-389037894", "createdAt": "2020-04-07T11:48:45Z", "commit": {"oid": "eb7f13563529afb9e32ed2651d81479b5c0288ea"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMTo0ODo0NVrOGB_ysg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMjowMDoyM1rOGCAKoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc0NjkzMA==", "bodyText": "why did you remove this ?", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404746930", "createdAt": "2020-04-07T11:48:45Z", "author": {"login": "vietj"}, "path": "src/main/java/io/vertx/core/net/impl/ConnectionBase.java", "diffHunk": "@@ -468,18 +471,19 @@ public ChannelPromise channelFuture() {\n   }\n \n   public String remoteName() {\n-    java.net.SocketAddress addr = chctx.channel().remoteAddress();\n-    if (addr instanceof InetSocketAddress) {\n-      // Use hostString that does not trigger a DNS resolution\n-      return ((InetSocketAddress)addr).getHostString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb7f13563529afb9e32ed2651d81479b5c0288ea"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1MDQ0OQ==", "bodyText": "here we need to use instead this pattern:\njava.net.SocketAddress addr;\nif (channel.hasAttr(REMOTE_ADDRESS_OVERRIDE)) {\n  Attribute< java.net.SocketAddress> attr = channel.hasAttr(REMOTE_ADDRESS_OVERRIDE);\n  addr = attr.get();\n} else {\n  addr = chctx.channel().remoteAddress();\n}\nCalling attr(key) while it is not set will have the side effect to create the attribute. Attributes cannot be removed.", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404750449", "createdAt": "2020-04-07T11:55:35Z", "author": {"login": "vietj"}, "path": "src/main/java/io/vertx/core/net/impl/ConnectionBase.java", "diffHunk": "@@ -468,18 +471,19 @@ public ChannelPromise channelFuture() {\n   }\n \n   public String remoteName() {\n-    java.net.SocketAddress addr = chctx.channel().remoteAddress();\n-    if (addr instanceof InetSocketAddress) {\n-      // Use hostString that does not trigger a DNS resolution\n-      return ((InetSocketAddress)addr).getHostString();\n-    }\n+    SocketAddress addr = remoteAddress();\n+    if(addr != null)\n+      return addr.host();\n     return null;\n   }\n \n   public SocketAddress remoteAddress() {\n     SocketAddress address = remoteAddress;\n     if (address == null) {\n-      java.net.SocketAddress addr = chctx.channel().remoteAddress();\n+      java.net.SocketAddress addr = chctx.channel().attr(REMOTE_ADDRESS_OVERRIDE).getAndSet(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb7f13563529afb9e32ed2651d81479b5c0288ea"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1MDczNw==", "bodyText": "we need to check how this works with GraalVM native compilation. @pmlopes can you provide guidance here ?", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404750737", "createdAt": "2020-04-07T11:56:11Z", "author": {"login": "vietj"}, "path": "src/main/java/io/vertx/core/net/impl/HAProxyMessageCompletionHandler.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package io.vertx.core.net.impl;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.MessageToMessageDecoder;\n+import io.netty.handler.codec.haproxy.HAProxyMessage;\n+import io.netty.util.NetUtil;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Future;\n+import io.vertx.core.Handler;\n+import io.vertx.core.impl.logging.Logger;\n+import io.vertx.core.impl.logging.LoggerFactory;\n+\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.util.List;\n+\n+public class HAProxyMessageCompletionHandler extends MessageToMessageDecoder<HAProxyMessage> {\n+  private static final Logger log = LoggerFactory.getLogger(HAProxyMessageCompletionHandler.class);\n+  private static final boolean hasProxyProtocolSupport;\n+\n+  static {\n+    boolean proxyProtocolCheck = true;\n+    try {\n+      Class.forName(\"io.netty.handler.codec.haproxy.HAProxyMessageDecoder\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb7f13563529afb9e32ed2651d81479b5c0288ea"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1MjE3Mg==", "bodyText": "as this is Netty code, we should rather use here a Netty Promise<Channel> instead", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404752172", "createdAt": "2020-04-07T11:58:46Z", "author": {"login": "vietj"}, "path": "src/main/java/io/vertx/core/net/impl/HAProxyMessageCompletionHandler.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package io.vertx.core.net.impl;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.MessageToMessageDecoder;\n+import io.netty.handler.codec.haproxy.HAProxyMessage;\n+import io.netty.util.NetUtil;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Future;\n+import io.vertx.core.Handler;\n+import io.vertx.core.impl.logging.Logger;\n+import io.vertx.core.impl.logging.LoggerFactory;\n+\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.util.List;\n+\n+public class HAProxyMessageCompletionHandler extends MessageToMessageDecoder<HAProxyMessage> {\n+  private static final Logger log = LoggerFactory.getLogger(HAProxyMessageCompletionHandler.class);\n+  private static final boolean hasProxyProtocolSupport;\n+\n+  static {\n+    boolean proxyProtocolCheck = true;\n+    try {\n+      Class.forName(\"io.netty.handler.codec.haproxy.HAProxyMessageDecoder\");\n+    } catch (Throwable ex) {\n+      proxyProtocolCheck = false;\n+    }\n+    hasProxyProtocolSupport = proxyProtocolCheck;\n+  }\n+\n+  public static boolean hasProxyProtocolSupport(boolean requested) {\n+    if (requested && !hasProxyProtocolSupport)\n+      log.warn(\"Proxy protocol support could not be enabled.Make sure that netty-codec-haproxy is included in your classpath\");\n+    return hasProxyProtocolSupport && requested;\n+  }\n+\n+\n+  private final Handler<AsyncResult<Channel>> handler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb7f13563529afb9e32ed2651d81479b5c0288ea"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1Mjc5Ng==", "bodyText": "this should fail the test if that's called", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404752796", "createdAt": "2020-04-07T11:59:56Z", "author": {"login": "vietj"}, "path": "src/test/java/io/vertx/core/http/Http1xTest.java", "diffHunk": "@@ -4865,4 +4866,80 @@ public void testUnsolicitedHttpResponse() throws Exception {\n     }));\n     await();\n   }\n+\n+  @Test\n+  public void testProxyProtocolIllegalHeader() throws Exception {\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().setProxyProtocolSupport(true));\n+    server.requestHandler(req -> {\n+      req.response().end();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb7f13563529afb9e32ed2651d81479b5c0288ea"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1MzA1Ng==", "bodyText": "we should set an exceptionHandler on the HTTP server and check it is called with the failure.", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404753056", "createdAt": "2020-04-07T12:00:23Z", "author": {"login": "vietj"}, "path": "src/test/java/io/vertx/core/http/Http1xTest.java", "diffHunk": "@@ -4865,4 +4866,80 @@ public void testUnsolicitedHttpResponse() throws Exception {\n     }));\n     await();\n   }\n+\n+  @Test\n+  public void testProxyProtocolIllegalHeader() throws Exception {\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().setProxyProtocolSupport(true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb7f13563529afb9e32ed2651d81479b5c0288ea"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5ODgxNDQ0", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-389881444", "createdAt": "2020-04-08T11:21:27Z", "commit": {"oid": "242f3859ec30618721faee047fca531a1bdde005"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMToyMToyN1rOGCqr6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMToyMToyN1rOGCqr6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ0OTcwNA==", "bodyText": "actually we should rename to useProxyProtocol like we do have useProxyAuth already in this test class", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405449704", "createdAt": "2020-04-08T11:21:27Z", "author": {"login": "vietj"}, "path": "src/test/java/io/vertx/core/http/HttpTLSTest.java", "diffHunk": "@@ -921,13 +922,15 @@ public TrustOptions copy() {\n     boolean serverOpenSSL;\n     boolean serverUsesAlpn;\n     boolean serverSSL = true;\n+    boolean proxyProtocolSupport = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "242f3859ec30618721faee047fca531a1bdde005"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5ODgyMjYy", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-389882262", "createdAt": "2020-04-08T11:22:46Z", "commit": {"oid": "242f3859ec30618721faee047fca531a1bdde005"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMToyMjo0NlrOGCqudg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMToyMjo0NlrOGCqudg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1MDM1OA==", "bodyText": "we should rename to useProxyProtocol we already have useAlpn in options", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405450358", "createdAt": "2020-04-08T11:22:46Z", "author": {"login": "vietj"}, "path": "src/main/java/io/vertx/core/net/NetServerOptions.java", "diffHunk": "@@ -54,11 +54,17 @@\n    */\n   public static final boolean DEFAULT_SNI = false;\n \n+  /**\n+   * Default value of whether the server supports HA Proxy protocol = false\n+   */\n+  public static final boolean DEFAULT_PROXY_PROTOCOL_SUPPORT = false;\n+\n   private int port;\n   private String host;\n   private int acceptBacklog;\n   private ClientAuth clientAuth;\n   private boolean sni;\n+  private boolean proxyProtocolSupport;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "242f3859ec30618721faee047fca531a1bdde005"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5OTQxMTUw", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-389941150", "createdAt": "2020-04-08T12:49:35Z", "commit": {"oid": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo0OTozNVrOGCtpmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo0OTozNVrOGCtpmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5ODI2Ng==", "bodyText": "rather than support we should say \"Set whether the server uses the HA Proxy protocol\" , the \"supports\" words indicate it can be optional and it is actually not", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405498266", "createdAt": "2020-04-08T12:49:35Z", "author": {"login": "vietj"}, "path": "src/main/java/io/vertx/core/net/NetServerOptions.java", "diffHunk": "@@ -400,16 +400,16 @@ public NetServerOptions setSni(boolean sni) {\n   /**\n    * @return whether the server supports HA Proxy protocol\n    */\n-  public boolean isProxyProtocolSupport() { return proxyProtocolSupport; }\n+  public boolean isUseProxyProtocol() { return useProxyProtocol; }\n \n \n   /**\n    * Set whether the server supports HA Proxy protocol\n    *\n    * @return a reference to this, so the API can be used fluently\n    */\n-  public NetServerOptions setProxyProtocolSupport(boolean proxyProtocolSupport) {\n-    this.proxyProtocolSupport = proxyProtocolSupport;\n+  public NetServerOptions setUseProxyProtocol(boolean useProxyProtocol) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5OTQxMzgx", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-389941381", "createdAt": "2020-04-08T12:49:54Z", "commit": {"oid": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo0OTo1NFrOGCtqXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo0OTo1NFrOGCtqXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5ODQ2MA==", "bodyText": "whether the server uses the HA Proxy protocol", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405498460", "createdAt": "2020-04-08T12:49:54Z", "author": {"login": "vietj"}, "path": "src/main/java/io/vertx/core/net/NetServerOptions.java", "diffHunk": "@@ -400,16 +400,16 @@ public NetServerOptions setSni(boolean sni) {\n   /**\n    * @return whether the server supports HA Proxy protocol", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5OTQyMTI2", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-389942126", "createdAt": "2020-04-08T12:50:50Z", "commit": {"oid": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo1MDo1MFrOGCtsoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo1MDo1MFrOGCtsoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5OTA0MA==", "bodyText": "Extra space between the dot and upper case M in .Make", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405499040", "createdAt": "2020-04-08T12:50:50Z", "author": {"login": "vietj"}, "path": "src/main/java/io/vertx/core/net/impl/haproxy/HAProxyMessageReader.java", "diffHunk": "@@ -14,22 +14,22 @@\n \n public class HAProxyMessageReader extends MessageToMessageDecoder<HAProxyMessage> {\n   private static final Logger log = LoggerFactory.getLogger(HAProxyMessageReader.class);\n-  private static final boolean hasProxyProtocolSupport;\n+  private static final boolean proxyProtocolCodecFound;\n \n   static {\n-    boolean proxyProtocolCheck = true;\n+    boolean proxyProtocolCodecCheck = true;\n     try {\n       Class.forName(\"io.netty.handler.codec.haproxy.HAProxyMessageDecoder\");\n     } catch (Throwable ex) {\n-      proxyProtocolCheck = false;\n+      proxyProtocolCodecCheck = false;\n     }\n-    hasProxyProtocolSupport = proxyProtocolCheck;\n+    proxyProtocolCodecFound = proxyProtocolCodecCheck;\n   }\n \n-  public static boolean hasProxyProtocolSupport(boolean requested) {\n-    if (requested && !hasProxyProtocolSupport)\n+  public static boolean canUseProxyProtocol(boolean requested) {\n+    if (requested && !proxyProtocolCodecFound)\n       log.warn(\"Proxy protocol support could not be enabled.Make sure that netty-codec-haproxy is included in your classpath\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5OTQ2Mjg1", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-389946285", "createdAt": "2020-04-08T12:56:05Z", "commit": {"oid": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo1NjowNlrOGCt5rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo1NjowNlrOGCt5rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwMjM4MQ==", "bodyText": "here we should use waitFor(2) and have two condition to end the test", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405502381", "createdAt": "2020-04-08T12:56:06Z", "author": {"login": "vietj"}, "path": "src/test/java/io/vertx/core/http/HttpTest.java", "diffHunk": "@@ -5913,4 +5914,88 @@ private void testClientRequestWithLargeBodyInSmallChunks(boolean chunked) throws\n     }));\n     await();\n   }\n+\n+\n+  @Test\n+  public void testProxyProtocolIllegalHeader() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5OTQ2NTI0", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-389946524", "createdAt": "2020-04-08T12:56:23Z", "commit": {"oid": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo1NjoyM1rOGCt6Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo1NjoyM1rOGCt6Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwMjU1MQ==", "bodyText": "use complete() here instead of testComplete()", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405502551", "createdAt": "2020-04-08T12:56:23Z", "author": {"login": "vietj"}, "path": "src/test/java/io/vertx/core/http/HttpTest.java", "diffHunk": "@@ -5913,4 +5914,88 @@ private void testClientRequestWithLargeBodyInSmallChunks(boolean chunked) throws\n     }));\n     await();\n   }\n+\n+\n+  @Test\n+  public void testProxyProtocolIllegalHeader() throws Exception {\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions()\n+      .setUseProxyProtocol(true))\n+      .exceptionHandler(exception -> {\n+        if(exception instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n+          testComplete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5OTQ2OTg4", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-389946988", "createdAt": "2020-04-08T12:56:59Z", "commit": {"oid": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo1Njo1OVrOGCt7wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo1Njo1OVrOGCt7wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwMjkxMw==", "bodyText": "add a complete() statement after assertTrue(event.failed()) to end the test and be sure that the assertion will be reported correctly to the test", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405502913", "createdAt": "2020-04-08T12:56:59Z", "author": {"login": "vietj"}, "path": "src/test/java/io/vertx/core/http/HttpTest.java", "diffHunk": "@@ -5913,4 +5914,88 @@ private void testClientRequestWithLargeBodyInSmallChunks(boolean chunked) throws\n     }));\n     await();\n   }\n+\n+\n+  @Test\n+  public void testProxyProtocolIllegalHeader() throws Exception {\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions()\n+      .setUseProxyProtocol(true))\n+      .exceptionHandler(exception -> {\n+        if(exception instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n+          testComplete();\n+      });\n+    server.requestHandler(req -> {\n+      fail(\"Should not be called\");\n+    });\n+\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {\n+        assertTrue(event.failed());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5OTQ3MTg5", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-389947189", "createdAt": "2020-04-08T12:57:15Z", "commit": {"oid": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo1NzoxNVrOGCt8aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo1NzoxNVrOGCt8aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwMzA4Mw==", "bodyText": "call stop() that in a finally block", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405503083", "createdAt": "2020-04-08T12:57:15Z", "author": {"login": "vietj"}, "path": "src/test/java/io/vertx/core/http/HttpTest.java", "diffHunk": "@@ -5913,4 +5914,88 @@ private void testClientRequestWithLargeBodyInSmallChunks(boolean chunked) throws\n     }));\n     await();\n   }\n+\n+\n+  @Test\n+  public void testProxyProtocolIllegalHeader() throws Exception {\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions()\n+      .setUseProxyProtocol(true))\n+      .exceptionHandler(exception -> {\n+        if(exception instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n+          testComplete();\n+      });\n+    server.requestHandler(req -> {\n+      fail(\"Should not be called\");\n+    });\n+\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {\n+        assertTrue(event.failed());\n+      })\n+      .end();\n+    await();\n+    proxy.stop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5OTQ4NDg2", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-389948486", "createdAt": "2020-04-08T12:58:56Z", "commit": {"oid": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo1ODo1N1rOGCuAww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo1ODo1N1rOGCuAww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwNDE5NQ==", "bodyText": "call proxy.stop() in a finally block", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405504195", "createdAt": "2020-04-08T12:58:57Z", "author": {"login": "vietj"}, "path": "src/test/java/io/vertx/core/http/HttpTest.java", "diffHunk": "@@ -5913,4 +5914,88 @@ private void testClientRequestWithLargeBodyInSmallChunks(boolean chunked) throws\n     }));\n     await();\n   }\n+\n+\n+  @Test\n+  public void testProxyProtocolIllegalHeader() throws Exception {\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions()\n+      .setUseProxyProtocol(true))\n+      .exceptionHandler(exception -> {\n+        if(exception instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n+          testComplete();\n+      });\n+    server.requestHandler(req -> {\n+      fail(\"Should not be called\");\n+    });\n+\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {\n+        assertTrue(event.failed());\n+      })\n+      .end();\n+    await();\n+    proxy.stop();\n+  }\n+\n+\n+  @Test\n+  public void testHAProxyProtocolVersion1() throws Exception {\n+    Buffer version1ProtocolHeader = HAProxy.createVersion1ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, version1ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().setUseProxyProtocol(true));\n+    server.requestHandler(req -> {\n+      assertEquals(req.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(req.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(req.remoteAddress().port(), 56324);\n+      assertEquals(req.localAddress().port(), 443);\n+      req.response().end();\n+    });\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {\n+        assertTrue(event.succeeded());\n+        testComplete();\n+      })\n+      .end();\n+    await();\n+    proxy.stop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5OTQ5NTM3", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-389949537", "createdAt": "2020-04-08T13:00:19Z", "commit": {"oid": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzowMDoxOVrOGCuESQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzowMDoxOVrOGCuESQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwNTA5Nw==", "bodyText": "use onSuccess(response -> { ... }) and avoid if/else block", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405505097", "createdAt": "2020-04-08T13:00:19Z", "author": {"login": "vietj"}, "path": "src/test/java/io/vertx/core/http/HttpTest.java", "diffHunk": "@@ -5913,4 +5914,88 @@ private void testClientRequestWithLargeBodyInSmallChunks(boolean chunked) throws\n     }));\n     await();\n   }\n+\n+\n+  @Test\n+  public void testProxyProtocolIllegalHeader() throws Exception {\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions()\n+      .setUseProxyProtocol(true))\n+      .exceptionHandler(exception -> {\n+        if(exception instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n+          testComplete();\n+      });\n+    server.requestHandler(req -> {\n+      fail(\"Should not be called\");\n+    });\n+\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {\n+        assertTrue(event.failed());\n+      })\n+      .end();\n+    await();\n+    proxy.stop();\n+  }\n+\n+\n+  @Test\n+  public void testHAProxyProtocolVersion1() throws Exception {\n+    Buffer version1ProtocolHeader = HAProxy.createVersion1ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, version1ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().setUseProxyProtocol(true));\n+    server.requestHandler(req -> {\n+      assertEquals(req.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(req.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(req.remoteAddress().port(), 56324);\n+      assertEquals(req.localAddress().port(), 443);\n+      req.response().end();\n+    });\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {\n+        assertTrue(event.succeeded());\n+        testComplete();\n+      })\n+      .end();\n+    await();\n+    proxy.stop();\n+  }\n+\n+  @Test\n+  public void testHaProxyProtocolVersion2() throws Exception {\n+    Buffer version2ProtocolHeader = HAProxy.createVersion2ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT,version2ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().setUseProxyProtocol(true));\n+    server.requestHandler(req -> {\n+      assertEquals(req.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(req.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(req.remoteAddress().port(), 56324);\n+      assertEquals(req.localAddress().port(), 443);\n+      req.response().end();\n+    });\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5OTQ5ODc0", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-389949874", "createdAt": "2020-04-08T13:00:44Z", "commit": {"oid": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzowMDo0NVrOGCuFdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzowMDo0NVrOGCuFdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwNTM5Ng==", "bodyText": "use onSuccess(event -> }) block", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405505396", "createdAt": "2020-04-08T13:00:45Z", "author": {"login": "vietj"}, "path": "src/test/java/io/vertx/core/http/HttpTest.java", "diffHunk": "@@ -5913,4 +5914,88 @@ private void testClientRequestWithLargeBodyInSmallChunks(boolean chunked) throws\n     }));\n     await();\n   }\n+\n+\n+  @Test\n+  public void testProxyProtocolIllegalHeader() throws Exception {\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions()\n+      .setUseProxyProtocol(true))\n+      .exceptionHandler(exception -> {\n+        if(exception instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n+          testComplete();\n+      });\n+    server.requestHandler(req -> {\n+      fail(\"Should not be called\");\n+    });\n+\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {\n+        assertTrue(event.failed());\n+      })\n+      .end();\n+    await();\n+    proxy.stop();\n+  }\n+\n+\n+  @Test\n+  public void testHAProxyProtocolVersion1() throws Exception {\n+    Buffer version1ProtocolHeader = HAProxy.createVersion1ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, version1ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().setUseProxyProtocol(true));\n+    server.requestHandler(req -> {\n+      assertEquals(req.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(req.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(req.remoteAddress().port(), 56324);\n+      assertEquals(req.localAddress().port(), 443);\n+      req.response().end();\n+    });\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5OTUwMDky", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-389950092", "createdAt": "2020-04-08T13:01:01Z", "commit": {"oid": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzowMTowMVrOGCuGIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzowMTowMVrOGCuGIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwNTU2OA==", "bodyText": "stop in a finally", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405505568", "createdAt": "2020-04-08T13:01:01Z", "author": {"login": "vietj"}, "path": "src/test/java/io/vertx/core/http/HttpTest.java", "diffHunk": "@@ -5913,4 +5914,88 @@ private void testClientRequestWithLargeBodyInSmallChunks(boolean chunked) throws\n     }));\n     await();\n   }\n+\n+\n+  @Test\n+  public void testProxyProtocolIllegalHeader() throws Exception {\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions()\n+      .setUseProxyProtocol(true))\n+      .exceptionHandler(exception -> {\n+        if(exception instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n+          testComplete();\n+      });\n+    server.requestHandler(req -> {\n+      fail(\"Should not be called\");\n+    });\n+\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {\n+        assertTrue(event.failed());\n+      })\n+      .end();\n+    await();\n+    proxy.stop();\n+  }\n+\n+\n+  @Test\n+  public void testHAProxyProtocolVersion1() throws Exception {\n+    Buffer version1ProtocolHeader = HAProxy.createVersion1ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, version1ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().setUseProxyProtocol(true));\n+    server.requestHandler(req -> {\n+      assertEquals(req.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(req.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(req.remoteAddress().port(), 56324);\n+      assertEquals(req.localAddress().port(), 443);\n+      req.response().end();\n+    });\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {\n+        assertTrue(event.succeeded());\n+        testComplete();\n+      })\n+      .end();\n+    await();\n+    proxy.stop();\n+  }\n+\n+  @Test\n+  public void testHaProxyProtocolVersion2() throws Exception {\n+    Buffer version2ProtocolHeader = HAProxy.createVersion2ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT,version2ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().setUseProxyProtocol(true));\n+    server.requestHandler(req -> {\n+      assertEquals(req.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(req.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(req.remoteAddress().port(), 56324);\n+      assertEquals(req.localAddress().port(), 443);\n+      req.response().end();\n+    });\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {\n+        if(event.failed())\n+          event.cause().printStackTrace();\n+        else {\n+          assertTrue(event.succeeded());\n+          testComplete();\n+        }\n+      })\n+      .end();\n+    await();\n+    proxy.stop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7"}, "originalPosition": 94}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5OTUwNTg5", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-389950589", "createdAt": "2020-04-08T13:01:37Z", "commit": {"oid": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzowMTozOFrOGCuHpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzowMTozOFrOGCuHpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwNTk1Nw==", "bodyText": "finally :)", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405505957", "createdAt": "2020-04-08T13:01:38Z", "author": {"login": "vietj"}, "path": "src/test/java/io/vertx/core/net/NetTest.java", "diffHunk": "@@ -3682,4 +3689,106 @@ public void testNetSocketHandlerFailureReportedToContextExceptionHandler() throw\n     await();\n   }\n \n+  @Test\n+  public void testHaProxyProtocolVersion1Support() throws Exception {\n+    Buffer version1ProtocolHeader = HAProxy.createVersion1ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(testAddress.host(), testAddress.port(), version1ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createNetServer(new NetServerOptions().setUseProxyProtocol(true));\n+    server.connectHandler(so -> {\n+      assertEquals(so.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(so.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(so.remoteAddress().port(), 56324);\n+      assertEquals(so.localAddress().port(), 443);\n+      testComplete();\n+    });\n+    startServer();\n+    client.connect(proxy.getPort(), proxy.getHost(), onSuccess(so -> {\n+      so.write(\"ping\");\n+      so.close();\n+    }));\n+    await();\n+    proxy.stop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5OTUwNzE1", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-389950715", "createdAt": "2020-04-08T13:01:47Z", "commit": {"oid": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzowMTo0OFrOGCuIFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzowMTo0OFrOGCuIFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwNjA3MA==", "bodyText": "finally clause", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405506070", "createdAt": "2020-04-08T13:01:48Z", "author": {"login": "vietj"}, "path": "src/test/java/io/vertx/core/net/NetTest.java", "diffHunk": "@@ -3682,4 +3689,106 @@ public void testNetSocketHandlerFailureReportedToContextExceptionHandler() throw\n     await();\n   }\n \n+  @Test\n+  public void testHaProxyProtocolVersion1Support() throws Exception {\n+    Buffer version1ProtocolHeader = HAProxy.createVersion1ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(testAddress.host(), testAddress.port(), version1ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createNetServer(new NetServerOptions().setUseProxyProtocol(true));\n+    server.connectHandler(so -> {\n+      assertEquals(so.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(so.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(so.remoteAddress().port(), 56324);\n+      assertEquals(so.localAddress().port(), 443);\n+      testComplete();\n+    });\n+    startServer();\n+    client.connect(proxy.getPort(), proxy.getHost(), onSuccess(so -> {\n+      so.write(\"ping\");\n+      so.close();\n+    }));\n+    await();\n+    proxy.stop();\n+  }\n+\n+  @Test\n+  public void testHaProxyProtocolVersion2Support() throws Exception {\n+    Buffer version2ProtocolHeader = HAProxy.createVersion2ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(testAddress.host(), testAddress.port(), version2ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createNetServer(new NetServerOptions().setUseProxyProtocol(true));\n+    server.connectHandler(so -> {\n+      assertEquals(so.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(so.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(so.remoteAddress().port(), 56324);\n+      assertEquals(so.localAddress().port(), 443);\n+      testComplete();\n+    });\n+    startServer();\n+    client.connect(proxy.getPort(), proxy.getHost(), onSuccess(so -> {\n+      so.write(\"ping\");\n+      so.close();\n+    }));\n+    await();\n+    proxy.stop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7"}, "originalPosition": 123}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5OTUwODg5", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-389950889", "createdAt": "2020-04-08T13:02:01Z", "commit": {"oid": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzowMjowMVrOGCuIrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzowMjowMVrOGCuIrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwNjIyMw==", "bodyText": "use onSuccess", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405506223", "createdAt": "2020-04-08T13:02:01Z", "author": {"login": "vietj"}, "path": "src/test/java/io/vertx/core/net/NetTest.java", "diffHunk": "@@ -3682,4 +3689,106 @@ public void testNetSocketHandlerFailureReportedToContextExceptionHandler() throw\n     await();\n   }\n \n+  @Test\n+  public void testHaProxyProtocolVersion1Support() throws Exception {\n+    Buffer version1ProtocolHeader = HAProxy.createVersion1ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(testAddress.host(), testAddress.port(), version1ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createNetServer(new NetServerOptions().setUseProxyProtocol(true));\n+    server.connectHandler(so -> {\n+      assertEquals(so.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(so.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(so.remoteAddress().port(), 56324);\n+      assertEquals(so.localAddress().port(), 443);\n+      testComplete();\n+    });\n+    startServer();\n+    client.connect(proxy.getPort(), proxy.getHost(), onSuccess(so -> {\n+      so.write(\"ping\");\n+      so.close();\n+    }));\n+    await();\n+    proxy.stop();\n+  }\n+\n+  @Test\n+  public void testHaProxyProtocolVersion2Support() throws Exception {\n+    Buffer version2ProtocolHeader = HAProxy.createVersion2ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(testAddress.host(), testAddress.port(), version2ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createNetServer(new NetServerOptions().setUseProxyProtocol(true));\n+    server.connectHandler(so -> {\n+      assertEquals(so.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(so.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(so.remoteAddress().port(), 56324);\n+      assertEquals(so.localAddress().port(), 443);\n+      testComplete();\n+    });\n+    startServer();\n+    client.connect(proxy.getPort(), proxy.getHost(), onSuccess(so -> {\n+      so.write(\"ping\");\n+      so.close();\n+    }));\n+    await();\n+    proxy.stop();\n+  }\n+\n+  @Test\n+  public void testConnectSSLWithHAProxy() throws Exception {\n+    Buffer version2ProtocolHeader = HAProxy.createVersion2ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(testAddress.host(), testAddress.port(), version2ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    NetServerOptions options = new NetServerOptions()\n+      .setPort(testAddress.port())\n+      .setHost(testAddress.host())\n+      .setSsl(true)\n+      .setKeyCertOptions(Cert.SERVER_JKS_ROOT_CA.get())\n+      .setUseProxyProtocol(true);\n+    server = vertx.createNetServer(options);\n+\n+    NetClientOptions clientOptions = new NetClientOptions()\n+      .setHostnameVerificationAlgorithm(\"HTTPS\")\n+      .setSsl(true)\n+      .setTrustOptions(Trust.SERVER_JKS_ROOT_CA.get());\n+    NetClient client = vertx.createNetClient(clientOptions);\n+    server.connectHandler(event -> {\n+      assertEquals(event.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(event.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(event.remoteAddress().port(), 56324);\n+      assertEquals(event.localAddress().port(), 443);\n+    });\n+\n+    startServer();\n+    client.connect(proxy.getPort(), proxy.getHost(), ar2 -> {\n+      assertTrue(ar2.succeeded());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7"}, "originalPosition": 155}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5OTUxNjYw", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-389951660", "createdAt": "2020-04-08T13:02:58Z", "commit": {"oid": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzowMjo1OFrOGCuLMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzowMjo1OFrOGCuLMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwNjg2NQ==", "bodyText": "instead of setting an exception handler + body handler , use\nresp.body().onComplete(onSuccess(body -> ...));", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405506865", "createdAt": "2020-04-08T13:02:58Z", "author": {"login": "vietj"}, "path": "src/test/java/io/vertx/it/HAProxyTest.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) 2011-2019 Contributors to the Eclipse Foundation\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0\n+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+ */\n+\n+package io.vertx.it;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpClient;\n+import io.vertx.test.core.VertxTestBase;\n+import org.junit.Test;\n+\n+import static io.vertx.core.http.HttpTestBase.DEFAULT_HTTP_HOST;\n+import static io.vertx.core.http.HttpTestBase.DEFAULT_HTTP_PORT;\n+\n+/**\n+ * @author <a href=\"mailto:dimitris.zenios@gmail.com\">Dimitris Zenios</a>\n+ */\n+public class HAProxyTest extends VertxTestBase {\n+  @Test\n+  public void testHttpWithoutHAProxySupport() {\n+    Vertx vertx = Vertx.vertx();\n+    try {\n+      vertx.createHttpServer().requestHandler(req -> {\n+        req.response().end(\"hello\");\n+      }).listen(DEFAULT_HTTP_PORT, DEFAULT_HTTP_HOST, onSuccess(s -> {\n+        HttpClient client = vertx.createHttpClient();\n+        client.get(DEFAULT_HTTP_PORT, DEFAULT_HTTP_HOST, \"/\", onSuccess(resp -> {\n+          resp.exceptionHandler(this::fail);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5OTUzNjA2", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-389953606", "createdAt": "2020-04-08T13:05:14Z", "commit": {"oid": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNzIzOTA2", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-390723906", "createdAt": "2020-04-09T11:52:35Z", "commit": {"oid": "fe36a69f60e3209dc12fa0a14153c2563dd8680a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMTo1MjozNVrOGDVcEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMTo1MjozNVrOGDVcEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1MDE2Mg==", "bodyText": "why getAndSet here instead of get() ? clearing the value will not remove the attribue", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r406150162", "createdAt": "2020-04-09T11:52:35Z", "author": {"login": "vietj"}, "path": "src/main/java/io/vertx/core/net/impl/ConnectionBase.java", "diffHunk": "@@ -479,7 +482,10 @@ public String remoteName() {\n   public SocketAddress remoteAddress() {\n     SocketAddress address = remoteAddress;\n     if (address == null) {\n-      java.net.SocketAddress addr = chctx.channel().remoteAddress();\n+      java.net.SocketAddress addr = chctx.channel().hasAttr(REMOTE_ADDRESS_OVERRIDE) ?\n+        chctx.channel().attr(REMOTE_ADDRESS_OVERRIDE).getAndSet(null) :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe36a69f60e3209dc12fa0a14153c2563dd8680a"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNzI3Nzg1", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-390727785", "createdAt": "2020-04-09T11:58:47Z", "commit": {"oid": "fe36a69f60e3209dc12fa0a14153c2563dd8680a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNzk3MzIy", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-390797322", "createdAt": "2020-04-09T13:35:30Z", "commit": {"oid": "5fe78c95baf1de8bee057217e6c690687e44f4b2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzozNTozMFrOGDY_gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzozNTozMFrOGDY_gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwODM4NQ==", "bodyText": "why do we need setSslHandshakeTimeout here ? we don't need it for this test", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r406208385", "createdAt": "2020-04-09T13:35:30Z", "author": {"login": "vietj"}, "path": "src/test/java/io/vertx/core/http/HttpTest.java", "diffHunk": "@@ -5992,7 +6005,29 @@ public void testHaProxyProtocolVersion2() throws Exception {\n       .end();\n     try {\n       await();\n-    }finally {\n+    } finally {\n+      proxy.stop();\n+    }\n+  }\n+\n+  @Test\n+  public void testHAProxyProtocolIdleTimeout() throws Exception {\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().\n+      setIdleTimeout(2).\n+      setSslHandshakeTimeout(2).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe78c95baf1de8bee057217e6c690687e44f4b2"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwODAyMDg3", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-390802087", "createdAt": "2020-04-09T13:41:00Z", "commit": {"oid": "b1efa43ca6257a364bd467935a5b20546cbc91de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzo0MTowMFrOGDZOXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzo0MTowMFrOGDZOXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMjE5MQ==", "bodyText": "use ${maven.version} instead", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r406212191", "createdAt": "2020-04-09T13:41:00Z", "author": {"login": "vietj"}, "path": "src/main/asciidoc/http.adoc", "diffHunk": "@@ -1803,6 +1803,29 @@ use the full URL specified in the request URI:\n {@link examples.HTTPExamples#example60}\n ----\n \n+=== Using HA PROXY protocol\n+\n+https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt[HA PROXY protocol] provides a convenient way to safely transport connection\n+information such as a client's address across multiple layers of NAT or TCP\n+proxies.\n+\n+HA PROXY protocol can be enabled by setting the option {@link io.vertx.core.http.HttpServerOptions#useProxyProtocol(boolean)}\n+and adding the following dependency in your classpath:\n+\n+[source,xml]\n+----\n+<dependency>\n+  <groupId>io.netty</groupId>\n+  <artifactId>netty-codec-haproxy</artifactId>\n+  <version>4.1.18.Final</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1efa43ca6257a364bd467935a5b20546cbc91de"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwODAyMjM4", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-390802238", "createdAt": "2020-04-09T13:41:09Z", "commit": {"oid": "b1efa43ca6257a364bd467935a5b20546cbc91de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzo0MTowOVrOGDZOzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzo0MTowOVrOGDZOzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMjMwMw==", "bodyText": "use ${maven.version} instead", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r406212303", "createdAt": "2020-04-09T13:41:09Z", "author": {"login": "vietj"}, "path": "src/main/asciidoc/net.adoc", "diffHunk": "@@ -770,3 +770,27 @@ Here's an example:\n \n The DNS resolution is always done on the proxy server, to achieve the functionality of a SOCKS4 client, it is necessary\n to resolve the DNS address locally.\n+\n+\n+=== Using HA PROXY protocol\n+\n+https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt[HA PROXY protocol] provides a convenient way to safely transport connection\n+information such as a client's address across multiple layers of NAT or TCP\n+proxies.\n+\n+HA PROXY protocol can be enabled by setting the option {@link io.vertx.core.http.NetServerOptions#useProxyProtocol(boolean)}\n+and adding the following dependency in your classpath:\n+\n+[source,xml]\n+----\n+<dependency>\n+  <groupId>io.netty</groupId>\n+  <artifactId>netty-codec-haproxy</artifactId>\n+  <version>4.1.18.Final</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1efa43ca6257a364bd467935a5b20546cbc91de"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwODAyNDU0", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-390802454", "createdAt": "2020-04-09T13:41:23Z", "commit": {"oid": "b1efa43ca6257a364bd467935a5b20546cbc91de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzo0MToyNFrOGDZPfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzo0MToyNFrOGDZPfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMjQ3Nw==", "bodyText": "to your classpath ?", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r406212477", "createdAt": "2020-04-09T13:41:24Z", "author": {"login": "vietj"}, "path": "src/main/asciidoc/net.adoc", "diffHunk": "@@ -770,3 +770,27 @@ Here's an example:\n \n The DNS resolution is always done on the proxy server, to achieve the functionality of a SOCKS4 client, it is necessary\n to resolve the DNS address locally.\n+\n+\n+=== Using HA PROXY protocol\n+\n+https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt[HA PROXY protocol] provides a convenient way to safely transport connection\n+information such as a client's address across multiple layers of NAT or TCP\n+proxies.\n+\n+HA PROXY protocol can be enabled by setting the option {@link io.vertx.core.http.NetServerOptions#useProxyProtocol(boolean)}\n+and adding the following dependency in your classpath:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1efa43ca6257a364bd467935a5b20546cbc91de"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwODAyNTYx", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-390802561", "createdAt": "2020-04-09T13:41:31Z", "commit": {"oid": "b1efa43ca6257a364bd467935a5b20546cbc91de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzo0MTozMlrOGDZP0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzo0MTozMlrOGDZP0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMjU2MQ==", "bodyText": "to your classpath ?", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r406212561", "createdAt": "2020-04-09T13:41:32Z", "author": {"login": "vietj"}, "path": "src/main/asciidoc/http.adoc", "diffHunk": "@@ -1803,6 +1803,29 @@ use the full URL specified in the request URI:\n {@link examples.HTTPExamples#example60}\n ----\n \n+=== Using HA PROXY protocol\n+\n+https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt[HA PROXY protocol] provides a convenient way to safely transport connection\n+information such as a client's address across multiple layers of NAT or TCP\n+proxies.\n+\n+HA PROXY protocol can be enabled by setting the option {@link io.vertx.core.http.HttpServerOptions#useProxyProtocol(boolean)}\n+and adding the following dependency in your classpath:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1efa43ca6257a364bd467935a5b20546cbc91de"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwODAzNzIw", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-390803720", "createdAt": "2020-04-09T13:42:49Z", "commit": {"oid": "b1efa43ca6257a364bd467935a5b20546cbc91de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzo0Mjo0OVrOGDZTbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzo0Mjo0OVrOGDZTbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMzQ4NQ==", "bodyText": "I think we should add:\nserver.requestHandler(request -> {\n  // Print the actual client address provided by the HA proxy protocol instead of the proxy address\n  System.out.println(request.remoteAddress());\n});", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r406213485", "createdAt": "2020-04-09T13:42:49Z", "author": {"login": "vietj"}, "path": "src/main/java/examples/HTTPExamples.java", "diffHunk": "@@ -918,6 +918,14 @@ public void example60(Vertx vertx) {\n \n   }\n \n+  public void example61(Vertx vertx) {\n+\n+    HttpServerOptions options = new HttpServerOptions()\n+      .setUseProxyProtocol(true);\n+\n+    HttpServer server = vertx.createHttpServer(options);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1efa43ca6257a364bd467935a5b20546cbc91de"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwODA1NDE5", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-390805419", "createdAt": "2020-04-09T13:44:52Z", "commit": {"oid": "b1efa43ca6257a364bd467935a5b20546cbc91de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzo0NDo1MlrOGDZYyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzo0NDo1MlrOGDZYyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxNDg1OQ==", "bodyText": "I think we should add:\nserver.connectHandler(so -> {\n  // Print the actual client address provided by the HA proxy protocol instead of the proxy address\n  System.out.println(so.remoteAddress());\n});", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r406214859", "createdAt": "2020-04-09T13:44:52Z", "author": {"login": "vietj"}, "path": "src/main/java/examples/NetExamples.java", "diffHunk": "@@ -598,6 +598,11 @@ public void example50(Vertx vertx) throws CertificateException {\n       .listen(8080);\n   }\n \n+  public void example51(Vertx vertx) {\n+    NetServerOptions options = new NetServerOptions().setUseProxyProtocol(true);\n+    NetServer server = vertx.createNetServer(options);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1efa43ca6257a364bd467935a5b20546cbc91de"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMDExMzU2", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-391011356", "createdAt": "2020-04-09T17:57:43Z", "commit": {"oid": "02a75a617fd172002bda696a230cb11aa9481b59"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzo1Nzo0M1rOGDjYuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzo1Nzo0M1rOGDjYuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3ODY4MA==", "bodyText": "Do we need to document localAddress as well? Just like we did for remoteAddress?", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r406378680", "createdAt": "2020-04-09T17:57:43Z", "author": {"login": "zenios"}, "path": "src/main/java/io/vertx/core/net/impl/ConnectionBase.java", "diffHunk": "@@ -491,7 +497,10 @@ public SocketAddress remoteAddress() {\n   public SocketAddress localAddress() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02a75a617fd172002bda696a230cb11aa9481b59"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bae540281c69579d5e6aed0170ccef0414e0cc9", "author": {"user": {"login": "zenios", "name": null}}, "url": "https://github.com/eclipse-vertx/vert.x/commit/9bae540281c69579d5e6aed0170ccef0414e0cc9", "committedDate": "2020-04-09T21:36:40Z", "message": "HAProxy protocol support\n\nSigned-off-by: Dimitris Zenios <dimitris.zenios@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7768d617d8363f6e691ca213aeffa032d32753a9", "author": {"user": {"login": "zenios", "name": null}}, "url": "https://github.com/eclipse-vertx/vert.x/commit/7768d617d8363f6e691ca213aeffa032d32753a9", "committedDate": "2020-04-10T10:46:01Z", "message": "1.Implement support for all HAProxy proxied protocols\n2.Added seperate settings for ha proxy idle timeout\n\nSigned-off-by: Dimitris Zenios <dimitris.zenios@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMzk0MTYw", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-391394160", "createdAt": "2020-04-10T11:22:27Z", "commit": {"oid": "7768d617d8363f6e691ca213aeffa032d32753a9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMzk5MzEy", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#pullrequestreview-391399312", "createdAt": "2020-04-10T11:37:42Z", "commit": {"oid": "7768d617d8363f6e691ca213aeffa032d32753a9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1749, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}