{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzNDczNTcw", "number": 3571, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwOTozMzo1MFrOEiCIag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwOTozNjoyMFrOEiCMSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MTIxOTYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwOTozMzo1MFrOHPrVBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMzoxMDowNFrOHPyxTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIwMDU4Mw==", "bodyText": "Shouldn't the list be returned instead?", "url": "https://github.com/eclipse-vertx/vert.x/pull/3571#discussion_r486200583", "createdAt": "2020-09-10T09:33:50Z", "author": {"login": "tsegismont"}, "path": "src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java", "diffHunk": "@@ -49,12 +47,30 @@\n       timerId = timeout != Long.MAX_VALUE ? context.owner().setTimer(timeout, tid -> timeout()) : null;\n     }\n \n-    boolean isWaiting() {\n-      return status.get() == Status.WAITING;\n-    }\n-\n     void timeout() {\n       if (status.compareAndSet(Status.WAITING, Status.TIMED_OUT)) {\n+        // Cleanup\n+        waitersMap.compute(lockName, (s, list) -> {\n+          if (list == null) {\n+            // Already removed by nextWaiter\n+            return null;\n+          } else {\n+            int idx = list.indexOf(LockWaiter.this);\n+            if (idx == -1) {\n+              // Already removed by nextWaiter\n+              return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9c7361867e9e0b61b169c01aa7393faf0a647a4"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMyMjUwOQ==", "bodyText": "right, good catch, I'll try adding a test for this", "url": "https://github.com/eclipse-vertx/vert.x/pull/3571#discussion_r486322509", "createdAt": "2020-09-10T13:10:04Z", "author": {"login": "vietj"}, "path": "src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java", "diffHunk": "@@ -49,12 +47,30 @@\n       timerId = timeout != Long.MAX_VALUE ? context.owner().setTimer(timeout, tid -> timeout()) : null;\n     }\n \n-    boolean isWaiting() {\n-      return status.get() == Status.WAITING;\n-    }\n-\n     void timeout() {\n       if (status.compareAndSet(Status.WAITING, Status.TIMED_OUT)) {\n+        // Cleanup\n+        waitersMap.compute(lockName, (s, list) -> {\n+          if (list == null) {\n+            // Already removed by nextWaiter\n+            return null;\n+          } else {\n+            int idx = list.indexOf(LockWaiter.this);\n+            if (idx == -1) {\n+              // Already removed by nextWaiter\n+              return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIwMDU4Mw=="}, "originalCommit": {"oid": "e9c7361867e9e0b61b169c01aa7393faf0a647a4"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MTIyOTUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwOTozNjoyMFrOHPrbHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMzoxMToyMFrOHPy03g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIwMjE0Mw==", "bodyText": "Could we be more aggressive and check if we can return null when there's no other waiter or a SingletonList when there's just one?", "url": "https://github.com/eclipse-vertx/vert.x/pull/3571#discussion_r486202143", "createdAt": "2020-09-10T09:36:20Z", "author": {"login": "tsegismont"}, "path": "src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java", "diffHunk": "@@ -49,12 +47,30 @@\n       timerId = timeout != Long.MAX_VALUE ? context.owner().setTimer(timeout, tid -> timeout()) : null;\n     }\n \n-    boolean isWaiting() {\n-      return status.get() == Status.WAITING;\n-    }\n-\n     void timeout() {\n       if (status.compareAndSet(Status.WAITING, Status.TIMED_OUT)) {\n+        // Cleanup\n+        waitersMap.compute(lockName, (s, list) -> {\n+          if (list == null) {\n+            // Already removed by nextWaiter\n+            return null;\n+          } else {\n+            int idx = list.indexOf(LockWaiter.this);\n+            if (idx == -1) {\n+              // Already removed by nextWaiter\n+              return null;\n+            }\n+            int size = list.size();\n+            ArrayList<LockWaiter> n = new ArrayList<>(size - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9c7361867e9e0b61b169c01aa7393faf0a647a4"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMyMzQyMg==", "bodyText": "yes we need to consider this case as it could be an actual one and leave an empty list in the map, I'll try to address this with a test", "url": "https://github.com/eclipse-vertx/vert.x/pull/3571#discussion_r486323422", "createdAt": "2020-09-10T13:11:20Z", "author": {"login": "vietj"}, "path": "src/main/java/io/vertx/core/shareddata/impl/LocalAsyncLocks.java", "diffHunk": "@@ -49,12 +47,30 @@\n       timerId = timeout != Long.MAX_VALUE ? context.owner().setTimer(timeout, tid -> timeout()) : null;\n     }\n \n-    boolean isWaiting() {\n-      return status.get() == Status.WAITING;\n-    }\n-\n     void timeout() {\n       if (status.compareAndSet(Status.WAITING, Status.TIMED_OUT)) {\n+        // Cleanup\n+        waitersMap.compute(lockName, (s, list) -> {\n+          if (list == null) {\n+            // Already removed by nextWaiter\n+            return null;\n+          } else {\n+            int idx = list.indexOf(LockWaiter.this);\n+            if (idx == -1) {\n+              // Already removed by nextWaiter\n+              return null;\n+            }\n+            int size = list.size();\n+            ArrayList<LockWaiter> n = new ArrayList<>(size - 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIwMjE0Mw=="}, "originalCommit": {"oid": "e9c7361867e9e0b61b169c01aa7393faf0a647a4"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4523, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}