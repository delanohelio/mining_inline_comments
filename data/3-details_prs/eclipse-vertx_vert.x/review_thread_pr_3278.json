{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyMDE4MzAz", "number": 3278, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMTowMTo1OVrODd_KBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMTowMTo1OVrODd_KBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzcwMDUzOnYy", "diffSide": "RIGHT", "path": "src/test/java/io/vertx/core/FutureTest.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMTowMTo1OVrOFm5oqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwNjoyMjoxMVrOFnPaug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMzNDUwNA==", "bodyText": "can you replace this check with event-loop thread instead of not being the junit thread ?", "url": "https://github.com/eclipse-vertx/vert.x/pull/3278#discussion_r376334504", "createdAt": "2020-02-07T11:01:59Z", "author": {"login": "vietj"}, "path": "src/test/java/io/vertx/core/FutureTest.java", "diffHunk": "@@ -1570,4 +1573,38 @@ public void testFromCompletionStageWithContext() {\n \n     await();\n   }\n+\n+  @Test\n+  public void testCompletedFuturesContext() {\n+    waitFor(4);\n+\n+    Thread testThread = Thread.currentThread();\n+    ContextInternal context = (ContextInternal) vertx.getOrCreateContext();\n+\n+    Future.succeededFuture().onSuccess(v -> {\n+      assertSame(testThread, Thread.currentThread());\n+      assertNull(Vertx.currentContext());\n+      complete();\n+    });\n+\n+    context.succeededFuture().onSuccess(v -> {\n+      assertNotSame(testThread, Thread.currentThread());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52cb285d46c44e0290db825d1221b6b05f4998df"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM0MDAxMw==", "bodyText": "Do you mean this?\n    context.succeededFuture().onSuccess(v -> {\n      assertNotSame(testThread, Thread.currentThread());\n      assertThat(Thread.currentThread(), is(instanceOf(VertxThread.class)));\n      assertSame(context, Vertx.currentContext());\n      complete();\n    });", "url": "https://github.com/eclipse-vertx/vert.x/pull/3278#discussion_r376340013", "createdAt": "2020-02-07T11:16:30Z", "author": {"login": "tsegismont"}, "path": "src/test/java/io/vertx/core/FutureTest.java", "diffHunk": "@@ -1570,4 +1573,38 @@ public void testFromCompletionStageWithContext() {\n \n     await();\n   }\n+\n+  @Test\n+  public void testCompletedFuturesContext() {\n+    waitFor(4);\n+\n+    Thread testThread = Thread.currentThread();\n+    ContextInternal context = (ContextInternal) vertx.getOrCreateContext();\n+\n+    Future.succeededFuture().onSuccess(v -> {\n+      assertSame(testThread, Thread.currentThread());\n+      assertNull(Vertx.currentContext());\n+      complete();\n+    });\n+\n+    context.succeededFuture().onSuccess(v -> {\n+      assertNotSame(testThread, Thread.currentThread());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMzNDUwNA=="}, "originalCommit": {"oid": "52cb285d46c44e0290db825d1221b6b05f4998df"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM4NzEwMA==", "bodyText": "or even better the thread of the context that is associated with the future (that you can latch before)", "url": "https://github.com/eclipse-vertx/vert.x/pull/3278#discussion_r376387100", "createdAt": "2020-02-07T13:24:38Z", "author": {"login": "vietj"}, "path": "src/test/java/io/vertx/core/FutureTest.java", "diffHunk": "@@ -1570,4 +1573,38 @@ public void testFromCompletionStageWithContext() {\n \n     await();\n   }\n+\n+  @Test\n+  public void testCompletedFuturesContext() {\n+    waitFor(4);\n+\n+    Thread testThread = Thread.currentThread();\n+    ContextInternal context = (ContextInternal) vertx.getOrCreateContext();\n+\n+    Future.succeededFuture().onSuccess(v -> {\n+      assertSame(testThread, Thread.currentThread());\n+      assertNull(Vertx.currentContext());\n+      complete();\n+    });\n+\n+    context.succeededFuture().onSuccess(v -> {\n+      assertNotSame(testThread, Thread.currentThread());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMzNDUwNA=="}, "originalCommit": {"oid": "52cb285d46c44e0290db825d1221b6b05f4998df"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM4Nzg1MQ==", "bodyText": "I think something like:\nctx.runOnContext(v -> {\n  Thread ctxThread = Thread.currentThread();\n  new Thread(() -> {\n    ctx.succeededFuture().onSuccess(v -> {\n      // Checks here\n    });\n  }).start();\n});", "url": "https://github.com/eclipse-vertx/vert.x/pull/3278#discussion_r376387851", "createdAt": "2020-02-07T13:26:22Z", "author": {"login": "vietj"}, "path": "src/test/java/io/vertx/core/FutureTest.java", "diffHunk": "@@ -1570,4 +1573,38 @@ public void testFromCompletionStageWithContext() {\n \n     await();\n   }\n+\n+  @Test\n+  public void testCompletedFuturesContext() {\n+    waitFor(4);\n+\n+    Thread testThread = Thread.currentThread();\n+    ContextInternal context = (ContextInternal) vertx.getOrCreateContext();\n+\n+    Future.succeededFuture().onSuccess(v -> {\n+      assertSame(testThread, Thread.currentThread());\n+      assertNull(Vertx.currentContext());\n+      complete();\n+    });\n+\n+    context.succeededFuture().onSuccess(v -> {\n+      assertNotSame(testThread, Thread.currentThread());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMzNDUwNA=="}, "originalCommit": {"oid": "52cb285d46c44e0290db825d1221b6b05f4998df"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxNTM3Mw==", "bodyText": "What do we want to verify here? That a standard context always operates on the same thread? I believe we could take this for granted here.", "url": "https://github.com/eclipse-vertx/vert.x/pull/3278#discussion_r376415373", "createdAt": "2020-02-07T14:23:38Z", "author": {"login": "tsegismont"}, "path": "src/test/java/io/vertx/core/FutureTest.java", "diffHunk": "@@ -1570,4 +1573,38 @@ public void testFromCompletionStageWithContext() {\n \n     await();\n   }\n+\n+  @Test\n+  public void testCompletedFuturesContext() {\n+    waitFor(4);\n+\n+    Thread testThread = Thread.currentThread();\n+    ContextInternal context = (ContextInternal) vertx.getOrCreateContext();\n+\n+    Future.succeededFuture().onSuccess(v -> {\n+      assertSame(testThread, Thread.currentThread());\n+      assertNull(Vertx.currentContext());\n+      complete();\n+    });\n+\n+    context.succeededFuture().onSuccess(v -> {\n+      assertNotSame(testThread, Thread.currentThread());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMzNDUwNA=="}, "originalCommit": {"oid": "52cb285d46c44e0290db825d1221b6b05f4998df"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY2MzY5MQ==", "bodyText": "this is what should be checked, given that this implementation is different from FutureImpl. I was taking for granted that this impl was bug free 2 days ago :-)", "url": "https://github.com/eclipse-vertx/vert.x/pull/3278#discussion_r376663691", "createdAt": "2020-02-08T00:11:27Z", "author": {"login": "vietj"}, "path": "src/test/java/io/vertx/core/FutureTest.java", "diffHunk": "@@ -1570,4 +1573,38 @@ public void testFromCompletionStageWithContext() {\n \n     await();\n   }\n+\n+  @Test\n+  public void testCompletedFuturesContext() {\n+    waitFor(4);\n+\n+    Thread testThread = Thread.currentThread();\n+    ContextInternal context = (ContextInternal) vertx.getOrCreateContext();\n+\n+    Future.succeededFuture().onSuccess(v -> {\n+      assertSame(testThread, Thread.currentThread());\n+      assertNull(Vertx.currentContext());\n+      complete();\n+    });\n+\n+    context.succeededFuture().onSuccess(v -> {\n+      assertNotSame(testThread, Thread.currentThread());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMzNDUwNA=="}, "originalCommit": {"oid": "52cb285d46c44e0290db825d1221b6b05f4998df"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5MTM4Ng==", "bodyText": "@vietj I've added some checks. PTAL", "url": "https://github.com/eclipse-vertx/vert.x/pull/3278#discussion_r376691386", "createdAt": "2020-02-08T06:22:11Z", "author": {"login": "tsegismont"}, "path": "src/test/java/io/vertx/core/FutureTest.java", "diffHunk": "@@ -1570,4 +1573,38 @@ public void testFromCompletionStageWithContext() {\n \n     await();\n   }\n+\n+  @Test\n+  public void testCompletedFuturesContext() {\n+    waitFor(4);\n+\n+    Thread testThread = Thread.currentThread();\n+    ContextInternal context = (ContextInternal) vertx.getOrCreateContext();\n+\n+    Future.succeededFuture().onSuccess(v -> {\n+      assertSame(testThread, Thread.currentThread());\n+      assertNull(Vertx.currentContext());\n+      complete();\n+    });\n+\n+    context.succeededFuture().onSuccess(v -> {\n+      assertNotSame(testThread, Thread.currentThread());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMzNDUwNA=="}, "originalCommit": {"oid": "52cb285d46c44e0290db825d1221b6b05f4998df"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4543, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}