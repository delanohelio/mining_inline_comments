{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NTc0ODA5", "number": 3534, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNzoxNDoyNFrOD364XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNzoxNDoyNFrOD364XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTYyOTczOnYy", "diffSide": "RIGHT", "path": "Kitodo/src/main/java/org/kitodo/production/forms/createprocess/TitleRecordLinkTab.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNzoxNDoyNVrOGOcoDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNzoxNDoyNVrOGOcoDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgwMjI1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                toolTip.add(label.orElse(rootElement.getType()) + \": \" + value);\n          \n          \n            \n                                toolTip.add(key + \": \" + value);", "url": "https://github.com/kitodo/kitodo-production/pull/3534#discussion_r417802253", "createdAt": "2020-04-30T07:14:25Z", "author": {"login": "Kathrin-Huber"}, "path": "Kitodo/src/main/java/org/kitodo/production/forms/createprocess/TitleRecordLinkTab.java", "diffHunk": "@@ -225,6 +233,47 @@ private void createInsertionPositionSelectionTreeRecursive(String positionPrefix\n         }\n     }\n \n+    /**\n+     * Determines the overlay text for a node of the tree.\n+     *\n+     * @param ruleset\n+     *            Ruleset of the process\n+     * @param linkedProcess\n+     *            Linked child process\n+     * @return text to be displayed\n+     * @throws IOException\n+     *             if the METS file cannot be read\n+     */\n+    private List<String> getToolTip(RulesetManagementInterface ruleset, Process linkedProcess) throws IOException {\n+\n+        Collection<String> summaryKeys = ruleset.getFunctionalKeys(FunctionalMetadata.DISPLAY_SUMMARY);\n+        List<String> toolTip = new ArrayList<>();\n+        if (!summaryKeys.isEmpty()) {\n+\n+            Workpiece workpiece = metsService.loadWorkpiece(processService.getMetadataFileUri(linkedProcess));\n+            IncludedStructuralElement rootElement = workpiece.getRootElement();\n+\n+            final String metadataLanguage = ServiceManager.getUserService().getCurrentUser().getMetadataLanguage();\n+            List<LanguageRange> priorityList = Locale.LanguageRange.parse(metadataLanguage);\n+\n+            for (String key : summaryKeys) {\n+                String value = MetadataEditor.getMetadataValue(rootElement, key);\n+\n+                if (Objects.nonNull(value)) {\n+                    Optional<String> label = ruleset.getTranslationForKey(rootElement.getType(), priorityList);\n+                    toolTip.add(label.orElse(rootElement.getType()) + \": \" + value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d8f5026cf8c3cd191b1d4d8ff659fbf45fb6cf1"}, "originalPosition": 101}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3972, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}