{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2OTYxMjU5", "number": 3374, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzo0OToxOVrODtioMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzo0OToxOVrODtioMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDc5ODU3OnYy", "diffSide": "RIGHT", "path": "Kitodo-Query-URL-Import/src/main/java/org/kitodo/queryurlimport/QueryURLImport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzo0OToxOVrOF_BiUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNzo0OToxOVrOF_fORw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyOTc3OA==", "bodyText": "How does the condition effect the execution of the concatenation?", "url": "https://github.com/kitodo/kitodo-production/pull/3374#discussion_r401629778", "createdAt": "2020-04-01T13:49:19Z", "author": {"login": "Kathrin-Huber"}, "path": "Kitodo-Query-URL-Import/src/main/java/org/kitodo/queryurlimport/QueryURLImport.java", "diffHunk": "@@ -130,17 +133,24 @@ public DataRecord getFullRecordById(String catalogId, String identifier) throws\n         if (searchFieldMapping.keySet().containsAll(searchFields.keySet())) {\n             // Query parameters for HTTP request\n             LinkedHashMap<String, String> queryParameters = new LinkedHashMap<>(parameters);\n-\n             // Search fields and terms of query\n-            LinkedHashMap<String, String> searchFieldMap = new LinkedHashMap<>();\n-            for (Map.Entry<String, String> entry : searchFields.entrySet()) {\n-                searchFieldMap.put(searchFieldMapping.get(entry.getKey()), entry.getValue());\n-            }\n+            LinkedHashMap<String, String> searchFieldMap = getSearchFieldMap(searchFields);\n+\n             try {\n                 URI queryURL = createQueryURI(queryParameters);\n-                String queryString = queryURL.toString();\n-                queryString = queryString + \"&startRecord=0&maximumRecords=\" + rows + \"&query=\"\n-                        + createSearchFieldString(searchFieldMap);\n+                String queryString = queryURL.toString() + \"&\";\n+                if (Objects.nonNull(interfaceType)) {\n+                    if (Objects.nonNull(interfaceType.getStartRecordString())) {\n+                        queryString = queryString + interfaceType.getStartRecordString() + equalsOperand + \"0&\";\n+                    }\n+                    if (Objects.nonNull(interfaceType.getMaxRecordsString())) {\n+                        queryString = queryString + interfaceType.getMaxRecordsString() + equalsOperand + rows + \"&\";\n+                    }\n+                    if (Objects.nonNull(interfaceType.getQueryString())) {\n+                        queryString = queryString + equalsOperand;\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13a84df6dd63ec760eeb3b410d90261234dcc891"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjExNjE2Nw==", "bodyText": "Well spotted, this is one place where I forgot to add the return value of interfaceType.getQueryString() itself to complete query string. Fixed it now.", "url": "https://github.com/kitodo/kitodo-production/pull/3374#discussion_r402116167", "createdAt": "2020-04-02T07:49:19Z", "author": {"login": "solth"}, "path": "Kitodo-Query-URL-Import/src/main/java/org/kitodo/queryurlimport/QueryURLImport.java", "diffHunk": "@@ -130,17 +133,24 @@ public DataRecord getFullRecordById(String catalogId, String identifier) throws\n         if (searchFieldMapping.keySet().containsAll(searchFields.keySet())) {\n             // Query parameters for HTTP request\n             LinkedHashMap<String, String> queryParameters = new LinkedHashMap<>(parameters);\n-\n             // Search fields and terms of query\n-            LinkedHashMap<String, String> searchFieldMap = new LinkedHashMap<>();\n-            for (Map.Entry<String, String> entry : searchFields.entrySet()) {\n-                searchFieldMap.put(searchFieldMapping.get(entry.getKey()), entry.getValue());\n-            }\n+            LinkedHashMap<String, String> searchFieldMap = getSearchFieldMap(searchFields);\n+\n             try {\n                 URI queryURL = createQueryURI(queryParameters);\n-                String queryString = queryURL.toString();\n-                queryString = queryString + \"&startRecord=0&maximumRecords=\" + rows + \"&query=\"\n-                        + createSearchFieldString(searchFieldMap);\n+                String queryString = queryURL.toString() + \"&\";\n+                if (Objects.nonNull(interfaceType)) {\n+                    if (Objects.nonNull(interfaceType.getStartRecordString())) {\n+                        queryString = queryString + interfaceType.getStartRecordString() + equalsOperand + \"0&\";\n+                    }\n+                    if (Objects.nonNull(interfaceType.getMaxRecordsString())) {\n+                        queryString = queryString + interfaceType.getMaxRecordsString() + equalsOperand + rows + \"&\";\n+                    }\n+                    if (Objects.nonNull(interfaceType.getQueryString())) {\n+                        queryString = queryString + equalsOperand;\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyOTc3OA=="}, "originalCommit": {"oid": "13a84df6dd63ec760eeb3b410d90261234dcc891"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4035, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}