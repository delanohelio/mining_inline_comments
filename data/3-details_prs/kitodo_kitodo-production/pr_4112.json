{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMTY1NjEz", "number": 4112, "title": "Implement variable replacer for copy data", "bodyText": "integrates variable replacer for #3368\nfollow-up PR to #4111", "createdAt": "2020-12-01T09:40:01Z", "url": "https://github.com/kitodo/kitodo-production/pull/4112", "merged": true, "mergeCommit": {"oid": "178499f45efe5f3515f84106e92c7be15415f76f"}, "closed": true, "closedAt": "2020-12-14T11:15:27Z", "author": {"login": "Kathrin-Huber"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgS6nyAH2gAyNTMwMTY1NjEzOmI3NmI1NThhZjc1MmU1NDdhMDNkNWQ0N2JkOTI5NWU2ZjA0NWVkNzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdlIHo2gFqTU1MDEwNDk1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b76b558af752e547a03d5d47bd9295e6f045ed77", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/b76b558af752e547a03d5d47bd9295e6f045ed77", "committedDate": "2020-11-26T13:25:08Z", "message": "add script for addData"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e40812d2c451cf62e10ad1789c32007a52a38a6", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/1e40812d2c451cf62e10ad1789c32007a52a38a6", "committedDate": "2020-11-26T13:25:08Z", "message": "fix issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8526bbb642a699cd26ccf3f8e87e1f48daef7eb6", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/8526bbb642a699cd26ccf3f8e87e1f48daef7eb6", "committedDate": "2020-11-30T13:11:13Z", "message": "add deleteDataScript"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3a512a437d6abd828cb5bde45081ddc67c7b70d", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/b3a512a437d6abd828cb5bde45081ddc67c7b70d", "committedDate": "2020-11-30T13:11:14Z", "message": "fix codacy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "766b0cb8bc40217b5aa5ea5f2597aaa704afecc5", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/766b0cb8bc40217b5aa5ea5f2597aaa704afecc5", "committedDate": "2020-11-30T13:33:53Z", "message": "fix testSyntax"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5901bd0d9df87dfb7694b4f1db5e4b609ba48ad0", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/5901bd0d9df87dfb7694b4f1db5e4b609ba48ad0", "committedDate": "2020-11-30T13:34:31Z", "message": "add overwrite functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c02aa3db2f194419afac352efb7bdb2d118020d", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/4c02aa3db2f194419afac352efb7bdb2d118020d", "committedDate": "2020-12-01T09:56:10Z", "message": "fix codacy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad864c7a9b05e6dfc772e24dfc143308d3d7cff3", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/ad864c7a9b05e6dfc772e24dfc143308d3d7cff3", "committedDate": "2020-12-01T09:56:44Z", "message": "integrate variable replacer"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "403fef5f5b6bc8c6d059329e76705303aab50bd0", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/403fef5f5b6bc8c6d059329e76705303aab50bd0", "committedDate": "2020-12-01T09:38:03Z", "message": "integrate variable replacer"}, "afterCommit": {"oid": "ad864c7a9b05e6dfc772e24dfc143308d3d7cff3", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/ad864c7a9b05e6dfc772e24dfc143308d3d7cff3", "committedDate": "2020-12-01T09:56:44Z", "message": "integrate variable replacer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5051a92a386d6638e6d1760e9e4ff99c6a7faf2", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/b5051a92a386d6638e6d1760e9e4ff99c6a7faf2", "committedDate": "2020-12-02T09:13:40Z", "message": "fix codacy"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aca0a1ae358a9436f5375c83a9f67d952422c112", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/aca0a1ae358a9436f5375c83a9f67d952422c112", "committedDate": "2020-12-01T10:14:52Z", "message": "fix codacy"}, "afterCommit": {"oid": "b5051a92a386d6638e6d1760e9e4ff99c6a7faf2", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/b5051a92a386d6638e6d1760e9e4ff99c6a7faf2", "committedDate": "2020-12-02T09:13:40Z", "message": "fix codacy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fd979e97727c2848fecad71b5441832ab56c9a3", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/0fd979e97727c2848fecad71b5441832ab56c9a3", "committedDate": "2020-12-03T08:01:49Z", "message": "add tests for whitespace and multiple scripts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5b028798351bd395cef97340599c9b37571826c5", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/5b028798351bd395cef97340599c9b37571826c5", "committedDate": "2020-12-02T11:15:05Z", "message": "add tests for whitespace and multiple scripts"}, "afterCommit": {"oid": "0fd979e97727c2848fecad71b5441832ab56c9a3", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/0fd979e97727c2848fecad71b5441832ab56c9a3", "committedDate": "2020-12-03T08:01:49Z", "message": "add tests for whitespace and multiple scripts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3OTQwMjkw", "url": "https://github.com/kitodo/kitodo-production/pull/4112#pullrequestreview-547940290", "createdAt": "2020-12-09T08:26:17Z", "commit": {"oid": "0fd979e97727c2848fecad71b5441832ab56c9a3"}, "state": "COMMENTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwODoyNjoxOFrOICILXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwODo1ODoyMVrOICJeMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEwMjA0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import org.kitodo.production.services.ServiceManager;", "url": "https://github.com/kitodo/kitodo-production/pull/4112#discussion_r539102045", "createdAt": "2020-12-09T08:26:18Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/metadata/copier/DataCopier.java", "diffHunk": "@@ -19,6 +19,7 @@\n import org.apache.commons.configuration.ConfigurationException;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n+import org.kitodo.production.services.ServiceManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fd979e97727c2848fecad71b5441832ab56c9a3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEwMzAwNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import org.kitodo.production.services.data.ImportService;\n          \n          \n            \n            import org.primefaces.PrimeFaces;", "url": "https://github.com/kitodo/kitodo-production/pull/4112#discussion_r539103007", "createdAt": "2020-12-09T08:27:37Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/metadata/copier/DataCopyrule.java", "diffHunk": "@@ -11,79 +11,34 @@\n \n package org.kitodo.production.metadata.copier;\n \n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Collection;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n import org.apache.commons.configuration.ConfigurationException;\n+import org.kitodo.api.MdSec;\n+import org.kitodo.api.Metadata;\n+import org.kitodo.api.MetadataEntry;\n+import org.kitodo.api.MetadataGroup;\n+import org.kitodo.api.dataformat.IncludedStructuralElement;\n+import org.kitodo.api.dataformat.Workpiece;\n+import org.kitodo.data.elasticsearch.exceptions.CustomResponseException;\n+import org.kitodo.data.exceptions.DataException;\n import org.kitodo.exceptions.MetadataException;\n+import org.kitodo.production.helper.Helper;\n+import org.kitodo.production.services.ServiceManager;\n+import org.kitodo.production.services.data.ImportService;\n+import org.primefaces.PrimeFaces;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fd979e97727c2848fecad71b5441832ab56c9a3"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEwMzMyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import org.kitodo.production.helper.Helper;", "url": "https://github.com/kitodo/kitodo-production/pull/4112#discussion_r539103327", "createdAt": "2020-12-09T08:28:08Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/metadata/copier/DataCopyrule.java", "diffHunk": "@@ -11,79 +11,34 @@\n \n package org.kitodo.production.metadata.copier;\n \n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Collection;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n import org.apache.commons.configuration.ConfigurationException;\n+import org.kitodo.api.MdSec;\n+import org.kitodo.api.Metadata;\n+import org.kitodo.api.MetadataEntry;\n+import org.kitodo.api.MetadataGroup;\n+import org.kitodo.api.dataformat.IncludedStructuralElement;\n+import org.kitodo.api.dataformat.Workpiece;\n+import org.kitodo.data.elasticsearch.exceptions.CustomResponseException;\n+import org.kitodo.data.exceptions.DataException;\n import org.kitodo.exceptions.MetadataException;\n+import org.kitodo.production.helper.Helper;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fd979e97727c2848fecad71b5441832ab56c9a3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEwNDEwOQ==", "bodyText": "Use Helper or logger instead of System.out.println", "url": "https://github.com/kitodo/kitodo-production/pull/4112#discussion_r539104109", "createdAt": "2020-12-09T08:29:26Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/metadata/copier/DataCopyrule.java", "diffHunk": "@@ -92,44 +47,27 @@ public static DataCopyrule createFor(List<String> arguments) throws Configuratio\n      * @param data\n      *            data to apply yourself on\n      */\n-    protected abstract void apply(CopierData data);\n-\n-    /**\n-     * The function getMinObject must return the maximal number of objects\n-     * required by the rule to work as expected. If it returns 0, the\n-     * setObjects() method will not be called.\n-     *\n-     * @return the maximal number of objects required by the rule\n-     */\n-    protected abstract int getMaxObjects();\n+    public void apply(CopierData data) {\n+        Workpiece workpiece = data.getDigitalDocument().getWorkpiece();\n+        List<IncludedStructuralElement> allIncludedStructuralElements = workpiece.getAllIncludedStructuralElements();\n \n-    /**\n-     * The function getMinObject must return the minimal number of objects\n-     * required by the rule to work as expected.\n-     *\n-     * @return the minimal number of objects required by the rule\n-     */\n-    protected abstract int getMinObjects();\n+        for (IncludedStructuralElement child : allIncludedStructuralElements) {\n+            Collection<Metadata> metadata = child.getMetadata();\n+            MdSec domain = null;\n+            MetadataEntry metadataEntry = new MetadataEntry();\n+            metadataEntry.setKey(command.get(0));\n+            metadataEntry.setValue(command.get(2));\n+            metadataEntry.setDomain(domain);\n+            child.getMetadata().add(metadataEntry);\n \n-    /**\n-     * The method is called to pass the rule its objects. The list\n-     * passed is reliable to the restrictions defined by getMinObjects() and\n-     * getMaxObjects().\n-     *\n-     * @param objects\n-     *            a list of objects to be used by the rule\n-     * @throws ConfigurationException\n-     *             may be thrown if one of the objects cannot be processed\n-     */\n-    protected abstract void setObjects(List<String> objects) throws ConfigurationException;\n+            try (OutputStream out = ServiceManager.getFileService()\n+                    .write(ServiceManager.getFileService().getMetadataFilePath(data.getProcess()))) {\n+                ServiceManager.getMetsService().save(workpiece, out);\n+                ServiceManager.getProcessService().saveToIndex(data.getProcess(), false);\n+            } catch (IOException | CustomResponseException | DataException e) {\n+                System.out.println(\"log me\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fd979e97727c2848fecad71b5441832ab56c9a3"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEwNDYyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Collection<Metadata> metadata = child.getMetadata();\n          \n      \n    \n    \n  \n\nmetadata is never used", "url": "https://github.com/kitodo/kitodo-production/pull/4112#discussion_r539104623", "createdAt": "2020-12-09T08:30:11Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/metadata/copier/DataCopyrule.java", "diffHunk": "@@ -92,44 +47,27 @@ public static DataCopyrule createFor(List<String> arguments) throws Configuratio\n      * @param data\n      *            data to apply yourself on\n      */\n-    protected abstract void apply(CopierData data);\n-\n-    /**\n-     * The function getMinObject must return the maximal number of objects\n-     * required by the rule to work as expected. If it returns 0, the\n-     * setObjects() method will not be called.\n-     *\n-     * @return the maximal number of objects required by the rule\n-     */\n-    protected abstract int getMaxObjects();\n+    public void apply(CopierData data) {\n+        Workpiece workpiece = data.getDigitalDocument().getWorkpiece();\n+        List<IncludedStructuralElement> allIncludedStructuralElements = workpiece.getAllIncludedStructuralElements();\n \n-    /**\n-     * The function getMinObject must return the minimal number of objects\n-     * required by the rule to work as expected.\n-     *\n-     * @return the minimal number of objects required by the rule\n-     */\n-    protected abstract int getMinObjects();\n+        for (IncludedStructuralElement child : allIncludedStructuralElements) {\n+            Collection<Metadata> metadata = child.getMetadata();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fd979e97727c2848fecad71b5441832ab56c9a3"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEwNTY3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import org.kitodo.api.MetadataGroup;", "url": "https://github.com/kitodo/kitodo-production/pull/4112#discussion_r539105674", "createdAt": "2020-12-09T08:31:55Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/metadata/copier/DataCopyrule.java", "diffHunk": "@@ -11,79 +11,34 @@\n \n package org.kitodo.production.metadata.copier;\n \n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Collection;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n import org.apache.commons.configuration.ConfigurationException;\n+import org.kitodo.api.MdSec;\n+import org.kitodo.api.Metadata;\n+import org.kitodo.api.MetadataEntry;\n+import org.kitodo.api.MetadataGroup;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fd979e97727c2848fecad71b5441832ab56c9a3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEwNjQ1MQ==", "bodyText": "Even though it should probably never happen I would always recommend checking if a list is empty before retrieving its first element.", "url": "https://github.com/kitodo/kitodo-production/pull/4112#discussion_r539106451", "createdAt": "2020-12-09T08:33:13Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/command/AddDataScript.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * (c) Kitodo. Key to digital objects e. V. <contact@kitodo.org>\n+ *\n+ * This file is part of the Kitodo project.\n+ *\n+ * It is licensed under GNU General Public License version 3 or later.\n+ *\n+ * For the full copyright and license information, please read the\n+ * GPL3-License.txt file that was distributed with this source code.\n+ */\n+\n+package org.kitodo.production.services.command;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.kitodo.api.MdSec;\n+import org.kitodo.api.Metadata;\n+import org.kitodo.api.MetadataEntry;\n+import org.kitodo.api.dataformat.IncludedStructuralElement;\n+import org.kitodo.api.dataformat.Workpiece;\n+import org.kitodo.data.database.beans.Process;\n+import org.kitodo.data.elasticsearch.exceptions.CustomResponseException;\n+import org.kitodo.data.exceptions.DataException;\n+import org.kitodo.production.helper.metadata.legacytypeimplementations.LegacyMetsModsDigitalDocumentHelper;\n+import org.kitodo.production.services.ServiceManager;\n+\n+public class AddDataScript extends EditDataScript {\n+\n+    private static final Logger logger = LogManager.getLogger(AddDataScript.class);\n+\n+    /**\n+     * Executes the given script on the given file for the given process.\n+     * @param metadataFile the file to edit\n+     * @param process the related process\n+     * @param metadataScript the script to execute\n+     */\n+    public void executeScript(LegacyMetsModsDigitalDocumentHelper metadataFile, Process process,\n+            MetadataScript metadataScript) {\n+        Workpiece workpiece = metadataFile.getWorkpiece();\n+        List<IncludedStructuralElement> allIncludedStructuralElements = workpiece.getAllIncludedStructuralElements();\n+\n+        IncludedStructuralElement child = allIncludedStructuralElements.get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fd979e97727c2848fecad71b5441832ab56c9a3"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEwNjcxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import java.io.IOException;\n          \n          \n            \n            import java.io.OutputStream;", "url": "https://github.com/kitodo/kitodo-production/pull/4112#discussion_r539106713", "createdAt": "2020-12-09T08:33:38Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/command/AddDataScript.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * (c) Kitodo. Key to digital objects e. V. <contact@kitodo.org>\n+ *\n+ * This file is part of the Kitodo project.\n+ *\n+ * It is licensed under GNU General Public License version 3 or later.\n+ *\n+ * For the full copyright and license information, please read the\n+ * GPL3-License.txt file that was distributed with this source code.\n+ */\n+\n+package org.kitodo.production.services.command;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fd979e97727c2848fecad71b5441832ab56c9a3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEwNjgxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import java.util.Objects;", "url": "https://github.com/kitodo/kitodo-production/pull/4112#discussion_r539106819", "createdAt": "2020-12-09T08:33:48Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/command/AddDataScript.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * (c) Kitodo. Key to digital objects e. V. <contact@kitodo.org>\n+ *\n+ * This file is part of the Kitodo project.\n+ *\n+ * It is licensed under GNU General Public License version 3 or later.\n+ *\n+ * For the full copyright and license information, please read the\n+ * GPL3-License.txt file that was distributed with this source code.\n+ */\n+\n+package org.kitodo.production.services.command;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fd979e97727c2848fecad71b5441832ab56c9a3"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEwNzExNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Logger logger = LogManager.getLogger(AddDataScript.class);\n          \n      \n    \n    \n  \n\nLogger is never used", "url": "https://github.com/kitodo/kitodo-production/pull/4112#discussion_r539107117", "createdAt": "2020-12-09T08:34:18Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/command/AddDataScript.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * (c) Kitodo. Key to digital objects e. V. <contact@kitodo.org>\n+ *\n+ * This file is part of the Kitodo project.\n+ *\n+ * It is licensed under GNU General Public License version 3 or later.\n+ *\n+ * For the full copyright and license information, please read the\n+ * GPL3-License.txt file that was distributed with this source code.\n+ */\n+\n+package org.kitodo.production.services.command;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.kitodo.api.MdSec;\n+import org.kitodo.api.Metadata;\n+import org.kitodo.api.MetadataEntry;\n+import org.kitodo.api.dataformat.IncludedStructuralElement;\n+import org.kitodo.api.dataformat.Workpiece;\n+import org.kitodo.data.database.beans.Process;\n+import org.kitodo.data.elasticsearch.exceptions.CustomResponseException;\n+import org.kitodo.data.exceptions.DataException;\n+import org.kitodo.production.helper.metadata.legacytypeimplementations.LegacyMetsModsDigitalDocumentHelper;\n+import org.kitodo.production.services.ServiceManager;\n+\n+public class AddDataScript extends EditDataScript {\n+\n+    private static final Logger logger = LogManager.getLogger(AddDataScript.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fd979e97727c2848fecad71b5441832ab56c9a3"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEwNzYwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import org.apache.logging.log4j.LogManager;\n          \n          \n            \n            import org.apache.logging.log4j.Logger;\n          \n      \n    \n    \n  \n\nThese imports can be removed because the variable Logger, for which they are required, is never used.", "url": "https://github.com/kitodo/kitodo-production/pull/4112#discussion_r539107601", "createdAt": "2020-12-09T08:35:01Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/command/AddDataScript.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * (c) Kitodo. Key to digital objects e. V. <contact@kitodo.org>\n+ *\n+ * This file is part of the Kitodo project.\n+ *\n+ * It is licensed under GNU General Public License version 3 or later.\n+ *\n+ * For the full copyright and license information, please read the\n+ * GPL3-License.txt file that was distributed with this source code.\n+ */\n+\n+package org.kitodo.production.services.command;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fd979e97727c2848fecad71b5441832ab56c9a3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEwNzc4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import org.kitodo.data.elasticsearch.exceptions.CustomResponseException;\n          \n          \n            \n            import org.kitodo.data.exceptions.DataException;", "url": "https://github.com/kitodo/kitodo-production/pull/4112#discussion_r539107787", "createdAt": "2020-12-09T08:35:19Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/command/AddDataScript.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * (c) Kitodo. Key to digital objects e. V. <contact@kitodo.org>\n+ *\n+ * This file is part of the Kitodo project.\n+ *\n+ * It is licensed under GNU General Public License version 3 or later.\n+ *\n+ * For the full copyright and license information, please read the\n+ * GPL3-License.txt file that was distributed with this source code.\n+ */\n+\n+package org.kitodo.production.services.command;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.kitodo.api.MdSec;\n+import org.kitodo.api.Metadata;\n+import org.kitodo.api.MetadataEntry;\n+import org.kitodo.api.dataformat.IncludedStructuralElement;\n+import org.kitodo.api.dataformat.Workpiece;\n+import org.kitodo.data.database.beans.Process;\n+import org.kitodo.data.elasticsearch.exceptions.CustomResponseException;\n+import org.kitodo.data.exceptions.DataException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fd979e97727c2848fecad71b5441832ab56c9a3"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEwNzg1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import org.kitodo.production.services.ServiceManager;", "url": "https://github.com/kitodo/kitodo-production/pull/4112#discussion_r539107850", "createdAt": "2020-12-09T08:35:29Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/command/AddDataScript.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * (c) Kitodo. Key to digital objects e. V. <contact@kitodo.org>\n+ *\n+ * This file is part of the Kitodo project.\n+ *\n+ * It is licensed under GNU General Public License version 3 or later.\n+ *\n+ * For the full copyright and license information, please read the\n+ * GPL3-License.txt file that was distributed with this source code.\n+ */\n+\n+package org.kitodo.production.services.command;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.kitodo.api.MdSec;\n+import org.kitodo.api.Metadata;\n+import org.kitodo.api.MetadataEntry;\n+import org.kitodo.api.dataformat.IncludedStructuralElement;\n+import org.kitodo.api.dataformat.Workpiece;\n+import org.kitodo.data.database.beans.Process;\n+import org.kitodo.data.elasticsearch.exceptions.CustomResponseException;\n+import org.kitodo.data.exceptions.DataException;\n+import org.kitodo.production.helper.metadata.legacytypeimplementations.LegacyMetsModsDigitalDocumentHelper;\n+import org.kitodo.production.services.ServiceManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fd979e97727c2848fecad71b5441832ab56c9a3"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEwODg4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<Metadata> metadataCollectionCopy = new ArrayList<>();\n          \n          \n            \n                    metadataCollectionCopy.addAll(metadataCollection);\n          \n          \n            \n                    List<Metadata> metadataCollectionCopy = new ArrayList<>(metadataCollection);", "url": "https://github.com/kitodo/kitodo-production/pull/4112#discussion_r539108883", "createdAt": "2020-12-09T08:37:05Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/command/DeleteDataScript.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * (c) Kitodo. Key to digital objects e. V. <contact@kitodo.org>\n+ *\n+ * This file is part of the Kitodo project.\n+ *\n+ * It is licensed under GNU General Public License version 3 or later.\n+ *\n+ * For the full copyright and license information, please read the\n+ * GPL3-License.txt file that was distributed with this source code.\n+ */\n+\n+package org.kitodo.production.services.command;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.kitodo.api.Metadata;\n+import org.kitodo.api.MetadataEntry;\n+import org.kitodo.api.dataformat.IncludedStructuralElement;\n+import org.kitodo.api.dataformat.Workpiece;\n+import org.kitodo.data.database.beans.Process;\n+import org.kitodo.production.helper.metadata.legacytypeimplementations.LegacyMetsModsDigitalDocumentHelper;\n+\n+public class DeleteDataScript extends EditDataScript {\n+\n+    /**\n+     * Executes the given script on the given file for the given process.\n+     * @param metadataFile the file to edit\n+     * @param process the related process\n+     * @param metadataScript the script to execute\n+     */\n+    public void executeScript(LegacyMetsModsDigitalDocumentHelper metadataFile, Process process,\n+                               MetadataScript metadataScript) {\n+        Workpiece workpiece = metadataFile.getWorkpiece();\n+        List<IncludedStructuralElement> allIncludedStructuralElements = workpiece.getAllIncludedStructuralElements();\n+\n+        IncludedStructuralElement child = allIncludedStructuralElements.get(0);\n+        Collection<Metadata> metadataCollection = child.getMetadata();\n+\n+        generateValueForMetadataScript(metadataScript, metadataCollection, process, metadataFile);\n+\n+        List<Metadata> metadataCollectionCopy = new ArrayList<>();\n+        metadataCollectionCopy.addAll(metadataCollection);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fd979e97727c2848fecad71b5441832ab56c9a3"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTExNTI2Ng==", "bodyText": "I am not sure if this will work. AFAIK only CDI managed beans have access to the FacesContext that is needed to render messages in the frontend pages. (same goes for the other usages of Helper.setMessage or Helper.setErrorMessage in this class.)", "url": "https://github.com/kitodo/kitodo-production/pull/4112#discussion_r539115266", "createdAt": "2020-12-09T08:46:42Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/command/KitodoScriptService.java", "diffHunk": "@@ -181,6 +187,44 @@ private boolean executeScript(List<Process> processes, String script) throws Dat\n         return true;\n     }\n \n+    private void deleteData(List<Process> processes, String script) {\n+        String currentProcessTitle = null;\n+        try {\n+            script = script.replaceFirst(\"\\\\s*action:deleteData\\\\s+(.*?)[\\r\\n\\\\s]*\", \"$1\");\n+            DeleteDataScript deleteDataScript = new DeleteDataScript();\n+            for (Process process : processes) {\n+                currentProcessTitle = process.getTitle();\n+                LegacyMetsModsDigitalDocumentHelper metadataFile = ServiceManager.getProcessService()\n+                        .readMetadataFile(process);\n+                deleteDataScript.process(metadataFile, process, script);\n+                ServiceManager.getMetsService().saveWorkpiece(metadataFile.getWorkpiece(),\n+                        ServiceManager.getProcessService().getMetadataFileUri(process));\n+                Helper.setMessage(\"deleteDataOk\", currentProcessTitle);\n+            }\n+        } catch (IOException e) {\n+            Helper.setErrorMessage(\"addDataError\", currentProcessTitle + \":\" + e.getMessage(), logger, e);\n+        }\n+    }\n+\n+    private void overwriteData(List<Process> processes, String script) {\n+        String currentProcessTitle = null;\n+        try {\n+            script = script.replaceFirst(\"\\\\s*action:overwriteData\\\\s+(.*?)[\\r\\n\\\\s]*\", \"$1\");\n+            OverwriteDataScript overwriteDataScript = new OverwriteDataScript();\n+            for (Process process : processes) {\n+                currentProcessTitle = process.getTitle();\n+                LegacyMetsModsDigitalDocumentHelper metadataFile = ServiceManager.getProcessService()\n+                        .readMetadataFile(process);\n+                overwriteDataScript.process(metadataFile, process, script);\n+                ServiceManager.getMetsService().saveWorkpiece(metadataFile.getWorkpiece(),\n+                        ServiceManager.getProcessService().getMetadataFileUri(process));\n+                Helper.setMessage(\"overwriteDataOk\", currentProcessTitle);\n+            }\n+        } catch (IOException e) {\n+            Helper.setErrorMessage(\"overwriteDataError\", currentProcessTitle + \":\" + e.getMessage(), logger, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fd979e97727c2848fecad71b5441832ab56c9a3"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEyMzI1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import java.util.Objects;", "url": "https://github.com/kitodo/kitodo-production/pull/4112#discussion_r539123251", "createdAt": "2020-12-09T08:58:21Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/command/OverwriteDataScript.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * (c) Kitodo. Key to digital objects e. V. <contact@kitodo.org>\n+ *\n+ * This file is part of the Kitodo project.\n+ *\n+ * It is licensed under GNU General Public License version 3 or later.\n+ *\n+ * For the full copyright and license information, please read the\n+ * GPL3-License.txt file that was distributed with this source code.\n+ */\n+\n+package org.kitodo.production.services.command;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fd979e97727c2848fecad71b5441832ab56c9a3"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3OTY4MDk4", "url": "https://github.com/kitodo/kitodo-production/pull/4112#pullrequestreview-547968098", "createdAt": "2020-12-09T09:02:34Z", "commit": {"oid": "0fd979e97727c2848fecad71b5441832ab56c9a3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwOTowMjozNFrOICJqJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwOTowMjozNFrOICJqJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEyNjMxMQ==", "bodyText": "Same as above. I think you should check if allIncludedStructuralElements contains an element before \"getting\" it.", "url": "https://github.com/kitodo/kitodo-production/pull/4112#discussion_r539126311", "createdAt": "2020-12-09T09:02:34Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/command/OverwriteDataScript.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * (c) Kitodo. Key to digital objects e. V. <contact@kitodo.org>\n+ *\n+ * This file is part of the Kitodo project.\n+ *\n+ * It is licensed under GNU General Public License version 3 or later.\n+ *\n+ * For the full copyright and license information, please read the\n+ * GPL3-License.txt file that was distributed with this source code.\n+ */\n+\n+package org.kitodo.production.services.command;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.kitodo.api.Metadata;\n+import org.kitodo.api.MetadataEntry;\n+import org.kitodo.api.MetadataGroup;\n+import org.kitodo.api.dataformat.IncludedStructuralElement;\n+import org.kitodo.api.dataformat.Workpiece;\n+import org.kitodo.data.database.beans.Process;\n+import org.kitodo.production.helper.metadata.legacytypeimplementations.LegacyMetsModsDigitalDocumentHelper;\n+\n+public class OverwriteDataScript extends EditDataScript {\n+\n+    @Override\n+    public void executeScript(LegacyMetsModsDigitalDocumentHelper metadataFile, Process process,\n+            MetadataScript metadataScript) {\n+        Workpiece workpiece = metadataFile.getWorkpiece();\n+        List<IncludedStructuralElement> allIncludedStructuralElements = workpiece\n+                .getAllIncludedStructuralElements();\n+\n+        IncludedStructuralElement child = allIncludedStructuralElements.get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fd979e97727c2848fecad71b5441832ab56c9a3"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6660bcafff834ce971664f7e8e584ea3792935b0", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/6660bcafff834ce971664f7e8e584ea3792935b0", "committedDate": "2020-12-11T13:39:26Z", "message": "add review"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a5913bafb405558e3a4dd1e485bbce7dcdcf39d1", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/a5913bafb405558e3a4dd1e485bbce7dcdcf39d1", "committedDate": "2020-12-11T13:37:53Z", "message": "add review"}, "afterCommit": {"oid": "6660bcafff834ce971664f7e8e584ea3792935b0", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/6660bcafff834ce971664f7e8e584ea3792935b0", "committedDate": "2020-12-11T13:39:26Z", "message": "add review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwMTA0OTUy", "url": "https://github.com/kitodo/kitodo-production/pull/4112#pullrequestreview-550104952", "createdAt": "2020-12-11T13:40:01Z", "commit": {"oid": "a5913bafb405558e3a4dd1e485bbce7dcdcf39d1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2798, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}