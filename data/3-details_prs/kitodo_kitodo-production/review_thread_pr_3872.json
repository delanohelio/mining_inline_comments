{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MjkzNzE5", "number": 3872, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOTowMDo1NlrOETKZRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOTowMDo1NlrOETKZRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTI4NzExOnYy", "diffSide": "RIGHT", "path": "Kitodo/src/main/java/org/kitodo/production/services/data/FilterService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOTowMDo1NlrOG4vUbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOTozMzoxMVrOG4wfvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0ODcxOA==", "bodyText": "parseInt is throwing an NumberFormatException if tempId does not contain a parsable integer. See https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html#parseInt-java.lang.String-\nMaybe you should catch this exception and do not add this value to the list in this case?", "url": "https://github.com/kitodo/kitodo-production/pull/3872#discussion_r462148718", "createdAt": "2020-07-29T09:00:56Z", "author": {"login": "henning-gerhardt"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/data/FilterService.java", "diffHunk": "@@ -837,8 +837,10 @@ private QueryBuilder filterAutomaticTasks(String filter, ObjectType objectType)\n         Set<Integer> ids = new HashSet<>();\n         List<String> stringIds = getFilterValuesFromFilterString(filter, filterString);\n         for (String tempId : stringIds) {\n-            Integer id = Integer.parseInt(tempId);\n-            ids.add(id);\n+            if (!tempId.isEmpty()) {\n+                Integer id = Integer.parseInt(tempId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13613721ea4b9417f59090e911919603fc03925e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1OTQxOA==", "bodyText": "AFAIK in Java the idiom of \"look before you leap\" is preferred over willingly risking and catching exceptions, which would probably be a more \"pythonic\" way to deal with exceptions (see https://docs.python.org/3.5/glossary.html#term-eafp).\nSo I guess you are right that different potential reasons for NumberFormatExceptions should be prevented, but I would prefer doing that by explicitly testing whether a String is numeric or not instead of willingly provoking an Exception in Java.\nPlease check if you can agree with my updated changes.", "url": "https://github.com/kitodo/kitodo-production/pull/3872#discussion_r462159418", "createdAt": "2020-07-29T09:18:55Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/data/FilterService.java", "diffHunk": "@@ -837,8 +837,10 @@ private QueryBuilder filterAutomaticTasks(String filter, ObjectType objectType)\n         Set<Integer> ids = new HashSet<>();\n         List<String> stringIds = getFilterValuesFromFilterString(filter, filterString);\n         for (String tempId : stringIds) {\n-            Integer id = Integer.parseInt(tempId);\n-            ids.add(id);\n+            if (!tempId.isEmpty()) {\n+                Integer id = Integer.parseInt(tempId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0ODcxOA=="}, "originalCommit": {"oid": "13613721ea4b9417f59090e911919603fc03925e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2Nzk5Ng==", "bodyText": "Your last change (from !tempId.isEmpty() to !tempId.isEmpty() && StringUtils.isNumeric(tempId)) is ok for me.", "url": "https://github.com/kitodo/kitodo-production/pull/3872#discussion_r462167996", "createdAt": "2020-07-29T09:33:11Z", "author": {"login": "henning-gerhardt"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/data/FilterService.java", "diffHunk": "@@ -837,8 +837,10 @@ private QueryBuilder filterAutomaticTasks(String filter, ObjectType objectType)\n         Set<Integer> ids = new HashSet<>();\n         List<String> stringIds = getFilterValuesFromFilterString(filter, filterString);\n         for (String tempId : stringIds) {\n-            Integer id = Integer.parseInt(tempId);\n-            ids.add(id);\n+            if (!tempId.isEmpty()) {\n+                Integer id = Integer.parseInt(tempId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0ODcxOA=="}, "originalCommit": {"oid": "13613721ea4b9417f59090e911919603fc03925e"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3956, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}