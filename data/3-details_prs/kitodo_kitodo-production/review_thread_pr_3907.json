{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzOTcxMjk3", "number": 3907, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMDo1NDoyOFrOEYbVFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMDo1NDoyOFrOEYbVFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDQ5MDQ3OnYy", "diffSide": "RIGHT", "path": "Kitodo/src/main/java/org/kitodo/production/migration/TaskComparer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMDo1NDoyOVrOHAwZ6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMDo1NDoyOVrOHAwZ6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU1NTExMw==", "bodyText": "The last if condition and the return true; at the end can be simplified to\nreturn firstTask.isBatchStep() == secondTask.isBatchStep();", "url": "https://github.com/kitodo/kitodo-production/pull/3907#discussion_r470555113", "createdAt": "2020-08-14T10:54:29Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/migration/TaskComparer.java", "diffHunk": "@@ -11,55 +11,57 @@\n \n package org.kitodo.production.migration;\n \n-import java.util.Comparator;\n import java.util.Objects;\n \n import org.kitodo.data.database.beans.Task;\n \n-public class TaskComparator implements Comparator<Task> {\n+public class TaskComparer {\n \n-    @Override\n-    public int compare(Task firstTask, Task secondTask) {\n+    /**\n+     * Compares two tasks, if they are equal for migration purposes.\n+     * @return true, if they are equal, false if not\n+     */\n+    public boolean isEqual(Task firstTask, Task secondTask) {\n         if (Objects.isNull(firstTask) || Objects.isNull(secondTask)) {\n-            return 1;\n+            return false;\n         }\n         if (Objects.isNull(firstTask.getTitle()) ? Objects.nonNull(secondTask.getTitle())\n                 : !firstTask.getTitle().equals(secondTask.getTitle())) {\n-            return 1;\n+            return false;\n         }\n         if (Objects.isNull(firstTask.getOrdering()) ? Objects.nonNull(secondTask.getOrdering())\n                 : !firstTask.getOrdering().equals(secondTask.getOrdering())) {\n-            return 1;\n+            return false;\n         }\n         if (firstTask.isTypeAutomatic() != secondTask.isTypeAutomatic()) {\n-            return 1;\n+            return false;\n         }\n         if (firstTask.isTypeMetadata() != secondTask.isTypeMetadata()) {\n-            return 1;\n+            return false;\n         }\n         if (firstTask.isTypeImagesRead() != secondTask.isTypeImagesRead()) {\n-            return 1;\n+            return false;\n         }\n         if (firstTask.isTypeImagesWrite() != secondTask.isTypeImagesWrite()) {\n-            return 1;\n+            return false;\n         }\n         if (firstTask.isTypeExportDMS() != secondTask.isTypeExportDMS()) {\n-            return 1;\n+            return false;\n         }\n         if (firstTask.isTypeAcceptClose() != secondTask.isTypeAcceptClose()) {\n-            return 1;\n+            return false;\n         }\n         if (firstTask.isTypeCloseVerify() != secondTask.isTypeCloseVerify()) {\n-            return 1;\n+            return false;\n         }\n         if (Objects.isNull(firstTask.getScriptPath()) ? Objects.nonNull(secondTask.getScriptPath())\n                 : !firstTask.getScriptPath().equals(secondTask.getScriptPath())) {\n-            return 1;\n+            return false;\n         }\n         if (firstTask.isBatchStep() != secondTask.isBatchStep()) {\n-            return 1;\n+            return false;\n         }\n-        return 0;\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b981c9e3b63a5ed7aba1050fe4bd41c38ccc1b1a"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3894, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}