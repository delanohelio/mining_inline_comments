{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1OTM2MzIx", "number": 3921, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOTowNjoyMVrOEY9hFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOTowNzoyNlrOEY9ikg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NjA5MTc1OnYy", "diffSide": "RIGHT", "path": "Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOTowNjoyMVrOHBgg9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOTowNjoyMVrOHBgg9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM0MzM0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .collect(Collectors.toList());\n          \n          \n            \n                    mediaUnits.sort(Comparator.comparing(MediaUnit::getOrder));\n          \n          \n            \n                            .sorted(Comparator.comparing(MediaUnit::getOrder)).collect(Collectors.toList());", "url": "https://github.com/kitodo/kitodo-production/pull/3921#discussion_r471343349", "createdAt": "2020-08-17T09:06:21Z", "author": {"login": "solth"}, "path": "Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java", "diffHunk": "@@ -180,42 +178,41 @@ public boolean equals(Object o) {\n     }\n \n     /**\n-     * Recursively search for all logical elements.\n+     * Returns all included structural elements of the root element of the\n+     * workpiece as a flat list. The list isn\u2019t backed by the included\n+     * structural elements, which means that insertions and deletions in the\n+     * list would not change the included structural elements. Therefore a list\n+     * that cannot be modified is returned.\n      *\n-     * @return list of all logical elements\n+     * @return all included structural elements as an unmodifiable list\n      */\n     public List<IncludedStructuralElement> getAllIncludedStructuralElements() {\n-        List<IncludedStructuralElement> includedStructuralElements = new LinkedList<>();\n-        includedStructuralElements.add(rootElement);\n-        includedStructuralElements.addAll(getAllIncludedStructuralElementsRecursive(rootElement));\n-        return includedStructuralElements;\n-    }\n-\n-    private List<IncludedStructuralElement> getAllIncludedStructuralElementsRecursive(IncludedStructuralElement parent) {\n-        List<IncludedStructuralElement> includedStructuralElements = new LinkedList<>(parent.getChildren());\n-        for (IncludedStructuralElement child : parent.getChildren()) {\n-            if (Objects.nonNull(child)) {\n-                includedStructuralElements.addAll(getAllIncludedStructuralElementsRecursive(child));\n-            }\n-        }\n-        return includedStructuralElements;\n+        return Collections.unmodifiableList(treeStream(rootElement).collect(Collectors.toList()));\n     }\n \n     /**\n-     * Recursively search for all media units with type \"page\".\n+     * Returns all media units of the media unit of the workpiece with type\n+     * \"page\" sorted by their {@code order} as a flat list. The list isn\u2019t\n+     * backed by the media units, which means that insertions and deletions in\n+     * the list would not change the media units. Therefore a list that cannot\n+     * be modified is returned.\n      *\n-     * @return list of all media units with type \"page\", sorted by their \"ORDER\" attribute.\n+     * @return all media units with type \"page\", sorted by their {@code order}\n      */\n-    public List<MediaUnit> getAllMediaUnitsSorted() {\n-        List<MediaUnit> mediaUnits = getAllMediaUnits();\n+    public List<MediaUnit> getAllMediaUnitsFilteredByTypePageAndSorted() {\n+        List<MediaUnit> mediaUnits = treeStream(mediaUnit).filter(m -> Objects.equals(m.getType(), MediaUnit.TYPE_PAGE))\n+                .collect(Collectors.toList());\n         mediaUnits.sort(Comparator.comparing(MediaUnit::getOrder));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d8b075cdcc9544e299acd769b22e90f9c2068bf"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NjA5NTU0OnYy", "diffSide": "RIGHT", "path": "Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOTowNzoyNlrOHBgjPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOTowNzoyNlrOHBgjPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM0MzkzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Stream.concat(Stream.of((T) tree), tree.getChildren().stream().flatMap(child -> treeStream(child)));\n          \n          \n            \n                    return Stream.concat(Stream.of((T) tree), tree.getChildren().stream().flatMap(Workpiece::treeStream));", "url": "https://github.com/kitodo/kitodo-production/pull/3921#discussion_r471343934", "createdAt": "2020-08-17T09:07:26Z", "author": {"login": "solth"}, "path": "Kitodo-API/src/main/java/org/kitodo/api/dataformat/Workpiece.java", "diffHunk": "@@ -239,4 +236,16 @@ public boolean equals(Object o) {\n         }\n         return allMediaUnits;\n     }\n+\n+    /**\n+     * Generates a stream of nodes from structure tree.\n+     *\n+     * @param tree\n+     *            starting node\n+     * @return all nodes as stream\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T extends Parent<T>> Stream<T> treeStream(Parent<T> tree) {\n+        return Stream.concat(Stream.of((T) tree), tree.getChildren().stream().flatMap(child -> treeStream(child)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d8b075cdcc9544e299acd769b22e90f9c2068bf"}, "originalPosition": 104}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3903, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}