{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxMjk3Mzg5", "number": 3793, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo0MzoxMVrOEK7V_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNDowNDowM1rOEMF7rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODkzNTAyOnYy", "diffSide": "RIGHT", "path": "Kitodo-DataManagement/src/main/java/org/kitodo/data/elasticsearch/index/type/ProcessType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo0MzoxMVrOGsQCkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo0MzoxMVrOGsQCkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1MzMzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    properties = process.getWorkpieces();\n          \n          \n            \n                    for (Property property : properties) {\n          \n          \n            \n                    for (Property property : process.getWorkpieces()) {", "url": "https://github.com/kitodo/kitodo-production/pull/3793#discussion_r449053330", "createdAt": "2020-07-02T14:43:11Z", "author": {"login": "solth"}, "path": "Kitodo-DataManagement/src/main/java/org/kitodo/data/elasticsearch/index/type/ProcessType.java", "diffHunk": "@@ -57,14 +59,35 @@\n         jsonObject.put(ProcessTypeField.HAS_CHILDREN.getKey(), process.getChildren().size() > 0);\n         jsonObject.put(ProcessTypeField.PARENT_ID.getKey(), processParentId);\n         jsonObject.put(ProcessTypeField.TASKS.getKey(), addObjectRelation(process.getTasks(), true));\n-        jsonObject.put(ProcessTypeField.PROPERTIES.getKey(), addObjectRelation(process.getProperties(), true));\n-        jsonObject.put(ProcessTypeField.TEMPLATES.getKey(), addObjectRelation(process.getTemplates()));\n-        jsonObject.put(ProcessTypeField.WORKPIECES.getKey(), addObjectRelation(process.getWorkpieces()));\n         jsonObject.put(ProcessTypeField.METADATA.getKey(), process.getMetadata());\n+        jsonObject.put(ProcessTypeField.PROPERTIES.getKey(), getProperties(process));\n         jsonObject.put(ProcessTypeField.BASE_TYPE.getKey(), process.getBaseType());\n         return jsonObject;\n     }\n \n+    private List<Map<String, String>> getProperties(Process process) {\n+        List<Property> properties = process.getProperties();\n+        List<Map<String, String>> propertiesForIndex = new ArrayList<>();\n+        for (Property property : properties) {\n+            HashMap<String, String> propertyMap = new HashMap<>();\n+            propertyMap.put(property.getTitle(), property.getValue());\n+            propertiesForIndex.add(propertyMap);\n+        }\n+        properties = process.getTemplates();\n+        for (Property property : properties) {\n+            HashMap<String, String> propertyMap = new HashMap<>();\n+            propertyMap.put(property.getTitle(), property.getValue());\n+            propertiesForIndex.add(propertyMap);\n+        }\n+        properties = process.getWorkpieces();\n+        for (Property property : properties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abc721898ce8e20e7e5b6f0e19848531a4e3b1c3"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODkzNjg5OnYy", "diffSide": "RIGHT", "path": "Kitodo-DataManagement/src/main/java/org/kitodo/data/elasticsearch/index/type/ProcessType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo0Mzo0MFrOGsQDyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo0Mzo0MFrOGsQDyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1MzY0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    properties = process.getTemplates();\n          \n          \n            \n                    for (Property property : properties) {\n          \n          \n            \n                    for (Property property : process.getTemplates()) {", "url": "https://github.com/kitodo/kitodo-production/pull/3793#discussion_r449053640", "createdAt": "2020-07-02T14:43:40Z", "author": {"login": "solth"}, "path": "Kitodo-DataManagement/src/main/java/org/kitodo/data/elasticsearch/index/type/ProcessType.java", "diffHunk": "@@ -57,14 +59,35 @@\n         jsonObject.put(ProcessTypeField.HAS_CHILDREN.getKey(), process.getChildren().size() > 0);\n         jsonObject.put(ProcessTypeField.PARENT_ID.getKey(), processParentId);\n         jsonObject.put(ProcessTypeField.TASKS.getKey(), addObjectRelation(process.getTasks(), true));\n-        jsonObject.put(ProcessTypeField.PROPERTIES.getKey(), addObjectRelation(process.getProperties(), true));\n-        jsonObject.put(ProcessTypeField.TEMPLATES.getKey(), addObjectRelation(process.getTemplates()));\n-        jsonObject.put(ProcessTypeField.WORKPIECES.getKey(), addObjectRelation(process.getWorkpieces()));\n         jsonObject.put(ProcessTypeField.METADATA.getKey(), process.getMetadata());\n+        jsonObject.put(ProcessTypeField.PROPERTIES.getKey(), getProperties(process));\n         jsonObject.put(ProcessTypeField.BASE_TYPE.getKey(), process.getBaseType());\n         return jsonObject;\n     }\n \n+    private List<Map<String, String>> getProperties(Process process) {\n+        List<Property> properties = process.getProperties();\n+        List<Map<String, String>> propertiesForIndex = new ArrayList<>();\n+        for (Property property : properties) {\n+            HashMap<String, String> propertyMap = new HashMap<>();\n+            propertyMap.put(property.getTitle(), property.getValue());\n+            propertiesForIndex.add(propertyMap);\n+        }\n+        properties = process.getTemplates();\n+        for (Property property : properties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abc721898ce8e20e7e5b6f0e19848531a4e3b1c3"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODkzOTI0OnYy", "diffSide": "RIGHT", "path": "Kitodo-DataManagement/src/main/java/org/kitodo/data/elasticsearch/index/type/ProcessType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo0NDoxN1rOGsQFUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo0NDoxN1rOGsQFUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1NDAzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<Property> properties = process.getProperties();\n          \n          \n            \n                    List<Map<String, String>> propertiesForIndex = new ArrayList<>();\n          \n          \n            \n                    for (Property property : properties) {\n          \n          \n            \n                    List<Map<String, String>> propertiesForIndex = new ArrayList<>();\n          \n          \n            \n                    for (Property property : process.getProperties()) {", "url": "https://github.com/kitodo/kitodo-production/pull/3793#discussion_r449054035", "createdAt": "2020-07-02T14:44:17Z", "author": {"login": "solth"}, "path": "Kitodo-DataManagement/src/main/java/org/kitodo/data/elasticsearch/index/type/ProcessType.java", "diffHunk": "@@ -57,14 +59,35 @@\n         jsonObject.put(ProcessTypeField.HAS_CHILDREN.getKey(), process.getChildren().size() > 0);\n         jsonObject.put(ProcessTypeField.PARENT_ID.getKey(), processParentId);\n         jsonObject.put(ProcessTypeField.TASKS.getKey(), addObjectRelation(process.getTasks(), true));\n-        jsonObject.put(ProcessTypeField.PROPERTIES.getKey(), addObjectRelation(process.getProperties(), true));\n-        jsonObject.put(ProcessTypeField.TEMPLATES.getKey(), addObjectRelation(process.getTemplates()));\n-        jsonObject.put(ProcessTypeField.WORKPIECES.getKey(), addObjectRelation(process.getWorkpieces()));\n         jsonObject.put(ProcessTypeField.METADATA.getKey(), process.getMetadata());\n+        jsonObject.put(ProcessTypeField.PROPERTIES.getKey(), getProperties(process));\n         jsonObject.put(ProcessTypeField.BASE_TYPE.getKey(), process.getBaseType());\n         return jsonObject;\n     }\n \n+    private List<Map<String, String>> getProperties(Process process) {\n+        List<Property> properties = process.getProperties();\n+        List<Map<String, String>> propertiesForIndex = new ArrayList<>();\n+        for (Property property : properties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abc721898ce8e20e7e5b6f0e19848531a4e3b1c3"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODk2MDU2OnYy", "diffSide": "RIGHT", "path": "Kitodo/src/main/java/org/kitodo/production/services/data/ProcessService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo0OToyM1rOGsQSxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo0OToyM1rOGsQSxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1NzQ3Ng==", "bodyText": "Why do we need to keep this method if it always returns null?\nAlso, I think this will provoke a NullPointerException in FilterService.filterProcessProperty:899, where the result of calling findProcessProperty is passed to FilterService.createSetQuery.", "url": "https://github.com/kitodo/kitodo-production/pull/3793#discussion_r449057476", "createdAt": "2020-07-02T14:49:23Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/data/ProcessService.java", "diffHunk": "@@ -665,9 +602,8 @@ public QueryBuilder getQueryProjectId(Integer projectId) {\n      *            true or false\n      * @return list of process JSONObjects\n      */\n-    public List<Map<String, Object>> findByProcessProperty(String title, String value, boolean contains)\n-            throws DataException {\n-        return findByProperty(title, value, \"process\", \"properties.id\", contains);\n+    public List<Map<String, Object>> findByProcessProperty(String title, String value, boolean contains) {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abc721898ce8e20e7e5b6f0e19848531a4e3b1c3"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODk2MTEyOnYy", "diffSide": "RIGHT", "path": "Kitodo/src/main/java/org/kitodo/production/services/data/ProcessService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo0OTozM1rOGsQTLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo0OTozM1rOGsQTLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1NzU4Mw==", "bodyText": "See above.", "url": "https://github.com/kitodo/kitodo-production/pull/3793#discussion_r449057583", "createdAt": "2020-07-02T14:49:33Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/data/ProcessService.java", "diffHunk": "@@ -681,9 +617,8 @@ public QueryBuilder getQueryProjectId(Integer projectId) {\n      *            true or false\n      * @return list of process JSONObjects\n      */\n-    public List<Map<String, Object>> findByTemplateProperty(String title, String value, boolean contains)\n-            throws DataException {\n-        return findByProperty(title, value, \"template\", \"templates.id\", contains);\n+    public List<Map<String, Object>> findByTemplateProperty(String title, String value, boolean contains) {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abc721898ce8e20e7e5b6f0e19848531a4e3b1c3"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODk2MjgwOnYy", "diffSide": "RIGHT", "path": "Kitodo/src/main/java/org/kitodo/production/services/data/ProcessService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo0OTo1NlrOGsQUPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo0OTo1NlrOGsQUPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1Nzg1Mw==", "bodyText": "See above.", "url": "https://github.com/kitodo/kitodo-production/pull/3793#discussion_r449057853", "createdAt": "2020-07-02T14:49:56Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/data/ProcessService.java", "diffHunk": "@@ -699,7 +634,7 @@ public QueryBuilder getQueryProjectId(Integer projectId) {\n      */\n     public List<Map<String, Object>> findByWorkpieceProperty(String title, String value, boolean contains)\n             throws DataException {\n-        return findByProperty(title, value, \"workpiece\", \"workpieces.id\", contains);\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abc721898ce8e20e7e5b6f0e19848531a4e3b1c3"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTQwMzE4OnYy", "diffSide": "RIGHT", "path": "Kitodo/src/main/java/org/kitodo/production/services/data/PropertyService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjoyMToxOVrOGsUyDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjoyMToxOVrOGsUyDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEzMTAyMw==", "bodyText": "Please use getByQuery with second parameter with list of to map values. If not this is introducing a possible SQL injection. Would look like this:\npublic List<Property> findByTitle(String title, String type, boolean contains) { \n   Hashmap parameters = new Hashmap<String, String>();\n   parameters.put(\"title\", title);\n   return getByQuery(\"from Property as property where property.title=:title\", parameters);\n}", "url": "https://github.com/kitodo/kitodo-production/pull/3793#discussion_r449131023", "createdAt": "2020-07-02T16:21:19Z", "author": {"login": "henning-gerhardt"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/data/PropertyService.java", "diffHunk": "@@ -156,8 +115,8 @@ private QueryBuilder getQueryForType(String type) {\n      *            of the searched property\n      * @return list of JSON objects with properties\n      */\n-    public List<Map<String,Object>> findByTitle(String title, String type, boolean contains) throws DataException {\n-        return findProperty(PropertyTypeField.TITLE.getKey(), title, type, contains);\n+    public List<Property> findByTitle(String title, String type, boolean contains) {\n+        return getByQuery(\"from Property as property where property.title='\" + title + \"'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abc721898ce8e20e7e5b6f0e19848531a4e3b1c3"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTQwMzgyOnYy", "diffSide": "RIGHT", "path": "Kitodo/src/main/java/org/kitodo/production/services/data/PropertyService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjoyMToyN1rOGsUycA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjoyMToyN1rOGsUycA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEzMTEyMA==", "bodyText": "Please use getByQuery with second parameter with list of to map values. If not this is introducing a possible SQL injection.", "url": "https://github.com/kitodo/kitodo-production/pull/3793#discussion_r449131120", "createdAt": "2020-07-02T16:21:27Z", "author": {"login": "henning-gerhardt"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/data/PropertyService.java", "diffHunk": "@@ -171,17 +130,8 @@ private QueryBuilder getQueryForType(String type) {\n      *            of the searched property\n      * @return list of JSON objects with properties\n      */\n-    List<Map<String,Object>> findByValue(String value, String type, boolean contains) throws DataException {\n-        return findProperty(PropertyTypeField.VALUE.getKey(), value, type, contains);\n-    }\n-\n-    private List<Map<String,Object>> findProperty(String key, String value, String type, boolean contains) throws DataException {\n-        BoolQueryBuilder query = new BoolQueryBuilder();\n-        query.must(createSimpleQuery(key, value, contains, Operator.AND));\n-        if (Objects.nonNull(type)) {\n-            query.must(createSimpleQuery(PropertyTypeField.TYPE.getKey(), type, true));\n-        }\n-        return findDocuments(query);\n+    List<Property> findByValue(String value, String type, boolean contains) {\n+        return getByQuery(\"from Property as property where property.value='\" + value + \"'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abc721898ce8e20e7e5b6f0e19848531a4e3b1c3"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTQwNDMyOnYy", "diffSide": "RIGHT", "path": "Kitodo/src/main/java/org/kitodo/production/services/data/PropertyService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjoyMTozNFrOGsUyuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjoyMTozNFrOGsUyuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEzMTE5Mw==", "bodyText": "Please use getByQuery with second parameter with list of to map values. If not this is introducing a possible SQL injection.", "url": "https://github.com/kitodo/kitodo-production/pull/3793#discussion_r449131193", "createdAt": "2020-07-02T16:21:34Z", "author": {"login": "henning-gerhardt"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/data/PropertyService.java", "diffHunk": "@@ -198,25 +148,8 @@ private QueryBuilder getQueryForType(String type) {\n      *            true or false\n      * @return list of JSON objects with batches of exact type\n      */\n-    List<Map<String, Object>> findByTitleAndValue(String title, String value, String type, boolean contains)\n-            throws DataException {\n-        BoolQueryBuilder query = new BoolQueryBuilder();\n-        query.must(createSimpleQuery(PropertyTypeField.TITLE.getKey(), title, contains, Operator.AND));\n-        query.must(createSimpleQuery(PropertyTypeField.VALUE.getKey(), value, contains, Operator.AND));\n-        if (Objects.nonNull(type)) {\n-            query.must(createSimpleQuery(PropertyTypeField.TYPE.getKey(), type, true));\n-        }\n-        return findDocuments(query);\n-    }\n-\n-    @Override\n-    public PropertyDTO convertJSONObjectToDTO(Map<String, Object> jsonObject, boolean related) throws DataException {\n-        PropertyDTO propertyDTO = new PropertyDTO();\n-        propertyDTO.setId(getIdFromJSONObject(jsonObject));\n-        propertyDTO.setTitle(PropertyTypeField.TITLE.getStringValue(jsonObject));\n-        propertyDTO.setValue(PropertyTypeField.VALUE.getStringValue(jsonObject));\n-        propertyDTO.setCreationDate(PropertyTypeField.CREATION_DATE.getStringValue(jsonObject));\n-        return propertyDTO;\n+    List<Property> findByTitleAndValue(String title, String value, String type, boolean contains) {\n+        return getByQuery(\"from Property as property where property.title='\" + title + \"' and property.value='\" + value + \"'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abc721898ce8e20e7e5b6f0e19848531a4e3b1c3"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTE1MDI1OnYy", "diffSide": "RIGHT", "path": "Kitodo/src/main/java/org/kitodo/production/services/data/PropertyService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNDowMjo1MFrOGuADug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNDowMjo1MFrOGuADug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg4ODYzNA==", "bodyText": "Parameter type is never used.", "url": "https://github.com/kitodo/kitodo-production/pull/3793#discussion_r450888634", "createdAt": "2020-07-07T14:02:50Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/data/PropertyService.java", "diffHunk": "@@ -133,16 +92,17 @@ public Long countResults(Map filters) throws DataException {\n      *\n      * @return a list of titles.\n      */\n-    public List<String> findProcessPropertiesTitlesDistinct() throws DataException, DAOException {\n+    public List<String> findProcessPropertiesTitlesDistinct() {\n         return findDistinctTitles(\"process\");\n     }\n \n-    private List<String> findDistinctTitles(String type) throws DataException, DAOException {\n-        return findDistinctValues(getQueryForType(type), \"title.keyword\", true, countDatabaseRows());\n-    }\n-\n-    private QueryBuilder getQueryForType(String type) {\n-        return createSimpleQuery(PropertyTypeField.TYPE.getKey(), type, true, Operator.AND);\n+    private List<String> findDistinctTitles(String type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f67a5aa42633f1730b04643f5eb7624831cc1b09"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTE1Mjk1OnYy", "diffSide": "RIGHT", "path": "Kitodo/src/main/java/org/kitodo/production/services/data/PropertyService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNDowMzoyN1rOGuAFhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNDowMzoyN1rOGuAFhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg4OTA5NQ==", "bodyText": "Parameters type and contains are never used.", "url": "https://github.com/kitodo/kitodo-production/pull/3793#discussion_r450889095", "createdAt": "2020-07-07T14:03:27Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/data/PropertyService.java", "diffHunk": "@@ -156,8 +116,10 @@ private QueryBuilder getQueryForType(String type) {\n      *            of the searched property\n      * @return list of JSON objects with properties\n      */\n-    public List<Map<String,Object>> findByTitle(String title, String type, boolean contains) throws DataException {\n-        return findProperty(PropertyTypeField.TITLE.getKey(), title, type, contains);\n+    public List<Property> findByTitle(String title, String type, boolean contains) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f67a5aa42633f1730b04643f5eb7624831cc1b09"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTE1NDQxOnYy", "diffSide": "RIGHT", "path": "Kitodo/src/main/java/org/kitodo/production/services/data/PropertyService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNDowMzo0OFrOGuAGeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNDowMzo0OFrOGuAGeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg4OTMzNw==", "bodyText": "See above.", "url": "https://github.com/kitodo/kitodo-production/pull/3793#discussion_r450889337", "createdAt": "2020-07-07T14:03:48Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/data/PropertyService.java", "diffHunk": "@@ -171,17 +133,10 @@ private QueryBuilder getQueryForType(String type) {\n      *            of the searched property\n      * @return list of JSON objects with properties\n      */\n-    List<Map<String,Object>> findByValue(String value, String type, boolean contains) throws DataException {\n-        return findProperty(PropertyTypeField.VALUE.getKey(), value, type, contains);\n-    }\n-\n-    private List<Map<String,Object>> findProperty(String key, String value, String type, boolean contains) throws DataException {\n-        BoolQueryBuilder query = new BoolQueryBuilder();\n-        query.must(createSimpleQuery(key, value, contains, Operator.AND));\n-        if (Objects.nonNull(type)) {\n-            query.must(createSimpleQuery(PropertyTypeField.TYPE.getKey(), type, true));\n-        }\n-        return findDocuments(query);\n+    List<Property> findByValue(String value, String type, boolean contains) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f67a5aa42633f1730b04643f5eb7624831cc1b09"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTE1NTY1OnYy", "diffSide": "RIGHT", "path": "Kitodo/src/main/java/org/kitodo/production/services/data/PropertyService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNDowNDowM1rOGuAHPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNDowNDowM1rOGuAHPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg4OTUzMw==", "bodyText": "See above.", "url": "https://github.com/kitodo/kitodo-production/pull/3793#discussion_r450889533", "createdAt": "2020-07-07T14:04:03Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/data/PropertyService.java", "diffHunk": "@@ -198,25 +153,11 @@ private QueryBuilder getQueryForType(String type) {\n      *            true or false\n      * @return list of JSON objects with batches of exact type\n      */\n-    List<Map<String, Object>> findByTitleAndValue(String title, String value, String type, boolean contains)\n-            throws DataException {\n-        BoolQueryBuilder query = new BoolQueryBuilder();\n-        query.must(createSimpleQuery(PropertyTypeField.TITLE.getKey(), title, contains, Operator.AND));\n-        query.must(createSimpleQuery(PropertyTypeField.VALUE.getKey(), value, contains, Operator.AND));\n-        if (Objects.nonNull(type)) {\n-            query.must(createSimpleQuery(PropertyTypeField.TYPE.getKey(), type, true));\n-        }\n-        return findDocuments(query);\n-    }\n-\n-    @Override\n-    public PropertyDTO convertJSONObjectToDTO(Map<String, Object> jsonObject, boolean related) throws DataException {\n-        PropertyDTO propertyDTO = new PropertyDTO();\n-        propertyDTO.setId(getIdFromJSONObject(jsonObject));\n-        propertyDTO.setTitle(PropertyTypeField.TITLE.getStringValue(jsonObject));\n-        propertyDTO.setValue(PropertyTypeField.VALUE.getStringValue(jsonObject));\n-        propertyDTO.setCreationDate(PropertyTypeField.CREATION_DATE.getStringValue(jsonObject));\n-        return propertyDTO;\n+    List<Property> findByTitleAndValue(String title, String value, String type, boolean contains) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f67a5aa42633f1730b04643f5eb7624831cc1b09"}, "originalPosition": 192}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3942, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}