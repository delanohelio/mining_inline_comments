{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwODczOTE1", "number": 3412, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjo1MDozM1rODxgQDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo1NzoyNVrODxhonQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjM1MjE0OnYy", "diffSide": "RIGHT", "path": "Kitodo/src/main/java/org/kitodo/production/metadata/MetadataEditor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjo1MDozM1rOGFAepw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjo1MDozM1rOGFAepw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkwMzkxMQ==", "bodyText": "please remove the \"recursive\"", "url": "https://github.com/kitodo/kitodo-production/pull/3412#discussion_r407903911", "createdAt": "2020-04-14T06:50:33Z", "author": {"login": "Kathrin-Huber"}, "path": "Kitodo/src/main/java/org/kitodo/production/metadata/MetadataEditor.java", "diffHunk": "@@ -350,6 +355,44 @@ public static View createUnrestrictedViewOn(MediaUnit mediaUnit) {\n         return unrestrictedView;\n     }\n \n+    /**\n+     * Recursively determines the path to the included structural element of the\n+     * child. For each level of the root element, the recursion is run through\n+     * once, that is for a newspaper year process tree times (year, month, day).\n+     *\n+     * @param includedStructuralElement\n+     *            included structural element of the level stage of recursion\n+     *            (starting from the top)\n+     * @param number\n+     *            number of the record of the process of the child\n+     *\n+     */\n+    public static List<IncludedStructuralElement> determineIncludedStructuralElementPathToChildRecursive(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e61cc41538f7371a56d243e3f6df953ba8bf83f4"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjU0MDQzOnYy", "diffSide": "RIGHT", "path": "Kitodo/src/main/java/org/kitodo/production/forms/dataeditor/ChangeDocStrucTypeDialog.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo0Njo1OVrOGFCOdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo0Njo1OVrOGFCOdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzMjUzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private String docStructEditTypeSelectionSelectedItem;\n          \n          \n            \n                private String docStructType;", "url": "https://github.com/kitodo/kitodo-production/pull/3412#discussion_r407932533", "createdAt": "2020-04-14T07:46:59Z", "author": {"login": "Kathrin-Huber"}, "path": "Kitodo/src/main/java/org/kitodo/production/forms/dataeditor/ChangeDocStrucTypeDialog.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * (c) Kitodo. Key to digital objects e. V. <contact@kitodo.org>\n+ *\n+ * This file is part of the Kitodo project.\n+ *\n+ * It is licensed under GNU General Public License version 3 or later.\n+ *\n+ * For the full copyright and license information, please read the\n+ * GPL3-License.txt file that was distributed with this source code.\n+ */\n+\n+package org.kitodo.production.forms.dataeditor;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.faces.model.SelectItem;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.kitodo.api.dataeditor.rulesetmanagement.StructuralElementViewInterface;\n+import org.kitodo.api.dataformat.IncludedStructuralElement;\n+import org.kitodo.production.helper.Helper;\n+import org.kitodo.production.metadata.MetadataEditor;\n+import org.kitodo.production.services.ServiceManager;\n+\n+/**\n+ * Backing bean for the change doc struc type dialog of the metadata editor.\n+ */\n+public class ChangeDocStrucTypeDialog {\n+    private static final Logger logger = LogManager.getLogger(ChangeDocStrucTypeDialog.class);\n+\n+    private final DataEditorForm dataEditor;\n+    private final List<SelectItem> docStructEditTypeSelectionItems = new ArrayList<>();\n+    private String docStructEditTypeSelectionSelectedItem;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e61cc41538f7371a56d243e3f6df953ba8bf83f4"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjU0MjUwOnYy", "diffSide": "RIGHT", "path": "Kitodo/src/main/java/org/kitodo/production/forms/dataeditor/ChangeDocStrucTypeDialog.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo0NzozOVrOGFCPwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo0NzozOVrOGFCPwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzMjg2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final List<SelectItem> docStructEditTypeSelectionItems = new ArrayList<>();\n          \n          \n            \n                private final List<SelectItem> docStructTypes = new ArrayList<>();", "url": "https://github.com/kitodo/kitodo-production/pull/3412#discussion_r407932865", "createdAt": "2020-04-14T07:47:39Z", "author": {"login": "Kathrin-Huber"}, "path": "Kitodo/src/main/java/org/kitodo/production/forms/dataeditor/ChangeDocStrucTypeDialog.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * (c) Kitodo. Key to digital objects e. V. <contact@kitodo.org>\n+ *\n+ * This file is part of the Kitodo project.\n+ *\n+ * It is licensed under GNU General Public License version 3 or later.\n+ *\n+ * For the full copyright and license information, please read the\n+ * GPL3-License.txt file that was distributed with this source code.\n+ */\n+\n+package org.kitodo.production.forms.dataeditor;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.faces.model.SelectItem;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.kitodo.api.dataeditor.rulesetmanagement.StructuralElementViewInterface;\n+import org.kitodo.api.dataformat.IncludedStructuralElement;\n+import org.kitodo.production.helper.Helper;\n+import org.kitodo.production.metadata.MetadataEditor;\n+import org.kitodo.production.services.ServiceManager;\n+\n+/**\n+ * Backing bean for the change doc struc type dialog of the metadata editor.\n+ */\n+public class ChangeDocStrucTypeDialog {\n+    private static final Logger logger = LogManager.getLogger(ChangeDocStrucTypeDialog.class);\n+\n+    private final DataEditorForm dataEditor;\n+    private final List<SelectItem> docStructEditTypeSelectionItems = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e61cc41538f7371a56d243e3f6df953ba8bf83f4"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjU1ODAwOnYy", "diffSide": "RIGHT", "path": "Kitodo/src/main/java/org/kitodo/production/forms/dataeditor/ChangeDocStrucTypeDialog.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo1MTo1OFrOGFCZCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo1MTo1OFrOGFCZCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzNTI0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private IncludedStructuralElement getTheCurrentlySelectedIncludedStructuralElement() {\n          \n          \n            \n                private IncludedStructuralElement getSelectedIncludedStructuralElement() {", "url": "https://github.com/kitodo/kitodo-production/pull/3412#discussion_r407935243", "createdAt": "2020-04-14T07:51:58Z", "author": {"login": "Kathrin-Huber"}, "path": "Kitodo/src/main/java/org/kitodo/production/forms/dataeditor/ChangeDocStrucTypeDialog.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * (c) Kitodo. Key to digital objects e. V. <contact@kitodo.org>\n+ *\n+ * This file is part of the Kitodo project.\n+ *\n+ * It is licensed under GNU General Public License version 3 or later.\n+ *\n+ * For the full copyright and license information, please read the\n+ * GPL3-License.txt file that was distributed with this source code.\n+ */\n+\n+package org.kitodo.production.forms.dataeditor;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.faces.model.SelectItem;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.kitodo.api.dataeditor.rulesetmanagement.StructuralElementViewInterface;\n+import org.kitodo.api.dataformat.IncludedStructuralElement;\n+import org.kitodo.production.helper.Helper;\n+import org.kitodo.production.metadata.MetadataEditor;\n+import org.kitodo.production.services.ServiceManager;\n+\n+/**\n+ * Backing bean for the change doc struc type dialog of the metadata editor.\n+ */\n+public class ChangeDocStrucTypeDialog {\n+    private static final Logger logger = LogManager.getLogger(ChangeDocStrucTypeDialog.class);\n+\n+    private final DataEditorForm dataEditor;\n+    private final List<SelectItem> docStructEditTypeSelectionItems = new ArrayList<>();\n+    private String docStructEditTypeSelectionSelectedItem;\n+\n+    /**\n+     * Backing bean for the add doc struc type dialog of the metadata editor.\n+     *\n+     * @see \"WEB-INF/templates/includes/metadataEditor/dialogs/changeDocStrucType.xhtml\"\n+     */\n+    ChangeDocStrucTypeDialog(DataEditorForm dataEditor) {\n+        this.dataEditor = dataEditor;\n+    }\n+\n+    /**\n+     * Edit the doc struc.\n+     */\n+    public void editDocStruc() {\n+        IncludedStructuralElement selectedStructure = getTheCurrentlySelectedIncludedStructuralElement();\n+        selectedStructure.setType(docStructEditTypeSelectionSelectedItem);\n+        dataEditor.refreshStructurePanel();\n+    }\n+\n+    /**\n+     * Returns the selected item of the docStructEditTypeSelection drop-down\n+     * menu.\n+     *\n+     * @return the selected item of the docStructEditTypeSelection\n+     */\n+    public List<SelectItem> getDocStructEditTypeSelectionItems() {\n+        return docStructEditTypeSelectionItems;\n+    }\n+\n+    /**\n+     * Return selected doc struct type.\n+     *\n+     * @return selected doc struct type\n+     */\n+    public String getDocStructEditTypeSelectionSelectedItem() {\n+        return docStructEditTypeSelectionSelectedItem;\n+    }\n+\n+    /**\n+     * Sets the selected item of the docStructEditTypeSelection drop-down menu.\n+     *\n+     * @param docStructEditTypeSelectionSelectedItem\n+     *            selected item to set\n+     */\n+    public void setDocStructEditTypeSelectionSelectedItem(String docStructEditTypeSelectionSelectedItem) {\n+        this.docStructEditTypeSelectionSelectedItem = docStructEditTypeSelectionSelectedItem;\n+    }\n+\n+    /**\n+     * Prepare popup dialog by retrieving available doc struct types for\n+     * selected element.\n+     */\n+    public void prepare() {\n+        try {\n+            IncludedStructuralElement selectedStructure = getTheCurrentlySelectedIncludedStructuralElement();\n+            Map<String, String> possibleTypes = findAllTypesThisIncludedStructuralElementCanHave(selectedStructure);\n+            docStructEditTypeSelectionItems.clear();\n+            for (Entry<String, String> typeOption : possibleTypes.entrySet()) {\n+                docStructEditTypeSelectionItems.add(new SelectItem(typeOption.getKey(), typeOption.getValue()));\n+            }\n+            docStructEditTypeSelectionSelectedItem = selectedStructure.getType();\n+        } catch (IllegalStateException | IOException e) {\n+            Helper.setErrorMessage(e.getLocalizedMessage(), logger, e);\n+        }\n+    }\n+\n+    private IncludedStructuralElement getTheCurrentlySelectedIncludedStructuralElement() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e61cc41538f7371a56d243e3f6df953ba8bf83f4"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjU2MDQ2OnYy", "diffSide": "RIGHT", "path": "Kitodo/src/main/java/org/kitodo/production/forms/dataeditor/ChangeDocStrucTypeDialog.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo1Mjo0MFrOGFCamQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo1Mjo0MFrOGFCamQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzNTY0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Map<String, String> findAllTypesThisIncludedStructuralElementCanHave(\n          \n          \n            \n                private Map<String, String> findAllPossibleTypes(", "url": "https://github.com/kitodo/kitodo-production/pull/3412#discussion_r407935641", "createdAt": "2020-04-14T07:52:40Z", "author": {"login": "Kathrin-Huber"}, "path": "Kitodo/src/main/java/org/kitodo/production/forms/dataeditor/ChangeDocStrucTypeDialog.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * (c) Kitodo. Key to digital objects e. V. <contact@kitodo.org>\n+ *\n+ * This file is part of the Kitodo project.\n+ *\n+ * It is licensed under GNU General Public License version 3 or later.\n+ *\n+ * For the full copyright and license information, please read the\n+ * GPL3-License.txt file that was distributed with this source code.\n+ */\n+\n+package org.kitodo.production.forms.dataeditor;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.faces.model.SelectItem;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.kitodo.api.dataeditor.rulesetmanagement.StructuralElementViewInterface;\n+import org.kitodo.api.dataformat.IncludedStructuralElement;\n+import org.kitodo.production.helper.Helper;\n+import org.kitodo.production.metadata.MetadataEditor;\n+import org.kitodo.production.services.ServiceManager;\n+\n+/**\n+ * Backing bean for the change doc struc type dialog of the metadata editor.\n+ */\n+public class ChangeDocStrucTypeDialog {\n+    private static final Logger logger = LogManager.getLogger(ChangeDocStrucTypeDialog.class);\n+\n+    private final DataEditorForm dataEditor;\n+    private final List<SelectItem> docStructEditTypeSelectionItems = new ArrayList<>();\n+    private String docStructEditTypeSelectionSelectedItem;\n+\n+    /**\n+     * Backing bean for the add doc struc type dialog of the metadata editor.\n+     *\n+     * @see \"WEB-INF/templates/includes/metadataEditor/dialogs/changeDocStrucType.xhtml\"\n+     */\n+    ChangeDocStrucTypeDialog(DataEditorForm dataEditor) {\n+        this.dataEditor = dataEditor;\n+    }\n+\n+    /**\n+     * Edit the doc struc.\n+     */\n+    public void editDocStruc() {\n+        IncludedStructuralElement selectedStructure = getTheCurrentlySelectedIncludedStructuralElement();\n+        selectedStructure.setType(docStructEditTypeSelectionSelectedItem);\n+        dataEditor.refreshStructurePanel();\n+    }\n+\n+    /**\n+     * Returns the selected item of the docStructEditTypeSelection drop-down\n+     * menu.\n+     *\n+     * @return the selected item of the docStructEditTypeSelection\n+     */\n+    public List<SelectItem> getDocStructEditTypeSelectionItems() {\n+        return docStructEditTypeSelectionItems;\n+    }\n+\n+    /**\n+     * Return selected doc struct type.\n+     *\n+     * @return selected doc struct type\n+     */\n+    public String getDocStructEditTypeSelectionSelectedItem() {\n+        return docStructEditTypeSelectionSelectedItem;\n+    }\n+\n+    /**\n+     * Sets the selected item of the docStructEditTypeSelection drop-down menu.\n+     *\n+     * @param docStructEditTypeSelectionSelectedItem\n+     *            selected item to set\n+     */\n+    public void setDocStructEditTypeSelectionSelectedItem(String docStructEditTypeSelectionSelectedItem) {\n+        this.docStructEditTypeSelectionSelectedItem = docStructEditTypeSelectionSelectedItem;\n+    }\n+\n+    /**\n+     * Prepare popup dialog by retrieving available doc struct types for\n+     * selected element.\n+     */\n+    public void prepare() {\n+        try {\n+            IncludedStructuralElement selectedStructure = getTheCurrentlySelectedIncludedStructuralElement();\n+            Map<String, String> possibleTypes = findAllTypesThisIncludedStructuralElementCanHave(selectedStructure);\n+            docStructEditTypeSelectionItems.clear();\n+            for (Entry<String, String> typeOption : possibleTypes.entrySet()) {\n+                docStructEditTypeSelectionItems.add(new SelectItem(typeOption.getKey(), typeOption.getValue()));\n+            }\n+            docStructEditTypeSelectionSelectedItem = selectedStructure.getType();\n+        } catch (IllegalStateException | IOException e) {\n+            Helper.setErrorMessage(e.getLocalizedMessage(), logger, e);\n+        }\n+    }\n+\n+    private IncludedStructuralElement getTheCurrentlySelectedIncludedStructuralElement() {\n+        if (dataEditor.getSelectedStructure().isPresent()) {\n+            return dataEditor.getSelectedStructure().get();\n+        } else {\n+            throw new IllegalStateException(\"could not retrieve selected structure\");\n+        }\n+    }\n+\n+    private Map<String, String> findAllTypesThisIncludedStructuralElementCanHave(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e61cc41538f7371a56d243e3f6df953ba8bf83f4"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjU3ODg1OnYy", "diffSide": "RIGHT", "path": "Kitodo/src/main/java/org/kitodo/production/forms/dataeditor/ChangeDocStrucTypeDialog.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo1NzoyNVrOGFCl1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo1NzoyNVrOGFCl1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzODUxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void onlyAllowTypesThatSupportAllGivenIncludedStructuralChildElements(\n          \n          \n            \n                private void restrictTypesToChildElements(", "url": "https://github.com/kitodo/kitodo-production/pull/3412#discussion_r407938517", "createdAt": "2020-04-14T07:57:25Z", "author": {"login": "Kathrin-Huber"}, "path": "Kitodo/src/main/java/org/kitodo/production/forms/dataeditor/ChangeDocStrucTypeDialog.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * (c) Kitodo. Key to digital objects e. V. <contact@kitodo.org>\n+ *\n+ * This file is part of the Kitodo project.\n+ *\n+ * It is licensed under GNU General Public License version 3 or later.\n+ *\n+ * For the full copyright and license information, please read the\n+ * GPL3-License.txt file that was distributed with this source code.\n+ */\n+\n+package org.kitodo.production.forms.dataeditor;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.faces.model.SelectItem;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.kitodo.api.dataeditor.rulesetmanagement.StructuralElementViewInterface;\n+import org.kitodo.api.dataformat.IncludedStructuralElement;\n+import org.kitodo.production.helper.Helper;\n+import org.kitodo.production.metadata.MetadataEditor;\n+import org.kitodo.production.services.ServiceManager;\n+\n+/**\n+ * Backing bean for the change doc struc type dialog of the metadata editor.\n+ */\n+public class ChangeDocStrucTypeDialog {\n+    private static final Logger logger = LogManager.getLogger(ChangeDocStrucTypeDialog.class);\n+\n+    private final DataEditorForm dataEditor;\n+    private final List<SelectItem> docStructEditTypeSelectionItems = new ArrayList<>();\n+    private String docStructEditTypeSelectionSelectedItem;\n+\n+    /**\n+     * Backing bean for the add doc struc type dialog of the metadata editor.\n+     *\n+     * @see \"WEB-INF/templates/includes/metadataEditor/dialogs/changeDocStrucType.xhtml\"\n+     */\n+    ChangeDocStrucTypeDialog(DataEditorForm dataEditor) {\n+        this.dataEditor = dataEditor;\n+    }\n+\n+    /**\n+     * Edit the doc struc.\n+     */\n+    public void editDocStruc() {\n+        IncludedStructuralElement selectedStructure = getTheCurrentlySelectedIncludedStructuralElement();\n+        selectedStructure.setType(docStructEditTypeSelectionSelectedItem);\n+        dataEditor.refreshStructurePanel();\n+    }\n+\n+    /**\n+     * Returns the selected item of the docStructEditTypeSelection drop-down\n+     * menu.\n+     *\n+     * @return the selected item of the docStructEditTypeSelection\n+     */\n+    public List<SelectItem> getDocStructEditTypeSelectionItems() {\n+        return docStructEditTypeSelectionItems;\n+    }\n+\n+    /**\n+     * Return selected doc struct type.\n+     *\n+     * @return selected doc struct type\n+     */\n+    public String getDocStructEditTypeSelectionSelectedItem() {\n+        return docStructEditTypeSelectionSelectedItem;\n+    }\n+\n+    /**\n+     * Sets the selected item of the docStructEditTypeSelection drop-down menu.\n+     *\n+     * @param docStructEditTypeSelectionSelectedItem\n+     *            selected item to set\n+     */\n+    public void setDocStructEditTypeSelectionSelectedItem(String docStructEditTypeSelectionSelectedItem) {\n+        this.docStructEditTypeSelectionSelectedItem = docStructEditTypeSelectionSelectedItem;\n+    }\n+\n+    /**\n+     * Prepare popup dialog by retrieving available doc struct types for\n+     * selected element.\n+     */\n+    public void prepare() {\n+        try {\n+            IncludedStructuralElement selectedStructure = getTheCurrentlySelectedIncludedStructuralElement();\n+            Map<String, String> possibleTypes = findAllTypesThisIncludedStructuralElementCanHave(selectedStructure);\n+            docStructEditTypeSelectionItems.clear();\n+            for (Entry<String, String> typeOption : possibleTypes.entrySet()) {\n+                docStructEditTypeSelectionItems.add(new SelectItem(typeOption.getKey(), typeOption.getValue()));\n+            }\n+            docStructEditTypeSelectionSelectedItem = selectedStructure.getType();\n+        } catch (IllegalStateException | IOException e) {\n+            Helper.setErrorMessage(e.getLocalizedMessage(), logger, e);\n+        }\n+    }\n+\n+    private IncludedStructuralElement getTheCurrentlySelectedIncludedStructuralElement() {\n+        if (dataEditor.getSelectedStructure().isPresent()) {\n+            return dataEditor.getSelectedStructure().get();\n+        } else {\n+            throw new IllegalStateException(\"could not retrieve selected structure\");\n+        }\n+    }\n+\n+    private Map<String, String> findAllTypesThisIncludedStructuralElementCanHave(\n+            IncludedStructuralElement includedStructuralElement) throws IOException {\n+\n+        Map<String, String> possibleTypes = getAllowedChildTypesFromIncludedStructuralParentElement(\n+            includedStructuralElement);\n+        onlyAllowTypesThatSupportAllGivenIncludedStructuralChildElements(includedStructuralElement, possibleTypes);\n+        return possibleTypes;\n+    }\n+\n+    private Map<String, String> getAllowedChildTypesFromIncludedStructuralParentElement(\n+            IncludedStructuralElement includedStructuralElement) throws IOException {\n+\n+        IncludedStructuralElement rootElement = dataEditor.getWorkpiece().getRootElement();\n+        if (rootElement.equals(includedStructuralElement)) {\n+            if (Objects.isNull(dataEditor.getProcess().getParent())) {\n+                return dataEditor.getRuleset().getStructuralElements(dataEditor.getPriorityList());\n+            } else {\n+                return getAllowedChildTypesFromParentalProcess();\n+            }\n+        } else {\n+            LinkedList<IncludedStructuralElement> ancestors = MetadataEditor\n+                    .getAncestorsOfStructure(includedStructuralElement, rootElement);\n+            String parentType = ancestors.getLast().getType();\n+            return getAllowedSubstructuralElements(parentType);\n+        }\n+    }\n+\n+    private Map<String, String> getAllowedChildTypesFromParentalProcess() throws IOException {\n+        URI parentMetadataUri = ServiceManager.getProcessService()\n+                .getMetadataFileUri(dataEditor.getProcess().getParent());\n+        IncludedStructuralElement parentRootElement = ServiceManager.getMetsService().loadWorkpiece(parentMetadataUri)\n+                .getRootElement();\n+        List<IncludedStructuralElement> parentHierarchyPath = MetadataEditor\n+                .determineIncludedStructuralElementPathToChildRecursive(parentRootElement,\n+                    dataEditor.getProcess().getId());\n+        if (parentHierarchyPath.isEmpty()) {\n+            throw new IllegalStateException(\"proces is not linked in parent process\");\n+        }\n+        return getAllowedSubstructuralElements(\n+            ((LinkedList<IncludedStructuralElement>) parentHierarchyPath).getLast().getType());\n+    }\n+\n+    private Map<String, String> getAllowedSubstructuralElements(String parentType) {\n+        StructuralElementViewInterface parentView = dataEditor.getRuleset().getStructuralElementView(parentType,\n+            dataEditor.getAcquisitionStage(), dataEditor.getPriorityList());\n+        return parentView.getAllowedSubstructuralElements();\n+    }\n+\n+    private void onlyAllowTypesThatSupportAllGivenIncludedStructuralChildElements(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e61cc41538f7371a56d243e3f6df953ba8bf83f4"}, "originalPosition": 167}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4042, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}