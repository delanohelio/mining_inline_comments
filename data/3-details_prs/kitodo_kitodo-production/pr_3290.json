{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMzA1NDUx", "number": 3290, "title": "Mass import", "bodyText": "", "createdAt": "2020-03-18T08:59:56Z", "url": "https://github.com/kitodo/kitodo-production/pull/3290", "merged": true, "mergeCommit": {"oid": "c25746c32973cb1531cfc9379bea20107d3eeacd"}, "closed": true, "closedAt": "2020-04-03T15:27:52Z", "author": {"login": "Kathrin-Huber"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPHMXHgBqjMxNDQ0NDU3NDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcUCg07AH2gAyMzkwMzA1NDUxOjRjMGZjOGI4MjZmYzI3ZTYxMGJlMzYyMzA2ZTAxNDk1MWMwZDExZmU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5e9595841185046d8b64079c28cc098b4065e3cb", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/5e9595841185046d8b64079c28cc098b4065e3cb", "committedDate": "2020-03-19T07:41:54Z", "message": "cleanup"}, "afterCommit": {"oid": "3f5b61dcdc5ff8187e2d2c9da0a6ce239682d73e", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/3f5b61dcdc5ff8187e2d2c9da0a6ce239682d73e", "committedDate": "2020-03-19T07:57:31Z", "message": "cleanup"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9c637544c99dbc678768f35238dc7e89b7786000", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/9c637544c99dbc678768f35238dc7e89b7786000", "committedDate": "2020-03-19T08:21:40Z", "message": "add ImportException"}, "afterCommit": {"oid": "92c4e90850696220ffbf49c9af49dfe3cbe04806", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/92c4e90850696220ffbf49c9af49dfe3cbe04806", "committedDate": "2020-03-19T08:24:02Z", "message": "add ImportException"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7cbc521dcbd7bc6111b3ff72128eb946c5460669", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/7cbc521dcbd7bc6111b3ff72128eb946c5460669", "committedDate": "2020-03-19T10:00:17Z", "message": "use restito for catalog search"}, "afterCommit": {"oid": "11b59bee3f56246ef3f58971656cae37886bbbd2", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/11b59bee3f56246ef3f58971656cae37886bbbd2", "committedDate": "2020-03-19T10:02:17Z", "message": "use restito for catalog search"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "11b59bee3f56246ef3f58971656cae37886bbbd2", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/11b59bee3f56246ef3f58971656cae37886bbbd2", "committedDate": "2020-03-19T10:02:17Z", "message": "use restito for catalog search"}, "afterCommit": {"oid": "adfbf2a7c556282f5d88f09724adc13e41158672", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/adfbf2a7c556282f5d88f09724adc13e41158672", "committedDate": "2020-03-19T10:04:41Z", "message": "use restito for catalog search"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "adfbf2a7c556282f5d88f09724adc13e41158672", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/adfbf2a7c556282f5d88f09724adc13e41158672", "committedDate": "2020-03-19T10:04:41Z", "message": "use restito for catalog search"}, "afterCommit": {"oid": "6272f5f8b1d74be18902490a54304f13d7fd0c5c", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/6272f5f8b1d74be18902490a54304f13d7fd0c5c", "committedDate": "2020-03-19T19:54:17Z", "message": "use restito for catalog search"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "831a8ca58ecc1f86f309424fc29aaf3766de438d", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/831a8ca58ecc1f86f309424fc29aaf3766de438d", "committedDate": "2020-03-24T14:08:38Z", "message": "move openRulesetMethod"}, "afterCommit": {"oid": "0e4ee45432ca4e30ae6b636b43618dedb49683bb", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/0e4ee45432ca4e30ae6b636b43618dedb49683bb", "committedDate": "2020-03-24T14:17:56Z", "message": "move openRulesetMethod"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7fb694ba400f69312018935f0e5113cf1c783a41", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/7fb694ba400f69312018935f0e5113cf1c783a41", "committedDate": "2020-03-25T07:33:47Z", "message": "inspect2"}, "afterCommit": {"oid": "f23d7ec5620cdb09f2c57a84361bf922a7095357", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/f23d7ec5620cdb09f2c57a84361bf922a7095357", "committedDate": "2020-03-25T09:13:59Z", "message": "inspect2"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f23d7ec5620cdb09f2c57a84361bf922a7095357", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/f23d7ec5620cdb09f2c57a84361bf922a7095357", "committedDate": "2020-03-25T09:13:59Z", "message": "inspect2"}, "afterCommit": {"oid": "2c0355599fd01b99fb8be2d55618307295bd35f0", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/2c0355599fd01b99fb8be2d55618307295bd35f0", "committedDate": "2020-03-25T09:27:28Z", "message": "inspect2"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c0355599fd01b99fb8be2d55618307295bd35f0", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/2c0355599fd01b99fb8be2d55618307295bd35f0", "committedDate": "2020-03-25T09:27:28Z", "message": "inspect2"}, "afterCommit": {"oid": "adc0f5209a65f7c1c5b6dd3ef3599b889888509b", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/adc0f5209a65f7c1c5b6dd3ef3599b889888509b", "committedDate": "2020-03-30T14:49:56Z", "message": "sout"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "adc0f5209a65f7c1c5b6dd3ef3599b889888509b", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/adc0f5209a65f7c1c5b6dd3ef3599b889888509b", "committedDate": "2020-03-30T14:49:56Z", "message": "sout"}, "afterCommit": {"oid": "a17a1ce844cf090af57913c0c52f7c1ff7341c67", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/a17a1ce844cf090af57913c0c52f7c1ff7341c67", "committedDate": "2020-03-30T14:36:47Z", "message": "move openRulesetMethod"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MTgyNTAw", "url": "https://github.com/kitodo/kitodo-production/pull/3290#pullrequestreview-386182500", "createdAt": "2020-04-02T07:50:44Z", "commit": {"oid": "a17a1ce844cf090af57913c0c52f7c1ff7341c67"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNzo1MDo0NVrOF_fRsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTo1MTo1MlrOF_ju8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjExNzA0MA==", "bodyText": "Suggested change", "url": "https://github.com/kitodo/kitodo-production/pull/3290#discussion_r402117040", "createdAt": "2020-04-02T07:50:45Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/exceptions/ImportException.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * (c) Kitodo. Key to digital objects e. V. <contact@kitodo.org>\n+ *\n+ * This file is part of the Kitodo project.\n+ *\n+ * It is licensed under GNU General Public License version 3 or later.\n+ *\n+ * For the full copyright and license information, please read the\n+ * GPL3-License.txt file that was distributed with this source code.\n+ */\n+\n+package org.kitodo.exceptions;\n+\n+public class ImportException extends Exception {\n+    /**\n+     * Constructor with given exception message.\n+     *\n+     * @param exceptionMessage\n+     *            as String\n+     */\n+    public ImportException(String exceptionMessage) {\n+        super(exceptionMessage);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a17a1ce844cf090af57913c0c52f7c1ff7341c67"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2NTQ2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import java.io.FileNotFoundException;\n          \n      \n    \n    \n  \n\nThis exception doesn't seem to be used in this class.", "url": "https://github.com/kitodo/kitodo-production/pull/3290#discussion_r402165463", "createdAt": "2020-04-02T09:11:29Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/data/ImportService.java", "diffHunk": "@@ -12,11 +12,13 @@\n package org.kitodo.production.services.data;\n \n import java.io.File;\n+import java.io.FileNotFoundException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ea0120b72799c66fbf52e69181f70ba506e77a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2NTg5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import java.util.concurrent.TimeUnit;\n          \n      \n    \n    \n  \n\nTimeUnit doesn't seem to be used in this class.", "url": "https://github.com/kitodo/kitodo-production/pull/3290#discussion_r402165891", "createdAt": "2020-04-02T09:12:11Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/data/ImportService.java", "diffHunk": "@@ -25,6 +27,7 @@\n import java.util.Locale;\n import java.util.NoSuchElementException;\n import java.util.Objects;\n+import java.util.concurrent.TimeUnit;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ea0120b72799c66fbf52e69181f70ba506e77a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2NjI2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import org.apache.logging.log4j.core.tools.picocli.CommandLine;\n          \n          \n            \n            import org.jboss.weld.environment.util.Collections;\n          \n      \n    \n    \n  \n\nCommandLine and Collections don't seem to be used in this class.", "url": "https://github.com/kitodo/kitodo-production/pull/3290#discussion_r402166267", "createdAt": "2020-04-02T09:12:48Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/data/ImportService.java", "diffHunk": "@@ -37,6 +40,8 @@\n import org.apache.commons.lang.StringUtils;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.core.tools.picocli.CommandLine;\n+import org.jboss.weld.environment.util.Collections;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ea0120b72799c66fbf52e69181f70ba506e77a"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2NzE1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Template template = null;\n          \n          \n            \n                    Template template;", "url": "https://github.com/kitodo/kitodo-production/pull/3290#discussion_r402167150", "createdAt": "2020-04-02T09:14:14Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/data/ImportService.java", "diffHunk": "@@ -1022,4 +1029,33 @@ public static void processTempProcess(TempProcess tempProcess, Template template\n         addProperties(tempProcess.getProcess(), template, processDetails, docType, tempProcess.getProcess().getTitle());\n         updateTasks(process);\n     }\n+\n+    /**\n+     * Imports a process and saves it to database.\n+     * @param ppn the ppn to import\n+     * @param projectId the projectId\n+     * @param templateId the templateId\n+     * @param selectedCatalog the selected catalog to import from\n+     * @return the importedProcess\n+     */\n+    public Process importProcess(String ppn, int projectId, int templateId, String selectedCatalog) throws ImportException {\n+        LinkedList<TempProcess> processList = new LinkedList<>();\n+        Template template = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ea0120b72799c66fbf52e69181f70ba506e77a"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE3NzM3Ng==", "bodyText": "This could probably lead to a null pointer exception if processList.get(0) returns null.", "url": "https://github.com/kitodo/kitodo-production/pull/3290#discussion_r402177376", "createdAt": "2020-04-02T09:30:39Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/data/ImportService.java", "diffHunk": "@@ -1022,4 +1029,33 @@ public static void processTempProcess(TempProcess tempProcess, Template template\n         addProperties(tempProcess.getProcess(), template, processDetails, docType, tempProcess.getProcess().getTitle());\n         updateTasks(process);\n     }\n+\n+    /**\n+     * Imports a process and saves it to database.\n+     * @param ppn the ppn to import\n+     * @param projectId the projectId\n+     * @param templateId the templateId\n+     * @param selectedCatalog the selected catalog to import from\n+     * @return the importedProcess\n+     */\n+    public Process importProcess(String ppn, int projectId, int templateId, String selectedCatalog) throws ImportException {\n+        LinkedList<TempProcess> processList = new LinkedList<>();\n+        Template template = null;\n+        try {\n+            template = ServiceManager.getTemplateService().getById(templateId);\n+            String metadataLanguage = ServiceManager.getUserService().getCurrentUser().getMetadataLanguage();\n+            List<Locale.LanguageRange> priorityList = Locale.LanguageRange.parse(metadataLanguage.isEmpty() ? \"en\" : metadataLanguage);\n+            importProcessAndReturnParentID(ppn, processList, selectedCatalog, projectId, templateId);\n+            processTempProcess(processList.get(0), template,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ea0120b72799c66fbf52e69181f70ba506e77a"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4MDA2NQ==", "bodyText": "Could the current openRuleset method be removed and openRulesetFile be renamed to openRuleset, since the private openRulesetFile method is currently only be called in openRuleset?", "url": "https://github.com/kitodo/kitodo-production/pull/3290#discussion_r402180065", "createdAt": "2020-04-02T09:35:05Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/data/RulesetService.java", "diffHunk": "@@ -223,11 +229,24 @@ private QueryBuilder getRulesetsForCurrentUserQuery() {\n      *            database object that references the ruleset\n      * @return a Ruleset Management in which the ruleset has been loaded\n      */\n-    public RulesetManagementInterface openRuleset(Ruleset ruleset) throws IOException {\n-        String rulesetPath = Paths.get(ConfigCore.getParameter(ParameterCore.DIR_RULESETS), ruleset.getFile())\n-                .toString();\n-        RulesetManagementInterface openRuleset = ServiceManager.getRulesetManagementService().getRulesetManagement();\n-        openRuleset.load(new File(rulesetPath));\n-        return openRuleset;\n+    public RulesetManagementInterface openRuleset(Ruleset ruleset) throws IOException, RulesetNotFoundException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ea0120b72799c66fbf52e69181f70ba506e77a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4MDUzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Gets the configured metadatalanguage from the User.\n          \n          \n            \n                 * Gets the configured metadata language from the User.", "url": "https://github.com/kitodo/kitodo-production/pull/3290#discussion_r402180539", "createdAt": "2020-04-02T09:35:57Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/data/UserService.java", "diffHunk": "@@ -480,4 +481,13 @@ public void changeUserPassword(User user, String newPassword) throws DAOExceptio\n         userWithNewPassword.setPassword(passwordEncoder.encrypt(newPassword));\n         saveToDatabase(userWithNewPassword);\n     }\n+\n+    /**\n+     * Gets the configured metadatalanguage from the User.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ea0120b72799c66fbf52e69181f70ba506e77a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4MTUzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Assert.assertEquals(\"Not the correct amount of processes found\",(long) 7, (long) processService.count());\n          \n          \n            \n                    Assert.assertEquals(\"Not the correct amount of processes found\", 7, (long) processService.count());", "url": "https://github.com/kitodo/kitodo-production/pull/3290#discussion_r402181538", "createdAt": "2020-04-02T09:37:39Z", "author": {"login": "solth"}, "path": "Kitodo/src/test/java/org/kitodo/production/services/data/ImportServiceIT.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * (c) Kitodo. Key to digital objects e. V. <contact@kitodo.org>\n+ *\n+ * This file is part of the Kitodo project.\n+ *\n+ * It is licensed under GNU General Public License version 3 or later.\n+ *\n+ * For the full copyright and license information, please read the\n+ * GPL3-License.txt file that was distributed with this source code.\n+ */\n+\n+package org.kitodo.production.services.data;\n+\n+import static com.xebialabs.restito.builder.stub.StubHttp.whenHttp;\n+import static com.xebialabs.restito.semantics.Action.contentType;\n+import static com.xebialabs.restito.semantics.Action.ok;\n+import static com.xebialabs.restito.semantics.Action.stringContent;\n+import static com.xebialabs.restito.semantics.Condition.get;\n+import static com.xebialabs.restito.semantics.Condition.parameter;\n+import static org.awaitility.Awaitility.await;\n+\n+import com.xebialabs.restito.server.StubServer;\n+\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kitodo.MockDatabase;\n+import org.kitodo.SecurityTestUtils;\n+import org.kitodo.data.database.beans.Process;\n+import org.kitodo.production.services.ServiceManager;\n+\n+public class ImportServiceIT {\n+\n+    private static final ProcessService processService = ServiceManager.getProcessService();\n+    private static final ImportService importService = ServiceManager.getImportService();\n+    private static StubServer server;\n+    private static final String TEST_FILE_PATH = \"src/test/resources/sruTestRecord.xml\";\n+    private static final String RECORD_ID = \"12345\";\n+    private static final int PORT = 8888;\n+    private static final String firstProcess = \"First process\";\n+\n+    @BeforeClass\n+    public static void prepareDatabase() throws Exception {\n+        MockDatabase.startNode();\n+        MockDatabase.insertProcessesFull();\n+        MockDatabase.insertProcessesForHierarchyTests();\n+        MockDatabase.setUpAwaitility();\n+        SecurityTestUtils.addUserDataToSecurityContext(ServiceManager.getUserService().getById(1), 1);\n+        await().untilTrue(new AtomicBoolean(Objects.nonNull(processService.findByTitle(firstProcess))));\n+        server = new StubServer(PORT).run();\n+        try (InputStream inputStream = Files.newInputStream(Paths.get(TEST_FILE_PATH))) {\n+            setupServer(IOUtils.toString(inputStream, StandardCharsets.UTF_8));\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void cleanDatabase() throws Exception {\n+        MockDatabase.stopNode();\n+        MockDatabase.cleanDatabase();\n+        server.stop();\n+    }\n+\n+    @Test\n+    public void testImportProcess() throws Exception {\n+        Assert.assertEquals(\"Not the correct amount of processes found\",(long) 7, (long) processService.count());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ea0120b72799c66fbf52e69181f70ba506e77a"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4MTcyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Assert.assertEquals(\"Not the correct amount of processes found\",(long) 8, (long) processService.count());\n          \n          \n            \n                    Assert.assertEquals(\"Not the correct amount of processes found\", 8, (long) processService.count());", "url": "https://github.com/kitodo/kitodo-production/pull/3290#discussion_r402181727", "createdAt": "2020-04-02T09:37:55Z", "author": {"login": "solth"}, "path": "Kitodo/src/test/java/org/kitodo/production/services/data/ImportServiceIT.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * (c) Kitodo. Key to digital objects e. V. <contact@kitodo.org>\n+ *\n+ * This file is part of the Kitodo project.\n+ *\n+ * It is licensed under GNU General Public License version 3 or later.\n+ *\n+ * For the full copyright and license information, please read the\n+ * GPL3-License.txt file that was distributed with this source code.\n+ */\n+\n+package org.kitodo.production.services.data;\n+\n+import static com.xebialabs.restito.builder.stub.StubHttp.whenHttp;\n+import static com.xebialabs.restito.semantics.Action.contentType;\n+import static com.xebialabs.restito.semantics.Action.ok;\n+import static com.xebialabs.restito.semantics.Action.stringContent;\n+import static com.xebialabs.restito.semantics.Condition.get;\n+import static com.xebialabs.restito.semantics.Condition.parameter;\n+import static org.awaitility.Awaitility.await;\n+\n+import com.xebialabs.restito.server.StubServer;\n+\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kitodo.MockDatabase;\n+import org.kitodo.SecurityTestUtils;\n+import org.kitodo.data.database.beans.Process;\n+import org.kitodo.production.services.ServiceManager;\n+\n+public class ImportServiceIT {\n+\n+    private static final ProcessService processService = ServiceManager.getProcessService();\n+    private static final ImportService importService = ServiceManager.getImportService();\n+    private static StubServer server;\n+    private static final String TEST_FILE_PATH = \"src/test/resources/sruTestRecord.xml\";\n+    private static final String RECORD_ID = \"12345\";\n+    private static final int PORT = 8888;\n+    private static final String firstProcess = \"First process\";\n+\n+    @BeforeClass\n+    public static void prepareDatabase() throws Exception {\n+        MockDatabase.startNode();\n+        MockDatabase.insertProcessesFull();\n+        MockDatabase.insertProcessesForHierarchyTests();\n+        MockDatabase.setUpAwaitility();\n+        SecurityTestUtils.addUserDataToSecurityContext(ServiceManager.getUserService().getById(1), 1);\n+        await().untilTrue(new AtomicBoolean(Objects.nonNull(processService.findByTitle(firstProcess))));\n+        server = new StubServer(PORT).run();\n+        try (InputStream inputStream = Files.newInputStream(Paths.get(TEST_FILE_PATH))) {\n+            setupServer(IOUtils.toString(inputStream, StandardCharsets.UTF_8));\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void cleanDatabase() throws Exception {\n+        MockDatabase.stopNode();\n+        MockDatabase.cleanDatabase();\n+        server.stop();\n+    }\n+\n+    @Test\n+    public void testImportProcess() throws Exception {\n+        Assert.assertEquals(\"Not the correct amount of processes found\",(long) 7, (long) processService.count());\n+        Process importedProcess = importService.importProcess(RECORD_ID, 1, 1, \"K10Plus\");\n+\n+        Assert.assertEquals(\"WrongProcessTitle\", \"Kitodo_\" + RECORD_ID, importedProcess.getTitle());\n+        Assert.assertEquals(\"Wrong project used\", 1, (long) importedProcess.getProject().getId());\n+        Assert.assertEquals(\"Wrong template used\", 1, (long) importedProcess.getTemplate().getId());\n+        Assert.assertEquals(\"Not the correct amount of processes found\",(long) 8, (long) processService.count());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ea0120b72799c66fbf52e69181f70ba506e77a"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4ODM4MA==", "bodyText": "Would it be possible to deactivate the Upload button until a valid OPAC is selected? At the moment, selecting a CSV file and clicking the Upload button without selecting a catalog causes a ConfigException in the backend but no feedback is send to the user on the frontend:\norg.kitodo.exceptions.ConfigException: The catalog 'null' is not found!\n\tat org.kitodo.config.OPACConfig.getCatalog(OPACConfig.java:226)\n\nEdit: if deactivating the buttons turns out to be impossible, at least the message of the config exception should be displayed to the user, so he knows that he has to select a catalog before starting the import.", "url": "https://github.com/kitodo/kitodo-production/pull/3290#discussion_r402188380", "createdAt": "2020-04-02T09:48:51Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/webapp/WEB-INF/templates/includes/massImport/fileMassImport.xhtml", "diffHunk": "@@ -23,11 +23,11 @@\n         <p:outputLabel for=\"catalogueSelect\"\n                        value=\"#{msgs['newProcess.catalogueSearch.catalogue']}\"/>\n         <p:selectOneMenu id=\"catalogueSelect\"\n-                         immediate=\"true\"\n                          value=\"#{MassImportForm.selectedCatalog}\">\n             <f:selectItem itemValue=\"#{null}\" itemLabel=\"-- #{msgs.selectCatalog} --\" noSelectionOption=\"true\"/>\n-            <f:selectItems value=\"#{CreateProcessForm.importTab.catalogs}\" var=\"step\" itemLabel=\"#{step}\"\n-                           itemValue=\"#{step}\"/>\n+            <f:selectItems value=\"#{CreateProcessForm.importTab.catalogs}\" var=\"catalog\" itemLabel=\"#{catalog}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ea0120b72799c66fbf52e69181f70ba506e77a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE5MDA2Nw==", "bodyText": "Same problem as above, but in this case in addition to the ConfigException in the backend, the user only sees a white page if he didn't select a valid OPAC:\norg.kitodo.exceptions.ConfigException: The catalog '' is not found!\n\tat org.kitodo.config.OPACConfig.getCatalog(OPACConfig.java:226)\n\nAdditionally, the Mass import button here should also be deactivated if the text input field is empty.\nEdit: if deactivating the buttons turns out to be impossible, at least the message of the config exception should be displayed to the user, so he knows that he has to select a catalog before starting the import.", "url": "https://github.com/kitodo/kitodo-production/pull/3290#discussion_r402190067", "createdAt": "2020-04-02T09:51:52Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/webapp/WEB-INF/templates/includes/massImport/textMassImport.xhtml", "diffHunk": "@@ -23,11 +23,11 @@\n                     <p:outputLabel for=\"catalogueSelect\"\n                                    value=\"#{msgs['newProcess.catalogueSearch.catalogue']}\"/>\n                     <p:selectOneMenu id=\"catalogueSelect\"\n-                                     immediate=\"true\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ea0120b72799c66fbf52e69181f70ba506e77a"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "644c6fa5d95bd05e6a9093e6599faba53f3667ee", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/644c6fa5d95bd05e6a9093e6599faba53f3667ee", "committedDate": "2020-04-03T09:06:23Z", "message": "use importservice to import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3361691b7ec9a5a48173f86f96f0a67cb6b8f71f", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/3361691b7ec9a5a48173f86f96f0a67cb6b8f71f", "committedDate": "2020-04-03T09:06:23Z", "message": "add test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00ad14bd01d3aa1fa897b48d7120fe8927327f7b", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/00ad14bd01d3aa1fa897b48d7120fe8927327f7b", "committedDate": "2020-04-03T09:06:23Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7e0f961abfda58b026d4919a58a977756546c06", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/e7e0f961abfda58b026d4919a58a977756546c06", "committedDate": "2020-04-03T09:06:23Z", "message": "add ImportException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed8f38b25be3edc00784ddd286aad79537d6699d", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/ed8f38b25be3edc00784ddd286aad79537d6699d", "committedDate": "2020-04-03T09:06:23Z", "message": "use restito for catalog search"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4fcac9ebcf4004c46ab87e9d025f8ecb4cdb218", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/f4fcac9ebcf4004c46ab87e9d025f8ecb4cdb218", "committedDate": "2020-04-03T09:06:23Z", "message": "move openRulesetMethod"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d4ea2e0e4b4b80a697c1dfe0540bc09121c93d5", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/8d4ea2e0e4b4b80a697c1dfe0540bc09121c93d5", "committedDate": "2020-04-03T09:06:23Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c742075f4448e8d6c5b812d57f2d42a3d74fdf3b", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/c742075f4448e8d6c5b812d57f2d42a3d74fdf3b", "committedDate": "2020-04-03T09:06:23Z", "message": "change to view scoped"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93e8b8707c8064424ee68fd76fabffabdd2444f2", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/93e8b8707c8064424ee68fd76fabffabdd2444f2", "committedDate": "2020-04-03T09:06:24Z", "message": "add required to catalouge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "454023500c900eb946dec4c25b13df0981f07e39", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/454023500c900eb946dec4c25b13df0981f07e39", "committedDate": "2020-04-03T09:06:24Z", "message": "disable button"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6070d8dbdc12b0ef918f3d33943cdb2e9188bb93", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/6070d8dbdc12b0ef918f3d33943cdb2e9188bb93", "committedDate": "2020-04-03T07:54:36Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: Arved Solth <solth@effective-webwork.de>"}, "afterCommit": {"oid": "454023500c900eb946dec4c25b13df0981f07e39", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/454023500c900eb946dec4c25b13df0981f07e39", "committedDate": "2020-04-03T09:06:24Z", "message": "disable button"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MDk5NzM2", "url": "https://github.com/kitodo/kitodo-production/pull/3290#pullrequestreview-387099736", "createdAt": "2020-04-03T09:31:43Z", "commit": {"oid": "454023500c900eb946dec4c25b13df0981f07e39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOTozMTo0NFrOGANzSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOTozMTo0NFrOGANzSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3OTMwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return StringUtils.isBlank(ppnString)? null : ppnString;\n          \n          \n            \n                    return StringUtils.isBlank(ppnString) ? null : ppnString;", "url": "https://github.com/kitodo/kitodo-production/pull/3290#discussion_r402879304", "createdAt": "2020-04-03T09:31:44Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/forms/MassImportForm.java", "diffHunk": "@@ -142,7 +154,7 @@ public void setFile(UploadedFile file) {\n      * @return value of ppnString\n      */\n     public String getPpnString() {\n-        return ppnString;\n+        return StringUtils.isBlank(ppnString)? null : ppnString;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454023500c900eb946dec4c25b13df0981f07e39"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c0fc8b826fc27e610be362306e014951c0d11fe", "author": {"user": {"login": "Kathrin-Huber", "name": "Kathrin Huber"}}, "url": "https://github.com/kitodo/kitodo-production/commit/4c0fc8b826fc27e610be362306e014951c0d11fe", "committedDate": "2020-04-03T15:20:14Z", "message": "Update Kitodo/src/main/java/org/kitodo/production/forms/MassImportForm.java\n\nCo-Authored-By: Arved Solth <solth@effective-webwork.de>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2686, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}