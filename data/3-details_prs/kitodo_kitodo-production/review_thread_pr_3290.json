{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMzA1NDUx", "number": 3290, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNzo1MDo0NVrODt1hKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOTozMTo0NFrODuTQEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Mzg5MzUyOnYy", "diffSide": "RIGHT", "path": "Kitodo/src/main/java/org/kitodo/exceptions/ImportException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNzo1MDo0NVrOF_fRsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNzo1MDo0NVrOF_fRsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjExNzA0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/kitodo/kitodo-production/pull/3290#discussion_r402117040", "createdAt": "2020-04-02T07:50:45Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/exceptions/ImportException.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * (c) Kitodo. Key to digital objects e. V. <contact@kitodo.org>\n+ *\n+ * This file is part of the Kitodo project.\n+ *\n+ * It is licensed under GNU General Public License version 3 or later.\n+ *\n+ * For the full copyright and license information, please read the\n+ * GPL3-License.txt file that was distributed with this source code.\n+ */\n+\n+package org.kitodo.exceptions;\n+\n+public class ImportException extends Exception {\n+    /**\n+     * Constructor with given exception message.\n+     *\n+     * @param exceptionMessage\n+     *            as String\n+     */\n+    public ImportException(String exceptionMessage) {\n+        super(exceptionMessage);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a17a1ce844cf090af57913c0c52f7c1ff7341c67"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDE5NTE3OnYy", "diffSide": "RIGHT", "path": "Kitodo/src/main/java/org/kitodo/production/services/data/ImportService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOToxMToyOVrOF_iO1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOToxMToyOVrOF_iO1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2NTQ2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import java.io.FileNotFoundException;\n          \n      \n    \n    \n  \n\nThis exception doesn't seem to be used in this class.", "url": "https://github.com/kitodo/kitodo-production/pull/3290#discussion_r402165463", "createdAt": "2020-04-02T09:11:29Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/data/ImportService.java", "diffHunk": "@@ -12,11 +12,13 @@\n package org.kitodo.production.services.data;\n \n import java.io.File;\n+import java.io.FileNotFoundException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ea0120b72799c66fbf52e69181f70ba506e77a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDE5Nzk5OnYy", "diffSide": "RIGHT", "path": "Kitodo/src/main/java/org/kitodo/production/services/data/ImportService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOToxMjoxMVrOF_iQgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOToxMjoxMVrOF_iQgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2NTg5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import java.util.concurrent.TimeUnit;\n          \n      \n    \n    \n  \n\nTimeUnit doesn't seem to be used in this class.", "url": "https://github.com/kitodo/kitodo-production/pull/3290#discussion_r402165891", "createdAt": "2020-04-02T09:12:11Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/data/ImportService.java", "diffHunk": "@@ -25,6 +27,7 @@\n import java.util.Locale;\n import java.util.NoSuchElementException;\n import java.util.Objects;\n+import java.util.concurrent.TimeUnit;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ea0120b72799c66fbf52e69181f70ba506e77a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDIwMDIzOnYy", "diffSide": "RIGHT", "path": "Kitodo/src/main/java/org/kitodo/production/services/data/ImportService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOToxMjo0OFrOF_iR-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOToxMjo0OFrOF_iR-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2NjI2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import org.apache.logging.log4j.core.tools.picocli.CommandLine;\n          \n          \n            \n            import org.jboss.weld.environment.util.Collections;\n          \n      \n    \n    \n  \n\nCommandLine and Collections don't seem to be used in this class.", "url": "https://github.com/kitodo/kitodo-production/pull/3290#discussion_r402166267", "createdAt": "2020-04-02T09:12:48Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/data/ImportService.java", "diffHunk": "@@ -37,6 +40,8 @@\n import org.apache.commons.lang.StringUtils;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.core.tools.picocli.CommandLine;\n+import org.jboss.weld.environment.util.Collections;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ea0120b72799c66fbf52e69181f70ba506e77a"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDIwNTc3OnYy", "diffSide": "RIGHT", "path": "Kitodo/src/main/java/org/kitodo/production/services/data/ImportService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOToxNDoxNFrOF_iVbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOToxNDoxNFrOF_iVbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2NzE1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Template template = null;\n          \n          \n            \n                    Template template;", "url": "https://github.com/kitodo/kitodo-production/pull/3290#discussion_r402167150", "createdAt": "2020-04-02T09:14:14Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/data/ImportService.java", "diffHunk": "@@ -1022,4 +1029,33 @@ public static void processTempProcess(TempProcess tempProcess, Template template\n         addProperties(tempProcess.getProcess(), template, processDetails, docType, tempProcess.getProcess().getTitle());\n         updateTasks(process);\n     }\n+\n+    /**\n+     * Imports a process and saves it to database.\n+     * @param ppn the ppn to import\n+     * @param projectId the projectId\n+     * @param templateId the templateId\n+     * @param selectedCatalog the selected catalog to import from\n+     * @return the importedProcess\n+     */\n+    public Process importProcess(String ppn, int projectId, int templateId, String selectedCatalog) throws ImportException {\n+        LinkedList<TempProcess> processList = new LinkedList<>();\n+        Template template = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ea0120b72799c66fbf52e69181f70ba506e77a"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDI2ODc0OnYy", "diffSide": "RIGHT", "path": "Kitodo/src/main/java/org/kitodo/production/services/data/ImportService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTozMDozOVrOF_i9YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTozMDozOVrOF_i9YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE3NzM3Ng==", "bodyText": "This could probably lead to a null pointer exception if processList.get(0) returns null.", "url": "https://github.com/kitodo/kitodo-production/pull/3290#discussion_r402177376", "createdAt": "2020-04-02T09:30:39Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/data/ImportService.java", "diffHunk": "@@ -1022,4 +1029,33 @@ public static void processTempProcess(TempProcess tempProcess, Template template\n         addProperties(tempProcess.getProcess(), template, processDetails, docType, tempProcess.getProcess().getTitle());\n         updateTasks(process);\n     }\n+\n+    /**\n+     * Imports a process and saves it to database.\n+     * @param ppn the ppn to import\n+     * @param projectId the projectId\n+     * @param templateId the templateId\n+     * @param selectedCatalog the selected catalog to import from\n+     * @return the importedProcess\n+     */\n+    public Process importProcess(String ppn, int projectId, int templateId, String selectedCatalog) throws ImportException {\n+        LinkedList<TempProcess> processList = new LinkedList<>();\n+        Template template = null;\n+        try {\n+            template = ServiceManager.getTemplateService().getById(templateId);\n+            String metadataLanguage = ServiceManager.getUserService().getCurrentUser().getMetadataLanguage();\n+            List<Locale.LanguageRange> priorityList = Locale.LanguageRange.parse(metadataLanguage.isEmpty() ? \"en\" : metadataLanguage);\n+            importProcessAndReturnParentID(ppn, processList, selectedCatalog, projectId, templateId);\n+            processTempProcess(processList.get(0), template,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ea0120b72799c66fbf52e69181f70ba506e77a"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDI4NTUxOnYy", "diffSide": "RIGHT", "path": "Kitodo/src/main/java/org/kitodo/production/services/data/RulesetService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTozNTowNVrOF_jH4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTozNTowNVrOF_jH4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4MDA2NQ==", "bodyText": "Could the current openRuleset method be removed and openRulesetFile be renamed to openRuleset, since the private openRulesetFile method is currently only be called in openRuleset?", "url": "https://github.com/kitodo/kitodo-production/pull/3290#discussion_r402180065", "createdAt": "2020-04-02T09:35:05Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/data/RulesetService.java", "diffHunk": "@@ -223,11 +229,24 @@ private QueryBuilder getRulesetsForCurrentUserQuery() {\n      *            database object that references the ruleset\n      * @return a Ruleset Management in which the ruleset has been loaded\n      */\n-    public RulesetManagementInterface openRuleset(Ruleset ruleset) throws IOException {\n-        String rulesetPath = Paths.get(ConfigCore.getParameter(ParameterCore.DIR_RULESETS), ruleset.getFile())\n-                .toString();\n-        RulesetManagementInterface openRuleset = ServiceManager.getRulesetManagementService().getRulesetManagement();\n-        openRuleset.load(new File(rulesetPath));\n-        return openRuleset;\n+    public RulesetManagementInterface openRuleset(Ruleset ruleset) throws IOException, RulesetNotFoundException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ea0120b72799c66fbf52e69181f70ba506e77a"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDI4ODQ1OnYy", "diffSide": "RIGHT", "path": "Kitodo/src/main/java/org/kitodo/production/services/data/UserService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTozNTo1N1rOF_jJuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTozNTo1N1rOF_jJuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4MDUzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Gets the configured metadatalanguage from the User.\n          \n          \n            \n                 * Gets the configured metadata language from the User.", "url": "https://github.com/kitodo/kitodo-production/pull/3290#discussion_r402180539", "createdAt": "2020-04-02T09:35:57Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/services/data/UserService.java", "diffHunk": "@@ -480,4 +481,13 @@ public void changeUserPassword(User user, String newPassword) throws DAOExceptio\n         userWithNewPassword.setPassword(passwordEncoder.encrypt(newPassword));\n         saveToDatabase(userWithNewPassword);\n     }\n+\n+    /**\n+     * Gets the configured metadatalanguage from the User.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ea0120b72799c66fbf52e69181f70ba506e77a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDI5NDQ0OnYy", "diffSide": "RIGHT", "path": "Kitodo/src/test/java/org/kitodo/production/services/data/ImportServiceIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTozNzozOVrOF_jNog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTozNzozOVrOF_jNog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4MTUzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Assert.assertEquals(\"Not the correct amount of processes found\",(long) 7, (long) processService.count());\n          \n          \n            \n                    Assert.assertEquals(\"Not the correct amount of processes found\", 7, (long) processService.count());", "url": "https://github.com/kitodo/kitodo-production/pull/3290#discussion_r402181538", "createdAt": "2020-04-02T09:37:39Z", "author": {"login": "solth"}, "path": "Kitodo/src/test/java/org/kitodo/production/services/data/ImportServiceIT.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * (c) Kitodo. Key to digital objects e. V. <contact@kitodo.org>\n+ *\n+ * This file is part of the Kitodo project.\n+ *\n+ * It is licensed under GNU General Public License version 3 or later.\n+ *\n+ * For the full copyright and license information, please read the\n+ * GPL3-License.txt file that was distributed with this source code.\n+ */\n+\n+package org.kitodo.production.services.data;\n+\n+import static com.xebialabs.restito.builder.stub.StubHttp.whenHttp;\n+import static com.xebialabs.restito.semantics.Action.contentType;\n+import static com.xebialabs.restito.semantics.Action.ok;\n+import static com.xebialabs.restito.semantics.Action.stringContent;\n+import static com.xebialabs.restito.semantics.Condition.get;\n+import static com.xebialabs.restito.semantics.Condition.parameter;\n+import static org.awaitility.Awaitility.await;\n+\n+import com.xebialabs.restito.server.StubServer;\n+\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kitodo.MockDatabase;\n+import org.kitodo.SecurityTestUtils;\n+import org.kitodo.data.database.beans.Process;\n+import org.kitodo.production.services.ServiceManager;\n+\n+public class ImportServiceIT {\n+\n+    private static final ProcessService processService = ServiceManager.getProcessService();\n+    private static final ImportService importService = ServiceManager.getImportService();\n+    private static StubServer server;\n+    private static final String TEST_FILE_PATH = \"src/test/resources/sruTestRecord.xml\";\n+    private static final String RECORD_ID = \"12345\";\n+    private static final int PORT = 8888;\n+    private static final String firstProcess = \"First process\";\n+\n+    @BeforeClass\n+    public static void prepareDatabase() throws Exception {\n+        MockDatabase.startNode();\n+        MockDatabase.insertProcessesFull();\n+        MockDatabase.insertProcessesForHierarchyTests();\n+        MockDatabase.setUpAwaitility();\n+        SecurityTestUtils.addUserDataToSecurityContext(ServiceManager.getUserService().getById(1), 1);\n+        await().untilTrue(new AtomicBoolean(Objects.nonNull(processService.findByTitle(firstProcess))));\n+        server = new StubServer(PORT).run();\n+        try (InputStream inputStream = Files.newInputStream(Paths.get(TEST_FILE_PATH))) {\n+            setupServer(IOUtils.toString(inputStream, StandardCharsets.UTF_8));\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void cleanDatabase() throws Exception {\n+        MockDatabase.stopNode();\n+        MockDatabase.cleanDatabase();\n+        server.stop();\n+    }\n+\n+    @Test\n+    public void testImportProcess() throws Exception {\n+        Assert.assertEquals(\"Not the correct amount of processes found\",(long) 7, (long) processService.count());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ea0120b72799c66fbf52e69181f70ba506e77a"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDI5NTYyOnYy", "diffSide": "RIGHT", "path": "Kitodo/src/test/java/org/kitodo/production/services/data/ImportServiceIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTozNzo1NVrOF_jOXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTozNzo1NVrOF_jOXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4MTcyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Assert.assertEquals(\"Not the correct amount of processes found\",(long) 8, (long) processService.count());\n          \n          \n            \n                    Assert.assertEquals(\"Not the correct amount of processes found\", 8, (long) processService.count());", "url": "https://github.com/kitodo/kitodo-production/pull/3290#discussion_r402181727", "createdAt": "2020-04-02T09:37:55Z", "author": {"login": "solth"}, "path": "Kitodo/src/test/java/org/kitodo/production/services/data/ImportServiceIT.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * (c) Kitodo. Key to digital objects e. V. <contact@kitodo.org>\n+ *\n+ * This file is part of the Kitodo project.\n+ *\n+ * It is licensed under GNU General Public License version 3 or later.\n+ *\n+ * For the full copyright and license information, please read the\n+ * GPL3-License.txt file that was distributed with this source code.\n+ */\n+\n+package org.kitodo.production.services.data;\n+\n+import static com.xebialabs.restito.builder.stub.StubHttp.whenHttp;\n+import static com.xebialabs.restito.semantics.Action.contentType;\n+import static com.xebialabs.restito.semantics.Action.ok;\n+import static com.xebialabs.restito.semantics.Action.stringContent;\n+import static com.xebialabs.restito.semantics.Condition.get;\n+import static com.xebialabs.restito.semantics.Condition.parameter;\n+import static org.awaitility.Awaitility.await;\n+\n+import com.xebialabs.restito.server.StubServer;\n+\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kitodo.MockDatabase;\n+import org.kitodo.SecurityTestUtils;\n+import org.kitodo.data.database.beans.Process;\n+import org.kitodo.production.services.ServiceManager;\n+\n+public class ImportServiceIT {\n+\n+    private static final ProcessService processService = ServiceManager.getProcessService();\n+    private static final ImportService importService = ServiceManager.getImportService();\n+    private static StubServer server;\n+    private static final String TEST_FILE_PATH = \"src/test/resources/sruTestRecord.xml\";\n+    private static final String RECORD_ID = \"12345\";\n+    private static final int PORT = 8888;\n+    private static final String firstProcess = \"First process\";\n+\n+    @BeforeClass\n+    public static void prepareDatabase() throws Exception {\n+        MockDatabase.startNode();\n+        MockDatabase.insertProcessesFull();\n+        MockDatabase.insertProcessesForHierarchyTests();\n+        MockDatabase.setUpAwaitility();\n+        SecurityTestUtils.addUserDataToSecurityContext(ServiceManager.getUserService().getById(1), 1);\n+        await().untilTrue(new AtomicBoolean(Objects.nonNull(processService.findByTitle(firstProcess))));\n+        server = new StubServer(PORT).run();\n+        try (InputStream inputStream = Files.newInputStream(Paths.get(TEST_FILE_PATH))) {\n+            setupServer(IOUtils.toString(inputStream, StandardCharsets.UTF_8));\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void cleanDatabase() throws Exception {\n+        MockDatabase.stopNode();\n+        MockDatabase.cleanDatabase();\n+        server.stop();\n+    }\n+\n+    @Test\n+    public void testImportProcess() throws Exception {\n+        Assert.assertEquals(\"Not the correct amount of processes found\",(long) 7, (long) processService.count());\n+        Process importedProcess = importService.importProcess(RECORD_ID, 1, 1, \"K10Plus\");\n+\n+        Assert.assertEquals(\"WrongProcessTitle\", \"Kitodo_\" + RECORD_ID, importedProcess.getTitle());\n+        Assert.assertEquals(\"Wrong project used\", 1, (long) importedProcess.getProject().getId());\n+        Assert.assertEquals(\"Wrong template used\", 1, (long) importedProcess.getTemplate().getId());\n+        Assert.assertEquals(\"Not the correct amount of processes found\",(long) 8, (long) processService.count());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ea0120b72799c66fbf52e69181f70ba506e77a"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDMzNzMyOnYy", "diffSide": "RIGHT", "path": "Kitodo/src/main/webapp/WEB-INF/templates/includes/massImport/fileMassImport.xhtml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTo0ODo1MVrOF_joXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTo0ODo1MVrOF_joXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4ODM4MA==", "bodyText": "Would it be possible to deactivate the Upload button until a valid OPAC is selected? At the moment, selecting a CSV file and clicking the Upload button without selecting a catalog causes a ConfigException in the backend but no feedback is send to the user on the frontend:\norg.kitodo.exceptions.ConfigException: The catalog 'null' is not found!\n\tat org.kitodo.config.OPACConfig.getCatalog(OPACConfig.java:226)\n\nEdit: if deactivating the buttons turns out to be impossible, at least the message of the config exception should be displayed to the user, so he knows that he has to select a catalog before starting the import.", "url": "https://github.com/kitodo/kitodo-production/pull/3290#discussion_r402188380", "createdAt": "2020-04-02T09:48:51Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/webapp/WEB-INF/templates/includes/massImport/fileMassImport.xhtml", "diffHunk": "@@ -23,11 +23,11 @@\n         <p:outputLabel for=\"catalogueSelect\"\n                        value=\"#{msgs['newProcess.catalogueSearch.catalogue']}\"/>\n         <p:selectOneMenu id=\"catalogueSelect\"\n-                         immediate=\"true\"\n                          value=\"#{MassImportForm.selectedCatalog}\">\n             <f:selectItem itemValue=\"#{null}\" itemLabel=\"-- #{msgs.selectCatalog} --\" noSelectionOption=\"true\"/>\n-            <f:selectItems value=\"#{CreateProcessForm.importTab.catalogs}\" var=\"step\" itemLabel=\"#{step}\"\n-                           itemValue=\"#{step}\"/>\n+            <f:selectItems value=\"#{CreateProcessForm.importTab.catalogs}\" var=\"catalog\" itemLabel=\"#{catalog}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ea0120b72799c66fbf52e69181f70ba506e77a"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDM0NzQ2OnYy", "diffSide": "LEFT", "path": "Kitodo/src/main/webapp/WEB-INF/templates/includes/massImport/textMassImport.xhtml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTo1MTo1MlrOF_ju8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTo1MTo1MlrOF_ju8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE5MDA2Nw==", "bodyText": "Same problem as above, but in this case in addition to the ConfigException in the backend, the user only sees a white page if he didn't select a valid OPAC:\norg.kitodo.exceptions.ConfigException: The catalog '' is not found!\n\tat org.kitodo.config.OPACConfig.getCatalog(OPACConfig.java:226)\n\nAdditionally, the Mass import button here should also be deactivated if the text input field is empty.\nEdit: if deactivating the buttons turns out to be impossible, at least the message of the config exception should be displayed to the user, so he knows that he has to select a catalog before starting the import.", "url": "https://github.com/kitodo/kitodo-production/pull/3290#discussion_r402190067", "createdAt": "2020-04-02T09:51:52Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/webapp/WEB-INF/templates/includes/massImport/textMassImport.xhtml", "diffHunk": "@@ -23,11 +23,11 @@\n                     <p:outputLabel for=\"catalogueSelect\"\n                                    value=\"#{msgs['newProcess.catalogueSearch.catalogue']}\"/>\n                     <p:selectOneMenu id=\"catalogueSelect\"\n-                                     immediate=\"true\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ea0120b72799c66fbf52e69181f70ba506e77a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODc2NDk3OnYy", "diffSide": "RIGHT", "path": "Kitodo/src/main/java/org/kitodo/production/forms/MassImportForm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOTozMTo0NFrOGANzSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOTozMTo0NFrOGANzSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3OTMwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return StringUtils.isBlank(ppnString)? null : ppnString;\n          \n          \n            \n                    return StringUtils.isBlank(ppnString) ? null : ppnString;", "url": "https://github.com/kitodo/kitodo-production/pull/3290#discussion_r402879304", "createdAt": "2020-04-03T09:31:44Z", "author": {"login": "solth"}, "path": "Kitodo/src/main/java/org/kitodo/production/forms/MassImportForm.java", "diffHunk": "@@ -142,7 +154,7 @@ public void setFile(UploadedFile file) {\n      * @return value of ppnString\n      */\n     public String getPpnString() {\n-        return ppnString;\n+        return StringUtils.isBlank(ppnString)? null : ppnString;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454023500c900eb946dec4c25b13df0981f07e39"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4020, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}