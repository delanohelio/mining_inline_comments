{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNDg2OTk1", "number": 677, "title": "ovsdb2ddlog: Encode optional columns as Option<>.", "bodyText": "OVSDB columns representing sets are normally encoded as a DDlog sets.\nHowever in the special case where column's multiplicity bounds are min: 0 an\nmax: 1, Option<> is a more natural representation.  This commit\nimplements this optimization.\nBut now we have to deal with the complication that the Rust code that\nconverts OVSDB JSON to DDlog records must correctly deserialize\narrays into Option<>.  This code is agnostic of the OVSDB schema and\ncannot easily tell what the target type is.  We therefore change the\nFromRecord implementation for Option<> to handle this case.  This in\nturn required adding a new attributes #[custom_from_record] to\noverride the autogenerated implementation of FromRecord created by\nDDlog.", "createdAt": "2020-05-24T23:39:28Z", "url": "https://github.com/vmware/differential-datalog/pull/677", "merged": true, "mergeCommit": {"oid": "2f127b7f47a8ae808a35b2e364a4222b3a5f55b5"}, "closed": true, "closedAt": "2020-05-26T14:55:00Z", "author": {"login": "ryzhyk"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcj6HdCAH2gAyNDIyNDg2OTk1OjQ0ZTZlOTc3YzE2MDM2Yzk3NjAwZjg4OWNjY2Q1MjVjNjAwOGUwYTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclF6e2gBqjMzNzM5NDY1MjY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "44e6e977c16036c97600f889cccd525c6008e0a5", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/44e6e977c16036c97600f889cccd525c6008e0a5", "committedDate": "2020-05-22T22:36:04Z", "message": "All OVN tests pass with the latest fixes to northd."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3OTM2NDI2", "url": "https://github.com/vmware/differential-datalog/pull/677#pullrequestreview-417936426", "createdAt": "2020-05-26T02:38:02Z", "commit": {"oid": "3619726f603f1ecb4439bf0b256d64107d23e3e3"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMjozODowMlrOGaM8Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMjo0MTowN1rOGaM-VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyODE2Mg==", "bodyText": "it would be nice if the signature of this implementation was documented someplace.", "url": "https://github.com/vmware/differential-datalog/pull/677#discussion_r430128162", "createdAt": "2020-05-26T02:38:02Z", "author": {"login": "mbudiu-vmw"}, "path": "src/Language/DifferentialDatalog/Attribute.hs", "diffHunk": "@@ -157,6 +164,23 @@ tdefGetCustomSerdeAttr d tdef =\n          Left e  -> error e\n          Right b -> b\n \n+{- 'custom_from_record' attribute: Tells DDlog not to generate `FromRecord`\n+ - implementation for a type.  The user must write their own implementations in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3619726f603f1ecb4439bf0b256d64107d23e3e3"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyODM0NQ==", "bodyText": "I would add here a comment indicating what this means: the implementation must be given in the corresponding rust file, and it must have two functions with some signatures.", "url": "https://github.com/vmware/differential-datalog/pull/677#discussion_r430128345", "createdAt": "2020-05-26T02:39:07Z", "author": {"login": "mbudiu-vmw"}, "path": "lib/std.dl", "diffHunk": "@@ -80,6 +80,7 @@ extern function pow32(base:'A, exp: bit<32>): 'A\n  */\n \n #[rust=\"serde(from=\\\"Option<A>\\\", into=\\\"Option<A>\\\", bound(serialize=\\\"A: Clone+Serialize\\\"))\"]\n+#[custom_from_record]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3619726f603f1ecb4439bf0b256d64107d23e3e3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyODUxNw==", "bodyText": "it's in fact trickier, because the implementation has to know about this Record type. So then that has to be documented someplace.", "url": "https://github.com/vmware/differential-datalog/pull/677#discussion_r430128517", "createdAt": "2020-05-26T02:40:07Z", "author": {"login": "mbudiu-vmw"}, "path": "lib/std.rs", "diffHunk": "@@ -145,6 +145,62 @@ impl<T> From<std_Option<T>> for Option<T> {\n     }\n }\n \n+impl<A: record::FromRecord + serde::de::DeserializeOwned + Default> record::FromRecord\n+    for std_Option<A>\n+{\n+    fn from_record(val: &record::Record) -> result::Result<Self, String> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3619726f603f1ecb4439bf0b256d64107d23e3e3"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyODcyNQ==", "bodyText": "what about other collections?", "url": "https://github.com/vmware/differential-datalog/pull/677#discussion_r430128725", "createdAt": "2020-05-26T02:41:07Z", "author": {"login": "mbudiu-vmw"}, "path": "lib/std.rs", "diffHunk": "@@ -145,6 +145,62 @@ impl<T> From<std_Option<T>> for Option<T> {\n     }\n }\n \n+impl<A: record::FromRecord + serde::de::DeserializeOwned + Default> record::FromRecord\n+    for std_Option<A>\n+{\n+    fn from_record(val: &record::Record) -> result::Result<Self, String> {\n+        match val {\n+            record::Record::PosStruct(constr, args) => match constr.as_ref() {\n+                \"std.None\" if args.len() == 0 => Ok(std_Option::std_None {}),\n+                \"std.Some\" if args.len() == 1 => Ok(std_Option::std_Some {\n+                    x: <A>::from_record(&args[0])?,\n+                }),\n+                c => result::Result::Err(format!(\n+                    \"unknown constructor {} of type std_Option in {:?}\",\n+                    c, *val\n+                )),\n+            },\n+            record::Record::NamedStruct(constr, args) => match constr.as_ref() {\n+                \"std.None\" => Ok(std_Option::std_None {}),\n+                \"std.Some\" => Ok(std_Option::std_Some {\n+                    x: record::arg_extract::<A>(args, \"x\")?,\n+                }),\n+                c => result::Result::Err(format!(\n+                    \"unknown constructor {} of type std_Option in {:?}\",\n+                    c, *val\n+                )),\n+            },\n+            /* `Option` encoded as an array of size 0 or 1.  This is, for instance, useful when\n+             * interfacing with OVSDB. */\n+            record::Record::Array(kind, records) => match (records.len()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3619726f603f1ecb4439bf0b256d64107d23e3e3"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09094a30089f30b9ab99a8ceed57beb99cecfbbb", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/09094a30089f30b9ab99a8ceed57beb99cecfbbb", "committedDate": "2020-05-26T14:54:30Z", "message": "ovsdb2ddlog: Encode optional columns as Option<>.\n\nResolves #676.\n\nOVSDB columns representing sets are normally encoded as a DDlog sets.\nHowever in the special case where column's multiplicity bounds are min: 0 an\nmax: 1, `Option<>` is a more natural representation.  This commit\nimplements this optimization.\n\nBut now we have to deal with the complication that the Rust code that\nconverts OVSDB JSON to DDlog records must correctly deserialize\narrays into `Option<>`.  This code is agnostic of the OVSDB schema and\ncannot easily tell what the target type is.  We therefore change the\n`FromRecord` implementation for `Option<>` to handle this case.  This in\nturn required adding a new attributes `#[custom_from_record]` to\noverride the autogenerated implementation of `FromRecord` created by\nDDlog."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3619726f603f1ecb4439bf0b256d64107d23e3e3", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/3619726f603f1ecb4439bf0b256d64107d23e3e3", "committedDate": "2020-05-24T23:35:10Z", "message": "ovsdb2ddlog: Encode optional columns as Option<>.\n\nResolves #676.\n\nOVSDB columns representing sets are normally encoded as a DDlog sets.\nHowever in the special case where column's multiplicity bounds are min: 0 an\nmax: 1, `Option<>` is a more natural representation.  This commit\nimplements this optimization.\n\nBut now we have to deal with the complication that the Rust code that\nconverts OVSDB JSON to DDlog records must correctly deserialize\narrays into `Option<>`.  This code is agnostic of the OVSDB schema and\ncannot easily tell what the target type is.  We therefore change the\n`FromRecord` implementation for `Option<>` to handle this case.  This in\nturn required adding a new attributes `#[custom_from_record]` to\noverride the autogenerated implementation of `FromRecord` created by\nDDlog."}, "afterCommit": {"oid": "09094a30089f30b9ab99a8ceed57beb99cecfbbb", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/09094a30089f30b9ab99a8ceed57beb99cecfbbb", "committedDate": "2020-05-26T14:54:30Z", "message": "ovsdb2ddlog: Encode optional columns as Option<>.\n\nResolves #676.\n\nOVSDB columns representing sets are normally encoded as a DDlog sets.\nHowever in the special case where column's multiplicity bounds are min: 0 an\nmax: 1, `Option<>` is a more natural representation.  This commit\nimplements this optimization.\n\nBut now we have to deal with the complication that the Rust code that\nconverts OVSDB JSON to DDlog records must correctly deserialize\narrays into `Option<>`.  This code is agnostic of the OVSDB schema and\ncannot easily tell what the target type is.  We therefore change the\n`FromRecord` implementation for `Option<>` to handle this case.  This in\nturn required adding a new attributes `#[custom_from_record]` to\noverride the autogenerated implementation of `FromRecord` created by\nDDlog."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4535, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}