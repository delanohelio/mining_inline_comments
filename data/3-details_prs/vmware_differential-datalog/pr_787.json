{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExMDEzOTQ0", "number": 787, "title": "Eliminate the `Value` wrapper around DDlog values.", "bodyText": "This commit eliminates the Value wrapper around DDlog types stored in\nrelations.  The wrapper was necessary in order to implement the\nDDValConvert trait for such types in order to convert them between\nnormal and type-erased representation.  This design was ugly and\nexpensive.  Most importantly, the wrapper was visible via the Rust API\nand required the user to type auto-generated struct names like\n__Tuple2__internment_Intern____Stringval_internment_Intern____Stringval.\nIn addition, auto-derived trait implementations for the wrapper types\n(especially serde traits) increased compilation time.  Finally, all of\nthis junk lived in a separate value crate that had to be imported by\nclients.\nAn alternative to the wrapper is to implement trait DDlogConvert for\nthe actual DDlog types rather than wrapping them, which is tricky due to\nRust's orphan rules: a trait must be implemented either in the crate\nthat declares the trait (in this case, differential_datalog) or in the\ncrate that declares the implementing type.  This does not work for\ntuples: since DDlogConvert can not be implemented for a generic type,\nwe cannot provide generic implementations for all tuples in\ndifferential_datalog.  On the other hand, we also cannot implement it\nin the types crate, since tuples are a builtin Rust type.\nThe workaround is to replace tuples with custom tuple structs\ntuple2<T1,T2>, tuple3<T1,T2,T3>.  We already declare those in the\ntypes crate, but previously only used them for tuples with >12 fields,\nfor which Rust does not implement the various crates we care about.  So\nthe only change required was to map all DDlog tuple types to tupleN\ninstead of Rust tuples.  We also has to change a bunch of Rust libraries\nto work with this convention.\nWith this change, we can eliminate the Value wrapper and place all\nDDlogConvert implementations either in the differential_datalog\ncrate (for Rust types like uNN, iNN, String, bool, ...) or\nin the types crate.\nWe more remaining contents of the value crate to the top-level\ngenerated crate and get rid of value altogether.", "createdAt": "2020-10-27T19:47:21Z", "url": "https://github.com/vmware/differential-datalog/pull/787", "merged": true, "mergeCommit": {"oid": "56b0da1837d7ec8ea227873d0e129f5dfca179a1"}, "closed": true, "closedAt": "2020-10-27T23:02:44Z", "author": {"login": "ryzhyk"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWwHAgAFqTUxODE3NDE5OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWwZEwABqjM5Mjg0MzQ3NzA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MTc0MTk4", "url": "https://github.com/vmware/differential-datalog/pull/787#pullrequestreview-518174198", "createdAt": "2020-10-27T21:43:34Z", "commit": {"oid": "0b865c77752711b41ae54066d63b8d7cf1820629"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMTo0MzozNFrOHpSI7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMTo0MzozNFrOHpSI7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1MDg2MQ==", "bodyText": "forgot to delete a dash", "url": "https://github.com/vmware/differential-datalog/pull/787#discussion_r513050861", "createdAt": "2020-10-27T21:43:34Z", "author": {"login": "mbudiu-vmw"}, "path": "src/Language/DifferentialDatalog/Compile.hs", "diffHunk": "@@ -585,17 +573,15 @@ compile d_unoptimized specname modules rs_code toml_code dir crate_types = do\n -- * 'value' crate that declares relations and value types.\n -- * 'main' crate that contains rule definitions in Rust and imports the other two.\n --\n-compileLib :: (?cfg::Config) => DatalogProgram -> String -> [DatalogModule] -> M.Map ModuleName Doc -> (M.Map ModuleName Doc, Doc, Doc)\n-compileLib d specname modules rs_code = (typeLibAllFuncs, valueLib, mainLib)\n+compileLib :: (?cfg::Config) => DatalogProgram -> String -> [DatalogModule] -> M.Map ModuleName Doc -> (M.Map ModuleName Doc, Doc)\n+compileLib d specname modules rs_code = (typeLib, mainLib)\n     where\n     modules' = addMissingModules modules\n     statics = collectStatics d\n-    -- Start with empty modules, except the main module that contains statics\n-    -- declarations.\n+    -- Start with empty modules, except the main module that contains statics- declarations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b865c77752711b41ae54066d63b8d7cf1820629"}, "originalPosition": 91}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68ca9fb493c1bd35fe1c1d85532fb753c2de7a6b", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/68ca9fb493c1bd35fe1c1d85532fb753c2de7a6b", "committedDate": "2020-10-27T21:59:42Z", "message": "Eliminate the `Value` wrapper around DDlog values.\n\nThis commit eliminates the `Value` wrapper around DDlog types stored in\nrelations.  The wrapper was necessary in order to implement the\n`DDValConvert` trait for such types in order to convert them between\nnormal and type-erased representation.  This design was ugly and\nexpensive.  Most importantly, the wrapper was visible via the Rust API\nand required the user to type auto-generated struct names like\n`__Tuple2__internment_Intern____Stringval_internment_Intern____Stringval`.\nIn addition, auto-derived trait implementations for the wrapper types\n(especially serde traits) increased compilation time.  Finally, all of\nthis junk lived in a separate `value` crate that had to be imported by\nclients.\n\nAn alternative to the wrapper is to implement `trait DDlogConvert` for\nthe actual DDlog types rather than wrapping them, which is tricky due to\nRust's orphan rules: a trait must be implemented either in the crate\nthat declares the trait (in this case, `differential_datalog`) or in the\ncrate that declares the implementing type.  This does not work for\ntuples: since `DDlogConvert` can not be implemented for a generic type,\nwe cannot provide generic implementations for all tuples in\n`differential_datalog`.  On the other hand, we also cannot implement it\nin the `types` crate, since tuples are a builtin Rust type.\n\nThe workaround is to replace tuples with custom tuple structs\n`tuple2<T1,T2>`, `tuple3<T1,T2,T3>`.  We already declare those in the\n`types` crate, but previously only used them for tuples with >12 fields,\nfor which Rust does not implement the various crates we care about.  So\nthe only change required was to map all DDlog tuple types to `tupleN`\ninstead of Rust tuples.  We also has to change a bunch of Rust libraries\nto work with this convention.\n\nWith this change, we can eliminate the `Value` wrapper and place all\n`DDlogConvert` implementations either in the `differential_datalog`\ncrate (for Rust types like `uNN`, `iNN`, `String`, `bool`, ...) or\nin the `types` crate.\n\nWe more remaining contents of the `value` crate to the top-level\ngenerated crate and get rid of `value` altogether."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0b865c77752711b41ae54066d63b8d7cf1820629", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/0b865c77752711b41ae54066d63b8d7cf1820629", "committedDate": "2020-10-27T18:29:41Z", "message": "Eliminate the `Value` wrapper around DDlog values.\n\nThis commit eliminates the `Value` wrapper around DDlog types stored in\nrelations.  The wrapper was necessary in order to implement the\n`DDValConvert` trait for such types in order to convert them between\nnormal and type-erased representation.  This design was ugly and\nexpensive.  Most importantly, the wrapper was visible via the Rust API\nand required the user to type auto-generated struct names like\n`__Tuple2__internment_Intern____Stringval_internment_Intern____Stringval`.\nIn addition, auto-derived trait implementations for the wrapper types\n(especially serde traits) increased compilation time.  Finally, all of\nthis junk lived in a separate `value` crate that had to be imported by\nclients.\n\nAn alternative to the wrapper is to implement `trait DDlogConvert` for\nthe actual DDlog types rather than wrapping them, which is tricky due to\nRust's orphan rules: a trait must be implemented either in the crate\nthat declares the trait (in this case, `differential_datalog`) or in the\ncrate that declares the implementing type.  This does not work for\ntuples: since `DDlogConvert` can not be implemented for a generic type,\nwe cannot provide generic implementations for all tuples in\n`differential_datalog`.  On the other hand, we also cannot implement it\nin the `types` crate, since tuples are a builtin Rust type.\n\nThe workaround is to replace tuples with custom tuple structs\n`tuple2<T1,T2>`, `tuple3<T1,T2,T3>`.  We already declare those in the\n`types` crate, but previously only used them for tuples with >12 fields,\nfor which Rust does not implement the various crates we care about.  So\nthe only change required was to map all DDlog tuple types to `tupleN`\ninstead of Rust tuples.  We also has to change a bunch of Rust libraries\nto work with this convention.\n\nWith this change, we can eliminate the `Value` wrapper and place all\n`DDlogConvert` implementations either in the `differential_datalog`\ncrate (for Rust types like `uNN`, `iNN`, `String`, `bool`, ...) or\nin the `types` crate.\n\nWe more remaining contents of the `value` crate to the top-level\ngenerated crate and get rid of `value` altogether."}, "afterCommit": {"oid": "68ca9fb493c1bd35fe1c1d85532fb753c2de7a6b", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/68ca9fb493c1bd35fe1c1d85532fb753c2de7a6b", "committedDate": "2020-10-27T21:59:42Z", "message": "Eliminate the `Value` wrapper around DDlog values.\n\nThis commit eliminates the `Value` wrapper around DDlog types stored in\nrelations.  The wrapper was necessary in order to implement the\n`DDValConvert` trait for such types in order to convert them between\nnormal and type-erased representation.  This design was ugly and\nexpensive.  Most importantly, the wrapper was visible via the Rust API\nand required the user to type auto-generated struct names like\n`__Tuple2__internment_Intern____Stringval_internment_Intern____Stringval`.\nIn addition, auto-derived trait implementations for the wrapper types\n(especially serde traits) increased compilation time.  Finally, all of\nthis junk lived in a separate `value` crate that had to be imported by\nclients.\n\nAn alternative to the wrapper is to implement `trait DDlogConvert` for\nthe actual DDlog types rather than wrapping them, which is tricky due to\nRust's orphan rules: a trait must be implemented either in the crate\nthat declares the trait (in this case, `differential_datalog`) or in the\ncrate that declares the implementing type.  This does not work for\ntuples: since `DDlogConvert` can not be implemented for a generic type,\nwe cannot provide generic implementations for all tuples in\n`differential_datalog`.  On the other hand, we also cannot implement it\nin the `types` crate, since tuples are a builtin Rust type.\n\nThe workaround is to replace tuples with custom tuple structs\n`tuple2<T1,T2>`, `tuple3<T1,T2,T3>`.  We already declare those in the\n`types` crate, but previously only used them for tuples with >12 fields,\nfor which Rust does not implement the various crates we care about.  So\nthe only change required was to map all DDlog tuple types to `tupleN`\ninstead of Rust tuples.  We also has to change a bunch of Rust libraries\nto work with this convention.\n\nWith this change, we can eliminate the `Value` wrapper and place all\n`DDlogConvert` implementations either in the `differential_datalog`\ncrate (for Rust types like `uNN`, `iNN`, `String`, `bool`, ...) or\nin the `types` crate.\n\nWe more remaining contents of the `value` crate to the top-level\ngenerated crate and get rid of `value` altogether."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4417, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}