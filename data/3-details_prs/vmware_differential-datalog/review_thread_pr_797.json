{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0OTk3NDMz", "number": 797, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjowOTo0OVrOE0_7SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjoxNjoxMVrOE1ACiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDA4Nzc3OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/com/vmware/ddlog/DDlogJooqProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjowOTo0OVrOHtCPYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjowOTo0OVrOHtCPYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4NDY3NQ==", "bodyText": "Your SQL parser is a bit rudimentary.\nMaybe you want to call this function executeSelectStar", "url": "https://github.com/vmware/differential-datalog/pull/797#discussion_r516984675", "createdAt": "2020-11-03T22:09:49Z", "author": {"login": "mbudiu-vmw"}, "path": "sql/src/main/java/com/vmware/ddlog/DDlogJooqProvider.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2018-2020 VMware, Inc. All Rights Reserved.\n+ * SPDX-License-Identifier: BSD-2\n+ */\n+package com.vmware.ddlog;\n+\n+import ddlogapi.DDlogAPI;\n+import ddlogapi.DDlogException;\n+import ddlogapi.DDlogRecord;\n+import org.jooq.DSLContext;\n+import org.jooq.Field;\n+import org.jooq.Record;\n+import org.jooq.Result;\n+import org.jooq.Table;\n+import org.jooq.impl.DSL;\n+import org.jooq.tools.jdbc.MockDataProvider;\n+import org.jooq.tools.jdbc.MockExecuteContext;\n+import org.jooq.tools.jdbc.MockResult;\n+\n+import javax.annotation.Nullable;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class DDlogJooqProvider implements MockDataProvider {\n+    private static final String INTEGER_TYPE = \"java.lang.Integer\";\n+    private static final String STRING_TYPE = \"java.lang.String\";\n+    private static final String BOOLEAN_TYPE = \"java.lang.Boolean\";\n+    private static final String LONG_TYPE = \"java.lang.Long\";\n+\n+    private final DDlogAPI dDlogAPI;\n+    private final DSLContext dslContext;\n+    private final Map<String, List<Field<?>>> tables = new HashMap<>();\n+\n+    public DDlogJooqProvider(final DDlogAPI dDlogAPI, final List<String> sqlStatements) {\n+        this.dDlogAPI = dDlogAPI;\n+        dslContext = DSL.using(\"jdbc:h2:mem:\");\n+        for (final String sql : sqlStatements) {\n+            dslContext.execute(sql);\n+        }\n+        for (final Table<?> table: dslContext.meta().getTables()) {\n+            if (table.getSchema().getName().equals(\"PUBLIC\")) {\n+                tables.put(table.getName(), Arrays.asList(table.fields()));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public MockResult[] execute(final MockExecuteContext ctx) throws SQLException {\n+        final MockResult[] mock = new MockResult[1];\n+        // The execute context contains SQL string(s), bind values, and other meta-data\n+        final String sql = ctx.sql();\n+\n+        if (sql.toUpperCase().startsWith(\"SELECT\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44d7499b26645c18e242f8029ff1f61904ebf10f"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDA4ODczOnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/com/vmware/ddlog/DDlogJooqProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjoxMDoxMlrOHtCP9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjoxMDoxMlrOHtCP9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4NDgyMg==", "bodyText": "You are not checking that the select expression is *.", "url": "https://github.com/vmware/differential-datalog/pull/797#discussion_r516984822", "createdAt": "2020-11-03T22:10:12Z", "author": {"login": "mbudiu-vmw"}, "path": "sql/src/main/java/com/vmware/ddlog/DDlogJooqProvider.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2018-2020 VMware, Inc. All Rights Reserved.\n+ * SPDX-License-Identifier: BSD-2\n+ */\n+package com.vmware.ddlog;\n+\n+import ddlogapi.DDlogAPI;\n+import ddlogapi.DDlogException;\n+import ddlogapi.DDlogRecord;\n+import org.jooq.DSLContext;\n+import org.jooq.Field;\n+import org.jooq.Record;\n+import org.jooq.Result;\n+import org.jooq.Table;\n+import org.jooq.impl.DSL;\n+import org.jooq.tools.jdbc.MockDataProvider;\n+import org.jooq.tools.jdbc.MockExecuteContext;\n+import org.jooq.tools.jdbc.MockResult;\n+\n+import javax.annotation.Nullable;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class DDlogJooqProvider implements MockDataProvider {\n+    private static final String INTEGER_TYPE = \"java.lang.Integer\";\n+    private static final String STRING_TYPE = \"java.lang.String\";\n+    private static final String BOOLEAN_TYPE = \"java.lang.Boolean\";\n+    private static final String LONG_TYPE = \"java.lang.Long\";\n+\n+    private final DDlogAPI dDlogAPI;\n+    private final DSLContext dslContext;\n+    private final Map<String, List<Field<?>>> tables = new HashMap<>();\n+\n+    public DDlogJooqProvider(final DDlogAPI dDlogAPI, final List<String> sqlStatements) {\n+        this.dDlogAPI = dDlogAPI;\n+        dslContext = DSL.using(\"jdbc:h2:mem:\");\n+        for (final String sql : sqlStatements) {\n+            dslContext.execute(sql);\n+        }\n+        for (final Table<?> table: dslContext.meta().getTables()) {\n+            if (table.getSchema().getName().equals(\"PUBLIC\")) {\n+                tables.put(table.getName(), Arrays.asList(table.fields()));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public MockResult[] execute(final MockExecuteContext ctx) throws SQLException {\n+        final MockResult[] mock = new MockResult[1];\n+        // The execute context contains SQL string(s), bind values, and other meta-data\n+        final String sql = ctx.sql();\n+\n+        if (sql.toUpperCase().startsWith(\"SELECT\")) {\n+            final String[] s = ctx.sql().toUpperCase().split(\" \");\n+            if (!s[s.length - 2].equals(\"FROM\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44d7499b26645c18e242f8029ff1f61904ebf10f"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDA4OTM3OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/com/vmware/ddlog/DDlogJooqProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjoxMDoyMlrOHtCQUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjoxMDoyMlrOHtCQUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4NDkxNA==", "bodyText": "This could be null.", "url": "https://github.com/vmware/differential-datalog/pull/797#discussion_r516984914", "createdAt": "2020-11-03T22:10:22Z", "author": {"login": "mbudiu-vmw"}, "path": "sql/src/main/java/com/vmware/ddlog/DDlogJooqProvider.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2018-2020 VMware, Inc. All Rights Reserved.\n+ * SPDX-License-Identifier: BSD-2\n+ */\n+package com.vmware.ddlog;\n+\n+import ddlogapi.DDlogAPI;\n+import ddlogapi.DDlogException;\n+import ddlogapi.DDlogRecord;\n+import org.jooq.DSLContext;\n+import org.jooq.Field;\n+import org.jooq.Record;\n+import org.jooq.Result;\n+import org.jooq.Table;\n+import org.jooq.impl.DSL;\n+import org.jooq.tools.jdbc.MockDataProvider;\n+import org.jooq.tools.jdbc.MockExecuteContext;\n+import org.jooq.tools.jdbc.MockResult;\n+\n+import javax.annotation.Nullable;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class DDlogJooqProvider implements MockDataProvider {\n+    private static final String INTEGER_TYPE = \"java.lang.Integer\";\n+    private static final String STRING_TYPE = \"java.lang.String\";\n+    private static final String BOOLEAN_TYPE = \"java.lang.Boolean\";\n+    private static final String LONG_TYPE = \"java.lang.Long\";\n+\n+    private final DDlogAPI dDlogAPI;\n+    private final DSLContext dslContext;\n+    private final Map<String, List<Field<?>>> tables = new HashMap<>();\n+\n+    public DDlogJooqProvider(final DDlogAPI dDlogAPI, final List<String> sqlStatements) {\n+        this.dDlogAPI = dDlogAPI;\n+        dslContext = DSL.using(\"jdbc:h2:mem:\");\n+        for (final String sql : sqlStatements) {\n+            dslContext.execute(sql);\n+        }\n+        for (final Table<?> table: dslContext.meta().getTables()) {\n+            if (table.getSchema().getName().equals(\"PUBLIC\")) {\n+                tables.put(table.getName(), Arrays.asList(table.fields()));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public MockResult[] execute(final MockExecuteContext ctx) throws SQLException {\n+        final MockResult[] mock = new MockResult[1];\n+        // The execute context contains SQL string(s), bind values, and other meta-data\n+        final String sql = ctx.sql();\n+\n+        if (sql.toUpperCase().startsWith(\"SELECT\")) {\n+            final String[] s = ctx.sql().toUpperCase().split(\" \");\n+            if (!s[s.length - 2].equals(\"FROM\")) {\n+                throw new SQLException(\"Statement not supported: \" + sql);\n+            }\n+            final String tableName = s[s.length - 1];\n+            final List<Field<?>> fields = tables.get(tableName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44d7499b26645c18e242f8029ff1f61904ebf10f"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDA5MzQ2OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/com/vmware/ddlog/DDlogJooqProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjoxMTo1MVrOHtCS2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjo0MDoxOFrOHtDBhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4NTU2MQ==", "bodyText": "Assert that the size is the same?", "url": "https://github.com/vmware/differential-datalog/pull/797#discussion_r516985561", "createdAt": "2020-11-03T22:11:51Z", "author": {"login": "mbudiu-vmw"}, "path": "sql/src/main/java/com/vmware/ddlog/DDlogJooqProvider.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2018-2020 VMware, Inc. All Rights Reserved.\n+ * SPDX-License-Identifier: BSD-2\n+ */\n+package com.vmware.ddlog;\n+\n+import ddlogapi.DDlogAPI;\n+import ddlogapi.DDlogException;\n+import ddlogapi.DDlogRecord;\n+import org.jooq.DSLContext;\n+import org.jooq.Field;\n+import org.jooq.Record;\n+import org.jooq.Result;\n+import org.jooq.Table;\n+import org.jooq.impl.DSL;\n+import org.jooq.tools.jdbc.MockDataProvider;\n+import org.jooq.tools.jdbc.MockExecuteContext;\n+import org.jooq.tools.jdbc.MockResult;\n+\n+import javax.annotation.Nullable;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class DDlogJooqProvider implements MockDataProvider {\n+    private static final String INTEGER_TYPE = \"java.lang.Integer\";\n+    private static final String STRING_TYPE = \"java.lang.String\";\n+    private static final String BOOLEAN_TYPE = \"java.lang.Boolean\";\n+    private static final String LONG_TYPE = \"java.lang.Long\";\n+\n+    private final DDlogAPI dDlogAPI;\n+    private final DSLContext dslContext;\n+    private final Map<String, List<Field<?>>> tables = new HashMap<>();\n+\n+    public DDlogJooqProvider(final DDlogAPI dDlogAPI, final List<String> sqlStatements) {\n+        this.dDlogAPI = dDlogAPI;\n+        dslContext = DSL.using(\"jdbc:h2:mem:\");\n+        for (final String sql : sqlStatements) {\n+            dslContext.execute(sql);\n+        }\n+        for (final Table<?> table: dslContext.meta().getTables()) {\n+            if (table.getSchema().getName().equals(\"PUBLIC\")) {\n+                tables.put(table.getName(), Arrays.asList(table.fields()));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public MockResult[] execute(final MockExecuteContext ctx) throws SQLException {\n+        final MockResult[] mock = new MockResult[1];\n+        // The execute context contains SQL string(s), bind values, and other meta-data\n+        final String sql = ctx.sql();\n+\n+        if (sql.toUpperCase().startsWith(\"SELECT\")) {\n+            final String[] s = ctx.sql().toUpperCase().split(\" \");\n+            if (!s[s.length - 2].equals(\"FROM\")) {\n+                throw new SQLException(\"Statement not supported: \" + sql);\n+            }\n+            final String tableName = s[s.length - 1];\n+            final List<Field<?>> fields = tables.get(tableName);\n+            final Result<Record> result = dslContext.newResult(fields);\n+            try {\n+                dDlogAPI.dumpTable(\"R\" + tableName.toLowerCase(), (record, l) -> {\n+                    final Record jooqRecord = dslContext.newRecord(fields);\n+                    final Object[] returnValue = new Object[fields.size()];\n+                    for (int i = 0; i < fields.size(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44d7499b26645c18e242f8029ff1f61904ebf10f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5NTIwNw==", "bodyText": "What's the correct way to query the size of the ddlog record? I see record.getStructField(int i), but it does not say how many fields the struct has.", "url": "https://github.com/vmware/differential-datalog/pull/797#discussion_r516995207", "createdAt": "2020-11-03T22:34:29Z", "author": {"login": "lalithsuresh"}, "path": "sql/src/main/java/com/vmware/ddlog/DDlogJooqProvider.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2018-2020 VMware, Inc. All Rights Reserved.\n+ * SPDX-License-Identifier: BSD-2\n+ */\n+package com.vmware.ddlog;\n+\n+import ddlogapi.DDlogAPI;\n+import ddlogapi.DDlogException;\n+import ddlogapi.DDlogRecord;\n+import org.jooq.DSLContext;\n+import org.jooq.Field;\n+import org.jooq.Record;\n+import org.jooq.Result;\n+import org.jooq.Table;\n+import org.jooq.impl.DSL;\n+import org.jooq.tools.jdbc.MockDataProvider;\n+import org.jooq.tools.jdbc.MockExecuteContext;\n+import org.jooq.tools.jdbc.MockResult;\n+\n+import javax.annotation.Nullable;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class DDlogJooqProvider implements MockDataProvider {\n+    private static final String INTEGER_TYPE = \"java.lang.Integer\";\n+    private static final String STRING_TYPE = \"java.lang.String\";\n+    private static final String BOOLEAN_TYPE = \"java.lang.Boolean\";\n+    private static final String LONG_TYPE = \"java.lang.Long\";\n+\n+    private final DDlogAPI dDlogAPI;\n+    private final DSLContext dslContext;\n+    private final Map<String, List<Field<?>>> tables = new HashMap<>();\n+\n+    public DDlogJooqProvider(final DDlogAPI dDlogAPI, final List<String> sqlStatements) {\n+        this.dDlogAPI = dDlogAPI;\n+        dslContext = DSL.using(\"jdbc:h2:mem:\");\n+        for (final String sql : sqlStatements) {\n+            dslContext.execute(sql);\n+        }\n+        for (final Table<?> table: dslContext.meta().getTables()) {\n+            if (table.getSchema().getName().equals(\"PUBLIC\")) {\n+                tables.put(table.getName(), Arrays.asList(table.fields()));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public MockResult[] execute(final MockExecuteContext ctx) throws SQLException {\n+        final MockResult[] mock = new MockResult[1];\n+        // The execute context contains SQL string(s), bind values, and other meta-data\n+        final String sql = ctx.sql();\n+\n+        if (sql.toUpperCase().startsWith(\"SELECT\")) {\n+            final String[] s = ctx.sql().toUpperCase().split(\" \");\n+            if (!s[s.length - 2].equals(\"FROM\")) {\n+                throw new SQLException(\"Statement not supported: \" + sql);\n+            }\n+            final String tableName = s[s.length - 1];\n+            final List<Field<?>> fields = tables.get(tableName);\n+            final Result<Record> result = dslContext.newResult(fields);\n+            try {\n+                dDlogAPI.dumpTable(\"R\" + tableName.toLowerCase(), (record, l) -> {\n+                    final Record jooqRecord = dslContext.newRecord(fields);\n+                    final Object[] returnValue = new Object[fields.size()];\n+                    for (int i = 0; i < fields.size(); i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4NTU2MQ=="}, "originalCommit": {"oid": "44d7499b26645c18e242f8029ff1f61904ebf10f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5NzUxMA==", "bodyText": "In a sense, it'd be an internal error (ddlog or our sql-to-ddlog compiler) for record.<size()> to not be equal to fields.size(). And if it is not the case, we'll correctly get an out of bounds exception. Seems excessive to check every record in dumpTable() for their size. Am I missing something?", "url": "https://github.com/vmware/differential-datalog/pull/797#discussion_r516997510", "createdAt": "2020-11-03T22:40:18Z", "author": {"login": "lalithsuresh"}, "path": "sql/src/main/java/com/vmware/ddlog/DDlogJooqProvider.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2018-2020 VMware, Inc. All Rights Reserved.\n+ * SPDX-License-Identifier: BSD-2\n+ */\n+package com.vmware.ddlog;\n+\n+import ddlogapi.DDlogAPI;\n+import ddlogapi.DDlogException;\n+import ddlogapi.DDlogRecord;\n+import org.jooq.DSLContext;\n+import org.jooq.Field;\n+import org.jooq.Record;\n+import org.jooq.Result;\n+import org.jooq.Table;\n+import org.jooq.impl.DSL;\n+import org.jooq.tools.jdbc.MockDataProvider;\n+import org.jooq.tools.jdbc.MockExecuteContext;\n+import org.jooq.tools.jdbc.MockResult;\n+\n+import javax.annotation.Nullable;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class DDlogJooqProvider implements MockDataProvider {\n+    private static final String INTEGER_TYPE = \"java.lang.Integer\";\n+    private static final String STRING_TYPE = \"java.lang.String\";\n+    private static final String BOOLEAN_TYPE = \"java.lang.Boolean\";\n+    private static final String LONG_TYPE = \"java.lang.Long\";\n+\n+    private final DDlogAPI dDlogAPI;\n+    private final DSLContext dslContext;\n+    private final Map<String, List<Field<?>>> tables = new HashMap<>();\n+\n+    public DDlogJooqProvider(final DDlogAPI dDlogAPI, final List<String> sqlStatements) {\n+        this.dDlogAPI = dDlogAPI;\n+        dslContext = DSL.using(\"jdbc:h2:mem:\");\n+        for (final String sql : sqlStatements) {\n+            dslContext.execute(sql);\n+        }\n+        for (final Table<?> table: dslContext.meta().getTables()) {\n+            if (table.getSchema().getName().equals(\"PUBLIC\")) {\n+                tables.put(table.getName(), Arrays.asList(table.fields()));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public MockResult[] execute(final MockExecuteContext ctx) throws SQLException {\n+        final MockResult[] mock = new MockResult[1];\n+        // The execute context contains SQL string(s), bind values, and other meta-data\n+        final String sql = ctx.sql();\n+\n+        if (sql.toUpperCase().startsWith(\"SELECT\")) {\n+            final String[] s = ctx.sql().toUpperCase().split(\" \");\n+            if (!s[s.length - 2].equals(\"FROM\")) {\n+                throw new SQLException(\"Statement not supported: \" + sql);\n+            }\n+            final String tableName = s[s.length - 1];\n+            final List<Field<?>> fields = tables.get(tableName);\n+            final Result<Record> result = dslContext.newResult(fields);\n+            try {\n+                dDlogAPI.dumpTable(\"R\" + tableName.toLowerCase(), (record, l) -> {\n+                    final Record jooqRecord = dslContext.newRecord(fields);\n+                    final Object[] returnValue = new Object[fields.size()];\n+                    for (int i = 0; i < fields.size(); i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4NTU2MQ=="}, "originalCommit": {"oid": "44d7499b26645c18e242f8029ff1f61904ebf10f"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDA5NjQyOnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/com/vmware/ddlog/DDlogJooqProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjoxMjo1MFrOHtCUlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjoxODoxMFrOHtCdeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4NjAwNQ==", "bodyText": "this does not look like the following one at all. Is it ddlog_std?", "url": "https://github.com/vmware/differential-datalog/pull/797#discussion_r516986005", "createdAt": "2020-11-03T22:12:50Z", "author": {"login": "mbudiu-vmw"}, "path": "sql/src/main/java/com/vmware/ddlog/DDlogJooqProvider.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2018-2020 VMware, Inc. All Rights Reserved.\n+ * SPDX-License-Identifier: BSD-2\n+ */\n+package com.vmware.ddlog;\n+\n+import ddlogapi.DDlogAPI;\n+import ddlogapi.DDlogException;\n+import ddlogapi.DDlogRecord;\n+import org.jooq.DSLContext;\n+import org.jooq.Field;\n+import org.jooq.Record;\n+import org.jooq.Result;\n+import org.jooq.Table;\n+import org.jooq.impl.DSL;\n+import org.jooq.tools.jdbc.MockDataProvider;\n+import org.jooq.tools.jdbc.MockExecuteContext;\n+import org.jooq.tools.jdbc.MockResult;\n+\n+import javax.annotation.Nullable;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class DDlogJooqProvider implements MockDataProvider {\n+    private static final String INTEGER_TYPE = \"java.lang.Integer\";\n+    private static final String STRING_TYPE = \"java.lang.String\";\n+    private static final String BOOLEAN_TYPE = \"java.lang.Boolean\";\n+    private static final String LONG_TYPE = \"java.lang.Long\";\n+\n+    private final DDlogAPI dDlogAPI;\n+    private final DSLContext dslContext;\n+    private final Map<String, List<Field<?>>> tables = new HashMap<>();\n+\n+    public DDlogJooqProvider(final DDlogAPI dDlogAPI, final List<String> sqlStatements) {\n+        this.dDlogAPI = dDlogAPI;\n+        dslContext = DSL.using(\"jdbc:h2:mem:\");\n+        for (final String sql : sqlStatements) {\n+            dslContext.execute(sql);\n+        }\n+        for (final Table<?> table: dslContext.meta().getTables()) {\n+            if (table.getSchema().getName().equals(\"PUBLIC\")) {\n+                tables.put(table.getName(), Arrays.asList(table.fields()));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public MockResult[] execute(final MockExecuteContext ctx) throws SQLException {\n+        final MockResult[] mock = new MockResult[1];\n+        // The execute context contains SQL string(s), bind values, and other meta-data\n+        final String sql = ctx.sql();\n+\n+        if (sql.toUpperCase().startsWith(\"SELECT\")) {\n+            final String[] s = ctx.sql().toUpperCase().split(\" \");\n+            if (!s[s.length - 2].equals(\"FROM\")) {\n+                throw new SQLException(\"Statement not supported: \" + sql);\n+            }\n+            final String tableName = s[s.length - 1];\n+            final List<Field<?>> fields = tables.get(tableName);\n+            final Result<Record> result = dslContext.newResult(fields);\n+            try {\n+                dDlogAPI.dumpTable(\"R\" + tableName.toLowerCase(), (record, l) -> {\n+                    final Record jooqRecord = dslContext.newRecord(fields);\n+                    final Object[] returnValue = new Object[fields.size()];\n+                    for (int i = 0; i < fields.size(); i++) {\n+                        returnValue[i] = structToValue(fields.get(i), record.getStructField(i));\n+                    }\n+                    jooqRecord.fromArray(returnValue);\n+                    result.add(jooqRecord);\n+                });\n+            } catch (final DDlogException e) {\n+                e.printStackTrace();\n+            }\n+            mock[0] = new MockResult(1, result);\n+        } else {\n+            // Exceptions are propagated through the JDBC and jOOQ APIs\n+            throw new SQLException(\"Statement not supported: \" + sql);\n+        }\n+        return mock;\n+    }\n+\n+    @Nullable\n+    private Object structToValue(final Field<?> field, final DDlogRecord record) {\n+        final Class<?> cls = field.getType();\n+        if (record.isStruct() && record.getStructName().equals(\"std.None\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44d7499b26645c18e242f8029ff1f61904ebf10f"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4ODI4MA==", "bodyText": "It's now called ddlog_std::None. std.None is from an old version of DDlog.", "url": "https://github.com/vmware/differential-datalog/pull/797#discussion_r516988280", "createdAt": "2020-11-03T22:18:10Z", "author": {"login": "ryzhyk"}, "path": "sql/src/main/java/com/vmware/ddlog/DDlogJooqProvider.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2018-2020 VMware, Inc. All Rights Reserved.\n+ * SPDX-License-Identifier: BSD-2\n+ */\n+package com.vmware.ddlog;\n+\n+import ddlogapi.DDlogAPI;\n+import ddlogapi.DDlogException;\n+import ddlogapi.DDlogRecord;\n+import org.jooq.DSLContext;\n+import org.jooq.Field;\n+import org.jooq.Record;\n+import org.jooq.Result;\n+import org.jooq.Table;\n+import org.jooq.impl.DSL;\n+import org.jooq.tools.jdbc.MockDataProvider;\n+import org.jooq.tools.jdbc.MockExecuteContext;\n+import org.jooq.tools.jdbc.MockResult;\n+\n+import javax.annotation.Nullable;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class DDlogJooqProvider implements MockDataProvider {\n+    private static final String INTEGER_TYPE = \"java.lang.Integer\";\n+    private static final String STRING_TYPE = \"java.lang.String\";\n+    private static final String BOOLEAN_TYPE = \"java.lang.Boolean\";\n+    private static final String LONG_TYPE = \"java.lang.Long\";\n+\n+    private final DDlogAPI dDlogAPI;\n+    private final DSLContext dslContext;\n+    private final Map<String, List<Field<?>>> tables = new HashMap<>();\n+\n+    public DDlogJooqProvider(final DDlogAPI dDlogAPI, final List<String> sqlStatements) {\n+        this.dDlogAPI = dDlogAPI;\n+        dslContext = DSL.using(\"jdbc:h2:mem:\");\n+        for (final String sql : sqlStatements) {\n+            dslContext.execute(sql);\n+        }\n+        for (final Table<?> table: dslContext.meta().getTables()) {\n+            if (table.getSchema().getName().equals(\"PUBLIC\")) {\n+                tables.put(table.getName(), Arrays.asList(table.fields()));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public MockResult[] execute(final MockExecuteContext ctx) throws SQLException {\n+        final MockResult[] mock = new MockResult[1];\n+        // The execute context contains SQL string(s), bind values, and other meta-data\n+        final String sql = ctx.sql();\n+\n+        if (sql.toUpperCase().startsWith(\"SELECT\")) {\n+            final String[] s = ctx.sql().toUpperCase().split(\" \");\n+            if (!s[s.length - 2].equals(\"FROM\")) {\n+                throw new SQLException(\"Statement not supported: \" + sql);\n+            }\n+            final String tableName = s[s.length - 1];\n+            final List<Field<?>> fields = tables.get(tableName);\n+            final Result<Record> result = dslContext.newResult(fields);\n+            try {\n+                dDlogAPI.dumpTable(\"R\" + tableName.toLowerCase(), (record, l) -> {\n+                    final Record jooqRecord = dslContext.newRecord(fields);\n+                    final Object[] returnValue = new Object[fields.size()];\n+                    for (int i = 0; i < fields.size(); i++) {\n+                        returnValue[i] = structToValue(fields.get(i), record.getStructField(i));\n+                    }\n+                    jooqRecord.fromArray(returnValue);\n+                    result.add(jooqRecord);\n+                });\n+            } catch (final DDlogException e) {\n+                e.printStackTrace();\n+            }\n+            mock[0] = new MockResult(1, result);\n+        } else {\n+            // Exceptions are propagated through the JDBC and jOOQ APIs\n+            throw new SQLException(\"Statement not supported: \" + sql);\n+        }\n+        return mock;\n+    }\n+\n+    @Nullable\n+    private Object structToValue(final Field<?> field, final DDlogRecord record) {\n+        final Class<?> cls = field.getType();\n+        if (record.isStruct() && record.getStructName().equals(\"std.None\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4NjAwNQ=="}, "originalCommit": {"oid": "44d7499b26645c18e242f8029ff1f61904ebf10f"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDEwMDI1OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/com/vmware/ddlog/DDlogJooqProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjoxNDowNFrOHtCWwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjozNjoxOFrOHtC7cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4NjU2MA==", "bodyText": "I don't know this Jooq stuff, but I would expect there's a way to mock just input tables, not statements, and then statements can run on these tables.", "url": "https://github.com/vmware/differential-datalog/pull/797#discussion_r516986560", "createdAt": "2020-11-03T22:14:04Z", "author": {"login": "mbudiu-vmw"}, "path": "sql/src/main/java/com/vmware/ddlog/DDlogJooqProvider.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2018-2020 VMware, Inc. All Rights Reserved.\n+ * SPDX-License-Identifier: BSD-2\n+ */\n+package com.vmware.ddlog;\n+\n+import ddlogapi.DDlogAPI;\n+import ddlogapi.DDlogException;\n+import ddlogapi.DDlogRecord;\n+import org.jooq.DSLContext;\n+import org.jooq.Field;\n+import org.jooq.Record;\n+import org.jooq.Result;\n+import org.jooq.Table;\n+import org.jooq.impl.DSL;\n+import org.jooq.tools.jdbc.MockDataProvider;\n+import org.jooq.tools.jdbc.MockExecuteContext;\n+import org.jooq.tools.jdbc.MockResult;\n+\n+import javax.annotation.Nullable;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class DDlogJooqProvider implements MockDataProvider {\n+    private static final String INTEGER_TYPE = \"java.lang.Integer\";\n+    private static final String STRING_TYPE = \"java.lang.String\";\n+    private static final String BOOLEAN_TYPE = \"java.lang.Boolean\";\n+    private static final String LONG_TYPE = \"java.lang.Long\";\n+\n+    private final DDlogAPI dDlogAPI;\n+    private final DSLContext dslContext;\n+    private final Map<String, List<Field<?>>> tables = new HashMap<>();\n+\n+    public DDlogJooqProvider(final DDlogAPI dDlogAPI, final List<String> sqlStatements) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44d7499b26645c18e242f8029ff1f61904ebf10f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5NTk1NQ==", "bodyText": "This affects the API a bit. Here, the user supplies the SQL statements to make a schema out of (and we extract the information we need it from it, like the mapping of table names to JOOQ Fields). The alternative is that the user supplies a JOOQ connection with the schema already initialized.", "url": "https://github.com/vmware/differential-datalog/pull/797#discussion_r516995955", "createdAt": "2020-11-03T22:36:18Z", "author": {"login": "lalithsuresh"}, "path": "sql/src/main/java/com/vmware/ddlog/DDlogJooqProvider.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2018-2020 VMware, Inc. All Rights Reserved.\n+ * SPDX-License-Identifier: BSD-2\n+ */\n+package com.vmware.ddlog;\n+\n+import ddlogapi.DDlogAPI;\n+import ddlogapi.DDlogException;\n+import ddlogapi.DDlogRecord;\n+import org.jooq.DSLContext;\n+import org.jooq.Field;\n+import org.jooq.Record;\n+import org.jooq.Result;\n+import org.jooq.Table;\n+import org.jooq.impl.DSL;\n+import org.jooq.tools.jdbc.MockDataProvider;\n+import org.jooq.tools.jdbc.MockExecuteContext;\n+import org.jooq.tools.jdbc.MockResult;\n+\n+import javax.annotation.Nullable;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class DDlogJooqProvider implements MockDataProvider {\n+    private static final String INTEGER_TYPE = \"java.lang.Integer\";\n+    private static final String STRING_TYPE = \"java.lang.String\";\n+    private static final String BOOLEAN_TYPE = \"java.lang.Boolean\";\n+    private static final String LONG_TYPE = \"java.lang.Long\";\n+\n+    private final DDlogAPI dDlogAPI;\n+    private final DSLContext dslContext;\n+    private final Map<String, List<Field<?>>> tables = new HashMap<>();\n+\n+    public DDlogJooqProvider(final DDlogAPI dDlogAPI, final List<String> sqlStatements) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4NjU2MA=="}, "originalCommit": {"oid": "44d7499b26645c18e242f8029ff1f61904ebf10f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDEwMzI4OnYy", "diffSide": "RIGHT", "path": "sql/src/test/java/ddlog/JooqProviderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjoxNTowOVrOHtCYpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjozNjoyOFrOHtC7sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4NzA0NA==", "bodyText": "Don't you want to insert everything in one transaction? Should be significantly more efficient.", "url": "https://github.com/vmware/differential-datalog/pull/797#discussion_r516987044", "createdAt": "2020-11-03T22:15:09Z", "author": {"login": "mbudiu-vmw"}, "path": "sql/src/test/java/ddlog/JooqProviderTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2018-2020 VMware, Inc. All Rights Reserved.\n+ * SPDX-License-Identifier: BSD-2\n+ */\n+package ddlog;\n+\n+import com.vmware.ddlog.DDlogJooqProvider;\n+import com.vmware.ddlog.ir.DDlogProgram;\n+import com.vmware.ddlog.translator.Translator;\n+import ddlogapi.DDlogAPI;\n+import ddlogapi.DDlogCommand;\n+import ddlogapi.DDlogException;\n+import ddlogapi.DDlogRecCommand;\n+import ddlogapi.DDlogRecord;\n+import org.jooq.DSLContext;\n+import org.jooq.Record;\n+import org.jooq.Result;\n+import org.jooq.impl.DSL;\n+import org.jooq.tools.jdbc.MockConnection;\n+import org.jooq.tools.jdbc.MockDataProvider;\n+import org.junit.Test;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+\n+public class JooqProviderTest {\n+\n+    @Test\n+    public void testddlog() throws IOException, DDlogException {\n+        final Translator t = new Translator(null);\n+        final String s1 = \"create table hosts (id integer, capacity integer)\";\n+        final String v2 = \"create view hostsv as select distinct * from hosts\";\n+        final String v1 = \"create view good_hosts as select distinct * from hosts where capacity < 50\";\n+        t.translateSqlStatement(s1);\n+        t.translateSqlStatement(v2);\n+        t.translateSqlStatement(v1);\n+        final DDlogProgram dDlogProgram = t.getDDlogProgram();\n+        writeProgramToFile(dDlogProgram.toString());\n+        DDlogAPI.compileDDlogProgram(\"/tmp/program.dl\", true, \"../lib\", \"./lib\");\n+        DDlogAPI.loadDDlog();\n+\n+        final DDlogAPI dDlogAPI = new DDlogAPI(1, null, true);\n+        final int numInserts = 5;\n+        for (int i = 0; i < numInserts; i++) {\n+            final DDlogRecord rec = new DDlogRecord(i);\n+            final DDlogRecord cap = new DDlogRecord(20);\n+            final DDlogRecord struct = DDlogRecord.makeStruct(\"Thosts\", rec, cap);\n+            final int id = dDlogAPI.getTableId(\"Rhosts\");\n+            final DDlogRecCommand command = new DDlogRecCommand(DDlogCommand.Kind.Insert, id, struct);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44d7499b26645c18e242f8029ff1f61904ebf10f"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5NjAxOQ==", "bodyText": "This was just for tests. I'll fix it.", "url": "https://github.com/vmware/differential-datalog/pull/797#discussion_r516996019", "createdAt": "2020-11-03T22:36:28Z", "author": {"login": "lalithsuresh"}, "path": "sql/src/test/java/ddlog/JooqProviderTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2018-2020 VMware, Inc. All Rights Reserved.\n+ * SPDX-License-Identifier: BSD-2\n+ */\n+package ddlog;\n+\n+import com.vmware.ddlog.DDlogJooqProvider;\n+import com.vmware.ddlog.ir.DDlogProgram;\n+import com.vmware.ddlog.translator.Translator;\n+import ddlogapi.DDlogAPI;\n+import ddlogapi.DDlogCommand;\n+import ddlogapi.DDlogException;\n+import ddlogapi.DDlogRecCommand;\n+import ddlogapi.DDlogRecord;\n+import org.jooq.DSLContext;\n+import org.jooq.Record;\n+import org.jooq.Result;\n+import org.jooq.impl.DSL;\n+import org.jooq.tools.jdbc.MockConnection;\n+import org.jooq.tools.jdbc.MockDataProvider;\n+import org.junit.Test;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+\n+public class JooqProviderTest {\n+\n+    @Test\n+    public void testddlog() throws IOException, DDlogException {\n+        final Translator t = new Translator(null);\n+        final String s1 = \"create table hosts (id integer, capacity integer)\";\n+        final String v2 = \"create view hostsv as select distinct * from hosts\";\n+        final String v1 = \"create view good_hosts as select distinct * from hosts where capacity < 50\";\n+        t.translateSqlStatement(s1);\n+        t.translateSqlStatement(v2);\n+        t.translateSqlStatement(v1);\n+        final DDlogProgram dDlogProgram = t.getDDlogProgram();\n+        writeProgramToFile(dDlogProgram.toString());\n+        DDlogAPI.compileDDlogProgram(\"/tmp/program.dl\", true, \"../lib\", \"./lib\");\n+        DDlogAPI.loadDDlog();\n+\n+        final DDlogAPI dDlogAPI = new DDlogAPI(1, null, true);\n+        final int numInserts = 5;\n+        for (int i = 0; i < numInserts; i++) {\n+            final DDlogRecord rec = new DDlogRecord(i);\n+            final DDlogRecord cap = new DDlogRecord(20);\n+            final DDlogRecord struct = DDlogRecord.makeStruct(\"Thosts\", rec, cap);\n+            final int id = dDlogAPI.getTableId(\"Rhosts\");\n+            final DDlogRecCommand command = new DDlogRecCommand(DDlogCommand.Kind.Insert, id, struct);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4NzA0NA=="}, "originalCommit": {"oid": "44d7499b26645c18e242f8029ff1f61904ebf10f"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDEwNjMzOnYy", "diffSide": "RIGHT", "path": "sql/src/test/java/ddlog/JooqProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjoxNjoxMVrOHtCaYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjoxNjoxMVrOHtCaYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4NzQ5MA==", "bodyText": "why don't you make this one a static final?", "url": "https://github.com/vmware/differential-datalog/pull/797#discussion_r516987490", "createdAt": "2020-11-03T22:16:11Z", "author": {"login": "mbudiu-vmw"}, "path": "sql/src/test/java/ddlog/JooqProviderTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2018-2020 VMware, Inc. All Rights Reserved.\n+ * SPDX-License-Identifier: BSD-2\n+ */\n+package ddlog;\n+\n+import com.vmware.ddlog.DDlogJooqProvider;\n+import com.vmware.ddlog.ir.DDlogProgram;\n+import com.vmware.ddlog.translator.Translator;\n+import ddlogapi.DDlogAPI;\n+import ddlogapi.DDlogCommand;\n+import ddlogapi.DDlogException;\n+import ddlogapi.DDlogRecCommand;\n+import ddlogapi.DDlogRecord;\n+import org.jooq.DSLContext;\n+import org.jooq.Record;\n+import org.jooq.Result;\n+import org.jooq.impl.DSL;\n+import org.jooq.tools.jdbc.MockConnection;\n+import org.jooq.tools.jdbc.MockDataProvider;\n+import org.junit.Test;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+\n+public class JooqProviderTest {\n+\n+    @Test\n+    public void testddlog() throws IOException, DDlogException {\n+        final Translator t = new Translator(null);\n+        final String s1 = \"create table hosts (id integer, capacity integer)\";\n+        final String v2 = \"create view hostsv as select distinct * from hosts\";\n+        final String v1 = \"create view good_hosts as select distinct * from hosts where capacity < 50\";\n+        t.translateSqlStatement(s1);\n+        t.translateSqlStatement(v2);\n+        t.translateSqlStatement(v1);\n+        final DDlogProgram dDlogProgram = t.getDDlogProgram();\n+        writeProgramToFile(dDlogProgram.toString());\n+        DDlogAPI.compileDDlogProgram(\"/tmp/program.dl\", true, \"../lib\", \"./lib\");\n+        DDlogAPI.loadDDlog();\n+\n+        final DDlogAPI dDlogAPI = new DDlogAPI(1, null, true);\n+        final int numInserts = 5;\n+        for (int i = 0; i < numInserts; i++) {\n+            final DDlogRecord rec = new DDlogRecord(i);\n+            final DDlogRecord cap = new DDlogRecord(20);\n+            final DDlogRecord struct = DDlogRecord.makeStruct(\"Thosts\", rec, cap);\n+            final int id = dDlogAPI.getTableId(\"Rhosts\");\n+            final DDlogRecCommand command = new DDlogRecCommand(DDlogCommand.Kind.Insert, id, struct);\n+            dDlogAPI.transactionStart();\n+            dDlogAPI.applyUpdates(new DDlogRecCommand[]{command});\n+            dDlogAPI.transactionCommit();\n+        }\n+\n+        final List<String> ddl = new ArrayList<>();\n+        ddl.add(s1);\n+        ddl.add(v2);\n+        ddl.add(v1);\n+\n+        // Initialise the data provider\n+        MockDataProvider provider = new DDlogJooqProvider(dDlogAPI, ddl);\n+        MockConnection connection = new MockConnection(provider);\n+\n+        // Pass the mock connection to a jOOQ DSLContext:\n+        DSLContext create = DSL.using(connection);\n+        final Result<Record> fetch = create.fetch(\"select * from hostsv\");\n+        assertEquals(numInserts, fetch.size());\n+        assertArrayEquals(new int[]{0, 1, 2, 3, 4},\n+                          fetch.stream().mapToInt(r -> r.get(0, Integer.class)).toArray());\n+    }\n+\n+    public File writeProgramToFile(String programBody) throws IOException {\n+        File tmp = new File(\"/tmp/program.dl\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44d7499b26645c18e242f8029ff1f61904ebf10f"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4646, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}