{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0OTU4NDkz", "number": 658, "title": "Support for transcoding data from JSON to binary formats.", "bodyText": "See commit messages for details.", "createdAt": "2020-05-07T22:50:29Z", "url": "https://github.com/vmware/differential-datalog/pull/658", "merged": true, "mergeCommit": {"oid": "3572181cf5964e5323a04eb935907a53e33252ea"}, "closed": true, "closedAt": "2020-05-08T01:12:41Z", "author": {"login": "ryzhyk"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcfFI7sgH2gAyNDE0OTU4NDkzOjhmMzM4OWVkN2YwZGQ2MzczM2Q2ZmU2ZGQ1NzcyZTUwZGZjOTBkZTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcfHV_CgBqjMzMTUxOTUwMDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8f3389ed7f0dd63733d6fe6dd5772e50dfc90de9", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/8f3389ed7f0dd63733d6fe6dd5772e50dfc90de9", "committedDate": "2020-05-07T22:37:01Z", "message": "json.dl: Transcode JsonValue to binary data.\n\nDDlog automatically derives `Serialize` and `Deserialize`\nimplementations for all its types, which means that they can in\nprinciple be serialized into any formats supported by the `serde`\necosystem, both binary and human readable.  But there are some caveats.\nIn particular, types that rely on the  `deserialize_any` serde API\ncan only be deserialized from self-describing formats like JSON.\n\nThis includes `JsonValue` and types with `tag` and `flatten`\nannotations.\n\nIn this commit we deal with `JsonValue` by giving it a custom\n`Serialize`/`Deserialize` implementation that, when serializing to a\nnon-human readable format, first converts the type to a JSON string and\nthen serializes the string."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4f17aaa8d062cbf62d55bf45554f764b53ad265a", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/4f17aaa8d062cbf62d55bf45554f764b53ad265a", "committedDate": "2020-05-07T22:49:09Z", "message": "json.dl: JsonWrapper to transcode JSON to binary data.\n\nThis is a workaround for a `serde` limitation that prevents certain data types from\nbeing serialized or deserialized from non-self-describing data formats like bincode.\nIn particular, this is the case for data types annotated with JSON-related serde\nattributes like `tag` and `flatten`.  In practice this means that types annotated for\nserialization to JSON cannot be serialized to other formats.\n\nThe workaround is to use different serialization logic when serializing to binary and\nnon-binary formats.  In the binary case, we want to serialize such types into a string\nand then serialize the string as a field in binary data.  In the non-binary case, we\nstick to normal serde behavior.  `JsonWrapper` type implements this choice by checking\nthe `is_human_readable` property of the serializer.\n\nThe current implementation has an important flaw: serde currently does not provide a\nreliable way to determine if a serializer supports self-describing data.  We use\n`is_human_readable` attribute as an approximation, which is not always correct: binary\nformats can be self-describing (BSON, Pickle), conversely not all human-readable formats\nare self-describing.  Nevertheless, the current design enables useful scenarios, like\ntranscoding JSON to bincode.\n\nImplementing `JsonWrapper` required a new attribute `#[custom_serde]`\nthat tells DDlog not to derive default `Serialize`/`Deserialize`\nimplementations for a type."}, "afterCommit": {"oid": "a80c72ff8471dc299436fec621b24ccc6321400b", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/a80c72ff8471dc299436fec621b24ccc6321400b", "committedDate": "2020-05-07T23:26:30Z", "message": "json.dl: JsonWrapper to transcode JSON to binary data.\n\nThis is a workaround for a `serde` limitation that prevents certain data types from\nbeing serialized or deserialized from non-self-describing data formats like bincode.\nIn particular, this is the case for data types annotated with JSON-related serde\nattributes like `tag` and `flatten`.  In practice this means that types annotated for\nserialization to JSON cannot be serialized to other formats.\n\nThe workaround is to use different serialization logic when serializing to binary and\nnon-binary formats.  In the binary case, we want to serialize such types into a string\nand then serialize the string as a field in binary data.  In the non-binary case, we\nstick to normal serde behavior.  `JsonWrapper` type implements this choice by checking\nthe `is_human_readable` property of the serializer.\n\nThe current implementation has an important flaw: serde currently does not provide a\nreliable way to determine if a serializer supports self-describing data.  We use\n`is_human_readable` attribute as an approximation, which is not always correct: binary\nformats can be self-describing (BSON, Pickle), conversely not all human-readable formats\nare self-describing.  Nevertheless, the current design enables useful scenarios, like\ntranscoding JSON to bincode.\n\nImplementing `JsonWrapper` required a new attribute `#[custom_serde]`\nthat tells DDlog not to derive default `Serialize`/`Deserialize`\nimplementations for a type."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3ODkzODI0", "url": "https://github.com/vmware/differential-datalog/pull/658#pullrequestreview-407893824", "createdAt": "2020-05-07T23:01:57Z", "commit": {"oid": "4f17aaa8d062cbf62d55bf45554f764b53ad265a"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMzowMTo1N1rOGSTNqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMzo0Mjo1NFrOGSUBEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg0MjM0NA==", "bodyText": "no reference output?", "url": "https://github.com/vmware/differential-datalog/pull/658#discussion_r421842344", "createdAt": "2020-05-07T23:01:57Z", "author": {"login": "mbudiu-vmw"}, "path": "test/datalog_tests/json_test.dl", "diffHunk": "@@ -183,3 +183,16 @@ JsonTest(s32FromString1(),\n          to_json_string_or_default(from_json_string(s32FromString1()): Result<S32FromString, string>)).\n JsonTest(s32FromString2(),\n          to_json_string_or_default(from_json_string(s32FromString2()): Result<S32FromString, string>)).\n+\n+typedef WrappedEnum = JsonWrapper<TaggedEnum>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f17aaa8d062cbf62d55bf45554f764b53ad265a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg0Mjc4Mw==", "bodyText": "if the previous annotation was obscure, this one is doubly obscure.\nMaybe once this API stabilizes we can wrap it into something that looks nicer for the user.", "url": "https://github.com/vmware/differential-datalog/pull/658#discussion_r421842783", "createdAt": "2020-05-07T23:03:28Z", "author": {"login": "mbudiu-vmw"}, "path": "lib/json.dl", "diffHunk": "@@ -20,7 +20,7 @@ extern function to_json_string(x: 'T): Result<string, string>\n \n /* Represents any valid JSON value.\n  */\n-#[rust=\"serde(from = \\\"serde_json::value::Value\\\", into = \\\"serde_json::value::Value\\\")\"]\n+#[rust=\"serde(from = \\\"__json::ValueWrapper\\\", into = \\\"__json::ValueWrapper\\\")\"]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f17aaa8d062cbf62d55bf45554f764b53ad265a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg0NDQxNw==", "bodyText": "it is not useful to have this documentation just in the code, you have to surface it to the users as well.\nthere should be a section on annotations in the reference document?", "url": "https://github.com/vmware/differential-datalog/pull/658#discussion_r421844417", "createdAt": "2020-05-07T23:08:48Z", "author": {"login": "mbudiu-vmw"}, "path": "src/Language/DifferentialDatalog/Attribute.hs", "diffHunk": "@@ -127,6 +134,23 @@ tdefCheckSizeAttr d TypeDef{..} =\n          [Attribute{..}] -> err d attrPos $ \"Invalid 'size' attribute: size must be an integer between 0 and \" ++ show (maxBound::Int)\n          _                    -> err d tdefPos $ \"Multiple 'size' attributes are not allowed\"\n \n+{- 'custom_serde' attribute: Tells DDlog not to generate `Serialize` and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f17aaa8d062cbf62d55bf45554f764b53ad265a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NTUwNA==", "bodyText": "I don't really understand the connection between JSON, strings, and binary serialization.", "url": "https://github.com/vmware/differential-datalog/pull/658#discussion_r421855504", "createdAt": "2020-05-07T23:42:54Z", "author": {"login": "mbudiu-vmw"}, "path": "lib/json.dl", "diffHunk": "@@ -164,3 +164,27 @@ typedef JsonNum = // Integer number.  The value must be in the range between the\n                 | // NaN and infinity are not valid JSON values.\n                   // When serializing to JSON, such values will be replaced with 0.\n                   JsonFloat{d: double}\n+\n+/* Wrapper type that serializes its inner object into binary formats via JSON string.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a80c72ff8471dc299436fec621b24ccc6321400b"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64db2dc34532652bc763dbdd30bc3434c0edee49", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/64db2dc34532652bc763dbdd30bc3434c0edee49", "committedDate": "2020-05-08T01:10:43Z", "message": "json.dl: JsonWrapper to transcode JSON to binary data.\n\nThis is a workaround for a `serde` limitation that prevents certain data types from\nbeing serialized or deserialized from non-self-describing data formats like bincode.\nIn particular, this is the case for data types annotated with JSON-related serde\nattributes like `tag` and `flatten`.  In practice this means that types annotated for\nserialization to JSON cannot be serialized to other formats.\n\nThe workaround is to use different serialization logic when serializing to binary and\nnon-binary formats.  In the binary case, we want to serialize such types into a string\nand then serialize the string as a field in binary data.  In the non-binary case, we\nstick to normal serde behavior.  `JsonWrapper` type implements this choice by checking\nthe `is_human_readable` property of the serializer.\n\nThe current implementation has an important flaw: serde currently does not provide a\nreliable way to determine if a serializer supports self-describing data.  We use\n`is_human_readable` attribute as an approximation, which is not always correct: binary\nformats can be self-describing (BSON, Pickle), conversely not all human-readable formats\nare self-describing.  Nevertheless, the current design enables useful scenarios, like\ntranscoding JSON to bincode.\n\nImplementing `JsonWrapper` required a new attribute `#[custom_serde]`\nthat tells DDlog not to derive default `Serialize`/`Deserialize`\nimplementations for a type."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a80c72ff8471dc299436fec621b24ccc6321400b", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/a80c72ff8471dc299436fec621b24ccc6321400b", "committedDate": "2020-05-07T23:26:30Z", "message": "json.dl: JsonWrapper to transcode JSON to binary data.\n\nThis is a workaround for a `serde` limitation that prevents certain data types from\nbeing serialized or deserialized from non-self-describing data formats like bincode.\nIn particular, this is the case for data types annotated with JSON-related serde\nattributes like `tag` and `flatten`.  In practice this means that types annotated for\nserialization to JSON cannot be serialized to other formats.\n\nThe workaround is to use different serialization logic when serializing to binary and\nnon-binary formats.  In the binary case, we want to serialize such types into a string\nand then serialize the string as a field in binary data.  In the non-binary case, we\nstick to normal serde behavior.  `JsonWrapper` type implements this choice by checking\nthe `is_human_readable` property of the serializer.\n\nThe current implementation has an important flaw: serde currently does not provide a\nreliable way to determine if a serializer supports self-describing data.  We use\n`is_human_readable` attribute as an approximation, which is not always correct: binary\nformats can be self-describing (BSON, Pickle), conversely not all human-readable formats\nare self-describing.  Nevertheless, the current design enables useful scenarios, like\ntranscoding JSON to bincode.\n\nImplementing `JsonWrapper` required a new attribute `#[custom_serde]`\nthat tells DDlog not to derive default `Serialize`/`Deserialize`\nimplementations for a type."}, "afterCommit": {"oid": "64db2dc34532652bc763dbdd30bc3434c0edee49", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/64db2dc34532652bc763dbdd30bc3434c0edee49", "committedDate": "2020-05-08T01:10:43Z", "message": "json.dl: JsonWrapper to transcode JSON to binary data.\n\nThis is a workaround for a `serde` limitation that prevents certain data types from\nbeing serialized or deserialized from non-self-describing data formats like bincode.\nIn particular, this is the case for data types annotated with JSON-related serde\nattributes like `tag` and `flatten`.  In practice this means that types annotated for\nserialization to JSON cannot be serialized to other formats.\n\nThe workaround is to use different serialization logic when serializing to binary and\nnon-binary formats.  In the binary case, we want to serialize such types into a string\nand then serialize the string as a field in binary data.  In the non-binary case, we\nstick to normal serde behavior.  `JsonWrapper` type implements this choice by checking\nthe `is_human_readable` property of the serializer.\n\nThe current implementation has an important flaw: serde currently does not provide a\nreliable way to determine if a serializer supports self-describing data.  We use\n`is_human_readable` attribute as an approximation, which is not always correct: binary\nformats can be self-describing (BSON, Pickle), conversely not all human-readable formats\nare self-describing.  Nevertheless, the current design enables useful scenarios, like\ntranscoding JSON to bincode.\n\nImplementing `JsonWrapper` required a new attribute `#[custom_serde]`\nthat tells DDlog not to derive default `Serialize`/`Deserialize`\nimplementations for a type."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4524, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}