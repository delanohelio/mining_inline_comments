{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzNTY1MzIx", "number": 709, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoxNToxM1rOEQRjaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoxNToxM1rOEQRjaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTAwMjY1OnYy", "diffSide": "RIGHT", "path": "test/datalog_tests/lib_test.debug.ast.expected", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoxNToxM1rOG0VfHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoxNToxM1rOG0VfHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzMTE2Ng==", "bodyText": "We still have builtin2string?", "url": "https://github.com/vmware/differential-datalog/pull/709#discussion_r457531166", "createdAt": "2020-07-20T16:15:13Z", "author": {"login": "mbudiu-vmw"}, "path": "test/datalog_tests/lib_test.debug.ast.expected", "diffHunk": "@@ -1392,21 +1392,21 @@ internment_test::AllInternedString[(internment_test::AllInternedString{.ix=ix}:\n internment_test::OInternedString[(internment_test::OInternedString{.x=(internment::ival(s): string), .ix=s}: internment_test::OInternedString)] :- internment_test::AllInternedString[(__internment_test_allinternedstring0@ (internment_test::AllInternedString{.ix=(s: internment::Intern<string>)}: internment_test::AllInternedString))], Inspect debug::debug_event((32'd279, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, \"Map\", __internment_test_allinternedstring0, (internment_test::OInternedString{.x=(internment::ival(s): string), .ix=s}: internment_test::OInternedString)).\n internment_test::OInternedString[(internment_test::OInternedString{.x=(((internment::ival(s1): string) ++ \" \") ++ (internment::ival(s2): string)), .ix=(internment::intern((((internment::ival(s1): string) ++ \" \") ++ (internment::ival(s2): string))): internment::Intern<string>)}: internment_test::OInternedString)] :- internment_test::AllInternedString[(__internment_test_allinternedstring0@ (internment_test::AllInternedString{.ix=(s1: internment::Intern<string>)}: internment_test::AllInternedString))], internment_test::AllInternedString[(__internment_test_allinternedstring1@ (internment_test::AllInternedString{.ix=(s2: internment::Intern<string>)}: internment_test::AllInternedString))], Inspect debug::debug_event_join((32'd280, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __internment_test_allinternedstring0, __internment_test_allinternedstring1, (internment_test::OInternedString{.x=(((internment::ival(s1): string) ++ \" \") ++ (internment::ival(s2): string)), .ix=(internment::intern((((internment::ival(s1): string) ++ \" \") ++ (internment::ival(s2): string))): internment::Intern<string>)}: internment_test::OInternedString)).\n internment_test::Projections[(internment_test::Projections{.inp=internment_test::istruct2struct(i), .p=(\"x=\" ++ (std::__builtin_2string(i.x): string))}: internment_test::Projections)] :- internment_test::IStruct[(__internment_test_istruct0@ ((&(i: internment_test::IStruct)): internment::Intern<internment_test::IStruct>))], Inspect debug::debug_event((32'd281, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, \"Map\", __internment_test_istruct0, (internment_test::Projections{.inp=internment_test::istruct2struct(i), .p=(\"x=\" ++ (std::__builtin_2string(i.x): string))}: internment_test::Projections)).\n-internment_test::Projections[(internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=(\"t.0=\" ++ (std::__builtin_2string(i.t.0): string))}: internment_test::Projections)] :- internment_test::IStruct[(i@ ((&(internment_test::IStruct{.u=(_: internment::Intern<internment_test::IUnion>), .t=(_: internment::Intern<(signed<32>, double)>), .x=(_: bigint)}: internment_test::IStruct)): internment::Intern<internment_test::IStruct>))], Inspect debug::debug_event((32'd282, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, \"Map\", i, (internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=(\"t.0=\" ++ (std::__builtin_2string(i.t.0): string))}: internment_test::Projections)).\n-internment_test::Projections[(internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=(\"t.1=\" ++ (std::__builtin_2string(i.t.1): string))}: internment_test::Projections)] :- internment_test::IStruct[(i@ ((&(internment_test::IStruct{.u=(_: internment::Intern<internment_test::IUnion>), .t=((&((_: signed<32>), (d: double))): internment::Intern<(signed<32>, double)>), .x=(_: bigint)}: internment_test::IStruct)): internment::Intern<internment_test::IStruct>))], Inspect debug::debug_event((32'd283, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, \"Map\", i, (internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=(\"t.1=\" ++ (std::__builtin_2string(i.t.1): string))}: internment_test::Projections)).\n-internment_test::Projections[(internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=(\"f1=\" ++ (std::__builtin_2string(f1): string))}: internment_test::Projections)] :- internment_test::IStruct[(i@ ((&(internment_test::IStruct{.u=((&(internment_test::Tag1{.f1=(f1: bool)}: internment_test::IUnion)): internment::Intern<internment_test::IUnion>), .t=(_: internment::Intern<(signed<32>, double)>), .x=(_: bigint)}: internment_test::IStruct)): internment::Intern<internment_test::IStruct>))], Inspect debug::debug_event((32'd284, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, \"Map\", i, (internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=(\"f1=\" ++ (std::__builtin_2string(f1): string))}: internment_test::Projections)).\n-internment_test::Projections[(internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=(\"f2=\" ++ (std::__builtin_2string(f2): string))}: internment_test::Projections)] :- internment_test::IStruct[(i@ ((&(internment_test::IStruct{.u=((&(t@ (internment_test::Tag2{.f2=(f2: bit<32>), .f3=(_: string)}: internment_test::IUnion))): internment::Intern<internment_test::IUnion>), .t=(_: internment::Intern<(signed<32>, double)>), .x=(_: bigint)}: internment_test::IStruct)): internment::Intern<internment_test::IStruct>))], Inspect debug::debug_event((32'd285, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, \"Map\", i, (internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=(\"f2=\" ++ (std::__builtin_2string(f2): string))}: internment_test::Projections)).\n-internment_test::Projections[(internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=(\"f3=\" ++ f3)}: internment_test::Projections)] :- internment_test::IStruct[(i@ ((&(internment_test::IStruct{.u=(t@ ((&(internment_test::Tag2{.f2=(_: bit<32>), .f3=(f3: string)}: internment_test::IUnion)): internment::Intern<internment_test::IUnion>)), .t=(_: internment::Intern<(signed<32>, double)>), .x=(_: bigint)}: internment_test::IStruct)): internment::Intern<internment_test::IStruct>))], Inspect debug::debug_event((32'd286, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, \"Map\", i, (internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=(\"f3=\" ++ f3)}: internment_test::Projections)).\n+internment_test::Projections[(internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=(\"t.0=\" ++ (std::__builtin_2string(i.t.0): string))}: internment_test::Projections)] :- internment_test::IStruct[(i@ ((&(internment_test::IStruct{.u=(_: internment::Intern<internment_test::IUnion>), .t=(_: internment::Intern<(std::s32, double)>), .x=(_: bigint)}: internment_test::IStruct)): internment::Intern<internment_test::IStruct>))], Inspect debug::debug_event((32'd282, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, \"Map\", i, (internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=(\"t.0=\" ++ (std::__builtin_2string(i.t.0): string))}: internment_test::Projections)).\n+internment_test::Projections[(internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=(\"t.1=\" ++ (std::__builtin_2string(i.t.1): string))}: internment_test::Projections)] :- internment_test::IStruct[(i@ ((&(internment_test::IStruct{.u=(_: internment::Intern<internment_test::IUnion>), .t=((&((_: signed<32>), (d: double))): internment::Intern<(std::s32, double)>), .x=(_: bigint)}: internment_test::IStruct)): internment::Intern<internment_test::IStruct>))], Inspect debug::debug_event((32'd283, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, \"Map\", i, (internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=(\"t.1=\" ++ (std::__builtin_2string(i.t.1): string))}: internment_test::Projections)).\n+internment_test::Projections[(internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=(\"f1=\" ++ (std::__builtin_2string(f1): string))}: internment_test::Projections)] :- internment_test::IStruct[(i@ ((&(internment_test::IStruct{.u=((&(internment_test::Tag1{.f1=(f1: bool)}: internment_test::IUnion)): internment::Intern<internment_test::IUnion>), .t=(_: internment::Intern<(std::s32, double)>), .x=(_: bigint)}: internment_test::IStruct)): internment::Intern<internment_test::IStruct>))], Inspect debug::debug_event((32'd284, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, \"Map\", i, (internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=(\"f1=\" ++ (std::__builtin_2string(f1): string))}: internment_test::Projections)).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f264b544b02ca65f4297e7e2ab2b790f70d166b"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4799, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}