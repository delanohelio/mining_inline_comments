{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwNzEwMTY3", "number": 706, "title": "Improved string conversion framework + object-oriented function call syntax", "bodyText": "See commit messages.", "createdAt": "2020-07-17T03:00:43Z", "url": "https://github.com/vmware/differential-datalog/pull/706", "merged": true, "mergeCommit": {"oid": "315ac24ef4b3e0fad01cfb4fbf5996d8936230fb"}, "closed": true, "closedAt": "2020-07-17T20:31:55Z", "author": {"login": "ryzhyk"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1YG6AAH2gAyNDUwNzEwMTY3OjEzMjcyOGE3YmVlMmU5NTU3OWY0ODhhZGVmMTJhZThmNjZkN2IzMGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1542QgBqjM1NTk3NzUxNzM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "132728a7bee2e95579f488adef12ae8f66d7b30e", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/132728a7bee2e95579f488adef12ae8f66d7b30e", "committedDate": "2020-07-16T05:09:20Z", "message": "Name all string conversion functions to_string().\n\nA slightly more usable string conversion framework.\n\nBackground: Automatic string conversion is used in conjunction with\nstring interpolation to automatically convert DDlog expressions to\nstrings, e.g. \"x=${x}\".  For non-builtin types, this requires calling a\nuser-provided function for the given type.  Since DDlog does not have\ntraits or type classes, we rely on a predefined naming scheme to locate\nthis function.  Previously function name was obtained by appending\n\"2string\" to the name of the type.\n\nNow that we support function overloading, we can allow all these\nfunctions to use the same name, `to_string`.  This is far less confusing\nand ugly.  There are some limitations:\n\n- The conversion function must reside in the same module as the type it\n  applies to.  This is because string conversion is injected after\n  flattening; hence we need to know the fully qualified name of the\n  function we are searching for.  However, this actually makes sense\n  from the usability perspective.\n\n- Conversion functions can only be provided for structs and extern\n  types, but not tuples or type aliases."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwODM2NDQ2", "url": "https://github.com/vmware/differential-datalog/pull/706#pullrequestreview-450836446", "createdAt": "2020-07-17T17:30:38Z", "commit": {"oid": "d80e4854a634733aa9e949626eb6083344976b8a"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzozMDozOFrOGzbULA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzozMToxMFrOGzbVCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU3ODA5Mg==", "bodyText": "breaking change", "url": "https://github.com/vmware/differential-datalog/pull/706#discussion_r456578092", "createdAt": "2020-07-17T17:30:38Z", "author": {"login": "mbudiu-vmw"}, "path": "doc/language_reference/language_reference.md", "diffHunk": "@@ -70,7 +70,7 @@ The `import` statement makes type, function, relation, and constructor declarati\n imported module available in the importing module.\n \n ```EBNF\n-module_path ::= identifier [\".\" identifier]*\n+module_path ::= identifier [\"::\" identifier]*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d80e4854a634733aa9e949626eb6083344976b8a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU3ODMxNQ==", "bodyText": "typo?", "url": "https://github.com/vmware/differential-datalog/pull/706#discussion_r456578315", "createdAt": "2020-07-17T17:31:10Z", "author": {"login": "mbudiu-vmw"}, "path": "doc/tutorial/tutorial.md", "diffHunk": "@@ -424,10 +424,22 @@ output relation Pow2(p: string)\n Pow2(\"The square of ${x} is ${x*x}\") :- Number(x).\n ```\n \n-Built-in types have built-in conversions to strings.  To convert a\n-user-defined type (such as `Category` above) the user can implement a\n-function named `category2string` that returns a `string` given a category\n-(functions are described [below](#functions)).\n+Built-in types (`bool`, `bit<>`, `signed<>`, `bigint`, `string`, `float`, `double`)\n+have built-in conversions to strings.  To enable the compiler to automatically convert\n+a user-defined type to a string, the user must implement a\n+function named `to_string` that takes an instance of the type and returns a `string`\n+(functions are described [below](#functions)):\n+\n+```\n+funtion to_string(x: Category): string {\n+    match (x) {\n+        CategoryStarWars -> \"Star Wars\",\n+        CategoryOther -> \"other\"\n+    }\n+}\n+```\n+\n+structs and extern types, but not tuples", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d80e4854a634733aa9e949626eb6083344976b8a"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c707337d2bee13d8dcab6f7cd37c43e18f23f9a0", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/c707337d2bee13d8dcab6f7cd37c43e18f23f9a0", "committedDate": "2020-07-17T20:30:34Z", "message": "Use \"::\" as namespace separator.\n\nWe would like to support object-oriented function call syntax `x.f(y)`,\nwhich simply gets converted to `f(x,y)`.  In fact the parser already\nsupports this; however this feature was broken back when we introduced\nthe module system, and along with it syntax ambiguity: the parser cannot\ndistinguish method call from namespace separator.\n\nWe eliminate the ambiguity by using `::` as a namespace separator in:\n\n- import clauses, e.g., `import m1::m2`.\n- expressions, e.g., `m::func(x)`.\n- command language, e.g., `dump uuid_test::UUID`."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdfd851ef69001526e491c8df0b6cc7ef0ae1994", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/cdfd851ef69001526e491c8df0b6cc7ef0ae1994", "committedDate": "2020-07-17T20:30:34Z", "message": "New clippy warnings."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a15939e1205d9a38f62e0a012e6770f806fdb7d", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/4a15939e1205d9a38f62e0a012e6770f806fdb7d", "committedDate": "2020-07-17T20:30:34Z", "message": "Tests for object-oriented function call syntax."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71262895a8d479e696bc2eb69f2bac5dca9dc8c7", "author": {"user": {"login": "mbudiu-vmw", "name": "Mihai Budiu"}}, "url": "https://github.com/vmware/differential-datalog/commit/71262895a8d479e696bc2eb69f2bac5dca9dc8c7", "committedDate": "2020-07-17T20:30:34Z", "message": "souffle_lib.dl: Rename to_string to to_istring.\n\nTo avoid name clash with `std::to_string()`."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d80e4854a634733aa9e949626eb6083344976b8a", "author": {"user": {"login": "mbudiu-vmw", "name": "Mihai Budiu"}}, "url": "https://github.com/vmware/differential-datalog/commit/d80e4854a634733aa9e949626eb6083344976b8a", "committedDate": "2020-07-17T02:37:42Z", "message": "souffle_lib.dl: Rename to_string to to_istring.\n\nTo avoid name clash with `std::to_string()`."}, "afterCommit": {"oid": "71262895a8d479e696bc2eb69f2bac5dca9dc8c7", "author": {"user": {"login": "mbudiu-vmw", "name": "Mihai Budiu"}}, "url": "https://github.com/vmware/differential-datalog/commit/71262895a8d479e696bc2eb69f2bac5dca9dc8c7", "committedDate": "2020-07-17T20:30:34Z", "message": "souffle_lib.dl: Rename to_string to to_istring.\n\nTo avoid name clash with `std::to_string()`."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4568, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}