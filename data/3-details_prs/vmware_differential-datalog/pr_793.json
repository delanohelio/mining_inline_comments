{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyNzE4MjI2", "number": 793, "title": "test.sh: A script to selectively run DDlog tests.", "bodyText": "The DDlog test suite consists of many individual scripts all over the\nrepo.  Until now the only place that \"knew\" how to run all these scripts\ncorrectly was the .gitlab-ci.yml file.  This was kind of acceptable\nbecause the test suite is too slow to run in its entirety on a single\nmachine.  Still, running individual test scripts and having to check\n.gitlab-ci.yml for correct arguments is cumbersome and creates an\nextra barrier for external contributions.\nSo here is finally a script to run all DDlog tests from one place.  In\norder to make it easier to pick and choose tests to run, we break them\ninto groups.  The script takes a list of test names, group names, or a\nmix of both as arguments and runs all requested tests.  It can also be\ninvoked as ./test.sh all to run all available tests.\nOther features:\n\nMeasure the runtime of each test\nRedirect stdout and stderr to file\n\nThe .gitlab-ci.yml file now uses test.sh to run all tests.\nI also refactored some test scripts to either clone or pull external git\nrepos (ovs, ovn, test data repos), which was previously done in\n.gitlab-ci.yml.\n@Kixiron", "createdAt": "2020-10-30T02:35:27Z", "url": "https://github.com/vmware/differential-datalog/pull/793", "merged": true, "mergeCommit": {"oid": "db5ac9fa9e4067faeef4acdd709ba1b342ea633d"}, "closed": true, "closedAt": "2020-10-30T20:16:44Z", "author": {"login": "ryzhyk"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXa43KAH2gAyNTEyNzE4MjI2Ojc2NTc0ZjgzODJlNzY4YTc3YWIwOGFmYWQ0ZmI4Nzg2NTM0OTQ0YTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXq6wYgFqTUyMDg0NjYzOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "76574f8382e768a77ab08afad4fb8786534944a3", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/76574f8382e768a77ab08afad4fb8786534944a3", "committedDate": "2020-10-29T23:37:08Z", "message": "Lint d3log crate.\n\nRun `cargo fmt` and `cargo clippy` on the `distributed_datalog` crate."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "087216f6237e70753c86976ca591e001810f6c5a", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/087216f6237e70753c86976ca591e001810f6c5a", "committedDate": "2020-10-30T02:03:45Z", "message": "test.sh: A script to selectively run DDlog tests.\n\nThe DDlog test suite consists of many individual script all over the\nrepo.  Until now the only place that \"knew\" how to run all these scripts\ncorrectly was the `.gitlab-ci.yml` file.  This was kind of acceptable\nbecause the test suite is too slow to run in its entirety on a single\nmachine.  Still, running individual test scripts and having to check\n`.gitlab-ci.yml` for correct arguments is cumbersome and creates an\nextra barrier for external contributions.\n\nSo here is finally a script to run all DDlog tests from one place.  In\norder to make it easier to pick and choose tests to run, we break them\ninto groups.  The script takes a list of test names, group names, or a\nmix of both as arguments and runs all requested tests.  It can also be\ninvoked as `./test.sh all` to run all available tests.\n\nOther features:\n- Measure the runtime of each test\n- Redirect stdout and stderr to file\n\nThe `.gitlab-ci.yml` file now uses `test.sh` to run all tests.\n\nI also refactored some test scripts to either clone or pull external git\nrepos (ovs, ovn, test data repos), which was previously done in\n`.gitlab-ci.yml`."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e11dc2fd9e333897d81f495fb01d4f0cb22e7af", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/5e11dc2fd9e333897d81f495fb01d4f0cb22e7af", "committedDate": "2020-10-30T06:34:59Z", "message": "Decompose GitLab pipeline into stages.\n\nInstead of building DDlog with every test, split the GitLab CI pipeline\ninto build and test stages.  The former builds the compiler.  All other\ntest run in the second stage.\n\nWe modify various test scripts to not run `stack install` in CI\nby checking the `$IS_CI_RUN` variable.\n\nFinally, we change `span_uuid`, `span_string`, and `path` tests to\nuse `run-test.sh` instead of `stack test`."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwODQ2NjM5", "url": "https://github.com/vmware/differential-datalog/pull/793#pullrequestreview-520846639", "createdAt": "2020-10-30T16:42:50Z", "commit": {"oid": "5e11dc2fd9e333897d81f495fb01d4f0cb22e7af"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjo0Mjo1MVrOHrXPAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODoxNzozN1rOHrbF4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzMTQ4OA==", "bodyText": "how come these were not flagged so far? Was the linter not run on these files?", "url": "https://github.com/vmware/differential-datalog/pull/793#discussion_r515231488", "createdAt": "2020-10-30T16:42:51Z", "author": {"login": "mbudiu-vmw"}, "path": "rust/template/distributed_datalog/src/instantiate.rs", "diffHunk": "@@ -39,8 +39,8 @@ use crate::tcp_channel::TcpSender;\n use crate::txnmux::TxnMux;\n use crate::DDlogServer;\n \n-use serde::Serialize;\n use serde::de::DeserializeOwned;\n+use serde::Serialize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e11dc2fd9e333897d81f495fb01d4f0cb22e7af"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI5MzQ4NQ==", "bodyText": "maybe you should call this group_list", "url": "https://github.com/vmware/differential-datalog/pull/793#discussion_r515293485", "createdAt": "2020-10-30T18:15:15Z", "author": {"login": "mbudiu-vmw"}, "path": "test.sh", "diffHunk": "@@ -0,0 +1,455 @@\n+#!/bin/bash\n+\n+set -e\n+\n+RED='\\033[0;31m'\n+GREEN='\\033[0;32m'\n+NC='\\033[0m' # No Color\n+THIS_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" >/dev/null 2>&1 && pwd )\"\n+LOG_DIR=\"${THIS_DIR}/testsuite.log\"\n+\n+fail() {\n+    printf \"${RED}FAIL${NC}\"\n+}\n+\n+ok() {\n+    printf \"${GREEN}OK${NC}\"\n+}\n+\n+testsuite_setup() {\n+    mkdir -p \"${LOG_DIR}\"\n+}\n+\n+gen_log_file_name() {\n+    log_file_name=\"${LOG_DIR}/${1}.log\"\n+}\n+\n+# Execute specified test function, redirecting outputs to a log file.\n+run_test() {\n+    gen_log_file_name ${1}\n+    if [ -z \"${NO_STD_REDIRECT}\" ]; then\n+        $1 &> \"${log_file_name}\"\n+    else\n+        $1\n+    fi\n+}\n+\n+# List of test groups\n+test_groups=(\"crates:Test DDlog runtime crates.\"\n+             \"basic:Test basic DDlog functionality.\"\n+             \"perf:Performance tests.\"\n+             \"go:Test Go bindings.\"\n+             \"java:Test Java bindings.\"\n+             \"ovn:Test OVN virtual network controller implemented in DDlog.\"\n+             \"sql:Test SQL-to-DDlog compiler.\"\n+             \"antrea:Test Antrea controller implemented in DDlog\"\n+             \"souffle:Tests imported from Souffle Datalog.\"\n+             \"d3log:Distributed DDlog (D3log) tests.\"\n+             \"misc:Miscellaneous other tests.\"\n+             \"stack:Tests using Haskell stack infrastructure.\")\n+\n+# List of tests in each group.  Test name must match the name of a function below.\n+\n+crates=(\"rust_fmt:Rust formatting\"\n+        \"rust_lint:Rust lints\"\n+        \"differential_datalog:Test 'differential_datalog' crate\"\n+        \"cmd_parser:Test 'cmd_parser' crate\"\n+        \"ovsdb:Test OVSDB bindings crate\"\n+        \"main_crate:Test main crate\")\n+\n+basic=(\"rust_api:Test Rust API to a DDlog program\"\n+       \"tutorial:Examples from the DDlog tutorial\"\n+       \"simple:Unit tests for various DDlog constructs\"\n+       \"simple2:Unit tests for various DDlog constructs, part 2\"\n+       \"libs:Tests for libraries in the 'lib' directory\"\n+       \"output_internal:Test '--output-internal-relations' switch\"\n+       \"stream:Test stream relations\")\n+\n+\n+perf=(\"dcm:Declarative Cluster Management benchmark\"\n+      \"redist_opt:'redist_opt' benchmark\")\n+\n+go=(\"go_test:Go API test\")\n+\n+java=(\"java0:Java API test 0\"\n+      \"java1:Java API test 1\"\n+      \"java2:Java API test 2\"\n+      \"java3:Java API test 3\"\n+      \"java4:Java API test 4\"\n+      \"flatbuf0:Java Flatbuf API test 0\"\n+      \"flatbuf1:Java Flatbuf API test 1\")\n+\n+sql=(\"sql_test:Test SQL-to-DDlog compiler\")\n+\n+ovn=(\"ovn_check:OVN controller test suite\")\n+\n+antrea=(\"antrea_check:Antrea tests\")\n+\n+souffle=(\"static_analysis:Souffle static analysis test.\"\n+         \"souffle_tests1:Souffle tests part1\"\n+         \"souffle_tests2:Souffle tests part2\"\n+         \"souffle_tests3:Souffle tests part3\"\n+         \"souffle_tests4:Souffle tests part4\"\n+         \"souffle_tests5:Souffle tests part5\"\n+         \"souffle_tests6:Souffle tests part6\"\n+         \"souffle_tests7:Souffle tests part7\")\n+\n+d3log=(\"tcp_channel:TCP channel test\"\n+       \"server_api:Test D3log server API\")\n+\n+misc=(\"span_string\"\n+      \"span_uuid\"\n+      \"path:Trivial graph reachability test\")\n+\n+stack=(\"modules:Test modules and imports\"\n+       \"ovn_ftl:Test FTL syntax\"\n+       \"ovn_mockup:OVN-inspired example\"\n+       \"redist:'redist' example\"\n+       \"negative:Negative tests that validate compiler error handling\")\n+\n+# 'crates' test group.\n+\n+rust_fmt() {\n+    (cd \"${THIS_DIR}/rust/template/\" && cargo fmt -- --check) &&\n+    (cd \"${THIS_DIR}/rust/template/cmd_parser\" && cargo fmt -- --check) &&\n+    (cd \"${THIS_DIR}/rust/template/ovsdb\" && cargo fmt -- --check) &&\n+    (cd \"${THIS_DIR}/rust/template/differential_datalog\" && cargo fmt -- --check) &&\n+    (cd \"${THIS_DIR}/lib\" && rustfmt *.rs --check)\n+}\n+\n+rust_lint() {\n+    (cd \"${THIS_DIR}/rust/template/\" && cargo clippy --features command-line,ovsdb -- -D warnings) &&\n+    (cd \"${THIS_DIR}/rust/template/cmd_parser\" && cargo clippy -- -D warnings) &&\n+    (cd \"${THIS_DIR}/rust/template/ovsdb\" && cargo clippy -- -D warnings) &&\n+    (cd \"${THIS_DIR}/rust/template/differential_datalog\" && cargo clippy -- -D warnings)\n+}\n+differential_datalog() {\n+    (cd \"${THIS_DIR}/rust/template/differential_datalog\" && cargo test)\n+}\n+\n+cmd_parser() {\n+    (cd \"${THIS_DIR}/rust/template/cmd_parser\" && cargo test)\n+}\n+ \n+ovsdb() {\n+    (cd \"${THIS_DIR}/rust/template/ovsdb\" && cargo test)\n+}\n+\n+main_crate() {\n+    (cd \"${THIS_DIR}/rust/template\" && cargo test --features command-line,ovsdb)\n+}\n+\n+# 'basic' test group.\n+\n+tutorial() {\n+    (cd \"${THIS_DIR}/test/datalog_tests\" && DDLOGFLAGS=\"-g\" ./run-test.sh tutorial release)\n+}\n+\n+rust_api() {\n+    ${THIS_DIR}/test/datalog_tests/rust_api_test/test.sh\n+}\n+\n+libs() {\n+    (cd \"${THIS_DIR}/test/datalog_tests\" && ./test-libs.sh)\n+}\n+\n+simple() {\n+    (cd \"${THIS_DIR}/test/datalog_tests\" && DDLOGFLAGS=\"-g\" CARGOFLAGS=\"--features nested_ts_32,profile\" ./run-test.sh simple release)\n+}\n+\n+simple2() {\n+    (cd \"${THIS_DIR}/test/datalog_tests\" && DDLOGFLAGS=\"-g --nested-ts-32\" ./run-test.sh simple2 release)\n+}\n+\n+negative() {\n+    (cd \"${THIS_DIR}\" && stack --no-terminal test --ta \"-p fail\")\n+}\n+\n+output_internal() {\n+    (cd \"${THIS_DIR}\" && ./test/datalog_tests/run-tests.sh three)\n+}\n+\n+stream() {\n+    (cd \"${THIS_DIR}/test/datalog_tests\" && ./test-stream.sh)\n+}\n+\n+# 'perf' test group.\n+\n+dcm() {\n+    (cd \"${THIS_DIR}/test/datalog_tests\" && ./test-dcm.sh)\n+}\n+\n+redist_opt() {\n+    (cd \"${THIS_DIR}/test/datalog_tests\" && ./test-redist_opt.sh)\n+}\n+\n+# 'go' test group\n+\n+go_test() {\n+    (cd \"${THIS_DIR}/go\" && ./test.sh && ./run-example.sh)\n+}\n+\n+# 'java' test group.\n+\n+java0() {\n+    (cd \"${THIS_DIR}/java/test\" && ./run.sh)\n+}\n+\n+java1() {\n+    (cd \"${THIS_DIR}/java/test1\" && ./run.sh)\n+}\n+\n+java2() {\n+    (cd \"${THIS_DIR}/java/test2\" && ./run.sh)\n+}\n+\n+java3() {\n+    (cd \"${THIS_DIR}/java/test3\" && ./run.sh)\n+}\n+\n+java4() {\n+    (cd \"${THIS_DIR}/java/test4\" && ./run.sh)\n+}\n+\n+flatbuf0() {\n+    (cd \"${THIS_DIR}/java/test_flatbuf\" && ./run.sh)\n+}\n+\n+flatbuf1() {\n+    (cd \"${THIS_DIR}/java/test_flatbuf1\" && ./run.sh)\n+}\n+\n+# 'sql' test group\n+\n+sql_test() {\n+    (cd \"${THIS_DIR}/java\" && make) &&\n+    (export DDLOG_HOME=\"${THIS_DIR}\" && cd \"${THIS_DIR}/sql\" && ./install-ddlog-jar.sh && mvn test)\n+}\n+\n+# 'ovn' test group.\n+\n+ovn_check() {\n+    (cd \"${THIS_DIR}/test\" && ./test-ovn.sh)\n+}\n+\n+# 'antrea' test group.\n+\n+antrea_check() {\n+    (cd \"${THIS_DIR}/test/antrea\" && ./test-antrea.sh)\n+}\n+\n+# 'souffle' test group.\n+\n+static_analysis() {\n+    (cd \"${THIS_DIR}/test/souffle0\" &&\n+     ../../tools/souffle_converter.py test.dl souffle --convert-dnf &&\n+     ../datalog_tests/run-test.sh souffle.dl release)\n+}\n+\n+souffle_tests1() {\n+    (cd \"${THIS_DIR}/test\" && ./run-souffle-tests-in-batches.py 0 24)\n+}\n+\n+souffle_tests2() {\n+    (cd \"${THIS_DIR}/test\" && ./run-souffle-tests-in-batches.py 25 49)\n+}\n+\n+souffle_tests3() {\n+    (cd \"${THIS_DIR}/test\" && ./run-souffle-tests-in-batches.py 50 74)\n+}\n+\n+souffle_tests4() {\n+    (cd \"${THIS_DIR}/test\" && ./run-souffle-tests-in-batches.py 75 99)\n+}\n+\n+souffle_tests5() {\n+    (cd \"${THIS_DIR}/test\" && ./run-souffle-tests-in-batches.py 100 124)\n+}\n+\n+souffle_tests6() {\n+    (cd \"${THIS_DIR}/test\" && ./run-souffle-tests-in-batches.py 125 149)\n+}\n+\n+souffle_tests7() {\n+    (cd \"${THIS_DIR}/test\" && ./run-souffle-tests-in-batches.py 150 175)\n+}\n+\n+# 'd3log' test group.\n+\n+tcp_channel() {\n+    #ZOOKEEPER_ENDPOINTS=\"127.0.0.1:2181\"\n+    #/usr/share/zookeeper/bin/zkServer.sh start &&\n+    (cd \"${THIS_DIR}/rust/template/distributed_datalog\" && cargo fmt -- --check) &&\n+    (cd \"${THIS_DIR}/rust/template/distributed_datalog\" && cargo clippy -- -D warnings) &&\n+    #for i in $(seq 100); do\n+    #    /usr/share/zookeeper/bin/zkServer.sh status && break;\n+    #    sleep 1\n+    #done &&\n+    (cd \"${THIS_DIR}/rust/template/distributed_datalog\" && (\n+        i=0;\n+        true;\n+        while [ $? -eq 0 -a $i -lt 100 ]; do\n+          i=$((i+1));\n+          cargo test -- tcp_channel::;\n+        done\n+        )\n+    )\n+}\n+\n+server_api() {\n+    # It seems that stale files cause cargo to rebuild the project\n+    # unnecessarily in CI.\n+    #rm -rf test/datalog_tests/server_api_ddlog\n+    (export DDLOG_HOME=\"${THIS_DIR}\" && \"${THIS_DIR}/test/datalog_tests/test-server_api.sh\")\n+}\n+\n+# 'stack' test group.\n+\n+modules() {\n+    (cd \"${THIS_DIR}\" && stack --no-terminal test --ta \"-p modules\")\n+}\n+\n+ovn_ftl() {\n+    (cd \"${THIS_DIR}\" && stack --no-terminal test --ta \"-p ovn_ftl\")\n+}\n+\n+ovn_mockup() {\n+    (cd \"${THIS_DIR}\" && stack test --ta '-p \"$(NF) == \\\"generate ovn\\\" || ($(NF-1) == \\\"compiler tests\\\" && $(NF) == \\\"ovn\\\")\"')\n+}\n+\n+redist() {\n+    (cd \"${THIS_DIR}\" && STACK_CARGO_FLAGS='--release' stack test --ta '-p \"$(NF) == \\\"generate redist\\\" || ($(NF-1) == \\\"compiler tests\\\" && $(NF) == \\\"redist\\\")\"')\n+}\n+\n+# 'misc' test group.\n+\n+span_string() {\n+    (cd \"${THIS_DIR}/test/datalog_tests\" && ./run-test.sh span_string release)\n+}\n+\n+span_uuid() {\n+    (cd \"${THIS_DIR}/test/datalog_tests\" && ./run-test.sh span_uuid release)\n+}\n+\n+path() {\n+    (cd \"${THIS_DIR}/test/datalog_tests\" && ./run-test.sh path release)\n+}\n+\n+#==========================================\n+# Main test script.\n+#==========================================\n+\n+printf \"DDlog test suite\\n\\n\"\n+testsuite_setup\n+\n+if ( [ \"$#\" -eq 0 ] || [ \"x$1\" == \"xhelp\" ] || [ \"x$1\" == \"x--help\" ] ); then\n+    printf \"Usage: ${0} test_or_test_group1 test_or_test_group2 ...\\n\"\n+    printf \"   or: ${0} all\\n\\n\"\n+    printf \"Available test groups:\\n\"\n+    for group_with_descr in \"${test_groups[@]}\"\n+    do\n+        IFS=\":\" read -ra tokens <<< \"$group_with_descr\"\n+        group=${tokens[0]}\n+        description=${tokens[1]}\n+\n+        printf \"\\n    ${group}: ${description}\\n\"\n+\n+        eval \"tests=(\\\"\\${${group}[@]}\\\")\"\n+        for tst_with_descr in \"${tests[@]}\"\n+        do\n+            IFS=\":\" read -ra tokens <<< \"$tst_with_descr\"\n+            tst=${tokens[0]}\n+            description=${tokens[1]}\n+            printf \"        %-25s %s\\n\" \"${tst}\" \"${description}\"\n+        done\n+    done\n+else\n+    if [ \"x$1\" == \"xall\" ]; then\n+        test_list=()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e11dc2fd9e333897d81f495fb01d4f0cb22e7af"}, "originalPosition": 368}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI5NDY4OQ==", "bodyText": "For scripts of this complexity I usually use Python, but hopefully this won't change much from now on.", "url": "https://github.com/vmware/differential-datalog/pull/793#discussion_r515294689", "createdAt": "2020-10-30T18:17:37Z", "author": {"login": "mbudiu-vmw"}, "path": "test.sh", "diffHunk": "@@ -0,0 +1,455 @@\n+#!/bin/bash\n+\n+set -e\n+\n+RED='\\033[0;31m'\n+GREEN='\\033[0;32m'\n+NC='\\033[0m' # No Color\n+THIS_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" >/dev/null 2>&1 && pwd )\"\n+LOG_DIR=\"${THIS_DIR}/testsuite.log\"\n+\n+fail() {\n+    printf \"${RED}FAIL${NC}\"\n+}\n+\n+ok() {\n+    printf \"${GREEN}OK${NC}\"\n+}\n+\n+testsuite_setup() {\n+    mkdir -p \"${LOG_DIR}\"\n+}\n+\n+gen_log_file_name() {\n+    log_file_name=\"${LOG_DIR}/${1}.log\"\n+}\n+\n+# Execute specified test function, redirecting outputs to a log file.\n+run_test() {\n+    gen_log_file_name ${1}\n+    if [ -z \"${NO_STD_REDIRECT}\" ]; then\n+        $1 &> \"${log_file_name}\"\n+    else\n+        $1\n+    fi\n+}\n+\n+# List of test groups\n+test_groups=(\"crates:Test DDlog runtime crates.\"\n+             \"basic:Test basic DDlog functionality.\"\n+             \"perf:Performance tests.\"\n+             \"go:Test Go bindings.\"\n+             \"java:Test Java bindings.\"\n+             \"ovn:Test OVN virtual network controller implemented in DDlog.\"\n+             \"sql:Test SQL-to-DDlog compiler.\"\n+             \"antrea:Test Antrea controller implemented in DDlog\"\n+             \"souffle:Tests imported from Souffle Datalog.\"\n+             \"d3log:Distributed DDlog (D3log) tests.\"\n+             \"misc:Miscellaneous other tests.\"\n+             \"stack:Tests using Haskell stack infrastructure.\")\n+\n+# List of tests in each group.  Test name must match the name of a function below.\n+\n+crates=(\"rust_fmt:Rust formatting\"\n+        \"rust_lint:Rust lints\"\n+        \"differential_datalog:Test 'differential_datalog' crate\"\n+        \"cmd_parser:Test 'cmd_parser' crate\"\n+        \"ovsdb:Test OVSDB bindings crate\"\n+        \"main_crate:Test main crate\")\n+\n+basic=(\"rust_api:Test Rust API to a DDlog program\"\n+       \"tutorial:Examples from the DDlog tutorial\"\n+       \"simple:Unit tests for various DDlog constructs\"\n+       \"simple2:Unit tests for various DDlog constructs, part 2\"\n+       \"libs:Tests for libraries in the 'lib' directory\"\n+       \"output_internal:Test '--output-internal-relations' switch\"\n+       \"stream:Test stream relations\")\n+\n+\n+perf=(\"dcm:Declarative Cluster Management benchmark\"\n+      \"redist_opt:'redist_opt' benchmark\")\n+\n+go=(\"go_test:Go API test\")\n+\n+java=(\"java0:Java API test 0\"\n+      \"java1:Java API test 1\"\n+      \"java2:Java API test 2\"\n+      \"java3:Java API test 3\"\n+      \"java4:Java API test 4\"\n+      \"flatbuf0:Java Flatbuf API test 0\"\n+      \"flatbuf1:Java Flatbuf API test 1\")\n+\n+sql=(\"sql_test:Test SQL-to-DDlog compiler\")\n+\n+ovn=(\"ovn_check:OVN controller test suite\")\n+\n+antrea=(\"antrea_check:Antrea tests\")\n+\n+souffle=(\"static_analysis:Souffle static analysis test.\"\n+         \"souffle_tests1:Souffle tests part1\"\n+         \"souffle_tests2:Souffle tests part2\"\n+         \"souffle_tests3:Souffle tests part3\"\n+         \"souffle_tests4:Souffle tests part4\"\n+         \"souffle_tests5:Souffle tests part5\"\n+         \"souffle_tests6:Souffle tests part6\"\n+         \"souffle_tests7:Souffle tests part7\")\n+\n+d3log=(\"tcp_channel:TCP channel test\"\n+       \"server_api:Test D3log server API\")\n+\n+misc=(\"span_string\"\n+      \"span_uuid\"\n+      \"path:Trivial graph reachability test\")\n+\n+stack=(\"modules:Test modules and imports\"\n+       \"ovn_ftl:Test FTL syntax\"\n+       \"ovn_mockup:OVN-inspired example\"\n+       \"redist:'redist' example\"\n+       \"negative:Negative tests that validate compiler error handling\")\n+\n+# 'crates' test group.\n+\n+rust_fmt() {\n+    (cd \"${THIS_DIR}/rust/template/\" && cargo fmt -- --check) &&\n+    (cd \"${THIS_DIR}/rust/template/cmd_parser\" && cargo fmt -- --check) &&\n+    (cd \"${THIS_DIR}/rust/template/ovsdb\" && cargo fmt -- --check) &&\n+    (cd \"${THIS_DIR}/rust/template/differential_datalog\" && cargo fmt -- --check) &&\n+    (cd \"${THIS_DIR}/lib\" && rustfmt *.rs --check)\n+}\n+\n+rust_lint() {\n+    (cd \"${THIS_DIR}/rust/template/\" && cargo clippy --features command-line,ovsdb -- -D warnings) &&\n+    (cd \"${THIS_DIR}/rust/template/cmd_parser\" && cargo clippy -- -D warnings) &&\n+    (cd \"${THIS_DIR}/rust/template/ovsdb\" && cargo clippy -- -D warnings) &&\n+    (cd \"${THIS_DIR}/rust/template/differential_datalog\" && cargo clippy -- -D warnings)\n+}\n+differential_datalog() {\n+    (cd \"${THIS_DIR}/rust/template/differential_datalog\" && cargo test)\n+}\n+\n+cmd_parser() {\n+    (cd \"${THIS_DIR}/rust/template/cmd_parser\" && cargo test)\n+}\n+ \n+ovsdb() {\n+    (cd \"${THIS_DIR}/rust/template/ovsdb\" && cargo test)\n+}\n+\n+main_crate() {\n+    (cd \"${THIS_DIR}/rust/template\" && cargo test --features command-line,ovsdb)\n+}\n+\n+# 'basic' test group.\n+\n+tutorial() {\n+    (cd \"${THIS_DIR}/test/datalog_tests\" && DDLOGFLAGS=\"-g\" ./run-test.sh tutorial release)\n+}\n+\n+rust_api() {\n+    ${THIS_DIR}/test/datalog_tests/rust_api_test/test.sh\n+}\n+\n+libs() {\n+    (cd \"${THIS_DIR}/test/datalog_tests\" && ./test-libs.sh)\n+}\n+\n+simple() {\n+    (cd \"${THIS_DIR}/test/datalog_tests\" && DDLOGFLAGS=\"-g\" CARGOFLAGS=\"--features nested_ts_32,profile\" ./run-test.sh simple release)\n+}\n+\n+simple2() {\n+    (cd \"${THIS_DIR}/test/datalog_tests\" && DDLOGFLAGS=\"-g --nested-ts-32\" ./run-test.sh simple2 release)\n+}\n+\n+negative() {\n+    (cd \"${THIS_DIR}\" && stack --no-terminal test --ta \"-p fail\")\n+}\n+\n+output_internal() {\n+    (cd \"${THIS_DIR}\" && ./test/datalog_tests/run-tests.sh three)\n+}\n+\n+stream() {\n+    (cd \"${THIS_DIR}/test/datalog_tests\" && ./test-stream.sh)\n+}\n+\n+# 'perf' test group.\n+\n+dcm() {\n+    (cd \"${THIS_DIR}/test/datalog_tests\" && ./test-dcm.sh)\n+}\n+\n+redist_opt() {\n+    (cd \"${THIS_DIR}/test/datalog_tests\" && ./test-redist_opt.sh)\n+}\n+\n+# 'go' test group\n+\n+go_test() {\n+    (cd \"${THIS_DIR}/go\" && ./test.sh && ./run-example.sh)\n+}\n+\n+# 'java' test group.\n+\n+java0() {\n+    (cd \"${THIS_DIR}/java/test\" && ./run.sh)\n+}\n+\n+java1() {\n+    (cd \"${THIS_DIR}/java/test1\" && ./run.sh)\n+}\n+\n+java2() {\n+    (cd \"${THIS_DIR}/java/test2\" && ./run.sh)\n+}\n+\n+java3() {\n+    (cd \"${THIS_DIR}/java/test3\" && ./run.sh)\n+}\n+\n+java4() {\n+    (cd \"${THIS_DIR}/java/test4\" && ./run.sh)\n+}\n+\n+flatbuf0() {\n+    (cd \"${THIS_DIR}/java/test_flatbuf\" && ./run.sh)\n+}\n+\n+flatbuf1() {\n+    (cd \"${THIS_DIR}/java/test_flatbuf1\" && ./run.sh)\n+}\n+\n+# 'sql' test group\n+\n+sql_test() {\n+    (cd \"${THIS_DIR}/java\" && make) &&\n+    (export DDLOG_HOME=\"${THIS_DIR}\" && cd \"${THIS_DIR}/sql\" && ./install-ddlog-jar.sh && mvn test)\n+}\n+\n+# 'ovn' test group.\n+\n+ovn_check() {\n+    (cd \"${THIS_DIR}/test\" && ./test-ovn.sh)\n+}\n+\n+# 'antrea' test group.\n+\n+antrea_check() {\n+    (cd \"${THIS_DIR}/test/antrea\" && ./test-antrea.sh)\n+}\n+\n+# 'souffle' test group.\n+\n+static_analysis() {\n+    (cd \"${THIS_DIR}/test/souffle0\" &&\n+     ../../tools/souffle_converter.py test.dl souffle --convert-dnf &&\n+     ../datalog_tests/run-test.sh souffle.dl release)\n+}\n+\n+souffle_tests1() {\n+    (cd \"${THIS_DIR}/test\" && ./run-souffle-tests-in-batches.py 0 24)\n+}\n+\n+souffle_tests2() {\n+    (cd \"${THIS_DIR}/test\" && ./run-souffle-tests-in-batches.py 25 49)\n+}\n+\n+souffle_tests3() {\n+    (cd \"${THIS_DIR}/test\" && ./run-souffle-tests-in-batches.py 50 74)\n+}\n+\n+souffle_tests4() {\n+    (cd \"${THIS_DIR}/test\" && ./run-souffle-tests-in-batches.py 75 99)\n+}\n+\n+souffle_tests5() {\n+    (cd \"${THIS_DIR}/test\" && ./run-souffle-tests-in-batches.py 100 124)\n+}\n+\n+souffle_tests6() {\n+    (cd \"${THIS_DIR}/test\" && ./run-souffle-tests-in-batches.py 125 149)\n+}\n+\n+souffle_tests7() {\n+    (cd \"${THIS_DIR}/test\" && ./run-souffle-tests-in-batches.py 150 175)\n+}\n+\n+# 'd3log' test group.\n+\n+tcp_channel() {\n+    #ZOOKEEPER_ENDPOINTS=\"127.0.0.1:2181\"\n+    #/usr/share/zookeeper/bin/zkServer.sh start &&\n+    (cd \"${THIS_DIR}/rust/template/distributed_datalog\" && cargo fmt -- --check) &&\n+    (cd \"${THIS_DIR}/rust/template/distributed_datalog\" && cargo clippy -- -D warnings) &&\n+    #for i in $(seq 100); do\n+    #    /usr/share/zookeeper/bin/zkServer.sh status && break;\n+    #    sleep 1\n+    #done &&\n+    (cd \"${THIS_DIR}/rust/template/distributed_datalog\" && (\n+        i=0;\n+        true;\n+        while [ $? -eq 0 -a $i -lt 100 ]; do\n+          i=$((i+1));\n+          cargo test -- tcp_channel::;\n+        done\n+        )\n+    )\n+}\n+\n+server_api() {\n+    # It seems that stale files cause cargo to rebuild the project\n+    # unnecessarily in CI.\n+    #rm -rf test/datalog_tests/server_api_ddlog\n+    (export DDLOG_HOME=\"${THIS_DIR}\" && \"${THIS_DIR}/test/datalog_tests/test-server_api.sh\")\n+}\n+\n+# 'stack' test group.\n+\n+modules() {\n+    (cd \"${THIS_DIR}\" && stack --no-terminal test --ta \"-p modules\")\n+}\n+\n+ovn_ftl() {\n+    (cd \"${THIS_DIR}\" && stack --no-terminal test --ta \"-p ovn_ftl\")\n+}\n+\n+ovn_mockup() {\n+    (cd \"${THIS_DIR}\" && stack test --ta '-p \"$(NF) == \\\"generate ovn\\\" || ($(NF-1) == \\\"compiler tests\\\" && $(NF) == \\\"ovn\\\")\"')\n+}\n+\n+redist() {\n+    (cd \"${THIS_DIR}\" && STACK_CARGO_FLAGS='--release' stack test --ta '-p \"$(NF) == \\\"generate redist\\\" || ($(NF-1) == \\\"compiler tests\\\" && $(NF) == \\\"redist\\\")\"')\n+}\n+\n+# 'misc' test group.\n+\n+span_string() {\n+    (cd \"${THIS_DIR}/test/datalog_tests\" && ./run-test.sh span_string release)\n+}\n+\n+span_uuid() {\n+    (cd \"${THIS_DIR}/test/datalog_tests\" && ./run-test.sh span_uuid release)\n+}\n+\n+path() {\n+    (cd \"${THIS_DIR}/test/datalog_tests\" && ./run-test.sh path release)\n+}\n+\n+#==========================================\n+# Main test script.\n+#==========================================\n+\n+printf \"DDlog test suite\\n\\n\"\n+testsuite_setup\n+\n+if ( [ \"$#\" -eq 0 ] || [ \"x$1\" == \"xhelp\" ] || [ \"x$1\" == \"x--help\" ] ); then\n+    printf \"Usage: ${0} test_or_test_group1 test_or_test_group2 ...\\n\"\n+    printf \"   or: ${0} all\\n\\n\"\n+    printf \"Available test groups:\\n\"\n+    for group_with_descr in \"${test_groups[@]}\"\n+    do\n+        IFS=\":\" read -ra tokens <<< \"$group_with_descr\"\n+        group=${tokens[0]}\n+        description=${tokens[1]}\n+\n+        printf \"\\n    ${group}: ${description}\\n\"\n+\n+        eval \"tests=(\\\"\\${${group}[@]}\\\")\"\n+        for tst_with_descr in \"${tests[@]}\"\n+        do\n+            IFS=\":\" read -ra tokens <<< \"$tst_with_descr\"\n+            tst=${tokens[0]}\n+            description=${tokens[1]}\n+            printf \"        %-25s %s\\n\" \"${tst}\" \"${description}\"\n+        done\n+    done\n+else\n+    if [ \"x$1\" == \"xall\" ]; then\n+        test_list=()\n+        for group_with_descr in \"${test_groups[@]}\"\n+        do\n+            IFS=\":\" read -ra tokens <<< \"$group_with_descr\"\n+            group=${tokens[0]}\n+            test_list+=(${group})\n+        done\n+    else\n+        test_list=\"$@\"\n+    fi\n+\n+    # Make a list of tests to run.\n+    all_tests=()\n+\n+    for tst in \"${test_list[@]}\"\n+    do\n+        if [[ \"${test_groups[@]}\" =~ \"${tst}\" ]]; then\n+            #echo \"test group '${tst}'\"\n+            eval \"tests=(\\\"\\${${tst}[@]}\\\")\"\n+            for tst_with_descr in \"${tests[@]}\"\n+            do\n+                IFS=\":\" read -ra tokens <<< \"$tst_with_descr\"\n+                tst_func=${tokens[0]}\n+\n+                # Only add test if not already in the list.\n+                if ! [[ \" ${all_tests[@]} \" =~ \" ${tst_func} \" ]]; then\n+                    all_tests+=(${tst_func})\n+                fi\n+            done\n+\n+        else\n+            # Only add test if not already in the list.\n+            if ! [[ \" ${all_tests[@]} \" =~ \" ${tst} \" ]]; then\n+                all_tests+=(${tst})\n+            fi\n+        fi\n+    done\n+\n+    echo \"Running the following tests: ${all_tests[@]}\"\n+    echo \"\"\n+\n+    # Validate the resulting list of tests.\n+    for tst in \"${all_tests[@]}\"; do\n+        if ! ([ -n \"$(type -t ${tst})\" ] && [ \"$(type -t ${tst})\" = function ]); then\n+            echo \"Unknown test '${tst}'\"\n+            fail=1\n+        fi\n+    done\n+\n+    if [ \" ${fail} \" == \" 1 \" ]; then\n+        printf \"${RED}FAIL${NC}\\n\"\n+        exit 1\n+    fi\n+\n+    # Run the tests.\n+    passed=0\n+    failed=0\n+    for tst in \"${all_tests[@]}\"; do\n+        printf \"%-25s %s\" \"${tst}\"\n+        start=`date +%s`\n+        if run_test \"${tst}\"; then\n+            ok\n+            passed=$((passed+1))\n+        else\n+            fail\n+            if [ -z \"${NO_STD_REDIRECT}\" ]; then\n+                printf \" [output saved in '${log_file_name}']\"\n+            fi\n+            failed=$((failed+1))\n+        fi\n+        end=`date +%s`\n+        runtime=$((end-start))\n+        printf \" (${runtime}s)\\n\"\n+    done", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e11dc2fd9e333897d81f495fb01d4f0cb22e7af"}, "originalPosition": 441}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4419, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}