{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NDg4MjQx", "number": 528, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMToyMjozNFrODhSFmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMTozMDowOFrODhSUOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MjI1OTQ2OnYy", "diffSide": "RIGHT", "path": "test/datalog_tests/json_test.dl", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMToyMjozNFrOFr9pcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMTozNzoyOVrOFr-MTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY0MzEyMw==", "bodyText": "This Look like it could use a little helper function.", "url": "https://github.com/vmware/differential-datalog/pull/528#discussion_r381643123", "createdAt": "2020-02-20T01:22:34Z", "author": {"login": "mbudiu-vmw"}, "path": "test/datalog_tests/json_test.dl", "diffHunk": "@@ -0,0 +1,107 @@\n+import json\n+\n+output relation JsonTest(description: string, value: string)\n+\n+\n+typedef BoolStruct = BoolStruct {\n+    b: bool\n+}\n+\n+function boolStruct1(): string = [|{\"b\":true}|]\n+function boolStruct2(): string = [|{\"b\":true, \"foo\":\"bar\"}|]\n+function boolStruct3(): string = [|{\"foo\":\"bar\"}|]\n+\n+JsonTest(boolStruct1(),\n+         result_unwrap_or_default(to_json_string(from_json_string(boolStruct1()): Result<BoolStruct, string>))).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2730be320e92579893d6d3a5b154e6689bdf4ed"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY1MjA0NQ==", "bodyText": "Unfortunately, a function won't work, as I need to sneak the type annotations in-between the two transformations (otherwise it's just a function from strings to strings and there is no way for the compiler to figure out what the deserialized type should be).\nI guess I can at least use\n function to_json_string_or_default(x: 'T): string", "url": "https://github.com/vmware/differential-datalog/pull/528#discussion_r381652045", "createdAt": "2020-02-20T01:37:29Z", "author": {"login": "ryzhyk"}, "path": "test/datalog_tests/json_test.dl", "diffHunk": "@@ -0,0 +1,107 @@\n+import json\n+\n+output relation JsonTest(description: string, value: string)\n+\n+\n+typedef BoolStruct = BoolStruct {\n+    b: bool\n+}\n+\n+function boolStruct1(): string = [|{\"b\":true}|]\n+function boolStruct2(): string = [|{\"b\":true, \"foo\":\"bar\"}|]\n+function boolStruct3(): string = [|{\"foo\":\"bar\"}|]\n+\n+JsonTest(boolStruct1(),\n+         result_unwrap_or_default(to_json_string(from_json_string(boolStruct1()): Result<BoolStruct, string>))).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY0MzEyMw=="}, "originalCommit": {"oid": "d2730be320e92579893d6d3a5b154e6689bdf4ed"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MjI5Njg5OnYy", "diffSide": "RIGHT", "path": "test/datalog_tests/tutorial.ast.expected", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMTozMDowOFrOFr97lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMTozMDowOFrOFr97lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY0Nzc2NA==", "bodyText": "I wonder whether we could somehow automatically prepend std to avoid always changing all reference outputs", "url": "https://github.com/vmware/differential-datalog/pull/528#discussion_r381647764", "createdAt": "2020-02-20T01:30:08Z", "author": {"login": "mbudiu-vmw"}, "path": "test/datalog_tests/tutorial.ast.expected", "diffHunk": "@@ -270,6 +270,7 @@ function std.result_unwrap_or (res: std.Result<'V,'E>, def: 'V): 'V =\n         std.Ok{.res=var v} -> v,\n         std.Err{.err=_} -> def\n     }\n+extern function std.result_unwrap_or_default (res: std.Result<'V,'E>): 'V", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2730be320e92579893d6d3a5b154e6689bdf4ed"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4870, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}