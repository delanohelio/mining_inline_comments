{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwODgwOTM4", "number": 869, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMTowOTowMFrOFGZdfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMTowOTowMFrOFGZdfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMjUyOTI2OnYy", "diffSide": "RIGHT", "path": "lib/internment.rs", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMTowOTowMFrOIHZPGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMTozMDozMFrOIHZ_sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYyNDQxMA==", "bodyText": "Thanks for the PR!\nI don't understand this paragraph. How can one rely on a variable being pre-interned? What kind of usage pattern are you trying to prevent here?", "url": "https://github.com/vmware/differential-datalog/pull/869#discussion_r544624410", "createdAt": "2020-12-16T21:09:00Z", "author": {"login": "ryzhyk"}, "path": "lib/internment.rs", "diffHunk": "@@ -1,190 +1,281 @@\n-use differential_datalog::record;\n-use differential_datalog::record::Record;\n-use std::cmp;\n-use std::fmt;\n-use std::hash::Hash;\n-\n+use arc_interner::ArcIntern;\n+use ddlog_std::Vec as DDlogVec;\n+use differential_datalog::record::{self, Record};\n+use serde::{de::Deserializer, ser::Serializer};\n+use std::{\n+    cmp::{self, Ordering},\n+    fmt::{Debug, Display, Formatter, Result as FmtResult},\n+    hash::Hash,\n+};\n+\n+/// An atomically reference counted handle to an interned value\n+///\n+/// While this type is thread safe, it may cause logical bugs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a75ecdbddf7853f43677cd94a475016b4a3cbab"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYzMzQ5NA==", "bodyText": "It's just letting the user know that it's a global store of all interned items", "url": "https://github.com/vmware/differential-datalog/pull/869#discussion_r544633494", "createdAt": "2020-12-16T21:24:48Z", "author": {"login": "Kixiron"}, "path": "lib/internment.rs", "diffHunk": "@@ -1,190 +1,281 @@\n-use differential_datalog::record;\n-use differential_datalog::record::Record;\n-use std::cmp;\n-use std::fmt;\n-use std::hash::Hash;\n-\n+use arc_interner::ArcIntern;\n+use ddlog_std::Vec as DDlogVec;\n+use differential_datalog::record::{self, Record};\n+use serde::{de::Deserializer, ser::Serializer};\n+use std::{\n+    cmp::{self, Ordering},\n+    fmt::{Debug, Display, Formatter, Result as FmtResult},\n+    hash::Hash,\n+};\n+\n+/// An atomically reference counted handle to an interned value\n+///\n+/// While this type is thread safe, it may cause logical bugs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYyNDQxMA=="}, "originalCommit": {"oid": "8a75ecdbddf7853f43677cd94a475016b4a3cbab"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYzNjg0OA==", "bodyText": "How can this lead to logical bugs?\nThe rest of the PR looks great, but I feel that this comment needs to be removed or rephrased. Perhaps just pointing to the arc_interner crate documentation is good enough.", "url": "https://github.com/vmware/differential-datalog/pull/869#discussion_r544636848", "createdAt": "2020-12-16T21:30:30Z", "author": {"login": "ryzhyk"}, "path": "lib/internment.rs", "diffHunk": "@@ -1,190 +1,281 @@\n-use differential_datalog::record;\n-use differential_datalog::record::Record;\n-use std::cmp;\n-use std::fmt;\n-use std::hash::Hash;\n-\n+use arc_interner::ArcIntern;\n+use ddlog_std::Vec as DDlogVec;\n+use differential_datalog::record::{self, Record};\n+use serde::{de::Deserializer, ser::Serializer};\n+use std::{\n+    cmp::{self, Ordering},\n+    fmt::{Debug, Display, Formatter, Result as FmtResult},\n+    hash::Hash,\n+};\n+\n+/// An atomically reference counted handle to an interned value\n+///\n+/// While this type is thread safe, it may cause logical bugs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYyNDQxMA=="}, "originalCommit": {"oid": "8a75ecdbddf7853f43677cd94a475016b4a3cbab"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4712, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}