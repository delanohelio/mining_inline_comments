{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2OTg2MzUx", "number": 662, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDo0Nzo0OFrOD7320Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDo0OTo0MlrOD7337w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTA3NzI5OnYy", "diffSide": "RIGHT", "path": "rust/template/ddlog.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDo0Nzo0OFrOGUdyCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDo0Nzo0OFrOGUdyCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDExMjY0OA==", "bodyText": "you swapped this comment with the next.", "url": "https://github.com/vmware/differential-datalog/pull/662#discussion_r424112648", "createdAt": "2020-05-13T00:47:48Z", "author": {"login": "mbudiu-vmw"}, "path": "rust/template/ddlog.h", "diffHunk": "@@ -495,6 +492,149 @@ extern int ddlog_dump_table(ddlog_prog prog, table_id table,\n                             bool (*cb)(uintptr_t arg, const ddlog_record *rec),\n                             uintptr_t cb_arg);\n \n+/**********************************************************************\n+ * Delta API.\n+ **********************************************************************/\n+\n+/*\n+ * Creates an empty delta.\n+ */\n+extern ddlog_delta* ddlog_new_delta(void);\n+\n+/*\n+ * Retrieve changes to a specific table.\n+ *\n+ * Returns a delta that only contains changes to one table.\n+ */\n+extern ddlog_delta* ddlog_delta_get_table(const ddlog_delta *delta, table_id table);\n+\n+/*\n+ * Enumerate changes in this delta.\n+ *\n+ * Invokes `cb` for each record in `delta`.\n+ *\n+ * `cb_arg` is an opaque handle passed to each `cb invocation`.\n+ */\n+extern void ddlog_delta_enumerate(\n+    const ddlog_delta *delta,\n+    void (*cb)(uintptr_t arg,\n+               table_id table,\n+               const ddlog_record *rec,\n+               bool polarity),\n+    uintptr_t cb_arg);\n+\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce3946a0bf12e4fa0ff980279080ab44a12e17e7"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTA4MDE1OnYy", "diffSide": "RIGHT", "path": "rust/template/ddlog.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDo0OTo0MlrOGUdz3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDo0OTo0MlrOGUdz3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDExMzExOQ==", "bodyText": "just wait until we add multisets", "url": "https://github.com/vmware/differential-datalog/pull/662#discussion_r424113119", "createdAt": "2020-05-13T00:49:42Z", "author": {"login": "mbudiu-vmw"}, "path": "rust/template/ddlog.h", "diffHunk": "@@ -495,6 +492,149 @@ extern int ddlog_dump_table(ddlog_prog prog, table_id table,\n                             bool (*cb)(uintptr_t arg, const ddlog_record *rec),\n                             uintptr_t cb_arg);\n \n+/**********************************************************************\n+ * Delta API.\n+ **********************************************************************/\n+\n+/*\n+ * Creates an empty delta.\n+ */\n+extern ddlog_delta* ddlog_new_delta(void);\n+\n+/*\n+ * Retrieve changes to a specific table.\n+ *\n+ * Returns a delta that only contains changes to one table.\n+ */\n+extern ddlog_delta* ddlog_delta_get_table(const ddlog_delta *delta, table_id table);\n+\n+/*\n+ * Enumerate changes in this delta.\n+ *\n+ * Invokes `cb` for each record in `delta`.\n+ *\n+ * `cb_arg` is an opaque handle passed to each `cb invocation`.\n+ */\n+extern void ddlog_delta_enumerate(\n+    const ddlog_delta *delta,\n+    void (*cb)(uintptr_t arg,\n+               table_id table,\n+               const ddlog_record *rec,\n+               bool polarity),\n+    uintptr_t cb_arg);\n+\n+/*\n+ * Remove changes to the specified table from `delta` and return them as a separate\n+ * delta.  The caller is responsible for deallocating the new delta.\n+ */\n+extern void ddlog_delta_clear_table(ddlog_delta *delta, table_id table);\n+\n+/*\n+ * Remove changes to the specified table from `delta`.\n+ */\n+extern ddlog_delta* ddlog_delta_remove_table(ddlog_delta *delta, table_id table);\n+\n+/*\n+ * Clear changes to all tables.  Leaves `delta` empty.\n+ */\n+extern void ddlog_delta_clear(ddlog_delta *delta);\n+\n+/*\n+ * Adds the contents of `new_delta` to `delta`.\n+ *\n+ * Example 1: `delta` does not contain record `r`; `new_delta` contains record\n+ * `r` with polarity `p`.  `r` gets added to `delta` with polarity `p`.\n+ *\n+ * Example 2: `delta` contains record `r` with polarity `p`; `new_delta` does\n+ * not contain `r`.  The state of `r` in `delta` does not change.\n+ *\n+ * Example 3: `delta` contains record `r` with polarity `p`; `new_delta`\n+ * contains the same record with the opposite polarity. The two changes\n+ * cancel out, and the record gets removed from `delta`.\n+ *\n+ * Example 4: `delta` and `new_delta` contain `r` with the same polarities.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce3946a0bf12e4fa0ff980279080ab44a12e17e7"}, "originalPosition": 203}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4754, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}