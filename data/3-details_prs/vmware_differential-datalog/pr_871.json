{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxNDI0OTUx", "number": 871, "title": "Refactored ddlog_std", "bodyText": "Refactored (some of) ddlog_std\nBetter Debug implementations for tuples, Vec, Set and Map\nAdded tuple1\nAdded From/Into implementations for Vec and all tuple types\nAdded FromRecord/IntoRecord for single element tuples", "createdAt": "2020-12-16T20:37:10Z", "url": "https://github.com/vmware/differential-datalog/pull/871", "merged": true, "mergeCommit": {"oid": "c1f535fddc92bc5be9a6899fbe2c94b99d56838c"}, "closed": true, "closedAt": "2020-12-20T20:50:14Z", "author": {"login": "Kixiron"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdn24osgH2gAyNTQxNDI0OTUxOjg3YmMyMWU2NzYyODgwNTFlZTBiZjk4ZGEyM2ZhMDlmYTMzZTc5NWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdoG1LJgBqjQxMzM2MjA4OTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "87bc21e676288051ee0bf98da23fa09fa33e795d", "author": {"user": {"login": "Kixiron", "name": "Chase Wilson"}}, "url": "https://github.com/vmware/differential-datalog/commit/87bc21e676288051ee0bf98da23fa09fa33e795d", "committedDate": "2020-12-20T01:17:01Z", "message": "Made the differential_datalog crate use a src directory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51e75a5a0a84288261b197e6cf0fb497b32aa088", "author": {"user": {"login": "Kixiron", "name": "Chase Wilson"}}, "url": "https://github.com/vmware/differential-datalog/commit/51e75a5a0a84288261b197e6cf0fb497b32aa088", "committedDate": "2020-12-20T01:19:24Z", "message": "Refactored ddlog_std module, added tuple1 and reworked debug implementations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1OTc5MTY0", "url": "https://github.com/vmware/differential-datalog/pull/871#pullrequestreview-555979164", "createdAt": "2020-12-20T01:23:50Z", "commit": {"oid": "07ac7ad3766d1c1d54d1ac3fd4d79e74396143eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQwMToyMzo1MFrOII_1dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQwMToyMzo1MFrOII_1dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMwNTM5OA==", "bodyText": "Just curious, why the strong preference for single-line comments?", "url": "https://github.com/vmware/differential-datalog/pull/871#discussion_r546305398", "createdAt": "2020-12-20T01:23:50Z", "author": {"login": "ryzhyk"}, "path": "lib/ddlog_std.rs", "diffHunk": "@@ -202,81 +203,88 @@ pub fn bigint_pow32(base: &ddlog_bigint::Int, exp: &u32) -> ddlog_bigint::Int {\n }\n \n // Option\n-pub fn option2std<T>(x: ::std::option::Option<T>) -> Option<T> {\n+pub fn option2std<T>(x: StdOption<T>) -> Option<T> {\n     match x {\n-        ::std::option::Option::None => Option::None,\n-        ::std::option::Option::Some(v) => Option::Some { x: v },\n+        StdOption::None => Option::None,\n+        StdOption::Some(v) => Option::Some { x: v },\n     }\n }\n \n-pub fn std2option<T>(x: Option<T>) -> ::std::option::Option<T> {\n+pub fn std2option<T>(x: Option<T>) -> StdOption<T> {\n     match x {\n-        Option::None => ::std::option::Option::None,\n-        Option::Some { x } => ::std::option::Option::Some(x),\n+        Option::None => StdOption::None,\n+        Option::Some { x } => StdOption::Some(x),\n     }\n }\n \n-impl<T> From<::std::option::Option<T>> for Option<T> {\n-    fn from(x: ::std::option::Option<T>) -> Self {\n+impl<T> From<StdOption<T>> for Option<T> {\n+    fn from(x: StdOption<T>) -> Self {\n         option2std(x)\n     }\n }\n \n // this requires Rust 1.41+\n-impl<T> From<Option<T>> for ::std::option::Option<T> {\n+impl<T> From<Option<T>> for StdOption<T> {\n     fn from(x: Option<T>) -> Self {\n         std2option(x)\n     }\n }\n \n-impl<A: FromRecord + serde::de::DeserializeOwned + Default> FromRecord for Option<A> {\n-    fn from_record(val: &Record) -> result::Result<Self, String> {\n+impl<T> FromRecord for Option<T>\n+where\n+    T: FromRecord + DeserializeOwned + Default,\n+{\n+    fn from_record(val: &Record) -> StdResult<Self, String> {\n         match val {\n             Record::PosStruct(constr, args) => match constr.as_ref() {\n                 \"ddlog_std::None\" if args.len() == 0 => Ok(Option::None {}),\n                 \"ddlog_std::Some\" if args.len() == 1 => Ok(Option::Some {\n-                    x: <A>::from_record(&args[0])?,\n+                    x: <T>::from_record(&args[0])?,\n                 }),\n-                c => result::Result::Err(format!(\n+                c => StdResult::Err(format!(\n                     \"unknown constructor {} of type Option in {:?}\",\n                     c, *val\n                 )),\n             },\n+\n             Record::NamedStruct(constr, args) => match constr.as_ref() {\n                 \"ddlog_std::None\" => Ok(Option::None {}),\n                 \"ddlog_std::Some\" => Ok(Option::Some {\n-                    x: arg_extract::<A>(args, \"x\")?,\n+                    x: arg_extract::<T>(args, \"x\")?,\n                 }),\n-                c => result::Result::Err(format!(\n+                c => StdResult::Err(format!(\n                     \"unknown constructor {} of type Option in {:?}\",\n                     c, *val\n                 )),\n             },\n-            /* `Option` encoded as an array of size 0 or 1.  This is, for instance, useful when\n-             * interfacing with OVSDB. */\n+\n+            // `Option` encoded as an array of size 0 or 1.  This is, for instance, useful when", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07ac7ad3766d1c1d54d1ac3fd4d79e74396143eb"}, "originalPosition": 243}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87e918c7079eee4053b0b7e88d1bcd8ba04e3125", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/87e918c7079eee4053b0b7e88d1bcd8ba04e3125", "committedDate": "2020-12-20T19:32:57Z", "message": "Fixup libraries for the new `Vec` API.\n\nMake `allocate.rs`, `base64.rs`, and `tinyset.rs` compatible with the\nnew `Vec` Rust API."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3db58ad0ba7b0cbc595187e7dd3c9c5956f2b6fb", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/3db58ad0ba7b0cbc595187e7dd3c9c5956f2b6fb", "committedDate": "2020-12-20T19:50:23Z", "message": "test-ovn.sh: Update OVN repo branch.\n\nUse newer branch of OVN repo that works with the new Vec API."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "07ac7ad3766d1c1d54d1ac3fd4d79e74396143eb", "author": {"user": {"login": "Kixiron", "name": "Chase Wilson"}}, "url": "https://github.com/vmware/differential-datalog/commit/07ac7ad3766d1c1d54d1ac3fd4d79e74396143eb", "committedDate": "2020-12-16T20:35:11Z", "message": "Refactored ddlog_std module, added tuple1 and reworked debug implementations"}, "afterCommit": {"oid": "3db58ad0ba7b0cbc595187e7dd3c9c5956f2b6fb", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/3db58ad0ba7b0cbc595187e7dd3c9c5956f2b6fb", "committedDate": "2020-12-20T19:50:23Z", "message": "test-ovn.sh: Update OVN repo branch.\n\nUse newer branch of OVN repo that works with the new Vec API."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4493, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}