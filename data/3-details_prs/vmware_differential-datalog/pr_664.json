{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4MjU4NjQ3", "number": 664, "title": "Shared refs", "bodyText": "Details in commit messages.", "createdAt": "2020-05-14T21:35:27Z", "url": "https://github.com/vmware/differential-datalog/pull/664", "merged": true, "mergeCommit": {"oid": "916d78427cc28ac0dafeecdac9ec1dc4fe56bb91"}, "closed": true, "closedAt": "2020-05-15T06:25:32Z", "author": {"login": "ryzhyk"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchVBcbAFqTQxMjIxMDgwMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABchbXU_ABqjMzMzk0MjgxMzM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMjEwODAx", "url": "https://github.com/vmware/differential-datalog/pull/664#pullrequestreview-412210801", "createdAt": "2020-05-14T21:50:32Z", "commit": {"oid": "1ada706277b963cdb15aaf9a766875cbe1283d3b"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMTo1MDozMlrOGVve9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMjoxNTowNlrOGVwFrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ1MTI1Mg==", "bodyText": "this is not really an argument, is it?\nit's the annotated object.", "url": "https://github.com/vmware/differential-datalog/pull/664#discussion_r425451252", "createdAt": "2020-05-14T21:50:32Z", "author": {"login": "mbudiu-vmw"}, "path": "src/Language/DifferentialDatalog/Attribute.hs", "diffHunk": "@@ -70,6 +71,11 @@ typedefValidateAttr d TypeDef{..} attr = do\n             let t = fromJust tdefType\n             check d (isStruct d t) (pos attr)\n                 $ \"'custom_serde' attribute cannot be applied to type aliases.\"\n+         \"shared_ref\" -> do\n+            check d (isNothing tdefType) (pos attr)\n+                $ \"'sharef_ref' attribute is only applicable to extern types.\"\n+            check d (length tdefArgs == 1) (pos attr)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ada706277b963cdb15aaf9a766875cbe1283d3b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2MDI3NQ==", "bodyText": "I suspect you don't need the d here", "url": "https://github.com/vmware/differential-datalog/pull/664#discussion_r425460275", "createdAt": "2020-05-14T22:12:47Z", "author": {"login": "mbudiu-vmw"}, "path": "test/datalog_tests/internment_test.dl", "diffHunk": "@@ -20,3 +20,29 @@ OInternedString(ival(s), s) :-\n OInternedString(ival(s1) ++ \" \" ++ ival(s2), intern(ival(s1) ++ \" \" ++ ival(s2))) :-\n     AllInternedString(s1),\n     AllInternedString(s2).\n+\n+typedef IUnion = Tag1{f1: bool}\n+               | Tag2{f2: u32, f3: string}\n+\n+typedef IStruct = IStruct {\n+    u: Intern<IUnion>,\n+    t: Intern<(s32, double)>,\n+    x: bigint\n+}\n+\n+input relation IStruct[Intern<IStruct>]\n+\n+output relation Projections(inp: Intern<IStruct>, p: string)\n+\n+Projections(i, \"x=${i.x}\") :-\n+    IStruct[i].\n+Projections(i, \"t.0=${i.t.0}\") :-\n+    i in &IStruct().\n+Projections(i, \"t.1=${i.t.1}\") :-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ada706277b963cdb15aaf9a766875cbe1283d3b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2MTE2Nw==", "bodyText": "I don't really grasp what the user should know about this annotation.\nI don't really understand what it does; I suspect it's really tied to the Rust implementation.", "url": "https://github.com/vmware/differential-datalog/pull/664#discussion_r425461167", "createdAt": "2020-05-14T22:15:06Z", "author": {"login": "mbudiu-vmw"}, "path": "lib/intern.dl", "diffHunk": "@@ -14,6 +14,7 @@\n  * There is simply no way to obtain an interned object of a different type.\n  */\n #[size=4]\n+#[shared_ref]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ada706277b963cdb15aaf9a766875cbe1283d3b"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a968db94b9fd1ed99f8aa0cca319a56db0c1b36c", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/a968db94b9fd1ed99f8aa0cca319a56db0c1b36c", "committedDate": "2020-05-15T05:37:30Z", "message": "Shared reference abstraction.\n\nWe introduce the notion of shared reference that generalizes `Ref<>` and\n`Intern<>`.\n\nSummary\n-------\n\n`Ref` and `Intern` types have the same purpose (but different\nperformance characteristics) and similar semantics.  The compiler has\nsome amount of builtin support for both of them.  This patch generalizes\nthis support by abstracting away both types as shared references.  It\nalso enables additional user-defined share reference types to be added\nin the future.  As a result, `&` pattern matching syntax now works for\nboth `Ref` and `Intern`, which enables wider use of the latter.\n\nDetails\n-------\n\n`Ref` and `Intern` are both motivated by the fact that DDlog records are\nimmutable, and therefore can be copied around by reference, which saves\na lot of memory for large records.\n\nCompared to `Ref`, `Intern` enables faster comparison and hashing\noperations at the cost of slower creation plus some locking overhead.\n\nThe compiler has some builtin support for both types, but support for\n`Ref` is more extensive; most importantly, the `&` syntax allows pattern\nmatching values inside `Ref`, which is essential in order to store\nstructured data by reference.\n\nInstead of duplicating the same features for `Intern`, we unify both\ntypes as a new \"shared reference\" abstraction.  This is possible since\nthe compiler only really cares that the type implements `Deref` trait in\nRust for the pattern matching functionality.  We introduce a new\nannotation applicable to any extern type with exactly one type argument:\n\n ```\n #[shared_ref]\n extern type XXX<YYY>\n ```\n\nWe generalize the implementation of `&`-matching to work for all\n`shared_ref` types."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce12259e395286ced8f2c0f92d7ff68abf429868", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/ce12259e395286ced8f2c0f92d7ff68abf429868", "committedDate": "2020-05-15T05:37:30Z", "message": "Compare interned values by pointer.\n\nWe change the implementnation of `Ord` and `PartialOrd` traits for\n`Intern` to compare pointers instead of actual values, which leads to\nmassive speed-ups, but introduces non-determinism across DDlog runs\n(see #663)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ada706277b963cdb15aaf9a766875cbe1283d3b", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/1ada706277b963cdb15aaf9a766875cbe1283d3b", "committedDate": "2020-05-14T21:33:52Z", "message": "Compare interned values by pointer.\n\nWe change the implementnation of `Ord` and `PartialOrd` traits for\n`Intern` to compare pointers instead of actual values, which leads to\nmassive speed-ups, but introduces non-determinism across DDlog runs\n(see #663)"}, "afterCommit": {"oid": "ce12259e395286ced8f2c0f92d7ff68abf429868", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/ce12259e395286ced8f2c0f92d7ff68abf429868", "committedDate": "2020-05-15T05:37:30Z", "message": "Compare interned values by pointer.\n\nWe change the implementnation of `Ord` and `PartialOrd` traits for\n`Intern` to compare pointers instead of actual values, which leads to\nmassive speed-ups, but introduces non-determinism across DDlog runs\n(see #663)"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4532, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}