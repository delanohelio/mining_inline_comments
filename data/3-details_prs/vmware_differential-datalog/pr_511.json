{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNjk1NzQw", "number": 511, "title": "Pass group-by variables to aggregation functions.", "bodyText": "Aggregation functions previously took the contents of the group as the\nonly argument. In some cases, e.g., in the SQL converter, it is helpful\nto pass the group key as well.  We add this capability without changing\nexisting syntax.  The only change is that the `Group` type is now\nparameterized with both key and value types.  A program can iterate over\ngroup values as before; in addition, the `group_key(Group<'K,'V>): 'K`\nfunction extracts the group key.\n\nExample:\n\n```\n// Custom aggregation function that group of (vendor, price) tuples and\n// uses item name as key, and returns a string containing item name, along\n// with the lowest price and matching vendor for this item.\nfunction best_vendor_string(g: Group<string, (string, bit<64>)>): string =\n{\n    var min_vendor = \"\";\n    var min_price: bit<64> = 'hffffffffffffffff;\n    for (vendor_price in g) {\n        if (vendor_price.1 < min_price) {\n            min_vendor = vendor_price.0;\n            min_price = vendor_price.1\n        }\n    };\n    \"Best deal for ${group_key(g)}: ${min_vendor}, $${min_price}\"\n}\n\noutput relation BestDeal(best: string)\nBestDeal(best) :-\n    Price(item, vendor, price),\n    var best = Aggregate((item), best_vendor_string((vendor, price))).\n```", "createdAt": "2020-02-08T08:55:25Z", "url": "https://github.com/vmware/differential-datalog/pull/511", "merged": true, "mergeCommit": {"oid": "fbba6301f8bc719e9429ea8ca9025c344ca2fcb0"}, "closed": true, "closedAt": "2020-02-12T16:33:14Z", "author": {"login": "ryzhyk"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDAq15gFqTM1NjEyODg3MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDpqyhAFqTM1NzY0MDMyMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MTI4ODcx", "url": "https://github.com/vmware/differential-datalog/pull/511#pullrequestreview-356128871", "createdAt": "2020-02-10T17:34:38Z", "commit": {"oid": "cf63c748cf7a079ae3d9ff1efc277e8e294cc900"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzozNDozOFrOFnvHag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzozNDozOFrOFnvHag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIxMDczMA==", "bodyText": "Frankly I find this quite confusing. The signature of the function is not the same in the declaration and in the call.\nIs backwards compatibility so important? If you want to make changes to the language you should do them while it still has few users. You can provide a good diagnostic to help people migrate their code.\nI think it's cleaner if the Group object just has a key field. Group should be templated on two types, the key type and the value type. If you really want backwards compatibility you can have the for operate directly on the group. In LINQ this is done by the group implementing the IEnumerable<Value> interface.", "url": "https://github.com/vmware/differential-datalog/pull/511#discussion_r377210730", "createdAt": "2020-02-10T17:34:38Z", "author": {"login": "mbudiu-vmw"}, "path": "doc/tutorial/tutorial.md", "diffHunk": "@@ -987,6 +987,34 @@ BestPricePerVendor(item, vendor, best_price) :-\n     var best_price = Aggregate((item, vendor), group_min(price)).\n ```\n \n+The aggregation function can take group-by variables in addition to\n+the group.  The following custom aggregation function computes the cheapest\n+vendor for each item and returns a string containing item name, vendor,\n+and price:\n+\n+```\n+function best_vendor_string(item: string, g: Group<(string, bit<64>)>): string =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf63c748cf7a079ae3d9ff1efc277e8e294cc900"}, "originalPosition": 28}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cf63c748cf7a079ae3d9ff1efc277e8e294cc900", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/cf63c748cf7a079ae3d9ff1efc277e8e294cc900", "committedDate": "2020-02-08T08:16:57Z", "message": "Pass group-by variables to aggregation functions.\n\nAggregation functions previoualy took the contents of the group as the\nonly argument. In some cases, e.g., in the SQL converter, it is helpful\nto pass the group key as well.  We add this capability without changing\nexisting syntax.  The only change is that the programmer can not declare\naggregation functions that take additional group-by variables, i.e.,\ninstead of\n\n```\nfunction aggfunc(Group<T1>): T2\n```\n\none can now write:\n\n```\nfunction aggfunc(Tv1, .., Tvn, Group<T1>): T2\n```\n\nwhere `Tv1,..., Tvn` are types of group-by variables v1, ..., vn. The\ncompiler checks if the aggregate function has one of these two\nsignatures (and complains if it does not) and correctly invokes the\nfunction either with or without group-by variables.\n\nExample:\n\n```\n// Custom aggregation function that takes item name and a group of (vendor, price)\n// tuples and returns a string containing item name, along with the lowest price\n// and matching vendor for this item.\nfunction best_vendor_string(item: string, g: Group<(string, bit<64>)>): string =\n{\n    var min_vendor = \"\";\n    var min_price: bit<64> = 'hffffffffffffffff;\n    for (vendor_price in g) {\n        if (vendor_price.1 < min_price) {\n            min_vendor = vendor_price.0;\n            min_price = vendor_price.1\n        }\n    };\n    \"Best deal for ${item}: ${min_vendor}, $${min_price}\"\n}\n\noutput relation BestDeal(best: string)\nBestDeal(best) :-\n    Price(item, vendor, price),\n    var best = Aggregate((item), best_vendor_string((vendor, price))).\n```"}, "afterCommit": {"oid": "55ea96dba5aac34e4321f231e9d70b92132ddf3d", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/55ea96dba5aac34e4321f231e9d70b92132ddf3d", "committedDate": "2020-02-11T23:35:54Z", "message": "Pass group-by variables to aggregation functions.\n\nAggregation functions previously took the contents of the group as the\nonly argument. In some cases, e.g., in the SQL converter, it is helpful\nto pass the group key as well.  We add this capability without changing\nexisting syntax.  The only change is that the `Group` type is now\nparameterized with both key and value types.  A program can iterate over\ngroup values as before; in addition, the `group_key(Group<'K,'V>): 'K`\nfunction extracts the group key.\n\nExample:\n\n```\n// Custom aggregation function that group of (vendor, price) tuples and\n// uses item name as key, and returns a string containing item name, along\n// with the lowest price and matching vendor for this item.\nfunction best_vendor_string(g: Group<string, (string, bit<64>)>): string =\n{\n    var min_vendor = \"\";\n    var min_price: bit<64> = 'hffffffffffffffff;\n    for (vendor_price in g) {\n        if (vendor_price.1 < min_price) {\n            min_vendor = vendor_price.0;\n            min_price = vendor_price.1\n        }\n    };\n    \"Best deal for ${group_key(g)}: ${min_vendor}, $${min_price}\"\n}\n\noutput relation BestDeal(best: string)\nBestDeal(best) :-\n    Price(item, vendor, price),\n    var best = Aggregate((item), best_vendor_string((vendor, price))).\n```"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MDkyODQz", "url": "https://github.com/vmware/differential-datalog/pull/511#pullrequestreview-357092843", "createdAt": "2020-02-11T23:47:17Z", "commit": {"oid": "55ea96dba5aac34e4321f231e9d70b92132ddf3d"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzo0NzoxN1rOFodRAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzo0ODozNlrOFodSlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk2Njg1MQ==", "bodyText": "this is actually very nice.", "url": "https://github.com/vmware/differential-datalog/pull/511#discussion_r377966851", "createdAt": "2020-02-11T23:47:17Z", "author": {"login": "mbudiu-vmw"}, "path": "lib/std.dl", "diffHunk": "@@ -131,32 +131,37 @@ extern function hash128(x: 'X): bit<128>\n \n /* The `Group` type is used exclusively in aggregation operations.  It\n  * represents a non-empty list of objects sorted in ascending order.\n+ * `'K` is the type of group key, and `'V` is the type of value in the group.\n  */\n-extern type Group<'A>\n+extern type Group<'K,'V>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ea96dba5aac34e4321f231e9d70b92132ddf3d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk2NzI1Mw==", "bodyText": "is this comment still accurate?", "url": "https://github.com/vmware/differential-datalog/pull/511#discussion_r377967253", "createdAt": "2020-02-11T23:48:36Z", "author": {"login": "mbudiu-vmw"}, "path": "src/Language/DifferentialDatalog/Compile.hs", "diffHunk": "@@ -1502,9 +1502,12 @@ mkAggregate d filters input_val rl@Rule{..} idx = do\n     -- - compute aggregate\n     -- - return variables still in scope after this term\n     let tmap = ruleAggregateTypeParams d rl idx\n-    let tparams = commaSep $ map (\\tvar -> mkType (tmap M.! tvar)) $ funcTypeVars $ getFunc d rhsAggFunc\n+    let agg_func = getFunc d rhsAggFunc\n+    -- Pass group-by variable to the aggregate function if it accepts them.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ea96dba5aac34e4321f231e9d70b92132ddf3d"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "55ea96dba5aac34e4321f231e9d70b92132ddf3d", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/55ea96dba5aac34e4321f231e9d70b92132ddf3d", "committedDate": "2020-02-11T23:35:54Z", "message": "Pass group-by variables to aggregation functions.\n\nAggregation functions previously took the contents of the group as the\nonly argument. In some cases, e.g., in the SQL converter, it is helpful\nto pass the group key as well.  We add this capability without changing\nexisting syntax.  The only change is that the `Group` type is now\nparameterized with both key and value types.  A program can iterate over\ngroup values as before; in addition, the `group_key(Group<'K,'V>): 'K`\nfunction extracts the group key.\n\nExample:\n\n```\n// Custom aggregation function that group of (vendor, price) tuples and\n// uses item name as key, and returns a string containing item name, along\n// with the lowest price and matching vendor for this item.\nfunction best_vendor_string(g: Group<string, (string, bit<64>)>): string =\n{\n    var min_vendor = \"\";\n    var min_price: bit<64> = 'hffffffffffffffff;\n    for (vendor_price in g) {\n        if (vendor_price.1 < min_price) {\n            min_vendor = vendor_price.0;\n            min_price = vendor_price.1\n        }\n    };\n    \"Best deal for ${group_key(g)}: ${min_vendor}, $${min_price}\"\n}\n\noutput relation BestDeal(best: string)\nBestDeal(best) :-\n    Price(item, vendor, price),\n    var best = Aggregate((item), best_vendor_string((vendor, price))).\n```"}, "afterCommit": {"oid": "761b2ac1ef3056010be908fcc3d5a6c65a9f5a7f", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/761b2ac1ef3056010be908fcc3d5a6c65a9f5a7f", "committedDate": "2020-02-12T06:49:43Z", "message": "Pass group-by variables to aggregation functions.\n\nAggregation functions previously took the contents of the group as the\nonly argument. In some cases, e.g., in the SQL converter, it is helpful\nto pass the group key as well.  We add this capability without changing\nexisting syntax.  The only change is that the `Group` type is now\nparameterized with both key and value types.  A program can iterate over\ngroup values as before; in addition, the `group_key(Group<'K,'V>): 'K`\nfunction extracts the group key.\n\nExample:\n\n```\n// Custom aggregation function that group of (vendor, price) tuples and\n// uses item name as key, and returns a string containing item name, along\n// with the lowest price and matching vendor for this item.\nfunction best_vendor_string(g: Group<string, (string, bit<64>)>): string =\n{\n    var min_vendor = \"\";\n    var min_price: bit<64> = 'hffffffffffffffff;\n    for (vendor_price in g) {\n        if (vendor_price.1 < min_price) {\n            min_vendor = vendor_price.0;\n            min_price = vendor_price.1\n        }\n    };\n    \"Best deal for ${group_key(g)}: ${min_vendor}, $${min_price}\"\n}\n\noutput relation BestDeal(best: string)\nBestDeal(best) :-\n    Price(item, vendor, price),\n    var best = Aggregate((item), best_vendor_string((vendor, price))).\n```"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "761b2ac1ef3056010be908fcc3d5a6c65a9f5a7f", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/761b2ac1ef3056010be908fcc3d5a6c65a9f5a7f", "committedDate": "2020-02-12T06:49:43Z", "message": "Pass group-by variables to aggregation functions.\n\nAggregation functions previously took the contents of the group as the\nonly argument. In some cases, e.g., in the SQL converter, it is helpful\nto pass the group key as well.  We add this capability without changing\nexisting syntax.  The only change is that the `Group` type is now\nparameterized with both key and value types.  A program can iterate over\ngroup values as before; in addition, the `group_key(Group<'K,'V>): 'K`\nfunction extracts the group key.\n\nExample:\n\n```\n// Custom aggregation function that group of (vendor, price) tuples and\n// uses item name as key, and returns a string containing item name, along\n// with the lowest price and matching vendor for this item.\nfunction best_vendor_string(g: Group<string, (string, bit<64>)>): string =\n{\n    var min_vendor = \"\";\n    var min_price: bit<64> = 'hffffffffffffffff;\n    for (vendor_price in g) {\n        if (vendor_price.1 < min_price) {\n            min_vendor = vendor_price.0;\n            min_price = vendor_price.1\n        }\n    };\n    \"Best deal for ${group_key(g)}: ${min_vendor}, $${min_price}\"\n}\n\noutput relation BestDeal(best: string)\nBestDeal(best) :-\n    Price(item, vendor, price),\n    var best = Aggregate((item), best_vendor_string((vendor, price))).\n```"}, "afterCommit": {"oid": "a66079840211a5a5120a02a11892fa838c428557", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/a66079840211a5a5120a02a11892fa838c428557", "committedDate": "2020-02-12T07:27:41Z", "message": "Pass group-by variables to aggregation functions.\n\nAggregation functions previously took the contents of the group as the\nonly argument. In some cases, e.g., in the SQL converter, it is helpful\nto pass the group key as well.  We add this capability without changing\nexisting syntax.  The only change is that the `Group` type is now\nparameterized with both key and value types.  A program can iterate over\ngroup values as before; in addition, the `group_key(Group<'K,'V>): 'K`\nfunction extracts the group key.\n\nExample:\n\n```\n// Custom aggregation function that group of (vendor, price) tuples and\n// uses item name as key, and returns a string containing item name, along\n// with the lowest price and matching vendor for this item.\nfunction best_vendor_string(g: Group<string, (string, bit<64>)>): string =\n{\n    var min_vendor = \"\";\n    var min_price: bit<64> = 'hffffffffffffffff;\n    for (vendor_price in g) {\n        if (vendor_price.1 < min_price) {\n            min_vendor = vendor_price.0;\n            min_price = vendor_price.1\n        }\n    };\n    \"Best deal for ${group_key(g)}: ${min_vendor}, $${min_price}\"\n}\n\noutput relation BestDeal(best: string)\nBestDeal(best) :-\n    Price(item, vendor, price),\n    var best = Aggregate((item), best_vendor_string((vendor, price))).\n```"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a66079840211a5a5120a02a11892fa838c428557", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/a66079840211a5a5120a02a11892fa838c428557", "committedDate": "2020-02-12T07:27:41Z", "message": "Pass group-by variables to aggregation functions.\n\nAggregation functions previously took the contents of the group as the\nonly argument. In some cases, e.g., in the SQL converter, it is helpful\nto pass the group key as well.  We add this capability without changing\nexisting syntax.  The only change is that the `Group` type is now\nparameterized with both key and value types.  A program can iterate over\ngroup values as before; in addition, the `group_key(Group<'K,'V>): 'K`\nfunction extracts the group key.\n\nExample:\n\n```\n// Custom aggregation function that group of (vendor, price) tuples and\n// uses item name as key, and returns a string containing item name, along\n// with the lowest price and matching vendor for this item.\nfunction best_vendor_string(g: Group<string, (string, bit<64>)>): string =\n{\n    var min_vendor = \"\";\n    var min_price: bit<64> = 'hffffffffffffffff;\n    for (vendor_price in g) {\n        if (vendor_price.1 < min_price) {\n            min_vendor = vendor_price.0;\n            min_price = vendor_price.1\n        }\n    };\n    \"Best deal for ${group_key(g)}: ${min_vendor}, $${min_price}\"\n}\n\noutput relation BestDeal(best: string)\nBestDeal(best) :-\n    Price(item, vendor, price),\n    var best = Aggregate((item), best_vendor_string((vendor, price))).\n```"}, "afterCommit": {"oid": "9f286ca19db22687187963f3972a14e03580fa40", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/9f286ca19db22687187963f3972a14e03580fa40", "committedDate": "2020-02-12T07:51:14Z", "message": "Pass group-by variables to aggregation functions.\n\nAggregation functions previously took the contents of the group as the\nonly argument. In some cases, e.g., in the SQL converter, it is helpful\nto pass the group key as well.  We add this capability without changing\nexisting syntax.  The only change is that the `Group` type is now\nparameterized with both key and value types.  A program can iterate over\ngroup values as before; in addition, the `group_key(Group<'K,'V>): 'K`\nfunction extracts the group key.\n\nExample:\n\n```\n// Custom aggregation function that group of (vendor, price) tuples and\n// uses item name as key, and returns a string containing item name, along\n// with the lowest price and matching vendor for this item.\nfunction best_vendor_string(g: Group<string, (string, bit<64>)>): string =\n{\n    var min_vendor = \"\";\n    var min_price: bit<64> = 'hffffffffffffffff;\n    for (vendor_price in g) {\n        if (vendor_price.1 < min_price) {\n            min_vendor = vendor_price.0;\n            min_price = vendor_price.1\n        }\n    };\n    \"Best deal for ${group_key(g)}: ${min_vendor}, $${min_price}\"\n}\n\noutput relation BestDeal(best: string)\nBestDeal(best) :-\n    Price(item, vendor, price),\n    var best = Aggregate((item), best_vendor_string((vendor, price))).\n```"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab8f2f47047e09aae532bcbef02b442e06bff27e", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/ab8f2f47047e09aae532bcbef02b442e06bff27e", "committedDate": "2020-02-12T08:20:24Z", "message": "Pass group-by variables to aggregation functions.\n\nAggregation functions previously took the contents of the group as the\nonly argument. In some cases, e.g., in the SQL converter, it is helpful\nto pass the group key as well.  We add this capability without changing\nexisting syntax.  The only change is that the `Group` type is now\nparameterized with both key and value types.  A program can iterate over\ngroup values as before; in addition, the `group_key(Group<'K,'V>): 'K`\nfunction extracts the group key.\n\nExample:\n\n```\n// Custom aggregation function that group of (vendor, price) tuples and\n// uses item name as key, and returns a string containing item name, along\n// with the lowest price and matching vendor for this item.\nfunction best_vendor_string(g: Group<string, (string, bit<64>)>): string =\n{\n    var min_vendor = \"\";\n    var min_price: bit<64> = 'hffffffffffffffff;\n    for (vendor_price in g) {\n        if (vendor_price.1 < min_price) {\n            min_vendor = vendor_price.0;\n            min_price = vendor_price.1\n        }\n    };\n    \"Best deal for ${group_key(g)}: ${min_vendor}, $${min_price}\"\n}\n\noutput relation BestDeal(best: string)\nBestDeal(best) :-\n    Price(item, vendor, price),\n    var best = Aggregate((item), best_vendor_string((vendor, price))).\n```"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9f286ca19db22687187963f3972a14e03580fa40", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/9f286ca19db22687187963f3972a14e03580fa40", "committedDate": "2020-02-12T07:51:14Z", "message": "Pass group-by variables to aggregation functions.\n\nAggregation functions previously took the contents of the group as the\nonly argument. In some cases, e.g., in the SQL converter, it is helpful\nto pass the group key as well.  We add this capability without changing\nexisting syntax.  The only change is that the `Group` type is now\nparameterized with both key and value types.  A program can iterate over\ngroup values as before; in addition, the `group_key(Group<'K,'V>): 'K`\nfunction extracts the group key.\n\nExample:\n\n```\n// Custom aggregation function that group of (vendor, price) tuples and\n// uses item name as key, and returns a string containing item name, along\n// with the lowest price and matching vendor for this item.\nfunction best_vendor_string(g: Group<string, (string, bit<64>)>): string =\n{\n    var min_vendor = \"\";\n    var min_price: bit<64> = 'hffffffffffffffff;\n    for (vendor_price in g) {\n        if (vendor_price.1 < min_price) {\n            min_vendor = vendor_price.0;\n            min_price = vendor_price.1\n        }\n    };\n    \"Best deal for ${group_key(g)}: ${min_vendor}, $${min_price}\"\n}\n\noutput relation BestDeal(best: string)\nBestDeal(best) :-\n    Price(item, vendor, price),\n    var best = Aggregate((item), best_vendor_string((vendor, price))).\n```"}, "afterCommit": {"oid": "ab8f2f47047e09aae532bcbef02b442e06bff27e", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/ab8f2f47047e09aae532bcbef02b442e06bff27e", "committedDate": "2020-02-12T08:20:24Z", "message": "Pass group-by variables to aggregation functions.\n\nAggregation functions previously took the contents of the group as the\nonly argument. In some cases, e.g., in the SQL converter, it is helpful\nto pass the group key as well.  We add this capability without changing\nexisting syntax.  The only change is that the `Group` type is now\nparameterized with both key and value types.  A program can iterate over\ngroup values as before; in addition, the `group_key(Group<'K,'V>): 'K`\nfunction extracts the group key.\n\nExample:\n\n```\n// Custom aggregation function that group of (vendor, price) tuples and\n// uses item name as key, and returns a string containing item name, along\n// with the lowest price and matching vendor for this item.\nfunction best_vendor_string(g: Group<string, (string, bit<64>)>): string =\n{\n    var min_vendor = \"\";\n    var min_price: bit<64> = 'hffffffffffffffff;\n    for (vendor_price in g) {\n        if (vendor_price.1 < min_price) {\n            min_vendor = vendor_price.0;\n            min_price = vendor_price.1\n        }\n    };\n    \"Best deal for ${group_key(g)}: ${min_vendor}, $${min_price}\"\n}\n\noutput relation BestDeal(best: string)\nBestDeal(best) :-\n    Price(item, vendor, price),\n    var best = Aggregate((item), best_vendor_string((vendor, price))).\n```"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NjQwMzIx", "url": "https://github.com/vmware/differential-datalog/pull/511#pullrequestreview-357640321", "createdAt": "2020-02-12T17:20:41Z", "commit": {"oid": "ab8f2f47047e09aae532bcbef02b442e06bff27e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyMDo0MVrOFo3iZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyMDo0MVrOFo3iZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5NzI4Nw==", "bodyText": "We will probably generate only concrete types here instead of a type variable, but this should work for now.", "url": "https://github.com/vmware/differential-datalog/pull/511#discussion_r378397287", "createdAt": "2020-02-12T17:20:41Z", "author": {"login": "mbudiu-vmw"}, "path": "sql/src/test/java/ddlog/QueriesTest.java", "diffHunk": "@@ -126,7 +126,7 @@ public void testTwoAggregations() {\n         String query = \"create view v1 as SELECT MIN(column1) + MAX(column1) FROM t1\";\n         String program = this.header(false) +\n                 \"typedef Ttmp0 = Ttmp0{col4:signed<64>}\\n\" +\n-                \"function agg1(g1: Group<(Tt1)>):Ttmp0 =\\n\" +\n+                \"function agg1(g1: Group<'K, (Tt1)>):Ttmp0 =\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab8f2f47047e09aae532bcbef02b442e06bff27e"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4639, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}