{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1OTE2ODU2", "number": 763, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzoxMjoxMlrOEjPJ-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoyODowMFrOEjQ1pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzgzOTI4OnYy", "diffSide": "LEFT", "path": "doc/language_reference/language_reference.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzoxMjoxMlrOHRe3vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzoxMjoxMlrOHRe3vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA5MzYzMA==", "bodyText": "I will file an issue to better document the constraints on recursive data types. This PR is big enough.", "url": "https://github.com/vmware/differential-datalog/pull/763#discussion_r488093630", "createdAt": "2020-09-14T17:12:12Z", "author": {"login": "mbudiu-vmw"}, "path": "doc/language_reference/language_reference.md", "diffHunk": "@@ -174,7 +174,6 @@ arguments matching its declaration:\n         var x: type1<bigint> // error: not enough type arguments\n     }\n     ```\n-1. Recursive type definitions are not allowed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69847dac257f12b4662e1d657ec06287f3eb993d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Mzg1ODQxOnYy", "diffSide": "RIGHT", "path": "doc/tutorial/tutorial.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzoxNjo0MVrOHRfCrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzoxNzo0OFrOHRfFgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA5NjQyOA==", "bodyText": "I think you could probably cut these vertical lines with no loss in precision, but with gains in readability.", "url": "https://github.com/vmware/differential-datalog/pull/763#discussion_r488096428", "createdAt": "2020-09-14T17:16:41Z", "author": {"login": "mbudiu-vmw"}, "path": "doc/tutorial/tutorial.md", "diffHunk": "@@ -2318,12 +2326,120 @@ ddlog -i test.dl -L../modules\n \n Multiple `-L` options are allowed to access modules scattered across multiple directories.\n \n+\n+## Implementing extern functions and types in Rust\n+\n+We have encountered many examples of extern functions and types throughout the\n+tutorial.  Here we summarize the rules for integrating Rust code into your DDlog\n+program.\n+\n+Since the DDlog compiler generates Rust, external Rust code integrates with\n+DDlog seamlessly and efficiently.  At a high level, the compiler generates \n+several crates for a DDlog program `prog`: \n+\n+```\n+prog_ddlog\n+    |                           +-+\n+    +----+types                   |\n+    |       +                     |\n+    |       |                     |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69847dac257f12b4662e1d657ec06287f3eb993d"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA5NzE1NQ==", "bodyText": "Use the command tree to generate this picture; it generates a nice rendering.", "url": "https://github.com/vmware/differential-datalog/pull/763#discussion_r488097155", "createdAt": "2020-09-14T17:17:48Z", "author": {"login": "mbudiu-vmw"}, "path": "doc/tutorial/tutorial.md", "diffHunk": "@@ -2318,12 +2326,120 @@ ddlog -i test.dl -L../modules\n \n Multiple `-L` options are allowed to access modules scattered across multiple directories.\n \n+\n+## Implementing extern functions and types in Rust\n+\n+We have encountered many examples of extern functions and types throughout the\n+tutorial.  Here we summarize the rules for integrating Rust code into your DDlog\n+program.\n+\n+Since the DDlog compiler generates Rust, external Rust code integrates with\n+DDlog seamlessly and efficiently.  At a high level, the compiler generates \n+several crates for a DDlog program `prog`: \n+\n+```\n+prog_ddlog\n+    |                           +-+\n+    +----+types                   |\n+    |       +                     |\n+    |       |                     |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA5NjQyOA=="}, "originalCommit": {"oid": "69847dac257f12b4662e1d657ec06287f3eb993d"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Mzg3MjE2OnYy", "diffSide": "RIGHT", "path": "doc/tutorial/tutorial.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzoxOTo0NVrOHRfKeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzoxOTo0NVrOHRfKeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA5ODQyNg==", "bodyText": "using modules mod1, etc?", "url": "https://github.com/vmware/differential-datalog/pull/763#discussion_r488098426", "createdAt": "2020-09-14T17:19:45Z", "author": {"login": "mbudiu-vmw"}, "path": "doc/tutorial/tutorial.md", "diffHunk": "@@ -2318,12 +2326,120 @@ ddlog -i test.dl -L../modules\n \n Multiple `-L` options are allowed to access modules scattered across multiple directories.\n \n+\n+## Implementing extern functions and types in Rust\n+\n+We have encountered many examples of extern functions and types throughout the\n+tutorial.  Here we summarize the rules for integrating Rust code into your DDlog\n+program.\n+\n+Since the DDlog compiler generates Rust, external Rust code integrates with\n+DDlog seamlessly and efficiently.  At a high level, the compiler generates \n+several crates for a DDlog program `prog`: ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69847dac257f12b4662e1d657ec06287f3eb993d"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Mzg3MzA1OnYy", "diffSide": "RIGHT", "path": "doc/tutorial/tutorial.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzoxOTo1N1rOHRfK-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzoxOTo1N1rOHRfK-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA5ODU1NA==", "bodyText": "typo", "url": "https://github.com/vmware/differential-datalog/pull/763#discussion_r488098554", "createdAt": "2020-09-14T17:19:57Z", "author": {"login": "mbudiu-vmw"}, "path": "doc/tutorial/tutorial.md", "diffHunk": "@@ -2318,12 +2326,120 @@ ddlog -i test.dl -L../modules\n \n Multiple `-L` options are allowed to access modules scattered across multiple directories.\n \n+\n+## Implementing extern functions and types in Rust\n+\n+We have encountered many examples of extern functions and types throughout the\n+tutorial.  Here we summarize the rules for integrating Rust code into your DDlog\n+program.\n+\n+Since the DDlog compiler generates Rust, external Rust code integrates with\n+DDlog seamlessly and efficiently.  At a high level, the compiler generates \n+several crates for a DDlog program `prog`: \n+\n+```\n+prog_ddlog\n+    |                           +-+\n+    +----+types                   |\n+    |       +                     |\n+    |       |                     |\n+    |       +--+Cargo.toml        |\n+    |       |                     |  types crate:\n+    |       +--+std_ddlog.rs      |  types, functions, external Rust code\n+    |       |                     |\n+    |       +--+mod1.dl           |\n+    |       |                     |\n+    |       +--+mod2              |\n+    |       |    +                |\n+    |       |    +--+lib.rs       |\n+    |       |    |                |\n+    |       |    +--+submod1.rs   |\n+    |       |    |                |\n+    |       |    +--+submod2.rs   |\n+    |       |                     |\n+    |       +--+lib.rs            |\n+    |                           +-+\n+    +----+value                 +-+\n+    |        +--+Cargo.toml       |  value crate:\n+    |        |                    |  wrapper types\n+    |        +--+lib.rs           |\n+    |                           +-+\n+    |                           +-+\n+    +----+Cargo.toml              |\n+    |                             |\n+    +----+src                     |  main crate:\n+           +                      |  Rust encoding of DDlog rules and relations.\n+           +--+lib.rs             |\n+           |                      |\n+           +--+main.rs            |\n+           |                      |\n+           +--+api.rs             |\n+                                +-+\n+```\n+\n+The `types` crate is the one relevant for the purposes of this section.  It\n+contains all function and type declaraions, including extern functions and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69847dac257f12b4662e1d657ec06287f3eb993d"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Mzg4MDM1OnYy", "diffSide": "RIGHT", "path": "doc/tutorial/tutorial.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzoyMTozNlrOHRfPOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzoyNDoyNlrOHRfV7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA5OTY0MA==", "bodyText": "submod1.rs", "url": "https://github.com/vmware/differential-datalog/pull/763#discussion_r488099640", "createdAt": "2020-09-14T17:21:36Z", "author": {"login": "mbudiu-vmw"}, "path": "doc/tutorial/tutorial.md", "diffHunk": "@@ -2318,12 +2326,120 @@ ddlog -i test.dl -L../modules\n \n Multiple `-L` options are allowed to access modules scattered across multiple directories.\n \n+\n+## Implementing extern functions and types in Rust\n+\n+We have encountered many examples of extern functions and types throughout the\n+tutorial.  Here we summarize the rules for integrating Rust code into your DDlog\n+program.\n+\n+Since the DDlog compiler generates Rust, external Rust code integrates with\n+DDlog seamlessly and efficiently.  At a high level, the compiler generates \n+several crates for a DDlog program `prog`: \n+\n+```\n+prog_ddlog\n+    |                           +-+\n+    +----+types                   |\n+    |       +                     |\n+    |       |                     |\n+    |       +--+Cargo.toml        |\n+    |       |                     |  types crate:\n+    |       +--+std_ddlog.rs      |  types, functions, external Rust code\n+    |       |                     |\n+    |       +--+mod1.dl           |\n+    |       |                     |\n+    |       +--+mod2              |\n+    |       |    +                |\n+    |       |    +--+lib.rs       |\n+    |       |    |                |\n+    |       |    +--+submod1.rs   |\n+    |       |    |                |\n+    |       |    +--+submod2.rs   |\n+    |       |                     |\n+    |       +--+lib.rs            |\n+    |                           +-+\n+    +----+value                 +-+\n+    |        +--+Cargo.toml       |  value crate:\n+    |        |                    |  wrapper types\n+    |        +--+lib.rs           |\n+    |                           +-+\n+    |                           +-+\n+    +----+Cargo.toml              |\n+    |                             |\n+    +----+src                     |  main crate:\n+           +                      |  Rust encoding of DDlog rules and relations.\n+           +--+lib.rs             |\n+           |                      |\n+           +--+main.rs            |\n+           |                      |\n+           +--+api.rs             |\n+                                +-+\n+```\n+\n+The `types` crate is the one relevant for the purposes of this section.  It\n+contains all function and type declaraions, including extern functions and\n+types.  Its internal module structure mirrors the structure of the DDlog\n+program, with a separate Rust module for each DDlog module.  For example,\n+declarations from a DDlog module `mod2/submod1.dl` are placed in\n+`prog_ddlog/types/mod1/submod1.rs`.  Types and functions declared in the main\n+module of the program are placed in `types/lib.rs`.  If `submod1.dl` contains\n+extern function or type declarations, corresponding Rust declarations must be\n+placed in `mod2/submodule1.rs`.  This file is picked up by the DDlog compiler", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69847dac257f12b4662e1d657ec06287f3eb993d"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEwMTM1Ng==", "bodyText": "But where is this directory?\nPerhaps you can show a tree of both sources and generated code.", "url": "https://github.com/vmware/differential-datalog/pull/763#discussion_r488101356", "createdAt": "2020-09-14T17:24:26Z", "author": {"login": "mbudiu-vmw"}, "path": "doc/tutorial/tutorial.md", "diffHunk": "@@ -2318,12 +2326,120 @@ ddlog -i test.dl -L../modules\n \n Multiple `-L` options are allowed to access modules scattered across multiple directories.\n \n+\n+## Implementing extern functions and types in Rust\n+\n+We have encountered many examples of extern functions and types throughout the\n+tutorial.  Here we summarize the rules for integrating Rust code into your DDlog\n+program.\n+\n+Since the DDlog compiler generates Rust, external Rust code integrates with\n+DDlog seamlessly and efficiently.  At a high level, the compiler generates \n+several crates for a DDlog program `prog`: \n+\n+```\n+prog_ddlog\n+    |                           +-+\n+    +----+types                   |\n+    |       +                     |\n+    |       |                     |\n+    |       +--+Cargo.toml        |\n+    |       |                     |  types crate:\n+    |       +--+std_ddlog.rs      |  types, functions, external Rust code\n+    |       |                     |\n+    |       +--+mod1.dl           |\n+    |       |                     |\n+    |       +--+mod2              |\n+    |       |    +                |\n+    |       |    +--+lib.rs       |\n+    |       |    |                |\n+    |       |    +--+submod1.rs   |\n+    |       |    |                |\n+    |       |    +--+submod2.rs   |\n+    |       |                     |\n+    |       +--+lib.rs            |\n+    |                           +-+\n+    +----+value                 +-+\n+    |        +--+Cargo.toml       |  value crate:\n+    |        |                    |  wrapper types\n+    |        +--+lib.rs           |\n+    |                           +-+\n+    |                           +-+\n+    +----+Cargo.toml              |\n+    |                             |\n+    +----+src                     |  main crate:\n+           +                      |  Rust encoding of DDlog rules and relations.\n+           +--+lib.rs             |\n+           |                      |\n+           +--+main.rs            |\n+           |                      |\n+           +--+api.rs             |\n+                                +-+\n+```\n+\n+The `types` crate is the one relevant for the purposes of this section.  It\n+contains all function and type declaraions, including extern functions and\n+types.  Its internal module structure mirrors the structure of the DDlog\n+program, with a separate Rust module for each DDlog module.  For example,\n+declarations from a DDlog module `mod2/submod1.dl` are placed in\n+`prog_ddlog/types/mod1/submod1.rs`.  Types and functions declared in the main\n+module of the program are placed in `types/lib.rs`.  If `submod1.dl` contains\n+extern function or type declarations, corresponding Rust declarations must be\n+placed in `mod2/submodule1.rs`.  This file is picked up by the DDlog compiler", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA5OTY0MA=="}, "originalCommit": {"oid": "69847dac257f12b4662e1d657ec06287f3eb993d"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Mzg5NTczOnYy", "diffSide": "RIGHT", "path": "doc/tutorial/tutorial.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzoyNTozMFrOHRfYYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzoyNTozMFrOHRfYYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEwMTk4NA==", "bodyText": "semicolon or period after \"namespace\".", "url": "https://github.com/vmware/differential-datalog/pull/763#discussion_r488101984", "createdAt": "2020-09-14T17:25:30Z", "author": {"login": "mbudiu-vmw"}, "path": "doc/tutorial/tutorial.md", "diffHunk": "@@ -2318,12 +2326,120 @@ ddlog -i test.dl -L../modules\n \n Multiple `-L` options are allowed to access modules scattered across multiple directories.\n \n+\n+## Implementing extern functions and types in Rust\n+\n+We have encountered many examples of extern functions and types throughout the\n+tutorial.  Here we summarize the rules for integrating Rust code into your DDlog\n+program.\n+\n+Since the DDlog compiler generates Rust, external Rust code integrates with\n+DDlog seamlessly and efficiently.  At a high level, the compiler generates \n+several crates for a DDlog program `prog`: \n+\n+```\n+prog_ddlog\n+    |                           +-+\n+    +----+types                   |\n+    |       +                     |\n+    |       |                     |\n+    |       +--+Cargo.toml        |\n+    |       |                     |  types crate:\n+    |       +--+std_ddlog.rs      |  types, functions, external Rust code\n+    |       |                     |\n+    |       +--+mod1.dl           |\n+    |       |                     |\n+    |       +--+mod2              |\n+    |       |    +                |\n+    |       |    +--+lib.rs       |\n+    |       |    |                |\n+    |       |    +--+submod1.rs   |\n+    |       |    |                |\n+    |       |    +--+submod2.rs   |\n+    |       |                     |\n+    |       +--+lib.rs            |\n+    |                           +-+\n+    +----+value                 +-+\n+    |        +--+Cargo.toml       |  value crate:\n+    |        |                    |  wrapper types\n+    |        +--+lib.rs           |\n+    |                           +-+\n+    |                           +-+\n+    +----+Cargo.toml              |\n+    |                             |\n+    +----+src                     |  main crate:\n+           +                      |  Rust encoding of DDlog rules and relations.\n+           +--+lib.rs             |\n+           |                      |\n+           +--+main.rs            |\n+           |                      |\n+           +--+api.rs             |\n+                                +-+\n+```\n+\n+The `types` crate is the one relevant for the purposes of this section.  It\n+contains all function and type declaraions, including extern functions and\n+types.  Its internal module structure mirrors the structure of the DDlog\n+program, with a separate Rust module for each DDlog module.  For example,\n+declarations from a DDlog module `mod2/submod1.dl` are placed in\n+`prog_ddlog/types/mod1/submod1.rs`.  Types and functions declared in the main\n+module of the program are placed in `types/lib.rs`.  If `submod1.dl` contains\n+extern function or type declarations, corresponding Rust declarations must be\n+placed in `mod2/submodule1.rs`.  This file is picked up by the DDlog compiler\n+and its contents is appended verbatim to the generated\n+`prog_ddlog/types/mod1/submod1.rs` module.\n+\n+Extern type and function declarations must follow these rules:\n+\n+- Extern type and function names must match their DDlog declarations.\n+\n+- Extern types must implement a number of traits expected by DDlog.\n+  See the [section on extern types](#extern-types) for details.\n+\n+- Extern function signatures must match DDlog declarations.  Arguments are\n+  passed by reference, functions return results by value, unless labeled\n+  with [`return_by_ref` attribute](#return_by_ref).  DDlog generates\n+  commented out function prototypes in Rust to help the user come up with\n+  correct signatures.\n+  See the [section on extern functions](#extern-functions) for details.\n+\n+- Rust code can access function and type declarations in other program\n+  modules and libraries through the `crate::` namespace, e.g., to import", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69847dac257f12b4662e1d657ec06287f3eb993d"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzkwMDI0OnYy", "diffSide": "RIGHT", "path": "doc/tutorial/tutorial.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzoyNjo0NVrOHRfbKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzoyNjo0NVrOHRfbKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEwMjY5OA==", "bodyText": "I wonder whether it wouldn't be simpler to actually give a complete toy example rather than describe this in words.\nThe toy example should have a corresponding source in the project source tree which people can just run.", "url": "https://github.com/vmware/differential-datalog/pull/763#discussion_r488102698", "createdAt": "2020-09-14T17:26:45Z", "author": {"login": "mbudiu-vmw"}, "path": "doc/tutorial/tutorial.md", "diffHunk": "@@ -2318,12 +2326,120 @@ ddlog -i test.dl -L../modules\n \n Multiple `-L` options are allowed to access modules scattered across multiple directories.\n \n+\n+## Implementing extern functions and types in Rust\n+\n+We have encountered many examples of extern functions and types throughout the\n+tutorial.  Here we summarize the rules for integrating Rust code into your DDlog\n+program.\n+\n+Since the DDlog compiler generates Rust, external Rust code integrates with\n+DDlog seamlessly and efficiently.  At a high level, the compiler generates \n+several crates for a DDlog program `prog`: \n+\n+```\n+prog_ddlog\n+    |                           +-+\n+    +----+types                   |\n+    |       +                     |\n+    |       |                     |\n+    |       +--+Cargo.toml        |\n+    |       |                     |  types crate:\n+    |       +--+std_ddlog.rs      |  types, functions, external Rust code\n+    |       |                     |\n+    |       +--+mod1.dl           |\n+    |       |                     |\n+    |       +--+mod2              |\n+    |       |    +                |\n+    |       |    +--+lib.rs       |\n+    |       |    |                |\n+    |       |    +--+submod1.rs   |\n+    |       |    |                |\n+    |       |    +--+submod2.rs   |\n+    |       |                     |\n+    |       +--+lib.rs            |\n+    |                           +-+\n+    +----+value                 +-+\n+    |        +--+Cargo.toml       |  value crate:\n+    |        |                    |  wrapper types\n+    |        +--+lib.rs           |\n+    |                           +-+\n+    |                           +-+\n+    +----+Cargo.toml              |\n+    |                             |\n+    +----+src                     |  main crate:\n+           +                      |  Rust encoding of DDlog rules and relations.\n+           +--+lib.rs             |\n+           |                      |\n+           +--+main.rs            |\n+           |                      |\n+           +--+api.rs             |\n+                                +-+\n+```\n+\n+The `types` crate is the one relevant for the purposes of this section.  It\n+contains all function and type declaraions, including extern functions and\n+types.  Its internal module structure mirrors the structure of the DDlog\n+program, with a separate Rust module for each DDlog module.  For example,\n+declarations from a DDlog module `mod2/submod1.dl` are placed in\n+`prog_ddlog/types/mod1/submod1.rs`.  Types and functions declared in the main\n+module of the program are placed in `types/lib.rs`.  If `submod1.dl` contains\n+extern function or type declarations, corresponding Rust declarations must be\n+placed in `mod2/submodule1.rs`.  This file is picked up by the DDlog compiler\n+and its contents is appended verbatim to the generated\n+`prog_ddlog/types/mod1/submod1.rs` module.\n+\n+Extern type and function declarations must follow these rules:\n+\n+- Extern type and function names must match their DDlog declarations.\n+\n+- Extern types must implement a number of traits expected by DDlog.\n+  See the [section on extern types](#extern-types) for details.\n+\n+- Extern function signatures must match DDlog declarations.  Arguments are\n+  passed by reference, functions return results by value, unless labeled\n+  with [`return_by_ref` attribute](#return_by_ref).  DDlog generates\n+  commented out function prototypes in Rust to help the user come up with\n+  correct signatures.\n+  See the [section on extern functions](#extern-functions) for details.\n+\n+- Rust code can access function and type declarations in other program\n+  modules and libraries through the `crate::` namespace, e.g., to import\n+  the standard DDlog library:\n+\n+  ```\n+  use crate::ddlog_std;\n+  ```\n+\n+- Extern functions and types often contain dependencies on third-party crates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69847dac257f12b4662e1d657ec06287f3eb993d"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzkwMjQ5OnYy", "diffSide": "RIGHT", "path": "doc/tutorial/tutorial.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzoyNzoyMFrOHRfcgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzoyNzoyMFrOHRfcgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEwMzA0MQ==", "bodyText": "missing backquote", "url": "https://github.com/vmware/differential-datalog/pull/763#discussion_r488103041", "createdAt": "2020-09-14T17:27:20Z", "author": {"login": "mbudiu-vmw"}, "path": "doc/tutorial/tutorial.md", "diffHunk": "@@ -2318,12 +2326,120 @@ ddlog -i test.dl -L../modules\n \n Multiple `-L` options are allowed to access modules scattered across multiple directories.\n \n+\n+## Implementing extern functions and types in Rust\n+\n+We have encountered many examples of extern functions and types throughout the\n+tutorial.  Here we summarize the rules for integrating Rust code into your DDlog\n+program.\n+\n+Since the DDlog compiler generates Rust, external Rust code integrates with\n+DDlog seamlessly and efficiently.  At a high level, the compiler generates \n+several crates for a DDlog program `prog`: \n+\n+```\n+prog_ddlog\n+    |                           +-+\n+    +----+types                   |\n+    |       +                     |\n+    |       |                     |\n+    |       +--+Cargo.toml        |\n+    |       |                     |  types crate:\n+    |       +--+std_ddlog.rs      |  types, functions, external Rust code\n+    |       |                     |\n+    |       +--+mod1.dl           |\n+    |       |                     |\n+    |       +--+mod2              |\n+    |       |    +                |\n+    |       |    +--+lib.rs       |\n+    |       |    |                |\n+    |       |    +--+submod1.rs   |\n+    |       |    |                |\n+    |       |    +--+submod2.rs   |\n+    |       |                     |\n+    |       +--+lib.rs            |\n+    |                           +-+\n+    +----+value                 +-+\n+    |        +--+Cargo.toml       |  value crate:\n+    |        |                    |  wrapper types\n+    |        +--+lib.rs           |\n+    |                           +-+\n+    |                           +-+\n+    +----+Cargo.toml              |\n+    |                             |\n+    +----+src                     |  main crate:\n+           +                      |  Rust encoding of DDlog rules and relations.\n+           +--+lib.rs             |\n+           |                      |\n+           +--+main.rs            |\n+           |                      |\n+           +--+api.rs             |\n+                                +-+\n+```\n+\n+The `types` crate is the one relevant for the purposes of this section.  It\n+contains all function and type declaraions, including extern functions and\n+types.  Its internal module structure mirrors the structure of the DDlog\n+program, with a separate Rust module for each DDlog module.  For example,\n+declarations from a DDlog module `mod2/submod1.dl` are placed in\n+`prog_ddlog/types/mod1/submod1.rs`.  Types and functions declared in the main\n+module of the program are placed in `types/lib.rs`.  If `submod1.dl` contains\n+extern function or type declarations, corresponding Rust declarations must be\n+placed in `mod2/submodule1.rs`.  This file is picked up by the DDlog compiler\n+and its contents is appended verbatim to the generated\n+`prog_ddlog/types/mod1/submod1.rs` module.\n+\n+Extern type and function declarations must follow these rules:\n+\n+- Extern type and function names must match their DDlog declarations.\n+\n+- Extern types must implement a number of traits expected by DDlog.\n+  See the [section on extern types](#extern-types) for details.\n+\n+- Extern function signatures must match DDlog declarations.  Arguments are\n+  passed by reference, functions return results by value, unless labeled\n+  with [`return_by_ref` attribute](#return_by_ref).  DDlog generates\n+  commented out function prototypes in Rust to help the user come up with\n+  correct signatures.\n+  See the [section on extern functions](#extern-functions) for details.\n+\n+- Rust code can access function and type declarations in other program\n+  modules and libraries through the `crate::` namespace, e.g., to import\n+  the standard DDlog library:\n+\n+  ```\n+  use crate::ddlog_std;\n+  ```\n+\n+- Extern functions and types often contain dependencies on third-party crates.\n+  Such dependencies must be added to the generated `types/Cargo.toml` file.\n+  To this end, create a file with the same name and location as the DDlog module\n+  and `.toml` extension, containing dependency clauses in `Cargo.toml` format.\n+  As an example, the `lib/regex.dl` library that implements DDlog bindings to the\n+  regular expressions crate `regex` has an accompanying `lib/regex.toml` file\n+  with the following contents:\n+\n+  ```\n+  [dependencies.regex]\n+  version = \"1.1\"\n+  ```\n+\n+  There is an important caveat: only one module in your program can import any\n+  given external crate. As a workaround, we recommend creating a separate DDlog\n+  library for each extern crate and only list this crate as a dependency for this\n+  library, e.g., `lib/regex.dl for the `regex` crate, `lib/url.dl` for the url", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69847dac257f12b4662e1d657ec06287f3eb993d"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDAyNzAyOnYy", "diffSide": "RIGHT", "path": "lib/ddlog_std.dl", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODowMjo0MlrOHRgpmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODowMjo0MlrOHRgpmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyMjc3OQ==", "bodyText": "is this documented? should users care?", "url": "https://github.com/vmware/differential-datalog/pull/763#discussion_r488122779", "createdAt": "2020-09-14T18:02:42Z", "author": {"login": "mbudiu-vmw"}, "path": "lib/ddlog_std.dl", "diffHunk": "@@ -6,10 +6,15 @@\n import debug\n import log\n \n+#[alias]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69847dac257f12b4662e1d657ec06287f3eb993d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDA4Mzg1OnYy", "diffSide": "RIGHT", "path": "rust/template/types/flatbuf.rs", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoxOToxMVrOHRhNkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoxOToxMVrOHRhNkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzMTk4Ng==", "bodyText": "how come these are needed now but not before?", "url": "https://github.com/vmware/differential-datalog/pull/763#discussion_r488131986", "createdAt": "2020-09-14T18:19:11Z", "author": {"login": "mbudiu-vmw"}, "path": "rust/template/types/flatbuf.rs", "diffHunk": "@@ -1,9 +1,11 @@\n //! Serialize DDlog types to/from FlatBuffers.\n \n use super::*;\n+use ::ordered_float::OrderedFloat;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69847dac257f12b4662e1d657ec06287f3eb993d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDA5MjQ0OnYy", "diffSide": "RIGHT", "path": "src/Language/DifferentialDatalog/Attribute.hs", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoyMTo0MlrOHRhS8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMTo0OTowMVrOHRnw-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzMzM2MQ==", "bodyText": "this may be useful for ddlog programmers too, so perhaps it should be documented.\nbut if it only applies to scalar types the value could be limited?", "url": "https://github.com/vmware/differential-datalog/pull/763#discussion_r488133361", "createdAt": "2020-09-14T18:21:42Z", "author": {"login": "mbudiu-vmw"}, "path": "src/Language/DifferentialDatalog/Attribute.hs", "diffHunk": "@@ -197,6 +203,23 @@ tdefGetSharedRefAttr d tdef =\n          Left e  -> error e\n          Right b -> b\n \n+{- 'alias' attribute: Tells DDlog not to generate Rust declaration for the type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69847dac257f12b4662e1d657ec06287f3eb993d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIzOTM1NQ==", "bodyText": "I haven't thought the implications through, so it's probably better to reserve this for internal use only.  This is only needed for types that conflict with Rust builtins. There is a small and finite number of those.", "url": "https://github.com/vmware/differential-datalog/pull/763#discussion_r488239355", "createdAt": "2020-09-14T21:49:01Z", "author": {"login": "ryzhyk"}, "path": "src/Language/DifferentialDatalog/Attribute.hs", "diffHunk": "@@ -197,6 +203,23 @@ tdefGetSharedRefAttr d tdef =\n          Left e  -> error e\n          Right b -> b\n \n+{- 'alias' attribute: Tells DDlog not to generate Rust declaration for the type", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzMzM2MQ=="}, "originalCommit": {"oid": "69847dac257f12b4662e1d657ec06287f3eb993d"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDA5ODU5OnYy", "diffSide": "RIGHT", "path": "src/Language/DifferentialDatalog/Compile.hs", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoyMzoyN1rOHRhW1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMTo0Nzo1N1rOHRnvRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzNDM1Ng==", "bodyText": "flatten?", "url": "https://github.com/vmware/differential-datalog/pull/763#discussion_r488134356", "createdAt": "2020-09-14T18:23:27Z", "author": {"login": "mbudiu-vmw"}, "path": "src/Language/DifferentialDatalog/Compile.hs", "diffHunk": "@@ -343,26 +349,37 @@ emptyCompilerState = CompilerState {\n     cArrangements = M.empty\n }\n \n--- Convert name to a valid Rust identifier by replacing \"::\" with \"_\"\n-rname :: String -> Doc\n-rname = pp . replace \"::\" \"_\"\n+-- Relations, indexes, relation transformers and Value's are stored in the flat namespace.\n+-- Flatter a name by replacing \"::\" with \"_\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69847dac257f12b4662e1d657ec06287f3eb993d"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIzODkxNg==", "bodyText": "A bit of flattery cannot harm.", "url": "https://github.com/vmware/differential-datalog/pull/763#discussion_r488238916", "createdAt": "2020-09-14T21:47:57Z", "author": {"login": "ryzhyk"}, "path": "src/Language/DifferentialDatalog/Compile.hs", "diffHunk": "@@ -343,26 +349,37 @@ emptyCompilerState = CompilerState {\n     cArrangements = M.empty\n }\n \n--- Convert name to a valid Rust identifier by replacing \"::\" with \"_\"\n-rname :: String -> Doc\n-rname = pp . replace \"::\" \"_\"\n+-- Relations, indexes, relation transformers and Value's are stored in the flat namespace.\n+-- Flatter a name by replacing \"::\" with \"_\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzNDM1Ng=="}, "originalCommit": {"oid": "69847dac257f12b4662e1d657ec06287f3eb993d"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDEwNTgyOnYy", "diffSide": "RIGHT", "path": "src/Language/DifferentialDatalog/Compile.hs", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoyNToyNFrOHRhbSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoyNToyNFrOHRhbSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzNTQ5OA==", "bodyText": "create a function localPrefix :: bool -> string for the expression in parenthesis?", "url": "https://github.com/vmware/differential-datalog/pull/763#discussion_r488135498", "createdAt": "2020-09-14T18:25:24Z", "author": {"login": "mbudiu-vmw"}, "path": "src/Language/DifferentialDatalog/Compile.hs", "diffHunk": "@@ -440,15 +457,20 @@ tuple :: [Doc] -> Doc\n tuple [x] = x\n tuple xs = parens $ hsep $ punctuate comma xs\n \n-tupleTypeName :: [a] -> Doc\n-tupleTypeName xs = \"tuple\" <> pp (length xs)\n+tupleTypeName :: Bool -> [a] -> Doc\n+tupleTypeName local xs =\n+    tupleTypeName' (if local then \"crate\" else \"::types\") xs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69847dac257f12b4662e1d657ec06287f3eb993d"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDExMDU0OnYy", "diffSide": "RIGHT", "path": "src/Language/DifferentialDatalog/Compile.hs", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoyNjozOVrOHRheFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoyNjozOVrOHRheFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzNjIxMg==", "bodyText": "I don't understand this English, can you rephrase?", "url": "https://github.com/vmware/differential-datalog/pull/763#discussion_r488136212", "createdAt": "2020-09-14T18:26:39Z", "author": {"login": "mbudiu-vmw"}, "path": "src/Language/DifferentialDatalog/Compile.hs", "diffHunk": "@@ -457,27 +479,32 @@ isStructType TStruct{..} | length typeCons == 1 = True\n isStructType TStruct{..}                        = False\n isStructType t                                  = error $ \"Compile.isStructType \" ++ show t\n \n-mkConstructorName :: String -> Type -> String -> Doc\n-mkConstructorName tname t c =\n+-- 'local' is true iff the constructor is being used in the same crate where it was\n+-- declared, i.e., the 'types' crate.\n+mkConstructorName :: Bool -> String -> Type -> String -> Doc\n+mkConstructorName local tname t c =\n     if isStructType t\n-       then rname tname\n-       else rname tname <> \"::\" <> rname c\n+       then rnameScoped local tname\n+       else rnameScoped local tname <> \"::\" <> nameLocal c\n \n -- | Create a compilable Cargo crate.  If the crate already exists, only writes files\n -- modified by the recompilation.\n --\n -- 'specname' - will be used as Cargo package and library names\n --\n--- 'rs_code' - additional Rust code to be added to the generated program 'lib.rs'.\n+-- 'modules' - list of modules in the original DDlog program. This function", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69847dac257f12b4662e1d657ec06287f3eb993d"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDExNDkzOnYy", "diffSide": "RIGHT", "path": "src/Language/DifferentialDatalog/Compile.hs", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoyODowMFrOHRhg9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMTo1MjowMlrOHRn2CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzNjk0OA==", "bodyText": "three? The first seems to be a map with one per module.", "url": "https://github.com/vmware/differential-datalog/pull/763#discussion_r488136948", "createdAt": "2020-09-14T18:28:00Z", "author": {"login": "mbudiu-vmw"}, "path": "src/Language/DifferentialDatalog/Compile.hs", "diffHunk": "@@ -540,28 +568,46 @@ compile d_unoptimized specname rs_code toml_code dir crate_types = do\n \n -- | Compile Datalog program into Rust code.\n --\n--- Returns Rust code for three crates that comp:\n+-- Returns Rust code for three crates:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69847dac257f12b4662e1d657ec06287f3eb993d"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI0MDY0OQ==", "bodyText": "There's one module per DDlog module, but all of them live in the same crate (for now).", "url": "https://github.com/vmware/differential-datalog/pull/763#discussion_r488240649", "createdAt": "2020-09-14T21:52:02Z", "author": {"login": "ryzhyk"}, "path": "src/Language/DifferentialDatalog/Compile.hs", "diffHunk": "@@ -540,28 +568,46 @@ compile d_unoptimized specname rs_code toml_code dir crate_types = do\n \n -- | Compile Datalog program into Rust code.\n --\n--- Returns Rust code for three crates that comp:\n+-- Returns Rust code for three crates:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzNjk0OA=="}, "originalCommit": {"oid": "69847dac257f12b4662e1d657ec06287f3eb993d"}, "originalPosition": 190}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4840, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}