{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NzAyMzQ5", "number": 703, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMDowMzo1N1rOEO1qrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMDo0NTozM1rOEO2hHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTk0Nzk5OnYy", "diffSide": "RIGHT", "path": "doc/tutorial/tutorial.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMDowMzo1N1rOGyN4Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMTowNDo0NFrOGyP-gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMwOTM5OQ==", "bodyText": "This seems inconsistent, before you said that non-extern functions cannot have side-effects. So what annotations are inferred?", "url": "https://github.com/vmware/differential-datalog/pull/703#discussion_r455309399", "createdAt": "2020-07-15T20:03:57Z", "author": {"login": "mbudiu-vmw"}, "path": "doc/tutorial/tutorial.md", "diffHunk": "@@ -815,6 +842,23 @@ pub fn string_slice(x: &String, from: &u64, to: &u64) -> String {\n DDlog will automatically pickup this file and inline its contents in the\n generated `lib.rs`.\n \n+#### Functions with side effects\n+\n+Functions implemented completely in DDlog are pure (side-effect-free) computations.\n+It is however possible to declare extern functions with side effects.  The DDlog\n+compiler needs to know about these side effects, as they may interfere with its\n+optimizations.  The programmer is responsible for labeling such functions with\n+the `#[has_side_effects]` attribute, e.g., the following function is defined in\n+the `log.dl` library:\n+\n+```\n+#[has_side_effects]\n+extern function log(module: module_t, level: log_level_t, msg: string): ()\n+```\n+\n+The compiler automatically infers these annotations for non-extern functions, so", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eee92649fbf28e85fc3b2748a190f927c6713f9"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM0Mzc0NQ==", "bodyText": "non-extern functions can invoke extern functions with side effects.  I will clarify.", "url": "https://github.com/vmware/differential-datalog/pull/703#discussion_r455343745", "createdAt": "2020-07-15T21:04:44Z", "author": {"login": "ryzhyk"}, "path": "doc/tutorial/tutorial.md", "diffHunk": "@@ -815,6 +842,23 @@ pub fn string_slice(x: &String, from: &u64, to: &u64) -> String {\n DDlog will automatically pickup this file and inline its contents in the\n generated `lib.rs`.\n \n+#### Functions with side effects\n+\n+Functions implemented completely in DDlog are pure (side-effect-free) computations.\n+It is however possible to declare extern functions with side effects.  The DDlog\n+compiler needs to know about these side effects, as they may interfere with its\n+optimizations.  The programmer is responsible for labeling such functions with\n+the `#[has_side_effects]` attribute, e.g., the following function is defined in\n+the `log.dl` library:\n+\n+```\n+#[has_side_effects]\n+extern function log(module: module_t, level: log_level_t, msg: string): ()\n+```\n+\n+The compiler automatically infers these annotations for non-extern functions, so", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMwOTM5OQ=="}, "originalCommit": {"oid": "2eee92649fbf28e85fc3b2748a190f927c6713f9"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTk4NjEzOnYy", "diffSide": "RIGHT", "path": "src/Language/DifferentialDatalog/Compile.hs", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMDoxNTozMVrOGyOQAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMTowNjozOVrOGyQFYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxNTQ1OQ==", "bodyText": "why can't this go out of bounds?", "url": "https://github.com/vmware/differential-datalog/pull/703#discussion_r455315459", "createdAt": "2020-07-15T20:15:31Z", "author": {"login": "mbudiu-vmw"}, "path": "src/Language/DifferentialDatalog/Compile.hs", "diffHunk": "@@ -2592,6 +2596,15 @@ mkExpr' d ctx EAs{..} | bothIntegers && narrow_from && narrow_to && width_cmp /=\n \n mkExpr' _ _ e = error $ \"Compile.mkExpr': unexpected expression at \" ++ show (pos e)\n \n+mkFuncName :: DatalogProgram -> Function -> Doc\n+mkFuncName d f | length namesakes == 1 = rname $ name f\n+               | otherwise =\n+    (rname $ name f) <> \"_\" <> targ0 <> \"_\" <> pp (length $ funcArgs f)\n+    where\n+    arg0 = funcArgs f !! 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eee92649fbf28e85fc3b2748a190f927c6713f9"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM0NTUwNg==", "bodyText": "arg0 is only evaluated if this is a polymorphic function.  Polymorphic functions must take at least one argument (enforced in Validate.hs)", "url": "https://github.com/vmware/differential-datalog/pull/703#discussion_r455345506", "createdAt": "2020-07-15T21:06:39Z", "author": {"login": "ryzhyk"}, "path": "src/Language/DifferentialDatalog/Compile.hs", "diffHunk": "@@ -2592,6 +2596,15 @@ mkExpr' d ctx EAs{..} | bothIntegers && narrow_from && narrow_to && width_cmp /=\n \n mkExpr' _ _ e = error $ \"Compile.mkExpr': unexpected expression at \" ++ show (pos e)\n \n+mkFuncName :: DatalogProgram -> Function -> Doc\n+mkFuncName d f | length namesakes == 1 = rname $ name f\n+               | otherwise =\n+    (rname $ name f) <> \"_\" <> targ0 <> \"_\" <> pp (length $ funcArgs f)\n+    where\n+    arg0 = funcArgs f !! 0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxNTQ1OQ=="}, "originalCommit": {"oid": "2eee92649fbf28e85fc3b2748a190f927c6713f9"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDAwNTI1OnYy", "diffSide": "RIGHT", "path": "src/Language/DifferentialDatalog/Expr.hs", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMDoyMDo1M1rOGyObeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMToxNjo0N1rOGyQp-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxODM5Mw==", "bodyText": "what happened to recursive functions?", "url": "https://github.com/vmware/differential-datalog/pull/703#discussion_r455318393", "createdAt": "2020-07-15T20:20:53Z", "author": {"login": "mbudiu-vmw"}, "path": "src/Language/DifferentialDatalog/Expr.hs", "diffHunk": "@@ -433,18 +451,22 @@ exprIsVarOrField' _                = False\n -- to distinct outputs.\n exprIsInjective :: DatalogProgram -> ECtx -> S.Set Var -> Expr -> Bool\n exprIsInjective d ctx vs e =\n+    exprIsInjective_ d ctx vs e &&\n+    all (\\f -> case funcDef f of\n+                    Nothing -> False\n+                    Just e' -> exprIsInjective_ d (CtxFunc f) (S.fromList $ map (ArgVar f . name) $ funcArgs f) e')\n+        (exprFuncsRec d ctx e)\n+\n+-- Non-recursive part of exprIsInjective\n+exprIsInjective_ :: DatalogProgram -> ECtx -> S.Set Var -> Expr -> Bool\n+exprIsInjective_ d ctx vs e =\n     S.fromList (exprVars d ctx e) == vs &&\n     exprFold (exprIsInjective' d) e\n \n -- No clever analysis here; just the obvious cases.\n exprIsInjective' :: DatalogProgram -> ExprNode Bool -> Bool\n exprIsInjective' _ EVar{}        = True\n-exprIsInjective' d EApply{..}    =\n-    -- FIXME: once we add support for recursive functions, be careful to avoid\n-    -- infinite recursion.  The simple thing to do is just to return False for\n-    -- recursive functions, as reasoning about them seems tricky otherwise.\n-    and exprArgs && (maybe False (exprIsInjective d (CtxFunc f) (S.fromList $ map (\\a -> ArgVar f $ name a) funcArgs)) $ funcDef)\n-    where f@Function{..} = getFunc d exprFunc\n+exprIsInjective' _ EApply{..}    = and exprArgs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eee92649fbf28e85fc3b2748a190f927c6713f9"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM0Njk0NQ==", "bodyText": "oops. I actually implemented support for them but forgot to use it here.", "url": "https://github.com/vmware/differential-datalog/pull/703#discussion_r455346945", "createdAt": "2020-07-15T21:08:17Z", "author": {"login": "ryzhyk"}, "path": "src/Language/DifferentialDatalog/Expr.hs", "diffHunk": "@@ -433,18 +451,22 @@ exprIsVarOrField' _                = False\n -- to distinct outputs.\n exprIsInjective :: DatalogProgram -> ECtx -> S.Set Var -> Expr -> Bool\n exprIsInjective d ctx vs e =\n+    exprIsInjective_ d ctx vs e &&\n+    all (\\f -> case funcDef f of\n+                    Nothing -> False\n+                    Just e' -> exprIsInjective_ d (CtxFunc f) (S.fromList $ map (ArgVar f . name) $ funcArgs f) e')\n+        (exprFuncsRec d ctx e)\n+\n+-- Non-recursive part of exprIsInjective\n+exprIsInjective_ :: DatalogProgram -> ECtx -> S.Set Var -> Expr -> Bool\n+exprIsInjective_ d ctx vs e =\n     S.fromList (exprVars d ctx e) == vs &&\n     exprFold (exprIsInjective' d) e\n \n -- No clever analysis here; just the obvious cases.\n exprIsInjective' :: DatalogProgram -> ExprNode Bool -> Bool\n exprIsInjective' _ EVar{}        = True\n-exprIsInjective' d EApply{..}    =\n-    -- FIXME: once we add support for recursive functions, be careful to avoid\n-    -- infinite recursion.  The simple thing to do is just to return False for\n-    -- recursive functions, as reasoning about them seems tricky otherwise.\n-    and exprArgs && (maybe False (exprIsInjective d (CtxFunc f) (S.fromList $ map (\\a -> ArgVar f $ name a) funcArgs)) $ funcDef)\n-    where f@Function{..} = getFunc d exprFunc\n+exprIsInjective' _ EApply{..}    = and exprArgs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxODM5Mw=="}, "originalCommit": {"oid": "2eee92649fbf28e85fc3b2748a190f927c6713f9"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM1NDg3Mg==", "bodyText": "no, we're good, that check just moved above.", "url": "https://github.com/vmware/differential-datalog/pull/703#discussion_r455354872", "createdAt": "2020-07-15T21:16:47Z", "author": {"login": "ryzhyk"}, "path": "src/Language/DifferentialDatalog/Expr.hs", "diffHunk": "@@ -433,18 +451,22 @@ exprIsVarOrField' _                = False\n -- to distinct outputs.\n exprIsInjective :: DatalogProgram -> ECtx -> S.Set Var -> Expr -> Bool\n exprIsInjective d ctx vs e =\n+    exprIsInjective_ d ctx vs e &&\n+    all (\\f -> case funcDef f of\n+                    Nothing -> False\n+                    Just e' -> exprIsInjective_ d (CtxFunc f) (S.fromList $ map (ArgVar f . name) $ funcArgs f) e')\n+        (exprFuncsRec d ctx e)\n+\n+-- Non-recursive part of exprIsInjective\n+exprIsInjective_ :: DatalogProgram -> ECtx -> S.Set Var -> Expr -> Bool\n+exprIsInjective_ d ctx vs e =\n     S.fromList (exprVars d ctx e) == vs &&\n     exprFold (exprIsInjective' d) e\n \n -- No clever analysis here; just the obvious cases.\n exprIsInjective' :: DatalogProgram -> ExprNode Bool -> Bool\n exprIsInjective' _ EVar{}        = True\n-exprIsInjective' d EApply{..}    =\n-    -- FIXME: once we add support for recursive functions, be careful to avoid\n-    -- infinite recursion.  The simple thing to do is just to return False for\n-    -- recursive functions, as reasoning about them seems tricky otherwise.\n-    and exprArgs && (maybe False (exprIsInjective d (CtxFunc f) (S.fromList $ map (\\a -> ArgVar f $ name a) funcArgs)) $ funcDef)\n-    where f@Function{..} = getFunc d exprFunc\n+exprIsInjective' _ EApply{..}    = and exprArgs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxODM5Mw=="}, "originalCommit": {"oid": "2eee92649fbf28e85fc3b2748a190f927c6713f9"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDAzNDMwOnYy", "diffSide": "RIGHT", "path": "src/Language/DifferentialDatalog/Type.hs", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMDoyOTo0N1rOGyOtqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMDoyOTo0N1rOGyOtqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMyMzA0OA==", "bodyText": "typo in error message", "url": "https://github.com/vmware/differential-datalog/pull/703#discussion_r455323048", "createdAt": "2020-07-15T20:29:47Z", "author": {"login": "mbudiu-vmw"}, "path": "src/Language/DifferentialDatalog/Type.hs", "diffHunk": "@@ -257,10 +258,12 @@ exprNodeType' d ctx (EVar p v)            =\n                  -> varType d $ ExprVar ctx $ EVar p v\n          _       -> error $ \"exprNodeType': unknown variable \" ++ v ++ \" at \" ++ show p\n \n-exprNodeType' d ctx (EApply _ f _) | -- Type inference engine annotates calls to functions whose return type is polymorphic.\n-                                     typeIsPolymorphic t  = ctxExpectType ctx\n-                                   | otherwise            = t\n-    where t = funcType $ getFunc d f\n+exprNodeType' d ctx (EApply _ [f] ts) | -- Type inference engine annotates calls to functions whose return type is polymorphic.\n+                                      typeIsPolymorphic t  = ctxExpectType ctx\n+                                      | otherwise            = t\n+    where t = funcType $ getFunc d f ts\n+\n+exprNodeType' _ _   e@EApply{} = error $ \"exprNodeType' called with unresolved functio name: \" ++ show e", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eee92649fbf28e85fc3b2748a190f927c6713f9"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDA3NDY5OnYy", "diffSide": "RIGHT", "path": "src/Language/DifferentialDatalog/Validate.hs", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMDo0MTo0NVrOGyPGKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMTowOTo0M1rOGyQQSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMyOTMyMQ==", "bodyText": "are you still doing this someplace else?", "url": "https://github.com/vmware/differential-datalog/pull/703#discussion_r455329321", "createdAt": "2020-07-15T20:41:45Z", "author": {"login": "mbudiu-vmw"}, "path": "src/Language/DifferentialDatalog/Validate.hs", "diffHunk": "@@ -80,22 +81,27 @@ validate d = do\n                  }\n     -- Validate dependency graph\n     depGraphValidate d''\n+    {-\n     -- This check must be done after 'depGraphValidate', which may\n     -- introduce recursion\n     checkNoRecursion d''\n+    -}\n     -- Attributes do not affect the semantics of the program and can therefore\n     -- be validated last.\n     progValidateAttributes d''\n     return d''\n \n+{-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eee92649fbf28e85fc3b2748a190f927c6713f9"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM0ODI5OA==", "bodyText": "no, recursive functions are now allowed", "url": "https://github.com/vmware/differential-datalog/pull/703#discussion_r455348298", "createdAt": "2020-07-15T21:09:43Z", "author": {"login": "ryzhyk"}, "path": "src/Language/DifferentialDatalog/Validate.hs", "diffHunk": "@@ -80,22 +81,27 @@ validate d = do\n                  }\n     -- Validate dependency graph\n     depGraphValidate d''\n+    {-\n     -- This check must be done after 'depGraphValidate', which may\n     -- introduce recursion\n     checkNoRecursion d''\n+    -}\n     -- Attributes do not affect the semantics of the program and can therefore\n     -- be validated last.\n     progValidateAttributes d''\n     return d''\n \n+{-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMyOTMyMQ=="}, "originalCommit": {"oid": "2eee92649fbf28e85fc3b2748a190f927c6713f9"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDA4NzMzOnYy", "diffSide": "RIGHT", "path": "test/antrea/networkpolicy_controller.dl", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMDo0NTozM1rOGyPN8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMDo0NTozM1rOGyPN8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMzMTMxMg==", "bodyText": "typo in comment?", "url": "https://github.com/vmware/differential-datalog/pull/703#discussion_r455331312", "createdAt": "2020-07-15T20:45:33Z", "author": {"login": "mbudiu-vmw"}, "path": "test/antrea/networkpolicy_controller.dl", "diffHunk": "@@ -558,12 +558,12 @@ AppliedToGroupPod(appliedToGroup, k8s.PodReference{pod.name, pod.namespace}, pod\n \n AppliedToGroupPodsByNode(appliedToGroup, nodeName, pods) :-\n     AppliedToGroupPod(appliedToGroup, pod, nodeName),\n-    var pods = Aggregate((appliedToGroup, nodeName), group2set(pod)).\n+    var pods = Aggregate((appliedToGroup, nodeName), group_to_set(pod)).\n     //var podsByNode = Aggregate((appliedToGroup), group2map((nodeName, podsOnNode))).\n \n AppliedToGroupSpan(appliedToGroup, nodeName) :-\n     AppliedToGroupPod(appliedToGroup, _, nodeName).\n-//    var span = Aggregate((appliedToGroup), group2set(nodeName)).\n+//    var span = Aggregate((appliedToGroup), group`/2set(nodeName)).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eee92649fbf28e85fc3b2748a190f927c6713f9"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4793, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}