{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1NzgwNjEz", "number": 852, "title": "Include transitive dependencies in Cargo.toml.", "bodyText": "The new structure of generated Rust code precisely follows the DDlog\nproject structure, meaning that each Rust module only needs to import\nmodules imported by the corresponding DDlog module and hence each Rust\ncrate must import crates containing at least on dependency of a module\nfrom this crate.\nTurns out theere is one exception to this rule: the type inference\nengine adds type annotations to generic functions, which may refer to\ntypes defined in modules not directly imported by the current module.\nTo handle such cases without a more elaborate dependency analysis, we\nsimply add a transitive closure of dependencies, not just direct\ndependencies, to each crate.  I don't think this will affect compilation\ntime, including incremental compilation, significantly.", "createdAt": "2020-12-10T09:13:36Z", "url": "https://github.com/vmware/differential-datalog/pull/852", "merged": true, "mergeCommit": {"oid": "625e7dc1af23ea4249834b59564c1db2501b8b2c"}, "closed": true, "closedAt": "2020-12-10T19:41:04Z", "author": {"login": "ryzhyk"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkvYhhAH2gAyNTM1NzgwNjEzOjRlMjRiZTY5MzY1MWE4YmM5ZDg5NGNkOGZkYzJjYWM1YTIxMDhjYTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdk3ikpgBqjQwOTY1NTg0NzY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4e24be693651a8bc9d894cd8fdc2cac5a2108ca4", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/4e24be693651a8bc9d894cd8fdc2cac5a2108ca4", "committedDate": "2020-12-10T08:50:50Z", "message": "Include transitive dependencies in Cargo.toml.\n\nThe new structure of generated Rust code precisely follows the DDlog\nproject structure, meaning that each Rust module only needs to import\nmodules imported by the corresponding DDlog module and hence each Rust\ncrate must import crates containing at least on dependency of a module\nfrom this crate.\n\nTurns out theere is one exception to this rule: the type inference\nengine adds type annotations to generic functions, which may refer to\ntypes defined in modules not directly imported by the current module.\nTo handle such cases without a more elaborate dependency analysis, we\nsimply add a transitive closure of dependencies, not just direct\ndependencies, to each crate.  I don't think this will affect compilation\ntime, including incremental compilation, significantly."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NDYxNzQ5", "url": "https://github.com/vmware/differential-datalog/pull/852#pullrequestreview-549461749", "createdAt": "2020-12-10T17:57:53Z", "commit": {"oid": "9793081c133e6f9d3681dc82671f6fc6efafc9b9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzo1Nzo1M1rOIDWLnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzo1Nzo1M1rOIDWLnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM4MDA2Mw==", "bodyText": "no library function doing this?\nanyway, it's small.", "url": "https://github.com/vmware/differential-datalog/pull/852#discussion_r540380063", "createdAt": "2020-12-10T17:57:53Z", "author": {"login": "mbudiu-vmw"}, "path": "src/Language/DifferentialDatalog/Util.hs", "diffHunk": "@@ -181,6 +181,34 @@ updateFile path content = do\n                 renameFile tmppath path\n        else writeFile path content\n \n+-- | Update an entire directory tree, updating files whose contents has changed,\n+-- creating new files and deleting files not in `files` list, but keeping\n+-- files that haven't changed unmodified.\n+updateDirectory :: FilePath -> M.Map FilePath String -> IO ()\n+updateDirectory dir files = do\n+    -- Prepend directory path to all file names.\n+    let files' = M.mapKeys (dir </>) files\n+    -- Current directory contents.\n+    existing_files <- traverseDir dir\n+    -- Files not in the tree.\n+    let to_delete = filter (\\f -> M.notMember f files') existing_files\n+    mapM_ removeFile to_delete\n+    -- Update or create files in the tree.\n+    mapM_ (\\(mpath, mtext) -> updateFile mpath mtext)\n+          $ M.toList files'\n+\n+-- | Traverse directory tree, returning the list of files in it.\n+traverseDir :: FilePath -> IO [FilePath]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9793081c133e6f9d3681dc82671f6fc6efafc9b9"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NDYxNzk0", "url": "https://github.com/vmware/differential-datalog/pull/852#pullrequestreview-549461794", "createdAt": "2020-12-10T17:57:57Z", "commit": {"oid": "9793081c133e6f9d3681dc82671f6fc6efafc9b9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bde47cea6c837638046c330eae34508bb981d20a", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/bde47cea6c837638046c330eae34508bb981d20a", "committedDate": "2020-12-10T18:20:46Z", "message": "Remove old files from `types/`.\n\nWhen creating the Rust project, the compiler only overwrites files that\nhave changed, leaving other files unmodified.  It also did not remove\nold files, which caused compilation errors in some cases.  This became\nmore common with the new crate decomposition algorithm that can generate\na completely different Rust project structure as DDlog module\ndependencies change.  This patch removes old files from the `type`\ndirectory.  This prevents problems in most cases, as only files in `types`\nchange across compiler runs.\n\nIn the future we should do the same for the entire generated project, as\nfiles outside of `types` can change across different ddlog versions,\ncausing compilation errors on upgrade.  This will require a bit more\nrefactoring to make sure that we first build a complete project tree in\nmemory before overwriting it on the disk."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9793081c133e6f9d3681dc82671f6fc6efafc9b9", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/9793081c133e6f9d3681dc82671f6fc6efafc9b9", "committedDate": "2020-12-10T17:42:26Z", "message": "Remove old files from `types/`.\n\nWhen creating the Rust project, the compiler only overwrites files that\nhave changed, leaving other files unmodified.  It also did not remove\nold files, which caused compilation errors in some cases.  This became\nmore common with the new crate decomposition algorithm that can generate\na completely different Rust project structure as DDlog module\ndependencies change.  This patch removes old files from the `type`\ndirectory.  This prevents problems in most cases, as only files in `types`\nchange across compiler runs.\n\nIn the future we should do the same for the entire generated project, as\nfiles outside of `types` can change across different ddlog versions,\ncausing compilation errors on upgrade.  This will require a bit more\nrefactoring to make sure that we first build a complete project tree in\nmemory before overwriting it on the disk."}, "afterCommit": {"oid": "bde47cea6c837638046c330eae34508bb981d20a", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/bde47cea6c837638046c330eae34508bb981d20a", "committedDate": "2020-12-10T18:20:46Z", "message": "Remove old files from `types/`.\n\nWhen creating the Rust project, the compiler only overwrites files that\nhave changed, leaving other files unmodified.  It also did not remove\nold files, which caused compilation errors in some cases.  This became\nmore common with the new crate decomposition algorithm that can generate\na completely different Rust project structure as DDlog module\ndependencies change.  This patch removes old files from the `type`\ndirectory.  This prevents problems in most cases, as only files in `types`\nchange across compiler runs.\n\nIn the future we should do the same for the entire generated project, as\nfiles outside of `types` can change across different ddlog versions,\ncausing compilation errors on upgrade.  This will require a bit more\nrefactoring to make sure that we first build a complete project tree in\nmemory before overwriting it on the disk."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4485, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}