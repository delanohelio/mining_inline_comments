{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNjk1NzQw", "number": 511, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzozNDozOFrODeiwwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyMDo0MVrODfQ9zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzUzNDA5OnYy", "diffSide": "RIGHT", "path": "doc/tutorial/tutorial.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzozNDozOFrOFnvHag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzo0MToyMlrOFnvVFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIxMDczMA==", "bodyText": "Frankly I find this quite confusing. The signature of the function is not the same in the declaration and in the call.\nIs backwards compatibility so important? If you want to make changes to the language you should do them while it still has few users. You can provide a good diagnostic to help people migrate their code.\nI think it's cleaner if the Group object just has a key field. Group should be templated on two types, the key type and the value type. If you really want backwards compatibility you can have the for operate directly on the group. In LINQ this is done by the group implementing the IEnumerable<Value> interface.", "url": "https://github.com/vmware/differential-datalog/pull/511#discussion_r377210730", "createdAt": "2020-02-10T17:34:38Z", "author": {"login": "mbudiu-vmw"}, "path": "doc/tutorial/tutorial.md", "diffHunk": "@@ -987,6 +987,34 @@ BestPricePerVendor(item, vendor, best_price) :-\n     var best_price = Aggregate((item, vendor), group_min(price)).\n ```\n \n+The aggregation function can take group-by variables in addition to\n+the group.  The following custom aggregation function computes the cheapest\n+vendor for each item and returns a string containing item name, vendor,\n+and price:\n+\n+```\n+function best_vendor_string(item: string, g: Group<(string, bit<64>)>): string =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf63c748cf7a079ae3d9ff1efc277e8e294cc900"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIxNDIzMA==", "bodyText": "Let's run this by Ben, he has very good taste in software design.", "url": "https://github.com/vmware/differential-datalog/pull/511#discussion_r377214230", "createdAt": "2020-02-10T17:41:22Z", "author": {"login": "mbudiu-vmw"}, "path": "doc/tutorial/tutorial.md", "diffHunk": "@@ -987,6 +987,34 @@ BestPricePerVendor(item, vendor, best_price) :-\n     var best_price = Aggregate((item, vendor), group_min(price)).\n ```\n \n+The aggregation function can take group-by variables in addition to\n+the group.  The following custom aggregation function computes the cheapest\n+vendor for each item and returns a string containing item name, vendor,\n+and price:\n+\n+```\n+function best_vendor_string(item: string, g: Group<(string, bit<64>)>): string =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIxMDczMA=="}, "originalCommit": {"oid": "cf63c748cf7a079ae3d9ff1efc277e8e294cc900"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODM0NzEzOnYy", "diffSide": "RIGHT", "path": "lib/std.dl", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzo0NzoxN1rOFodRAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzo0NzoxN1rOFodRAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk2Njg1MQ==", "bodyText": "this is actually very nice.", "url": "https://github.com/vmware/differential-datalog/pull/511#discussion_r377966851", "createdAt": "2020-02-11T23:47:17Z", "author": {"login": "mbudiu-vmw"}, "path": "lib/std.dl", "diffHunk": "@@ -131,32 +131,37 @@ extern function hash128(x: 'X): bit<128>\n \n /* The `Group` type is used exclusively in aggregation operations.  It\n  * represents a non-empty list of objects sorted in ascending order.\n+ * `'K` is the type of group key, and `'V` is the type of value in the group.\n  */\n-extern type Group<'A>\n+extern type Group<'K,'V>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ea96dba5aac34e4321f231e9d70b92132ddf3d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODM0OTY2OnYy", "diffSide": "RIGHT", "path": "src/Language/DifferentialDatalog/Compile.hs", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzo0ODozNlrOFodSlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzo0ODozNlrOFodSlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk2NzI1Mw==", "bodyText": "is this comment still accurate?", "url": "https://github.com/vmware/differential-datalog/pull/511#discussion_r377967253", "createdAt": "2020-02-11T23:48:36Z", "author": {"login": "mbudiu-vmw"}, "path": "src/Language/DifferentialDatalog/Compile.hs", "diffHunk": "@@ -1502,9 +1502,12 @@ mkAggregate d filters input_val rl@Rule{..} idx = do\n     -- - compute aggregate\n     -- - return variables still in scope after this term\n     let tmap = ruleAggregateTypeParams d rl idx\n-    let tparams = commaSep $ map (\\tvar -> mkType (tmap M.! tvar)) $ funcTypeVars $ getFunc d rhsAggFunc\n+    let agg_func = getFunc d rhsAggFunc\n+    -- Pass group-by variable to the aggregate function if it accepts them.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ea96dba5aac34e4321f231e9d70b92132ddf3d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTEwNDE0OnYy", "diffSide": "RIGHT", "path": "sql/src/test/java/ddlog/QueriesTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyMDo0MVrOFo3iZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyMDo0MVrOFo3iZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5NzI4Nw==", "bodyText": "We will probably generate only concrete types here instead of a type variable, but this should work for now.", "url": "https://github.com/vmware/differential-datalog/pull/511#discussion_r378397287", "createdAt": "2020-02-12T17:20:41Z", "author": {"login": "mbudiu-vmw"}, "path": "sql/src/test/java/ddlog/QueriesTest.java", "diffHunk": "@@ -126,7 +126,7 @@ public void testTwoAggregations() {\n         String query = \"create view v1 as SELECT MIN(column1) + MAX(column1) FROM t1\";\n         String program = this.header(false) +\n                 \"typedef Ttmp0 = Ttmp0{col4:signed<64>}\\n\" +\n-                \"function agg1(g1: Group<(Tt1)>):Ttmp0 =\\n\" +\n+                \"function agg1(g1: Group<'K, (Tt1)>):Ttmp0 =\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab8f2f47047e09aae532bcbef02b442e06bff27e"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4866, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}