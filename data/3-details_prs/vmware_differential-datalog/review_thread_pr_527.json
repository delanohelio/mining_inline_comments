{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1OTM1Mzc1", "number": 527, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjowNTowNlrODgcN5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjowNjo0OFrODgcQSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzQzMzMzOnYy", "diffSide": "RIGHT", "path": "rust/template/ddlog.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjowNTowN1rOFqpgtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjowNTowN1rOFqpgtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI2NDYyOA==", "bodyText": "I think we had an issue for this behavior not documented at the time", "url": "https://github.com/vmware/differential-datalog/pull/527#discussion_r380264628", "createdAt": "2020-02-17T16:05:07Z", "author": {"login": "mbudiu-vmw"}, "path": "rust/template/ddlog.h", "diffHunk": "@@ -342,6 +341,13 @@ extern void ddlog_free_json(char *json);\n  * Whether the function succeeds or fails, it consumes all commands in\n  * the `upds` array (but not the array itself), so they can no longer be\n  * accessed by the caller after the function returns.\n+ *\n+ * This function fails non-atomically: upon a failure, it may have applied\n+ * a _subset_ of input commands (one exception is when `ddlog_apply_updates`\n+ * is called with a single command, in which case it leaves the database\n+ * unmodified in case of a failure).  Use `ddlog_transaction_rollback()` to\n+ * bring the database back to a known state, specifically the state where it\n+ * was before the start of the transaction.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0456f0123488dd6d30466b6c14d627a625602c7"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzQzOTQ0OnYy", "diffSide": "RIGHT", "path": "rust/template/ddlog.h", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjowNjo0OFrOFqpkPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMjozMDozNVrOFqw5mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI2NTUzNQ==", "bodyText": "This sounds wrong", "url": "https://github.com/vmware/differential-datalog/pull/527#discussion_r380265535", "createdAt": "2020-02-17T16:06:48Z", "author": {"login": "mbudiu-vmw"}, "path": "rust/template/ddlog.h", "diffHunk": "@@ -1053,35 +1059,73 @@ extern const ddlog_record* ddlog_get_struct_field(const ddlog_record* rec,\n /*\n  * Create an insert command.\n  *\n- * `table` is the table to insert to.  `rec` is the record to insert.\n- * The function takes ownership of this record.\n+ * `table` - input table to insert to.\n+ * `rec` - record to insert.  The function takes ownership of this record.\n  *\n  * Returns pointer to a new command, which can be sent to DDlog by calling\n  * `ddlog_apply_updates()`.\n+ *\n+ * This function never fails; however the command it creates may fail to\n+ * execute, causing `ddlog_apply_updates()` to return an error if:\n+ * - `table` is not a valid input table id\n+ * - `rec` does not match the record type of `table`\n+ * - The table has a primary key and there exists a record with the same key\n+ *   as `rec` in the table.\n  */\n extern ddlog_cmd* ddlog_insert_cmd(table_id table, ddlog_record *rec);\n \n /*\n- * Create delete-by-value command.\n+ * Create an insert-or-update command that inserts a new record, deleting\n+ * an existing record with the same primary key, if there is one.\n+ *\n+ * `table` - input table to insert to.\n+ * `rec` - record to insert.  The function takes ownership of this record.\n+ *\n+ * Returns pointer to a new command, which can be sent to DDlog by calling\n+ * `ddlog_apply_updates()`.\n+ *\n+ * This function never fails; however the command it creates may fail to\n+ * execute, causing `ddlog_apply_updates()` to return an error if:\n+ * - `table` is not a valid input table id\n+ * - `table` does not have a primary key\n+ * - `rec` does not match the record type of `table`\n+ */\n+extern ddlog_cmd* ddlog_insert_or_update_cmd(table_id table, ddlog_record *rec);\n+\n+/*\n+ * Create a delete-by-value command.\n  *\n- * `table` is the table to delete from. `rec` is the record to delete.\n- * The function takes ownership of this record.\n+ * `table` - input table to delete from.\n+ * `rec` - record to delete.  The function takes ownership of this record.\n  *\n  * Returns pointer to a new command, which can be sent to DDlog by calling\n  * `ddlog_apply_updates()`.\n+ *\n+ * This function never fails; however the command it creates may fail to\n+ * execute, causing `ddlog_apply_updates()` to return an error if:\n+ * - `table` is not a valid input table id\n+ * - `rec` does not match the record type of `table`\n+ * - `table` has a primary key and record `rec` does not exist in `table`\n+ *   (NOTE: for tables without a primary key, the command succeeds even if", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0456f0123488dd6d30466b6c14d627a625602c7"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM4NTY4OQ==", "bodyText": "Agreed, but at least this documents how things are working right now.", "url": "https://github.com/vmware/differential-datalog/pull/527#discussion_r380385689", "createdAt": "2020-02-17T22:30:35Z", "author": {"login": "ryzhyk"}, "path": "rust/template/ddlog.h", "diffHunk": "@@ -1053,35 +1059,73 @@ extern const ddlog_record* ddlog_get_struct_field(const ddlog_record* rec,\n /*\n  * Create an insert command.\n  *\n- * `table` is the table to insert to.  `rec` is the record to insert.\n- * The function takes ownership of this record.\n+ * `table` - input table to insert to.\n+ * `rec` - record to insert.  The function takes ownership of this record.\n  *\n  * Returns pointer to a new command, which can be sent to DDlog by calling\n  * `ddlog_apply_updates()`.\n+ *\n+ * This function never fails; however the command it creates may fail to\n+ * execute, causing `ddlog_apply_updates()` to return an error if:\n+ * - `table` is not a valid input table id\n+ * - `rec` does not match the record type of `table`\n+ * - The table has a primary key and there exists a record with the same key\n+ *   as `rec` in the table.\n  */\n extern ddlog_cmd* ddlog_insert_cmd(table_id table, ddlog_record *rec);\n \n /*\n- * Create delete-by-value command.\n+ * Create an insert-or-update command that inserts a new record, deleting\n+ * an existing record with the same primary key, if there is one.\n+ *\n+ * `table` - input table to insert to.\n+ * `rec` - record to insert.  The function takes ownership of this record.\n+ *\n+ * Returns pointer to a new command, which can be sent to DDlog by calling\n+ * `ddlog_apply_updates()`.\n+ *\n+ * This function never fails; however the command it creates may fail to\n+ * execute, causing `ddlog_apply_updates()` to return an error if:\n+ * - `table` is not a valid input table id\n+ * - `table` does not have a primary key\n+ * - `rec` does not match the record type of `table`\n+ */\n+extern ddlog_cmd* ddlog_insert_or_update_cmd(table_id table, ddlog_record *rec);\n+\n+/*\n+ * Create a delete-by-value command.\n  *\n- * `table` is the table to delete from. `rec` is the record to delete.\n- * The function takes ownership of this record.\n+ * `table` - input table to delete from.\n+ * `rec` - record to delete.  The function takes ownership of this record.\n  *\n  * Returns pointer to a new command, which can be sent to DDlog by calling\n  * `ddlog_apply_updates()`.\n+ *\n+ * This function never fails; however the command it creates may fail to\n+ * execute, causing `ddlog_apply_updates()` to return an error if:\n+ * - `table` is not a valid input table id\n+ * - `rec` does not match the record type of `table`\n+ * - `table` has a primary key and record `rec` does not exist in `table`\n+ *   (NOTE: for tables without a primary key, the command succeeds even if", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI2NTUzNQ=="}, "originalCommit": {"oid": "a0456f0123488dd6d30466b6c14d627a625602c7"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4869, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}