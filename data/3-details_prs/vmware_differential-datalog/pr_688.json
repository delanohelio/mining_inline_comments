{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3Mjc4MTEx", "number": 688, "title": "Dump output of intermediate compiler passes.", "bodyText": "See commit messages for details.", "createdAt": "2020-06-19T20:12:45Z", "url": "https://github.com/vmware/differential-datalog/pull/688", "merged": true, "mergeCommit": {"oid": "5d0affba961109a2bb14f9931e2e3a72f7c1b11f"}, "closed": true, "closedAt": "2020-06-20T06:34:49Z", "author": {"login": "ryzhyk"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcs471FgFqTQzNDMyMDQzNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABctBCM3gBqjM0NjQ0MDYxNzU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MzIwNDM2", "url": "https://github.com/vmware/differential-datalog/pull/688#pullrequestreview-434320436", "createdAt": "2020-06-19T20:16:30Z", "commit": {"oid": "fc02df6c885f0b43d0cddc82555b8ebe20f6c282"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMDoxNjozMFrOGmgNTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMDoxODowN1rOGmgPbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyNjc2Ng==", "bodyText": "The ast suffix does not really make sense. I think you should use the dl suffix, then syntax highlighting tools will work properly.", "url": "https://github.com/vmware/differential-datalog/pull/688#discussion_r443026766", "createdAt": "2020-06-19T20:16:30Z", "author": {"login": "mbudiu-vmw"}, "path": "app/Main.hs", "diffHunk": "@@ -169,22 +145,24 @@ parseValidate Config{..} = do\n     d''' <- case confOutputInput of\n          \"\" -> return d''\n          x  ->  return $ progMirrorInputRelations d'' x\n+    when confDumpFlat $\n+        writeFile (replaceExtension confDatalogFile \".flat.ast\") (show d''')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc02df6c885f0b43d0cddc82555b8ebe20f6c282"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyNzMwOQ==", "bodyText": "could the indentation be changed here?", "url": "https://github.com/vmware/differential-datalog/pull/688#discussion_r443027309", "createdAt": "2020-06-19T20:18:07Z", "author": {"login": "mbudiu-vmw"}, "path": "test/datalog_tests/lib_test.debug.ast.expected", "diffHunk": "@@ -0,0 +1,1053 @@\n+typedef fp_test.BB = fp_test.BB{s: string, b: bool}\n+typedef fp_test.D = fp_test.D{s: string, d: double}\n+typedef fp_test.DoublesFromRecord = fp_test.DoublesFromRecord{s: string, d: double}\n+typedef fp_test.F = fp_test.F{s: string, d: float}\n+typedef fp_test.FloatsFromRecord = fp_test.FloatsFromRecord{s: string, f: float}\n+#[size = 8]\n+#[shared_ref = true]\n+extern type internment.Intern<'A>\n+typedef internment.istring = internment.Intern<string>\n+typedef internment_test.AllInternedString = internment_test.AllInternedString{ix: internment.istring}\n+typedef internment_test.IInternedString = internment_test.IInternedString{ix: internment.istring}\n+typedef internment_test.IStruct = internment_test.IStruct{u: internment.Intern<internment_test.IUnion>, t: internment.Intern<(std.s32, double)>, x: bigint}\n+typedef internment_test.IUnion = internment_test.Tag1{f1: bool} | internment_test.Tag2{f2: std.u32, f3: string}\n+typedef internment_test.OInternedString = internment_test.OInternedString{x: string, ix: internment.istring}\n+typedef internment_test.Projections = internment_test.Projections{inp: internment_test.IStruct, p: string}\n+typedef internment_test.StaticInternedString = internment_test.StaticInternedString{ix: internment.istring}\n+typedef json.JsonNum = json.JsonInt{i: std.s128} | json.JsonFloat{d: double}\n+#[rust = \"serde(from = \\\"__json::ValueWrapper\\\", into = \\\"__json::ValueWrapper\\\")\"]\n+typedef json.JsonValue = json.JsonNull{} | json.JsonBool{b: bool} | json.JsonNumber{n: json.JsonNum} | json.JsonString{s: internment.istring} | json.JsonArray{a: std.Vec<json.JsonValue>} | json.JsonObject{o: std.Map<internment.istring,json.JsonValue>}\n+#[custom_serde = true]\n+typedef json.JsonWrapper<'T> = json.JsonWrapper{x: 'T}\n+typedef json_test.Array = std.Vec<json_test.BoolStruct>\n+typedef json_test.BoolMap = std.Map<string,json_test.BoolStruct>\n+typedef json_test.BoolStruct = json_test.BoolStruct{b: bool}\n+typedef json_test.Enum = #[rust = \"serde(rename = \\\"Variant1\\\")\"]\n+                         json_test.Variant1{b: bool} | #[rust = \"serde(rename = \\\"Variant2\\\")\"]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc02df6c885f0b43d0cddc82555b8ebe20f6c282"}, "originalPosition": 26}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4a2b3cc335417aebee422772bd271d80c7aa016a", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/4a2b3cc335417aebee422772bd271d80c7aa016a", "committedDate": "2020-06-19T20:28:36Z", "message": "Debug.hs: Bindings must be valid identifiers.\n\nThe 'addBindingToRHSLiteral' function generated binding variable name\nfrom relation name.  In a multi-module program, relation name can\ncontain \".\"'s.  Use `Compile.rname` to convert such qualified names to\nvalid Rust identifiers."}, "afterCommit": {"oid": "83c44feaa94baac9f2deceea739cd97f1811d753", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/83c44feaa94baac9f2deceea739cd97f1811d753", "committedDate": "2020-06-19T20:55:43Z", "message": "Syntax.hs: Better pretty-printing of structs.\n\nThis looked bad:\n\n```\ntypedef json_test.Enum = #[rust = \"serde(rename = \\\"Variant1\\\")\"]\n                         json_test.Variant1{b: bool} | #[rust = \"serde(rename = \\\"Variant2\\\")\"]\n                                                        json_test.Variant2{u: std.u32}\n```\n\nNew formatting:\n\n```\ntypedef json_test.Enum = #[rust = \"serde(rename = \\\"Variant1\\\")\"]\n                         json_test.Variant1{b: bool} |\n                         #[rust = \"serde(rename = \\\"Variant2\\\")\"]\n                         json_test.Variant2{u: std.u32}\n```"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "83c44feaa94baac9f2deceea739cd97f1811d753", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/83c44feaa94baac9f2deceea739cd97f1811d753", "committedDate": "2020-06-19T20:55:43Z", "message": "Syntax.hs: Better pretty-printing of structs.\n\nThis looked bad:\n\n```\ntypedef json_test.Enum = #[rust = \"serde(rename = \\\"Variant1\\\")\"]\n                         json_test.Variant1{b: bool} | #[rust = \"serde(rename = \\\"Variant2\\\")\"]\n                                                        json_test.Variant2{u: std.u32}\n```\n\nNew formatting:\n\n```\ntypedef json_test.Enum = #[rust = \"serde(rename = \\\"Variant1\\\")\"]\n                         json_test.Variant1{b: bool} |\n                         #[rust = \"serde(rename = \\\"Variant2\\\")\"]\n                         json_test.Variant2{u: std.u32}\n```"}, "afterCommit": {"oid": "2cf732775ffbbc55433d54edfe01059c028c3eeb", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/2cf732775ffbbc55433d54edfe01059c028c3eeb", "committedDate": "2020-06-19T21:20:39Z", "message": "Syntax.hs: Better pretty-printing of structs.\n\nThis looked bad:\n\n```\ntypedef json_test.Enum = #[rust = \"serde(rename = \\\"Variant1\\\")\"]\n                         json_test.Variant1{b: bool} | #[rust = \"serde(rename = \\\"Variant2\\\")\"]\n                                                        json_test.Variant2{u: std.u32}\n```\n\nNew formatting:\n\n```\ntypedef json_test.Enum = #[rust = \"serde(rename = \\\"Variant1\\\")\"]\n                         json_test.Variant1{b: bool} |\n                         #[rust = \"serde(rename = \\\"Variant2\\\")\"]\n                         json_test.Variant2{u: std.u32}\n```"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MzUxODIz", "url": "https://github.com/vmware/differential-datalog/pull/688#pullrequestreview-434351823", "createdAt": "2020-06-19T21:35:23Z", "commit": {"oid": "2cf732775ffbbc55433d54edfe01059c028c3eeb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMTozNToyM1rOGmhyKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMTozNToyM1rOGmhyKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA1MjU4NA==", "bodyText": "Should we add check to only dump when confDebugHooks is enabled?\nOr maybe update help message that if pp-debug is passed without \"-g\" then this will dump the source but no debug hooks?", "url": "https://github.com/vmware/differential-datalog/pull/688#discussion_r443052584", "createdAt": "2020-06-19T21:35:23Z", "author": {"login": "haroldlim"}, "path": "app/Main.hs", "diffHunk": "@@ -169,22 +145,24 @@ parseValidate Config{..} = do\n     d''' <- case confOutputInput of\n          \"\" -> return d''\n          x  ->  return $ progMirrorInputRelations d'' x\n+    when confDumpFlat $\n+        writeFile (replaceExtension confDatalogFile \".flat.ast\") (show d''')\n     d'''' <- case validate d''' of\n                Left e   -> errorWithoutStackTrace $ \"error: \" ++ e\n                Right d'''' -> return d''''\n+    when confDumpValid $\n+        writeFile (replaceExtension confDatalogFile \".valid.ast\") (show d'''')\n     d' <- case confDebugHooks of\n          False -> return d''''\n          True  -> return $ progInjectDebuggingHooks d''''\n+    when confDumpDebug $\n+        writeFile (replaceExtension confDatalogFile \".debug.ast\") (show d')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cf732775ffbbc55433d54edfe01059c028c3eeb"}, "originalPosition": 95}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2cf732775ffbbc55433d54edfe01059c028c3eeb", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/2cf732775ffbbc55433d54edfe01059c028c3eeb", "committedDate": "2020-06-19T21:20:39Z", "message": "Syntax.hs: Better pretty-printing of structs.\n\nThis looked bad:\n\n```\ntypedef json_test.Enum = #[rust = \"serde(rename = \\\"Variant1\\\")\"]\n                         json_test.Variant1{b: bool} | #[rust = \"serde(rename = \\\"Variant2\\\")\"]\n                                                        json_test.Variant2{u: std.u32}\n```\n\nNew formatting:\n\n```\ntypedef json_test.Enum = #[rust = \"serde(rename = \\\"Variant1\\\")\"]\n                         json_test.Variant1{b: bool} |\n                         #[rust = \"serde(rename = \\\"Variant2\\\")\"]\n                         json_test.Variant2{u: std.u32}\n```"}, "afterCommit": {"oid": "3f0c690914f0b97027c13368ae92f2fdca41774b", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/3f0c690914f0b97027c13368ae92f2fdca41774b", "committedDate": "2020-06-20T01:26:07Z", "message": "test-libs.sh: Output the detailed diff on error.\n\nTo simplify troubleshooting of CI failures."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00c0d92222749baf904bd8232007434a21ad79c4", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/00c0d92222749baf904bd8232007434a21ad79c4", "committedDate": "2020-06-20T05:44:50Z", "message": "Dump output of intermediate compiler passes.\n\nAdd CLI flags to dump transformed DDlog code after each compiler pass:\n- flattening\n- validation\n- debugging hook injection\n- optimization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e541985cbad23428d0792f245e1ca6131b75fe9b", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/e541985cbad23428d0792f245e1ca6131b75fe9b", "committedDate": "2020-06-20T05:44:50Z", "message": "run-test.sh: Validate intermediate ASTs.\n\nExtend `run-test.sh` to dump intermediate DDlog ASTs using newly added\ncompiler flags and to compare them against reference outputs if\navailable.  Use this feature to validate debugging hooks in\n`simple`, `simple2`, and `tutorial` tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6aedb4d264ab992a3ee1debaace4f97733ec87ce", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/6aedb4d264ab992a3ee1debaace4f97733ec87ce", "committedDate": "2020-06-20T05:44:50Z", "message": "Debug.hs: Bindings must be valid identifiers.\n\nThe 'addBindingToRHSLiteral' function generated binding variable name\nfrom relation name.  In a multi-module program, relation name can\ncontain \".\"'s.  Use `Compile.rname` to convert such qualified names to\nvalid Rust identifiers."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "779f765a20d68885424dbfa38130cd596958e0c5", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/779f765a20d68885424dbfa38130cd596958e0c5", "committedDate": "2020-06-20T05:44:50Z", "message": "Syntax.hs: Better pretty-printing of structs.\n\nThis looked bad:\n\n```\ntypedef json_test.Enum = #[rust = \"serde(rename = \\\"Variant1\\\")\"]\n                         json_test.Variant1{b: bool} | #[rust = \"serde(rename = \\\"Variant2\\\")\"]\n                                                        json_test.Variant2{u: std.u32}\n```\n\nNew formatting:\n\n```\ntypedef json_test.Enum = #[rust = \"serde(rename = \\\"Variant1\\\")\"]\n                         json_test.Variant1{b: bool} |\n                         #[rust = \"serde(rename = \\\"Variant2\\\")\"]\n                         json_test.Variant2{u: std.u32}\n```"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80ad08576e01b2cffaf15d48ed1ad6aa519be5a1", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/80ad08576e01b2cffaf15d48ed1ad6aa519be5a1", "committedDate": "2020-06-20T05:44:50Z", "message": "test-libs.sh: Output the detailed diff on error.\n\nTo simplify troubleshooting of CI failures."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3e40ed51972283d5b621965cb9ad60343b8b8c0", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/f3e40ed51972283d5b621965cb9ad60343b8b8c0", "committedDate": "2020-06-20T05:44:50Z", "message": "internment_test.dl: Make the test deterministic.\n\nEliminate interned values from output relations to make sure that they\nare output in a deterministic order."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "81809599547aaa76c6bfeb1cf61abfd4078f7eeb", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/81809599547aaa76c6bfeb1cf61abfd4078f7eeb", "committedDate": "2020-06-20T05:37:16Z", "message": "internment_test.dl: Make the test deterministic.\n\nEliminate interned values from output relations to make sure that they\nare output in a deterministic order."}, "afterCommit": {"oid": "f3e40ed51972283d5b621965cb9ad60343b8b8c0", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/f3e40ed51972283d5b621965cb9ad60343b8b8c0", "committedDate": "2020-06-20T05:44:50Z", "message": "internment_test.dl: Make the test deterministic.\n\nEliminate interned values from output relations to make sure that they\nare output in a deterministic order."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4545, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}