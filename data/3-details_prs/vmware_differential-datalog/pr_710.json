{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0ODEzNTA4", "number": 710, "title": "?-operator", "bodyText": "See RFC #707.\nWe introduce Rust-style error handling operator ?.\nThe ? operator can placed after an expression that returns Option<> or\nResult<> inside a function scope.  Similar to unwrap_ functions, it\nextracts the inner value on success.  On error, it returns the error value\n(or None) from the function, e.g.:\n/* Lookup item in the inventory and return its price in cents. */\nfunction get_price_in_cents_(inventory: Map<string, string>, item: string): Option<u64> {\n    Some{ inventory.get(item)?.parse_dec_u64()? * 100 }\n}\n\nis equivalent to\nfunction get_price_in_cents(inventory: Map<string, string>, item: string): Option<u64> {\n    match (inventory.get(item)) {\n        None -> None,\n        Some{price} -> match (parse_dec_u64(price)) {\n                           None    -> None,\n                           Some{p} -> Some{100 * p}\n                       }\n    }\n}\n\n\nThe ? operator can only be used inside a function whose return type is\nOption or Result.  The following table summarizes the behvaior of ?\nfor various combinations of expression type and function return type.\n\n\n\nFunction return type\nExpression type\nExpression value\n? behaves as\n\n\n\n\nOption\nOption\nNone\nreturn None\n\n\nOption\nOption\nSome{x}\nx\n\n\nOption\nResult<V,E>\nErr{e}\nreturn None\n\n\nOption\nResult<V,E>\nOk{v}\nv\n\n\nResult<X,E>\nResult<Y,E>\nErr{e}\nreturn Err{e}\n\n\nResult<X,E>\nResult<Y,E>\nOk{v}\nv\n\n\nResult<V,E>\nOption\n\ninvalid\n\n\nResult<X,E1>\nResult<Y,E2>, E2 != E1\n\ninvalid", "createdAt": "2020-07-22T00:30:57Z", "url": "https://github.com/vmware/differential-datalog/pull/710", "merged": true, "mergeCommit": {"oid": "1567c6f95a3c8e6204cc3df730a62b6e9f8afb5a"}, "closed": true, "closedAt": "2020-07-22T16:57:19Z", "author": {"login": "ryzhyk"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3Od7wgH2gAyNDU0ODEzNTA4OjJhNmY2ZjQ1M2RlMThhOWJlMjU1NDYxNmZhOGU0ZTJlN2M4MzMzMTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3b4YMAFqTQ1MzM3OTM4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2a6f6f453de18a9be2554616fa8e4e2e7c833310", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/2a6f6f453de18a9be2554616fa8e4e2e7c833310", "committedDate": "2020-07-21T23:03:17Z", "message": "?-operator.\n\nSee RFC #707.\n\nWe introduce Rust-style error handling operator `?`.\n\nThe `?` operator can placed after an expression that returns `Option<>` or\n`Result<>` inside a function scope.  Similar to `unwrap_` functions, it\nextracts the inner value on success.  On error, it returns the error value\n(or `None`) from the function, e.g.:\n\n```\n/* Lookup item in the inventory and return its price in cents. */\nfunction get_price_in_cents_(inventory: Map<string, string>, item: string): Option<u64> {\n    Some{ inventory.get(item)?.parse_dec_u64()? * 100 }\n}\n```\n\nis equivalent to\n\n```\nfunction get_price_in_cents(inventory: Map<string, string>, item: string): Option<u64> {\n    match (inventory.get(item)) {\n        None -> None,\n        Some{price} -> match (parse_dec_u64(price)) {\n                           None    -> None,\n                           Some{p} -> Some{100 * p}\n                       }\n    }\n}\n\n```\n\nThe `?` operator can only be used inside a function whose return type is\n`Option` or `Result`.  The following table summarizes the behvaior of `?`\nfor various combinations of expression type and function return type.\n\n| Function return type |     Expression type    | Expression value |  ? behaves as  |\n|:--------------------:|:----------------------:|------------------|:--------------:|\n| Option<T1>           | Option<T2>             | None             |   return None  |\n| Option<T1>           | Option<T2>             | Some{x}          |        x       |\n| Option<T1>           | Result<V,E>            | Err{e}           |   return None  |\n| Option<T1>           | Result<V,E>            | Ok{v}            |        v       |\n| Result<X,E>          | Result<Y,E>            | Err{e}           | return Err{e}  |\n| Result<X,E>          | Result<Y,E>            | Ok{v}            |        v       |\n| Result<V,E>          | Option<T>              |                  |     invalid    |\n| Result<X,E1>         | Result<Y,E2>, E2 != E1 |                  |     invalid    |"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6f1e510076cc455486cbe3013c8c75923286f9f", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/f6f1e510076cc455486cbe3013c8c75923286f9f", "committedDate": "2020-07-21T23:16:04Z", "message": "Disable another souffle test."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzMzc5Mzg5", "url": "https://github.com/vmware/differential-datalog/pull/710#pullrequestreview-453379389", "createdAt": "2020-07-22T14:34:33Z", "commit": {"oid": "f6f1e510076cc455486cbe3013c8c75923286f9f"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDozNDozM1rOG1lWSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDozNDozM1rOG1lWSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgzOTYyNw==", "bodyText": "Is there any danger of a name clash?", "url": "https://github.com/vmware/differential-datalog/pull/710#discussion_r458839627", "createdAt": "2020-07-22T14:34:33Z", "author": {"login": "mbudiu-vmw"}, "path": "src/Language/DifferentialDatalog/TypeInference.hs", "diffHunk": "@@ -444,6 +444,24 @@ inferTypes d es = do\n                  EBreak{}    -> annotated\n                  EReturn{}   -> annotated\n                  ERef{}      -> annotated\n+                 ETry{..} | isOption ?d inner_type && isOption ?d funcType\n+                             -> E $ EMatch (pos e) inner_expr\n+                                    [(eStruct nONE_CONSTRUCTOR [] inner_type, eReturn (eStruct nONE_CONSTRUCTOR [] funcType) t),\n+                                     (eStruct sOME_CONSTRUCTOR [(\"x\", eVarDecl \"__x\" t)] inner_type, eVar \"__x\")]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6f1e510076cc455486cbe3013c8c75923286f9f"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4575, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}