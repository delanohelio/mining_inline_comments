{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyOTIyOTA5", "number": 622, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMTo0NjozOFrODxcsWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzoxOTo1OVrODyRzbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTc2OTIxOnYy", "diffSide": "RIGHT", "path": "lib/time.dl", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMTo0NjozOFrOGE7MTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMTo0NjozOFrOGE7MTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxNzI5NA==", "bodyText": "Can we have some comments (presumably copied from the time crate)?", "url": "https://github.com/vmware/differential-datalog/pull/622#discussion_r407817294", "createdAt": "2020-04-14T01:46:38Z", "author": {"login": "ryzhyk"}, "path": "lib/time.dl", "diffHunk": "@@ -0,0 +1,15 @@\n+extern type time\n+\n+extern function try_from_hms(hours: bit<8>, minutes: bit<8>, seconds: bit<8>): Result<time, string>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6fc00aef9a17d8494cd3e03a79634d2b6dda3d"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTc3MzAzOnYy", "diffSide": "RIGHT", "path": "lib/time.dl", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMTo0ODo0NVrOGE7OjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMTo0ODo0NVrOGE7OjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxNzg2OQ==", "bodyText": "I'd prefer to call it Time with a capital T.", "url": "https://github.com/vmware/differential-datalog/pull/622#discussion_r407817869", "createdAt": "2020-04-14T01:48:45Z", "author": {"login": "ryzhyk"}, "path": "lib/time.dl", "diffHunk": "@@ -0,0 +1,15 @@\n+extern type time", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6fc00aef9a17d8494cd3e03a79634d2b6dda3d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTc4MzU5OnYy", "diffSide": "RIGHT", "path": "test/datalog_tests/run-test.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMTo1NDoyM1rOGE7UtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMTo1NDoyM1rOGE7UtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxOTQ0NQ==", "bodyText": "I'd rather keep FLATBUF on by default, so we keep testing it on as many examples as possible.  I just found a bug in flatbufs in a completely unrelated test.", "url": "https://github.com/vmware/differential-datalog/pull/622#discussion_r407819445", "createdAt": "2020-04-14T01:54:23Z", "author": {"login": "ryzhyk"}, "path": "test/datalog_tests/run-test.sh", "diffHunk": "@@ -2,8 +2,10 @@\n # Run one datalog test\n \n PROFILE=0\n+# If 1 use flatbuf\n+FLATBUF=0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6fc00aef9a17d8494cd3e03a79634d2b6dda3d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTc5MDYxOnYy", "diffSide": "RIGHT", "path": "test/datalog_tests/time_test.dat", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMTo1ODozNFrOGE7ZLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODoxNDo0MlrOGFbDTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgyMDU5MA==", "bodyText": "If you want to test your from/to_flatbuf implementation, you need to feed and dump some records through CLI.", "url": "https://github.com/vmware/differential-datalog/pull/622#discussion_r407820590", "createdAt": "2020-04-14T01:58:34Z", "author": {"login": "ryzhyk"}, "path": "test/datalog_tests/time_test.dat", "diffHunk": "@@ -0,0 +1,4 @@\n+start;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6fc00aef9a17d8494cd3e03a79634d2b6dda3d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzODUyNQ==", "bodyText": "Flatbuf is not supported. It's not clear what needs to be changed to support extern types in flatbuf.", "url": "https://github.com/vmware/differential-datalog/pull/622#discussion_r408338525", "createdAt": "2020-04-14T18:13:22Z", "author": {"login": "mbudiu-vmw"}, "path": "test/datalog_tests/time_test.dat", "diffHunk": "@@ -0,0 +1,4 @@\n+start;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgyMDU5MA=="}, "originalCommit": {"oid": "ca6fc00aef9a17d8494cd3e03a79634d2b6dda3d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzOTI3OQ==", "bodyText": "CLI does not use flatbuf.", "url": "https://github.com/vmware/differential-datalog/pull/622#discussion_r408339279", "createdAt": "2020-04-14T18:14:42Z", "author": {"login": "ryzhyk"}, "path": "test/datalog_tests/time_test.dat", "diffHunk": "@@ -0,0 +1,4 @@\n+start;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgyMDU5MA=="}, "originalCommit": {"oid": "ca6fc00aef9a17d8494cd3e03a79634d2b6dda3d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTgwODMxOnYy", "diffSide": "RIGHT", "path": "lib/time.dl", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMjowODozMlrOGE7jog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMjowODozMlrOGE7jog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgyMzI2Ng==", "bodyText": "Can you add examples of supported input formats?", "url": "https://github.com/vmware/differential-datalog/pull/622#discussion_r407823266", "createdAt": "2020-04-14T02:08:32Z", "author": {"login": "ryzhyk"}, "path": "lib/time.dl", "diffHunk": "@@ -0,0 +1,15 @@\n+extern type time\n+\n+extern function try_from_hms(hours: bit<8>, minutes: bit<8>, seconds: bit<8>): Result<time, string>\n+extern function try_from_hms_milli(hours: bit<8>, minutes: bit<8>, seconds: bit<8>, milliseconds: bit<16>): Result<time, string>\n+extern function try_from_hms_micro(hours: bit<8>, minutes: bit<8>, seconds: bit<8>, microseconds: bit<32>): Result<time, string>\n+extern function try_from_hms_nano(hours: bit<8>, minutes: bit<8>, seconds: bit<8>, microseconds: bit<32>): Result<time, string>\n+extern function midnight(): time\n+extern function hour(t: time): bit<8>\n+extern function minute(t: time): bit<8>\n+extern function second(t: time): bit<8>\n+extern function millisecond(t: time): bit<16>\n+extern function microsecond(t: time): bit<32>\n+extern function nanosecond(t: time): bit<32>\n+extern function time2string(t: time): string\n+extern function parse(s: string, format: string): Result<time, string>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6fc00aef9a17d8494cd3e03a79634d2b6dda3d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTgyMTgwOnYy", "diffSide": "RIGHT", "path": "lib/time.dl", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMjoxNTozN1rOGE7rgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMjoxNTozN1rOGE7rgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgyNTI4MA==", "bodyText": "Can we also have a version of 2string that takes format string?", "url": "https://github.com/vmware/differential-datalog/pull/622#discussion_r407825280", "createdAt": "2020-04-14T02:15:37Z", "author": {"login": "ryzhyk"}, "path": "lib/time.dl", "diffHunk": "@@ -0,0 +1,15 @@\n+extern type time\n+\n+extern function try_from_hms(hours: bit<8>, minutes: bit<8>, seconds: bit<8>): Result<time, string>\n+extern function try_from_hms_milli(hours: bit<8>, minutes: bit<8>, seconds: bit<8>, milliseconds: bit<16>): Result<time, string>\n+extern function try_from_hms_micro(hours: bit<8>, minutes: bit<8>, seconds: bit<8>, microseconds: bit<32>): Result<time, string>\n+extern function try_from_hms_nano(hours: bit<8>, minutes: bit<8>, seconds: bit<8>, microseconds: bit<32>): Result<time, string>\n+extern function midnight(): time\n+extern function hour(t: time): bit<8>\n+extern function minute(t: time): bit<8>\n+extern function second(t: time): bit<8>\n+extern function millisecond(t: time): bit<16>\n+extern function microsecond(t: time): bit<32>\n+extern function nanosecond(t: time): bit<32>\n+extern function time2string(t: time): string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6fc00aef9a17d8494cd3e03a79634d2b6dda3d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTgyNzgyOnYy", "diffSide": "RIGHT", "path": "lib/time.dl", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMjoxOTowM1rOGE7vDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMDo1MToxMlrOGFl_JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgyNjE4OQ==", "bodyText": "I would prefix all these functions with time_. Alternatively, users can import this module using qualified name import time as time, but then what happens when you start adding support for dates and date-times?", "url": "https://github.com/vmware/differential-datalog/pull/622#discussion_r407826189", "createdAt": "2020-04-14T02:19:03Z", "author": {"login": "ryzhyk"}, "path": "lib/time.dl", "diffHunk": "@@ -0,0 +1,15 @@\n+extern type time\n+\n+extern function try_from_hms(hours: bit<8>, minutes: bit<8>, seconds: bit<8>): Result<time, string>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6fc00aef9a17d8494cd3e03a79634d2b6dda3d"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUxODQzNw==", "bodyText": "I've done everything but add this prefix.", "url": "https://github.com/vmware/differential-datalog/pull/622#discussion_r408518437", "createdAt": "2020-04-15T00:51:12Z", "author": {"login": "mbudiu-vmw"}, "path": "lib/time.dl", "diffHunk": "@@ -0,0 +1,15 @@\n+extern type time\n+\n+extern function try_from_hms(hours: bit<8>, minutes: bit<8>, seconds: bit<8>): Result<time, string>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgyNjE4OQ=="}, "originalCommit": {"oid": "ca6fc00aef9a17d8494cd3e03a79634d2b6dda3d"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDM5Njg5OnYy", "diffSide": "RIGHT", "path": "lib/time.dl", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjo0NzoyN1rOGGOQ4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjo0NzoyN1rOGGOQ4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3ODMzNg==", "bodyText": "should this be time_format?", "url": "https://github.com/vmware/differential-datalog/pull/622#discussion_r409178336", "createdAt": "2020-04-15T22:47:27Z", "author": {"login": "ryzhyk"}, "path": "lib/time.dl", "diffHunk": "@@ -0,0 +1,182 @@\n+/// Library supporting dates, times, and date-times\n+/// This parallels closely the Rust time crate\n+/// https://time-rs.github.io/time/time/struct.Time.html\n+\n+///////////////////////////////////////////////////////////////////////////////////////////\n+/// The clock time within a given date. Nanosecond precision.\n+/// All minutes are assumed to have exactly 60 seconds; no attempt is\n+/// made to handle leap seconds (either positive or negative).\n+/// When comparing two Times, they are assumed to be in the same\n+/// calendar date.\n+\n+extern type Time\n+\n+/// Create a Time that is exactly midnight.\n+extern function midnight(): Time\n+\n+/// Attempt to create a Time from the hour, minute, and second.\n+extern function try_from_hms(hours: bit<8>, minutes: bit<8>, seconds: bit<8>): Result<Time, string>\n+\n+/// Attempt to create a Time from the hour, minute, second, and millisecond.\n+extern function try_from_hms_milli(hours: bit<8>, minutes: bit<8>, seconds: bit<8>, milliseconds: bit<16>): Result<Time, string>\n+\n+/// Attempt to create a Time from the hour, minute, second, and microsecond.\n+extern function try_from_hms_micro(hours: bit<8>, minutes: bit<8>, seconds: bit<8>, microseconds: bit<32>): Result<Time, string>\n+\n+/// Attempt to create a Time from the hour, minute, second, and nanosecond.\n+extern function try_from_hms_nano(hours: bit<8>, minutes: bit<8>, seconds: bit<8>, microseconds: bit<32>): Result<Time, string>\n+\n+/// Get the clock hour.  The returned value will always be in the range 0..24.\n+extern function hour(t: Time): bit<8>\n+\n+/// Get the minute within the hour.  The returned value will always be in the range 0..60.\n+extern function minute(t: Time): bit<8>\n+\n+/// Get the second within the minute.  The returned value will always be in the range 0..60.\n+extern function second(t: Time): bit<8>\n+\n+/// Get the milliseconds within the second.  The returned value will always be in the range 0..1000.\n+extern function millisecond(t: Time): bit<16>\n+\n+/// Get the microseconds within the second.  The returned value will always be in the range 0..1000000.\n+extern function microsecond(t: Time): bit<32>\n+\n+/// Get the nanoseconds within the second.  The returned value will always be in the range 0..1000000000.\n+extern function nanosecond(t: Time): bit<32>\n+\n+// Here is a list of the format specifiers:\n+// Spec\tReplaced by                                                             Example\n+// %a\tAbbreviated weekday name                                                Thu\n+// %A\tFull weekday name\t                                                Thursday\n+// %b\tAbbreviated month name\t                                                Aug\n+// %B\tFull month name\t                                                        August\n+// %c\tDate and time representation, equivalent to %a %b %-d %-H:%M:%S %-Y\tThu Aug 23 14:55:02 2001\n+// %C\tYear divided by 100 and truncated to integer (00-99)\t                20\n+// %d\tDay of the month, zero-padded (01-31)\t                                23\n+// %D\tShort MM/DD/YY date, equivalent to %-m/%d/%y\t                        8/23/01\n+// %F\tShort YYYY-MM-DD date, equivalent to %-Y-%m-%d\t                        2001-08-23\n+// %g\tWeek-based year, last two digits (00-99)\t                        01\n+// %G\tWeek-based year\t                                                        2001\n+// %H\tHour in 24h format (00-23)\t                                        14\n+// %I\tHour in 12h format (01-12)\t                                        02\n+// %j\tDay of the year (001-366)\t                                        235\n+// %m\tMonth as a decimal number (01-12)\t                                08\n+// %M\tMinute (00-59)\t                                                        55\n+// %N\tSubsecond nanoseconds. Always 9 digits\t                                012345678\n+// %p\tam or pm designation\t                                                pm\n+// %P\tAM or PM designation\t                                                PM\n+// %r\t12-hour clock time, equivalent to %-I:%M:%S %p\t                        2:55:02 pm\n+// %R\t24-hour HH:MM time, equivalent to %-H:%M\t                        14:55\n+// %S\tSecond (00-59)\t                                                        02\n+// %T\t24-hour clock time with seconds, equivalent to %-H:%M:%S\t        14:55:02\n+// %u\tISO 8601 weekday as number with Monday as 1 (1-7)\t                4\n+// %U\tWeek number with the first Sunday as the start of week one (00-53)\t33\n+// %V\tISO 8601 week number (01-53)\t                                        34\n+// %w\tWeekday as a decimal number with Sunday as 0 (0-6)\t                4\n+// %W\tWeek number with the first Monday as the start of week one (00-53)\t34\n+// %y\tYear, last two digits (00-99)\t                                        01\n+// %Y\tFull year, including + if >= 10,000\t                                2001\n+// %z\tISO 8601 offset from UTC in timezone (+HHMM)\t                        +0100\n+// %%\tLiteral %\t                                                        %\n+\n+// All specifiers that are strictly numerical have modifiers for formatting.\n+// Adding a modifier to a non-supporting specifier is a no-op.\n+// Modifier\t     Behavior\t         Example\n+// - (dash)\t     No padding\t         %-d => 5\n+// _ (underscore)    Pad with spaces\t %_d =>  5\n+// 0\t             Pad with zeros\t %0d => 05\n+\n+/// Convert the time to a string using a default format.\n+extern function time2string(t: Time): string\n+\n+/// Convert the string to a time using a default format.  Inverse of time2string.\n+extern function string2time(s: string): Result<Time, string>\n+\n+/// Format the Time using the provided string.\n+extern function format(t: Time, format: string): string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a80d18128edc79f978e19da1d0be39ca7d06a16a"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDQ3MDg0OnYy", "diffSide": "RIGHT", "path": "rust/template/src/main.rs", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzoxOTo1OVrOGGO84g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzoxOTo1OVrOGGO84g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE4OTYwMg==", "bodyText": "why did you have to change this. The new method will produce output that does not look good, e.g., Instant { tv_sec: 5122222, tv_nsec: 893024142 }", "url": "https://github.com/vmware/differential-datalog/pull/622#discussion_r409189602", "createdAt": "2020-04-15T23:19:59Z", "author": {"login": "ryzhyk"}, "path": "rust/template/src/main.rs", "diffHunk": "@@ -95,7 +94,7 @@ fn handle_cmd(\n         Command::Comment => Ok(()),\n         Command::Rollback => hddlog.transaction_rollback(),\n         Command::Timestamp => {\n-            println!(\"Timestamp: {}\", precise_time_ns());\n+            println!(\"Timestamp: {:#?}\", std::time::Instant::now());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a80d18128edc79f978e19da1d0be39ca7d06a16a"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4734, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}