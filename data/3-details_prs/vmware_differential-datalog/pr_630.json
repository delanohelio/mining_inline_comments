{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0OTEwODI1", "number": 630, "title": "Internment library.", "bodyText": "This commit adds bindings for the Rust internment crate, which\nimplements reference-counted interned objects of arbitrary types.\nUnlike the intern.dl library, internment garbage collects unused\nobjects.\nWe also add versions of standard string functions that accept interned\nstrings.\nThis is still work in progress.  In particular, some amount of language\nsupport is needed to make interned strings (and other objects)\nnear-transparent, as well as to efficiently handle static strings.", "createdAt": "2020-04-17T04:13:07Z", "url": "https://github.com/vmware/differential-datalog/pull/630", "merged": true, "mergeCommit": {"oid": "6fa496e812516ade76c327de7c129d44af1919c9"}, "closed": true, "closedAt": "2020-04-17T18:59:46Z", "author": {"login": "ryzhyk"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYYPzjgH2gAyNDA0OTEwODI1OjE0M2MxYmVjMGU1MGU1NGQ0MDUzMjBjYzE3OTA4NDk5NWMxMzBhYzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYkackAFqTM5NTYyMjA2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "143c1bec0e50e54d405320cc179084995c130ac9", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/143c1bec0e50e54d405320cc179084995c130ac9", "committedDate": "2020-04-17T02:55:15Z", "message": "Internment library.\n\nThis commit adds bindings for the Rust `internment` crate, which\nimplements reference-counted interned objects of arbitrary types.\nUnlike the `intern.dl` library, `internment` garbage collects unused\nobjects.\n\nWe also add versions of standard string functions that accept interned\nstrings.\n\nThis is still work in progress.  In particular, some amount of language\nsupport is needed to make interned strings (and other objects)\nnear-transparent, as well as to efficiently handle static strings."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NjIyMDY5", "url": "https://github.com/vmware/differential-datalog/pull/630#pullrequestreview-395622069", "createdAt": "2020-04-17T16:59:17Z", "commit": {"oid": "143c1bec0e50e54d405320cc179084995c130ac9"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjo1OToxN1rOGHV4ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjo1OToxN1rOGHV4ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM1MTc1NA==", "bodyText": "why keep this comment around?", "url": "https://github.com/vmware/differential-datalog/pull/630#discussion_r410351754", "createdAt": "2020-04-17T16:59:17Z", "author": {"login": "mbudiu-vmw"}, "path": "lib/internment.rs", "diffHunk": "@@ -0,0 +1,233 @@\n+use differential_datalog::record;\n+use differential_datalog::record::*;\n+use internment::ArcIntern;\n+use serde;\n+use std::cmp;\n+use std::fmt;\n+\n+#[cfg(feature = \"flatbuf\")]\n+use flatbuf::{FromFlatBuffer, ToFlatBuffer, ToFlatBufferTable, ToFlatBufferVectorElement};\n+\n+/* `flatc`-generated declarations re-exported by `flatbuf.rs` */\n+#[cfg(feature = \"flatbuf\")]\n+use flatbuf::fb;\n+\n+/* FlatBuffers runtime */\n+#[cfg(feature = \"flatbuf\")]\n+use flatbuffers as fbrt;\n+\n+#[derive(Default, Eq, PartialOrd, PartialEq, Ord, Clone, Hash)]\n+pub struct internment_Intern<A>\n+where\n+    A: Eq + Send + Hash + 'static,\n+{\n+    intern: ArcIntern<A>,\n+}\n+\n+impl<A: Eq + Hash + Send + 'static> internment_Intern<A> {\n+    pub fn new(x: A) -> internment_Intern<A> {\n+        internment_Intern {\n+            intern: ArcIntern::new(x),\n+        }\n+    }\n+    pub fn as_ref(&self) -> &A {\n+        self.intern.as_ref()\n+    }\n+}\n+\n+pub fn internment_intern<A: Eq + Hash + Send + Clone + 'static>(x: &A) -> internment_Intern<A> {\n+    internment_Intern::new(x.clone())\n+}\n+\n+pub fn internment_ival<A: Eq + Hash + Send + Clone>(x: &internment_Intern<A>) -> A {\n+    x.intern.as_ref().clone()\n+}\n+\n+/*pub fn intern_istring_ord(s: &intern_IString) -> u32 {\n+    s.x\n+}*/\n+\n+impl<A: fmt::Display + Eq + Hash + Send + Clone> fmt::Display for internment_Intern<A> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Display::fmt(self.as_ref(), f)\n+        //record::format_ddlog_str(&intern_istring_str(self), f)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "143c1bec0e50e54d405320cc179084995c130ac9"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4513, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}