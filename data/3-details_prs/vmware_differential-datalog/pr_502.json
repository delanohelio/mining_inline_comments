{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMzc1Nzkz", "number": 502, "title": "Implementation of raw SQL aggregates (without groupby)", "bodyText": "Note that the CodeFormatter class is not currently used. This is WIP.\nI have split the RuntimeTests file with junit tests into multiple files.\n@lalithsuresh : if this works then the remaining important elements are group-by and having.", "createdAt": "2020-01-13T23:42:19Z", "url": "https://github.com/vmware/differential-datalog/pull/502", "merged": true, "mergeCommit": {"oid": "52ab94cfb7512642d380fdf945fa09e9ad9e46c0"}, "closed": true, "closedAt": "2020-01-24T17:25:08Z", "author": {"login": "mbudiu-vmw"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6E9m9gH2gAyMzYyMzc1NzkzOmM0Y2M1NDVmMzA5ZGY1NTVkYmM4OGE2MzA5ODdlNjc0YTFhZDQ0OGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb9hqNkgH2gAyMzYyMzc1NzkzOmVjMmFhZTZiNjhiYjEyYWI3NTMzNWFiZTIzMzg4NzhkZDQ1ODA5NTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c4cc545f309df555dbc88a630987e674a1ad448b", "author": {"user": {"login": "mbudiu-vmw", "name": "Mihai Budiu"}}, "url": "https://github.com/vmware/differential-datalog/commit/c4cc545f309df555dbc88a630987e674a1ad448b", "committedDate": "2020-01-13T23:29:27Z", "message": "Support for SQL aggregates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74481d8dfda181cee12d4e17d5a2113da28b2c6a", "author": {"user": {"login": "mbudiu-vmw", "name": "Mihai Budiu"}}, "url": "https://github.com/vmware/differential-datalog/commit/74481d8dfda181cee12d4e17d5a2113da28b2c6a", "committedDate": "2020-01-13T23:29:27Z", "message": "Simplifications"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8851b7aa1a010f024a419168772cebab0cbea867", "author": {"user": {"login": "mbudiu-vmw", "name": "Mihai Budiu"}}, "url": "https://github.com/vmware/differential-datalog/commit/8851b7aa1a010f024a419168772cebab0cbea867", "committedDate": "2020-01-13T23:29:27Z", "message": "Aggregate and join test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93e3910f6f50ae25b7ab762092d474643c5d7ac5", "author": {"user": {"login": "mbudiu-vmw", "name": "Mihai Budiu"}}, "url": "https://github.com/vmware/differential-datalog/commit/93e3910f6f50ae25b7ab762092d474643c5d7ac5", "committedDate": "2020-01-13T23:29:27Z", "message": "Generic comparison functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "879a4b5ebc4d78987bd99031904b993b0c02511d", "author": {"user": {"login": "mbudiu-vmw", "name": "Mihai Budiu"}}, "url": "https://github.com/vmware/differential-datalog/commit/879a4b5ebc4d78987bd99031904b993b0c02511d", "committedDate": "2020-01-13T23:35:24Z", "message": "Test with string aggregation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d288d137194e8be46e408e0d49943a0a7a4e3891", "author": {"user": {"login": "mbudiu-vmw", "name": "Mihai Budiu"}}, "url": "https://github.com/vmware/differential-datalog/commit/d288d137194e8be46e408e0d49943a0a7a4e3891", "committedDate": "2020-01-13T23:37:54Z", "message": "Deleted test program"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MDUxODI0", "url": "https://github.com/vmware/differential-datalog/pull/502#pullrequestreview-344051824", "createdAt": "2020-01-16T16:35:39Z", "commit": {"oid": "d288d137194e8be46e408e0d49943a0a7a4e3891"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjozNTo0MFrOFef4cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjo0MTowNlrOFegFAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUyMzk1Mg==", "bodyText": "functionCall(min, functionCall(min, salaries))) -> functionCall(min, functionCall(abs, salaries)))", "url": "https://github.com/vmware/differential-datalog/pull/502#discussion_r367523952", "createdAt": "2020-01-16T16:35:40Z", "author": {"login": "lalithsuresh"}, "path": "sql/src/main/java/com/vmware/ddlog/translator/AggregateVisitor.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package com.vmware.ddlog.translator;\n+\n+import com.facebook.presto.sql.tree.*;\n+import com.vmware.ddlog.util.Ternary;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This visitor computes the AggregateDecomposition of an expression.\n+ * It returns 'true' if the expression is the result of an aggregation.\n+ */\n+public class AggregateVisitor\n+        extends AstVisitor<Ternary, TranslationContext> {\n+    /**\n+     * This class represents the decomposition of an expression that contains\n+     * aggregates into multiple expressions.  Consider this example:\n+     *\n+     * select max(salaries) + min(abs(salaries)) from employees\n+     *\n+     * Consider the expression tree\n+     * + ( functionCall(max, salaries), functionCall(min, functionCall(min, salaries)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d288d137194e8be46e408e0d49943a0a7a4e3891"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUyNjQwNg==", "bodyText": "Why does this need an instance? As opposed to calls like isAggregateFunction() etc being static methods?", "url": "https://github.com/vmware/differential-datalog/pull/502#discussion_r367526406", "createdAt": "2020-01-16T16:39:50Z", "author": {"login": "lalithsuresh"}, "path": "sql/src/main/java/com/vmware/ddlog/translator/SqlSemantics.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package com.vmware.ddlog.translator;\n+\n+import com.vmware.ddlog.ir.*;\n+\n+import javax.annotation.Nullable;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+\n+/**\n+ * This is a singleton pattern class\n+ * encoding various properties about SQL semantics.\n+ */\n+public class SqlSemantics {\n+    private final HashSet<String> aggregateFunctions = new HashSet<String>();\n+    private final HashMap<String, DDlogEBinOp.BOp> arithmeticFunctions = new HashMap<String, DDlogEBinOp.BOp>();\n+    private final HashMap<String, DDlogEBinOp.BOp> stringFunctions = new HashMap<String, DDlogEBinOp.BOp>();\n+    private final HashMap<String, DDlogEBinOp.BOp> booleanFunctions = new HashMap<String, DDlogEBinOp.BOp>();\n+\n+    private SqlSemantics() {\n+        this.aggregateFunctions.add(\"count\");\n+        this.aggregateFunctions.add(\"sum\");\n+        this.aggregateFunctions.add(\"avg\");\n+        this.aggregateFunctions.add(\"min\");\n+        this.aggregateFunctions.add(\"max\");\n+\n+        this.arithmeticFunctions.put(\"a_eq\", DDlogEBinOp.BOp.Eq);\n+        this.arithmeticFunctions.put(\"a_neq\", DDlogEBinOp.BOp.Neq);\n+        this.arithmeticFunctions.put(\"a_lt\", DDlogEBinOp.BOp.Lt);\n+        this.arithmeticFunctions.put(\"a_gt\", DDlogEBinOp.BOp.Gt);\n+        this.arithmeticFunctions.put(\"a_lte\", DDlogEBinOp.BOp.Lte);\n+        this.arithmeticFunctions.put(\"a_gte\", DDlogEBinOp.BOp.Gte);\n+        this.arithmeticFunctions.put(\"a_plus\", DDlogEBinOp.BOp.Plus);\n+        this.arithmeticFunctions.put(\"a_minus\", DDlogEBinOp.BOp.Minus);\n+        this.arithmeticFunctions.put(\"a_mod\", DDlogEBinOp.BOp.Mod);\n+        this.arithmeticFunctions.put(\"a_times\", DDlogEBinOp.BOp.Times);\n+        this.arithmeticFunctions.put(\"a_div\", DDlogEBinOp.BOp.Div);\n+        // The following don't work for 64 bits\n+        // this.arithmeticFunctions.put(\"a_shiftr\", DDlogEBinOp.BOp.ShiftR);\n+        // this.arithmeticFunctions.put(\"a_shiftl\", DDlogEBinOp.BOp.ShiftL);\n+        this.arithmeticFunctions.put(\"a_band\", DDlogEBinOp.BOp.BAnd);\n+        this.arithmeticFunctions.put(\"a_bor\", DDlogEBinOp.BOp.BOr);\n+        this.arithmeticFunctions.put(\"a_bxor\", DDlogEBinOp.BOp.BXor);\n+\n+        this.stringFunctions.put(\"s_concat\", DDlogEBinOp.BOp.Concat);\n+        this.stringFunctions.put(\"s_eq\", DDlogEBinOp.BOp.Eq);\n+        this.stringFunctions.put(\"s_neq\", DDlogEBinOp.BOp.Neq);\n+\n+        this.booleanFunctions.put(\"b_eq\", DDlogEBinOp.BOp.Eq);\n+        this.booleanFunctions.put(\"b_neq\", DDlogEBinOp.BOp.Neq);\n+        this.booleanFunctions.put(\"b_and\", DDlogEBinOp.BOp.And);\n+        this.booleanFunctions.put(\"b_or\", DDlogEBinOp.BOp.Or);\n+        this.booleanFunctions.put(\"b_impl\", DDlogEBinOp.BOp.Impl);\n+    }\n+\n+    public static SqlSemantics semantics = new SqlSemantics();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d288d137194e8be46e408e0d49943a0a7a4e3891"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUyNzE3MQ==", "bodyText": "Why is generateLibrary in SqlSemantics?", "url": "https://github.com/vmware/differential-datalog/pull/502#discussion_r367527171", "createdAt": "2020-01-16T16:41:06Z", "author": {"login": "lalithsuresh"}, "path": "sql/src/main/java/com/vmware/ddlog/translator/Translator.java", "diffHunk": "@@ -83,10 +83,9 @@ public DDlogIRNode translateExpression(final String sql) {\n     }\n \n     public DDlogProgram generateLibrary() {\n-        return this.translationContext.generateLibrary();\n+        return SqlSemantics.semantics.generateLibrary();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d288d137194e8be46e408e0d49943a0a7a4e3891"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "289d2a70b188cbb7ea9d01d4151f605e780fadd9", "author": {"user": {"login": "mbudiu-vmw", "name": "Mihai Budiu"}}, "url": "https://github.com/vmware/differential-datalog/commit/289d2a70b188cbb7ea9d01d4151f605e780fadd9", "committedDate": "2020-01-17T19:27:48Z", "message": "Renamed test classes for mvn"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "beea9e6cbbd21d1f570781f67e326fd5121d28dc", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/beea9e6cbbd21d1f570781f67e326fd5121d28dc", "committedDate": "2020-01-18T00:29:49Z", "message": ".gitlab-ci.yml: Add SQL-to-DDlog compiler test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "875e4e41ab22ce6f663ddfff9e0b57be5ff92adb", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/875e4e41ab22ce6f663ddfff9e0b57be5ff92adb", "committedDate": "2020-01-23T01:39:23Z", "message": ".gitlab-ci.yml: Install ddlogapi.jar before running mvn."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec2aae6b68bb12ab75335abe2338878dd4580953", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/ec2aae6b68bb12ab75335abe2338878dd4580953", "committedDate": "2020-01-24T16:37:17Z", "message": ".travis.yml: Use parglare 0.10.0\n\nThe default version of parglare on MacOS appears to be broken, causing Travis builds to fail."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4621, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}