{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4MjU4NjQ3", "number": 664, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMTo1MDozMlrOD8qWLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMjoxNTowNlrOD8qucg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTM0OTU4OnYy", "diffSide": "RIGHT", "path": "src/Language/DifferentialDatalog/Attribute.hs", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMTo1MDozMlrOGVve9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMjozMTowN1rOGVwcXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ1MTI1Mg==", "bodyText": "this is not really an argument, is it?\nit's the annotated object.", "url": "https://github.com/vmware/differential-datalog/pull/664#discussion_r425451252", "createdAt": "2020-05-14T21:50:32Z", "author": {"login": "mbudiu-vmw"}, "path": "src/Language/DifferentialDatalog/Attribute.hs", "diffHunk": "@@ -70,6 +71,11 @@ typedefValidateAttr d TypeDef{..} attr = do\n             let t = fromJust tdefType\n             check d (isStruct d t) (pos attr)\n                 $ \"'custom_serde' attribute cannot be applied to type aliases.\"\n+         \"shared_ref\" -> do\n+            check d (isNothing tdefType) (pos attr)\n+                $ \"'sharef_ref' attribute is only applicable to extern types.\"\n+            check d (length tdefArgs == 1) (pos attr)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ada706277b963cdb15aaf9a766875cbe1283d3b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2NTAzNQ==", "bodyText": "Sorry, I'm not sure what you are saying.\nWe are checking that the annotated type has exactly one type argument, e.g., Ref<'T> is ok, but Ref<'T1, 'T2> isn't.", "url": "https://github.com/vmware/differential-datalog/pull/664#discussion_r425465035", "createdAt": "2020-05-14T22:25:33Z", "author": {"login": "ryzhyk"}, "path": "src/Language/DifferentialDatalog/Attribute.hs", "diffHunk": "@@ -70,6 +71,11 @@ typedefValidateAttr d TypeDef{..} attr = do\n             let t = fromJust tdefType\n             check d (isStruct d t) (pos attr)\n                 $ \"'custom_serde' attribute cannot be applied to type aliases.\"\n+         \"shared_ref\" -> do\n+            check d (isNothing tdefType) (pos attr)\n+                $ \"'sharef_ref' attribute is only applicable to extern types.\"\n+            check d (length tdefArgs == 1) (pos attr)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ1MTI1Mg=="}, "originalCommit": {"oid": "1ada706277b963cdb15aaf9a766875cbe1283d3b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2NTk2Nw==", "bodyText": "I guess I am asking for a message more like: 'types annotated with shared_ref must have exactly one type argument'", "url": "https://github.com/vmware/differential-datalog/pull/664#discussion_r425465967", "createdAt": "2020-05-14T22:28:10Z", "author": {"login": "mbudiu-vmw"}, "path": "src/Language/DifferentialDatalog/Attribute.hs", "diffHunk": "@@ -70,6 +71,11 @@ typedefValidateAttr d TypeDef{..} attr = do\n             let t = fromJust tdefType\n             check d (isStruct d t) (pos attr)\n                 $ \"'custom_serde' attribute cannot be applied to type aliases.\"\n+         \"shared_ref\" -> do\n+            check d (isNothing tdefType) (pos attr)\n+                $ \"'sharef_ref' attribute is only applicable to extern types.\"\n+            check d (length tdefArgs == 1) (pos attr)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ1MTI1Mg=="}, "originalCommit": {"oid": "1ada706277b963cdb15aaf9a766875cbe1283d3b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2Njk3NA==", "bodyText": "That makes sense, thanks!", "url": "https://github.com/vmware/differential-datalog/pull/664#discussion_r425466974", "createdAt": "2020-05-14T22:31:07Z", "author": {"login": "ryzhyk"}, "path": "src/Language/DifferentialDatalog/Attribute.hs", "diffHunk": "@@ -70,6 +71,11 @@ typedefValidateAttr d TypeDef{..} attr = do\n             let t = fromJust tdefType\n             check d (isStruct d t) (pos attr)\n                 $ \"'custom_serde' attribute cannot be applied to type aliases.\"\n+         \"shared_ref\" -> do\n+            check d (isNothing tdefType) (pos attr)\n+                $ \"'sharef_ref' attribute is only applicable to extern types.\"\n+            check d (length tdefArgs == 1) (pos attr)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ1MTI1Mg=="}, "originalCommit": {"oid": "1ada706277b963cdb15aaf9a766875cbe1283d3b"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTQwNjM2OnYy", "diffSide": "RIGHT", "path": "test/datalog_tests/internment_test.dl", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMjoxMjo0N1rOGVwCMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMjoxMjo0N1rOGVwCMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2MDI3NQ==", "bodyText": "I suspect you don't need the d here", "url": "https://github.com/vmware/differential-datalog/pull/664#discussion_r425460275", "createdAt": "2020-05-14T22:12:47Z", "author": {"login": "mbudiu-vmw"}, "path": "test/datalog_tests/internment_test.dl", "diffHunk": "@@ -20,3 +20,29 @@ OInternedString(ival(s), s) :-\n OInternedString(ival(s1) ++ \" \" ++ ival(s2), intern(ival(s1) ++ \" \" ++ ival(s2))) :-\n     AllInternedString(s1),\n     AllInternedString(s2).\n+\n+typedef IUnion = Tag1{f1: bool}\n+               | Tag2{f2: u32, f3: string}\n+\n+typedef IStruct = IStruct {\n+    u: Intern<IUnion>,\n+    t: Intern<(s32, double)>,\n+    x: bigint\n+}\n+\n+input relation IStruct[Intern<IStruct>]\n+\n+output relation Projections(inp: Intern<IStruct>, p: string)\n+\n+Projections(i, \"x=${i.x}\") :-\n+    IStruct[i].\n+Projections(i, \"t.0=${i.t.0}\") :-\n+    i in &IStruct().\n+Projections(i, \"t.1=${i.t.1}\") :-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ada706277b963cdb15aaf9a766875cbe1283d3b"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTQxMTcwOnYy", "diffSide": "RIGHT", "path": "lib/intern.dl", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMjoxNTowNlrOGVwFrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMjoyNzowMFrOGVwWzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2MTE2Nw==", "bodyText": "I don't really grasp what the user should know about this annotation.\nI don't really understand what it does; I suspect it's really tied to the Rust implementation.", "url": "https://github.com/vmware/differential-datalog/pull/664#discussion_r425461167", "createdAt": "2020-05-14T22:15:06Z", "author": {"login": "mbudiu-vmw"}, "path": "lib/intern.dl", "diffHunk": "@@ -14,6 +14,7 @@\n  * There is simply no way to obtain an interned object of a different type.\n  */\n #[size=4]\n+#[shared_ref]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ada706277b963cdb15aaf9a766875cbe1283d3b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2NTU0OQ==", "bodyText": "It is. I don't expect DDlog users to use this annotation, but it allows us to introduce new smart pointers in the future without changing the compiler.", "url": "https://github.com/vmware/differential-datalog/pull/664#discussion_r425465549", "createdAt": "2020-05-14T22:27:00Z", "author": {"login": "ryzhyk"}, "path": "lib/intern.dl", "diffHunk": "@@ -14,6 +14,7 @@\n  * There is simply no way to obtain an interned object of a different type.\n  */\n #[size=4]\n+#[shared_ref]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2MTE2Nw=="}, "originalCommit": {"oid": "1ada706277b963cdb15aaf9a766875cbe1283d3b"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4757, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}