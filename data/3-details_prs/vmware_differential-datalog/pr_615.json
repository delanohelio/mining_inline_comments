{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5OTkyNjQz", "number": 615, "title": "Add Go bindings for ddlog_transaction_commit_dump_changes_as_array", "bodyText": "The new API is called CommitTransactionChangesAsArray.\nUnfortunately we do not see a noticable improvement in benchmarks:\nBenchmarkTransaction-4                 \t     339\t   3867018 ns/op\nBenchmarkTransactionChangesAsArray-4   \t     350\t   3448197 ns/op\nBenchmarkRecord-4                      \t  764809\t      1499 ns/op\n^ this is one of the better results\nIt makes sense, since at least for this benchmark it seems that the\nbottleneck is the actual processing of the transaction by DDlog:\n  flat  flat%   sum%        cum   cum%\n    2s 71.17% 71.17%         2s 71.17%  [libtypesTest_ddlog.so]\n 0.47s 16.73% 87.90%      0.47s 16.73%  [libc-2.27.so]\n 0.15s  5.34% 93.24%      0.15s  5.34%  [libpthread-2.27.so]\n 0.11s  3.91% 97.15%      0.11s  3.91%  runtime.cgocall\n\nA real life example (Antrea) did not seem to benefit from this change\neither. Even though Antrea shows more overhead caused by\nruntime.cgocall (10%), most of this overhead seems to be caused by\ncreating / consuming records using the record API. Still, if we ever\nhave a more efficient way of creating / consuming records from Go, the\nrelative improvement offered by CommitTransactionChangesAsArray may\nbecome more significant.", "createdAt": "2020-04-07T01:53:14Z", "url": "https://github.com/vmware/differential-datalog/pull/615", "merged": true, "mergeCommit": {"oid": "daf120bcd798a8f94c99d1c833b7880881033e08"}, "closed": true, "closedAt": "2020-04-07T02:26:05Z", "author": {"login": "antoninbas"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVJPGkAH2gAyMzk5OTkyNjQzOjI5Yjc1YjM5ODZjNjVhODIwMGEzNTYxOTgxZTU0NGJiZTViNTI0YjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVJYlAgFqTM4ODczNDEzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "29b75b3986c65a8200a3561981e544bbe5b524b6", "author": {"user": {"login": "antoninbas", "name": "Antonin Bas"}}, "url": "https://github.com/vmware/differential-datalog/commit/29b75b3986c65a8200a3561981e544bbe5b524b6", "committedDate": "2020-04-07T01:44:08Z", "message": "Add Go bindings for ddlog_transaction_commit_dump_changes_as_array\n\nThe new API is called CommitTransactionChangesAsArray.\n\nUnfortunately we do not see a noticable improvement in benchmarks:\nBenchmarkTransaction-4                 \t     339\t   3867018 ns/op\nBenchmarkTransactionChangesAsArray-4   \t     350\t   3448197 ns/op\nBenchmarkRecord-4                      \t  764809\t      1499 ns/op\n\n^ this is one of the better results\n\nIt makes sense, since at least for this benchmark it seems that the\nbottleneck is the actual processing of the transaction by DDlog:\n\n      flat  flat%   sum%        cum   cum%\n        2s 71.17% 71.17%         2s 71.17%  [libtypesTest_ddlog.so]\n     0.47s 16.73% 87.90%      0.47s 16.73%  [libc-2.27.so]\n     0.15s  5.34% 93.24%      0.15s  5.34%  [libpthread-2.27.so]\n     0.11s  3.91% 97.15%      0.11s  3.91%  runtime.cgocall\n\nA real life example (Antrea) did not seem to benefit from this change\neither. Even though Antrea shows more overhead caused by\nruntime.cgocall (10%), most of this overhead seems to be caused by\ncreating / consuming records using the record API. Still, if we ever\nhave a more efficient way of creating / consuming records from Go, the\nrelative improvement offered by CommitTransactionChangesAsArray may\nbecome more significant."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NzMzOTQy", "url": "https://github.com/vmware/differential-datalog/pull/615#pullrequestreview-388733942", "createdAt": "2020-04-07T01:53:53Z", "commit": {"oid": "29b75b3986c65a8200a3561981e544bbe5b524b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMTo1Mzo1M1rOGBwKKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMTo1Mzo1M1rOGBwKKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ5MDc5Mw==", "bodyText": "@ryzhyk I am assuming that there is no need to call ddlog_free_record_updates in that case", "url": "https://github.com/vmware/differential-datalog/pull/615#discussion_r404490793", "createdAt": "2020-04-07T01:53:53Z", "author": {"login": "antoninbas"}, "path": "go/pkg/ddlog/ddlog.go", "diffHunk": "@@ -32,6 +32,18 @@ static int ddlogTransactionCommitDumpChanges(ddlog_prog hprog, uintptr_t arg) {\n     return ddlog_transaction_commit_dump_changes(hprog, dumpChangesCb, arg);\n }\n \n+extern void handleOutRecordArray(uintptr_t progIdx, ddlog_record_update *changes, size_t num_changes);\n+\n+static int ddlogTransactionCommitDumpChangesAsArray(ddlog_prog hprog, uintptr_t progIdx) {\n+    ddlog_record_update *changes;\n+    size_t num_changes;\n+    int rc = ddlog_transaction_commit_dump_changes_as_array(hprog, &changes, &num_changes);\n+    if (rc != 0 || num_changes == 0) return rc;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29b75b3986c65a8200a3561981e544bbe5b524b6"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NzM0MTMx", "url": "https://github.com/vmware/differential-datalog/pull/615#pullrequestreview-388734131", "createdAt": "2020-04-07T01:54:28Z", "commit": {"oid": "29b75b3986c65a8200a3561981e544bbe5b524b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMTo1NDoyOVrOGBwKxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMTo1NDoyOVrOGBwKxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ5MDk1MQ==", "bodyText": "for the record, I tried batching callbacks as this level as well and I didn't observe any improvement", "url": "https://github.com/vmware/differential-datalog/pull/615#discussion_r404490951", "createdAt": "2020-04-07T01:54:29Z", "author": {"login": "antoninbas"}, "path": "go/pkg/ddlog/ddlog.go", "diffHunk": "@@ -302,6 +314,19 @@ func (p *Program) CommitTransaction() error {\n \treturn nil\n }\n \n+// CommitTransactionChangesAsArray commits a transaction. It uses a different implementation from\n+// CommitTransaction, which may yield better performance when many output records are\n+// generated. Unlike with CommitTransaction, DDlog will not generate one callback for each output\n+// record, but will return an array of output records (with polarity). Note that we still generate\n+// one OutRecordHandler callback for each output record.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29b75b3986c65a8200a3561981e544bbe5b524b6"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4507, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}