{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNTI2Mjgy", "number": 833, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjoxODozMlrOE_XMHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjo1ODowOVrOFAiY_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODc1Njc5OnYy", "diffSide": "RIGHT", "path": "java/ddlogapi/DDlogRecord.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjoxODozMlrOH9CDug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjo0MDoxNlrOH9CvEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1ODkwNg==", "bodyText": "Better to call this getStructFieldUnchecked.", "url": "https://github.com/vmware/differential-datalog/pull/833#discussion_r533758906", "createdAt": "2020-12-01T22:18:32Z", "author": {"login": "lalithsuresh"}, "path": "java/ddlogapi/DDlogRecord.java", "diffHunk": "@@ -380,12 +397,20 @@ public String getStructName() {\n         return DDlogAPI.ddlog_get_constructor(this.handle);\n     }\n \n-    public DDlogRecord getStructField(int index) {\n+    public DDlogRecord getStructField(int index) throws DDlogException {\n         if (!this.isStruct())\n             throw new RuntimeException(\"Value is not a struct\");\n         return fromSharedHandle(DDlogAPI.ddlog_get_struct_field(this.handle, index));\n     }\n \n+    public DDlogRecord getStructFieldNoEx(int index) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7690c409fe48f867218bd0dbde76751df6a5da6"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc3MDAwMw==", "bodyText": "It's checked, but not a checked exception.", "url": "https://github.com/vmware/differential-datalog/pull/833#discussion_r533770003", "createdAt": "2020-12-01T22:40:16Z", "author": {"login": "mbudiu-vmw"}, "path": "java/ddlogapi/DDlogRecord.java", "diffHunk": "@@ -380,12 +397,20 @@ public String getStructName() {\n         return DDlogAPI.ddlog_get_constructor(this.handle);\n     }\n \n-    public DDlogRecord getStructField(int index) {\n+    public DDlogRecord getStructField(int index) throws DDlogException {\n         if (!this.isStruct())\n             throw new RuntimeException(\"Value is not a struct\");\n         return fromSharedHandle(DDlogAPI.ddlog_get_struct_field(this.handle, index));\n     }\n \n+    public DDlogRecord getStructFieldNoEx(int index) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1ODkwNg=="}, "originalCommit": {"oid": "e7690c409fe48f867218bd0dbde76751df6a5da6"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODgyNTE4OnYy", "diffSide": "RIGHT", "path": "java/ddlogapi.c", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjo0MDoyN1rOH9Cvcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjo1NzowMFrOH9DOZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc3MDA5OQ==", "bodyText": "Nit: might be cleaner to just use a goto to jump to the end of the function and call the frees you need.", "url": "https://github.com/vmware/differential-datalog/pull/833#discussion_r533770099", "createdAt": "2020-12-01T22:40:27Z", "author": {"login": "lalithsuresh"}, "path": "java/ddlogapi.c", "diffHunk": "@@ -792,6 +792,55 @@ JNIEXPORT jlong JNICALL Java_ddlogapi_DDlogAPI_ddlog_1struct(\n     return (jlong)result;\n }\n \n+JNIEXPORT jlong JNICALL Java_ddlogapi_DDlogAPI_ddlog_1named_1struct(\n+    JNIEnv *env, jclass obj, jstring s, jobjectArray names, jlongArray handles) {\n+    const char* str = (*env)->GetStringUTFChars(env, s, NULL);\n+    jsize len = (*env)->GetArrayLength(env, handles);\n+    jlong *a = (*env)->GetLongArrayElements(env, handles, NULL);\n+    if (a == NULL)\n+        return -1;\n+    jsize nameLen = (*env)->GetArrayLength(env, names);\n+    if (nameLen != len) {\n+        throwDDlogException(env, \"number of names does not match number of values\");\n+        return -1;\n+    }\n+    ddlog_record** fields = malloc(len * sizeof(ddlog_record*));\n+    if (fields == NULL) {\n+        throwOutOfMemException(env, \"Could not allocate buffer for %d fields.\", len);\n+        return -1;\n+    }\n+    for (size_t i = 0; i < len; i++)\n+        fields[i] = (ddlog_record*)a[i];\n+\n+    const char** fieldNames = malloc(len * sizeof(char*));\n+    if (fieldNames == NULL) {\n+        free(fields);\n+        throwOutOfMemException(env, \"Could not allocate buffer for %d names.\", len);\n+        return -1;\n+    }\n+    for (size_t i = 0; i < len; i++) {\n+        jobject jname = (*env)->GetObjectArrayElement(env, names, i);\n+        if (jname == NULL) {\n+            free(fields);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7690c409fe48f867218bd0dbde76751df6a5da6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc3ODAyMg==", "bodyText": "This is also true for the code above that does not free str on error.", "url": "https://github.com/vmware/differential-datalog/pull/833#discussion_r533778022", "createdAt": "2020-12-01T22:57:00Z", "author": {"login": "ryzhyk"}, "path": "java/ddlogapi.c", "diffHunk": "@@ -792,6 +792,55 @@ JNIEXPORT jlong JNICALL Java_ddlogapi_DDlogAPI_ddlog_1struct(\n     return (jlong)result;\n }\n \n+JNIEXPORT jlong JNICALL Java_ddlogapi_DDlogAPI_ddlog_1named_1struct(\n+    JNIEnv *env, jclass obj, jstring s, jobjectArray names, jlongArray handles) {\n+    const char* str = (*env)->GetStringUTFChars(env, s, NULL);\n+    jsize len = (*env)->GetArrayLength(env, handles);\n+    jlong *a = (*env)->GetLongArrayElements(env, handles, NULL);\n+    if (a == NULL)\n+        return -1;\n+    jsize nameLen = (*env)->GetArrayLength(env, names);\n+    if (nameLen != len) {\n+        throwDDlogException(env, \"number of names does not match number of values\");\n+        return -1;\n+    }\n+    ddlog_record** fields = malloc(len * sizeof(ddlog_record*));\n+    if (fields == NULL) {\n+        throwOutOfMemException(env, \"Could not allocate buffer for %d fields.\", len);\n+        return -1;\n+    }\n+    for (size_t i = 0; i < len; i++)\n+        fields[i] = (ddlog_record*)a[i];\n+\n+    const char** fieldNames = malloc(len * sizeof(char*));\n+    if (fieldNames == NULL) {\n+        free(fields);\n+        throwOutOfMemException(env, \"Could not allocate buffer for %d names.\", len);\n+        return -1;\n+    }\n+    for (size_t i = 0; i < len; i++) {\n+        jobject jname = (*env)->GetObjectArrayElement(env, names, i);\n+        if (jname == NULL) {\n+            free(fields);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc3MDA5OQ=="}, "originalCommit": {"oid": "e7690c409fe48f867218bd0dbde76751df6a5da6"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTMzMDk1OnYy", "diffSide": "RIGHT", "path": "rust/template/ddlog.h", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMjowMDoxOFrOH9HU1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMjozOTo1NFrOH9IEjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg0NTIwNQ==", "bodyText": "Not  a good choice of name, imo.  This argument describes a change to apply to the value.  delta coule be a better name, but it's already used with a different meaning in this API. Perhaps patch?", "url": "https://github.com/vmware/differential-datalog/pull/833#discussion_r533845205", "createdAt": "2020-12-02T02:00:18Z", "author": {"login": "ryzhyk"}, "path": "rust/template/ddlog.h", "diffHunk": "@@ -1507,4 +1556,24 @@ extern ddlog_cmd* ddlog_delete_val_cmd(table_id table, ddlog_record *rec);\n  */\n extern ddlog_cmd* ddlog_delete_key_cmd(table_id table, ddlog_record *rec);\n \n+/*\n+ * Create a modify-by-key command.\n+ *\n+ * `table` - input table to delete from.\n+ * `key` - key to modify.  The function takes ownership of this record.\n+ * `values` - values to modify.  The function takes ownership of this record.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7690c409fe48f867218bd0dbde76751df6a5da6"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg1NzQyMQ==", "bodyText": "Or modification.", "url": "https://github.com/vmware/differential-datalog/pull/833#discussion_r533857421", "createdAt": "2020-12-02T02:39:54Z", "author": {"login": "lalithsuresh"}, "path": "rust/template/ddlog.h", "diffHunk": "@@ -1507,4 +1556,24 @@ extern ddlog_cmd* ddlog_delete_val_cmd(table_id table, ddlog_record *rec);\n  */\n extern ddlog_cmd* ddlog_delete_key_cmd(table_id table, ddlog_record *rec);\n \n+/*\n+ * Create a modify-by-key command.\n+ *\n+ * `table` - input table to delete from.\n+ * `key` - key to modify.  The function takes ownership of this record.\n+ * `values` - values to modify.  The function takes ownership of this record.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg0NTIwNQ=="}, "originalCommit": {"oid": "e7690c409fe48f867218bd0dbde76751df6a5da6"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTMzMzI3OnYy", "diffSide": "RIGHT", "path": "rust/template/differential_datalog/record.rs", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMjowMToxN1rOH9HWGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMjowMToxN1rOH9HWGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg0NTUyOQ==", "bodyText": "Actually, Rust is correct, you should probably use an iterator, not a range loop.  I would do that rather than disable the warning.", "url": "https://github.com/vmware/differential-datalog/pull/833#discussion_r533845529", "createdAt": "2020-12-02T02:01:17Z", "author": {"login": "ryzhyk"}, "path": "rust/template/differential_datalog/record.rs", "diffHunk": "@@ -1,6 +1,6 @@\n //! An untyped representation of DDlog values and database update commands.\n \n-#![allow(unknown_lints)]\n+#![allow(unknown_lints,clippy::needless_range_loop)]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7690c409fe48f867218bd0dbde76751df6a5da6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDMxNTQ0OnYy", "diffSide": "RIGHT", "path": "rust/template/differential_datalog/ddval/ddvalue.rs", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDo0MToyMVrOH-xlaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDo0MToyMVrOH-xlaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU4NjE1Mg==", "bodyText": "Looks like this PR somehow contains pieces of an unrelated earlier MR.", "url": "https://github.com/vmware/differential-datalog/pull/833#discussion_r535586152", "createdAt": "2020-12-03T20:41:21Z", "author": {"login": "ryzhyk"}, "path": "rust/template/differential_datalog/ddval/ddvalue.rs", "diffHunk": "@@ -97,39 +97,41 @@ impl Debug for DDValue {\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53e31f80d101bf61b44030ec1fdf8401ccfb5847"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTA3Nzc0OnYy", "diffSide": "RIGHT", "path": "rust/template/differential_datalog/record.rs", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjo1ODoxMFrOH-5BMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjo1ODoxMFrOH-5BMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwNzk1NQ==", "bodyText": "The underscore is needed here to avoid warnings for structs with no fields.", "url": "https://github.com/vmware/differential-datalog/pull/833#discussion_r535707955", "createdAt": "2020-12-03T22:58:10Z", "author": {"login": "ryzhyk"}, "path": "rust/template/differential_datalog/record.rs", "diffHunk": "@@ -1734,11 +1813,22 @@ macro_rules! decl_record_mutator_struct {\n         {\n             fn mutate(&self, _x: &mut $n<$($targ),*>) -> ::std::result::Result<(), String> {\n                 match self {\n-                    $crate::record::Record::PosStruct(..) => {\n-                        return ::std::result::Result::Err(format!(\"Cannot use positional struct as mutator\"));\n+                    $crate::record::Record::PosStruct(_, args) => {\n+                        let mut index = 0;\n+                        $(\n+                            if index == args.len() {\n+                                return ::std::result::Result::Err(format!(\"Positional struct mutator does not contain all elements\"));\n+                            };\n+                            let arg_upd = &args[index];\n+                            index = index + 1;\n+                            <dyn $crate::record::Mutator<$type>>::mutate(arg_upd, &mut _x.$arg)?;\n+                        )*\n+                        if index != args.len() {\n+                            return ::std::result::Result::Err(format!(\"Positional struct mutator has too many elements\"));\n+                        }\n                     },\n-                    $crate::record::Record::NamedStruct(_, _args) => {\n-                        $(if let Some(arg_upd) = $crate::record::arg_find(_args, stringify!($arg)) {\n+                    $crate::record::Record::NamedStruct(_, args) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53e31f80d101bf61b44030ec1fdf8401ccfb5847"}, "originalPosition": 138}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4678, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}