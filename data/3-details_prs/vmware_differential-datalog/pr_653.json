{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMDU4Mjgy", "number": 653, "title": "Add support for Inspect operator", "bodyText": "A new Inspect operator is introduced. Refer to\n#618.\nParsing, syntax, and validation has been updated to support this\nnew operator.\nUpdate compileRule logic to temporarily skip Inspect rule.\nA placeholder mkInspect function is added that currently only\ngenerates an empty string..", "createdAt": "2020-05-04T16:35:53Z", "url": "https://github.com/vmware/differential-datalog/pull/653", "merged": true, "mergeCommit": {"oid": "e73331d7b7996f2cdc197cf162cd9e39c2bff2ab"}, "closed": true, "closedAt": "2020-05-13T13:59:34Z", "author": {"login": "haroldlim"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceDybCAFqTQwNTIzNjI2OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgznu8gBqjMzMzA2NzIwODk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MjM2MjY5", "url": "https://github.com/vmware/differential-datalog/pull/653#pullrequestreview-405236269", "createdAt": "2020-05-04T18:24:16Z", "commit": {"oid": "640e388857e924be6fd16daf74bea49936daff27"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODoyNDoxNlrOGQMmWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODoyODowMlrOGQMvYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYzNjgyNA==", "bodyText": "The timestamp type is actually more complex.  For a non-recursive rule, the timestamp is indeed just u64. For a rule that is part of a recursive fragment, it is a pair of two timestamps: the global timestamp, which is the same as in the non-recursive case and the inner timestamp, which represents iteration of the fixed point computation.  There are two ways we can handle this. The RFC suggests:\ntypedef DDTimestamp = DDTSGlobal{epoch: u64}\n                    | DDTSNested{epoch: u64, iteration: u64}\n\nNow I am thinking that a better way would be to use different types depending on the context.  We can add a method to check if the rule is recursive and use the appropriate type based on that.", "url": "https://github.com/vmware/differential-datalog/pull/653#discussion_r419636824", "createdAt": "2020-05-04T18:24:16Z", "author": {"login": "ryzhyk"}, "path": "src/Language/DifferentialDatalog/NS.hs", "diffHunk": "@@ -147,6 +147,7 @@ ctxMVars d ctx =\n          CtxRuleRAtom rl i        -> ([], map f2mf $ ruleRHSVars d rl i)\n          CtxRuleRCond rl i        -> ([], map f2mf $ ruleRHSVars d rl i)\n          CtxRuleRFlatMap rl i     -> ([], map f2mf $ ruleRHSVars d rl i)\n+         CtxRuleRInspect rl i     -> ([], (map f2mf $ ruleRHSVars d rl i) ++ [(\"ddlog_weight\", Just $ tBit 64), (\"ddlog_timestamp\", Just $ tBit 64)])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "640e388857e924be6fd16daf74bea49936daff27"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYzOTEzOA==", "bodyText": "You may want to also test the use of timestamp and weight variables.", "url": "https://github.com/vmware/differential-datalog/pull/653#discussion_r419639138", "createdAt": "2020-05-04T18:28:02Z", "author": {"login": "ryzhyk"}, "path": "test/datalog_tests/simple2.dl", "diffHunk": "@@ -106,3 +106,15 @@ function weird_zero(x: 'A): usize {\n function zero_test(): usize {\n     weird_zero(32'd0)\n }\n+\n+/* See #618. New Inspect operator syntax. */\n+output relation InspectSimpleSum(x: bit<32>, total: bit<32>)\n+\n+input relation InputTuples(x: bit<32>, y: bit<32>)\n+\n+InspectSimpleSum(x, total) :-\n+    InputTuples(x, y),\n+    var total = Aggregate((x), group_sum(y)),\n+    Inspect {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "640e388857e924be6fd16daf74bea49936daff27"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "640e388857e924be6fd16daf74bea49936daff27", "author": {"user": null}, "url": "https://github.com/vmware/differential-datalog/commit/640e388857e924be6fd16daf74bea49936daff27", "committedDate": "2020-05-04T08:09:23Z", "message": "Add syntax support for Inspect\n\nA new Inspect operator is introduced. Refer to\nhttps://github.com/vmware/differential-datalog/issues/618.\n\nParsing, syntax, and validation has been updated to support this\nnew operator.\n\nUpdate compileRule logic to temporarily skip Inspect rule.\nA placeholder mkInspect function is added that currently only\ngenerates an empty string.."}, "afterCommit": {"oid": "24c0817f8767def33957067e62ea8312ca4f4c5f", "author": {"user": null}, "url": "https://github.com/vmware/differential-datalog/commit/24c0817f8767def33957067e62ea8312ca4f4c5f", "committedDate": "2020-05-05T21:22:53Z", "message": "Add syntax support for Inspect\n\nA new Inspect operator is introduced. Refer to\nhttps://github.com/vmware/differential-datalog/issues/618.\n\nParsing, syntax, and validation has been updated to support this\nnew operator.\n\nUpdate compileRule logic to temporarily skip Inspect rule.\nA placeholder mkInspect function is added that currently only\ngenerates an empty string.."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "24c0817f8767def33957067e62ea8312ca4f4c5f", "author": {"user": null}, "url": "https://github.com/vmware/differential-datalog/commit/24c0817f8767def33957067e62ea8312ca4f4c5f", "committedDate": "2020-05-05T21:22:53Z", "message": "Add syntax support for Inspect\n\nA new Inspect operator is introduced. Refer to\nhttps://github.com/vmware/differential-datalog/issues/618.\n\nParsing, syntax, and validation has been updated to support this\nnew operator.\n\nUpdate compileRule logic to temporarily skip Inspect rule.\nA placeholder mkInspect function is added that currently only\ngenerates an empty string.."}, "afterCommit": {"oid": "bb256d51931811407eb3600c0c8b6f9c696c9570", "author": {"user": null}, "url": "https://github.com/vmware/differential-datalog/commit/bb256d51931811407eb3600c0c8b6f9c696c9570", "committedDate": "2020-05-05T23:17:15Z", "message": "Add syntax support for Inspect\n\nA new Inspect operator is introduced. Refer to\nhttps://github.com/vmware/differential-datalog/issues/618.\n\nParsing, syntax, and validation has been updated to support this\nnew operator.\n\nUpdate compileRule logic to temporarily skip Inspect rule.\nA placeholder mkInspect function is added that currently only\ngenerates an empty string.."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c34fd1d7bfbcf5b5fb2f6665181ff47f7218a455", "author": {"user": null}, "url": "https://github.com/vmware/differential-datalog/commit/c34fd1d7bfbcf5b5fb2f6665181ff47f7218a455", "committedDate": "2020-05-07T10:35:48Z", "message": "Add Inspect operator compiler support for generating rust code\n\n1. Add a case in mkCollectionOperator for handling\n   RHSInspect.\n2. Add an mkFilterMap function that generates\n   rust code for filtering inputs before passing it to inspect.\n3. Add an mkInspect that generates rust code for the expression.\n4. Update rhsVarsAfter and add a case for Inspect, which does not\n   drop any variable (inspect does not modify the collection\n   it is inspecting).\n5. Update log function signature to return () instead of bool so\n   that it can be used in an Inspect operator.\n\nref: https://github.com/vmware/differential-datalog/issues/618"}, "afterCommit": {"oid": "9582ad07c620b71068dc29922285428a5b16d515", "author": {"user": null}, "url": "https://github.com/vmware/differential-datalog/commit/9582ad07c620b71068dc29922285428a5b16d515", "committedDate": "2020-05-07T22:31:30Z", "message": "Add Inspect operator compiler support for generating rust code\n\n1. Add a case in mkCollectionOperator for handling\n   RHSInspect.\n2. Add an mkFilterMap function that generates\n   rust code for filtering inputs before passing it to inspect.\n3. Add an mkInspect that generates rust code for the expression.\n4. Update rhsVarsAfter and add a case for Inspect, which does not\n   drop any variable (inspect does not modify the collection\n   it is inspecting).\n5. Update log function signature to return () instead of bool so\n   that it can be used in an Inspect operator.\n\nref: https://github.com/vmware/differential-datalog/issues/618"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9582ad07c620b71068dc29922285428a5b16d515", "author": {"user": null}, "url": "https://github.com/vmware/differential-datalog/commit/9582ad07c620b71068dc29922285428a5b16d515", "committedDate": "2020-05-07T22:31:30Z", "message": "Add Inspect operator compiler support for generating rust code\n\n1. Add a case in mkCollectionOperator for handling\n   RHSInspect.\n2. Add an mkFilterMap function that generates\n   rust code for filtering inputs before passing it to inspect.\n3. Add an mkInspect that generates rust code for the expression.\n4. Update rhsVarsAfter and add a case for Inspect, which does not\n   drop any variable (inspect does not modify the collection\n   it is inspecting).\n5. Update log function signature to return () instead of bool so\n   that it can be used in an Inspect operator.\n\nref: https://github.com/vmware/differential-datalog/issues/618"}, "afterCommit": {"oid": "022927c2764c7f1b81db032fc468c1ef40be5e05", "author": {"user": null}, "url": "https://github.com/vmware/differential-datalog/commit/022927c2764c7f1b81db032fc468c1ef40be5e05", "committedDate": "2020-05-08T00:01:15Z", "message": "Add Inspect operator compiler support for generating rust code\n\n1. Add a case in mkCollectionOperator for handling\n   RHSInspect.\n2. Add an mkFilterMap function that generates\n   rust code for filtering inputs before passing it to inspect.\n3. Add an mkInspect that generates rust code for the expression.\n4. Update rhsVarsAfter and add a case for Inspect, which does not\n   drop any variable (inspect does not modify the collection\n   it is inspecting).\n5. Update log function signature to return () instead of bool so\n   that it can be used in an Inspect operator.\n\nref: https://github.com/vmware/differential-datalog/issues/618"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "022927c2764c7f1b81db032fc468c1ef40be5e05", "author": {"user": null}, "url": "https://github.com/vmware/differential-datalog/commit/022927c2764c7f1b81db032fc468c1ef40be5e05", "committedDate": "2020-05-08T00:01:15Z", "message": "Add Inspect operator compiler support for generating rust code\n\n1. Add a case in mkCollectionOperator for handling\n   RHSInspect.\n2. Add an mkFilterMap function that generates\n   rust code for filtering inputs before passing it to inspect.\n3. Add an mkInspect that generates rust code for the expression.\n4. Update rhsVarsAfter and add a case for Inspect, which does not\n   drop any variable (inspect does not modify the collection\n   it is inspecting).\n5. Update log function signature to return () instead of bool so\n   that it can be used in an Inspect operator.\n\nref: https://github.com/vmware/differential-datalog/issues/618"}, "afterCommit": {"oid": "ea25f603527ee7b5087d753a293a1dc70c50739d", "author": {"user": null}, "url": "https://github.com/vmware/differential-datalog/commit/ea25f603527ee7b5087d753a293a1dc70c50739d", "committedDate": "2020-05-08T02:17:32Z", "message": "Add Inspect operator compiler support for generating rust code\n\n1. Add a case in mkCollectionOperator for handling\n   RHSInspect.\n2. Add an mkFilterMap function that generates\n   rust code for filtering inputs before passing it to inspect.\n3. Add an mkInspect that generates rust code for the expression.\n4. Update rhsVarsAfter and add a case for Inspect, which does not\n   drop any variable (inspect does not modify the collection\n   it is inspecting).\n5. Update log function signature to return () instead of bool so\n   that it can be used in an Inspect operator.\n\nref: https://github.com/vmware/differential-datalog/issues/618"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ea25f603527ee7b5087d753a293a1dc70c50739d", "author": {"user": null}, "url": "https://github.com/vmware/differential-datalog/commit/ea25f603527ee7b5087d753a293a1dc70c50739d", "committedDate": "2020-05-08T02:17:32Z", "message": "Add Inspect operator compiler support for generating rust code\n\n1. Add a case in mkCollectionOperator for handling\n   RHSInspect.\n2. Add an mkFilterMap function that generates\n   rust code for filtering inputs before passing it to inspect.\n3. Add an mkInspect that generates rust code for the expression.\n4. Update rhsVarsAfter and add a case for Inspect, which does not\n   drop any variable (inspect does not modify the collection\n   it is inspecting).\n5. Update log function signature to return () instead of bool so\n   that it can be used in an Inspect operator.\n\nref: https://github.com/vmware/differential-datalog/issues/618"}, "afterCommit": {"oid": "6f130f5110f4105bb3d400b14a5face0983d75cb", "author": {"user": null}, "url": "https://github.com/vmware/differential-datalog/commit/6f130f5110f4105bb3d400b14a5face0983d75cb", "committedDate": "2020-05-08T03:29:40Z", "message": "Add Inspect operator compiler support for generating rust code\n\n1. Add a case in mkCollectionOperator for handling\n   RHSInspect.\n2. Add an mkFilterMap function that generates\n   rust code for filtering inputs before passing it to inspect.\n3. Add an mkInspect that generates rust code for the expression.\n4. Update rhsVarsAfter and add a case for Inspect, which does not\n   drop any variable (inspect does not modify the collection\n   it is inspecting).\n5. Update log function signature to return () instead of bool so\n   that it can be used in an Inspect operator.\n\nref: https://github.com/vmware/differential-datalog/issues/618"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6f130f5110f4105bb3d400b14a5face0983d75cb", "author": {"user": null}, "url": "https://github.com/vmware/differential-datalog/commit/6f130f5110f4105bb3d400b14a5face0983d75cb", "committedDate": "2020-05-08T03:29:40Z", "message": "Add Inspect operator compiler support for generating rust code\n\n1. Add a case in mkCollectionOperator for handling\n   RHSInspect.\n2. Add an mkFilterMap function that generates\n   rust code for filtering inputs before passing it to inspect.\n3. Add an mkInspect that generates rust code for the expression.\n4. Update rhsVarsAfter and add a case for Inspect, which does not\n   drop any variable (inspect does not modify the collection\n   it is inspecting).\n5. Update log function signature to return () instead of bool so\n   that it can be used in an Inspect operator.\n\nref: https://github.com/vmware/differential-datalog/issues/618"}, "afterCommit": {"oid": "649ff3408a49b4ad776b811bb07fe38c78fd312b", "author": {"user": null}, "url": "https://github.com/vmware/differential-datalog/commit/649ff3408a49b4ad776b811bb07fe38c78fd312b", "committedDate": "2020-05-08T06:47:01Z", "message": "Update log function signature to return () instead of bool\n\nIn order to be able to use the log function with the Inspect\noperator, functions must return a ().\n\nNote that this is a breaking change. log function cannot\nbe directly used in the rule."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5213fac2ee9c3d3b032edeb2946dba1c0912303f", "author": {"user": null}, "url": "https://github.com/vmware/differential-datalog/commit/5213fac2ee9c3d3b032edeb2946dba1c0912303f", "committedDate": "2020-05-11T06:33:53Z", "message": "Add additional test cases for inspect operator\n\n1. Implement an inspect_log log extern function that logs messages\ninto a specified file.\n\n2. Existing and new test cases are added that covers Inspect used\nwith FlatMap, aggregation, filtered relations, and recursive rules.\n\n3. Spec.hs is updated to also verify log output if the corresponding\n   log.expected file is available. For log output verification,\n   the contents are sorted first before comparing since ordering\n   of log outputs are not guaranteed due to parallelism."}, "afterCommit": {"oid": "2a18a8609d3ba8e65fe9174a9e6336aefa7c53e3", "author": {"user": null}, "url": "https://github.com/vmware/differential-datalog/commit/2a18a8609d3ba8e65fe9174a9e6336aefa7c53e3", "committedDate": "2020-05-11T07:26:53Z", "message": "Add additional test cases for inspect operator\n\n1. Implement an inspect_log log extern function that logs messages\ninto a specified file.\n\n2. Existing and new test cases are added that covers Inspect used\nwith FlatMap, aggregation, filtered relations, and recursive rules.\n\n3. Spec.hs is updated to also verify log output if the corresponding\n   log.expected file is available. For log output verification,\n   the contents are sorted first before comparing since ordering\n   of log outputs are not guaranteed due to parallelism."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MzgxNzAw", "url": "https://github.com/vmware/differential-datalog/pull/653#pullrequestreview-409381700", "createdAt": "2020-05-11T17:31:14Z", "commit": {"oid": "f2f82fd1313d636602385ca70f895a47e453f5cf"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzozMToxNFrOGTmRgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzo0NDo0MFrOGTmvoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwMzIwMw==", "bodyText": "We need to provide a string conversion function for this type so that timestamps can be easily printed. The function must have the following signature: dDTimestamp2string(ts: DDTimestamp): string", "url": "https://github.com/vmware/differential-datalog/pull/653#discussion_r423203203", "createdAt": "2020-05-11T17:31:14Z", "author": {"login": "ryzhyk"}, "path": "lib/std.dl", "diffHunk": "@@ -19,6 +19,12 @@ typedef s128 = signed<128>\n \n typedef usize = u64\n \n+typedef DDWeight = s64\n+typedef DDEpoch = u64\n+typedef DDIteration = u64\n+typedef DDTimestamp = DDTSGlobal{epoch: DDEpoch}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2f82fd1313d636602385ca70f895a47e453f5cf"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxMDE4NQ==", "bodyText": "The last three must occur after all atoms. - I don't remember when I wrote this, but this comment is wrong and must be removed.", "url": "https://github.com/vmware/differential-datalog/pull/653#discussion_r423210185", "createdAt": "2020-05-11T17:43:25Z", "author": {"login": "ryzhyk"}, "path": "src/Language/DifferentialDatalog/Syntax.hs", "diffHunk": "@@ -521,13 +521,14 @@ instance Show Atom where\n     show = render . pp\n \n -- The RHS of a rule consists of relational atoms with\n--- positive/negative polarity, Boolean conditions, aggregation and\n--- disaggregation (flatmap) operations.  The last two must occur after\n+-- positive/negative polarity, Boolean conditions, aggregation,\n+-- disaggregation (flatmap), inspect operations.  The last three must occur after\n -- all atoms.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2f82fd1313d636602385ca70f895a47e453f5cf"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxMDkxMg==", "bodyText": "Nice!", "url": "https://github.com/vmware/differential-datalog/pull/653#discussion_r423210912", "createdAt": "2020-05-11T17:44:40Z", "author": {"login": "ryzhyk"}, "path": "test/Spec.hs", "diffHunk": "@@ -74,41 +74,56 @@ allTests progress = do\n         let datFile = replaceExtension dlFile \"dat\"\n         -- If there's a gzipped reference file, use that\n         let gzFile = replaceExtension dlFile \"dump.expected.gz\"\n+        -- If there's a .log.expected file, also verify log output", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2f82fd1313d636602385ca70f895a47e453f5cf"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f2f82fd1313d636602385ca70f895a47e453f5cf", "author": {"user": null}, "url": "https://github.com/vmware/differential-datalog/commit/f2f82fd1313d636602385ca70f895a47e453f5cf", "committedDate": "2020-05-11T16:20:27Z", "message": "Update documentation with description of the Inspect operator"}, "afterCommit": {"oid": "76227647ded547bbdb95eda45aa77c1c961d1477", "author": {"user": null}, "url": "https://github.com/vmware/differential-datalog/commit/76227647ded547bbdb95eda45aa77c1c961d1477", "committedDate": "2020-05-11T20:33:14Z", "message": "Update documentation with description of the Inspect operator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "76227647ded547bbdb95eda45aa77c1c961d1477", "author": {"user": null}, "url": "https://github.com/vmware/differential-datalog/commit/76227647ded547bbdb95eda45aa77c1c961d1477", "committedDate": "2020-05-11T20:33:14Z", "message": "Update documentation with description of the Inspect operator"}, "afterCommit": {"oid": "b3e4112597db8d47803233430ca952093d13f4f4", "author": {"user": null}, "url": "https://github.com/vmware/differential-datalog/commit/b3e4112597db8d47803233430ca952093d13f4f4", "committedDate": "2020-05-11T21:26:20Z", "message": "Update documentation with description of the Inspect operator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b3e4112597db8d47803233430ca952093d13f4f4", "author": {"user": null}, "url": "https://github.com/vmware/differential-datalog/commit/b3e4112597db8d47803233430ca952093d13f4f4", "committedDate": "2020-05-11T21:26:20Z", "message": "Update documentation with description of the Inspect operator"}, "afterCommit": {"oid": "e51af33ee2e75ca32bb4f13b8530d07b95f5de63", "author": {"user": null}, "url": "https://github.com/vmware/differential-datalog/commit/e51af33ee2e75ca32bb4f13b8530d07b95f5de63", "committedDate": "2020-05-11T22:54:37Z", "message": "Update documentation with description of the Inspect operator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10196b0f231c7a1474aca9546c2f54d30daa7fed", "author": {"user": null}, "url": "https://github.com/vmware/differential-datalog/commit/10196b0f231c7a1474aca9546c2f54d30daa7fed", "committedDate": "2020-05-13T06:58:01Z", "message": "Add syntax support for Inspect\n\nA new Inspect operator is introduced. Refer to\nhttps://github.com/vmware/differential-datalog/issues/618.\n\nParsing, syntax, and validation has been updated to support this\nnew operator.\n\nUpdate compileRule logic to temporarily skip Inspect rule.\nA placeholder mkInspect function is added that currently only\ngenerates an empty string.."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe5532ab08235be75b6c54bd33926d547efdad17", "author": {"user": {"login": "yjiayu", "name": "Jiayu Yu"}}, "url": "https://github.com/vmware/differential-datalog/commit/fe5532ab08235be75b6c54bd33926d547efdad17", "committedDate": "2020-05-13T06:58:01Z", "message": "Add support for inspect operator in rust runtime.\n\nref: https://github.com/vmware/differential-datalog/issues/618"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "557704f3b8e82cbb2598d49603e1381374ce6854", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/557704f3b8e82cbb2598d49603e1381374ce6854", "committedDate": "2020-05-13T06:58:01Z", "message": "Fixup the use of `ifun`.\n\n- Introduce a trait for timestamps that can be converted to a tuple.\n- Implement this trait for both `TS` and `Product<TS, TSNested>`.\n- Use it to invoke the same `ifun` in both nested and top-level\n  contexts."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d47a97b3ac0fdf8ee91b3145ab1cf10a0cb9f52", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/0d47a97b3ac0fdf8ee91b3145ab1cf10a0cb9f52", "committedDate": "2020-05-13T06:58:01Z", "message": "Formatting."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfbe7f8af76412046de275f552099870242a40b7", "author": {"user": null}, "url": "https://github.com/vmware/differential-datalog/commit/bfbe7f8af76412046de275f552099870242a40b7", "committedDate": "2020-05-13T06:58:01Z", "message": "Add Inspect operator compiler support for generating rust code\n\n1. Add a case in mkCollectionOperator for handling\n   RHSInspect.\n2. Add an mkFilterMap function that generates\n   rust code for filtering inputs before passing it to inspect.\n3. Add an mkInspect that generates rust code for the expression.\n4. Update rhsVarsAfter and add a case for Inspect, which does not\n   drop any variable (inspect does not modify the collection\n   it is inspecting).\n\nref: https://github.com/vmware/differential-datalog/issues/618"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2416417575f76d21fd48a00b74daa132c058c67", "author": {"user": null}, "url": "https://github.com/vmware/differential-datalog/commit/c2416417575f76d21fd48a00b74daa132c058c67", "committedDate": "2020-05-13T06:58:01Z", "message": "Update log function signature to return () instead of bool\n\nIn order to be able to use the log function with the Inspect\noperator, functions must return a ().\n\nNote that this is a breaking change. log function cannot\nbe directly used in the rule."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34d19d09cfb87f21b1ae92110371ff9cff1a413b", "author": {"user": null}, "url": "https://github.com/vmware/differential-datalog/commit/34d19d09cfb87f21b1ae92110371ff9cff1a413b", "committedDate": "2020-05-13T06:58:01Z", "message": "Fix rhsVarsAfter function condition for RHSInspect\n\nThe function was incorrectly returning all variables visible\nafter this term, instead of all variables used after this term."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15803d41c164f36178a31c0e57cb58453e3f57a0", "author": {"user": null}, "url": "https://github.com/vmware/differential-datalog/commit/15803d41c164f36178a31c0e57cb58453e3f57a0", "committedDate": "2020-05-13T06:58:01Z", "message": "Add additional test cases for inspect operator\n\n1. Implement an inspect_log log extern function that logs messages\ninto a specified file.\n\n2. Existing and new test cases are added that covers Inspect used\nwith FlatMap, aggregation, filtered relations, and recursive rules.\n\n3. Spec.hs is updated to also verify log output if the corresponding\n   log.expected file is available. For log output verification,\n   the contents are sorted first before comparing since ordering\n   of log outputs are not guaranteed due to parallelism."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85169275b676cdc47c9610306d358eadff380e26", "author": {"user": null}, "url": "https://github.com/vmware/differential-datalog/commit/85169275b676cdc47c9610306d358eadff380e26", "committedDate": "2020-05-13T06:58:01Z", "message": "Update documentation with description of the Inspect operator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c536ddf9a74243e10a1278affcfd54edde682e9", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/0c536ddf9a74243e10a1278affcfd54edde682e9", "committedDate": "2020-05-13T06:58:02Z", "message": "Automatic string conversion for nested timestamps.\n\nRe-define nested timestamp as a struct instead of a tuple and provide a\n`2string` function for it, so that we can print timestamps like this:\n\n```\n\"${ddlog_timestamp}\"\n```\n\ninstead of\n\n```\n\"${ddlog_timestamp.0},${ddlog_timestamp.1}\"\n```"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "799b1101582c2d2378eeb1c1957f48b17602c481", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/799b1101582c2d2378eeb1c1957f48b17602c481", "committedDate": "2020-05-13T06:58:02Z", "message": "Tutorial section on Inspect."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96b342bb89ec75c3bd2949687704eb5da3077aec", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/96b342bb89ec75c3bd2949687704eb5da3077aec", "committedDate": "2020-05-13T07:15:15Z", "message": "Fix rebase regression.\n\nThis branch did not pickup an important fix in master that assigns the\nsame timestamp ti all updates made within a transaction."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8352e4103616a9cec877814debe9f319d9873bd1", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/8352e4103616a9cec877814debe9f319d9873bd1", "committedDate": "2020-05-13T06:47:12Z", "message": "Tutorial section on Inspect."}, "afterCommit": {"oid": "96b342bb89ec75c3bd2949687704eb5da3077aec", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/96b342bb89ec75c3bd2949687704eb5da3077aec", "committedDate": "2020-05-13T07:15:15Z", "message": "Fix rebase regression.\n\nThis branch did not pickup an important fix in master that assigns the\nsame timestamp ti all updates made within a transaction."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4521, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}