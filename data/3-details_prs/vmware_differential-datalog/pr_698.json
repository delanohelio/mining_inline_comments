{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2NTI2MzMw", "number": 698, "title": "Add debug parser for the dump event file", "bodyText": "", "createdAt": "2020-07-08T22:58:30Z", "url": "https://github.com/vmware/differential-datalog/pull/698", "merged": true, "mergeCommit": {"oid": "d99c12185be0979f317da0a0ec36660bf1f8a7e1"}, "closed": true, "closedAt": "2020-07-10T01:20:37Z", "author": {"login": "yjiayu"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcysSehAH2gAyNDQ2NTI2MzMwOmM0OTgzZjY4NjNmYTJiYzQxZWIzYjUyY2E4YzVmZTIxMjhmNGNmNmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABczVivFABqjM1MzE0MzY3MjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c4983f6863fa2bc41eb3b52ca8c5fe2128f4cf6a", "author": {"user": {"login": "yjiayu", "name": "Jiayu Yu"}}, "url": "https://github.com/vmware/differential-datalog/commit/c4983f6863fa2bc41eb3b52ca8c5fe2128f4cf6a", "committedDate": "2020-07-07T20:58:18Z", "message": "Fix lint warnings."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1NzM5MDE2", "url": "https://github.com/vmware/differential-datalog/pull/698#pullrequestreview-445739016", "createdAt": "2020-07-09T15:39:33Z", "commit": {"oid": "d9616762b03907fb5a237e4f8f4ecb124a47abd6"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTozOTozM1rOGvW4yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjoyMTozNlrOGvYiMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMxMTI0Mw==", "bodyText": "We'll need to figure out how to run the parser in a streaming mode as we parse large files.  But for testing, this is ok.", "url": "https://github.com/vmware/differential-datalog/pull/698#discussion_r452311243", "createdAt": "2020-07-09T15:39:33Z", "author": {"login": "ryzhyk"}, "path": "debugger/Main.hs", "diffHunk": "@@ -0,0 +1,39 @@\n+{-\n+Copyright (c) 2018-2020 VMware, Inc.\n+SPDX-License-Identifier: MIT\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in all\n+copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+SOFTWARE.\n+-}\n+\n+import Language.DifferentialDatalog.Debugger.DebugEventParser\n+import Text.Parsec\n+import System.Environment\n+\n+parseText :: String -> String", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9616762b03907fb5a237e4f8f4ecb124a47abd6"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMxNDM1Mg==", "bodyText": "If we only have one CollectionType, there's no point in having it at all. Let's just remove this attribute from ArrayRecord.", "url": "https://github.com/vmware/differential-datalog/pull/698#discussion_r452314352", "createdAt": "2020-07-09T15:44:04Z", "author": {"login": "ryzhyk"}, "path": "src/Language/DifferentialDatalog/Debugger/DebugEventParser.hs", "diffHunk": "@@ -0,0 +1,160 @@\n+{-\n+Copyright (c) 2018-2020 VMware, Inc.\n+SPDX-License-Identifier: MIT\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in all\n+copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+SOFTWARE.\n+-}\n+\n+module Language.DifferentialDatalog.Debugger.DebugEventParser (\n+    eventsParser) where\n+\n+import qualified Text.Parsec.Token as T\n+import Text.Parsec\n+import Text.Parsec.Language\n+import Data.Functor.Identity\n+\n+data CollectionType  = Vector deriving (Show)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9616762b03907fb5a237e4f8f4ecb124a47abd6"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMxNTQ0Ng==", "bodyText": "I don't think you need to introduce a new type here.  Just use [Event] wherever you need this type.", "url": "https://github.com/vmware/differential-datalog/pull/698#discussion_r452315446", "createdAt": "2020-07-09T15:45:33Z", "author": {"login": "ryzhyk"}, "path": "src/Language/DifferentialDatalog/Debugger/DebugEventParser.hs", "diffHunk": "@@ -0,0 +1,160 @@\n+{-\n+Copyright (c) 2018-2020 VMware, Inc.\n+SPDX-License-Identifier: MIT\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in all\n+copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+SOFTWARE.\n+-}\n+\n+module Language.DifferentialDatalog.Debugger.DebugEventParser (\n+    eventsParser) where\n+\n+import qualified Text.Parsec.Token as T\n+import Text.Parsec\n+import Text.Parsec.Language\n+import Data.Functor.Identity\n+\n+data CollectionType  = Vector deriving (Show)\n+data Operator = OpMap | OpAggregate | OpCondition | OpJoin\n+                | OpAntijoin | OpInspect | OpUndefined deriving (Show)\n+\n+data Events = Events { events :: [Event]} deriving (Show)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9616762b03907fb5a237e4f8f4ecb124a47abd6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMxNjg4MQ==", "bodyText": "For operatorId, on the other hand, it will actually be useful to have a type, e.g.,:\ndata OperatorId = OperatorId {opRelId:: Int, opRule::Int, opOperaror::Int}\n(also, you Int should be sufficient here, no need for Integer).", "url": "https://github.com/vmware/differential-datalog/pull/698#discussion_r452316881", "createdAt": "2020-07-09T15:47:44Z", "author": {"login": "ryzhyk"}, "path": "src/Language/DifferentialDatalog/Debugger/DebugEventParser.hs", "diffHunk": "@@ -0,0 +1,160 @@\n+{-\n+Copyright (c) 2018-2020 VMware, Inc.\n+SPDX-License-Identifier: MIT\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in all\n+copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+SOFTWARE.\n+-}\n+\n+module Language.DifferentialDatalog.Debugger.DebugEventParser (\n+    eventsParser) where\n+\n+import qualified Text.Parsec.Token as T\n+import Text.Parsec\n+import Text.Parsec.Language\n+import Data.Functor.Identity\n+\n+data CollectionType  = Vector deriving (Show)\n+data Operator = OpMap | OpAggregate | OpCondition | OpJoin\n+                | OpAntijoin | OpInspect | OpUndefined deriving (Show)\n+\n+data Events = Events { events :: [Event]} deriving (Show)\n+\n+data Event = DebugEvent { operatorId :: (Integer, Integer, Integer)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9616762b03907fb5a237e4f8f4ecb124a47abd6"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMxNzUxMA==", "bodyText": "Int should be enough for weight.", "url": "https://github.com/vmware/differential-datalog/pull/698#discussion_r452317510", "createdAt": "2020-07-09T15:48:44Z", "author": {"login": "ryzhyk"}, "path": "src/Language/DifferentialDatalog/Debugger/DebugEventParser.hs", "diffHunk": "@@ -0,0 +1,160 @@\n+{-\n+Copyright (c) 2018-2020 VMware, Inc.\n+SPDX-License-Identifier: MIT\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in all\n+copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+SOFTWARE.\n+-}\n+\n+module Language.DifferentialDatalog.Debugger.DebugEventParser (\n+    eventsParser) where\n+\n+import qualified Text.Parsec.Token as T\n+import Text.Parsec\n+import Text.Parsec.Language\n+import Data.Functor.Identity\n+\n+data CollectionType  = Vector deriving (Show)\n+data Operator = OpMap | OpAggregate | OpCondition | OpJoin\n+                | OpAntijoin | OpInspect | OpUndefined deriving (Show)\n+\n+data Events = Events { events :: [Event]} deriving (Show)\n+\n+data Event = DebugEvent { operatorId :: (Integer, Integer, Integer)\n+                         , weight :: Integer\n+                         , timestamp :: Integer\n+                         , operator :: Operator\n+                         , input :: Record\n+                         , output :: Record\n+                         }\n+            | DebugJoinEvent { operatorId :: (Integer, Integer, Integer)\n+                                  , weight :: Integer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9616762b03907fb5a237e4f8f4ecb124a47abd6"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyNDk5Ng==", "bodyText": "Unfortunately, all field names in Haskell are functions in the global namespace, so fields like weight and timestamp will likely introduce name clashes.  I therefore use qualified field names like evtWeight, evtTimestamp, etc.", "url": "https://github.com/vmware/differential-datalog/pull/698#discussion_r452324996", "createdAt": "2020-07-09T16:00:15Z", "author": {"login": "ryzhyk"}, "path": "src/Language/DifferentialDatalog/Debugger/DebugEventParser.hs", "diffHunk": "@@ -0,0 +1,160 @@\n+{-\n+Copyright (c) 2018-2020 VMware, Inc.\n+SPDX-License-Identifier: MIT\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in all\n+copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+SOFTWARE.\n+-}\n+\n+module Language.DifferentialDatalog.Debugger.DebugEventParser (\n+    eventsParser) where\n+\n+import qualified Text.Parsec.Token as T\n+import Text.Parsec\n+import Text.Parsec.Language\n+import Data.Functor.Identity\n+\n+data CollectionType  = Vector deriving (Show)\n+data Operator = OpMap | OpAggregate | OpCondition | OpJoin\n+                | OpAntijoin | OpInspect | OpUndefined deriving (Show)\n+\n+data Events = Events { events :: [Event]} deriving (Show)\n+\n+data Event = DebugEvent { operatorId :: (Integer, Integer, Integer)\n+                         , weight :: Integer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9616762b03907fb5a237e4f8f4ecb124a47abd6"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzODIyNQ==", "bodyText": "Parsec does not do lookahead automatically, so this rule will always run debugEvenParser, which will successfully consume the first few fields, and then fail if this is a join event. Try this approach instead:\ndebugEventParser = do\n    opid <- parens ((,,) <$> (decimal <* comma) <*> (decimal <* comma) <*> decimal)\n    w <- comma *> decimal\n    ts <- comma *> decimal <* comma\n    op <- operatorParser\n    case op of\n             OpJoin -> ... -- parse three records\n                              return DebugJoinEvent{ ....}\n             _ ->  ... -- parse two records\n                     return DebugEvent{ ...}", "url": "https://github.com/vmware/differential-datalog/pull/698#discussion_r452338225", "createdAt": "2020-07-09T16:21:36Z", "author": {"login": "ryzhyk"}, "path": "src/Language/DifferentialDatalog/Debugger/DebugEventParser.hs", "diffHunk": "@@ -0,0 +1,160 @@\n+{-\n+Copyright (c) 2018-2020 VMware, Inc.\n+SPDX-License-Identifier: MIT\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in all\n+copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+SOFTWARE.\n+-}\n+\n+module Language.DifferentialDatalog.Debugger.DebugEventParser (\n+    eventsParser) where\n+\n+import qualified Text.Parsec.Token as T\n+import Text.Parsec\n+import Text.Parsec.Language\n+import Data.Functor.Identity\n+\n+data CollectionType  = Vector deriving (Show)\n+data Operator = OpMap | OpAggregate | OpCondition | OpJoin\n+                | OpAntijoin | OpInspect | OpUndefined deriving (Show)\n+\n+data Events = Events { events :: [Event]} deriving (Show)\n+\n+data Event = DebugEvent { operatorId :: (Integer, Integer, Integer)\n+                         , weight :: Integer\n+                         , timestamp :: Integer\n+                         , operator :: Operator\n+                         , input :: Record\n+                         , output :: Record\n+                         }\n+            | DebugJoinEvent { operatorId :: (Integer, Integer, Integer)\n+                                  , weight :: Integer\n+                                  , timestamp :: Integer\n+                                  , operator :: Operator\n+                                  , input1 :: Record\n+                                  , input2 :: Record\n+                                  , output :: Record\n+                                  }\n+            deriving (Show)\n+\n+data Record = IntRecord {intVal :: Integer}\n+            | BoolRecord {boolVal :: Bool}\n+            | DoubleRecord {doubleVal :: Double}\n+            | StringRecord {stringVal :: String}\n+            | NamedStructRecord {name :: String, val :: [(String, Record)]}\n+            | TupleRecord {tupleVal :: [Record]}\n+            | ArrayRecord {collectionKind :: CollectionType, arrayVal :: [Record]}\n+            deriving (Show)\n+\n+\n+debugDef :: GenLanguageDef String u Data.Functor.Identity.Identity\n+debugDef = emptyDef { T.identStart        = alphaNum\n+                    , T.identLetter       = alphaNum\n+                    , T.caseSensitive     = True}\n+\n+identifier :: ParsecT String u Identity String\n+identifier   = T.identifier lexer\n+\n+lexer :: T.GenTokenParser String u Data.Functor.Identity.Identity\n+lexer   = T.makeTokenParser debugDef\n+\n+commaSep :: ParsecT String u Identity a -> ParsecT String u Identity [a]\n+commaSep     = T.commaSep lexer\n+\n+symbol :: String -> ParsecT String u Identity String\n+symbol       = try . T.symbol lexer\n+\n+comma :: ParsecT String u Identity String\n+comma        = T.comma lexer\n+\n+braces :: ParsecT String u Identity a -> ParsecT String u Identity a\n+braces       = T.braces lexer\n+\n+parens :: ParsecT String u Identity a -> ParsecT String u Identity a\n+parens       = T.parens lexer\n+\n+brackets :: ParsecT String u Identity a -> ParsecT String u Identity a\n+brackets     = T.brackets lexer\n+\n+decimal :: ParsecT String u Identity Integer\n+decimal      = T.decimal lexer\n+\n+double :: ParsecT String u Identity Double\n+double       = T.float lexer\n+\n+dot :: ParsecT String u Identity String\n+dot          = T.dot lexer\n+\n+stringLit :: ParsecT String u Identity String\n+stringLit    = T.stringLiteral lexer\n+\n+\n+operatorParser :: ParsecT String u Identity Operator\n+operatorParser = do\n+                    op <- identifier\n+                    case op of\n+                        \"Map\" -> return OpMap\n+                        \"Aggregate\" -> return OpAggregate\n+                        \"Condition\" -> return OpCondition\n+                        \"Join\" -> return OpJoin\n+                        \"Antijoin\" -> return OpAntijoin\n+                        \"Inspect\" -> return OpInspect\n+                        _ -> return  OpUndefined\n+\n+\n+intParser :: ParsecT String u Identity Record\n+intParser = IntRecord <$> decimal\n+\n+boolParser :: ParsecT String u Identity Record\n+boolParser = BoolRecord <$> ((symbol \"true\" >> return True)\n+                              <|> (symbol \"false\" >> return False))\n+\n+doubleParser :: ParsecT String u Identity Record\n+doubleParser = DoubleRecord <$> double\n+\n+stringParser :: ParsecT String u Identity Record\n+stringParser = StringRecord <$> stringLit\n+\n+namedStructParser :: ParsecT String u Identity Record\n+namedStructParser = NamedStructRecord <$> identifier <*> (braces (commaSep ((,) <$> (dot *> identifier) <*> (symbol \"=\" *> recordParser))))\n+\n+tupleParser :: ParsecT String u Identity Record\n+tupleParser = parens (TupleRecord <$> (commaSep recordParser))\n+\n+arrayParser :: ParsecT String u Identity Record\n+arrayParser =  brackets (ArrayRecord Vector <$> (commaSep recordParser))\n+\n+recordParser :: ParsecT String u Identity Record\n+recordParser = try (doubleParser) <|>boolParser <|> intParser <|> stringParser\n+               <|> namedStructParser <|> tupleParser <|> arrayParser\n+\n+debugEventParser :: ParsecT String u Identity Event\n+debugEventParser = DebugEvent <$> parens ((,,) <$> (decimal <* comma) <*> (decimal <* comma) <*> decimal)\n+                              <*> (comma *> decimal) <*> (comma *> decimal) <*> (comma *> operatorParser)\n+                              <*> (comma *> recordParser) <*> (comma *> recordParser)\n+\n+debugJoinEventParser :: ParsecT String u Identity Event\n+debugJoinEventParser = DebugJoinEvent <$> parens ((,,) <$> (decimal <* comma) <*> (decimal <* comma) <*> decimal)\n+                              <*> (comma *> decimal) <*> (comma *> decimal) <*> (comma *> operatorParser)\n+                              <*> (comma *> recordParser) <*> (comma *> recordParser) <*> (comma *> recordParser)\n+\n+eventParser :: ParsecT String u Identity Event\n+eventParser = debugEventParser <|> debugJoinEventParser", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9616762b03907fb5a237e4f8f4ecb124a47abd6"}, "originalPosition": 157}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3076761ab0a578c813878cbc81d3f4a9223e24a1", "author": {"user": {"login": "yjiayu", "name": "Jiayu Yu"}}, "url": "https://github.com/vmware/differential-datalog/commit/3076761ab0a578c813878cbc81d3f4a9223e24a1", "committedDate": "2020-07-09T21:01:19Z", "message": "Parse record from debugger dumped file\n\n- Parse the dumped file into memory according to\nhttps://github.com/vmware/differential-datalog/issues/680\n- Add debugger/Main.hs as entry for debugger binary"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d9616762b03907fb5a237e4f8f4ecb124a47abd6", "author": {"user": {"login": "yjiayu", "name": "Jiayu Yu"}}, "url": "https://github.com/vmware/differential-datalog/commit/d9616762b03907fb5a237e4f8f4ecb124a47abd6", "committedDate": "2020-07-08T21:45:45Z", "message": "Parse record from debugger dumped file\n\n- Parse the dumped file into memory according to\nhttps://github.com/vmware/differential-datalog/issues/680\n- Add debugger/Main.hs as entry for debugger binary"}, "afterCommit": {"oid": "3076761ab0a578c813878cbc81d3f4a9223e24a1", "author": {"user": {"login": "yjiayu", "name": "Jiayu Yu"}}, "url": "https://github.com/vmware/differential-datalog/commit/3076761ab0a578c813878cbc81d3f4a9223e24a1", "committedDate": "2020-07-09T21:01:19Z", "message": "Parse record from debugger dumped file\n\n- Parse the dumped file into memory according to\nhttps://github.com/vmware/differential-datalog/issues/680\n- Add debugger/Main.hs as entry for debugger binary"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4558, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}