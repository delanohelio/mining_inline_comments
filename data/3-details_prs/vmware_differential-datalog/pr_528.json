{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NDg4MjQx", "number": 528, "title": "JSON support", "bodyText": "Infrastructure to serialize/deserialize DDlog types from JSON.  Please see individual commit messages for details.", "createdAt": "2020-02-20T00:46:13Z", "url": "https://github.com/vmware/differential-datalog/pull/528", "merged": true, "mergeCommit": {"oid": "21454d01450c4dde98a11c79a880b428b1107fc9"}, "closed": true, "closedAt": "2020-02-20T04:22:45Z", "author": {"login": "ryzhyk"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFdWDHAH2gAyMzc3NDg4MjQxOjE5YjFiZjAyZmY2Yzk0ZmVlMGRmYmQwMzg5NmRhYTNhMjg5ODY2YjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGCn1igBqjMwNTQyNDE1NTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "19b1bf02ff6c94fee0dfbd03896daa3a289866b3", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/19b1bf02ff6c94fee0dfbd03896daa3a289866b3", "committedDate": "2020-02-18T08:07:02Z", "message": "Compile.hs: Generate code for type ascriptions.\n\nRust does not allow type ascriptions in arbitrary contexts; we therefore\nused to skip type annotations, except in LHS of an assignment, relying on\nRust's type inference to do the work.  This does not work when expression\ntype cannot be inferred without explicit annotation, e.g.:\n\n```\nto_json_string(from_json_string(boolStruct1()): Result<BoolStruct, string>)\n```\n\nThis commit implements a simple workaround: we compile `e: t` into\n`{let __typed: t = e; t}`."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48c20aa66dd077c5d61097e49560a46f69baa606", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/48c20aa66dd077c5d61097e49560a46f69baa606", "committedDate": "2020-02-18T19:12:20Z", "message": "std.rs: (De)Serialize implementations for container types.\n\nWe used to auto-derive `Serialize` and `Deserialize` traits for `Vec`,\n`Set`, and `Map`.  This automatic implementation wraps the inner\ncontainer type into additional struct (`std_Vec`, `std_Set`, `std_Map`).\nThis introduces unnecessary overhead and confuss JSON converter logic.\n\nThis commit replaces these with manual implementations of both traits that\nsimply forwards `serialize`/`deserialize` methods to the inner Rust type\n(`Vec`, `BTreeSet`, `BTreeMap`)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb8ab0f7d8bc6b9af1aa09b9d83658ff264a15be", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/eb8ab0f7d8bc6b9af1aa09b9d83658ff264a15be", "committedDate": "2020-02-19T18:42:24Z", "message": "`#[rust]` attribute for types, constructors, fields.\n\nWe introduce a new attribute that is passed directly to the Rust\ncompiler.  The value of the attribute is any valid attribute supported\nby Rust for the same kind of entity.\n\nThis attribute is currently only supported for `typedef` declarations,\nfor individual constructors of types with multiple constructors, and\nto constructor arguments.\n\nFor example, the following declaration:\n\n```\ntypedef TaggedEnum = #[rust=\"serde(rename = \\\"t.V1\\\")\"]\n                     TVariant1 { b: bool }\n                   | #[rust=\"serde(rename = \\\"t.V2\\\")\"]\n                     TVariant2 { u: u32 }\n```\n\ngets compiled to:\n\n```\npub enum json_test_TaggedEnum {\n    #[serde(rename = \"t.V1\")]\n    json_test_TVariant1 {\n        b: bool\n    },\n    #[serde(rename = \"t.V2\")]\n    json_test_TVariant2 {\n        u: std_u32\n    }\n}\n```"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNTc3MzA0", "url": "https://github.com/vmware/differential-datalog/pull/528#pullrequestreview-361577304", "createdAt": "2020-02-20T01:22:34Z", "commit": {"oid": "d2730be320e92579893d6d3a5b154e6689bdf4ed"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMToyMjozNFrOFr9pcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMTozMDowOFrOFr97lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY0MzEyMw==", "bodyText": "This Look like it could use a little helper function.", "url": "https://github.com/vmware/differential-datalog/pull/528#discussion_r381643123", "createdAt": "2020-02-20T01:22:34Z", "author": {"login": "mbudiu-vmw"}, "path": "test/datalog_tests/json_test.dl", "diffHunk": "@@ -0,0 +1,107 @@\n+import json\n+\n+output relation JsonTest(description: string, value: string)\n+\n+\n+typedef BoolStruct = BoolStruct {\n+    b: bool\n+}\n+\n+function boolStruct1(): string = [|{\"b\":true}|]\n+function boolStruct2(): string = [|{\"b\":true, \"foo\":\"bar\"}|]\n+function boolStruct3(): string = [|{\"foo\":\"bar\"}|]\n+\n+JsonTest(boolStruct1(),\n+         result_unwrap_or_default(to_json_string(from_json_string(boolStruct1()): Result<BoolStruct, string>))).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2730be320e92579893d6d3a5b154e6689bdf4ed"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY0Nzc2NA==", "bodyText": "I wonder whether we could somehow automatically prepend std to avoid always changing all reference outputs", "url": "https://github.com/vmware/differential-datalog/pull/528#discussion_r381647764", "createdAt": "2020-02-20T01:30:08Z", "author": {"login": "mbudiu-vmw"}, "path": "test/datalog_tests/tutorial.ast.expected", "diffHunk": "@@ -270,6 +270,7 @@ function std.result_unwrap_or (res: std.Result<'V,'E>, def: 'V): 'V =\n         std.Ok{.res=var v} -> v,\n         std.Err{.err=_} -> def\n     }\n+extern function std.result_unwrap_or_default (res: std.Result<'V,'E>): 'V", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2730be320e92579893d6d3a5b154e6689bdf4ed"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f9d8379d88bcfd1766ad50599cda44f00148dfc", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/7f9d8379d88bcfd1766ad50599cda44f00148dfc", "committedDate": "2020-02-20T03:32:44Z", "message": "JSON serialization/deserialization library.\n\nThis library currently provides two functions to serialize/deserialize\nJSON into DDlog types:\n\n```\nextern function from_json_string(json: string): Result<'T, string>\nextern function to_json_string(x: 'T): Result<string, string>\n```\n\nIt leverages the fact that all DDlog types implement `Serialize` and\n`Deserialize` traits.  When combined with the `serde_json` crate, such\ntypes become serializable to/from JSON.  The recently added `rust`\nattribute can be used to configure serialization.\n\nExample 1: Deserializing from a default format expected by `serde_json`:\n\nType declaration:\n\n```\ntypedef BoolStruct = BoolStruct {\n    b: bool\n}\n```\n\nValid JSON: `{\"b\":true}`\n\nExample 2: Customizing JSON format:\n\nType declaration:\n\n```\ntypedef TaggedEnum = #[rust=\"serde(rename = \\\"t.V1\\\")\"]\n                     TVariant1 { b: bool }\n                   | #[rust=\"serde(rename = \\\"t.V2\\\")\"]\n                     TVariant2 { u: u32 }\n```\n\nValid JSON: `{\"@type\": \"t.V2\", \"u\": 100}`\n\nSee https://serde.rs/attributes.html for documentation of\nserialization-related attributes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5876f86983555cc9615ad1a6d380e08132d3a3cc", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/5876f86983555cc9615ad1a6d380e08132d3a3cc", "committedDate": "2020-02-20T03:32:44Z", "message": "parse.rs: Import string literals from file.\n\nWhen working with large strings, e.g., JSON files, it can be awkward and\nerror-prone to escape the string and insert it inline in a `.dat` file.\nThis commit implements new syntax to create a string literal equal to\nthe contents of a file: `%\"path/to/file\"`.\n\nExample usage:\n\n```\nstart;\ninsert JsonRelation[%\"path/to/file.json\"],\ncommit dump_changes;\n```"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ceb01482f05411e9cf0e0dee900e7e664d12d3e0", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/ceb01482f05411e9cf0e0dee900e7e664d12d3e0", "committedDate": "2020-02-20T03:32:44Z", "message": "json.dl: JsonScalarValue type.\n\nExtend the `json.dl` library with an enum type that represents a scalar JSON\nvalue whose type is not known in advance.  This requires a bit of Rust\nmagic to work as expected; therefore it makes sense to implement this as\na library type."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "854f83f5a67dea8a223f1de68321941f17723974", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/854f83f5a67dea8a223f1de68321941f17723974", "committedDate": "2020-02-20T03:32:44Z", "message": "json_test.dl: Add a test for field attributes.\n\nTest `rename` and `flatten` serde attributes."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d2730be320e92579893d6d3a5b154e6689bdf4ed", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/d2730be320e92579893d6d3a5b154e6689bdf4ed", "committedDate": "2020-02-20T00:43:27Z", "message": "json_test.dl: Add a test for field attributes.\n\nTest `rename` and `flatten` serde attributes."}, "afterCommit": {"oid": "854f83f5a67dea8a223f1de68321941f17723974", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/854f83f5a67dea8a223f1de68321941f17723974", "committedDate": "2020-02-20T03:32:44Z", "message": "json_test.dl: Add a test for field attributes.\n\nTest `rename` and `flatten` serde attributes."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4645, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}