{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMjk3OTE5", "number": 689, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMjozMDowN1rOEI-8pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMjozNDo1OFrOEI-_Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODU1Mzk2OnYy", "diffSide": "RIGHT", "path": "src/Language/DifferentialDatalog/Debug.hs", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMjozMDowN1rOGpRy6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMjozMDowN1rOGpRy6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzNjM2MA==", "bodyText": "Let's do\nrhs -> error $ \"generateInspectDebug \" ++ show rhs\n\nto catch potential compiler bugs that violate this.", "url": "https://github.com/vmware/differential-datalog/pull/689#discussion_r445936360", "createdAt": "2020-06-26T02:30:07Z", "author": {"login": "ryzhyk"}, "path": "src/Language/DifferentialDatalog/Debug.hs", "diffHunk": "@@ -123,11 +123,20 @@ generateInspectDebug d ruleIdx rule index =\n     input1 = if index == 0\n                 then eVar $ exprVar $ enode $ atomVal $ rhsAtom $ head $ ruleRHS rule\n                 else head $ Compile.recordAfterPrefix d rule (index - 1)\n+    opType = if index == 0\n+                then \"Map\"\n+                else case (ruleRHS rule) !! index of\n+                     RHSLiteral{rhsPolarity=False} -> \"Antijoin\"\n+                     RHSInspect{} -> \"Inspect\"\n+                     RHSFlatMap{} -> \"Flatmap\"\n+                     RHSCondition{} -> \"Condition\"\n+                     _ -> \"Undefined\" -- Should not reach this case", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf2d197a5473c324bb15abb7a7e35958486c6955"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODU2MDkwOnYy", "diffSide": "RIGHT", "path": "lib/debug.dl", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMjozNDo1OFrOGpR3Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMjo0Mzo0M1rOGpR-6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzNzQ1MQ==", "bodyText": "In one of future commits, can we add a typedef to debug.dl, e.g.,\ntypedef DDlogOpId = DDlogOpId {\n  rel: u32,\n  rule: u32,\n  op: u32\n}", "url": "https://github.com/vmware/differential-datalog/pull/689#discussion_r445937451", "createdAt": "2020-06-26T02:34:58Z", "author": {"login": "ryzhyk"}, "path": "lib/debug.dl", "diffHunk": "@@ -2,7 +2,9 @@\n  * an external debugger tool.\n  */\n \n-extern function debug_event(operator_id: (u32, u32, u32), w: DDWeight, ts: 'T1, input1: 'A1, out: 'A2): ()\n-extern function debug_event_join(operator_id: (u32, u32, u32), w: DDWeight, ts: 'T1, input1: 'A1, input2: 'A2, out: 'A3): ()\n+extern function debug_event(operator_id: (u32, u32, u32), w: DDWeight, ts: 'T1,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf2d197a5473c324bb15abb7a7e35958486c6955"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzOTQzNA==", "bodyText": "On a second thought, since this will be serialized into every debugger message, maybe we should keep it as a tuple for more concise output:\ntypedef DDlogOpId = (u32, u32, u32)", "url": "https://github.com/vmware/differential-datalog/pull/689#discussion_r445939434", "createdAt": "2020-06-26T02:43:43Z", "author": {"login": "ryzhyk"}, "path": "lib/debug.dl", "diffHunk": "@@ -2,7 +2,9 @@\n  * an external debugger tool.\n  */\n \n-extern function debug_event(operator_id: (u32, u32, u32), w: DDWeight, ts: 'T1, input1: 'A1, out: 'A2): ()\n-extern function debug_event_join(operator_id: (u32, u32, u32), w: DDWeight, ts: 'T1, input1: 'A1, input2: 'A2, out: 'A3): ()\n+extern function debug_event(operator_id: (u32, u32, u32), w: DDWeight, ts: 'T1,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzNzQ1MQ=="}, "originalCommit": {"oid": "cf2d197a5473c324bb15abb7a7e35958486c6955"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4775, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}