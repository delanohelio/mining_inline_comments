{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3Mjc4MTEx", "number": 688, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMDoxNjozMFrOEHOhUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMTozNToyM1rOEHPhuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDEzMzk0OnYy", "diffSide": "RIGHT", "path": "app/Main.hs", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMDoxNjozMFrOGmgNTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMDoyMTo0OVrOGmgUpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyNjc2Ng==", "bodyText": "The ast suffix does not really make sense. I think you should use the dl suffix, then syntax highlighting tools will work properly.", "url": "https://github.com/vmware/differential-datalog/pull/688#discussion_r443026766", "createdAt": "2020-06-19T20:16:30Z", "author": {"login": "mbudiu-vmw"}, "path": "app/Main.hs", "diffHunk": "@@ -169,22 +145,24 @@ parseValidate Config{..} = do\n     d''' <- case confOutputInput of\n          \"\" -> return d''\n          x  ->  return $ progMirrorInputRelations d'' x\n+    when confDumpFlat $\n+        writeFile (replaceExtension confDatalogFile \".flat.ast\") (show d''')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc02df6c885f0b43d0cddc82555b8ebe20f6c282"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyODY0NA==", "bodyText": "I thought about this, but unfortunately this is not valid DDlog code, as it includes flattened names containing dots.", "url": "https://github.com/vmware/differential-datalog/pull/688#discussion_r443028644", "createdAt": "2020-06-19T20:21:49Z", "author": {"login": "ryzhyk"}, "path": "app/Main.hs", "diffHunk": "@@ -169,22 +145,24 @@ parseValidate Config{..} = do\n     d''' <- case confOutputInput of\n          \"\" -> return d''\n          x  ->  return $ progMirrorInputRelations d'' x\n+    when confDumpFlat $\n+        writeFile (replaceExtension confDatalogFile \".flat.ast\") (show d''')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyNjc2Ng=="}, "originalCommit": {"oid": "fc02df6c885f0b43d0cddc82555b8ebe20f6c282"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDEzNzMxOnYy", "diffSide": "RIGHT", "path": "test/datalog_tests/lib_test.debug.ast.expected", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMDoxODowN1rOGmgPbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMDoyMzoxM1rOGmgWjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyNzMwOQ==", "bodyText": "could the indentation be changed here?", "url": "https://github.com/vmware/differential-datalog/pull/688#discussion_r443027309", "createdAt": "2020-06-19T20:18:07Z", "author": {"login": "mbudiu-vmw"}, "path": "test/datalog_tests/lib_test.debug.ast.expected", "diffHunk": "@@ -0,0 +1,1053 @@\n+typedef fp_test.BB = fp_test.BB{s: string, b: bool}\n+typedef fp_test.D = fp_test.D{s: string, d: double}\n+typedef fp_test.DoublesFromRecord = fp_test.DoublesFromRecord{s: string, d: double}\n+typedef fp_test.F = fp_test.F{s: string, d: float}\n+typedef fp_test.FloatsFromRecord = fp_test.FloatsFromRecord{s: string, f: float}\n+#[size = 8]\n+#[shared_ref = true]\n+extern type internment.Intern<'A>\n+typedef internment.istring = internment.Intern<string>\n+typedef internment_test.AllInternedString = internment_test.AllInternedString{ix: internment.istring}\n+typedef internment_test.IInternedString = internment_test.IInternedString{ix: internment.istring}\n+typedef internment_test.IStruct = internment_test.IStruct{u: internment.Intern<internment_test.IUnion>, t: internment.Intern<(std.s32, double)>, x: bigint}\n+typedef internment_test.IUnion = internment_test.Tag1{f1: bool} | internment_test.Tag2{f2: std.u32, f3: string}\n+typedef internment_test.OInternedString = internment_test.OInternedString{x: string, ix: internment.istring}\n+typedef internment_test.Projections = internment_test.Projections{inp: internment_test.IStruct, p: string}\n+typedef internment_test.StaticInternedString = internment_test.StaticInternedString{ix: internment.istring}\n+typedef json.JsonNum = json.JsonInt{i: std.s128} | json.JsonFloat{d: double}\n+#[rust = \"serde(from = \\\"__json::ValueWrapper\\\", into = \\\"__json::ValueWrapper\\\")\"]\n+typedef json.JsonValue = json.JsonNull{} | json.JsonBool{b: bool} | json.JsonNumber{n: json.JsonNum} | json.JsonString{s: internment.istring} | json.JsonArray{a: std.Vec<json.JsonValue>} | json.JsonObject{o: std.Map<internment.istring,json.JsonValue>}\n+#[custom_serde = true]\n+typedef json.JsonWrapper<'T> = json.JsonWrapper{x: 'T}\n+typedef json_test.Array = std.Vec<json_test.BoolStruct>\n+typedef json_test.BoolMap = std.Map<string,json_test.BoolStruct>\n+typedef json_test.BoolStruct = json_test.BoolStruct{b: bool}\n+typedef json_test.Enum = #[rust = \"serde(rename = \\\"Variant1\\\")\"]\n+                         json_test.Variant1{b: bool} | #[rust = \"serde(rename = \\\"Variant2\\\")\"]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc02df6c885f0b43d0cddc82555b8ebe20f6c282"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyOTEzMw==", "bodyText": "Yeah, looks terrible.", "url": "https://github.com/vmware/differential-datalog/pull/688#discussion_r443029133", "createdAt": "2020-06-19T20:23:13Z", "author": {"login": "ryzhyk"}, "path": "test/datalog_tests/lib_test.debug.ast.expected", "diffHunk": "@@ -0,0 +1,1053 @@\n+typedef fp_test.BB = fp_test.BB{s: string, b: bool}\n+typedef fp_test.D = fp_test.D{s: string, d: double}\n+typedef fp_test.DoublesFromRecord = fp_test.DoublesFromRecord{s: string, d: double}\n+typedef fp_test.F = fp_test.F{s: string, d: float}\n+typedef fp_test.FloatsFromRecord = fp_test.FloatsFromRecord{s: string, f: float}\n+#[size = 8]\n+#[shared_ref = true]\n+extern type internment.Intern<'A>\n+typedef internment.istring = internment.Intern<string>\n+typedef internment_test.AllInternedString = internment_test.AllInternedString{ix: internment.istring}\n+typedef internment_test.IInternedString = internment_test.IInternedString{ix: internment.istring}\n+typedef internment_test.IStruct = internment_test.IStruct{u: internment.Intern<internment_test.IUnion>, t: internment.Intern<(std.s32, double)>, x: bigint}\n+typedef internment_test.IUnion = internment_test.Tag1{f1: bool} | internment_test.Tag2{f2: std.u32, f3: string}\n+typedef internment_test.OInternedString = internment_test.OInternedString{x: string, ix: internment.istring}\n+typedef internment_test.Projections = internment_test.Projections{inp: internment_test.IStruct, p: string}\n+typedef internment_test.StaticInternedString = internment_test.StaticInternedString{ix: internment.istring}\n+typedef json.JsonNum = json.JsonInt{i: std.s128} | json.JsonFloat{d: double}\n+#[rust = \"serde(from = \\\"__json::ValueWrapper\\\", into = \\\"__json::ValueWrapper\\\")\"]\n+typedef json.JsonValue = json.JsonNull{} | json.JsonBool{b: bool} | json.JsonNumber{n: json.JsonNum} | json.JsonString{s: internment.istring} | json.JsonArray{a: std.Vec<json.JsonValue>} | json.JsonObject{o: std.Map<internment.istring,json.JsonValue>}\n+#[custom_serde = true]\n+typedef json.JsonWrapper<'T> = json.JsonWrapper{x: 'T}\n+typedef json_test.Array = std.Vec<json_test.BoolStruct>\n+typedef json_test.BoolMap = std.Map<string,json_test.BoolStruct>\n+typedef json_test.BoolStruct = json_test.BoolStruct{b: bool}\n+typedef json_test.Enum = #[rust = \"serde(rename = \\\"Variant1\\\")\"]\n+                         json_test.Variant1{b: bool} | #[rust = \"serde(rename = \\\"Variant2\\\")\"]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyNzMwOQ=="}, "originalCommit": {"oid": "fc02df6c885f0b43d0cddc82555b8ebe20f6c282"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDI5ODgzOnYy", "diffSide": "RIGHT", "path": "app/Main.hs", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMTozNToyM1rOGmhyKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMTo0MTo1MVrOGmh4zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA1MjU4NA==", "bodyText": "Should we add check to only dump when confDebugHooks is enabled?\nOr maybe update help message that if pp-debug is passed without \"-g\" then this will dump the source but no debug hooks?", "url": "https://github.com/vmware/differential-datalog/pull/688#discussion_r443052584", "createdAt": "2020-06-19T21:35:23Z", "author": {"login": "haroldlim"}, "path": "app/Main.hs", "diffHunk": "@@ -169,22 +145,24 @@ parseValidate Config{..} = do\n     d''' <- case confOutputInput of\n          \"\" -> return d''\n          x  ->  return $ progMirrorInputRelations d'' x\n+    when confDumpFlat $\n+        writeFile (replaceExtension confDatalogFile \".flat.ast\") (show d''')\n     d'''' <- case validate d''' of\n                Left e   -> errorWithoutStackTrace $ \"error: \" ++ e\n                Right d'''' -> return d''''\n+    when confDumpValid $\n+        writeFile (replaceExtension confDatalogFile \".valid.ast\") (show d'''')\n     d' <- case confDebugHooks of\n          False -> return d''''\n          True  -> return $ progInjectDebuggingHooks d''''\n+    when confDumpDebug $\n+        writeFile (replaceExtension confDatalogFile \".debug.ast\") (show d')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cf732775ffbbc55433d54edfe01059c028c3eeb"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA1NDI4Ng==", "bodyText": "Yeah, I was being lazy there. Let's go with the second approach, as it is more permissive, i.e., works better with automation.", "url": "https://github.com/vmware/differential-datalog/pull/688#discussion_r443054286", "createdAt": "2020-06-19T21:41:51Z", "author": {"login": "ryzhyk"}, "path": "app/Main.hs", "diffHunk": "@@ -169,22 +145,24 @@ parseValidate Config{..} = do\n     d''' <- case confOutputInput of\n          \"\" -> return d''\n          x  ->  return $ progMirrorInputRelations d'' x\n+    when confDumpFlat $\n+        writeFile (replaceExtension confDatalogFile \".flat.ast\") (show d''')\n     d'''' <- case validate d''' of\n                Left e   -> errorWithoutStackTrace $ \"error: \" ++ e\n                Right d'''' -> return d''''\n+    when confDumpValid $\n+        writeFile (replaceExtension confDatalogFile \".valid.ast\") (show d'''')\n     d' <- case confDebugHooks of\n          False -> return d''''\n          True  -> return $ progInjectDebuggingHooks d''''\n+    when confDumpDebug $\n+        writeFile (replaceExtension confDatalogFile \".debug.ast\") (show d')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA1MjU4NA=="}, "originalCommit": {"oid": "2cf732775ffbbc55433d54edfe01059c028c3eeb"}, "originalPosition": 95}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4772, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}