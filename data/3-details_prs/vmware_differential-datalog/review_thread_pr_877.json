{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyOTAyNDE3", "number": 877, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxOToxMzoxOFrOFH5zeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxOTo1MTowNlrOFH6fVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODMxNDE4OnYy", "diffSide": "RIGHT", "path": "CHANGELOG.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxOToxMzoxOFrOIJjD1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMDozMToyNVrOIJlGFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg4MjUxNw==", "bodyText": "Maybe you want to add a few entries for previous releases; at least the first release should be here.\nWhat is OOM?", "url": "https://github.com/vmware/differential-datalog/pull/877#discussion_r546882517", "createdAt": "2020-12-21T19:13:18Z", "author": {"login": "mbudiu-vmw"}, "path": "CHANGELOG.md", "diffHunk": "@@ -0,0 +1,10 @@\n+# Changelog\n+All notable changes to this project will be documented in this file.\n+\n+The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n+\n+## [Unreleased]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d185be838ae146ae16a943dafefee800863d059"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkxNTg2Mw==", "bodyText": "order-of-magnitude. I'll convert this into a release entry when creating a release.", "url": "https://github.com/vmware/differential-datalog/pull/877#discussion_r546915863", "createdAt": "2020-12-21T20:31:25Z", "author": {"login": "ryzhyk"}, "path": "CHANGELOG.md", "diffHunk": "@@ -0,0 +1,10 @@\n+# Changelog\n+All notable changes to this project will be documented in this file.\n+\n+The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n+\n+## [Unreleased]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg4MjUxNw=="}, "originalCommit": {"oid": "6d185be838ae146ae16a943dafefee800863d059"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODMxNzk1OnYy", "diffSide": "RIGHT", "path": "app/Main.hs", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxOToxNDozNVrOIJjF6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMDowNDo1OFrOIJkcCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg4MzA1MQ==", "bodyText": "Make the output conditional on some option (-verbose?).", "url": "https://github.com/vmware/differential-datalog/pull/877#discussion_r546883051", "createdAt": "2020-12-21T19:14:35Z", "author": {"login": "mbudiu-vmw"}, "path": "app/Main.hs", "diffHunk": "@@ -155,13 +158,26 @@ main = do\n             putStrLn $ \"DDlog \" ++ dDLOG_VERSION ++ \" (\" ++ gitHash ++ \")\"\n             putStrLn $ \"Copyright (c) 2019-2020 VMware, Inc. (MIT License)\"\n         ActionValidate -> do\n-            _ <- parseValidate config'\n-            return ()\n+            timeAction (\"validating \" ++ show (confDatalogFile config)) $ do\n+                _ <- parseValidate config'\n+                return ()\n         ActionCompile -> do\n-            compileProg config'\n-            -- Run rustfmt on the generated code if it's enabled\n-            when (confRunRustfmt config') $\n-                runCommandReportingErr \"rustfmt\" \"cargo\" [\"fmt\", \"--all\"] $ Just (confOutputDir config')\n+            timeAction (\"compiling \" ++ show (confDatalogFile config)) $ do\n+                compileProg config'\n+                -- Run rustfmt on the generated code if it's enabled\n+                when (confRunRustfmt config') $\n+                    runCommandReportingErr \"rustfmt\" \"cargo\" [\"fmt\", \"--all\"] $ Just (confOutputDir config')\n+\n+-- Perform IO action and measure its duration.\n+timeAction :: String -> IO () -> IO ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d185be838ae146ae16a943dafefee800863d059"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkwMzk4MA==", "bodyText": "What's wrong with always printing it?  Rust compiler does this bu default, and I find it useful, also as explicit indication that compilation succeeded.", "url": "https://github.com/vmware/differential-datalog/pull/877#discussion_r546903980", "createdAt": "2020-12-21T20:02:19Z", "author": {"login": "ryzhyk"}, "path": "app/Main.hs", "diffHunk": "@@ -155,13 +158,26 @@ main = do\n             putStrLn $ \"DDlog \" ++ dDLOG_VERSION ++ \" (\" ++ gitHash ++ \")\"\n             putStrLn $ \"Copyright (c) 2019-2020 VMware, Inc. (MIT License)\"\n         ActionValidate -> do\n-            _ <- parseValidate config'\n-            return ()\n+            timeAction (\"validating \" ++ show (confDatalogFile config)) $ do\n+                _ <- parseValidate config'\n+                return ()\n         ActionCompile -> do\n-            compileProg config'\n-            -- Run rustfmt on the generated code if it's enabled\n-            when (confRunRustfmt config') $\n-                runCommandReportingErr \"rustfmt\" \"cargo\" [\"fmt\", \"--all\"] $ Just (confOutputDir config')\n+            timeAction (\"compiling \" ++ show (confDatalogFile config)) $ do\n+                compileProg config'\n+                -- Run rustfmt on the generated code if it's enabled\n+                when (confRunRustfmt config') $\n+                    runCommandReportingErr \"rustfmt\" \"cargo\" [\"fmt\", \"--all\"] $ Just (confOutputDir config')\n+\n+-- Perform IO action and measure its duration.\n+timeAction :: String -> IO () -> IO ()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg4MzA1MQ=="}, "originalCommit": {"oid": "6d185be838ae146ae16a943dafefee800863d059"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkwNTA5OQ==", "bodyText": "The Unix philosophy is to print nothing on success.\nIf you write tools that consume the output of the compiler you may expect that there is no output if there are no errors or warnings. But this is certainly a low priority item; we can wait until someone asks for a -quiet flag.", "url": "https://github.com/vmware/differential-datalog/pull/877#discussion_r546905099", "createdAt": "2020-12-21T20:04:58Z", "author": {"login": "mbudiu-vmw"}, "path": "app/Main.hs", "diffHunk": "@@ -155,13 +158,26 @@ main = do\n             putStrLn $ \"DDlog \" ++ dDLOG_VERSION ++ \" (\" ++ gitHash ++ \")\"\n             putStrLn $ \"Copyright (c) 2019-2020 VMware, Inc. (MIT License)\"\n         ActionValidate -> do\n-            _ <- parseValidate config'\n-            return ()\n+            timeAction (\"validating \" ++ show (confDatalogFile config)) $ do\n+                _ <- parseValidate config'\n+                return ()\n         ActionCompile -> do\n-            compileProg config'\n-            -- Run rustfmt on the generated code if it's enabled\n-            when (confRunRustfmt config') $\n-                runCommandReportingErr \"rustfmt\" \"cargo\" [\"fmt\", \"--all\"] $ Just (confOutputDir config')\n+            timeAction (\"compiling \" ++ show (confDatalogFile config)) $ do\n+                compileProg config'\n+                -- Run rustfmt on the generated code if it's enabled\n+                when (confRunRustfmt config') $\n+                    runCommandReportingErr \"rustfmt\" \"cargo\" [\"fmt\", \"--all\"] $ Just (confOutputDir config')\n+\n+-- Perform IO action and measure its duration.\n+timeAction :: String -> IO () -> IO ()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg4MzA1MQ=="}, "originalCommit": {"oid": "6d185be838ae146ae16a943dafefee800863d059"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODMzMzkyOnYy", "diffSide": "RIGHT", "path": "src/Language/DifferentialDatalog/Expr.hs", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxOToxOTo0OFrOIJjO5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxOToxOTo0OFrOIJjO5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg4NTM0OQ==", "bodyText": "typo in comment", "url": "https://github.com/vmware/differential-datalog/pull/877#discussion_r546885349", "createdAt": "2020-12-21T19:19:48Z", "author": {"login": "mbudiu-vmw"}, "path": "src/Language/DifferentialDatalog/Expr.hs", "diffHunk": "@@ -586,3 +589,144 @@ exprInjectStringConversion d e t = do\n                         [E e]\n     where mk2string_func cs = scoped scope \"to_string\"\n               where scope = nameScope cs\n+\n+-- A descriptor that uniquely identifies a sub-expression within\n+-- a given context as a path from the root of the context to the\n+-- sub-expression.\n+data ELocator = ELocator {elocatorPath :: [Int]} deriving (Eq, Ord)\n+\n+-- depth-first fold of an expression\n+exprFoldWithLocatorM :: (Monad m) => (ELocator -> ExprNode b -> m b) -> ELocator -> Expr -> m b\n+exprFoldWithLocatorM f loc (E n) = exprFoldWithLocatorM' f loc n\n+\n+exprFoldWithLocatorM' :: (Monad m) => (ELocator -> ExprNode b -> m b) -> ELocator -> ENode -> m b\n+exprFoldWithLocatorM' f loc                 (EVar p v)              = f loc $ EVar p v\n+exprFoldWithLocatorM' f loc@(ELocator path) (EApply p fun as)       = \n+    -- 0: function expression\n+    -- 1..n: argument expression\n+    f loc =<< EApply p <$> exprFoldWithLocatorM f (ELocator $ 0:path) fun\n+                                  <*> (mapIdxM (\\a i -> exprFoldWithLocatorM f (ELocator $ (1+i) : path) a) as)\n+exprFoldWithLocatorM' f loc@(ELocator path) (EField p s fl)         =\n+    do s' <- exprFoldWithLocatorM f (ELocator $ 0:path) s\n+       f loc $ EField p s' fl\n+exprFoldWithLocatorM' f loc@(ELocator path) (ETupField p s fl)      = do\n+    s' <- exprFoldWithLocatorM f (ELocator $ 0:path) s\n+    f loc $ ETupField p s' fl\n+exprFoldWithLocatorM' f loc                   (EBool p b)             = f loc $ EBool p b\n+exprFoldWithLocatorM' f loc                   (EInt p i)              = f loc $ EInt p i\n+exprFoldWithLocatorM' f loc                   (EDouble p i)           = f loc $ EDouble p i\n+exprFoldWithLocatorM' f loc                   (EFloat p i)            = f loc $ EFloat p i\n+exprFoldWithLocatorM' f loc                   (EString p s)           = f loc $ EString p s\n+exprFoldWithLocatorM' f loc                   (EBit p w v)            = f loc $ EBit p w v\n+exprFoldWithLocatorM' f loc                   (ESigned p w v)         = f loc $ ESigned p w v\n+exprFoldWithLocatorM' f loc@(ELocator path) (EStruct p c fs)        =\n+    f loc =<< EStruct p c <$> (mapIdxM (\\(fname, fl) i -> (fname,) <$> exprFoldWithLocatorM f (ELocator $ i : path) fl) fs)\n+exprFoldWithLocatorM' f loc@(ELocator path) (ETuple p fs)           =\n+    f loc =<< ETuple p <$> (mapIdxM (\\fl i -> exprFoldWithLocatorM f (ELocator $ i : path) fl) fs)\n+exprFoldWithLocatorM' f loc@(ELocator path) (ESlice p v h l)        = do\n+    v' <- exprFoldWithLocatorM f (ELocator $ 0 : path) v\n+    f loc $ ESlice p v' h l\n+exprFoldWithLocatorM' f loc@(ELocator path) (EMatch p m cs)         = do\n+    -- 0 - match expression\n+    -- 1,3,5,..,2n-1 - match patterns\n+    -- 2,4,6,..,2n   - match values\n+    m' <- exprFoldWithLocatorM f (ELocator $ 0:path) m\n+    cs' <- mapIdxM (\\(e1, e2) i -> (,) <$> (exprFoldWithLocatorM f (ELocator $ (1+2*i):path) e1) <*>\n+                                           (exprFoldWithLocatorM f (ELocator $ (2+2*i):path) e2)) cs\n+    f loc $ EMatch p m' cs'\n+exprFoldWithLocatorM' f loc                   (EVarDecl p v)          = f loc $ EVarDecl p v\n+exprFoldWithLocatorM' f loc@(ELocator path) (ESeq p l r)            =\n+    f loc =<< ESeq p <$> exprFoldWithLocatorM f (ELocator $ 0:path) l <*>\n+                         exprFoldWithLocatorM f (ELocator $ 1:path) r\n+exprFoldWithLocatorM' f loc@(ELocator path) (EITE p i t el)         =\n+    -- 0: if-confition", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d185be838ae146ae16a943dafefee800863d059"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODMzODEwOnYy", "diffSide": "RIGHT", "path": "src/Language/DifferentialDatalog/NS.hs", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxOToyMToyOFrOIJjRXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxOToyMToyOFrOIJjRXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg4NTk4MQ==", "bodyText": "these linear scans are something that you should perhaps keep an eye for.", "url": "https://github.com/vmware/differential-datalog/pull/877#discussion_r546885981", "createdAt": "2020-12-21T19:21:28Z", "author": {"login": "mbudiu-vmw"}, "path": "src/Language/DifferentialDatalog/NS.hs", "diffHunk": "@@ -150,7 +151,9 @@ getRelation :: DatalogProgram -> String -> Relation\n getRelation d n = fromJust $ lookupRelation d n\n \n arg2v :: Function -> FuncArg -> Var\n-arg2v f a = ArgVar f (name a)\n+arg2v f a = ArgVar f i (name a)\n+    where\n+    i = fromJust $ findIndex ((== name a) . name) $ funcArgs f", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d185be838ae146ae16a943dafefee800863d059"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODM0NjUwOnYy", "diffSide": "RIGHT", "path": "src/Language/DifferentialDatalog/TypeInference.hs", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxOToyNDo0MFrOIJjWVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxOToyNDo0MFrOIJjWVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg4NzI1Mg==", "bodyText": "delete?", "url": "https://github.com/vmware/differential-datalog/pull/877#discussion_r546887252", "createdAt": "2020-12-21T19:24:40Z", "author": {"login": "mbudiu-vmw"}, "path": "src/Language/DifferentialDatalog/TypeInference.hs", "diffHunk": "@@ -866,9 +895,9 @@ exprConstraints_ de@(DDExpr ctx (E e@EBinOp{..})) | elem exprBOp [Eq, Neq, Lt, L\n                                                 | elem exprBOp [ShiftL, ShiftR] = do\n     addConstraint =<< deIsInt l\n     -- If the type of 'r' cannot be inferred, default to 'u32'\n-    isbits <- deIsBits r\n-    def <- tvarTypeOfExpr r <==== TEBit (IConst 32)\n-    addConstraint $ isbits {cDefault = Just [def]}\n+    --isbits <- deIsBits r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d185be838ae146ae16a943dafefee800863d059"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODM2OTA3OnYy", "diffSide": "RIGHT", "path": "src/Language/DifferentialDatalog/Unification.hs", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxOTozMjozMVrOIJjjIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxOTozMjozMVrOIJjjIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg5MDUyOA==", "bodyText": "isn't it interesting that this program is both shorter and faster?", "url": "https://github.com/vmware/differential-datalog/pull/877#discussion_r546890528", "createdAt": "2020-12-21T19:32:31Z", "author": {"login": "mbudiu-vmw"}, "path": "src/Language/DifferentialDatalog/Unification.hs", "diffHunk": "@@ -50,11 +50,10 @@ module Language.DifferentialDatalog.Unification(\n where\n \n import Control.Monad.Except\n-import Control.Monad.State\n import Data.List\n import qualified Data.Map as M\n import Data.Maybe\n---import Debug.Trace\n+-- import Debug.Trace", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d185be838ae146ae16a943dafefee800863d059"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODQyNjQ0OnYy", "diffSide": "RIGHT", "path": "test/datalog_tests/function.fail.ast.expected", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxOTo1MTowNlrOIJkFNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxOTo1MTowNlrOIJkFNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg5OTI1Mw==", "bodyText": "I don't understand where this embedded comment comes from.\nAre you showing a list of candidate functions that match?\nThe comment syntax is not the most appropriate.\nPerhaps something like One of [ddlog_std::split, internment::split]", "url": "https://github.com/vmware/differential-datalog/pull/877#discussion_r546899253", "createdAt": "2020-12-21T19:51:06Z", "author": {"login": "mbudiu-vmw"}, "path": "test/datalog_tests/function.fail.ast.expected", "diffHunk": "@@ -111,9 +111,16 @@ Only non-extern functions can be overloaded.\n extern function foo(x: u32): ()\n ^\n \n-error: ./test/datalog_tests/function.fail.dl:8:21-8:39: expression '(ddlog_std::nth(components, 1))' must be of type 'Result<>', but its type is 'ddlog_std::Option<string>'\n-    var last_name = components.nth(1)?;\n-                    ^^^^^^^^^^^^^^^^^^\n+error: ./test/datalog_tests/function.fail.dl:6:5-10:1: Type mismatch:\n+expected type: ddlog_std::Result<(string,string),string>\n+actual type: ddlog_std::Option<('a17,'a28)>\n+in\n+expression '{(var components = (/*ddlog_std::split, internment::split*/(name, \" \")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d185be838ae146ae16a943dafefee800863d059"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4724, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}