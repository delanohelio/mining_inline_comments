{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2ODc4ODM1", "number": 758, "title": "Allow a semicolon after a sequence of expressions.", "bodyText": "We used to disallow a semicolon after a sequence of expressions, e.g.,\n{ e1; e2; } was illegal and had to be written as either\n{ e1; e2 } (to return the value of e2) or { e1; e2; ()}\nto discard the result of e2 and return an empty tuple.\nThis annoyed most users, including yours truly.  So we now allow\n{ e1; e2; }, which gets desugared into { e1; e2; () }.\nAlong the way, I fixed a bug in type inference when the type of\ncontinue, break, or return is not constrained by the environment.\nInstead of crashing, we now assign unit type to them.", "createdAt": "2020-09-01T07:28:23Z", "url": "https://github.com/vmware/differential-datalog/pull/758", "merged": true, "mergeCommit": {"oid": "0a92c0bb3c2dccf133e5c9998c5d3052c3ec7e11"}, "closed": true, "closedAt": "2020-09-01T21:32:08Z", "author": {"login": "ryzhyk"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEpnXJAH2gAyNDc2ODc4ODM1OjBkMTExMTgzN2U0ZWNjM2RhZWI1ZjM3MWFkMTNiNTk5M2YyMmQ4ZWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEsc8PAFqTQ4MDA0NDAzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0d1111837e4ecc3daeb5f371ad13b5993f22d8eb", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/0d1111837e4ecc3daeb5f371ad13b5993f22d8eb", "committedDate": "2020-09-01T16:02:02Z", "message": "Allow a semicolon after a sequence of expressions.\n\nWe used to disallow a semicolon after a sequence of expressions, e.g.,\n`{ e1; e2; }` was illegal and had to be written as either\n`{ e1; e2 }` (to return the value of `e2`) or `{ e1; e2; ()}`\nto discard the result of `e2` and return an empty tuple.\n\nThis annoyed most users, including yours truly.  So we now allow\n`{ e1; e2; }`, which gets desugared into `{ e1; e2; () }`.\n\nAlong the way, I fixed a bug in type inference when the type of\n`continue`, `break`, or `return` is not constrained by the environment.\nInstead of crashing, we now assign unit type to them."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "174087eb80dd05bea1c7b97ff7f36b7ac640b2cd", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/174087eb80dd05bea1c7b97ff7f36b7ac640b2cd", "committedDate": "2020-09-01T07:02:21Z", "message": "Allow a semicolon after a sequence of expressions.\n\nWe used to disallow a semicolon after a sequence of expressions, e.g.,\n`{ e1; e2; }` was illegal and had to be written as either\n`{ e1; e2 }` (to return the value of `e2`) or `{ e1; e2; ()}`\nto discard the result of `e2` and return an empty tuple.\n\nThis annoyed most users, including yours truly.  So we now allow\n`{ e1; e2; }`, which gets desugared into `{ e1; e2; () }`.\n\nAlong the way, I fixed a bug in type inference when the type of\n`continue`, `break`, or `return` is not constrained by the environment.\nInstead of crashing, we now assign unit type to them."}, "afterCommit": {"oid": "0d1111837e4ecc3daeb5f371ad13b5993f22d8eb", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/0d1111837e4ecc3daeb5f371ad13b5993f22d8eb", "committedDate": "2020-09-01T16:02:02Z", "message": "Allow a semicolon after a sequence of expressions.\n\nWe used to disallow a semicolon after a sequence of expressions, e.g.,\n`{ e1; e2; }` was illegal and had to be written as either\n`{ e1; e2 }` (to return the value of `e2`) or `{ e1; e2; ()}`\nto discard the result of `e2` and return an empty tuple.\n\nThis annoyed most users, including yours truly.  So we now allow\n`{ e1; e2; }`, which gets desugared into `{ e1; e2; () }`.\n\nAlong the way, I fixed a bug in type inference when the type of\n`continue`, `break`, or `return` is not constrained by the environment.\nInstead of crashing, we now assign unit type to them."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDQ0MDMz", "url": "https://github.com/vmware/differential-datalog/pull/758#pullrequestreview-480044033", "createdAt": "2020-09-01T19:16:05Z", "commit": {"oid": "0d1111837e4ecc3daeb5f371ad13b5993f22d8eb"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOToxNjowNVrOHLExbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOToxODo1MFrOHLE21g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3NDU3Mg==", "bodyText": "I am not sure this is a good idea. I think it will trip a lot of people who come from a C-like language.\nI think it should be a warning.", "url": "https://github.com/vmware/differential-datalog/pull/758#discussion_r481374572", "createdAt": "2020-09-01T19:16:05Z", "author": {"login": "mbudiu-vmw"}, "path": "doc/tutorial/tutorial.md", "diffHunk": "@@ -734,7 +734,15 @@ function addr_port(ip: ip_addr_t, proto: string, preferred_port: bit<16>): strin\n \n The result computed by a function is the value of the last expression evaluated\n or the value produced by the first `return` statement encountered when\n-evaluating the function.  If the `else` is missing the value `()` (empty tuple)\n+evaluating the function.  A semicolon at the end of a sequence of expressions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1111837e4ecc3daeb5f371ad13b5993f22d8eb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3NTk1OA==", "bodyText": "the sql compiler may need to change because of this too.", "url": "https://github.com/vmware/differential-datalog/pull/758#discussion_r481375958", "createdAt": "2020-09-01T19:18:50Z", "author": {"login": "mbudiu-vmw"}, "path": "src/Language/DifferentialDatalog/Syntax.hs", "diffHunk": "@@ -799,7 +799,7 @@ instance PP e => PP (ExprNode e) where\n                                $$\n                                \"}\"\n     pp (EVarDecl _ v)        = \"var\" <+> pp v\n-    pp (ESeq _ l r)          = parens $ (pp l <> semi) $$ pp r\n+    pp (ESeq _ l r)          = braces $ (pp l <> semi) $$ pp r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d1111837e4ecc3daeb5f371ad13b5993f22d8eb"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4610, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}