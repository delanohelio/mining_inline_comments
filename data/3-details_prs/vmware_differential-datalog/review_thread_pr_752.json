{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczNDkyNzgz", "number": 752, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMzo1NDozMVrOEcU5-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMzo1NDozMVrOEcU5-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MTM4MTA2OnYy", "diffSide": "RIGHT", "path": "lib/internment.rs", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMzo1NDozMVrOHGyrOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMDo1NTowNFrOHG1b4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg4Mzc2OA==", "bodyText": "I was a bit paranoid about doing this.  This type is designed for use in auto-generated code where we usually don't want any magic conversions.  I cannot think of a specific scenario where this would cause problems though, so I guess it's ok.", "url": "https://github.com/vmware/differential-datalog/pull/752#discussion_r476883768", "createdAt": "2020-08-25T23:54:31Z", "author": {"login": "ryzhyk"}, "path": "lib/internment.rs", "diffHunk": "@@ -54,7 +54,13 @@ impl<A: Eq + Hash + Send + Sync + 'static> internment_Intern<A> {\n             intern: arc_interner::ArcIntern::new(x),\n         }\n     }\n-    pub fn as_ref(&self) -> &A {\n+}\n+\n+impl<A> AsRef<A> for internment_Intern<A>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3223d02dd64aa8f576c1ecb5b0bf53a4853edec4"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkyODk5NQ==", "bodyText": "It really shouldn't matter since AsRef is in the prelude, worst comes to worst we can use qualified syntax with AsRef::as_ref(thing) instead of thing.as_ref()", "url": "https://github.com/vmware/differential-datalog/pull/752#discussion_r476928995", "createdAt": "2020-08-26T00:55:04Z", "author": {"login": "Kixiron"}, "path": "lib/internment.rs", "diffHunk": "@@ -54,7 +54,13 @@ impl<A: Eq + Hash + Send + Sync + 'static> internment_Intern<A> {\n             intern: arc_interner::ArcIntern::new(x),\n         }\n     }\n-    pub fn as_ref(&self) -> &A {\n+}\n+\n+impl<A> AsRef<A> for internment_Intern<A>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg4Mzc2OA=="}, "originalCommit": {"oid": "3223d02dd64aa8f576c1ecb5b0bf53a4853edec4"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4825, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}