{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNjIyMDcx", "number": 506, "title": "Control flow tests.", "bodyText": "I sneaked three new control flow constructs (continue, break, and return) in the last PR. This PR merely adds more tests and fixes a bug found in the process.\n@mbudiu-vmw, can you please look at this commit 75f5b98 in addition to commits in this PR?", "createdAt": "2020-02-05T22:42:32Z", "url": "https://github.com/vmware/differential-datalog/pull/506", "merged": true, "mergeCommit": {"oid": "297a9bba10c5d8de7ac684b26479f45ff4fd40e8"}, "closed": true, "closedAt": "2020-02-06T01:52:28Z", "author": {"login": "ryzhyk"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBcNG-AH2gAyMzcxNjIyMDcxOjYwMmY4MTI1NjQ1OGI2MmYzOGZhZTRlZmY2ODJhNWZhYjQ1OGM5YzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBgKmmgFqTM1NDE0NjQ2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "602f81256458b62f38fae4eff682a5fab458c9c6", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/602f81256458b62f38fae4eff682a5fab458c9c6", "committedDate": "2020-02-05T20:31:40Z", "message": "int.rs: Fix Shl implementation for Int.\n\nDDlog expects the rhs operand of `>>` and `<<` to be of type\n`bit<32>`.  Accordingly, we must make sure that all integer\ntypes implement `Shl<u32>` and `Shr<u32>`.  This is what we\ndid for `Uint`, but not `Int`, which was `Shl/Shr<usize>` instead,\ncausing Rust compilation errors."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "406e1cb99fd5a57814f95d70c3a0d256c49289de", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/406e1cb99fd5a57814f95d70c3a0d256c49289de", "committedDate": "2020-02-05T20:31:40Z", "message": "simple.dl: More continue/break/return tests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MTM0NDc0", "url": "https://github.com/vmware/differential-datalog/pull/506#pullrequestreview-354134474", "createdAt": "2020-02-06T00:29:57Z", "commit": {"oid": "406e1cb99fd5a57814f95d70c3a0d256c49289de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDoyOTo1N1rOFmL0-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDoyOTo1N1rOFmL0-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU4Mzk5Mg==", "bodyText": "I don't think I have seen this kind of stuff before in any language.\nPeople may find it confusing, but if it works as expected for the \"normal\" cases perhaps it's fine.", "url": "https://github.com/vmware/differential-datalog/pull/506#discussion_r375583992", "createdAt": "2020-02-06T00:29:57Z", "author": {"login": "mbudiu-vmw"}, "path": "test/datalog_tests/simple.dl", "diffHunk": "@@ -1151,6 +1152,16 @@ function any(xs: Vec<bool>): bool =\n     return res\n }\n \n+// A weird implementation of any using continue inside return.\n+function weird_any(xs: Vec<bool>): bool =\n+{\n+    var res = false;\n+    for (x in xs) {\n+        return if (x == true) { true } else { continue }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "406e1cb99fd5a57814f95d70c3a0d256c49289de"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MTM0NjU0", "url": "https://github.com/vmware/differential-datalog/pull/506#pullrequestreview-354134654", "createdAt": "2020-02-06T00:30:31Z", "commit": {"oid": "406e1cb99fd5a57814f95d70c3a0d256c49289de"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2ff073b5d2f8c089042169a08285acca2a267b7", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/a2ff073b5d2f8c089042169a08285acca2a267b7", "committedDate": "2020-02-06T00:48:11Z", "message": "FlatBuffer.hs: Convert field names to camel-case.\n\nFlatBuffers converts field names to camel case, e.g., `foo_bar` becomes\n`fooBar`.  There were two places where this conversion was missing."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57cdb79ceae2836b945838980eb373cf44908b51", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/57cdb79ceae2836b945838980eb373cf44908b51", "committedDate": "2020-02-06T00:51:39Z", "message": "Document `continue`, `break`, and `return` syntax.\n\nAdded a brief description to the tutorial and language reference."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MTQ2NDY5", "url": "https://github.com/vmware/differential-datalog/pull/506#pullrequestreview-354146469", "createdAt": "2020-02-06T01:08:33Z", "commit": {"oid": "57cdb79ceae2836b945838980eb373cf44908b51"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4630, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}