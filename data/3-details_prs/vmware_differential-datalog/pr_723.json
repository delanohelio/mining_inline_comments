{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NzU2NzIy", "number": 723, "title": "lib/url.dl: Library for working with URLs.", "bodyText": "DDlog bindings for the url crate.", "createdAt": "2020-07-29T23:00:54Z", "url": "https://github.com/vmware/differential-datalog/pull/723", "merged": true, "mergeCommit": {"oid": "deffc2a6a70739d0dc6bf0f87d7ce1c4fd0315ae"}, "closed": true, "closedAt": "2020-07-31T15:55:40Z", "author": {"login": "ryzhyk"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5uy81gH2gAyNDU4NzU2NzIyOjE5Y2E2ZGZkOWVlNWM1M2Y2YjIxMjc5ZTY3MTNjNzY0OGI0YWNmZjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5zvODAFqTQ1Nzk2NjI5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "19ca6dfd9ee5c53f6b21279e6713c7648b4acff2", "author": {"user": {"login": "ryzhyk", "name": "Leonid Ryzhyk"}}, "url": "https://github.com/vmware/differential-datalog/commit/19ca6dfd9ee5c53f6b21279e6713c7648b4acff2", "committedDate": "2020-07-29T17:51:03Z", "message": "lib/url.dl: Library for working with URLs.\n\nDDlog bindings for the `url` crate."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3OTY2Mjkw", "url": "https://github.com/vmware/differential-datalog/pull/723#pullrequestreview-457966290", "createdAt": "2020-07-29T23:29:58Z", "commit": {"oid": "19ca6dfd9ee5c53f6b21279e6713c7648b4acff2"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMzoyOTo1OFrOG5NwRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMzozMzozOVrOG5N0iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0NzM2Ng==", "bodyText": "url instead of this?", "url": "https://github.com/vmware/differential-datalog/pull/723#discussion_r462647366", "createdAt": "2020-07-29T23:29:58Z", "author": {"login": "mbudiu-vmw"}, "path": "lib/url.dl", "diffHunk": "@@ -0,0 +1,95 @@\n+/* Bindings for the Rust URL library.\n+ */\n+\n+extern type Url\n+\n+/* Parse an absolute URL from a string. */\n+extern function url_parse(url: string): Result<Url, string>\n+\n+/* Parse a string as an URL, with this URL as the base URL.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ca6dfd9ee5c53f6b21279e6713c7648b4acff2"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0NzQ1NA==", "bodyText": "trailing slash in url?", "url": "https://github.com/vmware/differential-datalog/pull/723#discussion_r462647454", "createdAt": "2020-07-29T23:30:17Z", "author": {"login": "mbudiu-vmw"}, "path": "lib/url.dl", "diffHunk": "@@ -0,0 +1,95 @@\n+/* Bindings for the Rust URL library.\n+ */\n+\n+extern type Url\n+\n+/* Parse an absolute URL from a string. */\n+extern function url_parse(url: string): Result<Url, string>\n+\n+/* Parse a string as an URL, with this URL as the base URL.\n+ * Note: a trailing slash is significant. Without it, the last", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ca6dfd9ee5c53f6b21279e6713c7648b4acff2"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0NzYxOA==", "bodyText": "maybe an example would help, I find this comment quite hard to parse, although it's probably borrowed from the Rust library.", "url": "https://github.com/vmware/differential-datalog/pull/723#discussion_r462647618", "createdAt": "2020-07-29T23:30:46Z", "author": {"login": "mbudiu-vmw"}, "path": "lib/url.dl", "diffHunk": "@@ -0,0 +1,95 @@\n+/* Bindings for the Rust URL library.\n+ */\n+\n+extern type Url\n+\n+/* Parse an absolute URL from a string. */\n+extern function url_parse(url: string): Result<Url, string>\n+\n+/* Parse a string as an URL, with this URL as the base URL.\n+ * Note: a trailing slash is significant. Without it, the last\n+ * path component is considered to be a \u201cfile\u201d name to be removed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ca6dfd9ee5c53f6b21279e6713c7648b4acff2"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0ODQ1Nw==", "bodyText": "I wonder whether we could generate some of this code automatically from the dl declarations.\nPerhaps we could have an annotations for the ones where we can.", "url": "https://github.com/vmware/differential-datalog/pull/723#discussion_r462648457", "createdAt": "2020-07-29T23:33:39Z", "author": {"login": "mbudiu-vmw"}, "path": "lib/url.rs", "diffHunk": "@@ -0,0 +1,104 @@\n+use url;\n+\n+#[derive(Eq, Ord, Clone, Hash, PartialEq, PartialOrd, Serialize, Deserialize, Debug)]\n+pub struct url_Url {\n+    url: url::Url,\n+}\n+\n+impl Default for url_Url {\n+    fn default() -> Self {\n+        url_Url {\n+            url: url::Url::parse(\"http://127.0.0.1/\").unwrap(),\n+        }\n+    }\n+}\n+\n+impl FromRecord for url_Url {\n+    fn from_record(val: &record::Record) -> result::Result<Self, String> {\n+        match (val) {\n+            record::Record::String(s) => match (url::Url::parse(&s)) {\n+                Ok(url) => Ok(url_Url { url }),\n+                Err(e) => Err(format!(\"{}\", e)),\n+            },\n+            _ => Err(String::from(\"Unexpected type\")),\n+        }\n+    }\n+}\n+\n+impl IntoRecord for url_Url {\n+    fn into_record(self) -> record::Record {\n+        record::Record::String(self.url.as_str().to_string())\n+    }\n+}\n+\n+impl record::Mutator<url_Url> for record::Record {\n+    fn mutate(&self, t: &mut url_Url) -> result::Result<(), String> {\n+        *t = url_Url::from_record(self)?;\n+        Ok(())\n+    }\n+}\n+\n+pub fn url_url_parse(s: &String) -> std_Result<url_Url, String> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ca6dfd9ee5c53f6b21279e6713c7648b4acff2"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4582, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}