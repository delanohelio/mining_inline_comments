{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5Nzk3ODgz", "number": 2201, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMjo0MTo1NlrOFFSi2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNToyMTo0MVrOFFpmJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMDkxMDM0OnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/test/groovy/datadog/trace/common/writer/ddagent/TraceMapperV05PayloadTest.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMjo0MTo1NlrOIFvN2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMjo0MTo1NlrOIFvN2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg4NzM4Ng==", "bodyText": "this was an arithmetic error which just happened to work before", "url": "https://github.com/DataDog/dd-trace-java/pull/2201#discussion_r542887386", "createdAt": "2020-12-14T22:41:56Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/test/groovy/datadog/trace/common/writer/ddagent/TraceMapperV05PayloadTest.groovy", "diffHunk": "@@ -98,7 +98,7 @@ class TraceMapperV05PayloadTest extends DDSpecification {\n       UUID.randomUUID().toString(),\n       false))\n     int traceSize = calculateSize(repeatedTrace)\n-    int tracesRequiredToOverflowBody = traceMapper.messageBufferSize() / traceSize\n+    int tracesRequiredToOverflowBody = (traceMapper.messageBufferSize() + traceSize - 1) / traceSize", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6f43cf29e2391f47cdd48bce3dbd51fa00f873"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjc0ODQwOnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/core/DDSpanContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODozOTo1N1rOIF_Jtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOToyMDozNlrOIGA1ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE0ODQ3MA==", "bodyText": "Not directly related to the change, but maybe hoist this access out of the loop?", "url": "https://github.com/DataDog/dd-trace-java/pull/2201#discussion_r543148470", "createdAt": "2020-12-15T08:39:57Z", "author": {"login": "bantonsson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/DDSpanContext.java", "diffHunk": "@@ -386,7 +379,10 @@ void setAllTags(final Map<String, ? extends Object> map) {\n \n     synchronized (unsafeTags) {\n       for (final Map.Entry<String, ? extends Object> tag : map.entrySet()) {\n-        if (!tracer.getTagInterceptor().interceptTag(exclusiveSpan, tag.getKey(), tag.getValue())) {\n+        if (!trace\n+            .getTracer()\n+            .getTagInterceptor()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37fbfa22c5fda838f95fc4fdee9bcce46a10a2b7"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE3NjA0Mg==", "bodyText": "Done", "url": "https://github.com/DataDog/dd-trace-java/pull/2201#discussion_r543176042", "createdAt": "2020-12-15T09:20:36Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/DDSpanContext.java", "diffHunk": "@@ -386,7 +379,10 @@ void setAllTags(final Map<String, ? extends Object> map) {\n \n     synchronized (unsafeTags) {\n       for (final Map.Entry<String, ? extends Object> tag : map.entrySet()) {\n-        if (!tracer.getTagInterceptor().interceptTag(exclusiveSpan, tag.getKey(), tag.getValue())) {\n+        if (!trace\n+            .getTracer()\n+            .getTagInterceptor()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE0ODQ3MA=="}, "originalCommit": {"oid": "37fbfa22c5fda838f95fc4fdee9bcce46a10a2b7"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjgwOTgxOnYy", "diffSide": "LEFT", "path": "dd-trace-core/src/main/java/datadog/trace/core/DDSpanContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODo1MzozOVrOIF_tmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODo1MzozOVrOIF_tmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1NzY1Ng==", "bodyText": "Nice find.", "url": "https://github.com/DataDog/dd-trace-java/pull/2201#discussion_r543157656", "createdAt": "2020-12-15T08:53:39Z", "author": {"login": "bantonsson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/DDSpanContext.java", "diffHunk": "@@ -89,8 +89,6 @@\n \n   private final Map<String, String> serviceNameMappings;\n \n-  private final ExclusiveSpan exclusiveSpan;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcaef74909465018bc959b98e7e828442b8de343"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDUwNzM4OnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/core/DDSpanContext.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDo0OTo0MFrOIGPMiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNToxODoyNlrOIGQsUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQxMTMzNg==", "bodyText": "Needs some sort of GuardedBy comment.", "url": "https://github.com/DataDog/dd-trace-java/pull/2201#discussion_r543411336", "createdAt": "2020-12-15T14:49:40Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/DDSpanContext.java", "diffHunk": "@@ -80,11 +87,7 @@\n   /** The origin of the trace. (eg. Synthetics) */\n   private final String origin;\n   /** Metrics on the span */\n-  private final AtomicReference<Map<CharSequence, Number>> metrics = new AtomicReference<>();\n-\n-  private final Map<String, String> serviceNameMappings;\n-\n-  private final ExclusiveSpan exclusiveSpan;\n+  private volatile Map<CharSequence, Number> metrics = EMPTY_METRICS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba6c3d7d1b662685f7b2b53fa891585d1985986f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQyNzEyOQ==", "bodyText": "I'm not so sure it does. It's clearly synchronized where accessed.", "url": "https://github.com/DataDog/dd-trace-java/pull/2201#discussion_r543427129", "createdAt": "2020-12-15T15:08:12Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/DDSpanContext.java", "diffHunk": "@@ -80,11 +87,7 @@\n   /** The origin of the trace. (eg. Synthetics) */\n   private final String origin;\n   /** Metrics on the span */\n-  private final AtomicReference<Map<CharSequence, Number>> metrics = new AtomicReference<>();\n-\n-  private final Map<String, String> serviceNameMappings;\n-\n-  private final ExclusiveSpan exclusiveSpan;\n+  private volatile Map<CharSequence, Number> metrics = EMPTY_METRICS;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQxMTMzNg=="}, "originalCommit": {"oid": "ba6c3d7d1b662685f7b2b53fa891585d1985986f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQzMjk2NQ==", "bodyText": "yes, but synchronized on spanId, which I have no objection to... just not obvious.", "url": "https://github.com/DataDog/dd-trace-java/pull/2201#discussion_r543432965", "createdAt": "2020-12-15T15:15:04Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/DDSpanContext.java", "diffHunk": "@@ -80,11 +87,7 @@\n   /** The origin of the trace. (eg. Synthetics) */\n   private final String origin;\n   /** Metrics on the span */\n-  private final AtomicReference<Map<CharSequence, Number>> metrics = new AtomicReference<>();\n-\n-  private final Map<String, String> serviceNameMappings;\n-\n-  private final ExclusiveSpan exclusiveSpan;\n+  private volatile Map<CharSequence, Number> metrics = EMPTY_METRICS;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQxMTMzNg=="}, "originalCommit": {"oid": "ba6c3d7d1b662685f7b2b53fa891585d1985986f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQzNTg1Nw==", "bodyText": "there was already a comment in the relevant synchronized block, which was added precisely because it wasn't obvious. That said, I hadn't clocked that we're also doing a map lookup each time we want to check what the sampling priority is, so added a properly synchronized method to do that. I will change the representation of the sampling to something a bit leaner in a follow up PR.", "url": "https://github.com/DataDog/dd-trace-java/pull/2201#discussion_r543435857", "createdAt": "2020-12-15T15:18:26Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/DDSpanContext.java", "diffHunk": "@@ -80,11 +87,7 @@\n   /** The origin of the trace. (eg. Synthetics) */\n   private final String origin;\n   /** Metrics on the span */\n-  private final AtomicReference<Map<CharSequence, Number>> metrics = new AtomicReference<>();\n-\n-  private final Map<String, String> serviceNameMappings;\n-\n-  private final ExclusiveSpan exclusiveSpan;\n+  private volatile Map<CharSequence, Number> metrics = EMPTY_METRICS;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQxMTMzNg=="}, "originalCommit": {"oid": "ba6c3d7d1b662685f7b2b53fa891585d1985986f"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDY4NzEwOnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/core/DDSpanContext.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNToyMTo0MVrOIGQ38A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNTozODo0OFrOIGRxGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQzODgzMg==", "bodyText": "This method should probably be removed since access to the map is no longer thread safe and the guarding lock is private. How widely is it used?", "url": "https://github.com/DataDog/dd-trace-java/pull/2201#discussion_r543438832", "createdAt": "2020-12-15T15:21:41Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/DDSpanContext.java", "diffHunk": "@@ -342,22 +340,32 @@ public PendingTrace getTrace() {\n \n   @Deprecated\n   public CoreTracer getTracer() {\n-    return tracer;\n+    return trace.getTracer();\n   }\n \n   public Map<CharSequence, Number> getMetrics() {\n-    final Map<CharSequence, Number> metrics = this.metrics.get();\n-    return metrics == null ? EMPTY_METRICS : metrics;\n+    return metrics;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f0d1da9ec54b1602fc62215d6d7ac2cea33a69b"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ1MTMzMw==", "bodyText": "it's only accessed from a single thread after the span has been finished. The writes to the map are synchronized in case they come from different threads, but after the context is effectively sealed it's let out, in much the same way the unsafeTags are, and this makes it much cheaper to iterate over.", "url": "https://github.com/DataDog/dd-trace-java/pull/2201#discussion_r543451333", "createdAt": "2020-12-15T15:36:16Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/DDSpanContext.java", "diffHunk": "@@ -342,22 +340,32 @@ public PendingTrace getTrace() {\n \n   @Deprecated\n   public CoreTracer getTracer() {\n-    return tracer;\n+    return trace.getTracer();\n   }\n \n   public Map<CharSequence, Number> getMetrics() {\n-    final Map<CharSequence, Number> metrics = this.metrics.get();\n-    return metrics == null ? EMPTY_METRICS : metrics;\n+    return metrics;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQzODgzMg=="}, "originalCommit": {"oid": "1f0d1da9ec54b1602fc62215d6d7ac2cea33a69b"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ1MzQ2NQ==", "bodyText": "The method should probably be renamed to \"unsafe\" or document the specific use case it is enabling then.", "url": "https://github.com/DataDog/dd-trace-java/pull/2201#discussion_r543453465", "createdAt": "2020-12-15T15:38:48Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/DDSpanContext.java", "diffHunk": "@@ -342,22 +340,32 @@ public PendingTrace getTrace() {\n \n   @Deprecated\n   public CoreTracer getTracer() {\n-    return tracer;\n+    return trace.getTracer();\n   }\n \n   public Map<CharSequence, Number> getMetrics() {\n-    final Map<CharSequence, Number> metrics = this.metrics.get();\n-    return metrics == null ? EMPTY_METRICS : metrics;\n+    return metrics;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQzODgzMg=="}, "originalCommit": {"oid": "1f0d1da9ec54b1602fc62215d6d7ac2cea33a69b"}, "originalPosition": 198}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4542, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}